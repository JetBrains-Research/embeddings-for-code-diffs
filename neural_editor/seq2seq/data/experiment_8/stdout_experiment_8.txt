
====STARTING TRAINING====
{'ADDITION_TOKEN': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 50,
 'DATASET_ROOT': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': '—É–¥–∞–ª–µ–Ω–∏–µ',
 'DEVICE': device(type='cuda', index=0),
 'DIVERSITY_STRENGTH': None,
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 10,
 'EDIT_REPRESENTATION_SIZE': 512,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_GROUPS': 1,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '../../../embeddings-for-code-diffs-data/experiment_8/',
 'PADDING_TOKEN': '–ø–∞–¥–¥–∏–Ω–≥',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': '–∑–∞–º–µ–Ω–∞',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TOP_K': [1, 3, 5, 10, 50],
 'TSNE_BATCH_SIZE': 1024,
 'TUFANO_BUG_FIXES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'TUFANO_BUG_FIXES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/50_100',
 'TUFANO_CODE_CHANGES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'TUFANO_CODE_CHANGES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'TUFANO_LABELED_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'UNCHANGED_TOKEN': '—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'USE_EDIT_REPRESENTATION': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∑–∞–º–µ–Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
diff_prev: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_updated: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; } 

Most common words:
 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ     606749
         (     370366
         )     370366
         .     174374
         ;     158794
         ,     101876
         {      80764
         }      80764
     VAR_1      79696
     VAR_2      54916 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
05 (
06 )
07 .
08 ;
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 43
—É–¥–∞–ª–µ–Ω–∏–µ 41184 17
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 37
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 606749 4
–ø–∞–¥–¥–∏–Ω–≥ 54790 14
Number of words (types): 759
Epoch 0 / 1000
Epoch Step: 5 / 138 Loss: 388.65435791015625 Tokens per Sec: 13790.929289573318
Epoch Step: 10 / 138 Loss: 466.5650939941406 Tokens per Sec: 17553.7108666776
Epoch Step: 15 / 138 Loss: 571.1096801757812 Tokens per Sec: 18585.607190834726
Epoch Step: 20 / 138 Loss: 415.6990661621094 Tokens per Sec: 18050.090479713195
Epoch Step: 25 / 138 Loss: 334.1034240722656 Tokens per Sec: 17510.467135152587
Epoch Step: 30 / 138 Loss: 326.9436950683594 Tokens per Sec: 18125.064991655574
Epoch Step: 35 / 138 Loss: 273.6468811035156 Tokens per Sec: 18275.52966136283
Epoch Step: 40 / 138 Loss: 326.0657653808594 Tokens per Sec: 19548.39025486141
Epoch Step: 45 / 138 Loss: 371.8502502441406 Tokens per Sec: 19331.139731387993
Epoch Step: 50 / 138 Loss: 238.1187744140625 Tokens per Sec: 19529.39635675926
Epoch Step: 55 / 138 Loss: 333.3720703125 Tokens per Sec: 18851.798672238787
Epoch Step: 60 / 138 Loss: 219.80319213867188 Tokens per Sec: 18814.197007815874
Epoch Step: 65 / 138 Loss: 325.61590576171875 Tokens per Sec: 19894.38817660975
Epoch Step: 70 / 138 Loss: 242.5877227783203 Tokens per Sec: 17876.337554593316
Epoch Step: 75 / 138 Loss: 226.38230895996094 Tokens per Sec: 18522.94569398701
Epoch Step: 80 / 138 Loss: 196.36231994628906 Tokens per Sec: 19315.230068812743
Epoch Step: 85 / 138 Loss: 299.8294372558594 Tokens per Sec: 18892.433856109474
Epoch Step: 90 / 138 Loss: 240.21371459960938 Tokens per Sec: 17529.642716696722
Epoch Step: 95 / 138 Loss: 228.80841064453125 Tokens per Sec: 18068.529242109038
Epoch Step: 100 / 138 Loss: 244.74920654296875 Tokens per Sec: 18376.293429543526
Epoch Step: 105 / 138 Loss: 219.2939910888672 Tokens per Sec: 18079.30883457491
Epoch Step: 110 / 138 Loss: 245.7619171142578 Tokens per Sec: 17788.325367677473
Epoch Step: 115 / 138 Loss: 291.1092529296875 Tokens per Sec: 17331.53537047695
Epoch Step: 120 / 138 Loss: 322.9502258300781 Tokens per Sec: 16738.150079081483
Epoch Step: 125 / 138 Loss: 302.54595947265625 Tokens per Sec: 18263.084169462363
Epoch Step: 130 / 138 Loss: 204.6865234375 Tokens per Sec: 17232.57468360407
Epoch Step: 135 / 138 Loss: 187.02467346191406 Tokens per Sec: 17601.616049889974
Epoch ended with duration 0:00:35.274801
Train perplexity: 60.63275797645752
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:01.429647
Validation perplexity: 24.308427702833207
Model saved best_on_validation!
Model saved checkpoint!
Epoch 1 / 1000
Epoch Step: 5 / 138 Loss: 184.04757690429688 Tokens per Sec: 18379.28912164828
Epoch Step: 10 / 138 Loss: 223.0630645751953 Tokens per Sec: 19876.56723284704
Epoch Step: 15 / 138 Loss: 249.70765686035156 Tokens per Sec: 17316.86490101535
Epoch Step: 20 / 138 Loss: 254.5980987548828 Tokens per Sec: 18657.863047237835
Epoch Step: 25 / 138 Loss: 232.70602416992188 Tokens per Sec: 18815.00004294543
Epoch Step: 30 / 138 Loss: 294.6026611328125 Tokens per Sec: 19097.45948200151
Epoch Step: 35 / 138 Loss: 169.03948974609375 Tokens per Sec: 18075.00844975164
Epoch Step: 40 / 138 Loss: 164.30276489257812 Tokens per Sec: 19542.01460619326
Epoch Step: 45 / 138 Loss: 246.47744750976562 Tokens per Sec: 19886.891049382233
Epoch Step: 50 / 138 Loss: 184.1223602294922 Tokens per Sec: 17570.46224322448
Epoch Step: 55 / 138 Loss: 203.57080078125 Tokens per Sec: 18490.322188119168
Epoch Step: 60 / 138 Loss: 207.83316040039062 Tokens per Sec: 19219.126668791127
Epoch Step: 65 / 138 Loss: 187.69529724121094 Tokens per Sec: 19225.023761633453
Epoch Step: 70 / 138 Loss: 199.01211547851562 Tokens per Sec: 17719.266391505113
Epoch Step: 75 / 138 Loss: 184.4277801513672 Tokens per Sec: 18230.9606982709
Epoch Step: 80 / 138 Loss: 274.1329650878906 Tokens per Sec: 18122.792762394336
Epoch Step: 85 / 138 Loss: 228.85000610351562 Tokens per Sec: 17390.370360327786
Epoch Step: 90 / 138 Loss: 266.77789306640625 Tokens per Sec: 18659.684613619866
Epoch Step: 95 / 138 Loss: 211.34188842773438 Tokens per Sec: 18558.019326845304
Epoch Step: 100 / 138 Loss: 217.60633850097656 Tokens per Sec: 18016.029275334236
Epoch Step: 105 / 138 Loss: 217.70693969726562 Tokens per Sec: 16663.59099603237
Epoch Step: 110 / 138 Loss: 193.05482482910156 Tokens per Sec: 17058.47925171357
Epoch Step: 115 / 138 Loss: 269.8412170410156 Tokens per Sec: 18078.648548545585
Epoch Step: 120 / 138 Loss: 188.22171020507812 Tokens per Sec: 17884.969629880616
Epoch Step: 125 / 138 Loss: 243.5053253173828 Tokens per Sec: 18081.553408391486
Epoch Step: 130 / 138 Loss: 187.41497802734375 Tokens per Sec: 17339.569481886523
Epoch Step: 135 / 138 Loss: 195.50540161132812 Tokens per Sec: 18214.170805441434
Epoch ended with duration 0:00:34.948538
Train perplexity: 19.519872611788138
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_2 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 ) { TYPE_1 . METHOD_2 ( ) { if ( ) ; }[0m
Epoch ended with duration 0:00:01.437967
Validation perplexity: 15.927411822285107
Model saved best_on_validation!
Epoch 2 / 1000
Epoch Step: 5 / 138 Loss: 184.09288024902344 Tokens per Sec: 18172.79303338985
Epoch Step: 10 / 138 Loss: 225.7998504638672 Tokens per Sec: 18187.25904755247
Epoch Step: 15 / 138 Loss: 158.74127197265625 Tokens per Sec: 17049.64620685753
Epoch Step: 20 / 138 Loss: 194.82884216308594 Tokens per Sec: 17785.879854654344
Epoch Step: 25 / 138 Loss: 154.0300750732422 Tokens per Sec: 17081.736913409302
Epoch Step: 30 / 138 Loss: 139.04489135742188 Tokens per Sec: 18318.176356462485
Epoch Step: 35 / 138 Loss: 205.92062377929688 Tokens per Sec: 18153.944842643858
Epoch Step: 40 / 138 Loss: 252.98765563964844 Tokens per Sec: 18748.58420460062
Epoch Step: 45 / 138 Loss: 184.5347137451172 Tokens per Sec: 18150.217625772315
Epoch Step: 50 / 138 Loss: 177.79815673828125 Tokens per Sec: 18472.76577478294
Epoch Step: 55 / 138 Loss: 178.3480224609375 Tokens per Sec: 19218.05301066985
Epoch Step: 60 / 138 Loss: 162.14389038085938 Tokens per Sec: 18151.206459447916
Epoch Step: 65 / 138 Loss: 152.8372344970703 Tokens per Sec: 20183.166329340245
Epoch Step: 70 / 138 Loss: 217.5132598876953 Tokens per Sec: 19571.168980522307
Epoch Step: 75 / 138 Loss: 175.9617462158203 Tokens per Sec: 18270.070560439726
Epoch Step: 80 / 138 Loss: 155.72262573242188 Tokens per Sec: 19555.446736552563
Epoch Step: 85 / 138 Loss: 222.6685791015625 Tokens per Sec: 20068.161596253543
Epoch Step: 90 / 138 Loss: 195.5414581298828 Tokens per Sec: 20401.191326369924
Epoch Step: 95 / 138 Loss: 209.19091796875 Tokens per Sec: 16936.32030651423
Epoch Step: 100 / 138 Loss: 140.74981689453125 Tokens per Sec: 19311.263626894197
Epoch Step: 105 / 138 Loss: 139.06082153320312 Tokens per Sec: 17351.66927910835
Epoch Step: 110 / 138 Loss: 244.6469268798828 Tokens per Sec: 15959.452558545252
Epoch Step: 115 / 138 Loss: 200.5191192626953 Tokens per Sec: 18026.257691025894
Epoch Step: 120 / 138 Loss: 187.54078674316406 Tokens per Sec: 17943.213739042272
Epoch Step: 125 / 138 Loss: 232.3385772705078 Tokens per Sec: 17788.08127567301
Epoch Step: 130 / 138 Loss: 224.24578857421875 Tokens per Sec: 18617.628004395956
Epoch Step: 135 / 138 Loss: 172.37567138671875 Tokens per Sec: 17610.693035917284
Epoch ended with duration 0:00:34.824662
Train perplexity: 14.209852594995628
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 , java.lang.String , VAR_1 , VAR_1 , VAR_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 , java.lang.String , VAR_1 , VAR_1 , VAR_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 , VAR_1 , VAR_1 ) { if ( ) { if ( ) { if ( ) ; }[0m
Epoch ended with duration 0:00:01.447145
Validation perplexity: 12.249887664441983
Model saved best_on_validation!
Epoch 3 / 1000
Epoch Step: 5 / 138 Loss: 196.9063720703125 Tokens per Sec: 19456.94974818033
Epoch Step: 10 / 138 Loss: 159.05322265625 Tokens per Sec: 18962.389721646035
Epoch Step: 15 / 138 Loss: 226.46731567382812 Tokens per Sec: 20352.28837525308
Epoch Step: 20 / 138 Loss: 173.6011199951172 Tokens per Sec: 18434.11080736293
Epoch Step: 25 / 138 Loss: 201.36614990234375 Tokens per Sec: 19531.37129434749
Epoch Step: 30 / 138 Loss: 167.9149169921875 Tokens per Sec: 19145.16812637333
Epoch Step: 35 / 138 Loss: 132.91078186035156 Tokens per Sec: 18743.715296882197
Epoch Step: 40 / 138 Loss: 195.08309936523438 Tokens per Sec: 19051.07157568234
Epoch Step: 45 / 138 Loss: 127.02130889892578 Tokens per Sec: 17344.468415671075
Epoch Step: 50 / 138 Loss: 228.82955932617188 Tokens per Sec: 18656.157701265853
Epoch Step: 55 / 138 Loss: 155.4372100830078 Tokens per Sec: 18387.019283354337
Epoch Step: 60 / 138 Loss: 223.3696746826172 Tokens per Sec: 19466.55557593055
Epoch Step: 65 / 138 Loss: 173.37753295898438 Tokens per Sec: 19993.83638577822
Epoch Step: 70 / 138 Loss: 171.3680419921875 Tokens per Sec: 17429.578385707286
Epoch Step: 75 / 138 Loss: 159.3518524169922 Tokens per Sec: 17218.610433877617
Epoch Step: 80 / 138 Loss: 219.70834350585938 Tokens per Sec: 18787.01415124691
Epoch Step: 85 / 138 Loss: 207.51870727539062 Tokens per Sec: 19306.988899746848
Epoch Step: 90 / 138 Loss: 177.0989990234375 Tokens per Sec: 18576.43464548882
Epoch Step: 95 / 138 Loss: 243.88882446289062 Tokens per Sec: 19280.96977752946
Epoch Step: 100 / 138 Loss: 181.4413299560547 Tokens per Sec: 18420.473399454688
Epoch Step: 105 / 138 Loss: 188.94215393066406 Tokens per Sec: 18881.508393217584
Epoch Step: 110 / 138 Loss: 123.66752624511719 Tokens per Sec: 17687.392633575302
Epoch Step: 115 / 138 Loss: 160.25572204589844 Tokens per Sec: 17555.689826740072
Epoch Step: 120 / 138 Loss: 130.9642791748047 Tokens per Sec: 17611.8019863953
Epoch Step: 125 / 138 Loss: 199.71884155273438 Tokens per Sec: 18528.12883575223
Epoch Step: 130 / 138 Loss: 130.27059936523438 Tokens per Sec: 17273.455520858326
Epoch Step: 135 / 138 Loss: 141.26246643066406 Tokens per Sec: 17843.037209911156
Epoch ended with duration 0:00:34.462289
Train perplexity: 11.335394344817642
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 > METHOD_1 ( ) { TYPE_1 > VAR_1 = new TYPE_1 > VAR_1 = new TYPE_1 > VAR_1 = new TYPE_1 > VAR_1 = new TYPE_1 . METHOD_2 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( VAR_1 ) { if ( ( ) { if ( ( ) { if ( ) ; }[0m
Epoch ended with duration 0:00:01.432607
Validation perplexity: 9.912960711687283
Model saved best_on_validation!
Epoch 4 / 1000
Epoch Step: 5 / 138 Loss: 168.16905212402344 Tokens per Sec: 18122.100104302823
Epoch Step: 10 / 138 Loss: 124.0032958984375 Tokens per Sec: 19460.510157170622
Epoch Step: 15 / 138 Loss: 184.05047607421875 Tokens per Sec: 17332.42971504296
Epoch Step: 20 / 138 Loss: 184.9170684814453 Tokens per Sec: 18773.052338654154
Epoch Step: 25 / 138 Loss: 130.5045166015625 Tokens per Sec: 19542.60114472452
Epoch Step: 30 / 138 Loss: 117.83212280273438 Tokens per Sec: 20043.179092222366
Epoch Step: 35 / 138 Loss: 143.9907989501953 Tokens per Sec: 19046.954134467796
Epoch Step: 40 / 138 Loss: 190.3338623046875 Tokens per Sec: 18875.147469241107
Epoch Step: 45 / 138 Loss: 156.52392578125 Tokens per Sec: 16955.997208177796
Epoch Step: 50 / 138 Loss: 158.68252563476562 Tokens per Sec: 20953.860972802733
Epoch Step: 55 / 138 Loss: 182.69790649414062 Tokens per Sec: 19258.038385360014
Epoch Step: 60 / 138 Loss: 211.7983856201172 Tokens per Sec: 19675.292260369213
Epoch Step: 65 / 138 Loss: 140.4955596923828 Tokens per Sec: 17948.986750942564
Epoch Step: 70 / 138 Loss: 144.72071838378906 Tokens per Sec: 17278.035038735095
Epoch Step: 75 / 138 Loss: 207.05421447753906 Tokens per Sec: 19861.137359895114
Epoch Step: 80 / 138 Loss: 206.8795623779297 Tokens per Sec: 19016.57018984344
Epoch Step: 85 / 138 Loss: 156.41171264648438 Tokens per Sec: 19210.010688996612
Epoch Step: 90 / 138 Loss: 186.12290954589844 Tokens per Sec: 19319.313884717867
Epoch Step: 95 / 138 Loss: 189.15440368652344 Tokens per Sec: 18796.845546584842
Epoch Step: 100 / 138 Loss: 180.6815643310547 Tokens per Sec: 18818.434403288535
Epoch Step: 105 / 138 Loss: 156.4374542236328 Tokens per Sec: 18473.86755495642
Epoch Step: 110 / 138 Loss: 197.26235961914062 Tokens per Sec: 17144.83436761349
Epoch Step: 115 / 138 Loss: 212.3903045654297 Tokens per Sec: 17870.215867587
Epoch Step: 120 / 138 Loss: 203.50965881347656 Tokens per Sec: 17751.25979147035
Epoch Step: 125 / 138 Loss: 216.18997192382812 Tokens per Sec: 15655.993999891034
Epoch Step: 130 / 138 Loss: 182.3725128173828 Tokens per Sec: 17572.873564917067
Epoch Step: 135 / 138 Loss: 150.38136291503906 Tokens per Sec: 18571.46513688077
Epoch ended with duration 0:00:34.324353
Train perplexity: 9.483736413269575
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 ) { TYPE_1 > > > > > > > > > > > > > > > > > > > > ( VAR_2 = new TYPE_1 . METHOD_2 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 ) { return VAR_2 = new[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ) { if ( ( ) { if ( ( ) { if ( ( ) ; if ( ( ) ; if ( ( ) ; } return ( ( ) ; }[0m
Epoch ended with duration 0:00:01.420596
Validation perplexity: 8.499814668212867
Model saved best_on_validation!
Epoch 5 / 1000
Epoch Step: 5 / 138 Loss: 201.56903076171875 Tokens per Sec: 15747.607512325229
Epoch Step: 10 / 138 Loss: 141.3685302734375 Tokens per Sec: 18789.929662830964
Epoch Step: 15 / 138 Loss: 169.47804260253906 Tokens per Sec: 20411.68347468364
Epoch Step: 20 / 138 Loss: 179.99215698242188 Tokens per Sec: 19014.81455459355
Epoch Step: 25 / 138 Loss: 195.20944213867188 Tokens per Sec: 19718.940038982568
Epoch Step: 30 / 138 Loss: 160.60882568359375 Tokens per Sec: 19460.40491608618
Epoch Step: 35 / 138 Loss: 179.38377380371094 Tokens per Sec: 19257.402771755715
Epoch Step: 40 / 138 Loss: 127.10397338867188 Tokens per Sec: 18910.934772131946
Epoch Step: 45 / 138 Loss: 182.54684448242188 Tokens per Sec: 18984.75096497989
Epoch Step: 50 / 138 Loss: 121.86003112792969 Tokens per Sec: 16199.189509597118
Epoch Step: 55 / 138 Loss: 185.3352813720703 Tokens per Sec: 17834.53647553732
Epoch Step: 60 / 138 Loss: 115.21675872802734 Tokens per Sec: 18941.00850422322
Epoch Step: 65 / 138 Loss: 116.15579986572266 Tokens per Sec: 17813.809138104796
Epoch Step: 70 / 138 Loss: 145.44082641601562 Tokens per Sec: 19588.80069992679
Epoch Step: 75 / 138 Loss: 134.62857055664062 Tokens per Sec: 19594.423303578915
Epoch Step: 80 / 138 Loss: 109.02352905273438 Tokens per Sec: 18994.548730957515
Epoch Step: 85 / 138 Loss: 132.3962860107422 Tokens per Sec: 18320.538648993643
Epoch Step: 90 / 138 Loss: 168.00595092773438 Tokens per Sec: 19842.005286995696
Epoch Step: 95 / 138 Loss: 146.4242401123047 Tokens per Sec: 19857.93796566603
Epoch Step: 100 / 138 Loss: 147.10931396484375 Tokens per Sec: 18797.388654568713
Epoch Step: 105 / 138 Loss: 195.3549346923828 Tokens per Sec: 16277.54846434793
Epoch Step: 110 / 138 Loss: 106.30982208251953 Tokens per Sec: 18015.727786315198
Epoch Step: 115 / 138 Loss: 113.92717742919922 Tokens per Sec: 17523.483866966697
Epoch Step: 120 / 138 Loss: 148.24844360351562 Tokens per Sec: 17669.31838789654
Epoch Step: 125 / 138 Loss: 112.90924072265625 Tokens per Sec: 17720.876712696787
Epoch Step: 130 / 138 Loss: 121.46529388427734 Tokens per Sec: 17646.049426343867
Epoch Step: 135 / 138 Loss: 124.07373046875 Tokens per Sec: 18388.196084507294
Epoch ended with duration 0:00:34.555956
Train perplexity: 8.283363259720566
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 ) { TYPE_1 > > > > > > > > > > > > ( VAR_2 ) ; } return new java.util.ArrayList < > ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , VAR_2 , VAR_2 , VAR_2 ) { return VAR_2 . METHOD_2 ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ) ) { if ( ( ( ) ) { if ( ( ) ; if ( ( ) ; }[0m
Epoch ended with duration 0:00:01.413834
Validation perplexity: 7.522837113251266
Model saved best_on_validation!
Model saved checkpoint!
Epoch 6 / 1000
Epoch Step: 5 / 138 Loss: 132.62005615234375 Tokens per Sec: 18747.844667029018
Epoch Step: 10 / 138 Loss: 193.3119354248047 Tokens per Sec: 19280.610683659677
Epoch Step: 15 / 138 Loss: 123.18980407714844 Tokens per Sec: 18416.21117789555
Epoch Step: 20 / 138 Loss: 152.3377227783203 Tokens per Sec: 19732.353480609192
Epoch Step: 25 / 138 Loss: 155.3084259033203 Tokens per Sec: 18707.286887290415
Epoch Step: 30 / 138 Loss: 108.6868896484375 Tokens per Sec: 19994.96890831159
Epoch Step: 35 / 138 Loss: 136.93052673339844 Tokens per Sec: 18650.896929182683
Epoch Step: 40 / 138 Loss: 126.71794128417969 Tokens per Sec: 19521.75093806168
Epoch Step: 45 / 138 Loss: 108.28194427490234 Tokens per Sec: 17911.80127285962
Epoch Step: 50 / 138 Loss: 127.78739166259766 Tokens per Sec: 19095.300540900324
Epoch Step: 55 / 138 Loss: 154.15061950683594 Tokens per Sec: 20605.014280093794
Epoch Step: 60 / 138 Loss: 141.20408630371094 Tokens per Sec: 19498.902562433443
Epoch Step: 65 / 138 Loss: 131.5090789794922 Tokens per Sec: 17946.33944571708
Epoch Step: 70 / 138 Loss: 159.09024047851562 Tokens per Sec: 19250.065602431685
Epoch Step: 75 / 138 Loss: 163.71238708496094 Tokens per Sec: 18526.238719792927
Epoch Step: 80 / 138 Loss: 123.64519500732422 Tokens per Sec: 18356.22945018105
Epoch Step: 85 / 138 Loss: 185.2988739013672 Tokens per Sec: 20172.602435754387
Epoch Step: 90 / 138 Loss: 130.80813598632812 Tokens per Sec: 17259.67341239911
Epoch Step: 95 / 138 Loss: 125.25973510742188 Tokens per Sec: 18811.93080350759
Epoch Step: 100 / 138 Loss: 125.17339324951172 Tokens per Sec: 17995.76632345052
Epoch Step: 105 / 138 Loss: 170.32376098632812 Tokens per Sec: 18615.66268558027
Epoch Step: 110 / 138 Loss: 159.50311279296875 Tokens per Sec: 17674.685798857885
Epoch Step: 115 / 138 Loss: 137.48403930664062 Tokens per Sec: 15996.691939900338
Epoch Step: 120 / 138 Loss: 123.91737365722656 Tokens per Sec: 18359.772663196378
Epoch Step: 125 / 138 Loss: 119.96499633789062 Tokens per Sec: 17779.190606285454
Epoch Step: 130 / 138 Loss: 144.38674926757812 Tokens per Sec: 17960.52745505062
Epoch Step: 135 / 138 Loss: 99.75279235839844 Tokens per Sec: 18592.738475176342
Epoch ended with duration 0:00:34.267061
Train perplexity: 7.390223378363151
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String , java.lang.String , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > > > > > > > > > > ( VAR_2 ) ; for ( VAR_2 ) ; } return new TYPE_1 . METHOD_2 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ) ) { if ( ( ( ) ) { if ( ( VAR_1 ) ; if ( ( STRING_1 , VAR_2 ) ) ; }[0m
Epoch ended with duration 0:00:01.410213
Validation perplexity: 6.6609384229430315
Model saved best_on_validation!
Epoch 7 / 1000
Epoch Step: 5 / 138 Loss: 141.33837890625 Tokens per Sec: 18743.941441759634
Epoch Step: 10 / 138 Loss: 124.77582550048828 Tokens per Sec: 18846.890449857114
Epoch Step: 15 / 138 Loss: 163.43942260742188 Tokens per Sec: 17904.38250238647
Epoch Step: 20 / 138 Loss: 127.43186950683594 Tokens per Sec: 20562.04800652091
Epoch Step: 25 / 138 Loss: 127.24794006347656 Tokens per Sec: 18497.709278510803
Epoch Step: 30 / 138 Loss: 117.14453125 Tokens per Sec: 18605.299409936524
Epoch Step: 35 / 138 Loss: 116.77925109863281 Tokens per Sec: 19996.63604206011
Epoch Step: 40 / 138 Loss: 121.56654357910156 Tokens per Sec: 17939.402741599908
Epoch Step: 45 / 138 Loss: 137.96295166015625 Tokens per Sec: 19232.368265468664
Epoch Step: 50 / 138 Loss: 185.04571533203125 Tokens per Sec: 20169.770660686696
Epoch Step: 55 / 138 Loss: 167.0863800048828 Tokens per Sec: 19510.98675412403
Epoch Step: 60 / 138 Loss: 106.94782257080078 Tokens per Sec: 18773.898426259155
Epoch Step: 65 / 138 Loss: 115.57564544677734 Tokens per Sec: 18479.83725442414
Epoch Step: 70 / 138 Loss: 172.76300048828125 Tokens per Sec: 18443.125323444663
Epoch Step: 75 / 138 Loss: 177.6627197265625 Tokens per Sec: 20075.373052422226
Epoch Step: 80 / 138 Loss: 105.02206420898438 Tokens per Sec: 19219.029793835856
Epoch Step: 85 / 138 Loss: 135.35719299316406 Tokens per Sec: 18831.848176494266
Epoch Step: 90 / 138 Loss: 168.85809326171875 Tokens per Sec: 18874.99360980012
Epoch Step: 95 / 138 Loss: 114.39564514160156 Tokens per Sec: 18730.53660619135
Epoch Step: 100 / 138 Loss: 117.51102447509766 Tokens per Sec: 17947.154400575673
Epoch Step: 105 / 138 Loss: 120.46349334716797 Tokens per Sec: 17024.53520530924
Epoch Step: 110 / 138 Loss: 144.1541290283203 Tokens per Sec: 17915.63640090405
Epoch Step: 115 / 138 Loss: 148.77166748046875 Tokens per Sec: 18103.755894786278
Epoch Step: 120 / 138 Loss: 115.875 Tokens per Sec: 17844.691010275747
Epoch Step: 125 / 138 Loss: 163.6793975830078 Tokens per Sec: 16300.822665234964
Epoch Step: 130 / 138 Loss: 106.8277359008789 Tokens per Sec: 17195.894932725136
Epoch Step: 135 / 138 Loss: 101.14435577392578 Tokens per Sec: 17618.53838682399
Epoch ended with duration 0:00:34.336110
Train perplexity: 6.6478012155960435
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String > VAR_1 ) { java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( VAR_2 = new java.util.ArrayList < > ( ) ; for ( VAR_3 ) ; } return new TYPE_1 ( VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 ) { return VAR_1 . METHOD_3 ( ) ; } return VAR_1 . METHOD_3 ( ) ;[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ) ) == null ) { if ( ( VAR_1 ) { if ( VAR_3 ) ; if ( VAR_3 . METHOD_2 ( ) ) ; }[0m
Epoch ended with duration 0:00:01.418852
Validation perplexity: 6.0098535700178415
Model saved best_on_validation!
Epoch 8 / 1000
Epoch Step: 5 / 138 Loss: 152.99130249023438 Tokens per Sec: 18556.399716520027
Epoch Step: 10 / 138 Loss: 158.7794647216797 Tokens per Sec: 18319.431519662605
Epoch Step: 15 / 138 Loss: 97.87057495117188 Tokens per Sec: 16976.320463503096
Epoch Step: 20 / 138 Loss: 117.53961944580078 Tokens per Sec: 17739.955926197523
Epoch Step: 25 / 138 Loss: 120.03203582763672 Tokens per Sec: 19018.285437319362
Epoch Step: 30 / 138 Loss: 105.0528793334961 Tokens per Sec: 19370.461400124517
Epoch Step: 35 / 138 Loss: 138.9341278076172 Tokens per Sec: 19994.53329822077
Epoch Step: 40 / 138 Loss: 96.61962127685547 Tokens per Sec: 18159.88582921488
Epoch Step: 45 / 138 Loss: 103.42692565917969 Tokens per Sec: 18946.285269812655
Epoch Step: 50 / 138 Loss: 169.0100860595703 Tokens per Sec: 19312.487974299343
Epoch Step: 55 / 138 Loss: 118.11678314208984 Tokens per Sec: 17867.257065415986
Epoch Step: 60 / 138 Loss: 166.7906036376953 Tokens per Sec: 19565.138718273774
Epoch Step: 65 / 138 Loss: 140.73509216308594 Tokens per Sec: 19301.211527980297
Epoch Step: 70 / 138 Loss: 106.97813415527344 Tokens per Sec: 18550.054242915267
Epoch Step: 75 / 138 Loss: 143.14212036132812 Tokens per Sec: 18088.29378224303
Epoch Step: 80 / 138 Loss: 89.14651489257812 Tokens per Sec: 19800.00729177948
Epoch Step: 85 / 138 Loss: 99.9308853149414 Tokens per Sec: 20060.25189768022
Epoch Step: 90 / 138 Loss: 101.51968383789062 Tokens per Sec: 20056.61403082218
Epoch Step: 95 / 138 Loss: 102.84827423095703 Tokens per Sec: 18154.647718336393
Epoch Step: 100 / 138 Loss: 109.33228302001953 Tokens per Sec: 19814.317972455043
Epoch Step: 105 / 138 Loss: 185.2819366455078 Tokens per Sec: 16133.730998896408
Epoch Step: 110 / 138 Loss: 157.4841766357422 Tokens per Sec: 18607.85044408179
Epoch Step: 115 / 138 Loss: 167.6597900390625 Tokens per Sec: 18933.65264257899
Epoch Step: 120 / 138 Loss: 164.39222717285156 Tokens per Sec: 18502.350802394823
Epoch Step: 125 / 138 Loss: 105.24742889404297 Tokens per Sec: 17669.271008396423
Epoch Step: 130 / 138 Loss: 136.0475311279297 Tokens per Sec: 18003.972879121422
Epoch Step: 135 / 138 Loss: 113.12134552001953 Tokens per Sec: 17390.906972528966
Epoch ended with duration 0:00:34.298469
Train perplexity: 6.033040176031232
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static void METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 ) { java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( VAR_1 = new java.util.ArrayList < > ( ) ; for ( VAR_4 : VAR_1 ) { return new TYPE_1 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_1 ) { return VAR_1 = METHOD_2 ( ) ; if ( VAR_1 ) ; } return false ; } catch ( VAR_1 , VAR_3 , VAR_3 , VAR_4 , VAR_4 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ) ) ) && ( ! ( VAR_1 ) ) { if ( VAR_3 ) { VAR_3 = new TYPE_1 ( VAR_3 ) ; }[0m
Epoch ended with duration 0:00:01.417663
Validation perplexity: 5.428632890262376
Model saved best_on_validation!
Epoch 9 / 1000
Epoch Step: 5 / 138 Loss: 107.41984558105469 Tokens per Sec: 17706.268432730554
Epoch Step: 10 / 138 Loss: 149.56329345703125 Tokens per Sec: 18399.944511109356
Epoch Step: 15 / 138 Loss: 124.96492004394531 Tokens per Sec: 19725.685666294994
Epoch Step: 20 / 138 Loss: 89.62872314453125 Tokens per Sec: 18978.920489735312
Epoch Step: 25 / 138 Loss: 149.2369842529297 Tokens per Sec: 19080.206713087267
Epoch Step: 30 / 138 Loss: 89.89553833007812 Tokens per Sec: 19447.038242140792
Epoch Step: 35 / 138 Loss: 150.7950897216797 Tokens per Sec: 19351.253863386788
Epoch Step: 40 / 138 Loss: 111.88236999511719 Tokens per Sec: 18292.28842941257
Epoch Step: 45 / 138 Loss: 146.5073699951172 Tokens per Sec: 19690.510803315152
Epoch Step: 50 / 138 Loss: 97.25404357910156 Tokens per Sec: 18502.193415128462
Epoch Step: 55 / 138 Loss: 142.54531860351562 Tokens per Sec: 18958.354226396194
Epoch Step: 60 / 138 Loss: 167.96435546875 Tokens per Sec: 18471.64397514004
Epoch Step: 65 / 138 Loss: 148.33824157714844 Tokens per Sec: 20292.114738463122
Epoch Step: 70 / 138 Loss: 93.90185546875 Tokens per Sec: 19503.309768118037
Epoch Step: 75 / 138 Loss: 117.81964874267578 Tokens per Sec: 18690.413962479903
Epoch Step: 80 / 138 Loss: 149.1152801513672 Tokens per Sec: 18050.309741782417
Epoch Step: 85 / 138 Loss: 166.27890014648438 Tokens per Sec: 20172.01266153069
Epoch Step: 90 / 138 Loss: 134.55821228027344 Tokens per Sec: 17721.23726284725
Epoch Step: 95 / 138 Loss: 120.30742645263672 Tokens per Sec: 18426.231185304234
Epoch Step: 100 / 138 Loss: 163.39219665527344 Tokens per Sec: 19484.609612288088
Epoch Step: 105 / 138 Loss: 172.6273956298828 Tokens per Sec: 16028.608336160602
Epoch Step: 110 / 138 Loss: 144.86761474609375 Tokens per Sec: 17111.077852513245
Epoch Step: 115 / 138 Loss: 93.65066528320312 Tokens per Sec: 18767.013720472187
Epoch Step: 120 / 138 Loss: 155.66200256347656 Tokens per Sec: 18375.54083295922
Epoch Step: 125 / 138 Loss: 105.29428100585938 Tokens per Sec: 18668.861377375273
Epoch Step: 130 / 138 Loss: 163.5290985107422 Tokens per Sec: 18799.96480505041
Epoch Step: 135 / 138 Loss: 109.4910659790039 Tokens per Sec: 17376.277094575915
Epoch ended with duration 0:00:34.241704
Train perplexity: 5.484047691036723
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static void METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String > VAR_2 ) { java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; java.util.List < java.lang.String > > > > > > > ( new java.util.ArrayList < > ( ) ; for ( VAR_4 : VAR_1 ) { return new TYPE_1 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_3 , java.lang.String VAR_1 , java.lang.String VAR_1 ) { return null ; if ( VAR_1 . METHOD_3 ( ) , VAR_2 ) { return false ; } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ) ) != null ) && ( ! ( VAR_2 ) ) { if ( VAR_3 ) { VAR_3 = ( VAR_3 ) ; }[0m
Epoch ended with duration 0:00:01.427598
Validation perplexity: 4.991047763717865
Model saved best_on_validation!
Epoch 10 / 1000
Epoch Step: 5 / 138 Loss: 114.1436538696289 Tokens per Sec: 19444.359686792865
Epoch Step: 10 / 138 Loss: 146.75039672851562 Tokens per Sec: 18434.758603257796
Epoch Step: 15 / 138 Loss: 116.21607208251953 Tokens per Sec: 19553.93072750931
Epoch Step: 20 / 138 Loss: 124.71175384521484 Tokens per Sec: 19609.141838191204
Epoch Step: 25 / 138 Loss: 137.77639770507812 Tokens per Sec: 18144.388728945687
Epoch Step: 30 / 138 Loss: 149.1514892578125 Tokens per Sec: 19361.098344622078
Epoch Step: 35 / 138 Loss: 146.95101928710938 Tokens per Sec: 18898.312133630803
Epoch Step: 40 / 138 Loss: 97.83000946044922 Tokens per Sec: 19302.76525063926
Epoch Step: 45 / 138 Loss: 78.93102264404297 Tokens per Sec: 18775.512523183308
Epoch Step: 50 / 138 Loss: 101.84620666503906 Tokens per Sec: 19919.127520813956
Epoch Step: 55 / 138 Loss: 124.2907485961914 Tokens per Sec: 17890.192591938543
Epoch Step: 60 / 138 Loss: 130.05006408691406 Tokens per Sec: 19293.76216602212
Epoch Step: 65 / 138 Loss: 94.9855728149414 Tokens per Sec: 20297.366846659464
Epoch Step: 70 / 138 Loss: 97.49041748046875 Tokens per Sec: 18833.800386261733
Epoch Step: 75 / 138 Loss: 112.62757110595703 Tokens per Sec: 19144.283582923017
Epoch Step: 80 / 138 Loss: 115.30481719970703 Tokens per Sec: 18483.20410154609
Epoch Step: 85 / 138 Loss: 140.94863891601562 Tokens per Sec: 19494.722279794103
Epoch Step: 90 / 138 Loss: 123.46819305419922 Tokens per Sec: 18744.68585180113
Epoch Step: 95 / 138 Loss: 82.22565460205078 Tokens per Sec: 19210.559881819903
Epoch Step: 100 / 138 Loss: 91.2725601196289 Tokens per Sec: 17247.339314178174
Epoch Step: 105 / 138 Loss: 147.74740600585938 Tokens per Sec: 17853.49663280138
Epoch Step: 110 / 138 Loss: 98.09208679199219 Tokens per Sec: 18626.109516019817
Epoch Step: 115 / 138 Loss: 98.37379455566406 Tokens per Sec: 17067.027312935064
Epoch Step: 120 / 138 Loss: 98.34481811523438 Tokens per Sec: 18403.810032325313
Epoch Step: 125 / 138 Loss: 105.5597915649414 Tokens per Sec: 17420.081903791794
Epoch Step: 130 / 138 Loss: 118.67681884765625 Tokens per Sec: 18084.012827109695
Epoch Step: 135 / 138 Loss: 88.67897033691406 Tokens per Sec: 16355.172301629427
Epoch ended with duration 0:00:34.187205
Train perplexity: 5.000282161734711
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static void METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; java.util.List < java.lang.String > > > > > > ( new java.util.ArrayList < > ( ) ; for ( VAR_4 ) { return new TYPE_1 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_4 , java.lang.String VAR_4 , java.lang.String VAR_4 ) { return VAR_1 = METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) , VAR_3 , VAR_3 ) { return true ; } catch ( VAR_5 , VAR_5 , VAR_5 , e ) { throw new TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_6 ( ) . METHOD_6 ( ) . METHOD_6 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ! ( VAR_2 ) ) { if ( VAR_3 ) { VAR_3 = VAR_3 . METHOD_2 ( STRING_1 + STRING_2 ) ; }[0m
Epoch ended with duration 0:00:01.430570
Validation perplexity: 4.529179893297199
Model saved best_on_validation!
Model saved checkpoint!
Epoch 11 / 1000
Epoch Step: 5 / 138 Loss: 81.02210998535156 Tokens per Sec: 18345.640298455804
Epoch Step: 10 / 138 Loss: 105.56525421142578 Tokens per Sec: 19519.92531161319
Epoch Step: 15 / 138 Loss: 130.00022888183594 Tokens per Sec: 19219.910848800304
Epoch Step: 20 / 138 Loss: 93.33280944824219 Tokens per Sec: 17993.69378438605
Epoch Step: 25 / 138 Loss: 94.45542907714844 Tokens per Sec: 18998.405185998192
Epoch Step: 30 / 138 Loss: 96.51966094970703 Tokens per Sec: 19030.16036548008
Epoch Step: 35 / 138 Loss: 102.36289978027344 Tokens per Sec: 18215.740468641554
Epoch Step: 40 / 138 Loss: 72.65809631347656 Tokens per Sec: 18196.63881920494
Epoch Step: 45 / 138 Loss: 114.18586730957031 Tokens per Sec: 20777.815418479608
Epoch Step: 50 / 138 Loss: 121.4985122680664 Tokens per Sec: 18322.0911650999
Epoch Step: 55 / 138 Loss: 98.88165283203125 Tokens per Sec: 18422.64713239928
Epoch Step: 60 / 138 Loss: 151.49420166015625 Tokens per Sec: 20543.587811740606
Epoch Step: 65 / 138 Loss: 96.90554809570312 Tokens per Sec: 18788.47264575081
Epoch Step: 70 / 138 Loss: 131.25184631347656 Tokens per Sec: 18469.161588469287
Epoch Step: 75 / 138 Loss: 85.16971588134766 Tokens per Sec: 19414.135618217646
Epoch Step: 80 / 138 Loss: 130.02720642089844 Tokens per Sec: 18722.703797779723
Epoch Step: 85 / 138 Loss: 77.87400817871094 Tokens per Sec: 17955.739427870572
Epoch Step: 90 / 138 Loss: 100.4837417602539 Tokens per Sec: 19000.460166693232
Epoch Step: 95 / 138 Loss: 82.46593475341797 Tokens per Sec: 17728.54620584755
Epoch Step: 100 / 138 Loss: 124.34254455566406 Tokens per Sec: 19818.276919962176
Epoch Step: 105 / 138 Loss: 140.22250366210938 Tokens per Sec: 18721.920682661756
Epoch Step: 110 / 138 Loss: 117.43824768066406 Tokens per Sec: 17420.09698665716
Epoch Step: 115 / 138 Loss: 126.12176513671875 Tokens per Sec: 15865.279542123737
Epoch Step: 120 / 138 Loss: 91.47772216796875 Tokens per Sec: 17964.637666368035
Epoch Step: 125 / 138 Loss: 123.21758270263672 Tokens per Sec: 17724.662458662668
Epoch Step: 130 / 138 Loss: 139.48468017578125 Tokens per Sec: 18506.840869562082
Epoch Step: 135 / 138 Loss: 78.3602294921875 Tokens per Sec: 17698.12490172584
Epoch ended with duration 0:00:34.373785
Train perplexity: 4.572965071451189
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static void METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String > VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 > VAR_1 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . METHOD_2 ( ) , VAR_4 ) { return new TYPE_1 . METHOD_3 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , java.lang.String VAR_4 , java.lang.String VAR_4 ) { return VAR_1 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) , TYPE_2 . METHOD_4 ( VAR_3 , VAR_4 , VAR_4 , VAR_4 ) ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_6 ( ) . METHOD_6 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ! ( VAR_2 ) ) != null ) { if ( VAR_3 ) { VAR_3 = VAR_3 . METHOD_2 ( STRING_1 + STRING_2 ) ; }[0m
Epoch ended with duration 0:00:01.426285
Validation perplexity: 4.077547647478949
Model saved best_on_validation!
Epoch 12 / 1000
Epoch Step: 5 / 138 Loss: 123.07471466064453 Tokens per Sec: 19661.663825860996
Epoch Step: 10 / 138 Loss: 137.33485412597656 Tokens per Sec: 19391.610443116424
Epoch Step: 15 / 138 Loss: 101.78974914550781 Tokens per Sec: 18454.794427855286
Epoch Step: 20 / 138 Loss: 149.1622772216797 Tokens per Sec: 19471.908223645867
Epoch Step: 25 / 138 Loss: 104.92296600341797 Tokens per Sec: 19426.268123988364
Epoch Step: 30 / 138 Loss: 126.61014556884766 Tokens per Sec: 18715.84694330884
Epoch Step: 35 / 138 Loss: 85.14159393310547 Tokens per Sec: 18657.29297832468
Epoch Step: 40 / 138 Loss: 122.92365264892578 Tokens per Sec: 19096.77939419149
Epoch Step: 45 / 138 Loss: 70.68191528320312 Tokens per Sec: 19253.47175328868
Epoch Step: 50 / 138 Loss: 126.92052459716797 Tokens per Sec: 18565.385328274075
Epoch Step: 55 / 138 Loss: 105.26780700683594 Tokens per Sec: 19627.76414135991
Epoch Step: 60 / 138 Loss: 139.92825317382812 Tokens per Sec: 19596.93334713693
Epoch Step: 65 / 138 Loss: 87.127685546875 Tokens per Sec: 17794.07249375499
Epoch Step: 70 / 138 Loss: 76.8852767944336 Tokens per Sec: 18936.113282186452
Epoch Step: 75 / 138 Loss: 79.56602478027344 Tokens per Sec: 19716.035434651934
Epoch Step: 80 / 138 Loss: 124.50773620605469 Tokens per Sec: 18758.91120277655
Epoch Step: 85 / 138 Loss: 106.06301879882812 Tokens per Sec: 18831.28595218232
Epoch Step: 90 / 138 Loss: 88.69705200195312 Tokens per Sec: 16674.38812304934
Epoch Step: 95 / 138 Loss: 83.52726745605469 Tokens per Sec: 18824.398511163472
Epoch Step: 100 / 138 Loss: 74.00489807128906 Tokens per Sec: 18944.889696814167
Epoch Step: 105 / 138 Loss: 113.86296844482422 Tokens per Sec: 18264.281347614953
Epoch Step: 110 / 138 Loss: 125.49536895751953 Tokens per Sec: 18772.794340886776
Epoch Step: 115 / 138 Loss: 87.119140625 Tokens per Sec: 17970.33011546843
Epoch Step: 120 / 138 Loss: 113.40119171142578 Tokens per Sec: 16520.641354307118
Epoch Step: 125 / 138 Loss: 67.89824676513672 Tokens per Sec: 18663.05860977591
Epoch Step: 130 / 138 Loss: 132.29171752929688 Tokens per Sec: 18733.541908950898
Epoch Step: 135 / 138 Loss: 109.53389739990234 Tokens per Sec: 17571.427513516548
Epoch ended with duration 0:00:34.153339
Train perplexity: 4.115057831063306
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static java.lang.String METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( VAR_4 : return ) { return new TYPE_1 . METHOD_3 ( ) ; } catch ( TYPE_1 . METHOD_4 ( VAR_5 , VAR_5 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , false , false , false , false[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , VAR_4 , VAR_4 , VAR_4 ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) , TYPE_3 . METHOD_4 ( VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ) , VAR_4 ) ; } catch ( e ) { throw new TYPE_4 . METHOD_6 ( ) . METHOD_6 ( ) . METHOD_6 ( ) . METHOD_6 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ! ( VAR_2 ) ) != null ) { if ( VAR_3 ) { VAR_3 = VAR_3 . METHOD_2 ( STRING_1 + STRING_2 + STRING_2 ) ; }[0m
Epoch ended with duration 0:00:01.417009
Validation perplexity: 3.6698369303396405
Model saved best_on_validation!
Epoch 13 / 1000
Epoch Step: 5 / 138 Loss: 140.1156768798828 Tokens per Sec: 18934.35965212321
Epoch Step: 10 / 138 Loss: 89.11933898925781 Tokens per Sec: 19884.21538480054
Epoch Step: 15 / 138 Loss: 105.03716278076172 Tokens per Sec: 17508.288252803028
Epoch Step: 20 / 138 Loss: 102.63257598876953 Tokens per Sec: 19048.621930727695
Epoch Step: 25 / 138 Loss: 63.57718276977539 Tokens per Sec: 20100.89914404703
Epoch Step: 30 / 138 Loss: 118.19022369384766 Tokens per Sec: 18603.282842017798
Epoch Step: 35 / 138 Loss: 111.26263427734375 Tokens per Sec: 19563.18036017723
Epoch Step: 40 / 138 Loss: 78.66741943359375 Tokens per Sec: 19331.723604493294
Epoch Step: 45 / 138 Loss: 132.64439392089844 Tokens per Sec: 19567.207587765766
Epoch Step: 50 / 138 Loss: 123.11970520019531 Tokens per Sec: 18796.626062096322
Epoch Step: 55 / 138 Loss: 111.8487319946289 Tokens per Sec: 19966.490157600354
Epoch Step: 60 / 138 Loss: 81.96952056884766 Tokens per Sec: 18115.64887595219
Epoch Step: 65 / 138 Loss: 127.08229064941406 Tokens per Sec: 18160.239557759003
Epoch Step: 70 / 138 Loss: 80.5350112915039 Tokens per Sec: 18159.032160868916
Epoch Step: 75 / 138 Loss: 65.72738647460938 Tokens per Sec: 19455.149436619628
Epoch Step: 80 / 138 Loss: 95.79633331298828 Tokens per Sec: 17562.579013668532
Epoch Step: 85 / 138 Loss: 118.28435516357422 Tokens per Sec: 19419.158213198927
Epoch Step: 90 / 138 Loss: 62.518341064453125 Tokens per Sec: 19844.126021214433
Epoch Step: 95 / 138 Loss: 70.06297302246094 Tokens per Sec: 18380.882190903052
Epoch Step: 100 / 138 Loss: 85.59916687011719 Tokens per Sec: 17904.36983436195
Epoch Step: 105 / 138 Loss: 73.85357666015625 Tokens per Sec: 17886.689583012165
Epoch Step: 110 / 138 Loss: 110.27113342285156 Tokens per Sec: 18038.208381549015
Epoch Step: 115 / 138 Loss: 112.95355224609375 Tokens per Sec: 16448.74594138553
Epoch Step: 120 / 138 Loss: 60.929996490478516 Tokens per Sec: 18421.459531155753
Epoch Step: 125 / 138 Loss: 90.4530258178711 Tokens per Sec: 17766.77174234802
Epoch Step: 130 / 138 Loss: 111.94010925292969 Tokens per Sec: 18292.29063287566
Epoch Step: 135 / 138 Loss: 74.33541107177734 Tokens per Sec: 18766.42667030446
Epoch ended with duration 0:00:34.225461
Train perplexity: 3.7099482281154064
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( VAR_4 : return ) { return new TYPE_1 . METHOD_3 ( ) ; } return new TYPE_1 . METHOD_3 ( VAR_5 , VAR_5 , VAR_5 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , false , false , false , false , false , false , false , false , false , false[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , VAR_4 , int VAR_4 ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) , TYPE_3 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , VAR_5 ) , VAR_5 ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_7 ( ) ) ; } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ! ( VAR_2 ) ) != null ) { if ( VAR_3 : VAR_2 ) ; } else { VAR_3 = ( STRING_1 + ( STRING_1 + STRING_2 ) ) ; }[0m
Epoch ended with duration 0:00:01.415045
Validation perplexity: 3.3074820623290675
Model saved best_on_validation!
Epoch 14 / 1000
Epoch Step: 5 / 138 Loss: 83.00973510742188 Tokens per Sec: 20523.175913776628
Epoch Step: 10 / 138 Loss: 81.7442626953125 Tokens per Sec: 19922.98974739322
Epoch Step: 15 / 138 Loss: 90.88858795166016 Tokens per Sec: 20054.15239321184
Epoch Step: 20 / 138 Loss: 121.53080749511719 Tokens per Sec: 20453.94647920059
Epoch Step: 25 / 138 Loss: 118.03958129882812 Tokens per Sec: 19207.73476730241
Epoch Step: 30 / 138 Loss: 79.0324478149414 Tokens per Sec: 18582.093754324727
Epoch Step: 35 / 138 Loss: 118.71653747558594 Tokens per Sec: 18299.74201205516
Epoch Step: 40 / 138 Loss: 81.96165466308594 Tokens per Sec: 19197.18309741412
Epoch Step: 45 / 138 Loss: 106.28230285644531 Tokens per Sec: 18388.44493452831
Epoch Step: 50 / 138 Loss: 74.65564727783203 Tokens per Sec: 18243.246975791368
Epoch Step: 55 / 138 Loss: 111.31130981445312 Tokens per Sec: 17797.787464141064
Epoch Step: 60 / 138 Loss: 78.01141357421875 Tokens per Sec: 18416.67195079989
Epoch Step: 65 / 138 Loss: 78.58438110351562 Tokens per Sec: 18931.027551446026
Epoch Step: 70 / 138 Loss: 87.42908477783203 Tokens per Sec: 19642.612130864065
Epoch Step: 75 / 138 Loss: 104.06424713134766 Tokens per Sec: 17632.676079851633
Epoch Step: 80 / 138 Loss: 71.87995910644531 Tokens per Sec: 17778.383758702148
Epoch Step: 85 / 138 Loss: 105.03038024902344 Tokens per Sec: 19780.675956142135
Epoch Step: 90 / 138 Loss: 80.89714813232422 Tokens per Sec: 16779.68318817136
Epoch Step: 95 / 138 Loss: 71.44859313964844 Tokens per Sec: 19242.14392599334
Epoch Step: 100 / 138 Loss: 116.25779724121094 Tokens per Sec: 20681.360062196207
Epoch Step: 105 / 138 Loss: 98.19593811035156 Tokens per Sec: 17370.8460562868
Epoch Step: 110 / 138 Loss: 80.75556182861328 Tokens per Sec: 18543.40784698485
Epoch Step: 115 / 138 Loss: 82.03942108154297 Tokens per Sec: 17327.21201018656
Epoch Step: 120 / 138 Loss: 88.24671936035156 Tokens per Sec: 18094.74041626014
Epoch Step: 125 / 138 Loss: 79.6882095336914 Tokens per Sec: 17634.57202003428
Epoch Step: 130 / 138 Loss: 99.15211486816406 Tokens per Sec: 18163.82025020964
Epoch Step: 135 / 138 Loss: 80.29067993164062 Tokens per Sec: 18201.805062187726
Epoch ended with duration 0:00:34.296477
Train perplexity: 3.330779041384894
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String [ ] , java.lang.String , VAR_2 , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : VAR_1 ) { return VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 . METHOD_3 ( VAR_5 , VAR_5 , STRING_2 , STRING_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , int VAR_4 ) { case = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( STRING_2 , e ) { throw new TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_7 ( ) ) ; } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( VAR_2 ) && ( VAR_2 ) != null ) { for ( java.lang.String VAR_2 ) { VAR_3 = VAR_3 . TAG ( STRING_1 + STRING_2 + STRING_2 ) ; }[0m
Epoch ended with duration 0:00:01.411584
Validation perplexity: 2.9910447591909715
Model saved best_on_validation!
Epoch 15 / 1000
Epoch Step: 5 / 138 Loss: 58.518672943115234 Tokens per Sec: 18724.513957564093
Epoch Step: 10 / 138 Loss: 63.80794143676758 Tokens per Sec: 18210.29312084791
Epoch Step: 15 / 138 Loss: 50.862648010253906 Tokens per Sec: 18903.484876512535
Epoch Step: 20 / 138 Loss: 88.14061737060547 Tokens per Sec: 19351.060326785144
Epoch Step: 25 / 138 Loss: 55.06172180175781 Tokens per Sec: 19557.168375686288
Epoch Step: 30 / 138 Loss: 105.35990142822266 Tokens per Sec: 19404.171864912198
Epoch Step: 35 / 138 Loss: 60.95491027832031 Tokens per Sec: 17461.358172177268
Epoch Step: 40 / 138 Loss: 82.37833404541016 Tokens per Sec: 18218.08967313227
Epoch Step: 45 / 138 Loss: 79.13731384277344 Tokens per Sec: 18606.210331250128
Epoch Step: 50 / 138 Loss: 68.10093688964844 Tokens per Sec: 18857.589056463323
Epoch Step: 55 / 138 Loss: 71.81175994873047 Tokens per Sec: 18144.89133012745
Epoch Step: 60 / 138 Loss: 64.53195190429688 Tokens per Sec: 18438.30763064677
Epoch Step: 65 / 138 Loss: 61.707054138183594 Tokens per Sec: 18607.978370817305
Epoch Step: 70 / 138 Loss: 113.90635681152344 Tokens per Sec: 19895.31964473219
Epoch Step: 75 / 138 Loss: 56.89054870605469 Tokens per Sec: 20135.060096284873
Epoch Step: 80 / 138 Loss: 69.83013916015625 Tokens per Sec: 19438.93004170567
Epoch Step: 85 / 138 Loss: 102.0912094116211 Tokens per Sec: 18793.391972339185
Epoch Step: 90 / 138 Loss: 55.17668533325195 Tokens per Sec: 19065.81360752482
Epoch Step: 95 / 138 Loss: 66.8634033203125 Tokens per Sec: 19869.15155631855
Epoch Step: 100 / 138 Loss: 81.75408935546875 Tokens per Sec: 19326.313360684668
Epoch Step: 105 / 138 Loss: 45.39153289794922 Tokens per Sec: 18130.795366996346
Epoch Step: 110 / 138 Loss: 80.16984558105469 Tokens per Sec: 17531.87417526874
Epoch Step: 115 / 138 Loss: 70.2624740600586 Tokens per Sec: 18696.070607057343
Epoch Step: 120 / 138 Loss: 93.69384765625 Tokens per Sec: 18200.85251032871
Epoch Step: 125 / 138 Loss: 70.42887878417969 Tokens per Sec: 18300.347062064793
Epoch Step: 130 / 138 Loss: 91.57817840576172 Tokens per Sec: 17514.67932903291
Epoch Step: 135 / 138 Loss: 93.3470687866211 Tokens per Sec: 16791.291562044207
Epoch ended with duration 0:00:34.231982
Train perplexity: 3.001639098452622
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] { VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( VAR_4 : VAR_1 ) { return VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_4 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , STRING_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , false , false , false ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_3 , VAR_3 , VAR_4 , VAR_4 ) { TYPE_4 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( android.os.RemoteException e ) { METHOD_5 ( STRING_1 , TYPE_4 . METHOD_6 ( ) . METHOD_5 ( ) ) ; } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( VAR_2 ) != null ) { for ( TYPE_1 VAR_2 : VAR_2 ) { VAR_3 = VAR_3 . TAG ( STRING_1 + STRING_2 + STRING_2 ) ; }[0m
Epoch ended with duration 0:00:01.418808
Validation perplexity: 2.7136097199785243
Model saved best_on_validation!
Model saved checkpoint!
Epoch 16 / 1000
Epoch Step: 5 / 138 Loss: 73.32621765136719 Tokens per Sec: 18305.491357151684
Epoch Step: 10 / 138 Loss: 59.44116973876953 Tokens per Sec: 20015.412725238377
Epoch Step: 15 / 138 Loss: 65.88003540039062 Tokens per Sec: 19526.514687007115
Epoch Step: 20 / 138 Loss: 94.73577117919922 Tokens per Sec: 19531.982795072665
Epoch Step: 25 / 138 Loss: 61.55131912231445 Tokens per Sec: 19466.855833496993
Epoch Step: 30 / 138 Loss: 110.45101165771484 Tokens per Sec: 19184.589992842135
Epoch Step: 35 / 138 Loss: 117.52674102783203 Tokens per Sec: 18311.378205864294
Epoch Step: 40 / 138 Loss: 103.3184814453125 Tokens per Sec: 19008.35136116939
Epoch Step: 45 / 138 Loss: 110.865478515625 Tokens per Sec: 18341.064101099204
Epoch Step: 50 / 138 Loss: 109.58401489257812 Tokens per Sec: 19895.667786623824
Epoch Step: 55 / 138 Loss: 108.6256103515625 Tokens per Sec: 18568.852570023424
Epoch Step: 60 / 138 Loss: 75.62889099121094 Tokens per Sec: 19435.968329038307
Epoch Step: 65 / 138 Loss: 55.92180252075195 Tokens per Sec: 19053.45927128512
Epoch Step: 70 / 138 Loss: 75.86138153076172 Tokens per Sec: 18921.770584658047
Epoch Step: 75 / 138 Loss: 70.7021713256836 Tokens per Sec: 18540.234189317285
Epoch Step: 80 / 138 Loss: 102.355712890625 Tokens per Sec: 18290.263453960022
Epoch Step: 85 / 138 Loss: 57.65114212036133 Tokens per Sec: 18914.583806154347
Epoch Step: 90 / 138 Loss: 72.98509979248047 Tokens per Sec: 19643.103926403408
Epoch Step: 95 / 138 Loss: 50.0107536315918 Tokens per Sec: 17656.418115779252
Epoch Step: 100 / 138 Loss: 87.9726333618164 Tokens per Sec: 18521.502055533256
Epoch Step: 105 / 138 Loss: 103.6527328491211 Tokens per Sec: 16064.480545450073
Epoch Step: 110 / 138 Loss: 78.48500061035156 Tokens per Sec: 18501.625295080554
Epoch Step: 115 / 138 Loss: 49.91352462768555 Tokens per Sec: 17499.910852826266
Epoch Step: 120 / 138 Loss: 55.081993103027344 Tokens per Sec: 17748.860988046603
Epoch Step: 125 / 138 Loss: 62.67890930175781 Tokens per Sec: 18168.40805271116
Epoch Step: 130 / 138 Loss: 65.66841888427734 Tokens per Sec: 17885.941171190552
Epoch Step: 135 / 138 Loss: 83.99713897705078 Tokens per Sec: 17433.142023305936
Epoch ended with duration 0:00:34.369289
Train perplexity: 2.804180928580425
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_4 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , STRING_2 , 0 , VAR_2 , false , false , false , false , false , false , false , false , false[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , int VAR_4 ) { TYPE_4 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( this ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = VAR_3 . TAG ( STRING_1 + STRING_2 + STRING_2 ) ; org.junit.Assert.assertEquals ( ) ; }[0m
Epoch ended with duration 0:00:01.426504
Validation perplexity: 2.500784859942034
Model saved best_on_validation!
Epoch 17 / 1000
Epoch Step: 5 / 138 Loss: 61.419002532958984 Tokens per Sec: 19423.673446710014
Epoch Step: 10 / 138 Loss: 76.12077331542969 Tokens per Sec: 18632.27611875637
Epoch Step: 15 / 138 Loss: 94.09439849853516 Tokens per Sec: 19019.69132396806
Epoch Step: 20 / 138 Loss: 65.70418548583984 Tokens per Sec: 18827.29884928211
Epoch Step: 25 / 138 Loss: 53.991390228271484 Tokens per Sec: 18709.33959032342
Epoch Step: 30 / 138 Loss: 52.85237121582031 Tokens per Sec: 18716.58941846533
Epoch Step: 35 / 138 Loss: 55.71369934082031 Tokens per Sec: 18427.69007422014
Epoch Step: 40 / 138 Loss: 93.83141326904297 Tokens per Sec: 19469.366616038213
Epoch Step: 45 / 138 Loss: 100.08528137207031 Tokens per Sec: 19301.34980797957
Epoch Step: 50 / 138 Loss: 49.981075286865234 Tokens per Sec: 17179.344010428922
Epoch Step: 55 / 138 Loss: 52.394683837890625 Tokens per Sec: 17660.216442025267
Epoch Step: 60 / 138 Loss: 56.29341125488281 Tokens per Sec: 19349.169141144877
Epoch Step: 65 / 138 Loss: 65.94682312011719 Tokens per Sec: 18905.71713138801
Epoch Step: 70 / 138 Loss: 83.44751739501953 Tokens per Sec: 17573.305908987735
Epoch Step: 75 / 138 Loss: 68.87733459472656 Tokens per Sec: 18841.06175984483
Epoch Step: 80 / 138 Loss: 68.17948913574219 Tokens per Sec: 19874.600914592884
Epoch Step: 85 / 138 Loss: 60.26899719238281 Tokens per Sec: 20345.894189921913
Epoch Step: 90 / 138 Loss: 77.78118133544922 Tokens per Sec: 20130.62612682457
Epoch Step: 95 / 138 Loss: 51.63176727294922 Tokens per Sec: 18341.25536234253
Epoch Step: 100 / 138 Loss: 86.95970153808594 Tokens per Sec: 18751.137654973798
Epoch Step: 105 / 138 Loss: 54.03633117675781 Tokens per Sec: 17700.473841339746
Epoch Step: 110 / 138 Loss: 70.05489349365234 Tokens per Sec: 18984.271841273367
Epoch Step: 115 / 138 Loss: 74.55581665039062 Tokens per Sec: 16448.06927513779
Epoch Step: 120 / 138 Loss: 53.872100830078125 Tokens per Sec: 18563.946759539896
Epoch Step: 125 / 138 Loss: 63.60191345214844 Tokens per Sec: 16936.9993529233
Epoch Step: 130 / 138 Loss: 49.2638053894043 Tokens per Sec: 17413.043870788886
Epoch Step: 135 / 138 Loss: 48.74363708496094 Tokens per Sec: 18254.70260050495
Epoch ended with duration 0:00:34.342736
Train perplexity: 2.576351709683665
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( VAR_4 : VAR_1 ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_4 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , STRING_2 , 0 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , int VAR_4 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( this != null ) { try { TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_2 ) + STRING_2 ) ; }[0m
Epoch ended with duration 0:00:01.432436
Validation perplexity: 2.339323067044214
Model saved best_on_validation!
Epoch 18 / 1000
Epoch Step: 5 / 138 Loss: 94.3447036743164 Tokens per Sec: 18433.209101053348
Epoch Step: 10 / 138 Loss: 47.34524917602539 Tokens per Sec: 19894.692325192565
Epoch Step: 15 / 138 Loss: 54.44976806640625 Tokens per Sec: 20263.9284820048
Epoch Step: 20 / 138 Loss: 63.92461013793945 Tokens per Sec: 18102.4236500408
Epoch Step: 25 / 138 Loss: 87.71702575683594 Tokens per Sec: 18478.211924760184
Epoch Step: 30 / 138 Loss: 57.07831954956055 Tokens per Sec: 17428.89927924315
Epoch Step: 35 / 138 Loss: 37.86795425415039 Tokens per Sec: 20808.32134384009
Epoch Step: 40 / 138 Loss: 38.69466018676758 Tokens per Sec: 18902.382065481237
Epoch Step: 45 / 138 Loss: 69.05323791503906 Tokens per Sec: 19385.83402600063
Epoch Step: 50 / 138 Loss: 90.62100219726562 Tokens per Sec: 18220.68721882917
Epoch Step: 55 / 138 Loss: 48.70785903930664 Tokens per Sec: 19154.10098368127
Epoch Step: 60 / 138 Loss: 81.86799621582031 Tokens per Sec: 19423.193976819824
Epoch Step: 65 / 138 Loss: 68.16332244873047 Tokens per Sec: 18671.492486614236
Epoch Step: 70 / 138 Loss: 37.166072845458984 Tokens per Sec: 18706.532956268387
Epoch Step: 75 / 138 Loss: 72.09174346923828 Tokens per Sec: 17704.46471082357
Epoch Step: 80 / 138 Loss: 53.67811584472656 Tokens per Sec: 18003.441697798335
Epoch Step: 85 / 138 Loss: 76.62625122070312 Tokens per Sec: 19378.215002994137
Epoch Step: 90 / 138 Loss: 61.620086669921875 Tokens per Sec: 19608.24193591598
Epoch Step: 95 / 138 Loss: 46.604347229003906 Tokens per Sec: 17207.20554684372
Epoch Step: 100 / 138 Loss: 53.3592414855957 Tokens per Sec: 20467.979511016434
Epoch Step: 105 / 138 Loss: 62.25905990600586 Tokens per Sec: 18778.083400440697
Epoch Step: 110 / 138 Loss: 54.43928146362305 Tokens per Sec: 18407.9207936071
Epoch Step: 115 / 138 Loss: 51.01875305175781 Tokens per Sec: 17481.383543414213
Epoch Step: 120 / 138 Loss: 65.20484924316406 Tokens per Sec: 16306.889628062838
Epoch Step: 125 / 138 Loss: 47.568050384521484 Tokens per Sec: 17763.617234802827
Epoch Step: 130 / 138 Loss: 59.490379333496094 Tokens per Sec: 18480.430631484614
Epoch Step: 135 / 138 Loss: 35.92976379394531 Tokens per Sec: 18983.788304125883
Epoch ended with duration 0:00:34.170555
Train perplexity: 2.3777623014821634
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : VAR_1 ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , boolean VAR_4 ) { TYPE_4 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( this != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_2 ) + STRING_2 ) ; } . METHOD_2 ( VAR_4 , e , e . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.415128
Validation perplexity: 2.200179003908037
Model saved best_on_validation!
Epoch 19 / 1000
Epoch Step: 5 / 138 Loss: 63.53660202026367 Tokens per Sec: 17916.20653537771
Epoch Step: 10 / 138 Loss: 76.5106430053711 Tokens per Sec: 19352.77405603565
Epoch Step: 15 / 138 Loss: 33.2520751953125 Tokens per Sec: 18432.107384894363
Epoch Step: 20 / 138 Loss: 37.26640701293945 Tokens per Sec: 19402.45080222056
Epoch Step: 25 / 138 Loss: 70.77198791503906 Tokens per Sec: 18759.217733851558
Epoch Step: 30 / 138 Loss: 62.35152053833008 Tokens per Sec: 20611.657443000862
Epoch Step: 35 / 138 Loss: 49.665565490722656 Tokens per Sec: 17200.942401276367
Epoch Step: 40 / 138 Loss: 33.533138275146484 Tokens per Sec: 17557.44534173341
Epoch Step: 45 / 138 Loss: 78.3678207397461 Tokens per Sec: 18745.267362489878
Epoch Step: 50 / 138 Loss: 59.90177917480469 Tokens per Sec: 19086.03416012284
Epoch Step: 55 / 138 Loss: 66.5213394165039 Tokens per Sec: 18858.06069085214
Epoch Step: 60 / 138 Loss: 41.400150299072266 Tokens per Sec: 19092.49800198561
Epoch Step: 65 / 138 Loss: 42.74527359008789 Tokens per Sec: 19490.35712929059
Epoch Step: 70 / 138 Loss: 76.81344604492188 Tokens per Sec: 19184.42870152902
Epoch Step: 75 / 138 Loss: 81.11529541015625 Tokens per Sec: 18830.73151660262
Epoch Step: 80 / 138 Loss: 75.37572479248047 Tokens per Sec: 19823.020978090917
Epoch Step: 85 / 138 Loss: 37.95842361450195 Tokens per Sec: 18853.074977603006
Epoch Step: 90 / 138 Loss: 73.67180633544922 Tokens per Sec: 17776.120533303707
Epoch Step: 95 / 138 Loss: 73.41481018066406 Tokens per Sec: 19437.781309678554
Epoch Step: 100 / 138 Loss: 60.47188949584961 Tokens per Sec: 18700.024943887434
Epoch Step: 105 / 138 Loss: 71.49543762207031 Tokens per Sec: 18420.075477635855
Epoch Step: 110 / 138 Loss: 71.28797149658203 Tokens per Sec: 18510.20787474241
Epoch Step: 115 / 138 Loss: 44.31396484375 Tokens per Sec: 17537.543958465343
Epoch Step: 120 / 138 Loss: 47.99284744262695 Tokens per Sec: 18410.559048361538
Epoch Step: 125 / 138 Loss: 55.933319091796875 Tokens per Sec: 17642.53328004938
Epoch Step: 130 / 138 Loss: 65.07447814941406 Tokens per Sec: 17797.64363808978
Epoch Step: 135 / 138 Loss: 40.71321487426758 Tokens per Sec: 15925.225269583858
Epoch ended with duration 0:00:34.392322
Train perplexity: 2.2302543444849787
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : VAR_1 ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 ) { TYPE_5 TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( this != null ) { try { TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_2 ) ; } . METHOD_2 ( VAR_4 , e , e . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.429407
Validation perplexity: 2.076963980932464
Model saved best_on_validation!
Epoch 20 / 1000
Epoch Step: 5 / 138 Loss: 58.00644302368164 Tokens per Sec: 17453.826590451234
Epoch Step: 10 / 138 Loss: 69.61125946044922 Tokens per Sec: 17728.95947799333
Epoch Step: 15 / 138 Loss: 54.85244369506836 Tokens per Sec: 19404.28018175432
Epoch Step: 20 / 138 Loss: 77.18094635009766 Tokens per Sec: 17353.4417727634
Epoch Step: 25 / 138 Loss: 35.33979034423828 Tokens per Sec: 19121.709643248778
Epoch Step: 30 / 138 Loss: 32.60491943359375 Tokens per Sec: 19613.86977415472
Epoch Step: 35 / 138 Loss: 73.0727310180664 Tokens per Sec: 18332.56565185645
Epoch Step: 40 / 138 Loss: 69.36579132080078 Tokens per Sec: 19577.830391999938
Epoch Step: 45 / 138 Loss: 62.438453674316406 Tokens per Sec: 19563.692965605453
Epoch Step: 50 / 138 Loss: 70.51435852050781 Tokens per Sec: 19221.94297819489
Epoch Step: 55 / 138 Loss: 51.63237762451172 Tokens per Sec: 17158.9336300526
Epoch Step: 60 / 138 Loss: 53.40910339355469 Tokens per Sec: 19650.717906517104
Epoch Step: 65 / 138 Loss: 40.160072326660156 Tokens per Sec: 20086.67148749715
Epoch Step: 70 / 138 Loss: 33.58296585083008 Tokens per Sec: 18923.33047266317
Epoch Step: 75 / 138 Loss: 56.49772644042969 Tokens per Sec: 19196.464532129
Epoch Step: 80 / 138 Loss: 71.53741455078125 Tokens per Sec: 19047.017019465955
Epoch Step: 85 / 138 Loss: 58.18054962158203 Tokens per Sec: 18284.57745009579
Epoch Step: 90 / 138 Loss: 38.44071578979492 Tokens per Sec: 18612.134561583076
Epoch Step: 95 / 138 Loss: 40.647701263427734 Tokens per Sec: 19825.555667183125
Epoch Step: 100 / 138 Loss: 61.08107376098633 Tokens per Sec: 18346.800981445387
Epoch Step: 105 / 138 Loss: 45.848323822021484 Tokens per Sec: 17920.62678883889
Epoch Step: 110 / 138 Loss: 45.64665985107422 Tokens per Sec: 19198.80930871508
Epoch Step: 115 / 138 Loss: 62.88554382324219 Tokens per Sec: 18892.76458265568
Epoch Step: 120 / 138 Loss: 37.599609375 Tokens per Sec: 18103.84477956769
Epoch Step: 125 / 138 Loss: 51.78667449951172 Tokens per Sec: 17629.891010647763
Epoch Step: 130 / 138 Loss: 66.214111328125 Tokens per Sec: 18769.851673405996
Epoch Step: 135 / 138 Loss: 61.303871154785156 Tokens per Sec: 16870.58990106639
Epoch ended with duration 0:00:34.255220
Train perplexity: 2.1051149730231
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : VAR_1 ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 ) { TYPE_5 { METHOD_2 ( METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { if ( this != null ) { try { TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_2 ) ; } . METHOD_2 ( VAR_4 , e , e . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.417659
Validation perplexity: 1.9874647899946265
Model saved best_on_validation!
Model saved checkpoint!
Epoch 21 / 1000
Epoch Step: 5 / 138 Loss: 45.57715606689453 Tokens per Sec: 17786.89698303431
Epoch Step: 10 / 138 Loss: 54.190528869628906 Tokens per Sec: 19129.63191034512
Epoch Step: 15 / 138 Loss: 59.840911865234375 Tokens per Sec: 17948.488175352682
Epoch Step: 20 / 138 Loss: 45.11007308959961 Tokens per Sec: 19188.254408871002
Epoch Step: 25 / 138 Loss: 51.42831039428711 Tokens per Sec: 17666.636832432967
Epoch Step: 30 / 138 Loss: 51.44782257080078 Tokens per Sec: 19220.662382178325
Epoch Step: 35 / 138 Loss: 41.72545623779297 Tokens per Sec: 20371.281529621123
Epoch Step: 40 / 138 Loss: 43.54923629760742 Tokens per Sec: 19482.92011018021
Epoch Step: 45 / 138 Loss: 43.72663497924805 Tokens per Sec: 18970.42707893381
Epoch Step: 50 / 138 Loss: 67.12458038330078 Tokens per Sec: 18946.71910473824
Epoch Step: 55 / 138 Loss: 50.312042236328125 Tokens per Sec: 19492.51025132837
Epoch Step: 60 / 138 Loss: 53.134361267089844 Tokens per Sec: 20212.348473440332
Epoch Step: 65 / 138 Loss: 61.257957458496094 Tokens per Sec: 16572.838218179062
Epoch Step: 70 / 138 Loss: 64.97411346435547 Tokens per Sec: 18831.70126755279
Epoch Step: 75 / 138 Loss: 65.2210693359375 Tokens per Sec: 17930.988386420315
Epoch Step: 80 / 138 Loss: 46.47792053222656 Tokens per Sec: 18913.437621993282
Epoch Step: 85 / 138 Loss: 33.158226013183594 Tokens per Sec: 20113.99549259613
Epoch Step: 90 / 138 Loss: 35.91513442993164 Tokens per Sec: 20132.56410254208
Epoch Step: 95 / 138 Loss: 33.27849197387695 Tokens per Sec: 18878.510488926673
Epoch Step: 100 / 138 Loss: 61.59254455566406 Tokens per Sec: 19250.829598204902
Epoch Step: 105 / 138 Loss: 62.44492721557617 Tokens per Sec: 15416.60025449085
Epoch Step: 110 / 138 Loss: 49.00941467285156 Tokens per Sec: 17919.43786892588
Epoch Step: 115 / 138 Loss: 46.26978302001953 Tokens per Sec: 18093.95261683509
Epoch Step: 120 / 138 Loss: 58.58929443359375 Tokens per Sec: 18012.786993219117
Epoch Step: 125 / 138 Loss: 53.34597396850586 Tokens per Sec: 19036.71271647923
Epoch Step: 130 / 138 Loss: 40.10960006713867 Tokens per Sec: 18293.653123054388
Epoch Step: 135 / 138 Loss: 41.9101676940918 Tokens per Sec: 17885.034422938417
Epoch ended with duration 0:00:34.242124
Train perplexity: 2.014839239702983
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : VAR_1 ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 ) { TYPE_5 { METHOD_2 ( METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { if ( this != null ) { try { TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ! ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals . METHOD_2 ( VAR_4 , e , e . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.430878
Validation perplexity: 1.9093868812669899
Model saved best_on_validation!
Epoch 22 / 1000
Epoch Step: 5 / 138 Loss: 49.133018493652344 Tokens per Sec: 18970.928523537
Epoch Step: 10 / 138 Loss: 47.92740249633789 Tokens per Sec: 17226.311307110976
Epoch Step: 15 / 138 Loss: 27.75200653076172 Tokens per Sec: 19083.656348275126
Epoch Step: 20 / 138 Loss: 61.65614318847656 Tokens per Sec: 18744.352354949577
Epoch Step: 25 / 138 Loss: 47.08367156982422 Tokens per Sec: 19180.624024439774
Epoch Step: 30 / 138 Loss: 63.28908920288086 Tokens per Sec: 19464.390208218385
Epoch Step: 35 / 138 Loss: 61.479068756103516 Tokens per Sec: 18699.923057834727
Epoch Step: 40 / 138 Loss: 32.7050895690918 Tokens per Sec: 19961.89391874096
Epoch Step: 45 / 138 Loss: 36.13693618774414 Tokens per Sec: 19156.095967783458
Epoch Step: 50 / 138 Loss: 33.32292938232422 Tokens per Sec: 19478.49123049621
Epoch Step: 55 / 138 Loss: 55.01536178588867 Tokens per Sec: 18787.409757237787
Epoch Step: 60 / 138 Loss: 45.97053527832031 Tokens per Sec: 18853.45338009924
Epoch Step: 65 / 138 Loss: 49.79393768310547 Tokens per Sec: 18744.203266499997
Epoch Step: 70 / 138 Loss: 69.61189270019531 Tokens per Sec: 17932.12599315381
Epoch Step: 75 / 138 Loss: 58.556976318359375 Tokens per Sec: 18698.554569829183
Epoch Step: 80 / 138 Loss: 36.19800567626953 Tokens per Sec: 18059.64175752889
Epoch Step: 85 / 138 Loss: 37.95878601074219 Tokens per Sec: 18781.645672610946
Epoch Step: 90 / 138 Loss: 45.646514892578125 Tokens per Sec: 20501.431277258027
Epoch Step: 95 / 138 Loss: 58.646583557128906 Tokens per Sec: 18573.405801711975
Epoch Step: 100 / 138 Loss: 47.141902923583984 Tokens per Sec: 19549.197007728446
Epoch Step: 105 / 138 Loss: 44.391868591308594 Tokens per Sec: 15877.789468751937
Epoch Step: 110 / 138 Loss: 53.536163330078125 Tokens per Sec: 18010.941075098443
Epoch Step: 115 / 138 Loss: 28.65154266357422 Tokens per Sec: 18129.752916633995
Epoch Step: 120 / 138 Loss: 43.657920837402344 Tokens per Sec: 18256.155230300283
Epoch Step: 125 / 138 Loss: 47.97029113769531 Tokens per Sec: 18974.38024544249
Epoch Step: 130 / 138 Loss: 56.663238525390625 Tokens per Sec: 17964.164260762267
Epoch Step: 135 / 138 Loss: 39.21247863769531 Tokens per Sec: 18194.112924826044
Epoch ended with duration 0:00:34.228923
Train perplexity: 1.9155631563141156
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int value : result : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals . METHOD_2 ( VAR_4 , e , e . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.429833
Validation perplexity: 1.828003383980794
Model saved best_on_validation!
Epoch 23 / 1000
Epoch Step: 5 / 138 Loss: 44.88804244995117 Tokens per Sec: 18362.362399532944
Epoch Step: 10 / 138 Loss: 37.252052307128906 Tokens per Sec: 18853.170967731236
Epoch Step: 15 / 138 Loss: 25.058670043945312 Tokens per Sec: 20615.613162261314
Epoch Step: 20 / 138 Loss: 47.339698791503906 Tokens per Sec: 18337.96357109957
Epoch Step: 25 / 138 Loss: 46.55039978027344 Tokens per Sec: 19144.864842638617
Epoch Step: 30 / 138 Loss: 57.41510009765625 Tokens per Sec: 17929.014274170833
Epoch Step: 35 / 138 Loss: 39.88243865966797 Tokens per Sec: 18272.904541339623
Epoch Step: 40 / 138 Loss: 25.500505447387695 Tokens per Sec: 19548.58813474605
Epoch Step: 45 / 138 Loss: 47.372589111328125 Tokens per Sec: 19372.0245527634
Epoch Step: 50 / 138 Loss: 40.04513931274414 Tokens per Sec: 19495.810141479997
Epoch Step: 55 / 138 Loss: 30.087892532348633 Tokens per Sec: 18576.339468505223
Epoch Step: 60 / 138 Loss: 33.547584533691406 Tokens per Sec: 19055.45965465761
Epoch Step: 65 / 138 Loss: 52.488162994384766 Tokens per Sec: 20158.674446526617
Epoch Step: 70 / 138 Loss: 49.23979568481445 Tokens per Sec: 19016.10258775547
Epoch Step: 75 / 138 Loss: 52.1492919921875 Tokens per Sec: 18676.43239289861
Epoch Step: 80 / 138 Loss: 61.10110092163086 Tokens per Sec: 18425.74558042212
Epoch Step: 85 / 138 Loss: 39.032691955566406 Tokens per Sec: 17497.71297737268
Epoch Step: 90 / 138 Loss: 35.94594192504883 Tokens per Sec: 19566.488213538047
Epoch Step: 95 / 138 Loss: 54.38066482543945 Tokens per Sec: 18527.974395081816
Epoch Step: 100 / 138 Loss: 45.40174865722656 Tokens per Sec: 19549.826066083904
Epoch Step: 105 / 138 Loss: 55.55496597290039 Tokens per Sec: 19072.613563357154
Epoch Step: 110 / 138 Loss: 43.61737823486328 Tokens per Sec: 18478.4213217571
Epoch Step: 115 / 138 Loss: 36.954307556152344 Tokens per Sec: 17794.16394623163
Epoch Step: 120 / 138 Loss: 50.15309143066406 Tokens per Sec: 16050.919927582509
Epoch Step: 125 / 138 Loss: 36.97098159790039 Tokens per Sec: 18036.373881807824
Epoch Step: 130 / 138 Loss: 41.97798538208008 Tokens per Sec: 17658.210059537163
Epoch Step: 135 / 138 Loss: 31.926395416259766 Tokens per Sec: 18447.744822158595
Epoch ended with duration 0:00:34.234245
Train perplexity: 1.847847359634725
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int value : result : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ! ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 d : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals . METHOD_2 ( VAR_4 , e , e . METHOD_3 ( STRING_1 ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.419229
Validation perplexity: 1.778024255554587
Model saved best_on_validation!
Epoch 24 / 1000
Epoch Step: 5 / 138 Loss: 53.93736267089844 Tokens per Sec: 18660.93827443418
Epoch Step: 10 / 138 Loss: 34.72883987426758 Tokens per Sec: 20923.94147234829
Epoch Step: 15 / 138 Loss: 42.97544479370117 Tokens per Sec: 18727.123237590702
Epoch Step: 20 / 138 Loss: 46.15986633300781 Tokens per Sec: 17671.67675683661
Epoch Step: 25 / 138 Loss: 55.10778045654297 Tokens per Sec: 18830.863769487514
Epoch Step: 30 / 138 Loss: 38.71519088745117 Tokens per Sec: 19137.569328398677
Epoch Step: 35 / 138 Loss: 49.1688346862793 Tokens per Sec: 20712.517370594753
Epoch Step: 40 / 138 Loss: 44.15752410888672 Tokens per Sec: 19318.54369824621
Epoch Step: 45 / 138 Loss: 31.618650436401367 Tokens per Sec: 18223.46097810288
Epoch Step: 50 / 138 Loss: 36.319095611572266 Tokens per Sec: 17775.41616722742
Epoch Step: 55 / 138 Loss: 49.88312530517578 Tokens per Sec: 19046.844856692755
Epoch Step: 60 / 138 Loss: 47.95541000366211 Tokens per Sec: 19130.11077062675
Epoch Step: 65 / 138 Loss: 50.14209747314453 Tokens per Sec: 20252.03565039413
Epoch Step: 70 / 138 Loss: 38.034976959228516 Tokens per Sec: 18052.28121421093
Epoch Step: 75 / 138 Loss: 55.2227897644043 Tokens per Sec: 18452.795389237264
Epoch Step: 80 / 138 Loss: 49.30767822265625 Tokens per Sec: 19739.99447435024
Epoch Step: 85 / 138 Loss: 37.33481216430664 Tokens per Sec: 20574.08494447098
Epoch Step: 90 / 138 Loss: 44.59899139404297 Tokens per Sec: 19765.957956212365
Epoch Step: 95 / 138 Loss: 58.898563385009766 Tokens per Sec: 17517.360101413327
Epoch Step: 100 / 138 Loss: 20.937938690185547 Tokens per Sec: 17164.087847806688
Epoch Step: 105 / 138 Loss: 32.602256774902344 Tokens per Sec: 17735.752358427137
Epoch Step: 110 / 138 Loss: 35.07698059082031 Tokens per Sec: 18315.771804378855
Epoch Step: 115 / 138 Loss: 58.14346694946289 Tokens per Sec: 15790.253575147852
Epoch Step: 120 / 138 Loss: 53.205406188964844 Tokens per Sec: 18276.843229746173
Epoch Step: 125 / 138 Loss: 50.03438186645508 Tokens per Sec: 18420.580677896156
Epoch Step: 130 / 138 Loss: 37.33477020263672 Tokens per Sec: 17645.28040169211
Epoch Step: 135 / 138 Loss: 40.497901916503906 Tokens per Sec: 18605.972238002305
Epoch ended with duration 0:00:34.183378
Train perplexity: 1.7926007819719265
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int value : VAR_1 ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 d : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals . METHOD_2 ( VAR_4 , e , e . METHOD_3 ( e ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.411566
Validation perplexity: 1.7278095669929254
Model saved best_on_validation!
Epoch 25 / 1000
Epoch Step: 5 / 138 Loss: 38.54481887817383 Tokens per Sec: 18922.34053997968
Epoch Step: 10 / 138 Loss: 51.308963775634766 Tokens per Sec: 18598.13474523937
Epoch Step: 15 / 138 Loss: 35.21522903442383 Tokens per Sec: 19900.984578062584
Epoch Step: 20 / 138 Loss: 46.5390625 Tokens per Sec: 18400.78994445071
Epoch Step: 25 / 138 Loss: 41.912193298339844 Tokens per Sec: 19421.522255295484
Epoch Step: 30 / 138 Loss: 32.010765075683594 Tokens per Sec: 18906.63276769807
Epoch Step: 35 / 138 Loss: 24.871158599853516 Tokens per Sec: 19149.273059069303
Epoch Step: 40 / 138 Loss: 48.31148147583008 Tokens per Sec: 19401.50226689007
Epoch Step: 45 / 138 Loss: 54.059906005859375 Tokens per Sec: 18900.580672584725
Epoch Step: 50 / 138 Loss: 32.8399772644043 Tokens per Sec: 17859.063819880295
Epoch Step: 55 / 138 Loss: 49.029762268066406 Tokens per Sec: 18629.455994621545
Epoch Step: 60 / 138 Loss: 39.067604064941406 Tokens per Sec: 19060.304398077333
Epoch Step: 65 / 138 Loss: 32.94585037231445 Tokens per Sec: 19880.11799719017
Epoch Step: 70 / 138 Loss: 24.447477340698242 Tokens per Sec: 19208.23511674096
Epoch Step: 75 / 138 Loss: 31.3883113861084 Tokens per Sec: 19411.658499453268
Epoch Step: 80 / 138 Loss: 52.77727508544922 Tokens per Sec: 18661.005725515693
Epoch Step: 85 / 138 Loss: 50.81425476074219 Tokens per Sec: 18216.76839431596
Epoch Step: 90 / 138 Loss: 43.466373443603516 Tokens per Sec: 18215.93570550022
Epoch Step: 95 / 138 Loss: 29.755048751831055 Tokens per Sec: 18978.365050018634
Epoch Step: 100 / 138 Loss: 43.8012809753418 Tokens per Sec: 19896.63907948468
Epoch Step: 105 / 138 Loss: 36.72685623168945 Tokens per Sec: 18545.38051648712
Epoch Step: 110 / 138 Loss: 33.37449264526367 Tokens per Sec: 17894.13565920482
Epoch Step: 115 / 138 Loss: 33.73811340332031 Tokens per Sec: 16256.481127712133
Epoch Step: 120 / 138 Loss: 53.445247650146484 Tokens per Sec: 18015.142282289362
Epoch Step: 125 / 138 Loss: 40.650245666503906 Tokens per Sec: 19043.23888606017
Epoch Step: 130 / 138 Loss: 41.369422912597656 Tokens per Sec: 16663.439157210025
Epoch Step: 135 / 138 Loss: 29.35702133178711 Tokens per Sec: 18053.479895997752
Epoch ended with duration 0:00:34.216807
Train perplexity: 1.7472654924009943
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int value : VAR_1 ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , VAR_4 , boolean VAR_4 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 d : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals ( METHOD_2 ( ) , commit . METHOD_3 ( STRING_1 ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.416538
Validation perplexity: 1.6990497513685046
Model saved best_on_validation!
Model saved checkpoint!
Epoch 26 / 1000
Epoch Step: 5 / 138 Loss: 45.81971740722656 Tokens per Sec: 18093.5338528489
Epoch Step: 10 / 138 Loss: 38.8929328918457 Tokens per Sec: 17559.35423569233
Epoch Step: 15 / 138 Loss: 62.385345458984375 Tokens per Sec: 19964.849379334333
Epoch Step: 20 / 138 Loss: 38.457237243652344 Tokens per Sec: 17944.56729829582
Epoch Step: 25 / 138 Loss: 43.671451568603516 Tokens per Sec: 17717.78188831393
Epoch Step: 30 / 138 Loss: 54.0469856262207 Tokens per Sec: 18762.160538681845
Epoch Step: 35 / 138 Loss: 36.1298713684082 Tokens per Sec: 19846.175226211988
Epoch Step: 40 / 138 Loss: 52.285316467285156 Tokens per Sec: 18196.88281581255
Epoch Step: 45 / 138 Loss: 26.550708770751953 Tokens per Sec: 19738.434851762195
Epoch Step: 50 / 138 Loss: 37.701927185058594 Tokens per Sec: 20069.73944104443
Epoch Step: 55 / 138 Loss: 37.14500427246094 Tokens per Sec: 19269.23403672429
Epoch Step: 60 / 138 Loss: 42.88262176513672 Tokens per Sec: 18479.297514684204
Epoch Step: 65 / 138 Loss: 42.66850662231445 Tokens per Sec: 18864.8346970954
Epoch Step: 70 / 138 Loss: 50.141910552978516 Tokens per Sec: 19301.828112777584
Epoch Step: 75 / 138 Loss: 36.21736526489258 Tokens per Sec: 20200.34342376075
Epoch Step: 80 / 138 Loss: 25.55145263671875 Tokens per Sec: 19085.70124480925
Epoch Step: 85 / 138 Loss: 31.505889892578125 Tokens per Sec: 19090.305105948784
Epoch Step: 90 / 138 Loss: 39.32301712036133 Tokens per Sec: 17686.16704897896
Epoch Step: 95 / 138 Loss: 27.55543327331543 Tokens per Sec: 20524.377334302713
Epoch Step: 100 / 138 Loss: 45.39760971069336 Tokens per Sec: 18949.716858154152
Epoch Step: 105 / 138 Loss: 35.26399612426758 Tokens per Sec: 17223.616498355943
Epoch Step: 110 / 138 Loss: 36.53508758544922 Tokens per Sec: 17611.099441089773
Epoch Step: 115 / 138 Loss: 31.154178619384766 Tokens per Sec: 18610.212258960837
Epoch Step: 120 / 138 Loss: 36.67104721069336 Tokens per Sec: 17802.789091485884
Epoch Step: 125 / 138 Loss: 46.304508209228516 Tokens per Sec: 18060.621911476243
Epoch Step: 130 / 138 Loss: 41.34500503540039 Tokens per Sec: 16764.482884395555
Epoch Step: 135 / 138 Loss: 41.60451126098633 Tokens per Sec: 18392.03700416632
Epoch ended with duration 0:00:34.265719
Train perplexity: 1.699790908535303
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int value : VAR_1 ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 d : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals ( METHOD_2 ( - i , commit . METHOD_3 ( ) , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.411994
Validation perplexity: 1.6527386959335235
Model saved best_on_validation!
Epoch 27 / 1000
Epoch Step: 5 / 138 Loss: 42.254981994628906 Tokens per Sec: 18792.1068904584
Epoch Step: 10 / 138 Loss: 40.319915771484375 Tokens per Sec: 18490.453116188222
Epoch Step: 15 / 138 Loss: 40.11806869506836 Tokens per Sec: 19801.881101267958
Epoch Step: 20 / 138 Loss: 24.411531448364258 Tokens per Sec: 19084.82268604163
Epoch Step: 25 / 138 Loss: 30.77602195739746 Tokens per Sec: 18608.51442420314
Epoch Step: 30 / 138 Loss: 23.729171752929688 Tokens per Sec: 19022.980611653806
Epoch Step: 35 / 138 Loss: 35.82884979248047 Tokens per Sec: 18406.323330015315
Epoch Step: 40 / 138 Loss: 35.96548843383789 Tokens per Sec: 17883.38021526711
Epoch Step: 45 / 138 Loss: 40.95521545410156 Tokens per Sec: 20048.55884801455
Epoch Step: 50 / 138 Loss: 30.880176544189453 Tokens per Sec: 19772.14170469145
Epoch Step: 55 / 138 Loss: 44.82343292236328 Tokens per Sec: 19594.568483998708
Epoch Step: 60 / 138 Loss: 30.437328338623047 Tokens per Sec: 20601.77715570125
Epoch Step: 65 / 138 Loss: 47.62937927246094 Tokens per Sec: 19094.30491822757
Epoch Step: 70 / 138 Loss: 24.700407028198242 Tokens per Sec: 17788.44519038435
Epoch Step: 75 / 138 Loss: 41.92240905761719 Tokens per Sec: 17627.98318267392
Epoch Step: 80 / 138 Loss: 32.52457809448242 Tokens per Sec: 19300.90385939797
Epoch Step: 85 / 138 Loss: 35.17574691772461 Tokens per Sec: 19551.711432356387
Epoch Step: 90 / 138 Loss: 50.535133361816406 Tokens per Sec: 18361.70839183997
Epoch Step: 95 / 138 Loss: 27.572795867919922 Tokens per Sec: 18906.000611078016
Epoch Step: 100 / 138 Loss: 33.98911666870117 Tokens per Sec: 19532.53799357446
Epoch Step: 105 / 138 Loss: 42.95271682739258 Tokens per Sec: 19015.560077942442
Epoch Step: 110 / 138 Loss: 28.697675704956055 Tokens per Sec: 14936.729108882835
Epoch Step: 115 / 138 Loss: 35.80744552612305 Tokens per Sec: 17929.31471656465
Epoch Step: 120 / 138 Loss: 31.653778076171875 Tokens per Sec: 18732.074331042648
Epoch Step: 125 / 138 Loss: 41.09144592285156 Tokens per Sec: 17257.272652514082
Epoch Step: 130 / 138 Loss: 37.00018310546875 Tokens per Sec: 17214.96418869846
Epoch Step: 135 / 138 Loss: 34.59471893310547 Tokens per Sec: 18620.07057792366
Epoch ended with duration 0:00:34.247315
Train perplexity: 1.649084377648655
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , java.lang.Object VAR_2 , java.lang.Object VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int value : VAR_1 ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 d : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals ( METHOD_2 ( , node , commit . METHOD_3 ( ) , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.432143
Validation perplexity: 1.6152885087845634
Model saved best_on_validation!
Epoch 28 / 1000
Epoch Step: 5 / 138 Loss: 33.84878158569336 Tokens per Sec: 17532.816943449212
Epoch Step: 10 / 138 Loss: 46.99589920043945 Tokens per Sec: 18636.197758421615
Epoch Step: 15 / 138 Loss: 25.388858795166016 Tokens per Sec: 18883.873702762663
Epoch Step: 20 / 138 Loss: 42.195926666259766 Tokens per Sec: 18208.557670953465
Epoch Step: 25 / 138 Loss: 23.068761825561523 Tokens per Sec: 18383.478935983352
Epoch Step: 30 / 138 Loss: 33.96174621582031 Tokens per Sec: 18985.96605761003
Epoch Step: 35 / 138 Loss: 37.42311477661133 Tokens per Sec: 18793.22645167661
Epoch Step: 40 / 138 Loss: 41.52262496948242 Tokens per Sec: 19993.033815095412
Epoch Step: 45 / 138 Loss: 41.147220611572266 Tokens per Sec: 17008.01182081631
Epoch Step: 50 / 138 Loss: 37.71903610229492 Tokens per Sec: 19916.821770664894
Epoch Step: 55 / 138 Loss: 30.59922218322754 Tokens per Sec: 20067.772640293653
Epoch Step: 60 / 138 Loss: 31.625465393066406 Tokens per Sec: 18468.90549007487
Epoch Step: 65 / 138 Loss: 48.097354888916016 Tokens per Sec: 19300.093054207682
Epoch Step: 70 / 138 Loss: 24.545711517333984 Tokens per Sec: 19875.604710489442
Epoch Step: 75 / 138 Loss: 38.73400115966797 Tokens per Sec: 19884.468061516727
Epoch Step: 80 / 138 Loss: 20.723894119262695 Tokens per Sec: 19771.0042636842
Epoch Step: 85 / 138 Loss: 25.74411964416504 Tokens per Sec: 18152.58330902899
Epoch Step: 90 / 138 Loss: 24.486207962036133 Tokens per Sec: 18519.640813898386
Epoch Step: 95 / 138 Loss: 46.91763687133789 Tokens per Sec: 19752.330458367516
Epoch Step: 100 / 138 Loss: 39.323707580566406 Tokens per Sec: 18630.83105439183
Epoch Step: 105 / 138 Loss: 30.95499610900879 Tokens per Sec: 18181.892660221
Epoch Step: 110 / 138 Loss: 38.26036834716797 Tokens per Sec: 17455.971709515907
Epoch Step: 115 / 138 Loss: 34.267906188964844 Tokens per Sec: 18448.893730530534
Epoch Step: 120 / 138 Loss: 42.48963928222656 Tokens per Sec: 18203.2346943268
Epoch Step: 125 / 138 Loss: 21.590656280517578 Tokens per Sec: 15773.479802821572
Epoch Step: 130 / 138 Loss: 31.203754425048828 Tokens per Sec: 18404.225077622938
Epoch Step: 135 / 138 Loss: 26.701004028320312 Tokens per Sec: 18310.514428673083
Epoch ended with duration 0:00:34.218798
Train perplexity: 1.6166582463526784
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : VAR_1 ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 d : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals ( METHOD_2 ( , node , commit . METHOD_3 ( ) , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.440072
Validation perplexity: 1.589587476822012
Model saved best_on_validation!
Epoch 29 / 1000
Epoch Step: 5 / 138 Loss: 24.836793899536133 Tokens per Sec: 18283.065797590036
Epoch Step: 10 / 138 Loss: 24.078521728515625 Tokens per Sec: 19872.403951863987
Epoch Step: 15 / 138 Loss: 31.683311462402344 Tokens per Sec: 17893.953715975123
Epoch Step: 20 / 138 Loss: 24.304105758666992 Tokens per Sec: 19796.963979658907
Epoch Step: 25 / 138 Loss: 34.54346466064453 Tokens per Sec: 19333.244887265733
Epoch Step: 30 / 138 Loss: 33.58969497680664 Tokens per Sec: 18306.302126251237
Epoch Step: 35 / 138 Loss: 42.12700653076172 Tokens per Sec: 19670.054444720947
Epoch Step: 40 / 138 Loss: 37.65422439575195 Tokens per Sec: 18997.58244279477
Epoch Step: 45 / 138 Loss: 41.02918243408203 Tokens per Sec: 19902.194070523128
Epoch Step: 50 / 138 Loss: 21.980928421020508 Tokens per Sec: 18530.568453283526
Epoch Step: 55 / 138 Loss: 46.11012268066406 Tokens per Sec: 19107.868148098267
Epoch Step: 60 / 138 Loss: 36.13539123535156 Tokens per Sec: 19770.803224071933
Epoch Step: 65 / 138 Loss: 32.11513137817383 Tokens per Sec: 18892.635231801756
Epoch Step: 70 / 138 Loss: 26.214313507080078 Tokens per Sec: 18707.899062102315
Epoch Step: 75 / 138 Loss: 39.15568542480469 Tokens per Sec: 19224.78428405003
Epoch Step: 80 / 138 Loss: 51.659507751464844 Tokens per Sec: 18474.57466509046
Epoch Step: 85 / 138 Loss: 33.55583190917969 Tokens per Sec: 20064.736646567188
Epoch Step: 90 / 138 Loss: 23.33768081665039 Tokens per Sec: 18397.66302482512
Epoch Step: 95 / 138 Loss: 23.38710594177246 Tokens per Sec: 18301.253097728444
Epoch Step: 100 / 138 Loss: 25.575864791870117 Tokens per Sec: 17980.508726051707
Epoch Step: 105 / 138 Loss: 34.1442985534668 Tokens per Sec: 16166.895779741932
Epoch Step: 110 / 138 Loss: 32.135658264160156 Tokens per Sec: 17590.784817401414
Epoch Step: 115 / 138 Loss: 28.718292236328125 Tokens per Sec: 17138.420738145174
Epoch Step: 120 / 138 Loss: 36.57231521606445 Tokens per Sec: 18560.635156779368
Epoch Step: 125 / 138 Loss: 33.59258270263672 Tokens per Sec: 18344.204689676535
Epoch Step: 130 / 138 Loss: 38.747798919677734 Tokens per Sec: 17400.926291654527
Epoch Step: 135 / 138 Loss: 39.142051696777344 Tokens per Sec: 17059.250692178495
Epoch ended with duration 0:00:34.305521
Train perplexity: 1.5852828057147337
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] VAR_2 , java.lang.Object VAR_2 , java.lang.Object VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : VAR_1 ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 d : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals ( METHOD_2 ( , node , commit . METHOD_3 ( ) , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.413739
Validation perplexity: 1.561277426538543
Model saved best_on_validation!
Epoch 30 / 1000
Epoch Step: 5 / 138 Loss: 25.725908279418945 Tokens per Sec: 18428.464403681184
Epoch Step: 10 / 138 Loss: 30.670183181762695 Tokens per Sec: 19331.3650968097
Epoch Step: 15 / 138 Loss: 27.634992599487305 Tokens per Sec: 19125.2054592278
Epoch Step: 20 / 138 Loss: 25.185802459716797 Tokens per Sec: 19338.78479007604
Epoch Step: 25 / 138 Loss: 23.15822982788086 Tokens per Sec: 19967.865428430814
Epoch Step: 30 / 138 Loss: 33.72968673706055 Tokens per Sec: 17676.612861869948
Epoch Step: 35 / 138 Loss: 35.054901123046875 Tokens per Sec: 20320.18638793585
Epoch Step: 40 / 138 Loss: 37.203514099121094 Tokens per Sec: 17214.46090868836
Epoch Step: 45 / 138 Loss: 25.512100219726562 Tokens per Sec: 20448.712616439447
Epoch Step: 50 / 138 Loss: 38.32262420654297 Tokens per Sec: 19139.682523604122
Epoch Step: 55 / 138 Loss: 39.34931945800781 Tokens per Sec: 18641.897028300442
Epoch Step: 60 / 138 Loss: 34.1527214050293 Tokens per Sec: 18799.42735031375
Epoch Step: 65 / 138 Loss: 24.08297348022461 Tokens per Sec: 17211.719074231547
Epoch Step: 70 / 138 Loss: 27.302858352661133 Tokens per Sec: 19177.851001657244
Epoch Step: 75 / 138 Loss: 38.48595428466797 Tokens per Sec: 19168.742853881075
Epoch Step: 80 / 138 Loss: 36.50630187988281 Tokens per Sec: 19818.230508837838
Epoch Step: 85 / 138 Loss: 32.83366775512695 Tokens per Sec: 19759.85463340542
Epoch Step: 90 / 138 Loss: 33.63690948486328 Tokens per Sec: 19559.95433759642
Epoch Step: 95 / 138 Loss: 37.356956481933594 Tokens per Sec: 18246.787097787244
Epoch Step: 100 / 138 Loss: 16.5301570892334 Tokens per Sec: 20069.247354987892
Epoch Step: 105 / 138 Loss: 27.706321716308594 Tokens per Sec: 16758.573454183057
Epoch Step: 110 / 138 Loss: 27.388587951660156 Tokens per Sec: 17610.845099388403
Epoch Step: 115 / 138 Loss: 26.896757125854492 Tokens per Sec: 17711.132281429833
Epoch Step: 120 / 138 Loss: 39.73640823364258 Tokens per Sec: 18466.168997508114
Epoch Step: 125 / 138 Loss: 43.70058059692383 Tokens per Sec: 18062.534671283312
Epoch Step: 130 / 138 Loss: 45.02764129638672 Tokens per Sec: 15838.581943265066
Epoch Step: 135 / 138 Loss: 25.207462310791016 Tokens per Sec: 18312.620275280762
Epoch ended with duration 0:00:34.276190
Train perplexity: 1.5573602101204338
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , java.lang.Object VAR_2 , int VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_4 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 d : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals ( METHOD_2 ( , node , commit . METHOD_3 ( ) , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.417569
Validation perplexity: 1.5403442101027227
Model saved best_on_validation!
Model saved checkpoint!
Epoch 31 / 1000
Epoch Step: 5 / 138 Loss: 26.564056396484375 Tokens per Sec: 17288.546549350056
Epoch Step: 10 / 138 Loss: 43.917110443115234 Tokens per Sec: 17481.066753459247
Epoch Step: 15 / 138 Loss: 35.86345672607422 Tokens per Sec: 18614.091691343096
Epoch Step: 20 / 138 Loss: 30.9017391204834 Tokens per Sec: 18947.349498521122
Epoch Step: 25 / 138 Loss: 20.445138931274414 Tokens per Sec: 18233.3852605173
Epoch Step: 30 / 138 Loss: 31.84793472290039 Tokens per Sec: 19313.417332609144
Epoch Step: 35 / 138 Loss: 36.036277770996094 Tokens per Sec: 19859.998192526164
Epoch Step: 40 / 138 Loss: 30.94320297241211 Tokens per Sec: 19618.479801742982
Epoch Step: 45 / 138 Loss: 39.51590347290039 Tokens per Sec: 17788.725653427977
Epoch Step: 50 / 138 Loss: 31.288408279418945 Tokens per Sec: 19206.553240883663
Epoch Step: 55 / 138 Loss: 40.10796356201172 Tokens per Sec: 18992.097325332536
Epoch Step: 60 / 138 Loss: 40.75632095336914 Tokens per Sec: 19597.926051622013
Epoch Step: 65 / 138 Loss: 27.24227523803711 Tokens per Sec: 18234.294654680703
Epoch Step: 70 / 138 Loss: 24.241941452026367 Tokens per Sec: 18686.628999435605
Epoch Step: 75 / 138 Loss: 39.14274978637695 Tokens per Sec: 19111.657652676684
Epoch Step: 80 / 138 Loss: 33.965362548828125 Tokens per Sec: 19542.97465509975
Epoch Step: 85 / 138 Loss: 30.814870834350586 Tokens per Sec: 18268.281968325366
Epoch Step: 90 / 138 Loss: 26.876890182495117 Tokens per Sec: 19966.001336632384
Epoch Step: 95 / 138 Loss: 31.526830673217773 Tokens per Sec: 18911.952633016972
Epoch Step: 100 / 138 Loss: 31.210371017456055 Tokens per Sec: 19951.660145016973
Epoch Step: 105 / 138 Loss: 34.70925521850586 Tokens per Sec: 19073.440917927026
Epoch Step: 110 / 138 Loss: 26.46200180053711 Tokens per Sec: 16981.11169850796
Epoch Step: 115 / 138 Loss: 37.67003631591797 Tokens per Sec: 17366.016603493343
Epoch Step: 120 / 138 Loss: 27.933225631713867 Tokens per Sec: 17329.317332716488
Epoch Step: 125 / 138 Loss: 29.40380096435547 Tokens per Sec: 17648.392942778868
Epoch Step: 130 / 138 Loss: 26.743762969970703 Tokens per Sec: 17025.582011545008
Epoch Step: 135 / 138 Loss: 29.844308853149414 Tokens per Sec: 17512.305114329298
Epoch ended with duration 0:00:34.437167
Train perplexity: 1.530691101296513
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; assertEquals ( METHOD_2 ( , node , w . METHOD_3 ( node , VAR_3 , VAR_3 , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.418886
Validation perplexity: 1.5285658364805483
Model saved best_on_validation!
Epoch 32 / 1000
Epoch Step: 5 / 138 Loss: 29.008865356445312 Tokens per Sec: 19236.069412979214
Epoch Step: 10 / 138 Loss: 29.018749237060547 Tokens per Sec: 17975.783389705906
Epoch Step: 15 / 138 Loss: 23.632890701293945 Tokens per Sec: 19748.387680923483
Epoch Step: 20 / 138 Loss: 33.25261306762695 Tokens per Sec: 19023.651766640745
Epoch Step: 25 / 138 Loss: 27.001800537109375 Tokens per Sec: 19821.035073816744
Epoch Step: 30 / 138 Loss: 18.069507598876953 Tokens per Sec: 17691.040806350054
Epoch Step: 35 / 138 Loss: 21.458349227905273 Tokens per Sec: 19770.793426449345
Epoch Step: 40 / 138 Loss: 31.648515701293945 Tokens per Sec: 18793.58604869586
Epoch Step: 45 / 138 Loss: 19.58849334716797 Tokens per Sec: 19481.818066895623
Epoch Step: 50 / 138 Loss: 22.67776870727539 Tokens per Sec: 18694.015886782425
Epoch Step: 55 / 138 Loss: 27.29892921447754 Tokens per Sec: 17916.31965376121
Epoch Step: 60 / 138 Loss: 28.5753173828125 Tokens per Sec: 18539.95082442956
Epoch Step: 65 / 138 Loss: 41.38194274902344 Tokens per Sec: 19405.695792977684
Epoch Step: 70 / 138 Loss: 28.702789306640625 Tokens per Sec: 18530.856906132434
Epoch Step: 75 / 138 Loss: 25.058917999267578 Tokens per Sec: 17731.45812225776
Epoch Step: 80 / 138 Loss: 45.304603576660156 Tokens per Sec: 19027.662280354885
Epoch Step: 85 / 138 Loss: 35.556705474853516 Tokens per Sec: 20344.907943439634
Epoch Step: 90 / 138 Loss: 34.66439437866211 Tokens per Sec: 19840.5009263927
Epoch Step: 95 / 138 Loss: 33.7845344543457 Tokens per Sec: 17915.046695754958
Epoch Step: 100 / 138 Loss: 24.294189453125 Tokens per Sec: 19032.383916958916
Epoch Step: 105 / 138 Loss: 33.8918342590332 Tokens per Sec: 18906.398348200066
Epoch Step: 110 / 138 Loss: 26.541017532348633 Tokens per Sec: 16248.585299169898
Epoch Step: 115 / 138 Loss: 29.151771545410156 Tokens per Sec: 18020.477414710578
Epoch Step: 120 / 138 Loss: 33.72674560546875 Tokens per Sec: 18139.98978868461
Epoch Step: 125 / 138 Loss: 25.423465728759766 Tokens per Sec: 18080.97941133259
Epoch Step: 130 / 138 Loss: 22.883159637451172 Tokens per Sec: 18204.125242762373
Epoch Step: 135 / 138 Loss: 35.90178298950195 Tokens per Sec: 17799.16094718732
Epoch ended with duration 0:00:34.240783
Train perplexity: 1.5173666629623903
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; assertEquals ( METHOD_2 ( , node , w . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.406854
Validation perplexity: 1.499435938805828
Model saved best_on_validation!
Epoch 33 / 1000
Epoch Step: 5 / 138 Loss: 24.4007568359375 Tokens per Sec: 17366.852569081664
Epoch Step: 10 / 138 Loss: 21.39066505432129 Tokens per Sec: 18281.862061553402
Epoch Step: 15 / 138 Loss: 29.333301544189453 Tokens per Sec: 19776.1479071912
Epoch Step: 20 / 138 Loss: 31.528331756591797 Tokens per Sec: 18879.603959707307
Epoch Step: 25 / 138 Loss: 18.394502639770508 Tokens per Sec: 20875.10203035176
Epoch Step: 30 / 138 Loss: 35.37666702270508 Tokens per Sec: 18431.054821427115
Epoch Step: 35 / 138 Loss: 17.761003494262695 Tokens per Sec: 19795.25478108879
Epoch Step: 40 / 138 Loss: 31.812942504882812 Tokens per Sec: 19822.63754110599
Epoch Step: 45 / 138 Loss: 32.34590148925781 Tokens per Sec: 18884.20709968588
Epoch Step: 50 / 138 Loss: 29.166048049926758 Tokens per Sec: 18253.81127102634
Epoch Step: 55 / 138 Loss: 37.769283294677734 Tokens per Sec: 18929.36422625238
Epoch Step: 60 / 138 Loss: 30.706851959228516 Tokens per Sec: 19252.08452129034
Epoch Step: 65 / 138 Loss: 33.3088264465332 Tokens per Sec: 19731.621958071788
Epoch Step: 70 / 138 Loss: 36.0850715637207 Tokens per Sec: 18523.72787231135
Epoch Step: 75 / 138 Loss: 36.26033401489258 Tokens per Sec: 18544.862876411913
Epoch Step: 80 / 138 Loss: 34.55772018432617 Tokens per Sec: 17363.462097694697
Epoch Step: 85 / 138 Loss: 24.78980827331543 Tokens per Sec: 17586.49919099836
Epoch Step: 90 / 138 Loss: 22.38360023498535 Tokens per Sec: 18620.70878765576
Epoch Step: 95 / 138 Loss: 19.13302230834961 Tokens per Sec: 19242.171007527624
Epoch Step: 100 / 138 Loss: 33.321876525878906 Tokens per Sec: 20160.4321098138
Epoch Step: 105 / 138 Loss: 36.80261993408203 Tokens per Sec: 16048.22564038365
Epoch Step: 110 / 138 Loss: 23.78345489501953 Tokens per Sec: 17174.45400074037
Epoch Step: 115 / 138 Loss: 28.60580825805664 Tokens per Sec: 18498.451938891027
Epoch Step: 120 / 138 Loss: 32.76413345336914 Tokens per Sec: 18233.91975659602
Epoch Step: 125 / 138 Loss: 25.10589599609375 Tokens per Sec: 17955.03373421672
Epoch Step: 130 / 138 Loss: 35.07424545288086 Tokens per Sec: 17587.374469132206
Epoch Step: 135 / 138 Loss: 29.08017349243164 Tokens per Sec: 17648.33694431857
Epoch ended with duration 0:00:34.354110
Train perplexity: 1.4903437970798818
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.junit.Assert.assertEquals ( METHOD_2 ( , node , w . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.432807
Validation perplexity: 1.4849987857766633
Model saved best_on_validation!
Epoch 34 / 1000
Epoch Step: 5 / 138 Loss: 14.62778091430664 Tokens per Sec: 18848.642652003327
Epoch Step: 10 / 138 Loss: 17.497434616088867 Tokens per Sec: 19218.144679815345
Epoch Step: 15 / 138 Loss: 22.321569442749023 Tokens per Sec: 19101.361885396534
Epoch Step: 20 / 138 Loss: 35.62832260131836 Tokens per Sec: 19490.522699034118
Epoch Step: 25 / 138 Loss: 24.859668731689453 Tokens per Sec: 19903.349059475437
Epoch Step: 30 / 138 Loss: 22.943992614746094 Tokens per Sec: 18946.170800739397
Epoch Step: 35 / 138 Loss: 27.460407257080078 Tokens per Sec: 19805.080202236506
Epoch Step: 40 / 138 Loss: 19.495922088623047 Tokens per Sec: 18466.910285748832
Epoch Step: 45 / 138 Loss: 18.65886688232422 Tokens per Sec: 18640.825126881915
Epoch Step: 50 / 138 Loss: 39.520904541015625 Tokens per Sec: 19061.176641700018
Epoch Step: 55 / 138 Loss: 25.18284034729004 Tokens per Sec: 18924.560254883167
Epoch Step: 60 / 138 Loss: 30.273067474365234 Tokens per Sec: 17667.038142625173
Epoch Step: 65 / 138 Loss: 27.030044555664062 Tokens per Sec: 19366.155256476508
Epoch Step: 70 / 138 Loss: 17.362651824951172 Tokens per Sec: 19205.092888975436
Epoch Step: 75 / 138 Loss: 28.324525833129883 Tokens per Sec: 18910.704506518803
Epoch Step: 80 / 138 Loss: 28.230236053466797 Tokens per Sec: 17962.683215974273
Epoch Step: 85 / 138 Loss: 18.34174156188965 Tokens per Sec: 19244.99048902303
Epoch Step: 90 / 138 Loss: 28.46944236755371 Tokens per Sec: 19513.015091494857
Epoch Step: 95 / 138 Loss: 37.15990447998047 Tokens per Sec: 18527.787765523302
Epoch Step: 100 / 138 Loss: 25.99272346496582 Tokens per Sec: 18542.303720106218
Epoch Step: 105 / 138 Loss: 24.503921508789062 Tokens per Sec: 17524.837433857658
Epoch Step: 110 / 138 Loss: 22.11116600036621 Tokens per Sec: 16102.388097269864
Epoch Step: 115 / 138 Loss: 32.99102020263672 Tokens per Sec: 19009.820326568413
Epoch Step: 120 / 138 Loss: 27.293071746826172 Tokens per Sec: 17058.66479846924
Epoch Step: 125 / 138 Loss: 28.684354782104492 Tokens per Sec: 18504.331151650502
Epoch Step: 130 / 138 Loss: 28.27300453186035 Tokens per Sec: 17024.91293123981
Epoch Step: 135 / 138 Loss: 22.35395622253418 Tokens per Sec: 17513.231332240954
Epoch ended with duration 0:00:34.338149
Train perplexity: 1.4700340777166734
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , java.lang.Object VAR_2 , int VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; assertEquals ( METHOD_2 ( , node , w . METHOD_3 ( node , VAR_3 , VAR_3 , VAR_3 , null ) , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.421304
Validation perplexity: 1.4666275107005882
Model saved best_on_validation!
Epoch 35 / 1000
Epoch Step: 5 / 138 Loss: 33.68473434448242 Tokens per Sec: 18459.763713814293
Epoch Step: 10 / 138 Loss: 28.34758949279785 Tokens per Sec: 20088.160181994444
Epoch Step: 15 / 138 Loss: 27.24694061279297 Tokens per Sec: 19680.457459678033
Epoch Step: 20 / 138 Loss: 20.833351135253906 Tokens per Sec: 20022.00808233487
Epoch Step: 25 / 138 Loss: 28.724353790283203 Tokens per Sec: 19113.68819358751
Epoch Step: 30 / 138 Loss: 29.75365447998047 Tokens per Sec: 18482.455154816413
Epoch Step: 35 / 138 Loss: 16.692157745361328 Tokens per Sec: 19432.687920562857
Epoch Step: 40 / 138 Loss: 40.885009765625 Tokens per Sec: 19688.731284818106
Epoch Step: 45 / 138 Loss: 27.814376831054688 Tokens per Sec: 20066.609454588797
Epoch Step: 50 / 138 Loss: 41.34792709350586 Tokens per Sec: 18494.69084299464
Epoch Step: 55 / 138 Loss: 40.618408203125 Tokens per Sec: 17860.522148769887
Epoch Step: 60 / 138 Loss: 15.372635841369629 Tokens per Sec: 19067.796923371574
Epoch Step: 65 / 138 Loss: 30.49987030029297 Tokens per Sec: 17586.069700348413
Epoch Step: 70 / 138 Loss: 29.637697219848633 Tokens per Sec: 18780.92388842179
Epoch Step: 75 / 138 Loss: 31.24102020263672 Tokens per Sec: 18339.51498402287
Epoch Step: 80 / 138 Loss: 34.39942169189453 Tokens per Sec: 17867.03946607836
Epoch Step: 85 / 138 Loss: 23.450468063354492 Tokens per Sec: 18195.244198925586
Epoch Step: 90 / 138 Loss: 27.24147605895996 Tokens per Sec: 18723.524496952024
Epoch Step: 95 / 138 Loss: 20.324914932250977 Tokens per Sec: 19610.457573153424
Epoch Step: 100 / 138 Loss: 15.968257904052734 Tokens per Sec: 19872.799375664443
Epoch Step: 105 / 138 Loss: 29.356182098388672 Tokens per Sec: 17920.962205208834
Epoch Step: 110 / 138 Loss: 27.635482788085938 Tokens per Sec: 18201.79982327644
Epoch Step: 115 / 138 Loss: 31.101032257080078 Tokens per Sec: 16125.720781536622
Epoch Step: 120 / 138 Loss: 22.25784683227539 Tokens per Sec: 18105.919292205468
Epoch Step: 125 / 138 Loss: 24.96446418762207 Tokens per Sec: 17766.098884801086
Epoch Step: 130 / 138 Loss: 20.45207977294922 Tokens per Sec: 17654.50615812003
Epoch Step: 135 / 138 Loss: 24.91118812561035 Tokens per Sec: 18797.908099896762
Epoch ended with duration 0:00:34.253928
Train perplexity: 1.4642199221375665
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; assertEquals ( METHOD_2 ( , node , commit . METHOD_3 ( node , VAR_3 , VAR_3 , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.434643
Validation perplexity: 1.454766339662402
Model saved best_on_validation!
Model saved checkpoint!
Epoch 36 / 1000
Epoch Step: 5 / 138 Loss: 30.915241241455078 Tokens per Sec: 18136.43429629537
Epoch Step: 10 / 138 Loss: 24.8929443359375 Tokens per Sec: 18571.780153547075
Epoch Step: 15 / 138 Loss: 24.341764450073242 Tokens per Sec: 18026.453567263005
Epoch Step: 20 / 138 Loss: 30.520523071289062 Tokens per Sec: 17598.795897118827
Epoch Step: 25 / 138 Loss: 24.580827713012695 Tokens per Sec: 17269.818124624348
Epoch Step: 30 / 138 Loss: 28.462093353271484 Tokens per Sec: 19003.24098787005
Epoch Step: 35 / 138 Loss: 24.32475471496582 Tokens per Sec: 18963.823749016836
Epoch Step: 40 / 138 Loss: 22.676471710205078 Tokens per Sec: 19311.331777231186
Epoch Step: 45 / 138 Loss: 25.161466598510742 Tokens per Sec: 20226.400155658866
Epoch Step: 50 / 138 Loss: 24.277515411376953 Tokens per Sec: 18932.728784077583
Epoch Step: 55 / 138 Loss: 17.131088256835938 Tokens per Sec: 20465.320490943544
Epoch Step: 60 / 138 Loss: 33.76266098022461 Tokens per Sec: 18347.318750982322
Epoch Step: 65 / 138 Loss: 19.911876678466797 Tokens per Sec: 20327.90825143055
Epoch Step: 70 / 138 Loss: 29.273359298706055 Tokens per Sec: 19776.471675542645
Epoch Step: 75 / 138 Loss: 22.039583206176758 Tokens per Sec: 17467.531542400247
Epoch Step: 80 / 138 Loss: 29.241077423095703 Tokens per Sec: 18854.609844060724
Epoch Step: 85 / 138 Loss: 29.365638732910156 Tokens per Sec: 18794.054956209857
Epoch Step: 90 / 138 Loss: 38.82033157348633 Tokens per Sec: 18923.37059694733
Epoch Step: 95 / 138 Loss: 28.61437225341797 Tokens per Sec: 18892.367360337077
Epoch Step: 100 / 138 Loss: 18.259401321411133 Tokens per Sec: 20035.695307125734
Epoch Step: 105 / 138 Loss: 18.962932586669922 Tokens per Sec: 18818.74229020202
Epoch Step: 110 / 138 Loss: 25.636734008789062 Tokens per Sec: 18210.35317327157
Epoch Step: 115 / 138 Loss: 21.866300582885742 Tokens per Sec: 17238.296093452765
Epoch Step: 120 / 138 Loss: 27.046703338623047 Tokens per Sec: 17751.58413143881
Epoch Step: 125 / 138 Loss: 30.698837280273438 Tokens per Sec: 19107.077453737053
Epoch Step: 130 / 138 Loss: 32.691688537597656 Tokens per Sec: 18430.818455708788
Epoch Step: 135 / 138 Loss: 34.83287048339844 Tokens per Sec: 15592.359074872027
Epoch ended with duration 0:00:34.283013
Train perplexity: 1.440781336425198
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; assertEquals ( METHOD_2 ( , node , w . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.416419
Validation perplexity: 1.4412168366194857
Model saved best_on_validation!
Epoch 37 / 1000
Epoch Step: 5 / 138 Loss: 36.01045227050781 Tokens per Sec: 18348.42399133858
Epoch Step: 10 / 138 Loss: 29.445558547973633 Tokens per Sec: 18714.60138321375
Epoch Step: 15 / 138 Loss: 27.234392166137695 Tokens per Sec: 18705.717192073953
Epoch Step: 20 / 138 Loss: 35.01211929321289 Tokens per Sec: 19824.44394862494
Epoch Step: 25 / 138 Loss: 27.941547393798828 Tokens per Sec: 19682.679069981525
Epoch Step: 30 / 138 Loss: 27.367082595825195 Tokens per Sec: 19102.89250502727
Epoch Step: 35 / 138 Loss: 33.1994743347168 Tokens per Sec: 19181.83151814167
Epoch Step: 40 / 138 Loss: 35.013099670410156 Tokens per Sec: 19223.995776300508
Epoch Step: 45 / 138 Loss: 16.06927490234375 Tokens per Sec: 19799.285156446043
Epoch Step: 50 / 138 Loss: 16.901222229003906 Tokens per Sec: 19655.531039423953
Epoch Step: 55 / 138 Loss: 28.36100196838379 Tokens per Sec: 19292.23143709436
Epoch Step: 60 / 138 Loss: 19.741426467895508 Tokens per Sec: 16964.885569464597
Epoch Step: 65 / 138 Loss: 13.995705604553223 Tokens per Sec: 19453.521765507052
Epoch Step: 70 / 138 Loss: 31.432680130004883 Tokens per Sec: 18324.54688596361
Epoch Step: 75 / 138 Loss: 23.387441635131836 Tokens per Sec: 17035.560145233303
Epoch Step: 80 / 138 Loss: 23.32950210571289 Tokens per Sec: 19090.286738575407
Epoch Step: 85 / 138 Loss: 27.8221492767334 Tokens per Sec: 19779.655007392364
Epoch Step: 90 / 138 Loss: 15.814607620239258 Tokens per Sec: 18959.29187259866
Epoch Step: 95 / 138 Loss: 18.668203353881836 Tokens per Sec: 19491.365019935445
Epoch Step: 100 / 138 Loss: 30.431060791015625 Tokens per Sec: 19518.32309481117
Epoch Step: 105 / 138 Loss: 30.834033966064453 Tokens per Sec: 18125.719835437638
Epoch Step: 110 / 138 Loss: 22.972244262695312 Tokens per Sec: 17933.655071677014
Epoch Step: 115 / 138 Loss: 20.204532623291016 Tokens per Sec: 18284.42687669748
Epoch Step: 120 / 138 Loss: 31.098995208740234 Tokens per Sec: 19133.710972874494
Epoch Step: 125 / 138 Loss: 24.262866973876953 Tokens per Sec: 17986.24918338946
Epoch Step: 130 / 138 Loss: 21.967134475708008 Tokens per Sec: 17119.30338749972
Epoch Step: 135 / 138 Loss: 29.472469329833984 Tokens per Sec: 18650.537602278906
Epoch ended with duration 0:00:34.199008
Train perplexity: 1.422958651774852
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , commit . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.416854
Validation perplexity: 1.431022472489111
Model saved best_on_validation!
Epoch 38 / 1000
Epoch Step: 5 / 138 Loss: 14.415467262268066 Tokens per Sec: 19968.61589856097
Epoch Step: 10 / 138 Loss: 22.558605194091797 Tokens per Sec: 19156.83116163127
Epoch Step: 15 / 138 Loss: 32.383304595947266 Tokens per Sec: 19846.143567552936
Epoch Step: 20 / 138 Loss: 31.497482299804688 Tokens per Sec: 17225.05929893393
Epoch Step: 25 / 138 Loss: 22.236949920654297 Tokens per Sec: 19288.554190657684
Epoch Step: 30 / 138 Loss: 29.882110595703125 Tokens per Sec: 18868.18980485738
Epoch Step: 35 / 138 Loss: 28.395708084106445 Tokens per Sec: 17212.571547326268
Epoch Step: 40 / 138 Loss: 14.694817543029785 Tokens per Sec: 19819.79569791599
Epoch Step: 45 / 138 Loss: 18.875730514526367 Tokens per Sec: 19805.188471029567
Epoch Step: 50 / 138 Loss: 22.07872772216797 Tokens per Sec: 19285.6418922503
Epoch Step: 55 / 138 Loss: 25.325300216674805 Tokens per Sec: 19270.8556610029
Epoch Step: 60 / 138 Loss: 14.162544250488281 Tokens per Sec: 16634.31740740979
Epoch Step: 65 / 138 Loss: 31.659576416015625 Tokens per Sec: 17943.948733355148
Epoch Step: 70 / 138 Loss: 27.082839965820312 Tokens per Sec: 20221.808269938414
Epoch Step: 75 / 138 Loss: 22.252124786376953 Tokens per Sec: 18536.16444742675
Epoch Step: 80 / 138 Loss: 25.554685592651367 Tokens per Sec: 18429.672470640704
Epoch Step: 85 / 138 Loss: 24.748027801513672 Tokens per Sec: 18827.467038133946
Epoch Step: 90 / 138 Loss: 19.45987319946289 Tokens per Sec: 18563.018209504913
Epoch Step: 95 / 138 Loss: 21.200632095336914 Tokens per Sec: 18573.834814866987
Epoch Step: 100 / 138 Loss: 21.625202178955078 Tokens per Sec: 19864.949177762195
Epoch Step: 105 / 138 Loss: 29.65723991394043 Tokens per Sec: 17688.37854937923
Epoch Step: 110 / 138 Loss: 23.412384033203125 Tokens per Sec: 15829.226746458668
Epoch Step: 115 / 138 Loss: 17.39497947692871 Tokens per Sec: 19155.92109084278
Epoch Step: 120 / 138 Loss: 26.68155288696289 Tokens per Sec: 18450.74887638244
Epoch Step: 125 / 138 Loss: 24.655155181884766 Tokens per Sec: 17819.79360632307
Epoch Step: 130 / 138 Loss: 21.98863410949707 Tokens per Sec: 18232.689540193896
Epoch Step: 135 / 138 Loss: 19.44316291809082 Tokens per Sec: 18227.242697370824
Epoch ended with duration 0:00:34.313973
Train perplexity: 1.4110704567133674
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 , java.lang.Object VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , n . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.416797
Validation perplexity: 1.4214151776347448
Model saved best_on_validation!
Epoch 39 / 1000
Epoch Step: 5 / 138 Loss: 28.201244354248047 Tokens per Sec: 19645.189110707805
Epoch Step: 10 / 138 Loss: 20.949264526367188 Tokens per Sec: 19181.342205349567
Epoch Step: 15 / 138 Loss: 15.055155754089355 Tokens per Sec: 18361.161895675177
Epoch Step: 20 / 138 Loss: 21.527755737304688 Tokens per Sec: 18341.96751909382
Epoch Step: 25 / 138 Loss: 15.641998291015625 Tokens per Sec: 19503.745518355234
Epoch Step: 30 / 138 Loss: 26.279552459716797 Tokens per Sec: 19534.145666467193
Epoch Step: 35 / 138 Loss: 28.67559051513672 Tokens per Sec: 17918.038825298703
Epoch Step: 40 / 138 Loss: 28.50044822692871 Tokens per Sec: 18825.692037418135
Epoch Step: 45 / 138 Loss: 22.62313461303711 Tokens per Sec: 18450.207845282395
Epoch Step: 50 / 138 Loss: 17.7863712310791 Tokens per Sec: 19178.161544342154
Epoch Step: 55 / 138 Loss: 26.03675651550293 Tokens per Sec: 18921.514315702683
Epoch Step: 60 / 138 Loss: 24.8308162689209 Tokens per Sec: 19319.65171498128
Epoch Step: 65 / 138 Loss: 14.786033630371094 Tokens per Sec: 20201.66701339437
Epoch Step: 70 / 138 Loss: 26.73229217529297 Tokens per Sec: 16794.78211163453
Epoch Step: 75 / 138 Loss: 29.06311798095703 Tokens per Sec: 18186.6595511179
Epoch Step: 80 / 138 Loss: 23.24643325805664 Tokens per Sec: 18709.76847046198
Epoch Step: 85 / 138 Loss: 19.980382919311523 Tokens per Sec: 20368.763695144535
Epoch Step: 90 / 138 Loss: 21.815345764160156 Tokens per Sec: 18597.7628776676
Epoch Step: 95 / 138 Loss: 31.71478843688965 Tokens per Sec: 19790.035612898508
Epoch Step: 100 / 138 Loss: 37.37703323364258 Tokens per Sec: 17439.644372497038
Epoch Step: 105 / 138 Loss: 28.347591400146484 Tokens per Sec: 15598.340099693702
Epoch Step: 110 / 138 Loss: 21.880929946899414 Tokens per Sec: 18296.76783190443
Epoch Step: 115 / 138 Loss: 22.50714111328125 Tokens per Sec: 18507.542578490356
Epoch Step: 120 / 138 Loss: 26.14167022705078 Tokens per Sec: 18339.504920688574
Epoch Step: 125 / 138 Loss: 19.49622917175293 Tokens per Sec: 18634.093937109315
Epoch Step: 130 / 138 Loss: 15.420634269714355 Tokens per Sec: 18540.819143564382
Epoch Step: 135 / 138 Loss: 15.186006546020508 Tokens per Sec: 17922.193453637483
Epoch ended with duration 0:00:34.277039
Train perplexity: 1.4001353651787998
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , commit . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.421996
Validation perplexity: 1.4091203430405352
Model saved best_on_validation!
Epoch 40 / 1000
Epoch Step: 5 / 138 Loss: 21.59918785095215 Tokens per Sec: 17531.78680179578
Epoch Step: 10 / 138 Loss: 24.608875274658203 Tokens per Sec: 19666.876538920806
Epoch Step: 15 / 138 Loss: 31.634855270385742 Tokens per Sec: 19107.275882425012
Epoch Step: 20 / 138 Loss: 27.749481201171875 Tokens per Sec: 19693.73481210966
Epoch Step: 25 / 138 Loss: 26.29320526123047 Tokens per Sec: 19337.92499344389
Epoch Step: 30 / 138 Loss: 22.251985549926758 Tokens per Sec: 19230.685593753737
Epoch Step: 35 / 138 Loss: 22.889440536499023 Tokens per Sec: 18998.664709588396
Epoch Step: 40 / 138 Loss: 32.0034294128418 Tokens per Sec: 16885.671923509675
Epoch Step: 45 / 138 Loss: 31.682537078857422 Tokens per Sec: 19588.137625086325
Epoch Step: 50 / 138 Loss: 37.74283218383789 Tokens per Sec: 18674.308414251434
Epoch Step: 55 / 138 Loss: 16.100732803344727 Tokens per Sec: 20048.991169521854
Epoch Step: 60 / 138 Loss: 22.118013381958008 Tokens per Sec: 20190.236693596937
Epoch Step: 65 / 138 Loss: 25.269245147705078 Tokens per Sec: 18382.22343086075
Epoch Step: 70 / 138 Loss: 28.252017974853516 Tokens per Sec: 18338.11902533888
Epoch Step: 75 / 138 Loss: 34.08640670776367 Tokens per Sec: 18530.08845125507
Epoch Step: 80 / 138 Loss: 23.58028793334961 Tokens per Sec: 18179.993875595275
Epoch Step: 85 / 138 Loss: 29.39726448059082 Tokens per Sec: 20376.645916927842
Epoch Step: 90 / 138 Loss: 17.561370849609375 Tokens per Sec: 18435.076410727834
Epoch Step: 95 / 138 Loss: 23.49324607849121 Tokens per Sec: 19047.38929882716
Epoch Step: 100 / 138 Loss: 30.012083053588867 Tokens per Sec: 19727.751255532556
Epoch Step: 105 / 138 Loss: 17.659852981567383 Tokens per Sec: 18011.069279101805
Epoch Step: 110 / 138 Loss: 23.560911178588867 Tokens per Sec: 17985.626421036643
Epoch Step: 115 / 138 Loss: 18.702674865722656 Tokens per Sec: 18413.403090630218
Epoch Step: 120 / 138 Loss: 18.06493377685547 Tokens per Sec: 17460.89744379247
Epoch Step: 125 / 138 Loss: 22.912336349487305 Tokens per Sec: 16683.98428261168
Epoch Step: 130 / 138 Loss: 24.422269821166992 Tokens per Sec: 17894.40216355445
Epoch Step: 135 / 138 Loss: 19.90508460998535 Tokens per Sec: 19238.613986077016
Epoch ended with duration 0:00:34.123163
Train perplexity: 1.387304689699029
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 , java.lang.Object VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.423598
Validation perplexity: 1.3991375373357215
Model saved best_on_validation!
Model saved checkpoint!
Epoch 41 / 1000
Epoch Step: 5 / 138 Loss: 25.124168395996094 Tokens per Sec: 19018.95677105516
Epoch Step: 10 / 138 Loss: 25.203603744506836 Tokens per Sec: 18406.675746316763
Epoch Step: 15 / 138 Loss: 14.239575386047363 Tokens per Sec: 19369.543697805624
Epoch Step: 20 / 138 Loss: 26.65089988708496 Tokens per Sec: 17960.33739422108
Epoch Step: 25 / 138 Loss: 23.550861358642578 Tokens per Sec: 18639.21696435338
Epoch Step: 30 / 138 Loss: 14.774734497070312 Tokens per Sec: 19172.1664338317
Epoch Step: 35 / 138 Loss: 24.844799041748047 Tokens per Sec: 17714.193267649272
Epoch Step: 40 / 138 Loss: 18.365266799926758 Tokens per Sec: 19332.419340184428
Epoch Step: 45 / 138 Loss: 13.588284492492676 Tokens per Sec: 18901.14867032514
Epoch Step: 50 / 138 Loss: 23.382160186767578 Tokens per Sec: 19561.03227602709
Epoch Step: 55 / 138 Loss: 15.731412887573242 Tokens per Sec: 19173.933304115504
Epoch Step: 60 / 138 Loss: 25.41621971130371 Tokens per Sec: 18596.282905458545
Epoch Step: 65 / 138 Loss: 19.628877639770508 Tokens per Sec: 19579.87786380404
Epoch Step: 70 / 138 Loss: 25.23749351501465 Tokens per Sec: 17850.78401795841
Epoch Step: 75 / 138 Loss: 17.00448226928711 Tokens per Sec: 19719.99133364791
Epoch Step: 80 / 138 Loss: 12.817773818969727 Tokens per Sec: 19686.005961951807
Epoch Step: 85 / 138 Loss: 31.122573852539062 Tokens per Sec: 19326.12865155228
Epoch Step: 90 / 138 Loss: 18.772188186645508 Tokens per Sec: 18550.069744968732
Epoch Step: 95 / 138 Loss: 22.1213436126709 Tokens per Sec: 18506.981805804608
Epoch Step: 100 / 138 Loss: 14.798568725585938 Tokens per Sec: 20264.888444660195
Epoch Step: 105 / 138 Loss: 20.833003997802734 Tokens per Sec: 18430.484989676606
Epoch Step: 110 / 138 Loss: 26.436222076416016 Tokens per Sec: 17361.60692909961
Epoch Step: 115 / 138 Loss: 20.251218795776367 Tokens per Sec: 16454.997987851417
Epoch Step: 120 / 138 Loss: 25.876127243041992 Tokens per Sec: 17814.267054329186
Epoch Step: 125 / 138 Loss: 18.743221282958984 Tokens per Sec: 18197.22398045134
Epoch Step: 130 / 138 Loss: 26.878435134887695 Tokens per Sec: 17325.795345448572
Epoch Step: 135 / 138 Loss: 20.086856842041016 Tokens per Sec: 17896.49128658377
Epoch ended with duration 0:00:34.315695
Train perplexity: 1.3777638322887755
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , commit . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.406494
Validation perplexity: 1.3922278491730902
Model saved best_on_validation!
Epoch 42 / 1000
Epoch Step: 5 / 138 Loss: 18.735368728637695 Tokens per Sec: 18409.42617649
Epoch Step: 10 / 138 Loss: 17.638093948364258 Tokens per Sec: 18343.37437112838
Epoch Step: 15 / 138 Loss: 29.384702682495117 Tokens per Sec: 18528.11385467412
Epoch Step: 20 / 138 Loss: 25.459243774414062 Tokens per Sec: 18761.258556226632
Epoch Step: 25 / 138 Loss: 27.626684188842773 Tokens per Sec: 19644.3832870424
Epoch Step: 30 / 138 Loss: 30.004039764404297 Tokens per Sec: 19958.116725167398
Epoch Step: 35 / 138 Loss: 20.689861297607422 Tokens per Sec: 18498.027397532816
Epoch Step: 40 / 138 Loss: 30.10478401184082 Tokens per Sec: 19457.78992746003
Epoch Step: 45 / 138 Loss: 19.65355110168457 Tokens per Sec: 17933.297456207732
Epoch Step: 50 / 138 Loss: 20.207128524780273 Tokens per Sec: 18864.90161137659
Epoch Step: 55 / 138 Loss: 26.018531799316406 Tokens per Sec: 18968.400628551157
Epoch Step: 60 / 138 Loss: 20.558452606201172 Tokens per Sec: 18918.964172421583
Epoch Step: 65 / 138 Loss: 24.549345016479492 Tokens per Sec: 20435.857902157928
Epoch Step: 70 / 138 Loss: 24.084468841552734 Tokens per Sec: 16614.118387632258
Epoch Step: 75 / 138 Loss: 22.018529891967773 Tokens per Sec: 18327.762251048964
Epoch Step: 80 / 138 Loss: 18.273719787597656 Tokens per Sec: 20532.102459160214
Epoch Step: 85 / 138 Loss: 13.413961410522461 Tokens per Sec: 18643.841387726654
Epoch Step: 90 / 138 Loss: 19.05340576171875 Tokens per Sec: 19777.853362716858
Epoch Step: 95 / 138 Loss: 27.19851303100586 Tokens per Sec: 18733.196130150933
Epoch Step: 100 / 138 Loss: 23.759387969970703 Tokens per Sec: 20224.742930895038
Epoch Step: 105 / 138 Loss: 26.206819534301758 Tokens per Sec: 18457.952998477536
Epoch Step: 110 / 138 Loss: 17.899417877197266 Tokens per Sec: 18330.34993070974
Epoch Step: 115 / 138 Loss: 34.45089340209961 Tokens per Sec: 18297.04329472991
Epoch Step: 120 / 138 Loss: 26.928316116333008 Tokens per Sec: 17903.50383187687
Epoch Step: 125 / 138 Loss: 16.588937759399414 Tokens per Sec: 19330.158300232593
Epoch Step: 130 / 138 Loss: 21.729087829589844 Tokens per Sec: 15069.720296533427
Epoch Step: 135 / 138 Loss: 26.9541072845459 Tokens per Sec: 18565.587821746827
Epoch ended with duration 0:00:34.108535
Train perplexity: 1.3694194159433384
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.420840
Validation perplexity: 1.388069256146655
Model saved best_on_validation!
Epoch 43 / 1000
Epoch Step: 5 / 138 Loss: 14.797362327575684 Tokens per Sec: 18813.634164900697
Epoch Step: 10 / 138 Loss: 28.867891311645508 Tokens per Sec: 18079.451131074176
Epoch Step: 15 / 138 Loss: 18.741506576538086 Tokens per Sec: 19392.804996612107
Epoch Step: 20 / 138 Loss: 20.558216094970703 Tokens per Sec: 19242.618318241883
Epoch Step: 25 / 138 Loss: 29.998653411865234 Tokens per Sec: 20033.801772545943
Epoch Step: 30 / 138 Loss: 27.195438385009766 Tokens per Sec: 19068.82056202244
Epoch Step: 35 / 138 Loss: 22.632055282592773 Tokens per Sec: 20934.737630749754
Epoch Step: 40 / 138 Loss: 19.172218322753906 Tokens per Sec: 19238.961741994677
Epoch Step: 45 / 138 Loss: 19.50479507446289 Tokens per Sec: 19210.14449713367
Epoch Step: 50 / 138 Loss: 27.556072235107422 Tokens per Sec: 19202.116460995385
Epoch Step: 55 / 138 Loss: 21.373401641845703 Tokens per Sec: 18224.239217628357
Epoch Step: 60 / 138 Loss: 22.484983444213867 Tokens per Sec: 19840.22687067707
Epoch Step: 65 / 138 Loss: 29.98778533935547 Tokens per Sec: 18074.52467988601
Epoch Step: 70 / 138 Loss: 25.64621925354004 Tokens per Sec: 20008.31670206569
Epoch Step: 75 / 138 Loss: 23.56488037109375 Tokens per Sec: 19890.77914593091
Epoch Step: 80 / 138 Loss: 21.783906936645508 Tokens per Sec: 18422.311593421004
Epoch Step: 85 / 138 Loss: 16.859891891479492 Tokens per Sec: 17253.058018658376
Epoch Step: 90 / 138 Loss: 23.543363571166992 Tokens per Sec: 18666.04188820299
Epoch Step: 95 / 138 Loss: 31.692276000976562 Tokens per Sec: 19101.22245581966
Epoch Step: 100 / 138 Loss: 13.83310604095459 Tokens per Sec: 17919.793451366797
Epoch Step: 105 / 138 Loss: 20.44070053100586 Tokens per Sec: 18191.07311887678
Epoch Step: 110 / 138 Loss: 19.17952537536621 Tokens per Sec: 17867.70786341156
Epoch Step: 115 / 138 Loss: 25.620134353637695 Tokens per Sec: 17791.43446682347
Epoch Step: 120 / 138 Loss: 21.46579360961914 Tokens per Sec: 14597.835857238932
Epoch Step: 125 / 138 Loss: 23.924808502197266 Tokens per Sec: 19655.869752753802
Epoch Step: 130 / 138 Loss: 22.08424949645996 Tokens per Sec: 18363.896245552274
Epoch Step: 135 / 138 Loss: 23.50383758544922 Tokens per Sec: 18098.519416214793
Epoch ended with duration 0:00:34.140070
Train perplexity: 1.3595861035165608
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.407439
Validation perplexity: 1.3743267371283754
Model saved best_on_validation!
Epoch 44 / 1000
Epoch Step: 5 / 138 Loss: 23.11556625366211 Tokens per Sec: 18076.728112465167
Epoch Step: 10 / 138 Loss: 21.984792709350586 Tokens per Sec: 20004.14686602861
Epoch Step: 15 / 138 Loss: 13.561931610107422 Tokens per Sec: 19118.332802086385
Epoch Step: 20 / 138 Loss: 29.58922576904297 Tokens per Sec: 18917.422985833844
Epoch Step: 25 / 138 Loss: 26.955169677734375 Tokens per Sec: 18167.01121886318
Epoch Step: 30 / 138 Loss: 22.668792724609375 Tokens per Sec: 18344.16014279921
Epoch Step: 35 / 138 Loss: 27.899703979492188 Tokens per Sec: 19321.87795804038
Epoch Step: 40 / 138 Loss: 20.56255340576172 Tokens per Sec: 20581.698717859363
Epoch Step: 45 / 138 Loss: 23.19373893737793 Tokens per Sec: 19479.31407298985
Epoch Step: 50 / 138 Loss: 26.27910614013672 Tokens per Sec: 18689.510028469827
Epoch Step: 55 / 138 Loss: 26.27749252319336 Tokens per Sec: 19696.438651820587
Epoch Step: 60 / 138 Loss: 27.662473678588867 Tokens per Sec: 19007.31174745293
Epoch Step: 65 / 138 Loss: 21.132143020629883 Tokens per Sec: 18667.047207786076
Epoch Step: 70 / 138 Loss: 25.320785522460938 Tokens per Sec: 18638.102308684443
Epoch Step: 75 / 138 Loss: 14.949785232543945 Tokens per Sec: 18947.354075141113
Epoch Step: 80 / 138 Loss: 26.82692527770996 Tokens per Sec: 18400.347497150935
Epoch Step: 85 / 138 Loss: 30.117847442626953 Tokens per Sec: 18649.454279639558
Epoch Step: 90 / 138 Loss: 23.613801956176758 Tokens per Sec: 18484.583685340174
Epoch Step: 95 / 138 Loss: 15.112646102905273 Tokens per Sec: 19893.61462029175
Epoch Step: 100 / 138 Loss: 22.319686889648438 Tokens per Sec: 17610.114337768475
Epoch Step: 105 / 138 Loss: 17.487102508544922 Tokens per Sec: 18066.73939967774
Epoch Step: 110 / 138 Loss: 23.75392723083496 Tokens per Sec: 18237.958067498465
Epoch Step: 115 / 138 Loss: 20.2120361328125 Tokens per Sec: 16543.22068162428
Epoch Step: 120 / 138 Loss: 14.394970893859863 Tokens per Sec: 17243.230541318735
Epoch Step: 125 / 138 Loss: 22.011205673217773 Tokens per Sec: 18255.452389830934
Epoch Step: 130 / 138 Loss: 26.314159393310547 Tokens per Sec: 18782.56099100108
Epoch Step: 135 / 138 Loss: 26.246973037719727 Tokens per Sec: 18526.487292206162
Epoch ended with duration 0:00:34.281894
Train perplexity: 1.3507178193850573
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , ( ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , commit . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.407027
Validation perplexity: 1.377109407171307
Epoch 45 / 1000
Epoch Step: 5 / 138 Loss: 15.728331565856934 Tokens per Sec: 19997.98367222086
Epoch Step: 10 / 138 Loss: 16.7010440826416 Tokens per Sec: 19811.419764051672
Epoch Step: 15 / 138 Loss: 25.451129913330078 Tokens per Sec: 17818.88472041678
Epoch Step: 20 / 138 Loss: 15.116687774658203 Tokens per Sec: 19658.690941578247
Epoch Step: 25 / 138 Loss: 28.410371780395508 Tokens per Sec: 19349.745424521356
Epoch Step: 30 / 138 Loss: 24.460451126098633 Tokens per Sec: 17977.711997686194
Epoch Step: 35 / 138 Loss: 19.215682983398438 Tokens per Sec: 19535.619393985784
Epoch Step: 40 / 138 Loss: 23.526214599609375 Tokens per Sec: 18631.91444909187
Epoch Step: 45 / 138 Loss: 21.737409591674805 Tokens per Sec: 19867.107351685296
Epoch Step: 50 / 138 Loss: 25.017135620117188 Tokens per Sec: 18735.11398442054
Epoch Step: 55 / 138 Loss: 24.60938835144043 Tokens per Sec: 19124.92456215519
Epoch Step: 60 / 138 Loss: 17.76683807373047 Tokens per Sec: 18934.447956866275
Epoch Step: 65 / 138 Loss: 25.12743377685547 Tokens per Sec: 19054.48469565757
Epoch Step: 70 / 138 Loss: 18.809558868408203 Tokens per Sec: 20604.867746051917
Epoch Step: 75 / 138 Loss: 29.067543029785156 Tokens per Sec: 18299.70609714451
Epoch Step: 80 / 138 Loss: 19.662981033325195 Tokens per Sec: 19846.589650950275
Epoch Step: 85 / 138 Loss: 23.57079315185547 Tokens per Sec: 18966.863101513656
Epoch Step: 90 / 138 Loss: 17.4985294342041 Tokens per Sec: 19222.64086664797
Epoch Step: 95 / 138 Loss: 15.734972953796387 Tokens per Sec: 18523.011792437388
Epoch Step: 100 / 138 Loss: 24.912948608398438 Tokens per Sec: 18270.159878938215
Epoch Step: 105 / 138 Loss: 28.955598831176758 Tokens per Sec: 19034.678497271347
Epoch Step: 110 / 138 Loss: 23.53438949584961 Tokens per Sec: 17431.686096998477
Epoch Step: 115 / 138 Loss: 23.94179916381836 Tokens per Sec: 18233.414219619637
Epoch Step: 120 / 138 Loss: 20.81696319580078 Tokens per Sec: 18585.83508054385
Epoch Step: 125 / 138 Loss: 22.7939510345459 Tokens per Sec: 17632.245083450376
Epoch Step: 130 / 138 Loss: 18.893051147460938 Tokens per Sec: 18212.93015429663
Epoch Step: 135 / 138 Loss: 22.423864364624023 Tokens per Sec: 16924.0481673842
Epoch ended with duration 0:00:33.965224
Train perplexity: 1.342624344848375
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 , java.lang.Object > VAR_1 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { TYPE_6 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( )[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.413597
Validation perplexity: 1.3741925735098304
Model saved best_on_validation!
Model saved checkpoint!
Epoch 46 / 1000
Epoch Step: 5 / 138 Loss: 17.381776809692383 Tokens per Sec: 20625.41882169593
Epoch Step: 10 / 138 Loss: 19.619277954101562 Tokens per Sec: 19283.273351545296
Epoch Step: 15 / 138 Loss: 22.678220748901367 Tokens per Sec: 18783.37451826781
Epoch Step: 20 / 138 Loss: 10.35425853729248 Tokens per Sec: 17790.245275245
Epoch Step: 25 / 138 Loss: 27.244720458984375 Tokens per Sec: 17528.957175549403
Epoch Step: 30 / 138 Loss: 16.932512283325195 Tokens per Sec: 20575.356284527643
Epoch Step: 35 / 138 Loss: 18.232393264770508 Tokens per Sec: 18149.588396560208
Epoch Step: 40 / 138 Loss: 21.642681121826172 Tokens per Sec: 19613.03730008759
Epoch Step: 45 / 138 Loss: 30.56656837463379 Tokens per Sec: 19435.55839614283
Epoch Step: 50 / 138 Loss: 31.35896873474121 Tokens per Sec: 19195.40113420017
Epoch Step: 55 / 138 Loss: 16.67067527770996 Tokens per Sec: 19750.4666572047
Epoch Step: 60 / 138 Loss: 25.884918212890625 Tokens per Sec: 18572.4406936041
Epoch Step: 65 / 138 Loss: 16.23540687561035 Tokens per Sec: 19616.280169059668
Epoch Step: 70 / 138 Loss: 16.363723754882812 Tokens per Sec: 20039.56959606976
Epoch Step: 75 / 138 Loss: 16.808589935302734 Tokens per Sec: 18948.324676132637
Epoch Step: 80 / 138 Loss: 24.065277099609375 Tokens per Sec: 18422.93955747908
Epoch Step: 85 / 138 Loss: 13.097891807556152 Tokens per Sec: 17839.36370744696
Epoch Step: 90 / 138 Loss: 15.65927505493164 Tokens per Sec: 20287.798020193102
Epoch Step: 95 / 138 Loss: 23.519916534423828 Tokens per Sec: 17968.0910732792
Epoch Step: 100 / 138 Loss: 23.414276123046875 Tokens per Sec: 17421.931617389022
Epoch Step: 105 / 138 Loss: 25.619922637939453 Tokens per Sec: 17861.65399731421
Epoch Step: 110 / 138 Loss: 20.088159561157227 Tokens per Sec: 16500.97879237736
Epoch Step: 115 / 138 Loss: 20.66771125793457 Tokens per Sec: 18003.610126632306
Epoch Step: 120 / 138 Loss: 21.68258285522461 Tokens per Sec: 17919.367866357206
Epoch Step: 125 / 138 Loss: 25.238134384155273 Tokens per Sec: 18568.975621451227
Epoch Step: 130 / 138 Loss: 16.867088317871094 Tokens per Sec: 18578.140897286754
Epoch Step: 135 / 138 Loss: 21.714794158935547 Tokens per Sec: 16864.45804710702
Epoch ended with duration 0:00:34.231717
Train perplexity: 1.3355490404725394
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 , java.lang.Object > VAR_1 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.412244
Validation perplexity: 1.3658448613603318
Model saved best_on_validation!
Epoch 47 / 1000
Epoch Step: 5 / 138 Loss: 18.830902099609375 Tokens per Sec: 18960.14165917221
Epoch Step: 10 / 138 Loss: 22.00074005126953 Tokens per Sec: 18874.834280688905
Epoch Step: 15 / 138 Loss: 24.673677444458008 Tokens per Sec: 18555.99959491472
Epoch Step: 20 / 138 Loss: 19.95634651184082 Tokens per Sec: 18440.114570615646
Epoch Step: 25 / 138 Loss: 25.218233108520508 Tokens per Sec: 18009.356684004244
Epoch Step: 30 / 138 Loss: 25.319480895996094 Tokens per Sec: 17980.558682917155
Epoch Step: 35 / 138 Loss: 21.157073974609375 Tokens per Sec: 19008.147464091166
Epoch Step: 40 / 138 Loss: 13.45632553100586 Tokens per Sec: 20072.219695947297
Epoch Step: 45 / 138 Loss: 22.278186798095703 Tokens per Sec: 18655.272125479536
Epoch Step: 50 / 138 Loss: 25.564565658569336 Tokens per Sec: 19812.050856826976
Epoch Step: 55 / 138 Loss: 22.298351287841797 Tokens per Sec: 18059.050674042242
Epoch Step: 60 / 138 Loss: 15.676179885864258 Tokens per Sec: 19685.64517617237
Epoch Step: 65 / 138 Loss: 17.888118743896484 Tokens per Sec: 19076.805295948616
Epoch Step: 70 / 138 Loss: 19.990657806396484 Tokens per Sec: 17929.30037983597
Epoch Step: 75 / 138 Loss: 19.775569915771484 Tokens per Sec: 19211.446892892054
Epoch Step: 80 / 138 Loss: 17.5218505859375 Tokens per Sec: 19640.837909566897
Epoch Step: 85 / 138 Loss: 12.5193510055542 Tokens per Sec: 19547.306642222626
Epoch Step: 90 / 138 Loss: 20.109867095947266 Tokens per Sec: 19928.037224065225
Epoch Step: 95 / 138 Loss: 19.98584747314453 Tokens per Sec: 18472.326294142636
Epoch Step: 100 / 138 Loss: 17.969135284423828 Tokens per Sec: 18179.345270606373
Epoch Step: 105 / 138 Loss: 25.035890579223633 Tokens per Sec: 18939.300253515274
Epoch Step: 110 / 138 Loss: 21.649017333984375 Tokens per Sec: 18323.809083370845
Epoch Step: 115 / 138 Loss: 18.982879638671875 Tokens per Sec: 18290.645765988298
Epoch Step: 120 / 138 Loss: 15.573907852172852 Tokens per Sec: 18263.973548829046
Epoch Step: 125 / 138 Loss: 19.917531967163086 Tokens per Sec: 15515.427060936463
Epoch Step: 130 / 138 Loss: 25.837202072143555 Tokens per Sec: 18923.031720370695
Epoch Step: 135 / 138 Loss: 19.09542465209961 Tokens per Sec: 17277.31395865226
Epoch ended with duration 0:00:34.213793
Train perplexity: 1.3325710142145795
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 , java.lang.Object > VAR_1 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.414816
Validation perplexity: 1.355842899864918
Model saved best_on_validation!
Epoch 48 / 1000
Epoch Step: 5 / 138 Loss: 25.634618759155273 Tokens per Sec: 18926.2709584753
Epoch Step: 10 / 138 Loss: 22.3142147064209 Tokens per Sec: 17883.81767710924
Epoch Step: 15 / 138 Loss: 20.061580657958984 Tokens per Sec: 18821.734677987064
Epoch Step: 20 / 138 Loss: 17.134204864501953 Tokens per Sec: 18223.60162082386
Epoch Step: 25 / 138 Loss: 21.473569869995117 Tokens per Sec: 19875.912537164088
Epoch Step: 30 / 138 Loss: 16.563810348510742 Tokens per Sec: 19815.717608076466
Epoch Step: 35 / 138 Loss: 17.951107025146484 Tokens per Sec: 18179.250462847463
Epoch Step: 40 / 138 Loss: 22.944488525390625 Tokens per Sec: 19953.02398119258
Epoch Step: 45 / 138 Loss: 27.658641815185547 Tokens per Sec: 18926.665527696903
Epoch Step: 50 / 138 Loss: 25.835500717163086 Tokens per Sec: 19121.22586051122
Epoch Step: 55 / 138 Loss: 15.847254753112793 Tokens per Sec: 18801.704081464493
Epoch Step: 60 / 138 Loss: 15.005228042602539 Tokens per Sec: 19561.123477557157
Epoch Step: 65 / 138 Loss: 17.90032386779785 Tokens per Sec: 19279.06707914506
Epoch Step: 70 / 138 Loss: 18.68785285949707 Tokens per Sec: 18891.22168149356
Epoch Step: 75 / 138 Loss: 12.03149700164795 Tokens per Sec: 19037.548219257485
Epoch Step: 80 / 138 Loss: 15.131415367126465 Tokens per Sec: 19402.525819272374
Epoch Step: 85 / 138 Loss: 12.893455505371094 Tokens per Sec: 18187.877285296083
Epoch Step: 90 / 138 Loss: 18.906959533691406 Tokens per Sec: 19463.786040280163
Epoch Step: 95 / 138 Loss: 27.009538650512695 Tokens per Sec: 18376.124281340228
Epoch Step: 100 / 138 Loss: 15.759057998657227 Tokens per Sec: 20312.680561189347
Epoch Step: 105 / 138 Loss: 20.528287887573242 Tokens per Sec: 17726.71285446903
Epoch Step: 110 / 138 Loss: 15.182701110839844 Tokens per Sec: 18643.148799177085
Epoch Step: 115 / 138 Loss: 19.7430419921875 Tokens per Sec: 17160.835960971457
Epoch Step: 120 / 138 Loss: 17.605932235717773 Tokens per Sec: 17946.315295210272
Epoch Step: 125 / 138 Loss: 17.95173454284668 Tokens per Sec: 18136.53739622905
Epoch Step: 130 / 138 Loss: 20.01505470275879 Tokens per Sec: 16129.389655678317
Epoch Step: 135 / 138 Loss: 28.619413375854492 Tokens per Sec: 18850.89566850811
Epoch ended with duration 0:00:34.086889
Train perplexity: 1.3238675837467444
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 , java.lang.Object > VAR_1 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.406369
Validation perplexity: 1.3515680683020848
Model saved best_on_validation!
Epoch 49 / 1000
Epoch Step: 5 / 138 Loss: 27.089237213134766 Tokens per Sec: 17726.407519685967
Epoch Step: 10 / 138 Loss: 10.60208511352539 Tokens per Sec: 18962.952257581328
Epoch Step: 15 / 138 Loss: 19.499189376831055 Tokens per Sec: 17229.38246006079
Epoch Step: 20 / 138 Loss: 16.53471565246582 Tokens per Sec: 19494.851200459616
Epoch Step: 25 / 138 Loss: 12.646724700927734 Tokens per Sec: 20305.85936679169
Epoch Step: 30 / 138 Loss: 20.7532958984375 Tokens per Sec: 19663.427801521408
Epoch Step: 35 / 138 Loss: 23.80256462097168 Tokens per Sec: 19029.497532271515
Epoch Step: 40 / 138 Loss: 21.752758026123047 Tokens per Sec: 18975.937076568887
Epoch Step: 45 / 138 Loss: 15.534286499023438 Tokens per Sec: 19239.364345699963
Epoch Step: 50 / 138 Loss: 10.567190170288086 Tokens per Sec: 19946.357966561198
Epoch Step: 55 / 138 Loss: 18.412717819213867 Tokens per Sec: 19264.542977807807
Epoch Step: 60 / 138 Loss: 19.03033447265625 Tokens per Sec: 19566.854159728056
Epoch Step: 65 / 138 Loss: 14.815162658691406 Tokens per Sec: 18925.22856305316
Epoch Step: 70 / 138 Loss: 20.475534439086914 Tokens per Sec: 17406.04922425279
Epoch Step: 75 / 138 Loss: 16.754302978515625 Tokens per Sec: 18912.10300179579
Epoch Step: 80 / 138 Loss: 17.81972885131836 Tokens per Sec: 20465.150677206766
Epoch Step: 85 / 138 Loss: 22.087337493896484 Tokens per Sec: 19528.450048066225
Epoch Step: 90 / 138 Loss: 26.100854873657227 Tokens per Sec: 19428.711825364644
Epoch Step: 95 / 138 Loss: 18.312429428100586 Tokens per Sec: 18488.3738573043
Epoch Step: 100 / 138 Loss: 18.034835815429688 Tokens per Sec: 17400.31618699519
Epoch Step: 105 / 138 Loss: 24.701486587524414 Tokens per Sec: 16254.22063174465
Epoch Step: 110 / 138 Loss: 18.518491744995117 Tokens per Sec: 18543.340156375936
Epoch Step: 115 / 138 Loss: 23.094961166381836 Tokens per Sec: 18594.212816996314
Epoch Step: 120 / 138 Loss: 24.79524040222168 Tokens per Sec: 19048.429381305858
Epoch Step: 125 / 138 Loss: 21.049631118774414 Tokens per Sec: 17569.737340426353
Epoch Step: 130 / 138 Loss: 16.963552474975586 Tokens per Sec: 18521.089830060082
Epoch Step: 135 / 138 Loss: 18.74116325378418 Tokens per Sec: 17538.7374298423
Epoch ended with duration 0:00:34.105384
Train perplexity: 1.3207872787842865
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.409071
Validation perplexity: 1.3434398329542654
Model saved best_on_validation!
Epoch 50 / 1000
Epoch Step: 5 / 138 Loss: 23.92801284790039 Tokens per Sec: 17397.75465861314
Epoch Step: 10 / 138 Loss: 16.693267822265625 Tokens per Sec: 19031.68721424205
Epoch Step: 15 / 138 Loss: 14.687719345092773 Tokens per Sec: 18448.338079183937
Epoch Step: 20 / 138 Loss: 16.9759521484375 Tokens per Sec: 19752.480398862488
Epoch Step: 25 / 138 Loss: 29.159543991088867 Tokens per Sec: 18315.229271530585
Epoch Step: 30 / 138 Loss: 15.305807113647461 Tokens per Sec: 18111.19682778241
Epoch Step: 35 / 138 Loss: 14.133504867553711 Tokens per Sec: 19810.84171051885
Epoch Step: 40 / 138 Loss: 16.64094352722168 Tokens per Sec: 19535.111647856465
Epoch Step: 45 / 138 Loss: 21.36350440979004 Tokens per Sec: 20132.62965835707
Epoch Step: 50 / 138 Loss: 15.815760612487793 Tokens per Sec: 19859.080705182816
Epoch Step: 55 / 138 Loss: 15.328812599182129 Tokens per Sec: 18295.358374083564
Epoch Step: 60 / 138 Loss: 25.06755828857422 Tokens per Sec: 17122.99579787119
Epoch Step: 65 / 138 Loss: 16.08330726623535 Tokens per Sec: 19476.90920440365
Epoch Step: 70 / 138 Loss: 15.565640449523926 Tokens per Sec: 20310.318496234304
Epoch Step: 75 / 138 Loss: 25.336402893066406 Tokens per Sec: 18158.93209504133
Epoch Step: 80 / 138 Loss: 15.616930961608887 Tokens per Sec: 19195.90427639284
Epoch Step: 85 / 138 Loss: 20.88962173461914 Tokens per Sec: 20016.156828627754
Epoch Step: 90 / 138 Loss: 18.016204833984375 Tokens per Sec: 17949.813861982006
Epoch Step: 95 / 138 Loss: 18.766504287719727 Tokens per Sec: 18682.39352087575
Epoch Step: 100 / 138 Loss: 16.520872116088867 Tokens per Sec: 19000.511713927637
Epoch Step: 105 / 138 Loss: 18.856098175048828 Tokens per Sec: 18284.78656257984
Epoch Step: 110 / 138 Loss: 18.362377166748047 Tokens per Sec: 18545.219253706262
Epoch Step: 115 / 138 Loss: 20.979663848876953 Tokens per Sec: 17558.121984898684
Epoch Step: 120 / 138 Loss: 18.519001007080078 Tokens per Sec: 17544.062259406248
Epoch Step: 125 / 138 Loss: 14.64508056640625 Tokens per Sec: 17962.38601706988
Epoch Step: 130 / 138 Loss: 17.686819076538086 Tokens per Sec: 17449.253428057607
Epoch Step: 135 / 138 Loss: 19.6936092376709 Tokens per Sec: 16206.19174362857
Epoch ended with duration 0:00:34.334958
Train perplexity: 1.3080444369048763
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { if ( ( VAR_1 != null ) { try { try { try { if ( ( VAR_1 != null ) { try { try { try { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 ,[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.403539
Validation perplexity: 1.3433003099536969
Model saved best_on_validation!
Model saved checkpoint!
Epoch 51 / 1000
Epoch Step: 5 / 138 Loss: 21.34528350830078 Tokens per Sec: 16970.90336035558
Epoch Step: 10 / 138 Loss: 17.32084846496582 Tokens per Sec: 18670.811643953275
Epoch Step: 15 / 138 Loss: 27.561132431030273 Tokens per Sec: 19191.29940794756
Epoch Step: 20 / 138 Loss: 15.43787670135498 Tokens per Sec: 19394.49330350853
Epoch Step: 25 / 138 Loss: 17.65669822692871 Tokens per Sec: 19149.362680177102
Epoch Step: 30 / 138 Loss: 30.093046188354492 Tokens per Sec: 18997.65297419326
Epoch Step: 35 / 138 Loss: 21.460491180419922 Tokens per Sec: 17746.435338235853
Epoch Step: 40 / 138 Loss: 17.227432250976562 Tokens per Sec: 19789.21427002327
Epoch Step: 45 / 138 Loss: 20.691146850585938 Tokens per Sec: 19490.78386525619
Epoch Step: 50 / 138 Loss: 10.33474349975586 Tokens per Sec: 18690.384897733977
Epoch Step: 55 / 138 Loss: 23.599872589111328 Tokens per Sec: 17826.19949979669
Epoch Step: 60 / 138 Loss: 14.01401424407959 Tokens per Sec: 20245.613655025336
Epoch Step: 65 / 138 Loss: 17.97286605834961 Tokens per Sec: 19794.19100150112
Epoch Step: 70 / 138 Loss: 18.180980682373047 Tokens per Sec: 18760.860720097666
Epoch Step: 75 / 138 Loss: 20.782577514648438 Tokens per Sec: 19721.57992499543
Epoch Step: 80 / 138 Loss: 12.8237943649292 Tokens per Sec: 17631.081550309922
Epoch Step: 85 / 138 Loss: 24.92860221862793 Tokens per Sec: 18295.696583489706
Epoch Step: 90 / 138 Loss: 19.55767822265625 Tokens per Sec: 19832.072885050264
Epoch Step: 95 / 138 Loss: 14.339152336120605 Tokens per Sec: 19518.704638149426
Epoch Step: 100 / 138 Loss: 18.290300369262695 Tokens per Sec: 19657.092469505184
Epoch Step: 105 / 138 Loss: 27.949865341186523 Tokens per Sec: 15548.11830567399
Epoch Step: 110 / 138 Loss: 15.004325866699219 Tokens per Sec: 18637.242253485132
Epoch Step: 115 / 138 Loss: 17.122684478759766 Tokens per Sec: 18767.178951237624
Epoch Step: 120 / 138 Loss: 22.333620071411133 Tokens per Sec: 17965.412606383234
Epoch Step: 125 / 138 Loss: 14.689689636230469 Tokens per Sec: 18401.68151643972
Epoch Step: 130 / 138 Loss: 23.0022029876709 Tokens per Sec: 15820.872404821497
Epoch Step: 135 / 138 Loss: 11.715229988098145 Tokens per Sec: 18315.662845815667
Epoch ended with duration 0:00:34.302101
Train perplexity: 1.3058265902092916
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.406452
Validation perplexity: 1.336316732059369
Model saved best_on_validation!
Epoch 52 / 1000
Epoch Step: 5 / 138 Loss: 21.398069381713867 Tokens per Sec: 17526.022337968054
Epoch Step: 10 / 138 Loss: 16.39663314819336 Tokens per Sec: 18439.633475313258
Epoch Step: 15 / 138 Loss: 23.16975975036621 Tokens per Sec: 18717.138344089904
Epoch Step: 20 / 138 Loss: 17.911258697509766 Tokens per Sec: 19637.51581027909
Epoch Step: 25 / 138 Loss: 14.946563720703125 Tokens per Sec: 20268.444083612212
Epoch Step: 30 / 138 Loss: 21.197805404663086 Tokens per Sec: 18813.928933531173
Epoch Step: 35 / 138 Loss: 18.747737884521484 Tokens per Sec: 18444.642651277296
Epoch Step: 40 / 138 Loss: 21.321090698242188 Tokens per Sec: 20024.400738537293
Epoch Step: 45 / 138 Loss: 26.895402908325195 Tokens per Sec: 19719.678212059913
Epoch Step: 50 / 138 Loss: 23.10036849975586 Tokens per Sec: 19502.288199014467
Epoch Step: 55 / 138 Loss: 16.527236938476562 Tokens per Sec: 18679.46048278755
Epoch Step: 60 / 138 Loss: 22.429000854492188 Tokens per Sec: 18716.812875553416
Epoch Step: 65 / 138 Loss: 17.61302375793457 Tokens per Sec: 18269.016717496484
Epoch Step: 70 / 138 Loss: 24.155494689941406 Tokens per Sec: 17893.40736887208
Epoch Step: 75 / 138 Loss: 20.39044761657715 Tokens per Sec: 19800.273184324196
Epoch Step: 80 / 138 Loss: 27.33556365966797 Tokens per Sec: 18187.731316053476
Epoch Step: 85 / 138 Loss: 25.223093032836914 Tokens per Sec: 19867.60347387241
Epoch Step: 90 / 138 Loss: 18.55385398864746 Tokens per Sec: 18687.45353240426
Epoch Step: 95 / 138 Loss: 18.743297576904297 Tokens per Sec: 20211.490100481697
Epoch Step: 100 / 138 Loss: 21.67276382446289 Tokens per Sec: 18907.430193163436
Epoch Step: 105 / 138 Loss: 17.99673843383789 Tokens per Sec: 16419.518185420904
Epoch Step: 110 / 138 Loss: 18.134553909301758 Tokens per Sec: 18123.603909548823
Epoch Step: 115 / 138 Loss: 15.845756530761719 Tokens per Sec: 18271.408832680263
Epoch Step: 120 / 138 Loss: 19.0823917388916 Tokens per Sec: 18353.6602900512
Epoch Step: 125 / 138 Loss: 15.646483421325684 Tokens per Sec: 17392.623843140558
Epoch Step: 130 / 138 Loss: 15.701807022094727 Tokens per Sec: 18440.227544861125
Epoch Step: 135 / 138 Loss: 16.542577743530273 Tokens per Sec: 18555.18070188267
Epoch ended with duration 0:00:34.140571
Train perplexity: 1.2998543064997081
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { com.google.common.truth.Truth.assertThat . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.403305
Validation perplexity: 1.338953245935451
Epoch 53 / 1000
Epoch Step: 5 / 138 Loss: 19.915796279907227 Tokens per Sec: 19927.644599322033
Epoch Step: 10 / 138 Loss: 12.285021781921387 Tokens per Sec: 19475.90860070894
Epoch Step: 15 / 138 Loss: 22.743284225463867 Tokens per Sec: 18360.71813825714
Epoch Step: 20 / 138 Loss: 19.788846969604492 Tokens per Sec: 19448.45584069989
Epoch Step: 25 / 138 Loss: 19.56403160095215 Tokens per Sec: 18961.006376244582
Epoch Step: 30 / 138 Loss: 13.27928638458252 Tokens per Sec: 18084.098664625115
Epoch Step: 35 / 138 Loss: 14.63683795928955 Tokens per Sec: 19156.162335178302
Epoch Step: 40 / 138 Loss: 18.996957778930664 Tokens per Sec: 18931.22145610615
Epoch Step: 45 / 138 Loss: 14.371820449829102 Tokens per Sec: 19305.90386678057
Epoch Step: 50 / 138 Loss: 15.333535194396973 Tokens per Sec: 18996.289284071034
Epoch Step: 55 / 138 Loss: 17.699085235595703 Tokens per Sec: 17672.921700587234
Epoch Step: 60 / 138 Loss: 15.067556381225586 Tokens per Sec: 19325.15634884655
Epoch Step: 65 / 138 Loss: 18.28874969482422 Tokens per Sec: 19647.697626003504
Epoch Step: 70 / 138 Loss: 21.49483299255371 Tokens per Sec: 18520.620789755598
Epoch Step: 75 / 138 Loss: 19.946775436401367 Tokens per Sec: 19208.021926888567
Epoch Step: 80 / 138 Loss: 12.656072616577148 Tokens per Sec: 20120.196273727564
Epoch Step: 85 / 138 Loss: 16.552204132080078 Tokens per Sec: 18853.385103383367
Epoch Step: 90 / 138 Loss: 18.285968780517578 Tokens per Sec: 19557.935400678685
Epoch Step: 95 / 138 Loss: 16.35028839111328 Tokens per Sec: 19185.01073839943
Epoch Step: 100 / 138 Loss: 25.402345657348633 Tokens per Sec: 18187.14422833706
Epoch Step: 105 / 138 Loss: 14.946794509887695 Tokens per Sec: 18575.650657063583
Epoch Step: 110 / 138 Loss: 17.50899887084961 Tokens per Sec: 18236.65167566056
Epoch Step: 115 / 138 Loss: 24.523664474487305 Tokens per Sec: 18957.91543391925
Epoch Step: 120 / 138 Loss: 19.260005950927734 Tokens per Sec: 18693.66246434495
Epoch Step: 125 / 138 Loss: 25.340179443359375 Tokens per Sec: 15682.38112930877
Epoch Step: 130 / 138 Loss: 20.65597915649414 Tokens per Sec: 17554.728882136067
Epoch Step: 135 / 138 Loss: 16.517982482910156 Tokens per Sec: 16109.646693367145
Epoch ended with duration 0:00:34.175101
Train perplexity: 1.2936337216381957
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 , java.util.List < java.lang.String , java.lang.Object > VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { com.google.common.truth.Truth.assertThat . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.407688
Validation perplexity: 1.329367449849387
Model saved best_on_validation!
Epoch 54 / 1000
Epoch Step: 5 / 138 Loss: 15.114431381225586 Tokens per Sec: 19625.500126937
Epoch Step: 10 / 138 Loss: 24.271862030029297 Tokens per Sec: 19394.450917736332
Epoch Step: 15 / 138 Loss: 8.947128295898438 Tokens per Sec: 19468.687970844407
Epoch Step: 20 / 138 Loss: 12.929062843322754 Tokens per Sec: 20056.492316215812
Epoch Step: 25 / 138 Loss: 17.700206756591797 Tokens per Sec: 18717.941048518307
Epoch Step: 30 / 138 Loss: 20.63723373413086 Tokens per Sec: 18962.448288667765
Epoch Step: 35 / 138 Loss: 18.931188583374023 Tokens per Sec: 19405.857358390364
Epoch Step: 40 / 138 Loss: 16.471555709838867 Tokens per Sec: 17512.840182577307
Epoch Step: 45 / 138 Loss: 19.722074508666992 Tokens per Sec: 19967.668284299853
Epoch Step: 50 / 138 Loss: 19.90766716003418 Tokens per Sec: 18511.78829343482
Epoch Step: 55 / 138 Loss: 24.3105411529541 Tokens per Sec: 18572.648236605874
Epoch Step: 60 / 138 Loss: 12.212667465209961 Tokens per Sec: 19710.964357564684
Epoch Step: 65 / 138 Loss: 9.907783508300781 Tokens per Sec: 19547.840548101154
Epoch Step: 70 / 138 Loss: 19.265336990356445 Tokens per Sec: 18428.611481574328
Epoch Step: 75 / 138 Loss: 13.638070106506348 Tokens per Sec: 18841.884613174512
Epoch Step: 80 / 138 Loss: 13.622917175292969 Tokens per Sec: 20595.57639397188
Epoch Step: 85 / 138 Loss: 17.4068603515625 Tokens per Sec: 18737.100552696837
Epoch Step: 90 / 138 Loss: 21.23154640197754 Tokens per Sec: 17927.134377877806
Epoch Step: 95 / 138 Loss: 15.404683113098145 Tokens per Sec: 18667.923837587503
Epoch Step: 100 / 138 Loss: 13.756481170654297 Tokens per Sec: 19864.101443515385
Epoch Step: 105 / 138 Loss: 21.279775619506836 Tokens per Sec: 15962.45647457208
Epoch Step: 110 / 138 Loss: 21.691335678100586 Tokens per Sec: 18925.275329526532
Epoch Step: 115 / 138 Loss: 17.79151153564453 Tokens per Sec: 17652.941690449
Epoch Step: 120 / 138 Loss: 15.471980094909668 Tokens per Sec: 17449.394572153455
Epoch Step: 125 / 138 Loss: 13.705949783325195 Tokens per Sec: 17205.024456562955
Epoch Step: 130 / 138 Loss: 16.639001846313477 Tokens per Sec: 17133.231811529782
Epoch Step: 135 / 138 Loss: 19.887617111206055 Tokens per Sec: 17665.86597898378
Epoch ended with duration 0:00:34.140875
Train perplexity: 1.2905179254321157
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.415416
Validation perplexity: 1.3382382300366251
Epoch 55 / 1000
Epoch Step: 5 / 138 Loss: 11.746342658996582 Tokens per Sec: 17909.163191558244
Epoch Step: 10 / 138 Loss: 23.949737548828125 Tokens per Sec: 19144.387899151403
Epoch Step: 15 / 138 Loss: 21.5081729888916 Tokens per Sec: 20035.532020774695
Epoch Step: 20 / 138 Loss: 28.94584846496582 Tokens per Sec: 18982.518340075567
Epoch Step: 25 / 138 Loss: 23.669845581054688 Tokens per Sec: 19243.06477016566
Epoch Step: 30 / 138 Loss: 14.610671997070312 Tokens per Sec: 19817.08694457238
Epoch Step: 35 / 138 Loss: 20.98342514038086 Tokens per Sec: 18138.134823842134
Epoch Step: 40 / 138 Loss: 17.18895149230957 Tokens per Sec: 19926.114187461822
Epoch Step: 45 / 138 Loss: 9.672844886779785 Tokens per Sec: 18018.054177465325
Epoch Step: 50 / 138 Loss: 17.647476196289062 Tokens per Sec: 18173.989933584508
Epoch Step: 55 / 138 Loss: 18.55698013305664 Tokens per Sec: 18246.879325555725
Epoch Step: 60 / 138 Loss: 15.570188522338867 Tokens per Sec: 20052.37670526478
Epoch Step: 65 / 138 Loss: 26.461536407470703 Tokens per Sec: 19096.24674360617
Epoch Step: 70 / 138 Loss: 11.945036888122559 Tokens per Sec: 19536.47655401694
Epoch Step: 75 / 138 Loss: 18.445388793945312 Tokens per Sec: 20144.10608725569
Epoch Step: 80 / 138 Loss: 21.501708984375 Tokens per Sec: 19131.263463216572
Epoch Step: 85 / 138 Loss: 19.635204315185547 Tokens per Sec: 19031.408128524527
Epoch Step: 90 / 138 Loss: 20.561840057373047 Tokens per Sec: 19599.924575431993
Epoch Step: 95 / 138 Loss: 20.026710510253906 Tokens per Sec: 19681.330276906145
Epoch Step: 100 / 138 Loss: 19.138782501220703 Tokens per Sec: 18331.910795618332
Epoch Step: 105 / 138 Loss: 18.67493438720703 Tokens per Sec: 18687.443298687744
Epoch Step: 110 / 138 Loss: 19.71074867248535 Tokens per Sec: 17671.060595500418
Epoch Step: 115 / 138 Loss: 18.362951278686523 Tokens per Sec: 16922.763717220005
Epoch Step: 120 / 138 Loss: 19.617168426513672 Tokens per Sec: 18282.449345981768
Epoch Step: 125 / 138 Loss: 16.11429214477539 Tokens per Sec: 17774.496450608698
Epoch Step: 130 / 138 Loss: 16.103759765625 Tokens per Sec: 18510.438024593495
Epoch Step: 135 / 138 Loss: 17.805809020996094 Tokens per Sec: 17620.317606648976
Epoch ended with duration 0:00:34.006919
Train perplexity: 1.2940299004771811
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( ( VAR_1 . METHOD_3 ( ) ) ) ; if ( model != null ) { try { try { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.408957
Validation perplexity: 1.3243991419442331
Model saved best_on_validation!
Model saved checkpoint!
Epoch 56 / 1000
Epoch Step: 5 / 138 Loss: 15.944770812988281 Tokens per Sec: 18604.670561173985
Epoch Step: 10 / 138 Loss: 14.023764610290527 Tokens per Sec: 18461.96794340707
Epoch Step: 15 / 138 Loss: 22.03619384765625 Tokens per Sec: 18444.503878690262
Epoch Step: 20 / 138 Loss: 18.2734432220459 Tokens per Sec: 19333.630015505343
Epoch Step: 25 / 138 Loss: 20.17778778076172 Tokens per Sec: 18245.289548437744
Epoch Step: 30 / 138 Loss: 20.666563034057617 Tokens per Sec: 19890.94873824333
Epoch Step: 35 / 138 Loss: 23.383190155029297 Tokens per Sec: 18273.595781690314
Epoch Step: 40 / 138 Loss: 21.204875946044922 Tokens per Sec: 19778.626851485686
Epoch Step: 45 / 138 Loss: 18.054044723510742 Tokens per Sec: 18183.83259921718
Epoch Step: 50 / 138 Loss: 15.808058738708496 Tokens per Sec: 20103.12035542852
Epoch Step: 55 / 138 Loss: 21.07032012939453 Tokens per Sec: 18483.65368504858
Epoch Step: 60 / 138 Loss: 17.604185104370117 Tokens per Sec: 18859.364273727948
Epoch Step: 65 / 138 Loss: 18.980745315551758 Tokens per Sec: 17157.832525971957
Epoch Step: 70 / 138 Loss: 24.20314598083496 Tokens per Sec: 19371.5072322069
Epoch Step: 75 / 138 Loss: 20.85880470275879 Tokens per Sec: 18781.914077272893
Epoch Step: 80 / 138 Loss: 19.03297233581543 Tokens per Sec: 20543.478742243584
Epoch Step: 85 / 138 Loss: 16.531539916992188 Tokens per Sec: 19577.374902868716
Epoch Step: 90 / 138 Loss: 19.570022583007812 Tokens per Sec: 20095.95459640385
Epoch Step: 95 / 138 Loss: 21.866851806640625 Tokens per Sec: 18607.36806380278
Epoch Step: 100 / 138 Loss: 17.891681671142578 Tokens per Sec: 20346.85110400972
Epoch Step: 105 / 138 Loss: 19.781328201293945 Tokens per Sec: 18023.429730662243
Epoch Step: 110 / 138 Loss: 20.772016525268555 Tokens per Sec: 17631.55698984834
Epoch Step: 115 / 138 Loss: 18.27263832092285 Tokens per Sec: 18343.772009083554
Epoch Step: 120 / 138 Loss: 14.771086692810059 Tokens per Sec: 18411.279484615457
Epoch Step: 125 / 138 Loss: 14.35169792175293 Tokens per Sec: 18116.09655709473
Epoch Step: 130 / 138 Loss: 27.423479080200195 Tokens per Sec: 18052.271904508812
Epoch Step: 135 / 138 Loss: 18.308847427368164 Tokens per Sec: 15965.849609659404
Epoch ended with duration 0:00:34.086517
Train perplexity: 1.2788889853838592
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.422209
Validation perplexity: 1.3195535861555023
Model saved best_on_validation!
Epoch 57 / 1000
Epoch Step: 5 / 138 Loss: 22.68373680114746 Tokens per Sec: 18867.49287330357
Epoch Step: 10 / 138 Loss: 15.021324157714844 Tokens per Sec: 18467.433264217114
Epoch Step: 15 / 138 Loss: 20.206605911254883 Tokens per Sec: 19795.941138357284
Epoch Step: 20 / 138 Loss: 15.542926788330078 Tokens per Sec: 18507.73712118412
Epoch Step: 25 / 138 Loss: 25.469594955444336 Tokens per Sec: 18699.356871160708
Epoch Step: 30 / 138 Loss: 19.610666275024414 Tokens per Sec: 18912.742056963532
Epoch Step: 35 / 138 Loss: 18.85196876525879 Tokens per Sec: 19605.52201455729
Epoch Step: 40 / 138 Loss: 16.567541122436523 Tokens per Sec: 20117.904719441816
Epoch Step: 45 / 138 Loss: 18.500324249267578 Tokens per Sec: 19139.96168308639
Epoch Step: 50 / 138 Loss: 16.319538116455078 Tokens per Sec: 18443.42833018113
Epoch Step: 55 / 138 Loss: 12.07154655456543 Tokens per Sec: 19952.35376945618
Epoch Step: 60 / 138 Loss: 23.527971267700195 Tokens per Sec: 17916.228826183054
Epoch Step: 65 / 138 Loss: 20.866973876953125 Tokens per Sec: 19319.373570726962
Epoch Step: 70 / 138 Loss: 14.697794914245605 Tokens per Sec: 20859.45613527495
Epoch Step: 75 / 138 Loss: 24.118022918701172 Tokens per Sec: 19114.869359521465
Epoch Step: 80 / 138 Loss: 24.74337387084961 Tokens per Sec: 18948.9465304077
Epoch Step: 85 / 138 Loss: 19.85731315612793 Tokens per Sec: 19629.494629676436
Epoch Step: 90 / 138 Loss: 21.95145034790039 Tokens per Sec: 19249.875259451608
Epoch Step: 95 / 138 Loss: 15.954996109008789 Tokens per Sec: 18708.2679510941
Epoch Step: 100 / 138 Loss: 11.491662979125977 Tokens per Sec: 18757.553154999812
Epoch Step: 105 / 138 Loss: 18.805500030517578 Tokens per Sec: 15558.428729037578
Epoch Step: 110 / 138 Loss: 16.44635009765625 Tokens per Sec: 17610.6044379739
Epoch Step: 115 / 138 Loss: 17.83989715576172 Tokens per Sec: 18141.93876642727
Epoch Step: 120 / 138 Loss: 14.069927215576172 Tokens per Sec: 18483.515391453264
Epoch Step: 125 / 138 Loss: 18.642059326171875 Tokens per Sec: 18659.078521624207
Epoch Step: 130 / 138 Loss: 13.705086708068848 Tokens per Sec: 18100.083176289252
Epoch Step: 135 / 138 Loss: 18.229143142700195 Tokens per Sec: 18857.456526675956
Epoch ended with duration 0:00:33.988007
Train perplexity: 1.275079725842654
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { try { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.408066
Validation perplexity: 1.3205557824757024
Epoch 58 / 1000
Epoch Step: 5 / 138 Loss: 16.957077026367188 Tokens per Sec: 19415.647901173936
Epoch Step: 10 / 138 Loss: 16.194522857666016 Tokens per Sec: 20096.272198310824
Epoch Step: 15 / 138 Loss: 17.585126876831055 Tokens per Sec: 18605.75850473342
Epoch Step: 20 / 138 Loss: 17.704471588134766 Tokens per Sec: 20308.787902152882
Epoch Step: 25 / 138 Loss: 23.149106979370117 Tokens per Sec: 19046.04456924782
Epoch Step: 30 / 138 Loss: 24.754003524780273 Tokens per Sec: 19067.935042510875
Epoch Step: 35 / 138 Loss: 12.212512016296387 Tokens per Sec: 18719.524458668166
Epoch Step: 40 / 138 Loss: 16.326860427856445 Tokens per Sec: 17631.48729388076
Epoch Step: 45 / 138 Loss: 18.67593002319336 Tokens per Sec: 17864.18520810487
Epoch Step: 50 / 138 Loss: 16.192447662353516 Tokens per Sec: 19654.141799633126
Epoch Step: 55 / 138 Loss: 16.17353630065918 Tokens per Sec: 19660.4343217332
Epoch Step: 60 / 138 Loss: 20.982637405395508 Tokens per Sec: 18967.369842170585
Epoch Step: 65 / 138 Loss: 21.762685775756836 Tokens per Sec: 19851.79237024353
Epoch Step: 70 / 138 Loss: 25.306325912475586 Tokens per Sec: 18024.967299442575
Epoch Step: 75 / 138 Loss: 18.583147048950195 Tokens per Sec: 17451.761180280755
Epoch Step: 80 / 138 Loss: 17.903987884521484 Tokens per Sec: 19699.3052643488
Epoch Step: 85 / 138 Loss: 18.636205673217773 Tokens per Sec: 18422.84720153375
Epoch Step: 90 / 138 Loss: 23.045886993408203 Tokens per Sec: 18142.8071843461
Epoch Step: 95 / 138 Loss: 22.577043533325195 Tokens per Sec: 19082.99074448066
Epoch Step: 100 / 138 Loss: 15.90878677368164 Tokens per Sec: 19175.073719976517
Epoch Step: 105 / 138 Loss: 19.614700317382812 Tokens per Sec: 18796.902663866225
Epoch Step: 110 / 138 Loss: 13.192008972167969 Tokens per Sec: 18140.48636546495
Epoch Step: 115 / 138 Loss: 16.803430557250977 Tokens per Sec: 18097.695108855834
Epoch Step: 120 / 138 Loss: 21.905590057373047 Tokens per Sec: 18227.087497708046
Epoch Step: 125 / 138 Loss: 19.82662010192871 Tokens per Sec: 18427.125791161907
Epoch Step: 130 / 138 Loss: 16.0268497467041 Tokens per Sec: 16493.813612308237
Epoch Step: 135 / 138 Loss: 18.74428367614746 Tokens per Sec: 18192.65992979827
Epoch ended with duration 0:00:34.080756
Train perplexity: 1.2713147440937187
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.404049
Validation perplexity: 1.3179799575068225
Model saved best_on_validation!
Epoch 59 / 1000
Epoch Step: 5 / 138 Loss: 23.759275436401367 Tokens per Sec: 18689.85299382413
Epoch Step: 10 / 138 Loss: 11.484550476074219 Tokens per Sec: 19717.60525346176
Epoch Step: 15 / 138 Loss: 11.02567195892334 Tokens per Sec: 19857.762530641212
Epoch Step: 20 / 138 Loss: 12.22907829284668 Tokens per Sec: 19213.29561604051
Epoch Step: 25 / 138 Loss: 23.639949798583984 Tokens per Sec: 18851.4073845428
Epoch Step: 30 / 138 Loss: 14.243995666503906 Tokens per Sec: 19155.677955299372
Epoch Step: 35 / 138 Loss: 11.91518497467041 Tokens per Sec: 19874.29900388504
Epoch Step: 40 / 138 Loss: 26.73866844177246 Tokens per Sec: 19432.979489946167
Epoch Step: 45 / 138 Loss: 12.289473533630371 Tokens per Sec: 18620.72966428694
Epoch Step: 50 / 138 Loss: 11.22945499420166 Tokens per Sec: 19873.174240303575
Epoch Step: 55 / 138 Loss: 15.78799819946289 Tokens per Sec: 18874.494137272097
Epoch Step: 60 / 138 Loss: 15.462944984436035 Tokens per Sec: 17936.09438737238
Epoch Step: 65 / 138 Loss: 15.15676498413086 Tokens per Sec: 19127.21599275726
Epoch Step: 70 / 138 Loss: 21.8945255279541 Tokens per Sec: 19175.618857908616
Epoch Step: 75 / 138 Loss: 21.1401309967041 Tokens per Sec: 18160.458223638354
Epoch Step: 80 / 138 Loss: 24.579320907592773 Tokens per Sec: 19178.7788270289
Epoch Step: 85 / 138 Loss: 16.529102325439453 Tokens per Sec: 17914.088078092012
Epoch Step: 90 / 138 Loss: 15.637096405029297 Tokens per Sec: 19843.77168059779
Epoch Step: 95 / 138 Loss: 24.319782257080078 Tokens per Sec: 18118.54886822343
Epoch Step: 100 / 138 Loss: 10.273828506469727 Tokens per Sec: 18637.188441551334
Epoch Step: 105 / 138 Loss: 15.75765609741211 Tokens per Sec: 18779.79594404491
Epoch Step: 110 / 138 Loss: 12.850554466247559 Tokens per Sec: 15364.968637432781
Epoch Step: 115 / 138 Loss: 13.700599670410156 Tokens per Sec: 18254.7017855773
Epoch Step: 120 / 138 Loss: 16.011798858642578 Tokens per Sec: 18526.755686343287
Epoch Step: 125 / 138 Loss: 17.672195434570312 Tokens per Sec: 17048.4875220419
Epoch Step: 130 / 138 Loss: 12.754988670349121 Tokens per Sec: 17253.939631340956
Epoch Step: 135 / 138 Loss: 19.874290466308594 Tokens per Sec: 18250.05975453796
Epoch ended with duration 0:00:34.245075
Train perplexity: 1.2682040457563937
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.412625
Validation perplexity: 1.3098073202641922
Model saved best_on_validation!
Epoch 60 / 1000
Epoch Step: 5 / 138 Loss: 11.683813095092773 Tokens per Sec: 19455.6566886502
Epoch Step: 10 / 138 Loss: 19.49639892578125 Tokens per Sec: 18173.197307234714
Epoch Step: 15 / 138 Loss: 14.762117385864258 Tokens per Sec: 19218.780564672474
Epoch Step: 20 / 138 Loss: 15.859123229980469 Tokens per Sec: 19519.958484430514
Epoch Step: 25 / 138 Loss: 16.185075759887695 Tokens per Sec: 18638.939052844056
Epoch Step: 30 / 138 Loss: 20.793378829956055 Tokens per Sec: 18728.642910547864
Epoch Step: 35 / 138 Loss: 14.383058547973633 Tokens per Sec: 18364.90018511779
Epoch Step: 40 / 138 Loss: 13.652180671691895 Tokens per Sec: 18118.371886097884
Epoch Step: 45 / 138 Loss: 21.559906005859375 Tokens per Sec: 18822.96290195236
Epoch Step: 50 / 138 Loss: 23.323986053466797 Tokens per Sec: 18014.955314142495
Epoch Step: 55 / 138 Loss: 16.695775985717773 Tokens per Sec: 18507.429356858935
Epoch Step: 60 / 138 Loss: 11.995960235595703 Tokens per Sec: 19511.320614820346
Epoch Step: 65 / 138 Loss: 14.605586051940918 Tokens per Sec: 17479.35338358675
Epoch Step: 70 / 138 Loss: 16.237293243408203 Tokens per Sec: 18490.53169490239
Epoch Step: 75 / 138 Loss: 14.75643539428711 Tokens per Sec: 20473.243526255064
Epoch Step: 80 / 138 Loss: 15.808813095092773 Tokens per Sec: 18196.77828132335
Epoch Step: 85 / 138 Loss: 13.513236999511719 Tokens per Sec: 18126.421568421272
Epoch Step: 90 / 138 Loss: 18.720748901367188 Tokens per Sec: 18974.627676128955
Epoch Step: 95 / 138 Loss: 12.556346893310547 Tokens per Sec: 19697.29134243125
Epoch Step: 100 / 138 Loss: 15.612569808959961 Tokens per Sec: 20733.860084139298
Epoch Step: 105 / 138 Loss: 16.380558013916016 Tokens per Sec: 17294.0033721322
Epoch Step: 110 / 138 Loss: 17.628280639648438 Tokens per Sec: 18022.944415277452
Epoch Step: 115 / 138 Loss: 15.217307090759277 Tokens per Sec: 18045.890203693532
Epoch Step: 120 / 138 Loss: 23.015972137451172 Tokens per Sec: 18985.510070941884
Epoch Step: 125 / 138 Loss: 22.49513816833496 Tokens per Sec: 17918.57876560859
Epoch Step: 130 / 138 Loss: 17.314674377441406 Tokens per Sec: 16487.089330665414
Epoch Step: 135 / 138 Loss: 17.224287033081055 Tokens per Sec: 18075.19659024679
Epoch ended with duration 0:00:34.358029
Train perplexity: 1.2637588648039044
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.418694
Validation perplexity: 1.3137983909781639
Model saved checkpoint!
Epoch 61 / 1000
Epoch Step: 5 / 138 Loss: 20.260448455810547 Tokens per Sec: 18745.54671652327
Epoch Step: 10 / 138 Loss: 10.819579124450684 Tokens per Sec: 19888.686123591768
Epoch Step: 15 / 138 Loss: 11.799577713012695 Tokens per Sec: 20729.186135255957
Epoch Step: 20 / 138 Loss: 14.349459648132324 Tokens per Sec: 18412.48632956733
Epoch Step: 25 / 138 Loss: 19.969993591308594 Tokens per Sec: 19407.424755655087
Epoch Step: 30 / 138 Loss: 18.401147842407227 Tokens per Sec: 19897.97697873993
Epoch Step: 35 / 138 Loss: 19.807178497314453 Tokens per Sec: 18412.390326975845
Epoch Step: 40 / 138 Loss: 19.755491256713867 Tokens per Sec: 18256.12193561566
Epoch Step: 45 / 138 Loss: 18.878616333007812 Tokens per Sec: 18661.15002036897
Epoch Step: 50 / 138 Loss: 9.963371276855469 Tokens per Sec: 19829.396915166868
Epoch Step: 55 / 138 Loss: 17.744613647460938 Tokens per Sec: 20383.4595197346
Epoch Step: 60 / 138 Loss: 21.91690444946289 Tokens per Sec: 17917.855208218527
Epoch Step: 65 / 138 Loss: 15.735740661621094 Tokens per Sec: 17544.227975841648
Epoch Step: 70 / 138 Loss: 15.32003116607666 Tokens per Sec: 18393.6013167643
Epoch Step: 75 / 138 Loss: 18.133195877075195 Tokens per Sec: 19416.159611942825
Epoch Step: 80 / 138 Loss: 17.39763641357422 Tokens per Sec: 19152.97449200949
Epoch Step: 85 / 138 Loss: 15.757308959960938 Tokens per Sec: 19338.29993242808
Epoch Step: 90 / 138 Loss: 16.716419219970703 Tokens per Sec: 18681.25728802636
Epoch Step: 95 / 138 Loss: 18.319087982177734 Tokens per Sec: 18401.403736494125
Epoch Step: 100 / 138 Loss: 17.12943458557129 Tokens per Sec: 19090.204288153313
Epoch Step: 105 / 138 Loss: 17.68214988708496 Tokens per Sec: 17899.431516848497
Epoch Step: 110 / 138 Loss: 19.093582153320312 Tokens per Sec: 17694.76100967251
Epoch Step: 115 / 138 Loss: 19.541475296020508 Tokens per Sec: 18307.148001257116
Epoch Step: 120 / 138 Loss: 18.73318099975586 Tokens per Sec: 16176.398499745621
Epoch Step: 125 / 138 Loss: 14.43842601776123 Tokens per Sec: 18587.33362108641
Epoch Step: 130 / 138 Loss: 16.09781265258789 Tokens per Sec: 18533.808173842826
Epoch Step: 135 / 138 Loss: 15.58428955078125 Tokens per Sec: 18383.19645612149
Epoch ended with duration 0:00:34.121506
Train perplexity: 1.262386129253169
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.419431
Validation perplexity: 1.3086076284478734
Model saved best_on_validation!
Epoch 62 / 1000
Epoch Step: 5 / 138 Loss: 14.001570701599121 Tokens per Sec: 18775.779074557715
Epoch Step: 10 / 138 Loss: 17.095767974853516 Tokens per Sec: 19052.995210197547
Epoch Step: 15 / 138 Loss: 20.242286682128906 Tokens per Sec: 19478.343544779655
Epoch Step: 20 / 138 Loss: 15.019386291503906 Tokens per Sec: 18908.098038961893
Epoch Step: 25 / 138 Loss: 12.904587745666504 Tokens per Sec: 19884.001489604776
Epoch Step: 30 / 138 Loss: 12.586888313293457 Tokens per Sec: 19416.93865607027
Epoch Step: 35 / 138 Loss: 9.367758750915527 Tokens per Sec: 18624.945431441596
Epoch Step: 40 / 138 Loss: 10.008646011352539 Tokens per Sec: 18865.12110686339
Epoch Step: 45 / 138 Loss: 19.4172420501709 Tokens per Sec: 17900.00964950209
Epoch Step: 50 / 138 Loss: 11.258111000061035 Tokens per Sec: 19256.117398350634
Epoch Step: 55 / 138 Loss: 13.25646686553955 Tokens per Sec: 18565.431437119387
Epoch Step: 60 / 138 Loss: 22.578367233276367 Tokens per Sec: 18595.572833197468
Epoch Step: 65 / 138 Loss: 16.251054763793945 Tokens per Sec: 18987.543946812475
Epoch Step: 70 / 138 Loss: 13.89765453338623 Tokens per Sec: 18266.10182561194
Epoch Step: 75 / 138 Loss: 22.644073486328125 Tokens per Sec: 19553.734488760445
Epoch Step: 80 / 138 Loss: 9.36607551574707 Tokens per Sec: 19106.718542777184
Epoch Step: 85 / 138 Loss: 9.785992622375488 Tokens per Sec: 20052.071176302536
Epoch Step: 90 / 138 Loss: 20.229093551635742 Tokens per Sec: 20447.177135509643
Epoch Step: 95 / 138 Loss: 18.800676345825195 Tokens per Sec: 19107.563891397527
Epoch Step: 100 / 138 Loss: 22.817424774169922 Tokens per Sec: 19030.825668290287
Epoch Step: 105 / 138 Loss: 14.341519355773926 Tokens per Sec: 14481.068470321976
Epoch Step: 110 / 138 Loss: 18.514118194580078 Tokens per Sec: 18378.168579880818
Epoch Step: 115 / 138 Loss: 16.25374984741211 Tokens per Sec: 18233.309870869096
Epoch Step: 120 / 138 Loss: 17.80695915222168 Tokens per Sec: 19212.676295912665
Epoch Step: 125 / 138 Loss: 20.0048770904541 Tokens per Sec: 18093.252761483887
Epoch Step: 130 / 138 Loss: 16.912893295288086 Tokens per Sec: 17674.65288163904
Epoch Step: 135 / 138 Loss: 15.561149597167969 Tokens per Sec: 18238.012124446348
Epoch ended with duration 0:00:34.065289
Train perplexity: 1.2617602987350605
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.389018
Validation perplexity: 1.3063869085607556
Model saved best_on_validation!
Epoch 63 / 1000
Epoch Step: 5 / 138 Loss: 15.688565254211426 Tokens per Sec: 19626.301447395665
Epoch Step: 10 / 138 Loss: 11.056066513061523 Tokens per Sec: 20215.700532251845
Epoch Step: 15 / 138 Loss: 19.7478084564209 Tokens per Sec: 19632.624882503434
Epoch Step: 20 / 138 Loss: 10.510144233703613 Tokens per Sec: 18692.67782300406
Epoch Step: 25 / 138 Loss: 21.416345596313477 Tokens per Sec: 18288.44429911736
Epoch Step: 30 / 138 Loss: 22.168277740478516 Tokens per Sec: 19159.26677699831
Epoch Step: 35 / 138 Loss: 20.13089370727539 Tokens per Sec: 19080.770871429788
Epoch Step: 40 / 138 Loss: 18.72549057006836 Tokens per Sec: 20063.96588811544
Epoch Step: 45 / 138 Loss: 21.647560119628906 Tokens per Sec: 17760.98429547336
Epoch Step: 50 / 138 Loss: 13.035444259643555 Tokens per Sec: 19902.094142110538
Epoch Step: 55 / 138 Loss: 19.361398696899414 Tokens per Sec: 19126.630064738856
Epoch Step: 60 / 138 Loss: 17.64114761352539 Tokens per Sec: 20082.34175917148
Epoch Step: 65 / 138 Loss: 15.033495903015137 Tokens per Sec: 19427.20406712215
Epoch Step: 70 / 138 Loss: 15.743478775024414 Tokens per Sec: 19581.146766554702
Epoch Step: 75 / 138 Loss: 12.9207763671875 Tokens per Sec: 16856.22708305639
Epoch Step: 80 / 138 Loss: 16.61335563659668 Tokens per Sec: 20394.62664307856
Epoch Step: 85 / 138 Loss: 21.99432945251465 Tokens per Sec: 18348.50049699714
Epoch Step: 90 / 138 Loss: 26.856231689453125 Tokens per Sec: 18191.37760922909
Epoch Step: 95 / 138 Loss: 17.150413513183594 Tokens per Sec: 18888.3809709476
Epoch Step: 100 / 138 Loss: 13.143879890441895 Tokens per Sec: 18925.633320447014
Epoch Step: 105 / 138 Loss: 22.78435707092285 Tokens per Sec: 16302.546963366643
Epoch Step: 110 / 138 Loss: 24.568368911743164 Tokens per Sec: 18199.550915165233
Epoch Step: 115 / 138 Loss: 17.934303283691406 Tokens per Sec: 18578.994982973873
Epoch Step: 120 / 138 Loss: 14.115243911743164 Tokens per Sec: 18498.76573868201
Epoch Step: 125 / 138 Loss: 18.87530517578125 Tokens per Sec: 17943.634183552018
Epoch Step: 130 / 138 Loss: 21.172115325927734 Tokens per Sec: 17484.552749828395
Epoch Step: 135 / 138 Loss: 13.204015731811523 Tokens per Sec: 17306.83701701534
Epoch ended with duration 0:00:34.045581
Train perplexity: 1.2579718997240454
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.417975
Validation perplexity: 1.3072092538575277
Epoch 64 / 1000
Epoch Step: 5 / 138 Loss: 13.192864418029785 Tokens per Sec: 19609.434464902668
Epoch Step: 10 / 138 Loss: 10.612334251403809 Tokens per Sec: 18440.661536624877
Epoch Step: 15 / 138 Loss: 19.387842178344727 Tokens per Sec: 18434.90643490295
Epoch Step: 20 / 138 Loss: 13.992321968078613 Tokens per Sec: 19580.578755155508
Epoch Step: 25 / 138 Loss: 13.955385208129883 Tokens per Sec: 19046.618418878523
Epoch Step: 30 / 138 Loss: 15.679195404052734 Tokens per Sec: 19836.481414613252
Epoch Step: 35 / 138 Loss: 10.938186645507812 Tokens per Sec: 17755.534174376226
Epoch Step: 40 / 138 Loss: 16.7097110748291 Tokens per Sec: 18976.501322846525
Epoch Step: 45 / 138 Loss: 13.128057479858398 Tokens per Sec: 19895.697887646573
Epoch Step: 50 / 138 Loss: 10.246768951416016 Tokens per Sec: 20030.15067685064
Epoch Step: 55 / 138 Loss: 16.107288360595703 Tokens per Sec: 19759.149014344
Epoch Step: 60 / 138 Loss: 22.300535202026367 Tokens per Sec: 19066.765502703693
Epoch Step: 65 / 138 Loss: 18.370092391967773 Tokens per Sec: 18787.389279285308
Epoch Step: 70 / 138 Loss: 19.171985626220703 Tokens per Sec: 19179.754742011384
Epoch Step: 75 / 138 Loss: 12.789750099182129 Tokens per Sec: 19295.93345679775
Epoch Step: 80 / 138 Loss: 23.85759735107422 Tokens per Sec: 17931.74492180824
Epoch Step: 85 / 138 Loss: 17.03479766845703 Tokens per Sec: 18262.008755347768
Epoch Step: 90 / 138 Loss: 21.852399826049805 Tokens per Sec: 18326.757994975185
Epoch Step: 95 / 138 Loss: 12.969013214111328 Tokens per Sec: 18742.618570400955
Epoch Step: 100 / 138 Loss: 19.06171989440918 Tokens per Sec: 19257.34795719901
Epoch Step: 105 / 138 Loss: 16.012975692749023 Tokens per Sec: 18813.75667052023
Epoch Step: 110 / 138 Loss: 18.865604400634766 Tokens per Sec: 17507.738225423596
Epoch Step: 115 / 138 Loss: 13.82707691192627 Tokens per Sec: 17665.33817960718
Epoch Step: 120 / 138 Loss: 15.316003799438477 Tokens per Sec: 17925.090559697976
Epoch Step: 125 / 138 Loss: 14.65510368347168 Tokens per Sec: 19115.69475957748
Epoch Step: 130 / 138 Loss: 19.775949478149414 Tokens per Sec: 16515.270061356823
Epoch Step: 135 / 138 Loss: 19.588878631591797 Tokens per Sec: 18195.463265905495
Epoch ended with duration 0:00:34.050942
Train perplexity: 1.2491463529352742
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.398935
Validation perplexity: 1.3019292824397057
Model saved best_on_validation!
Epoch 65 / 1000
Epoch Step: 5 / 138 Loss: 19.230880737304688 Tokens per Sec: 19739.84741003876
Epoch Step: 10 / 138 Loss: 18.168581008911133 Tokens per Sec: 18094.081846470624
Epoch Step: 15 / 138 Loss: 11.13014030456543 Tokens per Sec: 18562.808656450026
Epoch Step: 20 / 138 Loss: 15.811307907104492 Tokens per Sec: 20157.03950377228
Epoch Step: 25 / 138 Loss: 13.092194557189941 Tokens per Sec: 19077.14613218269
Epoch Step: 30 / 138 Loss: 17.886966705322266 Tokens per Sec: 18077.112102340136
Epoch Step: 35 / 138 Loss: 16.811655044555664 Tokens per Sec: 18039.24479862988
Epoch Step: 40 / 138 Loss: 14.78445816040039 Tokens per Sec: 19907.316115938997
Epoch Step: 45 / 138 Loss: 18.146923065185547 Tokens per Sec: 18534.284959804732
Epoch Step: 50 / 138 Loss: 15.496889114379883 Tokens per Sec: 20190.72297638071
Epoch Step: 55 / 138 Loss: 18.432857513427734 Tokens per Sec: 17814.101889195263
Epoch Step: 60 / 138 Loss: 10.243617057800293 Tokens per Sec: 19579.456633770402
Epoch Step: 65 / 138 Loss: 14.50054931640625 Tokens per Sec: 19291.15085416015
Epoch Step: 70 / 138 Loss: 11.288323402404785 Tokens per Sec: 20036.91800772395
Epoch Step: 75 / 138 Loss: 11.227134704589844 Tokens per Sec: 17059.257507001967
Epoch Step: 80 / 138 Loss: 19.950380325317383 Tokens per Sec: 18847.641202834297
Epoch Step: 85 / 138 Loss: 21.7832088470459 Tokens per Sec: 19692.557047682385
Epoch Step: 90 / 138 Loss: 13.738447189331055 Tokens per Sec: 18703.68181725857
Epoch Step: 95 / 138 Loss: 16.311565399169922 Tokens per Sec: 20579.05741257579
Epoch Step: 100 / 138 Loss: 19.260255813598633 Tokens per Sec: 19575.936455442763
Epoch Step: 105 / 138 Loss: 13.903030395507812 Tokens per Sec: 16076.622722300155
Epoch Step: 110 / 138 Loss: 16.857797622680664 Tokens per Sec: 18810.76722448944
Epoch Step: 115 / 138 Loss: 21.263032913208008 Tokens per Sec: 17438.5996686072
Epoch Step: 120 / 138 Loss: 19.720354080200195 Tokens per Sec: 18885.054967876855
Epoch Step: 125 / 138 Loss: 13.494278907775879 Tokens per Sec: 19039.02025379369
Epoch Step: 130 / 138 Loss: 18.492145538330078 Tokens per Sec: 17874.46406022905
Epoch Step: 135 / 138 Loss: 16.98715591430664 Tokens per Sec: 18189.753799287035
Epoch ended with duration 0:00:33.936150
Train perplexity: 1.2445625089702734
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.403407
Validation perplexity: 1.2994434894639222
Model saved best_on_validation!
Model saved checkpoint!
Epoch 66 / 1000
Epoch Step: 5 / 138 Loss: 15.201750755310059 Tokens per Sec: 19139.416840362344
Epoch Step: 10 / 138 Loss: 12.450201988220215 Tokens per Sec: 20050.210193498075
Epoch Step: 15 / 138 Loss: 17.651479721069336 Tokens per Sec: 19406.213489117712
Epoch Step: 20 / 138 Loss: 16.767297744750977 Tokens per Sec: 19648.70606411685
Epoch Step: 25 / 138 Loss: 18.624942779541016 Tokens per Sec: 19635.740728938465
Epoch Step: 30 / 138 Loss: 18.229272842407227 Tokens per Sec: 18517.63475027459
Epoch Step: 35 / 138 Loss: 13.59969711303711 Tokens per Sec: 19320.57518945254
Epoch Step: 40 / 138 Loss: 13.756536483764648 Tokens per Sec: 18543.301345083648
Epoch Step: 45 / 138 Loss: 13.840858459472656 Tokens per Sec: 16776.103580621028
Epoch Step: 50 / 138 Loss: 9.482964515686035 Tokens per Sec: 20127.2487409286
Epoch Step: 55 / 138 Loss: 18.006603240966797 Tokens per Sec: 17663.870207870208
Epoch Step: 60 / 138 Loss: 8.663350105285645 Tokens per Sec: 19862.07019844501
Epoch Step: 65 / 138 Loss: 10.629103660583496 Tokens per Sec: 19698.8626672574
Epoch Step: 70 / 138 Loss: 22.330896377563477 Tokens per Sec: 18288.861702139668
Epoch Step: 75 / 138 Loss: 14.369695663452148 Tokens per Sec: 19067.220634610367
Epoch Step: 80 / 138 Loss: 17.846345901489258 Tokens per Sec: 19622.264573947192
Epoch Step: 85 / 138 Loss: 21.46990203857422 Tokens per Sec: 18554.900690596678
Epoch Step: 90 / 138 Loss: 11.529655456542969 Tokens per Sec: 17766.832753172293
Epoch Step: 95 / 138 Loss: 17.614850997924805 Tokens per Sec: 19839.16235089554
Epoch Step: 100 / 138 Loss: 18.515060424804688 Tokens per Sec: 18673.355285249374
Epoch Step: 105 / 138 Loss: 13.568317413330078 Tokens per Sec: 18657.643300668686
Epoch Step: 110 / 138 Loss: 11.58156681060791 Tokens per Sec: 19013.02100153487
Epoch Step: 115 / 138 Loss: 13.456465721130371 Tokens per Sec: 18531.51442569574
Epoch Step: 120 / 138 Loss: 14.017970085144043 Tokens per Sec: 18251.75918535609
Epoch Step: 125 / 138 Loss: 15.183151245117188 Tokens per Sec: 18050.07681652498
Epoch Step: 130 / 138 Loss: 14.396522521972656 Tokens per Sec: 18026.771479353487
Epoch Step: 135 / 138 Loss: 15.117863655090332 Tokens per Sec: 17635.335628823937
Epoch ended with duration 0:00:34.052387
Train perplexity: 1.2424497686967284
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.391454
Validation perplexity: 1.3018638887717628
Epoch 67 / 1000
Epoch Step: 5 / 138 Loss: 13.04293441772461 Tokens per Sec: 19592.37171903353
Epoch Step: 10 / 138 Loss: 10.26050090789795 Tokens per Sec: 19911.039680503876
Epoch Step: 15 / 138 Loss: 19.13892936706543 Tokens per Sec: 19144.74277921746
Epoch Step: 20 / 138 Loss: 18.949344635009766 Tokens per Sec: 19744.748922072173
Epoch Step: 25 / 138 Loss: 15.361231803894043 Tokens per Sec: 18686.261133067237
Epoch Step: 30 / 138 Loss: 17.433338165283203 Tokens per Sec: 19485.428261925565
Epoch Step: 35 / 138 Loss: 9.985601425170898 Tokens per Sec: 19530.496506862597
Epoch Step: 40 / 138 Loss: 17.167207717895508 Tokens per Sec: 17398.117470326735
Epoch Step: 45 / 138 Loss: 20.109792709350586 Tokens per Sec: 17882.297829135197
Epoch Step: 50 / 138 Loss: 14.241772651672363 Tokens per Sec: 20475.261148414498
Epoch Step: 55 / 138 Loss: 18.175884246826172 Tokens per Sec: 18326.621038910762
Epoch Step: 60 / 138 Loss: 21.768333435058594 Tokens per Sec: 19410.63108632292
Epoch Step: 65 / 138 Loss: 15.30837631225586 Tokens per Sec: 18598.837155231024
Epoch Step: 70 / 138 Loss: 20.913145065307617 Tokens per Sec: 17900.727660903332
Epoch Step: 75 / 138 Loss: 10.95283031463623 Tokens per Sec: 19763.48191934759
Epoch Step: 80 / 138 Loss: 16.937885284423828 Tokens per Sec: 20545.601445127148
Epoch Step: 85 / 138 Loss: 12.923747062683105 Tokens per Sec: 18391.240445821328
Epoch Step: 90 / 138 Loss: 11.524935722351074 Tokens per Sec: 20850.133002587245
Epoch Step: 95 / 138 Loss: 15.84887981414795 Tokens per Sec: 19684.857793792547
Epoch Step: 100 / 138 Loss: 12.428540229797363 Tokens per Sec: 19945.63574623369
Epoch Step: 105 / 138 Loss: 16.5736141204834 Tokens per Sec: 17368.39800141217
Epoch Step: 110 / 138 Loss: 17.59103012084961 Tokens per Sec: 17827.636835346104
Epoch Step: 115 / 138 Loss: 17.877010345458984 Tokens per Sec: 18565.686425764252
Epoch Step: 120 / 138 Loss: 15.303677558898926 Tokens per Sec: 17347.85334770529
Epoch Step: 125 / 138 Loss: 16.80723762512207 Tokens per Sec: 16281.949159832826
Epoch Step: 130 / 138 Loss: 17.891132354736328 Tokens per Sec: 18061.135070038665
Epoch Step: 135 / 138 Loss: 19.03489875793457 Tokens per Sec: 18647.15311968456
Epoch ended with duration 0:00:33.888242
Train perplexity: 1.24090325172201
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.387465
Validation perplexity: 1.2969715864176445
Model saved best_on_validation!
Epoch 68 / 1000
Epoch Step: 5 / 138 Loss: 13.421533584594727 Tokens per Sec: 18586.46393487803
Epoch Step: 10 / 138 Loss: 18.686704635620117 Tokens per Sec: 19710.25132348536
Epoch Step: 15 / 138 Loss: 16.88355255126953 Tokens per Sec: 20507.749352819137
Epoch Step: 20 / 138 Loss: 16.535120010375977 Tokens per Sec: 18852.953191322962
Epoch Step: 25 / 138 Loss: 21.42133903503418 Tokens per Sec: 17585.35406797876
Epoch Step: 30 / 138 Loss: 16.777719497680664 Tokens per Sec: 18263.686458216554
Epoch Step: 35 / 138 Loss: 21.317651748657227 Tokens per Sec: 19170.562440598453
Epoch Step: 40 / 138 Loss: 11.092589378356934 Tokens per Sec: 19172.25828340447
Epoch Step: 45 / 138 Loss: 13.823641777038574 Tokens per Sec: 18824.07160608571
Epoch Step: 50 / 138 Loss: 12.444911003112793 Tokens per Sec: 19646.04307478767
Epoch Step: 55 / 138 Loss: 13.441214561462402 Tokens per Sec: 19936.820861465436
Epoch Step: 60 / 138 Loss: 11.989729881286621 Tokens per Sec: 20131.421012492283
Epoch Step: 65 / 138 Loss: 16.216833114624023 Tokens per Sec: 20246.400992390772
Epoch Step: 70 / 138 Loss: 11.264274597167969 Tokens per Sec: 19353.947009756965
Epoch Step: 75 / 138 Loss: 21.086774826049805 Tokens per Sec: 18456.502882070432
Epoch Step: 80 / 138 Loss: 11.100479125976562 Tokens per Sec: 17738.92156780965
Epoch Step: 85 / 138 Loss: 13.148797988891602 Tokens per Sec: 18452.46722463571
Epoch Step: 90 / 138 Loss: 20.68516731262207 Tokens per Sec: 18449.54142290151
Epoch Step: 95 / 138 Loss: 9.918123245239258 Tokens per Sec: 20040.17215724261
Epoch Step: 100 / 138 Loss: 10.005792617797852 Tokens per Sec: 19795.351538936437
Epoch Step: 105 / 138 Loss: 17.7294864654541 Tokens per Sec: 17468.148032419413
Epoch Step: 110 / 138 Loss: 12.811907768249512 Tokens per Sec: 17871.202229034338
Epoch Step: 115 / 138 Loss: 12.17394733428955 Tokens per Sec: 17488.623224180465
Epoch Step: 120 / 138 Loss: 13.972723960876465 Tokens per Sec: 16964.74807955421
Epoch Step: 125 / 138 Loss: 16.107669830322266 Tokens per Sec: 18370.04744287269
Epoch Step: 130 / 138 Loss: 14.617172241210938 Tokens per Sec: 18599.53956564343
Epoch Step: 135 / 138 Loss: 11.428986549377441 Tokens per Sec: 18754.646146727515
Epoch ended with duration 0:00:33.924546
Train perplexity: 1.2387049043059133
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( ( VAR_1 . METHOD_3 ( ) ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.392791
Validation perplexity: 1.2986078295414536
Epoch 69 / 1000
Epoch Step: 5 / 138 Loss: 10.352997779846191 Tokens per Sec: 18857.382277475892
Epoch Step: 10 / 138 Loss: 17.37213897705078 Tokens per Sec: 19148.862873204744
Epoch Step: 15 / 138 Loss: 16.105913162231445 Tokens per Sec: 19505.288533356957
Epoch Step: 20 / 138 Loss: 13.890755653381348 Tokens per Sec: 18767.372652895145
Epoch Step: 25 / 138 Loss: 15.040604591369629 Tokens per Sec: 18043.689654659407
Epoch Step: 30 / 138 Loss: 13.232645988464355 Tokens per Sec: 20214.845829694226
Epoch Step: 35 / 138 Loss: 11.392148971557617 Tokens per Sec: 18695.41496322454
Epoch Step: 40 / 138 Loss: 20.693424224853516 Tokens per Sec: 18796.794090467352
Epoch Step: 45 / 138 Loss: 18.532665252685547 Tokens per Sec: 18537.119090525986
Epoch Step: 50 / 138 Loss: 23.16673469543457 Tokens per Sec: 19837.162067022546
Epoch Step: 55 / 138 Loss: 10.530937194824219 Tokens per Sec: 18889.962737351467
Epoch Step: 60 / 138 Loss: 16.913131713867188 Tokens per Sec: 19734.57117949295
Epoch Step: 65 / 138 Loss: 23.61105728149414 Tokens per Sec: 18606.071980439272
Epoch Step: 70 / 138 Loss: 14.190603256225586 Tokens per Sec: 19057.82730413252
Epoch Step: 75 / 138 Loss: 13.575599670410156 Tokens per Sec: 18070.500177747213
Epoch Step: 80 / 138 Loss: 16.626323699951172 Tokens per Sec: 18651.040444747774
Epoch Step: 85 / 138 Loss: 14.30872917175293 Tokens per Sec: 18687.777019598274
Epoch Step: 90 / 138 Loss: 12.052753448486328 Tokens per Sec: 20210.632147743254
Epoch Step: 95 / 138 Loss: 9.70495891571045 Tokens per Sec: 19431.51471734824
Epoch Step: 100 / 138 Loss: 16.741470336914062 Tokens per Sec: 18467.74320301662
Epoch Step: 105 / 138 Loss: 14.519062042236328 Tokens per Sec: 18579.551113588623
Epoch Step: 110 / 138 Loss: 17.061681747436523 Tokens per Sec: 16646.842201451273
Epoch Step: 115 / 138 Loss: 21.005077362060547 Tokens per Sec: 18434.22356197772
Epoch Step: 120 / 138 Loss: 15.533536911010742 Tokens per Sec: 18603.42092934098
Epoch Step: 125 / 138 Loss: 21.955856323242188 Tokens per Sec: 18621.35006714624
Epoch Step: 130 / 138 Loss: 15.150819778442383 Tokens per Sec: 18283.063991004194
Epoch Step: 135 / 138 Loss: 21.951873779296875 Tokens per Sec: 18442.85229746239
Epoch ended with duration 0:00:33.952148
Train perplexity: 1.2401397561728777
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( ( VAR_1 . METHOD_3 ( ) ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.390485
Validation perplexity: 1.3035951719198384
Epoch 70 / 1000
Epoch Step: 5 / 138 Loss: 9.923298835754395 Tokens per Sec: 18938.602392409208
Epoch Step: 10 / 138 Loss: 18.88538360595703 Tokens per Sec: 18746.232104455135
Epoch Step: 15 / 138 Loss: 22.40652847290039 Tokens per Sec: 19267.123372510116
Epoch Step: 20 / 138 Loss: 11.790191650390625 Tokens per Sec: 19151.568308534635
Epoch Step: 25 / 138 Loss: 12.237427711486816 Tokens per Sec: 19902.48023728191
Epoch Step: 30 / 138 Loss: 9.075540542602539 Tokens per Sec: 18473.00054296059
Epoch Step: 35 / 138 Loss: 19.489595413208008 Tokens per Sec: 18118.36474678263
Epoch Step: 40 / 138 Loss: 13.783498764038086 Tokens per Sec: 19584.36069818378
Epoch Step: 45 / 138 Loss: 16.72698974609375 Tokens per Sec: 19910.569573863195
Epoch Step: 50 / 138 Loss: 19.69881820678711 Tokens per Sec: 20282.721323522328
Epoch Step: 55 / 138 Loss: 18.20749282836914 Tokens per Sec: 19102.468538334047
Epoch Step: 60 / 138 Loss: 15.679414749145508 Tokens per Sec: 18338.772982195944
Epoch Step: 65 / 138 Loss: 14.249037742614746 Tokens per Sec: 19195.71388094931
Epoch Step: 70 / 138 Loss: 21.893577575683594 Tokens per Sec: 18313.903707651283
Epoch Step: 75 / 138 Loss: 16.419837951660156 Tokens per Sec: 18368.627693806808
Epoch Step: 80 / 138 Loss: 16.198009490966797 Tokens per Sec: 20316.35094314796
Epoch Step: 85 / 138 Loss: 15.7232666015625 Tokens per Sec: 18340.94656417059
Epoch Step: 90 / 138 Loss: 14.267170906066895 Tokens per Sec: 19118.573729159758
Epoch Step: 95 / 138 Loss: 22.60506820678711 Tokens per Sec: 19072.127105244144
Epoch Step: 100 / 138 Loss: 11.921340942382812 Tokens per Sec: 19838.297291090177
Epoch Step: 105 / 138 Loss: 15.728042602539062 Tokens per Sec: 18840.522640375555
Epoch Step: 110 / 138 Loss: 14.3820161819458 Tokens per Sec: 17416.427746086254
Epoch Step: 115 / 138 Loss: 15.284147262573242 Tokens per Sec: 16936.3908532198
Epoch Step: 120 / 138 Loss: 14.051435470581055 Tokens per Sec: 19014.72603870397
Epoch Step: 125 / 138 Loss: 17.5802059173584 Tokens per Sec: 17844.504105677104
Epoch Step: 130 / 138 Loss: 11.891407012939453 Tokens per Sec: 16237.628620931677
Epoch Step: 135 / 138 Loss: 16.021503448486328 Tokens per Sec: 18413.347317351945
Epoch ended with duration 0:00:33.968060
Train perplexity: 1.230183481682376
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( model != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.398003
Validation perplexity: 1.293102798341698
Model saved best_on_validation!
Model saved checkpoint!
Epoch 71 / 1000
Epoch Step: 5 / 138 Loss: 9.915614128112793 Tokens per Sec: 19241.154823802175
Epoch Step: 10 / 138 Loss: 16.85772705078125 Tokens per Sec: 19315.420715683707
Epoch Step: 15 / 138 Loss: 10.891975402832031 Tokens per Sec: 19679.200203104014
Epoch Step: 20 / 138 Loss: 12.702178001403809 Tokens per Sec: 19116.046333456914
Epoch Step: 25 / 138 Loss: 15.235054969787598 Tokens per Sec: 18415.948756672307
Epoch Step: 30 / 138 Loss: 11.256152153015137 Tokens per Sec: 20115.206168551707
Epoch Step: 35 / 138 Loss: 16.46381950378418 Tokens per Sec: 18583.162472056116
Epoch Step: 40 / 138 Loss: 12.636236190795898 Tokens per Sec: 19317.2683349068
Epoch Step: 45 / 138 Loss: 13.920842170715332 Tokens per Sec: 17425.502039878746
Epoch Step: 50 / 138 Loss: 12.131725311279297 Tokens per Sec: 19152.97064936547
Epoch Step: 55 / 138 Loss: 14.46953296661377 Tokens per Sec: 19716.381936705566
Epoch Step: 60 / 138 Loss: 19.769121170043945 Tokens per Sec: 19398.69966791164
Epoch Step: 65 / 138 Loss: 13.893016815185547 Tokens per Sec: 19092.83866114913
Epoch Step: 70 / 138 Loss: 18.604944229125977 Tokens per Sec: 18709.136069627886
Epoch Step: 75 / 138 Loss: 12.782821655273438 Tokens per Sec: 19676.520589288433
Epoch Step: 80 / 138 Loss: 13.74362850189209 Tokens per Sec: 19643.92095596592
Epoch Step: 85 / 138 Loss: 21.458131790161133 Tokens per Sec: 19349.06639736408
Epoch Step: 90 / 138 Loss: 14.017085075378418 Tokens per Sec: 17351.604041325056
Epoch Step: 95 / 138 Loss: 13.865750312805176 Tokens per Sec: 17012.717437147036
Epoch Step: 100 / 138 Loss: 14.56397819519043 Tokens per Sec: 20099.208655047423
Epoch Step: 105 / 138 Loss: 18.841819763183594 Tokens per Sec: 17944.582836166144
Epoch Step: 110 / 138 Loss: 14.608988761901855 Tokens per Sec: 18840.457500445493
Epoch Step: 115 / 138 Loss: 13.862017631530762 Tokens per Sec: 16572.35374444191
Epoch Step: 120 / 138 Loss: 15.48542308807373 Tokens per Sec: 18396.75839368154
Epoch Step: 125 / 138 Loss: 10.29725170135498 Tokens per Sec: 18147.67399724677
Epoch Step: 130 / 138 Loss: 12.881656646728516 Tokens per Sec: 19557.657956765506
Epoch Step: 135 / 138 Loss: 15.719741821289062 Tokens per Sec: 18176.544404697506
Epoch ended with duration 0:00:33.879526
Train perplexity: 1.2289312875442784
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 , java.util.List < java.lang.String , java.lang.Object > VAR_1 , java.util.List < java.lang.String > VAR_1 , java.util.List < java.lang.String > VAR_1 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 .[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( ( VAR_1 . METHOD_3 ( ) ) ) ; if ( ( METHOD_5 ( VAR_1 ) != null ) && ( ( VAR_1 ) != null ) ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) )[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.388951
Validation perplexity: 1.2928467836743898
Model saved best_on_validation!
Epoch 72 / 1000
Epoch Step: 5 / 138 Loss: 15.160623550415039 Tokens per Sec: 20100.391083095165
Epoch Step: 10 / 138 Loss: 8.655902862548828 Tokens per Sec: 18992.86703064373
Epoch Step: 15 / 138 Loss: 13.762600898742676 Tokens per Sec: 18902.4197330654
Epoch Step: 20 / 138 Loss: 13.652782440185547 Tokens per Sec: 18921.388481282564
Epoch Step: 25 / 138 Loss: 14.9718599319458 Tokens per Sec: 19558.392957539738
Epoch Step: 30 / 138 Loss: 18.678043365478516 Tokens per Sec: 18966.091540045727
Epoch Step: 35 / 138 Loss: 10.999344825744629 Tokens per Sec: 19750.175856321148
Epoch Step: 40 / 138 Loss: 13.478740692138672 Tokens per Sec: 20195.95282285267
Epoch Step: 45 / 138 Loss: 17.18096923828125 Tokens per Sec: 17149.86168087602
Epoch Step: 50 / 138 Loss: 11.69230842590332 Tokens per Sec: 19816.72271758514
Epoch Step: 55 / 138 Loss: 16.921852111816406 Tokens per Sec: 19911.83792662895
Epoch Step: 60 / 138 Loss: 14.929949760437012 Tokens per Sec: 18427.538280444813
Epoch Step: 65 / 138 Loss: 16.026866912841797 Tokens per Sec: 18943.869076264025
Epoch Step: 70 / 138 Loss: 12.676201820373535 Tokens per Sec: 19736.537729661224
Epoch Step: 75 / 138 Loss: 10.164048194885254 Tokens per Sec: 20310.288471121858
Epoch Step: 80 / 138 Loss: 15.122297286987305 Tokens per Sec: 18602.00803690359
Epoch Step: 85 / 138 Loss: 17.366424560546875 Tokens per Sec: 16788.05964942336
Epoch Step: 90 / 138 Loss: 16.257904052734375 Tokens per Sec: 19562.963208516085
Epoch Step: 95 / 138 Loss: 17.43205451965332 Tokens per Sec: 18861.450412847957
Epoch Step: 100 / 138 Loss: 12.237454414367676 Tokens per Sec: 19166.710387937186
Epoch Step: 105 / 138 Loss: 15.289701461791992 Tokens per Sec: 19091.246408440904
Epoch Step: 110 / 138 Loss: 20.2279109954834 Tokens per Sec: 17484.925796704287
Epoch Step: 115 / 138 Loss: 16.905681610107422 Tokens per Sec: 19258.83457845398
Epoch Step: 120 / 138 Loss: 14.163933753967285 Tokens per Sec: 17855.640748762165
Epoch Step: 125 / 138 Loss: 12.406963348388672 Tokens per Sec: 15689.4185882603
Epoch Step: 130 / 138 Loss: 12.981663703918457 Tokens per Sec: 18155.440819486936
Epoch Step: 135 / 138 Loss: 15.985925674438477 Tokens per Sec: 17325.71290771286
Epoch ended with duration 0:00:33.952640
Train perplexity: 1.2283038215998208
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { try { try { try { if ( ( ( VAR_1 != null ) && ( VAR_3 != null ) ) && ( ( VAR_4 != null ) ) ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.391938
Validation perplexity: 1.2887048783660513
Model saved best_on_validation!
Epoch 73 / 1000
Epoch Step: 5 / 138 Loss: 11.21087646484375 Tokens per Sec: 19114.906701828066
Epoch Step: 10 / 138 Loss: 14.58387565612793 Tokens per Sec: 19704.00331217365
Epoch Step: 15 / 138 Loss: 20.083099365234375 Tokens per Sec: 19290.834719852643
Epoch Step: 20 / 138 Loss: 16.171083450317383 Tokens per Sec: 19421.769426169358
Epoch Step: 25 / 138 Loss: 17.27155876159668 Tokens per Sec: 19612.965905167246
Epoch Step: 30 / 138 Loss: 8.672831535339355 Tokens per Sec: 20699.014310201917
Epoch Step: 35 / 138 Loss: 9.941238403320312 Tokens per Sec: 17636.362661006275
Epoch Step: 40 / 138 Loss: 14.284614562988281 Tokens per Sec: 19828.516031072893
Epoch Step: 45 / 138 Loss: 18.600923538208008 Tokens per Sec: 19757.056050024334
Epoch Step: 50 / 138 Loss: 12.385143280029297 Tokens per Sec: 19472.025397011126
Epoch Step: 55 / 138 Loss: 18.763233184814453 Tokens per Sec: 18142.728240166198
Epoch Step: 60 / 138 Loss: 16.064321517944336 Tokens per Sec: 19347.615285619522
Epoch Step: 65 / 138 Loss: 13.03464126586914 Tokens per Sec: 19274.87347789028
Epoch Step: 70 / 138 Loss: 14.068446159362793 Tokens per Sec: 17967.960668750846
Epoch Step: 75 / 138 Loss: 13.615825653076172 Tokens per Sec: 19544.394236572738
Epoch Step: 80 / 138 Loss: 16.43120574951172 Tokens per Sec: 18584.610015681843
Epoch Step: 85 / 138 Loss: 11.448797225952148 Tokens per Sec: 19025.00767358781
Epoch Step: 90 / 138 Loss: 13.414238929748535 Tokens per Sec: 18517.36271188402
Epoch Step: 95 / 138 Loss: 15.952875137329102 Tokens per Sec: 17864.460838593815
Epoch Step: 100 / 138 Loss: 11.5929594039917 Tokens per Sec: 17892.703692066138
Epoch Step: 105 / 138 Loss: 11.50777816772461 Tokens per Sec: 17435.38957708389
Epoch Step: 110 / 138 Loss: 13.225546836853027 Tokens per Sec: 18177.12307496626
Epoch Step: 115 / 138 Loss: 13.398216247558594 Tokens per Sec: 17968.629649823557
Epoch Step: 120 / 138 Loss: 17.095672607421875 Tokens per Sec: 16864.877072252042
Epoch Step: 125 / 138 Loss: 12.270821571350098 Tokens per Sec: 17669.479597618858
Epoch Step: 130 / 138 Loss: 14.403976440429688 Tokens per Sec: 18448.155367592415
Epoch Step: 135 / 138 Loss: 11.055426597595215 Tokens per Sec: 18914.92659985287
Epoch ended with duration 0:00:34.024515
Train perplexity: 1.2245325703778782
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( model != null ) { try { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.386539
Validation perplexity: 1.2902657807478157
Epoch 74 / 1000
Epoch Step: 5 / 138 Loss: 16.856054306030273 Tokens per Sec: 19145.213026599282
Epoch Step: 10 / 138 Loss: 18.08122444152832 Tokens per Sec: 19984.17559746161
Epoch Step: 15 / 138 Loss: 10.929965019226074 Tokens per Sec: 19873.597981341765
Epoch Step: 20 / 138 Loss: 9.364571571350098 Tokens per Sec: 20163.605598175778
Epoch Step: 25 / 138 Loss: 13.091320037841797 Tokens per Sec: 19056.24938514473
Epoch Step: 30 / 138 Loss: 10.358390808105469 Tokens per Sec: 19184.155252879355
Epoch Step: 35 / 138 Loss: 12.730199813842773 Tokens per Sec: 19772.969484969886
Epoch Step: 40 / 138 Loss: 16.40069580078125 Tokens per Sec: 19381.317893330364
Epoch Step: 45 / 138 Loss: 9.8773193359375 Tokens per Sec: 19064.439513072357
Epoch Step: 50 / 138 Loss: 17.87002944946289 Tokens per Sec: 19006.290495169196
Epoch Step: 55 / 138 Loss: 11.087993621826172 Tokens per Sec: 18645.675893885043
Epoch Step: 60 / 138 Loss: 16.731840133666992 Tokens per Sec: 18248.215275931423
Epoch Step: 65 / 138 Loss: 17.886070251464844 Tokens per Sec: 18546.260049539265
Epoch Step: 70 / 138 Loss: 14.395183563232422 Tokens per Sec: 18322.161781623985
Epoch Step: 75 / 138 Loss: 14.746201515197754 Tokens per Sec: 19220.643749398652
Epoch Step: 80 / 138 Loss: 17.24003791809082 Tokens per Sec: 18632.207867897392
Epoch Step: 85 / 138 Loss: 8.614760398864746 Tokens per Sec: 19439.14915424166
Epoch Step: 90 / 138 Loss: 11.090550422668457 Tokens per Sec: 20021.2848545439
Epoch Step: 95 / 138 Loss: 17.868816375732422 Tokens per Sec: 17565.760836975613
Epoch Step: 100 / 138 Loss: 19.951322555541992 Tokens per Sec: 17875.11590975565
Epoch Step: 105 / 138 Loss: 13.985620498657227 Tokens per Sec: 17493.66544096408
Epoch Step: 110 / 138 Loss: 17.349037170410156 Tokens per Sec: 18436.593905414386
Epoch Step: 115 / 138 Loss: 15.310612678527832 Tokens per Sec: 17689.781579509676
Epoch Step: 120 / 138 Loss: 10.996758460998535 Tokens per Sec: 16237.218676749435
Epoch Step: 125 / 138 Loss: 16.555377960205078 Tokens per Sec: 18873.17100479292
Epoch Step: 130 / 138 Loss: 11.717891693115234 Tokens per Sec: 17889.563295653395
Epoch Step: 135 / 138 Loss: 13.645588874816895 Tokens per Sec: 17853.897025415223
Epoch ended with duration 0:00:34.099078
Train perplexity: 1.222021140679639
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( TYPE_6 != null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.390547
Validation perplexity: 1.293537295718971
Epoch 75 / 1000
Epoch Step: 5 / 138 Loss: 8.943574905395508 Tokens per Sec: 19622.399886498682
Epoch Step: 10 / 138 Loss: 15.825818061828613 Tokens per Sec: 19021.915564089504
Epoch Step: 15 / 138 Loss: 22.212039947509766 Tokens per Sec: 16849.66472782896
Epoch Step: 20 / 138 Loss: 12.966876983642578 Tokens per Sec: 19328.871562998364
Epoch Step: 25 / 138 Loss: 17.25745391845703 Tokens per Sec: 18611.468992814538
Epoch Step: 30 / 138 Loss: 16.68982696533203 Tokens per Sec: 18504.361312386314
Epoch Step: 35 / 138 Loss: 12.16889762878418 Tokens per Sec: 19503.982239066594
Epoch Step: 40 / 138 Loss: 11.27346134185791 Tokens per Sec: 19164.916699900616
Epoch Step: 45 / 138 Loss: 14.560869216918945 Tokens per Sec: 18742.815390400952
Epoch Step: 50 / 138 Loss: 9.71601390838623 Tokens per Sec: 18428.616450837962
Epoch Step: 55 / 138 Loss: 15.534872055053711 Tokens per Sec: 18856.258933079036
Epoch Step: 60 / 138 Loss: 18.407474517822266 Tokens per Sec: 19155.04913644769
Epoch Step: 65 / 138 Loss: 11.504801750183105 Tokens per Sec: 19239.081535964975
Epoch Step: 70 / 138 Loss: 10.965533256530762 Tokens per Sec: 18873.30717565286
Epoch Step: 75 / 138 Loss: 8.015600204467773 Tokens per Sec: 18829.827572366907
Epoch Step: 80 / 138 Loss: 15.203088760375977 Tokens per Sec: 18235.45645526517
Epoch Step: 85 / 138 Loss: 15.444571495056152 Tokens per Sec: 20226.57843650524
Epoch Step: 90 / 138 Loss: 14.818978309631348 Tokens per Sec: 19234.335099877702
Epoch Step: 95 / 138 Loss: 14.114791870117188 Tokens per Sec: 19784.100616819058
Epoch Step: 100 / 138 Loss: 8.743937492370605 Tokens per Sec: 20046.542809951217
Epoch Step: 105 / 138 Loss: 13.289737701416016 Tokens per Sec: 18177.424421203053
Epoch Step: 110 / 138 Loss: 14.61967945098877 Tokens per Sec: 17998.16122570662
Epoch Step: 115 / 138 Loss: 11.02273178100586 Tokens per Sec: 18247.507032206362
Epoch Step: 120 / 138 Loss: 11.955846786499023 Tokens per Sec: 19120.776889323177
Epoch Step: 125 / 138 Loss: 12.015976905822754 Tokens per Sec: 18516.39005279485
Epoch Step: 130 / 138 Loss: 14.964635848999023 Tokens per Sec: 17826.375779786988
Epoch Step: 135 / 138 Loss: 13.85124397277832 Tokens per Sec: 16564.587312302516
Epoch ended with duration 0:00:34.065202
Train perplexity: 1.2185995562257466
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( ( VAR_1 . METHOD_3 ( ) ) ) ; if ( ( model != null ) { try { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.407768
Validation perplexity: 1.2904807556048514
Model saved checkpoint!
Epoch 76 / 1000
Epoch Step: 5 / 138 Loss: 12.999391555786133 Tokens per Sec: 18278.40445802441
Epoch Step: 10 / 138 Loss: 15.606428146362305 Tokens per Sec: 18070.255086889578
Epoch Step: 15 / 138 Loss: 11.241067886352539 Tokens per Sec: 20106.695776129673
Epoch Step: 20 / 138 Loss: 14.453889846801758 Tokens per Sec: 18884.708534421654
Epoch Step: 25 / 138 Loss: 10.93282699584961 Tokens per Sec: 19113.565868486305
Epoch Step: 30 / 138 Loss: 12.095887184143066 Tokens per Sec: 18505.409505329015
Epoch Step: 35 / 138 Loss: 15.388854026794434 Tokens per Sec: 18150.161514675277
Epoch Step: 40 / 138 Loss: 9.590888023376465 Tokens per Sec: 19971.644082627023
Epoch Step: 45 / 138 Loss: 17.767221450805664 Tokens per Sec: 20035.77856007547
Epoch Step: 50 / 138 Loss: 18.14246368408203 Tokens per Sec: 19855.05749258871
Epoch Step: 55 / 138 Loss: 11.898329734802246 Tokens per Sec: 19366.497559220763
Epoch Step: 60 / 138 Loss: 20.233173370361328 Tokens per Sec: 19060.30083924491
Epoch Step: 65 / 138 Loss: 15.336042404174805 Tokens per Sec: 17723.38660401955
Epoch Step: 70 / 138 Loss: 12.458474159240723 Tokens per Sec: 17942.4749838034
Epoch Step: 75 / 138 Loss: 16.738937377929688 Tokens per Sec: 20151.497646429976
Epoch Step: 80 / 138 Loss: 16.418710708618164 Tokens per Sec: 18278.8983185469
Epoch Step: 85 / 138 Loss: 10.36959171295166 Tokens per Sec: 20923.02487808948
Epoch Step: 90 / 138 Loss: 16.56905174255371 Tokens per Sec: 19208.03605173888
Epoch Step: 95 / 138 Loss: 12.818614959716797 Tokens per Sec: 20445.16514803569
Epoch Step: 100 / 138 Loss: 19.30897331237793 Tokens per Sec: 19393.803467777874
Epoch Step: 105 / 138 Loss: 15.215605735778809 Tokens per Sec: 17850.892554410853
Epoch Step: 110 / 138 Loss: 15.065723419189453 Tokens per Sec: 18106.33177670192
Epoch Step: 115 / 138 Loss: 13.987055778503418 Tokens per Sec: 17842.330952047625
Epoch Step: 120 / 138 Loss: 11.877398490905762 Tokens per Sec: 18904.821602951306
Epoch Step: 125 / 138 Loss: 16.92473030090332 Tokens per Sec: 18247.90792085701
Epoch Step: 130 / 138 Loss: 14.115388870239258 Tokens per Sec: 17750.93600006786
Epoch Step: 135 / 138 Loss: 13.81157398223877 Tokens per Sec: 16649.94967399152
Epoch ended with duration 0:00:33.923621
Train perplexity: 1.2158232353237846
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { try { try { METHOD_6 ( METHOD_4 ( VAR_1 . METHOD_3 ( ) ) , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.389225
Validation perplexity: 1.2875379087695085
Model saved best_on_validation!
Epoch 77 / 1000
Epoch Step: 5 / 138 Loss: 14.188105583190918 Tokens per Sec: 18601.977496373544
Epoch Step: 10 / 138 Loss: 9.365797996520996 Tokens per Sec: 20255.358013693032
Epoch Step: 15 / 138 Loss: 17.040061950683594 Tokens per Sec: 18863.388560102678
Epoch Step: 20 / 138 Loss: 14.625088691711426 Tokens per Sec: 19599.833234242382
Epoch Step: 25 / 138 Loss: 16.958600997924805 Tokens per Sec: 17998.067137951246
Epoch Step: 30 / 138 Loss: 13.378602027893066 Tokens per Sec: 20920.968226370485
Epoch Step: 35 / 138 Loss: 14.305344581604004 Tokens per Sec: 19412.453009454126
Epoch Step: 40 / 138 Loss: 15.508150100708008 Tokens per Sec: 19102.669465276704
Epoch Step: 45 / 138 Loss: 11.275839805603027 Tokens per Sec: 19140.72821491201
Epoch Step: 50 / 138 Loss: 12.656147003173828 Tokens per Sec: 19719.04288321063
Epoch Step: 55 / 138 Loss: 18.487808227539062 Tokens per Sec: 18041.851916506323
Epoch Step: 60 / 138 Loss: 17.429521560668945 Tokens per Sec: 18809.073481371728
Epoch Step: 65 / 138 Loss: 16.15240478515625 Tokens per Sec: 18026.47913404859
Epoch Step: 70 / 138 Loss: 11.541982650756836 Tokens per Sec: 20049.044677114183
Epoch Step: 75 / 138 Loss: 14.602992057800293 Tokens per Sec: 20185.30706606003
Epoch Step: 80 / 138 Loss: 22.891845703125 Tokens per Sec: 18093.711082021262
Epoch Step: 85 / 138 Loss: 7.374932289123535 Tokens per Sec: 19703.34442514108
Epoch Step: 90 / 138 Loss: 18.36937713623047 Tokens per Sec: 18895.348582517305
Epoch Step: 95 / 138 Loss: 16.484054565429688 Tokens per Sec: 19345.57332538415
Epoch Step: 100 / 138 Loss: 16.75737762451172 Tokens per Sec: 18295.249671888254
Epoch Step: 105 / 138 Loss: 16.31978988647461 Tokens per Sec: 18544.110530786933
Epoch Step: 110 / 138 Loss: 11.535392761230469 Tokens per Sec: 18197.106824776125
Epoch Step: 115 / 138 Loss: 20.239582061767578 Tokens per Sec: 18371.234733083773
Epoch Step: 120 / 138 Loss: 12.02911376953125 Tokens per Sec: 17817.502834933068
Epoch Step: 125 / 138 Loss: 14.193883895874023 Tokens per Sec: 18908.160491332146
Epoch Step: 130 / 138 Loss: 11.955730438232422 Tokens per Sec: 18065.30754551339
Epoch Step: 135 / 138 Loss: 16.591154098510742 Tokens per Sec: 16722.264494834613
Epoch ended with duration 0:00:33.864617
Train perplexity: 1.2153865049284163
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( METHOD_5 ( null ) { try { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.404013
Validation perplexity: 1.287203920297085
Model saved best_on_validation!
Epoch 78 / 1000
Epoch Step: 5 / 138 Loss: 9.029772758483887 Tokens per Sec: 19138.799725424105
Epoch Step: 10 / 138 Loss: 18.16375732421875 Tokens per Sec: 16616.89254564885
Epoch Step: 15 / 138 Loss: 15.391030311584473 Tokens per Sec: 19619.086085113675
Epoch Step: 20 / 138 Loss: 9.481322288513184 Tokens per Sec: 17511.347755529157
Epoch Step: 25 / 138 Loss: 12.655348777770996 Tokens per Sec: 19373.962138421928
Epoch Step: 30 / 138 Loss: 14.55715560913086 Tokens per Sec: 18766.897524864853
Epoch Step: 35 / 138 Loss: 11.355155944824219 Tokens per Sec: 18847.924847274746
Epoch Step: 40 / 138 Loss: 17.899425506591797 Tokens per Sec: 19060.89005492302
Epoch Step: 45 / 138 Loss: 16.51955223083496 Tokens per Sec: 19984.417815557554
Epoch Step: 50 / 138 Loss: 13.199217796325684 Tokens per Sec: 19113.97520398196
Epoch Step: 55 / 138 Loss: 18.82250213623047 Tokens per Sec: 20360.181258593784
Epoch Step: 60 / 138 Loss: 12.921940803527832 Tokens per Sec: 19583.126541362384
Epoch Step: 65 / 138 Loss: 17.920869827270508 Tokens per Sec: 19624.907692220597
Epoch Step: 70 / 138 Loss: 15.534860610961914 Tokens per Sec: 17624.826501828524
Epoch Step: 75 / 138 Loss: 13.29936408996582 Tokens per Sec: 19474.247944042836
Epoch Step: 80 / 138 Loss: 15.935473442077637 Tokens per Sec: 19186.230479686936
Epoch Step: 85 / 138 Loss: 13.081319808959961 Tokens per Sec: 19607.286301161435
Epoch Step: 90 / 138 Loss: 15.61397933959961 Tokens per Sec: 19512.89832845107
Epoch Step: 95 / 138 Loss: 8.69168758392334 Tokens per Sec: 18991.395477662652
Epoch Step: 100 / 138 Loss: 17.32727813720703 Tokens per Sec: 19736.714652521172
Epoch Step: 105 / 138 Loss: 11.759077072143555 Tokens per Sec: 17518.947197830963
Epoch Step: 110 / 138 Loss: 10.672093391418457 Tokens per Sec: 19086.620122233326
Epoch Step: 115 / 138 Loss: 11.968481063842773 Tokens per Sec: 15933.486971932954
Epoch Step: 120 / 138 Loss: 11.248486518859863 Tokens per Sec: 18470.4369011732
Epoch Step: 125 / 138 Loss: 14.744470596313477 Tokens per Sec: 18451.245533931567
Epoch Step: 130 / 138 Loss: 12.644648551940918 Tokens per Sec: 17282.041312497167
Epoch Step: 135 / 138 Loss: 18.029953002929688 Tokens per Sec: 17925.19573874885
Epoch ended with duration 0:00:33.988828
Train perplexity: 1.2115997933349676
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { try { try { try { if ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) ) ) { try { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.399577
Validation perplexity: 1.2826882632108658
Model saved best_on_validation!
Epoch 79 / 1000
Epoch Step: 5 / 138 Loss: 12.422852516174316 Tokens per Sec: 17807.03943993078
Epoch Step: 10 / 138 Loss: 9.306365013122559 Tokens per Sec: 19932.22175502474
Epoch Step: 15 / 138 Loss: 13.756818771362305 Tokens per Sec: 17421.508754265968
Epoch Step: 20 / 138 Loss: 9.342116355895996 Tokens per Sec: 19051.74654306269
Epoch Step: 25 / 138 Loss: 12.483908653259277 Tokens per Sec: 19528.62414209966
Epoch Step: 30 / 138 Loss: 14.555680274963379 Tokens per Sec: 20248.84156419839
Epoch Step: 35 / 138 Loss: 10.118067741394043 Tokens per Sec: 19193.23436678295
Epoch Step: 40 / 138 Loss: 11.171221733093262 Tokens per Sec: 20230.640231340116
Epoch Step: 45 / 138 Loss: 18.624998092651367 Tokens per Sec: 19047.969788954375
Epoch Step: 50 / 138 Loss: 12.103067398071289 Tokens per Sec: 19582.955792348657
Epoch Step: 55 / 138 Loss: 14.256136894226074 Tokens per Sec: 18813.167413604697
Epoch Step: 60 / 138 Loss: 9.237261772155762 Tokens per Sec: 20056.755707057084
Epoch Step: 65 / 138 Loss: 16.407596588134766 Tokens per Sec: 18655.749344404132
Epoch Step: 70 / 138 Loss: 14.948604583740234 Tokens per Sec: 18817.93840039321
Epoch Step: 75 / 138 Loss: 16.10039520263672 Tokens per Sec: 18302.412650920207
Epoch Step: 80 / 138 Loss: 10.852739334106445 Tokens per Sec: 18238.67539356289
Epoch Step: 85 / 138 Loss: 17.573768615722656 Tokens per Sec: 18967.405867270747
Epoch Step: 90 / 138 Loss: 15.853153228759766 Tokens per Sec: 19528.0873421879
Epoch Step: 95 / 138 Loss: 15.566100120544434 Tokens per Sec: 19254.403850834122
Epoch Step: 100 / 138 Loss: 15.852333068847656 Tokens per Sec: 19311.873396809515
Epoch Step: 105 / 138 Loss: 14.711128234863281 Tokens per Sec: 18856.941411147993
Epoch Step: 110 / 138 Loss: 13.058002471923828 Tokens per Sec: 17052.806651520677
Epoch Step: 115 / 138 Loss: 13.648336410522461 Tokens per Sec: 17638.42886565498
Epoch Step: 120 / 138 Loss: 16.804418563842773 Tokens per Sec: 15978.609134790593
Epoch Step: 125 / 138 Loss: 18.913663864135742 Tokens per Sec: 17588.830611968497
Epoch Step: 130 / 138 Loss: 10.9290189743042 Tokens per Sec: 18978.621129934134
Epoch Step: 135 / 138 Loss: 17.003313064575195 Tokens per Sec: 18643.039485469864
Epoch ended with duration 0:00:34.049487
Train perplexity: 1.2089281414297897
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( METHOD_5 ( null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.396730
Validation perplexity: 1.284347945866942
Epoch 80 / 1000
Epoch Step: 5 / 138 Loss: 10.425873756408691 Tokens per Sec: 19876.77527299411
Epoch Step: 10 / 138 Loss: 19.016616821289062 Tokens per Sec: 19511.21832942724
Epoch Step: 15 / 138 Loss: 11.745540618896484 Tokens per Sec: 19070.987904804988
Epoch Step: 20 / 138 Loss: 14.827079772949219 Tokens per Sec: 19662.782409781517
Epoch Step: 25 / 138 Loss: 17.238487243652344 Tokens per Sec: 16995.37572139732
Epoch Step: 30 / 138 Loss: 13.42691421508789 Tokens per Sec: 18168.727696927046
Epoch Step: 35 / 138 Loss: 10.369178771972656 Tokens per Sec: 20264.070726604492
Epoch Step: 40 / 138 Loss: 11.59023666381836 Tokens per Sec: 20211.967007764884
Epoch Step: 45 / 138 Loss: 9.882624626159668 Tokens per Sec: 18972.709258148276
Epoch Step: 50 / 138 Loss: 8.845955848693848 Tokens per Sec: 19897.210665018472
Epoch Step: 55 / 138 Loss: 16.09683609008789 Tokens per Sec: 17978.353901592065
Epoch Step: 60 / 138 Loss: 8.388713836669922 Tokens per Sec: 19276.90431975153
Epoch Step: 65 / 138 Loss: 14.434491157531738 Tokens per Sec: 17447.39885369576
Epoch Step: 70 / 138 Loss: 13.981626510620117 Tokens per Sec: 19976.95651923585
Epoch Step: 75 / 138 Loss: 11.452852249145508 Tokens per Sec: 20125.483004890983
Epoch Step: 80 / 138 Loss: 17.571996688842773 Tokens per Sec: 19006.028525043675
Epoch Step: 85 / 138 Loss: 19.282094955444336 Tokens per Sec: 19299.905691358355
Epoch Step: 90 / 138 Loss: 15.648735046386719 Tokens per Sec: 19828.919283074454
Epoch Step: 95 / 138 Loss: 9.438770294189453 Tokens per Sec: 19110.238758278836
Epoch Step: 100 / 138 Loss: 17.014678955078125 Tokens per Sec: 19752.804522832645
Epoch Step: 105 / 138 Loss: 13.506952285766602 Tokens per Sec: 18151.44468319798
Epoch Step: 110 / 138 Loss: 11.60336971282959 Tokens per Sec: 17875.058169094118
Epoch Step: 115 / 138 Loss: 15.412096977233887 Tokens per Sec: 18641.995433984204
Epoch Step: 120 / 138 Loss: 13.347726821899414 Tokens per Sec: 15978.758706674658
Epoch Step: 125 / 138 Loss: 12.07851791381836 Tokens per Sec: 17832.9168259494
Epoch Step: 130 / 138 Loss: 13.564064979553223 Tokens per Sec: 17666.43727059589
Epoch Step: 135 / 138 Loss: 15.046202659606934 Tokens per Sec: 18285.5120695942
Epoch ended with duration 0:00:33.973332
Train perplexity: 1.2083067803456653
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( TYPE_6 != null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.402738
Validation perplexity: 1.28710207483231
Model saved checkpoint!
Epoch 81 / 1000
Epoch Step: 5 / 138 Loss: 14.594651222229004 Tokens per Sec: 18086.80854734605
Epoch Step: 10 / 138 Loss: 12.523022651672363 Tokens per Sec: 19124.646074969492
Epoch Step: 15 / 138 Loss: 10.118825912475586 Tokens per Sec: 20276.990993891864
Epoch Step: 20 / 138 Loss: 18.788223266601562 Tokens per Sec: 18969.03769249274
Epoch Step: 25 / 138 Loss: 11.222997665405273 Tokens per Sec: 19613.839078280693
Epoch Step: 30 / 138 Loss: 8.265815734863281 Tokens per Sec: 20103.892150949396
Epoch Step: 35 / 138 Loss: 17.446090698242188 Tokens per Sec: 18547.03990034859
Epoch Step: 40 / 138 Loss: 13.930012702941895 Tokens per Sec: 18391.611448310025
Epoch Step: 45 / 138 Loss: 13.035826683044434 Tokens per Sec: 19653.627431655517
Epoch Step: 50 / 138 Loss: 9.7622709274292 Tokens per Sec: 20188.446922678464
Epoch Step: 55 / 138 Loss: 18.61624526977539 Tokens per Sec: 17856.24068222898
Epoch Step: 60 / 138 Loss: 10.761940002441406 Tokens per Sec: 19850.922141380855
Epoch Step: 65 / 138 Loss: 13.90429401397705 Tokens per Sec: 16503.931745804683
Epoch Step: 70 / 138 Loss: 14.703324317932129 Tokens per Sec: 19779.949718089385
Epoch Step: 75 / 138 Loss: 15.023183822631836 Tokens per Sec: 18255.17087166722
Epoch Step: 80 / 138 Loss: 17.353519439697266 Tokens per Sec: 17327.673560200856
Epoch Step: 85 / 138 Loss: 14.36803150177002 Tokens per Sec: 20070.920209782376
Epoch Step: 90 / 138 Loss: 11.181635856628418 Tokens per Sec: 19488.992793896363
Epoch Step: 95 / 138 Loss: 16.54708480834961 Tokens per Sec: 19641.165058377952
Epoch Step: 100 / 138 Loss: 15.321779251098633 Tokens per Sec: 18872.588391018187
Epoch Step: 105 / 138 Loss: 13.247793197631836 Tokens per Sec: 17966.569947364012
Epoch Step: 110 / 138 Loss: 12.114441871643066 Tokens per Sec: 18475.07092118924
Epoch Step: 115 / 138 Loss: 15.59326171875 Tokens per Sec: 18405.18960107731
Epoch Step: 120 / 138 Loss: 11.92915153503418 Tokens per Sec: 18255.16998947672
Epoch Step: 125 / 138 Loss: 17.62872314453125 Tokens per Sec: 18811.160551204888
Epoch Step: 130 / 138 Loss: 13.495843887329102 Tokens per Sec: 16192.123900719687
Epoch Step: 135 / 138 Loss: 14.156964302062988 Tokens per Sec: 17750.763543557237
Epoch ended with duration 0:00:34.075027
Train perplexity: 1.2102828675673751
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.386043
Validation perplexity: 1.2784537662048148
Model saved best_on_validation!
Epoch 82 / 1000
Epoch Step: 5 / 138 Loss: 16.11827278137207 Tokens per Sec: 19118.11438790393
Epoch Step: 10 / 138 Loss: 14.566976547241211 Tokens per Sec: 17759.4492876487
Epoch Step: 15 / 138 Loss: 13.291792869567871 Tokens per Sec: 18341.875010737065
Epoch Step: 20 / 138 Loss: 11.35072135925293 Tokens per Sec: 19827.645291929297
Epoch Step: 25 / 138 Loss: 14.304779052734375 Tokens per Sec: 18378.610412521255
Epoch Step: 30 / 138 Loss: 8.23951244354248 Tokens per Sec: 19722.549125709895
Epoch Step: 35 / 138 Loss: 18.249134063720703 Tokens per Sec: 18787.174258943396
Epoch Step: 40 / 138 Loss: 14.900038719177246 Tokens per Sec: 18176.043445402513
Epoch Step: 45 / 138 Loss: 13.205455780029297 Tokens per Sec: 20313.46111795799
Epoch Step: 50 / 138 Loss: 10.564949035644531 Tokens per Sec: 19620.18686214551
Epoch Step: 55 / 138 Loss: 16.529380798339844 Tokens per Sec: 19991.662646958815
Epoch Step: 60 / 138 Loss: 10.337787628173828 Tokens per Sec: 21109.346273461215
Epoch Step: 65 / 138 Loss: 9.160380363464355 Tokens per Sec: 19701.28008336636
Epoch Step: 70 / 138 Loss: 11.65870475769043 Tokens per Sec: 18454.775128256744
Epoch Step: 75 / 138 Loss: 14.832566261291504 Tokens per Sec: 18563.94933032047
Epoch Step: 80 / 138 Loss: 9.222413063049316 Tokens per Sec: 18388.37466367205
Epoch Step: 85 / 138 Loss: 7.486484527587891 Tokens per Sec: 19700.958809070453
Epoch Step: 90 / 138 Loss: 14.927465438842773 Tokens per Sec: 19130.756847760655
Epoch Step: 95 / 138 Loss: 10.297480583190918 Tokens per Sec: 18190.11777275792
Epoch Step: 100 / 138 Loss: 13.97513484954834 Tokens per Sec: 18800.444050099417
Epoch Step: 105 / 138 Loss: 12.069872856140137 Tokens per Sec: 18193.39843669704
Epoch Step: 110 / 138 Loss: 13.452775001525879 Tokens per Sec: 18676.25931140223
Epoch Step: 115 / 138 Loss: 16.472322463989258 Tokens per Sec: 18359.60461244312
Epoch Step: 120 / 138 Loss: 12.352839469909668 Tokens per Sec: 17959.759485712726
Epoch Step: 125 / 138 Loss: 13.359115600585938 Tokens per Sec: 18965.516811826485
Epoch Step: 130 / 138 Loss: 16.4702091217041 Tokens per Sec: 16013.811386103707
Epoch Step: 135 / 138 Loss: 12.945639610290527 Tokens per Sec: 17065.009993449185
Epoch ended with duration 0:00:34.073917
Train perplexity: 1.2022453329546081
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( TYPE_6 != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.400930
Validation perplexity: 1.2790596797344425
Epoch 83 / 1000
Epoch Step: 5 / 138 Loss: 11.718526840209961 Tokens per Sec: 18416.02648557445
Epoch Step: 10 / 138 Loss: 10.954034805297852 Tokens per Sec: 18292.326982784132
Epoch Step: 15 / 138 Loss: 15.025915145874023 Tokens per Sec: 19876.668071149637
Epoch Step: 20 / 138 Loss: 11.173603057861328 Tokens per Sec: 19210.574748625695
Epoch Step: 25 / 138 Loss: 16.184144973754883 Tokens per Sec: 17815.2553124412
Epoch Step: 30 / 138 Loss: 13.33294677734375 Tokens per Sec: 19326.15771021671
Epoch Step: 35 / 138 Loss: 13.202776908874512 Tokens per Sec: 17752.043773790767
Epoch Step: 40 / 138 Loss: 9.518881797790527 Tokens per Sec: 20360.258618255382
Epoch Step: 45 / 138 Loss: 17.312475204467773 Tokens per Sec: 17725.09763671598
Epoch Step: 50 / 138 Loss: 12.846040725708008 Tokens per Sec: 20168.35097172245
Epoch Step: 55 / 138 Loss: 11.059718132019043 Tokens per Sec: 19970.335224830116
Epoch Step: 60 / 138 Loss: 11.754459381103516 Tokens per Sec: 18713.915326581762
Epoch Step: 65 / 138 Loss: 15.29061222076416 Tokens per Sec: 17452.97764796375
Epoch Step: 70 / 138 Loss: 12.747282028198242 Tokens per Sec: 19631.876945631455
Epoch Step: 75 / 138 Loss: 12.711456298828125 Tokens per Sec: 18693.98308467136
Epoch Step: 80 / 138 Loss: 20.235572814941406 Tokens per Sec: 19009.703739406807
Epoch Step: 85 / 138 Loss: 11.790451049804688 Tokens per Sec: 19464.83696894271
Epoch Step: 90 / 138 Loss: 11.538626670837402 Tokens per Sec: 20554.421199777098
Epoch Step: 95 / 138 Loss: 20.887893676757812 Tokens per Sec: 18599.967426178926
Epoch Step: 100 / 138 Loss: 14.111382484436035 Tokens per Sec: 19761.536221353417
Epoch Step: 105 / 138 Loss: 9.946333885192871 Tokens per Sec: 15971.935454315359
Epoch Step: 110 / 138 Loss: 13.05490493774414 Tokens per Sec: 18464.33870667074
Epoch Step: 115 / 138 Loss: 15.336752891540527 Tokens per Sec: 18288.100299124533
Epoch Step: 120 / 138 Loss: 17.94801139831543 Tokens per Sec: 18273.22552153831
Epoch Step: 125 / 138 Loss: 13.547237396240234 Tokens per Sec: 17289.43676828672
Epoch Step: 130 / 138 Loss: 10.71163272857666 Tokens per Sec: 18304.787609560186
Epoch Step: 135 / 138 Loss: 14.714563369750977 Tokens per Sec: 19464.84638542395
Epoch ended with duration 0:00:34.048828
Train perplexity: 1.2001336721831206
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( ( VAR_1 . METHOD_3 ( ) ) ) ; if ( ( METHOD_5 ( ) != null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.390060
Validation perplexity: 1.277504942469837
Model saved best_on_validation!
Epoch 84 / 1000
Epoch Step: 5 / 138 Loss: 13.233979225158691 Tokens per Sec: 18626.34714077262
Epoch Step: 10 / 138 Loss: 16.040407180786133 Tokens per Sec: 17408.27329655403
Epoch Step: 15 / 138 Loss: 10.167455673217773 Tokens per Sec: 19359.388501475827
Epoch Step: 20 / 138 Loss: 9.717277526855469 Tokens per Sec: 19401.49580604106
Epoch Step: 25 / 138 Loss: 10.264313697814941 Tokens per Sec: 19372.23577547842
Epoch Step: 30 / 138 Loss: 11.752959251403809 Tokens per Sec: 19027.904422068896
Epoch Step: 35 / 138 Loss: 10.593780517578125 Tokens per Sec: 19355.978648148965
Epoch Step: 40 / 138 Loss: 15.830994606018066 Tokens per Sec: 19151.657958537962
Epoch Step: 45 / 138 Loss: 9.975957870483398 Tokens per Sec: 19404.874362488903
Epoch Step: 50 / 138 Loss: 12.691147804260254 Tokens per Sec: 17568.09456206967
Epoch Step: 55 / 138 Loss: 13.931414604187012 Tokens per Sec: 19183.39704459249
Epoch Step: 60 / 138 Loss: 10.772102355957031 Tokens per Sec: 19160.8407834394
Epoch Step: 65 / 138 Loss: 8.340970039367676 Tokens per Sec: 19477.80927792012
Epoch Step: 70 / 138 Loss: 21.040395736694336 Tokens per Sec: 19080.900259671525
Epoch Step: 75 / 138 Loss: 10.408538818359375 Tokens per Sec: 19067.872307440917
Epoch Step: 80 / 138 Loss: 17.512500762939453 Tokens per Sec: 18961.13908657523
Epoch Step: 85 / 138 Loss: 11.024826049804688 Tokens per Sec: 20125.334470281025
Epoch Step: 90 / 138 Loss: 11.892716407775879 Tokens per Sec: 19099.75456033638
Epoch Step: 95 / 138 Loss: 18.895246505737305 Tokens per Sec: 19221.482762944637
Epoch Step: 100 / 138 Loss: 12.259374618530273 Tokens per Sec: 18860.62327599513
Epoch Step: 105 / 138 Loss: 11.764082908630371 Tokens per Sec: 17781.700239447946
Epoch Step: 110 / 138 Loss: 12.883715629577637 Tokens per Sec: 17009.370279124476
Epoch Step: 115 / 138 Loss: 10.912561416625977 Tokens per Sec: 18042.76311936157
Epoch Step: 120 / 138 Loss: 10.500483512878418 Tokens per Sec: 19362.02978713111
Epoch Step: 125 / 138 Loss: 15.568371772766113 Tokens per Sec: 17852.306211634972
Epoch Step: 130 / 138 Loss: 13.674813270568848 Tokens per Sec: 18350.425735497683
Epoch Step: 135 / 138 Loss: 15.69095516204834 Tokens per Sec: 18270.060935716436
Epoch ended with duration 0:00:33.968863
Train perplexity: 1.2017575488052916
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( ( VAR_1 . METHOD_3 ( ) ) , VAR_4 ) ; try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.395067
Validation perplexity: 1.275996592116881
Model saved best_on_validation!
Epoch 85 / 1000
Epoch Step: 5 / 138 Loss: 16.29582977294922 Tokens per Sec: 17732.616578495905
Epoch Step: 10 / 138 Loss: 17.476436614990234 Tokens per Sec: 17899.799431315343
Epoch Step: 15 / 138 Loss: 12.547178268432617 Tokens per Sec: 18594.745580780418
Epoch Step: 20 / 138 Loss: 13.280970573425293 Tokens per Sec: 18964.061096940823
Epoch Step: 25 / 138 Loss: 12.924612998962402 Tokens per Sec: 19870.40632483158
Epoch Step: 30 / 138 Loss: 12.428330421447754 Tokens per Sec: 19902.440632028294
Epoch Step: 35 / 138 Loss: 14.844756126403809 Tokens per Sec: 19170.752533471994
Epoch Step: 40 / 138 Loss: 11.974869728088379 Tokens per Sec: 18790.181387385
Epoch Step: 45 / 138 Loss: 7.366506576538086 Tokens per Sec: 20677.73143481344
Epoch Step: 50 / 138 Loss: 13.312871932983398 Tokens per Sec: 20505.728575321533
Epoch Step: 55 / 138 Loss: 11.962116241455078 Tokens per Sec: 19338.292701500566
Epoch Step: 60 / 138 Loss: 7.643285751342773 Tokens per Sec: 19654.41365362649
Epoch Step: 65 / 138 Loss: 7.91162109375 Tokens per Sec: 19739.12848748098
Epoch Step: 70 / 138 Loss: 19.654460906982422 Tokens per Sec: 18570.619555144793
Epoch Step: 75 / 138 Loss: 13.328180313110352 Tokens per Sec: 19682.455357749313
Epoch Step: 80 / 138 Loss: 17.63133430480957 Tokens per Sec: 18814.618633210677
Epoch Step: 85 / 138 Loss: 12.339226722717285 Tokens per Sec: 18922.681164280682
Epoch Step: 90 / 138 Loss: 9.670281410217285 Tokens per Sec: 19489.44530372783
Epoch Step: 95 / 138 Loss: 12.467630386352539 Tokens per Sec: 18757.96218011396
Epoch Step: 100 / 138 Loss: 8.978179931640625 Tokens per Sec: 19104.114259208884
Epoch Step: 105 / 138 Loss: 11.332847595214844 Tokens per Sec: 19117.307669963964
Epoch Step: 110 / 138 Loss: 14.082749366760254 Tokens per Sec: 18058.995697135728
Epoch Step: 115 / 138 Loss: 10.935722351074219 Tokens per Sec: 18830.888165391192
Epoch Step: 120 / 138 Loss: 13.382749557495117 Tokens per Sec: 18108.580648971732
Epoch Step: 125 / 138 Loss: 13.878349304199219 Tokens per Sec: 18506.568181352293
Epoch Step: 130 / 138 Loss: 10.6697998046875 Tokens per Sec: 16418.984479133338
Epoch Step: 135 / 138 Loss: 13.596595764160156 Tokens per Sec: 19127.100532818447
Epoch ended with duration 0:00:33.708778
Train perplexity: 1.194947001663688
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( ( VAR_1 . METHOD_3 ( ) ) ) ; if ( ( err != null ) && ( ( VAR_1 ) != null ) ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.386651
Validation perplexity: 1.282153741782441
Model saved checkpoint!
Epoch 86 / 1000
Epoch Step: 5 / 138 Loss: 7.50572395324707 Tokens per Sec: 18514.68485217574
Epoch Step: 10 / 138 Loss: 12.017650604248047 Tokens per Sec: 18681.816981565466
Epoch Step: 15 / 138 Loss: 12.783000946044922 Tokens per Sec: 18988.94403304786
Epoch Step: 20 / 138 Loss: 13.285263061523438 Tokens per Sec: 18813.31923123438
Epoch Step: 25 / 138 Loss: 14.809515953063965 Tokens per Sec: 18477.499456216075
Epoch Step: 30 / 138 Loss: 15.061582565307617 Tokens per Sec: 20092.741223747995
Epoch Step: 35 / 138 Loss: 15.392240524291992 Tokens per Sec: 19733.10245364007
Epoch Step: 40 / 138 Loss: 13.230347633361816 Tokens per Sec: 17794.333787621694
Epoch Step: 45 / 138 Loss: 18.64769744873047 Tokens per Sec: 19149.746220956644
Epoch Step: 50 / 138 Loss: 10.370930671691895 Tokens per Sec: 19004.844016808856
Epoch Step: 55 / 138 Loss: 15.606407165527344 Tokens per Sec: 18099.26490612529
Epoch Step: 60 / 138 Loss: 14.879220008850098 Tokens per Sec: 20403.927777855006
Epoch Step: 65 / 138 Loss: 14.285318374633789 Tokens per Sec: 19124.63989739601
Epoch Step: 70 / 138 Loss: 12.812119483947754 Tokens per Sec: 19391.131579951645
Epoch Step: 75 / 138 Loss: 15.8076171875 Tokens per Sec: 19006.621727871727
Epoch Step: 80 / 138 Loss: 18.050418853759766 Tokens per Sec: 19906.749682609046
Epoch Step: 85 / 138 Loss: 9.41572380065918 Tokens per Sec: 19060.456738954763
Epoch Step: 90 / 138 Loss: 15.077526092529297 Tokens per Sec: 18771.091053036234
Epoch Step: 95 / 138 Loss: 15.551563262939453 Tokens per Sec: 19163.73595026495
Epoch Step: 100 / 138 Loss: 13.682879447937012 Tokens per Sec: 19827.38332127435
Epoch Step: 105 / 138 Loss: 12.156257629394531 Tokens per Sec: 18624.05274409308
Epoch Step: 110 / 138 Loss: 17.104551315307617 Tokens per Sec: 17877.681186085032
Epoch Step: 115 / 138 Loss: 16.035974502563477 Tokens per Sec: 17350.251372838276
Epoch Step: 120 / 138 Loss: 13.193798065185547 Tokens per Sec: 18801.174953500984
Epoch Step: 125 / 138 Loss: 14.181947708129883 Tokens per Sec: 17547.95109337107
Epoch Step: 130 / 138 Loss: 16.500579833984375 Tokens per Sec: 18030.44873120157
Epoch Step: 135 / 138 Loss: 12.0569429397583 Tokens per Sec: 17185.472840859078
Epoch ended with duration 0:00:33.949704
Train perplexity: 1.1946727538220874
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( TYPE_6 != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.398261
Validation perplexity: 1.283839284206903
Epoch 87 / 1000
Epoch Step: 5 / 138 Loss: 11.374460220336914 Tokens per Sec: 19620.109043878256
Epoch Step: 10 / 138 Loss: 12.7783784866333 Tokens per Sec: 18809.824951904047
Epoch Step: 15 / 138 Loss: 10.181318283081055 Tokens per Sec: 18495.09052178067
Epoch Step: 20 / 138 Loss: 12.171076774597168 Tokens per Sec: 20391.958852446594
Epoch Step: 25 / 138 Loss: 12.200833320617676 Tokens per Sec: 19821.60203657898
Epoch Step: 30 / 138 Loss: 7.77224063873291 Tokens per Sec: 19151.696381903617
Epoch Step: 35 / 138 Loss: 10.06304931640625 Tokens per Sec: 18279.904300661354
Epoch Step: 40 / 138 Loss: 14.72826862335205 Tokens per Sec: 20428.001274698887
Epoch Step: 45 / 138 Loss: 13.808034896850586 Tokens per Sec: 18335.770595488815
Epoch Step: 50 / 138 Loss: 14.901379585266113 Tokens per Sec: 19048.452070317413
Epoch Step: 55 / 138 Loss: 9.885257720947266 Tokens per Sec: 20088.378297379422
Epoch Step: 60 / 138 Loss: 16.251129150390625 Tokens per Sec: 18261.12359504907
Epoch Step: 65 / 138 Loss: 14.420578002929688 Tokens per Sec: 18257.70899770414
Epoch Step: 70 / 138 Loss: 17.942949295043945 Tokens per Sec: 17606.054358740606
Epoch Step: 75 / 138 Loss: 10.008347511291504 Tokens per Sec: 17949.392922993116
Epoch Step: 80 / 138 Loss: 8.308603286743164 Tokens per Sec: 18745.983715382852
Epoch Step: 85 / 138 Loss: 15.992081642150879 Tokens per Sec: 19182.27961674177
Epoch Step: 90 / 138 Loss: 8.356005668640137 Tokens per Sec: 17194.587865725767
Epoch Step: 95 / 138 Loss: 13.663536071777344 Tokens per Sec: 20632.302409934175
Epoch Step: 100 / 138 Loss: 17.0339412689209 Tokens per Sec: 19125.029875521333
Epoch Step: 105 / 138 Loss: 13.869671821594238 Tokens per Sec: 18906.15339292841
Epoch Step: 110 / 138 Loss: 14.984296798706055 Tokens per Sec: 17909.632670400275
Epoch Step: 115 / 138 Loss: 16.96750831604004 Tokens per Sec: 18802.574604448793
Epoch Step: 120 / 138 Loss: 11.202467918395996 Tokens per Sec: 17314.313933633162
Epoch Step: 125 / 138 Loss: 12.12216854095459 Tokens per Sec: 18920.352640288853
Epoch Step: 130 / 138 Loss: 14.978663444519043 Tokens per Sec: 17594.36201920752
Epoch Step: 135 / 138 Loss: 11.338525772094727 Tokens per Sec: 15829.471975860419
Epoch ended with duration 0:00:34.057728
Train perplexity: 1.193645308546354
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( METHOD_5 ( null ) { try { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.390601
Validation perplexity: 1.2801693265607843
Epoch 88 / 1000
Epoch Step: 5 / 138 Loss: 14.711250305175781 Tokens per Sec: 18290.844392908068
Epoch Step: 10 / 138 Loss: 20.546630859375 Tokens per Sec: 19880.413152871868
Epoch Step: 15 / 138 Loss: 9.181591987609863 Tokens per Sec: 18852.00168008764
Epoch Step: 20 / 138 Loss: 8.429065704345703 Tokens per Sec: 16534.769224686625
Epoch Step: 25 / 138 Loss: 7.58727502822876 Tokens per Sec: 20339.56756456608
Epoch Step: 30 / 138 Loss: 13.192363739013672 Tokens per Sec: 17928.25481411359
Epoch Step: 35 / 138 Loss: 14.183525085449219 Tokens per Sec: 19736.43015509405
Epoch Step: 40 / 138 Loss: 11.928069114685059 Tokens per Sec: 19916.97295627835
Epoch Step: 45 / 138 Loss: 16.951148986816406 Tokens per Sec: 18410.373679894026
Epoch Step: 50 / 138 Loss: 10.269043922424316 Tokens per Sec: 19285.45622610985
Epoch Step: 55 / 138 Loss: 14.327126502990723 Tokens per Sec: 19709.390043831467
Epoch Step: 60 / 138 Loss: 12.193705558776855 Tokens per Sec: 21208.121586549678
Epoch Step: 65 / 138 Loss: 12.2546968460083 Tokens per Sec: 17952.7083703577
Epoch Step: 70 / 138 Loss: 17.820621490478516 Tokens per Sec: 20495.82131790936
Epoch Step: 75 / 138 Loss: 16.330387115478516 Tokens per Sec: 19027.27290401774
Epoch Step: 80 / 138 Loss: 9.573709487915039 Tokens per Sec: 18887.574849666384
Epoch Step: 85 / 138 Loss: 8.25348949432373 Tokens per Sec: 18970.988328244697
Epoch Step: 90 / 138 Loss: 13.636847496032715 Tokens per Sec: 20207.3394385678
Epoch Step: 95 / 138 Loss: 16.615751266479492 Tokens per Sec: 18552.02681231626
Epoch Step: 100 / 138 Loss: 12.613892555236816 Tokens per Sec: 19829.166054300047
Epoch Step: 105 / 138 Loss: 12.412463188171387 Tokens per Sec: 18706.581687743314
Epoch Step: 110 / 138 Loss: 15.136698722839355 Tokens per Sec: 17527.12242243513
Epoch Step: 115 / 138 Loss: 12.861639976501465 Tokens per Sec: 18586.52767752773
Epoch Step: 120 / 138 Loss: 10.572612762451172 Tokens per Sec: 18092.748167345704
Epoch Step: 125 / 138 Loss: 12.866716384887695 Tokens per Sec: 16011.296826886435
Epoch Step: 130 / 138 Loss: 12.395069122314453 Tokens per Sec: 18409.036526461903
Epoch Step: 135 / 138 Loss: 12.241121292114258 Tokens per Sec: 16659.85221117113
Epoch ended with duration 0:00:33.941852
Train perplexity: 1.1914344832621389
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.407024
Validation perplexity: 1.2748498270909567
Model saved best_on_validation!
Epoch 89 / 1000
Epoch Step: 5 / 138 Loss: 8.441168785095215 Tokens per Sec: 19589.47957629171
Epoch Step: 10 / 138 Loss: 9.061239242553711 Tokens per Sec: 17732.21741354725
Epoch Step: 15 / 138 Loss: 11.894803047180176 Tokens per Sec: 19435.580993612464
Epoch Step: 20 / 138 Loss: 9.372184753417969 Tokens per Sec: 18542.603529227563
Epoch Step: 25 / 138 Loss: 10.268599510192871 Tokens per Sec: 19178.298970184085
Epoch Step: 30 / 138 Loss: 13.182965278625488 Tokens per Sec: 19284.728777268207
Epoch Step: 35 / 138 Loss: 12.338561058044434 Tokens per Sec: 19900.204957646856
Epoch Step: 40 / 138 Loss: 9.379744529724121 Tokens per Sec: 20680.716309225532
Epoch Step: 45 / 138 Loss: 13.031081199645996 Tokens per Sec: 18859.937296782766
Epoch Step: 50 / 138 Loss: 13.743694305419922 Tokens per Sec: 20300.348757922748
Epoch Step: 55 / 138 Loss: 7.705323219299316 Tokens per Sec: 19562.367654696765
Epoch Step: 60 / 138 Loss: 16.8638858795166 Tokens per Sec: 18818.825533323055
Epoch Step: 65 / 138 Loss: 14.062678337097168 Tokens per Sec: 17997.09275441228
Epoch Step: 70 / 138 Loss: 13.631268501281738 Tokens per Sec: 18795.786493667263
Epoch Step: 75 / 138 Loss: 11.313961029052734 Tokens per Sec: 18130.344716886968
Epoch Step: 80 / 138 Loss: 14.68915843963623 Tokens per Sec: 18275.232755534304
Epoch Step: 85 / 138 Loss: 15.434879302978516 Tokens per Sec: 17954.81011073242
Epoch Step: 90 / 138 Loss: 8.254364013671875 Tokens per Sec: 19115.76384949133
Epoch Step: 95 / 138 Loss: 13.379293441772461 Tokens per Sec: 18795.834549743595
Epoch Step: 100 / 138 Loss: 11.523970603942871 Tokens per Sec: 19372.65418547247
Epoch Step: 105 / 138 Loss: 13.459226608276367 Tokens per Sec: 18789.088611880656
Epoch Step: 110 / 138 Loss: 12.95980453491211 Tokens per Sec: 18234.09634820333
Epoch Step: 115 / 138 Loss: 11.921731948852539 Tokens per Sec: 18108.844295604424
Epoch Step: 120 / 138 Loss: 12.88676929473877 Tokens per Sec: 17956.306631421674
Epoch Step: 125 / 138 Loss: 11.104793548583984 Tokens per Sec: 19140.888033426236
Epoch Step: 130 / 138 Loss: 12.17489242553711 Tokens per Sec: 15835.782310069966
Epoch Step: 135 / 138 Loss: 18.085311889648438 Tokens per Sec: 17883.362741742643
Epoch ended with duration 0:00:33.955364
Train perplexity: 1.1913548836310817
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( METHOD_5 ( null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.388567
Validation perplexity: 1.2770946784079724
Epoch 90 / 1000
Epoch Step: 5 / 138 Loss: 9.365419387817383 Tokens per Sec: 18815.03588441287
Epoch Step: 10 / 138 Loss: 12.326925277709961 Tokens per Sec: 19668.670132085008
Epoch Step: 15 / 138 Loss: 11.0957612991333 Tokens per Sec: 19330.457294675576
Epoch Step: 20 / 138 Loss: 15.301423072814941 Tokens per Sec: 18666.77882240748
Epoch Step: 25 / 138 Loss: 11.86763858795166 Tokens per Sec: 18249.30594545489
Epoch Step: 30 / 138 Loss: 11.683178901672363 Tokens per Sec: 19186.221113281492
Epoch Step: 35 / 138 Loss: 8.572287559509277 Tokens per Sec: 20319.563942450994
Epoch Step: 40 / 138 Loss: 11.145691871643066 Tokens per Sec: 19241.517840989563
Epoch Step: 45 / 138 Loss: 13.372434616088867 Tokens per Sec: 18396.506099110054
Epoch Step: 50 / 138 Loss: 11.961807250976562 Tokens per Sec: 18598.939283150605
Epoch Step: 55 / 138 Loss: 7.759387969970703 Tokens per Sec: 20074.503905321802
Epoch Step: 60 / 138 Loss: 9.946979522705078 Tokens per Sec: 20019.71555473236
Epoch Step: 65 / 138 Loss: 14.798966407775879 Tokens per Sec: 18797.87223318093
Epoch Step: 70 / 138 Loss: 14.14448356628418 Tokens per Sec: 18934.514711040054
Epoch Step: 75 / 138 Loss: 13.11074161529541 Tokens per Sec: 19710.448905787423
Epoch Step: 80 / 138 Loss: 12.552242279052734 Tokens per Sec: 19309.560615488088
Epoch Step: 85 / 138 Loss: 14.973346710205078 Tokens per Sec: 18246.76847305842
Epoch Step: 90 / 138 Loss: 8.141234397888184 Tokens per Sec: 19995.87229249125
Epoch Step: 95 / 138 Loss: 8.711766242980957 Tokens per Sec: 18656.11476677692
Epoch Step: 100 / 138 Loss: 10.725992202758789 Tokens per Sec: 18947.983949419387
Epoch Step: 105 / 138 Loss: 13.89501667022705 Tokens per Sec: 17720.375412898728
Epoch Step: 110 / 138 Loss: 13.278827667236328 Tokens per Sec: 18249.60291345807
Epoch Step: 115 / 138 Loss: 13.342238426208496 Tokens per Sec: 18491.223849611346
Epoch Step: 120 / 138 Loss: 13.13691520690918 Tokens per Sec: 16642.8316751707
Epoch Step: 125 / 138 Loss: 17.023807525634766 Tokens per Sec: 16513.175560064614
Epoch Step: 130 / 138 Loss: 11.91773796081543 Tokens per Sec: 17987.18476799427
Epoch Step: 135 / 138 Loss: 10.643111228942871 Tokens per Sec: 18188.931946082586
Epoch ended with duration 0:00:34.029794
Train perplexity: 1.1867855978592758
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.400330
Validation perplexity: 1.280260976249755
Model saved checkpoint!
Epoch 91 / 1000
Epoch Step: 5 / 138 Loss: 13.971379280090332 Tokens per Sec: 17901.460441043328
Epoch Step: 10 / 138 Loss: 9.476263046264648 Tokens per Sec: 19765.78054074746
Epoch Step: 15 / 138 Loss: 11.541446685791016 Tokens per Sec: 19591.934262750066
Epoch Step: 20 / 138 Loss: 10.594897270202637 Tokens per Sec: 19243.471224945635
Epoch Step: 25 / 138 Loss: 10.789405822753906 Tokens per Sec: 19851.4560152694
Epoch Step: 30 / 138 Loss: 16.510417938232422 Tokens per Sec: 19101.268365006657
Epoch Step: 35 / 138 Loss: 13.462350845336914 Tokens per Sec: 19290.31635101806
Epoch Step: 40 / 138 Loss: 10.353079795837402 Tokens per Sec: 19696.60606083024
Epoch Step: 45 / 138 Loss: 17.46617317199707 Tokens per Sec: 18138.342141825065
Epoch Step: 50 / 138 Loss: 17.145662307739258 Tokens per Sec: 18020.341397641394
Epoch Step: 55 / 138 Loss: 11.26700210571289 Tokens per Sec: 19027.804598722447
Epoch Step: 60 / 138 Loss: 10.997554779052734 Tokens per Sec: 18846.594007225314
Epoch Step: 65 / 138 Loss: 16.833831787109375 Tokens per Sec: 18509.00576591886
Epoch Step: 70 / 138 Loss: 15.137797355651855 Tokens per Sec: 20185.544524757268
Epoch Step: 75 / 138 Loss: 7.204221725463867 Tokens per Sec: 20263.09378865167
Epoch Step: 80 / 138 Loss: 10.450538635253906 Tokens per Sec: 17433.873729165764
Epoch Step: 85 / 138 Loss: 13.2946195602417 Tokens per Sec: 17556.87664515038
Epoch Step: 90 / 138 Loss: 10.461445808410645 Tokens per Sec: 19925.13004903201
Epoch Step: 95 / 138 Loss: 11.196700096130371 Tokens per Sec: 18033.562461865666
Epoch Step: 100 / 138 Loss: 12.54924488067627 Tokens per Sec: 18496.623204138064
Epoch Step: 105 / 138 Loss: 10.774004936218262 Tokens per Sec: 17671.56295454518
Epoch Step: 110 / 138 Loss: 11.98779296875 Tokens per Sec: 18798.302138465722
Epoch Step: 115 / 138 Loss: 12.160967826843262 Tokens per Sec: 18262.75198577686
Epoch Step: 120 / 138 Loss: 13.276212692260742 Tokens per Sec: 18858.28338969892
Epoch Step: 125 / 138 Loss: 11.712715148925781 Tokens per Sec: 18279.100197038
Epoch Step: 130 / 138 Loss: 8.75081729888916 Tokens per Sec: 18032.938586191092
Epoch Step: 135 / 138 Loss: 10.55601692199707 Tokens per Sec: 16825.8448408904
Epoch ended with duration 0:00:34.147800
Train perplexity: 1.1849499713100378
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.409798
Validation perplexity: 1.2799172012951967
Epoch 92 / 1000
Epoch Step: 5 / 138 Loss: 7.575233459472656 Tokens per Sec: 19817.004378260943
Epoch Step: 10 / 138 Loss: 9.601961135864258 Tokens per Sec: 18897.122671777117
Epoch Step: 15 / 138 Loss: 11.190996170043945 Tokens per Sec: 18150.742607828295
Epoch Step: 20 / 138 Loss: 15.579087257385254 Tokens per Sec: 19062.849332607235
Epoch Step: 25 / 138 Loss: 13.221454620361328 Tokens per Sec: 19321.15317209633
Epoch Step: 30 / 138 Loss: 13.651455879211426 Tokens per Sec: 18178.57902702489
Epoch Step: 35 / 138 Loss: 7.841163158416748 Tokens per Sec: 19977.947964525327
Epoch Step: 40 / 138 Loss: 10.90272045135498 Tokens per Sec: 19405.306193860266
Epoch Step: 45 / 138 Loss: 8.367218017578125 Tokens per Sec: 18786.969398506004
Epoch Step: 50 / 138 Loss: 13.653335571289062 Tokens per Sec: 20771.274057290822
Epoch Step: 55 / 138 Loss: 10.707976341247559 Tokens per Sec: 16636.480767148667
Epoch Step: 60 / 138 Loss: 12.147314071655273 Tokens per Sec: 19451.51175805833
Epoch Step: 65 / 138 Loss: 13.130108833312988 Tokens per Sec: 19072.958921760932
Epoch Step: 70 / 138 Loss: 8.328391075134277 Tokens per Sec: 19136.981182796273
Epoch Step: 75 / 138 Loss: 12.143597602844238 Tokens per Sec: 18291.271384266427
Epoch Step: 80 / 138 Loss: 7.762764930725098 Tokens per Sec: 19351.74868496416
Epoch Step: 85 / 138 Loss: 13.040818214416504 Tokens per Sec: 17880.99306187805
Epoch Step: 90 / 138 Loss: 16.138662338256836 Tokens per Sec: 19304.629906333084
Epoch Step: 95 / 138 Loss: 12.300971984863281 Tokens per Sec: 20247.080610531637
Epoch Step: 100 / 138 Loss: 8.06788158416748 Tokens per Sec: 20205.36868251953
Epoch Step: 105 / 138 Loss: 12.984807014465332 Tokens per Sec: 16393.05308742622
Epoch Step: 110 / 138 Loss: 10.818868637084961 Tokens per Sec: 16891.891402404337
Epoch Step: 115 / 138 Loss: 15.14098834991455 Tokens per Sec: 18707.942614101798
Epoch Step: 120 / 138 Loss: 11.893717765808105 Tokens per Sec: 17717.857221688875
Epoch Step: 125 / 138 Loss: 12.34511661529541 Tokens per Sec: 18916.791508742077
Epoch Step: 130 / 138 Loss: 14.705910682678223 Tokens per Sec: 18121.188388252704
Epoch Step: 135 / 138 Loss: 10.283929824829102 Tokens per Sec: 17552.377561228965
Epoch ended with duration 0:00:34.074356
Train perplexity: 1.1839030285650418
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.400784
Validation perplexity: 1.2775054512640567
Epoch 93 / 1000
Epoch Step: 5 / 138 Loss: 14.543299674987793 Tokens per Sec: 17851.70445208813
Epoch Step: 10 / 138 Loss: 9.056425094604492 Tokens per Sec: 18356.520126452862
Epoch Step: 15 / 138 Loss: 9.936806678771973 Tokens per Sec: 19450.813701214298
Epoch Step: 20 / 138 Loss: 13.416983604431152 Tokens per Sec: 18524.37192466869
Epoch Step: 25 / 138 Loss: 16.9196834564209 Tokens per Sec: 18687.53329875128
Epoch Step: 30 / 138 Loss: 10.845312118530273 Tokens per Sec: 19863.314272685042
Epoch Step: 35 / 138 Loss: 13.020901679992676 Tokens per Sec: 18614.77020181306
Epoch Step: 40 / 138 Loss: 8.36861801147461 Tokens per Sec: 19388.183630773325
Epoch Step: 45 / 138 Loss: 10.283161163330078 Tokens per Sec: 19837.174992093653
Epoch Step: 50 / 138 Loss: 13.427237510681152 Tokens per Sec: 19986.580697351077
Epoch Step: 55 / 138 Loss: 10.670886993408203 Tokens per Sec: 20274.758656227114
Epoch Step: 60 / 138 Loss: 14.194165229797363 Tokens per Sec: 19068.83238516432
Epoch Step: 65 / 138 Loss: 10.495352745056152 Tokens per Sec: 18539.358858792904
Epoch Step: 70 / 138 Loss: 10.468635559082031 Tokens per Sec: 19559.971584844694
Epoch Step: 75 / 138 Loss: 13.871260643005371 Tokens per Sec: 18693.36269141199
Epoch Step: 80 / 138 Loss: 11.188776016235352 Tokens per Sec: 19112.921571411334
Epoch Step: 85 / 138 Loss: 12.994917869567871 Tokens per Sec: 18771.449682811108
Epoch Step: 90 / 138 Loss: 15.158717155456543 Tokens per Sec: 18784.01405936397
Epoch Step: 95 / 138 Loss: 8.001068115234375 Tokens per Sec: 17848.600122889493
Epoch Step: 100 / 138 Loss: 12.969517707824707 Tokens per Sec: 19439.893569751726
Epoch Step: 105 / 138 Loss: 8.19252872467041 Tokens per Sec: 17876.997122667584
Epoch Step: 110 / 138 Loss: 14.5396146774292 Tokens per Sec: 18821.710607326546
Epoch Step: 115 / 138 Loss: 13.383201599121094 Tokens per Sec: 18774.608497481153
Epoch Step: 120 / 138 Loss: 10.05896282196045 Tokens per Sec: 18571.302118222924
Epoch Step: 125 / 138 Loss: 13.579237937927246 Tokens per Sec: 17724.764023010168
Epoch Step: 130 / 138 Loss: 12.731595993041992 Tokens per Sec: 17024.403379067116
Epoch Step: 135 / 138 Loss: 10.714576721191406 Tokens per Sec: 18293.237349049607
Epoch ended with duration 0:00:33.974146
Train perplexity: 1.1812992620172436
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.390932
Validation perplexity: 1.2727356054797516
Model saved best_on_validation!
Epoch 94 / 1000
Epoch Step: 5 / 138 Loss: 17.004329681396484 Tokens per Sec: 19038.584289915354
Epoch Step: 10 / 138 Loss: 14.664796829223633 Tokens per Sec: 19205.219309801563
Epoch Step: 15 / 138 Loss: 10.18177604675293 Tokens per Sec: 18314.176786531516
Epoch Step: 20 / 138 Loss: 5.938978672027588 Tokens per Sec: 19509.7831761025
Epoch Step: 25 / 138 Loss: 10.652864456176758 Tokens per Sec: 19763.75501697541
Epoch Step: 30 / 138 Loss: 8.653648376464844 Tokens per Sec: 19704.63648675089
Epoch Step: 35 / 138 Loss: 12.628721237182617 Tokens per Sec: 18611.90270309272
Epoch Step: 40 / 138 Loss: 13.241484642028809 Tokens per Sec: 18530.396014016223
Epoch Step: 45 / 138 Loss: 10.19467544555664 Tokens per Sec: 19193.773537344117
Epoch Step: 50 / 138 Loss: 11.35637092590332 Tokens per Sec: 19309.178771486448
Epoch Step: 55 / 138 Loss: 15.333178520202637 Tokens per Sec: 19472.544685543122
Epoch Step: 60 / 138 Loss: 10.550135612487793 Tokens per Sec: 19122.79757565689
Epoch Step: 65 / 138 Loss: 14.81464958190918 Tokens per Sec: 18895.99118085763
Epoch Step: 70 / 138 Loss: 15.678255081176758 Tokens per Sec: 18383.322444042995
Epoch Step: 75 / 138 Loss: 14.999974250793457 Tokens per Sec: 18821.710269373292
Epoch Step: 80 / 138 Loss: 7.871707916259766 Tokens per Sec: 19411.786450065716
Epoch Step: 85 / 138 Loss: 15.979349136352539 Tokens per Sec: 17473.95763836714
Epoch Step: 90 / 138 Loss: 12.535774230957031 Tokens per Sec: 19086.425207292097
Epoch Step: 95 / 138 Loss: 13.573761940002441 Tokens per Sec: 19233.500083246498
Epoch Step: 100 / 138 Loss: 17.554197311401367 Tokens per Sec: 18843.944899624912
Epoch Step: 105 / 138 Loss: 8.674535751342773 Tokens per Sec: 17641.13217702438
Epoch Step: 110 / 138 Loss: 12.868230819702148 Tokens per Sec: 17510.611368943944
Epoch Step: 115 / 138 Loss: 10.549698829650879 Tokens per Sec: 18707.772355433954
Epoch Step: 120 / 138 Loss: 11.802294731140137 Tokens per Sec: 15979.47550228953
Epoch Step: 125 / 138 Loss: 9.813678741455078 Tokens per Sec: 18855.15890084653
Epoch Step: 130 / 138 Loss: 10.318839073181152 Tokens per Sec: 18259.5128089669
Epoch Step: 135 / 138 Loss: 10.518774032592773 Tokens per Sec: 18527.001740668074
Epoch ended with duration 0:00:34.095549
Train perplexity: 1.1782973587564807
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( METHOD_5 ( null ) { try { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.397540
Validation perplexity: 1.2728690701771943
Epoch 95 / 1000
Epoch Step: 5 / 138 Loss: 10.961206436157227 Tokens per Sec: 20145.032382692316
Epoch Step: 10 / 138 Loss: 12.405131340026855 Tokens per Sec: 19279.121479154303
Epoch Step: 15 / 138 Loss: 12.250372886657715 Tokens per Sec: 19134.009053685273
Epoch Step: 20 / 138 Loss: 9.235804557800293 Tokens per Sec: 19919.89767027497
Epoch Step: 25 / 138 Loss: 11.24219799041748 Tokens per Sec: 18963.506684905227
Epoch Step: 30 / 138 Loss: 11.7435941696167 Tokens per Sec: 19558.4545065441
Epoch Step: 35 / 138 Loss: 9.803318977355957 Tokens per Sec: 18516.47374681674
Epoch Step: 40 / 138 Loss: 9.085413932800293 Tokens per Sec: 20107.629155319344
Epoch Step: 45 / 138 Loss: 15.35241985321045 Tokens per Sec: 18997.354002059685
Epoch Step: 50 / 138 Loss: 8.198999404907227 Tokens per Sec: 19038.791241293657
Epoch Step: 55 / 138 Loss: 12.823084831237793 Tokens per Sec: 18301.61606572907
Epoch Step: 60 / 138 Loss: 11.16307544708252 Tokens per Sec: 19007.796486890322
Epoch Step: 65 / 138 Loss: 12.179963111877441 Tokens per Sec: 18302.276318524036
Epoch Step: 70 / 138 Loss: 14.523042678833008 Tokens per Sec: 17747.42563509844
Epoch Step: 75 / 138 Loss: 14.983508110046387 Tokens per Sec: 19157.592195666624
Epoch Step: 80 / 138 Loss: 10.151488304138184 Tokens per Sec: 19238.0731931957
Epoch Step: 85 / 138 Loss: 12.118453979492188 Tokens per Sec: 19122.093814261978
Epoch Step: 90 / 138 Loss: 15.518448829650879 Tokens per Sec: 20477.69755574096
Epoch Step: 95 / 138 Loss: 13.638360023498535 Tokens per Sec: 18129.279723532254
Epoch Step: 100 / 138 Loss: 6.845958232879639 Tokens per Sec: 17506.133002382878
Epoch Step: 105 / 138 Loss: 15.388350486755371 Tokens per Sec: 18469.515056061282
Epoch Step: 110 / 138 Loss: 10.207621574401855 Tokens per Sec: 17647.42089967766
Epoch Step: 115 / 138 Loss: 12.34374713897705 Tokens per Sec: 18209.430664843665
Epoch Step: 120 / 138 Loss: 11.785477638244629 Tokens per Sec: 18973.2660245255
Epoch Step: 125 / 138 Loss: 10.164921760559082 Tokens per Sec: 18728.250446998507
Epoch Step: 130 / 138 Loss: 13.345721244812012 Tokens per Sec: 15844.284280525826
Epoch Step: 135 / 138 Loss: 14.19438648223877 Tokens per Sec: 18732.9123772623
Epoch ended with duration 0:00:34.017748
Train perplexity: 1.1794752998923084
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { try { try { METHOD_6 ( METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ) ; if ( ( err != null ) && ( ( VAR_1 ) ) ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.403133
Validation perplexity: 1.2773306218087812
Model saved checkpoint!
Epoch 96 / 1000
Epoch Step: 5 / 138 Loss: 9.186140060424805 Tokens per Sec: 19820.59172905189
Epoch Step: 10 / 138 Loss: 10.829543113708496 Tokens per Sec: 20128.35907483201
Epoch Step: 15 / 138 Loss: 11.976699829101562 Tokens per Sec: 18843.864627886032
Epoch Step: 20 / 138 Loss: 12.12657642364502 Tokens per Sec: 19698.67245407961
Epoch Step: 25 / 138 Loss: 12.858296394348145 Tokens per Sec: 18590.853694909223
Epoch Step: 30 / 138 Loss: 16.949325561523438 Tokens per Sec: 17471.48887800221
Epoch Step: 35 / 138 Loss: 15.467658042907715 Tokens per Sec: 20035.673041068258
Epoch Step: 40 / 138 Loss: 14.470327377319336 Tokens per Sec: 19439.709881866846
Epoch Step: 45 / 138 Loss: 12.263395309448242 Tokens per Sec: 19104.627193750253
Epoch Step: 50 / 138 Loss: 18.20990562438965 Tokens per Sec: 18649.042567582044
Epoch Step: 55 / 138 Loss: 10.650652885437012 Tokens per Sec: 19655.745406663867
Epoch Step: 60 / 138 Loss: 17.12611961364746 Tokens per Sec: 19187.558308212494
Epoch Step: 65 / 138 Loss: 17.056947708129883 Tokens per Sec: 19664.465339218117
Epoch Step: 70 / 138 Loss: 12.022647857666016 Tokens per Sec: 19296.709173023355
Epoch Step: 75 / 138 Loss: 9.241521835327148 Tokens per Sec: 19692.878102793155
Epoch Step: 80 / 138 Loss: 7.369149684906006 Tokens per Sec: 20746.565906950127
Epoch Step: 85 / 138 Loss: 7.246685028076172 Tokens per Sec: 18129.041504333374
Epoch Step: 90 / 138 Loss: 8.630125045776367 Tokens per Sec: 19566.05490948861
Epoch Step: 95 / 138 Loss: 12.445006370544434 Tokens per Sec: 18950.799573745568
Epoch Step: 100 / 138 Loss: 14.275399208068848 Tokens per Sec: 18160.70379217581
Epoch Step: 105 / 138 Loss: 10.86639404296875 Tokens per Sec: 17769.408613340984
Epoch Step: 110 / 138 Loss: 13.415063858032227 Tokens per Sec: 15615.397727644444
Epoch Step: 115 / 138 Loss: 10.371912002563477 Tokens per Sec: 18226.50616108701
Epoch Step: 120 / 138 Loss: 10.02065372467041 Tokens per Sec: 17718.34567148665
Epoch Step: 125 / 138 Loss: 9.08669376373291 Tokens per Sec: 17676.426275305137
Epoch Step: 130 / 138 Loss: 14.66353702545166 Tokens per Sec: 18625.726842450964
Epoch Step: 135 / 138 Loss: 11.93895149230957 Tokens per Sec: 18957.803195778753
Epoch ended with duration 0:00:33.844869
Train perplexity: 1.176333575236734
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.392237
Validation perplexity: 1.269644239866552
Model saved best_on_validation!
Epoch 97 / 1000
Epoch Step: 5 / 138 Loss: 12.25702953338623 Tokens per Sec: 18793.93156640051
Epoch Step: 10 / 138 Loss: 10.040789604187012 Tokens per Sec: 20266.781872301406
Epoch Step: 15 / 138 Loss: 12.488163948059082 Tokens per Sec: 17471.548620042617
Epoch Step: 20 / 138 Loss: 10.746015548706055 Tokens per Sec: 18348.779336578773
Epoch Step: 25 / 138 Loss: 10.032621383666992 Tokens per Sec: 20731.20296534123
Epoch Step: 30 / 138 Loss: 7.579050540924072 Tokens per Sec: 19022.3704511957
Epoch Step: 35 / 138 Loss: 7.12284517288208 Tokens per Sec: 20585.29683798365
Epoch Step: 40 / 138 Loss: 15.860148429870605 Tokens per Sec: 18883.177984082733
Epoch Step: 45 / 138 Loss: 9.16727066040039 Tokens per Sec: 19709.354117090264
Epoch Step: 50 / 138 Loss: 17.0367431640625 Tokens per Sec: 17391.517349832815
Epoch Step: 55 / 138 Loss: 8.792420387268066 Tokens per Sec: 19042.160556035313
Epoch Step: 60 / 138 Loss: 9.675067901611328 Tokens per Sec: 19208.539568712084
Epoch Step: 65 / 138 Loss: 9.013352394104004 Tokens per Sec: 18168.58404699365
Epoch Step: 70 / 138 Loss: 12.421297073364258 Tokens per Sec: 18485.181540645353
Epoch Step: 75 / 138 Loss: 7.503844261169434 Tokens per Sec: 18614.928431287182
Epoch Step: 80 / 138 Loss: 9.506891250610352 Tokens per Sec: 19967.237940494415
Epoch Step: 85 / 138 Loss: 14.416132926940918 Tokens per Sec: 17825.60768518356
Epoch Step: 90 / 138 Loss: 16.270174026489258 Tokens per Sec: 18351.732641513037
Epoch Step: 95 / 138 Loss: 8.306706428527832 Tokens per Sec: 19512.999197085475
Epoch Step: 100 / 138 Loss: 15.569550514221191 Tokens per Sec: 18347.219410026883
Epoch Step: 105 / 138 Loss: 11.076927185058594 Tokens per Sec: 17985.81672411062
Epoch Step: 110 / 138 Loss: 10.756131172180176 Tokens per Sec: 19247.081316754568
Epoch Step: 115 / 138 Loss: 11.339609146118164 Tokens per Sec: 17615.92617658968
Epoch Step: 120 / 138 Loss: 9.224496841430664 Tokens per Sec: 17894.449607573497
Epoch Step: 125 / 138 Loss: 11.205025672912598 Tokens per Sec: 16529.852242837984
Epoch Step: 130 / 138 Loss: 11.423336029052734 Tokens per Sec: 17770.611376056087
Epoch Step: 135 / 138 Loss: 13.165270805358887 Tokens per Sec: 17525.02353056553
Epoch ended with duration 0:00:34.286600
Train perplexity: 1.1739174556660932
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( err != null ) { try { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.411369
Validation perplexity: 1.2750697946507443
Epoch 98 / 1000
Epoch Step: 5 / 138 Loss: 13.091438293457031 Tokens per Sec: 18009.118812459994
Epoch Step: 10 / 138 Loss: 13.60916805267334 Tokens per Sec: 19959.368722295843
Epoch Step: 15 / 138 Loss: 7.556260585784912 Tokens per Sec: 19744.14097852078
Epoch Step: 20 / 138 Loss: 8.252947807312012 Tokens per Sec: 18031.46694654572
Epoch Step: 25 / 138 Loss: 9.18080997467041 Tokens per Sec: 17972.94073954652
Epoch Step: 30 / 138 Loss: 14.415517807006836 Tokens per Sec: 18129.227609424
Epoch Step: 35 / 138 Loss: 11.555365562438965 Tokens per Sec: 18607.326306813342
Epoch Step: 40 / 138 Loss: 11.815802574157715 Tokens per Sec: 19826.48874549622
Epoch Step: 45 / 138 Loss: 9.595727920532227 Tokens per Sec: 19079.781099563537
Epoch Step: 50 / 138 Loss: 10.772730827331543 Tokens per Sec: 18774.654947425723
Epoch Step: 55 / 138 Loss: 12.385072708129883 Tokens per Sec: 18033.159357893284
Epoch Step: 60 / 138 Loss: 12.949161529541016 Tokens per Sec: 19206.616548265505
Epoch Step: 65 / 138 Loss: 10.293855667114258 Tokens per Sec: 19536.507715401563
Epoch Step: 70 / 138 Loss: 10.60586929321289 Tokens per Sec: 19656.748216226555
Epoch Step: 75 / 138 Loss: 16.365924835205078 Tokens per Sec: 18896.680349058708
Epoch Step: 80 / 138 Loss: 10.439990043640137 Tokens per Sec: 20111.762899129746
Epoch Step: 85 / 138 Loss: 7.65612268447876 Tokens per Sec: 20166.49356847572
Epoch Step: 90 / 138 Loss: 11.964896202087402 Tokens per Sec: 18809.91753471783
Epoch Step: 95 / 138 Loss: 13.876608848571777 Tokens per Sec: 18897.89096187327
Epoch Step: 100 / 138 Loss: 13.506065368652344 Tokens per Sec: 18699.89469660643
Epoch Step: 105 / 138 Loss: 9.857013702392578 Tokens per Sec: 17827.496453208194
Epoch Step: 110 / 138 Loss: 12.475164413452148 Tokens per Sec: 18344.203545264107
Epoch Step: 115 / 138 Loss: 10.299870491027832 Tokens per Sec: 18371.554058372232
Epoch Step: 120 / 138 Loss: 14.920987129211426 Tokens per Sec: 16824.349804354322
Epoch Step: 125 / 138 Loss: 10.402019500732422 Tokens per Sec: 17311.688898893393
Epoch Step: 130 / 138 Loss: 12.448586463928223 Tokens per Sec: 19069.098161297952
Epoch Step: 135 / 138 Loss: 11.313081741333008 Tokens per Sec: 18852.307291525984
Epoch ended with duration 0:00:34.143818
Train perplexity: 1.1722122908296864
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( METHOD_5 ( null ) { try { { METHOD_6 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.406019
Validation perplexity: 1.2762184906487168
Epoch 99 / 1000
Epoch Step: 5 / 138 Loss: 12.26669692993164 Tokens per Sec: 17749.613883706526
Epoch Step: 10 / 138 Loss: 6.622014999389648 Tokens per Sec: 20235.061077405422
Epoch Step: 15 / 138 Loss: 12.706290245056152 Tokens per Sec: 18320.898310685185
Epoch Step: 20 / 138 Loss: 9.488466262817383 Tokens per Sec: 18577.316188286008
Epoch Step: 25 / 138 Loss: 7.609792232513428 Tokens per Sec: 19779.39414783458
Epoch Step: 30 / 138 Loss: 12.793225288391113 Tokens per Sec: 18737.83644933635
Epoch Step: 35 / 138 Loss: 8.106332778930664 Tokens per Sec: 19380.854445364286
Epoch Step: 40 / 138 Loss: 8.297073364257812 Tokens per Sec: 20036.31236528751
Epoch Step: 45 / 138 Loss: 8.692956924438477 Tokens per Sec: 18879.4532214279
Epoch Step: 50 / 138 Loss: 11.560442924499512 Tokens per Sec: 18570.797951372777
Epoch Step: 55 / 138 Loss: 13.293220520019531 Tokens per Sec: 16886.816995750403
Epoch Step: 60 / 138 Loss: 13.296344757080078 Tokens per Sec: 18691.2223116133
Epoch Step: 65 / 138 Loss: 12.70794677734375 Tokens per Sec: 19838.277314820283
Epoch Step: 70 / 138 Loss: 11.106393814086914 Tokens per Sec: 20226.590616567726
Epoch Step: 75 / 138 Loss: 15.788275718688965 Tokens per Sec: 18454.824075515106
Epoch Step: 80 / 138 Loss: 13.67473316192627 Tokens per Sec: 17400.57513368675
Epoch Step: 85 / 138 Loss: 9.273749351501465 Tokens per Sec: 18731.201252456733
Epoch Step: 90 / 138 Loss: 9.653653144836426 Tokens per Sec: 20134.8476230806
Epoch Step: 95 / 138 Loss: 10.426483154296875 Tokens per Sec: 20167.766409003365
Epoch Step: 100 / 138 Loss: 9.303245544433594 Tokens per Sec: 19421.30094675553
Epoch Step: 105 / 138 Loss: 12.629399299621582 Tokens per Sec: 18047.17229025955
Epoch Step: 110 / 138 Loss: 12.78907299041748 Tokens per Sec: 18767.817283072145
Epoch Step: 115 / 138 Loss: 12.814266204833984 Tokens per Sec: 18655.154645976174
Epoch Step: 120 / 138 Loss: 7.7235589027404785 Tokens per Sec: 16229.233570883234
Epoch Step: 125 / 138 Loss: 10.154386520385742 Tokens per Sec: 18207.005956936267
Epoch Step: 130 / 138 Loss: 11.560094833374023 Tokens per Sec: 17807.41989054066
Epoch Step: 135 / 138 Loss: 11.137832641601562 Tokens per Sec: 18417.905202499445
Epoch ended with duration 0:00:34.077088
Train perplexity: 1.1711949650556768
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { try { try { METHOD_4 ( VAR_1 , VAR_1 , METHOD_3 ( ) ) ; try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.406605
Validation perplexity: 1.2744425780446538
Epoch 100 / 1000
Epoch Step: 5 / 138 Loss: 9.506536483764648 Tokens per Sec: 19556.18833568159
Epoch Step: 10 / 138 Loss: 6.38613748550415 Tokens per Sec: 20055.64106907113
Epoch Step: 15 / 138 Loss: 9.003508567810059 Tokens per Sec: 19053.3206205443
Epoch Step: 20 / 138 Loss: 14.079736709594727 Tokens per Sec: 18646.984454427125
Epoch Step: 25 / 138 Loss: 12.535933494567871 Tokens per Sec: 18884.186575480337
Epoch Step: 30 / 138 Loss: 15.396686553955078 Tokens per Sec: 17980.656221587906
Epoch Step: 35 / 138 Loss: 12.677739143371582 Tokens per Sec: 18827.94296250815
Epoch Step: 40 / 138 Loss: 8.510761260986328 Tokens per Sec: 20127.88837643823
Epoch Step: 45 / 138 Loss: 6.951911926269531 Tokens per Sec: 19164.985205376157
Epoch Step: 50 / 138 Loss: 11.961210250854492 Tokens per Sec: 18689.493580647762
Epoch Step: 55 / 138 Loss: 7.638826847076416 Tokens per Sec: 19138.487500596515
Epoch Step: 60 / 138 Loss: 11.906073570251465 Tokens per Sec: 20138.704879889196
Epoch Step: 65 / 138 Loss: 13.329846382141113 Tokens per Sec: 17974.202882872363
Epoch Step: 70 / 138 Loss: 13.008923530578613 Tokens per Sec: 18140.27999855748
Epoch Step: 75 / 138 Loss: 14.850317001342773 Tokens per Sec: 18005.205267822654
Epoch Step: 80 / 138 Loss: 9.753427505493164 Tokens per Sec: 19253.54272676719
Epoch Step: 85 / 138 Loss: 14.202835083007812 Tokens per Sec: 19515.023177668827
Epoch Step: 90 / 138 Loss: 13.078442573547363 Tokens per Sec: 19151.453352020384
Epoch Step: 95 / 138 Loss: 16.16926383972168 Tokens per Sec: 18995.58816139219
Epoch Step: 100 / 138 Loss: 14.24565315246582 Tokens per Sec: 18671.864640202126
Epoch Step: 105 / 138 Loss: 9.407049179077148 Tokens per Sec: 17931.030341829006
Epoch Step: 110 / 138 Loss: 13.172136306762695 Tokens per Sec: 17607.229945346353
Epoch Step: 115 / 138 Loss: 11.609471321105957 Tokens per Sec: 17072.615875752184
Epoch Step: 120 / 138 Loss: 11.51859188079834 Tokens per Sec: 16097.778052057507
Epoch Step: 125 / 138 Loss: 11.229307174682617 Tokens per Sec: 18533.189281357325
Epoch Step: 130 / 138 Loss: 11.838951110839844 Tokens per Sec: 18360.578609411754
Epoch Step: 135 / 138 Loss: 13.491301536560059 Tokens per Sec: 18488.138338155393
Epoch ended with duration 0:00:34.197060
Train perplexity: 1.1682770304553163
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( ( err != null ) && ( ( VAR_1 ) != null ) ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.402699
Validation perplexity: 1.2763540526558805
Model saved checkpoint!
Epoch 101 / 1000
Epoch Step: 5 / 138 Loss: 9.253541946411133 Tokens per Sec: 19003.745582615087
Epoch Step: 10 / 138 Loss: 8.44990348815918 Tokens per Sec: 18911.73008044895
Epoch Step: 15 / 138 Loss: 10.140633583068848 Tokens per Sec: 20593.178920143826
Epoch Step: 20 / 138 Loss: 6.882667541503906 Tokens per Sec: 18527.109970334364
Epoch Step: 25 / 138 Loss: 13.121684074401855 Tokens per Sec: 18073.766697530846
Epoch Step: 30 / 138 Loss: 12.5735445022583 Tokens per Sec: 19507.373061954742
Epoch Step: 35 / 138 Loss: 12.307379722595215 Tokens per Sec: 18859.29629284411
Epoch Step: 40 / 138 Loss: 13.92611312866211 Tokens per Sec: 18888.4211312702
Epoch Step: 45 / 138 Loss: 10.11160659790039 Tokens per Sec: 20436.99724445647
Epoch Step: 50 / 138 Loss: 7.974434852600098 Tokens per Sec: 19775.445781341696
Epoch Step: 55 / 138 Loss: 13.550015449523926 Tokens per Sec: 17866.1939277466
Epoch Step: 60 / 138 Loss: 12.469419479370117 Tokens per Sec: 19651.28243610221
Epoch Step: 65 / 138 Loss: 10.79965877532959 Tokens per Sec: 19194.358479982693
Epoch Step: 70 / 138 Loss: 13.922379493713379 Tokens per Sec: 17929.270836657714
Epoch Step: 75 / 138 Loss: 11.089518547058105 Tokens per Sec: 18960.750503245883
Epoch Step: 80 / 138 Loss: 10.588628768920898 Tokens per Sec: 19430.56521329699
Epoch Step: 85 / 138 Loss: 12.595174789428711 Tokens per Sec: 17822.275106276287
Epoch Step: 90 / 138 Loss: 12.197776794433594 Tokens per Sec: 19509.231155701775
Epoch Step: 95 / 138 Loss: 17.53655242919922 Tokens per Sec: 18848.43976269636
Epoch Step: 100 / 138 Loss: 10.777118682861328 Tokens per Sec: 17903.21141129089
Epoch Step: 105 / 138 Loss: 10.4119234085083 Tokens per Sec: 18578.230515506148
Epoch Step: 110 / 138 Loss: 9.203978538513184 Tokens per Sec: 18301.97142495782
Epoch Step: 115 / 138 Loss: 7.821823596954346 Tokens per Sec: 17983.783688515716
Epoch Step: 120 / 138 Loss: 10.687978744506836 Tokens per Sec: 18317.188295322743
Epoch Step: 125 / 138 Loss: 11.297274589538574 Tokens per Sec: 16772.196961143225
Epoch Step: 130 / 138 Loss: 9.333663940429688 Tokens per Sec: 18782.223169073397
Epoch Step: 135 / 138 Loss: 10.76705265045166 Tokens per Sec: 16381.724812298866
Epoch ended with duration 0:00:34.149324
Train perplexity: 1.1674368051104438
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.407360
Validation perplexity: 1.2735895315037216
Epoch 102 / 1000
Epoch Step: 5 / 138 Loss: 10.840304374694824 Tokens per Sec: 19752.461243974347
Epoch Step: 10 / 138 Loss: 8.48940658569336 Tokens per Sec: 17509.71307478532
Epoch Step: 15 / 138 Loss: 13.793569564819336 Tokens per Sec: 18409.247500429137
Epoch Step: 20 / 138 Loss: 8.909855842590332 Tokens per Sec: 18972.306131822632
Epoch Step: 25 / 138 Loss: 14.986968040466309 Tokens per Sec: 17443.035992250534
Epoch Step: 30 / 138 Loss: 10.238931655883789 Tokens per Sec: 19701.282105379487
Epoch Step: 35 / 138 Loss: 11.294629096984863 Tokens per Sec: 18433.560982252628
Epoch Step: 40 / 138 Loss: 7.587651252746582 Tokens per Sec: 19058.649010182173
Epoch Step: 45 / 138 Loss: 10.501001358032227 Tokens per Sec: 19468.102624943742
Epoch Step: 50 / 138 Loss: 14.980866432189941 Tokens per Sec: 18197.341522240822
Epoch Step: 55 / 138 Loss: 11.04394245147705 Tokens per Sec: 18810.52152015302
Epoch Step: 60 / 138 Loss: 7.161025524139404 Tokens per Sec: 19080.563861279366
Epoch Step: 65 / 138 Loss: 7.640105247497559 Tokens per Sec: 20013.052457666123
Epoch Step: 70 / 138 Loss: 15.370582580566406 Tokens per Sec: 18359.0137046347
Epoch Step: 75 / 138 Loss: 17.23080825805664 Tokens per Sec: 18349.37870451942
Epoch Step: 80 / 138 Loss: 11.395113945007324 Tokens per Sec: 19778.40593277747
Epoch Step: 85 / 138 Loss: 8.862327575683594 Tokens per Sec: 20337.20577138741
Epoch Step: 90 / 138 Loss: 10.690793991088867 Tokens per Sec: 19673.05907494925
Epoch Step: 95 / 138 Loss: 9.451972007751465 Tokens per Sec: 20147.896906356276
Epoch Step: 100 / 138 Loss: 7.123110771179199 Tokens per Sec: 20327.904435263717
Epoch Step: 105 / 138 Loss: 12.359551429748535 Tokens per Sec: 17925.565287246096
Epoch Step: 110 / 138 Loss: 12.18785572052002 Tokens per Sec: 18551.62785798857
Epoch Step: 115 / 138 Loss: 10.343162536621094 Tokens per Sec: 15656.990632651656
Epoch Step: 120 / 138 Loss: 12.86158561706543 Tokens per Sec: 18256.26474662445
Epoch Step: 125 / 138 Loss: 10.320602416992188 Tokens per Sec: 18096.519596018723
Epoch Step: 130 / 138 Loss: 13.96969223022461 Tokens per Sec: 18931.115587851567
Epoch Step: 135 / 138 Loss: 9.848077774047852 Tokens per Sec: 18647.76071976797
Epoch ended with duration 0:00:34.035051
Train perplexity: 1.1654333544588817
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext , VAR_3 , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.401792
Validation perplexity: 1.2780601303309052
Epoch 103 / 1000
Epoch Step: 5 / 138 Loss: 13.781709671020508 Tokens per Sec: 17859.447027193753
Epoch Step: 10 / 138 Loss: 13.71897029876709 Tokens per Sec: 18038.938257710135
Epoch Step: 15 / 138 Loss: 16.324710845947266 Tokens per Sec: 19872.153636733427
Epoch Step: 20 / 138 Loss: 13.131916999816895 Tokens per Sec: 17786.388947444448
Epoch Step: 25 / 138 Loss: 8.490219116210938 Tokens per Sec: 19249.02104986934
Epoch Step: 30 / 138 Loss: 12.630017280578613 Tokens per Sec: 19815.18906753367
Epoch Step: 35 / 138 Loss: 8.116991996765137 Tokens per Sec: 19876.72086834527
Epoch Step: 40 / 138 Loss: 10.091069221496582 Tokens per Sec: 20526.725592591385
Epoch Step: 45 / 138 Loss: 8.529888153076172 Tokens per Sec: 19408.621813428952
Epoch Step: 50 / 138 Loss: 9.46673583984375 Tokens per Sec: 18640.601807211293
Epoch Step: 55 / 138 Loss: 11.535167694091797 Tokens per Sec: 18609.869676065387
Epoch Step: 60 / 138 Loss: 10.357894897460938 Tokens per Sec: 18789.778429611633
Epoch Step: 65 / 138 Loss: 9.9087553024292 Tokens per Sec: 19892.615743996404
Epoch Step: 70 / 138 Loss: 7.661022186279297 Tokens per Sec: 18471.322851927835
Epoch Step: 75 / 138 Loss: 7.491757869720459 Tokens per Sec: 18323.907912453877
Epoch Step: 80 / 138 Loss: 8.76059341430664 Tokens per Sec: 19929.331121679472
Epoch Step: 85 / 138 Loss: 13.078474044799805 Tokens per Sec: 18494.14415427871
Epoch Step: 90 / 138 Loss: 16.19478416442871 Tokens per Sec: 19420.672732042967
Epoch Step: 95 / 138 Loss: 11.05300235748291 Tokens per Sec: 18744.95208115849
Epoch Step: 100 / 138 Loss: 14.536591529846191 Tokens per Sec: 18264.023032944966
Epoch Step: 105 / 138 Loss: 16.558971405029297 Tokens per Sec: 17787.785903506378
Epoch Step: 110 / 138 Loss: 14.511128425598145 Tokens per Sec: 18147.390666025836
Epoch Step: 115 / 138 Loss: 12.77657699584961 Tokens per Sec: 18651.210142713393
Epoch Step: 120 / 138 Loss: 10.27049446105957 Tokens per Sec: 18750.143104240025
Epoch Step: 125 / 138 Loss: 12.84429931640625 Tokens per Sec: 17473.331966114896
Epoch Step: 130 / 138 Loss: 10.604165077209473 Tokens per Sec: 18081.155275215497
Epoch Step: 135 / 138 Loss: 12.644855499267578 Tokens per Sec: 16596.23881913525
Epoch ended with duration 0:00:34.067883
Train perplexity: 1.1654303732242555
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.408533
Validation perplexity: 1.2795289890156785
Epoch 104 / 1000
Epoch Step: 5 / 138 Loss: 6.833505630493164 Tokens per Sec: 18116.370177881603
Epoch Step: 10 / 138 Loss: 8.244738578796387 Tokens per Sec: 18642.16354933411
Epoch Step: 15 / 138 Loss: 11.682498931884766 Tokens per Sec: 18471.75344374096
Epoch Step: 20 / 138 Loss: 8.890748023986816 Tokens per Sec: 18767.57238986331
Epoch Step: 25 / 138 Loss: 6.4652862548828125 Tokens per Sec: 18427.872574854926
Epoch Step: 30 / 138 Loss: 7.323800086975098 Tokens per Sec: 20437.182621792686
Epoch Step: 35 / 138 Loss: 11.053357124328613 Tokens per Sec: 18768.24047896326
Epoch Step: 40 / 138 Loss: 8.906084060668945 Tokens per Sec: 17086.334170708953
Epoch Step: 45 / 138 Loss: 8.724895477294922 Tokens per Sec: 20414.200393175433
Epoch Step: 50 / 138 Loss: 7.999580383300781 Tokens per Sec: 20811.310104392614
Epoch Step: 55 / 138 Loss: 11.28372859954834 Tokens per Sec: 20099.56877124452
Epoch Step: 60 / 138 Loss: 12.130343437194824 Tokens per Sec: 19656.620081868812
Epoch Step: 65 / 138 Loss: 13.741554260253906 Tokens per Sec: 19120.19355299894
Epoch Step: 70 / 138 Loss: 7.165212631225586 Tokens per Sec: 17591.796061457702
Epoch Step: 75 / 138 Loss: 9.332039833068848 Tokens per Sec: 18779.20304772739
Epoch Step: 80 / 138 Loss: 7.7529120445251465 Tokens per Sec: 19244.219321445948
Epoch Step: 85 / 138 Loss: 14.156228065490723 Tokens per Sec: 16954.148763289388
Epoch Step: 90 / 138 Loss: 9.980498313903809 Tokens per Sec: 19601.3130746992
Epoch Step: 95 / 138 Loss: 12.251389503479004 Tokens per Sec: 19110.11910380245
Epoch Step: 100 / 138 Loss: 10.325366020202637 Tokens per Sec: 20043.39587264869
Epoch Step: 105 / 138 Loss: 12.66174030303955 Tokens per Sec: 16332.871400711812
Epoch Step: 110 / 138 Loss: 11.013113975524902 Tokens per Sec: 17840.750572525314
Epoch Step: 115 / 138 Loss: 13.165816307067871 Tokens per Sec: 18895.276565885804
Epoch Step: 120 / 138 Loss: 9.373970985412598 Tokens per Sec: 19009.948013671274
Epoch Step: 125 / 138 Loss: 10.318395614624023 Tokens per Sec: 18726.607833654587
Epoch Step: 130 / 138 Loss: 12.743908882141113 Tokens per Sec: 18994.727279415303
Epoch Step: 135 / 138 Loss: 9.696173667907715 Tokens per Sec: 17638.938963580757
Epoch ended with duration 0:00:33.964105
Train perplexity: 1.1631776358381636
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( ( target != null ) { try { try { map . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.406320
Validation perplexity: 1.2793382580377664
Epoch 105 / 1000
Epoch Step: 5 / 138 Loss: 8.63400936126709 Tokens per Sec: 18811.762520996286
Epoch Step: 10 / 138 Loss: 9.86074447631836 Tokens per Sec: 19723.66161594925
Epoch Step: 15 / 138 Loss: 7.507788181304932 Tokens per Sec: 17809.07848501626
Epoch Step: 20 / 138 Loss: 7.748408317565918 Tokens per Sec: 19678.606691250217
Epoch Step: 25 / 138 Loss: 12.41148567199707 Tokens per Sec: 19003.95886833523
Epoch Step: 30 / 138 Loss: 14.168988227844238 Tokens per Sec: 18139.2583750173
Epoch Step: 35 / 138 Loss: 13.349618911743164 Tokens per Sec: 19003.563101367145
Epoch Step: 40 / 138 Loss: 7.030873775482178 Tokens per Sec: 19362.37793537741
Epoch Step: 45 / 138 Loss: 10.446562767028809 Tokens per Sec: 19778.381026036415
Epoch Step: 50 / 138 Loss: 8.787632942199707 Tokens per Sec: 18662.665679827394
Epoch Step: 55 / 138 Loss: 9.488454818725586 Tokens per Sec: 20345.02179626499
Epoch Step: 60 / 138 Loss: 10.128761291503906 Tokens per Sec: 19051.446700401273
Epoch Step: 65 / 138 Loss: 6.396490573883057 Tokens per Sec: 19007.969160096713
Epoch Step: 70 / 138 Loss: 14.733979225158691 Tokens per Sec: 18746.345447747666
Epoch Step: 75 / 138 Loss: 8.8927001953125 Tokens per Sec: 19570.629389102916
Epoch Step: 80 / 138 Loss: 15.393898010253906 Tokens per Sec: 17634.932376391313
Epoch Step: 85 / 138 Loss: 8.460793495178223 Tokens per Sec: 19134.312874137526
Epoch Step: 90 / 138 Loss: 15.455717086791992 Tokens per Sec: 19749.278184419774
Epoch Step: 95 / 138 Loss: 9.99425983428955 Tokens per Sec: 19391.458763921844
Epoch Step: 100 / 138 Loss: 6.915401935577393 Tokens per Sec: 19581.692785848878
Epoch Step: 105 / 138 Loss: 10.125056266784668 Tokens per Sec: 18158.81552515381
Epoch Step: 110 / 138 Loss: 9.526715278625488 Tokens per Sec: 17314.76645205694
Epoch Step: 115 / 138 Loss: 10.989470481872559 Tokens per Sec: 17723.605368403652
Epoch Step: 120 / 138 Loss: 12.175533294677734 Tokens per Sec: 15866.244406546983
Epoch Step: 125 / 138 Loss: 14.962214469909668 Tokens per Sec: 18444.228644427498
Epoch Step: 130 / 138 Loss: 10.87661361694336 Tokens per Sec: 18642.610873216818
Epoch Step: 135 / 138 Loss: 9.821830749511719 Tokens per Sec: 18279.639372844293
Epoch ended with duration 0:00:34.067107
Train perplexity: 1.1596234301103747
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( ( VAR_1 . METHOD_3 ( ) ) ) ; if ( ( err != null ) && ( ( VAR_1 ) != null ) ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.426707
Validation perplexity: 1.2758256410371531
Model saved checkpoint!
Epoch 106 / 1000
Epoch Step: 5 / 138 Loss: 8.482111930847168 Tokens per Sec: 17862.057158189535
Epoch Step: 10 / 138 Loss: 13.905224800109863 Tokens per Sec: 20153.298506349794
Epoch Step: 15 / 138 Loss: 13.161965370178223 Tokens per Sec: 17850.85727160153
Epoch Step: 20 / 138 Loss: 8.271197319030762 Tokens per Sec: 19424.203198786767
Epoch Step: 25 / 138 Loss: 11.693582534790039 Tokens per Sec: 20239.147948631744
Epoch Step: 30 / 138 Loss: 11.677876472473145 Tokens per Sec: 20478.742164434883
Epoch Step: 35 / 138 Loss: 11.522791862487793 Tokens per Sec: 18701.580939531046
Epoch Step: 40 / 138 Loss: 11.020564079284668 Tokens per Sec: 18171.03786937858
Epoch Step: 45 / 138 Loss: 11.628591537475586 Tokens per Sec: 18332.118316427448
Epoch Step: 50 / 138 Loss: 7.338152885437012 Tokens per Sec: 18593.64859270583
Epoch Step: 55 / 138 Loss: 11.52156925201416 Tokens per Sec: 18400.520661551807
Epoch Step: 60 / 138 Loss: 8.670708656311035 Tokens per Sec: 17490.253419641635
Epoch Step: 65 / 138 Loss: 13.861071586608887 Tokens per Sec: 17933.307692019494
Epoch Step: 70 / 138 Loss: 10.013884544372559 Tokens per Sec: 19318.917983422416
Epoch Step: 75 / 138 Loss: 11.460043907165527 Tokens per Sec: 19323.55972251948
Epoch Step: 80 / 138 Loss: 7.2364959716796875 Tokens per Sec: 19552.406622624774
Epoch Step: 85 / 138 Loss: 12.266566276550293 Tokens per Sec: 19752.5915470197
Epoch Step: 90 / 138 Loss: 8.45743179321289 Tokens per Sec: 18994.12067852811
Epoch Step: 95 / 138 Loss: 9.430755615234375 Tokens per Sec: 20550.194311624622
Epoch Step: 100 / 138 Loss: 11.549867630004883 Tokens per Sec: 18549.948586666032
Epoch Step: 105 / 138 Loss: 9.495442390441895 Tokens per Sec: 18922.51636539132
Epoch Step: 110 / 138 Loss: 10.109177589416504 Tokens per Sec: 18390.951697541972
Epoch Step: 115 / 138 Loss: 11.095474243164062 Tokens per Sec: 18995.585498809687
Epoch Step: 120 / 138 Loss: 11.736017227172852 Tokens per Sec: 18297.740042731893
Epoch Step: 125 / 138 Loss: 10.419282913208008 Tokens per Sec: 16550.831581038594
Epoch Step: 130 / 138 Loss: 10.89289665222168 Tokens per Sec: 16066.276661711196
Epoch Step: 135 / 138 Loss: 11.485447883605957 Tokens per Sec: 18315.684328396062
Epoch ended with duration 0:00:34.131223
Train perplexity: 1.1585678447784042
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( ( err != null ) && ( ( VAR_1 . METHOD_2 ( VAR_1 ) ) ) ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.403040
Validation perplexity: 1.26881295737808
Model saved best_on_validation!
Epoch 107 / 1000
Epoch Step: 5 / 138 Loss: 9.123946189880371 Tokens per Sec: 18328.467469866217
Epoch Step: 10 / 138 Loss: 8.19041919708252 Tokens per Sec: 19066.756294589468
Epoch Step: 15 / 138 Loss: 10.321969032287598 Tokens per Sec: 19500.794457972766
Epoch Step: 20 / 138 Loss: 7.243217945098877 Tokens per Sec: 19492.149906535997
Epoch Step: 25 / 138 Loss: 9.89780044555664 Tokens per Sec: 19935.32665144513
Epoch Step: 30 / 138 Loss: 9.118985176086426 Tokens per Sec: 19527.803476905458
Epoch Step: 35 / 138 Loss: 8.477875709533691 Tokens per Sec: 18040.460008145794
Epoch Step: 40 / 138 Loss: 11.178056716918945 Tokens per Sec: 19338.268712120404
Epoch Step: 45 / 138 Loss: 12.064813613891602 Tokens per Sec: 17084.872169795115
Epoch Step: 50 / 138 Loss: 15.915348052978516 Tokens per Sec: 18797.099660911812
Epoch Step: 55 / 138 Loss: 9.795557022094727 Tokens per Sec: 18092.6693300687
Epoch Step: 60 / 138 Loss: 10.665277481079102 Tokens per Sec: 19427.498030718056
Epoch Step: 65 / 138 Loss: 10.997747421264648 Tokens per Sec: 18821.575572510992
Epoch Step: 70 / 138 Loss: 12.104806900024414 Tokens per Sec: 17922.909873245244
Epoch Step: 75 / 138 Loss: 14.563321113586426 Tokens per Sec: 18781.352141803596
Epoch Step: 80 / 138 Loss: 9.031003952026367 Tokens per Sec: 19796.285014249752
Epoch Step: 85 / 138 Loss: 13.85990047454834 Tokens per Sec: 19243.319012198117
Epoch Step: 90 / 138 Loss: 11.720489501953125 Tokens per Sec: 19549.32262152296
Epoch Step: 95 / 138 Loss: 9.799776077270508 Tokens per Sec: 19456.17577505193
Epoch Step: 100 / 138 Loss: 12.33497142791748 Tokens per Sec: 18472.749503196173
Epoch Step: 105 / 138 Loss: 10.649049758911133 Tokens per Sec: 18009.55550658251
Epoch Step: 110 / 138 Loss: 11.134195327758789 Tokens per Sec: 17998.088682176643
Epoch Step: 115 / 138 Loss: 10.942800521850586 Tokens per Sec: 18747.122669445682
Epoch Step: 120 / 138 Loss: 11.016923904418945 Tokens per Sec: 18138.1949071241
Epoch Step: 125 / 138 Loss: 11.368696212768555 Tokens per Sec: 16625.298955001836
Epoch Step: 130 / 138 Loss: 11.426841735839844 Tokens per Sec: 18187.1512917348
Epoch Step: 135 / 138 Loss: 10.146899223327637 Tokens per Sec: 17348.193339556874
Epoch ended with duration 0:00:34.229991
Train perplexity: 1.1585390174363122
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( ( err != null ) && ( ( VAR_1 . METHOD_2 ( VAR_1 ) ) ) ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.416666
Validation perplexity: 1.274924453935809
Epoch 108 / 1000
Epoch Step: 5 / 138 Loss: 7.9118123054504395 Tokens per Sec: 18781.89088547009
Epoch Step: 10 / 138 Loss: 11.78336238861084 Tokens per Sec: 20309.337847750117
Epoch Step: 15 / 138 Loss: 7.8744587898254395 Tokens per Sec: 20044.108999836284
Epoch Step: 20 / 138 Loss: 8.081405639648438 Tokens per Sec: 18570.847281415852
Epoch Step: 25 / 138 Loss: 11.646071434020996 Tokens per Sec: 19098.171822463468
Epoch Step: 30 / 138 Loss: 12.053304672241211 Tokens per Sec: 19113.299708878847
Epoch Step: 35 / 138 Loss: 7.7847442626953125 Tokens per Sec: 18031.671091573524
Epoch Step: 40 / 138 Loss: 9.326897621154785 Tokens per Sec: 19991.94925099032
Epoch Step: 45 / 138 Loss: 15.194560050964355 Tokens per Sec: 18452.86640393102
Epoch Step: 50 / 138 Loss: 12.8786039352417 Tokens per Sec: 20324.406038041496
Epoch Step: 55 / 138 Loss: 16.47808265686035 Tokens per Sec: 16943.96543421804
Epoch Step: 60 / 138 Loss: 13.4883394241333 Tokens per Sec: 19498.436787306546
Epoch Step: 65 / 138 Loss: 9.07300090789795 Tokens per Sec: 19163.42021149857
Epoch Step: 70 / 138 Loss: 6.964156150817871 Tokens per Sec: 20366.2297146018
Epoch Step: 75 / 138 Loss: 8.486285209655762 Tokens per Sec: 17996.668632156605
Epoch Step: 80 / 138 Loss: 11.535911560058594 Tokens per Sec: 18385.74973508771
Epoch Step: 85 / 138 Loss: 10.661465644836426 Tokens per Sec: 18551.70629509954
Epoch Step: 90 / 138 Loss: 9.549781799316406 Tokens per Sec: 17501.6076462082
Epoch Step: 95 / 138 Loss: 11.245373725891113 Tokens per Sec: 20120.308210549512
Epoch Step: 100 / 138 Loss: 11.798824310302734 Tokens per Sec: 18493.835605757173
Epoch Step: 105 / 138 Loss: 8.041257858276367 Tokens per Sec: 18428.231155854337
Epoch Step: 110 / 138 Loss: 10.156407356262207 Tokens per Sec: 16286.729256851142
Epoch Step: 115 / 138 Loss: 10.212382316589355 Tokens per Sec: 16817.0075647119
Epoch Step: 120 / 138 Loss: 11.039355278015137 Tokens per Sec: 17900.6715321135
Epoch Step: 125 / 138 Loss: 12.33236312866211 Tokens per Sec: 18824.648806070956
Epoch Step: 130 / 138 Loss: 9.241456985473633 Tokens per Sec: 18489.87038722029
Epoch Step: 135 / 138 Loss: 9.010217666625977 Tokens per Sec: 16992.54274603529
Epoch ended with duration 0:00:34.266584
Train perplexity: 1.1574620433484895
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.407168
Validation perplexity: 1.2738815393120007
Epoch 109 / 1000
Epoch Step: 5 / 138 Loss: 8.725399017333984 Tokens per Sec: 19455.680017364328
Epoch Step: 10 / 138 Loss: 10.157018661499023 Tokens per Sec: 18850.549043613326
Epoch Step: 15 / 138 Loss: 9.270456314086914 Tokens per Sec: 20158.312833158125
Epoch Step: 20 / 138 Loss: 12.373639106750488 Tokens per Sec: 19320.963645485936
Epoch Step: 25 / 138 Loss: 8.975436210632324 Tokens per Sec: 17855.76913827655
Epoch Step: 30 / 138 Loss: 9.47941780090332 Tokens per Sec: 19583.86124132816
Epoch Step: 35 / 138 Loss: 15.251409530639648 Tokens per Sec: 18844.635260030733
Epoch Step: 40 / 138 Loss: 8.103090286254883 Tokens per Sec: 19973.322071605682
Epoch Step: 45 / 138 Loss: 10.592061042785645 Tokens per Sec: 18239.47369273538
Epoch Step: 50 / 138 Loss: 14.273369789123535 Tokens per Sec: 17988.86161034675
Epoch Step: 55 / 138 Loss: 11.926643371582031 Tokens per Sec: 18198.701998163466
Epoch Step: 60 / 138 Loss: 10.493147850036621 Tokens per Sec: 18556.463815779567
Epoch Step: 65 / 138 Loss: 10.601699829101562 Tokens per Sec: 18099.775413322848
Epoch Step: 70 / 138 Loss: 10.746004104614258 Tokens per Sec: 19594.52780422351
Epoch Step: 75 / 138 Loss: 13.057229042053223 Tokens per Sec: 18885.19147515729
Epoch Step: 80 / 138 Loss: 10.81554889678955 Tokens per Sec: 19496.487022473175
Epoch Step: 85 / 138 Loss: 6.620754241943359 Tokens per Sec: 19643.050238946827
Epoch Step: 90 / 138 Loss: 8.504603385925293 Tokens per Sec: 17840.054959649377
Epoch Step: 95 / 138 Loss: 13.445287704467773 Tokens per Sec: 18980.57460606808
Epoch Step: 100 / 138 Loss: 11.325103759765625 Tokens per Sec: 19917.85059318704
Epoch Step: 105 / 138 Loss: 12.620185852050781 Tokens per Sec: 17913.426931554364
Epoch Step: 110 / 138 Loss: 12.591513633728027 Tokens per Sec: 18179.774455795137
Epoch Step: 115 / 138 Loss: 12.257948875427246 Tokens per Sec: 18097.311902854668
Epoch Step: 120 / 138 Loss: 9.499475479125977 Tokens per Sec: 16036.8877083455
Epoch Step: 125 / 138 Loss: 10.065070152282715 Tokens per Sec: 17995.691603817373
Epoch Step: 130 / 138 Loss: 10.757807731628418 Tokens per Sec: 17430.877628373582
Epoch Step: 135 / 138 Loss: 9.484909057617188 Tokens per Sec: 17954.742604144507
Epoch ended with duration 0:00:34.271539
Train perplexity: 1.154529652460579
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( err != null ) && ( ( VAR_1 ) != null ) ) { try { map . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.404185
Validation perplexity: 1.2781730724020903
Epoch 110 / 1000
Epoch Step: 5 / 138 Loss: 15.147832870483398 Tokens per Sec: 18755.973153081475
Epoch Step: 10 / 138 Loss: 7.9727702140808105 Tokens per Sec: 19749.998744222383
Epoch Step: 15 / 138 Loss: 11.56458568572998 Tokens per Sec: 17978.40679139019
Epoch Step: 20 / 138 Loss: 14.718695640563965 Tokens per Sec: 18986.065844185374
Epoch Step: 25 / 138 Loss: 11.685683250427246 Tokens per Sec: 19193.45597897209
Epoch Step: 30 / 138 Loss: 12.568961143493652 Tokens per Sec: 18821.239064371282
Epoch Step: 35 / 138 Loss: 12.012754440307617 Tokens per Sec: 18171.919714894866
Epoch Step: 40 / 138 Loss: 12.62775993347168 Tokens per Sec: 18372.003538110836
Epoch Step: 45 / 138 Loss: 11.395601272583008 Tokens per Sec: 18281.35648435153
Epoch Step: 50 / 138 Loss: 11.665114402770996 Tokens per Sec: 19033.330127363664
Epoch Step: 55 / 138 Loss: 8.441800117492676 Tokens per Sec: 19566.615128446174
Epoch Step: 60 / 138 Loss: 7.9836745262146 Tokens per Sec: 19072.804792936644
Epoch Step: 65 / 138 Loss: 8.051652908325195 Tokens per Sec: 18969.898676737903
Epoch Step: 70 / 138 Loss: 13.91750717163086 Tokens per Sec: 17516.500377004377
Epoch Step: 75 / 138 Loss: 12.34415054321289 Tokens per Sec: 19464.84059169482
Epoch Step: 80 / 138 Loss: 5.994836807250977 Tokens per Sec: 20385.079468908225
Epoch Step: 85 / 138 Loss: 9.128838539123535 Tokens per Sec: 20031.04772976939
Epoch Step: 90 / 138 Loss: 9.096918106079102 Tokens per Sec: 19916.185576343403
Epoch Step: 95 / 138 Loss: 16.254234313964844 Tokens per Sec: 19343.405757489563
Epoch Step: 100 / 138 Loss: 7.254733085632324 Tokens per Sec: 19601.64569202608
Epoch Step: 105 / 138 Loss: 8.212458610534668 Tokens per Sec: 16821.999573479257
Epoch Step: 110 / 138 Loss: 15.368115425109863 Tokens per Sec: 18559.72066074709
Epoch Step: 115 / 138 Loss: 9.76573657989502 Tokens per Sec: 19296.67335364603
Epoch Step: 120 / 138 Loss: 11.013198852539062 Tokens per Sec: 17648.83551292288
Epoch Step: 125 / 138 Loss: 9.403429985046387 Tokens per Sec: 16081.150330682809
Epoch Step: 130 / 138 Loss: 9.341004371643066 Tokens per Sec: 18081.409301075768
Epoch Step: 135 / 138 Loss: 10.705217361450195 Tokens per Sec: 18520.8123600828
Epoch ended with duration 0:00:34.064735
Train perplexity: 1.152647393139839
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( target != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.421444
Validation perplexity: 1.2726324021662545
Model saved checkpoint!
Epoch 111 / 1000
Epoch Step: 5 / 138 Loss: 6.785584926605225 Tokens per Sec: 18768.443359466622
Epoch Step: 10 / 138 Loss: 10.717047691345215 Tokens per Sec: 18726.215115678264
Epoch Step: 15 / 138 Loss: 11.115532875061035 Tokens per Sec: 18343.886703902877
Epoch Step: 20 / 138 Loss: 7.721532344818115 Tokens per Sec: 18566.52945149854
Epoch Step: 25 / 138 Loss: 7.706944942474365 Tokens per Sec: 19559.844582011257
Epoch Step: 30 / 138 Loss: 8.978666305541992 Tokens per Sec: 18767.006336822287
Epoch Step: 35 / 138 Loss: 10.893461227416992 Tokens per Sec: 19296.85739616426
Epoch Step: 40 / 138 Loss: 12.084211349487305 Tokens per Sec: 19277.483546142692
Epoch Step: 45 / 138 Loss: 8.051013946533203 Tokens per Sec: 18518.63148506009
Epoch Step: 50 / 138 Loss: 16.979642868041992 Tokens per Sec: 20355.97149176995
Epoch Step: 55 / 138 Loss: 7.262656211853027 Tokens per Sec: 19005.840659838042
Epoch Step: 60 / 138 Loss: 6.633481502532959 Tokens per Sec: 20426.89063844555
Epoch Step: 65 / 138 Loss: 8.069840431213379 Tokens per Sec: 19873.427512905248
Epoch Step: 70 / 138 Loss: 9.321117401123047 Tokens per Sec: 19678.35325819608
Epoch Step: 75 / 138 Loss: 14.438682556152344 Tokens per Sec: 19064.658893079515
Epoch Step: 80 / 138 Loss: 7.688674449920654 Tokens per Sec: 19129.58124612521
Epoch Step: 85 / 138 Loss: 12.55728816986084 Tokens per Sec: 18352.18816691154
Epoch Step: 90 / 138 Loss: 13.348544120788574 Tokens per Sec: 18909.94344769735
Epoch Step: 95 / 138 Loss: 10.459726333618164 Tokens per Sec: 17419.618349263365
Epoch Step: 100 / 138 Loss: 11.488615036010742 Tokens per Sec: 17892.41106424165
Epoch Step: 105 / 138 Loss: 8.795595169067383 Tokens per Sec: 17684.361749883665
Epoch Step: 110 / 138 Loss: 11.770646095275879 Tokens per Sec: 16397.489299442554
Epoch Step: 115 / 138 Loss: 11.480541229248047 Tokens per Sec: 18597.61800853922
Epoch Step: 120 / 138 Loss: 10.338923454284668 Tokens per Sec: 17612.641805712723
Epoch Step: 125 / 138 Loss: 11.959650039672852 Tokens per Sec: 17454.82526348903
Epoch Step: 130 / 138 Loss: 7.476653575897217 Tokens per Sec: 17811.31510979035
Epoch Step: 135 / 138 Loss: 9.862366676330566 Tokens per Sec: 18104.766482186824
Epoch ended with duration 0:00:34.205123
Train perplexity: 1.152086615596112
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( ( err != null ) && ( ( VAR_1 . METHOD_3 ( ) ) ) ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.407096
Validation perplexity: 1.2755396608937404
Epoch 112 / 1000
Epoch Step: 5 / 138 Loss: 6.231136322021484 Tokens per Sec: 19747.72126534499
Epoch Step: 10 / 138 Loss: 7.879208564758301 Tokens per Sec: 19085.397454747188
Epoch Step: 15 / 138 Loss: 12.722067832946777 Tokens per Sec: 17565.386066585583
Epoch Step: 20 / 138 Loss: 9.927563667297363 Tokens per Sec: 18257.662794518714
Epoch Step: 25 / 138 Loss: 10.959053039550781 Tokens per Sec: 19437.823277692634
Epoch Step: 30 / 138 Loss: 11.940449714660645 Tokens per Sec: 18630.252058877966
Epoch Step: 35 / 138 Loss: 15.002287864685059 Tokens per Sec: 19537.706498917792
Epoch Step: 40 / 138 Loss: 7.543676853179932 Tokens per Sec: 20048.063554564218
Epoch Step: 45 / 138 Loss: 10.721211433410645 Tokens per Sec: 18825.394201169936
Epoch Step: 50 / 138 Loss: 8.320972442626953 Tokens per Sec: 18621.726761954505
Epoch Step: 55 / 138 Loss: 11.519071578979492 Tokens per Sec: 19551.12335799919
Epoch Step: 60 / 138 Loss: 9.648116111755371 Tokens per Sec: 19367.404567331097
Epoch Step: 65 / 138 Loss: 10.553522109985352 Tokens per Sec: 20048.06674717601
Epoch Step: 70 / 138 Loss: 9.91961669921875 Tokens per Sec: 19441.377804689397
Epoch Step: 75 / 138 Loss: 9.639974594116211 Tokens per Sec: 18428.692525146747
Epoch Step: 80 / 138 Loss: 11.668896675109863 Tokens per Sec: 20020.0143938983
Epoch Step: 85 / 138 Loss: 15.242717742919922 Tokens per Sec: 18876.955916590032
Epoch Step: 90 / 138 Loss: 11.601767539978027 Tokens per Sec: 19906.149302719557
Epoch Step: 95 / 138 Loss: 10.099165916442871 Tokens per Sec: 17873.815271398453
Epoch Step: 100 / 138 Loss: 11.640972137451172 Tokens per Sec: 17968.932039051866
Epoch Step: 105 / 138 Loss: 9.675549507141113 Tokens per Sec: 17559.179887023693
Epoch Step: 110 / 138 Loss: 9.715757369995117 Tokens per Sec: 17420.714892424956
Epoch Step: 115 / 138 Loss: 11.342307090759277 Tokens per Sec: 17949.05828536011
Epoch Step: 120 / 138 Loss: 8.821237564086914 Tokens per Sec: 17376.60978597992
Epoch Step: 125 / 138 Loss: 10.341706275939941 Tokens per Sec: 18769.117138870974
Epoch Step: 130 / 138 Loss: 9.509243965148926 Tokens per Sec: 17695.963198652546
Epoch Step: 135 / 138 Loss: 10.466276168823242 Tokens per Sec: 18645.23185461944
Epoch ended with duration 0:00:34.044143
Train perplexity: 1.1497579372945204
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 h = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( err != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.405375
Validation perplexity: 1.2768727216994837
Epoch 113 / 1000
Epoch Step: 5 / 138 Loss: 8.620396614074707 Tokens per Sec: 16768.817248156454
Epoch Step: 10 / 138 Loss: 11.027947425842285 Tokens per Sec: 18777.20465300039
Epoch Step: 15 / 138 Loss: 10.266674995422363 Tokens per Sec: 19471.513988107563
Epoch Step: 20 / 138 Loss: 12.197522163391113 Tokens per Sec: 17920.9748038655
Epoch Step: 25 / 138 Loss: 10.088861465454102 Tokens per Sec: 17502.23215828318
Epoch Step: 30 / 138 Loss: 12.398377418518066 Tokens per Sec: 18210.136911989706
Epoch Step: 35 / 138 Loss: 11.722126960754395 Tokens per Sec: 18090.47967315779
Epoch Step: 40 / 138 Loss: 6.383531093597412 Tokens per Sec: 20843.84148043783
Epoch Step: 45 / 138 Loss: 10.975452423095703 Tokens per Sec: 18941.744573157237
Epoch Step: 50 / 138 Loss: 13.041410446166992 Tokens per Sec: 19088.50486294595
Epoch Step: 55 / 138 Loss: 10.482723236083984 Tokens per Sec: 19432.701785071862
Epoch Step: 60 / 138 Loss: 6.8278703689575195 Tokens per Sec: 18426.2733740077
Epoch Step: 65 / 138 Loss: 7.570361614227295 Tokens per Sec: 20476.333935271665
Epoch Step: 70 / 138 Loss: 13.049315452575684 Tokens per Sec: 18887.00124170269
Epoch Step: 75 / 138 Loss: 12.746009826660156 Tokens per Sec: 19984.93856007525
Epoch Step: 80 / 138 Loss: 12.790998458862305 Tokens per Sec: 18437.136463316125
Epoch Step: 85 / 138 Loss: 6.964414596557617 Tokens per Sec: 20074.877901571293
Epoch Step: 90 / 138 Loss: 12.40485668182373 Tokens per Sec: 18882.300590486837
Epoch Step: 95 / 138 Loss: 11.905129432678223 Tokens per Sec: 19174.19904882862
Epoch Step: 100 / 138 Loss: 16.91493797302246 Tokens per Sec: 19814.9776213506
Epoch Step: 105 / 138 Loss: 8.929213523864746 Tokens per Sec: 18637.31524085036
Epoch Step: 110 / 138 Loss: 10.00947093963623 Tokens per Sec: 18020.974851237803
Epoch Step: 115 / 138 Loss: 11.191978454589844 Tokens per Sec: 18570.086013423923
Epoch Step: 120 / 138 Loss: 10.95630168914795 Tokens per Sec: 17963.858143430713
Epoch Step: 125 / 138 Loss: 8.106844902038574 Tokens per Sec: 18978.456577810757
Epoch Step: 130 / 138 Loss: 10.366951942443848 Tokens per Sec: 18134.934499541232
Epoch Step: 135 / 138 Loss: 11.746248245239258 Tokens per Sec: 14951.456210461725
Epoch ended with duration 0:00:34.172847
Train perplexity: 1.1492588369630863
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 h = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( err != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.405401
Validation perplexity: 1.2723360876222132
Epoch 114 / 1000
Epoch Step: 5 / 138 Loss: 13.386509895324707 Tokens per Sec: 19614.67656690319
Epoch Step: 10 / 138 Loss: 8.874164581298828 Tokens per Sec: 19879.09908091115
Epoch Step: 15 / 138 Loss: 9.56319522857666 Tokens per Sec: 19862.750949243728
Epoch Step: 20 / 138 Loss: 10.925694465637207 Tokens per Sec: 19603.440662290497
Epoch Step: 25 / 138 Loss: 10.662841796875 Tokens per Sec: 18507.128839283647
Epoch Step: 30 / 138 Loss: 6.332476615905762 Tokens per Sec: 19471.53155454136
Epoch Step: 35 / 138 Loss: 8.199127197265625 Tokens per Sec: 19118.081386209997
Epoch Step: 40 / 138 Loss: 9.988631248474121 Tokens per Sec: 18196.566050175366
Epoch Step: 45 / 138 Loss: 8.132787704467773 Tokens per Sec: 19456.398824842734
Epoch Step: 50 / 138 Loss: 8.205477714538574 Tokens per Sec: 18147.978516636118
Epoch Step: 55 / 138 Loss: 8.568609237670898 Tokens per Sec: 18381.6915173042
Epoch Step: 60 / 138 Loss: 11.312027931213379 Tokens per Sec: 18377.188469038327
Epoch Step: 65 / 138 Loss: 13.863871574401855 Tokens per Sec: 18390.5547977704
Epoch Step: 70 / 138 Loss: 12.58741283416748 Tokens per Sec: 19709.809958440484
Epoch Step: 75 / 138 Loss: 12.845902442932129 Tokens per Sec: 18736.228188527188
Epoch Step: 80 / 138 Loss: 12.516889572143555 Tokens per Sec: 18819.304740056094
Epoch Step: 85 / 138 Loss: 8.74254035949707 Tokens per Sec: 20536.690771950416
Epoch Step: 90 / 138 Loss: 7.438712120056152 Tokens per Sec: 19783.11138916262
Epoch Step: 95 / 138 Loss: 11.307443618774414 Tokens per Sec: 17811.83375490261
Epoch Step: 100 / 138 Loss: 7.71400260925293 Tokens per Sec: 19115.480078146877
Epoch Step: 105 / 138 Loss: 8.809709548950195 Tokens per Sec: 16156.573903617222
Epoch Step: 110 / 138 Loss: 10.96595287322998 Tokens per Sec: 18422.634941467517
Epoch Step: 115 / 138 Loss: 11.214204788208008 Tokens per Sec: 18543.774466768413
Epoch Step: 120 / 138 Loss: 8.928610801696777 Tokens per Sec: 17845.603241471177
Epoch Step: 125 / 138 Loss: 10.567217826843262 Tokens per Sec: 17945.018669478348
Epoch Step: 130 / 138 Loss: 10.265376091003418 Tokens per Sec: 18011.41436000807
Epoch Step: 135 / 138 Loss: 10.509807586669922 Tokens per Sec: 17668.535504616633
Epoch ended with duration 0:00:34.057020
Train perplexity: 1.1476554973341913
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 h = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( err != null ) && ( ( VAR_1 ) != null ) ) { try { map . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.404382
Validation perplexity: 1.2759502986741535
Epoch 115 / 1000
Epoch Step: 5 / 138 Loss: 10.559247970581055 Tokens per Sec: 18964.88534789251
Epoch Step: 10 / 138 Loss: 12.140043258666992 Tokens per Sec: 18626.78729055789
Epoch Step: 15 / 138 Loss: 13.089788436889648 Tokens per Sec: 19920.81182877767
Epoch Step: 20 / 138 Loss: 12.555215835571289 Tokens per Sec: 16516.849902742983
Epoch Step: 25 / 138 Loss: 10.50519847869873 Tokens per Sec: 18026.758429315083
Epoch Step: 30 / 138 Loss: 8.411783218383789 Tokens per Sec: 18725.625394428826
Epoch Step: 35 / 138 Loss: 11.053571701049805 Tokens per Sec: 18018.163388080182
Epoch Step: 40 / 138 Loss: 10.588888168334961 Tokens per Sec: 18493.161472727013
Epoch Step: 45 / 138 Loss: 10.410877227783203 Tokens per Sec: 19124.946348725254
Epoch Step: 50 / 138 Loss: 7.625041961669922 Tokens per Sec: 20379.01871992154
Epoch Step: 55 / 138 Loss: 8.043272972106934 Tokens per Sec: 19231.28396165778
Epoch Step: 60 / 138 Loss: 11.492685317993164 Tokens per Sec: 19971.99433225343
Epoch Step: 65 / 138 Loss: 8.586684226989746 Tokens per Sec: 19433.39221098389
Epoch Step: 70 / 138 Loss: 9.459867477416992 Tokens per Sec: 19189.515592101114
Epoch Step: 75 / 138 Loss: 11.825159072875977 Tokens per Sec: 19863.679574113656
Epoch Step: 80 / 138 Loss: 6.928372383117676 Tokens per Sec: 18336.257179921773
Epoch Step: 85 / 138 Loss: 8.779303550720215 Tokens per Sec: 20415.32831888512
Epoch Step: 90 / 138 Loss: 8.050544738769531 Tokens per Sec: 19004.949415417155
Epoch Step: 95 / 138 Loss: 7.755878925323486 Tokens per Sec: 18954.077993024654
Epoch Step: 100 / 138 Loss: 9.749484062194824 Tokens per Sec: 19472.953105600656
Epoch Step: 105 / 138 Loss: 8.320611000061035 Tokens per Sec: 18160.690485360632
Epoch Step: 110 / 138 Loss: 8.88180160522461 Tokens per Sec: 16224.93001042975
Epoch Step: 115 / 138 Loss: 11.44042682647705 Tokens per Sec: 18623.132242701613
Epoch Step: 120 / 138 Loss: 11.335954666137695 Tokens per Sec: 18027.98089799155
Epoch Step: 125 / 138 Loss: 9.072149276733398 Tokens per Sec: 17054.43285655569
Epoch Step: 130 / 138 Loss: 6.619757652282715 Tokens per Sec: 18451.967406998738
Epoch Step: 135 / 138 Loss: 9.626791000366211 Tokens per Sec: 18723.44667445488
Epoch ended with duration 0:00:34.060173
Train perplexity: 1.1477319192810802
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 { METHOD_2 ( VAR_1 ) ; if ( target != null ) { try { map . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.420696
Validation perplexity: 1.2767687814045263
Model saved checkpoint!
Epoch 116 / 1000
Epoch Step: 5 / 138 Loss: 10.838848114013672 Tokens per Sec: 19058.23757838202
Epoch Step: 10 / 138 Loss: 5.961198806762695 Tokens per Sec: 19834.120615358665
Epoch Step: 15 / 138 Loss: 12.673433303833008 Tokens per Sec: 19945.985712326194
Epoch Step: 20 / 138 Loss: 9.820149421691895 Tokens per Sec: 19135.03869524181
Epoch Step: 25 / 138 Loss: 10.991995811462402 Tokens per Sec: 19767.851590316124
Epoch Step: 30 / 138 Loss: 7.476085186004639 Tokens per Sec: 17839.930129881403
Epoch Step: 35 / 138 Loss: 10.67727279663086 Tokens per Sec: 19280.00859948372
Epoch Step: 40 / 138 Loss: 6.407507419586182 Tokens per Sec: 18173.230203672956
Epoch Step: 45 / 138 Loss: 10.518767356872559 Tokens per Sec: 18907.95829763092
Epoch Step: 50 / 138 Loss: 12.877217292785645 Tokens per Sec: 18839.842193155502
Epoch Step: 55 / 138 Loss: 9.278461456298828 Tokens per Sec: 18453.392752226988
Epoch Step: 60 / 138 Loss: 12.275642395019531 Tokens per Sec: 19365.458468795383
Epoch Step: 65 / 138 Loss: 11.512510299682617 Tokens per Sec: 18617.422619745674
Epoch Step: 70 / 138 Loss: 7.448510646820068 Tokens per Sec: 18624.315504093203
Epoch Step: 75 / 138 Loss: 7.434628009796143 Tokens per Sec: 19354.815520702265
Epoch Step: 80 / 138 Loss: 11.046476364135742 Tokens per Sec: 19542.95892397308
Epoch Step: 85 / 138 Loss: 7.592738151550293 Tokens per Sec: 20685.210366760086
Epoch Step: 90 / 138 Loss: 11.806350708007812 Tokens per Sec: 19905.028821084506
Epoch Step: 95 / 138 Loss: 6.423976898193359 Tokens per Sec: 19646.38166804766
Epoch Step: 100 / 138 Loss: 15.882966995239258 Tokens per Sec: 17570.754447112427
Epoch Step: 105 / 138 Loss: 11.716282844543457 Tokens per Sec: 17739.23838988862
Epoch Step: 110 / 138 Loss: 11.601263046264648 Tokens per Sec: 15799.241247916525
Epoch Step: 115 / 138 Loss: 10.086912155151367 Tokens per Sec: 17195.720068688464
Epoch Step: 120 / 138 Loss: 10.446146011352539 Tokens per Sec: 17420.89360429764
Epoch Step: 125 / 138 Loss: 6.7110419273376465 Tokens per Sec: 18355.501450006443
Epoch Step: 130 / 138 Loss: 10.937712669372559 Tokens per Sec: 18281.96134321975
Epoch Step: 135 / 138 Loss: 7.8626532554626465 Tokens per Sec: 17894.609001163255
Epoch ended with duration 0:00:34.165958
Train perplexity: 1.1437394801974556
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 h = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( err != null ) { try { METHOD_6 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , VAR_3 . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.407308
Validation perplexity: 1.2791737179881741
Training was early stopped on epoch 117 with early stopping rounds 10
[60.63275797645752, 19.519872611788138, 14.209852594995628, 11.335394344817642, 9.483736413269575, 8.283363259720566, 7.390223378363151, 6.6478012155960435, 6.033040176031232, 5.484047691036723, 5.000282161734711, 4.572965071451189, 4.115057831063306, 3.7099482281154064, 3.330779041384894, 3.001639098452622, 2.804180928580425, 2.576351709683665, 2.3777623014821634, 2.2302543444849787, 2.1051149730231, 2.014839239702983, 1.9155631563141156, 1.847847359634725, 1.7926007819719265, 1.7472654924009943, 1.699790908535303, 1.649084377648655, 1.6166582463526784, 1.5852828057147337, 1.5573602101204338, 1.530691101296513, 1.5173666629623903, 1.4903437970798818, 1.4700340777166734, 1.4642199221375665, 1.440781336425198, 1.422958651774852, 1.4110704567133674, 1.4001353651787998, 1.387304689699029, 1.3777638322887755, 1.3694194159433384, 1.3595861035165608, 1.3507178193850573, 1.342624344848375, 1.3355490404725394, 1.3325710142145795, 1.3238675837467444, 1.3207872787842865, 1.3080444369048763, 1.3058265902092916, 1.2998543064997081, 1.2936337216381957, 1.2905179254321157, 1.2940299004771811, 1.2788889853838592, 1.275079725842654, 1.2713147440937187, 1.2682040457563937, 1.2637588648039044, 1.262386129253169, 1.2617602987350605, 1.2579718997240454, 1.2491463529352742, 1.2445625089702734, 1.2424497686967284, 1.24090325172201, 1.2387049043059133, 1.2401397561728777, 1.230183481682376, 1.2289312875442784, 1.2283038215998208, 1.2245325703778782, 1.222021140679639, 1.2185995562257466, 1.2158232353237846, 1.2153865049284163, 1.2115997933349676, 1.2089281414297897, 1.2083067803456653, 1.2102828675673751, 1.2022453329546081, 1.2001336721831206, 1.2017575488052916, 1.194947001663688, 1.1946727538220874, 1.193645308546354, 1.1914344832621389, 1.1913548836310817, 1.1867855978592758, 1.1849499713100378, 1.1839030285650418, 1.1812992620172436, 1.1782973587564807, 1.1794752998923084, 1.176333575236734, 1.1739174556660932, 1.1722122908296864, 1.1711949650556768, 1.1682770304553163, 1.1674368051104438, 1.1654333544588817, 1.1654303732242555, 1.1631776358381636, 1.1596234301103747, 1.1585678447784042, 1.1585390174363122, 1.1574620433484895, 1.154529652460579, 1.152647393139839, 1.152086615596112, 1.1497579372945204, 1.1492588369630863, 1.1476554973341913, 1.1477319192810802, 1.1437394801974556]
[24.308427702833207, 15.927411822285107, 12.249887664441983, 9.912960711687283, 8.499814668212867, 7.522837113251266, 6.6609384229430315, 6.0098535700178415, 5.428632890262376, 4.991047763717865, 4.529179893297199, 4.077547647478949, 3.6698369303396405, 3.3074820623290675, 2.9910447591909715, 2.7136097199785243, 2.500784859942034, 2.339323067044214, 2.200179003908037, 2.076963980932464, 1.9874647899946265, 1.9093868812669899, 1.828003383980794, 1.778024255554587, 1.7278095669929254, 1.6990497513685046, 1.6527386959335235, 1.6152885087845634, 1.589587476822012, 1.561277426538543, 1.5403442101027227, 1.5285658364805483, 1.499435938805828, 1.4849987857766633, 1.4666275107005882, 1.454766339662402, 1.4412168366194857, 1.431022472489111, 1.4214151776347448, 1.4091203430405352, 1.3991375373357215, 1.3922278491730902, 1.388069256146655, 1.3743267371283754, 1.377109407171307, 1.3741925735098304, 1.3658448613603318, 1.355842899864918, 1.3515680683020848, 1.3434398329542654, 1.3433003099536969, 1.336316732059369, 1.338953245935451, 1.329367449849387, 1.3382382300366251, 1.3243991419442331, 1.3195535861555023, 1.3205557824757024, 1.3179799575068225, 1.3098073202641922, 1.3137983909781639, 1.3086076284478734, 1.3063869085607556, 1.3072092538575277, 1.3019292824397057, 1.2994434894639222, 1.3018638887717628, 1.2969715864176445, 1.2986078295414536, 1.3035951719198384, 1.293102798341698, 1.2928467836743898, 1.2887048783660513, 1.2902657807478157, 1.293537295718971, 1.2904807556048514, 1.2875379087695085, 1.287203920297085, 1.2826882632108658, 1.284347945866942, 1.28710207483231, 1.2784537662048148, 1.2790596797344425, 1.277504942469837, 1.275996592116881, 1.282153741782441, 1.283839284206903, 1.2801693265607843, 1.2748498270909567, 1.2770946784079724, 1.280260976249755, 1.2799172012951967, 1.2775054512640567, 1.2727356054797516, 1.2728690701771943, 1.2773306218087812, 1.269644239866552, 1.2750697946507443, 1.2762184906487168, 1.2744425780446538, 1.2763540526558805, 1.2735895315037216, 1.2780601303309052, 1.2795289890156785, 1.2793382580377664, 1.2758256410371531, 1.26881295737808, 1.274924453935809, 1.2738815393120007, 1.2781730724020903, 1.2726324021662545, 1.2755396608937404, 1.2768727216994837, 1.2723360876222132, 1.2759502986741535, 1.2767687814045263, 1.2791737179881741]
Model saved checkpoint!

====STARTING EVALUATION====
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∑–∞–º–µ–Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
diff_prev: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_updated: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; } 

Most common words:
 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ     606749
         (     370366
         )     370366
         .     174374
         ;     158794
         ,     101876
         {      80764
         }      80764
     VAR_1      79696
     VAR_2      54916 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
05 (
06 )
07 .
08 ;
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 43
—É–¥–∞–ª–µ–Ω–∏–µ 41184 17
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 37
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 606749 4
–ø–∞–¥–¥–∏–Ω–≥ 54790 14
Number of words (types): 759
Starting conducting edit representation visualization experiment for tufano_labeled_2d_representations.png...
Duration: 0:00:05.716794

Starting conducting edit representation visualization experiment for defects4j_2d_representations.png...
Duration: 0:00:01.253365

Starting conducting edit representation visualization experiment for test300_2d_representations.png...
Duration: 0:00:01.269829

Starting conducting edit representation visualization experiment for val300_2d_representations.png...
Duration: 0:00:01.196995

Starting conducting edit representation visualization experiment for train300_2d_representations.png...
Duration: 0:00:01.283984

Starting conducting edit representation visualization experiment for test_2d_representations.png...
Duration: 0:00:04.281254

Starting conducting edit representation visualization experiment for val_2d_representations.png...
Duration: 0:00:05.073324

Starting conducting edit representation visualization experiment for train5000_2d_representations.png...
Duration: 0:00:17.418315

Start conducting accuracy calculation experiment for Tufano Labeled Code Changes...
Top-1 accuracy: 49 / 388 = 0.12628865979381443
Top-3 accuracy: 93 / 388 = 0.23969072164948454
Top-5 accuracy: 104 / 388 = 0.26804123711340205
Top-10 accuracy: 132 / 388 = 0.3402061855670103
Top-50 accuracy: 177 / 388 = 0.45618556701030927
Duration: 0:01:27.870142

Start conducting accuracy calculation experiment for Defects4J...
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
Duration: 0:00:04.507693

Start conducting accuracy calculation experiment for Test dataset 300...
Top-1 accuracy: 29 / 300 = 0.09666666666666666
Top-3 accuracy: 50 / 300 = 0.16666666666666666
Top-5 accuracy: 58 / 300 = 0.19333333333333333
Top-10 accuracy: 69 / 300 = 0.23
Top-50 accuracy: 100 / 300 = 0.3333333333333333
Duration: 0:01:05.629912

Start conducting accuracy calculation experiment for Validation dataset 300...
Top-1 accuracy: 23 / 300 = 0.07666666666666666
Top-3 accuracy: 41 / 300 = 0.13666666666666666
Top-5 accuracy: 52 / 300 = 0.17333333333333334
Top-10 accuracy: 62 / 300 = 0.20666666666666667
Top-50 accuracy: 90 / 300 = 0.3
Duration: 0:01:05.393895

Start conducting accuracy calculation experiment for Train dataset 300...
Top-1 accuracy: 56 / 300 = 0.18666666666666668
Top-3 accuracy: 112 / 300 = 0.37333333333333335
Top-5 accuracy: 122 / 300 = 0.4066666666666667
Top-10 accuracy: 139 / 300 = 0.4633333333333333
Top-50 accuracy: 170 / 300 = 0.5666666666666667
Duration: 0:01:05.716622

Start conducting one shot learning experiment for Tufano Labeled Code Changes...
Top-1 accuracy on Tufano Labeled Code Changes for same edit representations: 7 / 64 = 0.109375
Top-3 accuracy on Tufano Labeled Code Changes for same edit representations: 15 / 64 = 0.234375
Top-5 accuracy on Tufano Labeled Code Changes for same edit representations: 15 / 64 = 0.234375
Top-10 accuracy on Tufano Labeled Code Changes for same edit representations: 18 / 64 = 0.28125
Top-50 accuracy on Tufano Labeled Code Changes for same edit representations: 23 / 64 = 0.359375

Top-1 accuracy on Tufano Labeled Code Changes for other edit representations: 41 / 324 = 0.12654320987654322
Top-3 accuracy on Tufano Labeled Code Changes for other edit representations: 78 / 324 = 0.24074074074074073
Top-5 accuracy on Tufano Labeled Code Changes for other edit representations: 91 / 324 = 0.2808641975308642
Top-10 accuracy on Tufano Labeled Code Changes for other edit representations: 114 / 324 = 0.35185185185185186
Top-50 accuracy on Tufano Labeled Code Changes for other edit representations: 156 / 324 = 0.48148148148148145
================
Correct Examples
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int VAR_1 , int type , int uid , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
[32mExample #2[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
[32mExample #3[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[32mExample #4[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
[32mExample #5[0m
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Pred: static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
[32mExample #6[0m
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
[32mExample #7[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . network object ) { return object . METHOD_1 ( ) ; }[0m
Trg : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
[32mExample #8[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[32mExample #9[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
[32mExample #10[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[32mExample #11[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
[32mExample #12[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
---------------
Class: Change return type
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
[32mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[32mExample #8[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[32mExample #9[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
[32mExample #4[0m
Src : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
[32mExample #5[0m
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Pred: private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < java.lang.String > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> void METHOD_1 ( int index , short value ) ;[0m
Pred: void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #2[0m
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> boolean METHOD_1 ( ) ;[0m
Pred: public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #3[0m
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #4[0m
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> float METHOD_1 ( int index ) ;[0m
Pred: public long METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
Trg : public <unk> void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
Pred: public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
Trg : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . get ( ) . project ) ; }[0m
Pred: public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
[31mExample #2[0m
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( address ) ) , value ) ; }[0m
Pred: final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
[31mExample #4[0m
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; }[0m
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return r ; }[0m
Pred: static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; }[0m
[31mExample #5[0m
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Pred: private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
---------------
Class: Add null check
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
Trg : public void run ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
Pred: public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
[31mExample #2[0m
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
[31mExample #3[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , true ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
[31mExample #2[0m
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . StorageDomain ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Pred: public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #4[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #9[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #12[0m
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
Pred: private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
[31mExample #15[0m
Src : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
Trg : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
Pred: private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
[31mExample #17[0m
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }[0m
Pred: public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
[31mExample #20[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
---------------
Class: Add statement,Remove thrown exception
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int VAR_1 , int type , int uid , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object returnValue , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #2[0m
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int netId ) throws TYPE_2 ;[0m
Pred: TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 . Id ( ) throws TYPE_2 ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Trg : public void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Pred: public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
[31mExample #4[0m
Src : public static <unk> void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
Trg : public static <unk> void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;[0m
Pred: public static void METHOD_1 ( long VAR_1 , long VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ; }[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
[31mExample #7[0m
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
Trg : void METHOD_1 ( int type , int VAR_2 ) ;[0m
Pred: void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ; }[0m
[31mExample #8[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
[31mExample #9[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #10[0m
Src : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ; }[0m
[31mExample #11[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
[31mExample #12[0m
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , null , null , null , false ) ; }[0m
[31mExample #14[0m
Src : <unk> boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Trg : <unk> boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Pred: protected boolean METHOD_1 ( int VAR_1 , long VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
[31mExample #15[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
[31mExample #16[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
[31mExample #17[0m
Src : void METHOD_1 ( boolean VAR_1 ) ;[0m
Trg : void METHOD_1 ( ) ;[0m
Pred: void METHOD_1 ( boolean VAR_1 ) { return METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #18[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , java.lang.String revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , STRING_1 , true , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
Pred: public void onSuccess ( java.lang.Object returnValue , java.lang.Object returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
---------------
Class: Add/Remove this qualifier
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
[31mExample #2[0m
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
---------------
Class: Broad method visibility
Golden example (False):
[31mExample #1[0m
Src : <unk> TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public <unk> TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_1 VAR_1 = new java.lang.String ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Pred: private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
[31mExample #3[0m
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Pred: protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
[31mExample #5[0m
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Pred: private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #6[0m
Src : private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Pred: private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
[31mExample #8[0m
Src : protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Trg : public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Pred: private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
[31mExample #10[0m
Src : private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Trg : protected boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Pred: private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
[31mExample #11[0m
Src : private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #12[0m
Src : protected TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Trg : public TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Pred: protected TYPE_1 . METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
[31mExample #13[0m
Src : protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Trg : public void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Pred: protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
[31mExample #14[0m
Src : private static <unk> void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Trg : public static <unk> void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Pred: private static void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) throws com.google.gwtorm.server.OrmException { return METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #15[0m
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Pred: protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Pred: protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return METHOD_3 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , VAR_2 ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
---------------
Class: Change method return value
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return false ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( ) { return false ; }[0m
Trg : public boolean METHOD_1 ( ) { return true ; }[0m
Pred: public boolean METHOD_1 ( ) { return false ; }[0m
[31mExample #3[0m
Src : protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
Trg : protected java.lang.String getRefName ( ) { return ref ; }[0m
Pred: protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
---------------
Class: Change method return value,Change return type
Golden example (False):
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
[31mExample #2[0m
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Pred: static long METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
[31mExample #3[0m
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Trg : private static org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Pred: private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
[31mExample #4[0m
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Pred: synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
[31mExample #5[0m
Src : private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Trg : private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Pred: private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
[31mExample #6[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . METHOD_1 ( ) . size ( ) ) ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return core ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
[31mExample #7[0m
Src : public static <unk> byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
Trg : public static <unk> byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
Pred: public static byte [ ] METHOD_1 ( int VAR_1 ) { if ( VAR_1 == null ) { return ; }[0m
[31mExample #8[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return ( java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + ( ) ; }[0m
[31mExample #9[0m
Src : <unk> void METHOD_1 ( int VAR_1 , int VAR_2 ) ;[0m
Trg : <unk> void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
Pred: public void METHOD_1 ( int VAR_1 , int VAR_2 ) throws com.google.gwtorm.server.OrmException { return false ; }[0m
[31mExample #10[0m
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: synchronized long METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #11[0m
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Pred: final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
[31mExample #12[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #13[0m
Src : public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
[31mExample #14[0m
Src : public static <unk> void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;[0m
Trg : public static <unk> void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
Pred: public static void METHOD_1 ( int VAR_1 ) throws TYPE_1 { return ; }[0m
[31mExample #15[0m
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Pred: synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
[31mExample #16[0m
Src : public static <unk> void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;[0m
Trg : public static <unk> void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
Pred: public static void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 { return ; }[0m
[31mExample #17[0m
Src : <unk> void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Trg : <unk> void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Pred: private void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) ; }[0m
Pred: protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #5[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = dao . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
[31mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
[31mExample #4[0m
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
---------------
Class: Forbid overriding: add final to method
Golden example (False):
[31mExample #1[0m
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Pred: public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Pred: public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
[31mExample #3[0m
Src : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
[31mExample #4[0m
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Pred: public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; } finally { VAR_1 . METHOD_2 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
---------------
Class: Narrow method visibility
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Pred: protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
[31mExample #3[0m
Src : protected synchronized void METHOD_1 ( ) { }[0m
Trg : public synchronized void METHOD_1 ( ) { }[0m
Pred: protected void METHOD_1 ( ) { }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( ) { return user ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { return user ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return user ; }[0m
[31mExample #5[0m
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Pred: protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
---------------
Class: Remove condition
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
[31mExample #3[0m
Src : public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
Trg : public static TYPE_1 getInstance ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
[31mExample #3[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
[31mExample #4[0m
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = storageDomain . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Pred: public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
[31mExample #5[0m
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }[0m
Pred: public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #6[0m
Src : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
Trg : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; }[0m
Pred: public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
[31mExample #7[0m
Src : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
Trg : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
Pred: public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
[31mExample #8[0m
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
[31mExample #10[0m
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
Pred: public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
[31mExample #11[0m
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
[31mExample #13[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , branch , null , null ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
[31mExample #9[0m
Src : public TYPE_1 create ( ) { return new TYPE_1 ( this , null ) ; }[0m
Trg : public TYPE_1 create ( ) { return new TYPE_1 ( this ) ; }[0m
Pred: public TYPE_1 create ( ) { return new TYPE_1 ( this , null ) ; }[0m
[31mExample #10[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
[31mExample #12[0m
Src : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) , null ) , false , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
[31mExample #16[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , version ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , version ) ; }[0m
[31mExample #17[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
[31mExample #22[0m
Src : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
[31mExample #23[0m
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 ) ; }[0m
Pred: public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws com.google.gwtorm.server.OrmException { final com.google.gwtorm.server.OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
[31mExample #25[0m
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
[31mExample #27[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
[31mExample #30[0m
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
---------------
Class: Remove redundant initialization
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
Trg : public void info ( java.lang.String msg ) { log ( TYPE_1 , msg ) ; }[0m
Pred: public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
[31mExample #3[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return - > > 0 ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , options ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.lang.String VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #7[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
[31mExample #9[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #11[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
Pred: public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( INT_2 ) ; } return INT_1 - ( - INT_2 - 1 ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
[31mExample #13[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
[31mExample #15[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
[31mExample #19[0m
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
Pred: public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
[31mExample #20[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } long VAR_2 = x - y ; return y ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
[31mExample #22[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #23[0m
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
[31mExample #25[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #26[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
[31mExample #27[0m
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }[0m
Pred: public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 ) { }[0m
Pred: public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
[31mExample #30[0m
Src : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
Trg : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
[31mExample #31[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { Main . METHOD_3 ( ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; }[0m
[31mExample #32[0m
Src : public static int METHOD_1 ( int arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - arg1 ) - VAR_1 ; }[0m
Trg : public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( - arg1 ) - VAR_1 ; }[0m
Pred: public static int METHOD_1 ( long arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - 1 ) - VAR_1 ; }[0m
[31mExample #33[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
[31mExample #34[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
[31mExample #35[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
[31mExample #36[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #37[0m
Src : public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
[31mExample #38[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
[31mExample #39[0m
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Pred: public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ) ( value ) ) ; }[0m
[31mExample #40[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
[31mExample #41[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.lang.String VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #42[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #43[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
[31mExample #44[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
[31mExample #45[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return v - 0 ; }[0m
[31mExample #46[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #47[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
[31mExample #48[0m
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
[31mExample #49[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
[31mExample #50[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
[31mExample #51[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
[31mExample #52[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
[31mExample #53[0m
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
Pred: public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ui / FLOAT_1 ; }[0m
[31mExample #54[0m
Src : public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Trg : public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Pred: public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - ( VAR_1 ) ; } long VAR_3 = - ( VAR_1 ) ; }[0m
[31mExample #55[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
[31mExample #56[0m
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }[0m
Pred: public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
[31mExample #57[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
[31mExample #58[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
[31mExample #59[0m
Src : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
Trg : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
Pred: protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
[31mExample #60[0m
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Pred: public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
[31mExample #61[0m
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
[31mExample #2[0m
Src : boolean METHOD_1 ( ) ;[0m
Trg : boolean validate ( ) ;[0m
Pred: boolean METHOD_1 ( ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; METHOD_2 ( ) ; }[0m
---------------
Class: Rename parameter
Golden example (False):
[31mExample #1[0m
Src : public <unk> float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public <unk> float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public java.lang.Runnable METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public <unk> boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public <unk> boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public void METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
Trg : public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
Pred: public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
[31mExample #3[0m
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
Pred: TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ; if ( ( VAR_1 ) == null ) { return ; }[0m
[31mExample #4[0m
Src : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) ;[0m
Trg : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version ) ;[0m
Pred: public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version ) { if ( value ) { return false ; }[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
Trg : private <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { java.lang.System.out.println ( STRING_1 ) ; } }[0m
Pred: public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < java.lang.String > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
[31mExample #4[0m
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_2 > ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
[31mExample #5[0m
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
[31mExample #6[0m
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Pred: protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
[31mExample #3[0m
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( address ) ) ) ; }[0m
Pred: final long METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , res . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , res . METHOD_4 ( ) ) ; }[0m
[31mExample #5[0m
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . isEqualTo ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
[31mExample #7[0m
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
[31mExample #11[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
[31mExample #13[0m
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
[31mExample #14[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getStoragePoolId ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
[31mExample #16[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
[31mExample #17[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . getStoragePoolId ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
[31mExample #18[0m
Src : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Trg : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }[0m
Pred: public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
[31mExample #19[0m
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
Pred: protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #20[0m
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }[0m
Pred: protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #22[0m
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #23[0m
Src : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
Trg : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . getName ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
[31mExample #24[0m
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #25[0m
Src : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_1 ( storage ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
[31mExample #26[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #27[0m
Src : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
---------------
Class: Replace statement
Golden example (False):
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
[31mExample #2[0m
Src : public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
Trg : public static long METHOD_1 ( ) { long VAR_1 = 10 ; int VAR_2 = 3 ; return VAR_1 & VAR_2 ; }[0m
Pred: public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
---------------
Class: unclear
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
Trg : protected <unk> byte METHOD_1 ( ) throws java.io.IOException ;[0m
Pred: protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
[31mExample #2[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
---------------
================
Duration: 0:02:51.055320

Start conducting one shot learning experiment for Defects4J...
Top-1 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-5 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-10 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-50 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0

Top-1 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-5 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-10 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-50 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Pred: public static long METHOD_1 ( long VAR_1 , long VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Pred: public static void METHOD_1 ( VAR_2 ) { this . HttpServletResponse = VAR_2 ; this . VAR_5 = VAR_3 ; this . VAR_5 = new TYPE_1 ( ) ; }[0m
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
[31mExample #1[0m
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Pred: void add ( android.os.Bundle VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
---------------
Class: ['condBlockRetAdd']
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null ) { return VAR_1 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . <unk> ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public TYPE_1 map ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( org.eclipse.jgit.lib.Repository VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Pred: boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
---------------
Class: ['notClassified']
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . <unk> ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Pred: public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . getReturnValue ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Pred: public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int i = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] [ VAR_2 [ i ] ; }[0m
---------------
Class: ['singleLine']
Golden example (False):
[31mExample #1[0m
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Pred: static float METHOD_1 ( long VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
[31mExample #2[0m
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Pred: private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / c ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / ret ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
---------------
Class: ['wrapsIf']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
Pred: public void METHOD_1 ( ) { if ( this . VAR_1 != null ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }[0m
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
---------------
Class: ['wrapsIfElse']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
---------------
================
Duration: 0:00:08.531590

Starting long experiments
Start conducting accuracy calculation experiment for Test dataset all...
Top-1 accuracy: 119 / 1098 = 0.10837887067395265
Top-3 accuracy: 228 / 1098 = 0.20765027322404372
Top-5 accuracy: 262 / 1098 = 0.23861566484517305
Top-10 accuracy: 303 / 1098 = 0.27595628415300544
Top-50 accuracy: 397 / 1098 = 0.36156648451730417
Duration: 0:03:58.852859

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset train 300...
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 11 / 300 = 0.03666666666666667
Top-5 accuracy: 17 / 300 = 0.056666666666666664
Top-10 accuracy: 23 / 300 = 0.07666666666666666
Top-50 accuracy: 42 / 300 = 0.14
Duration: 0:01:08.319343

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset val 300...
Top-1 accuracy: 2 / 300 = 0.006666666666666667
Top-3 accuracy: 11 / 300 = 0.03666666666666667
Top-5 accuracy: 14 / 300 = 0.04666666666666667
Top-10 accuracy: 20 / 300 = 0.06666666666666667
Top-50 accuracy: 36 / 300 = 0.12
Duration: 0:01:09.083616

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test 300...
Top-1 accuracy: 1 / 300 = 0.0033333333333333335
Top-3 accuracy: 10 / 300 = 0.03333333333333333
Top-5 accuracy: 17 / 300 = 0.056666666666666664
Top-10 accuracy: 26 / 300 = 0.08666666666666667
Top-50 accuracy: 45 / 300 = 0.15
Duration: 0:01:08.042954

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset train 300...
Top-1 accuracy: 1 / 300 = 0.0033333333333333335
Top-3 accuracy: 4 / 300 = 0.013333333333333334
Top-5 accuracy: 6 / 300 = 0.02
Top-10 accuracy: 7 / 300 = 0.023333333333333334
Top-50 accuracy: 14 / 300 = 0.04666666666666667
Duration: 0:01:05.741591

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset val 300...
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 1 / 300 = 0.0033333333333333335
Top-5 accuracy: 2 / 300 = 0.006666666666666667
Top-10 accuracy: 6 / 300 = 0.02
Top-50 accuracy: 14 / 300 = 0.04666666666666667
Duration: 0:01:05.928059

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test 300...
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 3 / 300 = 0.01
Top-5 accuracy: 5 / 300 = 0.016666666666666666
Top-10 accuracy: 8 / 300 = 0.02666666666666667
Top-50 accuracy: 19 / 300 = 0.06333333333333334
Duration: 0:01:05.594274

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset train 300...
Top-1 accuracy: 5 / 300 = 0.016666666666666666
Top-3 accuracy: 20 / 300 = 0.06666666666666667
Top-5 accuracy: 30 / 300 = 0.1
Top-10 accuracy: 41 / 300 = 0.13666666666666666
Top-50 accuracy: 68 / 300 = 0.22666666666666666
Duration: 0:01:07.817071

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset val 300...
Top-1 accuracy: 9 / 300 = 0.03
Top-3 accuracy: 24 / 300 = 0.08
Top-5 accuracy: 37 / 300 = 0.12333333333333334
Top-10 accuracy: 49 / 300 = 0.16333333333333333
Top-50 accuracy: 71 / 300 = 0.23666666666666666
Duration: 0:01:08.047880

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test 300...
Top-1 accuracy: 11 / 300 = 0.03666666666666667
Top-3 accuracy: 29 / 300 = 0.09666666666666666
Top-5 accuracy: 35 / 300 = 0.11666666666666667
Top-10 accuracy: 44 / 300 = 0.14666666666666667
Top-50 accuracy: 65 / 300 = 0.21666666666666667
Duration: 0:01:09.080369

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset train 300...
Top-1 accuracy: 56 / 300 = 0.18666666666666668
Top-3 accuracy: 112 / 300 = 0.37333333333333335
Top-5 accuracy: 122 / 300 = 0.4066666666666667
Top-10 accuracy: 139 / 300 = 0.4633333333333333
Top-50 accuracy: 170 / 300 = 0.5666666666666667
Duration: 0:01:05.675158

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset val 300...
Top-1 accuracy: 23 / 300 = 0.07666666666666666
Top-3 accuracy: 41 / 300 = 0.13666666666666666
Top-5 accuracy: 52 / 300 = 0.17333333333333334
Top-10 accuracy: 62 / 300 = 0.20666666666666667
Top-50 accuracy: 90 / 300 = 0.3
Duration: 0:01:05.071957

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test 300...
Top-1 accuracy: 29 / 300 = 0.09666666666666666
Top-3 accuracy: 50 / 300 = 0.16666666666666666
Top-5 accuracy: 58 / 300 = 0.19333333333333333
Top-10 accuracy: 69 / 300 = 0.23
Top-50 accuracy: 100 / 300 = 0.3333333333333333
Duration: 0:01:05.628380

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test...
Top-1 accuracy: 16 / 5835 = 0.0027420736932305054
Top-3 accuracy: 173 / 5835 = 0.02964867180805484
Top-5 accuracy: 247 / 5835 = 0.04233076263924593
Top-10 accuracy: 386 / 5835 = 0.06615252784918595
Top-50 accuracy: 691 / 5835 = 0.11842330762639246
Duration: 0:22:01.323277

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test...
Top-1 accuracy: 20 / 6545 = 0.0030557677616501145
Top-3 accuracy: 106 / 6545 = 0.016195569136745608
Top-5 accuracy: 147 / 6545 = 0.022459893048128343
Top-10 accuracy: 212 / 6545 = 0.032391138273491216
Top-50 accuracy: 375 / 6545 = 0.057295645530939646
Duration: 0:23:58.788443

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test...
Top-1 accuracy: 57 / 1077 = 0.052924791086350974
Top-3 accuracy: 131 / 1077 = 0.12163416898792943
Top-5 accuracy: 158 / 1077 = 0.1467038068709378
Top-10 accuracy: 208 / 1077 = 0.19312906220984216
Top-50 accuracy: 302 / 1077 = 0.28040854224698236
Duration: 0:04:02.237746

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test...
Top-1 accuracy: 119 / 1098 = 0.10837887067395265
Top-3 accuracy: 228 / 1098 = 0.20765027322404372
Top-5 accuracy: 262 / 1098 = 0.23861566484517305
Top-10 accuracy: 303 / 1098 = 0.27595628415300544
Top-50 accuracy: 397 / 1098 = 0.36156648451730417
Duration: 0:03:57.594712

