
====STARTING TRAINING====
{'ADDITION_TOKEN': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 50,
 'DATASET_ROOT': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': '—É–¥–∞–ª–µ–Ω–∏–µ',
 'DEVICE': device(type='cuda', index=0),
 'DIVERSITY_STRENGTH': None,
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 25,
 'EDIT_REPRESENTATION_SIZE': 16,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LEAVE_ONLY_CHANGED': True,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_GROUPS': 1,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '../../../embeddings-for-code-diffs-data/experiment_21/',
 'PADDING_TOKEN': '–ø–∞–¥–¥–∏–Ω–≥',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': '–∑–∞–º–µ–Ω–∞',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEACHER_FORCING_RATIO': 0.9,
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TOP_K': [1, 3, 5, 10, 50],
 'TSNE_BATCH_SIZE': 1024,
 'TUFANO_BUG_FIXES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'TUFANO_BUG_FIXES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/50_100',
 'TUFANO_CODE_CHANGES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'TUFANO_CODE_CHANGES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'TUFANO_LABELED_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'TUFANO_LABELED_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/50_100',
 'UNCHANGED_TOKEN': '—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'USE_EDIT_REPRESENTATION': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: –∑–∞–º–µ–Ω–∞
diff_prev: org.junit.Assert.assertEquals
diff_updated: assertEquals 

Most common words:
         )     194026
         (     193976
         .      92332
         ;      82530
   –ø–∞–¥–¥–∏–Ω–≥      54790
         ,      54180
         {      42036
         }      41868
     VAR_1      41750
  —É–¥–∞–ª–µ–Ω–∏–µ      41184 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 )
05 (
06 .
07 ;
08 –ø–∞–¥–¥–∏–Ω–≥
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 35
—É–¥–∞–ª–µ–Ω–∏–µ 41184 13
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 23
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 54790 8
Number of words (types): 758
Epoch 0 / 1000
Epoch Step: 5 / 138 Loss: 390.1081848144531 Tokens per Sec: 16598.303529287572
Epoch Step: 10 / 138 Loss: 472.39263916015625 Tokens per Sec: 24537.0998167788
Epoch Step: 15 / 138 Loss: 592.8818359375 Tokens per Sec: 26031.624332796615
Epoch Step: 20 / 138 Loss: 457.9972839355469 Tokens per Sec: 24985.621691329976
Epoch Step: 25 / 138 Loss: 379.8728332519531 Tokens per Sec: 24257.644125431907
Epoch Step: 30 / 138 Loss: 391.8104553222656 Tokens per Sec: 25260.2437045068
Epoch Step: 35 / 138 Loss: 318.8638000488281 Tokens per Sec: 24968.477261004093
Epoch Step: 40 / 138 Loss: 339.5249328613281 Tokens per Sec: 27008.657275519123
Epoch Step: 45 / 138 Loss: 385.6800231933594 Tokens per Sec: 26414.21312643659
Epoch Step: 50 / 138 Loss: 262.6278381347656 Tokens per Sec: 27079.897625026642
Epoch Step: 55 / 138 Loss: 334.59210205078125 Tokens per Sec: 26311.995754413674
Epoch Step: 60 / 138 Loss: 221.23240661621094 Tokens per Sec: 26014.61046666873
Epoch Step: 65 / 138 Loss: 329.57196044921875 Tokens per Sec: 27789.39328289191
Epoch Step: 70 / 138 Loss: 245.33010864257812 Tokens per Sec: 24691.934464490772
Epoch Step: 75 / 138 Loss: 228.91758728027344 Tokens per Sec: 25336.39416253143
Epoch Step: 80 / 138 Loss: 227.3660888671875 Tokens per Sec: 26410.437571356364
Epoch Step: 85 / 138 Loss: 304.8514099121094 Tokens per Sec: 26031.319926595756
Epoch Step: 90 / 138 Loss: 243.85049438476562 Tokens per Sec: 24146.927207957986
Epoch Step: 95 / 138 Loss: 232.74795532226562 Tokens per Sec: 24903.539442819714
Epoch Step: 100 / 138 Loss: 248.91807556152344 Tokens per Sec: 25480.306770582476
Epoch Step: 105 / 138 Loss: 224.50955200195312 Tokens per Sec: 25280.743473931823
Epoch Step: 110 / 138 Loss: 250.3502960205078 Tokens per Sec: 24535.22005813825
Epoch Step: 115 / 138 Loss: 297.2195129394531 Tokens per Sec: 24184.690930486922
Epoch Step: 120 / 138 Loss: 389.8508605957031 Tokens per Sec: 23065.59641510321
Epoch Step: 125 / 138 Loss: 309.5475769042969 Tokens per Sec: 25223.638823016536
Epoch Step: 130 / 138 Loss: 210.1815643310547 Tokens per Sec: 23909.568515268973
Epoch Step: 135 / 138 Loss: 192.64935302734375 Tokens per Sec: 24246.65635730255
Epoch ended with duration 0:00:25.666301
Train perplexity: 74.66958492241193
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void ( ) ; } ( ) ; } ) ; }[0m
Epoch ended with duration 0:00:01.181442
Validation perplexity: 27.419299201453256
Model saved best_on_validation!
Model saved checkpoint!
Epoch 1 / 1000
Epoch Step: 5 / 138 Loss: 190.20379638671875 Tokens per Sec: 25456.112725818406
Epoch Step: 10 / 138 Loss: 229.02951049804688 Tokens per Sec: 27697.05943746902
Epoch Step: 15 / 138 Loss: 255.86358642578125 Tokens per Sec: 23846.5577503882
Epoch Step: 20 / 138 Loss: 261.2041931152344 Tokens per Sec: 25623.611491305244
Epoch Step: 25 / 138 Loss: 239.61659240722656 Tokens per Sec: 25893.733120802364
Epoch Step: 30 / 138 Loss: 301.2964782714844 Tokens per Sec: 26786.096900684093
Epoch Step: 35 / 138 Loss: 173.59925842285156 Tokens per Sec: 24748.611222072504
Epoch Step: 40 / 138 Loss: 169.87281799316406 Tokens per Sec: 27280.70679616961
Epoch Step: 45 / 138 Loss: 252.0324249267578 Tokens per Sec: 27460.43674890936
Epoch Step: 50 / 138 Loss: 188.91355895996094 Tokens per Sec: 24715.771417048498
Epoch Step: 55 / 138 Loss: 209.54537963867188 Tokens per Sec: 25723.936377653266
Epoch Step: 60 / 138 Loss: 212.3450164794922 Tokens per Sec: 26957.819501625898
Epoch Step: 65 / 138 Loss: 251.6392059326172 Tokens per Sec: 26800.53349610928
Epoch Step: 70 / 138 Loss: 204.2028045654297 Tokens per Sec: 24491.144112463193
Epoch Step: 75 / 138 Loss: 245.6514434814453 Tokens per Sec: 25312.981180462626
Epoch Step: 80 / 138 Loss: 281.3415832519531 Tokens per Sec: 25057.620484946932
Epoch Step: 85 / 138 Loss: 309.35528564453125 Tokens per Sec: 24232.675045887732
Epoch Step: 90 / 138 Loss: 273.02935791015625 Tokens per Sec: 25647.195118937896
Epoch Step: 95 / 138 Loss: 288.6784973144531 Tokens per Sec: 25710.983744466983
Epoch Step: 100 / 138 Loss: 224.47023010253906 Tokens per Sec: 24959.242584555366
Epoch Step: 105 / 138 Loss: 223.7772674560547 Tokens per Sec: 23031.901718976344
Epoch Step: 110 / 138 Loss: 198.57273864746094 Tokens per Sec: 23915.81874684879
Epoch Step: 115 / 138 Loss: 373.3770446777344 Tokens per Sec: 25135.225967383925
Epoch Step: 120 / 138 Loss: 264.4995422363281 Tokens per Sec: 24653.788716105235
Epoch Step: 125 / 138 Loss: 249.78025817871094 Tokens per Sec: 25328.444743680735
Epoch Step: 130 / 138 Loss: 193.42259216308594 Tokens per Sec: 24320.239561623708
Epoch Step: 135 / 138 Loss: 201.27894592285156 Tokens per Sec: 25054.024676476856
Epoch ended with duration 0:00:25.183263
Train perplexity: 24.694227267172327
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 ( ) { TYPE_1 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 ( ) { TYPE_1 ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 ( ) { TYPE_1 ( ) ; }[0m
Epoch ended with duration 0:00:01.214626
Validation perplexity: 20.895979850860776
Model saved best_on_validation!
Epoch 2 / 1000
Epoch Step: 5 / 138 Loss: 189.4658203125 Tokens per Sec: 25535.736642446267
Epoch Step: 10 / 138 Loss: 230.52725219726562 Tokens per Sec: 25368.55286563927
Epoch Step: 15 / 138 Loss: 163.3249053955078 Tokens per Sec: 23967.045183632174
Epoch Step: 20 / 138 Loss: 197.73019409179688 Tokens per Sec: 25082.848096213344
Epoch Step: 25 / 138 Loss: 157.79530334472656 Tokens per Sec: 24042.94929470419
Epoch Step: 30 / 138 Loss: 143.7031707763672 Tokens per Sec: 25353.76244053242
Epoch Step: 35 / 138 Loss: 210.74478149414062 Tokens per Sec: 25503.347636819584
Epoch Step: 40 / 138 Loss: 258.0626220703125 Tokens per Sec: 25751.879973497584
Epoch Step: 45 / 138 Loss: 188.89137268066406 Tokens per Sec: 25809.189980961288
Epoch Step: 50 / 138 Loss: 181.7310028076172 Tokens per Sec: 26352.109024849324
Epoch Step: 55 / 138 Loss: 182.26504516601562 Tokens per Sec: 26777.918143180854
Epoch Step: 60 / 138 Loss: 165.02044677734375 Tokens per Sec: 25300.75998910466
Epoch Step: 65 / 138 Loss: 246.71995544433594 Tokens per Sec: 28116.798995725858
Epoch Step: 70 / 138 Loss: 219.64535522460938 Tokens per Sec: 27249.42078668353
Epoch Step: 75 / 138 Loss: 180.29327392578125 Tokens per Sec: 25048.860269494842
Epoch Step: 80 / 138 Loss: 158.9446258544922 Tokens per Sec: 26619.24268348475
Epoch Step: 85 / 138 Loss: 229.5038604736328 Tokens per Sec: 27536.55982080791
Epoch Step: 90 / 138 Loss: 200.09976196289062 Tokens per Sec: 28775.418866305758
Epoch Step: 95 / 138 Loss: 212.88653564453125 Tokens per Sec: 23469.15679754397
Epoch Step: 100 / 138 Loss: 143.74325561523438 Tokens per Sec: 27135.029695318284
Epoch Step: 105 / 138 Loss: 225.52767944335938 Tokens per Sec: 23602.583397462604
Epoch Step: 110 / 138 Loss: 249.1944122314453 Tokens per Sec: 21617.10906895022
Epoch Step: 115 / 138 Loss: 203.28123474121094 Tokens per Sec: 24661.828394628497
Epoch Step: 120 / 138 Loss: 191.5899200439453 Tokens per Sec: 24404.298268433402
Epoch Step: 125 / 138 Loss: 236.9764862060547 Tokens per Sec: 24079.0549774669
Epoch Step: 130 / 138 Loss: 229.05145263671875 Tokens per Sec: 25355.57346047789
Epoch Step: 135 / 138 Loss: 175.5127410888672 Tokens per Sec: 24132.663101931135
Epoch ended with duration 0:00:25.137391
Train perplexity: 17.197963641321092
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 ( VAR_1 ) { if ( ( ) ; }[0m
Epoch ended with duration 0:00:01.208743
Validation perplexity: 14.383051024171989
Model saved best_on_validation!
Epoch 3 / 1000
Epoch Step: 5 / 138 Loss: 201.95550537109375 Tokens per Sec: 26843.417533475673
Epoch Step: 10 / 138 Loss: 163.28395080566406 Tokens per Sec: 26382.10720256858
Epoch Step: 15 / 138 Loss: 230.89012145996094 Tokens per Sec: 28279.580360172473
Epoch Step: 20 / 138 Loss: 177.2390594482422 Tokens per Sec: 25428.90158506174
Epoch Step: 25 / 138 Loss: 204.65480041503906 Tokens per Sec: 26774.97503191953
Epoch Step: 30 / 138 Loss: 170.52264404296875 Tokens per Sec: 26616.997178939386
Epoch Step: 35 / 138 Loss: 134.94601440429688 Tokens per Sec: 26155.641178118018
Epoch Step: 40 / 138 Loss: 198.5989990234375 Tokens per Sec: 26447.794012263465
Epoch Step: 45 / 138 Loss: 130.7547149658203 Tokens per Sec: 23623.60735485739
Epoch Step: 50 / 138 Loss: 231.18519592285156 Tokens per Sec: 25350.135093650988
Epoch Step: 55 / 138 Loss: 158.02684020996094 Tokens per Sec: 25316.896512636828
Epoch Step: 60 / 138 Loss: 223.98533630371094 Tokens per Sec: 26631.757810709678
Epoch Step: 65 / 138 Loss: 322.2889709472656 Tokens per Sec: 27350.32007653318
Epoch Step: 70 / 138 Loss: 313.117919921875 Tokens per Sec: 23724.644664594773
Epoch Step: 75 / 138 Loss: 161.95626831054688 Tokens per Sec: 23704.0843930937
Epoch Step: 80 / 138 Loss: 222.91310119628906 Tokens per Sec: 26001.580594607556
Epoch Step: 85 / 138 Loss: 383.6939392089844 Tokens per Sec: 26269.612091176466
Epoch Step: 90 / 138 Loss: 181.85011291503906 Tokens per Sec: 25482.08106083724
Epoch Step: 95 / 138 Loss: 250.44070434570312 Tokens per Sec: 26781.75714675804
Epoch Step: 100 / 138 Loss: 185.9345245361328 Tokens per Sec: 25328.148030982364
Epoch Step: 105 / 138 Loss: 193.87852478027344 Tokens per Sec: 25831.518491919385
Epoch Step: 110 / 138 Loss: 126.65853118896484 Tokens per Sec: 23901.72680884162
Epoch Step: 115 / 138 Loss: 163.70620727539062 Tokens per Sec: 24094.08903045736
Epoch Step: 120 / 138 Loss: 135.40773010253906 Tokens per Sec: 23946.84140379279
Epoch Step: 125 / 138 Loss: 206.28041076660156 Tokens per Sec: 25510.038396172265
Epoch Step: 130 / 138 Loss: 134.67543029785156 Tokens per Sec: 23733.41788407048
Epoch Step: 135 / 138 Loss: 145.0856170654297 Tokens per Sec: 24473.436065477592
Epoch ended with duration 0:00:25.092335
Train perplexity: 13.348164860200411
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( VAR_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_2 , VAR_2 , VAR_2 , VAR_3 , VAR_2 , VAR_2 , VAR_3 , VAR_2 , VAR_2 , VAR_3 , VAR_2 , VAR_2 , VAR_3 , VAR_2 , VAR_2 , VAR_3 , VAR_2 , VAR_2 , VAR_3 , VAR_2 , VAR_2 , VAR_3 , VAR_2 , VAR_2 , VAR_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( ) ) ; if ( ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( VAR_1 ) { if ( ( ) ) ; if ( ( ) ) ; }[0m
Epoch ended with duration 0:00:01.202748
Validation perplexity: 15.148307681294941
Epoch 4 / 1000
Epoch Step: 5 / 138 Loss: 175.16957092285156 Tokens per Sec: 24817.106461455995
Epoch Step: 10 / 138 Loss: 128.2687530517578 Tokens per Sec: 26950.55666659602
Epoch Step: 15 / 138 Loss: 192.4513397216797 Tokens per Sec: 23280.076506259826
Epoch Step: 20 / 138 Loss: 195.42491149902344 Tokens per Sec: 25585.096006846
Epoch Step: 25 / 138 Loss: 136.90203857421875 Tokens per Sec: 27083.782460532108
Epoch Step: 30 / 138 Loss: 122.70205688476562 Tokens per Sec: 27938.030221254136
Epoch Step: 35 / 138 Loss: 148.14256286621094 Tokens per Sec: 26261.646798851674
Epoch Step: 40 / 138 Loss: 198.7554473876953 Tokens per Sec: 26258.81114580966
Epoch Step: 45 / 138 Loss: 162.06256103515625 Tokens per Sec: 23508.99043907335
Epoch Step: 50 / 138 Loss: 163.2081756591797 Tokens per Sec: 29350.03556614975
Epoch Step: 55 / 138 Loss: 188.81979370117188 Tokens per Sec: 26774.8157886745
Epoch Step: 60 / 138 Loss: 218.73812866210938 Tokens per Sec: 26973.66819786277
Epoch Step: 65 / 138 Loss: 145.8526611328125 Tokens per Sec: 24440.19839642369
Epoch Step: 70 / 138 Loss: 283.27984619140625 Tokens per Sec: 23601.475769964112
Epoch Step: 75 / 138 Loss: 215.35243225097656 Tokens per Sec: 27408.171336814907
Epoch Step: 80 / 138 Loss: 212.3192138671875 Tokens per Sec: 26138.724939062224
Epoch Step: 85 / 138 Loss: 163.0577850341797 Tokens per Sec: 26511.647097137105
Epoch Step: 90 / 138 Loss: 191.339111328125 Tokens per Sec: 26206.62357360903
Epoch Step: 95 / 138 Loss: 194.22518920898438 Tokens per Sec: 25606.72577300814
Epoch Step: 100 / 138 Loss: 369.2421875 Tokens per Sec: 24936.197866494043
Epoch Step: 105 / 138 Loss: 161.88058471679688 Tokens per Sec: 24779.43492812232
Epoch Step: 110 / 138 Loss: 202.58840942382812 Tokens per Sec: 23177.738304728296
Epoch Step: 115 / 138 Loss: 408.1602783203125 Tokens per Sec: 24079.447113395934
Epoch Step: 120 / 138 Loss: 210.86724853515625 Tokens per Sec: 23967.686969119302
Epoch Step: 125 / 138 Loss: 222.43289184570312 Tokens per Sec: 20927.0878497104
Epoch Step: 130 / 138 Loss: 364.9019775390625 Tokens per Sec: 23384.557887261173
Epoch Step: 135 / 138 Loss: 157.62841796875 Tokens per Sec: 25003.950612572018
Epoch ended with duration 0:00:25.161585
Train perplexity: 12.779939946646955
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , VAR_1 , VAR_1 , VAR_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( VAR_1 , VAR_1 ) { if ( ( ) ) ; if ( ( ) ) { return ( ( ) ) ; } ) ; } ( ( ) ) ; } ) ; } ) ; } ) ; }[0m
Epoch ended with duration 0:00:01.183286
Validation perplexity: 9.650828985943487
Model saved best_on_validation!
Epoch 5 / 1000
Epoch Step: 5 / 138 Loss: 212.03379821777344 Tokens per Sec: 21386.438843483025
Epoch Step: 10 / 138 Loss: 149.44520568847656 Tokens per Sec: 26111.517689829885
Epoch Step: 15 / 138 Loss: 179.91415405273438 Tokens per Sec: 28456.420615593113
Epoch Step: 20 / 138 Loss: 188.50860595703125 Tokens per Sec: 26079.187855677643
Epoch Step: 25 / 138 Loss: 206.11778259277344 Tokens per Sec: 27670.204042193236
Epoch Step: 30 / 138 Loss: 167.98072814941406 Tokens per Sec: 26789.363240362505
Epoch Step: 35 / 138 Loss: 188.228515625 Tokens per Sec: 26517.384571548482
Epoch Step: 40 / 138 Loss: 132.5321807861328 Tokens per Sec: 26280.55277913459
Epoch Step: 45 / 138 Loss: 191.98655700683594 Tokens per Sec: 26306.429715961494
Epoch Step: 50 / 138 Loss: 128.39935302734375 Tokens per Sec: 22156.852436548623
Epoch Step: 55 / 138 Loss: 193.66502380371094 Tokens per Sec: 24402.403338837597
Epoch Step: 60 / 138 Loss: 119.50708770751953 Tokens per Sec: 25315.20595746083
Epoch Step: 65 / 138 Loss: 253.9595184326172 Tokens per Sec: 24209.55429733969
Epoch Step: 70 / 138 Loss: 153.98489379882812 Tokens per Sec: 27204.11384956021
Epoch Step: 75 / 138 Loss: 143.1683349609375 Tokens per Sec: 27114.901431149112
Epoch Step: 80 / 138 Loss: 115.10271453857422 Tokens per Sec: 26214.919088619627
Epoch Step: 85 / 138 Loss: 139.24850463867188 Tokens per Sec: 24779.27823145731
Epoch Step: 90 / 138 Loss: 177.484375 Tokens per Sec: 27305.987980855058
Epoch Step: 95 / 138 Loss: 160.6699676513672 Tokens per Sec: 26954.25151946031
Epoch Step: 100 / 138 Loss: 156.57955932617188 Tokens per Sec: 25604.26485793166
Epoch Step: 105 / 138 Loss: 209.48880004882812 Tokens per Sec: 21995.778221481138
Epoch Step: 110 / 138 Loss: 114.02542877197266 Tokens per Sec: 24751.52996259505
Epoch Step: 115 / 138 Loss: 121.40397644042969 Tokens per Sec: 23936.47976016861
Epoch Step: 120 / 138 Loss: 158.81158447265625 Tokens per Sec: 24416.177662180184
Epoch Step: 125 / 138 Loss: 119.61238098144531 Tokens per Sec: 24130.781794324565
Epoch Step: 130 / 138 Loss: 128.99468994140625 Tokens per Sec: 24120.40640984863
Epoch Step: 135 / 138 Loss: 133.2429962158203 Tokens per Sec: 24950.546786394436
Epoch ended with duration 0:00:25.210406
Train perplexity: 11.53322167669084
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 > VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ) ) { if ( ( ) ) { return ( ( ) ) ; if ( ( ( ) ) ) ( ( ) ) ( ( ) ) ) ; } ) ; }[0m
Epoch ended with duration 0:00:01.198729
Validation perplexity: 11.782468490828991
Model saved checkpoint!
Epoch 6 / 1000
Epoch Step: 5 / 138 Loss: 142.22378540039062 Tokens per Sec: 26436.476688106297
Epoch Step: 10 / 138 Loss: 205.29217529296875 Tokens per Sec: 26712.14128863916
Epoch Step: 15 / 138 Loss: 131.26084899902344 Tokens per Sec: 25514.618409384737
Epoch Step: 20 / 138 Loss: 161.10684204101562 Tokens per Sec: 27058.675334929918
Epoch Step: 25 / 138 Loss: 167.49644470214844 Tokens per Sec: 25119.122273421708
Epoch Step: 30 / 138 Loss: 117.07765197753906 Tokens per Sec: 27495.336992101045
Epoch Step: 35 / 138 Loss: 147.35586547851562 Tokens per Sec: 25480.717995783783
Epoch Step: 40 / 138 Loss: 137.0736083984375 Tokens per Sec: 26896.137668028132
Epoch Step: 45 / 138 Loss: 239.91336059570312 Tokens per Sec: 24401.237858021203
Epoch Step: 50 / 138 Loss: 137.7845458984375 Tokens per Sec: 26517.674851033433
Epoch Step: 55 / 138 Loss: 168.47117614746094 Tokens per Sec: 28382.5501428146
Epoch Step: 60 / 138 Loss: 155.29458618164062 Tokens per Sec: 26781.29237359079
Epoch Step: 65 / 138 Loss: 142.0172576904297 Tokens per Sec: 24582.51397841176
Epoch Step: 70 / 138 Loss: 171.78469848632812 Tokens per Sec: 26242.33423663437
Epoch Step: 75 / 138 Loss: 174.1126251220703 Tokens per Sec: 25319.478493482045
Epoch Step: 80 / 138 Loss: 133.6886749267578 Tokens per Sec: 24702.555910446765
Epoch Step: 85 / 138 Loss: 196.66888427734375 Tokens per Sec: 27560.94490412842
Epoch Step: 90 / 138 Loss: 297.7924499511719 Tokens per Sec: 23188.323069135728
Epoch Step: 95 / 138 Loss: 148.280517578125 Tokens per Sec: 25302.963468447706
Epoch Step: 100 / 138 Loss: 144.87596130371094 Tokens per Sec: 24621.806390645932
Epoch Step: 105 / 138 Loss: 190.9279022216797 Tokens per Sec: 25144.35684958919
Epoch Step: 110 / 138 Loss: 174.90536499023438 Tokens per Sec: 23997.52302245352
Epoch Step: 115 / 138 Loss: 150.77505493164062 Tokens per Sec: 21278.177610757248
Epoch Step: 120 / 138 Loss: 135.87313842773438 Tokens per Sec: 24540.462452490323
Epoch Step: 125 / 138 Loss: 132.26348876953125 Tokens per Sec: 24030.965696316438
Epoch Step: 130 / 138 Loss: 156.3673553466797 Tokens per Sec: 24251.114858362427
Epoch Step: 135 / 138 Loss: 109.71492004394531 Tokens per Sec: 25407.67794603106
Epoch ended with duration 0:00:25.128033
Train perplexity: 11.406831059274555
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String > VAR_1 = new TYPE_1 ( ) { TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 . METHOD_2 ( ) ) ; if ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , VAR_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ) ) ) ( ( ( ) ) ) ( ( ( ) ) ) ( ( ( ) ) ) ( ( ) ) ) ; }[0m
Epoch ended with duration 0:00:01.187000
Validation perplexity: 8.93438542633707
Model saved best_on_validation!
Epoch 7 / 1000
Epoch Step: 5 / 138 Loss: 154.64840698242188 Tokens per Sec: 25862.166378332426
Epoch Step: 10 / 138 Loss: 137.54196166992188 Tokens per Sec: 25812.521419658806
Epoch Step: 15 / 138 Loss: 174.8734130859375 Tokens per Sec: 24293.748934732386
Epoch Step: 20 / 138 Loss: 141.47276306152344 Tokens per Sec: 28789.26435293753
Epoch Step: 25 / 138 Loss: 140.36582946777344 Tokens per Sec: 25196.255637043883
Epoch Step: 30 / 138 Loss: 127.09163665771484 Tokens per Sec: 25510.94043510049
Epoch Step: 35 / 138 Loss: 127.44422149658203 Tokens per Sec: 27629.08885300958
Epoch Step: 40 / 138 Loss: 135.5420379638672 Tokens per Sec: 24573.303016329708
Epoch Step: 45 / 138 Loss: 150.78350830078125 Tokens per Sec: 26351.460738701284
Epoch Step: 50 / 138 Loss: 199.87710571289062 Tokens per Sec: 27992.793807861588
Epoch Step: 55 / 138 Loss: 181.09432983398438 Tokens per Sec: 26608.38807889058
Epoch Step: 60 / 138 Loss: 118.95958709716797 Tokens per Sec: 25430.65733655138
Epoch Step: 65 / 138 Loss: 126.26518249511719 Tokens per Sec: 25284.93462445285
Epoch Step: 70 / 138 Loss: 185.87466430664062 Tokens per Sec: 25330.225093511603
Epoch Step: 75 / 138 Loss: 194.53826904296875 Tokens per Sec: 27909.75417133978
Epoch Step: 80 / 138 Loss: 115.37686920166016 Tokens per Sec: 26587.868054101633
Epoch Step: 85 / 138 Loss: 144.6092987060547 Tokens per Sec: 26360.274756616924
Epoch Step: 90 / 138 Loss: 179.9604949951172 Tokens per Sec: 26464.17810641555
Epoch Step: 95 / 138 Loss: 126.08219909667969 Tokens per Sec: 26196.679710645214
Epoch Step: 100 / 138 Loss: 127.13560485839844 Tokens per Sec: 24342.736409990262
Epoch Step: 105 / 138 Loss: 131.73101806640625 Tokens per Sec: 23484.1550229695
Epoch Step: 110 / 138 Loss: 158.0195770263672 Tokens per Sec: 24702.923145685385
Epoch Step: 115 / 138 Loss: 352.6447448730469 Tokens per Sec: 24840.440424750945
Epoch Step: 120 / 138 Loss: 127.03971099853516 Tokens per Sec: 24395.268927857484
Epoch Step: 125 / 138 Loss: 392.5889587402344 Tokens per Sec: 21819.421770324105
Epoch Step: 130 / 138 Loss: 119.6927490234375 Tokens per Sec: 23575.68190194744
Epoch Step: 135 / 138 Loss: 112.08155822753906 Tokens per Sec: 24324.398739225857
Epoch ended with duration 0:00:24.987681
Train perplexity: 9.750003550037253
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 = new TYPE_2 > ( ) ; if ( VAR_2 . METHOD_2 ( ) ) { return new TYPE_2 ( ) ; } return new TYPE_2 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_1 , java.lang.String VAR_1 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) { if ( ( ( ( ( ( ( ( ) ) ) ) ) { return null ) { return ( ( ( ( ( ) ) ) ; }[0m
Epoch ended with duration 0:00:01.177515
Validation perplexity: 9.130412638698582
Epoch 8 / 1000
Epoch Step: 5 / 138 Loss: 164.5708465576172 Tokens per Sec: 25495.521491675405
Epoch Step: 10 / 138 Loss: 366.97381591796875 Tokens per Sec: 25077.879104668384
Epoch Step: 15 / 138 Loss: 109.20064544677734 Tokens per Sec: 23412.802803264698
Epoch Step: 20 / 138 Loss: 279.0531311035156 Tokens per Sec: 24277.31632507998
Epoch Step: 25 / 138 Loss: 132.85691833496094 Tokens per Sec: 26371.262451708004
Epoch Step: 30 / 138 Loss: 117.70221710205078 Tokens per Sec: 27149.7101257712
Epoch Step: 35 / 138 Loss: 155.27008056640625 Tokens per Sec: 28026.935813715707
Epoch Step: 40 / 138 Loss: 107.23773193359375 Tokens per Sec: 25146.134653325797
Epoch Step: 45 / 138 Loss: 115.02356719970703 Tokens per Sec: 26095.563354468806
Epoch Step: 50 / 138 Loss: 185.54531860351562 Tokens per Sec: 27067.476678881092
Epoch Step: 55 / 138 Loss: 127.20622253417969 Tokens per Sec: 24773.04649704179
Epoch Step: 60 / 138 Loss: 180.5636749267578 Tokens per Sec: 26886.27603984752
Epoch Step: 65 / 138 Loss: 153.0161590576172 Tokens per Sec: 26503.96562256539
Epoch Step: 70 / 138 Loss: 119.16436004638672 Tokens per Sec: 24737.720541759692
Epoch Step: 75 / 138 Loss: 321.04388427734375 Tokens per Sec: 25051.258306318134
Epoch Step: 80 / 138 Loss: 102.63057708740234 Tokens per Sec: 26700.591480849358
Epoch Step: 85 / 138 Loss: 114.28352355957031 Tokens per Sec: 28043.39438034478
Epoch Step: 90 / 138 Loss: 113.21450805664062 Tokens per Sec: 27975.700583024547
Epoch Step: 95 / 138 Loss: 114.0500717163086 Tokens per Sec: 25157.858693229944
Epoch Step: 100 / 138 Loss: 118.94781494140625 Tokens per Sec: 27579.844276332944
Epoch Step: 105 / 138 Loss: 201.8804473876953 Tokens per Sec: 22075.630455504936
Epoch Step: 110 / 138 Loss: 173.0985107421875 Tokens per Sec: 25514.400706563905
Epoch Step: 115 / 138 Loss: 181.59194946289062 Tokens per Sec: 25929.786678576267
Epoch Step: 120 / 138 Loss: 179.6906280517578 Tokens per Sec: 25244.538717329666
Epoch Step: 125 / 138 Loss: 266.1192932128906 Tokens per Sec: 23949.380115357915
Epoch Step: 130 / 138 Loss: 151.16464233398438 Tokens per Sec: 24587.040419777062
Epoch Step: 135 / 138 Loss: 127.76303100585938 Tokens per Sec: 23849.26211725707
Epoch ended with duration 0:00:24.914706
Train perplexity: 9.402329320606507
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static void METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_1 , java.lang.String > VAR_1 ) { java.lang.String = new TYPE_1 ( ) ; for ( VAR_1 . METHOD_2 ( ) ) { return new TYPE_2 > ( VAR_1 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_2 , java.lang.String VAR_2 , VAR_3 , VAR_3 , VAR_3 . METHOD_2 ( ) , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) { return null ) { return null , ( ( ( ( ( ( ( ) , null ) , null ) , null ) , null , null , null , null , null , null , null , null , null , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Epoch ended with duration 0:00:01.178576
Validation perplexity: 9.254570915005393
Epoch 9 / 1000
Epoch Step: 5 / 138 Loss: 120.86224365234375 Tokens per Sec: 24265.151826694753
Epoch Step: 10 / 138 Loss: 165.43446350097656 Tokens per Sec: 25061.7091183892
Epoch Step: 15 / 138 Loss: 317.3598327636719 Tokens per Sec: 26913.271598003215
Epoch Step: 20 / 138 Loss: 102.74960327148438 Tokens per Sec: 26119.404397124665
Epoch Step: 25 / 138 Loss: 164.04721069335938 Tokens per Sec: 25997.672619945803
Epoch Step: 30 / 138 Loss: 105.64762878417969 Tokens per Sec: 26746.487800046463
Epoch Step: 35 / 138 Loss: 166.27862548828125 Tokens per Sec: 26757.52285566485
Epoch Step: 40 / 138 Loss: 123.51419830322266 Tokens per Sec: 25209.49709332732
Epoch Step: 45 / 138 Loss: 158.4064483642578 Tokens per Sec: 27485.181961362843
Epoch Step: 50 / 138 Loss: 108.64115142822266 Tokens per Sec: 25801.668583415012
Epoch Step: 55 / 138 Loss: 156.0914306640625 Tokens per Sec: 25802.412181700518
Epoch Step: 60 / 138 Loss: 187.4381866455078 Tokens per Sec: 25436.85484918986
Epoch Step: 65 / 138 Loss: 168.34335327148438 Tokens per Sec: 28595.68161605731
Epoch Step: 70 / 138 Loss: 107.93732452392578 Tokens per Sec: 26704.87551288236
Epoch Step: 75 / 138 Loss: 129.98837280273438 Tokens per Sec: 26023.93442737237
Epoch Step: 80 / 138 Loss: 164.0174102783203 Tokens per Sec: 25044.46926340396
Epoch Step: 85 / 138 Loss: 186.03628540039062 Tokens per Sec: 28196.612305372877
Epoch Step: 90 / 138 Loss: 149.46087646484375 Tokens per Sec: 24371.756672748772
Epoch Step: 95 / 138 Loss: 136.92845153808594 Tokens per Sec: 25555.275721237205
Epoch Step: 100 / 138 Loss: 181.1787567138672 Tokens per Sec: 27151.94624076475
Epoch Step: 105 / 138 Loss: 186.65603637695312 Tokens per Sec: 21869.736831404818
Epoch Step: 110 / 138 Loss: 159.75473022460938 Tokens per Sec: 23560.333039046218
Epoch Step: 115 / 138 Loss: 255.67401123046875 Tokens per Sec: 25490.70446937725
Epoch Step: 120 / 138 Loss: 169.61431884765625 Tokens per Sec: 25309.704262691343
Epoch Step: 125 / 138 Loss: 122.90663146972656 Tokens per Sec: 25327.70257784364
Epoch Step: 130 / 138 Loss: 182.3478546142578 Tokens per Sec: 26187.963792221148
Epoch Step: 135 / 138 Loss: 121.66939544677734 Tokens per Sec: 24027.36764091016
Epoch ended with duration 0:00:24.848365
Train perplexity: 8.721822128181998
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static void METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String > VAR_2 , java.lang.String > VAR_2 = new TYPE_3 ( ) ; for ( TYPE_3 . METHOD_2 ( ) ) { return new TYPE_3 ( ) ; } return new TYPE_3 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_2 , java.lang.String VAR_2 , VAR_2 , VAR_3 . METHOD_2 ( ) , VAR_3 . METHOD_3 ( ) , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ,[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) + ( ) + STRING_2 ) ) ) ) ) ) { return null , e , e ) , e ) , VAR_5 , e , e , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null ,[0m
Epoch ended with duration 0:00:01.169892
Validation perplexity: 7.225596676438497
Model saved best_on_validation!
Epoch 10 / 1000
Epoch Step: 5 / 138 Loss: 132.51341247558594 Tokens per Sec: 26861.682668141453
Epoch Step: 10 / 138 Loss: 163.9967498779297 Tokens per Sec: 25266.04266375323
Epoch Step: 15 / 138 Loss: 132.37940979003906 Tokens per Sec: 27155.105099777807
Epoch Step: 20 / 138 Loss: 142.54693603515625 Tokens per Sec: 27056.073039057756
Epoch Step: 25 / 138 Loss: 156.33653259277344 Tokens per Sec: 25059.7871999279
Epoch Step: 30 / 138 Loss: 163.1991424560547 Tokens per Sec: 26864.3646846792
Epoch Step: 35 / 138 Loss: 166.2722625732422 Tokens per Sec: 26242.019787333647
Epoch Step: 40 / 138 Loss: 113.12073516845703 Tokens per Sec: 26963.64146854513
Epoch Step: 45 / 138 Loss: 90.59846496582031 Tokens per Sec: 26246.33547359447
Epoch Step: 50 / 138 Loss: 114.8042221069336 Tokens per Sec: 27988.421469861132
Epoch Step: 55 / 138 Loss: 334.9002380371094 Tokens per Sec: 24735.84829957343
Epoch Step: 60 / 138 Loss: 144.50225830078125 Tokens per Sec: 26797.950300412365
Epoch Step: 65 / 138 Loss: 107.60136413574219 Tokens per Sec: 28160.71425950375
Epoch Step: 70 / 138 Loss: 112.0524673461914 Tokens per Sec: 25650.279092381952
Epoch Step: 75 / 138 Loss: 127.31356048583984 Tokens per Sec: 26399.949787783462
Epoch Step: 80 / 138 Loss: 127.07606506347656 Tokens per Sec: 25145.454776856735
Epoch Step: 85 / 138 Loss: 158.6378631591797 Tokens per Sec: 27025.147637522427
Epoch Step: 90 / 138 Loss: 141.49581909179688 Tokens per Sec: 25307.188777556396
Epoch Step: 95 / 138 Loss: 95.9703369140625 Tokens per Sec: 26425.53697418314
Epoch Step: 100 / 138 Loss: 101.2070541381836 Tokens per Sec: 23703.54569407799
Epoch Step: 105 / 138 Loss: 390.71771240234375 Tokens per Sec: 24186.97754678169
Epoch Step: 110 / 138 Loss: 113.9508056640625 Tokens per Sec: 25593.89050177523
Epoch Step: 115 / 138 Loss: 115.56320190429688 Tokens per Sec: 23320.893019842093
Epoch Step: 120 / 138 Loss: 113.46995544433594 Tokens per Sec: 24975.68124596205
Epoch Step: 125 / 138 Loss: 121.69499206542969 Tokens per Sec: 23504.152283889147
Epoch Step: 130 / 138 Loss: 132.2151641845703 Tokens per Sec: 24577.873398751064
Epoch Step: 135 / 138 Loss: 99.99514770507812 Tokens per Sec: 21943.038347488044
Epoch ended with duration 0:00:24.879625
Train perplexity: 7.001043835569141
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static void METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String > VAR_2 ) { java.lang.String = new TYPE_2 ( ) ; for ( TYPE_2 . METHOD_2 ( ) ) { return new java.util.ArrayList < > ( ) ; for ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; } return new TYPE_2 ( ( VAR_1 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 , TYPE_2 VAR_2 , java.lang.String , java.lang.String , java.lang.String VAR_2 , java.lang.String VAR_2 , java.lang.String VAR_2 ) { if ( ( VAR_1 . METHOD_3 ( ) ) ) { return VAR_1 . METHOD_3 ( ) ; } } } , VAR_3 . METHOD_3 ( ) , VAR_4 , VAR_5 , VAR_5 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) { return ( ( ( ( ( ( ( ( ( ( VAR_3 . TAG , null ) , null ) , null ) , null ) , null ) , null , null , null , null ) , null ) ; }[0m
Epoch ended with duration 0:00:01.203551
Validation perplexity: 12.253232917496947
Model saved checkpoint!
Epoch 11 / 1000
Epoch Step: 5 / 138 Loss: 245.0563507080078 Tokens per Sec: 25183.543000346006
Epoch Step: 10 / 138 Loss: 124.17774963378906 Tokens per Sec: 27377.523768163148
Epoch Step: 15 / 138 Loss: 144.936767578125 Tokens per Sec: 26545.463481016188
Epoch Step: 20 / 138 Loss: 103.36503601074219 Tokens per Sec: 25047.870993861143
Epoch Step: 25 / 138 Loss: 108.13118743896484 Tokens per Sec: 26389.19963843472
Epoch Step: 30 / 138 Loss: 107.09412384033203 Tokens per Sec: 26448.586182021652
Epoch Step: 35 / 138 Loss: 118.18236541748047 Tokens per Sec: 25333.04051659699
Epoch Step: 40 / 138 Loss: 86.89749908447266 Tokens per Sec: 25117.046952909477
Epoch Step: 45 / 138 Loss: 128.50132751464844 Tokens per Sec: 29072.634627205163
Epoch Step: 50 / 138 Loss: 138.81442260742188 Tokens per Sec: 24949.273910382533
Epoch Step: 55 / 138 Loss: 108.51747131347656 Tokens per Sec: 25428.937723839248
Epoch Step: 60 / 138 Loss: 170.06146240234375 Tokens per Sec: 29008.445965077146
Epoch Step: 65 / 138 Loss: 108.38483428955078 Tokens per Sec: 25887.239801692172
Epoch Step: 70 / 138 Loss: 147.75399780273438 Tokens per Sec: 25506.983820067573
Epoch Step: 75 / 138 Loss: 98.72358703613281 Tokens per Sec: 27008.11033136622
Epoch Step: 80 / 138 Loss: 147.8970489501953 Tokens per Sec: 25725.337392554757
Epoch Step: 85 / 138 Loss: 92.02763366699219 Tokens per Sec: 24532.89639494003
Epoch Step: 90 / 138 Loss: 118.61198425292969 Tokens per Sec: 25788.960148358976
Epoch Step: 95 / 138 Loss: 236.61790466308594 Tokens per Sec: 23980.51478303753
Epoch Step: 100 / 138 Loss: 144.6219024658203 Tokens per Sec: 27717.0124313355
Epoch Step: 105 / 138 Loss: 159.63673400878906 Tokens per Sec: 25625.089489825234
Epoch Step: 110 / 138 Loss: 323.7343444824219 Tokens per Sec: 23911.553185344597
Epoch Step: 115 / 138 Loss: 142.05691528320312 Tokens per Sec: 21830.08816181419
Epoch Step: 120 / 138 Loss: 106.57765197753906 Tokens per Sec: 24557.904899351448
Epoch Step: 125 / 138 Loss: 343.44525146484375 Tokens per Sec: 24072.462496312975
Epoch Step: 130 / 138 Loss: 160.96852111816406 Tokens per Sec: 25449.30718842729
Epoch Step: 135 / 138 Loss: 95.01838684082031 Tokens per Sec: 24279.58207672916
Epoch ended with duration 0:00:24.929152
Train perplexity: 7.543144802228668
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static java.lang.String METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String > VAR_2 , java.lang.String > VAR_2 = new TYPE_3 ( ) ; for ( TYPE_3 < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . METHOD_3 ( ) ) { return new TYPE_2 ( ( ( VAR_4 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_3 , java.lang.String VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( ) , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 . METHOD_6 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) + ( ) + ( ) + STRING_2 , VAR_4 , null ) , null , null , null , null , null , null , null , null ) , null ) , null ) , null ) ; }[0m
Epoch ended with duration 0:00:01.169915
Validation perplexity: 6.223164494018909
Model saved best_on_validation!
Epoch 12 / 1000
Epoch Step: 5 / 138 Loss: 147.3392791748047 Tokens per Sec: 27375.996694447153
Epoch Step: 10 / 138 Loss: 161.31021118164062 Tokens per Sec: 26825.080054056783
Epoch Step: 15 / 138 Loss: 118.47575378417969 Tokens per Sec: 25449.773804099634
Epoch Step: 20 / 138 Loss: 177.20858764648438 Tokens per Sec: 27236.51794202905
Epoch Step: 25 / 138 Loss: 124.43016052246094 Tokens per Sec: 26983.456261914307
Epoch Step: 30 / 138 Loss: 154.2255401611328 Tokens per Sec: 25917.092646554058
Epoch Step: 35 / 138 Loss: 108.92200469970703 Tokens per Sec: 25402.953336633662
Epoch Step: 40 / 138 Loss: 149.1727294921875 Tokens per Sec: 26495.090702413097
Epoch Step: 45 / 138 Loss: 93.44854736328125 Tokens per Sec: 26517.646659407306
Epoch Step: 50 / 138 Loss: 147.2693634033203 Tokens per Sec: 25748.021063612905
Epoch Step: 55 / 138 Loss: 132.6905517578125 Tokens per Sec: 27216.766835884046
Epoch Step: 60 / 138 Loss: 169.24803161621094 Tokens per Sec: 27043.863855400665
Epoch Step: 65 / 138 Loss: 100.41822052001953 Tokens per Sec: 24413.12501975143
Epoch Step: 70 / 138 Loss: 97.71935272216797 Tokens per Sec: 25595.822887586193
Epoch Step: 75 / 138 Loss: 99.69136047363281 Tokens per Sec: 27390.89667479022
Epoch Step: 80 / 138 Loss: 153.42063903808594 Tokens per Sec: 25698.614053188518
Epoch Step: 85 / 138 Loss: 122.98798370361328 Tokens per Sec: 26107.526515747708
Epoch Step: 90 / 138 Loss: 111.07665252685547 Tokens per Sec: 22929.57252935215
Epoch Step: 95 / 138 Loss: 102.50284576416016 Tokens per Sec: 26040.180877446885
Epoch Step: 100 / 138 Loss: 92.84549713134766 Tokens per Sec: 26409.189758554796
Epoch Step: 105 / 138 Loss: 137.97885131835938 Tokens per Sec: 25566.887252353274
Epoch Step: 110 / 138 Loss: 152.158447265625 Tokens per Sec: 25827.08830263656
Epoch Step: 115 / 138 Loss: 106.48210144042969 Tokens per Sec: 24585.683353600773
Epoch Step: 120 / 138 Loss: 133.43214416503906 Tokens per Sec: 22529.429010942662
Epoch Step: 125 / 138 Loss: 87.0501937866211 Tokens per Sec: 25351.36077284861
Epoch Step: 130 / 138 Loss: 156.07437133789062 Tokens per Sec: 25705.197577731622
Epoch Step: 135 / 138 Loss: 316.21466064453125 Tokens per Sec: 23342.532671855373
Epoch ended with duration 0:00:24.803772
Train perplexity: 7.759196866155768
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static java.lang.String METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String > VAR_2 = new TYPE_3 < java.lang.String > ( ) ; for ( TYPE_3 < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ) ; for ( TYPE_3 . METHOD_3 ( ) ; } ) { return ( ( ( ( ( ( VAR_5 . METHOD_4 ( VAR_5 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 , TYPE_2 VAR_2 , java.lang.String , int VAR_3 , int VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( ) ) ) { return null ) ; } ) { return null ; } , VAR_3 . METHOD_3 ( VAR_5 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) { return VAR_2 ) ; i ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) , null , null , null , null , null , null , null , null , null , null , null , null , null , null ) , null ) , null ) ; }[0m
Epoch ended with duration 0:00:01.200387
Validation perplexity: 9.600842904400183
Epoch 13 / 1000
Epoch Step: 5 / 138 Loss: 383.1304931640625 Tokens per Sec: 26251.358498357135
Epoch Step: 10 / 138 Loss: 118.99983978271484 Tokens per Sec: 27421.635492158443
Epoch Step: 15 / 138 Loss: 127.67079162597656 Tokens per Sec: 24209.553465401867
Epoch Step: 20 / 138 Loss: 130.16310119628906 Tokens per Sec: 26394.356560873894
Epoch Step: 25 / 138 Loss: 78.59834289550781 Tokens per Sec: 27991.228856340258
Epoch Step: 30 / 138 Loss: 137.5384979248047 Tokens per Sec: 25215.597520342566
Epoch Step: 35 / 138 Loss: 142.49072265625 Tokens per Sec: 27049.42319631246
Epoch Step: 40 / 138 Loss: 94.8465347290039 Tokens per Sec: 26843.44824034317
Epoch Step: 45 / 138 Loss: 169.9015655517578 Tokens per Sec: 27208.89479247068
Epoch Step: 50 / 138 Loss: 150.44381713867188 Tokens per Sec: 25554.66496394853
Epoch Step: 55 / 138 Loss: 144.75143432617188 Tokens per Sec: 27589.220525242505
Epoch Step: 60 / 138 Loss: 98.75719451904297 Tokens per Sec: 24473.24978331968
Epoch Step: 65 / 138 Loss: 351.8929138183594 Tokens per Sec: 24732.596094654215
Epoch Step: 70 / 138 Loss: 100.30923461914062 Tokens per Sec: 24988.97797475774
Epoch Step: 75 / 138 Loss: 84.39642333984375 Tokens per Sec: 27035.570256848056
Epoch Step: 80 / 138 Loss: 111.36701965332031 Tokens per Sec: 24144.986191943706
Epoch Step: 85 / 138 Loss: 147.89366149902344 Tokens per Sec: 26949.99152313872
Epoch Step: 90 / 138 Loss: 82.97686767578125 Tokens per Sec: 27415.10531421037
Epoch Step: 95 / 138 Loss: 222.64688110351562 Tokens per Sec: 25083.053769654278
Epoch Step: 100 / 138 Loss: 112.6364517211914 Tokens per Sec: 24615.575296206345
Epoch Step: 105 / 138 Loss: 94.37586975097656 Tokens per Sec: 24299.919621141136
Epoch Step: 110 / 138 Loss: 140.214599609375 Tokens per Sec: 24364.200444896305
Epoch Step: 115 / 138 Loss: 138.4617156982422 Tokens per Sec: 22347.496548466184
Epoch Step: 120 / 138 Loss: 205.06021118164062 Tokens per Sec: 25069.92886394415
Epoch Step: 125 / 138 Loss: 115.70384216308594 Tokens per Sec: 24463.254758692845
Epoch Step: 130 / 138 Loss: 135.5995635986328 Tokens per Sec: 24900.862197221126
Epoch Step: 135 / 138 Loss: 95.77113342285156 Tokens per Sec: 25694.06793049052
Epoch ended with duration 0:00:24.924585
Train perplexity: 6.473335213790975
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static java.lang.String METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String > VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 < java.lang.String > VAR_2 ) { return new TYPE_1 ( ) ; if ( ( ( VAR_3 . METHOD_3 ( ) , VAR_4 ) , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_5 , VAR_4 , VAR_5 , VAR_4 , VAR_5[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_2 , VAR_3 , VAR_3 , java.lang.String VAR_3 , int VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( ) ) ) { return VAR_1 . METHOD_3 ( VAR_1 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_5 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + STRING_2 + STRING_2 ) + STRING_2 ) + STRING_2 ) ) + STRING_2 ) ) + STRING_2 ) ) ) ; }[0m
Epoch ended with duration 0:00:01.170631
Validation perplexity: 5.689613653813925
Model saved best_on_validation!
Epoch 14 / 1000
Epoch Step: 5 / 138 Loss: 112.73811340332031 Tokens per Sec: 28897.537525248634
Epoch Step: 10 / 138 Loss: 107.74130249023438 Tokens per Sec: 27551.696038604976
Epoch Step: 15 / 138 Loss: 117.35037231445312 Tokens per Sec: 27934.28797742695
Epoch Step: 20 / 138 Loss: 376.9006042480469 Tokens per Sec: 28154.43823084165
Epoch Step: 25 / 138 Loss: 147.09288024902344 Tokens per Sec: 26753.519676695105
Epoch Step: 30 / 138 Loss: 99.14601135253906 Tokens per Sec: 25699.083747127344
Epoch Step: 35 / 138 Loss: 367.8651123046875 Tokens per Sec: 24755.813515284746
Epoch Step: 40 / 138 Loss: 113.1461181640625 Tokens per Sec: 26516.64044328425
Epoch Step: 45 / 138 Loss: 128.66427612304688 Tokens per Sec: 25031.227284688583
Epoch Step: 50 / 138 Loss: 95.16891479492188 Tokens per Sec: 24759.117530729
Epoch Step: 55 / 138 Loss: 146.8318634033203 Tokens per Sec: 24282.49096002193
Epoch Step: 60 / 138 Loss: 276.49005126953125 Tokens per Sec: 25248.298401592376
Epoch Step: 65 / 138 Loss: 102.35250854492188 Tokens per Sec: 26396.925839317795
Epoch Step: 70 / 138 Loss: 106.34539031982422 Tokens per Sec: 27549.82771688695
Epoch Step: 75 / 138 Loss: 126.47716522216797 Tokens per Sec: 24439.78560785504
Epoch Step: 80 / 138 Loss: 89.66291046142578 Tokens per Sec: 24354.999476160072
Epoch Step: 85 / 138 Loss: 139.53746032714844 Tokens per Sec: 27456.769765254026
Epoch Step: 90 / 138 Loss: 100.2013931274414 Tokens per Sec: 23044.350804852307
Epoch Step: 95 / 138 Loss: 253.40135192871094 Tokens per Sec: 26192.367655157763
Epoch Step: 100 / 138 Loss: 159.20692443847656 Tokens per Sec: 29036.26975589677
Epoch Step: 105 / 138 Loss: 125.7667007446289 Tokens per Sec: 23737.33691146483
Epoch Step: 110 / 138 Loss: 106.90532684326172 Tokens per Sec: 25592.72764178575
Epoch Step: 115 / 138 Loss: 108.6502456665039 Tokens per Sec: 23710.34049177624
Epoch Step: 120 / 138 Loss: 116.94625091552734 Tokens per Sec: 24637.527368863786
Epoch Step: 125 / 138 Loss: 106.18616485595703 Tokens per Sec: 24212.38574761078
Epoch Step: 130 / 138 Loss: 368.69268798828125 Tokens per Sec: 24808.40682331154
Epoch Step: 135 / 138 Loss: 106.2284164428711 Tokens per Sec: 25032.007793018412
Epoch ended with duration 0:00:24.929998
Train perplexity: 6.1568624293155505
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static java.lang.String METHOD_1 ( java.lang.String [ ] , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String ) { java.lang.String > VAR_3 = new TYPE_3 < java.lang.String > ( ) ; for ( TYPE_3 < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 : : VAR_1 ) { return ( ( ( VAR_4 . METHOD_3 ( VAR_5 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_2 , VAR_3 , VAR_3 , int VAR_3 ) { java.lang.String = METHOD_2 ( VAR_1 . METHOD_2 ( ) ) ; if ( ! ( ! ( ) == null ) { return null ; } } , VAR_3 , VAR_3 , VAR_4 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) == ( ) ) ( ( ( ( ) ) ) { VAR_2 ) { VAR_2 = ( ( ( ( ( ( STRING_1 + ( STRING_1 + STRING_2 ) , null ) , ( ) , null , null , null , null , null , null , null , null , null , null ) ; }[0m
Epoch ended with duration 0:00:01.178742
Validation perplexity: 4.432454986589071
Model saved best_on_validation!
Epoch 15 / 1000
Epoch Step: 5 / 138 Loss: 82.37226104736328 Tokens per Sec: 25282.847340673252
Epoch Step: 10 / 138 Loss: 84.05425262451172 Tokens per Sec: 24771.56775670772
Epoch Step: 15 / 138 Loss: 77.87555694580078 Tokens per Sec: 25395.84160119776
Epoch Step: 20 / 138 Loss: 106.98204040527344 Tokens per Sec: 26267.0440464606
Epoch Step: 25 / 138 Loss: 81.69454956054688 Tokens per Sec: 26630.817383971582
Epoch Step: 30 / 138 Loss: 140.197998046875 Tokens per Sec: 26682.25087568962
Epoch Step: 35 / 138 Loss: 84.21609497070312 Tokens per Sec: 24039.64516092595
Epoch Step: 40 / 138 Loss: 108.48889923095703 Tokens per Sec: 24871.449779974813
Epoch Step: 45 / 138 Loss: 119.73770141601562 Tokens per Sec: 25527.902066027782
Epoch Step: 50 / 138 Loss: 93.24452209472656 Tokens per Sec: 26239.123785865217
Epoch Step: 55 / 138 Loss: 98.0516586303711 Tokens per Sec: 25158.302161274445
Epoch Step: 60 / 138 Loss: 91.67166137695312 Tokens per Sec: 25579.23027404278
Epoch Step: 65 / 138 Loss: 79.22866821289062 Tokens per Sec: 25402.830750587244
Epoch Step: 70 / 138 Loss: 154.8529052734375 Tokens per Sec: 27772.307306160605
Epoch Step: 75 / 138 Loss: 83.44392395019531 Tokens per Sec: 28015.997371468125
Epoch Step: 80 / 138 Loss: 97.91818237304688 Tokens per Sec: 26593.780831103253
Epoch Step: 85 / 138 Loss: 139.96710205078125 Tokens per Sec: 25943.94467201043
Epoch Step: 90 / 138 Loss: 77.41615295410156 Tokens per Sec: 26475.03351700149
Epoch Step: 95 / 138 Loss: 97.97598266601562 Tokens per Sec: 27176.687770321972
Epoch Step: 100 / 138 Loss: 101.98902893066406 Tokens per Sec: 26776.618207273696
Epoch Step: 105 / 138 Loss: 69.07999420166016 Tokens per Sec: 25223.349083039644
Epoch Step: 110 / 138 Loss: 108.40931701660156 Tokens per Sec: 24046.87179081379
Epoch Step: 115 / 138 Loss: 287.73773193359375 Tokens per Sec: 25337.223715631044
Epoch Step: 120 / 138 Loss: 127.64408874511719 Tokens per Sec: 25101.120483143168
Epoch Step: 125 / 138 Loss: 94.90643310546875 Tokens per Sec: 25223.64588845375
Epoch Step: 130 / 138 Loss: 123.6308364868164 Tokens per Sec: 23963.413271096793
Epoch Step: 135 / 138 Loss: 125.59380340576172 Tokens per Sec: 22630.280145752928
Epoch ended with duration 0:00:24.944251
Train perplexity: 5.374546778359515
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static java.lang.String METHOD_1 ( java.lang.String [ ] , java.lang.String [ ] , java.lang.String , java.lang.String , java.lang.String ) { java.lang.String > VAR_3 = new TYPE_3 < java.lang.String > ( ) ; for ( TYPE_3 < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( VAR_3 : VAR_3 : ) { return ( ( ( VAR_5 . METHOD_4 ( VAR_5 , VAR_5 , VAR_5 , VAR_5 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_5 ) , VAR_4 , VAR_4 , VAR_3 , VAR_4 , VAR_4 , VAR_3 , VAR_4 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , VAR_3 , VAR_4 ) { java.lang.String = METHOD_2 ( VAR_1 . METHOD_2 ( ) ) ; if ( ! ( ! ( ) == null ) { return null ) ; } } , ( ( ( VAR_5 , ( VAR_5 . METHOD_5 ( ) , ( ) , ( ) ) ) ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) ( ( ( ( ( VAR_2 ) ) ) ) { VAR_2 = ( ( ( ( ( ( ( STRING_1 + ( STRING_1 + STRING_2 ) , VAR_4 ) , VAR_4 , VAR_4 , VAR_4 , null , null , null , null ) , null ) , null ) ; }[0m
Epoch ended with duration 0:00:01.195771
Validation perplexity: 6.207770778931194
Model saved checkpoint!
Epoch 16 / 1000
Epoch Step: 5 / 138 Loss: 109.09516143798828 Tokens per Sec: 23128.163288394015
Epoch Step: 10 / 138 Loss: 90.86592102050781 Tokens per Sec: 25475.29675817542
Epoch Step: 15 / 138 Loss: 91.84498596191406 Tokens per Sec: 24839.868742275532
Epoch Step: 20 / 138 Loss: 132.6016387939453 Tokens per Sec: 25115.687812138454
Epoch Step: 25 / 138 Loss: 91.65798950195312 Tokens per Sec: 24847.1740629529
Epoch Step: 30 / 138 Loss: 136.32711791992188 Tokens per Sec: 24977.065706702564
Epoch Step: 35 / 138 Loss: 132.437255859375 Tokens per Sec: 23349.211915195763
Epoch Step: 40 / 138 Loss: 121.109619140625 Tokens per Sec: 24379.0635761688
Epoch Step: 45 / 138 Loss: 146.4002685546875 Tokens per Sec: 23628.857185967005
Epoch Step: 50 / 138 Loss: 149.7012481689453 Tokens per Sec: 25546.018797634333
Epoch Step: 55 / 138 Loss: 131.96153259277344 Tokens per Sec: 23792.118314026
Epoch Step: 60 / 138 Loss: 110.45773315429688 Tokens per Sec: 24779.495574616267
Epoch Step: 65 / 138 Loss: 212.67581176757812 Tokens per Sec: 23947.059363013665
Epoch Step: 70 / 138 Loss: 106.43544006347656 Tokens per Sec: 24056.25911632275
Epoch Step: 75 / 138 Loss: 92.25763702392578 Tokens per Sec: 23476.37234737264
Epoch Step: 80 / 138 Loss: 139.4301300048828 Tokens per Sec: 23601.61249987184
Epoch Step: 85 / 138 Loss: 86.62689208984375 Tokens per Sec: 24223.119938817345
Epoch Step: 90 / 138 Loss: 334.0865478515625 Tokens per Sec: 25403.248417746094
Epoch Step: 95 / 138 Loss: 72.26124572753906 Tokens per Sec: 22539.110818258312
Epoch Step: 100 / 138 Loss: 278.189208984375 Tokens per Sec: 23700.77457361508
Epoch Step: 105 / 138 Loss: 141.51524353027344 Tokens per Sec: 20205.58634505984
Epoch Step: 110 / 138 Loss: 108.90340423583984 Tokens per Sec: 23486.836312730018
Epoch Step: 115 / 138 Loss: 72.7192153930664 Tokens per Sec: 22461.8528555866
Epoch Step: 120 / 138 Loss: 78.62222290039062 Tokens per Sec: 22696.766023155542
Epoch Step: 125 / 138 Loss: 84.7676773071289 Tokens per Sec: 23465.73047324749
Epoch Step: 130 / 138 Loss: 97.54694366455078 Tokens per Sec: 23048.4189622884
Epoch Step: 135 / 138 Loss: 117.68977355957031 Tokens per Sec: 22314.857186731446
Epoch ended with duration 0:00:26.873756
Train perplexity: 5.485227406566607
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static java.lang.String METHOD_1 ( java.lang.String [ ] , java.lang.String [ ] , java.lang.String , java.lang.String ) { java.util.List < java.lang.String > VAR_3 = METHOD_2 ( VAR_1 . METHOD_2 ( ) ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.String : : i ) { if ( ( VAR_4 . METHOD_3 ( ) , VAR_4 ) , VAR_4 ) ; } return new TYPE_1 ( ( VAR_5 . METHOD_4 ( ) , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ) , VAR_4 , VAR_4 , VAR_4 , VAR_4 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , VAR_3 , VAR_4 , VAR_4 ) { java.lang.String = METHOD_2 ( VAR_1 . METHOD_2 ( ) ) ; if ( ! ( ) != null ) { if ( VAR_1 . equals ( ) , VAR_1 ) { if ( VAR_1 . METHOD_4 ( VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ) , VAR_4 ) ; } } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( ( . METHOD_7 ( ) , null ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) ( ( ( ( ( ( ) ) ) ) { VAR_2 = ( ( ( ( ( ( STRING_1 + ( STRING_1 + STRING_2 ) ) ) ) ) ( ( ( ( ( ( VAR_5 . METHOD_3 ( ) , VAR_4 , VAR_4 , null , null , null , null , null ) , null ) , null ) ; } }[0m
Epoch ended with duration 0:00:01.394366
Validation perplexity: 5.870332937583768
Epoch 17 / 1000
Epoch Step: 5 / 138 Loss: 296.16845703125 Tokens per Sec: 25037.2822624386
Epoch Step: 10 / 138 Loss: 111.88348388671875 Tokens per Sec: 24132.26875885617
Epoch Step: 15 / 138 Loss: 120.56344604492188 Tokens per Sec: 24597.818993547153
Epoch Step: 20 / 138 Loss: 90.96392059326172 Tokens per Sec: 24543.110306292787
Epoch Step: 25 / 138 Loss: 80.52227783203125 Tokens per Sec: 24259.275599698263
Epoch Step: 30 / 138 Loss: 80.23435974121094 Tokens per Sec: 23950.007531447147
Epoch Step: 35 / 138 Loss: 81.16712951660156 Tokens per Sec: 23502.97599508179
Epoch Step: 40 / 138 Loss: 130.47463989257812 Tokens per Sec: 25290.520464905505
Epoch Step: 45 / 138 Loss: 129.74566650390625 Tokens per Sec: 24724.176592529748
Epoch Step: 50 / 138 Loss: 80.53546142578125 Tokens per Sec: 22274.127391786253
Epoch Step: 55 / 138 Loss: 77.17198181152344 Tokens per Sec: 22493.614008417084
Epoch Step: 60 / 138 Loss: 85.41297912597656 Tokens per Sec: 25136.20125975369
Epoch Step: 65 / 138 Loss: 89.92912292480469 Tokens per Sec: 24205.121716883623
Epoch Step: 70 / 138 Loss: 106.43336486816406 Tokens per Sec: 22616.601218457676
Epoch Step: 75 / 138 Loss: 317.86669921875 Tokens per Sec: 24179.98285643164
Epoch Step: 80 / 138 Loss: 102.97462463378906 Tokens per Sec: 26124.412403229308
Epoch Step: 85 / 138 Loss: 86.4814453125 Tokens per Sec: 26521.649129766673
Epoch Step: 90 / 138 Loss: 119.1551513671875 Tokens per Sec: 25851.261460621525
Epoch Step: 95 / 138 Loss: 70.40308380126953 Tokens per Sec: 23578.75116497302
Epoch Step: 100 / 138 Loss: 122.734130859375 Tokens per Sec: 24176.507050577857
Epoch Step: 105 / 138 Loss: 73.08604431152344 Tokens per Sec: 22420.43080985379
Epoch Step: 110 / 138 Loss: 99.25581359863281 Tokens per Sec: 24322.41334956173
Epoch Step: 115 / 138 Loss: 105.22750091552734 Tokens per Sec: 20645.265839053685
Epoch Step: 120 / 138 Loss: 76.4072036743164 Tokens per Sec: 23668.030114504345
Epoch Step: 125 / 138 Loss: 89.1203842163086 Tokens per Sec: 21691.389956343795
Epoch Step: 130 / 138 Loss: 255.16619873046875 Tokens per Sec: 21887.8328457905
Epoch Step: 135 / 138 Loss: 71.93402862548828 Tokens per Sec: 23556.207962993278
Epoch ended with duration 0:00:26.711205
Train perplexity: 5.025433625046959
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static java.lang.String METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String , java.lang.String , java.lang.String ) { java.util.List < java.lang.String > VAR_3 = new TYPE_3 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.String : : ) { if ( ( VAR_4 : ) ) { return ( ( ) ( ) ( ) ( ) ( ) ( ) ( ) , new TYPE_2 . METHOD_3 ( VAR_5 , ( VAR_5 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_5 , VAR_5 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_3 , VAR_4 , VAR_4 ) { java.lang.String = METHOD_2 ( VAR_1 . METHOD_2 ( ) ) ; if ( ! ( ) != null ) { if ( VAR_1 . equals ( ) , VAR_3 ) { if ( VAR_1 . METHOD_4 ( VAR_3 , VAR_3 , VAR_4 , VAR_4 ) , VAR_4 ) ; } catch ( VAR_7 , e ) { throw new TYPE_2 ( ( . METHOD_7 ( ) . METHOD_7 ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( VAR_1 ) ( ( ( VAR_2 ) ) ) ( VAR_2 ) ) { VAR_2 = ( ( ( ( ( ( STRING_1 + ( STRING_1 + ( ) ) ) ) ( ( ( VAR_5 . METHOD_3 ( VAR_5 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , null , null ) , null ) , null ) ; } } } }[0m
Epoch ended with duration 0:00:01.406618
Validation perplexity: 6.727257821124159
Epoch 18 / 1000
Epoch Step: 5 / 138 Loss: 128.89561462402344 Tokens per Sec: 23892.558136767653
Epoch Step: 10 / 138 Loss: 68.53541564941406 Tokens per Sec: 25637.679621590207
Epoch Step: 15 / 138 Loss: 85.3722915649414 Tokens per Sec: 26241.02172620457
Epoch Step: 20 / 138 Loss: 81.16824340820312 Tokens per Sec: 23068.127593431967
Epoch Step: 25 / 138 Loss: 118.2742919921875 Tokens per Sec: 23725.81495480187
Epoch Step: 30 / 138 Loss: 75.99620819091797 Tokens per Sec: 22029.82860687486
Epoch Step: 35 / 138 Loss: 215.46035766601562 Tokens per Sec: 26617.57241545113
Epoch Step: 40 / 138 Loss: 65.04615020751953 Tokens per Sec: 24175.31478334443
Epoch Step: 45 / 138 Loss: 109.28702545166016 Tokens per Sec: 25193.196144143043
Epoch Step: 50 / 138 Loss: 127.23544311523438 Tokens per Sec: 23149.280002820564
Epoch Step: 55 / 138 Loss: 70.0920639038086 Tokens per Sec: 24708.086183181596
Epoch Step: 60 / 138 Loss: 114.8157730102539 Tokens per Sec: 24663.75711610979
Epoch Step: 65 / 138 Loss: 107.62145233154297 Tokens per Sec: 24039.315663617763
Epoch Step: 70 / 138 Loss: 58.71867752075195 Tokens per Sec: 24225.94968056182
Epoch Step: 75 / 138 Loss: 104.57347869873047 Tokens per Sec: 22639.427130554523
Epoch Step: 80 / 138 Loss: 73.22444152832031 Tokens per Sec: 23161.415823902244
Epoch Step: 85 / 138 Loss: 104.52169799804688 Tokens per Sec: 25131.27657095676
Epoch Step: 90 / 138 Loss: 84.2917709350586 Tokens per Sec: 25296.127260241243
Epoch Step: 95 / 138 Loss: 66.425537109375 Tokens per Sec: 21623.425611156406
Epoch Step: 100 / 138 Loss: 83.9788818359375 Tokens per Sec: 26632.57161173805
Epoch Step: 105 / 138 Loss: 87.74411010742188 Tokens per Sec: 23840.700223269327
Epoch Step: 110 / 138 Loss: 74.52668762207031 Tokens per Sec: 23232.745152130476
Epoch Step: 115 / 138 Loss: 77.56942749023438 Tokens per Sec: 22082.240120832776
Epoch Step: 120 / 138 Loss: 98.0302734375 Tokens per Sec: 20301.7789933421
Epoch Step: 125 / 138 Loss: 72.11050415039062 Tokens per Sec: 22843.29622825882
Epoch Step: 130 / 138 Loss: 87.18083190917969 Tokens per Sec: 23580.233791146184
Epoch Step: 135 / 138 Loss: 55.5878791809082 Tokens per Sec: 24509.92620082557
Epoch ended with duration 0:00:26.682728
Train perplexity: 4.471343683758457
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String , java.lang.String , java.lang.String VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( int i : : ) { if ( ( VAR_4 ) != null ) { return new TYPE_1 ( VAR_5 , VAR_5 , VAR_5 , VAR_6 , VAR_6 , VAR_6 , VAR_5 , VAR_5 , VAR_5 , VAR_5 , VAR_5 , VAR_5 , VAR_6 , VAR_4 , VAR_5 , VAR_4 , VAR_5 , VAR_6[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_3 , VAR_4 , VAR_4 , VAR_4 ) { java.lang.String = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) != null ) { try { if ( VAR_1 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ) , VAR_5 ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( VAR_7 . METHOD_7 ( ) , null ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( VAR_1 ) ( VAR_2 ) ) && ( ( VAR_2 ) ) { for ( int VAR_2 = VAR_2 ) ; } if ( int VAR_2 = ( ( STRING_1 + STRING_2 ) + STRING_2 ) ) ; org.junit.Assert.assertEquals ( VAR_4 . METHOD_3 ( STRING_1 , VAR_4 , VAR_4 , VAR_4 , null , null ) ; } }[0m
Epoch ended with duration 0:00:01.390101
Validation perplexity: 4.897132634974906
Epoch 19 / 1000
Epoch Step: 5 / 138 Loss: 84.40445709228516 Tokens per Sec: 23184.404333604536
Epoch Step: 10 / 138 Loss: 114.11003112792969 Tokens per Sec: 25099.78713655694
Epoch Step: 15 / 138 Loss: 57.46376419067383 Tokens per Sec: 23902.84366625353
Epoch Step: 20 / 138 Loss: 59.877113342285156 Tokens per Sec: 25182.743253389635
Epoch Step: 25 / 138 Loss: 91.00816345214844 Tokens per Sec: 24034.260126660796
Epoch Step: 30 / 138 Loss: 90.16818237304688 Tokens per Sec: 26426.0020185056
Epoch Step: 35 / 138 Loss: 268.36724853515625 Tokens per Sec: 21567.254036783335
Epoch Step: 40 / 138 Loss: 55.02471923828125 Tokens per Sec: 22559.649191433997
Epoch Step: 45 / 138 Loss: 114.50616455078125 Tokens per Sec: 23533.989516705657
Epoch Step: 50 / 138 Loss: 93.7070083618164 Tokens per Sec: 24555.235986769145
Epoch Step: 55 / 138 Loss: 106.57707977294922 Tokens per Sec: 24170.20166627039
Epoch Step: 60 / 138 Loss: 68.03001403808594 Tokens per Sec: 24625.977081198995
Epoch Step: 65 / 138 Loss: 63.12763214111328 Tokens per Sec: 24997.828747885706
Epoch Step: 70 / 138 Loss: 109.05314636230469 Tokens per Sec: 24880.27072219636
Epoch Step: 75 / 138 Loss: 102.4442138671875 Tokens per Sec: 23843.60069315569
Epoch Step: 80 / 138 Loss: 113.75335693359375 Tokens per Sec: 25265.23915566145
Epoch Step: 85 / 138 Loss: 56.815067291259766 Tokens per Sec: 24280.456547890895
Epoch Step: 90 / 138 Loss: 96.7507095336914 Tokens per Sec: 22693.557524980402
Epoch Step: 95 / 138 Loss: 109.70472717285156 Tokens per Sec: 25165.56441484043
Epoch Step: 100 / 138 Loss: 80.55152130126953 Tokens per Sec: 24283.692535389528
Epoch Step: 105 / 138 Loss: 104.49344635009766 Tokens per Sec: 23631.870219177308
Epoch Step: 110 / 138 Loss: 107.60421752929688 Tokens per Sec: 23568.388864428172
Epoch Step: 115 / 138 Loss: 67.5347900390625 Tokens per Sec: 22433.288665721397
Epoch Step: 120 / 138 Loss: 66.52991485595703 Tokens per Sec: 23805.14496531937
Epoch Step: 125 / 138 Loss: 85.21797943115234 Tokens per Sec: 22498.279622571492
Epoch Step: 130 / 138 Loss: 97.11537170410156 Tokens per Sec: 22968.397432793794
Epoch Step: 135 / 138 Loss: 60.55197525024414 Tokens per Sec: 20216.87902444968
Epoch ended with duration 0:00:26.807595
Train perplexity: 4.133369914875946
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String , java.lang.String , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( int i : : ) { if ( ( VAR_4 ) != null ) { return new TYPE_1 ( ( VAR_5 . METHOD_4 ( STRING_1 , VAR_6 , VAR_6 , VAR_6 , VAR_6 , VAR_6 , VAR_6 , VAR_5 , VAR_5 , VAR_5 , VAR_5 , VAR_5 ) , VAR_5 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_3 , VAR_4 , VAR_4 ) { java.lang.String = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_2 ( STRING_1 , . METHOD_7 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) ( ( VAR_2 ) != null ) { return ( VAR_2 ) ; } else { java.lang.String VAR_2 = ( STRING_1 + ( STRING_1 + STRING_2 ) + STRING_2 ) ; org.junit.Assert.assertEquals ( VAR_4 . METHOD_2 ( STRING_1 , VAR_4 , VAR_4 . METHOD_3 ( ) , null , null ) ; } } }[0m
Epoch ended with duration 0:00:01.368568
Validation perplexity: 3.559446980501639
Model saved best_on_validation!
Epoch 20 / 1000
Epoch Step: 5 / 138 Loss: 79.70044708251953 Tokens per Sec: 22481.56158110415
Epoch Step: 10 / 138 Loss: 106.39234161376953 Tokens per Sec: 22863.9815255038
Epoch Step: 15 / 138 Loss: 71.88607788085938 Tokens per Sec: 25048.586286863545
Epoch Step: 20 / 138 Loss: 104.81245422363281 Tokens per Sec: 22227.464724242487
Epoch Step: 25 / 138 Loss: 54.91085433959961 Tokens per Sec: 24598.093100676797
Epoch Step: 30 / 138 Loss: 54.12505340576172 Tokens per Sec: 25275.404955101985
Epoch Step: 35 / 138 Loss: 103.49623107910156 Tokens per Sec: 23262.927719781168
Epoch Step: 40 / 138 Loss: 107.9457015991211 Tokens per Sec: 25119.141936906606
Epoch Step: 45 / 138 Loss: 88.70425415039062 Tokens per Sec: 25141.52988566644
Epoch Step: 50 / 138 Loss: 98.56555938720703 Tokens per Sec: 24616.81488086206
Epoch Step: 55 / 138 Loss: 253.92169189453125 Tokens per Sec: 21885.15235099106
Epoch Step: 60 / 138 Loss: 319.13397216796875 Tokens per Sec: 24978.785611461957
Epoch Step: 65 / 138 Loss: 259.01611328125 Tokens per Sec: 25927.95571392969
Epoch Step: 70 / 138 Loss: 52.20752716064453 Tokens per Sec: 24732.797097384268
Epoch Step: 75 / 138 Loss: 78.43478393554688 Tokens per Sec: 24641.255085003137
Epoch Step: 80 / 138 Loss: 115.87825775146484 Tokens per Sec: 24771.072647899116
Epoch Step: 85 / 138 Loss: 81.85813903808594 Tokens per Sec: 23332.702925927617
Epoch Step: 90 / 138 Loss: 56.44694900512695 Tokens per Sec: 24041.87280073665
Epoch Step: 95 / 138 Loss: 67.64922332763672 Tokens per Sec: 25517.392101751288
Epoch Step: 100 / 138 Loss: 85.33230590820312 Tokens per Sec: 23641.87265852175
Epoch Step: 105 / 138 Loss: 65.66120910644531 Tokens per Sec: 23027.718249999307
Epoch Step: 110 / 138 Loss: 273.00164794921875 Tokens per Sec: 24279.52967637233
Epoch Step: 115 / 138 Loss: 98.31861877441406 Tokens per Sec: 23814.624130610307
Epoch Step: 120 / 138 Loss: 61.19047546386719 Tokens per Sec: 23170.8485084616
Epoch Step: 125 / 138 Loss: 69.11122131347656 Tokens per Sec: 22468.26963101693
Epoch Step: 130 / 138 Loss: 97.59980010986328 Tokens per Sec: 24022.778838043952
Epoch Step: 135 / 138 Loss: 92.8665542602539 Tokens per Sec: 21226.36074738632
Epoch ended with duration 0:00:26.723619
Train perplexity: 3.799747251578408
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( int i : : i ) ; } return VAR_4 . METHOD_3 ( VAR_5 , VAR_5 , VAR_5 , VAR_6 , VAR_6 , VAR_6 , VAR_5 , VAR_5 . METHOD_5 ( ) , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_3 , VAR_4 , VAR_4 ) { java.lang.String = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_2 ( STRING_1 , . METHOD_7 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( VAR_2 ) != null ) { return ( VAR_2 ) ; } java.lang.String VAR_2 = ( STRING_1 + ( STRING_1 + STRING_2 ) + STRING_2 ) ; ) . METHOD_2 ( VAR_4 , VAR_4 , VAR_4 . METHOD_3 ( ) , null , null ) ; } } }[0m
Epoch ended with duration 0:00:01.377344
Validation perplexity: 3.355095143601449
Model saved best_on_validation!
Model saved checkpoint!
Epoch 21 / 1000
Epoch Step: 5 / 138 Loss: 62.033321380615234 Tokens per Sec: 22868.345741670422
Epoch Step: 10 / 138 Loss: 92.20538330078125 Tokens per Sec: 25069.261838526454
Epoch Step: 15 / 138 Loss: 96.21896362304688 Tokens per Sec: 22893.65733666229
Epoch Step: 20 / 138 Loss: 227.5559844970703 Tokens per Sec: 24450.512320089692
Epoch Step: 25 / 138 Loss: 82.89729309082031 Tokens per Sec: 22570.240629491662
Epoch Step: 30 / 138 Loss: 75.44283294677734 Tokens per Sec: 24497.964767456477
Epoch Step: 35 / 138 Loss: 65.6054916381836 Tokens per Sec: 26369.493149701444
Epoch Step: 40 / 138 Loss: 59.54084014892578 Tokens per Sec: 24973.49665095838
Epoch Step: 45 / 138 Loss: 71.19609069824219 Tokens per Sec: 24586.292661861346
Epoch Step: 50 / 138 Loss: 94.5418472290039 Tokens per Sec: 24358.790163034573
Epoch Step: 55 / 138 Loss: 72.79843139648438 Tokens per Sec: 25302.31504924384
Epoch Step: 60 / 138 Loss: 80.77790832519531 Tokens per Sec: 26021.037821666912
Epoch Step: 65 / 138 Loss: 94.7341537475586 Tokens per Sec: 21032.718471908065
Epoch Step: 70 / 138 Loss: 96.55332946777344 Tokens per Sec: 23859.827690278096
Epoch Step: 75 / 138 Loss: 91.81034851074219 Tokens per Sec: 22666.74409798687
Epoch Step: 80 / 138 Loss: 68.38514709472656 Tokens per Sec: 23937.80502540898
Epoch Step: 85 / 138 Loss: 48.614990234375 Tokens per Sec: 25752.470660073915
Epoch Step: 90 / 138 Loss: 63.07118225097656 Tokens per Sec: 25728.75620397659
Epoch Step: 95 / 138 Loss: 52.56294631958008 Tokens per Sec: 24087.85223976412
Epoch Step: 100 / 138 Loss: 86.1437759399414 Tokens per Sec: 24832.220218920847
Epoch Step: 105 / 138 Loss: 93.80706787109375 Tokens per Sec: 19231.113946956426
Epoch Step: 110 / 138 Loss: 73.18366241455078 Tokens per Sec: 22547.164081737432
Epoch Step: 115 / 138 Loss: 67.7377700805664 Tokens per Sec: 23116.43118799325
Epoch Step: 120 / 138 Loss: 93.96449279785156 Tokens per Sec: 22921.766727889793
Epoch Step: 125 / 138 Loss: 75.55461120605469 Tokens per Sec: 24416.20378079571
Epoch Step: 130 / 138 Loss: 58.39750671386719 Tokens per Sec: 23282.056798317255
Epoch Step: 135 / 138 Loss: 56.868507385253906 Tokens per Sec: 23019.594861739013
Epoch ended with duration 0:00:26.780518
Train perplexity: 3.6411952122869145
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( int i : : i ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( VAR_5 . METHOD_4 ( VAR_5 , VAR_5 , VAR_6 , VAR_6 , VAR_6 , VAR_6 , VAR_5 , VAR_6 , VAR_6 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_3 , VAR_4 , VAR_4 , VAR_4 ) { java.lang.String = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , true ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( VAR_2 ) != null ) != null ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = ( STRING_1 + ( STRING_1 + STRING_2 ) + STRING_2 ) ; org.junit.Assert.assertEquals . METHOD_2 ( VAR_4 , VAR_4 , VAR_4 . METHOD_3 ( ) , VAR_3 , null , null ) ; } } }[0m
Epoch ended with duration 0:00:01.388055
Validation perplexity: 4.8386568709387365
Epoch 22 / 1000
Epoch Step: 5 / 138 Loss: 64.97018432617188 Tokens per Sec: 24679.83360377032
Epoch Step: 10 / 138 Loss: 60.6535758972168 Tokens per Sec: 21864.95879643465
Epoch Step: 15 / 138 Loss: 194.08518981933594 Tokens per Sec: 24643.35907399859
Epoch Step: 20 / 138 Loss: 100.66657257080078 Tokens per Sec: 24118.530339554065
Epoch Step: 25 / 138 Loss: 69.58338928222656 Tokens per Sec: 24539.93076954383
Epoch Step: 30 / 138 Loss: 87.62948608398438 Tokens per Sec: 25159.324148694588
Epoch Step: 35 / 138 Loss: 85.86653900146484 Tokens per Sec: 23912.66851599331
Epoch Step: 40 / 138 Loss: 47.7386474609375 Tokens per Sec: 25430.80490673117
Epoch Step: 45 / 138 Loss: 52.57997512817383 Tokens per Sec: 24612.157137356426
Epoch Step: 50 / 138 Loss: 59.17647171020508 Tokens per Sec: 25100.17738223109
Epoch Step: 55 / 138 Loss: 80.02909851074219 Tokens per Sec: 24019.090775075125
Epoch Step: 60 / 138 Loss: 72.25831604003906 Tokens per Sec: 23950.745792382124
Epoch Step: 65 / 138 Loss: 66.30703735351562 Tokens per Sec: 24386.73911882721
Epoch Step: 70 / 138 Loss: 94.0278091430664 Tokens per Sec: 23133.629099981168
Epoch Step: 75 / 138 Loss: 86.50164794921875 Tokens per Sec: 23938.505960441278
Epoch Step: 80 / 138 Loss: 51.10786437988281 Tokens per Sec: 23022.407825313723
Epoch Step: 85 / 138 Loss: 56.97565460205078 Tokens per Sec: 24108.32757425861
Epoch Step: 90 / 138 Loss: 69.01360321044922 Tokens per Sec: 26804.74434659618
Epoch Step: 95 / 138 Loss: 88.20223236083984 Tokens per Sec: 23991.173101345634
Epoch Step: 100 / 138 Loss: 76.50826263427734 Tokens per Sec: 25089.80870225445
Epoch Step: 105 / 138 Loss: 278.8743591308594 Tokens per Sec: 20080.879475642363
Epoch Step: 110 / 138 Loss: 301.76324462890625 Tokens per Sec: 23004.10582560707
Epoch Step: 115 / 138 Loss: 49.074920654296875 Tokens per Sec: 22983.697423919697
Epoch Step: 120 / 138 Loss: 230.0514678955078 Tokens per Sec: 22936.490216340342
Epoch Step: 125 / 138 Loss: 75.92577362060547 Tokens per Sec: 24334.617488086387
Epoch Step: 130 / 138 Loss: 80.60282897949219 Tokens per Sec: 23187.358253929393
Epoch Step: 135 / 138 Loss: 60.010459899902344 Tokens per Sec: 23406.816431666335
Epoch ended with duration 0:00:26.688788
Train perplexity: 3.3688976655726313
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : : ( ) ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_3 . METHOD_4 ( VAR_5 , VAR_5 , VAR_5 , VAR_6 , VAR_6 , VAR_5 , VAR_5 , VAR_6 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , false , false , false , false[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , VAR_4 , VAR_4 , VAR_4 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , } ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_2 ) ) ; org.junit.Assert.assertEquals . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , VAR_4 , null , null ) ; } } }[0m
Epoch ended with duration 0:00:01.375938
Validation perplexity: 3.1852912037532617
Model saved best_on_validation!
Epoch 23 / 1000
Epoch Step: 5 / 138 Loss: 73.35745239257812 Tokens per Sec: 23594.77088480101
Epoch Step: 10 / 138 Loss: 54.655479431152344 Tokens per Sec: 24219.729326157372
Epoch Step: 15 / 138 Loss: 43.84193801879883 Tokens per Sec: 26738.40644180224
Epoch Step: 20 / 138 Loss: 60.71480941772461 Tokens per Sec: 23631.775143918592
Epoch Step: 25 / 138 Loss: 73.73089599609375 Tokens per Sec: 24821.13509978633
Epoch Step: 30 / 138 Loss: 81.29721069335938 Tokens per Sec: 22915.90916682787
Epoch Step: 35 / 138 Loss: 53.8823356628418 Tokens per Sec: 23594.22834462574
Epoch Step: 40 / 138 Loss: 39.31486892700195 Tokens per Sec: 25249.278195699946
Epoch Step: 45 / 138 Loss: 226.45932006835938 Tokens per Sec: 24495.752452027766
Epoch Step: 50 / 138 Loss: 69.9684066772461 Tokens per Sec: 25280.07638958127
Epoch Step: 55 / 138 Loss: 47.966793060302734 Tokens per Sec: 23505.007526389025
Epoch Step: 60 / 138 Loss: 60.309757232666016 Tokens per Sec: 24257.633389283805
Epoch Step: 65 / 138 Loss: 77.8968734741211 Tokens per Sec: 25717.68214715519
Epoch Step: 70 / 138 Loss: 65.17096710205078 Tokens per Sec: 24372.386830886655
Epoch Step: 75 / 138 Loss: 77.58692169189453 Tokens per Sec: 24011.549354526043
Epoch Step: 80 / 138 Loss: 88.06947326660156 Tokens per Sec: 23278.193858569255
Epoch Step: 85 / 138 Loss: 58.116512298583984 Tokens per Sec: 22022.77066113297
Epoch Step: 90 / 138 Loss: 66.73674774169922 Tokens per Sec: 25169.970336831193
Epoch Step: 95 / 138 Loss: 89.91820526123047 Tokens per Sec: 23668.03222160798
Epoch Step: 100 / 138 Loss: 75.59732818603516 Tokens per Sec: 25108.92708023498
Epoch Step: 105 / 138 Loss: 89.11985778808594 Tokens per Sec: 23970.054783648426
Epoch Step: 110 / 138 Loss: 74.76942443847656 Tokens per Sec: 23433.930822721682
Epoch Step: 115 / 138 Loss: 55.253299713134766 Tokens per Sec: 22841.092408802644
Epoch Step: 120 / 138 Loss: 78.81004333496094 Tokens per Sec: 20089.366769340424
Epoch Step: 125 / 138 Loss: 55.09862518310547 Tokens per Sec: 22800.768029253773
Epoch Step: 130 / 138 Loss: 68.15617370605469 Tokens per Sec: 22502.114721236205
Epoch Step: 135 / 138 Loss: 53.63392639160156 Tokens per Sec: 23789.737547900175
Epoch ended with duration 0:00:26.789898
Train perplexity: 3.783436378563152
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : : ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( VAR_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , VAR_7 , VAR_5 , VAR_5 ) , VAR_2 . METHOD_5 ( ) , 1 , false , false , false , false , false , false ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_3 , VAR_4 , VAR_4 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , } ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = ( ( ( STRING_2 + STRING_2 ) + STRING_2 ) ) ; . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , METHOD_3 ( ) , null , null ) ; } }[0m
Epoch ended with duration 0:00:01.369293
Validation perplexity: 2.8596754706398104
Model saved best_on_validation!
Epoch 24 / 1000
Epoch Step: 5 / 138 Loss: 83.59343719482422 Tokens per Sec: 23494.645442435958
Epoch Step: 10 / 138 Loss: 51.70326232910156 Tokens per Sec: 26932.54187737763
Epoch Step: 15 / 138 Loss: 67.068359375 Tokens per Sec: 23828.59466482121
Epoch Step: 20 / 138 Loss: 62.453617095947266 Tokens per Sec: 22585.52478759789
Epoch Step: 25 / 138 Loss: 312.0829772949219 Tokens per Sec: 23801.02297023295
Epoch Step: 30 / 138 Loss: 68.77828216552734 Tokens per Sec: 24431.106920858987
Epoch Step: 35 / 138 Loss: 249.8986053466797 Tokens per Sec: 26592.772640594245
Epoch Step: 40 / 138 Loss: 314.8757629394531 Tokens per Sec: 24740.875504652267
Epoch Step: 45 / 138 Loss: 56.4871711730957 Tokens per Sec: 23572.055851016226
Epoch Step: 50 / 138 Loss: 51.57014846801758 Tokens per Sec: 22921.21494214117
Epoch Step: 55 / 138 Loss: 80.22914123535156 Tokens per Sec: 24442.71179978813
Epoch Step: 60 / 138 Loss: 76.74943542480469 Tokens per Sec: 24684.83747079664
Epoch Step: 65 / 138 Loss: 89.87646484375 Tokens per Sec: 26158.75441311841
Epoch Step: 70 / 138 Loss: 50.08412551879883 Tokens per Sec: 22586.27491091976
Epoch Step: 75 / 138 Loss: 81.44779968261719 Tokens per Sec: 23184.05692111322
Epoch Step: 80 / 138 Loss: 79.6360092163086 Tokens per Sec: 25849.930371406102
Epoch Step: 85 / 138 Loss: 58.17587661743164 Tokens per Sec: 26830.15680041671
Epoch Step: 90 / 138 Loss: 71.9245834350586 Tokens per Sec: 25417.71931893876
Epoch Step: 95 / 138 Loss: 88.56680297851562 Tokens per Sec: 21919.28652973906
Epoch Step: 100 / 138 Loss: 38.60974884033203 Tokens per Sec: 21999.565055147887
Epoch Step: 105 / 138 Loss: 48.08143615722656 Tokens per Sec: 22704.139160543375
Epoch Step: 110 / 138 Loss: 50.28810119628906 Tokens per Sec: 23628.87993821037
Epoch Step: 115 / 138 Loss: 83.36847686767578 Tokens per Sec: 20006.48309100794
Epoch Step: 120 / 138 Loss: 85.06171417236328 Tokens per Sec: 23625.78272739635
Epoch Step: 125 / 138 Loss: 69.3458251953125 Tokens per Sec: 23798.785805752144
Epoch Step: 130 / 138 Loss: 53.998477935791016 Tokens per Sec: 22479.260056927837
Epoch Step: 135 / 138 Loss: 60.0712776184082 Tokens per Sec: 23382.8034864945
Epoch ended with duration 0:00:26.732109
Train perplexity: 3.3814256644430567
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : : ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( VAR_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , VAR_7 , VAR_5 , VAR_5 , VAR_2 . METHOD_5 ( ) , VAR_4 , VAR_4 , STRING_3 , false , false , false ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_3 , VAR_4 , VAR_4 , VAR_4 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , } ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( VAR_2 ) != null ) != null ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_2 ) ; . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , METHOD_3 ( ) , null , null ) ; } } }[0m
Epoch ended with duration 0:00:01.395542
Validation perplexity: 3.3059856016062454
Epoch 25 / 1000
Epoch Step: 5 / 138 Loss: 57.020294189453125 Tokens per Sec: 24788.371177647816
Epoch Step: 10 / 138 Loss: 68.13037872314453 Tokens per Sec: 23960.67267287576
Epoch Step: 15 / 138 Loss: 276.4743957519531 Tokens per Sec: 25848.65593541515
Epoch Step: 20 / 138 Loss: 62.87757873535156 Tokens per Sec: 23933.218282472433
Epoch Step: 25 / 138 Loss: 58.79246139526367 Tokens per Sec: 24742.443556517646
Epoch Step: 30 / 138 Loss: 43.97737503051758 Tokens per Sec: 24370.42449583597
Epoch Step: 35 / 138 Loss: 37.839630126953125 Tokens per Sec: 24593.399826629564
Epoch Step: 40 / 138 Loss: 64.3718032836914 Tokens per Sec: 25148.78446446565
Epoch Step: 45 / 138 Loss: 85.51863861083984 Tokens per Sec: 23834.128910912925
Epoch Step: 50 / 138 Loss: 49.80937576293945 Tokens per Sec: 22770.437521193537
Epoch Step: 55 / 138 Loss: 74.78474426269531 Tokens per Sec: 24060.970631679796
Epoch Step: 60 / 138 Loss: 49.089900970458984 Tokens per Sec: 24333.075864327002
Epoch Step: 65 / 138 Loss: 47.51876449584961 Tokens per Sec: 25478.698190794305
Epoch Step: 70 / 138 Loss: 40.11862564086914 Tokens per Sec: 24491.51732610862
Epoch Step: 75 / 138 Loss: 54.34749984741211 Tokens per Sec: 24706.937038082397
Epoch Step: 80 / 138 Loss: 75.50160217285156 Tokens per Sec: 23802.465094640593
Epoch Step: 85 / 138 Loss: 73.65457153320312 Tokens per Sec: 23347.83958347565
Epoch Step: 90 / 138 Loss: 52.57560729980469 Tokens per Sec: 23538.840452344528
Epoch Step: 95 / 138 Loss: 45.820220947265625 Tokens per Sec: 24594.18052803076
Epoch Step: 100 / 138 Loss: 62.05133056640625 Tokens per Sec: 25764.789217927653
Epoch Step: 105 / 138 Loss: 53.260311126708984 Tokens per Sec: 23574.994238171006
Epoch Step: 110 / 138 Loss: 52.51219940185547 Tokens per Sec: 23033.920710318544
Epoch Step: 115 / 138 Loss: 46.76469802856445 Tokens per Sec: 20714.21673529189
Epoch Step: 120 / 138 Loss: 80.19097900390625 Tokens per Sec: 23105.669544061064
Epoch Step: 125 / 138 Loss: 65.48880767822266 Tokens per Sec: 24538.51240776191
Epoch Step: 130 / 138 Loss: 60.74892807006836 Tokens per Sec: 21458.58247421797
Epoch Step: 135 / 138 Loss: 41.728363037109375 Tokens per Sec: 23153.62802014799
Epoch ended with duration 0:00:26.640075
Train perplexity: 2.706930910404609
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : : i ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( VAR_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , VAR_7 , VAR_7 , VAR_5 , VAR_4 , VAR_4 , false , false , STRING_4 , STRING_4 , STRING_4 , STRING_4 , STRING_4 , STRING_4 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , } ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 < java.lang.String VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_2 ) ; org.junit.Assert.assertEquals . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.379648
Validation perplexity: 3.2398820005311637
Model saved checkpoint!
Epoch 26 / 1000
Epoch Step: 5 / 138 Loss: 60.18074035644531 Tokens per Sec: 23729.767152821114
Epoch Step: 10 / 138 Loss: 51.00981521606445 Tokens per Sec: 22530.670452662078
Epoch Step: 15 / 138 Loss: 75.62124633789062 Tokens per Sec: 25753.442859680246
Epoch Step: 20 / 138 Loss: 254.22137451171875 Tokens per Sec: 22670.778594384246
Epoch Step: 25 / 138 Loss: 57.35976791381836 Tokens per Sec: 22835.11061059228
Epoch Step: 30 / 138 Loss: 73.19987487792969 Tokens per Sec: 24014.39843416568
Epoch Step: 35 / 138 Loss: 47.98624801635742 Tokens per Sec: 25763.76339795634
Epoch Step: 40 / 138 Loss: 71.96086120605469 Tokens per Sec: 23513.524527167345
Epoch Step: 45 / 138 Loss: 203.27871704101562 Tokens per Sec: 25648.307146823285
Epoch Step: 50 / 138 Loss: 327.8081359863281 Tokens per Sec: 25699.69606771398
Epoch Step: 55 / 138 Loss: 57.19694137573242 Tokens per Sec: 24782.700453277343
Epoch Step: 60 / 138 Loss: 61.35523986816406 Tokens per Sec: 23754.20258688704
Epoch Step: 65 / 138 Loss: 62.6004638671875 Tokens per Sec: 24345.748179266044
Epoch Step: 70 / 138 Loss: 80.20621490478516 Tokens per Sec: 25089.835943023212
Epoch Step: 75 / 138 Loss: 61.03002166748047 Tokens per Sec: 26090.307633889544
Epoch Step: 80 / 138 Loss: 36.47898864746094 Tokens per Sec: 24179.944135751317
Epoch Step: 85 / 138 Loss: 51.924808502197266 Tokens per Sec: 23955.023152325386
Epoch Step: 90 / 138 Loss: 47.346824645996094 Tokens per Sec: 22497.99999354552
Epoch Step: 95 / 138 Loss: 213.88006591796875 Tokens per Sec: 26401.51700644103
Epoch Step: 100 / 138 Loss: 77.6523208618164 Tokens per Sec: 24249.358836002986
Epoch Step: 105 / 138 Loss: 202.91952514648438 Tokens per Sec: 21715.453159114873
Epoch Step: 110 / 138 Loss: 52.37894821166992 Tokens per Sec: 22511.900254972283
Epoch Step: 115 / 138 Loss: 42.9418830871582 Tokens per Sec: 24266.749735875313
Epoch Step: 120 / 138 Loss: 46.90818405151367 Tokens per Sec: 22579.451051139004
Epoch Step: 125 / 138 Loss: 70.82244110107422 Tokens per Sec: 22951.33605007399
Epoch Step: 130 / 138 Loss: 64.27985382080078 Tokens per Sec: 21147.424653046095
Epoch Step: 135 / 138 Loss: 59.13381576538086 Tokens per Sec: 23279.692526669056
Epoch ended with duration 0:00:26.735759
Train perplexity: 2.8398158606355444
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , int VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : : i ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( VAR_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , VAR_7 , VAR_5 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_4 , STRING_4 ) , true , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 < java.lang.String VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_3 ) ; org.junit.Assert.assertEquals . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , METHOD_3 ( METHOD_3 ( ) , VAR_3 , null ) , null ) ; } } }[0m
Epoch ended with duration 0:00:01.370836
Validation perplexity: 2.6720687502448204
Model saved best_on_validation!
Epoch 27 / 1000
Epoch Step: 5 / 138 Loss: 55.88963317871094 Tokens per Sec: 24167.313234411908
Epoch Step: 10 / 138 Loss: 59.5347900390625 Tokens per Sec: 23609.998930482765
Epoch Step: 15 / 138 Loss: 67.49201965332031 Tokens per Sec: 25667.656208028977
Epoch Step: 20 / 138 Loss: 36.18949890136719 Tokens per Sec: 24552.12550408898
Epoch Step: 25 / 138 Loss: 45.11570358276367 Tokens per Sec: 23840.044031128316
Epoch Step: 30 / 138 Loss: 35.9699592590332 Tokens per Sec: 24509.192754015854
Epoch Step: 35 / 138 Loss: 46.71598815917969 Tokens per Sec: 23634.14393431295
Epoch Step: 40 / 138 Loss: 47.894290924072266 Tokens per Sec: 22848.673230660468
Epoch Step: 45 / 138 Loss: 394.3501892089844 Tokens per Sec: 25613.381307793465
Epoch Step: 50 / 138 Loss: 44.86507034301758 Tokens per Sec: 25116.842167353887
Epoch Step: 55 / 138 Loss: 393.623291015625 Tokens per Sec: 25076.54752013265
Epoch Step: 60 / 138 Loss: 49.82853698730469 Tokens per Sec: 26794.709299015645
Epoch Step: 65 / 138 Loss: 65.9472427368164 Tokens per Sec: 24580.504927045444
Epoch Step: 70 / 138 Loss: 42.644561767578125 Tokens per Sec: 22363.787101324113
Epoch Step: 75 / 138 Loss: 56.368003845214844 Tokens per Sec: 22542.966869812335
Epoch Step: 80 / 138 Loss: 44.45774459838867 Tokens per Sec: 24588.665817877794
Epoch Step: 85 / 138 Loss: 221.25344848632812 Tokens per Sec: 24780.909695057282
Epoch Step: 90 / 138 Loss: 81.90428161621094 Tokens per Sec: 23397.912693165646
Epoch Step: 95 / 138 Loss: 50.24866485595703 Tokens per Sec: 24488.800995945494
Epoch Step: 100 / 138 Loss: 56.966209411621094 Tokens per Sec: 24997.082923861377
Epoch Step: 105 / 138 Loss: 71.0503158569336 Tokens per Sec: 23922.762308773785
Epoch Step: 110 / 138 Loss: 242.20596313476562 Tokens per Sec: 18689.17814355922
Epoch Step: 115 / 138 Loss: 46.62759780883789 Tokens per Sec: 23108.748407001873
Epoch Step: 120 / 138 Loss: 50.823974609375 Tokens per Sec: 23973.97888487781
Epoch Step: 125 / 138 Loss: 60.20055389404297 Tokens per Sec: 22094.546267688835
Epoch Step: 130 / 138 Loss: 57.56977081298828 Tokens per Sec: 22175.595539738217
Epoch Step: 135 / 138 Loss: 56.64439010620117 Tokens per Sec: 24013.37327081487
Epoch ended with duration 0:00:26.761504
Train perplexity: 2.933549562884725
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : : value ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( VAR_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , VAR_7 , VAR_5 , VAR_2 . METHOD_7 ( ) , 1 , STRING_4 , STRING_3 , STRING_4 , STRING_4 ) ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , } ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 a : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_3 ) ; org.junit.Assert.assertEquals . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.383527
Validation perplexity: 2.9899129948719567
Epoch 28 / 1000
Epoch Step: 5 / 138 Loss: 47.837581634521484 Tokens per Sec: 22314.41235117014
Epoch Step: 10 / 138 Loss: 62.09126663208008 Tokens per Sec: 23766.517236997843
Epoch Step: 15 / 138 Loss: 229.32496643066406 Tokens per Sec: 24239.160350857186
Epoch Step: 20 / 138 Loss: 63.601016998291016 Tokens per Sec: 22979.177406072493
Epoch Step: 25 / 138 Loss: 40.16663360595703 Tokens per Sec: 23524.40724382344
Epoch Step: 30 / 138 Loss: 54.61004638671875 Tokens per Sec: 24162.12861769649
Epoch Step: 35 / 138 Loss: 50.87129592895508 Tokens per Sec: 24165.403986581663
Epoch Step: 40 / 138 Loss: 67.280029296875 Tokens per Sec: 25888.3146934977
Epoch Step: 45 / 138 Loss: 69.89813995361328 Tokens per Sec: 21465.443287775543
Epoch Step: 50 / 138 Loss: 72.35874938964844 Tokens per Sec: 25509.314503193204
Epoch Step: 55 / 138 Loss: 52.30033493041992 Tokens per Sec: 25860.112723239185
Epoch Step: 60 / 138 Loss: 43.483516693115234 Tokens per Sec: 23599.95117685079
Epoch Step: 65 / 138 Loss: 71.30131530761719 Tokens per Sec: 24441.185759847343
Epoch Step: 70 / 138 Loss: 34.55642318725586 Tokens per Sec: 25478.11730976542
Epoch Step: 75 / 138 Loss: 60.27128601074219 Tokens per Sec: 25750.12390027266
Epoch Step: 80 / 138 Loss: 161.123779296875 Tokens per Sec: 24992.96139686223
Epoch Step: 85 / 138 Loss: 38.33684539794922 Tokens per Sec: 23371.33865186504
Epoch Step: 90 / 138 Loss: 216.71505737304688 Tokens per Sec: 23751.28574834589
Epoch Step: 95 / 138 Loss: 334.3596496582031 Tokens per Sec: 25239.416710613394
Epoch Step: 100 / 138 Loss: 81.66252899169922 Tokens per Sec: 24020.06318993873
Epoch Step: 105 / 138 Loss: 219.16189575195312 Tokens per Sec: 23388.659390353918
Epoch Step: 110 / 138 Loss: 60.480865478515625 Tokens per Sec: 22554.74769285063
Epoch Step: 115 / 138 Loss: 48.4227180480957 Tokens per Sec: 23356.842212399024
Epoch Step: 120 / 138 Loss: 61.1159553527832 Tokens per Sec: 23563.20719886955
Epoch Step: 125 / 138 Loss: 33.63005828857422 Tokens per Sec: 19796.890694189184
Epoch Step: 130 / 138 Loss: 48.19881057739258 Tokens per Sec: 23551.396853366183
Epoch Step: 135 / 138 Loss: 37.352134704589844 Tokens per Sec: 23355.263615331736
Epoch ended with duration 0:00:26.754818
Train perplexity: 3.053626957715115
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , int VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : : ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , ( ) , VAR_8 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_3 ) ; . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , METHOD_3 ( METHOD_3 ( ) , VAR_3 , null ) , null ) ; } } }[0m
Epoch ended with duration 0:00:01.404497
Validation perplexity: 2.724556026026537
Epoch 29 / 1000
Epoch Step: 5 / 138 Loss: 148.69004821777344 Tokens per Sec: 23141.619803361657
Epoch Step: 10 / 138 Loss: 39.104286193847656 Tokens per Sec: 25331.495388900745
Epoch Step: 15 / 138 Loss: 45.11301803588867 Tokens per Sec: 22685.803797310182
Epoch Step: 20 / 138 Loss: 43.79821014404297 Tokens per Sec: 24813.785626114048
Epoch Step: 25 / 138 Loss: 56.959476470947266 Tokens per Sec: 25062.332340927846
Epoch Step: 30 / 138 Loss: 48.52579116821289 Tokens per Sec: 23076.089314422494
Epoch Step: 35 / 138 Loss: 57.45893478393555 Tokens per Sec: 25252.24525070482
Epoch Step: 40 / 138 Loss: 50.87580490112305 Tokens per Sec: 24401.750503049134
Epoch Step: 45 / 138 Loss: 68.19884490966797 Tokens per Sec: 25928.513123518613
Epoch Step: 50 / 138 Loss: 34.23971176147461 Tokens per Sec: 23709.945855736405
Epoch Step: 55 / 138 Loss: 68.77418518066406 Tokens per Sec: 24033.569833730064
Epoch Step: 60 / 138 Loss: 51.49656295776367 Tokens per Sec: 25117.529481580463
Epoch Step: 65 / 138 Loss: 52.14997100830078 Tokens per Sec: 24053.55178999371
Epoch Step: 70 / 138 Loss: 37.82520294189453 Tokens per Sec: 23932.151168213953
Epoch Step: 75 / 138 Loss: 59.69103240966797 Tokens per Sec: 24536.528410099036
Epoch Step: 80 / 138 Loss: 290.1632080078125 Tokens per Sec: 23259.83855687182
Epoch Step: 85 / 138 Loss: 64.06070709228516 Tokens per Sec: 25896.526037190644
Epoch Step: 90 / 138 Loss: 40.833553314208984 Tokens per Sec: 23928.878183361103
Epoch Step: 95 / 138 Loss: 39.4229621887207 Tokens per Sec: 23003.05188643935
Epoch Step: 100 / 138 Loss: 39.39198684692383 Tokens per Sec: 22827.50346315014
Epoch Step: 105 / 138 Loss: 54.476078033447266 Tokens per Sec: 20324.46677523018
Epoch Step: 110 / 138 Loss: 50.41452407836914 Tokens per Sec: 22532.546358988322
Epoch Step: 115 / 138 Loss: 44.231136322021484 Tokens per Sec: 21863.781436190275
Epoch Step: 120 / 138 Loss: 65.69048309326172 Tokens per Sec: 23890.107107937132
Epoch Step: 125 / 138 Loss: 48.648345947265625 Tokens per Sec: 23775.61102830126
Epoch Step: 130 / 138 Loss: 56.710845947265625 Tokens per Sec: 21927.262985964822
Epoch Step: 135 / 138 Loss: 55.99082946777344 Tokens per Sec: 21809.434547473244
Epoch ended with duration 0:00:26.895501
Train perplexity: 3.0465325454745917
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , VAR_7 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_4 ) ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 service : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; VAR_8 . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , METHOD_3 ( METHOD_3 ( ) , VAR_3 , null , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.399484
Validation perplexity: 4.337782166266115
Epoch 30 / 1000
Epoch Step: 5 / 138 Loss: 40.76066207885742 Tokens per Sec: 23960.829177271644
Epoch Step: 10 / 138 Loss: 45.897804260253906 Tokens per Sec: 24719.511661861827
Epoch Step: 15 / 138 Loss: 35.55344772338867 Tokens per Sec: 24654.595494246165
Epoch Step: 20 / 138 Loss: 41.52922439575195 Tokens per Sec: 24884.741437122917
Epoch Step: 25 / 138 Loss: 36.43764114379883 Tokens per Sec: 25873.223481787423
Epoch Step: 30 / 138 Loss: 43.38813781738281 Tokens per Sec: 22654.48798341997
Epoch Step: 35 / 138 Loss: 54.79330062866211 Tokens per Sec: 26527.548747572917
Epoch Step: 40 / 138 Loss: 48.9041862487793 Tokens per Sec: 22323.65218261803
Epoch Step: 45 / 138 Loss: 37.59450149536133 Tokens per Sec: 26401.0210503576
Epoch Step: 50 / 138 Loss: 53.12928771972656 Tokens per Sec: 24508.196917575104
Epoch Step: 55 / 138 Loss: 52.84090805053711 Tokens per Sec: 23627.82836793694
Epoch Step: 60 / 138 Loss: 56.554412841796875 Tokens per Sec: 23876.569864809702
Epoch Step: 65 / 138 Loss: 33.668949127197266 Tokens per Sec: 21784.751579503194
Epoch Step: 70 / 138 Loss: 40.177433013916016 Tokens per Sec: 24848.02666031897
Epoch Step: 75 / 138 Loss: 53.27676010131836 Tokens per Sec: 24553.854206447937
Epoch Step: 80 / 138 Loss: 59.82035827636719 Tokens per Sec: 25711.095462135727
Epoch Step: 85 / 138 Loss: 52.05963897705078 Tokens per Sec: 25603.463837303014
Epoch Step: 90 / 138 Loss: 357.9312744140625 Tokens per Sec: 25050.82628243557
Epoch Step: 95 / 138 Loss: 53.23857498168945 Tokens per Sec: 23589.97654666713
Epoch Step: 100 / 138 Loss: 26.705354690551758 Tokens per Sec: 25980.644221551065
Epoch Step: 105 / 138 Loss: 37.766456604003906 Tokens per Sec: 21504.071422242916
Epoch Step: 110 / 138 Loss: 288.4134826660156 Tokens per Sec: 22659.29495943378
Epoch Step: 115 / 138 Loss: 36.68102264404297 Tokens per Sec: 22841.83391020191
Epoch Step: 120 / 138 Loss: 57.04053497314453 Tokens per Sec: 23828.775379512062
Epoch Step: 125 / 138 Loss: 60.50591278076172 Tokens per Sec: 22945.7509825611
Epoch Step: 130 / 138 Loss: 67.11734008789062 Tokens per Sec: 20223.305856960535
Epoch Step: 135 / 138 Loss: 36.99587631225586 Tokens per Sec: 23578.732518095985
Epoch ended with duration 0:00:26.648171
Train perplexity: 2.423140606103814
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( int i : : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_4 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 context : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , VAR_4 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.392612
Validation perplexity: 2.6066957595546354
Model saved best_on_validation!
Model saved checkpoint!
Epoch 31 / 1000
Epoch Step: 5 / 138 Loss: 41.36833572387695 Tokens per Sec: 22649.84216923858
Epoch Step: 10 / 138 Loss: 66.75897216796875 Tokens per Sec: 23166.55632840535
Epoch Step: 15 / 138 Loss: 48.34109878540039 Tokens per Sec: 24695.68575612734
Epoch Step: 20 / 138 Loss: 41.57388687133789 Tokens per Sec: 24690.204354534777
Epoch Step: 25 / 138 Loss: 32.5504035949707 Tokens per Sec: 23422.9696599432
Epoch Step: 30 / 138 Loss: 48.560306549072266 Tokens per Sec: 24574.892183712425
Epoch Step: 35 / 138 Loss: 56.49134826660156 Tokens per Sec: 25828.86790415819
Epoch Step: 40 / 138 Loss: 299.8644714355469 Tokens per Sec: 25199.977647083055
Epoch Step: 45 / 138 Loss: 56.73817825317383 Tokens per Sec: 22628.88126477766
Epoch Step: 50 / 138 Loss: 50.372528076171875 Tokens per Sec: 24894.30582482753
Epoch Step: 55 / 138 Loss: 50.62525939941406 Tokens per Sec: 24620.332212912086
Epoch Step: 60 / 138 Loss: 54.75811767578125 Tokens per Sec: 24935.99915375269
Epoch Step: 65 / 138 Loss: 36.13531494140625 Tokens per Sec: 23357.529766225478
Epoch Step: 70 / 138 Loss: 36.0272331237793 Tokens per Sec: 24149.564519317995
Epoch Step: 75 / 138 Loss: 57.116432189941406 Tokens per Sec: 24307.588761508712
Epoch Step: 80 / 138 Loss: 57.248817443847656 Tokens per Sec: 24728.693570423966
Epoch Step: 85 / 138 Loss: 48.88175964355469 Tokens per Sec: 23492.856457890262
Epoch Step: 90 / 138 Loss: 36.17139434814453 Tokens per Sec: 25832.981965777733
Epoch Step: 95 / 138 Loss: 49.86758804321289 Tokens per Sec: 24274.45408457218
Epoch Step: 100 / 138 Loss: 49.12178421020508 Tokens per Sec: 25982.23274861565
Epoch Step: 105 / 138 Loss: 52.62275695800781 Tokens per Sec: 24645.20081232742
Epoch Step: 110 / 138 Loss: 35.5268669128418 Tokens per Sec: 21536.333984040095
Epoch Step: 115 / 138 Loss: 52.58879852294922 Tokens per Sec: 22323.597251721676
Epoch Step: 120 / 138 Loss: 37.17043685913086 Tokens per Sec: 22126.393230290993
Epoch Step: 125 / 138 Loss: 38.8800163269043 Tokens per Sec: 22651.958862195617
Epoch Step: 130 / 138 Loss: 36.406585693359375 Tokens per Sec: 21430.318027262434
Epoch Step: 135 / 138 Loss: 39.215087890625 Tokens per Sec: 22552.73963524736
Epoch ended with duration 0:00:26.741831
Train perplexity: 2.290936914794827
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long i : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , true ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 x : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; VAR_8 . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.368268
Validation perplexity: 2.117847307620332
Model saved best_on_validation!
Epoch 32 / 1000
Epoch Step: 5 / 138 Loss: 46.77457809448242 Tokens per Sec: 24621.57019881628
Epoch Step: 10 / 138 Loss: 48.99728775024414 Tokens per Sec: 22802.253310507152
Epoch Step: 15 / 138 Loss: 34.276737213134766 Tokens per Sec: 25489.333337209784
Epoch Step: 20 / 138 Loss: 54.59429168701172 Tokens per Sec: 25032.24878796774
Epoch Step: 25 / 138 Loss: 297.6402587890625 Tokens per Sec: 25501.006358366296
Epoch Step: 30 / 138 Loss: 26.759122848510742 Tokens per Sec: 22851.569451072417
Epoch Step: 35 / 138 Loss: 32.96596908569336 Tokens per Sec: 26015.259383528468
Epoch Step: 40 / 138 Loss: 51.997230529785156 Tokens per Sec: 24045.57580922882
Epoch Step: 45 / 138 Loss: 28.671178817749023 Tokens per Sec: 25207.100672869532
Epoch Step: 50 / 138 Loss: 33.98984146118164 Tokens per Sec: 23836.00513868146
Epoch Step: 55 / 138 Loss: 36.26026153564453 Tokens per Sec: 22792.87653914597
Epoch Step: 60 / 138 Loss: 43.72898483276367 Tokens per Sec: 23508.012427311347
Epoch Step: 65 / 138 Loss: 64.73851013183594 Tokens per Sec: 24567.47851493599
Epoch Step: 70 / 138 Loss: 40.86151885986328 Tokens per Sec: 23921.488411384627
Epoch Step: 75 / 138 Loss: 36.108360290527344 Tokens per Sec: 22583.221283629326
Epoch Step: 80 / 138 Loss: 64.77813720703125 Tokens per Sec: 24188.898441020512
Epoch Step: 85 / 138 Loss: 51.7593994140625 Tokens per Sec: 26077.33926812117
Epoch Step: 90 / 138 Loss: 49.748558044433594 Tokens per Sec: 25620.89968242961
Epoch Step: 95 / 138 Loss: 39.9610595703125 Tokens per Sec: 22710.901498098945
Epoch Step: 100 / 138 Loss: 36.785179138183594 Tokens per Sec: 24514.15109139473
Epoch Step: 105 / 138 Loss: 51.48942184448242 Tokens per Sec: 24032.427798102046
Epoch Step: 110 / 138 Loss: 37.950931549072266 Tokens per Sec: 20286.535456054713
Epoch Step: 115 / 138 Loss: 42.23497009277344 Tokens per Sec: 23056.40831313842
Epoch Step: 120 / 138 Loss: 327.09283447265625 Tokens per Sec: 23322.984217132023
Epoch Step: 125 / 138 Loss: 37.39458084106445 Tokens per Sec: 23056.974384986734
Epoch Step: 130 / 138 Loss: 31.62493133544922 Tokens per Sec: 23209.973846922734
Epoch Step: 135 / 138 Loss: 52.82164764404297 Tokens per Sec: 22559.6689714837
Epoch ended with duration 0:00:26.761837
Train perplexity: 2.617771504431671
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long i : : value ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 service : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; VAR_8 . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( METHOD_3 ( ) , VAR_3 , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.360441
Validation perplexity: 1.7703771196687157
Model saved best_on_validation!
Epoch 33 / 1000
Epoch Step: 5 / 138 Loss: 37.114742279052734 Tokens per Sec: 23044.86991124746
Epoch Step: 10 / 138 Loss: 34.52317428588867 Tokens per Sec: 23385.419828651513
Epoch Step: 15 / 138 Loss: 41.95806121826172 Tokens per Sec: 25472.694592592674
Epoch Step: 20 / 138 Loss: 46.542476654052734 Tokens per Sec: 24334.829528968407
Epoch Step: 25 / 138 Loss: 28.492204666137695 Tokens per Sec: 26941.35840197605
Epoch Step: 30 / 138 Loss: 48.956573486328125 Tokens per Sec: 23292.433548100184
Epoch Step: 35 / 138 Loss: 26.74576759338379 Tokens per Sec: 25354.94402724331
Epoch Step: 40 / 138 Loss: 38.98439407348633 Tokens per Sec: 25537.03727167775
Epoch Step: 45 / 138 Loss: 45.38254928588867 Tokens per Sec: 24215.04523866423
Epoch Step: 50 / 138 Loss: 39.09967803955078 Tokens per Sec: 23558.17078946482
Epoch Step: 55 / 138 Loss: 55.58522033691406 Tokens per Sec: 24315.817346714877
Epoch Step: 60 / 138 Loss: 48.957481384277344 Tokens per Sec: 25190.28402012059
Epoch Step: 65 / 138 Loss: 44.6011848449707 Tokens per Sec: 25533.201917665316
Epoch Step: 70 / 138 Loss: 48.857872009277344 Tokens per Sec: 23740.23175070118
Epoch Step: 75 / 138 Loss: 44.95835494995117 Tokens per Sec: 23814.045058312793
Epoch Step: 80 / 138 Loss: 49.00611877441406 Tokens per Sec: 22172.543954709647
Epoch Step: 85 / 138 Loss: 38.10169219970703 Tokens per Sec: 22447.227700300842
Epoch Step: 90 / 138 Loss: 35.34476089477539 Tokens per Sec: 23846.719494661418
Epoch Step: 95 / 138 Loss: 28.1087646484375 Tokens per Sec: 24717.81050569772
Epoch Step: 100 / 138 Loss: 47.012046813964844 Tokens per Sec: 26244.59562541082
Epoch Step: 105 / 138 Loss: 56.849369049072266 Tokens per Sec: 20295.938040369452
Epoch Step: 110 / 138 Loss: 34.61319351196289 Tokens per Sec: 21739.05809775521
Epoch Step: 115 / 138 Loss: 42.58662796020508 Tokens per Sec: 23283.84365125067
Epoch Step: 120 / 138 Loss: 49.99135208129883 Tokens per Sec: 23186.25939324823
Epoch Step: 125 / 138 Loss: 37.564517974853516 Tokens per Sec: 22916.44823079255
Epoch Step: 130 / 138 Loss: 47.200199127197266 Tokens per Sec: 22372.160308937895
Epoch Step: 135 / 138 Loss: 40.35792541503906 Tokens per Sec: 22548.23867263538
Epoch ended with duration 0:00:26.786646
Train perplexity: 2.2193805052585907
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long i : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_5 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) throws TYPE_5 = TYPE_6 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , true , ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 x : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; VAR_8 . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( ) , VAR_4 . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.391113
Validation perplexity: 2.492109065525987
Epoch 34 / 1000
Epoch Step: 5 / 138 Loss: 25.54501724243164 Tokens per Sec: 24464.21525811457
Epoch Step: 10 / 138 Loss: 27.02356719970703 Tokens per Sec: 24277.625561916375
Epoch Step: 15 / 138 Loss: 31.252696990966797 Tokens per Sec: 24661.655711962667
Epoch Step: 20 / 138 Loss: 46.87435531616211 Tokens per Sec: 24885.372800686597
Epoch Step: 25 / 138 Loss: 34.4354248046875 Tokens per Sec: 25690.09997659747
Epoch Step: 30 / 138 Loss: 30.082544326782227 Tokens per Sec: 24391.644947474782
Epoch Step: 35 / 138 Loss: 41.79067611694336 Tokens per Sec: 25523.605848499625
Epoch Step: 40 / 138 Loss: 152.47073364257812 Tokens per Sec: 23351.271871602108
Epoch Step: 45 / 138 Loss: 29.39291000366211 Tokens per Sec: 24012.082829318617
Epoch Step: 50 / 138 Loss: 54.70710754394531 Tokens per Sec: 24758.529166151515
Epoch Step: 55 / 138 Loss: 34.41168975830078 Tokens per Sec: 24553.4429160823
Epoch Step: 60 / 138 Loss: 42.88641357421875 Tokens per Sec: 22676.605271653636
Epoch Step: 65 / 138 Loss: 43.54108428955078 Tokens per Sec: 25060.393522046303
Epoch Step: 70 / 138 Loss: 25.634849548339844 Tokens per Sec: 24894.273484130255
Epoch Step: 75 / 138 Loss: 313.62945556640625 Tokens per Sec: 24195.83693499637
Epoch Step: 80 / 138 Loss: 36.03636169433594 Tokens per Sec: 22708.71212801991
Epoch Step: 85 / 138 Loss: 31.052085876464844 Tokens per Sec: 24228.4989260929
Epoch Step: 90 / 138 Loss: 38.898738861083984 Tokens per Sec: 24867.609136372314
Epoch Step: 95 / 138 Loss: 50.120216369628906 Tokens per Sec: 23689.068191400533
Epoch Step: 100 / 138 Loss: 36.955970764160156 Tokens per Sec: 23875.24250952465
Epoch Step: 105 / 138 Loss: 35.682945251464844 Tokens per Sec: 22286.175239726672
Epoch Step: 110 / 138 Loss: 32.51401138305664 Tokens per Sec: 20517.9446863012
Epoch Step: 115 / 138 Loss: 48.162445068359375 Tokens per Sec: 23775.300174617056
Epoch Step: 120 / 138 Loss: 38.72838592529297 Tokens per Sec: 21780.97091668372
Epoch Step: 125 / 138 Loss: 37.84773635864258 Tokens per Sec: 23650.87730866488
Epoch Step: 130 / 138 Loss: 45.59382629394531 Tokens per Sec: 21576.379669185502
Epoch Step: 135 / 138 Loss: 29.404603958129883 Tokens per Sec: 22181.35105246134
Epoch ended with duration 0:00:26.842190
Train perplexity: 2.3261774680220326
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 x : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.mockito.Mockito.verify . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( METHOD_3 ( ) , VAR_3 , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.381983
Validation perplexity: 2.6062280757361944
Epoch 35 / 1000
Epoch Step: 5 / 138 Loss: 47.24246597290039 Tokens per Sec: 23974.88698897604
Epoch Step: 10 / 138 Loss: 45.79684829711914 Tokens per Sec: 26327.993846287987
Epoch Step: 15 / 138 Loss: 328.0309753417969 Tokens per Sec: 24824.134790707125
Epoch Step: 20 / 138 Loss: 220.91554260253906 Tokens per Sec: 25553.096452505313
Epoch Step: 25 / 138 Loss: 187.7890167236328 Tokens per Sec: 24451.94187546476
Epoch Step: 30 / 138 Loss: 43.55022048950195 Tokens per Sec: 23693.503883499197
Epoch Step: 35 / 138 Loss: 26.52286720275879 Tokens per Sec: 24960.40024260311
Epoch Step: 40 / 138 Loss: 52.806793212890625 Tokens per Sec: 25276.826723630245
Epoch Step: 45 / 138 Loss: 47.731895446777344 Tokens per Sec: 25574.650838303798
Epoch Step: 50 / 138 Loss: 51.41930389404297 Tokens per Sec: 23731.294027956937
Epoch Step: 55 / 138 Loss: 255.203125 Tokens per Sec: 22634.46889099061
Epoch Step: 60 / 138 Loss: 32.876705169677734 Tokens per Sec: 24118.44368306386
Epoch Step: 65 / 138 Loss: 43.8876838684082 Tokens per Sec: 22425.87774979036
Epoch Step: 70 / 138 Loss: 43.01047897338867 Tokens per Sec: 24231.30299532608
Epoch Step: 75 / 138 Loss: 44.51863098144531 Tokens per Sec: 23452.55388937126
Epoch Step: 80 / 138 Loss: 50.91831588745117 Tokens per Sec: 22606.713387426233
Epoch Step: 85 / 138 Loss: 181.60260009765625 Tokens per Sec: 23072.521025139613
Epoch Step: 90 / 138 Loss: 40.77885055541992 Tokens per Sec: 24153.724002575014
Epoch Step: 95 / 138 Loss: 31.76074981689453 Tokens per Sec: 25587.96230918029
Epoch Step: 100 / 138 Loss: 26.322147369384766 Tokens per Sec: 25769.352897435092
Epoch Step: 105 / 138 Loss: 301.99224853515625 Tokens per Sec: 22834.392474806813
Epoch Step: 110 / 138 Loss: 39.00764846801758 Tokens per Sec: 23410.965829389843
Epoch Step: 115 / 138 Loss: 53.24304962158203 Tokens per Sec: 20617.793713374194
Epoch Step: 120 / 138 Loss: 30.76862144470215 Tokens per Sec: 23135.172127781272
Epoch Step: 125 / 138 Loss: 35.702754974365234 Tokens per Sec: 22707.228493691233
Epoch Step: 130 / 138 Loss: 166.3229217529297 Tokens per Sec: 22553.764164118216
Epoch Step: 135 / 138 Loss: 36.647674560546875 Tokens per Sec: 24280.729299405833
Epoch ended with duration 0:00:26.725458
Train perplexity: 2.5845567641801312
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_5 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 x : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; VAR_8 . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( 0 , METHOD_3 ( ) , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.367003
Validation perplexity: 1.9631892482246283
Model saved checkpoint!
Epoch 36 / 1000
Epoch Step: 5 / 138 Loss: 45.549800872802734 Tokens per Sec: 23554.962328334106
Epoch Step: 10 / 138 Loss: 35.6166877746582 Tokens per Sec: 23881.752938158126
Epoch Step: 15 / 138 Loss: 38.030296325683594 Tokens per Sec: 23331.784209759804
Epoch Step: 20 / 138 Loss: 38.792938232421875 Tokens per Sec: 22728.26831916338
Epoch Step: 25 / 138 Loss: 32.597755432128906 Tokens per Sec: 22206.853949325276
Epoch Step: 30 / 138 Loss: 39.026519775390625 Tokens per Sec: 24833.22675505903
Epoch Step: 35 / 138 Loss: 33.10764694213867 Tokens per Sec: 24588.587703453068
Epoch Step: 40 / 138 Loss: 242.11456298828125 Tokens per Sec: 24889.421426462006
Epoch Step: 45 / 138 Loss: 42.845069885253906 Tokens per Sec: 26462.478979312025
Epoch Step: 50 / 138 Loss: 37.376617431640625 Tokens per Sec: 24718.237739028325
Epoch Step: 55 / 138 Loss: 27.906694412231445 Tokens per Sec: 26622.84122187743
Epoch Step: 60 / 138 Loss: 293.1522216796875 Tokens per Sec: 23211.238939174917
Epoch Step: 65 / 138 Loss: 28.80034065246582 Tokens per Sec: 26384.049915919757
Epoch Step: 70 / 138 Loss: 40.33444595336914 Tokens per Sec: 25346.06037489439
Epoch Step: 75 / 138 Loss: 246.43756103515625 Tokens per Sec: 22300.14782256826
Epoch Step: 80 / 138 Loss: 41.73368835449219 Tokens per Sec: 24122.538935852575
Epoch Step: 85 / 138 Loss: 38.73590087890625 Tokens per Sec: 24219.007869504014
Epoch Step: 90 / 138 Loss: 44.777984619140625 Tokens per Sec: 24477.346401385657
Epoch Step: 95 / 138 Loss: 35.77665328979492 Tokens per Sec: 24646.13394590317
Epoch Step: 100 / 138 Loss: 25.728391647338867 Tokens per Sec: 26367.079674976558
Epoch Step: 105 / 138 Loss: 25.5445613861084 Tokens per Sec: 23952.791372543285
Epoch Step: 110 / 138 Loss: 33.43669891357422 Tokens per Sec: 23490.399567186192
Epoch Step: 115 / 138 Loss: 27.02544403076172 Tokens per Sec: 22124.73831667673
Epoch Step: 120 / 138 Loss: 40.10948944091797 Tokens per Sec: 22555.28252614471
Epoch Step: 125 / 138 Loss: 48.61299514770508 Tokens per Sec: 24481.875573974652
Epoch Step: 130 / 138 Loss: 44.975284576416016 Tokens per Sec: 23464.39586540576
Epoch Step: 135 / 138 Loss: 46.80405044555664 Tokens per Sec: 19776.516762084746
Epoch ended with duration 0:00:26.604596
Train perplexity: 1.969404549045652
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) throws TYPE_5 { TYPE_6 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , true ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 x : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; VAR_8 . METHOD_2 ( VAR_4 , 0 , METHOD_3 ( METHOD_3 ( ) , VAR_3 , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.388794
Validation perplexity: 2.951856091518677
Epoch 37 / 1000
Epoch Step: 5 / 138 Loss: 48.551212310791016 Tokens per Sec: 23658.427851707092
Epoch Step: 10 / 138 Loss: 44.95586013793945 Tokens per Sec: 23714.33251992554
Epoch Step: 15 / 138 Loss: 39.015140533447266 Tokens per Sec: 23518.96486942106
Epoch Step: 20 / 138 Loss: 49.98583984375 Tokens per Sec: 25056.051585468933
Epoch Step: 25 / 138 Loss: 172.19068908691406 Tokens per Sec: 24821.39809557554
Epoch Step: 30 / 138 Loss: 44.56819534301758 Tokens per Sec: 24321.944332988645
Epoch Step: 35 / 138 Loss: 44.96891403198242 Tokens per Sec: 24612.266182443593
Epoch Step: 40 / 138 Loss: 49.753787994384766 Tokens per Sec: 24785.26604361371
Epoch Step: 45 / 138 Loss: 25.40936279296875 Tokens per Sec: 25500.600958610292
Epoch Step: 50 / 138 Loss: 24.927326202392578 Tokens per Sec: 25284.624078442426
Epoch Step: 55 / 138 Loss: 34.87318801879883 Tokens per Sec: 24460.578821444396
Epoch Step: 60 / 138 Loss: 29.906435012817383 Tokens per Sec: 21443.185440722707
Epoch Step: 65 / 138 Loss: 21.226951599121094 Tokens per Sec: 24817.120021502164
Epoch Step: 70 / 138 Loss: 42.19355773925781 Tokens per Sec: 23656.899921366523
Epoch Step: 75 / 138 Loss: 32.35912322998047 Tokens per Sec: 21505.73790647052
Epoch Step: 80 / 138 Loss: 34.550594329833984 Tokens per Sec: 24639.73054726644
Epoch Step: 85 / 138 Loss: 35.42392349243164 Tokens per Sec: 25709.437764496604
Epoch Step: 90 / 138 Loss: 22.442167282104492 Tokens per Sec: 24575.68266252923
Epoch Step: 95 / 138 Loss: 34.67751693725586 Tokens per Sec: 24544.959016712586
Epoch Step: 100 / 138 Loss: 57.57020950317383 Tokens per Sec: 25096.169680747153
Epoch Step: 105 / 138 Loss: 56.105995178222656 Tokens per Sec: 23372.432044906924
Epoch Step: 110 / 138 Loss: 31.93745994567871 Tokens per Sec: 22992.4584277103
Epoch Step: 115 / 138 Loss: 193.26312255859375 Tokens per Sec: 23267.94938170268
Epoch Step: 120 / 138 Loss: 41.68403244018555 Tokens per Sec: 24337.53865529914
Epoch Step: 125 / 138 Loss: 34.434120178222656 Tokens per Sec: 22885.04086552504
Epoch Step: 130 / 138 Loss: 186.1586456298828 Tokens per Sec: 21790.280881124214
Epoch Step: 135 / 138 Loss: 43.8917350769043 Tokens per Sec: 23988.73852185555
Epoch ended with duration 0:00:26.771452
Train perplexity: 2.444451145537545
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) throws TYPE_5 { TYPE_6 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 x : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; VAR_8 . METHOD_2 ( VAR_4 , 0 , METHOD_3 ( METHOD_3 ( ) , VAR_3 , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.367970
Validation perplexity: 1.884755576367837
Epoch 38 / 1000
Epoch Step: 5 / 138 Loss: 21.30081558227539 Tokens per Sec: 26076.43356981234
Epoch Step: 10 / 138 Loss: 33.1425666809082 Tokens per Sec: 24762.167111277242
Epoch Step: 15 / 138 Loss: 46.00041198730469 Tokens per Sec: 25840.367622133428
Epoch Step: 20 / 138 Loss: 226.83433532714844 Tokens per Sec: 21929.36204461013
Epoch Step: 25 / 138 Loss: 37.54533004760742 Tokens per Sec: 25045.097323021033
Epoch Step: 30 / 138 Loss: 38.663818359375 Tokens per Sec: 24419.306109998488
Epoch Step: 35 / 138 Loss: 38.63971710205078 Tokens per Sec: 21631.52574928926
Epoch Step: 40 / 138 Loss: 23.179731369018555 Tokens per Sec: 25526.81191318338
Epoch Step: 45 / 138 Loss: 28.460886001586914 Tokens per Sec: 25281.941806057654
Epoch Step: 50 / 138 Loss: 35.627708435058594 Tokens per Sec: 25125.052625359738
Epoch Step: 55 / 138 Loss: 310.9955139160156 Tokens per Sec: 24894.36229479449
Epoch Step: 60 / 138 Loss: 20.958032608032227 Tokens per Sec: 21230.88037625678
Epoch Step: 65 / 138 Loss: 44.15330123901367 Tokens per Sec: 23095.32635008825
Epoch Step: 70 / 138 Loss: 45.57375717163086 Tokens per Sec: 26343.137595362314
Epoch Step: 75 / 138 Loss: 185.62478637695312 Tokens per Sec: 23515.89820466175
Epoch Step: 80 / 138 Loss: 36.48588180541992 Tokens per Sec: 23377.025322766953
Epoch Step: 85 / 138 Loss: 254.3230438232422 Tokens per Sec: 23737.169042992875
Epoch Step: 90 / 138 Loss: 27.422657012939453 Tokens per Sec: 23182.950266122643
Epoch Step: 95 / 138 Loss: 33.24586868286133 Tokens per Sec: 23763.332586697405
Epoch Step: 100 / 138 Loss: 35.91032791137695 Tokens per Sec: 25447.24601744757
Epoch Step: 105 / 138 Loss: 49.352210998535156 Tokens per Sec: 22720.74268016306
Epoch Step: 110 / 138 Loss: 31.20296287536621 Tokens per Sec: 19603.37811034408
Epoch Step: 115 / 138 Loss: 26.840404510498047 Tokens per Sec: 24342.23166358387
Epoch Step: 120 / 138 Loss: 35.53291320800781 Tokens per Sec: 23627.866372762684
Epoch Step: 125 / 138 Loss: 36.16142272949219 Tokens per Sec: 22584.36977198431
Epoch Step: 130 / 138 Loss: 38.23975372314453 Tokens per Sec: 23021.51664896328
Epoch Step: 135 / 138 Loss: 29.71799659729004 Tokens per Sec: 23256.272880072236
Epoch ended with duration 0:00:26.837166
Train perplexity: 2.3910016334295614
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; VAR_8 . METHOD_2 ( VAR_4 , 0 , METHOD_3 ( METHOD_3 ( ) , VAR_3 , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.404667
Validation perplexity: 2.1271736064465934
Epoch 39 / 1000
Epoch Step: 5 / 138 Loss: 47.161163330078125 Tokens per Sec: 25596.79392713093
Epoch Step: 10 / 138 Loss: 191.84072875976562 Tokens per Sec: 24392.064834056644
Epoch Step: 15 / 138 Loss: 38.597862243652344 Tokens per Sec: 23197.953542775187
Epoch Step: 20 / 138 Loss: 37.70030212402344 Tokens per Sec: 23340.05446891951
Epoch Step: 25 / 138 Loss: 30.176240921020508 Tokens per Sec: 25080.480369188383
Epoch Step: 30 / 138 Loss: 53.267333984375 Tokens per Sec: 24869.122378769287
Epoch Step: 35 / 138 Loss: 50.74620819091797 Tokens per Sec: 23208.57456262687
Epoch Step: 40 / 138 Loss: 304.9259033203125 Tokens per Sec: 24156.808597945976
Epoch Step: 45 / 138 Loss: 43.63851547241211 Tokens per Sec: 23729.178947047425
Epoch Step: 50 / 138 Loss: 27.40904426574707 Tokens per Sec: 24497.808694082712
Epoch Step: 55 / 138 Loss: 44.698341369628906 Tokens per Sec: 24294.922384739635
Epoch Step: 60 / 138 Loss: 45.04905700683594 Tokens per Sec: 25019.189347340667
Epoch Step: 65 / 138 Loss: 24.402324676513672 Tokens per Sec: 26205.827197869075
Epoch Step: 70 / 138 Loss: 34.65346908569336 Tokens per Sec: 21567.884587152737
Epoch Step: 75 / 138 Loss: 37.727474212646484 Tokens per Sec: 23384.766735269746
Epoch Step: 80 / 138 Loss: 30.723180770874023 Tokens per Sec: 24035.353360555975
Epoch Step: 85 / 138 Loss: 29.351520538330078 Tokens per Sec: 26283.194838630312
Epoch Step: 90 / 138 Loss: 30.18706703186035 Tokens per Sec: 23848.47149713069
Epoch Step: 95 / 138 Loss: 41.421600341796875 Tokens per Sec: 25332.181698973334
Epoch Step: 100 / 138 Loss: 310.5487976074219 Tokens per Sec: 21936.42830919669
Epoch Step: 105 / 138 Loss: 42.10962677001953 Tokens per Sec: 19614.057667646804
Epoch Step: 110 / 138 Loss: 31.78078842163086 Tokens per Sec: 23322.243137162965
Epoch Step: 115 / 138 Loss: 30.394102096557617 Tokens per Sec: 23526.197164065048
Epoch Step: 120 / 138 Loss: 35.311702728271484 Tokens per Sec: 23316.99986166828
Epoch Step: 125 / 138 Loss: 29.66888427734375 Tokens per Sec: 23970.7048643591
Epoch Step: 130 / 138 Loss: 145.677490234375 Tokens per Sec: 23620.53423431116
Epoch Step: 135 / 138 Loss: 22.72538185119629 Tokens per Sec: 22795.898679470836
Epoch ended with duration 0:00:26.781008
Train perplexity: 2.3412370441867187
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; org.mockito.Mockito.verify . METHOD_2 ( VAR_4 , VAR_4 , METHOD_3 ( 0 ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.359912
Validation perplexity: 1.5775106467180735
Model saved best_on_validation!
Epoch 40 / 1000
Epoch Step: 5 / 138 Loss: 29.730525970458984 Tokens per Sec: 21893.2692754684
Epoch Step: 10 / 138 Loss: 31.946613311767578 Tokens per Sec: 25348.509889872654
Epoch Step: 15 / 138 Loss: 43.65634536743164 Tokens per Sec: 24503.867829204206
Epoch Step: 20 / 138 Loss: 36.49923324584961 Tokens per Sec: 25410.317999177052
Epoch Step: 25 / 138 Loss: 39.46503448486328 Tokens per Sec: 25051.96896567166
Epoch Step: 30 / 138 Loss: 28.911001205444336 Tokens per Sec: 25026.190904574476
Epoch Step: 35 / 138 Loss: 38.963905334472656 Tokens per Sec: 24458.468714573613
Epoch Step: 40 / 138 Loss: 42.27019500732422 Tokens per Sec: 21303.751545846575
Epoch Step: 45 / 138 Loss: 219.10072326660156 Tokens per Sec: 24753.81826532856
Epoch Step: 50 / 138 Loss: 53.21120834350586 Tokens per Sec: 23906.357313087155
Epoch Step: 55 / 138 Loss: 22.346717834472656 Tokens per Sec: 25566.901909563363
Epoch Step: 60 / 138 Loss: 38.563697814941406 Tokens per Sec: 25790.95130661316
Epoch Step: 65 / 138 Loss: 35.12910461425781 Tokens per Sec: 23336.42464753858
Epoch Step: 70 / 138 Loss: 273.3609924316406 Tokens per Sec: 22976.8777425675
Epoch Step: 75 / 138 Loss: 41.73539733886719 Tokens per Sec: 23451.436510547243
Epoch Step: 80 / 138 Loss: 32.88545608520508 Tokens per Sec: 23095.261875303917
Epoch Step: 85 / 138 Loss: 45.661991119384766 Tokens per Sec: 26222.773135515974
Epoch Step: 90 / 138 Loss: 24.389785766601562 Tokens per Sec: 23685.388773903458
Epoch Step: 95 / 138 Loss: 215.54312133789062 Tokens per Sec: 23988.400892108133
Epoch Step: 100 / 138 Loss: 39.096954345703125 Tokens per Sec: 25237.659553701425
Epoch Step: 105 / 138 Loss: 26.42247772216797 Tokens per Sec: 22649.900073452223
Epoch Step: 110 / 138 Loss: 31.740203857421875 Tokens per Sec: 22661.632731291604
Epoch Step: 115 / 138 Loss: 25.264022827148438 Tokens per Sec: 23418.585114080364
Epoch Step: 120 / 138 Loss: 26.16658592224121 Tokens per Sec: 22169.25960897599
Epoch Step: 125 / 138 Loss: 32.76709747314453 Tokens per Sec: 21081.050767086606
Epoch Step: 130 / 138 Loss: 31.08258819580078 Tokens per Sec: 22619.975307869387
Epoch Step: 135 / 138 Loss: 27.840185165405273 Tokens per Sec: 24170.7782952204
Epoch ended with duration 0:00:26.818785
Train perplexity: 2.0911476722428612
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , 0 , METHOD_3 ( METHOD_3 ( ) , VAR_3 , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:01.389560
Validation perplexity: 2.546161659148953
Model saved checkpoint!
Epoch 41 / 1000
Epoch Step: 5 / 138 Loss: 36.682003021240234 Tokens per Sec: 24965.707169070363
Epoch Step: 10 / 138 Loss: 31.327838897705078 Tokens per Sec: 23810.163905423706
Epoch Step: 15 / 138 Loss: 20.97981834411621 Tokens per Sec: 24963.61572898755
Epoch Step: 20 / 138 Loss: 36.879425048828125 Tokens per Sec: 23176.33215870631
Epoch Step: 25 / 138 Loss: 32.332035064697266 Tokens per Sec: 23746.70830417366
Epoch Step: 30 / 138 Loss: 22.984012603759766 Tokens per Sec: 24745.83663615008
Epoch Step: 35 / 138 Loss: 29.156015396118164 Tokens per Sec: 22711.953431572772
Epoch Step: 40 / 138 Loss: 25.484451293945312 Tokens per Sec: 24957.03868012117
Epoch Step: 45 / 138 Loss: 20.270580291748047 Tokens per Sec: 24188.537978151784
Epoch Step: 50 / 138 Loss: 37.6637077331543 Tokens per Sec: 25137.204618790747
Epoch Step: 55 / 138 Loss: 24.895414352416992 Tokens per Sec: 24754.963489810674
Epoch Step: 60 / 138 Loss: 36.46696853637695 Tokens per Sec: 23682.308115755626
Epoch Step: 65 / 138 Loss: 26.665502548217773 Tokens per Sec: 24963.177864384863
Epoch Step: 70 / 138 Loss: 29.229293823242188 Tokens per Sec: 22662.889435986763
Epoch Step: 75 / 138 Loss: 23.934974670410156 Tokens per Sec: 25326.745833518937
Epoch Step: 80 / 138 Loss: 16.732629776000977 Tokens per Sec: 25365.728389497133
Epoch Step: 85 / 138 Loss: 40.13081359863281 Tokens per Sec: 24781.94656190879
Epoch Step: 90 / 138 Loss: 25.081756591796875 Tokens per Sec: 24341.484254617837
Epoch Step: 95 / 138 Loss: 34.557159423828125 Tokens per Sec: 23936.292481230277
Epoch Step: 100 / 138 Loss: 20.557275772094727 Tokens per Sec: 26504.9571563417
Epoch Step: 105 / 138 Loss: 30.821250915527344 Tokens per Sec: 23836.520818249544
Epoch Step: 110 / 138 Loss: 33.55189514160156 Tokens per Sec: 22289.028624661325
Epoch Step: 115 / 138 Loss: 25.544841766357422 Tokens per Sec: 21018.3818144509
Epoch Step: 120 / 138 Loss: 34.241355895996094 Tokens per Sec: 22947.555615008136
Epoch Step: 125 / 138 Loss: 23.055049896240234 Tokens per Sec: 23297.90598803975
Epoch Step: 130 / 138 Loss: 36.24588394165039 Tokens per Sec: 21906.270255590116
Epoch Step: 135 / 138 Loss: 23.65504264831543 Tokens per Sec: 22924.351640488032
Epoch ended with duration 0:00:26.692686
Train perplexity: 1.7536654825741875
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , 0 , METHOD_3 ( 0 ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.370906
Validation perplexity: 1.877300805809562
Epoch 42 / 1000
Epoch Step: 5 / 138 Loss: 23.875091552734375 Tokens per Sec: 24019.496407115897
Epoch Step: 10 / 138 Loss: 25.147506713867188 Tokens per Sec: 23776.14866992521
Epoch Step: 15 / 138 Loss: 34.37378692626953 Tokens per Sec: 24020.788136555697
Epoch Step: 20 / 138 Loss: 30.408737182617188 Tokens per Sec: 24120.79357187943
Epoch Step: 25 / 138 Loss: 37.316280364990234 Tokens per Sec: 25521.45665645221
Epoch Step: 30 / 138 Loss: 36.283363342285156 Tokens per Sec: 25818.702486012025
Epoch Step: 35 / 138 Loss: 28.198450088500977 Tokens per Sec: 23427.260640521403
Epoch Step: 40 / 138 Loss: 43.48414993286133 Tokens per Sec: 24825.162395397867
Epoch Step: 45 / 138 Loss: 29.465688705444336 Tokens per Sec: 22782.488136651453
Epoch Step: 50 / 138 Loss: 31.77882957458496 Tokens per Sec: 23764.047317753128
Epoch Step: 55 / 138 Loss: 40.77213668823242 Tokens per Sec: 24545.03901437181
Epoch Step: 60 / 138 Loss: 204.2254638671875 Tokens per Sec: 23789.347811018
Epoch Step: 65 / 138 Loss: 31.670835494995117 Tokens per Sec: 26260.14801570689
Epoch Step: 70 / 138 Loss: 32.284603118896484 Tokens per Sec: 20920.125441716435
Epoch Step: 75 / 138 Loss: 27.131399154663086 Tokens per Sec: 23474.739020807257
Epoch Step: 80 / 138 Loss: 25.40802764892578 Tokens per Sec: 26318.57522152184
Epoch Step: 85 / 138 Loss: 19.06181526184082 Tokens per Sec: 23687.143311873006
Epoch Step: 90 / 138 Loss: 26.776470184326172 Tokens per Sec: 25082.780256565704
Epoch Step: 95 / 138 Loss: 31.31917953491211 Tokens per Sec: 23866.253908030736
Epoch Step: 100 / 138 Loss: 34.519775390625 Tokens per Sec: 26223.013293821892
Epoch Step: 105 / 138 Loss: 36.295345306396484 Tokens per Sec: 23554.21051973667
Epoch Step: 110 / 138 Loss: 24.349489212036133 Tokens per Sec: 23372.836362747817
Epoch Step: 115 / 138 Loss: 42.99104690551758 Tokens per Sec: 23272.685515152123
Epoch Step: 120 / 138 Loss: 33.11957931518555 Tokens per Sec: 22357.559958014725
Epoch Step: 125 / 138 Loss: 23.544761657714844 Tokens per Sec: 24263.24986551053
Epoch Step: 130 / 138 Loss: 26.567649841308594 Tokens per Sec: 18763.207265736353
Epoch Step: 135 / 138 Loss: 34.5761604309082 Tokens per Sec: 23538.070881475644
Epoch ended with duration 0:00:26.725976
Train perplexity: 2.0168322443676354
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , 0 , METHOD_3 ( METHOD_3 ( ) , VAR_3 , VAR_3 ) ) ; } } }[0m
Epoch ended with duration 0:00:01.379602
Validation perplexity: 1.9573517302642753
Epoch 43 / 1000
Epoch Step: 5 / 138 Loss: 170.7427520751953 Tokens per Sec: 24112.843232824238
Epoch Step: 10 / 138 Loss: 38.04796600341797 Tokens per Sec: 23310.131125800654
Epoch Step: 15 / 138 Loss: 23.484386444091797 Tokens per Sec: 25092.400564733856
Epoch Step: 20 / 138 Loss: 25.725547790527344 Tokens per Sec: 24821.994630403857
Epoch Step: 25 / 138 Loss: 40.9717903137207 Tokens per Sec: 25937.91359188266
Epoch Step: 30 / 138 Loss: 33.03474807739258 Tokens per Sec: 24665.616103852022
Epoch Step: 35 / 138 Loss: 29.835145950317383 Tokens per Sec: 27227.309552189552
Epoch Step: 40 / 138 Loss: 26.6669921875 Tokens per Sec: 24521.21668984903
Epoch Step: 45 / 138 Loss: 25.068265914916992 Tokens per Sec: 24576.503322828823
Epoch Step: 50 / 138 Loss: 35.51735305786133 Tokens per Sec: 24749.338151289925
Epoch Step: 55 / 138 Loss: 27.45911979675293 Tokens per Sec: 23214.44287934039
Epoch Step: 60 / 138 Loss: 33.407470703125 Tokens per Sec: 25804.834952790687
Epoch Step: 65 / 138 Loss: 41.09897232055664 Tokens per Sec: 23059.885108421473
Epoch Step: 70 / 138 Loss: 36.20887756347656 Tokens per Sec: 25758.710839197793
Epoch Step: 75 / 138 Loss: 32.18666076660156 Tokens per Sec: 26002.938809329375
Epoch Step: 80 / 138 Loss: 29.251428604125977 Tokens per Sec: 23813.618535705125
Epoch Step: 85 / 138 Loss: 23.203447341918945 Tokens per Sec: 21843.550643964227
Epoch Step: 90 / 138 Loss: 31.49226951599121 Tokens per Sec: 23520.48345434452
Epoch Step: 95 / 138 Loss: 41.8995361328125 Tokens per Sec: 24312.91609072953
Epoch Step: 100 / 138 Loss: 18.89026641845703 Tokens per Sec: 22793.947259368008
Epoch Step: 105 / 138 Loss: 27.134157180786133 Tokens per Sec: 23138.623582844248
Epoch Step: 110 / 138 Loss: 25.76927375793457 Tokens per Sec: 22568.668597954587
Epoch Step: 115 / 138 Loss: 33.97005081176758 Tokens per Sec: 22339.69785336356
Epoch Step: 120 / 138 Loss: 28.471595764160156 Tokens per Sec: 18482.467528833058
Epoch Step: 125 / 138 Loss: 37.074867248535156 Tokens per Sec: 25000.103586320674
Epoch Step: 130 / 138 Loss: 31.230249404907227 Tokens per Sec: 23454.227842918284
Epoch Step: 135 / 138 Loss: 202.53610229492188 Tokens per Sec: 22982.282308731654
Epoch ended with duration 0:00:26.668058
Train perplexity: 1.9271109366432626
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , 0 , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.386680
Validation perplexity: 2.492853194474718
Epoch 44 / 1000
Epoch Step: 5 / 138 Loss: 235.828369140625 Tokens per Sec: 23053.877056030593
Epoch Step: 10 / 138 Loss: 33.34693145751953 Tokens per Sec: 25977.28786193292
Epoch Step: 15 / 138 Loss: 18.938594818115234 Tokens per Sec: 24627.13391710906
Epoch Step: 20 / 138 Loss: 36.6348762512207 Tokens per Sec: 24406.19010886277
Epoch Step: 25 / 138 Loss: 33.33580017089844 Tokens per Sec: 23604.66155660771
Epoch Step: 30 / 138 Loss: 29.40616226196289 Tokens per Sec: 23806.736794525707
Epoch Step: 35 / 138 Loss: 39.92326354980469 Tokens per Sec: 24544.02868577174
Epoch Step: 40 / 138 Loss: 29.498916625976562 Tokens per Sec: 26683.480436569895
Epoch Step: 45 / 138 Loss: 27.68081283569336 Tokens per Sec: 24847.516756152236
Epoch Step: 50 / 138 Loss: 34.30381393432617 Tokens per Sec: 24065.10228861729
Epoch Step: 55 / 138 Loss: 31.383983612060547 Tokens per Sec: 25424.207488389446
Epoch Step: 60 / 138 Loss: 35.470829010009766 Tokens per Sec: 24287.698718249365
Epoch Step: 65 / 138 Loss: 28.029876708984375 Tokens per Sec: 23642.574028444793
Epoch Step: 70 / 138 Loss: 30.366436004638672 Tokens per Sec: 23818.072768010887
Epoch Step: 75 / 138 Loss: 20.365686416625977 Tokens per Sec: 24413.73499316623
Epoch Step: 80 / 138 Loss: 33.658302307128906 Tokens per Sec: 23147.165601872144
Epoch Step: 85 / 138 Loss: 37.928409576416016 Tokens per Sec: 23639.634446589153
Epoch Step: 90 / 138 Loss: 28.960939407348633 Tokens per Sec: 24021.40149869438
Epoch Step: 95 / 138 Loss: 18.757116317749023 Tokens per Sec: 25521.283662724152
Epoch Step: 100 / 138 Loss: 29.471281051635742 Tokens per Sec: 22213.48090168829
Epoch Step: 105 / 138 Loss: 22.94230079650879 Tokens per Sec: 22830.35473499967
Epoch Step: 110 / 138 Loss: 259.5796203613281 Tokens per Sec: 22719.526541040348
Epoch Step: 115 / 138 Loss: 27.50813102722168 Tokens per Sec: 20449.442186760713
Epoch Step: 120 / 138 Loss: 22.680198669433594 Tokens per Sec: 21700.43830650914
Epoch Step: 125 / 138 Loss: 34.987998962402344 Tokens per Sec: 23092.981588364204
Epoch Step: 130 / 138 Loss: 38.98802185058594 Tokens per Sec: 23620.59611302078
Epoch Step: 135 / 138 Loss: 41.8630256652832 Tokens per Sec: 23333.163926262336
Epoch ended with duration 0:00:26.891351
Train perplexity: 1.9629138312807184
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , 0 , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.362038
Validation perplexity: 1.5164479353151794
Model saved best_on_validation!
Epoch 45 / 1000
Epoch Step: 5 / 138 Loss: 21.68824005126953 Tokens per Sec: 25520.088628842124
Epoch Step: 10 / 138 Loss: 21.568870544433594 Tokens per Sec: 25354.150183574555
Epoch Step: 15 / 138 Loss: 32.690399169921875 Tokens per Sec: 22815.281866896792
Epoch Step: 20 / 138 Loss: 21.733739852905273 Tokens per Sec: 25210.05397787469
Epoch Step: 25 / 138 Loss: 287.9219055175781 Tokens per Sec: 24139.913498645263
Epoch Step: 30 / 138 Loss: 29.893009185791016 Tokens per Sec: 22678.921923260215
Epoch Step: 35 / 138 Loss: 28.522872924804688 Tokens per Sec: 25032.90643537928
Epoch Step: 40 / 138 Loss: 37.430015563964844 Tokens per Sec: 23824.912702551912
Epoch Step: 45 / 138 Loss: 32.34138870239258 Tokens per Sec: 25392.253715099112
Epoch Step: 50 / 138 Loss: 218.25059509277344 Tokens per Sec: 23727.793690704362
Epoch Step: 55 / 138 Loss: 29.63726806640625 Tokens per Sec: 24650.93000882999
Epoch Step: 60 / 138 Loss: 24.029733657836914 Tokens per Sec: 24379.18132658357
Epoch Step: 65 / 138 Loss: 29.70914649963379 Tokens per Sec: 23858.259481401416
Epoch Step: 70 / 138 Loss: 28.203845977783203 Tokens per Sec: 26330.134563410724
Epoch Step: 75 / 138 Loss: 39.069740295410156 Tokens per Sec: 23257.38182064785
Epoch Step: 80 / 138 Loss: 30.48368263244629 Tokens per Sec: 25414.570565715097
Epoch Step: 85 / 138 Loss: 34.57025146484375 Tokens per Sec: 24306.167992259394
Epoch Step: 90 / 138 Loss: 24.10487174987793 Tokens per Sec: 24547.494596344237
Epoch Step: 95 / 138 Loss: 21.84575080871582 Tokens per Sec: 23752.865799193787
Epoch Step: 100 / 138 Loss: 36.87600326538086 Tokens per Sec: 23367.851912128375
Epoch Step: 105 / 138 Loss: 43.386409759521484 Tokens per Sec: 24104.602524304926
Epoch Step: 110 / 138 Loss: 31.96851921081543 Tokens per Sec: 22241.9475129627
Epoch Step: 115 / 138 Loss: 32.32426071166992 Tokens per Sec: 23244.477270732375
Epoch Step: 120 / 138 Loss: 31.611034393310547 Tokens per Sec: 24019.97612003311
Epoch Step: 125 / 138 Loss: 27.938508987426758 Tokens per Sec: 22681.97071673092
Epoch Step: 130 / 138 Loss: 21.619558334350586 Tokens per Sec: 23228.311256240955
Epoch Step: 135 / 138 Loss: 35.198890686035156 Tokens per Sec: 21442.47733764464
Epoch ended with duration 0:00:26.630980
Train perplexity: 1.9256007839952018
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.382729
Validation perplexity: 2.093773905746353
Model saved checkpoint!
Epoch 46 / 1000
Epoch Step: 5 / 138 Loss: 184.09336853027344 Tokens per Sec: 26590.16996769855
Epoch Step: 10 / 138 Loss: 25.1416015625 Tokens per Sec: 24457.267553897487
Epoch Step: 15 / 138 Loss: 234.35992431640625 Tokens per Sec: 23959.721627604496
Epoch Step: 20 / 138 Loss: 15.990694046020508 Tokens per Sec: 22994.168677771835
Epoch Step: 25 / 138 Loss: 32.78693389892578 Tokens per Sec: 22423.576650923787
Epoch Step: 30 / 138 Loss: 22.01409149169922 Tokens per Sec: 26772.018378912337
Epoch Step: 35 / 138 Loss: 22.060983657836914 Tokens per Sec: 23005.269310384592
Epoch Step: 40 / 138 Loss: 26.611682891845703 Tokens per Sec: 25148.841041406078
Epoch Step: 45 / 138 Loss: 35.90680694580078 Tokens per Sec: 24882.140468598278
Epoch Step: 50 / 138 Loss: 37.177345275878906 Tokens per Sec: 24444.78724780956
Epoch Step: 55 / 138 Loss: 20.18795394897461 Tokens per Sec: 25418.091279458225
Epoch Step: 60 / 138 Loss: 35.06672668457031 Tokens per Sec: 23615.95276126607
Epoch Step: 65 / 138 Loss: 21.234600067138672 Tokens per Sec: 25047.495611610848
Epoch Step: 70 / 138 Loss: 26.515615463256836 Tokens per Sec: 25803.8388277492
Epoch Step: 75 / 138 Loss: 22.743242263793945 Tokens per Sec: 24009.38726126307
Epoch Step: 80 / 138 Loss: 33.7804069519043 Tokens per Sec: 23454.259837326477
Epoch Step: 85 / 138 Loss: 19.401784896850586 Tokens per Sec: 22784.22375063872
Epoch Step: 90 / 138 Loss: 21.856487274169922 Tokens per Sec: 25930.412050880514
Epoch Step: 95 / 138 Loss: 30.548480987548828 Tokens per Sec: 23060.140688322605
Epoch Step: 100 / 138 Loss: 25.855436325073242 Tokens per Sec: 22428.648945203317
Epoch Step: 105 / 138 Loss: 30.599515914916992 Tokens per Sec: 22935.414617691313
Epoch Step: 110 / 138 Loss: 24.667400360107422 Tokens per Sec: 20768.57800938417
Epoch Step: 115 / 138 Loss: 22.96868133544922 Tokens per Sec: 22932.44172335074
Epoch Step: 120 / 138 Loss: 26.57050323486328 Tokens per Sec: 22891.198899014416
Epoch Step: 125 / 138 Loss: 29.55063247680664 Tokens per Sec: 23746.550551600634
Epoch Step: 130 / 138 Loss: 21.675731658935547 Tokens per Sec: 23568.44043984122
Epoch Step: 135 / 138 Loss: 27.37676239013672 Tokens per Sec: 21589.856988876043
Epoch ended with duration 0:00:26.773050
Train perplexity: 1.709636864381288
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , 0 , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.358057
Validation perplexity: 1.450877502540834
Model saved best_on_validation!
Epoch 47 / 1000
Epoch Step: 5 / 138 Loss: 25.050941467285156 Tokens per Sec: 24526.022049506733
Epoch Step: 10 / 138 Loss: 24.688575744628906 Tokens per Sec: 24522.884812161847
Epoch Step: 15 / 138 Loss: 32.30097961425781 Tokens per Sec: 23787.37442165593
Epoch Step: 20 / 138 Loss: 25.353778839111328 Tokens per Sec: 23932.044852896455
Epoch Step: 25 / 138 Loss: 313.97528076171875 Tokens per Sec: 22758.8155962211
Epoch Step: 30 / 138 Loss: 30.210336685180664 Tokens per Sec: 22525.92697672899
Epoch Step: 35 / 138 Loss: 28.66919708251953 Tokens per Sec: 24072.17034544765
Epoch Step: 40 / 138 Loss: 28.80820083618164 Tokens per Sec: 25752.55547640175
Epoch Step: 45 / 138 Loss: 28.222259521484375 Tokens per Sec: 23654.12111865854
Epoch Step: 50 / 138 Loss: 46.440399169921875 Tokens per Sec: 25687.411739277966
Epoch Step: 55 / 138 Loss: 26.66314697265625 Tokens per Sec: 23114.865221510332
Epoch Step: 60 / 138 Loss: 22.207569122314453 Tokens per Sec: 25528.293532541986
Epoch Step: 65 / 138 Loss: 30.181804656982422 Tokens per Sec: 24575.511746789558
Epoch Step: 70 / 138 Loss: 27.05331039428711 Tokens per Sec: 22902.997772681258
Epoch Step: 75 / 138 Loss: 26.132661819458008 Tokens per Sec: 24561.400547925496
Epoch Step: 80 / 138 Loss: 138.33084106445312 Tokens per Sec: 24972.675653287144
Epoch Step: 85 / 138 Loss: 17.133026123046875 Tokens per Sec: 24998.061272425373
Epoch Step: 90 / 138 Loss: 28.061538696289062 Tokens per Sec: 25775.299551486343
Epoch Step: 95 / 138 Loss: 26.73493766784668 Tokens per Sec: 23619.298864562632
Epoch Step: 100 / 138 Loss: 23.11954689025879 Tokens per Sec: 22840.333582226758
Epoch Step: 105 / 138 Loss: 33.60680389404297 Tokens per Sec: 24185.006781799595
Epoch Step: 110 / 138 Loss: 25.825586318969727 Tokens per Sec: 23588.056481389445
Epoch Step: 115 / 138 Loss: 23.184566497802734 Tokens per Sec: 23577.55805964487
Epoch Step: 120 / 138 Loss: 19.995479583740234 Tokens per Sec: 23207.241564494932
Epoch Step: 125 / 138 Loss: 25.64820671081543 Tokens per Sec: 19638.043313122875
Epoch Step: 130 / 138 Loss: 33.329383850097656 Tokens per Sec: 24060.449342299984
Epoch Step: 135 / 138 Loss: 23.782939910888672 Tokens per Sec: 21931.425189505248
Epoch ended with duration 0:00:26.771644
Train perplexity: 2.061119849766909
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.379850
Validation perplexity: 1.987943040828631
Epoch 48 / 1000
Epoch Step: 5 / 138 Loss: 32.0078125 Tokens per Sec: 24213.84991567114
Epoch Step: 10 / 138 Loss: 32.1488151550293 Tokens per Sec: 22672.088024613284
Epoch Step: 15 / 138 Loss: 27.107837677001953 Tokens per Sec: 24051.13577812904
Epoch Step: 20 / 138 Loss: 23.684019088745117 Tokens per Sec: 23071.376905961522
Epoch Step: 25 / 138 Loss: 30.04997444152832 Tokens per Sec: 25642.396248363355
Epoch Step: 30 / 138 Loss: 19.534406661987305 Tokens per Sec: 25480.6393564858
Epoch Step: 35 / 138 Loss: 25.782665252685547 Tokens per Sec: 23170.362868580443
Epoch Step: 40 / 138 Loss: 29.189939498901367 Tokens per Sec: 25845.43111377814
Epoch Step: 45 / 138 Loss: 290.5971374511719 Tokens per Sec: 23723.956357646694
Epoch Step: 50 / 138 Loss: 33.72929382324219 Tokens per Sec: 24561.903714902382
Epoch Step: 55 / 138 Loss: 23.015613555908203 Tokens per Sec: 24025.237628987343
Epoch Step: 60 / 138 Loss: 22.565631866455078 Tokens per Sec: 25288.924706148693
Epoch Step: 65 / 138 Loss: 24.493432998657227 Tokens per Sec: 24704.394475557157
Epoch Step: 70 / 138 Loss: 23.02627944946289 Tokens per Sec: 23931.905760863967
Epoch Step: 75 / 138 Loss: 18.39640235900879 Tokens per Sec: 24360.308330177
Epoch Step: 80 / 138 Loss: 19.920299530029297 Tokens per Sec: 24679.3378289214
Epoch Step: 85 / 138 Loss: 18.78862953186035 Tokens per Sec: 23184.231801609854
Epoch Step: 90 / 138 Loss: 27.14594841003418 Tokens per Sec: 24920.18347833931
Epoch Step: 95 / 138 Loss: 311.59747314453125 Tokens per Sec: 23323.79486730639
Epoch Step: 100 / 138 Loss: 21.855602264404297 Tokens per Sec: 26203.94231743498
Epoch Step: 105 / 138 Loss: 195.96429443359375 Tokens per Sec: 22573.6523613398
Epoch Step: 110 / 138 Loss: 19.505577087402344 Tokens per Sec: 23892.45465675452
Epoch Step: 115 / 138 Loss: 25.295997619628906 Tokens per Sec: 21814.515705780257
Epoch Step: 120 / 138 Loss: 22.058242797851562 Tokens per Sec: 22918.453733938113
Epoch Step: 125 / 138 Loss: 23.556631088256836 Tokens per Sec: 22962.9159700508
Epoch Step: 130 / 138 Loss: 27.381254196166992 Tokens per Sec: 20198.934824594682
Epoch Step: 135 / 138 Loss: 35.48896789550781 Tokens per Sec: 23732.08422389671
Epoch ended with duration 0:00:26.739477
Train perplexity: 1.8531508828309566
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) , VAR_4 , STRING_3 , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.369866
Validation perplexity: 1.6048894359920902
Epoch 49 / 1000
Epoch Step: 5 / 138 Loss: 34.25469970703125 Tokens per Sec: 22575.387591393923
Epoch Step: 10 / 138 Loss: 14.243979454040527 Tokens per Sec: 24057.658381232828
Epoch Step: 15 / 138 Loss: 26.889450073242188 Tokens per Sec: 21711.654387090515
Epoch Step: 20 / 138 Loss: 20.60266876220703 Tokens per Sec: 24679.56083267216
Epoch Step: 25 / 138 Loss: 17.702531814575195 Tokens per Sec: 25975.49453404881
Epoch Step: 30 / 138 Loss: 28.683088302612305 Tokens per Sec: 25472.645996286195
Epoch Step: 35 / 138 Loss: 31.443769454956055 Tokens per Sec: 23962.966854621784
Epoch Step: 40 / 138 Loss: 33.07722473144531 Tokens per Sec: 24300.770244794603
Epoch Step: 45 / 138 Loss: 21.7863826751709 Tokens per Sec: 24588.855045294888
Epoch Step: 50 / 138 Loss: 15.378449440002441 Tokens per Sec: 25383.76883838143
Epoch Step: 55 / 138 Loss: 156.8474578857422 Tokens per Sec: 24689.789181607102
Epoch Step: 60 / 138 Loss: 27.92106056213379 Tokens per Sec: 25323.377472051216
Epoch Step: 65 / 138 Loss: 20.316537857055664 Tokens per Sec: 24580.46110499231
Epoch Step: 70 / 138 Loss: 28.6687068939209 Tokens per Sec: 22520.890052684175
Epoch Step: 75 / 138 Loss: 19.061283111572266 Tokens per Sec: 24393.290650283336
Epoch Step: 80 / 138 Loss: 22.712373733520508 Tokens per Sec: 26578.446612064483
Epoch Step: 85 / 138 Loss: 24.303260803222656 Tokens per Sec: 25260.183590017074
Epoch Step: 90 / 138 Loss: 288.1435546875 Tokens per Sec: 24591.013811425557
Epoch Step: 95 / 138 Loss: 22.402402877807617 Tokens per Sec: 23191.741475837072
Epoch Step: 100 / 138 Loss: 23.55845069885254 Tokens per Sec: 22302.69762077283
Epoch Step: 105 / 138 Loss: 33.431880950927734 Tokens per Sec: 20230.910202275107
Epoch Step: 110 / 138 Loss: 25.043745040893555 Tokens per Sec: 23365.927948893463
Epoch Step: 115 / 138 Loss: 32.045467376708984 Tokens per Sec: 23596.972752076512
Epoch Step: 120 / 138 Loss: 30.76930046081543 Tokens per Sec: 24280.864561713148
Epoch Step: 125 / 138 Loss: 26.82312774658203 Tokens per Sec: 22387.69676530834
Epoch Step: 130 / 138 Loss: 21.374269485473633 Tokens per Sec: 23623.89723996502
Epoch Step: 135 / 138 Loss: 172.4971160888672 Tokens per Sec: 22245.0838558462
Epoch ended with duration 0:00:26.736591
Train perplexity: 1.8072141860456128
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.386224
Validation perplexity: 2.1684393152810513
Epoch 50 / 1000
Epoch Step: 5 / 138 Loss: 29.467391967773438 Tokens per Sec: 22441.67660511508
Epoch Step: 10 / 138 Loss: 21.838512420654297 Tokens per Sec: 24262.271408890312
Epoch Step: 15 / 138 Loss: 17.844463348388672 Tokens per Sec: 23566.53414502828
Epoch Step: 20 / 138 Loss: 20.042726516723633 Tokens per Sec: 25800.422862150383
Epoch Step: 25 / 138 Loss: 36.0949821472168 Tokens per Sec: 23467.564501797107
Epoch Step: 30 / 138 Loss: 20.050039291381836 Tokens per Sec: 23133.570136450817
Epoch Step: 35 / 138 Loss: 18.724531173706055 Tokens per Sec: 25646.906458744837
Epoch Step: 40 / 138 Loss: 22.923810958862305 Tokens per Sec: 25212.44253701071
Epoch Step: 45 / 138 Loss: 29.2647705078125 Tokens per Sec: 25955.53495720869
Epoch Step: 50 / 138 Loss: 19.8121337890625 Tokens per Sec: 25960.230027012567
Epoch Step: 55 / 138 Loss: 19.176345825195312 Tokens per Sec: 24292.93652973305
Epoch Step: 60 / 138 Loss: 31.888988494873047 Tokens per Sec: 21930.07657277787
Epoch Step: 65 / 138 Loss: 21.755346298217773 Tokens per Sec: 25237.234667403136
Epoch Step: 70 / 138 Loss: 17.78872299194336 Tokens per Sec: 26305.541195659134
Epoch Step: 75 / 138 Loss: 32.224822998046875 Tokens per Sec: 23259.779230438053
Epoch Step: 80 / 138 Loss: 29.19482421875 Tokens per Sec: 24154.112972728544
Epoch Step: 85 / 138 Loss: 33.885555267333984 Tokens per Sec: 25687.306389193385
Epoch Step: 90 / 138 Loss: 23.308467864990234 Tokens per Sec: 23027.22659794289
Epoch Step: 95 / 138 Loss: 25.65103530883789 Tokens per Sec: 23863.50569746524
Epoch Step: 100 / 138 Loss: 21.835542678833008 Tokens per Sec: 24359.052491587503
Epoch Step: 105 / 138 Loss: 25.483531951904297 Tokens per Sec: 23462.663493650318
Epoch Step: 110 / 138 Loss: 25.64459228515625 Tokens per Sec: 23490.390485939548
Epoch Step: 115 / 138 Loss: 26.311952590942383 Tokens per Sec: 22410.636028320307
Epoch Step: 120 / 138 Loss: 23.239465713500977 Tokens per Sec: 22394.86831870768
Epoch Step: 125 / 138 Loss: 100.22320556640625 Tokens per Sec: 22550.887280033086
Epoch Step: 130 / 138 Loss: 23.86727523803711 Tokens per Sec: 22317.49634714936
Epoch Step: 135 / 138 Loss: 27.16815948486328 Tokens per Sec: 20438.765974402504
Epoch ended with duration 0:00:26.766341
Train perplexity: 1.8392309165261456
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.361586
Validation perplexity: 1.4273016504115097
Model saved best_on_validation!
Model saved checkpoint!
Epoch 51 / 1000
Epoch Step: 5 / 138 Loss: 25.30262565612793 Tokens per Sec: 21543.093978351368
Epoch Step: 10 / 138 Loss: 20.583892822265625 Tokens per Sec: 24191.73782651573
Epoch Step: 15 / 138 Loss: 32.95350646972656 Tokens per Sec: 24748.591598171686
Epoch Step: 20 / 138 Loss: 18.42911720275879 Tokens per Sec: 25074.37456889672
Epoch Step: 25 / 138 Loss: 22.476318359375 Tokens per Sec: 24584.333575156696
Epoch Step: 30 / 138 Loss: 36.37275695800781 Tokens per Sec: 24455.778477808824
Epoch Step: 35 / 138 Loss: 24.79281234741211 Tokens per Sec: 22678.12693761718
Epoch Step: 40 / 138 Loss: 24.340055465698242 Tokens per Sec: 26044.58242089797
Epoch Step: 45 / 138 Loss: 24.830524444580078 Tokens per Sec: 25300.213254869526
Epoch Step: 50 / 138 Loss: 13.341997146606445 Tokens per Sec: 23824.077121926126
Epoch Step: 55 / 138 Loss: 29.23908233642578 Tokens per Sec: 22618.21181976707
Epoch Step: 60 / 138 Loss: 18.314645767211914 Tokens per Sec: 26190.656726816695
Epoch Step: 65 / 138 Loss: 21.333953857421875 Tokens per Sec: 25211.913507686895
Epoch Step: 70 / 138 Loss: 23.259050369262695 Tokens per Sec: 23912.23555613807
Epoch Step: 75 / 138 Loss: 23.225454330444336 Tokens per Sec: 25500.495816499373
Epoch Step: 80 / 138 Loss: 16.509714126586914 Tokens per Sec: 22525.49312263237
Epoch Step: 85 / 138 Loss: 29.83115577697754 Tokens per Sec: 23120.35956724524
Epoch Step: 90 / 138 Loss: 24.493104934692383 Tokens per Sec: 25587.393609162085
Epoch Step: 95 / 138 Loss: 16.032657623291016 Tokens per Sec: 24834.019569467466
Epoch Step: 100 / 138 Loss: 21.22908592224121 Tokens per Sec: 25288.31876399655
Epoch Step: 105 / 138 Loss: 34.9422607421875 Tokens per Sec: 19710.185727665477
Epoch Step: 110 / 138 Loss: 17.938228607177734 Tokens per Sec: 23450.88070657465
Epoch Step: 115 / 138 Loss: 21.956205368041992 Tokens per Sec: 23701.504702919705
Epoch Step: 120 / 138 Loss: 232.10585021972656 Tokens per Sec: 22639.327921902157
Epoch Step: 125 / 138 Loss: 17.44536781311035 Tokens per Sec: 23300.210053718354
Epoch Step: 130 / 138 Loss: 24.771526336669922 Tokens per Sec: 20177.502485951205
Epoch Step: 135 / 138 Loss: 14.471658706665039 Tokens per Sec: 23249.342887133174
Epoch ended with duration 0:00:26.824846
Train perplexity: 1.5442274616742522
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.370957
Validation perplexity: 1.5899961463294239
Epoch 52 / 1000
Epoch Step: 5 / 138 Loss: 26.551424026489258 Tokens per Sec: 22565.03438909039
Epoch Step: 10 / 138 Loss: 19.935468673706055 Tokens per Sec: 23374.253323407647
Epoch Step: 15 / 138 Loss: 27.566261291503906 Tokens per Sec: 23799.075227883637
Epoch Step: 20 / 138 Loss: 29.072067260742188 Tokens per Sec: 24883.48616063286
Epoch Step: 25 / 138 Loss: 20.684091567993164 Tokens per Sec: 26002.067506278858
Epoch Step: 30 / 138 Loss: 26.405803680419922 Tokens per Sec: 24024.951512867905
Epoch Step: 35 / 138 Loss: 25.67633819580078 Tokens per Sec: 23699.441717454512
Epoch Step: 40 / 138 Loss: 26.265087127685547 Tokens per Sec: 25645.21328122118
Epoch Step: 45 / 138 Loss: 30.612092971801758 Tokens per Sec: 25209.182825186028
Epoch Step: 50 / 138 Loss: 25.37996482849121 Tokens per Sec: 25171.014932169903
Epoch Step: 55 / 138 Loss: 180.09999084472656 Tokens per Sec: 23223.15621398059
Epoch Step: 60 / 138 Loss: 29.874008178710938 Tokens per Sec: 23758.91749325615
Epoch Step: 65 / 138 Loss: 23.175148010253906 Tokens per Sec: 23372.955896075546
Epoch Step: 70 / 138 Loss: 28.705730438232422 Tokens per Sec: 22946.656292086718
Epoch Step: 75 / 138 Loss: 29.954423904418945 Tokens per Sec: 25233.679051040737
Epoch Step: 80 / 138 Loss: 252.87994384765625 Tokens per Sec: 22777.280853480777
Epoch Step: 85 / 138 Loss: 45.11012268066406 Tokens per Sec: 25430.021869368036
Epoch Step: 90 / 138 Loss: 33.044342041015625 Tokens per Sec: 23776.20405320913
Epoch Step: 95 / 138 Loss: 39.41476058959961 Tokens per Sec: 25887.185296808962
Epoch Step: 100 / 138 Loss: 27.57916259765625 Tokens per Sec: 24409.860890078937
Epoch Step: 105 / 138 Loss: 24.21529769897461 Tokens per Sec: 20760.309992190625
Epoch Step: 110 / 138 Loss: 28.990447998046875 Tokens per Sec: 23331.963777744095
Epoch Step: 115 / 138 Loss: 20.637205123901367 Tokens per Sec: 23437.843284862854
Epoch Step: 120 / 138 Loss: 24.05142593383789 Tokens per Sec: 23455.4782243836
Epoch Step: 125 / 138 Loss: 19.96030616760254 Tokens per Sec: 22202.959953193345
Epoch Step: 130 / 138 Loss: 18.721389770507812 Tokens per Sec: 23461.809359983614
Epoch Step: 135 / 138 Loss: 20.125638961791992 Tokens per Sec: 23682.779024653348
Epoch ended with duration 0:00:26.769745
Train perplexity: 1.8512396527867068
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.380880
Validation perplexity: 1.743939022009778
Epoch 53 / 1000
Epoch Step: 5 / 138 Loss: 26.776744842529297 Tokens per Sec: 25939.1829592371
Epoch Step: 10 / 138 Loss: 15.463211059570312 Tokens per Sec: 25190.604211330883
Epoch Step: 15 / 138 Loss: 24.877323150634766 Tokens per Sec: 23563.464339831862
Epoch Step: 20 / 138 Loss: 21.281469345092773 Tokens per Sec: 24720.22740141791
Epoch Step: 25 / 138 Loss: 21.971033096313477 Tokens per Sec: 24149.61121482316
Epoch Step: 30 / 138 Loss: 16.553787231445312 Tokens per Sec: 23030.965106057305
Epoch Step: 35 / 138 Loss: 173.52078247070312 Tokens per Sec: 24420.306570395216
Epoch Step: 40 / 138 Loss: 23.66596031188965 Tokens per Sec: 24341.58104456584
Epoch Step: 45 / 138 Loss: 16.767465591430664 Tokens per Sec: 24866.54403146948
Epoch Step: 50 / 138 Loss: 177.43408203125 Tokens per Sec: 23890.65274836662
Epoch Step: 55 / 138 Loss: 180.52301025390625 Tokens per Sec: 22446.170482492933
Epoch Step: 60 / 138 Loss: 220.54336547851562 Tokens per Sec: 24610.52421065218
Epoch Step: 65 / 138 Loss: 43.668907165527344 Tokens per Sec: 25445.895916423855
Epoch Step: 70 / 138 Loss: 27.931488037109375 Tokens per Sec: 23852.70181556097
Epoch Step: 75 / 138 Loss: 30.015777587890625 Tokens per Sec: 24758.280482400874
Epoch Step: 80 / 138 Loss: 103.97178649902344 Tokens per Sec: 25974.25537307654
Epoch Step: 85 / 138 Loss: 21.763599395751953 Tokens per Sec: 24347.89392030884
Epoch Step: 90 / 138 Loss: 186.53489685058594 Tokens per Sec: 24912.867260095612
Epoch Step: 95 / 138 Loss: 18.40578269958496 Tokens per Sec: 24649.934785116304
Epoch Step: 100 / 138 Loss: 35.80606460571289 Tokens per Sec: 23155.61434006165
Epoch Step: 105 / 138 Loss: 228.65830993652344 Tokens per Sec: 23544.99508314297
Epoch Step: 110 / 138 Loss: 23.67717170715332 Tokens per Sec: 23363.073364977812
Epoch Step: 115 / 138 Loss: 305.4937744140625 Tokens per Sec: 23799.142904665765
Epoch Step: 120 / 138 Loss: 28.24195671081543 Tokens per Sec: 23845.8976173585
Epoch Step: 125 / 138 Loss: 42.87237548828125 Tokens per Sec: 19734.2921873301
Epoch Step: 130 / 138 Loss: 31.90386962890625 Tokens per Sec: 22486.896357101858
Epoch Step: 135 / 138 Loss: 25.764324188232422 Tokens per Sec: 20160.277699204347
Epoch ended with duration 0:00:26.750546
Train perplexity: 2.009560587705013
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( url ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.369333
Validation perplexity: 1.740598727527985
Epoch 54 / 1000
Epoch Step: 5 / 138 Loss: 32.3579216003418 Tokens per Sec: 25485.27229365485
Epoch Step: 10 / 138 Loss: 35.928924560546875 Tokens per Sec: 25030.422352439688
Epoch Step: 15 / 138 Loss: 72.7204360961914 Tokens per Sec: 24989.85423484468
Epoch Step: 20 / 138 Loss: 18.36040687561035 Tokens per Sec: 26082.633755249335
Epoch Step: 25 / 138 Loss: 23.11911392211914 Tokens per Sec: 24261.830818801103
Epoch Step: 30 / 138 Loss: 26.19508171081543 Tokens per Sec: 24478.412648360892
Epoch Step: 35 / 138 Loss: 24.803119659423828 Tokens per Sec: 25296.5892080949
Epoch Step: 40 / 138 Loss: 19.190227508544922 Tokens per Sec: 22260.455798010662
Epoch Step: 45 / 138 Loss: 25.916208267211914 Tokens per Sec: 25511.59905600316
Epoch Step: 50 / 138 Loss: 22.958984375 Tokens per Sec: 23474.158633192168
Epoch Step: 55 / 138 Loss: 31.25016212463379 Tokens per Sec: 23363.70574176472
Epoch Step: 60 / 138 Loss: 97.95167541503906 Tokens per Sec: 25371.444163908956
Epoch Step: 65 / 138 Loss: 82.18647003173828 Tokens per Sec: 24728.06623262679
Epoch Step: 70 / 138 Loss: 24.81814956665039 Tokens per Sec: 23624.293069229374
Epoch Step: 75 / 138 Loss: 135.08233642578125 Tokens per Sec: 23982.59456892701
Epoch Step: 80 / 138 Loss: 19.057659149169922 Tokens per Sec: 26440.595488024916
Epoch Step: 85 / 138 Loss: 21.28146743774414 Tokens per Sec: 23828.248350853915
Epoch Step: 90 / 138 Loss: 23.81240463256836 Tokens per Sec: 22970.820310755877
Epoch Step: 95 / 138 Loss: 22.39153289794922 Tokens per Sec: 23712.139298563106
Epoch Step: 100 / 138 Loss: 18.874820709228516 Tokens per Sec: 25510.468188706265
Epoch Step: 105 / 138 Loss: 31.121368408203125 Tokens per Sec: 19595.0703786902
Epoch Step: 110 / 138 Loss: 32.3548583984375 Tokens per Sec: 24014.904573113432
Epoch Step: 115 / 138 Loss: 22.56439208984375 Tokens per Sec: 22458.638521195375
Epoch Step: 120 / 138 Loss: 19.80472183227539 Tokens per Sec: 21877.418993215244
Epoch Step: 125 / 138 Loss: 18.16408348083496 Tokens per Sec: 21691.506663223096
Epoch Step: 130 / 138 Loss: 21.802587509155273 Tokens per Sec: 21644.643829293535
Epoch Step: 135 / 138 Loss: 28.50092887878418 Tokens per Sec: 22284.912320187843
Epoch ended with duration 0:00:26.766806
Train perplexity: 1.798060559931064
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , VAR_2 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.388519
Validation perplexity: 2.14097567773816
Epoch 55 / 1000
Epoch Step: 5 / 138 Loss: 16.310138702392578 Tokens per Sec: 22823.806550191046
Epoch Step: 10 / 138 Loss: 28.039173126220703 Tokens per Sec: 24367.51149729666
Epoch Step: 15 / 138 Loss: 26.15288543701172 Tokens per Sec: 25943.92166867037
Epoch Step: 20 / 138 Loss: 35.80816650390625 Tokens per Sec: 24126.85264654309
Epoch Step: 25 / 138 Loss: 29.840482711791992 Tokens per Sec: 24702.87733398942
Epoch Step: 30 / 138 Loss: 16.190813064575195 Tokens per Sec: 25442.540343495442
Epoch Step: 35 / 138 Loss: 26.552465438842773 Tokens per Sec: 23058.736998375956
Epoch Step: 40 / 138 Loss: 22.032712936401367 Tokens per Sec: 25883.337823326478
Epoch Step: 45 / 138 Loss: 13.185773849487305 Tokens per Sec: 23016.35557639662
Epoch Step: 50 / 138 Loss: 20.450008392333984 Tokens per Sec: 23143.826568183897
Epoch Step: 55 / 138 Loss: 23.019136428833008 Tokens per Sec: 23488.7422703052
Epoch Step: 60 / 138 Loss: 130.7588653564453 Tokens per Sec: 25675.824641436317
Epoch Step: 65 / 138 Loss: 31.81013298034668 Tokens per Sec: 24306.814158061978
Epoch Step: 70 / 138 Loss: 16.246723175048828 Tokens per Sec: 25165.292954840825
Epoch Step: 75 / 138 Loss: 24.02682876586914 Tokens per Sec: 25862.044822745043
Epoch Step: 80 / 138 Loss: 25.458049774169922 Tokens per Sec: 24695.272493265606
Epoch Step: 85 / 138 Loss: 193.00494384765625 Tokens per Sec: 23933.688161518287
Epoch Step: 90 / 138 Loss: 29.11119842529297 Tokens per Sec: 24963.762350614805
Epoch Step: 95 / 138 Loss: 26.675933837890625 Tokens per Sec: 25014.066066307692
Epoch Step: 100 / 138 Loss: 23.120811462402344 Tokens per Sec: 23217.567268351384
Epoch Step: 105 / 138 Loss: 28.021331787109375 Tokens per Sec: 23538.867800637945
Epoch Step: 110 / 138 Loss: 25.574214935302734 Tokens per Sec: 22374.63502320039
Epoch Step: 115 / 138 Loss: 22.590526580810547 Tokens per Sec: 21229.276652719665
Epoch Step: 120 / 138 Loss: 198.1207733154297 Tokens per Sec: 23199.617351347762
Epoch Step: 125 / 138 Loss: 20.229713439941406 Tokens per Sec: 22834.920316471787
Epoch Step: 130 / 138 Loss: 23.392717361450195 Tokens per Sec: 23398.353988993447
Epoch Step: 135 / 138 Loss: 22.51157569885254 Tokens per Sec: 22668.105714224057
Epoch ended with duration 0:00:26.651454
Train perplexity: 1.6902146173215173
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , VAR_2 . METHOD_4 ( ) , VAR_3 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.368212
Validation perplexity: 1.691105278216423
Model saved checkpoint!
Epoch 56 / 1000
Epoch Step: 5 / 138 Loss: 180.0691375732422 Tokens per Sec: 23566.931633285018
Epoch Step: 10 / 138 Loss: 164.20240783691406 Tokens per Sec: 23491.866966744376
Epoch Step: 15 / 138 Loss: 32.18000030517578 Tokens per Sec: 23609.26267859684
Epoch Step: 20 / 138 Loss: 25.45186996459961 Tokens per Sec: 24742.11527590021
Epoch Step: 25 / 138 Loss: 27.393903732299805 Tokens per Sec: 23250.470470737568
Epoch Step: 30 / 138 Loss: 27.53238868713379 Tokens per Sec: 25683.318784276824
Epoch Step: 35 / 138 Loss: 29.73434829711914 Tokens per Sec: 23115.90083041957
Epoch Step: 40 / 138 Loss: 26.06810188293457 Tokens per Sec: 25531.08145853405
Epoch Step: 45 / 138 Loss: 21.38692855834961 Tokens per Sec: 23368.4254646645
Epoch Step: 50 / 138 Loss: 18.14397430419922 Tokens per Sec: 25812.17703489035
Epoch Step: 55 / 138 Loss: 25.14948272705078 Tokens per Sec: 23196.975783301332
Epoch Step: 60 / 138 Loss: 25.171314239501953 Tokens per Sec: 23984.45497637348
Epoch Step: 65 / 138 Loss: 21.25880241394043 Tokens per Sec: 21839.241772671732
Epoch Step: 70 / 138 Loss: 29.061668395996094 Tokens per Sec: 24797.169757676744
Epoch Step: 75 / 138 Loss: 23.567859649658203 Tokens per Sec: 23913.992108961742
Epoch Step: 80 / 138 Loss: 230.30087280273438 Tokens per Sec: 25868.038130594854
Epoch Step: 85 / 138 Loss: 21.957767486572266 Tokens per Sec: 24891.22356866645
Epoch Step: 90 / 138 Loss: 225.45419311523438 Tokens per Sec: 25450.536060461665
Epoch Step: 95 / 138 Loss: 25.088132858276367 Tokens per Sec: 23607.222020795067
Epoch Step: 100 / 138 Loss: 25.57712745666504 Tokens per Sec: 26274.379468810876
Epoch Step: 105 / 138 Loss: 24.40738868713379 Tokens per Sec: 22949.029206948308
Epoch Step: 110 / 138 Loss: 27.27215576171875 Tokens per Sec: 22482.11952915046
Epoch Step: 115 / 138 Loss: 20.069061279296875 Tokens per Sec: 23410.43565567906
Epoch Step: 120 / 138 Loss: 16.884464263916016 Tokens per Sec: 23539.989063934267
Epoch Step: 125 / 138 Loss: 153.09292602539062 Tokens per Sec: 22797.045286639146
Epoch Step: 130 / 138 Loss: 31.13966941833496 Tokens per Sec: 23120.657892152427
Epoch Step: 135 / 138 Loss: 20.924562454223633 Tokens per Sec: 20219.608460047755
Epoch ended with duration 0:00:26.744588
Train perplexity: 1.6454651037433239
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.370981
Validation perplexity: 1.5301530294648507
Epoch 57 / 1000
Epoch Step: 5 / 138 Loss: 26.345821380615234 Tokens per Sec: 24111.620421618707
Epoch Step: 10 / 138 Loss: 18.0444278717041 Tokens per Sec: 23525.772979256955
Epoch Step: 15 / 138 Loss: 25.514680862426758 Tokens per Sec: 25323.19089998157
Epoch Step: 20 / 138 Loss: 18.46512794494629 Tokens per Sec: 23289.339492088722
Epoch Step: 25 / 138 Loss: 268.5342102050781 Tokens per Sec: 23444.854443873664
Epoch Step: 30 / 138 Loss: 233.93734741210938 Tokens per Sec: 23630.36954735703
Epoch Step: 35 / 138 Loss: 27.45561408996582 Tokens per Sec: 25113.987591035944
Epoch Step: 40 / 138 Loss: 23.499027252197266 Tokens per Sec: 25400.091223414634
Epoch Step: 45 / 138 Loss: 24.15027618408203 Tokens per Sec: 24339.823043976114
Epoch Step: 50 / 138 Loss: 17.590280532836914 Tokens per Sec: 23352.081097593153
Epoch Step: 55 / 138 Loss: 16.342979431152344 Tokens per Sec: 25418.251716378625
Epoch Step: 60 / 138 Loss: 28.207820892333984 Tokens per Sec: 22921.397414165618
Epoch Step: 65 / 138 Loss: 26.592008590698242 Tokens per Sec: 24707.229005666362
Epoch Step: 70 / 138 Loss: 17.634769439697266 Tokens per Sec: 26893.52260624084
Epoch Step: 75 / 138 Loss: 280.76031494140625 Tokens per Sec: 24061.41326498906
Epoch Step: 80 / 138 Loss: 31.028987884521484 Tokens per Sec: 23845.945179480375
Epoch Step: 85 / 138 Loss: 25.023239135742188 Tokens per Sec: 25117.964211244394
Epoch Step: 90 / 138 Loss: 238.55996704101562 Tokens per Sec: 24217.927131500102
Epoch Step: 95 / 138 Loss: 17.82048797607422 Tokens per Sec: 23967.921210668283
Epoch Step: 100 / 138 Loss: 15.88776683807373 Tokens per Sec: 23535.738604685725
Epoch Step: 105 / 138 Loss: 22.4862060546875 Tokens per Sec: 19444.437036976044
Epoch Step: 110 / 138 Loss: 19.891765594482422 Tokens per Sec: 21944.447122540412
Epoch Step: 115 / 138 Loss: 23.96634864807129 Tokens per Sec: 22869.17482558305
Epoch Step: 120 / 138 Loss: 16.854320526123047 Tokens per Sec: 23273.498377948774
Epoch Step: 125 / 138 Loss: 24.038999557495117 Tokens per Sec: 23786.568532982823
Epoch Step: 130 / 138 Loss: 15.651579856872559 Tokens per Sec: 23061.81325421977
Epoch Step: 135 / 138 Loss: 22.4355411529541 Tokens per Sec: 24045.406286128306
Epoch ended with duration 0:00:26.814085
Train perplexity: 1.6186618458958923
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.391622
Validation perplexity: 2.2715834735043856
Epoch 58 / 1000
Epoch Step: 5 / 138 Loss: 22.01249122619629 Tokens per Sec: 24928.785301985794
Epoch Step: 10 / 138 Loss: 21.31821632385254 Tokens per Sec: 25787.07146224631
Epoch Step: 15 / 138 Loss: 188.9752655029297 Tokens per Sec: 23423.469939956696
Epoch Step: 20 / 138 Loss: 24.016284942626953 Tokens per Sec: 25935.142466865378
Epoch Step: 25 / 138 Loss: 31.819618225097656 Tokens per Sec: 24256.09902247562
Epoch Step: 30 / 138 Loss: 32.35157775878906 Tokens per Sec: 24598.642820526384
Epoch Step: 35 / 138 Loss: 17.28278350830078 Tokens per Sec: 24236.497950170808
Epoch Step: 40 / 138 Loss: 20.87039566040039 Tokens per Sec: 22503.86888754534
Epoch Step: 45 / 138 Loss: 27.148168563842773 Tokens per Sec: 23278.56158184677
Epoch Step: 50 / 138 Loss: 19.099407196044922 Tokens per Sec: 25520.245002211137
Epoch Step: 55 / 138 Loss: 19.160633087158203 Tokens per Sec: 25349.271556555683
Epoch Step: 60 / 138 Loss: 223.89125061035156 Tokens per Sec: 24143.529645212784
Epoch Step: 65 / 138 Loss: 27.66290283203125 Tokens per Sec: 25752.133421485938
Epoch Step: 70 / 138 Loss: 32.28815460205078 Tokens per Sec: 22803.77117325766
Epoch Step: 75 / 138 Loss: 23.760726928710938 Tokens per Sec: 22119.662955405533
Epoch Step: 80 / 138 Loss: 24.012182235717773 Tokens per Sec: 25227.155057143318
Epoch Step: 85 / 138 Loss: 24.529462814331055 Tokens per Sec: 23636.559439617653
Epoch Step: 90 / 138 Loss: 30.848814010620117 Tokens per Sec: 23166.970690925165
Epoch Step: 95 / 138 Loss: 28.47281265258789 Tokens per Sec: 24120.835649816956
Epoch Step: 100 / 138 Loss: 21.28125 Tokens per Sec: 24606.893773699205
Epoch Step: 105 / 138 Loss: 25.94828987121582 Tokens per Sec: 23637.886839322484
Epoch Step: 110 / 138 Loss: 177.13323974609375 Tokens per Sec: 22629.736330404696
Epoch Step: 115 / 138 Loss: 22.050846099853516 Tokens per Sec: 22693.02806790274
Epoch Step: 120 / 138 Loss: 28.52943992614746 Tokens per Sec: 22729.097919542062
Epoch Step: 125 / 138 Loss: 24.374603271484375 Tokens per Sec: 23181.152329525838
Epoch Step: 130 / 138 Loss: 18.04956817626953 Tokens per Sec: 20941.476483782495
Epoch Step: 135 / 138 Loss: 20.752851486206055 Tokens per Sec: 23120.499559806656
Epoch ended with duration 0:00:26.750003
Train perplexity: 1.711600609940944
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.367983
Validation perplexity: 1.6121079690602766
Epoch 59 / 1000
Epoch Step: 5 / 138 Loss: 29.58515739440918 Tokens per Sec: 23416.79002444117
Epoch Step: 10 / 138 Loss: 16.84992218017578 Tokens per Sec: 25414.07058005435
Epoch Step: 15 / 138 Loss: 150.6457061767578 Tokens per Sec: 25774.80254320398
Epoch Step: 20 / 138 Loss: 15.80092716217041 Tokens per Sec: 25019.286803536055
Epoch Step: 25 / 138 Loss: 29.635927200317383 Tokens per Sec: 24261.23686221831
Epoch Step: 30 / 138 Loss: 18.72580337524414 Tokens per Sec: 24362.14476486732
Epoch Step: 35 / 138 Loss: 15.552897453308105 Tokens per Sec: 25401.64970219421
Epoch Step: 40 / 138 Loss: 27.883039474487305 Tokens per Sec: 24515.305569431577
Epoch Step: 45 / 138 Loss: 15.43022346496582 Tokens per Sec: 23372.303251815716
Epoch Step: 50 / 138 Loss: 13.805680274963379 Tokens per Sec: 25660.787210885836
Epoch Step: 55 / 138 Loss: 17.50594139099121 Tokens per Sec: 24250.38281703303
Epoch Step: 60 / 138 Loss: 21.399322509765625 Tokens per Sec: 23069.143130387874
Epoch Step: 65 / 138 Loss: 21.854713439941406 Tokens per Sec: 23838.707475777148
Epoch Step: 70 / 138 Loss: 29.671171188354492 Tokens per Sec: 24395.87755577929
Epoch Step: 75 / 138 Loss: 31.113441467285156 Tokens per Sec: 23022.053907128105
Epoch Step: 80 / 138 Loss: 33.85049057006836 Tokens per Sec: 24773.20268998816
Epoch Step: 85 / 138 Loss: 22.803112030029297 Tokens per Sec: 23161.890410540585
Epoch Step: 90 / 138 Loss: 23.004701614379883 Tokens per Sec: 25626.33104843767
Epoch Step: 95 / 138 Loss: 28.862777709960938 Tokens per Sec: 23294.07442865512
Epoch Step: 100 / 138 Loss: 14.036683082580566 Tokens per Sec: 23629.507379194234
Epoch Step: 105 / 138 Loss: 19.768386840820312 Tokens per Sec: 24073.516038343405
Epoch Step: 110 / 138 Loss: 15.84759521484375 Tokens per Sec: 19496.301213935836
Epoch Step: 115 / 138 Loss: 16.53413963317871 Tokens per Sec: 23503.62114456527
Epoch Step: 120 / 138 Loss: 21.113006591796875 Tokens per Sec: 23749.994875287386
Epoch Step: 125 / 138 Loss: 22.828702926635742 Tokens per Sec: 21786.671372262274
Epoch Step: 130 / 138 Loss: 15.213178634643555 Tokens per Sec: 22111.410296144746
Epoch Step: 135 / 138 Loss: 24.509567260742188 Tokens per Sec: 23418.155472736416
Epoch ended with duration 0:00:26.784619
Train perplexity: 1.7273011751892142
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.375765
Validation perplexity: 1.7005075025631173
Epoch 60 / 1000
Epoch Step: 5 / 138 Loss: 14.866037368774414 Tokens per Sec: 24943.171891334805
Epoch Step: 10 / 138 Loss: 24.862648010253906 Tokens per Sec: 23005.155682446282
Epoch Step: 15 / 138 Loss: 168.8419647216797 Tokens per Sec: 24534.878128015433
Epoch Step: 20 / 138 Loss: 132.118408203125 Tokens per Sec: 24851.90700427244
Epoch Step: 25 / 138 Loss: 133.64886474609375 Tokens per Sec: 23750.531331688773
Epoch Step: 30 / 138 Loss: 28.667160034179688 Tokens per Sec: 23848.61834646011
Epoch Step: 35 / 138 Loss: 19.580839157104492 Tokens per Sec: 23905.81238301984
Epoch Step: 40 / 138 Loss: 20.417797088623047 Tokens per Sec: 23845.809283461465
Epoch Step: 45 / 138 Loss: 25.63389778137207 Tokens per Sec: 24532.573354464253
Epoch Step: 50 / 138 Loss: 28.379962921142578 Tokens per Sec: 23284.066909057477
Epoch Step: 55 / 138 Loss: 21.879352569580078 Tokens per Sec: 23646.678811282247
Epoch Step: 60 / 138 Loss: 15.116458892822266 Tokens per Sec: 25331.761024211275
Epoch Step: 65 / 138 Loss: 16.575244903564453 Tokens per Sec: 22318.971913892994
Epoch Step: 70 / 138 Loss: 21.97868537902832 Tokens per Sec: 23604.022643914515
Epoch Step: 75 / 138 Loss: 20.807470321655273 Tokens per Sec: 26726.538333849254
Epoch Step: 80 / 138 Loss: 22.995384216308594 Tokens per Sec: 23296.21701382817
Epoch Step: 85 / 138 Loss: 17.552486419677734 Tokens per Sec: 23097.278907189575
Epoch Step: 90 / 138 Loss: 22.038352966308594 Tokens per Sec: 23803.875752284282
Epoch Step: 95 / 138 Loss: 17.756206512451172 Tokens per Sec: 25396.70505614867
Epoch Step: 100 / 138 Loss: 22.34670066833496 Tokens per Sec: 26140.46393663755
Epoch Step: 105 / 138 Loss: 23.339975357055664 Tokens per Sec: 21732.8706687173
Epoch Step: 110 / 138 Loss: 22.419189453125 Tokens per Sec: 23275.202078696217
Epoch Step: 115 / 138 Loss: 22.303518295288086 Tokens per Sec: 22679.437570166858
Epoch Step: 120 / 138 Loss: 32.92923355102539 Tokens per Sec: 24059.33546947901
Epoch Step: 125 / 138 Loss: 30.851909637451172 Tokens per Sec: 22610.62444227459
Epoch Step: 130 / 138 Loss: 129.40530395507812 Tokens per Sec: 20820.867241011263
Epoch Step: 135 / 138 Loss: 22.805469512939453 Tokens per Sec: 23057.114183869548
Epoch ended with duration 0:00:26.879650
Train perplexity: 1.852568931659995
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.398500
Validation perplexity: 2.321864800956768
Model saved checkpoint!
Epoch 61 / 1000
Epoch Step: 5 / 138 Loss: 27.983959197998047 Tokens per Sec: 24167.144081817274
Epoch Step: 10 / 138 Loss: 13.68061637878418 Tokens per Sec: 25647.501021011252
Epoch Step: 15 / 138 Loss: 17.15996742248535 Tokens per Sec: 26710.401604947117
Epoch Step: 20 / 138 Loss: 142.2793426513672 Tokens per Sec: 23175.7196465353
Epoch Step: 25 / 138 Loss: 24.792490005493164 Tokens per Sec: 24941.580384470653
Epoch Step: 30 / 138 Loss: 25.733915328979492 Tokens per Sec: 25379.14336906843
Epoch Step: 35 / 138 Loss: 205.77813720703125 Tokens per Sec: 23460.008126117715
Epoch Step: 40 / 138 Loss: 26.25627899169922 Tokens per Sec: 23113.058946987996
Epoch Step: 45 / 138 Loss: 205.42066955566406 Tokens per Sec: 23754.851096888393
Epoch Step: 50 / 138 Loss: 92.85136413574219 Tokens per Sec: 25014.23818546652
Epoch Step: 55 / 138 Loss: 22.457626342773438 Tokens per Sec: 26236.3880035428
Epoch Step: 60 / 138 Loss: 28.169233322143555 Tokens per Sec: 22847.4807399424
Epoch Step: 65 / 138 Loss: 156.20343017578125 Tokens per Sec: 22128.692967041483
Epoch Step: 70 / 138 Loss: 18.31899642944336 Tokens per Sec: 23359.50757181496
Epoch Step: 75 / 138 Loss: 21.052471160888672 Tokens per Sec: 24725.875645862197
Epoch Step: 80 / 138 Loss: 22.200958251953125 Tokens per Sec: 24097.957987648795
Epoch Step: 85 / 138 Loss: 21.626176834106445 Tokens per Sec: 24832.992753249375
Epoch Step: 90 / 138 Loss: 24.351001739501953 Tokens per Sec: 24108.814436235218
Epoch Step: 95 / 138 Loss: 26.811370849609375 Tokens per Sec: 23523.89723452873
Epoch Step: 100 / 138 Loss: 20.11779022216797 Tokens per Sec: 24627.258366831225
Epoch Step: 105 / 138 Loss: 23.558046340942383 Tokens per Sec: 23089.796998407986
Epoch Step: 110 / 138 Loss: 227.3407440185547 Tokens per Sec: 22440.266029983122
Epoch Step: 115 / 138 Loss: 24.178863525390625 Tokens per Sec: 23383.39672174455
Epoch Step: 120 / 138 Loss: 26.411073684692383 Tokens per Sec: 20394.517537649328
Epoch Step: 125 / 138 Loss: 17.900400161743164 Tokens per Sec: 23474.243370726104
Epoch Step: 130 / 138 Loss: 18.818115234375 Tokens per Sec: 23894.765354178773
Epoch Step: 135 / 138 Loss: 20.94026756286621 Tokens per Sec: 23706.068343114177
Epoch ended with duration 0:00:26.729163
Train perplexity: 1.730096978038788
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.373249
Validation perplexity: 1.4990481604464456
Epoch 62 / 1000
Epoch Step: 5 / 138 Loss: 16.35483741760254 Tokens per Sec: 23940.064214700986
Epoch Step: 10 / 138 Loss: 20.513107299804688 Tokens per Sec: 24536.332581520295
Epoch Step: 15 / 138 Loss: 24.461923599243164 Tokens per Sec: 24958.14469270207
Epoch Step: 20 / 138 Loss: 20.760107040405273 Tokens per Sec: 24189.992564266468
Epoch Step: 25 / 138 Loss: 17.18842315673828 Tokens per Sec: 25229.904366950297
Epoch Step: 30 / 138 Loss: 14.641151428222656 Tokens per Sec: 24734.162225733595
Epoch Step: 35 / 138 Loss: 11.746504783630371 Tokens per Sec: 23664.153460319343
Epoch Step: 40 / 138 Loss: 12.052444458007812 Tokens per Sec: 24029.43650992604
Epoch Step: 45 / 138 Loss: 19.743377685546875 Tokens per Sec: 22446.774310874087
Epoch Step: 50 / 138 Loss: 12.879904747009277 Tokens per Sec: 24596.74154022436
Epoch Step: 55 / 138 Loss: 14.892677307128906 Tokens per Sec: 23641.5471328765
Epoch Step: 60 / 138 Loss: 28.760875701904297 Tokens per Sec: 23487.00146211087
Epoch Step: 65 / 138 Loss: 19.401565551757812 Tokens per Sec: 24321.330259806495
Epoch Step: 70 / 138 Loss: 17.069984436035156 Tokens per Sec: 23116.55836733084
Epoch Step: 75 / 138 Loss: 25.850196838378906 Tokens per Sec: 24867.292579162182
Epoch Step: 80 / 138 Loss: 118.27002716064453 Tokens per Sec: 24146.1157296126
Epoch Step: 85 / 138 Loss: 14.862296104431152 Tokens per Sec: 25758.718569677734
Epoch Step: 90 / 138 Loss: 28.153715133666992 Tokens per Sec: 26019.760955612517
Epoch Step: 95 / 138 Loss: 24.429931640625 Tokens per Sec: 24270.457932652906
Epoch Step: 100 / 138 Loss: 31.19269561767578 Tokens per Sec: 24174.146730108587
Epoch Step: 105 / 138 Loss: 18.541580200195312 Tokens per Sec: 18031.639686845338
Epoch Step: 110 / 138 Loss: 25.69220542907715 Tokens per Sec: 23383.305158481013
Epoch Step: 115 / 138 Loss: 19.764114379882812 Tokens per Sec: 23074.340661639246
Epoch Step: 120 / 138 Loss: 22.714372634887695 Tokens per Sec: 24194.43477919177
Epoch Step: 125 / 138 Loss: 210.10330200195312 Tokens per Sec: 22450.952613006386
Epoch Step: 130 / 138 Loss: 22.377044677734375 Tokens per Sec: 22471.142255120692
Epoch Step: 135 / 138 Loss: 170.85086059570312 Tokens per Sec: 22732.373789950958
Epoch ended with duration 0:00:26.852854
Train perplexity: 1.7360681746097872
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.386480
Validation perplexity: 1.7987032311311926
Epoch 63 / 1000
Epoch Step: 5 / 138 Loss: 21.949602127075195 Tokens per Sec: 25211.366977839363
Epoch Step: 10 / 138 Loss: 17.04616355895996 Tokens per Sec: 26003.614735442272
Epoch Step: 15 / 138 Loss: 29.714872360229492 Tokens per Sec: 25301.794222301938
Epoch Step: 20 / 138 Loss: 13.92636775970459 Tokens per Sec: 23860.87185286928
Epoch Step: 25 / 138 Loss: 27.689224243164062 Tokens per Sec: 23247.705220042193
Epoch Step: 30 / 138 Loss: 215.7441864013672 Tokens per Sec: 24569.403175921492
Epoch Step: 35 / 138 Loss: 29.31694793701172 Tokens per Sec: 24170.805754519024
Epoch Step: 40 / 138 Loss: 154.57571411132812 Tokens per Sec: 25610.154542143136
Epoch Step: 45 / 138 Loss: 27.307758331298828 Tokens per Sec: 22621.852417962935
Epoch Step: 50 / 138 Loss: 159.9853973388672 Tokens per Sec: 25499.254490085677
Epoch Step: 55 / 138 Loss: 26.662002563476562 Tokens per Sec: 24107.378103579194
Epoch Step: 60 / 138 Loss: 27.10700035095215 Tokens per Sec: 25082.721669702645
Epoch Step: 65 / 138 Loss: 18.015947341918945 Tokens per Sec: 24526.940626631742
Epoch Step: 70 / 138 Loss: 18.87872314453125 Tokens per Sec: 24912.79443698914
Epoch Step: 75 / 138 Loss: 15.730323791503906 Tokens per Sec: 21105.38193859363
Epoch Step: 80 / 138 Loss: 23.7928524017334 Tokens per Sec: 26123.415403652445
Epoch Step: 85 / 138 Loss: 26.815698623657227 Tokens per Sec: 23463.575886320188
Epoch Step: 90 / 138 Loss: 28.860382080078125 Tokens per Sec: 23210.19314249421
Epoch Step: 95 / 138 Loss: 178.24513244628906 Tokens per Sec: 24229.23555733849
Epoch Step: 100 / 138 Loss: 16.60887336730957 Tokens per Sec: 23755.86748859851
Epoch Step: 105 / 138 Loss: 27.501075744628906 Tokens per Sec: 20533.464568681302
Epoch Step: 110 / 138 Loss: 28.830732345581055 Tokens per Sec: 23247.6241440671
Epoch Step: 115 / 138 Loss: 20.225996017456055 Tokens per Sec: 23797.74467444715
Epoch Step: 120 / 138 Loss: 131.85292053222656 Tokens per Sec: 23189.813748268956
Epoch Step: 125 / 138 Loss: 26.370725631713867 Tokens per Sec: 22770.63873788452
Epoch Step: 130 / 138 Loss: 26.59222984313965 Tokens per Sec: 22082.329986791257
Epoch Step: 135 / 138 Loss: 18.397693634033203 Tokens per Sec: 21765.56307242392
Epoch ended with duration 0:00:26.795841
Train perplexity: 1.742731846055409
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , VAR_2 . METHOD_4 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.381725
Validation perplexity: 1.4026169562833333
Model saved best_on_validation!
Epoch 64 / 1000
Epoch Step: 5 / 138 Loss: 15.634760856628418 Tokens per Sec: 24831.014678809643
Epoch Step: 10 / 138 Loss: 14.881612777709961 Tokens per Sec: 23490.607345686843
Epoch Step: 15 / 138 Loss: 23.51543617248535 Tokens per Sec: 23694.443527216477
Epoch Step: 20 / 138 Loss: 17.52809715270996 Tokens per Sec: 24791.19110753671
Epoch Step: 25 / 138 Loss: 20.41657257080078 Tokens per Sec: 24431.322576791612
Epoch Step: 30 / 138 Loss: 18.82750129699707 Tokens per Sec: 25345.698187088503
Epoch Step: 35 / 138 Loss: 13.750015258789062 Tokens per Sec: 22909.539507258723
Epoch Step: 40 / 138 Loss: 23.273317337036133 Tokens per Sec: 24153.59582547674
Epoch Step: 45 / 138 Loss: 17.91646957397461 Tokens per Sec: 25717.990528444854
Epoch Step: 50 / 138 Loss: 11.536169052124023 Tokens per Sec: 25658.460867462418
Epoch Step: 55 / 138 Loss: 17.972002029418945 Tokens per Sec: 25252.614880550493
Epoch Step: 60 / 138 Loss: 207.88201904296875 Tokens per Sec: 24445.833793276906
Epoch Step: 65 / 138 Loss: 23.706239700317383 Tokens per Sec: 24019.19225290815
Epoch Step: 70 / 138 Loss: 24.522525787353516 Tokens per Sec: 24500.16765983398
Epoch Step: 75 / 138 Loss: 15.548727989196777 Tokens per Sec: 24403.228251471974
Epoch Step: 80 / 138 Loss: 28.866056442260742 Tokens per Sec: 22129.196302250988
Epoch Step: 85 / 138 Loss: 23.697160720825195 Tokens per Sec: 23019.87098831942
Epoch Step: 90 / 138 Loss: 30.25007438659668 Tokens per Sec: 22475.493988711693
Epoch Step: 95 / 138 Loss: 20.173261642456055 Tokens per Sec: 23786.541043962916
Epoch Step: 100 / 138 Loss: 24.01121711730957 Tokens per Sec: 24077.075474271445
Epoch Step: 105 / 138 Loss: 19.85384178161621 Tokens per Sec: 23467.76889186416
Epoch Step: 110 / 138 Loss: 22.79179573059082 Tokens per Sec: 22020.117900143203
Epoch Step: 115 / 138 Loss: 17.367860794067383 Tokens per Sec: 22438.349767490676
Epoch Step: 120 / 138 Loss: 17.876527786254883 Tokens per Sec: 22460.11574954403
Epoch Step: 125 / 138 Loss: 227.85031127929688 Tokens per Sec: 23550.58758799447
Epoch Step: 130 / 138 Loss: 26.94905662536621 Tokens per Sec: 20633.2424057398
Epoch Step: 135 / 138 Loss: 28.3037052154541 Tokens per Sec: 23109.65544453541
Epoch ended with duration 0:00:26.903024
Train perplexity: 1.6697008665788977
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.392087
Validation perplexity: 1.802253103447671
Epoch 65 / 1000
Epoch Step: 5 / 138 Loss: 24.590152740478516 Tokens per Sec: 25211.865385301506
Epoch Step: 10 / 138 Loss: 21.36945152282715 Tokens per Sec: 23403.83808984249
Epoch Step: 15 / 138 Loss: 16.446895599365234 Tokens per Sec: 23770.040373653206
Epoch Step: 20 / 138 Loss: 19.946182250976562 Tokens per Sec: 25595.047292439496
Epoch Step: 25 / 138 Loss: 20.514902114868164 Tokens per Sec: 24404.15052048498
Epoch Step: 30 / 138 Loss: 24.165002822875977 Tokens per Sec: 22727.26891771065
Epoch Step: 35 / 138 Loss: 22.049713134765625 Tokens per Sec: 23167.107992478843
Epoch Step: 40 / 138 Loss: 228.9161376953125 Tokens per Sec: 25398.59409028988
Epoch Step: 45 / 138 Loss: 25.29477310180664 Tokens per Sec: 23352.032498540444
Epoch Step: 50 / 138 Loss: 29.559064865112305 Tokens per Sec: 25544.89846094946
Epoch Step: 55 / 138 Loss: 26.756500244140625 Tokens per Sec: 22520.955146459597
Epoch Step: 60 / 138 Loss: 14.320552825927734 Tokens per Sec: 25053.95351726904
Epoch Step: 65 / 138 Loss: 23.092144012451172 Tokens per Sec: 24309.60521855519
Epoch Step: 70 / 138 Loss: 15.202149391174316 Tokens per Sec: 25643.27255972119
Epoch Step: 75 / 138 Loss: 14.7048978805542 Tokens per Sec: 21640.6227209422
Epoch Step: 80 / 138 Loss: 26.577621459960938 Tokens per Sec: 23570.422284549968
Epoch Step: 85 / 138 Loss: 26.242385864257812 Tokens per Sec: 24490.540301327717
Epoch Step: 90 / 138 Loss: 20.268877029418945 Tokens per Sec: 23719.92967437645
Epoch Step: 95 / 138 Loss: 22.991275787353516 Tokens per Sec: 25876.30340578903
Epoch Step: 100 / 138 Loss: 23.07716941833496 Tokens per Sec: 24670.976893761635
Epoch Step: 105 / 138 Loss: 16.85407066345215 Tokens per Sec: 19806.76186859746
Epoch Step: 110 / 138 Loss: 20.521217346191406 Tokens per Sec: 23462.991760630084
Epoch Step: 115 / 138 Loss: 196.18759155273438 Tokens per Sec: 21725.54904646127
Epoch Step: 120 / 138 Loss: 24.64595603942871 Tokens per Sec: 23974.877877250892
Epoch Step: 125 / 138 Loss: 19.889995574951172 Tokens per Sec: 23957.962214542982
Epoch Step: 130 / 138 Loss: 22.63002586364746 Tokens per Sec: 22644.413475993766
Epoch Step: 135 / 138 Loss: 22.450258255004883 Tokens per Sec: 23309.723658345225
Epoch ended with duration 0:00:26.806249
Train perplexity: 1.7737149728185924
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.369372
Validation perplexity: 1.6335536439770062
Model saved checkpoint!
Epoch 66 / 1000
Epoch Step: 5 / 138 Loss: 23.77117919921875 Tokens per Sec: 24701.787713701033
Epoch Step: 10 / 138 Loss: 20.540401458740234 Tokens per Sec: 25978.78337280597
Epoch Step: 15 / 138 Loss: 20.568857192993164 Tokens per Sec: 24784.446378114328
Epoch Step: 20 / 138 Loss: 23.110157012939453 Tokens per Sec: 25149.11319297608
Epoch Step: 25 / 138 Loss: 25.47119140625 Tokens per Sec: 24802.257233326785
Epoch Step: 30 / 138 Loss: 22.38440704345703 Tokens per Sec: 23617.867485760176
Epoch Step: 35 / 138 Loss: 15.539424896240234 Tokens per Sec: 24605.968326055627
Epoch Step: 40 / 138 Loss: 16.282058715820312 Tokens per Sec: 23536.40981088155
Epoch Step: 45 / 138 Loss: 134.602294921875 Tokens per Sec: 21279.65731257852
Epoch Step: 50 / 138 Loss: 11.856826782226562 Tokens per Sec: 25829.080359443207
Epoch Step: 55 / 138 Loss: 20.283109664916992 Tokens per Sec: 22724.63701993307
Epoch Step: 60 / 138 Loss: 10.903570175170898 Tokens per Sec: 25698.26459263883
Epoch Step: 65 / 138 Loss: 12.691632270812988 Tokens per Sec: 25333.274581442598
Epoch Step: 70 / 138 Loss: 24.793132781982422 Tokens per Sec: 23170.553566743205
Epoch Step: 75 / 138 Loss: 16.638870239257812 Tokens per Sec: 24475.27161680635
Epoch Step: 80 / 138 Loss: 217.0265350341797 Tokens per Sec: 25004.338817445983
Epoch Step: 85 / 138 Loss: 24.89690589904785 Tokens per Sec: 23732.781592313317
Epoch Step: 90 / 138 Loss: 13.176438331604004 Tokens per Sec: 22541.01493698836
Epoch Step: 95 / 138 Loss: 20.412757873535156 Tokens per Sec: 25507.723285778895
Epoch Step: 100 / 138 Loss: 23.14298439025879 Tokens per Sec: 23738.1075325115
Epoch Step: 105 / 138 Loss: 15.887110710144043 Tokens per Sec: 23442.301882157008
Epoch Step: 110 / 138 Loss: 14.542291641235352 Tokens per Sec: 24095.831843550295
Epoch Step: 115 / 138 Loss: 14.86585521697998 Tokens per Sec: 23483.510922578396
Epoch Step: 120 / 138 Loss: 17.191539764404297 Tokens per Sec: 22846.54031211915
Epoch Step: 125 / 138 Loss: 17.590648651123047 Tokens per Sec: 22858.65095818886
Epoch Step: 130 / 138 Loss: 17.51170539855957 Tokens per Sec: 22889.046877171193
Epoch Step: 135 / 138 Loss: 17.36582374572754 Tokens per Sec: 22381.52400844631
Epoch ended with duration 0:00:26.722781
Train perplexity: 1.478121091207186
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.370724
Validation perplexity: 1.637622299026424
Epoch 67 / 1000
Epoch Step: 5 / 138 Loss: 15.47322940826416 Tokens per Sec: 24617.3436862995
Epoch Step: 10 / 138 Loss: 11.357562065124512 Tokens per Sec: 25311.825720411143
Epoch Step: 15 / 138 Loss: 21.77764320373535 Tokens per Sec: 24334.376410020894
Epoch Step: 20 / 138 Loss: 25.08390235900879 Tokens per Sec: 24994.12860732329
Epoch Step: 25 / 138 Loss: 19.086254119873047 Tokens per Sec: 23499.22047573848
Epoch Step: 30 / 138 Loss: 23.609825134277344 Tokens per Sec: 24894.0556196202
Epoch Step: 35 / 138 Loss: 12.6070556640625 Tokens per Sec: 24857.702226737532
Epoch Step: 40 / 138 Loss: 20.768348693847656 Tokens per Sec: 22015.88635624745
Epoch Step: 45 / 138 Loss: 24.642044067382812 Tokens per Sec: 22612.59326052622
Epoch Step: 50 / 138 Loss: 18.56993293762207 Tokens per Sec: 26389.206591895272
Epoch Step: 55 / 138 Loss: 20.176027297973633 Tokens per Sec: 23029.46781754192
Epoch Step: 60 / 138 Loss: 23.71678352355957 Tokens per Sec: 24574.834291645973
Epoch Step: 65 / 138 Loss: 242.93081665039062 Tokens per Sec: 23415.82773145662
Epoch Step: 70 / 138 Loss: 26.14827537536621 Tokens per Sec: 22790.30669288461
Epoch Step: 75 / 138 Loss: 13.27442455291748 Tokens per Sec: 25452.66156564183
Epoch Step: 80 / 138 Loss: 18.63551902770996 Tokens per Sec: 26478.382022932434
Epoch Step: 85 / 138 Loss: 15.387930870056152 Tokens per Sec: 23127.561888893102
Epoch Step: 90 / 138 Loss: 15.308622360229492 Tokens per Sec: 26870.85548152161
Epoch Step: 95 / 138 Loss: 19.903091430664062 Tokens per Sec: 24954.74159693911
Epoch Step: 100 / 138 Loss: 13.90850830078125 Tokens per Sec: 25159.322183728127
Epoch Step: 105 / 138 Loss: 18.94276237487793 Tokens per Sec: 21664.538337473365
Epoch Step: 110 / 138 Loss: 21.154293060302734 Tokens per Sec: 22430.184737301468
Epoch Step: 115 / 138 Loss: 22.238075256347656 Tokens per Sec: 23308.734998100583
Epoch Step: 120 / 138 Loss: 17.961315155029297 Tokens per Sec: 21840.824293101447
Epoch Step: 125 / 138 Loss: 19.080612182617188 Tokens per Sec: 20132.00928705302
Epoch Step: 130 / 138 Loss: 21.184669494628906 Tokens per Sec: 22711.334370259498
Epoch Step: 135 / 138 Loss: 205.41065979003906 Tokens per Sec: 23323.053319276216
Epoch ended with duration 0:00:26.786859
Train perplexity: 1.5733123088297154
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.389764
Validation perplexity: 1.7505411285407313
Epoch 68 / 1000
Epoch Step: 5 / 138 Loss: 15.686075210571289 Tokens per Sec: 23756.51259458233
Epoch Step: 10 / 138 Loss: 19.752277374267578 Tokens per Sec: 24989.288565739716
Epoch Step: 15 / 138 Loss: 20.78053092956543 Tokens per Sec: 26097.189260859028
Epoch Step: 20 / 138 Loss: 163.44630432128906 Tokens per Sec: 23684.92334579176
Epoch Step: 25 / 138 Loss: 24.08955192565918 Tokens per Sec: 22016.496107728934
Epoch Step: 30 / 138 Loss: 19.84617042541504 Tokens per Sec: 23062.531408396717
Epoch Step: 35 / 138 Loss: 24.579954147338867 Tokens per Sec: 24147.88399750826
Epoch Step: 40 / 138 Loss: 13.620410919189453 Tokens per Sec: 24268.369401615106
Epoch Step: 45 / 138 Loss: 21.640249252319336 Tokens per Sec: 23743.943727711445
Epoch Step: 50 / 138 Loss: 18.565359115600586 Tokens per Sec: 24681.113929122057
Epoch Step: 55 / 138 Loss: 22.008134841918945 Tokens per Sec: 25472.315748322573
Epoch Step: 60 / 138 Loss: 15.596501350402832 Tokens per Sec: 25750.607120304892
Epoch Step: 65 / 138 Loss: 20.841285705566406 Tokens per Sec: 26103.60077156108
Epoch Step: 70 / 138 Loss: 13.603008270263672 Tokens per Sec: 24298.236838650653
Epoch Step: 75 / 138 Loss: 263.64447021484375 Tokens per Sec: 23300.261976334506
Epoch Step: 80 / 138 Loss: 12.756559371948242 Tokens per Sec: 22624.92329699802
Epoch Step: 85 / 138 Loss: 16.192106246948242 Tokens per Sec: 23735.270946286382
Epoch Step: 90 / 138 Loss: 25.256546020507812 Tokens per Sec: 23668.25728503459
Epoch Step: 95 / 138 Loss: 94.10234832763672 Tokens per Sec: 25186.946383405833
Epoch Step: 100 / 138 Loss: 13.751138687133789 Tokens per Sec: 24676.983937939352
Epoch Step: 105 / 138 Loss: 25.654006958007812 Tokens per Sec: 21851.816425393336
Epoch Step: 110 / 138 Loss: 17.916584014892578 Tokens per Sec: 22564.637731557305
Epoch Step: 115 / 138 Loss: 14.437202453613281 Tokens per Sec: 21826.4736446263
Epoch Step: 120 / 138 Loss: 18.208513259887695 Tokens per Sec: 21094.716283248395
Epoch Step: 125 / 138 Loss: 20.653308868408203 Tokens per Sec: 22990.861202935328
Epoch Step: 130 / 138 Loss: 17.733356475830078 Tokens per Sec: 23042.286239694102
Epoch Step: 135 / 138 Loss: 13.654376029968262 Tokens per Sec: 23371.470181993074
Epoch ended with duration 0:00:26.886438
Train perplexity: 1.670678465899602
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , u . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.397768
Validation perplexity: 2.1545968863007285
Epoch 69 / 1000
Epoch Step: 5 / 138 Loss: 14.434942245483398 Tokens per Sec: 23826.83303099088
Epoch Step: 10 / 138 Loss: 20.314472198486328 Tokens per Sec: 24328.83724791542
Epoch Step: 15 / 138 Loss: 18.648902893066406 Tokens per Sec: 24747.856316541107
Epoch Step: 20 / 138 Loss: 16.611616134643555 Tokens per Sec: 23729.43509248647
Epoch Step: 25 / 138 Loss: 18.797584533691406 Tokens per Sec: 22507.501290459433
Epoch Step: 30 / 138 Loss: 131.90870666503906 Tokens per Sec: 25617.33663320909
Epoch Step: 35 / 138 Loss: 13.450135231018066 Tokens per Sec: 23897.75668412586
Epoch Step: 40 / 138 Loss: 22.154216766357422 Tokens per Sec: 23741.30054633231
Epoch Step: 45 / 138 Loss: 19.469451904296875 Tokens per Sec: 23693.913853013783
Epoch Step: 50 / 138 Loss: 25.999509811401367 Tokens per Sec: 25596.508363386536
Epoch Step: 55 / 138 Loss: 11.336296081542969 Tokens per Sec: 24208.12544168222
Epoch Step: 60 / 138 Loss: 20.09592628479004 Tokens per Sec: 25037.632366966765
Epoch Step: 65 / 138 Loss: 25.751371383666992 Tokens per Sec: 23699.15482896944
Epoch Step: 70 / 138 Loss: 15.381156921386719 Tokens per Sec: 24525.2591993056
Epoch Step: 75 / 138 Loss: 16.31723403930664 Tokens per Sec: 23319.254970744547
Epoch Step: 80 / 138 Loss: 193.3511505126953 Tokens per Sec: 23684.19629834211
Epoch Step: 85 / 138 Loss: 15.153770446777344 Tokens per Sec: 24092.608929902734
Epoch Step: 90 / 138 Loss: 14.616255760192871 Tokens per Sec: 26105.624173740547
Epoch Step: 95 / 138 Loss: 10.439882278442383 Tokens per Sec: 25081.5156270533
Epoch Step: 100 / 138 Loss: 21.093402862548828 Tokens per Sec: 23809.477179463054
Epoch Step: 105 / 138 Loss: 162.5167236328125 Tokens per Sec: 23020.281653111553
Epoch Step: 110 / 138 Loss: 24.21932029724121 Tokens per Sec: 20876.09571714792
Epoch Step: 115 / 138 Loss: 25.808025360107422 Tokens per Sec: 23317.748297175032
Epoch Step: 120 / 138 Loss: 170.307861328125 Tokens per Sec: 23455.073425601935
Epoch Step: 125 / 138 Loss: 25.53680419921875 Tokens per Sec: 23685.389474299496
Epoch Step: 130 / 138 Loss: 17.792499542236328 Tokens per Sec: 23262.547669741194
Epoch Step: 135 / 138 Loss: 25.630786895751953 Tokens per Sec: 23415.732018023944
Epoch ended with duration 0:00:26.692774
Train perplexity: 1.4411718495710524
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.369527
Validation perplexity: 1.4799227369043466
Epoch 70 / 1000
Epoch Step: 5 / 138 Loss: 13.720617294311523 Tokens per Sec: 23965.07363149899
Epoch Step: 10 / 138 Loss: 20.87647247314453 Tokens per Sec: 23937.812208656072
Epoch Step: 15 / 138 Loss: 26.933393478393555 Tokens per Sec: 24535.648432457652
Epoch Step: 20 / 138 Loss: 11.90931510925293 Tokens per Sec: 24406.23662425951
Epoch Step: 25 / 138 Loss: 16.671192169189453 Tokens per Sec: 25259.970467165615
Epoch Step: 30 / 138 Loss: 11.080290794372559 Tokens per Sec: 23266.27305793633
Epoch Step: 35 / 138 Loss: 21.639421463012695 Tokens per Sec: 22846.40273490415
Epoch Step: 40 / 138 Loss: 16.510515213012695 Tokens per Sec: 24622.96637550545
Epoch Step: 45 / 138 Loss: 21.472667694091797 Tokens per Sec: 25093.457150813945
Epoch Step: 50 / 138 Loss: 23.82239532470703 Tokens per Sec: 25864.85217620202
Epoch Step: 55 / 138 Loss: 19.917707443237305 Tokens per Sec: 24506.597190994118
Epoch Step: 60 / 138 Loss: 18.15300750732422 Tokens per Sec: 23109.975400316707
Epoch Step: 65 / 138 Loss: 15.584066390991211 Tokens per Sec: 24506.656999113708
Epoch Step: 70 / 138 Loss: 255.9691619873047 Tokens per Sec: 23075.839677568943
Epoch Step: 75 / 138 Loss: 22.266460418701172 Tokens per Sec: 23261.202494900645
Epoch Step: 80 / 138 Loss: 21.0184383392334 Tokens per Sec: 26312.908539173914
Epoch Step: 85 / 138 Loss: 18.867626190185547 Tokens per Sec: 23435.884674405588
Epoch Step: 90 / 138 Loss: 17.362545013427734 Tokens per Sec: 24445.024714525825
Epoch Step: 95 / 138 Loss: 29.079736709594727 Tokens per Sec: 23736.15469280728
Epoch Step: 100 / 138 Loss: 15.452845573425293 Tokens per Sec: 25187.13945413955
Epoch Step: 105 / 138 Loss: 20.304391860961914 Tokens per Sec: 23637.25658261813
Epoch Step: 110 / 138 Loss: 20.275236129760742 Tokens per Sec: 21934.400113128162
Epoch Step: 115 / 138 Loss: 18.359697341918945 Tokens per Sec: 21618.868893591563
Epoch Step: 120 / 138 Loss: 19.442516326904297 Tokens per Sec: 24305.04737892076
Epoch Step: 125 / 138 Loss: 20.72001075744629 Tokens per Sec: 22581.787695637413
Epoch Step: 130 / 138 Loss: 13.226813316345215 Tokens per Sec: 20573.475191510417
Epoch Step: 135 / 138 Loss: 18.62301254272461 Tokens per Sec: 23502.66488674115
Epoch ended with duration 0:00:26.770891
Train perplexity: 1.592805663317434
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.369826
Validation perplexity: 1.5621601774479066
Model saved checkpoint!
Epoch 71 / 1000
Epoch Step: 5 / 138 Loss: 11.244913101196289 Tokens per Sec: 24423.899192340647
Epoch Step: 10 / 138 Loss: 22.397634506225586 Tokens per Sec: 24773.762987526716
Epoch Step: 15 / 138 Loss: 12.321514129638672 Tokens per Sec: 25614.75799159752
Epoch Step: 20 / 138 Loss: 14.92142105102539 Tokens per Sec: 24148.1968134078
Epoch Step: 25 / 138 Loss: 19.449398040771484 Tokens per Sec: 23507.367463082883
Epoch Step: 30 / 138 Loss: 14.16835880279541 Tokens per Sec: 25804.380637113438
Epoch Step: 35 / 138 Loss: 18.230377197265625 Tokens per Sec: 23819.201033652433
Epoch Step: 40 / 138 Loss: 16.605228424072266 Tokens per Sec: 24758.50450531763
Epoch Step: 45 / 138 Loss: 16.3928279876709 Tokens per Sec: 22199.342594718382
Epoch Step: 50 / 138 Loss: 14.700654029846191 Tokens per Sec: 24696.984642807594
Epoch Step: 55 / 138 Loss: 16.824100494384766 Tokens per Sec: 24944.283850665186
Epoch Step: 60 / 138 Loss: 209.20706176757812 Tokens per Sec: 24398.367051715333
Epoch Step: 65 / 138 Loss: 273.7064514160156 Tokens per Sec: 23914.068350344147
Epoch Step: 70 / 138 Loss: 22.374059677124023 Tokens per Sec: 23643.129381683462
Epoch Step: 75 / 138 Loss: 17.206180572509766 Tokens per Sec: 24978.787478416845
Epoch Step: 80 / 138 Loss: 16.47844123840332 Tokens per Sec: 24743.064650323664
Epoch Step: 85 / 138 Loss: 24.38238525390625 Tokens per Sec: 24626.60867946626
Epoch Step: 90 / 138 Loss: 156.10662841796875 Tokens per Sec: 21970.88954333784
Epoch Step: 95 / 138 Loss: 16.23619842529297 Tokens per Sec: 21457.297164976055
Epoch Step: 100 / 138 Loss: 18.79121208190918 Tokens per Sec: 25823.87873512932
Epoch Step: 105 / 138 Loss: 203.62884521484375 Tokens per Sec: 22568.279607109733
Epoch Step: 110 / 138 Loss: 186.85679626464844 Tokens per Sec: 23749.82524742582
Epoch Step: 115 / 138 Loss: 16.950267791748047 Tokens per Sec: 20652.891494838685
Epoch Step: 120 / 138 Loss: 18.870832443237305 Tokens per Sec: 23161.920296753407
Epoch Step: 125 / 138 Loss: 12.65958309173584 Tokens per Sec: 22923.198650441715
Epoch Step: 130 / 138 Loss: 125.73629760742188 Tokens per Sec: 23973.070983585316
Epoch Step: 135 / 138 Loss: 18.480422973632812 Tokens per Sec: 22990.99041223483
Epoch ended with duration 0:00:26.744954
Train perplexity: 1.691267038978752
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.387072
Validation perplexity: 1.9893342804628686
Epoch 72 / 1000
Epoch Step: 5 / 138 Loss: 28.36689567565918 Tokens per Sec: 25728.47323763578
Epoch Step: 10 / 138 Loss: 15.90579891204834 Tokens per Sec: 23938.685181864832
Epoch Step: 15 / 138 Loss: 21.36450958251953 Tokens per Sec: 24351.40752597799
Epoch Step: 20 / 138 Loss: 17.72376251220703 Tokens per Sec: 24384.351521451226
Epoch Step: 25 / 138 Loss: 20.50027847290039 Tokens per Sec: 25185.294536764355
Epoch Step: 30 / 138 Loss: 23.46619415283203 Tokens per Sec: 24131.48897303923
Epoch Step: 35 / 138 Loss: 13.216619491577148 Tokens per Sec: 25209.434433954943
Epoch Step: 40 / 138 Loss: 15.19597053527832 Tokens per Sec: 26026.21313546069
Epoch Step: 45 / 138 Loss: 20.426334381103516 Tokens per Sec: 21383.701667056233
Epoch Step: 50 / 138 Loss: 116.64391326904297 Tokens per Sec: 25246.732336437857
Epoch Step: 55 / 138 Loss: 22.82815170288086 Tokens per Sec: 25361.035896278703
Epoch Step: 60 / 138 Loss: 21.079486846923828 Tokens per Sec: 23378.730873676108
Epoch Step: 65 / 138 Loss: 19.616140365600586 Tokens per Sec: 24586.562232124197
Epoch Step: 70 / 138 Loss: 98.81317901611328 Tokens per Sec: 24885.097421694692
Epoch Step: 75 / 138 Loss: 12.003917694091797 Tokens per Sec: 25802.740068240593
Epoch Step: 80 / 138 Loss: 142.90713500976562 Tokens per Sec: 23513.574524346346
Epoch Step: 85 / 138 Loss: 20.653581619262695 Tokens per Sec: 21088.249268362124
Epoch Step: 90 / 138 Loss: 22.875905990600586 Tokens per Sec: 25083.111393112555
Epoch Step: 95 / 138 Loss: 24.865478515625 Tokens per Sec: 23906.262667186973
Epoch Step: 100 / 138 Loss: 13.62338924407959 Tokens per Sec: 24107.27587712221
Epoch Step: 105 / 138 Loss: 19.505786895751953 Tokens per Sec: 24163.483324552326
Epoch Step: 110 / 138 Loss: 26.448339462280273 Tokens per Sec: 22177.17783592624
Epoch Step: 115 / 138 Loss: 231.22557067871094 Tokens per Sec: 24094.570743223867
Epoch Step: 120 / 138 Loss: 18.394611358642578 Tokens per Sec: 22321.691687775503
Epoch Step: 125 / 138 Loss: 17.46149444580078 Tokens per Sec: 19809.448013339595
Epoch Step: 130 / 138 Loss: 18.705455780029297 Tokens per Sec: 23328.290588635864
Epoch Step: 135 / 138 Loss: 20.116182327270508 Tokens per Sec: 22160.0482983447
Epoch ended with duration 0:00:26.701212
Train perplexity: 1.6470981217604357
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.378247
Validation perplexity: 1.5261788235535445
Epoch 73 / 1000
Epoch Step: 5 / 138 Loss: 14.860136032104492 Tokens per Sec: 24594.101459626225
Epoch Step: 10 / 138 Loss: 17.674516677856445 Tokens per Sec: 25321.789642397678
Epoch Step: 15 / 138 Loss: 23.445388793945312 Tokens per Sec: 24696.20096144631
Epoch Step: 20 / 138 Loss: 19.73015785217285 Tokens per Sec: 24391.3987402933
Epoch Step: 25 / 138 Loss: 146.6725311279297 Tokens per Sec: 25218.85489276508
Epoch Step: 30 / 138 Loss: 12.61695384979248 Tokens per Sec: 26813.475184804258
Epoch Step: 35 / 138 Loss: 13.989502906799316 Tokens per Sec: 21998.046029798967
Epoch Step: 40 / 138 Loss: 195.69451904296875 Tokens per Sec: 25660.65414721958
Epoch Step: 45 / 138 Loss: 27.982635498046875 Tokens per Sec: 25126.98992136047
Epoch Step: 50 / 138 Loss: 19.0313720703125 Tokens per Sec: 24755.338138222614
Epoch Step: 55 / 138 Loss: 25.45624351501465 Tokens per Sec: 22745.92405817584
Epoch Step: 60 / 138 Loss: 25.483156204223633 Tokens per Sec: 24705.096060447264
Epoch Step: 65 / 138 Loss: 17.425607681274414 Tokens per Sec: 24659.7165721609
Epoch Step: 70 / 138 Loss: 17.22707176208496 Tokens per Sec: 22867.51379543676
Epoch Step: 75 / 138 Loss: 112.79059600830078 Tokens per Sec: 24925.050376847495
Epoch Step: 80 / 138 Loss: 22.407737731933594 Tokens per Sec: 23830.93216723114
Epoch Step: 85 / 138 Loss: 14.753087997436523 Tokens per Sec: 24389.113457648902
Epoch Step: 90 / 138 Loss: 15.680859565734863 Tokens per Sec: 23722.395514846325
Epoch Step: 95 / 138 Loss: 19.536108016967773 Tokens per Sec: 22752.878378193454
Epoch Step: 100 / 138 Loss: 12.89417552947998 Tokens per Sec: 22998.520414798928
Epoch Step: 105 / 138 Loss: 14.382081985473633 Tokens per Sec: 22322.72124716914
Epoch Step: 110 / 138 Loss: 15.996912002563477 Tokens per Sec: 23239.201427027994
Epoch Step: 115 / 138 Loss: 14.58544921875 Tokens per Sec: 22902.210809869954
Epoch Step: 120 / 138 Loss: 20.107513427734375 Tokens per Sec: 21501.036178806535
Epoch Step: 125 / 138 Loss: 14.425037384033203 Tokens per Sec: 22276.029455573113
Epoch Step: 130 / 138 Loss: 17.812255859375 Tokens per Sec: 23469.28733562936
Epoch Step: 135 / 138 Loss: 121.495849609375 Tokens per Sec: 23884.58674497571
Epoch ended with duration 0:00:26.685510
Train perplexity: 1.6389865333162759
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.376382
Validation perplexity: 1.5296378627531282
Epoch 74 / 1000
Epoch Step: 5 / 138 Loss: 22.866744995117188 Tokens per Sec: 24339.65868034871
Epoch Step: 10 / 138 Loss: 19.21501350402832 Tokens per Sec: 25573.735123844224
Epoch Step: 15 / 138 Loss: 142.58859252929688 Tokens per Sec: 25126.211681761986
Epoch Step: 20 / 138 Loss: 11.827332496643066 Tokens per Sec: 25917.218969357757
Epoch Step: 25 / 138 Loss: 20.72105598449707 Tokens per Sec: 24218.72530835509
Epoch Step: 30 / 138 Loss: 16.282747268676758 Tokens per Sec: 24646.364278834615
Epoch Step: 35 / 138 Loss: 18.588783264160156 Tokens per Sec: 25308.48945600425
Epoch Step: 40 / 138 Loss: 20.424638748168945 Tokens per Sec: 24958.18990207969
Epoch Step: 45 / 138 Loss: 12.708049774169922 Tokens per Sec: 24531.443516121184
Epoch Step: 50 / 138 Loss: 19.584056854248047 Tokens per Sec: 24461.476512411693
Epoch Step: 55 / 138 Loss: 105.10979461669922 Tokens per Sec: 23665.33364241593
Epoch Step: 60 / 138 Loss: 20.39113426208496 Tokens per Sec: 23324.637581362924
Epoch Step: 65 / 138 Loss: 22.045907974243164 Tokens per Sec: 23359.106554437087
Epoch Step: 70 / 138 Loss: 169.44654846191406 Tokens per Sec: 23078.445312741263
Epoch Step: 75 / 138 Loss: 21.960214614868164 Tokens per Sec: 24891.487281509613
Epoch Step: 80 / 138 Loss: 21.88931655883789 Tokens per Sec: 23783.263489152057
Epoch Step: 85 / 138 Loss: 12.028253555297852 Tokens per Sec: 24475.44796566949
Epoch Step: 90 / 138 Loss: 13.877523422241211 Tokens per Sec: 25250.423667584462
Epoch Step: 95 / 138 Loss: 192.16915893554688 Tokens per Sec: 21739.193728987808
Epoch Step: 100 / 138 Loss: 25.717222213745117 Tokens per Sec: 22523.008302454957
Epoch Step: 105 / 138 Loss: 18.531967163085938 Tokens per Sec: 21915.88358048249
Epoch Step: 110 / 138 Loss: 20.292070388793945 Tokens per Sec: 23014.96664592978
Epoch Step: 115 / 138 Loss: 18.692249298095703 Tokens per Sec: 22232.59475993845
Epoch Step: 120 / 138 Loss: 12.896339416503906 Tokens per Sec: 20525.534849444077
Epoch Step: 125 / 138 Loss: 19.055540084838867 Tokens per Sec: 23929.46343895162
Epoch Step: 130 / 138 Loss: 15.39585018157959 Tokens per Sec: 22594.849489261254
Epoch Step: 135 / 138 Loss: 18.394031524658203 Tokens per Sec: 22515.852198430137
Epoch ended with duration 0:00:26.870008
Train perplexity: 1.6790580137902484
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , getEntity ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.360980
Validation perplexity: 1.3237947470024565
Model saved best_on_validation!
Epoch 75 / 1000
Epoch Step: 5 / 138 Loss: 12.200713157653809 Tokens per Sec: 24694.895128412976
Epoch Step: 10 / 138 Loss: 19.573894500732422 Tokens per Sec: 24421.66148890541
Epoch Step: 15 / 138 Loss: 28.93135643005371 Tokens per Sec: 21410.679808548106
Epoch Step: 20 / 138 Loss: 14.987431526184082 Tokens per Sec: 24858.38611045259
Epoch Step: 25 / 138 Loss: 20.0338134765625 Tokens per Sec: 23697.487771436932
Epoch Step: 30 / 138 Loss: 211.99209594726562 Tokens per Sec: 23049.08949518621
Epoch Step: 35 / 138 Loss: 17.470748901367188 Tokens per Sec: 24986.968576542422
Epoch Step: 40 / 138 Loss: 13.90602970123291 Tokens per Sec: 24477.264497872642
Epoch Step: 45 / 138 Loss: 16.407264709472656 Tokens per Sec: 23652.593535779237
Epoch Step: 50 / 138 Loss: 11.952475547790527 Tokens per Sec: 23688.896370762643
Epoch Step: 55 / 138 Loss: 17.105703353881836 Tokens per Sec: 24251.425747485086
Epoch Step: 60 / 138 Loss: 21.535293579101562 Tokens per Sec: 24648.50802020185
Epoch Step: 65 / 138 Loss: 14.798822402954102 Tokens per Sec: 24649.329952483735
Epoch Step: 70 / 138 Loss: 14.185717582702637 Tokens per Sec: 23826.026669961313
Epoch Step: 75 / 138 Loss: 10.261171340942383 Tokens per Sec: 23695.25484978574
Epoch Step: 80 / 138 Loss: 21.177318572998047 Tokens per Sec: 22983.31416268187
Epoch Step: 85 / 138 Loss: 22.52620506286621 Tokens per Sec: 25956.56127390016
Epoch Step: 90 / 138 Loss: 191.80868530273438 Tokens per Sec: 24450.178173768967
Epoch Step: 95 / 138 Loss: 19.49127197265625 Tokens per Sec: 25642.76083693829
Epoch Step: 100 / 138 Loss: 14.556737899780273 Tokens per Sec: 25495.050584568413
Epoch Step: 105 / 138 Loss: 17.23107147216797 Tokens per Sec: 23118.180648098543
Epoch Step: 110 / 138 Loss: 17.267541885375977 Tokens per Sec: 22895.023927079554
Epoch Step: 115 / 138 Loss: 16.106807708740234 Tokens per Sec: 23221.52671444824
Epoch Step: 120 / 138 Loss: 16.17295265197754 Tokens per Sec: 24149.242130667128
Epoch Step: 125 / 138 Loss: 15.740418434143066 Tokens per Sec: 23636.78255200728
Epoch Step: 130 / 138 Loss: 19.044498443603516 Tokens per Sec: 22706.960762805465
Epoch Step: 135 / 138 Loss: 18.00027084350586 Tokens per Sec: 20931.09624490811
Epoch ended with duration 0:00:26.761087
Train perplexity: 1.6910459064271515
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , null , null , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.376808
Validation perplexity: 1.7311787639001062
Model saved checkpoint!
Epoch 76 / 1000
Epoch Step: 5 / 138 Loss: 20.0046329498291 Tokens per Sec: 23467.33218270484
Epoch Step: 10 / 138 Loss: 18.496055603027344 Tokens per Sec: 23060.691060858044
Epoch Step: 15 / 138 Loss: 184.1497039794922 Tokens per Sec: 25948.018180370997
Epoch Step: 20 / 138 Loss: 197.0369110107422 Tokens per Sec: 23677.227035445
Epoch Step: 25 / 138 Loss: 16.59723472595215 Tokens per Sec: 24742.146587252548
Epoch Step: 30 / 138 Loss: 210.90423583984375 Tokens per Sec: 23440.80728846494
Epoch Step: 35 / 138 Loss: 19.240222930908203 Tokens per Sec: 22988.639616745208
Epoch Step: 40 / 138 Loss: 12.296151161193848 Tokens per Sec: 25170.064270803974
Epoch Step: 45 / 138 Loss: 25.276777267456055 Tokens per Sec: 25650.391488264286
Epoch Step: 50 / 138 Loss: 25.253276824951172 Tokens per Sec: 25150.73937157691
Epoch Step: 55 / 138 Loss: 15.854289054870605 Tokens per Sec: 24698.209144608805
Epoch Step: 60 / 138 Loss: 25.407522201538086 Tokens per Sec: 23887.257705344346
Epoch Step: 65 / 138 Loss: 18.72100257873535 Tokens per Sec: 22247.472350845008
Epoch Step: 70 / 138 Loss: 15.408524513244629 Tokens per Sec: 22512.719684244123
Epoch Step: 75 / 138 Loss: 23.85292625427246 Tokens per Sec: 25562.781384261234
Epoch Step: 80 / 138 Loss: 19.51148223876953 Tokens per Sec: 23308.334640905734
Epoch Step: 85 / 138 Loss: 14.713200569152832 Tokens per Sec: 26966.557455485516
Epoch Step: 90 / 138 Loss: 20.72838592529297 Tokens per Sec: 24369.40456166931
Epoch Step: 95 / 138 Loss: 108.97254943847656 Tokens per Sec: 26110.742215027796
Epoch Step: 100 / 138 Loss: 24.086288452148438 Tokens per Sec: 25103.34652974304
Epoch Step: 105 / 138 Loss: 20.368640899658203 Tokens per Sec: 22671.25419207081
Epoch Step: 110 / 138 Loss: 21.553607940673828 Tokens per Sec: 22959.08271725485
Epoch Step: 115 / 138 Loss: 16.22715950012207 Tokens per Sec: 22525.239244476485
Epoch Step: 120 / 138 Loss: 17.710979461669922 Tokens per Sec: 23626.227176574703
Epoch Step: 125 / 138 Loss: 21.291561126708984 Tokens per Sec: 22750.98673240778
Epoch Step: 130 / 138 Loss: 17.934852600097656 Tokens per Sec: 22059.83706520779
Epoch Step: 135 / 138 Loss: 18.785381317138672 Tokens per Sec: 20795.151595354073
Epoch ended with duration 0:00:26.766084
Train perplexity: 1.6641928513730582
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.378394
Validation perplexity: 1.6690485868199816
Epoch 77 / 1000
Epoch Step: 5 / 138 Loss: 16.191190719604492 Tokens per Sec: 24022.201571455294
Epoch Step: 10 / 138 Loss: 10.68348503112793 Tokens per Sec: 25910.354309968225
Epoch Step: 15 / 138 Loss: 18.293468475341797 Tokens per Sec: 24087.3210326608
Epoch Step: 20 / 138 Loss: 16.36423683166504 Tokens per Sec: 24788.523410788952
Epoch Step: 25 / 138 Loss: 21.401247024536133 Tokens per Sec: 22436.769376859607
Epoch Step: 30 / 138 Loss: 16.620786666870117 Tokens per Sec: 26824.79730649445
Epoch Step: 35 / 138 Loss: 16.24101448059082 Tokens per Sec: 24899.46506868251
Epoch Step: 40 / 138 Loss: 17.800338745117188 Tokens per Sec: 24059.385284413434
Epoch Step: 45 / 138 Loss: 12.997281074523926 Tokens per Sec: 24128.49136807766
Epoch Step: 50 / 138 Loss: 14.095935821533203 Tokens per Sec: 25408.188577510737
Epoch Step: 55 / 138 Loss: 21.015073776245117 Tokens per Sec: 23040.20115033469
Epoch Step: 60 / 138 Loss: 19.73085594177246 Tokens per Sec: 24207.7032689316
Epoch Step: 65 / 138 Loss: 18.230310440063477 Tokens per Sec: 22935.100252002332
Epoch Step: 70 / 138 Loss: 14.288052558898926 Tokens per Sec: 25818.01087841793
Epoch Step: 75 / 138 Loss: 16.554195404052734 Tokens per Sec: 25795.45085841154
Epoch Step: 80 / 138 Loss: 25.372589111328125 Tokens per Sec: 22938.886888281842
Epoch Step: 85 / 138 Loss: 9.165244102478027 Tokens per Sec: 25123.661407989366
Epoch Step: 90 / 138 Loss: 22.7553768157959 Tokens per Sec: 24314.987565293617
Epoch Step: 95 / 138 Loss: 21.64344596862793 Tokens per Sec: 24899.264656449915
Epoch Step: 100 / 138 Loss: 19.626142501831055 Tokens per Sec: 23000.219970135022
Epoch Step: 105 / 138 Loss: 20.21221351623535 Tokens per Sec: 23355.360292546244
Epoch Step: 110 / 138 Loss: 14.947574615478516 Tokens per Sec: 22774.533249473072
Epoch Step: 115 / 138 Loss: 24.253694534301758 Tokens per Sec: 23391.41590321906
Epoch Step: 120 / 138 Loss: 13.34801197052002 Tokens per Sec: 22673.0989002229
Epoch Step: 125 / 138 Loss: 17.119644165039062 Tokens per Sec: 23939.375085066084
Epoch Step: 130 / 138 Loss: 14.123682022094727 Tokens per Sec: 22993.2987981584
Epoch Step: 135 / 138 Loss: 19.00944709777832 Tokens per Sec: 21072.307028068648
Epoch ended with duration 0:00:26.610627
Train perplexity: 1.4706585886883932
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.395617
Validation perplexity: 2.3310039960705438
Epoch 78 / 1000
Epoch Step: 5 / 138 Loss: 11.843205451965332 Tokens per Sec: 24585.94267116986
Epoch Step: 10 / 138 Loss: 24.78565216064453 Tokens per Sec: 20933.06444743364
Epoch Step: 15 / 138 Loss: 23.52957534790039 Tokens per Sec: 25160.534602504325
Epoch Step: 20 / 138 Loss: 11.9356050491333 Tokens per Sec: 22290.721374774585
Epoch Step: 25 / 138 Loss: 18.441022872924805 Tokens per Sec: 24955.414527710807
Epoch Step: 30 / 138 Loss: 19.817649841308594 Tokens per Sec: 23404.412902202534
Epoch Step: 35 / 138 Loss: 15.396158218383789 Tokens per Sec: 23881.423285695793
Epoch Step: 40 / 138 Loss: 23.582273483276367 Tokens per Sec: 23989.47121641793
Epoch Step: 45 / 138 Loss: 21.63885498046875 Tokens per Sec: 25349.667927579074
Epoch Step: 50 / 138 Loss: 16.73641586303711 Tokens per Sec: 24263.46564441957
Epoch Step: 55 / 138 Loss: 181.35537719726562 Tokens per Sec: 25401.321785260814
Epoch Step: 60 / 138 Loss: 25.668746948242188 Tokens per Sec: 25093.403436804892
Epoch Step: 65 / 138 Loss: 142.57769775390625 Tokens per Sec: 24887.143876851256
Epoch Step: 70 / 138 Loss: 19.304641723632812 Tokens per Sec: 22278.442865470184
Epoch Step: 75 / 138 Loss: 17.305011749267578 Tokens per Sec: 24882.177111456553
Epoch Step: 80 / 138 Loss: 19.485841751098633 Tokens per Sec: 24442.605941997535
Epoch Step: 85 / 138 Loss: 18.5761775970459 Tokens per Sec: 24694.236914353096
Epoch Step: 90 / 138 Loss: 22.93450355529785 Tokens per Sec: 24926.78238858903
Epoch Step: 95 / 138 Loss: 10.639674186706543 Tokens per Sec: 24408.709712144147
Epoch Step: 100 / 138 Loss: 22.35464096069336 Tokens per Sec: 25571.317390518645
Epoch Step: 105 / 138 Loss: 13.879362106323242 Tokens per Sec: 22299.77095448725
Epoch Step: 110 / 138 Loss: 12.829721450805664 Tokens per Sec: 24062.826169951037
Epoch Step: 115 / 138 Loss: 17.269914627075195 Tokens per Sec: 19906.573455962745
Epoch Step: 120 / 138 Loss: 12.804765701293945 Tokens per Sec: 23438.29469790176
Epoch Step: 125 / 138 Loss: 18.997600555419922 Tokens per Sec: 23365.323018889754
Epoch Step: 130 / 138 Loss: 16.882490158081055 Tokens per Sec: 21797.184460550645
Epoch Step: 135 / 138 Loss: 19.27521514892578 Tokens per Sec: 22473.466286633688
Epoch ended with duration 0:00:26.792177
Train perplexity: 1.6125563469719701
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.360119
Validation perplexity: 1.3061624244360295
Model saved best_on_validation!
Epoch 79 / 1000
Epoch Step: 5 / 138 Loss: 169.15225219726562 Tokens per Sec: 22150.46501330201
Epoch Step: 10 / 138 Loss: 11.44459056854248 Tokens per Sec: 25463.566149570048
Epoch Step: 15 / 138 Loss: 17.08223533630371 Tokens per Sec: 21989.66106478512
Epoch Step: 20 / 138 Loss: 11.314908981323242 Tokens per Sec: 24356.716286108927
Epoch Step: 25 / 138 Loss: 18.026962280273438 Tokens per Sec: 25016.47542991015
Epoch Step: 30 / 138 Loss: 18.74368667602539 Tokens per Sec: 25806.402561056475
Epoch Step: 35 / 138 Loss: 13.408082008361816 Tokens per Sec: 24426.630641707157
Epoch Step: 40 / 138 Loss: 14.098151206970215 Tokens per Sec: 25518.47147316968
Epoch Step: 45 / 138 Loss: 34.36239242553711 Tokens per Sec: 24049.545197767795
Epoch Step: 50 / 138 Loss: 15.197952270507812 Tokens per Sec: 25274.124314151988
Epoch Step: 55 / 138 Loss: 25.326080322265625 Tokens per Sec: 23392.081035907435
Epoch Step: 60 / 138 Loss: 142.2796173095703 Tokens per Sec: 25485.473418300044
Epoch Step: 65 / 138 Loss: 23.851856231689453 Tokens per Sec: 23904.273851995298
Epoch Step: 70 / 138 Loss: 18.789566040039062 Tokens per Sec: 23913.43807443892
Epoch Step: 75 / 138 Loss: 18.993078231811523 Tokens per Sec: 23501.231200396323
Epoch Step: 80 / 138 Loss: 14.728107452392578 Tokens per Sec: 23607.953540133214
Epoch Step: 85 / 138 Loss: 22.31307029724121 Tokens per Sec: 24140.92408414465
Epoch Step: 90 / 138 Loss: 17.6436767578125 Tokens per Sec: 24770.771248976092
Epoch Step: 95 / 138 Loss: 18.735767364501953 Tokens per Sec: 24725.310353057113
Epoch Step: 100 / 138 Loss: 20.361228942871094 Tokens per Sec: 24699.03885874584
Epoch Step: 105 / 138 Loss: 147.0105438232422 Tokens per Sec: 23333.012360174052
Epoch Step: 110 / 138 Loss: 15.861852645874023 Tokens per Sec: 21493.604869005107
Epoch Step: 115 / 138 Loss: 155.0115966796875 Tokens per Sec: 21960.30595667428
Epoch Step: 120 / 138 Loss: 21.559547424316406 Tokens per Sec: 19967.84931365047
Epoch Step: 125 / 138 Loss: 24.443069458007812 Tokens per Sec: 22272.175556751954
Epoch Step: 130 / 138 Loss: 13.621413230895996 Tokens per Sec: 24039.60554243304
Epoch Step: 135 / 138 Loss: 19.867172241210938 Tokens per Sec: 23482.967917641417
Epoch ended with duration 0:00:26.846638
Train perplexity: 1.5783606285643341
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.362582
Validation perplexity: 1.320003116760703
Epoch 80 / 1000
Epoch Step: 5 / 138 Loss: 11.9655122756958 Tokens per Sec: 25253.948249180336
Epoch Step: 10 / 138 Loss: 201.3891143798828 Tokens per Sec: 24720.54756486479
Epoch Step: 15 / 138 Loss: 15.094647407531738 Tokens per Sec: 24353.347530428935
Epoch Step: 20 / 138 Loss: 19.09163475036621 Tokens per Sec: 25181.845459773078
Epoch Step: 25 / 138 Loss: 21.086381912231445 Tokens per Sec: 21456.10286153925
Epoch Step: 30 / 138 Loss: 16.451745986938477 Tokens per Sec: 23072.859960184727
Epoch Step: 35 / 138 Loss: 12.3932523727417 Tokens per Sec: 26054.68989862596
Epoch Step: 40 / 138 Loss: 16.103668212890625 Tokens per Sec: 25731.58168744627
Epoch Step: 45 / 138 Loss: 12.76323127746582 Tokens per Sec: 23913.342100994705
Epoch Step: 50 / 138 Loss: 12.781571388244629 Tokens per Sec: 24777.85858062345
Epoch Step: 55 / 138 Loss: 23.526756286621094 Tokens per Sec: 22541.487975692595
Epoch Step: 60 / 138 Loss: 10.401309967041016 Tokens per Sec: 24625.04404829593
Epoch Step: 65 / 138 Loss: 17.021516799926758 Tokens per Sec: 21941.413485609733
Epoch Step: 70 / 138 Loss: 18.60235595703125 Tokens per Sec: 25752.137590628416
Epoch Step: 75 / 138 Loss: 13.30482292175293 Tokens per Sec: 25798.863492634977
Epoch Step: 80 / 138 Loss: 23.18619155883789 Tokens per Sec: 23403.49923715434
Epoch Step: 85 / 138 Loss: 25.559410095214844 Tokens per Sec: 24577.19395501417
Epoch Step: 90 / 138 Loss: 19.718263626098633 Tokens per Sec: 25025.71542891378
Epoch Step: 95 / 138 Loss: 12.404699325561523 Tokens per Sec: 24402.286644724718
Epoch Step: 100 / 138 Loss: 21.569963455200195 Tokens per Sec: 25216.620022503907
Epoch Step: 105 / 138 Loss: 15.227794647216797 Tokens per Sec: 23243.977740763028
Epoch Step: 110 / 138 Loss: 13.504400253295898 Tokens per Sec: 22707.16113171153
Epoch Step: 115 / 138 Loss: 215.24179077148438 Tokens per Sec: 23672.146042667053
Epoch Step: 120 / 138 Loss: 14.652307510375977 Tokens per Sec: 20299.242056820138
Epoch Step: 125 / 138 Loss: 15.34193229675293 Tokens per Sec: 22754.652989071623
Epoch Step: 130 / 138 Loss: 15.761324882507324 Tokens per Sec: 22291.99470406503
Epoch Step: 135 / 138 Loss: 211.77297973632812 Tokens per Sec: 23070.986691052964
Epoch ended with duration 0:00:26.777875
Train perplexity: 1.554307220252582
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.370710
Validation perplexity: 1.4793810700367682
Model saved checkpoint!
Epoch 81 / 1000
Epoch Step: 5 / 138 Loss: 18.806520462036133 Tokens per Sec: 22408.122664738035
Epoch Step: 10 / 138 Loss: 17.687786102294922 Tokens per Sec: 24252.70631353439
Epoch Step: 15 / 138 Loss: 14.03751277923584 Tokens per Sec: 26223.587685156148
Epoch Step: 20 / 138 Loss: 23.720903396606445 Tokens per Sec: 24035.585002657008
Epoch Step: 25 / 138 Loss: 14.011736869812012 Tokens per Sec: 24998.87926429534
Epoch Step: 30 / 138 Loss: 10.907889366149902 Tokens per Sec: 26110.11736372433
Epoch Step: 35 / 138 Loss: 19.835275650024414 Tokens per Sec: 23718.58120411221
Epoch Step: 40 / 138 Loss: 14.789548873901367 Tokens per Sec: 23648.44208736512
Epoch Step: 45 / 138 Loss: 13.628146171569824 Tokens per Sec: 25321.323580811
Epoch Step: 50 / 138 Loss: 10.765240669250488 Tokens per Sec: 25996.603714167042
Epoch Step: 55 / 138 Loss: 271.66729736328125 Tokens per Sec: 22503.226681906413
Epoch Step: 60 / 138 Loss: 13.341585159301758 Tokens per Sec: 25678.237719340726
Epoch Step: 65 / 138 Loss: 17.304222106933594 Tokens per Sec: 20923.327703529998
Epoch Step: 70 / 138 Loss: 16.580141067504883 Tokens per Sec: 25445.532714521003
Epoch Step: 75 / 138 Loss: 16.985179901123047 Tokens per Sec: 23303.85443991268
Epoch Step: 80 / 138 Loss: 20.159521102905273 Tokens per Sec: 22056.42202607271
Epoch Step: 85 / 138 Loss: 18.185564041137695 Tokens per Sec: 25715.470986908516
Epoch Step: 90 / 138 Loss: 13.083098411560059 Tokens per Sec: 24988.995103043268
Epoch Step: 95 / 138 Loss: 18.105052947998047 Tokens per Sec: 25117.422821726042
Epoch Step: 100 / 138 Loss: 17.591026306152344 Tokens per Sec: 24043.503934980985
Epoch Step: 105 / 138 Loss: 15.316436767578125 Tokens per Sec: 22727.933829468217
Epoch Step: 110 / 138 Loss: 14.397114753723145 Tokens per Sec: 23674.02253025034
Epoch Step: 115 / 138 Loss: 19.509944915771484 Tokens per Sec: 22906.139015503126
Epoch Step: 120 / 138 Loss: 83.31539916992188 Tokens per Sec: 22615.749874902616
Epoch Step: 125 / 138 Loss: 22.799936294555664 Tokens per Sec: 23820.01469635896
Epoch Step: 130 / 138 Loss: 16.81109046936035 Tokens per Sec: 20402.31035650493
Epoch Step: 135 / 138 Loss: 14.479392051696777 Tokens per Sec: 22532.74350126432
Epoch ended with duration 0:00:26.772782
Train perplexity: 1.5482858603763987
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.392171
Validation perplexity: 1.6010398951475455
Epoch 82 / 1000
Epoch Step: 5 / 138 Loss: 19.998920440673828 Tokens per Sec: 24453.896036962098
Epoch Step: 10 / 138 Loss: 19.520963668823242 Tokens per Sec: 22306.72001856077
Epoch Step: 15 / 138 Loss: 17.47019386291504 Tokens per Sec: 23124.20105581862
Epoch Step: 20 / 138 Loss: 15.594927787780762 Tokens per Sec: 25631.805671534035
Epoch Step: 25 / 138 Loss: 17.731386184692383 Tokens per Sec: 23253.792090698582
Epoch Step: 30 / 138 Loss: 10.142875671386719 Tokens per Sec: 25175.63300716634
Epoch Step: 35 / 138 Loss: 21.9675350189209 Tokens per Sec: 23884.839356919183
Epoch Step: 40 / 138 Loss: 16.76569366455078 Tokens per Sec: 22999.461286571877
Epoch Step: 45 / 138 Loss: 17.82298469543457 Tokens per Sec: 26029.49864255499
Epoch Step: 50 / 138 Loss: 11.765621185302734 Tokens per Sec: 25194.307402447095
Epoch Step: 55 / 138 Loss: 20.629247665405273 Tokens per Sec: 25466.87316219324
Epoch Step: 60 / 138 Loss: 12.35609245300293 Tokens per Sec: 27331.692386805353
Epoch Step: 65 / 138 Loss: 10.923796653747559 Tokens per Sec: 25002.880364965444
Epoch Step: 70 / 138 Loss: 12.840126037597656 Tokens per Sec: 23675.624919967464
Epoch Step: 75 / 138 Loss: 15.644416809082031 Tokens per Sec: 23352.286699208234
Epoch Step: 80 / 138 Loss: 10.743098258972168 Tokens per Sec: 23323.53214801771
Epoch Step: 85 / 138 Loss: 8.22417163848877 Tokens per Sec: 25402.244614400417
Epoch Step: 90 / 138 Loss: 17.334453582763672 Tokens per Sec: 24430.197419445594
Epoch Step: 95 / 138 Loss: 123.64948272705078 Tokens per Sec: 23170.896884031456
Epoch Step: 100 / 138 Loss: 15.37621784210205 Tokens per Sec: 23812.50661005955
Epoch Step: 105 / 138 Loss: 156.14453125 Tokens per Sec: 22978.382785429905
Epoch Step: 110 / 138 Loss: 14.94459342956543 Tokens per Sec: 23878.134773597427
Epoch Step: 115 / 138 Loss: 19.292434692382812 Tokens per Sec: 23237.590137028885
Epoch Step: 120 / 138 Loss: 13.211464881896973 Tokens per Sec: 22920.288925322824
Epoch Step: 125 / 138 Loss: 15.211923599243164 Tokens per Sec: 24055.67452489836
Epoch Step: 130 / 138 Loss: 18.500553131103516 Tokens per Sec: 20002.587248554155
Epoch Step: 135 / 138 Loss: 14.337270736694336 Tokens per Sec: 21764.15512162697
Epoch ended with duration 0:00:26.779006
Train perplexity: 1.4271960346150767
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.362557
Validation perplexity: 1.2953179709217246
Model saved best_on_validation!
Epoch 83 / 1000
Epoch Step: 5 / 138 Loss: 14.211060523986816 Tokens per Sec: 23554.481304096338
Epoch Step: 10 / 138 Loss: 12.362671852111816 Tokens per Sec: 23122.806381213213
Epoch Step: 15 / 138 Loss: 18.110980987548828 Tokens per Sec: 25058.55614003231
Epoch Step: 20 / 138 Loss: 13.95156192779541 Tokens per Sec: 24551.563651745048
Epoch Step: 25 / 138 Loss: 120.14836883544922 Tokens per Sec: 22666.33050245272
Epoch Step: 30 / 138 Loss: 19.192644119262695 Tokens per Sec: 24795.28463493682
Epoch Step: 35 / 138 Loss: 17.3363094329834 Tokens per Sec: 22688.309782374803
Epoch Step: 40 / 138 Loss: 11.379313468933105 Tokens per Sec: 26301.479835689082
Epoch Step: 45 / 138 Loss: 20.669946670532227 Tokens per Sec: 22617.38402720847
Epoch Step: 50 / 138 Loss: 15.376304626464844 Tokens per Sec: 25853.853026035456
Epoch Step: 55 / 138 Loss: 12.879066467285156 Tokens per Sec: 25619.75562467656
Epoch Step: 60 / 138 Loss: 16.1956787109375 Tokens per Sec: 23665.887574446006
Epoch Step: 65 / 138 Loss: 17.538671493530273 Tokens per Sec: 22184.298927959215
Epoch Step: 70 / 138 Loss: 14.540624618530273 Tokens per Sec: 25308.663318760646
Epoch Step: 75 / 138 Loss: 14.093344688415527 Tokens per Sec: 23927.390449402006
Epoch Step: 80 / 138 Loss: 22.37896156311035 Tokens per Sec: 24280.051129769327
Epoch Step: 85 / 138 Loss: 14.74738597869873 Tokens per Sec: 25182.935398426853
Epoch Step: 90 / 138 Loss: 12.020934104919434 Tokens per Sec: 26683.20293900644
Epoch Step: 95 / 138 Loss: 23.230791091918945 Tokens per Sec: 23434.894815010284
Epoch Step: 100 / 138 Loss: 16.469240188598633 Tokens per Sec: 25191.342981374673
Epoch Step: 105 / 138 Loss: 11.793380737304688 Tokens per Sec: 20081.964247041262
Epoch Step: 110 / 138 Loss: 13.141069412231445 Tokens per Sec: 23471.08453304347
Epoch Step: 115 / 138 Loss: 17.924428939819336 Tokens per Sec: 23162.91239424053
Epoch Step: 120 / 138 Loss: 19.53272819519043 Tokens per Sec: 22937.113539402948
Epoch Step: 125 / 138 Loss: 15.821569442749023 Tokens per Sec: 21811.686620408425
Epoch Step: 130 / 138 Loss: 12.608391761779785 Tokens per Sec: 23244.48636217965
Epoch Step: 135 / 138 Loss: 18.51824188232422 Tokens per Sec: 24677.09386611748
Epoch ended with duration 0:00:26.733945
Train perplexity: 1.4037518330515244
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.378171
Validation perplexity: 1.451378449700858
Epoch 84 / 1000
Epoch Step: 5 / 138 Loss: 209.94679260253906 Tokens per Sec: 23930.81474439436
Epoch Step: 10 / 138 Loss: 17.682388305664062 Tokens per Sec: 22313.3779040533
Epoch Step: 15 / 138 Loss: 11.62624454498291 Tokens per Sec: 24726.211901354684
Epoch Step: 20 / 138 Loss: 88.83882904052734 Tokens per Sec: 24673.936827447716
Epoch Step: 25 / 138 Loss: 11.82651138305664 Tokens per Sec: 24924.315510200347
Epoch Step: 30 / 138 Loss: 13.126285552978516 Tokens per Sec: 24175.09027613222
Epoch Step: 35 / 138 Loss: 12.634622573852539 Tokens per Sec: 24936.53979541158
Epoch Step: 40 / 138 Loss: 16.787269592285156 Tokens per Sec: 24566.9514296813
Epoch Step: 45 / 138 Loss: 12.824872016906738 Tokens per Sec: 24781.2226085719
Epoch Step: 50 / 138 Loss: 15.232193946838379 Tokens per Sec: 21831.15781301768
Epoch Step: 55 / 138 Loss: 18.0838623046875 Tokens per Sec: 24376.47923202518
Epoch Step: 60 / 138 Loss: 127.12921905517578 Tokens per Sec: 24137.364254766064
Epoch Step: 65 / 138 Loss: 9.838823318481445 Tokens per Sec: 24865.47899433652
Epoch Step: 70 / 138 Loss: 23.738357543945312 Tokens per Sec: 24109.19715579988
Epoch Step: 75 / 138 Loss: 12.976301193237305 Tokens per Sec: 24249.419129634935
Epoch Step: 80 / 138 Loss: 21.120988845825195 Tokens per Sec: 24333.448307022365
Epoch Step: 85 / 138 Loss: 12.92774486541748 Tokens per Sec: 25724.311000515732
Epoch Step: 90 / 138 Loss: 14.128408432006836 Tokens per Sec: 24325.126385835432
Epoch Step: 95 / 138 Loss: 22.378429412841797 Tokens per Sec: 24126.931472432167
Epoch Step: 100 / 138 Loss: 179.3594512939453 Tokens per Sec: 23787.27674216466
Epoch Step: 105 / 138 Loss: 14.096327781677246 Tokens per Sec: 22553.475260733438
Epoch Step: 110 / 138 Loss: 14.01176643371582 Tokens per Sec: 21428.492237526887
Epoch Step: 115 / 138 Loss: 10.804779052734375 Tokens per Sec: 22758.88786877222
Epoch Step: 120 / 138 Loss: 11.79753589630127 Tokens per Sec: 24352.800518382905
Epoch Step: 125 / 138 Loss: 17.747713088989258 Tokens per Sec: 22936.416868646724
Epoch Step: 130 / 138 Loss: 147.07835388183594 Tokens per Sec: 23061.917379066537
Epoch Step: 135 / 138 Loss: 17.729421615600586 Tokens per Sec: 22887.373086837506
Epoch ended with duration 0:00:26.743497
Train perplexity: 1.4588211267082676
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.368638
Validation perplexity: 1.4011738174219388
Epoch 85 / 1000
Epoch Step: 5 / 138 Loss: 19.262935638427734 Tokens per Sec: 22572.857557013456
Epoch Step: 10 / 138 Loss: 22.002962112426758 Tokens per Sec: 22746.330615503357
Epoch Step: 15 / 138 Loss: 13.782022476196289 Tokens per Sec: 23412.659846636303
Epoch Step: 20 / 138 Loss: 127.68992614746094 Tokens per Sec: 23997.669349276126
Epoch Step: 25 / 138 Loss: 15.544771194458008 Tokens per Sec: 25368.262088930176
Epoch Step: 30 / 138 Loss: 14.543439865112305 Tokens per Sec: 25563.371054783063
Epoch Step: 35 / 138 Loss: 17.810808181762695 Tokens per Sec: 24039.589624247314
Epoch Step: 40 / 138 Loss: 15.81239128112793 Tokens per Sec: 23680.271363712734
Epoch Step: 45 / 138 Loss: 11.661262512207031 Tokens per Sec: 26072.949813088853
Epoch Step: 50 / 138 Loss: 212.39222717285156 Tokens per Sec: 26337.159452512893
Epoch Step: 55 / 138 Loss: 16.629806518554688 Tokens per Sec: 24491.579880742345
Epoch Step: 60 / 138 Loss: 9.521734237670898 Tokens per Sec: 25203.349119090977
Epoch Step: 65 / 138 Loss: 80.50267028808594 Tokens per Sec: 25044.75701278293
Epoch Step: 70 / 138 Loss: 24.475812911987305 Tokens per Sec: 23589.75053337306
Epoch Step: 75 / 138 Loss: 16.21843147277832 Tokens per Sec: 24890.478769728572
Epoch Step: 80 / 138 Loss: 21.47126579284668 Tokens per Sec: 23870.723618310964
Epoch Step: 85 / 138 Loss: 13.544689178466797 Tokens per Sec: 24056.70685928297
Epoch Step: 90 / 138 Loss: 10.901725769042969 Tokens per Sec: 24368.528998945676
Epoch Step: 95 / 138 Loss: 13.477437019348145 Tokens per Sec: 23769.019683800667
Epoch Step: 100 / 138 Loss: 11.019468307495117 Tokens per Sec: 24031.037441465123
Epoch Step: 105 / 138 Loss: 13.89416217803955 Tokens per Sec: 24034.169847654677
Epoch Step: 110 / 138 Loss: 17.998130798339844 Tokens per Sec: 22599.150116562316
Epoch Step: 115 / 138 Loss: 12.38754653930664 Tokens per Sec: 23929.25790072857
Epoch Step: 120 / 138 Loss: 21.594379425048828 Tokens per Sec: 22928.36563431194
Epoch Step: 125 / 138 Loss: 219.78805541992188 Tokens per Sec: 23473.220190636133
Epoch Step: 130 / 138 Loss: 17.603992462158203 Tokens per Sec: 20666.296393796383
Epoch Step: 135 / 138 Loss: 20.606924057006836 Tokens per Sec: 24448.685032074496
Epoch ended with duration 0:00:26.606310
Train perplexity: 1.5502030564715392
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.372118
Validation perplexity: 1.43883861708573
Model saved checkpoint!
Epoch 86 / 1000
Epoch Step: 5 / 138 Loss: 8.102971076965332 Tokens per Sec: 23369.642676263735
Epoch Step: 10 / 138 Loss: 13.335688591003418 Tokens per Sec: 23471.088903324366
Epoch Step: 15 / 138 Loss: 15.487923622131348 Tokens per Sec: 24127.63529167357
Epoch Step: 20 / 138 Loss: 17.411203384399414 Tokens per Sec: 24016.944411751832
Epoch Step: 25 / 138 Loss: 17.677732467651367 Tokens per Sec: 23138.697846753385
Epoch Step: 30 / 138 Loss: 19.644609451293945 Tokens per Sec: 25921.097954143162
Epoch Step: 35 / 138 Loss: 18.05414390563965 Tokens per Sec: 25635.869930799567
Epoch Step: 40 / 138 Loss: 14.548315048217773 Tokens per Sec: 22636.927975598574
Epoch Step: 45 / 138 Loss: 18.84598159790039 Tokens per Sec: 24601.283490797654
Epoch Step: 50 / 138 Loss: 11.709368705749512 Tokens per Sec: 24138.808652220057
Epoch Step: 55 / 138 Loss: 16.84623146057129 Tokens per Sec: 23078.45075317891
Epoch Step: 60 / 138 Loss: 15.513060569763184 Tokens per Sec: 26404.77692147337
Epoch Step: 65 / 138 Loss: 16.100305557250977 Tokens per Sec: 24501.14826459873
Epoch Step: 70 / 138 Loss: 13.448708534240723 Tokens per Sec: 24685.493144388467
Epoch Step: 75 / 138 Loss: 16.740522384643555 Tokens per Sec: 24109.79306646005
Epoch Step: 80 / 138 Loss: 20.22527313232422 Tokens per Sec: 25153.24263298765
Epoch Step: 85 / 138 Loss: 10.85867691040039 Tokens per Sec: 23844.73607954422
Epoch Step: 90 / 138 Loss: 17.489120483398438 Tokens per Sec: 23783.508166008305
Epoch Step: 95 / 138 Loss: 17.118484497070312 Tokens per Sec: 23841.52168888056
Epoch Step: 100 / 138 Loss: 15.806792259216309 Tokens per Sec: 24750.686476468156
Epoch Step: 105 / 138 Loss: 13.94262981414795 Tokens per Sec: 23008.494972783363
Epoch Step: 110 / 138 Loss: 20.441492080688477 Tokens per Sec: 22351.783642937793
Epoch Step: 115 / 138 Loss: 23.0375919342041 Tokens per Sec: 21885.478813082573
Epoch Step: 120 / 138 Loss: 15.191643714904785 Tokens per Sec: 23878.34879857813
Epoch Step: 125 / 138 Loss: 135.272705078125 Tokens per Sec: 21947.73435084489
Epoch Step: 130 / 138 Loss: 19.749492645263672 Tokens per Sec: 22809.0815295849
Epoch Step: 135 / 138 Loss: 13.97287368774414 Tokens per Sec: 21708.731074791478
Epoch ended with duration 0:00:26.812254
Train perplexity: 1.462888333325056
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.379467
Validation perplexity: 1.629531384079454
Epoch 87 / 1000
Epoch Step: 5 / 138 Loss: 14.672213554382324 Tokens per Sec: 24900.399593595004
Epoch Step: 10 / 138 Loss: 16.27900505065918 Tokens per Sec: 24140.09993009524
Epoch Step: 15 / 138 Loss: 12.088382720947266 Tokens per Sec: 23766.08872476919
Epoch Step: 20 / 138 Loss: 16.694496154785156 Tokens per Sec: 25998.258635309816
Epoch Step: 25 / 138 Loss: 16.318620681762695 Tokens per Sec: 25058.312806917755
Epoch Step: 30 / 138 Loss: 10.785011291503906 Tokens per Sec: 24232.163593403428
Epoch Step: 35 / 138 Loss: 16.421428680419922 Tokens per Sec: 23400.60611308781
Epoch Step: 40 / 138 Loss: 18.61791229248047 Tokens per Sec: 26123.231633794887
Epoch Step: 45 / 138 Loss: 16.327896118164062 Tokens per Sec: 23329.82627576807
Epoch Step: 50 / 138 Loss: 17.3136043548584 Tokens per Sec: 24478.822739377545
Epoch Step: 55 / 138 Loss: 10.298401832580566 Tokens per Sec: 25749.40236558012
Epoch Step: 60 / 138 Loss: 19.802265167236328 Tokens per Sec: 23135.659612847296
Epoch Step: 65 / 138 Loss: 18.87811851501465 Tokens per Sec: 23017.493508321968
Epoch Step: 70 / 138 Loss: 21.066139221191406 Tokens per Sec: 22287.560308581258
Epoch Step: 75 / 138 Loss: 11.399551391601562 Tokens per Sec: 23109.454349229058
Epoch Step: 80 / 138 Loss: 9.612943649291992 Tokens per Sec: 23921.62044557845
Epoch Step: 85 / 138 Loss: 18.57270622253418 Tokens per Sec: 24604.24797535626
Epoch Step: 90 / 138 Loss: 8.898788452148438 Tokens per Sec: 21570.157627168584
Epoch Step: 95 / 138 Loss: 160.6499481201172 Tokens per Sec: 26106.376324267625
Epoch Step: 100 / 138 Loss: 20.78046989440918 Tokens per Sec: 24624.968589506145
Epoch Step: 105 / 138 Loss: 16.2364559173584 Tokens per Sec: 23726.13700734242
Epoch Step: 110 / 138 Loss: 172.06361389160156 Tokens per Sec: 22382.65881284144
Epoch Step: 115 / 138 Loss: 17.466629028320312 Tokens per Sec: 23851.656248452495
Epoch Step: 120 / 138 Loss: 12.846529006958008 Tokens per Sec: 21907.7924023542
Epoch Step: 125 / 138 Loss: 14.783702850341797 Tokens per Sec: 24100.786970249486
Epoch Step: 130 / 138 Loss: 16.868148803710938 Tokens per Sec: 22409.291360626856
Epoch Step: 135 / 138 Loss: 11.55630111694336 Tokens per Sec: 19771.639328292753
Epoch ended with duration 0:00:26.796221
Train perplexity: 1.4820789908410088
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.378863
Validation perplexity: 1.6609523994950253
Epoch 88 / 1000
Epoch Step: 5 / 138 Loss: 16.242996215820312 Tokens per Sec: 23213.767549339555
Epoch Step: 10 / 138 Loss: 24.1414852142334 Tokens per Sec: 25141.324253592175
Epoch Step: 15 / 138 Loss: 11.247435569763184 Tokens per Sec: 24003.217301493372
Epoch Step: 20 / 138 Loss: 10.258296966552734 Tokens per Sec: 20632.762826368384
Epoch Step: 25 / 138 Loss: 9.339179992675781 Tokens per Sec: 25729.84293809092
Epoch Step: 30 / 138 Loss: 15.329331398010254 Tokens per Sec: 22474.270528109028
Epoch Step: 35 / 138 Loss: 17.87670135498047 Tokens per Sec: 24736.97252852676
Epoch Step: 40 / 138 Loss: 15.28378677368164 Tokens per Sec: 25116.736687700828
Epoch Step: 45 / 138 Loss: 212.66941833496094 Tokens per Sec: 23093.220712976305
Epoch Step: 50 / 138 Loss: 23.146730422973633 Tokens per Sec: 24329.857563445046
Epoch Step: 55 / 138 Loss: 24.73973274230957 Tokens per Sec: 25333.856905130975
Epoch Step: 60 / 138 Loss: 18.535945892333984 Tokens per Sec: 27216.00466905147
Epoch Step: 65 / 138 Loss: 16.354145050048828 Tokens per Sec: 22948.03682409605
Epoch Step: 70 / 138 Loss: 21.315866470336914 Tokens per Sec: 26474.306746977734
Epoch Step: 75 / 138 Loss: 19.659090042114258 Tokens per Sec: 24251.27962578896
Epoch Step: 80 / 138 Loss: 10.205056190490723 Tokens per Sec: 23934.627055589666
Epoch Step: 85 / 138 Loss: 10.322258949279785 Tokens per Sec: 24310.11915244723
Epoch Step: 90 / 138 Loss: 189.43560791015625 Tokens per Sec: 25787.187782976223
Epoch Step: 95 / 138 Loss: 19.88966178894043 Tokens per Sec: 23537.792563388248
Epoch Step: 100 / 138 Loss: 13.70661735534668 Tokens per Sec: 25511.10459979516
Epoch Step: 105 / 138 Loss: 13.571365356445312 Tokens per Sec: 23745.504103120158
Epoch Step: 110 / 138 Loss: 17.066986083984375 Tokens per Sec: 22102.279807804687
Epoch Step: 115 / 138 Loss: 14.152278900146484 Tokens per Sec: 23442.834517255935
Epoch Step: 120 / 138 Loss: 12.354120254516602 Tokens per Sec: 22594.454655771544
Epoch Step: 125 / 138 Loss: 14.786209106445312 Tokens per Sec: 20149.310865191383
Epoch Step: 130 / 138 Loss: 14.100287437438965 Tokens per Sec: 23164.157046677243
Epoch Step: 135 / 138 Loss: 13.299417495727539 Tokens per Sec: 21094.651058108335
Epoch ended with duration 0:00:26.779099
Train perplexity: 1.482964596847602
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.390550
Validation perplexity: 1.9936684816177168
Epoch 89 / 1000
Epoch Step: 5 / 138 Loss: 10.245087623596191 Tokens per Sec: 25202.148256059052
Epoch Step: 10 / 138 Loss: 11.14573860168457 Tokens per Sec: 22583.34063651204
Epoch Step: 15 / 138 Loss: 15.581429481506348 Tokens per Sec: 24670.98670225311
Epoch Step: 20 / 138 Loss: 9.769132614135742 Tokens per Sec: 23598.12889967117
Epoch Step: 25 / 138 Loss: 11.222496032714844 Tokens per Sec: 24757.948953029
Epoch Step: 30 / 138 Loss: 14.566215515136719 Tokens per Sec: 24719.98812688664
Epoch Step: 35 / 138 Loss: 12.967647552490234 Tokens per Sec: 25279.47152052355
Epoch Step: 40 / 138 Loss: 11.21795654296875 Tokens per Sec: 26409.761111055974
Epoch Step: 45 / 138 Loss: 155.7607421875 Tokens per Sec: 23575.08140517682
Epoch Step: 50 / 138 Loss: 17.82464027404785 Tokens per Sec: 25796.09844167086
Epoch Step: 55 / 138 Loss: 9.179153442382812 Tokens per Sec: 25004.356734227356
Epoch Step: 60 / 138 Loss: 15.712507247924805 Tokens per Sec: 23596.920961175256
Epoch Step: 65 / 138 Loss: 17.233776092529297 Tokens per Sec: 22514.167611011428
Epoch Step: 70 / 138 Loss: 16.345073699951172 Tokens per Sec: 23920.240266945108
Epoch Step: 75 / 138 Loss: 178.77232360839844 Tokens per Sec: 22798.712409230844
Epoch Step: 80 / 138 Loss: 18.910310745239258 Tokens per Sec: 23323.588713639685
Epoch Step: 85 / 138 Loss: 196.144775390625 Tokens per Sec: 22935.705504244772
Epoch Step: 90 / 138 Loss: 9.462560653686523 Tokens per Sec: 24730.463963243245
Epoch Step: 95 / 138 Loss: 15.9892578125 Tokens per Sec: 24207.74920917356
Epoch Step: 100 / 138 Loss: 13.406174659729004 Tokens per Sec: 24792.318844603284
Epoch Step: 105 / 138 Loss: 16.266447067260742 Tokens per Sec: 23713.13119565341
Epoch Step: 110 / 138 Loss: 15.27947998046875 Tokens per Sec: 23152.359742177847
Epoch Step: 115 / 138 Loss: 13.531827926635742 Tokens per Sec: 22977.63532622178
Epoch Step: 120 / 138 Loss: 14.323320388793945 Tokens per Sec: 22515.42338470907
Epoch Step: 125 / 138 Loss: 11.973237037658691 Tokens per Sec: 23899.8581231974
Epoch Step: 130 / 138 Loss: 13.496047973632812 Tokens per Sec: 19644.023701278522
Epoch Step: 135 / 138 Loss: 21.307130813598633 Tokens per Sec: 22660.878735916525
Epoch ended with duration 0:00:26.748839
Train perplexity: 1.4038528553762792
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.389321
Validation perplexity: 1.9393161020883487
Epoch 90 / 1000
Epoch Step: 5 / 138 Loss: 10.545286178588867 Tokens per Sec: 23833.306136212796
Epoch Step: 10 / 138 Loss: 14.061663627624512 Tokens per Sec: 25053.379837536442
Epoch Step: 15 / 138 Loss: 12.983224868774414 Tokens per Sec: 24768.270547633074
Epoch Step: 20 / 138 Loss: 16.91099739074707 Tokens per Sec: 23899.272649767092
Epoch Step: 25 / 138 Loss: 13.111372947692871 Tokens per Sec: 23112.57599076124
Epoch Step: 30 / 138 Loss: 14.793811798095703 Tokens per Sec: 24417.736410864767
Epoch Step: 35 / 138 Loss: 9.004066467285156 Tokens per Sec: 25967.336253753307
Epoch Step: 40 / 138 Loss: 12.433321952819824 Tokens per Sec: 24622.438004775733
Epoch Step: 45 / 138 Loss: 177.826904296875 Tokens per Sec: 23326.742344017715
Epoch Step: 50 / 138 Loss: 14.320621490478516 Tokens per Sec: 23536.489464977414
Epoch Step: 55 / 138 Loss: 9.942281723022461 Tokens per Sec: 25355.77153576147
Epoch Step: 60 / 138 Loss: 13.739068984985352 Tokens per Sec: 25625.543791627195
Epoch Step: 65 / 138 Loss: 196.10609436035156 Tokens per Sec: 23441.616678166658
Epoch Step: 70 / 138 Loss: 15.61765193939209 Tokens per Sec: 23935.543789060095
Epoch Step: 75 / 138 Loss: 18.26763153076172 Tokens per Sec: 24965.181250051864
Epoch Step: 80 / 138 Loss: 15.06036376953125 Tokens per Sec: 24484.72304177549
Epoch Step: 85 / 138 Loss: 16.40625762939453 Tokens per Sec: 23125.83349116123
Epoch Step: 90 / 138 Loss: 89.42179107666016 Tokens per Sec: 25501.001391716694
Epoch Step: 95 / 138 Loss: 9.246267318725586 Tokens per Sec: 23688.679323328914
Epoch Step: 100 / 138 Loss: 109.8814697265625 Tokens per Sec: 24134.145455107213
Epoch Step: 105 / 138 Loss: 15.886276245117188 Tokens per Sec: 22461.0215399551
Epoch Step: 110 / 138 Loss: 14.096944808959961 Tokens per Sec: 23113.659449861436
Epoch Step: 115 / 138 Loss: 213.03765869140625 Tokens per Sec: 22887.2170624551
Epoch Step: 120 / 138 Loss: 23.326438903808594 Tokens per Sec: 20791.84203126063
Epoch Step: 125 / 138 Loss: 24.707101821899414 Tokens per Sec: 21042.66059595825
Epoch Step: 130 / 138 Loss: 17.32120132446289 Tokens per Sec: 22717.866820344945
Epoch Step: 135 / 138 Loss: 14.237638473510742 Tokens per Sec: 23092.5893984238
Epoch ended with duration 0:00:26.841671
Train perplexity: 1.4467174962355318
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.385255
Validation perplexity: 1.9558625706374926
Model saved checkpoint!
Epoch 91 / 1000
Epoch Step: 5 / 138 Loss: 15.876313209533691 Tokens per Sec: 22597.074526374905
Epoch Step: 10 / 138 Loss: 10.72956657409668 Tokens per Sec: 25266.011306663964
Epoch Step: 15 / 138 Loss: 13.267790794372559 Tokens per Sec: 25154.33376210755
Epoch Step: 20 / 138 Loss: 11.08491325378418 Tokens per Sec: 24788.087586328533
Epoch Step: 25 / 138 Loss: 12.679823875427246 Tokens per Sec: 25839.326829121834
Epoch Step: 30 / 138 Loss: 16.245393753051758 Tokens per Sec: 24474.383879185996
Epoch Step: 35 / 138 Loss: 15.390714645385742 Tokens per Sec: 24776.19415041463
Epoch Step: 40 / 138 Loss: 11.316296577453613 Tokens per Sec: 25386.77739266506
Epoch Step: 45 / 138 Loss: 20.508039474487305 Tokens per Sec: 23363.528402027638
Epoch Step: 50 / 138 Loss: 18.891008377075195 Tokens per Sec: 23268.445179563394
Epoch Step: 55 / 138 Loss: 12.2985200881958 Tokens per Sec: 24346.951228914335
Epoch Step: 60 / 138 Loss: 13.474321365356445 Tokens per Sec: 24079.341954855954
Epoch Step: 65 / 138 Loss: 18.757694244384766 Tokens per Sec: 23237.597720164893
Epoch Step: 70 / 138 Loss: 20.424514770507812 Tokens per Sec: 25842.03318383772
Epoch Step: 75 / 138 Loss: 9.064026832580566 Tokens per Sec: 25992.138493634855
Epoch Step: 80 / 138 Loss: 14.35725212097168 Tokens per Sec: 22160.6020811548
Epoch Step: 85 / 138 Loss: 22.388538360595703 Tokens per Sec: 21892.133931572986
Epoch Step: 90 / 138 Loss: 14.090517044067383 Tokens per Sec: 25354.063325919004
Epoch Step: 95 / 138 Loss: 14.895753860473633 Tokens per Sec: 23075.59964452323
Epoch Step: 100 / 138 Loss: 16.316665649414062 Tokens per Sec: 23813.100888276742
Epoch Step: 105 / 138 Loss: 11.480315208435059 Tokens per Sec: 22424.958330445173
Epoch Step: 110 / 138 Loss: 14.290889739990234 Tokens per Sec: 23740.429134240992
Epoch Step: 115 / 138 Loss: 15.706710815429688 Tokens per Sec: 23133.39330411562
Epoch Step: 120 / 138 Loss: 15.998525619506836 Tokens per Sec: 23298.997809242792
Epoch Step: 125 / 138 Loss: 15.420351028442383 Tokens per Sec: 23112.903577927136
Epoch Step: 130 / 138 Loss: 12.354913711547852 Tokens per Sec: 23003.353705822115
Epoch Step: 135 / 138 Loss: 14.854704856872559 Tokens per Sec: 21047.914663269057
Epoch ended with duration 0:00:26.807687
Train perplexity: 1.459835135075619
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.367898
Validation perplexity: 1.4077773313123128
Epoch 92 / 1000
Epoch Step: 5 / 138 Loss: 9.707983016967773 Tokens per Sec: 24879.76349245149
Epoch Step: 10 / 138 Loss: 11.625039100646973 Tokens per Sec: 24228.18882996999
Epoch Step: 15 / 138 Loss: 14.595722198486328 Tokens per Sec: 23270.240215177728
Epoch Step: 20 / 138 Loss: 19.775897979736328 Tokens per Sec: 24410.940250427455
Epoch Step: 25 / 138 Loss: 16.026165008544922 Tokens per Sec: 24649.084080545937
Epoch Step: 30 / 138 Loss: 16.351634979248047 Tokens per Sec: 23134.825457522977
Epoch Step: 35 / 138 Loss: 10.878865242004395 Tokens per Sec: 25504.14714491515
Epoch Step: 40 / 138 Loss: 14.642602920532227 Tokens per Sec: 24714.895415422878
Epoch Step: 45 / 138 Loss: 12.409385681152344 Tokens per Sec: 23769.84806003075
Epoch Step: 50 / 138 Loss: 17.9997501373291 Tokens per Sec: 26694.36552390967
Epoch Step: 55 / 138 Loss: 10.807004928588867 Tokens per Sec: 21069.842480176325
Epoch Step: 60 / 138 Loss: 16.874652862548828 Tokens per Sec: 24493.659408509273
Epoch Step: 65 / 138 Loss: 15.170963287353516 Tokens per Sec: 23838.60843183564
Epoch Step: 70 / 138 Loss: 10.400814056396484 Tokens per Sec: 23956.323973328283
Epoch Step: 75 / 138 Loss: 15.906953811645508 Tokens per Sec: 23278.148039478623
Epoch Step: 80 / 138 Loss: 9.55572509765625 Tokens per Sec: 24887.215652851344
Epoch Step: 85 / 138 Loss: 15.650541305541992 Tokens per Sec: 22949.43575898157
Epoch Step: 90 / 138 Loss: 19.524951934814453 Tokens per Sec: 24696.800786763506
Epoch Step: 95 / 138 Loss: 13.852638244628906 Tokens per Sec: 25716.899010468816
Epoch Step: 100 / 138 Loss: 10.09206771850586 Tokens per Sec: 25580.34441616271
Epoch Step: 105 / 138 Loss: 15.478850364685059 Tokens per Sec: 20371.787421560326
Epoch Step: 110 / 138 Loss: 11.517847061157227 Tokens per Sec: 21279.94069270721
Epoch Step: 115 / 138 Loss: 17.741092681884766 Tokens per Sec: 23743.997333720632
Epoch Step: 120 / 138 Loss: 13.70984935760498 Tokens per Sec: 22150.211447271427
Epoch Step: 125 / 138 Loss: 15.870113372802734 Tokens per Sec: 24003.35847628792
Epoch Step: 130 / 138 Loss: 19.92092514038086 Tokens per Sec: 22912.79350029902
Epoch Step: 135 / 138 Loss: 107.84011840820312 Tokens per Sec: 22110.56261529881
Epoch ended with duration 0:00:26.859169
Train perplexity: 1.520326866929632
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.371394
Validation perplexity: 1.4844110745208108
Epoch 93 / 1000
Epoch Step: 5 / 138 Loss: 16.878196716308594 Tokens per Sec: 22340.032328233367
Epoch Step: 10 / 138 Loss: 12.565384864807129 Tokens per Sec: 23344.489269990125
Epoch Step: 15 / 138 Loss: 12.769122123718262 Tokens per Sec: 25160.87310162896
Epoch Step: 20 / 138 Loss: 15.341965675354004 Tokens per Sec: 23603.694104589256
Epoch Step: 25 / 138 Loss: 18.069129943847656 Tokens per Sec: 24011.598591531103
Epoch Step: 30 / 138 Loss: 13.687792778015137 Tokens per Sec: 25807.165753727077
Epoch Step: 35 / 138 Loss: 15.081708908081055 Tokens per Sec: 23684.500579215313
Epoch Step: 40 / 138 Loss: 9.536458015441895 Tokens per Sec: 24932.49450059596
Epoch Step: 45 / 138 Loss: 12.435572624206543 Tokens per Sec: 25223.88247874458
Epoch Step: 50 / 138 Loss: 14.704440116882324 Tokens per Sec: 25872.522625458558
Epoch Step: 55 / 138 Loss: 12.113799095153809 Tokens per Sec: 26040.664962621402
Epoch Step: 60 / 138 Loss: 15.808813095092773 Tokens per Sec: 24157.374776312252
Epoch Step: 65 / 138 Loss: 11.549202919006348 Tokens per Sec: 23379.070949340658
Epoch Step: 70 / 138 Loss: 11.764674186706543 Tokens per Sec: 24717.23628138648
Epoch Step: 75 / 138 Loss: 15.828170776367188 Tokens per Sec: 23231.236026707327
Epoch Step: 80 / 138 Loss: 14.297005653381348 Tokens per Sec: 24017.433553718653
Epoch Step: 85 / 138 Loss: 14.371914863586426 Tokens per Sec: 23874.230514218776
Epoch Step: 90 / 138 Loss: 175.048583984375 Tokens per Sec: 23540.08981635998
Epoch Step: 95 / 138 Loss: 10.277783393859863 Tokens per Sec: 22248.311114135435
Epoch Step: 100 / 138 Loss: 16.10149383544922 Tokens per Sec: 24670.31138098173
Epoch Step: 105 / 138 Loss: 56.77074432373047 Tokens per Sec: 22448.904928875058
Epoch Step: 110 / 138 Loss: 22.480817794799805 Tokens per Sec: 23588.16824213378
Epoch Step: 115 / 138 Loss: 15.802101135253906 Tokens per Sec: 23773.944531306675
Epoch Step: 120 / 138 Loss: 11.730507850646973 Tokens per Sec: 23271.601413013585
Epoch Step: 125 / 138 Loss: 15.72950553894043 Tokens per Sec: 21952.594698047007
Epoch Step: 130 / 138 Loss: 14.861007690429688 Tokens per Sec: 21144.366507375486
Epoch Step: 135 / 138 Loss: 12.691646575927734 Tokens per Sec: 22901.03149170401
Epoch ended with duration 0:00:26.862092
Train perplexity: 1.4548455141028813
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.393923
Validation perplexity: 1.4776985855806446
Epoch 94 / 1000
Epoch Step: 5 / 138 Loss: 22.05736541748047 Tokens per Sec: 23841.81203317575
Epoch Step: 10 / 138 Loss: 22.069530487060547 Tokens per Sec: 24279.05582990652
Epoch Step: 15 / 138 Loss: 11.837990760803223 Tokens per Sec: 23178.967904070785
Epoch Step: 20 / 138 Loss: 9.072040557861328 Tokens per Sec: 24700.050310070175
Epoch Step: 25 / 138 Loss: 14.158432006835938 Tokens per Sec: 24695.53076481596
Epoch Step: 30 / 138 Loss: 11.355579376220703 Tokens per Sec: 25040.091025447913
Epoch Step: 35 / 138 Loss: 17.490394592285156 Tokens per Sec: 23571.2697321933
Epoch Step: 40 / 138 Loss: 16.061491012573242 Tokens per Sec: 23426.485347604797
Epoch Step: 45 / 138 Loss: 11.560773849487305 Tokens per Sec: 24338.61364975046
Epoch Step: 50 / 138 Loss: 12.707446098327637 Tokens per Sec: 24812.6056851595
Epoch Step: 55 / 138 Loss: 17.572256088256836 Tokens per Sec: 24964.835653910566
Epoch Step: 60 / 138 Loss: 11.825263977050781 Tokens per Sec: 24539.372594090957
Epoch Step: 65 / 138 Loss: 17.0948543548584 Tokens per Sec: 24221.876625626344
Epoch Step: 70 / 138 Loss: 19.15639877319336 Tokens per Sec: 23519.95417340255
Epoch Step: 75 / 138 Loss: 15.964359283447266 Tokens per Sec: 23913.937609731725
Epoch Step: 80 / 138 Loss: 9.316412925720215 Tokens per Sec: 24652.482605684
Epoch Step: 85 / 138 Loss: 18.85352897644043 Tokens per Sec: 22090.92651003255
Epoch Step: 90 / 138 Loss: 12.960027694702148 Tokens per Sec: 24225.107192256342
Epoch Step: 95 / 138 Loss: 17.181928634643555 Tokens per Sec: 24587.481268936026
Epoch Step: 100 / 138 Loss: 23.71954917907715 Tokens per Sec: 24003.883626850125
Epoch Step: 105 / 138 Loss: 97.68667602539062 Tokens per Sec: 22169.935621222117
Epoch Step: 110 / 138 Loss: 16.732799530029297 Tokens per Sec: 22227.548992802072
Epoch Step: 115 / 138 Loss: 12.613439559936523 Tokens per Sec: 23679.21597381712
Epoch Step: 120 / 138 Loss: 14.258660316467285 Tokens per Sec: 19969.767067571822
Epoch Step: 125 / 138 Loss: 10.889373779296875 Tokens per Sec: 23869.782980685624
Epoch Step: 130 / 138 Loss: 11.54507827758789 Tokens per Sec: 23064.710713625795
Epoch Step: 135 / 138 Loss: 13.868921279907227 Tokens per Sec: 22979.75009999266
Epoch ended with duration 0:00:26.906237
Train perplexity: 1.4803779951939149
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.371346
Validation perplexity: 1.3074739613711677
Epoch 95 / 1000
Epoch Step: 5 / 138 Loss: 15.70731258392334 Tokens per Sec: 25659.06324253181
Epoch Step: 10 / 138 Loss: 17.14041519165039 Tokens per Sec: 24652.59959093853
Epoch Step: 15 / 138 Loss: 16.056346893310547 Tokens per Sec: 24704.765898268004
Epoch Step: 20 / 138 Loss: 11.041147232055664 Tokens per Sec: 25603.0574643736
Epoch Step: 25 / 138 Loss: 12.812695503234863 Tokens per Sec: 24448.85628103109
Epoch Step: 30 / 138 Loss: 13.754278182983398 Tokens per Sec: 25068.130534930264
Epoch Step: 35 / 138 Loss: 11.703092575073242 Tokens per Sec: 23643.895227620713
Epoch Step: 40 / 138 Loss: 11.378801345825195 Tokens per Sec: 25837.76475390281
Epoch Step: 45 / 138 Loss: 17.337196350097656 Tokens per Sec: 24198.162738109757
Epoch Step: 50 / 138 Loss: 8.794809341430664 Tokens per Sec: 24140.807975332857
Epoch Step: 55 / 138 Loss: 144.92669677734375 Tokens per Sec: 23216.981326273115
Epoch Step: 60 / 138 Loss: 112.58338928222656 Tokens per Sec: 24141.73351896781
Epoch Step: 65 / 138 Loss: 14.691511154174805 Tokens per Sec: 23518.691825247974
Epoch Step: 70 / 138 Loss: 17.507362365722656 Tokens per Sec: 22625.535927632172
Epoch Step: 75 / 138 Loss: 16.700077056884766 Tokens per Sec: 24638.718584548646
Epoch Step: 80 / 138 Loss: 11.315196990966797 Tokens per Sec: 24435.690653604557
Epoch Step: 85 / 138 Loss: 13.274313926696777 Tokens per Sec: 24225.313023049686
Epoch Step: 90 / 138 Loss: 19.164514541625977 Tokens per Sec: 26172.91667041648
Epoch Step: 95 / 138 Loss: 16.12586212158203 Tokens per Sec: 22991.247444321754
Epoch Step: 100 / 138 Loss: 7.769984245300293 Tokens per Sec: 22286.74644983043
Epoch Step: 105 / 138 Loss: 15.655561447143555 Tokens per Sec: 23274.425813830127
Epoch Step: 110 / 138 Loss: 10.654366493225098 Tokens per Sec: 22186.465545781735
Epoch Step: 115 / 138 Loss: 176.5476531982422 Tokens per Sec: 22776.83286431046
Epoch Step: 120 / 138 Loss: 12.842832565307617 Tokens per Sec: 23694.411035558267
Epoch Step: 125 / 138 Loss: 12.928284645080566 Tokens per Sec: 23450.44740917963
Epoch Step: 130 / 138 Loss: 14.564408302307129 Tokens per Sec: 19840.864615965555
Epoch Step: 135 / 138 Loss: 16.299989700317383 Tokens per Sec: 23495.736644920686
Epoch ended with duration 0:00:26.778998
Train perplexity: 1.418648102275094
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.380556
Validation perplexity: 1.6812265078085573
Model saved checkpoint!
Epoch 96 / 1000
Epoch Step: 5 / 138 Loss: 10.014813423156738 Tokens per Sec: 25415.492984706263
Epoch Step: 10 / 138 Loss: 12.571654319763184 Tokens per Sec: 25596.671502327845
Epoch Step: 15 / 138 Loss: 15.035845756530762 Tokens per Sec: 24098.141796592085
Epoch Step: 20 / 138 Loss: 14.334577560424805 Tokens per Sec: 24911.219996747324
Epoch Step: 25 / 138 Loss: 15.2352876663208 Tokens per Sec: 23401.070444758774
Epoch Step: 30 / 138 Loss: 19.51618003845215 Tokens per Sec: 22218.43554929059
Epoch Step: 35 / 138 Loss: 238.01193237304688 Tokens per Sec: 25212.84785645389
Epoch Step: 40 / 138 Loss: 18.332881927490234 Tokens per Sec: 24536.292829684106
Epoch Step: 45 / 138 Loss: 16.146312713623047 Tokens per Sec: 24050.355259014646
Epoch Step: 50 / 138 Loss: 19.977203369140625 Tokens per Sec: 23446.27765626464
Epoch Step: 55 / 138 Loss: 12.453031539916992 Tokens per Sec: 24861.105975699626
Epoch Step: 60 / 138 Loss: 218.49221801757812 Tokens per Sec: 23916.157099692417
Epoch Step: 65 / 138 Loss: 18.970088958740234 Tokens per Sec: 25170.932058806236
Epoch Step: 70 / 138 Loss: 13.278912544250488 Tokens per Sec: 24515.155309266
Epoch Step: 75 / 138 Loss: 11.040817260742188 Tokens per Sec: 25005.026206071576
Epoch Step: 80 / 138 Loss: 8.669633865356445 Tokens per Sec: 26119.40678955263
Epoch Step: 85 / 138 Loss: 9.833456039428711 Tokens per Sec: 22942.754857653574
Epoch Step: 90 / 138 Loss: 11.27993106842041 Tokens per Sec: 24999.74098579503
Epoch Step: 95 / 138 Loss: 137.4482421875 Tokens per Sec: 23994.579479543376
Epoch Step: 100 / 138 Loss: 15.845032691955566 Tokens per Sec: 22991.60806268617
Epoch Step: 105 / 138 Loss: 12.71746826171875 Tokens per Sec: 22411.491510007403
Epoch Step: 110 / 138 Loss: 15.693772315979004 Tokens per Sec: 19537.753273923874
Epoch Step: 115 / 138 Loss: 13.533764839172363 Tokens per Sec: 22722.04408781903
Epoch Step: 120 / 138 Loss: 11.568628311157227 Tokens per Sec: 22190.294694884335
Epoch Step: 125 / 138 Loss: 11.021632194519043 Tokens per Sec: 22287.67559482643
Epoch Step: 130 / 138 Loss: 16.952531814575195 Tokens per Sec: 23650.124700523167
Epoch Step: 135 / 138 Loss: 210.14935302734375 Tokens per Sec: 23552.724368774216
Epoch ended with duration 0:00:26.810838
Train perplexity: 1.4788926141432104
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) boolean TYPE_5 TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.368043
Validation perplexity: 1.4049251011913593
Epoch 97 / 1000
Epoch Step: 5 / 138 Loss: 16.231061935424805 Tokens per Sec: 25642.46502235379
Epoch Step: 10 / 138 Loss: 210.76611328125 Tokens per Sec: 25580.784057006877
Epoch Step: 15 / 138 Loss: 17.36921501159668 Tokens per Sec: 22147.70036508076
Epoch Step: 20 / 138 Loss: 14.465770721435547 Tokens per Sec: 23016.11420430343
Epoch Step: 25 / 138 Loss: 13.841001510620117 Tokens per Sec: 26663.27228359647
Epoch Step: 30 / 138 Loss: 8.55082893371582 Tokens per Sec: 24419.51901069316
Epoch Step: 35 / 138 Loss: 8.728952407836914 Tokens per Sec: 26668.171201150803
Epoch Step: 40 / 138 Loss: 207.834716796875 Tokens per Sec: 23980.116601108144
Epoch Step: 45 / 138 Loss: 11.172011375427246 Tokens per Sec: 25326.099736184693
Epoch Step: 50 / 138 Loss: 154.18345642089844 Tokens per Sec: 22144.755377879308
Epoch Step: 55 / 138 Loss: 10.199597358703613 Tokens per Sec: 23977.565889956706
Epoch Step: 60 / 138 Loss: 13.05002498626709 Tokens per Sec: 24585.7616282472
Epoch Step: 65 / 138 Loss: 14.654887199401855 Tokens per Sec: 22965.815696535265
Epoch Step: 70 / 138 Loss: 20.011205673217773 Tokens per Sec: 23425.637655323724
Epoch Step: 75 / 138 Loss: 9.209664344787598 Tokens per Sec: 23376.672749511246
Epoch Step: 80 / 138 Loss: 13.873900413513184 Tokens per Sec: 25635.074305520928
Epoch Step: 85 / 138 Loss: 16.798095703125 Tokens per Sec: 22712.32816932021
Epoch Step: 90 / 138 Loss: 204.76673889160156 Tokens per Sec: 23301.31584536577
Epoch Step: 95 / 138 Loss: 8.565619468688965 Tokens per Sec: 25244.78155569636
Epoch Step: 100 / 138 Loss: 20.23802947998047 Tokens per Sec: 23400.388861920925
Epoch Step: 105 / 138 Loss: 17.785097122192383 Tokens per Sec: 23134.646562312704
Epoch Step: 110 / 138 Loss: 12.54438591003418 Tokens per Sec: 24557.474271178777
Epoch Step: 115 / 138 Loss: 13.69381046295166 Tokens per Sec: 22487.812579532387
Epoch Step: 120 / 138 Loss: 11.165390014648438 Tokens per Sec: 22867.017383696988
Epoch Step: 125 / 138 Loss: 13.131701469421387 Tokens per Sec: 20860.466141465957
Epoch Step: 130 / 138 Loss: 13.845135688781738 Tokens per Sec: 22397.784490453105
Epoch Step: 135 / 138 Loss: 14.297633171081543 Tokens per Sec: 22186.715088665598
Epoch ended with duration 0:00:26.875283
Train perplexity: 1.4754884565681656
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.371048
Validation perplexity: 1.4452225950683613
Epoch 98 / 1000
Epoch Step: 5 / 138 Loss: 16.404903411865234 Tokens per Sec: 22777.147451228
Epoch Step: 10 / 138 Loss: 18.186511993408203 Tokens per Sec: 25349.196388815813
Epoch Step: 15 / 138 Loss: 8.568036079406738 Tokens per Sec: 25408.63035799976
Epoch Step: 20 / 138 Loss: 9.200751304626465 Tokens per Sec: 23095.227508003878
Epoch Step: 25 / 138 Loss: 10.067427635192871 Tokens per Sec: 23025.54234526598
Epoch Step: 30 / 138 Loss: 17.548059463500977 Tokens per Sec: 23377.47365761213
Epoch Step: 35 / 138 Loss: 14.237800598144531 Tokens per Sec: 24028.282214596704
Epoch Step: 40 / 138 Loss: 13.660248756408691 Tokens per Sec: 25491.816565462672
Epoch Step: 45 / 138 Loss: 11.261143684387207 Tokens per Sec: 24243.80291084252
Epoch Step: 50 / 138 Loss: 11.490561485290527 Tokens per Sec: 23894.280329457473
Epoch Step: 55 / 138 Loss: 13.67616081237793 Tokens per Sec: 22849.437025695788
Epoch Step: 60 / 138 Loss: 15.527153015136719 Tokens per Sec: 24348.375705744937
Epoch Step: 65 / 138 Loss: 10.29562759399414 Tokens per Sec: 24767.49433698926
Epoch Step: 70 / 138 Loss: 170.00975036621094 Tokens per Sec: 24878.524604695453
Epoch Step: 75 / 138 Loss: 18.79063606262207 Tokens per Sec: 24134.90460603644
Epoch Step: 80 / 138 Loss: 11.415172576904297 Tokens per Sec: 25764.36359674817
Epoch Step: 85 / 138 Loss: 12.618897438049316 Tokens per Sec: 25986.96538128707
Epoch Step: 90 / 138 Loss: 16.133087158203125 Tokens per Sec: 23996.543916390197
Epoch Step: 95 / 138 Loss: 15.957096099853516 Tokens per Sec: 23904.150786105016
Epoch Step: 100 / 138 Loss: 15.606205940246582 Tokens per Sec: 23655.352518992542
Epoch Step: 105 / 138 Loss: 138.7425537109375 Tokens per Sec: 22218.793755900264
Epoch Step: 110 / 138 Loss: 16.335445404052734 Tokens per Sec: 22875.49381449633
Epoch Step: 115 / 138 Loss: 11.288368225097656 Tokens per Sec: 23446.238669772258
Epoch Step: 120 / 138 Loss: 187.51498413085938 Tokens per Sec: 21309.010712017003
Epoch Step: 125 / 138 Loss: 13.044061660766602 Tokens per Sec: 21626.377828449982
Epoch Step: 130 / 138 Loss: 19.24951934814453 Tokens per Sec: 23786.228292638305
Epoch Step: 135 / 138 Loss: 17.1176815032959 Tokens per Sec: 23671.099101263375
Epoch ended with duration 0:00:26.887896
Train perplexity: 1.4474142548510063
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.385737
Validation perplexity: 1.6815561035108222
Epoch 99 / 1000
Epoch Step: 5 / 138 Loss: 151.98252868652344 Tokens per Sec: 22244.05874431812
Epoch Step: 10 / 138 Loss: 8.230202674865723 Tokens per Sec: 25961.035737369602
Epoch Step: 15 / 138 Loss: 14.76949405670166 Tokens per Sec: 23506.067122221215
Epoch Step: 20 / 138 Loss: 12.231144905090332 Tokens per Sec: 23806.303935811797
Epoch Step: 25 / 138 Loss: 9.182516098022461 Tokens per Sec: 25742.325573014965
Epoch Step: 30 / 138 Loss: 16.409774780273438 Tokens per Sec: 23953.790532752566
Epoch Step: 35 / 138 Loss: 8.075772285461426 Tokens per Sec: 24844.639311200168
Epoch Step: 40 / 138 Loss: 10.872995376586914 Tokens per Sec: 24978.564025434513
Epoch Step: 45 / 138 Loss: 11.820554733276367 Tokens per Sec: 24039.225350246666
Epoch Step: 50 / 138 Loss: 15.312274932861328 Tokens per Sec: 23672.205390176783
Epoch Step: 55 / 138 Loss: 17.226274490356445 Tokens per Sec: 21569.31352923623
Epoch Step: 60 / 138 Loss: 14.936063766479492 Tokens per Sec: 23994.314338524888
Epoch Step: 65 / 138 Loss: 16.27791976928711 Tokens per Sec: 25241.93914187475
Epoch Step: 70 / 138 Loss: 13.703102111816406 Tokens per Sec: 25578.04934923938
Epoch Step: 75 / 138 Loss: 19.37211799621582 Tokens per Sec: 23161.356011464562
Epoch Step: 80 / 138 Loss: 17.26571273803711 Tokens per Sec: 22015.06492638601
Epoch Step: 85 / 138 Loss: 12.54439926147461 Tokens per Sec: 23594.249168866867
Epoch Step: 90 / 138 Loss: 11.705572128295898 Tokens per Sec: 25633.136672501496
Epoch Step: 95 / 138 Loss: 132.34487915039062 Tokens per Sec: 25237.927619485068
Epoch Step: 100 / 138 Loss: 10.712555885314941 Tokens per Sec: 24137.874686743275
Epoch Step: 105 / 138 Loss: 16.617408752441406 Tokens per Sec: 22740.07097906331
Epoch Step: 110 / 138 Loss: 13.25833797454834 Tokens per Sec: 23570.670767450694
Epoch Step: 115 / 138 Loss: 14.555567741394043 Tokens per Sec: 23579.50491682865
Epoch Step: 120 / 138 Loss: 10.92500114440918 Tokens per Sec: 20469.061479168056
Epoch Step: 125 / 138 Loss: 98.29365539550781 Tokens per Sec: 23105.531382878606
Epoch Step: 130 / 138 Loss: 13.567296028137207 Tokens per Sec: 22304.441953878188
Epoch Step: 135 / 138 Loss: 13.929022789001465 Tokens per Sec: 23242.332440876136
Epoch ended with duration 0:00:26.888850
Train perplexity: 1.463027248348697
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.427173
Validation perplexity: 1.7092116379044304
Epoch 100 / 1000
Epoch Step: 5 / 138 Loss: 11.66332721710205 Tokens per Sec: 24472.971601794914
Epoch Step: 10 / 138 Loss: 8.237092971801758 Tokens per Sec: 25374.16070218878
Epoch Step: 15 / 138 Loss: 17.325551986694336 Tokens per Sec: 23892.096439867262
Epoch Step: 20 / 138 Loss: 26.659984588623047 Tokens per Sec: 23594.637340908346
Epoch Step: 25 / 138 Loss: 17.484813690185547 Tokens per Sec: 24002.463535963503
Epoch Step: 30 / 138 Loss: 21.131107330322266 Tokens per Sec: 22659.448689759978
Epoch Step: 35 / 138 Loss: 17.12452507019043 Tokens per Sec: 24232.222588902016
Epoch Step: 40 / 138 Loss: 13.24557876586914 Tokens per Sec: 25759.88293185231
Epoch Step: 45 / 138 Loss: 8.892706871032715 Tokens per Sec: 24241.034271043565
Epoch Step: 50 / 138 Loss: 14.605191230773926 Tokens per Sec: 23573.709949429725
Epoch Step: 55 / 138 Loss: 11.49862003326416 Tokens per Sec: 24555.832563295186
Epoch Step: 60 / 138 Loss: 13.01783561706543 Tokens per Sec: 25947.248991796114
Epoch Step: 65 / 138 Loss: 15.545047760009766 Tokens per Sec: 22853.520176683855
Epoch Step: 70 / 138 Loss: 16.133203506469727 Tokens per Sec: 23130.750578422743
Epoch Step: 75 / 138 Loss: 16.761749267578125 Tokens per Sec: 22738.8057501584
Epoch Step: 80 / 138 Loss: 9.843496322631836 Tokens per Sec: 24490.207045319876
Epoch Step: 85 / 138 Loss: 16.463167190551758 Tokens per Sec: 24674.77928815699
Epoch Step: 90 / 138 Loss: 15.753093719482422 Tokens per Sec: 23916.81333710479
Epoch Step: 95 / 138 Loss: 18.837642669677734 Tokens per Sec: 23852.75937680323
Epoch Step: 100 / 138 Loss: 17.092304229736328 Tokens per Sec: 23575.905401265696
Epoch Step: 105 / 138 Loss: 10.961666107177734 Tokens per Sec: 22244.830896916694
Epoch Step: 110 / 138 Loss: 152.56747436523438 Tokens per Sec: 21807.47484622645
Epoch Step: 115 / 138 Loss: 16.58039665222168 Tokens per Sec: 21337.495737852096
Epoch Step: 120 / 138 Loss: 18.453458786010742 Tokens per Sec: 20199.092573973754
Epoch Step: 125 / 138 Loss: 13.648128509521484 Tokens per Sec: 23431.20240255711
Epoch Step: 130 / 138 Loss: 15.78043270111084 Tokens per Sec: 23281.9008102999
Epoch Step: 135 / 138 Loss: 15.988934516906738 Tokens per Sec: 23533.437169720168
Epoch ended with duration 0:00:27.049428
Train perplexity: 1.485276130192997
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.370407
Validation perplexity: 1.4141681566674538
Model saved checkpoint!
Epoch 101 / 1000
Epoch Step: 5 / 138 Loss: 145.98426818847656 Tokens per Sec: 24207.417420595797
Epoch Step: 10 / 138 Loss: 9.389041900634766 Tokens per Sec: 23637.516041564
Epoch Step: 15 / 138 Loss: 180.12232971191406 Tokens per Sec: 25350.516897128793
Epoch Step: 20 / 138 Loss: 15.514681816101074 Tokens per Sec: 22658.41438625411
Epoch Step: 25 / 138 Loss: 35.134002685546875 Tokens per Sec: 22950.627034134086
Epoch Step: 30 / 138 Loss: 18.557147979736328 Tokens per Sec: 25034.839901481926
Epoch Step: 35 / 138 Loss: 21.825206756591797 Tokens per Sec: 24036.374661850725
Epoch Step: 40 / 138 Loss: 22.29981803894043 Tokens per Sec: 24432.489091088213
Epoch Step: 45 / 138 Loss: 27.064830780029297 Tokens per Sec: 26009.32856981668
Epoch Step: 50 / 138 Loss: 10.396130561828613 Tokens per Sec: 25377.70306478865
Epoch Step: 55 / 138 Loss: 17.169649124145508 Tokens per Sec: 23010.17537752566
Epoch Step: 60 / 138 Loss: 15.935888290405273 Tokens per Sec: 25400.426442249
Epoch Step: 65 / 138 Loss: 13.376243591308594 Tokens per Sec: 24323.7177373435
Epoch Step: 70 / 138 Loss: 15.930031776428223 Tokens per Sec: 23031.004541686896
Epoch Step: 75 / 138 Loss: 15.098926544189453 Tokens per Sec: 24224.16281759921
Epoch Step: 80 / 138 Loss: 11.596822738647461 Tokens per Sec: 24902.517667031814
Epoch Step: 85 / 138 Loss: 181.3215789794922 Tokens per Sec: 22368.55716410362
Epoch Step: 90 / 138 Loss: 14.858009338378906 Tokens per Sec: 24747.12383493491
Epoch Step: 95 / 138 Loss: 22.721044540405273 Tokens per Sec: 23907.644484020948
Epoch Step: 100 / 138 Loss: 13.277234077453613 Tokens per Sec: 22931.229858788392
Epoch Step: 105 / 138 Loss: 14.368830680847168 Tokens per Sec: 23616.859266624408
Epoch Step: 110 / 138 Loss: 11.030556678771973 Tokens per Sec: 23306.903700989355
Epoch Step: 115 / 138 Loss: 8.576163291931152 Tokens per Sec: 22710.765129250816
Epoch Step: 120 / 138 Loss: 12.346123695373535 Tokens per Sec: 23337.39305394653
Epoch Step: 125 / 138 Loss: 86.67086029052734 Tokens per Sec: 21110.032806609055
Epoch Step: 130 / 138 Loss: 9.444743156433105 Tokens per Sec: 23952.66713945297
Epoch Step: 135 / 138 Loss: 12.681453704833984 Tokens per Sec: 20517.823394624294
Epoch ended with duration 0:00:26.893326
Train perplexity: 1.4363236538762987
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.379401
Validation perplexity: 1.7062967742542956
Epoch 102 / 1000
Epoch Step: 5 / 138 Loss: 12.752070426940918 Tokens per Sec: 25352.457258072776
Epoch Step: 10 / 138 Loss: 9.97054672241211 Tokens per Sec: 22091.3426298715
Epoch Step: 15 / 138 Loss: 15.36197566986084 Tokens per Sec: 23203.336485261058
Epoch Step: 20 / 138 Loss: 9.316503524780273 Tokens per Sec: 24176.0711766929
Epoch Step: 25 / 138 Loss: 15.391448974609375 Tokens per Sec: 22332.927732496053
Epoch Step: 30 / 138 Loss: 10.674884796142578 Tokens per Sec: 25216.02144377047
Epoch Step: 35 / 138 Loss: 13.325766563415527 Tokens per Sec: 23258.740072155237
Epoch Step: 40 / 138 Loss: 7.7950053215026855 Tokens per Sec: 24463.945889787974
Epoch Step: 45 / 138 Loss: 11.971480369567871 Tokens per Sec: 24983.460034365704
Epoch Step: 50 / 138 Loss: 16.099658966064453 Tokens per Sec: 23347.44236241306
Epoch Step: 55 / 138 Loss: 11.90355396270752 Tokens per Sec: 24279.89437369356
Epoch Step: 60 / 138 Loss: 7.918851852416992 Tokens per Sec: 24197.974374388086
Epoch Step: 65 / 138 Loss: 7.929322242736816 Tokens per Sec: 25659.006002718983
Epoch Step: 70 / 138 Loss: 19.613222122192383 Tokens per Sec: 23199.630645640296
Epoch Step: 75 / 138 Loss: 21.38209342956543 Tokens per Sec: 23168.216951038252
Epoch Step: 80 / 138 Loss: 13.069872856140137 Tokens per Sec: 25200.024452551374
Epoch Step: 85 / 138 Loss: 8.95023250579834 Tokens per Sec: 26689.557616695896
Epoch Step: 90 / 138 Loss: 15.250772476196289 Tokens per Sec: 25037.955098741513
Epoch Step: 95 / 138 Loss: 11.519621849060059 Tokens per Sec: 25662.079953359193
Epoch Step: 100 / 138 Loss: 8.31730842590332 Tokens per Sec: 26057.038530912803
Epoch Step: 105 / 138 Loss: 15.04265022277832 Tokens per Sec: 22513.532624869124
Epoch Step: 110 / 138 Loss: 14.976195335388184 Tokens per Sec: 23526.08550778789
Epoch Step: 115 / 138 Loss: 10.981717109680176 Tokens per Sec: 19635.625305341473
Epoch Step: 120 / 138 Loss: 145.8651123046875 Tokens per Sec: 22896.01651754201
Epoch Step: 125 / 138 Loss: 12.668548583984375 Tokens per Sec: 22877.253857849908
Epoch Step: 130 / 138 Loss: 17.498159408569336 Tokens per Sec: 23571.523018387543
Epoch Step: 135 / 138 Loss: 13.328433990478516 Tokens per Sec: 23191.731936463682
Epoch ended with duration 0:00:26.794420
Train perplexity: 1.4085071153590942
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.403286
Validation perplexity: 1.9067189287416946
Epoch 103 / 1000
Epoch Step: 5 / 138 Loss: 18.04313850402832 Tokens per Sec: 22576.301713373156
Epoch Step: 10 / 138 Loss: 17.0339412689209 Tokens per Sec: 22681.666012346624
Epoch Step: 15 / 138 Loss: 19.741191864013672 Tokens per Sec: 25348.112356079044
Epoch Step: 20 / 138 Loss: 15.05979061126709 Tokens per Sec: 22423.423192261223
Epoch Step: 25 / 138 Loss: 9.998023986816406 Tokens per Sec: 24735.894288976513
Epoch Step: 30 / 138 Loss: 14.936939239501953 Tokens per Sec: 25607.0540765704
Epoch Step: 35 / 138 Loss: 11.429302215576172 Tokens per Sec: 25539.156083992846
Epoch Step: 40 / 138 Loss: 12.207887649536133 Tokens per Sec: 26441.623515248637
Epoch Step: 45 / 138 Loss: 8.386148452758789 Tokens per Sec: 24603.91053053854
Epoch Step: 50 / 138 Loss: 11.57542896270752 Tokens per Sec: 23979.82530782461
Epoch Step: 55 / 138 Loss: 12.988919258117676 Tokens per Sec: 23794.67895840819
Epoch Step: 60 / 138 Loss: 11.097662925720215 Tokens per Sec: 24102.273696641958
Epoch Step: 65 / 138 Loss: 10.875190734863281 Tokens per Sec: 25518.976975957907
Epoch Step: 70 / 138 Loss: 6.727922439575195 Tokens per Sec: 23736.232381134734
Epoch Step: 75 / 138 Loss: 7.014284610748291 Tokens per Sec: 23366.938901207497
Epoch Step: 80 / 138 Loss: 201.91966247558594 Tokens per Sec: 25550.865222810033
Epoch Step: 85 / 138 Loss: 13.889006614685059 Tokens per Sec: 23370.931123273123
Epoch Step: 90 / 138 Loss: 16.667686462402344 Tokens per Sec: 24655.39442149413
Epoch Step: 95 / 138 Loss: 12.49594783782959 Tokens per Sec: 23710.39515949742
Epoch Step: 100 / 138 Loss: 16.536540985107422 Tokens per Sec: 23140.301081019647
Epoch Step: 105 / 138 Loss: 18.85732650756836 Tokens per Sec: 22818.073932415457
Epoch Step: 110 / 138 Loss: 14.680782318115234 Tokens per Sec: 23112.488227214722
Epoch Step: 115 / 138 Loss: 14.30489444732666 Tokens per Sec: 23817.25127105092
Epoch Step: 120 / 138 Loss: 11.839466094970703 Tokens per Sec: 24003.999872604054
Epoch Step: 125 / 138 Loss: 14.620275497436523 Tokens per Sec: 22027.892366527307
Epoch Step: 130 / 138 Loss: 11.747461318969727 Tokens per Sec: 22974.903747649638
Epoch Step: 135 / 138 Loss: 13.631767272949219 Tokens per Sec: 20907.16200306766
Epoch ended with duration 0:00:26.755303
Train perplexity: 1.3409748649125663
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.383673
Validation perplexity: 1.7140562435535978
Epoch 104 / 1000
Epoch Step: 5 / 138 Loss: 7.964125633239746 Tokens per Sec: 22952.566236514358
Epoch Step: 10 / 138 Loss: 80.34749603271484 Tokens per Sec: 23431.617298807705
Epoch Step: 15 / 138 Loss: 14.404706954956055 Tokens per Sec: 23534.65328452803
Epoch Step: 20 / 138 Loss: 10.53894329071045 Tokens per Sec: 24184.064141632374
Epoch Step: 25 / 138 Loss: 7.3945112228393555 Tokens per Sec: 23315.258276884357
Epoch Step: 30 / 138 Loss: 7.346833229064941 Tokens per Sec: 26221.830782313624
Epoch Step: 35 / 138 Loss: 14.235374450683594 Tokens per Sec: 24052.13047793216
Epoch Step: 40 / 138 Loss: 10.586526870727539 Tokens per Sec: 21575.912246216343
Epoch Step: 45 / 138 Loss: 10.253721237182617 Tokens per Sec: 26282.079354832153
Epoch Step: 50 / 138 Loss: 9.09846019744873 Tokens per Sec: 26662.805911880117
Epoch Step: 55 / 138 Loss: 12.88833999633789 Tokens per Sec: 25907.75180923841
Epoch Step: 60 / 138 Loss: 16.571773529052734 Tokens per Sec: 25129.592287519452
Epoch Step: 65 / 138 Loss: 17.200637817382812 Tokens per Sec: 24361.80697408523
Epoch Step: 70 / 138 Loss: 66.83202362060547 Tokens per Sec: 21988.97859899391
Epoch Step: 75 / 138 Loss: 11.409682273864746 Tokens per Sec: 24228.407906027758
Epoch Step: 80 / 138 Loss: 9.225422859191895 Tokens per Sec: 24379.673242195888
Epoch Step: 85 / 138 Loss: 17.236011505126953 Tokens per Sec: 21426.110423647755
Epoch Step: 90 / 138 Loss: 11.827442169189453 Tokens per Sec: 25255.594312969642
Epoch Step: 95 / 138 Loss: 187.9656219482422 Tokens per Sec: 24408.37937216778
Epoch Step: 100 / 138 Loss: 12.31441879272461 Tokens per Sec: 25446.427853426387
Epoch Step: 105 / 138 Loss: 265.6429748535156 Tokens per Sec: 20220.21421222895
Epoch Step: 110 / 138 Loss: 12.69023609161377 Tokens per Sec: 22585.29109997637
Epoch Step: 115 / 138 Loss: 17.668750762939453 Tokens per Sec: 23843.021012581812
Epoch Step: 120 / 138 Loss: 10.792326927185059 Tokens per Sec: 24094.696967497344
Epoch Step: 125 / 138 Loss: 13.311999320983887 Tokens per Sec: 23732.45505357677
Epoch Step: 130 / 138 Loss: 14.800284385681152 Tokens per Sec: 24053.6633132811
Epoch Step: 135 / 138 Loss: 9.912026405334473 Tokens per Sec: 22335.599792723657
Epoch ended with duration 0:00:26.717286
Train perplexity: 1.4225147045769513
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.379685
Validation perplexity: 1.2622520922405527
Model saved best_on_validation!
Epoch 105 / 1000
Epoch Step: 5 / 138 Loss: 9.423534393310547 Tokens per Sec: 23442.734088052686
Epoch Step: 10 / 138 Loss: 12.225921630859375 Tokens per Sec: 25050.292526194837
Epoch Step: 15 / 138 Loss: 94.84063720703125 Tokens per Sec: 22359.307188666473
Epoch Step: 20 / 138 Loss: 8.41928482055664 Tokens per Sec: 24864.007424404306
Epoch Step: 25 / 138 Loss: 14.86734390258789 Tokens per Sec: 24140.396776851318
Epoch Step: 30 / 138 Loss: 15.296869277954102 Tokens per Sec: 23054.79390289241
Epoch Step: 35 / 138 Loss: 14.25073528289795 Tokens per Sec: 24254.14017558648
Epoch Step: 40 / 138 Loss: 7.716624736785889 Tokens per Sec: 24545.75801207977
Epoch Step: 45 / 138 Loss: 12.22917366027832 Tokens per Sec: 25353.09368545391
Epoch Step: 50 / 138 Loss: 10.286457061767578 Tokens per Sec: 23693.444170978408
Epoch Step: 55 / 138 Loss: 10.816930770874023 Tokens per Sec: 26226.662585847935
Epoch Step: 60 / 138 Loss: 11.19040298461914 Tokens per Sec: 24317.13233184215
Epoch Step: 65 / 138 Loss: 6.902557849884033 Tokens per Sec: 24292.748810519217
Epoch Step: 70 / 138 Loss: 15.557652473449707 Tokens per Sec: 23776.550832734065
Epoch Step: 75 / 138 Loss: 10.066454887390137 Tokens per Sec: 24856.641463025702
Epoch Step: 80 / 138 Loss: 18.195781707763672 Tokens per Sec: 22159.43064608858
Epoch Step: 85 / 138 Loss: 9.068219184875488 Tokens per Sec: 24247.966231667364
Epoch Step: 90 / 138 Loss: 17.5172176361084 Tokens per Sec: 25277.495251651213
Epoch Step: 95 / 138 Loss: 10.169317245483398 Tokens per Sec: 24513.67583550144
Epoch Step: 100 / 138 Loss: 7.619600296020508 Tokens per Sec: 24789.301600617546
Epoch Step: 105 / 138 Loss: 11.577655792236328 Tokens per Sec: 23172.550680519547
Epoch Step: 110 / 138 Loss: 11.641585350036621 Tokens per Sec: 22032.254713772887
Epoch Step: 115 / 138 Loss: 12.847785949707031 Tokens per Sec: 22162.346298117944
Epoch Step: 120 / 138 Loss: 13.766358375549316 Tokens per Sec: 19830.367354014194
Epoch Step: 125 / 138 Loss: 209.82884216308594 Tokens per Sec: 22933.098231033266
Epoch Step: 130 / 138 Loss: 13.046931266784668 Tokens per Sec: 23718.013616439206
Epoch Step: 135 / 138 Loss: 12.23473834991455 Tokens per Sec: 23367.765568128798
Epoch ended with duration 0:00:26.863985
Train perplexity: 1.3608949631045517
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.394917
Validation perplexity: 1.94649756500531
Model saved checkpoint!
Epoch 106 / 1000
Epoch Step: 5 / 138 Loss: 9.866621971130371 Tokens per Sec: 22711.123382902137
Epoch Step: 10 / 138 Loss: 16.111408233642578 Tokens per Sec: 25730.060343700028
Epoch Step: 15 / 138 Loss: 134.4763946533203 Tokens per Sec: 22515.000042999505
Epoch Step: 20 / 138 Loss: 9.52499771118164 Tokens per Sec: 24957.93473540067
Epoch Step: 25 / 138 Loss: 14.127888679504395 Tokens per Sec: 26083.14773891399
Epoch Step: 30 / 138 Loss: 17.96698570251465 Tokens per Sec: 25731.904966308462
Epoch Step: 35 / 138 Loss: 132.8485107421875 Tokens per Sec: 23792.431856037078
Epoch Step: 40 / 138 Loss: 13.061015129089355 Tokens per Sec: 23349.43810907805
Epoch Step: 45 / 138 Loss: 155.2664794921875 Tokens per Sec: 23254.847866082728
Epoch Step: 50 / 138 Loss: 9.003610610961914 Tokens per Sec: 23926.336442718555
Epoch Step: 55 / 138 Loss: 15.317953109741211 Tokens per Sec: 23360.559561457983
Epoch Step: 60 / 138 Loss: 10.795184135437012 Tokens per Sec: 22205.082321056147
Epoch Step: 65 / 138 Loss: 15.54821491241455 Tokens per Sec: 22950.423812595327
Epoch Step: 70 / 138 Loss: 11.820381164550781 Tokens per Sec: 25041.499841413424
Epoch Step: 75 / 138 Loss: 12.74845027923584 Tokens per Sec: 24493.397995795567
Epoch Step: 80 / 138 Loss: 7.046064853668213 Tokens per Sec: 25102.139330788064
Epoch Step: 85 / 138 Loss: 13.490419387817383 Tokens per Sec: 25240.398986629592
Epoch Step: 90 / 138 Loss: 8.513084411621094 Tokens per Sec: 24141.282414406567
Epoch Step: 95 / 138 Loss: 12.888622283935547 Tokens per Sec: 26480.547051258076
Epoch Step: 100 / 138 Loss: 12.853658676147461 Tokens per Sec: 23727.226960197215
Epoch Step: 105 / 138 Loss: 10.222135543823242 Tokens per Sec: 23998.517972998234
Epoch Step: 110 / 138 Loss: 10.578455924987793 Tokens per Sec: 23055.274653693894
Epoch Step: 115 / 138 Loss: 11.56396484375 Tokens per Sec: 23923.131812168234
Epoch Step: 120 / 138 Loss: 14.106719970703125 Tokens per Sec: 23108.572704637063
Epoch Step: 125 / 138 Loss: 11.036371231079102 Tokens per Sec: 21182.370317476187
Epoch Step: 130 / 138 Loss: 12.56762409210205 Tokens per Sec: 20096.72970758067
Epoch Step: 135 / 138 Loss: 12.529125213623047 Tokens per Sec: 23513.374223990882
Epoch ended with duration 0:00:26.791724
Train perplexity: 1.3454820855623169
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.359611
Validation perplexity: 1.2527202996328877
Model saved best_on_validation!
Epoch 107 / 1000
Epoch Step: 5 / 138 Loss: 10.417521476745605 Tokens per Sec: 25094.629559544184
Epoch Step: 10 / 138 Loss: 9.028536796569824 Tokens per Sec: 26099.483502030358
Epoch Step: 15 / 138 Loss: 10.609819412231445 Tokens per Sec: 26927.322580912383
Epoch Step: 20 / 138 Loss: 8.181434631347656 Tokens per Sec: 26471.42312496349
Epoch Step: 25 / 138 Loss: 12.089548110961914 Tokens per Sec: 27803.905956615283
Epoch Step: 30 / 138 Loss: 13.862384796142578 Tokens per Sec: 26896.697019789826
Epoch Step: 35 / 138 Loss: 10.434341430664062 Tokens per Sec: 24981.408452276915
Epoch Step: 40 / 138 Loss: 11.780598640441895 Tokens per Sec: 26462.625050975978
Epoch Step: 45 / 138 Loss: 13.065879821777344 Tokens per Sec: 23434.526609585093
Epoch Step: 50 / 138 Loss: 16.5373477935791 Tokens per Sec: 25827.355849645613
Epoch Step: 55 / 138 Loss: 11.1005277633667 Tokens per Sec: 24821.63780556522
Epoch Step: 60 / 138 Loss: 9.416702270507812 Tokens per Sec: 26505.4910923159
Epoch Step: 65 / 138 Loss: 12.938373565673828 Tokens per Sec: 25792.204556431425
Epoch Step: 70 / 138 Loss: 13.3872709274292 Tokens per Sec: 24346.699764219513
Epoch Step: 75 / 138 Loss: 16.035030364990234 Tokens per Sec: 25516.26177833137
Epoch Step: 80 / 138 Loss: 9.634510040283203 Tokens per Sec: 27158.01055879328
Epoch Step: 85 / 138 Loss: 15.915275573730469 Tokens per Sec: 26324.147609717766
Epoch Step: 90 / 138 Loss: 12.575695037841797 Tokens per Sec: 26984.73744373478
Epoch Step: 95 / 138 Loss: 10.692739486694336 Tokens per Sec: 26395.203656644724
Epoch Step: 100 / 138 Loss: 14.653143882751465 Tokens per Sec: 25272.7065514296
Epoch Step: 105 / 138 Loss: 11.595734596252441 Tokens per Sec: 24526.062002279712
Epoch Step: 110 / 138 Loss: 12.893649101257324 Tokens per Sec: 24164.02071816396
Epoch Step: 115 / 138 Loss: 11.920514106750488 Tokens per Sec: 25466.005053862886
Epoch Step: 120 / 138 Loss: 10.828742980957031 Tokens per Sec: 24024.631908672105
Epoch Step: 125 / 138 Loss: 13.787761688232422 Tokens per Sec: 22048.19782260899
Epoch Step: 130 / 138 Loss: 14.465503692626953 Tokens per Sec: 24640.76339741199
Epoch Step: 135 / 138 Loss: 11.524832725524902 Tokens per Sec: 23254.35726589656
Epoch ended with duration 0:00:25.116830
Train perplexity: 1.31342987584928
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] data , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.222256
Validation perplexity: 1.48912840394826
Epoch 108 / 1000
Epoch Step: 5 / 138 Loss: 10.344147682189941 Tokens per Sec: 24995.481217806606
Epoch Step: 10 / 138 Loss: 19.433368682861328 Tokens per Sec: 27948.06777913943
Epoch Step: 15 / 138 Loss: 9.349496841430664 Tokens per Sec: 27202.361490065894
Epoch Step: 20 / 138 Loss: 10.157037734985352 Tokens per Sec: 25468.17403285916
Epoch Step: 25 / 138 Loss: 16.53849983215332 Tokens per Sec: 26097.72510934766
Epoch Step: 30 / 138 Loss: 14.08260440826416 Tokens per Sec: 26132.28458645659
Epoch Step: 35 / 138 Loss: 9.408567428588867 Tokens per Sec: 24410.060457611165
Epoch Step: 40 / 138 Loss: 12.389336585998535 Tokens per Sec: 27152.593898822604
Epoch Step: 45 / 138 Loss: 20.643991470336914 Tokens per Sec: 25275.60246445929
Epoch Step: 50 / 138 Loss: 16.415950775146484 Tokens per Sec: 27516.924225543906
Epoch Step: 55 / 138 Loss: 19.68526840209961 Tokens per Sec: 22821.83758734905
Epoch Step: 60 / 138 Loss: 19.474824905395508 Tokens per Sec: 26591.19344589434
Epoch Step: 65 / 138 Loss: 12.227734565734863 Tokens per Sec: 25692.262818377225
Epoch Step: 70 / 138 Loss: 8.171182632446289 Tokens per Sec: 28006.52819646746
Epoch Step: 75 / 138 Loss: 9.155585289001465 Tokens per Sec: 24719.881638020168
Epoch Step: 80 / 138 Loss: 13.648515701293945 Tokens per Sec: 24971.601164305677
Epoch Step: 85 / 138 Loss: 14.859251022338867 Tokens per Sec: 25307.24417313953
Epoch Step: 90 / 138 Loss: 12.767460823059082 Tokens per Sec: 23881.622568903138
Epoch Step: 95 / 138 Loss: 11.804719924926758 Tokens per Sec: 27441.565732962223
Epoch Step: 100 / 138 Loss: 13.698108673095703 Tokens per Sec: 25171.02314469252
Epoch Step: 105 / 138 Loss: 9.203052520751953 Tokens per Sec: 24600.273128939527
Epoch Step: 110 / 138 Loss: 137.1536865234375 Tokens per Sec: 21543.015170816445
Epoch Step: 115 / 138 Loss: 11.478890419006348 Tokens per Sec: 22891.766881039523
Epoch Step: 120 / 138 Loss: 13.03246784210205 Tokens per Sec: 24050.744771900732
Epoch Step: 125 / 138 Loss: 15.366827011108398 Tokens per Sec: 25345.36267318512
Epoch Step: 130 / 138 Loss: 10.811407089233398 Tokens per Sec: 24775.411498401372
Epoch Step: 135 / 138 Loss: 9.530447959899902 Tokens per Sec: 22539.42501762511
Epoch ended with duration 0:00:25.299459
Train perplexity: 1.5105419010415133
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.206205
Validation perplexity: 1.3895741333712355
Epoch 109 / 1000
Epoch Step: 5 / 138 Loss: 9.240583419799805 Tokens per Sec: 26467.30955024099
Epoch Step: 10 / 138 Loss: 10.998608589172363 Tokens per Sec: 25518.679037177066
Epoch Step: 15 / 138 Loss: 10.742000579833984 Tokens per Sec: 28136.034430491585
Epoch Step: 20 / 138 Loss: 13.707036018371582 Tokens per Sec: 26388.40837501121
Epoch Step: 25 / 138 Loss: 147.91766357421875 Tokens per Sec: 23780.153690172796
Epoch Step: 30 / 138 Loss: 14.938232421875 Tokens per Sec: 26798.975068151125
Epoch Step: 35 / 138 Loss: 21.044639587402344 Tokens per Sec: 25666.73909714741
Epoch Step: 40 / 138 Loss: 121.4135513305664 Tokens per Sec: 26833.842732327244
Epoch Step: 45 / 138 Loss: 15.99194049835205 Tokens per Sec: 24863.651118506146
Epoch Step: 50 / 138 Loss: 20.64920425415039 Tokens per Sec: 24436.98748474627
Epoch Step: 55 / 138 Loss: 16.928783416748047 Tokens per Sec: 24648.883409897076
Epoch Step: 60 / 138 Loss: 15.160173416137695 Tokens per Sec: 25314.29574539817
Epoch Step: 65 / 138 Loss: 12.317658424377441 Tokens per Sec: 24543.985687723125
Epoch Step: 70 / 138 Loss: 12.888337135314941 Tokens per Sec: 26679.079648182404
Epoch Step: 75 / 138 Loss: 18.31612205505371 Tokens per Sec: 25390.442739162285
Epoch Step: 80 / 138 Loss: 13.628448486328125 Tokens per Sec: 26812.173812751913
Epoch Step: 85 / 138 Loss: 6.7511725425720215 Tokens per Sec: 26819.711509013447
Epoch Step: 90 / 138 Loss: 8.939085006713867 Tokens per Sec: 24094.741475286748
Epoch Step: 95 / 138 Loss: 16.907567977905273 Tokens per Sec: 25845.836918644836
Epoch Step: 100 / 138 Loss: 17.688003540039062 Tokens per Sec: 26931.877360773346
Epoch Step: 105 / 138 Loss: 15.245414733886719 Tokens per Sec: 24244.37121143307
Epoch Step: 110 / 138 Loss: 15.43899917602539 Tokens per Sec: 24498.555847572683
Epoch Step: 115 / 138 Loss: 177.91860961914062 Tokens per Sec: 24409.49898882641
Epoch Step: 120 / 138 Loss: 10.717652320861816 Tokens per Sec: 21395.425992270357
Epoch Step: 125 / 138 Loss: 12.290472984313965 Tokens per Sec: 24120.655315699794
Epoch Step: 130 / 138 Loss: 14.115854263305664 Tokens per Sec: 23321.503244967724
Epoch Step: 135 / 138 Loss: 10.067453384399414 Tokens per Sec: 24009.972114231827
Epoch ended with duration 0:00:25.299519
Train perplexity: 1.4516410121170635
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.215137
Validation perplexity: 1.4507182608272624
Epoch 110 / 1000
Epoch Step: 5 / 138 Loss: 17.1699275970459 Tokens per Sec: 25316.531165029064
Epoch Step: 10 / 138 Loss: 7.911860942840576 Tokens per Sec: 26582.083781975587
Epoch Step: 15 / 138 Loss: 12.824183464050293 Tokens per Sec: 24563.632775107977
Epoch Step: 20 / 138 Loss: 16.10466194152832 Tokens per Sec: 25804.958317181863
Epoch Step: 25 / 138 Loss: 14.38353443145752 Tokens per Sec: 26077.758000208287
Epoch Step: 30 / 138 Loss: 13.66666030883789 Tokens per Sec: 25624.4892635835
Epoch Step: 35 / 138 Loss: 13.878721237182617 Tokens per Sec: 24828.18931140471
Epoch Step: 40 / 138 Loss: 14.264749526977539 Tokens per Sec: 24821.81962584915
Epoch Step: 45 / 138 Loss: 12.462469100952148 Tokens per Sec: 24767.767492611572
Epoch Step: 50 / 138 Loss: 12.54675006866455 Tokens per Sec: 25894.379108611713
Epoch Step: 55 / 138 Loss: 119.79475402832031 Tokens per Sec: 26169.177263759942
Epoch Step: 60 / 138 Loss: 9.739124298095703 Tokens per Sec: 25880.022459171836
Epoch Step: 65 / 138 Loss: 9.427871704101562 Tokens per Sec: 26157.117860426428
Epoch Step: 70 / 138 Loss: 15.26168155670166 Tokens per Sec: 23853.16478984065
Epoch Step: 75 / 138 Loss: 15.051562309265137 Tokens per Sec: 26693.38597019714
Epoch Step: 80 / 138 Loss: 6.4382829666137695 Tokens per Sec: 27979.17104712556
Epoch Step: 85 / 138 Loss: 9.848873138427734 Tokens per Sec: 27747.330183238915
Epoch Step: 90 / 138 Loss: 10.423981666564941 Tokens per Sec: 26948.12754545254
Epoch Step: 95 / 138 Loss: 18.97643280029297 Tokens per Sec: 26203.015487829463
Epoch Step: 100 / 138 Loss: 7.657998561859131 Tokens per Sec: 26489.60128682407
Epoch Step: 105 / 138 Loss: 9.857390403747559 Tokens per Sec: 22557.873493955165
Epoch Step: 110 / 138 Loss: 17.77288055419922 Tokens per Sec: 25008.953528294413
Epoch Step: 115 / 138 Loss: 13.334342002868652 Tokens per Sec: 26256.02143825272
Epoch Step: 120 / 138 Loss: 12.108009338378906 Tokens per Sec: 24233.361317974566
Epoch Step: 125 / 138 Loss: 10.512627601623535 Tokens per Sec: 21416.48784556318
Epoch Step: 130 / 138 Loss: 11.103863716125488 Tokens per Sec: 24533.541507898008
Epoch Step: 135 / 138 Loss: 12.575231552124023 Tokens per Sec: 25187.33725404393
Epoch ended with duration 0:00:25.084536
Train perplexity: 1.3518442728194622
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.196773
Validation perplexity: 1.4411627931451694
Model saved checkpoint!
Epoch 111 / 1000
Epoch Step: 5 / 138 Loss: 8.956418991088867 Tokens per Sec: 25378.032197226265
Epoch Step: 10 / 138 Loss: 70.55878448486328 Tokens per Sec: 24965.296377015122
Epoch Step: 15 / 138 Loss: 16.1570987701416 Tokens per Sec: 24638.8602163507
Epoch Step: 20 / 138 Loss: 10.293655395507812 Tokens per Sec: 25282.194031837636
Epoch Step: 25 / 138 Loss: 8.342284202575684 Tokens per Sec: 26547.517500882655
Epoch Step: 30 / 138 Loss: 12.05414867401123 Tokens per Sec: 25428.08660934127
Epoch Step: 35 / 138 Loss: 13.323397636413574 Tokens per Sec: 25904.256452714762
Epoch Step: 40 / 138 Loss: 170.71218872070312 Tokens per Sec: 26021.6031595588
Epoch Step: 45 / 138 Loss: 9.260035514831543 Tokens per Sec: 24908.085489736317
Epoch Step: 50 / 138 Loss: 26.0350341796875 Tokens per Sec: 27711.455973275995
Epoch Step: 55 / 138 Loss: 9.75464916229248 Tokens per Sec: 26116.11992481192
Epoch Step: 60 / 138 Loss: 8.160737037658691 Tokens per Sec: 27514.477665258466
Epoch Step: 65 / 138 Loss: 15.791949272155762 Tokens per Sec: 27084.39330064574
Epoch Step: 70 / 138 Loss: 13.10014533996582 Tokens per Sec: 26971.689839418206
Epoch Step: 75 / 138 Loss: 18.413801193237305 Tokens per Sec: 25637.49463374675
Epoch Step: 80 / 138 Loss: 9.778124809265137 Tokens per Sec: 26051.010564768516
Epoch Step: 85 / 138 Loss: 18.150516510009766 Tokens per Sec: 24832.098364879814
Epoch Step: 90 / 138 Loss: 15.980238914489746 Tokens per Sec: 25751.96224492409
Epoch Step: 95 / 138 Loss: 11.225642204284668 Tokens per Sec: 23577.984473146815
Epoch Step: 100 / 138 Loss: 12.953201293945312 Tokens per Sec: 24422.752748618797
Epoch Step: 105 / 138 Loss: 11.010839462280273 Tokens per Sec: 23603.29924396019
Epoch Step: 110 / 138 Loss: 13.348357200622559 Tokens per Sec: 21981.561923890968
Epoch Step: 115 / 138 Loss: 14.935335159301758 Tokens per Sec: 24996.769698207463
Epoch Step: 120 / 138 Loss: 14.068501472473145 Tokens per Sec: 24734.271471554166
Epoch Step: 125 / 138 Loss: 14.20357608795166 Tokens per Sec: 23933.379272093556
Epoch Step: 130 / 138 Loss: 8.901969909667969 Tokens per Sec: 24555.126508744434
Epoch Step: 135 / 138 Loss: 12.049833297729492 Tokens per Sec: 24612.62802699626
Epoch ended with duration 0:00:25.213140
Train perplexity: 1.4752084758195863
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.205998
Validation perplexity: 1.8931827836043518
Epoch 112 / 1000
Epoch Step: 5 / 138 Loss: 6.854728698730469 Tokens per Sec: 26994.85977735412
Epoch Step: 10 / 138 Loss: 9.10560131072998 Tokens per Sec: 25632.841496425564
Epoch Step: 15 / 138 Loss: 16.437166213989258 Tokens per Sec: 23683.209441517884
Epoch Step: 20 / 138 Loss: 12.128534317016602 Tokens per Sec: 24766.557994391842
Epoch Step: 25 / 138 Loss: 200.80209350585938 Tokens per Sec: 25969.24058962203
Epoch Step: 30 / 138 Loss: 17.711763381958008 Tokens per Sec: 25550.1430349575
Epoch Step: 35 / 138 Loss: 19.009065628051758 Tokens per Sec: 26500.669101544674
Epoch Step: 40 / 138 Loss: 115.87928771972656 Tokens per Sec: 26894.551510454487
Epoch Step: 45 / 138 Loss: 114.74457550048828 Tokens per Sec: 25271.8481545408
Epoch Step: 50 / 138 Loss: 94.93804931640625 Tokens per Sec: 24838.455745586594
Epoch Step: 55 / 138 Loss: 14.237614631652832 Tokens per Sec: 26448.135203497895
Epoch Step: 60 / 138 Loss: 14.549056053161621 Tokens per Sec: 26330.855595145298
Epoch Step: 65 / 138 Loss: 14.190016746520996 Tokens per Sec: 27191.925658605996
Epoch Step: 70 / 138 Loss: 150.08546447753906 Tokens per Sec: 26425.2140062897
Epoch Step: 75 / 138 Loss: 74.95865631103516 Tokens per Sec: 25174.88586464837
Epoch Step: 80 / 138 Loss: 15.557433128356934 Tokens per Sec: 27274.599619165332
Epoch Step: 85 / 138 Loss: 19.68523406982422 Tokens per Sec: 25710.14632245522
Epoch Step: 90 / 138 Loss: 14.939342498779297 Tokens per Sec: 27199.65402542866
Epoch Step: 95 / 138 Loss: 12.386480331420898 Tokens per Sec: 24010.6279005121
Epoch Step: 100 / 138 Loss: 14.410709381103516 Tokens per Sec: 24306.52561772236
Epoch Step: 105 / 138 Loss: 11.887263298034668 Tokens per Sec: 23799.568805107458
Epoch Step: 110 / 138 Loss: 11.994355201721191 Tokens per Sec: 23279.371747230936
Epoch Step: 115 / 138 Loss: 12.07485294342041 Tokens per Sec: 24644.55513059885
Epoch Step: 120 / 138 Loss: 9.553399085998535 Tokens per Sec: 23867.743737093417
Epoch Step: 125 / 138 Loss: 12.461792945861816 Tokens per Sec: 25681.242917741896
Epoch Step: 130 / 138 Loss: 10.447973251342773 Tokens per Sec: 24331.535540215213
Epoch Step: 135 / 138 Loss: 10.950883865356445 Tokens per Sec: 25035.495884146905
Epoch ended with duration 0:00:25.116308
Train perplexity: 1.460440369748998
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { mRS . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.182540
Validation perplexity: 1.258600065156299
Epoch 113 / 1000
Epoch Step: 5 / 138 Loss: 117.80561828613281 Tokens per Sec: 22576.403624913994
Epoch Step: 10 / 138 Loss: 13.75079345703125 Tokens per Sec: 26107.48232798587
Epoch Step: 15 / 138 Loss: 12.412881851196289 Tokens per Sec: 26794.246253951263
Epoch Step: 20 / 138 Loss: 15.579601287841797 Tokens per Sec: 24224.46776886336
Epoch Step: 25 / 138 Loss: 13.706936836242676 Tokens per Sec: 23949.099208546737
Epoch Step: 30 / 138 Loss: 20.518238067626953 Tokens per Sec: 24569.30712114701
Epoch Step: 35 / 138 Loss: 15.224058151245117 Tokens per Sec: 24836.6883642448
Epoch Step: 40 / 138 Loss: 7.621816158294678 Tokens per Sec: 29165.34734529225
Epoch Step: 45 / 138 Loss: 12.399383544921875 Tokens per Sec: 25818.39311715171
Epoch Step: 50 / 138 Loss: 15.62617301940918 Tokens per Sec: 26159.57870801069
Epoch Step: 55 / 138 Loss: 12.907772064208984 Tokens per Sec: 26548.765240475008
Epoch Step: 60 / 138 Loss: 81.4429931640625 Tokens per Sec: 24834.44302799788
Epoch Step: 65 / 138 Loss: 11.256627082824707 Tokens per Sec: 27850.689095329497
Epoch Step: 70 / 138 Loss: 16.911043167114258 Tokens per Sec: 25728.044534409986
Epoch Step: 75 / 138 Loss: 15.160079002380371 Tokens per Sec: 27535.360618510163
Epoch Step: 80 / 138 Loss: 15.441381454467773 Tokens per Sec: 25150.91266899452
Epoch Step: 85 / 138 Loss: 8.184613227844238 Tokens per Sec: 27372.608890668333
Epoch Step: 90 / 138 Loss: 15.886707305908203 Tokens per Sec: 25656.84328935353
Epoch Step: 95 / 138 Loss: 17.44232749938965 Tokens per Sec: 26005.264679905373
Epoch Step: 100 / 138 Loss: 20.576997756958008 Tokens per Sec: 27289.43596983093
Epoch Step: 105 / 138 Loss: 11.823975563049316 Tokens per Sec: 25575.902538683036
Epoch Step: 110 / 138 Loss: 12.793815612792969 Tokens per Sec: 24654.05766613043
Epoch Step: 115 / 138 Loss: 12.176973342895508 Tokens per Sec: 24898.411626578163
Epoch Step: 120 / 138 Loss: 12.639256477355957 Tokens per Sec: 24418.510344386763
Epoch Step: 125 / 138 Loss: 8.294212341308594 Tokens per Sec: 25747.851545912545
Epoch Step: 130 / 138 Loss: 11.63648796081543 Tokens per Sec: 24587.071677776265
Epoch Step: 135 / 138 Loss: 12.417941093444824 Tokens per Sec: 19941.524119941336
Epoch ended with duration 0:00:25.087026
Train perplexity: 1.4151736567796505
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 . = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.218500
Validation perplexity: 1.8022100152906182
Epoch 114 / 1000
Epoch Step: 5 / 138 Loss: 15.66750717163086 Tokens per Sec: 26479.336563530815
Epoch Step: 10 / 138 Loss: 92.25635528564453 Tokens per Sec: 26822.631253217627
Epoch Step: 15 / 138 Loss: 12.82318115234375 Tokens per Sec: 27095.821480029314
Epoch Step: 20 / 138 Loss: 13.900150299072266 Tokens per Sec: 26398.169922777906
Epoch Step: 25 / 138 Loss: 12.900923728942871 Tokens per Sec: 25204.921959625142
Epoch Step: 30 / 138 Loss: 7.204861640930176 Tokens per Sec: 26293.487966057997
Epoch Step: 35 / 138 Loss: 9.606486320495605 Tokens per Sec: 26294.78102843344
Epoch Step: 40 / 138 Loss: 10.01776123046875 Tokens per Sec: 24875.204135552714
Epoch Step: 45 / 138 Loss: 9.023396492004395 Tokens per Sec: 26851.43848695422
Epoch Step: 50 / 138 Loss: 8.92599105834961 Tokens per Sec: 24706.64415180429
Epoch Step: 55 / 138 Loss: 11.243001937866211 Tokens per Sec: 25291.972979753835
Epoch Step: 60 / 138 Loss: 16.116844177246094 Tokens per Sec: 25017.674355857696
Epoch Step: 65 / 138 Loss: 18.99527359008789 Tokens per Sec: 25059.157406698585
Epoch Step: 70 / 138 Loss: 18.6386775970459 Tokens per Sec: 26963.122044644995
Epoch Step: 75 / 138 Loss: 17.037193298339844 Tokens per Sec: 25417.956685714587
Epoch Step: 80 / 138 Loss: 15.713399887084961 Tokens per Sec: 25630.8094829114
Epoch Step: 85 / 138 Loss: 11.427533149719238 Tokens per Sec: 28407.856915314125
Epoch Step: 90 / 138 Loss: 9.155426025390625 Tokens per Sec: 27292.091937308636
Epoch Step: 95 / 138 Loss: 175.8600616455078 Tokens per Sec: 24322.424494911604
Epoch Step: 100 / 138 Loss: 7.543402671813965 Tokens per Sec: 25948.72451550011
Epoch Step: 105 / 138 Loss: 12.338227272033691 Tokens per Sec: 22174.828716183838
Epoch Step: 110 / 138 Loss: 13.220174789428711 Tokens per Sec: 25064.140797077365
Epoch Step: 115 / 138 Loss: 14.2164888381958 Tokens per Sec: 25246.907135867423
Epoch Step: 120 / 138 Loss: 9.192244529724121 Tokens per Sec: 24302.749609889066
Epoch Step: 125 / 138 Loss: 12.933611869812012 Tokens per Sec: 24154.762518542237
Epoch Step: 130 / 138 Loss: 11.433813095092773 Tokens per Sec: 24512.45941554146
Epoch Step: 135 / 138 Loss: 12.334428787231445 Tokens per Sec: 23843.969324524413
Epoch ended with duration 0:00:25.013897
Train perplexity: 1.4481758193771899
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.218424
Validation perplexity: 1.7941924231547666
Epoch 115 / 1000
Epoch Step: 5 / 138 Loss: 112.3843765258789 Tokens per Sec: 25576.80170708017
Epoch Step: 10 / 138 Loss: 14.77700424194336 Tokens per Sec: 25197.928238619774
Epoch Step: 15 / 138 Loss: 17.394582748413086 Tokens per Sec: 27003.64497252661
Epoch Step: 20 / 138 Loss: 15.03987979888916 Tokens per Sec: 22251.22204135564
Epoch Step: 25 / 138 Loss: 10.451468467712402 Tokens per Sec: 24322.086164304797
Epoch Step: 30 / 138 Loss: 9.592855453491211 Tokens per Sec: 25488.813844556058
Epoch Step: 35 / 138 Loss: 11.995688438415527 Tokens per Sec: 24274.272634490968
Epoch Step: 40 / 138 Loss: 13.529244422912598 Tokens per Sec: 25447.235188530056
Epoch Step: 45 / 138 Loss: 12.387948989868164 Tokens per Sec: 26342.504244238462
Epoch Step: 50 / 138 Loss: 10.149386405944824 Tokens per Sec: 28199.546153132243
Epoch Step: 55 / 138 Loss: 8.55178165435791 Tokens per Sec: 26554.396295213624
Epoch Step: 60 / 138 Loss: 14.655179023742676 Tokens per Sec: 27096.38968261674
Epoch Step: 65 / 138 Loss: 13.192861557006836 Tokens per Sec: 26629.871677573086
Epoch Step: 70 / 138 Loss: 11.263145446777344 Tokens per Sec: 25798.06392643855
Epoch Step: 75 / 138 Loss: 15.331302642822266 Tokens per Sec: 26846.183652737407
Epoch Step: 80 / 138 Loss: 7.13006067276001 Tokens per Sec: 24887.357330331444
Epoch Step: 85 / 138 Loss: 10.894135475158691 Tokens per Sec: 28108.782731433657
Epoch Step: 90 / 138 Loss: 8.113572120666504 Tokens per Sec: 25922.44940644643
Epoch Step: 95 / 138 Loss: 9.367741584777832 Tokens per Sec: 25329.380796394955
Epoch Step: 100 / 138 Loss: 12.737832069396973 Tokens per Sec: 26117.9831965262
Epoch Step: 105 / 138 Loss: 9.43978500366211 Tokens per Sec: 24447.619002436393
Epoch Step: 110 / 138 Loss: 76.08560180664062 Tokens per Sec: 21309.759175168172
Epoch Step: 115 / 138 Loss: 13.624670028686523 Tokens per Sec: 25301.006136997137
Epoch Step: 120 / 138 Loss: 11.996193885803223 Tokens per Sec: 24276.691207977114
Epoch Step: 125 / 138 Loss: 10.799710273742676 Tokens per Sec: 23456.579276279983
Epoch Step: 130 / 138 Loss: 7.236629962921143 Tokens per Sec: 25471.127471211366
Epoch Step: 135 / 138 Loss: 11.387569427490234 Tokens per Sec: 25498.097826871202
Epoch ended with duration 0:00:25.084425
Train perplexity: 1.333301728205746
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.197256
Validation perplexity: 1.6249103169301065
Model saved checkpoint!
Epoch 116 / 1000
Epoch Step: 5 / 138 Loss: 11.886922836303711 Tokens per Sec: 26247.4741455916
Epoch Step: 10 / 138 Loss: 6.7557196617126465 Tokens per Sec: 27478.825076444817
Epoch Step: 15 / 138 Loss: 14.023605346679688 Tokens per Sec: 27681.41263797165
Epoch Step: 20 / 138 Loss: 75.97608184814453 Tokens per Sec: 25556.24598945857
Epoch Step: 25 / 138 Loss: 196.85691833496094 Tokens per Sec: 26913.280888210396
Epoch Step: 30 / 138 Loss: 9.407169342041016 Tokens per Sec: 24032.18721361211
Epoch Step: 35 / 138 Loss: 12.234369277954102 Tokens per Sec: 26453.792533683605
Epoch Step: 40 / 138 Loss: 7.491635799407959 Tokens per Sec: 24445.549998308834
Epoch Step: 45 / 138 Loss: 12.300443649291992 Tokens per Sec: 25546.937825716417
Epoch Step: 50 / 138 Loss: 14.04768180847168 Tokens per Sec: 25034.87977222101
Epoch Step: 55 / 138 Loss: 9.932328224182129 Tokens per Sec: 24679.622982470337
Epoch Step: 60 / 138 Loss: 14.878026962280273 Tokens per Sec: 26181.536006701233
Epoch Step: 65 / 138 Loss: 12.436334609985352 Tokens per Sec: 25296.66602180266
Epoch Step: 70 / 138 Loss: 8.359091758728027 Tokens per Sec: 25553.56108980887
Epoch Step: 75 / 138 Loss: 8.145729064941406 Tokens per Sec: 26299.028583832514
Epoch Step: 80 / 138 Loss: 110.5094985961914 Tokens per Sec: 26548.029304558837
Epoch Step: 85 / 138 Loss: 137.48374938964844 Tokens per Sec: 28302.472416078854
Epoch Step: 90 / 138 Loss: 15.647921562194824 Tokens per Sec: 27277.850329331293
Epoch Step: 95 / 138 Loss: 7.404397964477539 Tokens per Sec: 26978.96085238205
Epoch Step: 100 / 138 Loss: 203.62107849121094 Tokens per Sec: 23482.116877501758
Epoch Step: 105 / 138 Loss: 16.72134780883789 Tokens per Sec: 24245.41446896992
Epoch Step: 110 / 138 Loss: 19.2112979888916 Tokens per Sec: 21420.024943202996
Epoch Step: 115 / 138 Loss: 13.124228477478027 Tokens per Sec: 23161.46767072652
Epoch Step: 120 / 138 Loss: 15.429051399230957 Tokens per Sec: 23657.199648284874
Epoch Step: 125 / 138 Loss: 10.183178901672363 Tokens per Sec: 25035.520318664985
Epoch Step: 130 / 138 Loss: 12.493072509765625 Tokens per Sec: 24822.077161794037
Epoch Step: 135 / 138 Loss: 10.228642463684082 Tokens per Sec: 24534.203514137076
Epoch ended with duration 0:00:25.141227
Train perplexity: 1.4302591221665801
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) boolean TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.203376
Validation perplexity: 1.4698060715662695
Epoch 117 / 1000
Epoch Step: 5 / 138 Loss: 10.811159133911133 Tokens per Sec: 23857.76792993817
Epoch Step: 10 / 138 Loss: 13.829358100891113 Tokens per Sec: 24538.953227285663
Epoch Step: 15 / 138 Loss: 13.318907737731934 Tokens per Sec: 24559.853794259416
Epoch Step: 20 / 138 Loss: 52.00861358642578 Tokens per Sec: 28344.6023930925
Epoch Step: 25 / 138 Loss: 12.875765800476074 Tokens per Sec: 25240.51779040906
Epoch Step: 30 / 138 Loss: 16.14907455444336 Tokens per Sec: 26292.223797174574
Epoch Step: 35 / 138 Loss: 7.725704669952393 Tokens per Sec: 26185.28995252127
Epoch Step: 40 / 138 Loss: 177.21865844726562 Tokens per Sec: 26394.50662348958
Epoch Step: 45 / 138 Loss: 11.748387336730957 Tokens per Sec: 27644.186822975094
Epoch Step: 50 / 138 Loss: 10.131457328796387 Tokens per Sec: 26502.84585410858
Epoch Step: 55 / 138 Loss: 11.966259002685547 Tokens per Sec: 26447.194109491935
Epoch Step: 60 / 138 Loss: 6.5942277908325195 Tokens per Sec: 27245.7398838921
Epoch Step: 65 / 138 Loss: 13.517034530639648 Tokens per Sec: 25049.80528910501
Epoch Step: 70 / 138 Loss: 8.82477855682373 Tokens per Sec: 27039.12118761637
Epoch Step: 75 / 138 Loss: 80.38728332519531 Tokens per Sec: 25955.434068919385
Epoch Step: 80 / 138 Loss: 10.276541709899902 Tokens per Sec: 26761.80512262755
Epoch Step: 85 / 138 Loss: 15.836820602416992 Tokens per Sec: 24713.069297534446
Epoch Step: 90 / 138 Loss: 8.96052074432373 Tokens per Sec: 26084.70391812034
Epoch Step: 95 / 138 Loss: 21.126480102539062 Tokens per Sec: 25220.906670106226
Epoch Step: 100 / 138 Loss: 6.97306489944458 Tokens per Sec: 26496.918595971092
Epoch Step: 105 / 138 Loss: 14.501787185668945 Tokens per Sec: 21420.31573326876
Epoch Step: 110 / 138 Loss: 9.512292861938477 Tokens per Sec: 25050.401813767807
Epoch Step: 115 / 138 Loss: 10.527932167053223 Tokens per Sec: 26276.764799546076
Epoch Step: 120 / 138 Loss: 9.944550514221191 Tokens per Sec: 24569.000654604817
Epoch Step: 125 / 138 Loss: 10.867391586303711 Tokens per Sec: 24260.9032579512
Epoch Step: 130 / 138 Loss: 8.302311897277832 Tokens per Sec: 24213.84811270831
Epoch Step: 135 / 138 Loss: 13.967248916625977 Tokens per Sec: 25301.09456821728
Epoch ended with duration 0:00:24.990865
Train perplexity: 1.3664072208665718
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.195164
Validation perplexity: 1.2551444513620718
Epoch 118 / 1000
Epoch Step: 5 / 138 Loss: 12.677791595458984 Tokens per Sec: 25628.083557317637
Epoch Step: 10 / 138 Loss: 10.194547653198242 Tokens per Sec: 25040.770665575008
Epoch Step: 15 / 138 Loss: 12.185647964477539 Tokens per Sec: 26882.26029278236
Epoch Step: 20 / 138 Loss: 171.43145751953125 Tokens per Sec: 26038.683418257235
Epoch Step: 25 / 138 Loss: 12.954683303833008 Tokens per Sec: 25581.579532787247
Epoch Step: 30 / 138 Loss: 9.448639869689941 Tokens per Sec: 25991.632313686736
Epoch Step: 35 / 138 Loss: 11.22714900970459 Tokens per Sec: 25064.70752012429
Epoch Step: 40 / 138 Loss: 8.684593200683594 Tokens per Sec: 26323.857193965632
Epoch Step: 45 / 138 Loss: 11.717413902282715 Tokens per Sec: 25335.32760968437
Epoch Step: 50 / 138 Loss: 8.234373092651367 Tokens per Sec: 25579.026727747703
Epoch Step: 55 / 138 Loss: 9.807528495788574 Tokens per Sec: 29055.12489544931
Epoch Step: 60 / 138 Loss: 14.031484603881836 Tokens per Sec: 26637.72686210251
Epoch Step: 65 / 138 Loss: 12.366561889648438 Tokens per Sec: 25779.659839448967
Epoch Step: 70 / 138 Loss: 13.372875213623047 Tokens per Sec: 26515.792537273395
Epoch Step: 75 / 138 Loss: 8.295401573181152 Tokens per Sec: 24958.823035222395
Epoch Step: 80 / 138 Loss: 160.27793884277344 Tokens per Sec: 24803.648077177455
Epoch Step: 85 / 138 Loss: 20.20476722717285 Tokens per Sec: 26560.816595702905
Epoch Step: 90 / 138 Loss: 138.67454528808594 Tokens per Sec: 24946.31940308704
Epoch Step: 95 / 138 Loss: 50.11138153076172 Tokens per Sec: 26209.32466840815
Epoch Step: 100 / 138 Loss: 96.65220642089844 Tokens per Sec: 25853.94361557061
Epoch Step: 105 / 138 Loss: 172.9521484375 Tokens per Sec: 23736.7658204026
Epoch Step: 110 / 138 Loss: 13.806884765625 Tokens per Sec: 27010.05469274642
Epoch Step: 115 / 138 Loss: 13.512089729309082 Tokens per Sec: 24335.943564831286
Epoch Step: 120 / 138 Loss: 10.512880325317383 Tokens per Sec: 24971.824621657106
Epoch Step: 125 / 138 Loss: 14.719897270202637 Tokens per Sec: 24081.734504878907
Epoch Step: 130 / 138 Loss: 10.826729774475098 Tokens per Sec: 25148.51029189598
Epoch Step: 135 / 138 Loss: 10.624369621276855 Tokens per Sec: 20804.436037336047
Epoch ended with duration 0:00:25.052801
Train perplexity: 1.4388704622939557
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.188498
Validation perplexity: 1.3945261539527694
Epoch 119 / 1000
Epoch Step: 5 / 138 Loss: 7.11129093170166 Tokens per Sec: 24233.581535488436
Epoch Step: 10 / 138 Loss: 5.990156173706055 Tokens per Sec: 25683.113319692096
Epoch Step: 15 / 138 Loss: 12.504268646240234 Tokens per Sec: 24491.79945819063
Epoch Step: 20 / 138 Loss: 12.313095092773438 Tokens per Sec: 24579.31016007364
Epoch Step: 25 / 138 Loss: 8.949901580810547 Tokens per Sec: 24064.644683977287
Epoch Step: 30 / 138 Loss: 14.409737586975098 Tokens per Sec: 26665.312310537192
Epoch Step: 35 / 138 Loss: 12.532238006591797 Tokens per Sec: 26345.02669659564
Epoch Step: 40 / 138 Loss: 13.693690299987793 Tokens per Sec: 27534.744333286588
Epoch Step: 45 / 138 Loss: 10.218162536621094 Tokens per Sec: 25109.29153156177
Epoch Step: 50 / 138 Loss: 11.524600982666016 Tokens per Sec: 27109.12474131184
Epoch Step: 55 / 138 Loss: 12.103468894958496 Tokens per Sec: 26102.118922841903
Epoch Step: 60 / 138 Loss: 80.1341552734375 Tokens per Sec: 25026.46553563746
Epoch Step: 65 / 138 Loss: 11.522626876831055 Tokens per Sec: 29178.597014960575
Epoch Step: 70 / 138 Loss: 15.665203094482422 Tokens per Sec: 24629.701037053186
Epoch Step: 75 / 138 Loss: 16.543794631958008 Tokens per Sec: 27248.741307106073
Epoch Step: 80 / 138 Loss: 9.412888526916504 Tokens per Sec: 26270.205972091495
Epoch Step: 85 / 138 Loss: 9.537672996520996 Tokens per Sec: 25931.76571226211
Epoch Step: 90 / 138 Loss: 18.354408264160156 Tokens per Sec: 24643.452186584233
Epoch Step: 95 / 138 Loss: 9.216650009155273 Tokens per Sec: 26920.45891113571
Epoch Step: 100 / 138 Loss: 115.74468231201172 Tokens per Sec: 24597.743054622388
Epoch Step: 105 / 138 Loss: 12.198378562927246 Tokens per Sec: 25235.612935773806
Epoch Step: 110 / 138 Loss: 15.962733268737793 Tokens per Sec: 22090.21404276945
Epoch Step: 115 / 138 Loss: 59.77762985229492 Tokens per Sec: 25322.97653866866
Epoch Step: 120 / 138 Loss: 8.93488597869873 Tokens per Sec: 25117.975057451065
Epoch Step: 125 / 138 Loss: 15.483461380004883 Tokens per Sec: 26007.8320997376
Epoch Step: 130 / 138 Loss: 13.318361282348633 Tokens per Sec: 25061.431555784555
Epoch Step: 135 / 138 Loss: 13.299516677856445 Tokens per Sec: 24403.275795247144
Epoch ended with duration 0:00:25.041709
Train perplexity: 1.4435131800543335
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 u = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.205881
Validation perplexity: 1.69878786516168
Epoch 120 / 1000
Epoch Step: 5 / 138 Loss: 72.08016967773438 Tokens per Sec: 24494.653216679297
Epoch Step: 10 / 138 Loss: 9.538464546203613 Tokens per Sec: 25319.536677209562
Epoch Step: 15 / 138 Loss: 15.087346076965332 Tokens per Sec: 24540.852834323403
Epoch Step: 20 / 138 Loss: 14.875222206115723 Tokens per Sec: 26050.79736460717
Epoch Step: 25 / 138 Loss: 12.977923393249512 Tokens per Sec: 27465.489071458018
Epoch Step: 30 / 138 Loss: 10.955945014953613 Tokens per Sec: 26121.696038124774
Epoch Step: 35 / 138 Loss: 5.595839500427246 Tokens per Sec: 26245.09402400135
Epoch Step: 40 / 138 Loss: 111.66079711914062 Tokens per Sec: 24762.97167088014
Epoch Step: 45 / 138 Loss: 10.026139259338379 Tokens per Sec: 26770.492867091103
Epoch Step: 50 / 138 Loss: 177.3762664794922 Tokens per Sec: 25824.97139563318
Epoch Step: 55 / 138 Loss: 11.685250282287598 Tokens per Sec: 26123.561206127815
Epoch Step: 60 / 138 Loss: 10.301483154296875 Tokens per Sec: 26794.22048712976
Epoch Step: 65 / 138 Loss: 13.123941421508789 Tokens per Sec: 26185.64369072704
Epoch Step: 70 / 138 Loss: 8.04731559753418 Tokens per Sec: 24350.70550787248
Epoch Step: 75 / 138 Loss: 10.27988338470459 Tokens per Sec: 24499.62570874082
Epoch Step: 80 / 138 Loss: 9.391429901123047 Tokens per Sec: 27171.51073725663
Epoch Step: 85 / 138 Loss: 8.171838760375977 Tokens per Sec: 25845.29567560341
Epoch Step: 90 / 138 Loss: 12.626960754394531 Tokens per Sec: 24628.789676212993
Epoch Step: 95 / 138 Loss: 13.190085411071777 Tokens per Sec: 27168.893439284016
Epoch Step: 100 / 138 Loss: 8.200854301452637 Tokens per Sec: 29028.634846696248
Epoch Step: 105 / 138 Loss: 11.19068717956543 Tokens per Sec: 22195.891905555225
Epoch Step: 110 / 138 Loss: 9.856616973876953 Tokens per Sec: 23412.02124114554
Epoch Step: 115 / 138 Loss: 8.956341743469238 Tokens per Sec: 21662.98176186321
Epoch Step: 120 / 138 Loss: 11.1996431350708 Tokens per Sec: 24555.23471846184
Epoch Step: 125 / 138 Loss: 11.515169143676758 Tokens per Sec: 25059.311675175108
Epoch Step: 130 / 138 Loss: 11.426228523254395 Tokens per Sec: 25098.260361956687
Epoch Step: 135 / 138 Loss: 7.537013053894043 Tokens per Sec: 24003.759452059945
Epoch ended with duration 0:00:25.146266
Train perplexity: 1.3251910544700238
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.188238
Validation perplexity: 1.4443846983895554
Model saved checkpoint!
Epoch 121 / 1000
Epoch Step: 5 / 138 Loss: 9.458456039428711 Tokens per Sec: 25140.967322047985
Epoch Step: 10 / 138 Loss: 8.852886199951172 Tokens per Sec: 26167.33232318809
Epoch Step: 15 / 138 Loss: 94.45172119140625 Tokens per Sec: 25677.43772963219
Epoch Step: 20 / 138 Loss: 9.12409782409668 Tokens per Sec: 26168.8796377015
Epoch Step: 25 / 138 Loss: 9.818917274475098 Tokens per Sec: 26961.69979887456
Epoch Step: 30 / 138 Loss: 16.169382095336914 Tokens per Sec: 25813.859968752648
Epoch Step: 35 / 138 Loss: 14.445968627929688 Tokens per Sec: 24671.00915529944
Epoch Step: 40 / 138 Loss: 12.26260757446289 Tokens per Sec: 26222.88468543924
Epoch Step: 45 / 138 Loss: 13.824600219726562 Tokens per Sec: 25408.536933600793
Epoch Step: 50 / 138 Loss: 14.169113159179688 Tokens per Sec: 26414.94457335264
Epoch Step: 55 / 138 Loss: 7.103903770446777 Tokens per Sec: 25737.137442682866
Epoch Step: 60 / 138 Loss: 12.635169982910156 Tokens per Sec: 26471.955609055098
Epoch Step: 65 / 138 Loss: 15.737545013427734 Tokens per Sec: 24527.481916053
Epoch Step: 70 / 138 Loss: 8.299399375915527 Tokens per Sec: 26504.520522893137
Epoch Step: 75 / 138 Loss: 9.83784294128418 Tokens per Sec: 25386.841925116238
Epoch Step: 80 / 138 Loss: 10.585885047912598 Tokens per Sec: 25512.48299342195
Epoch Step: 85 / 138 Loss: 10.354433059692383 Tokens per Sec: 25875.94955295714
Epoch Step: 90 / 138 Loss: 8.170206069946289 Tokens per Sec: 28576.15973245886
Epoch Step: 95 / 138 Loss: 9.544745445251465 Tokens per Sec: 24871.524042013898
Epoch Step: 100 / 138 Loss: 7.392516613006592 Tokens per Sec: 26458.868780351557
Epoch Step: 105 / 138 Loss: 11.556831359863281 Tokens per Sec: 24441.085336001477
Epoch Step: 110 / 138 Loss: 10.61838150024414 Tokens per Sec: 21339.40807012378
Epoch Step: 115 / 138 Loss: 11.188193321228027 Tokens per Sec: 24301.65258003856
Epoch Step: 120 / 138 Loss: 13.139598846435547 Tokens per Sec: 25978.523363524608
Epoch Step: 125 / 138 Loss: 10.54104995727539 Tokens per Sec: 23795.40920494825
Epoch Step: 130 / 138 Loss: 9.622161865234375 Tokens per Sec: 23836.458519514355
Epoch Step: 135 / 138 Loss: 10.322227478027344 Tokens per Sec: 25220.80670187098
Epoch ended with duration 0:00:25.070751
Train perplexity: 1.2730294517807044
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.196335
Validation perplexity: 1.5560545233009155
Epoch 122 / 1000
Epoch Step: 5 / 138 Loss: 15.211262702941895 Tokens per Sec: 25531.192779561865
Epoch Step: 10 / 138 Loss: 15.233613967895508 Tokens per Sec: 25322.427019337345
Epoch Step: 15 / 138 Loss: 12.372695922851562 Tokens per Sec: 26212.218733058828
Epoch Step: 20 / 138 Loss: 10.28650188446045 Tokens per Sec: 27628.447580025706
Epoch Step: 25 / 138 Loss: 13.348860740661621 Tokens per Sec: 25359.212819641634
Epoch Step: 30 / 138 Loss: 145.389892578125 Tokens per Sec: 23373.555790898845
Epoch Step: 35 / 138 Loss: 79.82122039794922 Tokens per Sec: 28399.957577602116
Epoch Step: 40 / 138 Loss: 11.181714057922363 Tokens per Sec: 23767.651923291
Epoch Step: 45 / 138 Loss: 78.92326354980469 Tokens per Sec: 25598.37764351386
Epoch Step: 50 / 138 Loss: 11.356840133666992 Tokens per Sec: 26096.799047229008
Epoch Step: 55 / 138 Loss: 11.71291446685791 Tokens per Sec: 25334.577902590263
Epoch Step: 60 / 138 Loss: 19.458417892456055 Tokens per Sec: 26705.677447555536
Epoch Step: 65 / 138 Loss: 9.277104377746582 Tokens per Sec: 25950.12788727916
Epoch Step: 70 / 138 Loss: 14.95523738861084 Tokens per Sec: 25397.965403467282
Epoch Step: 75 / 138 Loss: 12.266678810119629 Tokens per Sec: 25651.714457641338
Epoch Step: 80 / 138 Loss: 20.32343101501465 Tokens per Sec: 27179.82233689073
Epoch Step: 85 / 138 Loss: 14.361809730529785 Tokens per Sec: 27228.293656280257
Epoch Step: 90 / 138 Loss: 12.9633150100708 Tokens per Sec: 24720.156487818404
Epoch Step: 95 / 138 Loss: 9.04220199584961 Tokens per Sec: 25225.076002361548
Epoch Step: 100 / 138 Loss: 9.977705955505371 Tokens per Sec: 24936.371091408688
Epoch Step: 105 / 138 Loss: 11.312999725341797 Tokens per Sec: 23589.440119452636
Epoch Step: 110 / 138 Loss: 16.246078491210938 Tokens per Sec: 24974.313253023636
Epoch Step: 115 / 138 Loss: 15.374438285827637 Tokens per Sec: 23952.41204525515
Epoch Step: 120 / 138 Loss: 9.92536449432373 Tokens per Sec: 22413.748236789947
Epoch Step: 125 / 138 Loss: 8.236207962036133 Tokens per Sec: 25020.823474344084
Epoch Step: 130 / 138 Loss: 10.436262130737305 Tokens per Sec: 24442.791057166327
Epoch Step: 135 / 138 Loss: 6.918261528015137 Tokens per Sec: 25242.703824162643
Epoch ended with duration 0:00:25.166874
Train perplexity: 1.4338793813987554
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.199341
Validation perplexity: 1.3603650936367246
Epoch 123 / 1000
Epoch Step: 5 / 138 Loss: 16.649459838867188 Tokens per Sec: 24630.055386656226
Epoch Step: 10 / 138 Loss: 11.711837768554688 Tokens per Sec: 25594.307481248747
Epoch Step: 15 / 138 Loss: 10.939542770385742 Tokens per Sec: 25710.43358902911
Epoch Step: 20 / 138 Loss: 13.726659774780273 Tokens per Sec: 24525.28971997989
Epoch Step: 25 / 138 Loss: 14.177164077758789 Tokens per Sec: 24728.364289196328
Epoch Step: 30 / 138 Loss: 10.614717483520508 Tokens per Sec: 24795.562610751662
Epoch Step: 35 / 138 Loss: 9.460809707641602 Tokens per Sec: 26979.52769508815
Epoch Step: 40 / 138 Loss: 12.466545104980469 Tokens per Sec: 25598.065120246185
Epoch Step: 45 / 138 Loss: 6.966027736663818 Tokens per Sec: 24908.479506003507
Epoch Step: 50 / 138 Loss: 8.031146049499512 Tokens per Sec: 28496.540710217298
Epoch Step: 55 / 138 Loss: 13.298279762268066 Tokens per Sec: 24824.348005868207
Epoch Step: 60 / 138 Loss: 15.715826034545898 Tokens per Sec: 26835.192000616596
Epoch Step: 65 / 138 Loss: 143.78541564941406 Tokens per Sec: 25893.938633971702
Epoch Step: 70 / 138 Loss: 12.418378829956055 Tokens per Sec: 26134.5068775944
Epoch Step: 75 / 138 Loss: 16.13898468017578 Tokens per Sec: 25201.695858586725
Epoch Step: 80 / 138 Loss: 11.66175651550293 Tokens per Sec: 27339.89439815393
Epoch Step: 85 / 138 Loss: 6.945593357086182 Tokens per Sec: 26540.23382347819
Epoch Step: 90 / 138 Loss: 7.19381856918335 Tokens per Sec: 28389.54685979445
Epoch Step: 95 / 138 Loss: 8.193456649780273 Tokens per Sec: 24771.46076576149
Epoch Step: 100 / 138 Loss: 85.94312286376953 Tokens per Sec: 26495.769097051394
Epoch Step: 105 / 138 Loss: 17.120651245117188 Tokens per Sec: 24021.521006438506
Epoch Step: 110 / 138 Loss: 11.17502498626709 Tokens per Sec: 25673.632742179863
Epoch Step: 115 / 138 Loss: 9.020454406738281 Tokens per Sec: 22100.924785404684
Epoch Step: 120 / 138 Loss: 10.48077392578125 Tokens per Sec: 24384.21260632177
Epoch Step: 125 / 138 Loss: 11.04902458190918 Tokens per Sec: 23884.781832180037
Epoch Step: 130 / 138 Loss: 11.058524131774902 Tokens per Sec: 25809.20634594382
Epoch Step: 135 / 138 Loss: 8.025566101074219 Tokens per Sec: 24399.890478892245
Epoch ended with duration 0:00:25.029277
Train perplexity: 1.3017916986678213
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.193689
Validation perplexity: 1.4144038278768023
Epoch 124 / 1000
Epoch Step: 5 / 138 Loss: 60.44324493408203 Tokens per Sec: 25906.20987383995
Epoch Step: 10 / 138 Loss: 154.42201232910156 Tokens per Sec: 24676.07281199507
Epoch Step: 15 / 138 Loss: 6.802775859832764 Tokens per Sec: 24791.993842302905
Epoch Step: 20 / 138 Loss: 11.275237083435059 Tokens per Sec: 25105.445028956863
Epoch Step: 25 / 138 Loss: 12.799657821655273 Tokens per Sec: 26344.747127235965
Epoch Step: 30 / 138 Loss: 14.78812026977539 Tokens per Sec: 26327.267876933336
Epoch Step: 35 / 138 Loss: 13.092820167541504 Tokens per Sec: 26540.374961899295
Epoch Step: 40 / 138 Loss: 11.844366073608398 Tokens per Sec: 26615.137661557368
Epoch Step: 45 / 138 Loss: 127.43090057373047 Tokens per Sec: 24231.26792024148
Epoch Step: 50 / 138 Loss: 17.230302810668945 Tokens per Sec: 26533.403309138892
Epoch Step: 55 / 138 Loss: 12.966419219970703 Tokens per Sec: 25908.562585402426
Epoch Step: 60 / 138 Loss: 6.215831756591797 Tokens per Sec: 27465.490021146175
Epoch Step: 65 / 138 Loss: 17.23198699951172 Tokens per Sec: 25671.32696662308
Epoch Step: 70 / 138 Loss: 13.57050609588623 Tokens per Sec: 25428.085828157804
Epoch Step: 75 / 138 Loss: 9.238895416259766 Tokens per Sec: 26736.95443255191
Epoch Step: 80 / 138 Loss: 8.154003143310547 Tokens per Sec: 25202.467038180246
Epoch Step: 85 / 138 Loss: 10.493852615356445 Tokens per Sec: 25681.11702230747
Epoch Step: 90 / 138 Loss: 10.540668487548828 Tokens per Sec: 25617.41242331488
Epoch Step: 95 / 138 Loss: 13.349569320678711 Tokens per Sec: 25984.694390010594
Epoch Step: 100 / 138 Loss: 11.750389099121094 Tokens per Sec: 26178.570186234145
Epoch Step: 105 / 138 Loss: 11.493977546691895 Tokens per Sec: 24280.38440089892
Epoch Step: 110 / 138 Loss: 9.7861967086792 Tokens per Sec: 25513.16054207464
Epoch Step: 115 / 138 Loss: 8.36565113067627 Tokens per Sec: 25032.040753643032
Epoch Step: 120 / 138 Loss: 14.165351867675781 Tokens per Sec: 24104.138531201683
Epoch Step: 125 / 138 Loss: 9.690735816955566 Tokens per Sec: 22504.669727132732
Epoch Step: 130 / 138 Loss: 14.905463218688965 Tokens per Sec: 25461.787824711082
Epoch Step: 135 / 138 Loss: 12.445832252502441 Tokens per Sec: 24560.84502763477
Epoch ended with duration 0:00:25.050399
Train perplexity: 1.409299778140637
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.191449
Validation perplexity: 1.392062512854556
Epoch 125 / 1000
Epoch Step: 5 / 138 Loss: 10.409841537475586 Tokens per Sec: 23877.99489215479
Epoch Step: 10 / 138 Loss: 13.278493881225586 Tokens per Sec: 25924.085353455524
Epoch Step: 15 / 138 Loss: 12.317646026611328 Tokens per Sec: 27086.030432626416
Epoch Step: 20 / 138 Loss: 61.698307037353516 Tokens per Sec: 26146.369068831882
Epoch Step: 25 / 138 Loss: 13.313617706298828 Tokens per Sec: 25179.456482833884
Epoch Step: 30 / 138 Loss: 12.4954195022583 Tokens per Sec: 27327.736081272047
Epoch Step: 35 / 138 Loss: 12.697586059570312 Tokens per Sec: 24997.200722508034
Epoch Step: 40 / 138 Loss: 11.695635795593262 Tokens per Sec: 27575.15656323035
Epoch Step: 45 / 138 Loss: 12.107853889465332 Tokens per Sec: 23762.163616382873
Epoch Step: 50 / 138 Loss: 10.934370040893555 Tokens per Sec: 26676.638542855297
Epoch Step: 55 / 138 Loss: 8.681918144226074 Tokens per Sec: 24593.864302180802
Epoch Step: 60 / 138 Loss: 9.324906349182129 Tokens per Sec: 26083.2435487576
Epoch Step: 65 / 138 Loss: 11.783747673034668 Tokens per Sec: 28473.331822886645
Epoch Step: 70 / 138 Loss: 6.461653709411621 Tokens per Sec: 28012.844470613414
Epoch Step: 75 / 138 Loss: 12.61628246307373 Tokens per Sec: 25574.778636362487
Epoch Step: 80 / 138 Loss: 12.626228332519531 Tokens per Sec: 24314.061957477596
Epoch Step: 85 / 138 Loss: 7.112771987915039 Tokens per Sec: 25919.310879540702
Epoch Step: 90 / 138 Loss: 11.455944061279297 Tokens per Sec: 25202.818252041154
Epoch Step: 95 / 138 Loss: 10.231054306030273 Tokens per Sec: 27255.743800362165
Epoch Step: 100 / 138 Loss: 79.58472442626953 Tokens per Sec: 24305.931851566656
Epoch Step: 105 / 138 Loss: 14.254907608032227 Tokens per Sec: 25154.619651870464
Epoch Step: 110 / 138 Loss: 14.261799812316895 Tokens per Sec: 24665.37132768426
Epoch Step: 115 / 138 Loss: 8.347295761108398 Tokens per Sec: 25093.078262206876
Epoch Step: 120 / 138 Loss: 8.145508766174316 Tokens per Sec: 22537.333820202315
Epoch Step: 125 / 138 Loss: 9.577754020690918 Tokens per Sec: 24305.650199261923
Epoch Step: 130 / 138 Loss: 11.314250946044922 Tokens per Sec: 24326.40643402926
Epoch Step: 135 / 138 Loss: 11.31789779663086 Tokens per Sec: 22358.63217658556
Epoch ended with duration 0:00:25.170193
Train perplexity: 1.3191398212058223
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = VAR_1 = ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.204479
Validation perplexity: 1.6400115309735233
Model saved checkpoint!
Epoch 126 / 1000
Epoch Step: 5 / 138 Loss: 7.902091026306152 Tokens per Sec: 27530.148001252175
Epoch Step: 10 / 138 Loss: 13.58518123626709 Tokens per Sec: 25727.765383496524
Epoch Step: 15 / 138 Loss: 12.555442810058594 Tokens per Sec: 25690.831050057186
Epoch Step: 20 / 138 Loss: 9.119159698486328 Tokens per Sec: 27020.13097675898
Epoch Step: 25 / 138 Loss: 7.555428504943848 Tokens per Sec: 26606.8195743503
Epoch Step: 30 / 138 Loss: 10.139832496643066 Tokens per Sec: 27510.631309433993
Epoch Step: 35 / 138 Loss: 16.524654388427734 Tokens per Sec: 26432.619377781826
Epoch Step: 40 / 138 Loss: 7.389704704284668 Tokens per Sec: 27436.5476890751
Epoch Step: 45 / 138 Loss: 7.717372894287109 Tokens per Sec: 24033.23090844231
Epoch Step: 50 / 138 Loss: 7.474859714508057 Tokens per Sec: 25395.52229128964
Epoch Step: 55 / 138 Loss: 13.719325065612793 Tokens per Sec: 27312.511555342568
Epoch Step: 60 / 138 Loss: 9.459275245666504 Tokens per Sec: 25956.000837889733
Epoch Step: 65 / 138 Loss: 11.132088661193848 Tokens per Sec: 25653.050618822308
Epoch Step: 70 / 138 Loss: 8.246871948242188 Tokens per Sec: 25744.972095216002
Epoch Step: 75 / 138 Loss: 7.592162609100342 Tokens per Sec: 26539.791796851157
Epoch Step: 80 / 138 Loss: 12.092198371887207 Tokens per Sec: 28024.863449737342
Epoch Step: 85 / 138 Loss: 145.64398193359375 Tokens per Sec: 24251.227016381545
Epoch Step: 90 / 138 Loss: 10.03579044342041 Tokens per Sec: 23495.65044246226
Epoch Step: 95 / 138 Loss: 10.828131675720215 Tokens per Sec: 25071.79489080608
Epoch Step: 100 / 138 Loss: 12.481585502624512 Tokens per Sec: 24329.95030165106
Epoch Step: 105 / 138 Loss: 9.802794456481934 Tokens per Sec: 25302.34502327908
Epoch Step: 110 / 138 Loss: 9.145252227783203 Tokens per Sec: 22594.541738462813
Epoch Step: 115 / 138 Loss: 82.62432861328125 Tokens per Sec: 23676.95584051025
Epoch Step: 120 / 138 Loss: 10.594805717468262 Tokens per Sec: 24099.44930434733
Epoch Step: 125 / 138 Loss: 9.6047945022583 Tokens per Sec: 26037.2092562877
Epoch Step: 130 / 138 Loss: 10.920000076293945 Tokens per Sec: 25489.019185415633
Epoch Step: 135 / 138 Loss: 10.89758014678955 Tokens per Sec: 21525.0760594028
Epoch ended with duration 0:00:25.060219
Train perplexity: 1.3330847418852048
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.203657
Validation perplexity: 1.3428610797779923
Epoch 127 / 1000
Epoch Step: 5 / 138 Loss: 6.932380676269531 Tokens per Sec: 25780.12216565289
Epoch Step: 10 / 138 Loss: 6.973181247711182 Tokens per Sec: 25382.925263383164
Epoch Step: 15 / 138 Loss: 6.814021587371826 Tokens per Sec: 26221.57031693241
Epoch Step: 20 / 138 Loss: 14.585376739501953 Tokens per Sec: 27324.836245784387
Epoch Step: 25 / 138 Loss: 17.457151412963867 Tokens per Sec: 23880.784033653872
Epoch Step: 30 / 138 Loss: 8.298504829406738 Tokens per Sec: 25626.417618024105
Epoch Step: 35 / 138 Loss: 7.757307052612305 Tokens per Sec: 24763.36436503745
Epoch Step: 40 / 138 Loss: 11.567279815673828 Tokens per Sec: 23129.007530793206
Epoch Step: 45 / 138 Loss: 13.301198959350586 Tokens per Sec: 25126.969640868814
Epoch Step: 50 / 138 Loss: 10.783019065856934 Tokens per Sec: 25860.375220889524
Epoch Step: 55 / 138 Loss: 9.863439559936523 Tokens per Sec: 25973.267480052422
Epoch Step: 60 / 138 Loss: 10.036494255065918 Tokens per Sec: 24623.545064548154
Epoch Step: 65 / 138 Loss: 14.722362518310547 Tokens per Sec: 26240.945544523318
Epoch Step: 70 / 138 Loss: 9.022871017456055 Tokens per Sec: 26591.18731539226
Epoch Step: 75 / 138 Loss: 9.808737754821777 Tokens per Sec: 26365.594094149557
Epoch Step: 80 / 138 Loss: 10.47646427154541 Tokens per Sec: 27241.74384735033
Epoch Step: 85 / 138 Loss: 7.4858717918396 Tokens per Sec: 26450.825011330908
Epoch Step: 90 / 138 Loss: 7.804197311401367 Tokens per Sec: 27828.340937744073
Epoch Step: 95 / 138 Loss: 9.74670124053955 Tokens per Sec: 26045.92373073079
Epoch Step: 100 / 138 Loss: 10.826940536499023 Tokens per Sec: 25289.879960372644
Epoch Step: 105 / 138 Loss: 10.439629554748535 Tokens per Sec: 24900.51257921957
Epoch Step: 110 / 138 Loss: 8.839790344238281 Tokens per Sec: 24858.505226900394
Epoch Step: 115 / 138 Loss: 10.420136451721191 Tokens per Sec: 22344.808273491388
Epoch Step: 120 / 138 Loss: 9.112752914428711 Tokens per Sec: 24744.373705903752
Epoch Step: 125 / 138 Loss: 97.5523910522461 Tokens per Sec: 24939.938415525787
Epoch Step: 130 / 138 Loss: 12.535784721374512 Tokens per Sec: 25255.978308409605
Epoch Step: 135 / 138 Loss: 8.708793640136719 Tokens per Sec: 24428.825184148554
Epoch ended with duration 0:00:25.092119
Train perplexity: 1.2721187145805706
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.189231
Validation perplexity: 1.3499032857507463
Epoch 128 / 1000
Epoch Step: 5 / 138 Loss: 12.48022747039795 Tokens per Sec: 25732.12698982793
Epoch Step: 10 / 138 Loss: 11.229751586914062 Tokens per Sec: 26449.027518974046
Epoch Step: 15 / 138 Loss: 9.38589096069336 Tokens per Sec: 26229.820161548727
Epoch Step: 20 / 138 Loss: 11.488719940185547 Tokens per Sec: 25647.659078987785
Epoch Step: 25 / 138 Loss: 11.010576248168945 Tokens per Sec: 26707.04988283411
Epoch Step: 30 / 138 Loss: 5.1902923583984375 Tokens per Sec: 24269.271297645897
Epoch Step: 35 / 138 Loss: 13.228638648986816 Tokens per Sec: 25346.647184459365
Epoch Step: 40 / 138 Loss: 11.921311378479004 Tokens per Sec: 24341.168894344708
Epoch Step: 45 / 138 Loss: 14.423212051391602 Tokens per Sec: 26309.507819083163
Epoch Step: 50 / 138 Loss: 11.495223999023438 Tokens per Sec: 23730.28427498738
Epoch Step: 55 / 138 Loss: 9.422492980957031 Tokens per Sec: 26802.31323049623
Epoch Step: 60 / 138 Loss: 9.346510887145996 Tokens per Sec: 27402.874795495463
Epoch Step: 65 / 138 Loss: 10.532074928283691 Tokens per Sec: 27492.60630810109
Epoch Step: 70 / 138 Loss: 8.228545188903809 Tokens per Sec: 27118.858284302354
Epoch Step: 75 / 138 Loss: 13.5155668258667 Tokens per Sec: 24273.271529070797
Epoch Step: 80 / 138 Loss: 13.15709400177002 Tokens per Sec: 26348.478850167518
Epoch Step: 85 / 138 Loss: 9.944122314453125 Tokens per Sec: 26387.329385477242
Epoch Step: 90 / 138 Loss: 160.83926391601562 Tokens per Sec: 24680.852797515858
Epoch Step: 95 / 138 Loss: 10.801274299621582 Tokens per Sec: 27539.3532496327
Epoch Step: 100 / 138 Loss: 9.303352355957031 Tokens per Sec: 26340.91051191387
Epoch Step: 105 / 138 Loss: 14.41497802734375 Tokens per Sec: 22337.355605962854
Epoch Step: 110 / 138 Loss: 10.672904014587402 Tokens per Sec: 24537.62224754538
Epoch Step: 115 / 138 Loss: 10.501214981079102 Tokens per Sec: 24564.71235896736
Epoch Step: 120 / 138 Loss: 10.743590354919434 Tokens per Sec: 24915.735491362924
Epoch Step: 125 / 138 Loss: 8.187158584594727 Tokens per Sec: 25122.548044650313
Epoch Step: 130 / 138 Loss: 8.026124000549316 Tokens per Sec: 23648.445221411544
Epoch Step: 135 / 138 Loss: 10.466830253601074 Tokens per Sec: 23855.70699956119
Epoch ended with duration 0:00:25.076359
Train perplexity: 1.278911314876754
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 u = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.180670
Validation perplexity: 1.2408581144348052
Model saved best_on_validation!
Epoch 129 / 1000
Epoch Step: 5 / 138 Loss: 10.872354507446289 Tokens per Sec: 26393.25344822975
Epoch Step: 10 / 138 Loss: 9.309496879577637 Tokens per Sec: 25314.223893811843
Epoch Step: 15 / 138 Loss: 6.542042255401611 Tokens per Sec: 28850.294516556514
Epoch Step: 20 / 138 Loss: 6.734148025512695 Tokens per Sec: 27434.81175660467
Epoch Step: 25 / 138 Loss: 13.76576042175293 Tokens per Sec: 25545.258109091825
Epoch Step: 30 / 138 Loss: 14.25054931640625 Tokens per Sec: 24309.607379986475
Epoch Step: 35 / 138 Loss: 12.645951271057129 Tokens per Sec: 27207.295647357278
Epoch Step: 40 / 138 Loss: 13.998385429382324 Tokens per Sec: 22552.918903309805
Epoch Step: 45 / 138 Loss: 8.988423347473145 Tokens per Sec: 27270.794403017975
Epoch Step: 50 / 138 Loss: 9.42577838897705 Tokens per Sec: 25490.47558234797
Epoch Step: 55 / 138 Loss: 15.04365348815918 Tokens per Sec: 26026.878696158077
Epoch Step: 60 / 138 Loss: 109.52149200439453 Tokens per Sec: 25868.576404327887
Epoch Step: 65 / 138 Loss: 10.169100761413574 Tokens per Sec: 26704.61142414831
Epoch Step: 70 / 138 Loss: 10.7572021484375 Tokens per Sec: 26033.046905156305
Epoch Step: 75 / 138 Loss: 129.94444274902344 Tokens per Sec: 22253.48643695932
Epoch Step: 80 / 138 Loss: 10.304357528686523 Tokens per Sec: 26017.50407031581
Epoch Step: 85 / 138 Loss: 18.204816818237305 Tokens per Sec: 24298.915160152166
Epoch Step: 90 / 138 Loss: 12.536566734313965 Tokens per Sec: 29300.401600668083
Epoch Step: 95 / 138 Loss: 11.322027206420898 Tokens per Sec: 25022.0207435589
Epoch Step: 100 / 138 Loss: 8.144804000854492 Tokens per Sec: 25384.72834566496
Epoch Step: 105 / 138 Loss: 9.591558456420898 Tokens per Sec: 24638.005317125975
Epoch Step: 110 / 138 Loss: 10.154845237731934 Tokens per Sec: 25710.2369589249
Epoch Step: 115 / 138 Loss: 12.73403549194336 Tokens per Sec: 23852.229394919286
Epoch Step: 120 / 138 Loss: 84.95783996582031 Tokens per Sec: 23287.346006912143
Epoch Step: 125 / 138 Loss: 10.940701484680176 Tokens per Sec: 24185.95395156878
Epoch Step: 130 / 138 Loss: 8.970829010009766 Tokens per Sec: 20903.11081849933
Epoch Step: 135 / 138 Loss: 7.764029502868652 Tokens per Sec: 25338.153488147316
Epoch ended with duration 0:00:25.178209
Train perplexity: 1.431861112316188
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.200169
Validation perplexity: 1.6392282132596063
Epoch 130 / 1000
Epoch Step: 5 / 138 Loss: 10.965084075927734 Tokens per Sec: 27434.577775225058
Epoch Step: 10 / 138 Loss: 9.907310485839844 Tokens per Sec: 25248.485753198336
Epoch Step: 15 / 138 Loss: 9.013351440429688 Tokens per Sec: 27814.95297230039
Epoch Step: 20 / 138 Loss: 11.197495460510254 Tokens per Sec: 28056.105843333153
Epoch Step: 25 / 138 Loss: 10.092597007751465 Tokens per Sec: 25362.63586314153
Epoch Step: 30 / 138 Loss: 12.908992767333984 Tokens per Sec: 24694.56707456616
Epoch Step: 35 / 138 Loss: 10.445610046386719 Tokens per Sec: 25157.43615748454
Epoch Step: 40 / 138 Loss: 16.153905868530273 Tokens per Sec: 25013.18263224174
Epoch Step: 45 / 138 Loss: 69.77629852294922 Tokens per Sec: 26550.648386735542
Epoch Step: 50 / 138 Loss: 9.524275779724121 Tokens per Sec: 27143.046818038758
Epoch Step: 55 / 138 Loss: 12.0863037109375 Tokens per Sec: 26957.99545539332
Epoch Step: 60 / 138 Loss: 6.3995585441589355 Tokens per Sec: 24583.578012261187
Epoch Step: 65 / 138 Loss: 14.103225708007812 Tokens per Sec: 21648.389389519754
Epoch Step: 70 / 138 Loss: 10.85910701751709 Tokens per Sec: 24763.86127168895
Epoch Step: 75 / 138 Loss: 11.780689239501953 Tokens per Sec: 22859.21029261231
Epoch Step: 80 / 138 Loss: 8.771389961242676 Tokens per Sec: 26708.185517937534
Epoch Step: 85 / 138 Loss: 6.361045837402344 Tokens per Sec: 27700.95924223913
Epoch Step: 90 / 138 Loss: 15.170977592468262 Tokens per Sec: 26632.51738948359
Epoch Step: 95 / 138 Loss: 117.65078735351562 Tokens per Sec: 28304.441538035215
Epoch Step: 100 / 138 Loss: 104.16475677490234 Tokens per Sec: 26487.43893072523
Epoch Step: 105 / 138 Loss: 8.830327987670898 Tokens per Sec: 21642.588234099057
Epoch Step: 110 / 138 Loss: 133.65728759765625 Tokens per Sec: 25720.73406275653
Epoch Step: 115 / 138 Loss: 12.830912590026855 Tokens per Sec: 24081.010611303285
Epoch Step: 120 / 138 Loss: 11.303421020507812 Tokens per Sec: 23799.385041061552
Epoch Step: 125 / 138 Loss: 9.978636741638184 Tokens per Sec: 25045.770645373348
Epoch Step: 130 / 138 Loss: 9.586050987243652 Tokens per Sec: 24436.843713624246
Epoch Step: 135 / 138 Loss: 7.6939191818237305 Tokens per Sec: 25610.935562447645
Epoch ended with duration 0:00:25.018541
Train perplexity: 1.31681096757747
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.191597
Validation perplexity: 1.4540009141674732
Model saved checkpoint!
Epoch 131 / 1000
Epoch Step: 5 / 138 Loss: 10.47450065612793 Tokens per Sec: 24989.729546543516
Epoch Step: 10 / 138 Loss: 14.11591625213623 Tokens per Sec: 23604.867797329614
Epoch Step: 15 / 138 Loss: 10.195054054260254 Tokens per Sec: 24772.709312348317
Epoch Step: 20 / 138 Loss: 63.81026077270508 Tokens per Sec: 25482.32180798926
Epoch Step: 25 / 138 Loss: 103.50709533691406 Tokens per Sec: 24552.905869745264
Epoch Step: 30 / 138 Loss: 7.255416393280029 Tokens per Sec: 25901.577703816634
Epoch Step: 35 / 138 Loss: 162.43394470214844 Tokens per Sec: 26314.960000353432
Epoch Step: 40 / 138 Loss: 14.604243278503418 Tokens per Sec: 25079.42008135515
Epoch Step: 45 / 138 Loss: 11.76709270477295 Tokens per Sec: 24126.533050946095
Epoch Step: 50 / 138 Loss: 12.088762283325195 Tokens per Sec: 25177.924453950334
Epoch Step: 55 / 138 Loss: 7.6308274269104 Tokens per Sec: 27412.3811074421
Epoch Step: 60 / 138 Loss: 10.069185256958008 Tokens per Sec: 27529.92159163361
Epoch Step: 65 / 138 Loss: 10.52548599243164 Tokens per Sec: 24927.155268496925
Epoch Step: 70 / 138 Loss: 11.509834289550781 Tokens per Sec: 27386.515224258146
Epoch Step: 75 / 138 Loss: 10.165543556213379 Tokens per Sec: 27782.886267859394
Epoch Step: 80 / 138 Loss: 11.03487491607666 Tokens per Sec: 27510.819130474763
Epoch Step: 85 / 138 Loss: 72.01055145263672 Tokens per Sec: 27273.27031127127
Epoch Step: 90 / 138 Loss: 11.05555534362793 Tokens per Sec: 27638.845967071018
Epoch Step: 95 / 138 Loss: 152.3162384033203 Tokens per Sec: 25508.12695331755
Epoch Step: 100 / 138 Loss: 116.90042114257812 Tokens per Sec: 25734.88198134623
Epoch Step: 105 / 138 Loss: 14.945833206176758 Tokens per Sec: 24273.327732555656
Epoch Step: 110 / 138 Loss: 11.84649658203125 Tokens per Sec: 25222.02023927065
Epoch Step: 115 / 138 Loss: 8.076505661010742 Tokens per Sec: 22331.945112360143
Epoch Step: 120 / 138 Loss: 13.931248664855957 Tokens per Sec: 24439.570885954956
Epoch Step: 125 / 138 Loss: 11.4066743850708 Tokens per Sec: 22918.28089168365
Epoch Step: 130 / 138 Loss: 11.09798526763916 Tokens per Sec: 24161.845756997373
Epoch Step: 135 / 138 Loss: 54.90797805786133 Tokens per Sec: 24771.07029500417
Epoch ended with duration 0:00:25.080669
Train perplexity: 1.4340192360630692
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.205228
Validation perplexity: 1.6899430088316831
Epoch 132 / 1000
Epoch Step: 5 / 138 Loss: 12.167768478393555 Tokens per Sec: 22282.066267136288
Epoch Step: 10 / 138 Loss: 13.915912628173828 Tokens per Sec: 25435.76842273084
Epoch Step: 15 / 138 Loss: 13.194158554077148 Tokens per Sec: 24577.315575600387
Epoch Step: 20 / 138 Loss: 13.908953666687012 Tokens per Sec: 24004.103552267738
Epoch Step: 25 / 138 Loss: 7.247799873352051 Tokens per Sec: 27895.75205564089
Epoch Step: 30 / 138 Loss: 6.030307769775391 Tokens per Sec: 27600.207397325194
Epoch Step: 35 / 138 Loss: 9.989222526550293 Tokens per Sec: 27669.709973102446
Epoch Step: 40 / 138 Loss: 11.675800323486328 Tokens per Sec: 25176.44191251194
Epoch Step: 45 / 138 Loss: 12.735212326049805 Tokens per Sec: 26290.736395359378
Epoch Step: 50 / 138 Loss: 6.130742073059082 Tokens per Sec: 26027.36519552996
Epoch Step: 55 / 138 Loss: 7.1981587409973145 Tokens per Sec: 27466.634073373625
Epoch Step: 60 / 138 Loss: 10.567276954650879 Tokens per Sec: 24184.685264724667
Epoch Step: 65 / 138 Loss: 58.63494110107422 Tokens per Sec: 25784.346388902886
Epoch Step: 70 / 138 Loss: 10.097801208496094 Tokens per Sec: 26949.57464656079
Epoch Step: 75 / 138 Loss: 7.392759323120117 Tokens per Sec: 26152.90116008355
Epoch Step: 80 / 138 Loss: 11.343116760253906 Tokens per Sec: 25713.551218960827
Epoch Step: 85 / 138 Loss: 7.963677883148193 Tokens per Sec: 25488.25803491134
Epoch Step: 90 / 138 Loss: 13.698507308959961 Tokens per Sec: 25796.007586377018
Epoch Step: 95 / 138 Loss: 13.841796875 Tokens per Sec: 27278.661858530486
Epoch Step: 100 / 138 Loss: 10.692364692687988 Tokens per Sec: 28039.410589398998
Epoch Step: 105 / 138 Loss: 10.970206260681152 Tokens per Sec: 23066.52938570197
Epoch Step: 110 / 138 Loss: 10.379566192626953 Tokens per Sec: 23770.171600006714
Epoch Step: 115 / 138 Loss: 10.596427917480469 Tokens per Sec: 25260.439328250934
Epoch Step: 120 / 138 Loss: 109.74817657470703 Tokens per Sec: 24598.91220685355
Epoch Step: 125 / 138 Loss: 12.59395980834961 Tokens per Sec: 21649.449179389467
Epoch Step: 130 / 138 Loss: 149.89625549316406 Tokens per Sec: 25471.344790452727
Epoch Step: 135 / 138 Loss: 9.792832374572754 Tokens per Sec: 25556.91190528504
Epoch ended with duration 0:00:25.064988
Train perplexity: 1.312096504540115
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.208300
Validation perplexity: 1.849376261978084
Epoch 133 / 1000
Epoch Step: 5 / 138 Loss: 10.577433586120605 Tokens per Sec: 25420.509085360503
Epoch Step: 10 / 138 Loss: 10.048171997070312 Tokens per Sec: 27663.854057516695
Epoch Step: 15 / 138 Loss: 9.261713981628418 Tokens per Sec: 25556.401010759066
Epoch Step: 20 / 138 Loss: 8.711556434631348 Tokens per Sec: 27519.459748671616
Epoch Step: 25 / 138 Loss: 5.952917098999023 Tokens per Sec: 26306.276287144785
Epoch Step: 30 / 138 Loss: 10.26285171508789 Tokens per Sec: 25359.909978006588
Epoch Step: 35 / 138 Loss: 10.959253311157227 Tokens per Sec: 25664.803598469123
Epoch Step: 40 / 138 Loss: 12.348012924194336 Tokens per Sec: 25488.120439176655
Epoch Step: 45 / 138 Loss: 9.29638671875 Tokens per Sec: 25555.53560987235
Epoch Step: 50 / 138 Loss: 10.792868614196777 Tokens per Sec: 25332.665947051963
Epoch Step: 55 / 138 Loss: 9.90918254852295 Tokens per Sec: 25519.648175705956
Epoch Step: 60 / 138 Loss: 10.387917518615723 Tokens per Sec: 26701.665713524293
Epoch Step: 65 / 138 Loss: 8.052925109863281 Tokens per Sec: 26579.19542979096
Epoch Step: 70 / 138 Loss: 7.153992652893066 Tokens per Sec: 25606.08235175677
Epoch Step: 75 / 138 Loss: 9.704168319702148 Tokens per Sec: 25854.07377922161
Epoch Step: 80 / 138 Loss: 8.939112663269043 Tokens per Sec: 25521.93872965419
Epoch Step: 85 / 138 Loss: 7.657643795013428 Tokens per Sec: 28427.972301812013
Epoch Step: 90 / 138 Loss: 13.055912971496582 Tokens per Sec: 26442.488484485486
Epoch Step: 95 / 138 Loss: 8.950258255004883 Tokens per Sec: 23627.095630538304
Epoch Step: 100 / 138 Loss: 10.542180061340332 Tokens per Sec: 27632.8250899687
Epoch Step: 105 / 138 Loss: 9.233528137207031 Tokens per Sec: 22384.24275024795
Epoch Step: 110 / 138 Loss: 8.795616149902344 Tokens per Sec: 21850.81916402137
Epoch Step: 115 / 138 Loss: 11.681201934814453 Tokens per Sec: 24403.465516094882
Epoch Step: 120 / 138 Loss: 9.209582328796387 Tokens per Sec: 25194.09900416242
Epoch Step: 125 / 138 Loss: 8.626361846923828 Tokens per Sec: 24330.76363569451
Epoch Step: 130 / 138 Loss: 9.308220863342285 Tokens per Sec: 25758.4190664947
Epoch Step: 135 / 138 Loss: 10.081644058227539 Tokens per Sec: 25136.63570668435
Epoch ended with duration 0:00:24.943568
Train perplexity: 1.2925819079430936
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.183236
Validation perplexity: 1.2417358216366476
Epoch 134 / 1000
Epoch Step: 5 / 138 Loss: 7.2891845703125 Tokens per Sec: 26015.781770075537
Epoch Step: 10 / 138 Loss: 10.543388366699219 Tokens per Sec: 25741.99266956755
Epoch Step: 15 / 138 Loss: 10.240439414978027 Tokens per Sec: 27374.98476701885
Epoch Step: 20 / 138 Loss: 10.092723846435547 Tokens per Sec: 25559.81405908941
Epoch Step: 25 / 138 Loss: 8.45845890045166 Tokens per Sec: 26611.410855064514
Epoch Step: 30 / 138 Loss: 9.569706916809082 Tokens per Sec: 26173.193810839577
Epoch Step: 35 / 138 Loss: 172.34950256347656 Tokens per Sec: 26333.443121182627
Epoch Step: 40 / 138 Loss: 7.87122917175293 Tokens per Sec: 25497.013602550178
Epoch Step: 45 / 138 Loss: 11.013137817382812 Tokens per Sec: 26785.55696269771
Epoch Step: 50 / 138 Loss: 5.672166347503662 Tokens per Sec: 26870.097762427795
Epoch Step: 55 / 138 Loss: 11.882963180541992 Tokens per Sec: 25299.27603542712
Epoch Step: 60 / 138 Loss: 13.302286148071289 Tokens per Sec: 26245.283432617212
Epoch Step: 65 / 138 Loss: 8.561504364013672 Tokens per Sec: 24796.225106883827
Epoch Step: 70 / 138 Loss: 9.58930778503418 Tokens per Sec: 25801.378877235667
Epoch Step: 75 / 138 Loss: 7.236663818359375 Tokens per Sec: 25858.401049478325
Epoch Step: 80 / 138 Loss: 13.313995361328125 Tokens per Sec: 27517.082332112594
Epoch Step: 85 / 138 Loss: 160.56307983398438 Tokens per Sec: 26729.099433324467
Epoch Step: 90 / 138 Loss: 14.44782829284668 Tokens per Sec: 23730.274532923977
Epoch Step: 95 / 138 Loss: 10.79338550567627 Tokens per Sec: 25045.029511280034
Epoch Step: 100 / 138 Loss: 11.281573295593262 Tokens per Sec: 24062.174235931445
Epoch Step: 105 / 138 Loss: 8.269567489624023 Tokens per Sec: 24070.305924828986
Epoch Step: 110 / 138 Loss: 11.495076179504395 Tokens per Sec: 24911.345524616478
Epoch Step: 115 / 138 Loss: 14.21586799621582 Tokens per Sec: 24249.889376085648
Epoch Step: 120 / 138 Loss: 9.690711975097656 Tokens per Sec: 24704.30130836625
Epoch Step: 125 / 138 Loss: 10.151717185974121 Tokens per Sec: 23905.210700097927
Epoch Step: 130 / 138 Loss: 17.922130584716797 Tokens per Sec: 22044.219780715397
Epoch Step: 135 / 138 Loss: 12.695754051208496 Tokens per Sec: 25357.662609843333
Epoch ended with duration 0:00:25.147121
Train perplexity: 1.3484704075070328
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.203246
Validation perplexity: 1.4386454644725353
Epoch 135 / 1000
Epoch Step: 5 / 138 Loss: 11.219572067260742 Tokens per Sec: 23328.142743096123
Epoch Step: 10 / 138 Loss: 16.586772918701172 Tokens per Sec: 25841.813760580542
Epoch Step: 15 / 138 Loss: 8.467089653015137 Tokens per Sec: 25915.644880303065
Epoch Step: 20 / 138 Loss: 11.261452674865723 Tokens per Sec: 26417.89276802211
Epoch Step: 25 / 138 Loss: 76.99897766113281 Tokens per Sec: 25028.607171824457
Epoch Step: 30 / 138 Loss: 5.674188137054443 Tokens per Sec: 24984.807347565657
Epoch Step: 35 / 138 Loss: 5.8289079666137695 Tokens per Sec: 25568.601345416795
Epoch Step: 40 / 138 Loss: 8.765680313110352 Tokens per Sec: 27495.083486440508
Epoch Step: 45 / 138 Loss: 9.191905975341797 Tokens per Sec: 28742.784664817584
Epoch Step: 50 / 138 Loss: 8.046233177185059 Tokens per Sec: 26369.726625894687
Epoch Step: 55 / 138 Loss: 10.726333618164062 Tokens per Sec: 25223.0777469325
Epoch Step: 60 / 138 Loss: 15.186196327209473 Tokens per Sec: 24045.909779122863
Epoch Step: 65 / 138 Loss: 6.233351707458496 Tokens per Sec: 26919.409610299932
Epoch Step: 70 / 138 Loss: 120.44876098632812 Tokens per Sec: 26322.922039934412
Epoch Step: 75 / 138 Loss: 6.762667655944824 Tokens per Sec: 24275.077561108505
Epoch Step: 80 / 138 Loss: 12.771713256835938 Tokens per Sec: 24309.632571751677
Epoch Step: 85 / 138 Loss: 103.10250854492188 Tokens per Sec: 26442.376237693632
Epoch Step: 90 / 138 Loss: 11.389235496520996 Tokens per Sec: 27542.32240769947
Epoch Step: 95 / 138 Loss: 17.97001838684082 Tokens per Sec: 26774.633723689858
Epoch Step: 100 / 138 Loss: 11.065534591674805 Tokens per Sec: 28009.344230809445
Epoch Step: 105 / 138 Loss: 11.684185028076172 Tokens per Sec: 24215.901549905157
Epoch Step: 110 / 138 Loss: 9.273625373840332 Tokens per Sec: 22313.723695122106
Epoch Step: 115 / 138 Loss: 10.030640602111816 Tokens per Sec: 25059.42413311627
Epoch Step: 120 / 138 Loss: 11.967273712158203 Tokens per Sec: 24922.70292754553
Epoch Step: 125 / 138 Loss: 7.061470985412598 Tokens per Sec: 24349.90841210501
Epoch Step: 130 / 138 Loss: 11.358928680419922 Tokens per Sec: 22646.05718013431
Epoch Step: 135 / 138 Loss: 10.382628440856934 Tokens per Sec: 25079.25193978431
Epoch ended with duration 0:00:25.089665
Train perplexity: 1.2971236963108368
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.182173
Validation perplexity: 1.2386557958831133
Model saved best_on_validation!
Model saved checkpoint!
Epoch 136 / 1000
Epoch Step: 5 / 138 Loss: 5.5759735107421875 Tokens per Sec: 26528.73684535002
Epoch Step: 10 / 138 Loss: 6.599741458892822 Tokens per Sec: 28723.584197357235
Epoch Step: 15 / 138 Loss: 14.110815048217773 Tokens per Sec: 25084.531873434164
Epoch Step: 20 / 138 Loss: 8.728819847106934 Tokens per Sec: 27026.622614670985
Epoch Step: 25 / 138 Loss: 13.74102783203125 Tokens per Sec: 25277.734123817838
Epoch Step: 30 / 138 Loss: 14.53718376159668 Tokens per Sec: 27107.903683476306
Epoch Step: 35 / 138 Loss: 10.98340129852295 Tokens per Sec: 26221.04810267685
Epoch Step: 40 / 138 Loss: 12.263744354248047 Tokens per Sec: 25552.043518909282
Epoch Step: 45 / 138 Loss: 10.12643814086914 Tokens per Sec: 24548.310590208792
Epoch Step: 50 / 138 Loss: 9.282986640930176 Tokens per Sec: 27371.69340650812
Epoch Step: 55 / 138 Loss: 10.989630699157715 Tokens per Sec: 25184.07718562791
Epoch Step: 60 / 138 Loss: 14.385050773620605 Tokens per Sec: 26715.983353597734
Epoch Step: 65 / 138 Loss: 10.874629020690918 Tokens per Sec: 25641.77622322984
Epoch Step: 70 / 138 Loss: 15.903987884521484 Tokens per Sec: 27429.885846680856
Epoch Step: 75 / 138 Loss: 8.89987850189209 Tokens per Sec: 23818.843244218493
Epoch Step: 80 / 138 Loss: 9.578065872192383 Tokens per Sec: 26667.91712182343
Epoch Step: 85 / 138 Loss: 6.299525260925293 Tokens per Sec: 26255.143440745993
Epoch Step: 90 / 138 Loss: 11.540205001831055 Tokens per Sec: 25085.203732994585
Epoch Step: 95 / 138 Loss: 11.10506534576416 Tokens per Sec: 25685.279492517617
Epoch Step: 100 / 138 Loss: 9.799714088439941 Tokens per Sec: 24168.680646376273
Epoch Step: 105 / 138 Loss: 9.820735931396484 Tokens per Sec: 24511.785814453724
Epoch Step: 110 / 138 Loss: 6.935966491699219 Tokens per Sec: 23672.678431587923
Epoch Step: 115 / 138 Loss: 75.78839874267578 Tokens per Sec: 23632.949832235365
Epoch Step: 120 / 138 Loss: 9.212635040283203 Tokens per Sec: 23692.6273650159
Epoch Step: 125 / 138 Loss: 8.787962913513184 Tokens per Sec: 25353.698494704713
Epoch Step: 130 / 138 Loss: 10.715720176696777 Tokens per Sec: 21475.355729927287
Epoch Step: 135 / 138 Loss: 13.261990547180176 Tokens per Sec: 25938.574159199896
Epoch ended with duration 0:00:25.052662
Train perplexity: 1.3468129447856205
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.189216
Validation perplexity: 1.4023297507490793
Epoch 137 / 1000
Epoch Step: 5 / 138 Loss: 8.614541053771973 Tokens per Sec: 26577.93771530735
Epoch Step: 10 / 138 Loss: 5.732590198516846 Tokens per Sec: 26411.505721113437
Epoch Step: 15 / 138 Loss: 9.53976058959961 Tokens per Sec: 28069.585459066715
Epoch Step: 20 / 138 Loss: 12.67454719543457 Tokens per Sec: 23501.84669300324
Epoch Step: 25 / 138 Loss: 13.362895011901855 Tokens per Sec: 24350.115505060305
Epoch Step: 30 / 138 Loss: 8.558714866638184 Tokens per Sec: 26710.25725700282
Epoch Step: 35 / 138 Loss: 74.87633514404297 Tokens per Sec: 25564.96736138419
Epoch Step: 40 / 138 Loss: 6.121660232543945 Tokens per Sec: 27436.26533444352
Epoch Step: 45 / 138 Loss: 12.459856033325195 Tokens per Sec: 24608.931799909114
Epoch Step: 50 / 138 Loss: 6.928014755249023 Tokens per Sec: 26362.576276183587
Epoch Step: 55 / 138 Loss: 6.5808281898498535 Tokens per Sec: 23877.52077420548
Epoch Step: 60 / 138 Loss: 9.294047355651855 Tokens per Sec: 26327.013580498897
Epoch Step: 65 / 138 Loss: 10.523658752441406 Tokens per Sec: 26841.97731584879
Epoch Step: 70 / 138 Loss: 12.720447540283203 Tokens per Sec: 25375.105907602123
Epoch Step: 75 / 138 Loss: 8.936960220336914 Tokens per Sec: 28009.598887143555
Epoch Step: 80 / 138 Loss: 179.86279296875 Tokens per Sec: 25212.943832859863
Epoch Step: 85 / 138 Loss: 10.908712387084961 Tokens per Sec: 25941.869144760716
Epoch Step: 90 / 138 Loss: 12.267789840698242 Tokens per Sec: 26263.52245206902
Epoch Step: 95 / 138 Loss: 8.902271270751953 Tokens per Sec: 24878.391949359677
Epoch Step: 100 / 138 Loss: 166.21026611328125 Tokens per Sec: 27252.063748058954
Epoch Step: 105 / 138 Loss: 12.321637153625488 Tokens per Sec: 25136.271146421688
Epoch Step: 110 / 138 Loss: 8.957381248474121 Tokens per Sec: 24014.476928216758
Epoch Step: 115 / 138 Loss: 9.087098121643066 Tokens per Sec: 24062.969705785174
Epoch Step: 120 / 138 Loss: 9.92617416381836 Tokens per Sec: 20220.33888307758
Epoch Step: 125 / 138 Loss: 7.459847450256348 Tokens per Sec: 23626.353331134924
Epoch Step: 130 / 138 Loss: 13.415897369384766 Tokens per Sec: 24900.621671495366
Epoch Step: 135 / 138 Loss: 8.154258728027344 Tokens per Sec: 25910.930349822997
Epoch ended with duration 0:00:25.056348
Train perplexity: 1.2558479185736586
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.187412
Validation perplexity: 1.3318892077436058
Epoch 138 / 1000
Epoch Step: 5 / 138 Loss: 7.427554607391357 Tokens per Sec: 25755.463062997052
Epoch Step: 10 / 138 Loss: 14.750349044799805 Tokens per Sec: 27531.590162954722
Epoch Step: 15 / 138 Loss: 10.294356346130371 Tokens per Sec: 24244.30650470043
Epoch Step: 20 / 138 Loss: 9.512845993041992 Tokens per Sec: 26079.171437
Epoch Step: 25 / 138 Loss: 10.637332916259766 Tokens per Sec: 25871.58180367301
Epoch Step: 30 / 138 Loss: 10.140392303466797 Tokens per Sec: 27909.639298159007
Epoch Step: 35 / 138 Loss: 85.54362487792969 Tokens per Sec: 24967.402557493853
Epoch Step: 40 / 138 Loss: 75.95140838623047 Tokens per Sec: 25722.26073943324
Epoch Step: 45 / 138 Loss: 11.052997589111328 Tokens per Sec: 24830.908558701878
Epoch Step: 50 / 138 Loss: 10.015905380249023 Tokens per Sec: 26190.993541750344
Epoch Step: 55 / 138 Loss: 12.291484832763672 Tokens per Sec: 26396.160840789576
Epoch Step: 60 / 138 Loss: 90.7240219116211 Tokens per Sec: 26135.372804419712
Epoch Step: 65 / 138 Loss: 8.587639808654785 Tokens per Sec: 24722.607709382126
Epoch Step: 70 / 138 Loss: 8.233473777770996 Tokens per Sec: 25910.7449782809
Epoch Step: 75 / 138 Loss: 5.611827373504639 Tokens per Sec: 26527.18424862974
Epoch Step: 80 / 138 Loss: 8.775782585144043 Tokens per Sec: 27221.845697177596
Epoch Step: 85 / 138 Loss: 7.547157287597656 Tokens per Sec: 25152.59078746167
Epoch Step: 90 / 138 Loss: 5.544997692108154 Tokens per Sec: 27098.373082090802
Epoch Step: 95 / 138 Loss: 8.566202163696289 Tokens per Sec: 26176.17422173762
Epoch Step: 100 / 138 Loss: 7.207453727722168 Tokens per Sec: 25214.445690002485
Epoch Step: 105 / 138 Loss: 9.1539945602417 Tokens per Sec: 24076.679806494853
Epoch Step: 110 / 138 Loss: 8.85378360748291 Tokens per Sec: 24259.78960127936
Epoch Step: 115 / 138 Loss: 7.754590034484863 Tokens per Sec: 26110.829866332755
Epoch Step: 120 / 138 Loss: 10.221461296081543 Tokens per Sec: 21480.75700034733
Epoch Step: 125 / 138 Loss: 74.14794921875 Tokens per Sec: 24752.003702800033
Epoch Step: 130 / 138 Loss: 10.094846725463867 Tokens per Sec: 22815.44200962865
Epoch Step: 135 / 138 Loss: 8.802336692810059 Tokens per Sec: 24408.70092133659
Epoch ended with duration 0:00:25.064605
Train perplexity: 1.3350793898986448
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.219257
Validation perplexity: 1.317834878415312
Epoch 139 / 1000
Epoch Step: 5 / 138 Loss: 12.23875904083252 Tokens per Sec: 24998.10259143487
Epoch Step: 10 / 138 Loss: 117.26150512695312 Tokens per Sec: 23935.708334604395
Epoch Step: 15 / 138 Loss: 12.702888488769531 Tokens per Sec: 25230.601352225713
Epoch Step: 20 / 138 Loss: 10.445971488952637 Tokens per Sec: 27073.61421882804
Epoch Step: 25 / 138 Loss: 11.174736976623535 Tokens per Sec: 27286.782188584337
Epoch Step: 30 / 138 Loss: 7.107642650604248 Tokens per Sec: 27204.840510924678
Epoch Step: 35 / 138 Loss: 14.284172058105469 Tokens per Sec: 24640.883116996807
Epoch Step: 40 / 138 Loss: 10.657196044921875 Tokens per Sec: 25486.52315694929
Epoch Step: 45 / 138 Loss: 8.550442695617676 Tokens per Sec: 26051.85402470135
Epoch Step: 50 / 138 Loss: 7.482059478759766 Tokens per Sec: 27474.97232425746
Epoch Step: 55 / 138 Loss: 10.744091033935547 Tokens per Sec: 27253.877267682372
Epoch Step: 60 / 138 Loss: 8.75771713256836 Tokens per Sec: 26138.10990723025
Epoch Step: 65 / 138 Loss: 12.643707275390625 Tokens per Sec: 23600.55111721345
Epoch Step: 70 / 138 Loss: 8.998628616333008 Tokens per Sec: 28165.768641954073
Epoch Step: 75 / 138 Loss: 7.6809186935424805 Tokens per Sec: 26071.693994186975
Epoch Step: 80 / 138 Loss: 8.183218955993652 Tokens per Sec: 26573.875476292014
Epoch Step: 85 / 138 Loss: 12.279399871826172 Tokens per Sec: 27798.37583575533
Epoch Step: 90 / 138 Loss: 11.037579536437988 Tokens per Sec: 25628.627700974044
Epoch Step: 95 / 138 Loss: 10.009767532348633 Tokens per Sec: 24844.769655173917
Epoch Step: 100 / 138 Loss: 10.313480377197266 Tokens per Sec: 26948.010733770938
Epoch Step: 105 / 138 Loss: 13.229742050170898 Tokens per Sec: 23692.527263013104
Epoch Step: 110 / 138 Loss: 11.985949516296387 Tokens per Sec: 25083.472730910045
Epoch Step: 115 / 138 Loss: 8.633828163146973 Tokens per Sec: 25554.21032241015
Epoch Step: 120 / 138 Loss: 9.987723350524902 Tokens per Sec: 22329.050583798027
Epoch Step: 125 / 138 Loss: 8.750370979309082 Tokens per Sec: 23812.446696348336
Epoch Step: 130 / 138 Loss: 9.169509887695312 Tokens per Sec: 23249.340556933097
Epoch Step: 135 / 138 Loss: 10.518450736999512 Tokens per Sec: 22366.197063751086
Epoch ended with duration 0:00:25.106374
Train perplexity: 1.3258178869160042
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 > = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.198220
Validation perplexity: 1.4937900196232439
Epoch 140 / 1000
Epoch Step: 5 / 138 Loss: 8.617956161499023 Tokens per Sec: 24732.32578831096
Epoch Step: 10 / 138 Loss: 13.777709007263184 Tokens per Sec: 24551.07848106939
Epoch Step: 15 / 138 Loss: 78.81829071044922 Tokens per Sec: 26415.99455068062
Epoch Step: 20 / 138 Loss: 7.12696647644043 Tokens per Sec: 27765.482758313312
Epoch Step: 25 / 138 Loss: 12.094603538513184 Tokens per Sec: 24302.683124023068
Epoch Step: 30 / 138 Loss: 8.708968162536621 Tokens per Sec: 24566.67020988123
Epoch Step: 35 / 138 Loss: 12.884836196899414 Tokens per Sec: 24990.416008897388
Epoch Step: 40 / 138 Loss: 5.483182430267334 Tokens per Sec: 26963.268795334672
Epoch Step: 45 / 138 Loss: 7.3048224449157715 Tokens per Sec: 25977.29435850378
Epoch Step: 50 / 138 Loss: 7.441713809967041 Tokens per Sec: 26351.74797205459
Epoch Step: 55 / 138 Loss: 6.731996536254883 Tokens per Sec: 26598.599430825663
Epoch Step: 60 / 138 Loss: 8.300017356872559 Tokens per Sec: 27039.34443319258
Epoch Step: 65 / 138 Loss: 5.852234840393066 Tokens per Sec: 26323.3462943789
Epoch Step: 70 / 138 Loss: 11.427623748779297 Tokens per Sec: 24340.33502643669
Epoch Step: 75 / 138 Loss: 12.929059028625488 Tokens per Sec: 27094.78643327098
Epoch Step: 80 / 138 Loss: 11.618369102478027 Tokens per Sec: 27567.54952067472
Epoch Step: 85 / 138 Loss: 11.033167839050293 Tokens per Sec: 25526.342164700713
Epoch Step: 90 / 138 Loss: 10.24605655670166 Tokens per Sec: 26106.60449738464
Epoch Step: 95 / 138 Loss: 8.223343849182129 Tokens per Sec: 27446.6664369222
Epoch Step: 100 / 138 Loss: 12.455867767333984 Tokens per Sec: 24823.26587469042
Epoch Step: 105 / 138 Loss: 14.75452995300293 Tokens per Sec: 23923.823830735706
Epoch Step: 110 / 138 Loss: 9.38844108581543 Tokens per Sec: 21932.288651648934
Epoch Step: 115 / 138 Loss: 9.065170288085938 Tokens per Sec: 22960.125293698584
Epoch Step: 120 / 138 Loss: 7.885936737060547 Tokens per Sec: 25246.07189828877
Epoch Step: 125 / 138 Loss: 6.892201900482178 Tokens per Sec: 25160.019630185292
Epoch Step: 130 / 138 Loss: 14.674684524536133 Tokens per Sec: 25218.715931243227
Epoch Step: 135 / 138 Loss: 164.32957458496094 Tokens per Sec: 23116.912010590135
Epoch ended with duration 0:00:25.111111
Train perplexity: 1.3328334342661068
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.214717
Validation perplexity: 2.120246784276757
Model saved checkpoint!
Epoch 141 / 1000
Epoch Step: 5 / 138 Loss: 7.899044513702393 Tokens per Sec: 25356.543008761022
Epoch Step: 10 / 138 Loss: 9.236237525939941 Tokens per Sec: 26849.677649079447
Epoch Step: 15 / 138 Loss: 7.223756313323975 Tokens per Sec: 25782.42367875235
Epoch Step: 20 / 138 Loss: 15.358011245727539 Tokens per Sec: 26191.55237038286
Epoch Step: 25 / 138 Loss: 6.819464206695557 Tokens per Sec: 23665.38428754599
Epoch Step: 30 / 138 Loss: 9.475996017456055 Tokens per Sec: 26082.753636210102
Epoch Step: 35 / 138 Loss: 9.562567710876465 Tokens per Sec: 26715.398701906674
Epoch Step: 40 / 138 Loss: 107.90228271484375 Tokens per Sec: 25991.96772777688
Epoch Step: 45 / 138 Loss: 6.709964275360107 Tokens per Sec: 25018.367156362867
Epoch Step: 50 / 138 Loss: 8.693613052368164 Tokens per Sec: 25944.43285261664
Epoch Step: 55 / 138 Loss: 5.092501163482666 Tokens per Sec: 28300.183192965327
Epoch Step: 60 / 138 Loss: 113.96379852294922 Tokens per Sec: 26040.674370160294
Epoch Step: 65 / 138 Loss: 75.8665542602539 Tokens per Sec: 25497.917715693337
Epoch Step: 70 / 138 Loss: 9.229084968566895 Tokens per Sec: 28178.049207155116
Epoch Step: 75 / 138 Loss: 11.230977058410645 Tokens per Sec: 25436.020956937722
Epoch Step: 80 / 138 Loss: 8.663253784179688 Tokens per Sec: 25728.293097117847
Epoch Step: 85 / 138 Loss: 17.047544479370117 Tokens per Sec: 25334.431794832846
Epoch Step: 90 / 138 Loss: 9.763221740722656 Tokens per Sec: 24768.983792603507
Epoch Step: 95 / 138 Loss: 7.697757244110107 Tokens per Sec: 27291.448966225944
Epoch Step: 100 / 138 Loss: 145.33209228515625 Tokens per Sec: 24713.050551360564
Epoch Step: 105 / 138 Loss: 5.893077850341797 Tokens per Sec: 24933.13127516224
Epoch Step: 110 / 138 Loss: 8.958621978759766 Tokens per Sec: 24871.66025852323
Epoch Step: 115 / 138 Loss: 9.596213340759277 Tokens per Sec: 24631.602330020523
Epoch Step: 120 / 138 Loss: 6.035420894622803 Tokens per Sec: 23837.045076855342
Epoch Step: 125 / 138 Loss: 10.726031303405762 Tokens per Sec: 23604.866277362293
Epoch Step: 130 / 138 Loss: 10.77484130859375 Tokens per Sec: 21866.366367155693
Epoch Step: 135 / 138 Loss: 12.073921203613281 Tokens per Sec: 24088.968276131276
Epoch ended with duration 0:00:25.129359
Train perplexity: 1.3091505827461885
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.212419
Validation perplexity: 1.8552327909222364
Epoch 142 / 1000
Epoch Step: 5 / 138 Loss: 6.186056137084961 Tokens per Sec: 26203.061044813345
Epoch Step: 10 / 138 Loss: 6.0684814453125 Tokens per Sec: 24721.078173819624
Epoch Step: 15 / 138 Loss: 8.821425437927246 Tokens per Sec: 25896.311954139568
Epoch Step: 20 / 138 Loss: 111.88245391845703 Tokens per Sec: 28705.07042571892
Epoch Step: 25 / 138 Loss: 8.856016159057617 Tokens per Sec: 28436.42828858732
Epoch Step: 30 / 138 Loss: 12.052274703979492 Tokens per Sec: 24859.625053463285
Epoch Step: 35 / 138 Loss: 8.980461120605469 Tokens per Sec: 27540.733925331886
Epoch Step: 40 / 138 Loss: 8.064156532287598 Tokens per Sec: 24400.813757164702
Epoch Step: 45 / 138 Loss: 10.52995777130127 Tokens per Sec: 25892.57834178746
Epoch Step: 50 / 138 Loss: 7.925270080566406 Tokens per Sec: 26450.87225937295
Epoch Step: 55 / 138 Loss: 8.857335090637207 Tokens per Sec: 24935.091176193873
Epoch Step: 60 / 138 Loss: 8.438183784484863 Tokens per Sec: 26903.203826341214
Epoch Step: 65 / 138 Loss: 193.881103515625 Tokens per Sec: 26540.265866320362
Epoch Step: 70 / 138 Loss: 9.436631202697754 Tokens per Sec: 25892.943821455894
Epoch Step: 75 / 138 Loss: 8.590951919555664 Tokens per Sec: 25023.08646045404
Epoch Step: 80 / 138 Loss: 12.487214088439941 Tokens per Sec: 26511.42903982269
Epoch Step: 85 / 138 Loss: 14.173434257507324 Tokens per Sec: 26528.623698944164
Epoch Step: 90 / 138 Loss: 12.306262969970703 Tokens per Sec: 25906.23833655705
Epoch Step: 95 / 138 Loss: 14.559913635253906 Tokens per Sec: 24343.50980725803
Epoch Step: 100 / 138 Loss: 9.236886024475098 Tokens per Sec: 24816.025071408003
Epoch Step: 105 / 138 Loss: 8.631576538085938 Tokens per Sec: 22014.771280500983
Epoch Step: 110 / 138 Loss: 5.719770431518555 Tokens per Sec: 23577.160678716362
Epoch Step: 115 / 138 Loss: 10.185067176818848 Tokens per Sec: 25090.271478087347
Epoch Step: 120 / 138 Loss: 8.032745361328125 Tokens per Sec: 23927.99179798687
Epoch Step: 125 / 138 Loss: 7.239571571350098 Tokens per Sec: 23969.974876791613
Epoch Step: 130 / 138 Loss: 8.445638656616211 Tokens per Sec: 24006.48044520189
Epoch Step: 135 / 138 Loss: 7.9295220375061035 Tokens per Sec: 25227.44517043761
Epoch ended with duration 0:00:25.096708
Train perplexity: 1.276997383875402
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 u = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.216576
Validation perplexity: 1.7091315012621748
Epoch 143 / 1000
Epoch Step: 5 / 138 Loss: 9.775559425354004 Tokens per Sec: 27320.59258850345
Epoch Step: 10 / 138 Loss: 6.855681419372559 Tokens per Sec: 25207.88268337289
Epoch Step: 15 / 138 Loss: 7.8902387619018555 Tokens per Sec: 25986.39101302659
Epoch Step: 20 / 138 Loss: 12.464553833007812 Tokens per Sec: 28375.80596369501
Epoch Step: 25 / 138 Loss: 12.07495403289795 Tokens per Sec: 26703.191956886312
Epoch Step: 30 / 138 Loss: 4.504853248596191 Tokens per Sec: 24624.628857103435
Epoch Step: 35 / 138 Loss: 9.655963897705078 Tokens per Sec: 25496.784255001887
Epoch Step: 40 / 138 Loss: 7.156485557556152 Tokens per Sec: 23865.945456858408
Epoch Step: 45 / 138 Loss: 8.440423965454102 Tokens per Sec: 25878.429571460285
Epoch Step: 50 / 138 Loss: 6.6493239402771 Tokens per Sec: 25672.44981096744
Epoch Step: 55 / 138 Loss: 9.51256275177002 Tokens per Sec: 24902.187750966983
Epoch Step: 60 / 138 Loss: 9.020353317260742 Tokens per Sec: 26052.874096159183
Epoch Step: 65 / 138 Loss: 11.948298454284668 Tokens per Sec: 26101.874367463144
Epoch Step: 70 / 138 Loss: 7.813709735870361 Tokens per Sec: 26333.302923916664
Epoch Step: 75 / 138 Loss: 8.963170051574707 Tokens per Sec: 27316.092419243763
Epoch Step: 80 / 138 Loss: 6.762539386749268 Tokens per Sec: 25029.41354945862
Epoch Step: 85 / 138 Loss: 61.424102783203125 Tokens per Sec: 26765.944223945164
Epoch Step: 90 / 138 Loss: 10.204029083251953 Tokens per Sec: 26348.772768998828
Epoch Step: 95 / 138 Loss: 123.08499145507812 Tokens per Sec: 26326.868282205625
Epoch Step: 100 / 138 Loss: 10.827896118164062 Tokens per Sec: 26207.80657229308
Epoch Step: 105 / 138 Loss: 7.613160133361816 Tokens per Sec: 24469.005080608997
Epoch Step: 110 / 138 Loss: 8.38729190826416 Tokens per Sec: 24326.430463806057
Epoch Step: 115 / 138 Loss: 6.651760101318359 Tokens per Sec: 23817.67358980202
Epoch Step: 120 / 138 Loss: 9.144619941711426 Tokens per Sec: 22032.86708883834
Epoch Step: 125 / 138 Loss: 9.666441917419434 Tokens per Sec: 25059.03204359779
Epoch Step: 130 / 138 Loss: 144.143310546875 Tokens per Sec: 24096.839058585796
Epoch Step: 135 / 138 Loss: 8.115724563598633 Tokens per Sec: 24223.11552273292
Epoch ended with duration 0:00:25.061211
Train perplexity: 1.2186556422922847
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { user . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.180756
Validation perplexity: 1.2454862856642621
Epoch 144 / 1000
Epoch Step: 5 / 138 Loss: 10.001004219055176 Tokens per Sec: 28487.53715621998
Epoch Step: 10 / 138 Loss: 10.428854942321777 Tokens per Sec: 23006.673094725527
Epoch Step: 15 / 138 Loss: 12.64667797088623 Tokens per Sec: 26888.711070261237
Epoch Step: 20 / 138 Loss: 6.426791667938232 Tokens per Sec: 24586.115942077682
Epoch Step: 25 / 138 Loss: 9.494205474853516 Tokens per Sec: 26046.589459309555
Epoch Step: 30 / 138 Loss: 5.855403423309326 Tokens per Sec: 25910.64248442467
Epoch Step: 35 / 138 Loss: 5.380743503570557 Tokens per Sec: 24047.250221043323
Epoch Step: 40 / 138 Loss: 9.696818351745605 Tokens per Sec: 25236.402861482355
Epoch Step: 45 / 138 Loss: 7.340023040771484 Tokens per Sec: 27818.888235650236
Epoch Step: 50 / 138 Loss: 119.8145980834961 Tokens per Sec: 27863.318015986744
Epoch Step: 55 / 138 Loss: 7.750887393951416 Tokens per Sec: 24344.556495927347
Epoch Step: 60 / 138 Loss: 6.913815021514893 Tokens per Sec: 24744.719763952766
Epoch Step: 65 / 138 Loss: 7.139457702636719 Tokens per Sec: 28654.223310561003
Epoch Step: 70 / 138 Loss: 9.525464057922363 Tokens per Sec: 25719.617878005523
Epoch Step: 75 / 138 Loss: 8.943989753723145 Tokens per Sec: 25031.96092585825
Epoch Step: 80 / 138 Loss: 8.200798988342285 Tokens per Sec: 27653.776607747273
Epoch Step: 85 / 138 Loss: 11.763143539428711 Tokens per Sec: 23742.645385354812
Epoch Step: 90 / 138 Loss: 9.866649627685547 Tokens per Sec: 26788.12560503908
Epoch Step: 95 / 138 Loss: 11.446310997009277 Tokens per Sec: 25318.38900197942
Epoch Step: 100 / 138 Loss: 7.207498073577881 Tokens per Sec: 25902.280029489986
Epoch Step: 105 / 138 Loss: 8.452597618103027 Tokens per Sec: 23831.598224407568
Epoch Step: 110 / 138 Loss: 11.119806289672852 Tokens per Sec: 25694.920915803385
Epoch Step: 115 / 138 Loss: 8.156084060668945 Tokens per Sec: 24447.627681783986
Epoch Step: 120 / 138 Loss: 8.520809173583984 Tokens per Sec: 23677.719206496437
Epoch Step: 125 / 138 Loss: 9.488004684448242 Tokens per Sec: 25497.049924140883
Epoch Step: 130 / 138 Loss: 8.300159454345703 Tokens per Sec: 20934.045542447708
Epoch Step: 135 / 138 Loss: 8.812049865722656 Tokens per Sec: 25106.096850043865
Epoch ended with duration 0:00:25.128432
Train perplexity: 1.280082304270616
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.209888
Validation perplexity: 1.4236575928436497
Epoch 145 / 1000
Epoch Step: 5 / 138 Loss: 11.487019538879395 Tokens per Sec: 23948.122073218216
Epoch Step: 10 / 138 Loss: 9.350726127624512 Tokens per Sec: 27567.29765196467
Epoch Step: 15 / 138 Loss: 5.401922225952148 Tokens per Sec: 25662.069635383916
Epoch Step: 20 / 138 Loss: 10.159836769104004 Tokens per Sec: 26722.29276711606
Epoch Step: 25 / 138 Loss: 6.135778903961182 Tokens per Sec: 23194.198363676267
Epoch Step: 30 / 138 Loss: 8.406132698059082 Tokens per Sec: 26383.761143150765
Epoch Step: 35 / 138 Loss: 7.716497898101807 Tokens per Sec: 26100.574272124548
Epoch Step: 40 / 138 Loss: 8.181401252746582 Tokens per Sec: 26279.080025694027
Epoch Step: 45 / 138 Loss: 7.318875789642334 Tokens per Sec: 25103.727346858275
Epoch Step: 50 / 138 Loss: 5.568187713623047 Tokens per Sec: 26939.173785512095
Epoch Step: 55 / 138 Loss: 5.806517601013184 Tokens per Sec: 27953.473285015658
Epoch Step: 60 / 138 Loss: 5.199506759643555 Tokens per Sec: 27295.575004602066
Epoch Step: 65 / 138 Loss: 4.899600982666016 Tokens per Sec: 25164.821193972206
Epoch Step: 70 / 138 Loss: 7.891402244567871 Tokens per Sec: 26900.453290057598
Epoch Step: 75 / 138 Loss: 7.923581600189209 Tokens per Sec: 25604.385099072733
Epoch Step: 80 / 138 Loss: 11.456805229187012 Tokens per Sec: 26173.49429783154
Epoch Step: 85 / 138 Loss: 9.936860084533691 Tokens per Sec: 27864.042789723953
Epoch Step: 90 / 138 Loss: 11.090747833251953 Tokens per Sec: 25001.64587282105
Epoch Step: 95 / 138 Loss: 6.52784538269043 Tokens per Sec: 25561.791784728874
Epoch Step: 100 / 138 Loss: 7.538607597351074 Tokens per Sec: 25897.85411073123
Epoch Step: 105 / 138 Loss: 8.239301681518555 Tokens per Sec: 25177.873896154953
Epoch Step: 110 / 138 Loss: 8.147244453430176 Tokens per Sec: 24692.788790787028
Epoch Step: 115 / 138 Loss: 7.443959712982178 Tokens per Sec: 22335.95579582505
Epoch Step: 120 / 138 Loss: 121.26128387451172 Tokens per Sec: 23773.105431380474
Epoch Step: 125 / 138 Loss: 121.37008666992188 Tokens per Sec: 23722.9307240735
Epoch Step: 130 / 138 Loss: 55.77022933959961 Tokens per Sec: 24897.073883239602
Epoch Step: 135 / 138 Loss: 9.847637176513672 Tokens per Sec: 24260.793747856827
Epoch ended with duration 0:00:25.033955
Train perplexity: 1.2243012222396694
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.198249
Validation perplexity: 1.5792278213520525
Model saved checkpoint!
Epoch 146 / 1000
Epoch Step: 5 / 138 Loss: 7.7440009117126465 Tokens per Sec: 24673.779372506808
Epoch Step: 10 / 138 Loss: 11.25632381439209 Tokens per Sec: 25302.29467245373
Epoch Step: 15 / 138 Loss: 13.504926681518555 Tokens per Sec: 25506.432466128095
Epoch Step: 20 / 138 Loss: 171.18341064453125 Tokens per Sec: 26015.918952033076
Epoch Step: 25 / 138 Loss: 107.24227905273438 Tokens per Sec: 27308.305134746155
Epoch Step: 30 / 138 Loss: 7.293860912322998 Tokens per Sec: 26773.66833869378
Epoch Step: 35 / 138 Loss: 12.053357124328613 Tokens per Sec: 26571.78973466184
Epoch Step: 40 / 138 Loss: 8.808691024780273 Tokens per Sec: 27659.232448489103
Epoch Step: 45 / 138 Loss: 11.244658470153809 Tokens per Sec: 26195.887751293554
Epoch Step: 50 / 138 Loss: 5.908787727355957 Tokens per Sec: 25480.62412771805
Epoch Step: 55 / 138 Loss: 12.37219524383545 Tokens per Sec: 27259.43796758804
Epoch Step: 60 / 138 Loss: 5.265990257263184 Tokens per Sec: 25345.213667254233
Epoch Step: 65 / 138 Loss: 8.242374420166016 Tokens per Sec: 24962.48470829576
Epoch Step: 70 / 138 Loss: 9.832074165344238 Tokens per Sec: 27455.679601885782
Epoch Step: 75 / 138 Loss: 63.81189727783203 Tokens per Sec: 24716.11063316944
Epoch Step: 80 / 138 Loss: 8.06644058227539 Tokens per Sec: 25775.37333318729
Epoch Step: 85 / 138 Loss: 13.038829803466797 Tokens per Sec: 23314.591186581958
Epoch Step: 90 / 138 Loss: 10.47948169708252 Tokens per Sec: 25404.36407109658
Epoch Step: 95 / 138 Loss: 12.400566101074219 Tokens per Sec: 26577.640515446008
Epoch Step: 100 / 138 Loss: 11.227849960327148 Tokens per Sec: 25821.934715646483
Epoch Step: 105 / 138 Loss: 7.977898120880127 Tokens per Sec: 24078.550002323656
Epoch Step: 110 / 138 Loss: 7.587265968322754 Tokens per Sec: 25483.688447917426
Epoch Step: 115 / 138 Loss: 8.966964721679688 Tokens per Sec: 25191.777226423033
Epoch Step: 120 / 138 Loss: 8.396709442138672 Tokens per Sec: 24497.374232297305
Epoch Step: 125 / 138 Loss: 40.02308654785156 Tokens per Sec: 23988.297378158157
Epoch Step: 130 / 138 Loss: 9.761448860168457 Tokens per Sec: 20857.608719525004
Epoch Step: 135 / 138 Loss: 8.979436874389648 Tokens per Sec: 25721.719637336606
Epoch ended with duration 0:00:25.118238
Train perplexity: 1.281017184533264
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 u = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.213638
Validation perplexity: 1.721991398944145
Epoch 147 / 1000
Epoch Step: 5 / 138 Loss: 8.957533836364746 Tokens per Sec: 24414.812704276697
Epoch Step: 10 / 138 Loss: 7.537378311157227 Tokens per Sec: 24717.586111657936
Epoch Step: 15 / 138 Loss: 4.972543716430664 Tokens per Sec: 25821.79554492243
Epoch Step: 20 / 138 Loss: 11.30508041381836 Tokens per Sec: 23488.90553159704
Epoch Step: 25 / 138 Loss: 7.356264591217041 Tokens per Sec: 26336.20093738904
Epoch Step: 30 / 138 Loss: 7.842893600463867 Tokens per Sec: 27979.060275092186
Epoch Step: 35 / 138 Loss: 14.637170791625977 Tokens per Sec: 24829.749062592127
Epoch Step: 40 / 138 Loss: 9.481642723083496 Tokens per Sec: 25908.42076242479
Epoch Step: 45 / 138 Loss: 11.040952682495117 Tokens per Sec: 25108.510532119326
Epoch Step: 50 / 138 Loss: 11.32300853729248 Tokens per Sec: 27756.93506770984
Epoch Step: 55 / 138 Loss: 56.61427307128906 Tokens per Sec: 26284.228715233636
Epoch Step: 60 / 138 Loss: 114.98173522949219 Tokens per Sec: 26957.327687435016
Epoch Step: 65 / 138 Loss: 9.184036254882812 Tokens per Sec: 24467.530964314734
Epoch Step: 70 / 138 Loss: 6.958647727966309 Tokens per Sec: 26869.25681136041
Epoch Step: 75 / 138 Loss: 12.063894271850586 Tokens per Sec: 25507.023867889267
Epoch Step: 80 / 138 Loss: 9.059698104858398 Tokens per Sec: 27454.544183817114
Epoch Step: 85 / 138 Loss: 8.406474113464355 Tokens per Sec: 24619.13381502068
Epoch Step: 90 / 138 Loss: 8.335055351257324 Tokens per Sec: 28620.516536440744
Epoch Step: 95 / 138 Loss: 10.888215065002441 Tokens per Sec: 26301.77456011162
Epoch Step: 100 / 138 Loss: 7.256171703338623 Tokens per Sec: 26992.943469836948
Epoch Step: 105 / 138 Loss: 11.989296913146973 Tokens per Sec: 24837.00523948459
Epoch Step: 110 / 138 Loss: 8.866193771362305 Tokens per Sec: 23990.686313811082
Epoch Step: 115 / 138 Loss: 8.740303993225098 Tokens per Sec: 23677.006539949463
Epoch Step: 120 / 138 Loss: 8.906614303588867 Tokens per Sec: 25560.274551128434
Epoch Step: 125 / 138 Loss: 9.705730438232422 Tokens per Sec: 24365.290712992795
Epoch Step: 130 / 138 Loss: 10.83954906463623 Tokens per Sec: 25695.310521176943
Epoch Step: 135 / 138 Loss: 112.34010314941406 Tokens per Sec: 23786.19523784457
Epoch ended with duration 0:00:25.011302
Train perplexity: 1.3654017332548332
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 > = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.198762
Validation perplexity: 1.5406695067415113
Epoch 148 / 1000
Epoch Step: 5 / 138 Loss: 12.692903518676758 Tokens per Sec: 26748.636139848633
Epoch Step: 10 / 138 Loss: 11.568753242492676 Tokens per Sec: 24902.183514639273
Epoch Step: 15 / 138 Loss: 6.045793533325195 Tokens per Sec: 25759.411941727838
Epoch Step: 20 / 138 Loss: 11.14359188079834 Tokens per Sec: 26719.300947986703
Epoch Step: 25 / 138 Loss: 10.063026428222656 Tokens per Sec: 25472.242833526005
Epoch Step: 30 / 138 Loss: 5.215360641479492 Tokens per Sec: 27961.228223771857
Epoch Step: 35 / 138 Loss: 161.4829559326172 Tokens per Sec: 26109.145718824704
Epoch Step: 40 / 138 Loss: 11.1255521774292 Tokens per Sec: 25452.725565991335
Epoch Step: 45 / 138 Loss: 10.934548377990723 Tokens per Sec: 23438.019512475646
Epoch Step: 50 / 138 Loss: 7.359123229980469 Tokens per Sec: 24950.439310241087
Epoch Step: 55 / 138 Loss: 10.490501403808594 Tokens per Sec: 26253.6281268372
Epoch Step: 60 / 138 Loss: 9.670445442199707 Tokens per Sec: 28061.631814488606
Epoch Step: 65 / 138 Loss: 12.978211402893066 Tokens per Sec: 24700.375522107366
Epoch Step: 70 / 138 Loss: 9.498200416564941 Tokens per Sec: 29215.2693212903
Epoch Step: 75 / 138 Loss: 75.7697525024414 Tokens per Sec: 25697.605010529023
Epoch Step: 80 / 138 Loss: 13.444856643676758 Tokens per Sec: 26504.059291737452
Epoch Step: 85 / 138 Loss: 12.236551284790039 Tokens per Sec: 25683.472295214153
Epoch Step: 90 / 138 Loss: 9.551034927368164 Tokens per Sec: 26440.00099210571
Epoch Step: 95 / 138 Loss: 11.377901077270508 Tokens per Sec: 25058.96279565748
Epoch Step: 100 / 138 Loss: 8.946319580078125 Tokens per Sec: 24618.75423876832
Epoch Step: 105 / 138 Loss: 10.187091827392578 Tokens per Sec: 23267.946027388087
Epoch Step: 110 / 138 Loss: 4.797253608703613 Tokens per Sec: 24415.459426623627
Epoch Step: 115 / 138 Loss: 7.916518211364746 Tokens per Sec: 24589.53980417123
Epoch Step: 120 / 138 Loss: 9.132585525512695 Tokens per Sec: 23677.845359972842
Epoch Step: 125 / 138 Loss: 9.019580841064453 Tokens per Sec: 21580.926556745333
Epoch Step: 130 / 138 Loss: 135.5509490966797 Tokens per Sec: 26078.896226186556
Epoch Step: 135 / 138 Loss: 8.46188735961914 Tokens per Sec: 23446.566011214403
Epoch ended with duration 0:00:25.111355
Train perplexity: 1.3224443058555073
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 u = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.204565
Validation perplexity: 1.5588772483362099
Epoch 149 / 1000
Epoch Step: 5 / 138 Loss: 146.8983917236328 Tokens per Sec: 25213.364917703202
Epoch Step: 10 / 138 Loss: 7.988673686981201 Tokens per Sec: 28664.74764236505
Epoch Step: 15 / 138 Loss: 11.109904289245605 Tokens per Sec: 25688.19090928571
Epoch Step: 20 / 138 Loss: 5.810935974121094 Tokens per Sec: 27682.679499484013
Epoch Step: 25 / 138 Loss: 127.52722930908203 Tokens per Sec: 25172.245434104785
Epoch Step: 30 / 138 Loss: 8.410845756530762 Tokens per Sec: 27155.969053172983
Epoch Step: 35 / 138 Loss: 7.308534622192383 Tokens per Sec: 26325.10764969659
Epoch Step: 40 / 138 Loss: 7.030716419219971 Tokens per Sec: 25944.44924987841
Epoch Step: 45 / 138 Loss: 5.992621898651123 Tokens per Sec: 28847.97574168738
Epoch Step: 50 / 138 Loss: 12.530743598937988 Tokens per Sec: 24651.784324863238
Epoch Step: 55 / 138 Loss: 10.559865951538086 Tokens per Sec: 24520.82027245028
Epoch Step: 60 / 138 Loss: 15.25929069519043 Tokens per Sec: 25416.842652722553
Epoch Step: 65 / 138 Loss: 13.387564659118652 Tokens per Sec: 25182.998586715123
Epoch Step: 70 / 138 Loss: 10.709092140197754 Tokens per Sec: 27156.186728248606
Epoch Step: 75 / 138 Loss: 12.239978790283203 Tokens per Sec: 23528.421099650564
Epoch Step: 80 / 138 Loss: 6.0409345626831055 Tokens per Sec: 27377.633483072204
Epoch Step: 85 / 138 Loss: 10.026047706604004 Tokens per Sec: 27264.11361077252
Epoch Step: 90 / 138 Loss: 7.1803388595581055 Tokens per Sec: 26527.090890768006
Epoch Step: 95 / 138 Loss: 9.473846435546875 Tokens per Sec: 24131.79491513928
Epoch Step: 100 / 138 Loss: 4.680143356323242 Tokens per Sec: 25113.711003688284
Epoch Step: 105 / 138 Loss: 10.072107315063477 Tokens per Sec: 25258.05862029268
Epoch Step: 110 / 138 Loss: 8.802643775939941 Tokens per Sec: 24347.96883004493
Epoch Step: 115 / 138 Loss: 106.50848388671875 Tokens per Sec: 24032.19704609621
Epoch Step: 120 / 138 Loss: 10.957844734191895 Tokens per Sec: 22178.58718781732
Epoch Step: 125 / 138 Loss: 13.611845016479492 Tokens per Sec: 23415.666034902377
Epoch Step: 130 / 138 Loss: 99.21070098876953 Tokens per Sec: 24528.937535826335
Epoch Step: 135 / 138 Loss: 10.322824478149414 Tokens per Sec: 23729.641916935925
Epoch ended with duration 0:00:25.047045
Train perplexity: 1.3838976982313944
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) boolean TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.200523
Validation perplexity: 1.3930058657265307
Epoch 150 / 1000
Epoch Step: 5 / 138 Loss: 65.24080657958984 Tokens per Sec: 26498.384358632356
Epoch Step: 10 / 138 Loss: 9.08252239227295 Tokens per Sec: 27293.530443692092
Epoch Step: 15 / 138 Loss: 12.256107330322266 Tokens per Sec: 28251.23109796229
Epoch Step: 20 / 138 Loss: 7.035206317901611 Tokens per Sec: 26338.444847709507
Epoch Step: 25 / 138 Loss: 7.4476752281188965 Tokens per Sec: 22623.023230779
Epoch Step: 30 / 138 Loss: 12.647011756896973 Tokens per Sec: 25274.644958009776
Epoch Step: 35 / 138 Loss: 54.333309173583984 Tokens per Sec: 26139.03049377579
Epoch Step: 40 / 138 Loss: 6.652054309844971 Tokens per Sec: 26294.63542352428
Epoch Step: 45 / 138 Loss: 116.97506713867188 Tokens per Sec: 25438.50254045
Epoch Step: 50 / 138 Loss: 5.335023880004883 Tokens per Sec: 29121.746490658905
Epoch Step: 55 / 138 Loss: 5.397286415100098 Tokens per Sec: 25872.20072997222
Epoch Step: 60 / 138 Loss: 10.058907508850098 Tokens per Sec: 24287.960126374743
Epoch Step: 65 / 138 Loss: 9.992043495178223 Tokens per Sec: 25653.331435813798
Epoch Step: 70 / 138 Loss: 12.463297843933105 Tokens per Sec: 25012.489245162018
Epoch Step: 75 / 138 Loss: 8.693255424499512 Tokens per Sec: 25645.067646933152
Epoch Step: 80 / 138 Loss: 12.172106742858887 Tokens per Sec: 24692.67886559588
Epoch Step: 85 / 138 Loss: 7.870077133178711 Tokens per Sec: 26479.806771587428
Epoch Step: 90 / 138 Loss: 10.362713813781738 Tokens per Sec: 25034.18074983028
Epoch Step: 95 / 138 Loss: 9.034528732299805 Tokens per Sec: 28063.046781811252
Epoch Step: 100 / 138 Loss: 8.325260162353516 Tokens per Sec: 25874.578134679363
Epoch Step: 105 / 138 Loss: 10.143585205078125 Tokens per Sec: 24739.89410813479
Epoch Step: 110 / 138 Loss: 7.897133827209473 Tokens per Sec: 22408.791245491662
Epoch Step: 115 / 138 Loss: 11.255486488342285 Tokens per Sec: 25711.345046577208
Epoch Step: 120 / 138 Loss: 183.73068237304688 Tokens per Sec: 24765.09006154081
Epoch Step: 125 / 138 Loss: 7.999937057495117 Tokens per Sec: 23243.84222272374
Epoch Step: 130 / 138 Loss: 7.912813186645508 Tokens per Sec: 23176.741122467585
Epoch Step: 135 / 138 Loss: 10.090126037597656 Tokens per Sec: 23737.014816465762
Epoch ended with duration 0:00:25.143024
Train perplexity: 1.332072802899949
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 > = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.204945
Validation perplexity: 1.54907195421207
Model saved checkpoint!
Epoch 151 / 1000
Epoch Step: 5 / 138 Loss: 9.539239883422852 Tokens per Sec: 27395.94426940459
Epoch Step: 10 / 138 Loss: 5.9401116371154785 Tokens per Sec: 25225.609115133695
Epoch Step: 15 / 138 Loss: 100.40727233886719 Tokens per Sec: 24625.40630947599
Epoch Step: 20 / 138 Loss: 7.1818766593933105 Tokens per Sec: 25310.88853915389
Epoch Step: 25 / 138 Loss: 8.470108032226562 Tokens per Sec: 26862.15390823218
Epoch Step: 30 / 138 Loss: 12.12996768951416 Tokens per Sec: 23363.976890033875
Epoch Step: 35 / 138 Loss: 80.60887908935547 Tokens per Sec: 24540.394716338134
Epoch Step: 40 / 138 Loss: 10.314705848693848 Tokens per Sec: 25402.739159006087
Epoch Step: 45 / 138 Loss: 56.43082809448242 Tokens per Sec: 25085.800464709333
Epoch Step: 50 / 138 Loss: 9.058536529541016 Tokens per Sec: 25722.806986035608
Epoch Step: 55 / 138 Loss: 7.848361492156982 Tokens per Sec: 26830.178248496213
Epoch Step: 60 / 138 Loss: 11.02260684967041 Tokens per Sec: 25461.22685407469
Epoch Step: 65 / 138 Loss: 8.253142356872559 Tokens per Sec: 27040.58358318745
Epoch Step: 70 / 138 Loss: 8.359827041625977 Tokens per Sec: 27701.110146366198
Epoch Step: 75 / 138 Loss: 7.112739562988281 Tokens per Sec: 29073.312400302242
Epoch Step: 80 / 138 Loss: 10.039957046508789 Tokens per Sec: 27201.903297511824
Epoch Step: 85 / 138 Loss: 8.050239562988281 Tokens per Sec: 25498.858684567545
Epoch Step: 90 / 138 Loss: 6.66429328918457 Tokens per Sec: 28259.397049259256
Epoch Step: 95 / 138 Loss: 11.215352058410645 Tokens per Sec: 24394.873140072395
Epoch Step: 100 / 138 Loss: 10.481842041015625 Tokens per Sec: 25908.58883196798
Epoch Step: 105 / 138 Loss: 10.299595832824707 Tokens per Sec: 24696.899773191937
Epoch Step: 110 / 138 Loss: 11.098211288452148 Tokens per Sec: 24994.606200735514
Epoch Step: 115 / 138 Loss: 6.570076942443848 Tokens per Sec: 24287.54755023528
Epoch Step: 120 / 138 Loss: 9.242944717407227 Tokens per Sec: 24350.90734008131
Epoch Step: 125 / 138 Loss: 10.511597633361816 Tokens per Sec: 22453.71967340013
Epoch Step: 130 / 138 Loss: 6.695745944976807 Tokens per Sec: 24047.948626103233
Epoch Step: 135 / 138 Loss: 6.597854137420654 Tokens per Sec: 23692.447575456
Epoch ended with duration 0:00:25.081686
Train perplexity: 1.2826818025104594
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 > = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.187179
Validation perplexity: 1.3188260479191942
Epoch 152 / 1000
Epoch Step: 5 / 138 Loss: 9.020148277282715 Tokens per Sec: 26255.403225507234
Epoch Step: 10 / 138 Loss: 11.90020751953125 Tokens per Sec: 23675.20672683692
Epoch Step: 15 / 138 Loss: 6.0354485511779785 Tokens per Sec: 28407.100657185038
Epoch Step: 20 / 138 Loss: 144.17098999023438 Tokens per Sec: 26171.42774166143
Epoch Step: 25 / 138 Loss: 7.123245716094971 Tokens per Sec: 26042.075649820563
Epoch Step: 30 / 138 Loss: 5.931324481964111 Tokens per Sec: 28003.804922743744
Epoch Step: 35 / 138 Loss: 9.517990112304688 Tokens per Sec: 27206.27264776502
Epoch Step: 40 / 138 Loss: 5.748151779174805 Tokens per Sec: 25368.734965021988
Epoch Step: 45 / 138 Loss: 11.26287841796875 Tokens per Sec: 25364.773678713926
Epoch Step: 50 / 138 Loss: 7.990481853485107 Tokens per Sec: 25190.006145806983
Epoch Step: 55 / 138 Loss: 8.294439315795898 Tokens per Sec: 26507.09171126512
Epoch Step: 60 / 138 Loss: 6.9653425216674805 Tokens per Sec: 25061.123108537267
Epoch Step: 65 / 138 Loss: 9.325754165649414 Tokens per Sec: 25245.288195818237
Epoch Step: 70 / 138 Loss: 7.388370037078857 Tokens per Sec: 24874.451630570144
Epoch Step: 75 / 138 Loss: 11.064295768737793 Tokens per Sec: 26360.013932782338
Epoch Step: 80 / 138 Loss: 11.147848129272461 Tokens per Sec: 27111.817952898986
Epoch Step: 85 / 138 Loss: 10.175470352172852 Tokens per Sec: 26388.148311863795
Epoch Step: 90 / 138 Loss: 9.912317276000977 Tokens per Sec: 26017.04593557654
Epoch Step: 95 / 138 Loss: 9.305224418640137 Tokens per Sec: 23828.07763081769
Epoch Step: 100 / 138 Loss: 9.826902389526367 Tokens per Sec: 24668.63596008459
Epoch Step: 105 / 138 Loss: 6.941185474395752 Tokens per Sec: 24772.032865297846
Epoch Step: 110 / 138 Loss: 9.09012508392334 Tokens per Sec: 24949.636911663823
Epoch Step: 115 / 138 Loss: 10.357720375061035 Tokens per Sec: 24122.97103558906
Epoch Step: 120 / 138 Loss: 7.154317855834961 Tokens per Sec: 25035.79019995007
Epoch Step: 125 / 138 Loss: 7.305656909942627 Tokens per Sec: 24243.508094426223
Epoch Step: 130 / 138 Loss: 9.025612831115723 Tokens per Sec: 26101.743939627162
Epoch Step: 135 / 138 Loss: 9.380821228027344 Tokens per Sec: 22457.406217571213
Epoch ended with duration 0:00:25.045950
Train perplexity: 1.2640933895777517
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 > = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.207139
Validation perplexity: 1.835872702008382
Epoch 153 / 1000
Epoch Step: 5 / 138 Loss: 8.750102996826172 Tokens per Sec: 26644.1373054129
Epoch Step: 10 / 138 Loss: 8.122047424316406 Tokens per Sec: 26906.612063205805
Epoch Step: 15 / 138 Loss: 9.162598609924316 Tokens per Sec: 26686.208427109814
Epoch Step: 20 / 138 Loss: 6.736739158630371 Tokens per Sec: 27528.686756213152
Epoch Step: 25 / 138 Loss: 5.494602203369141 Tokens per Sec: 25574.713746067606
Epoch Step: 30 / 138 Loss: 7.282278060913086 Tokens per Sec: 27532.80531832334
Epoch Step: 35 / 138 Loss: 10.290239334106445 Tokens per Sec: 24860.655623577524
Epoch Step: 40 / 138 Loss: 6.916743278503418 Tokens per Sec: 24866.821571689237
Epoch Step: 45 / 138 Loss: 6.553597927093506 Tokens per Sec: 26961.780856350255
Epoch Step: 50 / 138 Loss: 8.554574012756348 Tokens per Sec: 24916.832318247638
Epoch Step: 55 / 138 Loss: 200.25564575195312 Tokens per Sec: 26055.220238263402
Epoch Step: 60 / 138 Loss: 4.4766845703125 Tokens per Sec: 26953.652904570597
Epoch Step: 65 / 138 Loss: 10.738180160522461 Tokens per Sec: 23641.15175073652
Epoch Step: 70 / 138 Loss: 12.020251274108887 Tokens per Sec: 26534.124581019572
Epoch Step: 75 / 138 Loss: 5.413952827453613 Tokens per Sec: 24599.43433785469
Epoch Step: 80 / 138 Loss: 8.418898582458496 Tokens per Sec: 27575.658106875322
Epoch Step: 85 / 138 Loss: 7.435041427612305 Tokens per Sec: 24618.76142275825
Epoch Step: 90 / 138 Loss: 82.4606704711914 Tokens per Sec: 26247.07423796332
Epoch Step: 95 / 138 Loss: 9.34582233428955 Tokens per Sec: 25725.361140128112
Epoch Step: 100 / 138 Loss: 11.416742324829102 Tokens per Sec: 25584.011874001437
Epoch Step: 105 / 138 Loss: 8.538764953613281 Tokens per Sec: 21322.356448483373
Epoch Step: 110 / 138 Loss: 10.503230094909668 Tokens per Sec: 24397.33899192642
Epoch Step: 115 / 138 Loss: 8.633074760437012 Tokens per Sec: 23987.954628764328
Epoch Step: 120 / 138 Loss: 79.50983428955078 Tokens per Sec: 23617.03001976352
Epoch Step: 125 / 138 Loss: 11.94798755645752 Tokens per Sec: 25676.148698502846
Epoch Step: 130 / 138 Loss: 8.791144371032715 Tokens per Sec: 23763.83710875203
Epoch Step: 135 / 138 Loss: 9.807882308959961 Tokens per Sec: 26441.24243742178
Epoch ended with duration 0:00:25.013391
Train perplexity: 1.2560076456740668
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 u = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.206201
Validation perplexity: 1.805804185158476
Epoch 154 / 1000
Epoch Step: 5 / 138 Loss: 5.884951114654541 Tokens per Sec: 25668.784375302825
Epoch Step: 10 / 138 Loss: 11.350456237792969 Tokens per Sec: 24397.20936907879
Epoch Step: 15 / 138 Loss: 8.18220329284668 Tokens per Sec: 25536.85314109688
Epoch Step: 20 / 138 Loss: 12.041020393371582 Tokens per Sec: 25710.850825997146
Epoch Step: 25 / 138 Loss: 6.2563581466674805 Tokens per Sec: 26082.650351718683
Epoch Step: 30 / 138 Loss: 11.501976013183594 Tokens per Sec: 27318.71583201826
Epoch Step: 35 / 138 Loss: 12.045624732971191 Tokens per Sec: 24435.692588271882
Epoch Step: 40 / 138 Loss: 10.179163932800293 Tokens per Sec: 24191.877098328165
Epoch Step: 45 / 138 Loss: 5.843069553375244 Tokens per Sec: 28720.8562925105
Epoch Step: 50 / 138 Loss: 7.125157356262207 Tokens per Sec: 26615.64892227875
Epoch Step: 55 / 138 Loss: 7.5929179191589355 Tokens per Sec: 24036.27865684942
Epoch Step: 60 / 138 Loss: 5.924865245819092 Tokens per Sec: 25610.768810185873
Epoch Step: 65 / 138 Loss: 7.8779778480529785 Tokens per Sec: 25924.246233537764
Epoch Step: 70 / 138 Loss: 5.773886203765869 Tokens per Sec: 26494.69008899657
Epoch Step: 75 / 138 Loss: 4.318639278411865 Tokens per Sec: 25185.298817154224
Epoch Step: 80 / 138 Loss: 11.491756439208984 Tokens per Sec: 25799.36115487963
Epoch Step: 85 / 138 Loss: 91.67194366455078 Tokens per Sec: 27093.05908701648
Epoch Step: 90 / 138 Loss: 8.141165733337402 Tokens per Sec: 27788.905191325393
Epoch Step: 95 / 138 Loss: 6.656552791595459 Tokens per Sec: 26758.65510599969
Epoch Step: 100 / 138 Loss: 9.561236381530762 Tokens per Sec: 25702.58971070258
Epoch Step: 105 / 138 Loss: 8.54982852935791 Tokens per Sec: 23707.28097488066
Epoch Step: 110 / 138 Loss: 10.24955940246582 Tokens per Sec: 24845.419784122452
Epoch Step: 115 / 138 Loss: 8.962859153747559 Tokens per Sec: 21072.04369152614
Epoch Step: 120 / 138 Loss: 7.3252339363098145 Tokens per Sec: 25624.850047402313
Epoch Step: 125 / 138 Loss: 8.381170272827148 Tokens per Sec: 25684.075625080448
Epoch Step: 130 / 138 Loss: 6.275266647338867 Tokens per Sec: 24092.983716518167
Epoch Step: 135 / 138 Loss: 8.298155784606934 Tokens per Sec: 25686.770048709317
Epoch ended with duration 0:00:25.053396
Train perplexity: 1.1990130844428297
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 u = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.204042
Validation perplexity: 1.370986380356652
Epoch 155 / 1000
Epoch Step: 5 / 138 Loss: 8.29504680633545 Tokens per Sec: 24350.405729361337
Epoch Step: 10 / 138 Loss: 7.96469783782959 Tokens per Sec: 25261.6544580971
Epoch Step: 15 / 138 Loss: 9.956079483032227 Tokens per Sec: 25305.554168216997
Epoch Step: 20 / 138 Loss: 9.082287788391113 Tokens per Sec: 25911.67333057116
Epoch Step: 25 / 138 Loss: 72.97566223144531 Tokens per Sec: 24205.446582581895
Epoch Step: 30 / 138 Loss: 6.826712608337402 Tokens per Sec: 26278.59533178283
Epoch Step: 35 / 138 Loss: 5.02237606048584 Tokens per Sec: 24526.034744930366
Epoch Step: 40 / 138 Loss: 7.844510078430176 Tokens per Sec: 27853.700736263916
Epoch Step: 45 / 138 Loss: 4.783169269561768 Tokens per Sec: 25657.834536970924
Epoch Step: 50 / 138 Loss: 5.233149528503418 Tokens per Sec: 26404.429662479695
Epoch Step: 55 / 138 Loss: 5.7142558097839355 Tokens per Sec: 28031.971685433815
Epoch Step: 60 / 138 Loss: 76.58277130126953 Tokens per Sec: 25773.407243372152
Epoch Step: 65 / 138 Loss: 5.498656272888184 Tokens per Sec: 24970.06151354198
Epoch Step: 70 / 138 Loss: 7.826559066772461 Tokens per Sec: 26415.546211622874
Epoch Step: 75 / 138 Loss: 7.387828350067139 Tokens per Sec: 26276.428982285637
Epoch Step: 80 / 138 Loss: 9.630350112915039 Tokens per Sec: 25715.4979091764
Epoch Step: 85 / 138 Loss: 118.68707275390625 Tokens per Sec: 27022.269865564573
Epoch Step: 90 / 138 Loss: 8.517962455749512 Tokens per Sec: 23985.073299773656
Epoch Step: 95 / 138 Loss: 12.679293632507324 Tokens per Sec: 24332.478222752197
Epoch Step: 100 / 138 Loss: 7.119833946228027 Tokens per Sec: 25085.221582229133
Epoch Step: 105 / 138 Loss: 6.7749409675598145 Tokens per Sec: 24410.43355282106
Epoch Step: 110 / 138 Loss: 130.78228759765625 Tokens per Sec: 21703.974636275438
Epoch Step: 115 / 138 Loss: 8.458646774291992 Tokens per Sec: 24532.81890834926
Epoch Step: 120 / 138 Loss: 6.422954082489014 Tokens per Sec: 24607.14602903315
Epoch Step: 125 / 138 Loss: 9.078034400939941 Tokens per Sec: 25590.809341764856
Epoch Step: 130 / 138 Loss: 8.916871070861816 Tokens per Sec: 24808.87257754912
Epoch Step: 135 / 138 Loss: 8.168635368347168 Tokens per Sec: 24936.652352760244
Epoch ended with duration 0:00:25.261838
Train perplexity: 1.2368652608841841
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 > = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.190651
Validation perplexity: 1.4161612014287368
Model saved checkpoint!
Epoch 156 / 1000
Epoch Step: 5 / 138 Loss: 8.697253227233887 Tokens per Sec: 24989.062682173397
Epoch Step: 10 / 138 Loss: 9.253131866455078 Tokens per Sec: 23038.08211161988
Epoch Step: 15 / 138 Loss: 46.431827545166016 Tokens per Sec: 25523.930276654362
Epoch Step: 20 / 138 Loss: 5.786396503448486 Tokens per Sec: 24694.598944273923
Epoch Step: 25 / 138 Loss: 8.410959243774414 Tokens per Sec: 27103.992519859545
Epoch Step: 30 / 138 Loss: 104.53021240234375 Tokens per Sec: 27408.037141725184
Epoch Step: 35 / 138 Loss: 102.69373321533203 Tokens per Sec: 26235.117890211928
Epoch Step: 40 / 138 Loss: 5.576115608215332 Tokens per Sec: 26406.80521749251
Epoch Step: 45 / 138 Loss: 10.971305847167969 Tokens per Sec: 25078.268842760717
Epoch Step: 50 / 138 Loss: 9.740671157836914 Tokens per Sec: 26858.00568019468
Epoch Step: 55 / 138 Loss: 6.073025703430176 Tokens per Sec: 27761.188320411253
Epoch Step: 60 / 138 Loss: 6.4046630859375 Tokens per Sec: 24753.912769137285
Epoch Step: 65 / 138 Loss: 6.943380355834961 Tokens per Sec: 25634.94242382133
Epoch Step: 70 / 138 Loss: 10.285622596740723 Tokens per Sec: 25649.170317791195
Epoch Step: 75 / 138 Loss: 4.553514003753662 Tokens per Sec: 25307.70575638628
Epoch Step: 80 / 138 Loss: 4.97196102142334 Tokens per Sec: 27869.01980153174
Epoch Step: 85 / 138 Loss: 4.8540802001953125 Tokens per Sec: 25677.210790752357
Epoch Step: 90 / 138 Loss: 5.855649948120117 Tokens per Sec: 25658.965443841073
Epoch Step: 95 / 138 Loss: 12.941906929016113 Tokens per Sec: 26290.394851370904
Epoch Step: 100 / 138 Loss: 9.622937202453613 Tokens per Sec: 25647.889855324032
Epoch Step: 105 / 138 Loss: 8.046551704406738 Tokens per Sec: 23006.823783936667
Epoch Step: 110 / 138 Loss: 6.9321699142456055 Tokens per Sec: 25408.912278749973
Epoch Step: 115 / 138 Loss: 84.72239685058594 Tokens per Sec: 24630.907615726006
Epoch Step: 120 / 138 Loss: 10.69894790649414 Tokens per Sec: 23776.19434613968
Epoch Step: 125 / 138 Loss: 6.8262176513671875 Tokens per Sec: 25688.71978501512
Epoch Step: 130 / 138 Loss: 6.0553669929504395 Tokens per Sec: 24596.130128049354
Epoch Step: 135 / 138 Loss: 8.047491073608398 Tokens per Sec: 22398.68506288433
Epoch ended with duration 0:00:25.116357
Train perplexity: 1.2641530977375506
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 u = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.195756
Validation perplexity: 1.5219978679031767
Epoch 157 / 1000
Epoch Step: 5 / 138 Loss: 4.576169013977051 Tokens per Sec: 25462.330907835036
Epoch Step: 10 / 138 Loss: 8.35291862487793 Tokens per Sec: 26000.77966126858
Epoch Step: 15 / 138 Loss: 8.533406257629395 Tokens per Sec: 23442.767581019016
Epoch Step: 20 / 138 Loss: 8.460211753845215 Tokens per Sec: 24683.749503856332
Epoch Step: 25 / 138 Loss: 107.91338348388672 Tokens per Sec: 25712.825668115922
Epoch Step: 30 / 138 Loss: 8.810224533081055 Tokens per Sec: 25647.284813763814
Epoch Step: 35 / 138 Loss: 5.826329708099365 Tokens per Sec: 28465.560785331403
Epoch Step: 40 / 138 Loss: 5.2324628829956055 Tokens per Sec: 26406.132078083585
Epoch Step: 45 / 138 Loss: 11.045594215393066 Tokens per Sec: 25221.515707796774
Epoch Step: 50 / 138 Loss: 7.482024669647217 Tokens per Sec: 28550.74390751184
Epoch Step: 55 / 138 Loss: 6.301351547241211 Tokens per Sec: 25548.453561272207
Epoch Step: 60 / 138 Loss: 60.90592575073242 Tokens per Sec: 27731.443492554186
Epoch Step: 65 / 138 Loss: 8.133797645568848 Tokens per Sec: 23545.142215397813
Epoch Step: 70 / 138 Loss: 7.117609977722168 Tokens per Sec: 25023.622484859578
Epoch Step: 75 / 138 Loss: 11.900269508361816 Tokens per Sec: 25315.0166237207
Epoch Step: 80 / 138 Loss: 8.887767791748047 Tokens per Sec: 27092.033343427236
Epoch Step: 85 / 138 Loss: 6.150686740875244 Tokens per Sec: 27756.646499988714
Epoch Step: 90 / 138 Loss: 7.285205364227295 Tokens per Sec: 27212.451203879125
Epoch Step: 95 / 138 Loss: 7.755044937133789 Tokens per Sec: 24871.183143547503
Epoch Step: 100 / 138 Loss: 8.468506813049316 Tokens per Sec: 25371.204011093807
Epoch Step: 105 / 138 Loss: 95.67500305175781 Tokens per Sec: 23042.435720882902
Epoch Step: 110 / 138 Loss: 10.627432823181152 Tokens per Sec: 24791.181718116077
Epoch Step: 115 / 138 Loss: 6.431943893432617 Tokens per Sec: 25193.755845996944
Epoch Step: 120 / 138 Loss: 6.827805519104004 Tokens per Sec: 24288.51416072466
Epoch Step: 125 / 138 Loss: 83.63639068603516 Tokens per Sec: 22281.543640326774
Epoch Step: 130 / 138 Loss: 6.363054275512695 Tokens per Sec: 25352.041857967903
Epoch Step: 135 / 138 Loss: 8.649005889892578 Tokens per Sec: 24420.876744757956
Epoch ended with duration 0:00:25.092499
Train perplexity: 1.2279872677589903
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 > = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.192993
Validation perplexity: 1.3815650950260918
Epoch 158 / 1000
Epoch Step: 5 / 138 Loss: 10.562701225280762 Tokens per Sec: 24275.512331599446
Epoch Step: 10 / 138 Loss: 9.611896514892578 Tokens per Sec: 26082.64396265943
Epoch Step: 15 / 138 Loss: 56.32572937011719 Tokens per Sec: 26326.017881764423
Epoch Step: 20 / 138 Loss: 12.12984561920166 Tokens per Sec: 24655.75237360419
Epoch Step: 25 / 138 Loss: 9.723556518554688 Tokens per Sec: 23533.34237595122
Epoch Step: 30 / 138 Loss: 11.010910034179688 Tokens per Sec: 25128.412558922875
Epoch Step: 35 / 138 Loss: 9.35390567779541 Tokens per Sec: 27355.555815634365
Epoch Step: 40 / 138 Loss: 7.691967010498047 Tokens per Sec: 25476.524441929916
Epoch Step: 45 / 138 Loss: 5.237059116363525 Tokens per Sec: 25737.29593439603
Epoch Step: 50 / 138 Loss: 13.176166534423828 Tokens per Sec: 26025.215369699275
Epoch Step: 55 / 138 Loss: 7.9605712890625 Tokens per Sec: 26909.653769609915
Epoch Step: 60 / 138 Loss: 6.954894542694092 Tokens per Sec: 25723.69630994873
Epoch Step: 65 / 138 Loss: 6.489350318908691 Tokens per Sec: 26539.433576224368
Epoch Step: 70 / 138 Loss: 10.387507438659668 Tokens per Sec: 27133.047151269086
Epoch Step: 75 / 138 Loss: 13.664702415466309 Tokens per Sec: 26253.229450087434
Epoch Step: 80 / 138 Loss: 8.992131233215332 Tokens per Sec: 24126.752962246137
Epoch Step: 85 / 138 Loss: 6.104682445526123 Tokens per Sec: 25355.295082055138
Epoch Step: 90 / 138 Loss: 7.6715898513793945 Tokens per Sec: 27391.621164163163
Epoch Step: 95 / 138 Loss: 104.86969757080078 Tokens per Sec: 27000.193463201726
Epoch Step: 100 / 138 Loss: 11.529041290283203 Tokens per Sec: 25026.20537796435
Epoch Step: 105 / 138 Loss: 12.109686851501465 Tokens per Sec: 22387.774111293387
Epoch Step: 110 / 138 Loss: 14.009613990783691 Tokens per Sec: 25232.3450354829
Epoch Step: 115 / 138 Loss: 9.922952651977539 Tokens per Sec: 24991.094440385015
Epoch Step: 120 / 138 Loss: 12.620902061462402 Tokens per Sec: 21347.907196755652
Epoch Step: 125 / 138 Loss: 10.79488468170166 Tokens per Sec: 25001.939222011057
Epoch Step: 130 / 138 Loss: 7.493570327758789 Tokens per Sec: 24837.639209144876
Epoch Step: 135 / 138 Loss: 9.04570198059082 Tokens per Sec: 25397.452973384563
Epoch ended with duration 0:00:25.185738
Train perplexity: 1.307711568161338
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.197395
Validation perplexity: 1.4894930315796846
Epoch 159 / 1000
Epoch Step: 5 / 138 Loss: 4.621865272521973 Tokens per Sec: 27751.8413612874
Epoch Step: 10 / 138 Loss: 7.439911842346191 Tokens per Sec: 26107.948961912378
Epoch Step: 15 / 138 Loss: 6.506701469421387 Tokens per Sec: 26518.618196970463
Epoch Step: 20 / 138 Loss: 6.749818325042725 Tokens per Sec: 28989.82740252388
Epoch Step: 25 / 138 Loss: 7.611371040344238 Tokens per Sec: 23004.77005084401
Epoch Step: 30 / 138 Loss: 11.552750587463379 Tokens per Sec: 23890.90531954832
Epoch Step: 35 / 138 Loss: 8.835140228271484 Tokens per Sec: 23545.05130938354
Epoch Step: 40 / 138 Loss: 7.4127583503723145 Tokens per Sec: 25775.542008877936
Epoch Step: 45 / 138 Loss: 10.526044845581055 Tokens per Sec: 25853.899489620155
Epoch Step: 50 / 138 Loss: 7.610913276672363 Tokens per Sec: 25872.036084316023
Epoch Step: 55 / 138 Loss: 124.35904693603516 Tokens per Sec: 24373.719048117822
Epoch Step: 60 / 138 Loss: 8.215614318847656 Tokens per Sec: 27281.19238262181
Epoch Step: 65 / 138 Loss: 10.761238098144531 Tokens per Sec: 26191.714920438728
Epoch Step: 70 / 138 Loss: 7.204911231994629 Tokens per Sec: 26164.187604730858
Epoch Step: 75 / 138 Loss: 5.265013217926025 Tokens per Sec: 27939.694343804313
Epoch Step: 80 / 138 Loss: 8.922333717346191 Tokens per Sec: 25207.112669021306
Epoch Step: 85 / 138 Loss: 6.142033100128174 Tokens per Sec: 24677.978064570332
Epoch Step: 90 / 138 Loss: 7.880431652069092 Tokens per Sec: 28171.652984908276
Epoch Step: 95 / 138 Loss: 7.542725563049316 Tokens per Sec: 27421.411357779813
Epoch Step: 100 / 138 Loss: 6.929521083831787 Tokens per Sec: 23502.257258201204
Epoch Step: 105 / 138 Loss: 9.665786743164062 Tokens per Sec: 25286.828610008542
Epoch Step: 110 / 138 Loss: 7.771932601928711 Tokens per Sec: 24381.904376193477
Epoch Step: 115 / 138 Loss: 6.536815166473389 Tokens per Sec: 24887.16132553979
Epoch Step: 120 / 138 Loss: 6.0720930099487305 Tokens per Sec: 25174.999101149224
Epoch Step: 125 / 138 Loss: 8.890871047973633 Tokens per Sec: 20928.75073023031
Epoch Step: 130 / 138 Loss: 154.15170288085938 Tokens per Sec: 25051.249365497388
Epoch Step: 135 / 138 Loss: 11.291173934936523 Tokens per Sec: 23951.70715014562
Epoch ended with duration 0:00:25.102787
Train perplexity: 1.277535310191818
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 > = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( u != null ) { try { u . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.227295
Validation perplexity: 1.7420042205631605
Epoch 160 / 1000
Epoch Step: 5 / 138 Loss: 7.088736057281494 Tokens per Sec: 27714.23007911845
Epoch Step: 10 / 138 Loss: 5.948418140411377 Tokens per Sec: 24387.598148812216
Epoch Step: 15 / 138 Loss: 6.377139091491699 Tokens per Sec: 23807.31716533048
Epoch Step: 20 / 138 Loss: 8.586344718933105 Tokens per Sec: 27005.859464535537
Epoch Step: 25 / 138 Loss: 53.34768295288086 Tokens per Sec: 28174.130955015764
Epoch Step: 30 / 138 Loss: 11.26814079284668 Tokens per Sec: 25789.998342235922
Epoch Step: 35 / 138 Loss: 8.724963188171387 Tokens per Sec: 25845.495929198085
Epoch Step: 40 / 138 Loss: 6.600643634796143 Tokens per Sec: 26877.198594076996
Epoch Step: 45 / 138 Loss: 3.7335381507873535 Tokens per Sec: 26980.583512096804
Epoch Step: 50 / 138 Loss: 8.366974830627441 Tokens per Sec: 24123.376584383463
Epoch Step: 55 / 138 Loss: 7.09735107421875 Tokens per Sec: 27637.05956169478
Epoch Step: 60 / 138 Loss: 4.220360279083252 Tokens per Sec: 26486.078429899208
Epoch Step: 65 / 138 Loss: 9.405488967895508 Tokens per Sec: 23130.357154528192
Epoch Step: 70 / 138 Loss: 4.471610069274902 Tokens per Sec: 27097.674241196866
Epoch Step: 75 / 138 Loss: 6.793256759643555 Tokens per Sec: 26189.593678684465
Epoch Step: 80 / 138 Loss: 6.813093662261963 Tokens per Sec: 25224.10693324951
Epoch Step: 85 / 138 Loss: 9.063172340393066 Tokens per Sec: 25899.208284653494
Epoch Step: 90 / 138 Loss: 9.435860633850098 Tokens per Sec: 23829.57734032463
Epoch Step: 95 / 138 Loss: 5.545558929443359 Tokens per Sec: 27607.318540642562
Epoch Step: 100 / 138 Loss: 12.47236156463623 Tokens per Sec: 24477.315108051203
Epoch Step: 105 / 138 Loss: 7.316836833953857 Tokens per Sec: 25184.670618077693
Epoch Step: 110 / 138 Loss: 6.338414192199707 Tokens per Sec: 22923.48171168605
Epoch Step: 115 / 138 Loss: 6.757911682128906 Tokens per Sec: 23218.570136825838
Epoch Step: 120 / 138 Loss: 5.968186378479004 Tokens per Sec: 23857.54956708981
Epoch Step: 125 / 138 Loss: 9.607937812805176 Tokens per Sec: 25341.170987293197
Epoch Step: 130 / 138 Loss: 7.53415584564209 Tokens per Sec: 24930.112038878895
Epoch Step: 135 / 138 Loss: 5.988526821136475 Tokens per Sec: 25231.60995943163
Epoch ended with duration 0:00:25.043225
Train perplexity: 1.2205183275400178
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( user != null ) { try { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.199290
Validation perplexity: 1.5464666511441203
Model saved checkpoint!
Training was early stopped on epoch 161 with early stopping rounds 25
[74.66958492241193, 24.694227267172327, 17.197963641321092, 13.348164860200411, 12.779939946646955, 11.53322167669084, 11.406831059274555, 9.750003550037253, 9.402329320606507, 8.721822128181998, 7.001043835569141, 7.543144802228668, 7.759196866155768, 6.473335213790975, 6.1568624293155505, 5.374546778359515, 5.485227406566607, 5.025433625046959, 4.471343683758457, 4.133369914875946, 3.799747251578408, 3.6411952122869145, 3.3688976655726313, 3.783436378563152, 3.3814256644430567, 2.706930910404609, 2.8398158606355444, 2.933549562884725, 3.053626957715115, 3.0465325454745917, 2.423140606103814, 2.290936914794827, 2.617771504431671, 2.2193805052585907, 2.3261774680220326, 2.5845567641801312, 1.969404549045652, 2.444451145537545, 2.3910016334295614, 2.3412370441867187, 2.0911476722428612, 1.7536654825741875, 2.0168322443676354, 1.9271109366432626, 1.9629138312807184, 1.9256007839952018, 1.709636864381288, 2.061119849766909, 1.8531508828309566, 1.8072141860456128, 1.8392309165261456, 1.5442274616742522, 1.8512396527867068, 2.009560587705013, 1.798060559931064, 1.6902146173215173, 1.6454651037433239, 1.6186618458958923, 1.711600609940944, 1.7273011751892142, 1.852568931659995, 1.730096978038788, 1.7360681746097872, 1.742731846055409, 1.6697008665788977, 1.7737149728185924, 1.478121091207186, 1.5733123088297154, 1.670678465899602, 1.4411718495710524, 1.592805663317434, 1.691267038978752, 1.6470981217604357, 1.6389865333162759, 1.6790580137902484, 1.6910459064271515, 1.6641928513730582, 1.4706585886883932, 1.6125563469719701, 1.5783606285643341, 1.554307220252582, 1.5482858603763987, 1.4271960346150767, 1.4037518330515244, 1.4588211267082676, 1.5502030564715392, 1.462888333325056, 1.4820789908410088, 1.482964596847602, 1.4038528553762792, 1.4467174962355318, 1.459835135075619, 1.520326866929632, 1.4548455141028813, 1.4803779951939149, 1.418648102275094, 1.4788926141432104, 1.4754884565681656, 1.4474142548510063, 1.463027248348697, 1.485276130192997, 1.4363236538762987, 1.4085071153590942, 1.3409748649125663, 1.4225147045769513, 1.3608949631045517, 1.3454820855623169, 1.31342987584928, 1.5105419010415133, 1.4516410121170635, 1.3518442728194622, 1.4752084758195863, 1.460440369748998, 1.4151736567796505, 1.4481758193771899, 1.333301728205746, 1.4302591221665801, 1.3664072208665718, 1.4388704622939557, 1.4435131800543335, 1.3251910544700238, 1.2730294517807044, 1.4338793813987554, 1.3017916986678213, 1.409299778140637, 1.3191398212058223, 1.3330847418852048, 1.2721187145805706, 1.278911314876754, 1.431861112316188, 1.31681096757747, 1.4340192360630692, 1.312096504540115, 1.2925819079430936, 1.3484704075070328, 1.2971236963108368, 1.3468129447856205, 1.2558479185736586, 1.3350793898986448, 1.3258178869160042, 1.3328334342661068, 1.3091505827461885, 1.276997383875402, 1.2186556422922847, 1.280082304270616, 1.2243012222396694, 1.281017184533264, 1.3654017332548332, 1.3224443058555073, 1.3838976982313944, 1.332072802899949, 1.2826818025104594, 1.2640933895777517, 1.2560076456740668, 1.1990130844428297, 1.2368652608841841, 1.2641530977375506, 1.2279872677589903, 1.307711568161338, 1.277535310191818, 1.2205183275400178]
[27.419299201453256, 20.895979850860776, 14.383051024171989, 15.148307681294941, 9.650828985943487, 11.782468490828991, 8.93438542633707, 9.130412638698582, 9.254570915005393, 7.225596676438497, 12.253232917496947, 6.223164494018909, 9.600842904400183, 5.689613653813925, 4.432454986589071, 6.207770778931194, 5.870332937583768, 6.727257821124159, 4.897132634974906, 3.559446980501639, 3.355095143601449, 4.8386568709387365, 3.1852912037532617, 2.8596754706398104, 3.3059856016062454, 3.2398820005311637, 2.6720687502448204, 2.9899129948719567, 2.724556026026537, 4.337782166266115, 2.6066957595546354, 2.117847307620332, 1.7703771196687157, 2.492109065525987, 2.6062280757361944, 1.9631892482246283, 2.951856091518677, 1.884755576367837, 2.1271736064465934, 1.5775106467180735, 2.546161659148953, 1.877300805809562, 1.9573517302642753, 2.492853194474718, 1.5164479353151794, 2.093773905746353, 1.450877502540834, 1.987943040828631, 1.6048894359920902, 2.1684393152810513, 1.4273016504115097, 1.5899961463294239, 1.743939022009778, 1.740598727527985, 2.14097567773816, 1.691105278216423, 1.5301530294648507, 2.2715834735043856, 1.6121079690602766, 1.7005075025631173, 2.321864800956768, 1.4990481604464456, 1.7987032311311926, 1.4026169562833333, 1.802253103447671, 1.6335536439770062, 1.637622299026424, 1.7505411285407313, 2.1545968863007285, 1.4799227369043466, 1.5621601774479066, 1.9893342804628686, 1.5261788235535445, 1.5296378627531282, 1.3237947470024565, 1.7311787639001062, 1.6690485868199816, 2.3310039960705438, 1.3061624244360295, 1.320003116760703, 1.4793810700367682, 1.6010398951475455, 1.2953179709217246, 1.451378449700858, 1.4011738174219388, 1.43883861708573, 1.629531384079454, 1.6609523994950253, 1.9936684816177168, 1.9393161020883487, 1.9558625706374926, 1.4077773313123128, 1.4844110745208108, 1.4776985855806446, 1.3074739613711677, 1.6812265078085573, 1.4049251011913593, 1.4452225950683613, 1.6815561035108222, 1.7092116379044304, 1.4141681566674538, 1.7062967742542956, 1.9067189287416946, 1.7140562435535978, 1.2622520922405527, 1.94649756500531, 1.2527202996328877, 1.48912840394826, 1.3895741333712355, 1.4507182608272624, 1.4411627931451694, 1.8931827836043518, 1.258600065156299, 1.8022100152906182, 1.7941924231547666, 1.6249103169301065, 1.4698060715662695, 1.2551444513620718, 1.3945261539527694, 1.69878786516168, 1.4443846983895554, 1.5560545233009155, 1.3603650936367246, 1.4144038278768023, 1.392062512854556, 1.6400115309735233, 1.3428610797779923, 1.3499032857507463, 1.2408581144348052, 1.6392282132596063, 1.4540009141674732, 1.6899430088316831, 1.849376261978084, 1.2417358216366476, 1.4386454644725353, 1.2386557958831133, 1.4023297507490793, 1.3318892077436058, 1.317834878415312, 1.4937900196232439, 2.120246784276757, 1.8552327909222364, 1.7091315012621748, 1.2454862856642621, 1.4236575928436497, 1.5792278213520525, 1.721991398944145, 1.5406695067415113, 1.5588772483362099, 1.3930058657265307, 1.54907195421207, 1.3188260479191942, 1.835872702008382, 1.805804185158476, 1.370986380356652, 1.4161612014287368, 1.5219978679031767, 1.3815650950260918, 1.4894930315796846, 1.7420042205631605, 1.5464666511441203]
Model saved checkpoint!

====STARTING EVALUATION====
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: –∑–∞–º–µ–Ω–∞
diff_prev: org.junit.Assert.assertEquals
diff_updated: assertEquals 

Most common words:
         )     194026
         (     193976
         .      92332
         ;      82530
   –ø–∞–¥–¥–∏–Ω–≥      54790
         ,      54180
         {      42036
         }      41868
     VAR_1      41750
  —É–¥–∞–ª–µ–Ω–∏–µ      41184 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 )
05 (
06 .
07 ;
08 –ø–∞–¥–¥–∏–Ω–≥
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 35
—É–¥–∞–ª–µ–Ω–∏–µ 41184 13
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 23
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 54790 8
Number of words (types): 758
Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations.png...
Duration: 0:00:04.162563

Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations_8_threshold.png...
Duration: 0:00:01.692765

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations.png...
Duration: 0:00:02.847191

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations_8_threshold.png...
Duration: 0:00:01.627194

Starting conducting edit representation visualization experiment for defects4j_2d_representations.png...
Duration: 0:00:00.614330

Starting conducting edit representation visualization experiment for test300_2d_representations.png...
Duration: 0:00:01.107803

Starting conducting edit representation visualization experiment for val300_2d_representations.png...
Duration: 0:00:01.657442

Starting conducting edit representation visualization experiment for train300_2d_representations.png...
Duration: 0:00:01.013559

Starting conducting edit representation visualization experiment for test_2d_representations.png...
Duration: 0:00:02.445318

Starting conducting edit representation visualization experiment for val_2d_representations.png...
Duration: 0:00:02.321442

Starting conducting edit representation visualization experiment for train5000_2d_representations.png...
Duration: 0:00:10.194850

Start conducting accuracy calculation experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy: 102 / 388 = 0.26288659793814434
Top-3 accuracy: 149 / 388 = 0.38402061855670105
Top-5 accuracy: 167 / 388 = 0.43041237113402064
Top-10 accuracy: 179 / 388 = 0.46134020618556704
Top-50 accuracy: 206 / 388 = 0.5309278350515464
Duration: 0:01:48.035616

Start conducting accuracy calculation experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy: 127 / 244 = 0.5204918032786885
Top-3 accuracy: 168 / 244 = 0.6885245901639344
Top-5 accuracy: 184 / 244 = 0.7540983606557377
Top-10 accuracy: 192 / 244 = 0.7868852459016393
Top-50 accuracy: 208 / 244 = 0.8524590163934426
Duration: 0:00:59.365992

Start conducting accuracy calculation experiment for Defects4J...
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
Duration: 0:00:04.678625

Start conducting accuracy calculation experiment for Test dataset 300...
Top-1 accuracy: 69 / 300 = 0.23
Top-3 accuracy: 95 / 300 = 0.31666666666666665
Top-5 accuracy: 99 / 300 = 0.33
Top-10 accuracy: 107 / 300 = 0.3566666666666667
Top-50 accuracy: 127 / 300 = 0.42333333333333334
Duration: 0:01:12.150236

Start conducting accuracy calculation experiment for Validation dataset 300...
Top-1 accuracy: 54 / 300 = 0.18
Top-3 accuracy: 83 / 300 = 0.27666666666666667
Top-5 accuracy: 92 / 300 = 0.30666666666666664
Top-10 accuracy: 100 / 300 = 0.3333333333333333
Top-50 accuracy: 117 / 300 = 0.39
Duration: 0:01:11.190112

Start conducting accuracy calculation experiment for Train dataset 300...
Top-1 accuracy: 110 / 300 = 0.36666666666666664
Top-3 accuracy: 149 / 300 = 0.49666666666666665
Top-5 accuracy: 163 / 300 = 0.5433333333333333
Top-10 accuracy: 175 / 300 = 0.5833333333333334
Top-50 accuracy: 192 / 300 = 0.64
Duration: 0:01:12.428686

Start conducting one shot learning experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 14 / 64 = 0.21875
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 22 / 64 = 0.34375
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 24 / 64 = 0.375
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 25 / 64 = 0.390625
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 28 / 64 = 0.4375

Top-1 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 49 / 324 = 0.15123456790123457
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 84 / 324 = 0.25925925925925924
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 97 / 324 = 0.2993827160493827
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 105 / 324 = 0.32407407407407407
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 120 / 324 = 0.37037037037037035
================
Correct Examples
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int VAR_1 , int row , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
[32mExample #2[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[32mExample #2[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
[32mExample #3[0m
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Pred: synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
[32mExample #4[0m
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Pred: static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
[32mExample #5[0m
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
[32mExample #6[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . network object ) { return object . METHOD_1 ( ) ; }[0m
Trg : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
[32mExample #7[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
[32mExample #8[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
[32mExample #2[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
---------------
Class: Forbid overriding: add final to method
Golden example (False):
[31mExample #1[0m
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Pred: public long long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Pred: public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Pred: public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 create ( ) { return new TYPE_1 ( this , null ) ; }[0m
Trg : public TYPE_1 create ( ) { return new TYPE_1 ( this ) ; }[0m
Pred: public TYPE_1 create ( ) { return new TYPE_1 ( this ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
[32mExample #3[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[32mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
[32mExample #8[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
[32mExample #3[0m
Src : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
[32mExample #4[0m
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Pred: private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
[32mExample #2[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
[32mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
[32mExample #4[0m
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
[32mExample #5[0m
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , res . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> void METHOD_1 ( int index , short value ) ;[0m
Pred: void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #2[0m
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> boolean METHOD_1 ( ) ;[0m
Pred: public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #3[0m
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( url ) ; }[0m
[31mExample #4[0m
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> float METHOD_1 ( int index ) ;[0m
Pred: private void METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
Trg : public <unk> void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
Pred: public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
Trg : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . get ( ) . project ) ; }[0m
Pred: public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change ) ; return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
[31mExample #2[0m
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( address ) ) , value ) ; }[0m
Pred: final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
[31mExample #4[0m
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; }[0m
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return r ; }[0m
Pred: static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; }[0m
[31mExample #5[0m
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Pred: private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
---------------
Class: Add null check
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
Trg : public void run ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
Pred: public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
[31mExample #2[0m
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; METHOD_4 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
[31mExample #3[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , true ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
[31mExample #2[0m
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . StorageDomain ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Pred: public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , null ) ) ; return return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #4[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , null , false , null ) ; }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , null , VAR_2 , true , true ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #10[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 VAR_4 , TYPE_3 { try { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
Pred: private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 expected ) { } }[0m
[31mExample #14[0m
Src : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
Trg : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
Pred: private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 ) ; return METHOD_1 ( STRING_1 , true ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
[31mExample #16[0m
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }[0m
Pred: public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; TYPE_1 . METHOD_1 ( a ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , true ) ; }[0m
[31mExample #18[0m
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 = new TYPE_1 ( constants ) ; }[0m
[31mExample #19[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.Map VAR_2 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
---------------
Class: Add statement,Remove thrown exception
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String input ) throws com.google.gwtorm.server.OrmException { return METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 ) { }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int VAR_1 , int row , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #2[0m
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int netId ) throws TYPE_2 ;[0m
Pred: TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ; assertEquals ( VAR_1 , TYPE_1 [ ] . METHOD_1 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Trg : public void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Pred: public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
[31mExample #4[0m
Src : public static <unk> void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
Trg : public static <unk> void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;[0m
Pred: public static void METHOD_1 ( long out , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ; }[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
[31mExample #7[0m
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
Trg : void METHOD_1 ( int type , int VAR_2 ) ;[0m
Pred: void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
[31mExample #8[0m
Src : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ; }[0m
[31mExample #9[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
[31mExample #10[0m
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
[31mExample #11[0m
Src : <unk> boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Trg : <unk> boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Pred: boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
[31mExample #12[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
[31mExample #13[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 . java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
[31mExample #14[0m
Src : void METHOD_1 ( boolean VAR_1 ) ;[0m
Trg : void METHOD_1 ( ) ;[0m
Pred: void METHOD_1 ( ) ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( int id , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id db , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , revision , null , null , null , 0 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) throws java.lang.Exception { try { METHOD_2 ( VAR_1 , project , project , STRING_1 , VAR_2 , VAR_2 , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
Pred: public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
---------------
Class: Add/Remove this qualifier
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
[31mExample #2[0m
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
---------------
Class: Broad method visibility
Golden example (False):
[31mExample #1[0m
Src : <unk> TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public <unk> TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public TYPE_1 id ( java.lang.String VAR_1 ) throws java.io.IOException { return VAR_1 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: private static TYPE_1 METHOD_1 ( ) { return VAR_1 ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Pred: private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
[31mExample #3[0m
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; return VAR_1 . get ( ) ; }[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Pred: protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
[31mExample #5[0m
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Pred: private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #6[0m
Src : private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Pred: private static boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; return VAR_1 . get ( ) ; }[0m
[31mExample #8[0m
Src : protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Trg : public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Pred: private static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
[31mExample #10[0m
Src : private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Trg : protected boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Pred: private static boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
[31mExample #11[0m
Src : private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #12[0m
Src : protected TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Trg : public TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Pred: protected TYPE_1 . DbFacade METHOD_1 ( ) { return METHOD_1 ( ) ; return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
[31mExample #13[0m
Src : protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Trg : public void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Pred: protected static void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
[31mExample #14[0m
Src : private static <unk> void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Trg : public static <unk> void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Pred: private static synchronized void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) { return VAR_2 ; }[0m
[31mExample #15[0m
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Pred: protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Pred: protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return METHOD_3 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
---------------
Class: Change method return value
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return false ; } return false ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public final TYPE_1 METHOD_1 ( ) { return this . location ; } return this . location ; }[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( ) { return false ; }[0m
Trg : public boolean METHOD_1 ( ) { return true ; }[0m
Pred: public boolean METHOD_1 ( ) { return false ; } return false ; }[0m
[31mExample #3[0m
Src : protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
Trg : protected java.lang.String getRefName ( ) { return ref ; }[0m
Pred: protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
---------------
Class: Change method return value,Change return type
Golden example (False):
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( ) ; return null ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , long [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
[31mExample #3[0m
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
[31mExample #4[0m
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Pred: static long METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
[31mExample #5[0m
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Trg : private static org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Pred: private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
[31mExample #6[0m
Src : private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Trg : private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Pred: private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
[31mExample #7[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . METHOD_1 ( ) . size ( ) ) ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
[31mExample #8[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , long VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #9[0m
Src : public static <unk> byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
Trg : public static <unk> byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
Pred: public static byte byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
[31mExample #10[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return ( java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
[31mExample #11[0m
Src : <unk> void METHOD_1 ( int VAR_1 , int VAR_2 ) ;[0m
Trg : <unk> void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
Pred: void METHOD_1 ( long VAR_1 , long VAR_2 ) ; return VAR_2 ; }[0m
[31mExample #12[0m
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: synchronized long METHOD_1 ( long VAR_1 , long VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Pred: synchronized void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
[31mExample #14[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
[31mExample #16[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #17[0m
Src : public static <unk> void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;[0m
Trg : public static <unk> void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
Pred: public static void METHOD_1 ( long VAR_1 ) throws TYPE_1 ; TYPE_1 . assertEquals ( VAR_1 ) ; }[0m
[31mExample #18[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
[31mExample #19[0m
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Pred: synchronized void METHOD_1 ( long VAR_1 , long VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
[31mExample #20[0m
Src : public static <unk> void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;[0m
Trg : public static <unk> void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
Pred: public static void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ; TYPE_1 VAR_2 = VAR_2 ; }[0m
[31mExample #21[0m
Src : <unk> void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Trg : <unk> void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Pred: void METHOD_1 ( long VAR_1 , long id , long VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) ; }[0m
Pred: protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #4[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
---------------
Class: Change return type
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = dao . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
[31mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false , false ) ; }[0m
[31mExample #3[0m
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { VAR_3 = super . METHOD_1 ( VAR_4 ) ; return VAR_3 . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException expected ) { } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException expected ) { } }[0m
---------------
Class: Narrow method visibility
Golden example (True):
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
[31mExample #3[0m
Src : protected synchronized void METHOD_1 ( ) { }[0m
Trg : public synchronized void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( ) { return user ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { return user ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return user ; }[0m
[31mExample #5[0m
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
---------------
Class: Remove condition
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { super . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { super . METHOD_1 ( value ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
[31mExample #3[0m
Src : public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
Trg : public static TYPE_1 getInstance ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } return VAR_1 ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { super . METHOD_1 ( value ) ; } }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( 5 , args ) ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
[31mExample #3[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c = METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a += b ; return c ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
[31mExample #5[0m
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = storageDomain . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Pred: public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
[31mExample #6[0m
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }[0m
Pred: public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #7[0m
Src : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
Trg : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; }[0m
Pred: public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
[31mExample #8[0m
Src : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
Trg : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
Pred: public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
[31mExample #9[0m
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
Pred: protected METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
[31mExample #11[0m
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
Pred: public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
[31mExample #12[0m
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
[31mExample #14[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = x x ; return c ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_6 ( ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true , null , null , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_2 { TYPE_2 . METHOD_1 ( null ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , branch , null , null ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
[31mExample #9[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
[31mExample #11[0m
Src : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_4 ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; METHOD_4 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; METHOD_5 ( ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) , null ) , false , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk ( ) ) , false , VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
[31mExample #15[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , version ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_3 , version ) ; }[0m
[31mExample #16[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
[31mExample #17[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 1 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #20[0m
Src : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
[31mExample #21[0m
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
[31mExample #23[0m
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
[31mExample #25[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
[31mExample #27[0m
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
---------------
Class: Remove redundant initialization
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
Trg : public void info ( java.lang.String msg ) { log ( TYPE_1 , msg ) ; }[0m
Pred: public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
[31mExample #3[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return row > 0 ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , null ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #7[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
[31mExample #9[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - 1 ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #11[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
Pred: public static long METHOD_1 ( long arg ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - 1 ) ; }[0m
[31mExample #12[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
[31mExample #14[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
[31mExample #18[0m
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
Pred: public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
[31mExample #19[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } long VAR_2 = x - 1 ; return y + VAR_2 ; }[0m
[31mExample #20[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #21[0m
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
[31mExample #23[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #24[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
[31mExample #25[0m
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }[0m
Pred: public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 ) { }[0m
Pred: public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
[31mExample #27[0m
Src : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
Trg : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
[31mExample #28[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { Main . METHOD_3 ( ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( ) ; }[0m
[31mExample #29[0m
Src : public static int METHOD_1 ( int arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - arg1 ) - VAR_1 ; }[0m
Trg : public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( - arg1 ) - VAR_1 ; }[0m
Pred: public static int METHOD_1 ( int arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - arg1 ) - VAR_1 ; }[0m
[31mExample #30[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { resource . METHOD_4 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #31[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
[31mExample #32[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
[31mExample #33[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
[31mExample #34[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #35[0m
Src : public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
[31mExample #36[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
[31mExample #37[0m
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Pred: public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
[31mExample #38[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
[31mExample #39[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #40[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #41[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
[31mExample #42[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
[31mExample #43[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return v - 1 ; }[0m
[31mExample #44[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #45[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_4 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
[31mExample #46[0m
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
[31mExample #47[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
[31mExample #48[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
[31mExample #49[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
[31mExample #50[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
[31mExample #51[0m
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
Pred: public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return v / FLOAT_1 ; }[0m
[31mExample #52[0m
Src : public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Trg : public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Pred: public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - ( ) ; } long VAR_3 = - VAR_1 ; return ( VAR_3 + VAR_3 ) | ( project + VAR_3 ) ; }[0m
[31mExample #53[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
[31mExample #54[0m
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }[0m
Pred: public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
[31mExample #55[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
[31mExample #56[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
[31mExample #57[0m
Src : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
Trg : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
Pred: protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
[31mExample #58[0m
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Pred: public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
[31mExample #59[0m
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; TYPE_1 . METHOD_2 ( target ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
[31mExample #3[0m
Src : boolean METHOD_1 ( ) ;[0m
Trg : boolean validate ( ) ;[0m
Pred: private void METHOD_1 ( ) throws java.io.IOException { return ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
---------------
Class: Rename parameter
Golden example (False):
[31mExample #1[0m
Src : public <unk> float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public <unk> float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public final float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ; TYPE_1 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public <unk> boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public <unk> boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , TYPE_1 , java.io.IOException { return TYPE_1 . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
Trg : public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
Pred: public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
[31mExample #3[0m
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
Pred: TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ; assertEquals ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) ;[0m
Trg : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version ) ;[0m
Pred: public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) { resource . Version ( ) ; }[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
Trg : private <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - 1 ) ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { java.lang.System.out.println ( STRING_1 ) ; } }[0m
Pred: public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; VAR_2 . println ( STRING_1 ) ; } }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Pred: protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
[31mExample #3[0m
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( address ) ) ) ; }[0m
Pred: final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
[31mExample #4[0m
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . isEqualTo ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
[31mExample #7[0m
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) . toString ( ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
[31mExample #10[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; this . VAR_1 . METHOD_2 ( value ) ; }[0m
[31mExample #12[0m
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
[31mExample #13[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : VAR_1 . METHOD_3 ( ) : null ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getStoragePoolId ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
[31mExample #16[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
[31mExample #17[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . getStoragePoolId ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
[31mExample #18[0m
Src : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Trg : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }[0m
Pred: public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) . METHOD_2 ( ) ) ; }[0m
[31mExample #19[0m
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
Pred: protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #20[0m
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }[0m
Pred: protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #22[0m
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; return VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #23[0m
Src : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
Trg : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . getName ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; return entity . METHOD_2 ( ) ; }[0m
[31mExample #24[0m
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) . METHOD_2 ( ) ; }[0m
[31mExample #25[0m
Src : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_1 ( storage ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( storage ) ; }[0m
[31mExample #26[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #27[0m
Src : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
---------------
Class: Replace statement
Golden example (False):
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
[31mExample #2[0m
Src : public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
Trg : public static long METHOD_1 ( ) { long VAR_1 = 10 ; int VAR_2 = 3 ; return VAR_1 & VAR_2 ; }[0m
Pred: public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
---------------
Class: unclear
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
Trg : protected <unk> byte METHOD_1 ( ) throws java.io.IOException ;[0m
Pred: protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
[31mExample #2[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_2 ( ) ; }[0m
---------------
================
Duration: 0:03:28.871095

Start conducting one shot learning experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 24 / 56 = 0.42857142857142855
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 33 / 56 = 0.5892857142857143
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 38 / 56 = 0.6785714285714286
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 40 / 56 = 0.7142857142857143
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 43 / 56 = 0.7678571428571429

Top-1 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 69 / 188 = 0.3670212765957447
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 97 / 188 = 0.5159574468085106
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 104 / 188 = 0.5531914893617021
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 106 / 188 = 0.5638297872340425
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 120 / 188 = 0.6382978723404256
================
Correct Examples
Class: Add braces to if statement
Golden example (True):
[32mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
[32mExample #2[0m
Src : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Trg : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Pred: private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
[32mExample #2[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
[32mExample #2[0m
Src : private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
---------------
Class: Change exception type in catch clause
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_7 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_7 ( x , e ) ; } }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
[32mExample #2[0m
Src : static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( int session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
[32mExample #4[0m
Src : static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Trg : static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Pred: static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
[32mExample #2[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
[32mExample #3[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
---------------
Class: Change qualified name in response to a move class refactoring
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Trg : public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Pred: public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
[32mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[32mExample #3[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
[32mExample #2[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
[32mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
[32mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
[32mExample #3[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; }[0m
[32mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
[32mExample #5[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
[32mExample #6[0m
Src : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Trg : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Pred: private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
[32mExample #7[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
[32mExample #8[0m
Src : private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
[32mExample #9[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
---------------
Class: Remove invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
[32mExample #2[0m
Src : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; }[0m
Trg : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
Pred: protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
---------------
Class: Remove redundant initialization,Replace statement
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
[32mExample #2[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; }[0m
[32mExample #3[0m
Src : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) { return VAR_4 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
[32mExample #4[0m
Src : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
---------------
Class: Remove statement,Move existing statements in try block
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
---------------
Class: Remove type casting in method body
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) ; } }[0m
Trg : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
Pred: public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Pred: public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
[32mExample #4[0m
Src : protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Trg : protected boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Pred: protected boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
[32mExample #5[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Pred: public boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
[32mExample #6[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Trg : protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Pred: protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
[32mExample #7[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
[32mExample #8[0m
Src : public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
[32mExample #9[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
[32mExample #10[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
[32mExample #11[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Rename variable
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
[32mExample #4[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
---------------
Class: Replace if statement with assert statement
Golden example (True):
[32mExample #1[0m
Src : public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Trg : public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Pred: public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
[32mExample #2[0m
Src : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Trg : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Pred: boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
[32mExample #3[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
[32mExample #4[0m
Src : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Trg : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Pred: public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
[32mExample #5[0m
Src : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Trg : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Pred: private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
---------------
================
================
Incorrect Examples
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Trg : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Pred: TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
[31mExample #2[0m
Src : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Trg : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Pred: public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #4[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 , true ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 , 0 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
[31mExample #9[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
---------------
Class: Add statement
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) { TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ; } VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; s . METHOD_10 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: public java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Pred: public boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
---------------
Class: Change comparison operator (e.g. >) in condition
Golden example (False):
[31mExample #1[0m
Src : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Trg : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Pred: private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Trg : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 > VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Pred: private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
[31mExample #2[0m
Src : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Trg : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Pred: public final TYPE_1 METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( java.util.Map VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
[31mExample #4[0m
Src : private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Trg : private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Pred: private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
[31mExample #5[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
[31mExample #6[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , byte [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( args . inV ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , version , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
[31mExample #6[0m
Src : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Trg : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_2 . length , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Pred: protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_2 . get ( 0 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_2 . get ( 0 ) ) ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_2 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( int VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , METHOD_3 ( ) ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Trg : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Pred: private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ; } else { METHOD_3 ( ) ; } }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
[31mExample #7[0m
Src : public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { return VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; try { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Trg : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Pred: public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; try { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
Trg : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type ) ; return vm ; }[0m
Pred: public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_1 , response , VAR_3 , VAR_2 ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
[31mExample #3[0m
Src : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
[31mExample #10[0m
Src : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( ) ) ; return VAR_2 ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 ) ) ; return VAR_2 ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
[31mExample #15[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
[31mExample #16[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 ) ; } }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
[31mExample #17[0m
Src : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
[31mExample #19[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
[31mExample #21[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
[31mExample #23[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 , options ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
[31mExample #24[0m
Src : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Trg : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
[31mExample #4[0m
Src : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Trg : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , new [ [ ] { VAR_3 } , getEntity ( 1 ) ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; getName ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; }[0m
Pred: private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds ) ; METHOD_4 ( ) . setIsChangable ( false ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
[31mExample #12[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . changes ( ) . METHOD_3 ( true ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
[31mExample #13[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; long s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
[31mExample #16[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
[31mExample #17[0m
Src : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; }[0m
Trg : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }[0m
Pred: protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; }[0m
[31mExample #18[0m
Src : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Trg : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Pred: private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , VAR_1 ) . METHOD_9 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
[31mExample #21[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ! ( METHOD_2 ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , this , VAR_1 , null ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
---------------
Class: Remove statement,Add try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; VAR_1 . METHOD_7 ( ) ; server . METHOD_7 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ) { TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; VAR_1 . METHOD_7 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; } finally . METHOD_6 ( ) ; }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
---------------
Class: Rename variable
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
Trg : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable fail ) { METHOD_6 ( fail ) ; return new byte [ 0 ] ; } }[0m
Pred: protected byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Trg : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; java.lang.System.out.println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Pred: public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Trg : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Pred: void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
[31mExample #2[0m
Src : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Trg : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . log ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Pred: public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; return true ; }[0m
Pred: protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #7[0m
Src : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . any ( ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) ) ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #12[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
[31mExample #14[0m
Src : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
[31mExample #15[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #16[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : log . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_7 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_8 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
[31mExample #19[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . getStoragePoolId ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
[31mExample #20[0m
Src : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . getStatus ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Pred: protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
[31mExample #21[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
[31mExample #22[0m
Src : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
Trg : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . getName ( ) ) ) ) ) { return network ; } } return null ; }[0m
Pred: protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) ) ; }[0m
---------------
================
Duration: 0:01:56.173779

Start conducting one shot learning experiment for Defects4J...
Top-1 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-5 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-10 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-50 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0

Top-1 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-5 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-10 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-50 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Pred: public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { switch ( VAR_2 ) ; case - 1 : return - VAR_1 ; case 0 : return return ; case 1 : 1 : return VAR_1 ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Pred: public int ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; super . ( VAR_2 , VAR_3 ) ; this . changes = VAR_2 ; this . VAR_4 = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( id ) ; }[0m
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
[31mExample #1[0m
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Pred: void add ( short VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == null ) && ( ! ( METHOD_4 ( ) ) ) ) { sb.append ( STRING_1 ) ; } sb.append ( STRING_1 ) ; } sb.append ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_2 ) ; return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
---------------
Class: ['condBlockRetAdd']
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null == null ) { return null ; } if ( VAR_1 == null ) { return VAR_1 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) ; return METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . <unk> ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public TYPE_1 user ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 == null ) { return ; } TYPE_2 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 , VAR_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( VAR_2 VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! ( METHOD_5 ( VAR_2 ) ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Pred: boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
---------------
Class: ['notClassified']
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . <unk> ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Pred: private TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . user ( ) , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Pred: private static int METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int count = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] VAR_2 [ i ] ; return += VAR_3 ; }[0m
---------------
Class: ['singleLine']
Golden example (False):
[31mExample #1[0m
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Pred: static float METHOD_1 ( byte VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
[31mExample #2[0m
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Pred: private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / 5 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
---------------
Class: ['wrapsIf']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
Pred: public void METHOD_1 ( ) { if ( this . VAR_1 != null ) { this . METHOD_2 ( STRING_1 ) ; } else { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; } VAR_4 = null ; this . VAR_1 = VAR_5 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }[0m
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null ) { return true ; } if ( VAR_1 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
---------------
Class: ['wrapsIfElse']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > VAR_1 ) ) ? VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null ) { return VAR_1 . METHOD_1 ( ) ; if ( VAR_1 != null ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 VAR_2 ) VAR_2 ; } return VAR_3 class ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( final int x ) { if ( x == null ) { return METHOD_1 ( x ) ; } return METHOD_2 ( x ) ; }[0m
---------------
================
Duration: 0:00:09.144039

Starting long experiments
Start conducting accuracy calculation experiment for Test dataset all...
Top-1 accuracy: 255 / 1098 = 0.23224043715846995
Top-3 accuracy: 379 / 1098 = 0.3451730418943534
Top-5 accuracy: 419 / 1098 = 0.38160291438979965
Top-10 accuracy: 455 / 1098 = 0.4143897996357013
Top-50 accuracy: 523 / 1098 = 0.4763205828779599
Duration: 0:04:23.283933

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset train 300...
Top-1 accuracy: 20 / 300 = 0.06666666666666667
Top-3 accuracy: 32 / 300 = 0.10666666666666667
Top-5 accuracy: 36 / 300 = 0.12
Top-10 accuracy: 45 / 300 = 0.15
Top-50 accuracy: 57 / 300 = 0.19
Duration: 0:01:22.741580

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset val 300...
Top-1 accuracy: 18 / 300 = 0.06
Top-3 accuracy: 27 / 300 = 0.09
Top-5 accuracy: 32 / 300 = 0.10666666666666667
Top-10 accuracy: 37 / 300 = 0.12333333333333334
Top-50 accuracy: 50 / 300 = 0.16666666666666666
Duration: 0:01:21.511251

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test 300...
Top-1 accuracy: 20 / 300 = 0.06666666666666667
Top-3 accuracy: 29 / 300 = 0.09666666666666666
Top-5 accuracy: 41 / 300 = 0.13666666666666666
Top-10 accuracy: 49 / 300 = 0.16333333333333333
Top-50 accuracy: 64 / 300 = 0.21333333333333335
Duration: 0:01:21.455652

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset train 300...
Top-1 accuracy: 5 / 300 = 0.016666666666666666
Top-3 accuracy: 15 / 300 = 0.05
Top-5 accuracy: 16 / 300 = 0.05333333333333334
Top-10 accuracy: 18 / 300 = 0.06
Top-50 accuracy: 25 / 300 = 0.08333333333333333
Duration: 0:01:11.805077

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset val 300...
Top-1 accuracy: 9 / 300 = 0.03
Top-3 accuracy: 12 / 300 = 0.04
Top-5 accuracy: 14 / 300 = 0.04666666666666667
Top-10 accuracy: 18 / 300 = 0.06
Top-50 accuracy: 21 / 300 = 0.07
Duration: 0:01:11.280846

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test 300...
Top-1 accuracy: 7 / 300 = 0.023333333333333334
Top-3 accuracy: 15 / 300 = 0.05
Top-5 accuracy: 17 / 300 = 0.056666666666666664
Top-10 accuracy: 22 / 300 = 0.07333333333333333
Top-50 accuracy: 34 / 300 = 0.11333333333333333
Duration: 0:01:12.035154

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset train 300...
Top-1 accuracy: 27 / 300 = 0.09
Top-3 accuracy: 45 / 300 = 0.15
Top-5 accuracy: 50 / 300 = 0.16666666666666666
Top-10 accuracy: 63 / 300 = 0.21
Top-50 accuracy: 84 / 300 = 0.28
Duration: 0:01:21.762257

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset val 300...
Top-1 accuracy: 36 / 300 = 0.12
Top-3 accuracy: 59 / 300 = 0.19666666666666666
Top-5 accuracy: 64 / 300 = 0.21333333333333335
Top-10 accuracy: 74 / 300 = 0.24666666666666667
Top-50 accuracy: 103 / 300 = 0.3433333333333333
Duration: 0:01:22.321632

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test 300...
Top-1 accuracy: 34 / 300 = 0.11333333333333333
Top-3 accuracy: 57 / 300 = 0.19
Top-5 accuracy: 66 / 300 = 0.22
Top-10 accuracy: 76 / 300 = 0.25333333333333335
Top-50 accuracy: 92 / 300 = 0.30666666666666664
Duration: 0:01:22.287078

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset train 300...
Top-1 accuracy: 110 / 300 = 0.36666666666666664
Top-3 accuracy: 149 / 300 = 0.49666666666666665
Top-5 accuracy: 163 / 300 = 0.5433333333333333
Top-10 accuracy: 175 / 300 = 0.5833333333333334
Top-50 accuracy: 192 / 300 = 0.64
Duration: 0:01:11.504598

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset val 300...
Top-1 accuracy: 54 / 300 = 0.18
Top-3 accuracy: 83 / 300 = 0.27666666666666667
Top-5 accuracy: 92 / 300 = 0.30666666666666664
Top-10 accuracy: 100 / 300 = 0.3333333333333333
Top-50 accuracy: 117 / 300 = 0.39
Duration: 0:01:12.022205

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test 300...
Top-1 accuracy: 69 / 300 = 0.23
Top-3 accuracy: 95 / 300 = 0.31666666666666665
Top-5 accuracy: 99 / 300 = 0.33
Top-10 accuracy: 107 / 300 = 0.3566666666666667
Top-50 accuracy: 127 / 300 = 0.42333333333333334
Duration: 0:01:11.118947

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test...
Top-1 accuracy: 284 / 5835 = 0.048671808054841476
Top-3 accuracy: 501 / 5835 = 0.08586118251928021
Top-5 accuracy: 599 / 5835 = 0.10265638389031705
Top-10 accuracy: 737 / 5835 = 0.12630676949443018
Top-50 accuracy: 1016 / 5835 = 0.1741216795201371
Duration: 0:26:33.315452

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test...
Top-1 accuracy: 209 / 6545 = 0.031932773109243695
Top-3 accuracy: 358 / 6545 = 0.054698242933537054
Top-5 accuracy: 404 / 6545 = 0.06172650878533231
Top-10 accuracy: 492 / 6545 = 0.07517188693659282
Top-50 accuracy: 645 / 6545 = 0.0985485103132162
Duration: 0:26:10.604320

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test...
Top-1 accuracy: 167 / 1077 = 0.15506035283194058
Top-3 accuracy: 258 / 1077 = 0.2395543175487465
Top-5 accuracy: 299 / 1077 = 0.2776230269266481
Top-10 accuracy: 337 / 1077 = 0.3129062209842154
Top-50 accuracy: 412 / 1077 = 0.38254410399257194
Duration: 0:04:54.978123

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test...
Top-1 accuracy: 255 / 1098 = 0.23224043715846995
Top-3 accuracy: 379 / 1098 = 0.3451730418943534
Top-5 accuracy: 419 / 1098 = 0.38160291438979965
Top-10 accuracy: 455 / 1098 = 0.4143897996357013
Top-50 accuracy: 523 / 1098 = 0.4763205828779599
Duration: 0:04:23.777852

