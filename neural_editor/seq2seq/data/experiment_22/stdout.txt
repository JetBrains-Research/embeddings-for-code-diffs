
====STARTING TRAINING====
{'ADDITION_TOKEN': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 50,
 'DATASET_ROOT': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': '—É–¥–∞–ª–µ–Ω–∏–µ',
 'DEVICE': device(type='cuda', index=0),
 'DIVERSITY_STRENGTH': None,
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 25,
 'EDIT_REPRESENTATION_SIZE': 16,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LEAVE_ONLY_CHANGED': True,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_GROUPS': 1,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '../../../embeddings-for-code-diffs-data/experiment_22/',
 'PADDING_TOKEN': '–ø–∞–¥–¥–∏–Ω–≥',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': '–∑–∞–º–µ–Ω–∞',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEACHER_FORCING_RATIO': 0.9,
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TOP_K': [1, 3, 5, 10, 50],
 'TSNE_BATCH_SIZE': 1024,
 'TUFANO_BUG_FIXES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'TUFANO_BUG_FIXES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/50_100',
 'TUFANO_CODE_CHANGES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'TUFANO_CODE_CHANGES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'TUFANO_LABELED_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'TUFANO_LABELED_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/50_100',
 'UNCHANGED_TOKEN': '—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'USE_COPYING_MECHANISM': True,
 'USE_EDIT_REPRESENTATION': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: –∑–∞–º–µ–Ω–∞
diff_prev: org.junit.Assert.assertEquals
diff_updated: assertEquals 

Most common words:
         )     194026
         (     193976
         .      92332
         ;      82530
   –ø–∞–¥–¥–∏–Ω–≥      54790
         ,      54180
         {      42036
         }      41868
     VAR_1      41750
  —É–¥–∞–ª–µ–Ω–∏–µ      41184 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 )
05 (
06 .
07 ;
08 –ø–∞–¥–¥–∏–Ω–≥
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 35
—É–¥–∞–ª–µ–Ω–∏–µ 41184 13
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 23
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 54790 8
Number of words (types): 758
Epoch 0 / 1000
Epoch Step: 5 / 138 Loss: 216.38101196289062 Tokens per Sec: 10039.872185101958
Epoch Step: 10 / 138 Loss: 267.2052307128906 Tokens per Sec: 12697.118510458122
Epoch Step: 15 / 138 Loss: 337.49432373046875 Tokens per Sec: 13140.300449669787
Epoch Step: 20 / 138 Loss: 250.2272491455078 Tokens per Sec: 12632.25085748137
Epoch Step: 25 / 138 Loss: 214.90777587890625 Tokens per Sec: 12569.8077816483
Epoch Step: 30 / 138 Loss: 226.20933532714844 Tokens per Sec: 13086.159405275628
Epoch Step: 35 / 138 Loss: 196.5502471923828 Tokens per Sec: 12721.032056690288
Epoch Step: 40 / 138 Loss: 240.62603759765625 Tokens per Sec: 13694.835634439933
Epoch Step: 45 / 138 Loss: 296.1644287109375 Tokens per Sec: 13112.845801856589
Epoch Step: 50 / 138 Loss: 194.11026000976562 Tokens per Sec: 13478.351893819941
Epoch Step: 55 / 138 Loss: 274.1614074707031 Tokens per Sec: 13443.999634492484
Epoch Step: 60 / 138 Loss: 185.4157257080078 Tokens per Sec: 13063.860154815042
Epoch Step: 65 / 138 Loss: 280.27520751953125 Tokens per Sec: 13680.646799729744
Epoch Step: 70 / 138 Loss: 212.2186737060547 Tokens per Sec: 13043.438076548613
Epoch Step: 75 / 138 Loss: 196.8460235595703 Tokens per Sec: 13279.011991926249
Epoch Step: 80 / 138 Loss: 175.3417205810547 Tokens per Sec: 13362.807973982997
Epoch Step: 85 / 138 Loss: 267.6544494628906 Tokens per Sec: 13314.77248383577
Epoch Step: 90 / 138 Loss: 218.45582580566406 Tokens per Sec: 12753.928263532927
Epoch Step: 95 / 138 Loss: 202.85964965820312 Tokens per Sec: 13097.121191689079
Epoch Step: 100 / 138 Loss: 213.64964294433594 Tokens per Sec: 12902.016153171939
Epoch Step: 105 / 138 Loss: 196.13990783691406 Tokens per Sec: 13136.07955442312
Epoch Step: 110 / 138 Loss: 224.2670135498047 Tokens per Sec: 12630.695960643456
Epoch Step: 115 / 138 Loss: 259.76287841796875 Tokens per Sec: 12536.25011454662
Epoch Step: 120 / 138 Loss: 288.05523681640625 Tokens per Sec: 12084.041452193487
Epoch Step: 125 / 138 Loss: 270.16888427734375 Tokens per Sec: 13028.000939247682
Epoch Step: 130 / 138 Loss: 181.47267150878906 Tokens per Sec: 12721.733097099925
Epoch Step: 135 / 138 Loss: 164.94212341308594 Tokens per Sec: 12540.739357266473
Epoch ended with duration 0:00:49.587902
Train perplexity: 24.02764041448225
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ] , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 , , , , , , , , , , , , , , , , , , , , , , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )[0m
Epoch ended with duration 0:00:03.884195
Validation perplexity: 16.777293184942906
Model saved best_on_validation!
Model saved checkpoint!
Epoch 1 / 1000
Epoch Step: 5 / 138 Loss: 162.1395721435547 Tokens per Sec: 13239.352083106249
Epoch Step: 10 / 138 Loss: 194.86358642578125 Tokens per Sec: 13861.048289225004
Epoch Step: 15 / 138 Loss: 209.0928192138672 Tokens per Sec: 12671.222153800358
Epoch Step: 20 / 138 Loss: 219.72976684570312 Tokens per Sec: 13052.971260339795
Epoch Step: 25 / 138 Loss: 195.36639404296875 Tokens per Sec: 13069.111210373534
Epoch Step: 30 / 138 Loss: 247.55931091308594 Tokens per Sec: 13558.7575648221
Epoch Step: 35 / 138 Loss: 138.23793029785156 Tokens per Sec: 12760.36306336976
Epoch Step: 40 / 138 Loss: 132.42727661132812 Tokens per Sec: 13735.454236418092
Epoch Step: 45 / 138 Loss: 206.5361328125 Tokens per Sec: 13452.361093381905
Epoch Step: 50 / 138 Loss: 151.5750732421875 Tokens per Sec: 12925.64241199138
Epoch Step: 55 / 138 Loss: 167.2943878173828 Tokens per Sec: 12926.166775742233
Epoch Step: 60 / 138 Loss: 163.08566284179688 Tokens per Sec: 13387.60339541134
Epoch Step: 65 / 138 Loss: 165.58456420898438 Tokens per Sec: 13207.000483669006
Epoch Step: 70 / 138 Loss: 162.6084747314453 Tokens per Sec: 12699.052437951788
Epoch Step: 75 / 138 Loss: 161.8588409423828 Tokens per Sec: 12777.382096102407
Epoch Step: 80 / 138 Loss: 225.75437927246094 Tokens per Sec: 12750.796239768812
Epoch Step: 85 / 138 Loss: 213.9798583984375 Tokens per Sec: 12591.990426586714
Epoch Step: 90 / 138 Loss: 214.31509399414062 Tokens per Sec: 12886.46622590967
Epoch Step: 95 / 138 Loss: 190.69517517089844 Tokens per Sec: 12906.935016970045
Epoch Step: 100 / 138 Loss: 180.65602111816406 Tokens per Sec: 13026.041398005578
Epoch Step: 105 / 138 Loss: 174.58323669433594 Tokens per Sec: 12399.565543443274
Epoch Step: 110 / 138 Loss: 153.40011596679688 Tokens per Sec: 12499.151490726581
Epoch Step: 115 / 138 Loss: 253.02142333984375 Tokens per Sec: 12881.474147148752
Epoch Step: 120 / 138 Loss: 174.3862762451172 Tokens per Sec: 12549.471616747553
Epoch Step: 125 / 138 Loss: 197.81932067871094 Tokens per Sec: 13162.665922760132
Epoch Step: 130 / 138 Loss: 145.12278747558594 Tokens per Sec: 12817.699380262316
Epoch Step: 135 / 138 Loss: 152.0789794921875 Tokens per Sec: 12838.849000552289
Epoch ended with duration 0:00:49.175184
Train perplexity: 12.036186188766363
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { [ ( ] ] , , , , , , , , ) { < ) { < ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { , , , , , , , , , , , , , , , , ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; } ) ; }[0m
Epoch ended with duration 0:00:03.982816
Validation perplexity: 9.791210823224155
Model saved best_on_validation!
Epoch 2 / 1000
Epoch Step: 5 / 138 Loss: 139.44290161132812 Tokens per Sec: 13296.350722929523
Epoch Step: 10 / 138 Loss: 186.19569396972656 Tokens per Sec: 12997.573810682617
Epoch Step: 15 / 138 Loss: 128.1066436767578 Tokens per Sec: 12697.208314004041
Epoch Step: 20 / 138 Loss: 157.6680908203125 Tokens per Sec: 13075.38024255261
Epoch Step: 25 / 138 Loss: 118.27285766601562 Tokens per Sec: 12741.471765946286
Epoch Step: 30 / 138 Loss: 104.68782043457031 Tokens per Sec: 12614.205212348215
Epoch Step: 35 / 138 Loss: 168.53684997558594 Tokens per Sec: 13188.626906498706
Epoch Step: 40 / 138 Loss: 203.8707275390625 Tokens per Sec: 13275.064814100884
Epoch Step: 45 / 138 Loss: 140.25286865234375 Tokens per Sec: 13298.94290226403
Epoch Step: 50 / 138 Loss: 128.12474060058594 Tokens per Sec: 13442.149168478074
Epoch Step: 55 / 138 Loss: 144.86341857910156 Tokens per Sec: 13578.420028847077
Epoch Step: 60 / 138 Loss: 129.813232421875 Tokens per Sec: 13185.723924751243
Epoch Step: 65 / 138 Loss: 150.1988067626953 Tokens per Sec: 13816.077266867092
Epoch Step: 70 / 138 Loss: 174.82525634765625 Tokens per Sec: 13693.415672155626
Epoch Step: 75 / 138 Loss: 139.6300811767578 Tokens per Sec: 12807.0459498184
Epoch Step: 80 / 138 Loss: 119.89823150634766 Tokens per Sec: 13156.516776330931
Epoch Step: 85 / 138 Loss: 173.9639434814453 Tokens per Sec: 13614.816613766088
Epoch Step: 90 / 138 Loss: 151.0690155029297 Tokens per Sec: 14155.843202294787
Epoch Step: 95 / 138 Loss: 166.60430908203125 Tokens per Sec: 12515.096058541389
Epoch Step: 100 / 138 Loss: 106.91101837158203 Tokens per Sec: 13703.595752826679
Epoch Step: 105 / 138 Loss: 134.011962890625 Tokens per Sec: 12533.644650097096
Epoch Step: 110 / 138 Loss: 200.876708984375 Tokens per Sec: 12026.378713545799
Epoch Step: 115 / 138 Loss: 156.1639862060547 Tokens per Sec: 13021.837063725727
Epoch Step: 120 / 138 Loss: 144.50892639160156 Tokens per Sec: 12677.63101321345
Epoch Step: 125 / 138 Loss: 181.91954040527344 Tokens per Sec: 12816.342088544627
Epoch Step: 130 / 138 Loss: 177.35353088378906 Tokens per Sec: 13043.964315965653
Epoch Step: 135 / 138 Loss: 136.81275939941406 Tokens per Sec: 12676.791559230373
Epoch ended with duration 0:00:48.702438
Train perplexity: 8.445443519209963
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { [ ] VAR_1 , , , , , , TYPE_2 . METHOD_2 ( ) { java.lang.String ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { , [ ] VAR_2 , , , , , , , boolean boolean ( ) ; if ( ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { ( ( ( ( VAR_1 ) ) ) ) ) ) ) ) ) ) ; ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Epoch ended with duration 0:00:03.896797
Validation perplexity: 7.459015406125421
Model saved best_on_validation!
Epoch 3 / 1000
Epoch Step: 5 / 138 Loss: 147.04859924316406 Tokens per Sec: 13415.837155287478
Epoch Step: 10 / 138 Loss: 124.1445541381836 Tokens per Sec: 13438.409868721426
Epoch Step: 15 / 138 Loss: 181.6654815673828 Tokens per Sec: 14097.760559838795
Epoch Step: 20 / 138 Loss: 139.11338806152344 Tokens per Sec: 13286.636386424196
Epoch Step: 25 / 138 Loss: 164.87754821777344 Tokens per Sec: 13700.675620219574
Epoch Step: 30 / 138 Loss: 128.20350646972656 Tokens per Sec: 13523.931494412443
Epoch Step: 35 / 138 Loss: 98.27655792236328 Tokens per Sec: 13372.117935339209
Epoch Step: 40 / 138 Loss: 159.46644592285156 Tokens per Sec: 13467.975171300623
Epoch Step: 45 / 138 Loss: 89.35740661621094 Tokens per Sec: 12655.166788509028
Epoch Step: 50 / 138 Loss: 176.73220825195312 Tokens per Sec: 13280.645160890946
Epoch Step: 55 / 138 Loss: 121.79898071289062 Tokens per Sec: 13035.193614373195
Epoch Step: 60 / 138 Loss: 176.9253692626953 Tokens per Sec: 13527.273887679437
Epoch Step: 65 / 138 Loss: 195.9572296142578 Tokens per Sec: 13381.99571693512
Epoch Step: 70 / 138 Loss: 195.99044799804688 Tokens per Sec: 12398.238513774435
Epoch Step: 75 / 138 Loss: 119.61177825927734 Tokens per Sec: 12586.04652407436
Epoch Step: 80 / 138 Loss: 176.21046447753906 Tokens per Sec: 13363.426517246957
Epoch Step: 85 / 138 Loss: 228.27699279785156 Tokens per Sec: 13311.923309718493
Epoch Step: 90 / 138 Loss: 150.86727905273438 Tokens per Sec: 13174.284300075697
Epoch Step: 95 / 138 Loss: 191.79124450683594 Tokens per Sec: 13523.380482616376
Epoch Step: 100 / 138 Loss: 155.31735229492188 Tokens per Sec: 12914.265646440903
Epoch Step: 105 / 138 Loss: 147.00559997558594 Tokens per Sec: 13296.327751173092
Epoch Step: 110 / 138 Loss: 96.19693756103516 Tokens per Sec: 12471.726740649741
Epoch Step: 115 / 138 Loss: 122.93175506591797 Tokens per Sec: 12638.767105729397
Epoch Step: 120 / 138 Loss: 98.32839965820312 Tokens per Sec: 12304.201926627562
Epoch Step: 125 / 138 Loss: 160.99920654296875 Tokens per Sec: 13198.245037854942
Epoch Step: 130 / 138 Loss: 102.51493072509766 Tokens per Sec: 12653.539316979153
Epoch Step: 135 / 138 Loss: 109.35162353515625 Tokens per Sec: 12865.920935349854
Epoch ended with duration 0:00:48.674503
Train perplexity: 6.939609200196812
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] , , TYPE_2 VAR_2 ) { java.util.List < java.lang.String ) ; VAR_3 ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( VAR_1 VAR_1 , TYPE_2 [ ] , , , , , , , , boolean boolean boolean ( ) ; TYPE_5 . METHOD_2 ( ) ; if ( ) ; } ) ; } ) ; } ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { ( ) ; VAR_2 ) ; ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Epoch ended with duration 0:00:03.952218
Validation perplexity: 7.162958906566647
Model saved best_on_validation!
Epoch 4 / 1000
Epoch Step: 5 / 138 Loss: 126.6287612915039 Tokens per Sec: 12543.9992774851
Epoch Step: 10 / 138 Loss: 95.50320434570312 Tokens per Sec: 13712.442662343903
Epoch Step: 15 / 138 Loss: 149.78765869140625 Tokens per Sec: 12412.726131646026
Epoch Step: 20 / 138 Loss: 152.97113037109375 Tokens per Sec: 12989.723100421352
Epoch Step: 25 / 138 Loss: 98.78324127197266 Tokens per Sec: 13629.596135039903
Epoch Step: 30 / 138 Loss: 87.30667114257812 Tokens per Sec: 13757.843847522814
Epoch Step: 35 / 138 Loss: 114.77690887451172 Tokens per Sec: 13444.64995543864
Epoch Step: 40 / 138 Loss: 153.55657958984375 Tokens per Sec: 13441.577749321525
Epoch Step: 45 / 138 Loss: 117.23733520507812 Tokens per Sec: 12559.655980798214
Epoch Step: 50 / 138 Loss: 119.87577056884766 Tokens per Sec: 14317.50672188371
Epoch Step: 55 / 138 Loss: 136.31040954589844 Tokens per Sec: 13585.910877665563
Epoch Step: 60 / 138 Loss: 163.8207550048828 Tokens per Sec: 13519.147625714786
Epoch Step: 65 / 138 Loss: 104.03751373291016 Tokens per Sec: 12784.44674283568
Epoch Step: 70 / 138 Loss: 167.80841064453125 Tokens per Sec: 12348.231560736878
Epoch Step: 75 / 138 Loss: 165.43882751464844 Tokens per Sec: 13566.028527514718
Epoch Step: 80 / 138 Loss: 167.0540771484375 Tokens per Sec: 13413.8379298622
Epoch Step: 85 / 138 Loss: 123.95471954345703 Tokens per Sec: 13532.228513242877
Epoch Step: 90 / 138 Loss: 161.28811645507812 Tokens per Sec: 13446.925662870512
Epoch Step: 95 / 138 Loss: 154.26229858398438 Tokens per Sec: 13227.033564375155
Epoch Step: 100 / 138 Loss: 212.3573760986328 Tokens per Sec: 13006.593823445326
Epoch Step: 105 / 138 Loss: 120.91606903076172 Tokens per Sec: 13112.005195256083
Epoch Step: 110 / 138 Loss: 152.66140747070312 Tokens per Sec: 12491.03944266488
Epoch Step: 115 / 138 Loss: 237.35914611816406 Tokens per Sec: 12561.60970445835
Epoch Step: 120 / 138 Loss: 164.01171875 Tokens per Sec: 12851.381895978464
Epoch Step: 125 / 138 Loss: 173.0518341064453 Tokens per Sec: 11737.483312598559
Epoch Step: 130 / 138 Loss: 217.11131286621094 Tokens per Sec: 12198.967255454645
Epoch Step: 135 / 138 Loss: 120.97459411621094 Tokens per Sec: 13143.388463535972
Epoch ended with duration 0:00:48.740388
Train perplexity: 6.390252270406107
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > ( = new TYPE_1 . METHOD_2 ( ) ; java.util.List < TYPE_1 . < TYPE_1 . > ( ) ; } ( ) ; } ) ; } ) ; } ) ; } ) ; } ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , , , , , , , boolean boolean boolean boolean VAR_6 TYPE_5 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; if ( ) ; rule ( ) ; } , , , , , , , , , , , , , , , ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ; != null ) ; for ( ) ; : ( ) ; java.lang.String ) ; } ( ) ; + ( ) ; } + ( ) ; } ) ; }[0m
Epoch ended with duration 0:00:03.852136
Validation perplexity: 5.61216285973182
Model saved best_on_validation!
Epoch 5 / 1000
Epoch Step: 5 / 138 Loss: 172.79586791992188 Tokens per Sec: 11948.729581648196
Epoch Step: 10 / 138 Loss: 112.1905288696289 Tokens per Sec: 13149.05586304875
Epoch Step: 15 / 138 Loss: 126.6886978149414 Tokens per Sec: 14040.042728982558
Epoch Step: 20 / 138 Loss: 147.21368408203125 Tokens per Sec: 13418.268393238186
Epoch Step: 25 / 138 Loss: 160.2273406982422 Tokens per Sec: 13817.79997581823
Epoch Step: 30 / 138 Loss: 140.39569091796875 Tokens per Sec: 13712.572971137593
Epoch Step: 35 / 138 Loss: 146.20333862304688 Tokens per Sec: 13534.602079432756
Epoch Step: 40 / 138 Loss: 102.9908676147461 Tokens per Sec: 13427.989951431144
Epoch Step: 45 / 138 Loss: 146.24844360351562 Tokens per Sec: 13395.75171534606
Epoch Step: 50 / 138 Loss: 92.11372375488281 Tokens per Sec: 11876.436869751362
Epoch Step: 55 / 138 Loss: 159.5248260498047 Tokens per Sec: 12744.65676146745
Epoch Step: 60 / 138 Loss: 84.33688354492188 Tokens per Sec: 13267.21534329075
Epoch Step: 65 / 138 Loss: 135.78939819335938 Tokens per Sec: 12541.874619631835
Epoch Step: 70 / 138 Loss: 111.93755340576172 Tokens per Sec: 13570.095091873784
Epoch Step: 75 / 138 Loss: 106.68480682373047 Tokens per Sec: 13480.99757350943
Epoch Step: 80 / 138 Loss: 80.26549530029297 Tokens per Sec: 13419.305379333477
Epoch Step: 85 / 138 Loss: 110.43111419677734 Tokens per Sec: 12924.307208298234
Epoch Step: 90 / 138 Loss: 128.0576171875 Tokens per Sec: 13844.99235580264
Epoch Step: 95 / 138 Loss: 112.74686431884766 Tokens per Sec: 13312.966032696242
Epoch Step: 100 / 138 Loss: 119.79048156738281 Tokens per Sec: 13321.60706401766
Epoch Step: 105 / 138 Loss: 168.66563415527344 Tokens per Sec: 11895.460505019588
Epoch Step: 110 / 138 Loss: 83.08357238769531 Tokens per Sec: 12939.70077344249
Epoch Step: 115 / 138 Loss: 84.50555419921875 Tokens per Sec: 12638.368944998689
Epoch Step: 120 / 138 Loss: 110.5618667602539 Tokens per Sec: 12854.06624064058
Epoch Step: 125 / 138 Loss: 88.24210357666016 Tokens per Sec: 12768.457604637124
Epoch Step: 130 / 138 Loss: 98.27853393554688 Tokens per Sec: 12533.749745167117
Epoch Step: 135 / 138 Loss: 92.4834213256836 Tokens per Sec: 12810.189661474802
Epoch ended with duration 0:00:48.830746
Train perplexity: 5.893962885321941
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long ] ] values , VAR_2 VAR_2 ) { java.util.List < java.lang.String VAR_3 VAR_3 = new TYPE_3 . METHOD_2 ( VAR_1 ) ; < TYPE_1 < TYPE_1 > ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , , , , , , , boolean boolean boolean boolean VAR_6 VAR_6 TYPE_5 . METHOD_2 ( ) ; VAR_1 ) ; if ( ) ; if ( ) { rule ( ) ; } , , , , , , , , , , , , , catch ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ; != null ) ; for ( ) ; : ( ) ; } ) ; + ( + ( + ( + ( + ( ) ; } ) ; } ) ; } mContext ( ) ; }[0m
Epoch ended with duration 0:00:03.926561
Validation perplexity: 5.812269461705547
Model saved checkpoint!
Epoch 6 / 1000
Epoch Step: 5 / 138 Loss: 103.29640197753906 Tokens per Sec: 13242.392122991536
Epoch Step: 10 / 138 Loss: 154.75665283203125 Tokens per Sec: 13248.68617471253
Epoch Step: 15 / 138 Loss: 103.16738891601562 Tokens per Sec: 13202.399666560617
Epoch Step: 20 / 138 Loss: 125.43582916259766 Tokens per Sec: 13541.40098588025
Epoch Step: 25 / 138 Loss: 142.7545928955078 Tokens per Sec: 12735.105533585804
Epoch Step: 30 / 138 Loss: 80.83026123046875 Tokens per Sec: 13811.155066585236
Epoch Step: 35 / 138 Loss: 105.45990753173828 Tokens per Sec: 13195.61064755715
Epoch Step: 40 / 138 Loss: 106.85427856445312 Tokens per Sec: 13272.709482238017
Epoch Step: 45 / 138 Loss: 134.8352508544922 Tokens per Sec: 12617.927579083449
Epoch Step: 50 / 138 Loss: 108.83740234375 Tokens per Sec: 13434.980762010491
Epoch Step: 55 / 138 Loss: 114.73452758789062 Tokens per Sec: 13852.147078454458
Epoch Step: 60 / 138 Loss: 120.24813842773438 Tokens per Sec: 13586.752957317218
Epoch Step: 65 / 138 Loss: 111.15149688720703 Tokens per Sec: 12797.435401994951
Epoch Step: 70 / 138 Loss: 131.94532775878906 Tokens per Sec: 13342.830170339479
Epoch Step: 75 / 138 Loss: 143.87098693847656 Tokens per Sec: 13150.99242923406
Epoch Step: 80 / 138 Loss: 91.95524597167969 Tokens per Sec: 13058.225682577944
Epoch Step: 85 / 138 Loss: 153.7295684814453 Tokens per Sec: 13855.93034078843
Epoch Step: 90 / 138 Loss: 176.55186462402344 Tokens per Sec: 12285.499091665142
Epoch Step: 95 / 138 Loss: 104.60929870605469 Tokens per Sec: 12555.32427698381
Epoch Step: 100 / 138 Loss: 99.05111694335938 Tokens per Sec: 12904.766303138687
Epoch Step: 105 / 138 Loss: 142.36871337890625 Tokens per Sec: 13098.74228879965
Epoch Step: 110 / 138 Loss: 131.60964965820312 Tokens per Sec: 12756.91050718671
Epoch Step: 115 / 138 Loss: 112.07649993896484 Tokens per Sec: 11909.190273009975
Epoch Step: 120 / 138 Loss: 99.95552062988281 Tokens per Sec: 12753.930836218591
Epoch Step: 125 / 138 Loss: 90.04881286621094 Tokens per Sec: 12608.872081028083
Epoch Step: 130 / 138 Loss: 114.60149383544922 Tokens per Sec: 12829.748799763383
Epoch Step: 135 / 138 Loss: 80.50477600097656 Tokens per Sec: 13140.89188509577
Epoch ended with duration 0:00:48.859118
Train perplexity: 5.646257847841985
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > ( TYPE_3 . TYPE_3 . METHOD_2 ( VAR_1 ) ; < TYPE_1 . > ( ) { > ( ) ; } ) ; } ) ; } ) ; } ) ; } value ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , VAR_3 , , , , boolean boolean boolean boolean boolean VAR_6 TYPE_5 . TYPE_5 . METHOD_2 ( ) ; if ( ) ; if ( ) { rule rule rule rule rule rule rule , VAR_1 , VAR_1 , , , , , , , , , , VAR_2 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ; != null ) ; for ( node ) ; : VAR_2 ) { VAR_3 ) ; + ( + ( + ( + ( ) ; } ) ; } mContext ( ) ; }[0m
Epoch ended with duration 0:00:03.891759
Validation perplexity: 5.037229081576631
Model saved best_on_validation!
Epoch 7 / 1000
Epoch Step: 5 / 138 Loss: 120.59172821044922 Tokens per Sec: 13086.806632419815
Epoch Step: 10 / 138 Loss: 94.52896881103516 Tokens per Sec: 13337.482023105096
Epoch Step: 15 / 138 Loss: 140.6410369873047 Tokens per Sec: 12563.304921775412
Epoch Step: 20 / 138 Loss: 100.12275695800781 Tokens per Sec: 13850.828522995182
Epoch Step: 25 / 138 Loss: 109.9807357788086 Tokens per Sec: 12690.562035882966
Epoch Step: 30 / 138 Loss: 105.68685913085938 Tokens per Sec: 13211.866851704244
Epoch Step: 35 / 138 Loss: 96.58305358886719 Tokens per Sec: 13868.804813048006
Epoch Step: 40 / 138 Loss: 100.38333129882812 Tokens per Sec: 12768.407236246558
Epoch Step: 45 / 138 Loss: 107.34454345703125 Tokens per Sec: 13332.272290330095
Epoch Step: 50 / 138 Loss: 148.6962432861328 Tokens per Sec: 13771.57337342021
Epoch Step: 55 / 138 Loss: 132.85662841796875 Tokens per Sec: 13265.309876515448
Epoch Step: 60 / 138 Loss: 84.27877807617188 Tokens per Sec: 13048.798181191689
Epoch Step: 65 / 138 Loss: 90.72488403320312 Tokens per Sec: 13115.043020683217
Epoch Step: 70 / 138 Loss: 148.09507751464844 Tokens per Sec: 12918.096471780464
Epoch Step: 75 / 138 Loss: 143.26194763183594 Tokens per Sec: 13861.720453918579
Epoch Step: 80 / 138 Loss: 89.12458038330078 Tokens per Sec: 13366.100667887336
Epoch Step: 85 / 138 Loss: 119.59706115722656 Tokens per Sec: 13315.198108444241
Epoch Step: 90 / 138 Loss: 140.73289489746094 Tokens per Sec: 13439.964206748595
Epoch Step: 95 / 138 Loss: 88.3687973022461 Tokens per Sec: 13358.434037763223
Epoch Step: 100 / 138 Loss: 95.04402923583984 Tokens per Sec: 12588.950705521898
Epoch Step: 105 / 138 Loss: 100.99353790283203 Tokens per Sec: 12589.656257062992
Epoch Step: 110 / 138 Loss: 118.017578125 Tokens per Sec: 12940.676483556972
Epoch Step: 115 / 138 Loss: 199.8170166015625 Tokens per Sec: 12776.637226380322
Epoch Step: 120 / 138 Loss: 96.17537689208984 Tokens per Sec: 12881.812600143232
Epoch Step: 125 / 138 Loss: 235.31788635253906 Tokens per Sec: 11802.863533437185
Epoch Step: 130 / 138 Loss: 84.34994506835938 Tokens per Sec: 12598.882717722341
Epoch Step: 135 / 138 Loss: 77.14669799804688 Tokens per Sec: 12817.28700995336
Epoch ended with duration 0:00:48.719680
Train perplexity: 5.173116916359471
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] values , VAR_2 VAR_2 ) { java.util.List < java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 < TYPE_1 > ( > ( > ( ) ; > ( ) ; } ) ; } : : : : VAR_4 ) ; } value ( ) ; } return TYPE_5 . TYPE_5 . METHOD_4 ( ) ; } , , , , , , , , , , , , , , , , , , , , , , , , ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , VAR_3 , , , boolean boolean boolean boolean VAR_6 VAR_6 TYPE_5 TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ; if ( ) { != null ) { rule rule rule rule ( rule , VAR_1 , VAR_1 , , , , , , , , , VAR_6 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ) ) ; ) ; for ( node ) { : VAR_2 ) { VAR_3 = new TYPE_2 ( + ( + ( + ( + ( + ( ) ; } mContext ( ) ; } , mContext ( ) ; }[0m
Epoch ended with duration 0:00:03.914016
Validation perplexity: 5.119810346731699
Epoch 8 / 1000
Epoch Step: 5 / 138 Loss: 133.94293212890625 Tokens per Sec: 12985.914187924165
Epoch Step: 10 / 138 Loss: 232.6294708251953 Tokens per Sec: 12814.786724262713
Epoch Step: 15 / 138 Loss: 87.16707611083984 Tokens per Sec: 12481.946334735627
Epoch Step: 20 / 138 Loss: 161.54283142089844 Tokens per Sec: 12352.845785197405
Epoch Step: 25 / 138 Loss: 94.16436767578125 Tokens per Sec: 13401.79105039705
Epoch Step: 30 / 138 Loss: 82.54502868652344 Tokens per Sec: 13640.640441424443
Epoch Step: 35 / 138 Loss: 112.1004638671875 Tokens per Sec: 13858.94812757262
Epoch Step: 40 / 138 Loss: 78.99412536621094 Tokens per Sec: 12981.612334204172
Epoch Step: 45 / 138 Loss: 81.07122802734375 Tokens per Sec: 13309.270345736824
Epoch Step: 50 / 138 Loss: 137.2501983642578 Tokens per Sec: 13536.221220810916
Epoch Step: 55 / 138 Loss: 95.08523559570312 Tokens per Sec: 12907.785280559816
Epoch Step: 60 / 138 Loss: 139.70217895507812 Tokens per Sec: 13379.530783505248
Epoch Step: 65 / 138 Loss: 124.41254425048828 Tokens per Sec: 13282.600607958959
Epoch Step: 70 / 138 Loss: 93.44996643066406 Tokens per Sec: 12348.492190508781
Epoch Step: 75 / 138 Loss: 198.62619018554688 Tokens per Sec: 12738.971571606098
Epoch Step: 80 / 138 Loss: 73.56010437011719 Tokens per Sec: 13052.71253278338
Epoch Step: 85 / 138 Loss: 80.59754943847656 Tokens per Sec: 13852.874875480355
Epoch Step: 90 / 138 Loss: 77.16690826416016 Tokens per Sec: 13660.554618149363
Epoch Step: 95 / 138 Loss: 87.30848693847656 Tokens per Sec: 13043.81192952873
Epoch Step: 100 / 138 Loss: 94.0837173461914 Tokens per Sec: 13763.506756974002
Epoch Step: 105 / 138 Loss: 147.1034698486328 Tokens per Sec: 11907.92415445034
Epoch Step: 110 / 138 Loss: 133.19174194335938 Tokens per Sec: 13169.831793788839
Epoch Step: 115 / 138 Loss: 144.6274871826172 Tokens per Sec: 13329.24524679184
Epoch Step: 120 / 138 Loss: 138.93992614746094 Tokens per Sec: 13082.83121833264
Epoch Step: 125 / 138 Loss: 146.23724365234375 Tokens per Sec: 12290.740433056526
Epoch Step: 130 / 138 Loss: 114.54204559326172 Tokens per Sec: 12877.365937545053
Epoch Step: 135 / 138 Loss: 95.01945495605469 Tokens per Sec: 12583.686416373499
Epoch ended with duration 0:00:48.849170
Train perplexity: 5.04958446880862
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long ] ] values , VAR_2 VAR_2 ) { java.util.List < java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 TYPE_4 . > ( > ( ) ; > ( ) ; for ( ) ; } ) ; } VAR_4 ) ; } value ( ) ; } value ( ) ; } TYPE_5 . TYPE_5 . TYPE_5 . METHOD_4 ( ) ; } , , , , , , , , , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , VAR_3 , TYPE_4 , boolean boolean boolean boolean VAR_6 VAR_6 TYPE_5 TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ; if ( ) { rule rule rule rule rule rule rule rule , VAR_1 , VAR_1 , , , , , , , VAR_5 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) ) ) ) { for ( node node , VAR_2 ) { java.lang.String , VAR_3 = new + ( + ( + ( + ( + ( ) ; } mContext ) ; } VAR_4 ) ; }[0m
Epoch ended with duration 0:00:03.918715
Validation perplexity: 4.891460933124665
Model saved best_on_validation!
Epoch 9 / 1000
Epoch Step: 5 / 138 Loss: 93.57501983642578 Tokens per Sec: 12410.679802509154
Epoch Step: 10 / 138 Loss: 125.02049255371094 Tokens per Sec: 12861.079364453362
Epoch Step: 15 / 138 Loss: 162.087158203125 Tokens per Sec: 13059.71770568556
Epoch Step: 20 / 138 Loss: 75.88475036621094 Tokens per Sec: 13014.334991312362
Epoch Step: 25 / 138 Loss: 145.35926818847656 Tokens per Sec: 12991.820406915964
Epoch Step: 30 / 138 Loss: 76.79962158203125 Tokens per Sec: 13474.645467036768
Epoch Step: 35 / 138 Loss: 131.17092895507812 Tokens per Sec: 13544.987075687206
Epoch Step: 40 / 138 Loss: 107.1201171875 Tokens per Sec: 12974.173981450007
Epoch Step: 45 / 138 Loss: 130.9237060546875 Tokens per Sec: 13749.562173028815
Epoch Step: 50 / 138 Loss: 79.84200286865234 Tokens per Sec: 13289.261217210453
Epoch Step: 55 / 138 Loss: 125.97958374023438 Tokens per Sec: 13373.044828300724
Epoch Step: 60 / 138 Loss: 142.11216735839844 Tokens per Sec: 13139.125705545614
Epoch Step: 65 / 138 Loss: 123.3791275024414 Tokens per Sec: 14024.636685560814
Epoch Step: 70 / 138 Loss: 74.07723999023438 Tokens per Sec: 13126.61688581562
Epoch Step: 75 / 138 Loss: 107.47813415527344 Tokens per Sec: 13314.700781225925
Epoch Step: 80 / 138 Loss: 134.77725219726562 Tokens per Sec: 12989.986720677487
Epoch Step: 85 / 138 Loss: 142.75393676757812 Tokens per Sec: 13687.893500233442
Epoch Step: 90 / 138 Loss: 122.0380859375 Tokens per Sec: 12581.789120598381
Epoch Step: 95 / 138 Loss: 104.19387817382812 Tokens per Sec: 13184.3195582025
Epoch Step: 100 / 138 Loss: 142.84423828125 Tokens per Sec: 13629.383804476665
Epoch Step: 105 / 138 Loss: 153.8037109375 Tokens per Sec: 11922.26446696137
Epoch Step: 110 / 138 Loss: 135.38729858398438 Tokens per Sec: 12533.507873291468
Epoch Step: 115 / 138 Loss: 147.1536102294922 Tokens per Sec: 13000.552477637453
Epoch Step: 120 / 138 Loss: 139.50711059570312 Tokens per Sec: 13069.438625087638
Epoch Step: 125 / 138 Loss: 87.02598571777344 Tokens per Sec: 12647.960342798953
Epoch Step: 130 / 138 Loss: 138.76327514648438 Tokens per Sec: 13339.153518097377
Epoch Step: 135 / 138 Loss: 94.24542236328125 Tokens per Sec: 12695.52547954315
Epoch ended with duration 0:00:48.774236
Train perplexity: 4.82611415231925
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > ( TYPE_3 . TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 . > ( > ( ) ) ; for ( ) ; for ( ) ; : VAR_1 . VAR_4 ) ; } value ( ) ; } TYPE_5 . TYPE_5 . TYPE_5 . TYPE_5 ) ; } , VAR_5 , VAR_5 , , , , , , , , , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , , boolean boolean , boolean VAR_6 VAR_6 TYPE_5 TYPE_5 . rule ( VAR_1 . METHOD_3 ( ) ) { rule ) { rule ( rule rule rule ) { VAR_1 , VAR_1 , VAR_2 , , , , , VAR_5 , VAR_6 ) ; } catch ( ) ; } ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { ( VAR_2 ) ) ) ) { for ( for ( node ) { VAR_2 ) { VAR_3 = new + ( + ( + ( + ( + ( ) ) ) ; mContext ( ) ; } mContext ( ) ; } node , node , node , VAR_3 ) ; }[0m
Epoch ended with duration 0:00:03.888468
Validation perplexity: 4.355920071333316
Model saved best_on_validation!
Epoch 10 / 1000
Epoch Step: 5 / 138 Loss: 93.56132507324219 Tokens per Sec: 13587.813165230782
Epoch Step: 10 / 138 Loss: 128.84217834472656 Tokens per Sec: 13062.865589416626
Epoch Step: 15 / 138 Loss: 102.48674011230469 Tokens per Sec: 13659.650258443644
Epoch Step: 20 / 138 Loss: 100.5677719116211 Tokens per Sec: 13641.659911139555
Epoch Step: 25 / 138 Loss: 110.0069351196289 Tokens per Sec: 13035.038941815064
Epoch Step: 30 / 138 Loss: 137.60276794433594 Tokens per Sec: 13518.588379159612
Epoch Step: 35 / 138 Loss: 121.55415344238281 Tokens per Sec: 13091.884660465032
Epoch Step: 40 / 138 Loss: 77.94808959960938 Tokens per Sec: 13513.555724454569
Epoch Step: 45 / 138 Loss: 61.493900299072266 Tokens per Sec: 13387.838938572457
Epoch Step: 50 / 138 Loss: 80.11128997802734 Tokens per Sec: 13871.446764128603
Epoch Step: 55 / 138 Loss: 211.10394287109375 Tokens per Sec: 12656.544382981307
Epoch Step: 60 / 138 Loss: 119.91236877441406 Tokens per Sec: 13497.715355908038
Epoch Step: 65 / 138 Loss: 80.27239990234375 Tokens per Sec: 13944.508627618483
Epoch Step: 70 / 138 Loss: 90.05856323242188 Tokens per Sec: 13008.628770646084
Epoch Step: 75 / 138 Loss: 94.63935089111328 Tokens per Sec: 13384.853072814512
Epoch Step: 80 / 138 Loss: 108.73272705078125 Tokens per Sec: 13125.043693013968
Epoch Step: 85 / 138 Loss: 120.66950988769531 Tokens per Sec: 13715.153330553812
Epoch Step: 90 / 138 Loss: 106.35445404052734 Tokens per Sec: 12776.725913373655
Epoch Step: 95 / 138 Loss: 73.03700256347656 Tokens per Sec: 13431.913402619593
Epoch Step: 100 / 138 Loss: 88.34703826904297 Tokens per Sec: 12558.312650734488
Epoch Step: 105 / 138 Loss: 231.27780151367188 Tokens per Sec: 12334.37468669986
Epoch Step: 110 / 138 Loss: 81.40946960449219 Tokens per Sec: 13097.000292180686
Epoch Step: 115 / 138 Loss: 82.55558776855469 Tokens per Sec: 12493.656500296069
Epoch Step: 120 / 138 Loss: 83.73750305175781 Tokens per Sec: 13007.967349682549
Epoch Step: 125 / 138 Loss: 89.51927947998047 Tokens per Sec: 12572.153223058764
Epoch Step: 130 / 138 Loss: 102.19749450683594 Tokens per Sec: 12959.15461661165
Epoch Step: 135 / 138 Loss: 73.27532196044922 Tokens per Sec: 11986.192363108943
Epoch ended with duration 0:00:48.502826
Train perplexity: 4.267729346027694
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 VAR_2 ) { java.util.List < java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 TYPE_4 . VAR_4 = new TYPE_2 . > ( ) ; for ( ) { : VAR_1 . VAR_4 . VAR_4 ) ; } value ( ) ; } TYPE_5 . TYPE_5 . TYPE_5 . TYPE_5 ) , VAR_5 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , , boolean , boolean boolean boolean VAR_6 VAR_6 TYPE_5 . rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) { != null ) { rule ( rule rule , VAR_1 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , catch ( ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { ( VAR_2 ) ) ) { for ( for ( node , : VAR_2 ) { VAR_3 = new + ( + ( + ( + ( + ( ) ) ) ) ; } VAR_4 . VAR_4 . mContext ( ) ; }[0m
Epoch ended with duration 0:00:04.055012
Validation perplexity: 5.253031696599823
Model saved checkpoint!
Epoch 11 / 1000
Epoch Step: 5 / 138 Loss: 124.450927734375 Tokens per Sec: 12918.046601697912
Epoch Step: 10 / 138 Loss: 86.24720764160156 Tokens per Sec: 13728.760394467363
Epoch Step: 15 / 138 Loss: 120.13824462890625 Tokens per Sec: 13461.850911825235
Epoch Step: 20 / 138 Loss: 85.02273559570312 Tokens per Sec: 13045.195315929586
Epoch Step: 25 / 138 Loss: 75.58683013916016 Tokens per Sec: 13435.499042981515
Epoch Step: 30 / 138 Loss: 88.40557861328125 Tokens per Sec: 13284.522387157243
Epoch Step: 35 / 138 Loss: 81.5555419921875 Tokens per Sec: 13088.74647600845
Epoch Step: 40 / 138 Loss: 59.874359130859375 Tokens per Sec: 12888.402659889303
Epoch Step: 45 / 138 Loss: 92.21934509277344 Tokens per Sec: 14147.659964657796
Epoch Step: 50 / 138 Loss: 109.5557632446289 Tokens per Sec: 12794.976007326452
Epoch Step: 55 / 138 Loss: 82.73914337158203 Tokens per Sec: 13158.302795999529
Epoch Step: 60 / 138 Loss: 135.01849365234375 Tokens per Sec: 14113.299109346475
Epoch Step: 65 / 138 Loss: 87.6790542602539 Tokens per Sec: 13268.381083876378
Epoch Step: 70 / 138 Loss: 111.86077117919922 Tokens per Sec: 13198.467722741292
Epoch Step: 75 / 138 Loss: 77.95310974121094 Tokens per Sec: 13663.17266063664
Epoch Step: 80 / 138 Loss: 118.61510467529297 Tokens per Sec: 13139.273508009308
Epoch Step: 85 / 138 Loss: 64.6913070678711 Tokens per Sec: 12944.802704552718
Epoch Step: 90 / 138 Loss: 83.50920867919922 Tokens per Sec: 13155.724297174213
Epoch Step: 95 / 138 Loss: 131.9932861328125 Tokens per Sec: 12468.215006268867
Epoch Step: 100 / 138 Loss: 111.06495666503906 Tokens per Sec: 13832.309505105852
Epoch Step: 105 / 138 Loss: 127.95196533203125 Tokens per Sec: 12964.193974354337
Epoch Step: 110 / 138 Loss: 189.65460205078125 Tokens per Sec: 12444.868361365516
Epoch Step: 115 / 138 Loss: 116.116455078125 Tokens per Sec: 11944.895490200477
Epoch Step: 120 / 138 Loss: 79.34759521484375 Tokens per Sec: 12656.413869401693
Epoch Step: 125 / 138 Loss: 193.4417266845703 Tokens per Sec: 12352.244525350432
Epoch Step: 130 / 138 Loss: 127.5999984741211 Tokens per Sec: 12922.831701574283
Epoch Step: 135 / 138 Loss: 75.03883361816406 Tokens per Sec: 12569.05039757317
Epoch ended with duration 0:00:48.725873
Train perplexity: 4.264968545624408
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 ( > ( VAR_4 ) ; > ( > ( for ( for ( ) ) ) { : VAR_4 . VAR_4 . METHOD_3 ( value ) ; } return return TYPE_5 . TYPE_5 . TYPE_5 , VAR_5 , , , , , , , , , , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , boolean , boolean boolean boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; rule ( rule ) { rule rule rule rule rule rule , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( ) ; } STRING_1 , STRING_1 , rule ( ) . METHOD_7 ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { VAR_2 ) { != null ) { for ( node node : : VAR_2 = java.lang.String java.lang.String VAR_3 = ( + ( + ( + ( + ( + ( mContext ) ) ) , VAR_4 , VAR_4 , mContext ( mContext , node , node , VAR_3 ) ; }[0m
Epoch ended with duration 0:00:03.891677
Validation perplexity: 3.9563811839491785
Model saved best_on_validation!
Epoch 12 / 1000
Epoch Step: 5 / 138 Loss: 111.04377746582031 Tokens per Sec: 13654.597425721548
Epoch Step: 10 / 138 Loss: 123.9617919921875 Tokens per Sec: 13358.717520176222
Epoch Step: 15 / 138 Loss: 97.18431091308594 Tokens per Sec: 12920.577900513343
Epoch Step: 20 / 138 Loss: 129.6278839111328 Tokens per Sec: 13643.118875823795
Epoch Step: 25 / 138 Loss: 95.69214630126953 Tokens per Sec: 13606.935255558596
Epoch Step: 30 / 138 Loss: 106.61114501953125 Tokens per Sec: 13078.24875768268
Epoch Step: 35 / 138 Loss: 82.43589782714844 Tokens per Sec: 12721.349946263163
Epoch Step: 40 / 138 Loss: 108.42708587646484 Tokens per Sec: 13450.725260439787
Epoch Step: 45 / 138 Loss: 69.88410186767578 Tokens per Sec: 13012.049354846127
Epoch Step: 50 / 138 Loss: 122.73860931396484 Tokens per Sec: 13207.13205218813
Epoch Step: 55 / 138 Loss: 90.15473937988281 Tokens per Sec: 13655.988180181883
Epoch Step: 60 / 138 Loss: 120.93994903564453 Tokens per Sec: 13592.321655054475
Epoch Step: 65 / 138 Loss: 80.43681335449219 Tokens per Sec: 12798.720655029012
Epoch Step: 70 / 138 Loss: 61.145530700683594 Tokens per Sec: 12531.689201475981
Epoch Step: 75 / 138 Loss: 73.69332885742188 Tokens per Sec: 13714.42954330551
Epoch Step: 80 / 138 Loss: 120.4992904663086 Tokens per Sec: 12990.15132233519
Epoch Step: 85 / 138 Loss: 103.30810546875 Tokens per Sec: 13346.80298210337
Epoch Step: 90 / 138 Loss: 88.53511810302734 Tokens per Sec: 12126.892786062617
Epoch Step: 95 / 138 Loss: 82.05384063720703 Tokens per Sec: 13047.354288517414
Epoch Step: 100 / 138 Loss: 70.10134887695312 Tokens per Sec: 13109.842436398969
Epoch Step: 105 / 138 Loss: 104.00887298583984 Tokens per Sec: 13167.509943136225
Epoch Step: 110 / 138 Loss: 115.13008880615234 Tokens per Sec: 13043.32416590922
Epoch Step: 115 / 138 Loss: 80.26046752929688 Tokens per Sec: 12865.383713399568
Epoch Step: 120 / 138 Loss: 106.07830810546875 Tokens per Sec: 12182.0203774532
Epoch Step: 125 / 138 Loss: 59.32728958129883 Tokens per Sec: 12914.054428074745
Epoch Step: 130 / 138 Loss: 124.81914520263672 Tokens per Sec: 13186.650219056763
Epoch Step: 135 / 138 Loss: 192.6239013671875 Tokens per Sec: 11827.209420022024
Epoch ended with duration 0:00:48.866987
Train perplexity: 4.278148700390497
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = new VAR_4 = new java.util.ArrayList < TYPE_1 ( for ( for ( ) ) ) { VAR_4 . VAR_4 . METHOD_3 ( ) ; } return return TYPE_5 . TYPE_5 . TYPE_5 , VAR_5 , VAR_5 , 0 , VAR_2 , VAR_2 , , , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , boolean , boolean boolean boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) { rule ( != null ) { rule rule ( VAR_1 , VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception ) { STRING_1 , STRING_1 , STRING_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { ( VAR_2 ) ) { ) { for ( node node : VAR_2 ) { java.lang.String = VAR_3 = ( + ( + ( + ( + ( ) ) ) , VAR_4 , VAR_4 , VAR_4 , mContext ( ) , node , node , VAR_3 ) ; }[0m
Epoch ended with duration 0:00:04.042567
Validation perplexity: 4.825219202439651
Epoch 13 / 1000
Epoch Step: 5 / 138 Loss: 236.42523193359375 Tokens per Sec: 13148.350895366702
Epoch Step: 10 / 138 Loss: 92.55001831054688 Tokens per Sec: 13473.982994990736
Epoch Step: 15 / 138 Loss: 105.89356231689453 Tokens per Sec: 12535.801989477783
Epoch Step: 20 / 138 Loss: 97.59561920166016 Tokens per Sec: 13447.092989764167
Epoch Step: 25 / 138 Loss: 56.659183502197266 Tokens per Sec: 13885.038772078673
Epoch Step: 30 / 138 Loss: 120.38414764404297 Tokens per Sec: 12858.109298416975
Epoch Step: 35 / 138 Loss: 105.46258544921875 Tokens per Sec: 13413.26423834085
Epoch Step: 40 / 138 Loss: 72.77757263183594 Tokens per Sec: 13560.360740683836
Epoch Step: 45 / 138 Loss: 123.06062316894531 Tokens per Sec: 13630.895756299336
Epoch Step: 50 / 138 Loss: 120.12112426757812 Tokens per Sec: 12978.26364258158
Epoch Step: 55 / 138 Loss: 105.86589050292969 Tokens per Sec: 13755.39926974451
Epoch Step: 60 / 138 Loss: 82.22212982177734 Tokens per Sec: 12452.418554531914
Epoch Step: 65 / 138 Loss: 221.9716033935547 Tokens per Sec: 12683.438881887236
Epoch Step: 70 / 138 Loss: 87.09100341796875 Tokens per Sec: 12966.528828144832
Epoch Step: 75 / 138 Loss: 61.939247131347656 Tokens per Sec: 13588.665643751492
Epoch Step: 80 / 138 Loss: 102.9468765258789 Tokens per Sec: 12684.372729733679
Epoch Step: 85 / 138 Loss: 120.84302520751953 Tokens per Sec: 13410.424515867764
Epoch Step: 90 / 138 Loss: 58.12303161621094 Tokens per Sec: 13710.470836555045
Epoch Step: 95 / 138 Loss: 131.86068725585938 Tokens per Sec: 12848.67964707103
Epoch Step: 100 / 138 Loss: 89.59754180908203 Tokens per Sec: 12825.581050437559
Epoch Step: 105 / 138 Loss: 67.82626342773438 Tokens per Sec: 12624.544798585464
Epoch Step: 110 / 138 Loss: 113.95697021484375 Tokens per Sec: 12907.95151118837
Epoch Step: 115 / 138 Loss: 107.24791717529297 Tokens per Sec: 12068.88414674289
Epoch Step: 120 / 138 Loss: 111.86036682128906 Tokens per Sec: 12637.100523569037
Epoch Step: 125 / 138 Loss: 91.29280853271484 Tokens per Sec: 12761.33130478833
Epoch Step: 130 / 138 Loss: 104.6751708984375 Tokens per Sec: 12786.729512594307
Epoch Step: 135 / 138 Loss: 72.45767211914062 Tokens per Sec: 13218.556355851317
Epoch ended with duration 0:00:48.820918
Train perplexity: 3.999799168800477
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = new VAR_4 = new java.util.ArrayList < > ( for ( for ( ) ) ) { : VAR_4 . VAR_4 . METHOD_3 ( ) ; } return return TYPE_5 . TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_1 , 0 , VAR_2 , VAR_2 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean , boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { rule rule ( VAR_1 , VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( ) ; } STRING_1 , STRING_1 , STRING_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { VAR_2 ) { != null ) { for ( for ( node ) { VAR_2 = java.lang.String VAR_3 = VAR_3 = ( + ( + ( + ( + ( ) ) ) , mContext , VAR_4 , node , mContext , METHOD_3 ( ) , VAR_3 , VAR_3 ) ; }[0m
Epoch ended with duration 0:00:03.887647
Validation perplexity: 3.646147302968471
Model saved best_on_validation!
Epoch 14 / 1000
Epoch Step: 5 / 138 Loss: 78.37687683105469 Tokens per Sec: 14187.134408398088
Epoch Step: 10 / 138 Loss: 83.57732391357422 Tokens per Sec: 13528.765654491477
Epoch Step: 15 / 138 Loss: 83.56587982177734 Tokens per Sec: 13609.770779905628
Epoch Step: 20 / 138 Loss: 227.32955932617188 Tokens per Sec: 13490.80326101574
Epoch Step: 25 / 138 Loss: 116.42704010009766 Tokens per Sec: 13515.186955981144
Epoch Step: 30 / 138 Loss: 81.35171508789062 Tokens per Sec: 13234.407378955433
Epoch Step: 35 / 138 Loss: 209.55181884765625 Tokens per Sec: 12739.990414752292
Epoch Step: 40 / 138 Loss: 77.63684844970703 Tokens per Sec: 13533.269412436448
Epoch Step: 45 / 138 Loss: 109.05530548095703 Tokens per Sec: 13008.469017789253
Epoch Step: 50 / 138 Loss: 80.74684143066406 Tokens per Sec: 12647.109467955303
Epoch Step: 55 / 138 Loss: 112.07953643798828 Tokens per Sec: 12540.508460786734
Epoch Step: 60 / 138 Loss: 156.5675811767578 Tokens per Sec: 12909.038219435726
Epoch Step: 65 / 138 Loss: 78.40943145751953 Tokens per Sec: 13383.854164923767
Epoch Step: 70 / 138 Loss: 88.33451080322266 Tokens per Sec: 13754.91801659602
Epoch Step: 75 / 138 Loss: 109.76728820800781 Tokens per Sec: 12826.828853404335
Epoch Step: 80 / 138 Loss: 75.07481384277344 Tokens per Sec: 12805.049598702491
Epoch Step: 85 / 138 Loss: 108.50688934326172 Tokens per Sec: 13737.42551967591
Epoch Step: 90 / 138 Loss: 84.7272720336914 Tokens per Sec: 12333.886771163554
Epoch Step: 95 / 138 Loss: 138.13479614257812 Tokens per Sec: 12980.474721300463
Epoch Step: 100 / 138 Loss: 113.12850952148438 Tokens per Sec: 14057.926862155913
Epoch Step: 105 / 138 Loss: 98.21075439453125 Tokens per Sec: 12321.723606089525
Epoch Step: 110 / 138 Loss: 90.0994873046875 Tokens per Sec: 13166.57283164127
Epoch Step: 115 / 138 Loss: 83.22915649414062 Tokens per Sec: 12601.462699068785
Epoch Step: 120 / 138 Loss: 92.7279281616211 Tokens per Sec: 12824.55548533349
Epoch Step: 125 / 138 Loss: 77.88386535644531 Tokens per Sec: 12746.71145929365
Epoch Step: 130 / 138 Loss: 215.3701934814453 Tokens per Sec: 12750.877103504698
Epoch Step: 135 / 138 Loss: 77.340087890625 Tokens per Sec: 12904.665394187847
Epoch ended with duration 0:00:48.811996
Train perplexity: 3.796203578693178
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < TYPE_1 ( > ( for ( for ( ) ) ) { : VAR_4 . VAR_4 . METHOD_3 ( ) ; } return TYPE_5 . TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_1 , 0 , 0 , VAR_2 , VAR_2 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean , boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { rule ( rule , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception ( ) { STRING_1 , STRING_1 . METHOD_6 ( ) . e.toString ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 = java.lang.String VAR_3 = VAR_3 = ( + ( + ( + ( + ( ) ) ) , VAR_4 , VAR_4 , node , mContext ( ) , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.856484
Validation perplexity: 3.1888652670585222
Model saved best_on_validation!
Epoch 15 / 1000
Epoch Step: 5 / 138 Loss: 58.492733001708984 Tokens per Sec: 13029.06974054076
Epoch Step: 10 / 138 Loss: 73.49313354492188 Tokens per Sec: 12954.352648733971
Epoch Step: 15 / 138 Loss: 55.457611083984375 Tokens per Sec: 12960.120196159342
Epoch Step: 20 / 138 Loss: 90.64756774902344 Tokens per Sec: 13475.034365433468
Epoch Step: 25 / 138 Loss: 58.1793212890625 Tokens per Sec: 13618.400482005449
Epoch Step: 30 / 138 Loss: 113.42259979248047 Tokens per Sec: 13524.813331268442
Epoch Step: 35 / 138 Loss: 65.58235931396484 Tokens per Sec: 12630.983010331856
Epoch Step: 40 / 138 Loss: 87.16028594970703 Tokens per Sec: 12738.424845370599
Epoch Step: 45 / 138 Loss: 82.04808044433594 Tokens per Sec: 13007.100028974468
Epoch Step: 50 / 138 Loss: 72.68893432617188 Tokens per Sec: 13388.024534718012
Epoch Step: 55 / 138 Loss: 74.22999572753906 Tokens per Sec: 13004.54298188428
Epoch Step: 60 / 138 Loss: 68.4823226928711 Tokens per Sec: 13142.144560046496
Epoch Step: 65 / 138 Loss: 65.60413360595703 Tokens per Sec: 12924.637732142724
Epoch Step: 70 / 138 Loss: 115.37310791015625 Tokens per Sec: 13775.392018310735
Epoch Step: 75 / 138 Loss: 58.62916564941406 Tokens per Sec: 13710.98399412222
Epoch Step: 80 / 138 Loss: 78.33684539794922 Tokens per Sec: 13212.398219333687
Epoch Step: 85 / 138 Loss: 107.60004425048828 Tokens per Sec: 13138.080354046453
Epoch Step: 90 / 138 Loss: 60.199405670166016 Tokens per Sec: 13369.362801038737
Epoch Step: 95 / 138 Loss: 73.47014617919922 Tokens per Sec: 13441.41281475743
Epoch Step: 100 / 138 Loss: 91.10055541992188 Tokens per Sec: 13541.661265598632
Epoch Step: 105 / 138 Loss: 51.803855895996094 Tokens per Sec: 13064.980717171455
Epoch Step: 110 / 138 Loss: 88.76783752441406 Tokens per Sec: 12452.309441803063
Epoch Step: 115 / 138 Loss: 169.01519775390625 Tokens per Sec: 12893.991050108398
Epoch Step: 120 / 138 Loss: 107.78007507324219 Tokens per Sec: 12882.542588615046
Epoch Step: 125 / 138 Loss: 79.58370971679688 Tokens per Sec: 12965.004254734371
Epoch Step: 130 / 138 Loss: 104.67985534667969 Tokens per Sec: 12661.977319689442
Epoch Step: 135 / 138 Loss: 99.58976745605469 Tokens per Sec: 12055.250984748202
Epoch ended with duration 0:00:48.776364
Train perplexity: 3.5639651216126826
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 = VAR_4 = new java.util.ArrayList < TYPE_1 ( ) ; for ( for ( : : : : VAR_4 ) ) { METHOD_3 ( value ) ; } return TYPE_5 . TYPE_5 . TYPE_5 , VAR_5 , STRING_1 , 0 , 0 , VAR_2 , VAR_2 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) { != null ) { try { rule rule ( METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ) ; } catch ( java.lang.Exception ( ) { STRING_1 , STRING_1 . rule ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { ) { for ( for ( node ) { VAR_2 = VAR_3 = VAR_3 = ( ( + ( + ( + ( + ( ) ) , METHOD_2 ( VAR_4 , VAR_4 , node , mContext , node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.950889
Validation perplexity: 4.087211911420378
Model saved checkpoint!
Epoch 16 / 1000
Epoch Step: 5 / 138 Loss: 85.96133422851562 Tokens per Sec: 12521.516588331331
Epoch Step: 10 / 138 Loss: 67.14695739746094 Tokens per Sec: 13796.149474806656
Epoch Step: 15 / 138 Loss: 76.07337188720703 Tokens per Sec: 13371.775200319116
Epoch Step: 20 / 138 Loss: 105.6011734008789 Tokens per Sec: 13660.787503873536
Epoch Step: 25 / 138 Loss: 62.27164840698242 Tokens per Sec: 13174.242859819737
Epoch Step: 30 / 138 Loss: 109.14109802246094 Tokens per Sec: 13511.589165296036
Epoch Step: 35 / 138 Loss: 116.44255065917969 Tokens per Sec: 13039.020356062456
Epoch Step: 40 / 138 Loss: 111.22186279296875 Tokens per Sec: 13338.464357658739
Epoch Step: 45 / 138 Loss: 114.4085693359375 Tokens per Sec: 13112.392920888933
Epoch Step: 50 / 138 Loss: 113.42193603515625 Tokens per Sec: 13580.00242912419
Epoch Step: 55 / 138 Loss: 120.05697631835938 Tokens per Sec: 13031.591638567637
Epoch Step: 60 / 138 Loss: 81.61595153808594 Tokens per Sec: 13272.193082396108
Epoch Step: 65 / 138 Loss: 135.2858428955078 Tokens per Sec: 13093.533444742488
Epoch Step: 70 / 138 Loss: 89.60166931152344 Tokens per Sec: 12919.582667497272
Epoch Step: 75 / 138 Loss: 79.92292022705078 Tokens per Sec: 12878.31475487473
Epoch Step: 80 / 138 Loss: 119.64480590820312 Tokens per Sec: 13084.014280089832
Epoch Step: 85 / 138 Loss: 70.71520233154297 Tokens per Sec: 13299.624705214792
Epoch Step: 90 / 138 Loss: 164.83714294433594 Tokens per Sec: 13376.304688835618
Epoch Step: 95 / 138 Loss: 56.45094299316406 Tokens per Sec: 12714.493006507468
Epoch Step: 100 / 138 Loss: 192.8765869140625 Tokens per Sec: 12905.236730754152
Epoch Step: 105 / 138 Loss: 112.55915069580078 Tokens per Sec: 11711.077943046581
Epoch Step: 110 / 138 Loss: 89.47221374511719 Tokens per Sec: 12874.943376796915
Epoch Step: 115 / 138 Loss: 54.843170166015625 Tokens per Sec: 12676.129333500865
Epoch Step: 120 / 138 Loss: 58.7401123046875 Tokens per Sec: 12625.844282224007
Epoch Step: 125 / 138 Loss: 74.38790130615234 Tokens per Sec: 13040.669773988513
Epoch Step: 130 / 138 Loss: 75.2286605834961 Tokens per Sec: 12697.911250529456
Epoch Step: 135 / 138 Loss: 99.20011901855469 Tokens per Sec: 12657.925503240991
Epoch ended with duration 0:00:48.974170
Train perplexity: 3.6546928188206924
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( > ( for ( for ( : : : : values ) ) ; METHOD_3 ( value ) ; } return TYPE_5 . TYPE_5 . TYPE_5 . VAR_5 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { rule rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception ) { STRING_1 , STRING_1 . rule ( ) . METHOD_7 ( ) . e.toString ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 ) { VAR_3 = STRING_1 ; ( ( + ( + + + + ( STRING_4 ) , VAR_4 , VAR_4 , VAR_4 , node , METHOD_3 ( ) , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.983873
Validation perplexity: 3.705150829948195
Epoch 17 / 1000
Epoch Step: 5 / 138 Loss: 172.5891571044922 Tokens per Sec: 13145.26106382808
Epoch Step: 10 / 138 Loss: 90.98137664794922 Tokens per Sec: 13287.377729326725
Epoch Step: 15 / 138 Loss: 107.43999481201172 Tokens per Sec: 13462.762282567455
Epoch Step: 20 / 138 Loss: 76.78478240966797 Tokens per Sec: 13393.101432617508
Epoch Step: 25 / 138 Loss: 59.126991271972656 Tokens per Sec: 12936.880897873114
Epoch Step: 30 / 138 Loss: 60.02606201171875 Tokens per Sec: 13003.465884627067
Epoch Step: 35 / 138 Loss: 66.27362823486328 Tokens per Sec: 12908.082712479862
Epoch Step: 40 / 138 Loss: 105.83370971679688 Tokens per Sec: 13647.612413103496
Epoch Step: 45 / 138 Loss: 111.66357421875 Tokens per Sec: 13177.789631519792
Epoch Step: 50 / 138 Loss: 63.45796203613281 Tokens per Sec: 12627.61241443567
Epoch Step: 55 / 138 Loss: 63.111366271972656 Tokens per Sec: 12500.122240389817
Epoch Step: 60 / 138 Loss: 69.80047607421875 Tokens per Sec: 13599.99912511993
Epoch Step: 65 / 138 Loss: 73.09194946289062 Tokens per Sec: 12879.626141658307
Epoch Step: 70 / 138 Loss: 96.52657318115234 Tokens per Sec: 12783.333320614789
Epoch Step: 75 / 138 Loss: 172.11322021484375 Tokens per Sec: 13097.014752031453
Epoch Step: 80 / 138 Loss: 73.64103698730469 Tokens per Sec: 13879.96779507649
Epoch Step: 85 / 138 Loss: 68.69649505615234 Tokens per Sec: 14086.110778122546
Epoch Step: 90 / 138 Loss: 95.24091339111328 Tokens per Sec: 13821.282040762346
Epoch Step: 95 / 138 Loss: 62.08726501464844 Tokens per Sec: 13125.022808468084
Epoch Step: 100 / 138 Loss: 101.99202728271484 Tokens per Sec: 13295.055009233807
Epoch Step: 105 / 138 Loss: 60.411136627197266 Tokens per Sec: 12498.591635205185
Epoch Step: 110 / 138 Loss: 86.11384582519531 Tokens per Sec: 13209.215000208105
Epoch Step: 115 / 138 Loss: 93.11548614501953 Tokens per Sec: 12128.689656392868
Epoch Step: 120 / 138 Loss: 68.25550842285156 Tokens per Sec: 13174.202122070825
Epoch Step: 125 / 138 Loss: 74.25333404541016 Tokens per Sec: 12422.67725961983
Epoch Step: 130 / 138 Loss: 144.22607421875 Tokens per Sec: 12115.670259651257
Epoch Step: 135 / 138 Loss: 59.36317825317383 Tokens per Sec: 13056.147385181579
Epoch ended with duration 0:00:48.750040
Train perplexity: 3.4365288091586086
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = VAR_4 = new java.util.ArrayList < > ( for ( ) ) { : : VAR_4 . VAR_4 . METHOD_3 ( value ) ; } return return return TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_1 , STRING_2 , 0 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( catch ( e ) { STRING_1 , STRING_1 . rule ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 ) { VAR_3 = VAR_3 = ( ( + ( + + + ( STRING_4 ) ) , VAR_4 , VAR_4 , node , mContext , METHOD_3 ( node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:04.024696
Validation perplexity: 4.021006123114417
Epoch 18 / 1000
Epoch Step: 5 / 138 Loss: 105.79264068603516 Tokens per Sec: 13232.129864740326
Epoch Step: 10 / 138 Loss: 52.98914337158203 Tokens per Sec: 13740.76640957617
Epoch Step: 15 / 138 Loss: 68.20378875732422 Tokens per Sec: 13904.961056403175
Epoch Step: 20 / 138 Loss: 77.4932632446289 Tokens per Sec: 12926.65346816405
Epoch Step: 25 / 138 Loss: 104.92425537109375 Tokens per Sec: 13128.34816575057
Epoch Step: 30 / 138 Loss: 71.74628448486328 Tokens per Sec: 12306.138721306457
Epoch Step: 35 / 138 Loss: 122.43413543701172 Tokens per Sec: 13800.039211335956
Epoch Step: 40 / 138 Loss: 59.10472106933594 Tokens per Sec: 13255.48932022454
Epoch Step: 45 / 138 Loss: 99.22250366210938 Tokens per Sec: 13492.815946410796
Epoch Step: 50 / 138 Loss: 122.03560638427734 Tokens per Sec: 12777.962606767764
Epoch Step: 55 / 138 Loss: 64.05960845947266 Tokens per Sec: 13446.496120324284
Epoch Step: 60 / 138 Loss: 115.38970184326172 Tokens per Sec: 13245.473665860694
Epoch Step: 65 / 138 Loss: 89.786865234375 Tokens per Sec: 13305.087291359107
Epoch Step: 70 / 138 Loss: 46.040157318115234 Tokens per Sec: 13291.06820282427
Epoch Step: 75 / 138 Loss: 93.36312866210938 Tokens per Sec: 12435.675446449155
Epoch Step: 80 / 138 Loss: 69.45858001708984 Tokens per Sec: 12913.483671815024
Epoch Step: 85 / 138 Loss: 100.35220336914062 Tokens per Sec: 13575.799461702642
Epoch Step: 90 / 138 Loss: 78.54882049560547 Tokens per Sec: 13739.750369023643
Epoch Step: 95 / 138 Loss: 53.652217864990234 Tokens per Sec: 12283.62851496723
Epoch Step: 100 / 138 Loss: 67.69829559326172 Tokens per Sec: 14016.476118016351
Epoch Step: 105 / 138 Loss: 75.30342102050781 Tokens per Sec: 13267.326596745575
Epoch Step: 110 / 138 Loss: 65.12077331542969 Tokens per Sec: 12954.964194392931
Epoch Step: 115 / 138 Loss: 68.44206237792969 Tokens per Sec: 12448.132602656695
Epoch Step: 120 / 138 Loss: 82.12460327148438 Tokens per Sec: 11662.905066077106
Epoch Step: 125 / 138 Loss: 58.84823226928711 Tokens per Sec: 12842.2250095748
Epoch Step: 130 / 138 Loss: 73.65205383300781 Tokens per Sec: 12854.078267789704
Epoch Step: 135 / 138 Loss: 43.980655670166016 Tokens per Sec: 13396.20146036948
Epoch ended with duration 0:00:48.602533
Train perplexity: 3.349968084053227
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( > ( ) ) ; for ( : : : : VAR_4 ) ; VAR_4 . METHOD_3 ( value ) ; } return TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule ) { != null ; rule rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( METHOD_5 ( STRING_1 , STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 ) { VAR_3 = VAR_3 = ( ( ( + ( + + + + + STRING_4 ) ) , VAR_4 . VAR_4 , node , mContext , node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.949496
Validation perplexity: 3.423781572386044
Epoch 19 / 1000
Epoch Step: 5 / 138 Loss: 74.4194107055664 Tokens per Sec: 12959.957657481662
Epoch Step: 10 / 138 Loss: 104.45921325683594 Tokens per Sec: 13572.238266742432
Epoch Step: 15 / 138 Loss: 46.045501708984375 Tokens per Sec: 13172.06371245128
Epoch Step: 20 / 138 Loss: 44.348236083984375 Tokens per Sec: 13615.511662142047
Epoch Step: 25 / 138 Loss: 84.85865783691406 Tokens per Sec: 13053.009696170919
Epoch Step: 30 / 138 Loss: 73.89004516601562 Tokens per Sec: 14068.811786551285
Epoch Step: 35 / 138 Loss: 156.34400939941406 Tokens per Sec: 12096.735599861864
Epoch Step: 40 / 138 Loss: 42.16086959838867 Tokens per Sec: 12788.18557273151
Epoch Step: 45 / 138 Loss: 103.25189971923828 Tokens per Sec: 12778.900665865314
Epoch Step: 50 / 138 Loss: 75.05481719970703 Tokens per Sec: 13403.478347743283
Epoch Step: 55 / 138 Loss: 89.39572143554688 Tokens per Sec: 13165.152813974355
Epoch Step: 60 / 138 Loss: 50.17597961425781 Tokens per Sec: 13492.155248278426
Epoch Step: 65 / 138 Loss: 56.1744270324707 Tokens per Sec: 13517.962140568447
Epoch Step: 70 / 138 Loss: 89.0166244506836 Tokens per Sec: 13498.719646254696
Epoch Step: 75 / 138 Loss: 91.9693603515625 Tokens per Sec: 13156.073314491614
Epoch Step: 80 / 138 Loss: 95.59855651855469 Tokens per Sec: 13486.577718198778
Epoch Step: 85 / 138 Loss: 49.025978088378906 Tokens per Sec: 13278.89153544688
Epoch Step: 90 / 138 Loss: 94.39983367919922 Tokens per Sec: 12644.705095355941
Epoch Step: 95 / 138 Loss: 104.18254089355469 Tokens per Sec: 13466.727730252072
Epoch Step: 100 / 138 Loss: 81.72509765625 Tokens per Sec: 13101.785521955375
Epoch Step: 105 / 138 Loss: 89.87187194824219 Tokens per Sec: 13127.786890978774
Epoch Step: 110 / 138 Loss: 97.91082763671875 Tokens per Sec: 12899.987706779108
Epoch Step: 115 / 138 Loss: 55.10536575317383 Tokens per Sec: 12476.372335846205
Epoch Step: 120 / 138 Loss: 55.2264404296875 Tokens per Sec: 13024.481539303135
Epoch Step: 125 / 138 Loss: 76.80412292480469 Tokens per Sec: 12443.651121417966
Epoch Step: 130 / 138 Loss: 93.41825103759766 Tokens per Sec: 12875.923880852284
Epoch Step: 135 / 138 Loss: 57.490570068359375 Tokens per Sec: 11898.104147298493
Epoch ended with duration 0:00:48.795741
Train perplexity: 3.149928219761898
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : values ) { VAR_4 . METHOD_3 ( value ) ; } return TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 ) { VAR_6 = TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule ) { try { rule rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; catch ( catch ( e ) { STRING_1 , STRING_1 . rule ( ) . METHOD_7 ( ) . e.toString ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 ) { VAR_3 = STRING_1 = ( ( + ( + + + + STRING_4 ) ) , METHOD_2 ( VAR_4 , node , mContext , METHOD_3 ( node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.888259
Validation perplexity: 2.9359617802742513
Model saved best_on_validation!
Epoch 20 / 1000
Epoch Step: 5 / 138 Loss: 79.23143005371094 Tokens per Sec: 12721.578972271795
Epoch Step: 10 / 138 Loss: 89.70793914794922 Tokens per Sec: 12854.893491998038
Epoch Step: 15 / 138 Loss: 66.13908386230469 Tokens per Sec: 13619.094678902215
Epoch Step: 20 / 138 Loss: 102.83180236816406 Tokens per Sec: 12696.486416594535
Epoch Step: 25 / 138 Loss: 43.117958068847656 Tokens per Sec: 13441.340179145573
Epoch Step: 30 / 138 Loss: 47.36626052856445 Tokens per Sec: 13714.322354531087
Epoch Step: 35 / 138 Loss: 96.23189544677734 Tokens per Sec: 12883.404074538257
Epoch Step: 40 / 138 Loss: 95.2628402709961 Tokens per Sec: 13636.356139060912
Epoch Step: 45 / 138 Loss: 86.31208801269531 Tokens per Sec: 13613.137757129867
Epoch Step: 50 / 138 Loss: 88.38941955566406 Tokens per Sec: 13489.398707426753
Epoch Step: 55 / 138 Loss: 177.00782775878906 Tokens per Sec: 12110.780089628197
Epoch Step: 60 / 138 Loss: 192.0385284423828 Tokens per Sec: 13177.614946295145
Epoch Step: 65 / 138 Loss: 157.89219665527344 Tokens per Sec: 13336.234068928889
Epoch Step: 70 / 138 Loss: 49.58134460449219 Tokens per Sec: 13322.809709462728
Epoch Step: 75 / 138 Loss: 79.52481842041016 Tokens per Sec: 13254.737169088581
Epoch Step: 80 / 138 Loss: 101.48201751708984 Tokens per Sec: 13430.676887293223
Epoch Step: 85 / 138 Loss: 89.9842758178711 Tokens per Sec: 12859.588252068472
Epoch Step: 90 / 138 Loss: 46.58002853393555 Tokens per Sec: 13225.192421332322
Epoch Step: 95 / 138 Loss: 59.38481140136719 Tokens per Sec: 13743.914645400353
Epoch Step: 100 / 138 Loss: 82.98591613769531 Tokens per Sec: 13130.301055028625
Epoch Step: 105 / 138 Loss: 63.81718063354492 Tokens per Sec: 12866.391356044249
Epoch Step: 110 / 138 Loss: 146.2975311279297 Tokens per Sec: 13088.42416124499
Epoch Step: 115 / 138 Loss: 91.52766418457031 Tokens per Sec: 12989.074592086854
Epoch Step: 120 / 138 Loss: 56.539180755615234 Tokens per Sec: 12926.865434807802
Epoch Step: 125 / 138 Loss: 69.54264831542969 Tokens per Sec: 12701.56608091812
Epoch Step: 130 / 138 Loss: 87.4636001586914 Tokens per Sec: 13235.465207521107
Epoch Step: 135 / 138 Loss: 87.9823226928711 Tokens per Sec: 12047.010524205672
Epoch ended with duration 0:00:48.671444
Train perplexity: 3.0581254437867704
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 . TYPE_5 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 ) { VAR_6 = TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; catch ( catch ( e ) { METHOD_5 ( STRING_1 , STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ) ) { for ( for ( node node ) { VAR_2 ) { VAR_3 = + ( ( STRING_2 ) ) ; mContext ( mContext ) ; METHOD_2 ( VAR_4 , VAR_4 , node . mContext ( node , node , node , null ) ; }[0m
Epoch ended with duration 0:00:03.922381
Validation perplexity: 2.857792167909725
Model saved best_on_validation!
Model saved checkpoint!
Epoch 21 / 1000
Epoch Step: 5 / 138 Loss: 62.058189392089844 Tokens per Sec: 12731.546127859243
Epoch Step: 10 / 138 Loss: 81.2741470336914 Tokens per Sec: 13613.050680603566
Epoch Step: 15 / 138 Loss: 84.66775512695312 Tokens per Sec: 12672.703087655173
Epoch Step: 20 / 138 Loss: 135.1269989013672 Tokens per Sec: 12907.61399158236
Epoch Step: 25 / 138 Loss: 74.15575408935547 Tokens per Sec: 12723.71771632859
Epoch Step: 30 / 138 Loss: 63.375701904296875 Tokens per Sec: 13387.601858082042
Epoch Step: 35 / 138 Loss: 52.53563690185547 Tokens per Sec: 13950.478249729931
Epoch Step: 40 / 138 Loss: 56.496612548828125 Tokens per Sec: 13265.113931857815
Epoch Step: 45 / 138 Loss: 57.57583236694336 Tokens per Sec: 13261.950756466047
Epoch Step: 50 / 138 Loss: 90.22620391845703 Tokens per Sec: 13346.681301413122
Epoch Step: 55 / 138 Loss: 71.68803405761719 Tokens per Sec: 13619.817860493127
Epoch Step: 60 / 138 Loss: 77.62349700927734 Tokens per Sec: 13893.03261710218
Epoch Step: 65 / 138 Loss: 90.98523712158203 Tokens per Sec: 12185.932559817511
Epoch Step: 70 / 138 Loss: 96.5613784790039 Tokens per Sec: 13188.933455497941
Epoch Step: 75 / 138 Loss: 86.77249908447266 Tokens per Sec: 12884.968710847526
Epoch Step: 80 / 138 Loss: 62.41710662841797 Tokens per Sec: 13206.267826546056
Epoch Step: 85 / 138 Loss: 45.72939682006836 Tokens per Sec: 13507.762143573884
Epoch Step: 90 / 138 Loss: 51.30124282836914 Tokens per Sec: 13664.93181426694
Epoch Step: 95 / 138 Loss: 43.42576599121094 Tokens per Sec: 13323.54609676944
Epoch Step: 100 / 138 Loss: 81.22649383544922 Tokens per Sec: 13272.113994557361
Epoch Step: 105 / 138 Loss: 85.6540756225586 Tokens per Sec: 11167.987707849874
Epoch Step: 110 / 138 Loss: 69.0716552734375 Tokens per Sec: 12535.644574550928
Epoch Step: 115 / 138 Loss: 58.204837799072266 Tokens per Sec: 12928.682598450967
Epoch Step: 120 / 138 Loss: 90.4914779663086 Tokens per Sec: 12669.054876771996
Epoch Step: 125 / 138 Loss: 74.23365783691406 Tokens per Sec: 13322.988700451366
Epoch Step: 130 / 138 Loss: 52.576168060302734 Tokens per Sec: 12998.617796054592
Epoch Step: 135 / 138 Loss: 53.19099807739258 Tokens per Sec: 12702.246025652361
Epoch ended with duration 0:00:48.796875
Train perplexity: 2.9560828960199648
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : : values ) ) { VAR_4 . METHOD_3 ( value ) ; return new TYPE_1 . TYPE_5 ( VAR_5 , VAR_5 , STRING_1 , STRING_2 , 0 , VAR_2 , METHOD_5 ( METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( if ( != null ) { rule rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( METHOD_5 ( e ) , STRING_1 . rule ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 = ( ( STRING_2 ) ) ; + mContext . mContext ( VAR_4 , VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , null ) ) ; }[0m
Epoch ended with duration 0:00:03.963004
Validation perplexity: 3.381430686204219
Epoch 22 / 1000
Epoch Step: 5 / 138 Loss: 69.87935638427734 Tokens per Sec: 13441.543420570504
Epoch Step: 10 / 138 Loss: 68.97288513183594 Tokens per Sec: 12275.070239807874
Epoch Step: 15 / 138 Loss: 114.87328338623047 Tokens per Sec: 13275.07685212478
Epoch Step: 20 / 138 Loss: 90.6309585571289 Tokens per Sec: 13219.123519719993
Epoch Step: 25 / 138 Loss: 69.14987182617188 Tokens per Sec: 13422.170833051496
Epoch Step: 30 / 138 Loss: 88.18729400634766 Tokens per Sec: 13590.893519235084
Epoch Step: 35 / 138 Loss: 84.52973937988281 Tokens per Sec: 13151.20202468607
Epoch Step: 40 / 138 Loss: 45.800872802734375 Tokens per Sec: 13651.944830835439
Epoch Step: 45 / 138 Loss: 50.85828399658203 Tokens per Sec: 13447.455658587975
Epoch Step: 50 / 138 Loss: 53.215999603271484 Tokens per Sec: 13616.665234981436
Epoch Step: 55 / 138 Loss: 85.732421875 Tokens per Sec: 13269.688312316868
Epoch Step: 60 / 138 Loss: 64.19792938232422 Tokens per Sec: 13198.185992885174
Epoch Step: 65 / 138 Loss: 64.76676177978516 Tokens per Sec: 13345.750382674249
Epoch Step: 70 / 138 Loss: 93.07545471191406 Tokens per Sec: 12923.314351080468
Epoch Step: 75 / 138 Loss: 90.84862518310547 Tokens per Sec: 13197.095231392948
Epoch Step: 80 / 138 Loss: 45.806968688964844 Tokens per Sec: 12673.209437155178
Epoch Step: 85 / 138 Loss: 54.152225494384766 Tokens per Sec: 13085.693695563352
Epoch Step: 90 / 138 Loss: 69.6688461303711 Tokens per Sec: 14075.361215216546
Epoch Step: 95 / 138 Loss: 83.52597045898438 Tokens per Sec: 13210.795150526827
Epoch Step: 100 / 138 Loss: 79.06732940673828 Tokens per Sec: 13350.463473481152
Epoch Step: 105 / 138 Loss: 173.68646240234375 Tokens per Sec: 11551.326008075213
Epoch Step: 110 / 138 Loss: 201.7317657470703 Tokens per Sec: 12570.814612309025
Epoch Step: 115 / 138 Loss: 45.135406494140625 Tokens per Sec: 12538.49284014886
Epoch Step: 120 / 138 Loss: 145.38479614257812 Tokens per Sec: 12461.69846077312
Epoch Step: 125 / 138 Loss: 72.54115295410156 Tokens per Sec: 13093.125043809454
Epoch Step: 130 / 138 Loss: 81.35432434082031 Tokens per Sec: 12958.85818664795
Epoch Step: 135 / 138 Loss: 60.529205322265625 Tokens per Sec: 13012.165991280846
Epoch ended with duration 0:00:48.727837
Train perplexity: 2.880421866660323
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : values ) { VAR_4 . METHOD_3 ( value ) ; } return return new TYPE_1 . TYPE_5 ( VAR_5 , VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 , METHOD_5 ( VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 ) { TYPE_5 TYPE_5 TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule rule METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , STRING_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( ( + + + + + STRING_4 ) ) , METHOD_2 ( VAR_4 , node , mContext , METHOD_3 ( node , node , VAR_3 , null ) ) ; }[0m
Epoch ended with duration 0:00:03.916656
Validation perplexity: 2.803459222465286
Model saved best_on_validation!
Epoch 23 / 1000
Epoch Step: 5 / 138 Loss: 65.67118835449219 Tokens per Sec: 13108.52431176297
Epoch Step: 10 / 138 Loss: 58.341861724853516 Tokens per Sec: 13277.913770258097
Epoch Step: 15 / 138 Loss: 43.9922981262207 Tokens per Sec: 14081.024425720461
Epoch Step: 20 / 138 Loss: 67.33993530273438 Tokens per Sec: 13115.345193518564
Epoch Step: 25 / 138 Loss: 70.60118103027344 Tokens per Sec: 13462.631999505655
Epoch Step: 30 / 138 Loss: 82.31942749023438 Tokens per Sec: 12708.620338720952
Epoch Step: 35 / 138 Loss: 53.2254753112793 Tokens per Sec: 13083.936410007847
Epoch Step: 40 / 138 Loss: 36.289772033691406 Tokens per Sec: 13280.449423344671
Epoch Step: 45 / 138 Loss: 167.5850067138672 Tokens per Sec: 12987.472536800127
Epoch Step: 50 / 138 Loss: 61.574241638183594 Tokens per Sec: 13608.381991777946
Epoch Step: 55 / 138 Loss: 46.65363311767578 Tokens per Sec: 12699.316975131444
Epoch Step: 60 / 138 Loss: 54.2634162902832 Tokens per Sec: 13104.202343930674
Epoch Step: 65 / 138 Loss: 84.43485260009766 Tokens per Sec: 13826.886319414243
Epoch Step: 70 / 138 Loss: 71.44964599609375 Tokens per Sec: 13487.75045797856
Epoch Step: 75 / 138 Loss: 79.17921447753906 Tokens per Sec: 13291.686470415532
Epoch Step: 80 / 138 Loss: 91.9457015991211 Tokens per Sec: 12737.584683305126
Epoch Step: 85 / 138 Loss: 51.04806900024414 Tokens per Sec: 12207.70365516515
Epoch Step: 90 / 138 Loss: 60.806297302246094 Tokens per Sec: 13262.99255600102
Epoch Step: 95 / 138 Loss: 84.66056823730469 Tokens per Sec: 12952.98312409664
Epoch Step: 100 / 138 Loss: 69.3260498046875 Tokens per Sec: 13602.437289184487
Epoch Step: 105 / 138 Loss: 84.97308349609375 Tokens per Sec: 12824.932341220203
Epoch Step: 110 / 138 Loss: 71.2320785522461 Tokens per Sec: 13031.303438743917
Epoch Step: 115 / 138 Loss: 53.0037841796875 Tokens per Sec: 12844.975495686647
Epoch Step: 120 / 138 Loss: 79.00837707519531 Tokens per Sec: 11661.28811570835
Epoch Step: 125 / 138 Loss: 52.509300231933594 Tokens per Sec: 12616.516994615446
Epoch Step: 130 / 138 Loss: 62.825565338134766 Tokens per Sec: 12506.212478938576
Epoch Step: 135 / 138 Loss: 50.942596435546875 Tokens per Sec: 13127.487474748776
Epoch ended with duration 0:00:48.924412
Train perplexity: 3.0469546423722367
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 . TYPE_5 ( VAR_5 , VAR_5 , STRING_1 , STRING_2 , 0 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 ) { TYPE_5 TYPE_5 = rule = METHOD_2 ( METHOD_3 ( ) ) ; if ( rule != null ) { try { rule rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) ) ; mContext . STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node . METHOD_3 ( node , node , null ) ; }[0m
Epoch ended with duration 0:00:03.884359
Validation perplexity: 2.5959748898279322
Model saved best_on_validation!
Epoch 24 / 1000
Epoch Step: 5 / 138 Loss: 90.32781982421875 Tokens per Sec: 12777.653152898692
Epoch Step: 10 / 138 Loss: 52.72492218017578 Tokens per Sec: 13997.177946377235
Epoch Step: 15 / 138 Loss: 60.879032135009766 Tokens per Sec: 13231.060905939414
Epoch Step: 20 / 138 Loss: 68.64219665527344 Tokens per Sec: 12674.538643792539
Epoch Step: 25 / 138 Loss: 211.43389892578125 Tokens per Sec: 12739.345261578648
Epoch Step: 30 / 138 Loss: 62.159793853759766 Tokens per Sec: 13174.982162518118
Epoch Step: 35 / 138 Loss: 172.18502807617188 Tokens per Sec: 13615.873034262575
Epoch Step: 40 / 138 Loss: 195.71951293945312 Tokens per Sec: 13212.641645762234
Epoch Step: 45 / 138 Loss: 56.865291595458984 Tokens per Sec: 13033.992623739508
Epoch Step: 50 / 138 Loss: 55.337120056152344 Tokens per Sec: 12851.192159564538
Epoch Step: 55 / 138 Loss: 85.26712036132812 Tokens per Sec: 13154.63014119386
Epoch Step: 60 / 138 Loss: 72.13322448730469 Tokens per Sec: 13427.89354233611
Epoch Step: 65 / 138 Loss: 86.58085632324219 Tokens per Sec: 13961.450437532789
Epoch Step: 70 / 138 Loss: 52.59113693237305 Tokens per Sec: 12616.359515139271
Epoch Step: 75 / 138 Loss: 86.33618927001953 Tokens per Sec: 12723.127306861998
Epoch Step: 80 / 138 Loss: 80.60187530517578 Tokens per Sec: 13791.392676482565
Epoch Step: 85 / 138 Loss: 53.843017578125 Tokens per Sec: 14116.507769827092
Epoch Step: 90 / 138 Loss: 71.80970001220703 Tokens per Sec: 13507.445622759404
Epoch Step: 95 / 138 Loss: 93.22698211669922 Tokens per Sec: 12270.86444190351
Epoch Step: 100 / 138 Loss: 34.09031677246094 Tokens per Sec: 12562.393652195437
Epoch Step: 105 / 138 Loss: 48.15504837036133 Tokens per Sec: 12793.428765386234
Epoch Step: 110 / 138 Loss: 48.29819869995117 Tokens per Sec: 13105.844273158626
Epoch Step: 115 / 138 Loss: 86.51042175292969 Tokens per Sec: 11615.428677065003
Epoch Step: 120 / 138 Loss: 83.33847045898438 Tokens per Sec: 13118.21667453517
Epoch Step: 125 / 138 Loss: 72.6317138671875 Tokens per Sec: 13118.027952485307
Epoch Step: 130 / 138 Loss: 51.371036529541016 Tokens per Sec: 12773.015012265114
Epoch Step: 135 / 138 Loss: 65.0461654663086 Tokens per Sec: 13034.705566628098
Epoch ended with duration 0:00:48.782313
Train perplexity: 2.876130039420851
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : : values ) { VAR_4 . METHOD_3 ( value ) ; return return new TYPE_1 ( TYPE_5 . VAR_5 , VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 , METHOD_5 ( METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = ( ( STRING_2 ) ) ; ( mContext ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ) ; } }[0m
Epoch ended with duration 0:00:03.943127
Validation perplexity: 2.8301705790437617
Epoch 25 / 1000
Epoch Step: 5 / 138 Loss: 61.51750946044922 Tokens per Sec: 13430.170614767612
Epoch Step: 10 / 138 Loss: 73.88700103759766 Tokens per Sec: 12899.231120945833
Epoch Step: 15 / 138 Loss: 149.84420776367188 Tokens per Sec: 13612.814297447503
Epoch Step: 20 / 138 Loss: 66.06001281738281 Tokens per Sec: 13161.771388637806
Epoch Step: 25 / 138 Loss: 60.77434158325195 Tokens per Sec: 13270.263265613126
Epoch Step: 30 / 138 Loss: 44.20065689086914 Tokens per Sec: 13366.298810968283
Epoch Step: 35 / 138 Loss: 35.99477767944336 Tokens per Sec: 13402.890236563988
Epoch Step: 40 / 138 Loss: 74.07473754882812 Tokens per Sec: 13573.283434740528
Epoch Step: 45 / 138 Loss: 84.45442199707031 Tokens per Sec: 12804.812528538201
Epoch Step: 50 / 138 Loss: 52.24201202392578 Tokens per Sec: 12845.794424356742
Epoch Step: 55 / 138 Loss: 75.48008728027344 Tokens per Sec: 13191.222420513286
Epoch Step: 60 / 138 Loss: 49.9259033203125 Tokens per Sec: 13243.498023362092
Epoch Step: 65 / 138 Loss: 44.968963623046875 Tokens per Sec: 13476.757972527914
Epoch Step: 70 / 138 Loss: 38.10800552368164 Tokens per Sec: 13197.184820414512
Epoch Step: 75 / 138 Loss: 54.63936233520508 Tokens per Sec: 13139.450450976334
Epoch Step: 80 / 138 Loss: 80.3526382446289 Tokens per Sec: 13183.49041860253
Epoch Step: 85 / 138 Loss: 76.4822998046875 Tokens per Sec: 13070.043554660962
Epoch Step: 90 / 138 Loss: 57.64398956298828 Tokens per Sec: 13081.035977066793
Epoch Step: 95 / 138 Loss: 41.479217529296875 Tokens per Sec: 13365.53743251615
Epoch Step: 100 / 138 Loss: 63.67122268676758 Tokens per Sec: 13687.28726574512
Epoch Step: 105 / 138 Loss: 54.788509368896484 Tokens per Sec: 13130.575843530007
Epoch Step: 110 / 138 Loss: 51.53230667114258 Tokens per Sec: 12914.449640700464
Epoch Step: 115 / 138 Loss: 48.95294952392578 Tokens per Sec: 12123.159631138598
Epoch Step: 120 / 138 Loss: 77.02749633789062 Tokens per Sec: 12890.345550023745
Epoch Step: 125 / 138 Loss: 67.93766784667969 Tokens per Sec: 13410.443094965558
Epoch Step: 130 / 138 Loss: 59.03646469116211 Tokens per Sec: 12323.236348428356
Epoch Step: 135 / 138 Loss: 39.43547821044922 Tokens per Sec: 12940.15768004328
Epoch ended with duration 0:00:48.560607
Train perplexity: 2.5538355552947944
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( value ) ) { VAR_4 . VAR_4 . METHOD_3 ( value ) ; } return return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_2 , 0 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) ) ; mContext . STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node . mContext ( node , node , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.934999
Validation perplexity: 2.844636924160207
Model saved checkpoint!
Epoch 26 / 1000
Epoch Step: 5 / 138 Loss: 62.989349365234375 Tokens per Sec: 13155.734611195818
Epoch Step: 10 / 138 Loss: 59.98766326904297 Tokens per Sec: 12787.222354062475
Epoch Step: 15 / 138 Loss: 79.12737274169922 Tokens per Sec: 13811.335514303859
Epoch Step: 20 / 138 Loss: 159.8871612548828 Tokens per Sec: 12686.369018162264
Epoch Step: 25 / 138 Loss: 57.15953063964844 Tokens per Sec: 12815.460712920583
Epoch Step: 30 / 138 Loss: 77.51077270507812 Tokens per Sec: 12971.739237125954
Epoch Step: 35 / 138 Loss: 52.71238708496094 Tokens per Sec: 13768.893506167906
Epoch Step: 40 / 138 Loss: 76.61804962158203 Tokens per Sec: 12863.145034977802
Epoch Step: 45 / 138 Loss: 119.35015106201172 Tokens per Sec: 13598.34987658431
Epoch Step: 50 / 138 Loss: 198.38165283203125 Tokens per Sec: 13536.52825041676
Epoch Step: 55 / 138 Loss: 58.555328369140625 Tokens per Sec: 13434.918273241961
Epoch Step: 60 / 138 Loss: 65.20704650878906 Tokens per Sec: 13138.096531279603
Epoch Step: 65 / 138 Loss: 68.00343322753906 Tokens per Sec: 13343.879101842838
Epoch Step: 70 / 138 Loss: 75.32402801513672 Tokens per Sec: 13589.956743730729
Epoch Step: 75 / 138 Loss: 65.63702392578125 Tokens per Sec: 13868.74502202974
Epoch Step: 80 / 138 Loss: 39.50253677368164 Tokens per Sec: 13146.301376751448
Epoch Step: 85 / 138 Loss: 51.79153060913086 Tokens per Sec: 12811.193482413675
Epoch Step: 90 / 138 Loss: 53.59260177612305 Tokens per Sec: 12741.73166409386
Epoch Step: 95 / 138 Loss: 127.87840270996094 Tokens per Sec: 13636.063724536865
Epoch Step: 100 / 138 Loss: 79.03446197509766 Tokens per Sec: 13301.02487697245
Epoch Step: 105 / 138 Loss: 169.52496337890625 Tokens per Sec: 12302.9864450196
Epoch Step: 110 / 138 Loss: 61.092403411865234 Tokens per Sec: 12739.481031497158
Epoch Step: 115 / 138 Loss: 53.0520133972168 Tokens per Sec: 13275.531516323683
Epoch Step: 120 / 138 Loss: 55.790523529052734 Tokens per Sec: 12556.741073616871
Epoch Step: 125 / 138 Loss: 90.7883529663086 Tokens per Sec: 12868.753803261709
Epoch Step: 130 / 138 Loss: 76.56765747070312 Tokens per Sec: 12204.33111957229
Epoch Step: 135 / 138 Loss: 63.905113220214844 Tokens per Sec: 12979.328885082203
Epoch ended with duration 0:00:48.694254
Train perplexity: 2.666240547180261
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : values ) ) { VAR_4 . METHOD_3 ( value ) ; return return new TYPE_1 . TYPE_5 ( METHOD_4 ( VAR_5 , STRING_1 , STRING_2 , 0 , METHOD_5 ( METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , STRING_1 , rule . METHOD_6 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( TYPE_1 TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) ) ; mContext . mContext ( ) ; METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ) ; } }[0m
Epoch ended with duration 0:00:03.895070
Validation perplexity: 2.5752545104837865
Model saved best_on_validation!
Epoch 27 / 1000
Epoch Step: 5 / 138 Loss: 64.25125122070312 Tokens per Sec: 13066.395352594565
Epoch Step: 10 / 138 Loss: 64.75111389160156 Tokens per Sec: 12873.996561132888
Epoch Step: 15 / 138 Loss: 73.12555694580078 Tokens per Sec: 13530.438639741511
Epoch Step: 20 / 138 Loss: 35.869163513183594 Tokens per Sec: 13377.900524945746
Epoch Step: 25 / 138 Loss: 47.53900909423828 Tokens per Sec: 13037.777326404108
Epoch Step: 30 / 138 Loss: 38.35169219970703 Tokens per Sec: 13360.327750329789
Epoch Step: 35 / 138 Loss: 49.67300033569336 Tokens per Sec: 13104.781257967772
Epoch Step: 40 / 138 Loss: 54.32020568847656 Tokens per Sec: 12844.439758991297
Epoch Step: 45 / 138 Loss: 222.2635040283203 Tokens per Sec: 13509.21352465895
Epoch Step: 50 / 138 Loss: 49.970855712890625 Tokens per Sec: 13186.836174600156
Epoch Step: 55 / 138 Loss: 243.01544189453125 Tokens per Sec: 13343.55096107721
Epoch Step: 60 / 138 Loss: 53.11937713623047 Tokens per Sec: 14072.940489758672
Epoch Step: 65 / 138 Loss: 76.12716674804688 Tokens per Sec: 13265.296596757145
Epoch Step: 70 / 138 Loss: 41.193721771240234 Tokens per Sec: 12249.777194549431
Epoch Step: 75 / 138 Loss: 61.76512908935547 Tokens per Sec: 12730.824819394109
Epoch Step: 80 / 138 Loss: 48.101966857910156 Tokens per Sec: 13101.101946505234
Epoch Step: 85 / 138 Loss: 149.4940948486328 Tokens per Sec: 13022.189895116695
Epoch Step: 90 / 138 Loss: 93.74158477783203 Tokens per Sec: 12841.820308098271
Epoch Step: 95 / 138 Loss: 47.865867614746094 Tokens per Sec: 13425.586722586753
Epoch Step: 100 / 138 Loss: 67.2054214477539 Tokens per Sec: 13582.347833928015
Epoch Step: 105 / 138 Loss: 81.2989273071289 Tokens per Sec: 13084.027759457094
Epoch Step: 110 / 138 Loss: 159.26565551757812 Tokens per Sec: 11214.710058521514
Epoch Step: 115 / 138 Loss: 57.38191223144531 Tokens per Sec: 12891.222998714502
Epoch Step: 120 / 138 Loss: 59.53215789794922 Tokens per Sec: 13173.696243534656
Epoch Step: 125 / 138 Loss: 71.3986587524414 Tokens per Sec: 12416.589003903624
Epoch Step: 130 / 138 Loss: 64.09835052490234 Tokens per Sec: 12613.15197833175
Epoch Step: 135 / 138 Loss: 66.87107849121094 Tokens per Sec: 13125.509772124704
Epoch ended with duration 0:00:48.922718
Train perplexity: 2.6730329192956077
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( TYPE_1 TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( ( + + + STRING_3 ) ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , mContext . METHOD_3 ( node , node , VAR_3 , null ) ) ; } }[0m
Epoch ended with duration 0:00:03.947652
Validation perplexity: 2.7476388251729404
Epoch 28 / 1000
Epoch Step: 5 / 138 Loss: 55.289329528808594 Tokens per Sec: 12666.396190018848
Epoch Step: 10 / 138 Loss: 79.43242645263672 Tokens per Sec: 13060.645815042859
Epoch Step: 15 / 138 Loss: 146.76284790039062 Tokens per Sec: 13146.065235020533
Epoch Step: 20 / 138 Loss: 75.72510528564453 Tokens per Sec: 12488.244110007541
Epoch Step: 25 / 138 Loss: 38.968414306640625 Tokens per Sec: 13086.39840992028
Epoch Step: 30 / 138 Loss: 65.34221649169922 Tokens per Sec: 13101.005969775
Epoch Step: 35 / 138 Loss: 66.22896575927734 Tokens per Sec: 13277.043745185965
Epoch Step: 40 / 138 Loss: 78.3373031616211 Tokens per Sec: 13643.886583684747
Epoch Step: 45 / 138 Loss: 78.79341125488281 Tokens per Sec: 11982.452271056829
Epoch Step: 50 / 138 Loss: 64.91305541992188 Tokens per Sec: 13219.506605819493
Epoch Step: 55 / 138 Loss: 51.87511444091797 Tokens per Sec: 13800.5871339212
Epoch Step: 60 / 138 Loss: 43.818031311035156 Tokens per Sec: 13103.030984764866
Epoch Step: 65 / 138 Loss: 81.74502563476562 Tokens per Sec: 13233.027294711892
Epoch Step: 70 / 138 Loss: 38.48292922973633 Tokens per Sec: 13385.126020362992
Epoch Step: 75 / 138 Loss: 67.84705352783203 Tokens per Sec: 13793.501465288527
Epoch Step: 80 / 138 Loss: 92.19095611572266 Tokens per Sec: 13230.724299425823
Epoch Step: 85 / 138 Loss: 44.354183197021484 Tokens per Sec: 13019.537170098498
Epoch Step: 90 / 138 Loss: 135.9141082763672 Tokens per Sec: 12980.084978292207
Epoch Step: 95 / 138 Loss: 210.87164306640625 Tokens per Sec: 13127.9633718367
Epoch Step: 100 / 138 Loss: 73.40425872802734 Tokens per Sec: 13208.167628199377
Epoch Step: 105 / 138 Loss: 146.9921112060547 Tokens per Sec: 12768.492317057591
Epoch Step: 110 / 138 Loss: 66.71773529052734 Tokens per Sec: 12552.924782978525
Epoch Step: 115 / 138 Loss: 54.829654693603516 Tokens per Sec: 12828.081740481395
Epoch Step: 120 / 138 Loss: 71.38186645507812 Tokens per Sec: 13057.315924660308
Epoch Step: 125 / 138 Loss: 36.12682342529297 Tokens per Sec: 11524.987148728816
Epoch Step: 130 / 138 Loss: 50.87228775024414 Tokens per Sec: 13115.595228158225
Epoch Step: 135 / 138 Loss: 41.82553482055664 Tokens per Sec: 12773.607111075811
Epoch ended with duration 0:00:49.017323
Train perplexity: 2.742293128447786
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = java.util.ArrayList < > ( ) ; for ( long long : : values ) { VAR_4 . METHOD_3 ( value ) ; } return return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( TYPE_1 node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) ) ; + mContext ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node . mContext ( node , node , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.924010
Validation perplexity: 2.5570476204534716
Model saved best_on_validation!
Epoch 29 / 1000
Epoch Step: 5 / 138 Loss: 97.71574401855469 Tokens per Sec: 12326.27656156356
Epoch Step: 10 / 138 Loss: 37.985939025878906 Tokens per Sec: 13425.015085388453
Epoch Step: 15 / 138 Loss: 49.424129486083984 Tokens per Sec: 12844.413247301009
Epoch Step: 20 / 138 Loss: 43.51762390136719 Tokens per Sec: 13136.915483296925
Epoch Step: 25 / 138 Loss: 61.283973693847656 Tokens per Sec: 13646.586651139845
Epoch Step: 30 / 138 Loss: 53.393131256103516 Tokens per Sec: 12603.053303016599
Epoch Step: 35 / 138 Loss: 62.12256622314453 Tokens per Sec: 13673.064839933471
Epoch Step: 40 / 138 Loss: 58.73881912231445 Tokens per Sec: 13379.486795683017
Epoch Step: 45 / 138 Loss: 72.9244613647461 Tokens per Sec: 13840.588942765173
Epoch Step: 50 / 138 Loss: 35.00505447387695 Tokens per Sec: 13089.631910049633
Epoch Step: 55 / 138 Loss: 76.55793762207031 Tokens per Sec: 13073.960714292185
Epoch Step: 60 / 138 Loss: 58.75407791137695 Tokens per Sec: 13272.659554172182
Epoch Step: 65 / 138 Loss: 54.72700500488281 Tokens per Sec: 13230.594924442003
Epoch Step: 70 / 138 Loss: 43.50808334350586 Tokens per Sec: 12959.379473446344
Epoch Step: 75 / 138 Loss: 72.55994415283203 Tokens per Sec: 13060.132157607497
Epoch Step: 80 / 138 Loss: 207.9224853515625 Tokens per Sec: 12623.390770965267
Epoch Step: 85 / 138 Loss: 68.03107452392578 Tokens per Sec: 13875.936581869695
Epoch Step: 90 / 138 Loss: 45.4592170715332 Tokens per Sec: 13156.065467741284
Epoch Step: 95 / 138 Loss: 44.10552215576172 Tokens per Sec: 12537.26509190635
Epoch Step: 100 / 138 Loss: 41.42431640625 Tokens per Sec: 12643.004168493897
Epoch Step: 105 / 138 Loss: 61.66969299316406 Tokens per Sec: 11784.99395050082
Epoch Step: 110 / 138 Loss: 54.614356994628906 Tokens per Sec: 12715.970664153774
Epoch Step: 115 / 138 Loss: 52.628257751464844 Tokens per Sec: 12514.132769488
Epoch Step: 120 / 138 Loss: 72.84026336669922 Tokens per Sec: 13069.667126826
Epoch Step: 125 / 138 Loss: 54.82427215576172 Tokens per Sec: 13113.609238082876
Epoch Step: 130 / 138 Loss: 62.484222412109375 Tokens per Sec: 12287.090268464797
Epoch Step: 135 / 138 Loss: 68.67303466796875 Tokens per Sec: 12466.482379793411
Epoch ended with duration 0:00:49.109945
Train perplexity: 2.7363230904718194
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , 0 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( TYPE_1 node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) ) ; mContext . STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , null ) , }[0m
Epoch ended with duration 0:00:03.994374
Validation perplexity: 3.169274897198359
Epoch 30 / 1000
Epoch Step: 5 / 138 Loss: 43.77266311645508 Tokens per Sec: 13066.533182565103
Epoch Step: 10 / 138 Loss: 51.65704345703125 Tokens per Sec: 13190.686715562424
Epoch Step: 15 / 138 Loss: 40.69219970703125 Tokens per Sec: 13353.375745788411
Epoch Step: 20 / 138 Loss: 45.50257873535156 Tokens per Sec: 13514.237273648754
Epoch Step: 25 / 138 Loss: 40.009559631347656 Tokens per Sec: 13786.130770153803
Epoch Step: 30 / 138 Loss: 47.21603012084961 Tokens per Sec: 12750.291903247142
Epoch Step: 35 / 138 Loss: 73.38233184814453 Tokens per Sec: 14016.374882993106
Epoch Step: 40 / 138 Loss: 57.62785720825195 Tokens per Sec: 12645.852203528664
Epoch Step: 45 / 138 Loss: 41.06898498535156 Tokens per Sec: 14005.319715933512
Epoch Step: 50 / 138 Loss: 62.15230178833008 Tokens per Sec: 13364.284422005901
Epoch Step: 55 / 138 Loss: 65.56209564208984 Tokens per Sec: 12899.371284502522
Epoch Step: 60 / 138 Loss: 58.34984588623047 Tokens per Sec: 12960.191831458726
Epoch Step: 65 / 138 Loss: 35.28878402709961 Tokens per Sec: 12508.938468153481
Epoch Step: 70 / 138 Loss: 43.18473815917969 Tokens per Sec: 13494.592022534282
Epoch Step: 75 / 138 Loss: 64.49673461914062 Tokens per Sec: 13275.75361003221
Epoch Step: 80 / 138 Loss: 71.52519989013672 Tokens per Sec: 13747.148440929785
Epoch Step: 85 / 138 Loss: 57.3637580871582 Tokens per Sec: 13717.14052556586
Epoch Step: 90 / 138 Loss: 235.14292907714844 Tokens per Sec: 13262.6065095452
Epoch Step: 95 / 138 Loss: 64.36251831054688 Tokens per Sec: 13065.867233965351
Epoch Step: 100 / 138 Loss: 29.965356826782227 Tokens per Sec: 13874.120385750663
Epoch Step: 105 / 138 Loss: 39.61223602294922 Tokens per Sec: 12320.631142635386
Epoch Step: 110 / 138 Loss: 162.4764404296875 Tokens per Sec: 12476.750376857448
Epoch Step: 115 / 138 Loss: 40.343360900878906 Tokens per Sec: 12678.56525785096
Epoch Step: 120 / 138 Loss: 68.54995727539062 Tokens per Sec: 13121.14883295045
Epoch Step: 125 / 138 Loss: 77.84505462646484 Tokens per Sec: 12656.045876054344
Epoch Step: 130 / 138 Loss: 79.40113830566406 Tokens per Sec: 11695.689995491155
Epoch Step: 135 / 138 Loss: 50.172977447509766 Tokens per Sec: 13074.850918260981
Epoch ended with duration 0:00:48.661499
Train perplexity: 2.431089402780387
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , VAR_4 , VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . VAR_1 . ) ; if ( rule ) { if ( != null ) { try { rule . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) ) . }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 node node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 ) ) ; mContext . STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , null ) , null ) ; } }[0m
Epoch ended with duration 0:00:03.922405
Validation perplexity: 2.8021114567436434
Model saved checkpoint!
Epoch 31 / 1000
Epoch Step: 5 / 138 Loss: 49.895748138427734 Tokens per Sec: 12595.9218310232
Epoch Step: 10 / 138 Loss: 79.35055541992188 Tokens per Sec: 12927.959466571983
Epoch Step: 15 / 138 Loss: 58.671512603759766 Tokens per Sec: 13383.158755899645
Epoch Step: 20 / 138 Loss: 51.353858947753906 Tokens per Sec: 13410.687246692674
Epoch Step: 25 / 138 Loss: 35.307621002197266 Tokens per Sec: 13004.318076045607
Epoch Step: 30 / 138 Loss: 60.098873138427734 Tokens per Sec: 13247.336433145167
Epoch Step: 35 / 138 Loss: 70.03012084960938 Tokens per Sec: 13792.585408568319
Epoch Step: 40 / 138 Loss: 197.16729736328125 Tokens per Sec: 13339.615839578244
Epoch Step: 45 / 138 Loss: 67.70048522949219 Tokens per Sec: 12608.878112806642
Epoch Step: 50 / 138 Loss: 58.756866455078125 Tokens per Sec: 13519.972014591398
Epoch Step: 55 / 138 Loss: 61.81227493286133 Tokens per Sec: 13390.981327410154
Epoch Step: 60 / 138 Loss: 64.73212432861328 Tokens per Sec: 13371.246719464201
Epoch Step: 65 / 138 Loss: 45.24687194824219 Tokens per Sec: 13010.561415189606
Epoch Step: 70 / 138 Loss: 43.16083908081055 Tokens per Sec: 13206.614304424511
Epoch Step: 75 / 138 Loss: 73.13446807861328 Tokens per Sec: 13122.046892551349
Epoch Step: 80 / 138 Loss: 63.99639129638672 Tokens per Sec: 13348.591020307656
Epoch Step: 85 / 138 Loss: 57.075157165527344 Tokens per Sec: 12873.410315790989
Epoch Step: 90 / 138 Loss: 40.4364128112793 Tokens per Sec: 13545.522583636797
Epoch Step: 95 / 138 Loss: 61.08084487915039 Tokens per Sec: 13189.690458366533
Epoch Step: 100 / 138 Loss: 59.8681526184082 Tokens per Sec: 13807.573174300987
Epoch Step: 105 / 138 Loss: 70.60472106933594 Tokens per Sec: 13383.982205518014
Epoch Step: 110 / 138 Loss: 44.033180236816406 Tokens per Sec: 12313.141032855498
Epoch Step: 115 / 138 Loss: 66.7209701538086 Tokens per Sec: 12676.079167384401
Epoch Step: 120 / 138 Loss: 46.626121520996094 Tokens per Sec: 12406.172643414015
Epoch Step: 125 / 138 Loss: 49.95979690551758 Tokens per Sec: 12706.846612869944
Epoch Step: 130 / 138 Loss: 42.541316986083984 Tokens per Sec: 11974.152056595685
Epoch Step: 135 / 138 Loss: 44.974029541015625 Tokens per Sec: 12704.81663509535
Epoch ended with duration 0:00:48.789966
Train perplexity: 2.335127142880168
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) + + + + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 ) ) ; } } }[0m
Epoch ended with duration 0:00:03.886488
Validation perplexity: 2.2559098794103614
Model saved best_on_validation!
Epoch 32 / 1000
Epoch Step: 5 / 138 Loss: 58.96512222290039 Tokens per Sec: 13242.82465513876
Epoch Step: 10 / 138 Loss: 59.600826263427734 Tokens per Sec: 12534.426318254846
Epoch Step: 15 / 138 Loss: 35.60877227783203 Tokens per Sec: 13536.490747105132
Epoch Step: 20 / 138 Loss: 66.21700286865234 Tokens per Sec: 13561.227900160487
Epoch Step: 25 / 138 Loss: 171.97642517089844 Tokens per Sec: 13464.286214937492
Epoch Step: 30 / 138 Loss: 31.3408145904541 Tokens per Sec: 12794.34943214324
Epoch Step: 35 / 138 Loss: 35.25175094604492 Tokens per Sec: 13861.44553095704
Epoch Step: 40 / 138 Loss: 56.07208251953125 Tokens per Sec: 13011.564775020901
Epoch Step: 45 / 138 Loss: 27.616647720336914 Tokens per Sec: 13538.492112672291
Epoch Step: 50 / 138 Loss: 40.79517364501953 Tokens per Sec: 12904.2877610275
Epoch Step: 55 / 138 Loss: 47.84913635253906 Tokens per Sec: 12672.646921424002
Epoch Step: 60 / 138 Loss: 52.878780364990234 Tokens per Sec: 12746.104632524211
Epoch Step: 65 / 138 Loss: 78.72354125976562 Tokens per Sec: 13029.23619532118
Epoch Step: 70 / 138 Loss: 54.378448486328125 Tokens per Sec: 13184.138357570844
Epoch Step: 75 / 138 Loss: 47.485679626464844 Tokens per Sec: 12724.410237713453
Epoch Step: 80 / 138 Loss: 76.2876968383789 Tokens per Sec: 13121.166330845852
Epoch Step: 85 / 138 Loss: 70.45552825927734 Tokens per Sec: 13633.713427435352
Epoch Step: 90 / 138 Loss: 62.00025939941406 Tokens per Sec: 13717.630076288613
Epoch Step: 95 / 138 Loss: 47.706912994384766 Tokens per Sec: 12565.411235773954
Epoch Step: 100 / 138 Loss: 42.481239318847656 Tokens per Sec: 13353.472527445347
Epoch Step: 105 / 138 Loss: 68.3907241821289 Tokens per Sec: 13268.024119202346
Epoch Step: 110 / 138 Loss: 43.13773727416992 Tokens per Sec: 11684.302347897063
Epoch Step: 115 / 138 Loss: 54.356014251708984 Tokens per Sec: 12929.407701466876
Epoch Step: 120 / 138 Loss: 209.76998901367188 Tokens per Sec: 12726.899377215786
Epoch Step: 125 / 138 Loss: 46.39085006713867 Tokens per Sec: 12903.183666573052
Epoch Step: 130 / 138 Loss: 38.486324310302734 Tokens per Sec: 12942.410847651634
Epoch Step: 135 / 138 Loss: 65.71961212158203 Tokens per Sec: 12601.719566384592
Epoch ended with duration 0:00:48.954667
Train perplexity: 2.548564219401313
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( rule , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) + + + + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.868362
Validation perplexity: 2.0240710785941376
Model saved best_on_validation!
Epoch 33 / 1000
Epoch Step: 5 / 138 Loss: 36.93475341796875 Tokens per Sec: 12718.64318575147
Epoch Step: 10 / 138 Loss: 33.783992767333984 Tokens per Sec: 13043.982717841527
Epoch Step: 15 / 138 Loss: 53.52970886230469 Tokens per Sec: 13696.105982063058
Epoch Step: 20 / 138 Loss: 59.04167556762695 Tokens per Sec: 13326.941499460956
Epoch Step: 25 / 138 Loss: 31.44984245300293 Tokens per Sec: 13954.029752011349
Epoch Step: 30 / 138 Loss: 63.94874954223633 Tokens per Sec: 12807.21742505297
Epoch Step: 35 / 138 Loss: 27.945280075073242 Tokens per Sec: 13507.925052705887
Epoch Step: 40 / 138 Loss: 46.042930603027344 Tokens per Sec: 13717.32895315754
Epoch Step: 45 / 138 Loss: 57.373512268066406 Tokens per Sec: 13304.75528191548
Epoch Step: 50 / 138 Loss: 51.161869049072266 Tokens per Sec: 13037.931496802406
Epoch Step: 55 / 138 Loss: 67.3722915649414 Tokens per Sec: 13121.68788915225
Epoch Step: 60 / 138 Loss: 60.74810028076172 Tokens per Sec: 13530.389279574081
Epoch Step: 65 / 138 Loss: 56.922752380371094 Tokens per Sec: 13585.460936304342
Epoch Step: 70 / 138 Loss: 57.082618713378906 Tokens per Sec: 13172.26014759367
Epoch Step: 75 / 138 Loss: 52.7856559753418 Tokens per Sec: 13166.431525952068
Epoch Step: 80 / 138 Loss: 64.47418212890625 Tokens per Sec: 12415.89915392364
Epoch Step: 85 / 138 Loss: 42.42259216308594 Tokens per Sec: 12506.264141268992
Epoch Step: 90 / 138 Loss: 40.761070251464844 Tokens per Sec: 13015.907170726117
Epoch Step: 95 / 138 Loss: 28.487409591674805 Tokens per Sec: 13247.645093462426
Epoch Step: 100 / 138 Loss: 59.75238037109375 Tokens per Sec: 13947.377569565346
Epoch Step: 105 / 138 Loss: 71.19161987304688 Tokens per Sec: 11741.400894993207
Epoch Step: 110 / 138 Loss: 42.22844314575195 Tokens per Sec: 12462.800977834579
Epoch Step: 115 / 138 Loss: 54.28736114501953 Tokens per Sec: 12804.74061261813
Epoch Step: 120 / 138 Loss: 67.49220275878906 Tokens per Sec: 12959.223625916431
Epoch Step: 125 / 138 Loss: 43.419979095458984 Tokens per Sec: 12844.652587713275
Epoch Step: 130 / 138 Loss: 62.3349723815918 Tokens per Sec: 12684.504251006088
Epoch Step: 135 / 138 Loss: 47.640987396240234 Tokens per Sec: 12731.401601866353
Epoch ended with duration 0:00:48.750681
Train perplexity: 2.2808023608906
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , 0 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) + + + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.960207
Validation perplexity: 2.4857298826649643
Epoch 34 / 1000
Epoch Step: 5 / 138 Loss: 30.685461044311523 Tokens per Sec: 13335.114159183036
Epoch Step: 10 / 138 Loss: 35.853759765625 Tokens per Sec: 13087.11991759046
Epoch Step: 15 / 138 Loss: 33.22354507446289 Tokens per Sec: 13398.093909293126
Epoch Step: 20 / 138 Loss: 62.887413024902344 Tokens per Sec: 13606.11736663286
Epoch Step: 25 / 138 Loss: 46.89461135864258 Tokens per Sec: 13758.433881800323
Epoch Step: 30 / 138 Loss: 35.67995071411133 Tokens per Sec: 13127.435429991305
Epoch Step: 35 / 138 Loss: 54.75430679321289 Tokens per Sec: 13541.030562221988
Epoch Step: 40 / 138 Loss: 124.58797454833984 Tokens per Sec: 12686.123635514332
Epoch Step: 45 / 138 Loss: 34.200870513916016 Tokens per Sec: 13216.757556112974
Epoch Step: 50 / 138 Loss: 75.34827423095703 Tokens per Sec: 13471.291706241169
Epoch Step: 55 / 138 Loss: 35.96633529663086 Tokens per Sec: 13379.779794473026
Epoch Step: 60 / 138 Loss: 55.90818786621094 Tokens per Sec: 12563.133047551215
Epoch Step: 65 / 138 Loss: 61.048423767089844 Tokens per Sec: 13538.364802397524
Epoch Step: 70 / 138 Loss: 31.257307052612305 Tokens per Sec: 13491.786458430774
Epoch Step: 75 / 138 Loss: 208.7510528564453 Tokens per Sec: 13176.653260273702
Epoch Step: 80 / 138 Loss: 43.77703094482422 Tokens per Sec: 12637.947041735735
Epoch Step: 85 / 138 Loss: 35.41851043701172 Tokens per Sec: 13094.554595315782
Epoch Step: 90 / 138 Loss: 48.65615463256836 Tokens per Sec: 13592.892647721208
Epoch Step: 95 / 138 Loss: 67.40614318847656 Tokens per Sec: 13197.917419201849
Epoch Step: 100 / 138 Loss: 49.38306427001953 Tokens per Sec: 13128.275652261022
Epoch Step: 105 / 138 Loss: 48.97019958496094 Tokens per Sec: 12414.013956709323
Epoch Step: 110 / 138 Loss: 35.9965934753418 Tokens per Sec: 11984.764971281556
Epoch Step: 115 / 138 Loss: 61.77409362792969 Tokens per Sec: 12748.161446905227
Epoch Step: 120 / 138 Loss: 47.073272705078125 Tokens per Sec: 12483.71568237846
Epoch Step: 125 / 138 Loss: 49.90119171142578 Tokens per Sec: 13085.652825253452
Epoch Step: 130 / 138 Loss: 63.168060302734375 Tokens per Sec: 12382.445114223021
Epoch Step: 135 / 138 Loss: 36.86508560180664 Tokens per Sec: 12412.608389361185
Epoch ended with duration 0:00:48.864632
Train perplexity: 2.367457925307276
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 ) STRING_3 ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 ) , null ) ; } } }[0m
Epoch ended with duration 0:00:03.931362
Validation perplexity: 2.4992499091712723
Epoch 35 / 1000
Epoch Step: 5 / 138 Loss: 61.935665130615234 Tokens per Sec: 13201.482225507434
Epoch Step: 10 / 138 Loss: 58.60679244995117 Tokens per Sec: 13937.520432545607
Epoch Step: 15 / 138 Loss: 210.7606964111328 Tokens per Sec: 13054.234554612705
Epoch Step: 20 / 138 Loss: 157.48104858398438 Tokens per Sec: 13344.689472849945
Epoch Step: 25 / 138 Loss: 138.75302124023438 Tokens per Sec: 13193.191186497472
Epoch Step: 30 / 138 Loss: 49.666805267333984 Tokens per Sec: 13099.381745808183
Epoch Step: 35 / 138 Loss: 29.697399139404297 Tokens per Sec: 13248.465054381422
Epoch Step: 40 / 138 Loss: 67.28717041015625 Tokens per Sec: 13469.942588058508
Epoch Step: 45 / 138 Loss: 52.98169708251953 Tokens per Sec: 13542.02373899266
Epoch Step: 50 / 138 Loss: 68.52883911132812 Tokens per Sec: 12956.828520854153
Epoch Step: 55 / 138 Loss: 189.75506591796875 Tokens per Sec: 12397.782964381944
Epoch Step: 60 / 138 Loss: 28.03064727783203 Tokens per Sec: 12898.507410520007
Epoch Step: 65 / 138 Loss: 48.47178268432617 Tokens per Sec: 12516.477426335152
Epoch Step: 70 / 138 Loss: 53.80561447143555 Tokens per Sec: 13354.523844018682
Epoch Step: 75 / 138 Loss: 63.25231170654297 Tokens per Sec: 12929.703493766005
Epoch Step: 80 / 138 Loss: 66.31352996826172 Tokens per Sec: 12644.365395649416
Epoch Step: 85 / 138 Loss: 127.63005828857422 Tokens per Sec: 12605.49009071653
Epoch Step: 90 / 138 Loss: 69.95127868652344 Tokens per Sec: 12930.774230730232
Epoch Step: 95 / 138 Loss: 39.178619384765625 Tokens per Sec: 13400.230513931547
Epoch Step: 100 / 138 Loss: 39.04695129394531 Tokens per Sec: 13649.292575828136
Epoch Step: 105 / 138 Loss: 249.0537567138672 Tokens per Sec: 12524.511028382089
Epoch Step: 110 / 138 Loss: 45.65304946899414 Tokens per Sec: 12990.935035913137
Epoch Step: 115 / 138 Loss: 67.188720703125 Tokens per Sec: 12017.878415273048
Epoch Step: 120 / 138 Loss: 35.03197479248047 Tokens per Sec: 12890.538999879378
Epoch Step: 125 / 138 Loss: 38.48554229736328 Tokens per Sec: 12765.904394347164
Epoch Step: 130 / 138 Loss: 112.30381774902344 Tokens per Sec: 12535.351288666348
Epoch Step: 135 / 138 Loss: 46.91300964355469 Tokens per Sec: 13286.095090932511
Epoch ended with duration 0:00:49.032485
Train perplexity: 2.547233033840717
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = ( ( STRING_2 ) + + + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.894797
Validation perplexity: 2.1397548993931443
Model saved checkpoint!
Epoch 36 / 1000
Epoch Step: 5 / 138 Loss: 56.535743713378906 Tokens per Sec: 13035.65572275787
Epoch Step: 10 / 138 Loss: 43.85790252685547 Tokens per Sec: 13349.232883932089
Epoch Step: 15 / 138 Loss: 48.64404296875 Tokens per Sec: 13023.832462243703
Epoch Step: 20 / 138 Loss: 51.295204162597656 Tokens per Sec: 12784.863862318314
Epoch Step: 25 / 138 Loss: 39.88486099243164 Tokens per Sec: 12610.231300552903
Epoch Step: 30 / 138 Loss: 46.55964660644531 Tokens per Sec: 13462.900918376869
Epoch Step: 35 / 138 Loss: 40.999271392822266 Tokens per Sec: 13323.617330578018
Epoch Step: 40 / 138 Loss: 187.84445190429688 Tokens per Sec: 13319.161302641074
Epoch Step: 45 / 138 Loss: 55.7832145690918 Tokens per Sec: 13995.289726499956
Epoch Step: 50 / 138 Loss: 49.734214782714844 Tokens per Sec: 13420.333141745064
Epoch Step: 55 / 138 Loss: 33.742332458496094 Tokens per Sec: 13990.621542712603
Epoch Step: 60 / 138 Loss: 230.9291229248047 Tokens per Sec: 12734.184918912508
Epoch Step: 65 / 138 Loss: 32.444366455078125 Tokens per Sec: 13927.274634748801
Epoch Step: 70 / 138 Loss: 51.546993255615234 Tokens per Sec: 13492.61454070104
Epoch Step: 75 / 138 Loss: 163.25120544433594 Tokens per Sec: 12463.939250524058
Epoch Step: 80 / 138 Loss: 51.16653823852539 Tokens per Sec: 13272.064774675951
Epoch Step: 85 / 138 Loss: 52.184364318847656 Tokens per Sec: 13278.107898604005
Epoch Step: 90 / 138 Loss: 62.701290130615234 Tokens per Sec: 13243.108513510058
Epoch Step: 95 / 138 Loss: 49.10623550415039 Tokens per Sec: 13258.907936619069
Epoch Step: 100 / 138 Loss: 27.534717559814453 Tokens per Sec: 13933.643133337442
Epoch Step: 105 / 138 Loss: 30.437782287597656 Tokens per Sec: 13015.008373300123
Epoch Step: 110 / 138 Loss: 42.058536529541016 Tokens per Sec: 12989.246261834844
Epoch Step: 115 / 138 Loss: 35.71156692504883 Tokens per Sec: 12434.338186303314
Epoch Step: 120 / 138 Loss: 49.66972732543945 Tokens per Sec: 12273.388449142254
Epoch Step: 125 / 138 Loss: 65.67535400390625 Tokens per Sec: 13396.793725314505
Epoch Step: 130 / 138 Loss: 58.18612289428711 Tokens per Sec: 13048.081214419193
Epoch Step: 135 / 138 Loss: 63.8331184387207 Tokens per Sec: 11728.867907133646
Epoch ended with duration 0:00:48.556620
Train perplexity: 2.12936514146188
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( rule , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 ) STRING_3 ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 ) ) ; } } }[0m
Epoch ended with duration 0:00:03.975705
Validation perplexity: 2.6976999010000746
Epoch 37 / 1000
Epoch Step: 5 / 138 Loss: 68.00779724121094 Tokens per Sec: 13189.690187769138
Epoch Step: 10 / 138 Loss: 68.10964965820312 Tokens per Sec: 13031.976022285651
Epoch Step: 15 / 138 Loss: 54.774654388427734 Tokens per Sec: 12982.01485111986
Epoch Step: 20 / 138 Loss: 74.17920684814453 Tokens per Sec: 13662.63982147553
Epoch Step: 25 / 138 Loss: 128.7001953125 Tokens per Sec: 13377.206440271853
Epoch Step: 30 / 138 Loss: 60.870052337646484 Tokens per Sec: 13120.526073373909
Epoch Step: 35 / 138 Loss: 60.87571716308594 Tokens per Sec: 13432.296869159896
Epoch Step: 40 / 138 Loss: 65.365966796875 Tokens per Sec: 13402.415124618066
Epoch Step: 45 / 138 Loss: 34.15488815307617 Tokens per Sec: 13670.731426859906
Epoch Step: 50 / 138 Loss: 32.38833999633789 Tokens per Sec: 13672.396290052364
Epoch Step: 55 / 138 Loss: 44.334651947021484 Tokens per Sec: 12982.150969079405
Epoch Step: 60 / 138 Loss: 38.600791931152344 Tokens per Sec: 12160.682153814994
Epoch Step: 65 / 138 Loss: 27.146610260009766 Tokens per Sec: 13275.569859351037
Epoch Step: 70 / 138 Loss: 58.26008224487305 Tokens per Sec: 12954.931854094755
Epoch Step: 75 / 138 Loss: 33.89773941040039 Tokens per Sec: 12163.115269635678
Epoch Step: 80 / 138 Loss: 45.60723114013672 Tokens per Sec: 13254.630600872071
Epoch Step: 85 / 138 Loss: 44.89748001098633 Tokens per Sec: 13792.29665992191
Epoch Step: 90 / 138 Loss: 28.676908493041992 Tokens per Sec: 13411.73456206585
Epoch Step: 95 / 138 Loss: 36.0726203918457 Tokens per Sec: 12802.772140494935
Epoch Step: 100 / 138 Loss: 68.2635498046875 Tokens per Sec: 13366.264588588576
Epoch Step: 105 / 138 Loss: 62.729820251464844 Tokens per Sec: 12967.421617388087
Epoch Step: 110 / 138 Loss: 44.548500061035156 Tokens per Sec: 12920.271076923122
Epoch Step: 115 / 138 Loss: 143.29412841796875 Tokens per Sec: 12807.459136356329
Epoch Step: 120 / 138 Loss: 62.98685073852539 Tokens per Sec: 13393.840696895042
Epoch Step: 125 / 138 Loss: 45.48918151855469 Tokens per Sec: 12671.363178403013
Epoch Step: 130 / 138 Loss: 122.15460205078125 Tokens per Sec: 12117.804992927708
Epoch Step: 135 / 138 Loss: 58.47319793701172 Tokens per Sec: 13244.213347126519
Epoch ended with duration 0:00:48.876957
Train perplexity: 2.456233739047817
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.888182
Validation perplexity: 2.081590306202332
Epoch 38 / 1000
Epoch Step: 5 / 138 Loss: 27.81317901611328 Tokens per Sec: 13874.71414230612
Epoch Step: 10 / 138 Loss: 41.68162536621094 Tokens per Sec: 13322.69066213224
Epoch Step: 15 / 138 Loss: 56.8590087890625 Tokens per Sec: 13704.507844281135
Epoch Step: 20 / 138 Loss: 172.2337646484375 Tokens per Sec: 12327.925638933171
Epoch Step: 25 / 138 Loss: 51.392208099365234 Tokens per Sec: 13585.305933156245
Epoch Step: 30 / 138 Loss: 45.99903869628906 Tokens per Sec: 13290.122721930149
Epoch Step: 35 / 138 Loss: 51.05091094970703 Tokens per Sec: 12030.218370675106
Epoch Step: 40 / 138 Loss: 24.91905975341797 Tokens per Sec: 13720.175550797421
Epoch Step: 45 / 138 Loss: 36.951412200927734 Tokens per Sec: 13216.605952422608
Epoch Step: 50 / 138 Loss: 42.8446044921875 Tokens per Sec: 13596.721797213422
Epoch Step: 55 / 138 Loss: 219.81307983398438 Tokens per Sec: 13282.770892740384
Epoch Step: 60 / 138 Loss: 29.5002498626709 Tokens per Sec: 12108.542192989054
Epoch Step: 65 / 138 Loss: 63.59489059448242 Tokens per Sec: 12929.806004392089
Epoch Step: 70 / 138 Loss: 57.67593765258789 Tokens per Sec: 13975.640626025337
Epoch Step: 75 / 138 Loss: 132.38699340820312 Tokens per Sec: 12843.833164729174
Epoch Step: 80 / 138 Loss: 47.50377655029297 Tokens per Sec: 12952.524031074257
Epoch Step: 85 / 138 Loss: 180.83287048339844 Tokens per Sec: 13068.644338427583
Epoch Step: 90 / 138 Loss: 32.677799224853516 Tokens per Sec: 12560.918059423053
Epoch Step: 95 / 138 Loss: 41.24568557739258 Tokens per Sec: 13020.922732169603
Epoch Step: 100 / 138 Loss: 48.652400970458984 Tokens per Sec: 13540.124084309806
Epoch Step: 105 / 138 Loss: 60.6244010925293 Tokens per Sec: 12773.67877383226
Epoch Step: 110 / 138 Loss: 43.721622467041016 Tokens per Sec: 11318.236237144118
Epoch Step: 115 / 138 Loss: 35.1231689453125 Tokens per Sec: 13170.37057750553
Epoch Step: 120 / 138 Loss: 44.429176330566406 Tokens per Sec: 13101.712575981415
Epoch Step: 125 / 138 Loss: 48.50251388549805 Tokens per Sec: 12558.17708696787
Epoch Step: 130 / 138 Loss: 49.834903717041016 Tokens per Sec: 12552.429607485996
Epoch Step: 135 / 138 Loss: 37.607330322265625 Tokens per Sec: 12973.044178753196
Epoch ended with duration 0:00:49.038066
Train perplexity: 2.3949215352969446
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 ) , null ) ; } } }[0m
Epoch ended with duration 0:00:03.948872
Validation perplexity: 2.2677448497695143
Epoch 39 / 1000
Epoch Step: 5 / 138 Loss: 62.277217864990234 Tokens per Sec: 13717.61186178837
Epoch Step: 10 / 138 Loss: 138.28302001953125 Tokens per Sec: 13022.24983975411
Epoch Step: 15 / 138 Loss: 36.45732116699219 Tokens per Sec: 12430.83335669766
Epoch Step: 20 / 138 Loss: 36.035606384277344 Tokens per Sec: 12606.26802815884
Epoch Step: 25 / 138 Loss: 35.73706817626953 Tokens per Sec: 13320.701817430658
Epoch Step: 30 / 138 Loss: 56.32258605957031 Tokens per Sec: 13372.087559955267
Epoch Step: 35 / 138 Loss: 62.46556854248047 Tokens per Sec: 12977.328964181428
Epoch Step: 40 / 138 Loss: 186.93426513671875 Tokens per Sec: 13062.25190176889
Epoch Step: 45 / 138 Loss: 49.57274627685547 Tokens per Sec: 12952.279687294984
Epoch Step: 50 / 138 Loss: 33.9547119140625 Tokens per Sec: 12966.154580820004
Epoch Step: 55 / 138 Loss: 56.36099624633789 Tokens per Sec: 13303.899597025127
Epoch Step: 60 / 138 Loss: 57.405609130859375 Tokens per Sec: 13573.637549763549
Epoch Step: 65 / 138 Loss: 29.128629684448242 Tokens per Sec: 13881.941465177704
Epoch Step: 70 / 138 Loss: 45.29693603515625 Tokens per Sec: 12390.190012215679
Epoch Step: 75 / 138 Loss: 49.37761688232422 Tokens per Sec: 12773.749454001696
Epoch Step: 80 / 138 Loss: 44.54076385498047 Tokens per Sec: 13241.208555565285
Epoch Step: 85 / 138 Loss: 33.56143569946289 Tokens per Sec: 13955.576412940574
Epoch Step: 90 / 138 Loss: 39.00591278076172 Tokens per Sec: 13202.126251915815
Epoch Step: 95 / 138 Loss: 60.331302642822266 Tokens per Sec: 13640.500419856167
Epoch Step: 100 / 138 Loss: 230.84939575195312 Tokens per Sec: 12152.365098448414
Epoch Step: 105 / 138 Loss: 56.43042755126953 Tokens per Sec: 11548.140073945377
Epoch Step: 110 / 138 Loss: 42.49456787109375 Tokens per Sec: 12908.486607494051
Epoch Step: 115 / 138 Loss: 43.48408889770508 Tokens per Sec: 13084.149109891847
Epoch Step: 120 / 138 Loss: 44.114837646484375 Tokens per Sec: 13024.384541447886
Epoch Step: 125 / 138 Loss: 33.68474578857422 Tokens per Sec: 13238.531799939865
Epoch Step: 130 / 138 Loss: 117.98004150390625 Tokens per Sec: 13000.63699121525
Epoch Step: 135 / 138 Loss: 23.97734832763672 Tokens per Sec: 12805.968950324976
Epoch ended with duration 0:00:48.899842
Train perplexity: 2.3202255718130886
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 STRING_2 ) + + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.857050
Validation perplexity: 1.8544669243190426
Model saved best_on_validation!
Epoch 40 / 1000
Epoch Step: 5 / 138 Loss: 35.118438720703125 Tokens per Sec: 12169.81312157639
Epoch Step: 10 / 138 Loss: 43.51951599121094 Tokens per Sec: 13669.958065746998
Epoch Step: 15 / 138 Loss: 65.83698272705078 Tokens per Sec: 13400.832031416354
Epoch Step: 20 / 138 Loss: 55.551326751708984 Tokens per Sec: 13528.715676064763
Epoch Step: 25 / 138 Loss: 59.21896743774414 Tokens per Sec: 13556.285676303449
Epoch Step: 30 / 138 Loss: 37.07609176635742 Tokens per Sec: 13400.26025435365
Epoch Step: 35 / 138 Loss: 57.42967224121094 Tokens per Sec: 13128.743405395213
Epoch Step: 40 / 138 Loss: 57.812095642089844 Tokens per Sec: 12374.296157637891
Epoch Step: 45 / 138 Loss: 178.08377075195312 Tokens per Sec: 13043.588060103713
Epoch Step: 50 / 138 Loss: 79.27073669433594 Tokens per Sec: 13209.85608966046
Epoch Step: 55 / 138 Loss: 29.774133682250977 Tokens per Sec: 13821.446605313353
Epoch Step: 60 / 138 Loss: 56.40156173706055 Tokens per Sec: 13728.279434874232
Epoch Step: 65 / 138 Loss: 49.10641860961914 Tokens per Sec: 13067.789230630795
Epoch Step: 70 / 138 Loss: 212.05419921875 Tokens per Sec: 12758.713249999666
Epoch Step: 75 / 138 Loss: 60.263668060302734 Tokens per Sec: 12914.109385301861
Epoch Step: 80 / 138 Loss: 47.16644287109375 Tokens per Sec: 12746.363461310735
Epoch Step: 85 / 138 Loss: 61.06603240966797 Tokens per Sec: 13949.960141434542
Epoch Step: 90 / 138 Loss: 30.984935760498047 Tokens per Sec: 13137.37297250598
Epoch Step: 95 / 138 Loss: 163.6793975830078 Tokens per Sec: 12907.678677112763
Epoch Step: 100 / 138 Loss: 50.82095718383789 Tokens per Sec: 13653.288736280376
Epoch Step: 105 / 138 Loss: 34.223716735839844 Tokens per Sec: 12880.094633431558
Epoch Step: 110 / 138 Loss: 45.780372619628906 Tokens per Sec: 12851.641995721702
Epoch Step: 115 / 138 Loss: 34.08917999267578 Tokens per Sec: 13084.18150409749
Epoch Step: 120 / 138 Loss: 32.1527099609375 Tokens per Sec: 12721.413202538064
Epoch Step: 125 / 138 Loss: 49.99504470825195 Tokens per Sec: 12092.662645048962
Epoch Step: 130 / 138 Loss: 43.78583908081055 Tokens per Sec: 12604.646526841641
Epoch Step: 135 / 138 Loss: 36.94734191894531 Tokens per Sec: 13109.553037493017
Epoch ended with duration 0:00:48.742309
Train perplexity: 2.240902360572889
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ( ( STRING_2 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node . mContext ( node , node , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.956145
Validation perplexity: 2.5905040121023992
Model saved checkpoint!
Epoch 41 / 1000
Epoch Step: 5 / 138 Loss: 49.51773452758789 Tokens per Sec: 13424.170175180809
Epoch Step: 10 / 138 Loss: 44.9460563659668 Tokens per Sec: 12952.604732951075
Epoch Step: 15 / 138 Loss: 31.691600799560547 Tokens per Sec: 13406.238966136067
Epoch Step: 20 / 138 Loss: 69.46363830566406 Tokens per Sec: 12943.949601943103
Epoch Step: 25 / 138 Loss: 47.17519760131836 Tokens per Sec: 12969.187678740724
Epoch Step: 30 / 138 Loss: 40.36856460571289 Tokens per Sec: 13542.281794039494
Epoch Step: 35 / 138 Loss: 50.13187026977539 Tokens per Sec: 12827.116581864728
Epoch Step: 40 / 138 Loss: 31.796024322509766 Tokens per Sec: 13527.252381104357
Epoch Step: 45 / 138 Loss: 27.264625549316406 Tokens per Sec: 13087.10164565607
Epoch Step: 50 / 138 Loss: 57.63018798828125 Tokens per Sec: 13585.755011136971
Epoch Step: 55 / 138 Loss: 34.077999114990234 Tokens per Sec: 13451.515541223564
Epoch Step: 60 / 138 Loss: 55.949554443359375 Tokens per Sec: 13100.258544926108
Epoch Step: 65 / 138 Loss: 31.852516174316406 Tokens per Sec: 13526.753098424122
Epoch Step: 70 / 138 Loss: 40.23020935058594 Tokens per Sec: 12810.231930036018
Epoch Step: 75 / 138 Loss: 33.321632385253906 Tokens per Sec: 13672.58790311897
Epoch Step: 80 / 138 Loss: 25.830947875976562 Tokens per Sec: 13669.063000071701
Epoch Step: 85 / 138 Loss: 58.476776123046875 Tokens per Sec: 13526.22927380363
Epoch Step: 90 / 138 Loss: 30.429672241210938 Tokens per Sec: 13365.384820836705
Epoch Step: 95 / 138 Loss: 49.77939987182617 Tokens per Sec: 13202.586062136861
Epoch Step: 100 / 138 Loss: 24.566722869873047 Tokens per Sec: 13983.813972908234
Epoch Step: 105 / 138 Loss: 39.42866516113281 Tokens per Sec: 13179.263994062781
Epoch Step: 110 / 138 Loss: 46.36955642700195 Tokens per Sec: 12653.694366663916
Epoch Step: 115 / 138 Loss: 30.092771530151367 Tokens per Sec: 12171.280196585187
Epoch Step: 120 / 138 Loss: 56.5287971496582 Tokens per Sec: 12867.722727578977
Epoch Step: 125 / 138 Loss: 30.206127166748047 Tokens per Sec: 12775.077171917916
Epoch Step: 130 / 138 Loss: 55.90301513671875 Tokens per Sec: 12477.419609561268
Epoch Step: 135 / 138 Loss: 34.77058410644531 Tokens per Sec: 12856.759732998518
Epoch ended with duration 0:00:48.479122
Train perplexity: 2.0343369380581846
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e , STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , mContext . METHOD_3 ( node , node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.902706
Validation perplexity: 2.098142510185046
Epoch 42 / 1000
Epoch Step: 5 / 138 Loss: 36.19285202026367 Tokens per Sec: 13199.15723947196
Epoch Step: 10 / 138 Loss: 36.08404541015625 Tokens per Sec: 13160.649183953
Epoch Step: 15 / 138 Loss: 47.760677337646484 Tokens per Sec: 13234.844068594226
Epoch Step: 20 / 138 Loss: 43.56278610229492 Tokens per Sec: 13099.785137211595
Epoch Step: 25 / 138 Loss: 57.8896484375 Tokens per Sec: 13715.975529106649
Epoch Step: 30 / 138 Loss: 55.700469970703125 Tokens per Sec: 13606.980147855307
Epoch Step: 35 / 138 Loss: 32.30852508544922 Tokens per Sec: 12892.045417648966
Epoch Step: 40 / 138 Loss: 54.976806640625 Tokens per Sec: 13325.86940647931
Epoch Step: 45 / 138 Loss: 36.51582336425781 Tokens per Sec: 12602.450621838727
Epoch Step: 50 / 138 Loss: 32.146568298339844 Tokens per Sec: 12907.564016110662
Epoch Step: 55 / 138 Loss: 53.80421829223633 Tokens per Sec: 13352.565031598288
Epoch Step: 60 / 138 Loss: 136.0863800048828 Tokens per Sec: 12865.122625747475
Epoch Step: 65 / 138 Loss: 47.61903381347656 Tokens per Sec: 13744.609467873164
Epoch Step: 70 / 138 Loss: 44.02631378173828 Tokens per Sec: 11939.777798974877
Epoch Step: 75 / 138 Loss: 39.4811897277832 Tokens per Sec: 13063.025679951874
Epoch Step: 80 / 138 Loss: 33.05111312866211 Tokens per Sec: 13991.364924785801
Epoch Step: 85 / 138 Loss: 25.743038177490234 Tokens per Sec: 13134.625994619448
Epoch Step: 90 / 138 Loss: 34.723636627197266 Tokens per Sec: 13509.2282669832
Epoch Step: 95 / 138 Loss: 42.913124084472656 Tokens per Sec: 13247.365264345544
Epoch Step: 100 / 138 Loss: 49.580467224121094 Tokens per Sec: 13962.830250231107
Epoch Step: 105 / 138 Loss: 52.467857360839844 Tokens per Sec: 13115.899061635573
Epoch Step: 110 / 138 Loss: 33.55529022216797 Tokens per Sec: 13034.190965095748
Epoch Step: 115 / 138 Loss: 63.11967468261719 Tokens per Sec: 12964.786865384167
Epoch Step: 120 / 138 Loss: 45.79932403564453 Tokens per Sec: 12561.950274862997
Epoch Step: 125 / 138 Loss: 28.9808292388916 Tokens per Sec: 13217.82996526163
Epoch Step: 130 / 138 Loss: 37.03678894042969 Tokens per Sec: 11110.012467533583
Epoch Step: 135 / 138 Loss: 47.81968688964844 Tokens per Sec: 13024.555828285416
Epoch ended with duration 0:00:48.697148
Train perplexity: 2.1338968362355013
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , VAR_3 , VAR_3 ) , null ) ; } } }[0m
Epoch ended with duration 0:00:03.921086
Validation perplexity: 2.1147006566573605
Epoch 43 / 1000
Epoch Step: 5 / 138 Loss: 128.82176208496094 Tokens per Sec: 12969.840574723254
Epoch Step: 10 / 138 Loss: 54.139041900634766 Tokens per Sec: 13016.590202732363
Epoch Step: 15 / 138 Loss: 29.939817428588867 Tokens per Sec: 13568.18632800516
Epoch Step: 20 / 138 Loss: 33.3064079284668 Tokens per Sec: 13371.280892247709
Epoch Step: 25 / 138 Loss: 56.1602783203125 Tokens per Sec: 13772.618341294856
Epoch Step: 30 / 138 Loss: 51.12298583984375 Tokens per Sec: 13443.474537587235
Epoch Step: 35 / 138 Loss: 42.615787506103516 Tokens per Sec: 14013.036969798068
Epoch Step: 40 / 138 Loss: 34.869972229003906 Tokens per Sec: 13149.428728451843
Epoch Step: 45 / 138 Loss: 29.92461395263672 Tokens per Sec: 13406.009413382017
Epoch Step: 50 / 138 Loss: 53.735660552978516 Tokens per Sec: 13471.336076251062
Epoch Step: 55 / 138 Loss: 40.37197494506836 Tokens per Sec: 12606.519354213458
Epoch Step: 60 / 138 Loss: 54.58268737792969 Tokens per Sec: 13785.17670210241
Epoch Step: 65 / 138 Loss: 64.85948181152344 Tokens per Sec: 12730.900690332845
Epoch Step: 70 / 138 Loss: 58.78232192993164 Tokens per Sec: 13732.857020891937
Epoch Step: 75 / 138 Loss: 51.29476547241211 Tokens per Sec: 13826.54903475159
Epoch Step: 80 / 138 Loss: 39.639949798583984 Tokens per Sec: 13155.780242133285
Epoch Step: 85 / 138 Loss: 31.780258178710938 Tokens per Sec: 12259.145491046125
Epoch Step: 90 / 138 Loss: 42.93021774291992 Tokens per Sec: 12830.12877662887
Epoch Step: 95 / 138 Loss: 60.19264602661133 Tokens per Sec: 13163.08708506009
Epoch Step: 100 / 138 Loss: 25.07061767578125 Tokens per Sec: 12894.450252926456
Epoch Step: 105 / 138 Loss: 37.95867156982422 Tokens per Sec: 12859.686455033128
Epoch Step: 110 / 138 Loss: 32.928070068359375 Tokens per Sec: 12613.48646741332
Epoch Step: 115 / 138 Loss: 44.0407829284668 Tokens per Sec: 12468.170692525176
Epoch Step: 120 / 138 Loss: 40.42046356201172 Tokens per Sec: 11219.871646104522
Epoch Step: 125 / 138 Loss: 57.34208679199219 Tokens per Sec: 13559.086036570061
Epoch Step: 130 / 138 Loss: 49.12174606323242 Tokens per Sec: 13028.789838835328
Epoch Step: 135 / 138 Loss: 155.32151794433594 Tokens per Sec: 12736.199221905586
Epoch ended with duration 0:00:48.696553
Train perplexity: 2.131671071771358
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean VAR_5 , VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.959069
Validation perplexity: 2.4469530799200623
Epoch 44 / 1000
Epoch Step: 5 / 138 Loss: 183.905029296875 Tokens per Sec: 12536.528461666436
Epoch Step: 10 / 138 Loss: 45.204437255859375 Tokens per Sec: 13881.356717464145
Epoch Step: 15 / 138 Loss: 23.635591506958008 Tokens per Sec: 13452.198533028517
Epoch Step: 20 / 138 Loss: 54.34713363647461 Tokens per Sec: 13366.609923958145
Epoch Step: 25 / 138 Loss: 48.66691970825195 Tokens per Sec: 13075.761089175368
Epoch Step: 30 / 138 Loss: 38.32103729248047 Tokens per Sec: 13133.814980902964
Epoch Step: 35 / 138 Loss: 55.05225372314453 Tokens per Sec: 13280.296855380071
Epoch Step: 40 / 138 Loss: 47.62681198120117 Tokens per Sec: 14015.830201596853
Epoch Step: 45 / 138 Loss: 42.16856384277344 Tokens per Sec: 13451.012108214885
Epoch Step: 50 / 138 Loss: 55.98987579345703 Tokens per Sec: 13244.81748917399
Epoch Step: 55 / 138 Loss: 47.13580322265625 Tokens per Sec: 13751.547514554117
Epoch Step: 60 / 138 Loss: 53.31939697265625 Tokens per Sec: 13228.48474473193
Epoch Step: 65 / 138 Loss: 38.992610931396484 Tokens per Sec: 13210.701190969765
Epoch Step: 70 / 138 Loss: 44.728057861328125 Tokens per Sec: 13247.173720403553
Epoch Step: 75 / 138 Loss: 25.49015998840332 Tokens per Sec: 13445.041583870558
Epoch Step: 80 / 138 Loss: 49.643272399902344 Tokens per Sec: 13038.893654749825
Epoch Step: 85 / 138 Loss: 59.9515380859375 Tokens per Sec: 13021.823647003364
Epoch Step: 90 / 138 Loss: 36.99760055541992 Tokens per Sec: 13165.154600601933
Epoch Step: 95 / 138 Loss: 26.430246353149414 Tokens per Sec: 13453.194552958617
Epoch Step: 100 / 138 Loss: 39.96691131591797 Tokens per Sec: 12416.571735994416
Epoch Step: 105 / 138 Loss: 28.609704971313477 Tokens per Sec: 12859.44853659266
Epoch Step: 110 / 138 Loss: 197.87307739257812 Tokens per Sec: 12412.299963801672
Epoch Step: 115 / 138 Loss: 35.451812744140625 Tokens per Sec: 11846.805952346693
Epoch Step: 120 / 138 Loss: 28.09566307067871 Tokens per Sec: 12251.676484439244
Epoch Step: 125 / 138 Loss: 52.285728454589844 Tokens per Sec: 12685.857831780415
Epoch Step: 130 / 138 Loss: 59.428775787353516 Tokens per Sec: 12882.73707191143
Epoch Step: 135 / 138 Loss: 61.75823211669922 Tokens per Sec: 12854.353656618392
Epoch ended with duration 0:00:48.865948
Train perplexity: 2.1169968968757904
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 , METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 STRING_2 STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.858377
Validation perplexity: 1.824978202451407
Model saved best_on_validation!
Epoch 45 / 1000
Epoch Step: 5 / 138 Loss: 33.76911544799805 Tokens per Sec: 13664.672883570558
Epoch Step: 10 / 138 Loss: 26.276748657226562 Tokens per Sec: 13465.572098264322
Epoch Step: 15 / 138 Loss: 43.39794921875 Tokens per Sec: 12845.628385357191
Epoch Step: 20 / 138 Loss: 27.16910171508789 Tokens per Sec: 13627.364737611417
Epoch Step: 25 / 138 Loss: 229.70420837402344 Tokens per Sec: 12901.805553065738
Epoch Step: 30 / 138 Loss: 41.5297737121582 Tokens per Sec: 12559.102522084253
Epoch Step: 35 / 138 Loss: 31.340293884277344 Tokens per Sec: 13463.425738882102
Epoch Step: 40 / 138 Loss: 50.7833251953125 Tokens per Sec: 13122.889579457118
Epoch Step: 45 / 138 Loss: 47.29937744140625 Tokens per Sec: 13675.3574432191
Epoch Step: 50 / 138 Loss: 170.84228515625 Tokens per Sec: 12914.23308629856
Epoch Step: 55 / 138 Loss: 42.84599685668945 Tokens per Sec: 13435.461686285264
Epoch Step: 60 / 138 Loss: 33.16648864746094 Tokens per Sec: 13256.404960865597
Epoch Step: 65 / 138 Loss: 39.099708557128906 Tokens per Sec: 12759.094910730988
Epoch Step: 70 / 138 Loss: 35.861053466796875 Tokens per Sec: 13755.384022084367
Epoch Step: 75 / 138 Loss: 56.60276412963867 Tokens per Sec: 13020.59419967118
Epoch Step: 80 / 138 Loss: 42.171974182128906 Tokens per Sec: 13531.104835973412
Epoch Step: 85 / 138 Loss: 50.864505767822266 Tokens per Sec: 13324.651503721336
Epoch Step: 90 / 138 Loss: 35.08980941772461 Tokens per Sec: 13421.002576587804
Epoch Step: 95 / 138 Loss: 26.190898895263672 Tokens per Sec: 13151.361837983965
Epoch Step: 100 / 138 Loss: 52.427547454833984 Tokens per Sec: 12999.995903264386
Epoch Step: 105 / 138 Loss: 54.168392181396484 Tokens per Sec: 13060.557441290612
Epoch Step: 110 / 138 Loss: 40.71792221069336 Tokens per Sec: 12619.926532538753
Epoch Step: 115 / 138 Loss: 50.5090217590332 Tokens per Sec: 12801.322276185
Epoch Step: 120 / 138 Loss: 47.91419982910156 Tokens per Sec: 13201.856643575007
Epoch Step: 125 / 138 Loss: 38.996307373046875 Tokens per Sec: 12650.551144882853
Epoch Step: 130 / 138 Loss: 27.960439682006836 Tokens per Sec: 12969.61650934206
Epoch Step: 135 / 138 Loss: 47.80840301513672 Tokens per Sec: 12193.11470360264
Epoch ended with duration 0:00:48.669050
Train perplexity: 2.0800769998057627
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 ) , STRING_3 ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.928004
Validation perplexity: 2.1991520614384177
Model saved checkpoint!
Epoch 46 / 1000
Epoch Step: 5 / 138 Loss: 140.74636840820312 Tokens per Sec: 13887.271015132455
Epoch Step: 10 / 138 Loss: 35.57680130004883 Tokens per Sec: 13414.064085785754
Epoch Step: 15 / 138 Loss: 179.06590270996094 Tokens per Sec: 13020.25709265626
Epoch Step: 20 / 138 Loss: 20.851972579956055 Tokens per Sec: 12870.47837357298
Epoch Step: 25 / 138 Loss: 46.547332763671875 Tokens per Sec: 12720.776732771461
Epoch Step: 30 / 138 Loss: 27.138940811157227 Tokens per Sec: 14110.054095749096
Epoch Step: 35 / 138 Loss: 32.16944885253906 Tokens per Sec: 12917.443624770807
Epoch Step: 40 / 138 Loss: 35.25383377075195 Tokens per Sec: 13356.49241907281
Epoch Step: 45 / 138 Loss: 54.54777526855469 Tokens per Sec: 13474.251956460399
Epoch Step: 50 / 138 Loss: 55.2967643737793 Tokens per Sec: 13121.600436195524
Epoch Step: 55 / 138 Loss: 27.805864334106445 Tokens per Sec: 13696.165773844317
Epoch Step: 60 / 138 Loss: 57.04408264160156 Tokens per Sec: 12980.915071497537
Epoch Step: 65 / 138 Loss: 29.122594833374023 Tokens per Sec: 13325.642904083543
Epoch Step: 70 / 138 Loss: 41.24962615966797 Tokens per Sec: 13815.520514815282
Epoch Step: 75 / 138 Loss: 29.151527404785156 Tokens per Sec: 13088.72426173991
Epoch Step: 80 / 138 Loss: 50.08140563964844 Tokens per Sec: 12973.701059664367
Epoch Step: 85 / 138 Loss: 25.42866325378418 Tokens per Sec: 12668.51133029786
Epoch Step: 90 / 138 Loss: 26.826940536499023 Tokens per Sec: 13858.917102255142
Epoch Step: 95 / 138 Loss: 42.39967346191406 Tokens per Sec: 12970.661970865754
Epoch Step: 100 / 138 Loss: 41.957786560058594 Tokens per Sec: 12688.346996231294
Epoch Step: 105 / 138 Loss: 48.92389678955078 Tokens per Sec: 12858.423681818898
Epoch Step: 110 / 138 Loss: 37.82452392578125 Tokens per Sec: 11967.059981932241
Epoch Step: 115 / 138 Loss: 31.140214920043945 Tokens per Sec: 12855.252138396489
Epoch Step: 120 / 138 Loss: 37.01329040527344 Tokens per Sec: 12850.536862849922
Epoch Step: 125 / 138 Loss: 44.23509216308594 Tokens per Sec: 13168.43387831393
Epoch Step: 130 / 138 Loss: 29.275962829589844 Tokens per Sec: 12879.497583673803
Epoch Step: 135 / 138 Loss: 39.64120101928711 Tokens per Sec: 12343.473230106207
Epoch ended with duration 0:00:48.669335
Train perplexity: 1.9375618396954064
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.856413
Validation perplexity: 1.7294272519070144
Model saved best_on_validation!
Epoch 47 / 1000
Epoch Step: 5 / 138 Loss: 36.508853912353516 Tokens per Sec: 13255.181877426774
Epoch Step: 10 / 138 Loss: 31.178674697875977 Tokens per Sec: 13410.777169678493
Epoch Step: 15 / 138 Loss: 50.94898223876953 Tokens per Sec: 13074.82309968175
Epoch Step: 20 / 138 Loss: 36.53815841674805 Tokens per Sec: 13091.383321693085
Epoch Step: 25 / 138 Loss: 229.50401306152344 Tokens per Sec: 12595.263333135934
Epoch Step: 30 / 138 Loss: 38.775413513183594 Tokens per Sec: 12496.28246363321
Epoch Step: 35 / 138 Loss: 32.586429595947266 Tokens per Sec: 13011.280159329168
Epoch Step: 40 / 138 Loss: 32.498138427734375 Tokens per Sec: 13631.509244135734
Epoch Step: 45 / 138 Loss: 47.06471252441406 Tokens per Sec: 13198.486151664416
Epoch Step: 50 / 138 Loss: 64.16529083251953 Tokens per Sec: 13805.757525007873
Epoch Step: 55 / 138 Loss: 53.76919937133789 Tokens per Sec: 12934.506918145116
Epoch Step: 60 / 138 Loss: 37.796878814697266 Tokens per Sec: 13727.77488952269
Epoch Step: 65 / 138 Loss: 39.130767822265625 Tokens per Sec: 13256.835726464958
Epoch Step: 70 / 138 Loss: 37.73248291015625 Tokens per Sec: 12854.421978848166
Epoch Step: 75 / 138 Loss: 36.399356842041016 Tokens per Sec: 13408.689213964448
Epoch Step: 80 / 138 Loss: 105.82958221435547 Tokens per Sec: 13170.191296159313
Epoch Step: 85 / 138 Loss: 25.239891052246094 Tokens per Sec: 13552.552969333163
Epoch Step: 90 / 138 Loss: 43.0621452331543 Tokens per Sec: 13873.89356889093
Epoch Step: 95 / 138 Loss: 37.38560104370117 Tokens per Sec: 13187.961147632188
Epoch Step: 100 / 138 Loss: 28.51422882080078 Tokens per Sec: 12605.750116679243
Epoch Step: 105 / 138 Loss: 49.751712799072266 Tokens per Sec: 12924.389782645405
Epoch Step: 110 / 138 Loss: 35.010372161865234 Tokens per Sec: 12997.897039848656
Epoch Step: 115 / 138 Loss: 35.10321807861328 Tokens per Sec: 13081.341241514014
Epoch Step: 120 / 138 Loss: 27.460472106933594 Tokens per Sec: 12835.258196265086
Epoch Step: 125 / 138 Loss: 35.17979431152344 Tokens per Sec: 11704.340753162298
Epoch Step: 130 / 138 Loss: 50.832916259765625 Tokens per Sec: 13082.08790225993
Epoch Step: 135 / 138 Loss: 31.488359451293945 Tokens per Sec: 12340.775965654466
Epoch ended with duration 0:00:48.832824
Train perplexity: 2.2366445711730973
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 , METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.930785
Validation perplexity: 2.19148177608661
Epoch 48 / 1000
Epoch Step: 5 / 138 Loss: 43.92042922973633 Tokens per Sec: 13060.475399522498
Epoch Step: 10 / 138 Loss: 44.92014694213867 Tokens per Sec: 12791.797290285127
Epoch Step: 15 / 138 Loss: 35.219444274902344 Tokens per Sec: 13187.94767592297
Epoch Step: 20 / 138 Loss: 30.45198631286621 Tokens per Sec: 12736.296802446035
Epoch Step: 25 / 138 Loss: 48.39362335205078 Tokens per Sec: 13738.704248257853
Epoch Step: 30 / 138 Loss: 23.472932815551758 Tokens per Sec: 13729.642853748715
Epoch Step: 35 / 138 Loss: 35.534271240234375 Tokens per Sec: 12940.187602846674
Epoch Step: 40 / 138 Loss: 40.8302001953125 Tokens per Sec: 13825.276167035818
Epoch Step: 45 / 138 Loss: 234.19613647460938 Tokens per Sec: 12767.277165403377
Epoch Step: 50 / 138 Loss: 51.201377868652344 Tokens per Sec: 13285.533710951473
Epoch Step: 55 / 138 Loss: 31.99745750427246 Tokens per Sec: 12889.340557386371
Epoch Step: 60 / 138 Loss: 30.514812469482422 Tokens per Sec: 13651.550431789678
Epoch Step: 65 / 138 Loss: 30.79555892944336 Tokens per Sec: 13478.426990526392
Epoch Step: 70 / 138 Loss: 34.690635681152344 Tokens per Sec: 13024.505632018252
Epoch Step: 75 / 138 Loss: 24.087482452392578 Tokens per Sec: 13373.44896488219
Epoch Step: 80 / 138 Loss: 30.953229904174805 Tokens per Sec: 13444.579313838069
Epoch Step: 85 / 138 Loss: 25.64639663696289 Tokens per Sec: 12875.258140692846
Epoch Step: 90 / 138 Loss: 41.89884948730469 Tokens per Sec: 13287.084236268924
Epoch Step: 95 / 138 Loss: 238.8861541748047 Tokens per Sec: 12791.094441179654
Epoch Step: 100 / 138 Loss: 29.893781661987305 Tokens per Sec: 13828.579164422334
Epoch Step: 105 / 138 Loss: 185.05810546875 Tokens per Sec: 12535.26946543392
Epoch Step: 110 / 138 Loss: 29.897293090820312 Tokens per Sec: 13221.494528372885
Epoch Step: 115 / 138 Loss: 42.39506912231445 Tokens per Sec: 12467.009156267584
Epoch Step: 120 / 138 Loss: 31.103267669677734 Tokens per Sec: 12833.169837896083
Epoch Step: 125 / 138 Loss: 35.781742095947266 Tokens per Sec: 12912.331532653538
Epoch Step: 130 / 138 Loss: 48.28536605834961 Tokens per Sec: 11741.861338553
Epoch Step: 135 / 138 Loss: 52.1207389831543 Tokens per Sec: 12981.78247235559
Epoch ended with duration 0:00:48.756752
Train perplexity: 2.041439936468175
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) ) . }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.876915
Validation perplexity: 1.8980705492801566
Epoch 49 / 1000
Epoch Step: 5 / 138 Loss: 53.5965576171875 Tokens per Sec: 12770.679860140379
Epoch Step: 10 / 138 Loss: 21.248336791992188 Tokens per Sec: 13044.461035562588
Epoch Step: 15 / 138 Loss: 41.67022705078125 Tokens per Sec: 12531.390540404725
Epoch Step: 20 / 138 Loss: 27.373756408691406 Tokens per Sec: 13511.40657030506
Epoch Step: 25 / 138 Loss: 25.47648811340332 Tokens per Sec: 13781.490581673801
Epoch Step: 30 / 138 Loss: 44.60663986206055 Tokens per Sec: 13684.289276702444
Epoch Step: 35 / 138 Loss: 47.26370620727539 Tokens per Sec: 12958.649001040005
Epoch Step: 40 / 138 Loss: 50.74700927734375 Tokens per Sec: 13028.643741799197
Epoch Step: 45 / 138 Loss: 32.420982360839844 Tokens per Sec: 13232.848440723214
Epoch Step: 50 / 138 Loss: 19.277332305908203 Tokens per Sec: 13331.30442911998
Epoch Step: 55 / 138 Loss: 128.42752075195312 Tokens per Sec: 12982.3036673948
Epoch Step: 60 / 138 Loss: 39.58514404296875 Tokens per Sec: 13672.731866924687
Epoch Step: 65 / 138 Loss: 28.054059982299805 Tokens per Sec: 13420.642010882115
Epoch Step: 70 / 138 Loss: 44.626197814941406 Tokens per Sec: 12717.296380114223
Epoch Step: 75 / 138 Loss: 25.79543113708496 Tokens per Sec: 13347.525280445045
Epoch Step: 80 / 138 Loss: 31.74785614013672 Tokens per Sec: 14026.427875127929
Epoch Step: 85 / 138 Loss: 37.853607177734375 Tokens per Sec: 13659.824526604903
Epoch Step: 90 / 138 Loss: 235.78799438476562 Tokens per Sec: 13219.622421211792
Epoch Step: 95 / 138 Loss: 27.12241554260254 Tokens per Sec: 12738.043342606958
Epoch Step: 100 / 138 Loss: 28.900630950927734 Tokens per Sec: 12660.10826093213
Epoch Step: 105 / 138 Loss: 54.781715393066406 Tokens per Sec: 11674.237530874834
Epoch Step: 110 / 138 Loss: 37.5468864440918 Tokens per Sec: 12789.29061170392
Epoch Step: 115 / 138 Loss: 44.2008056640625 Tokens per Sec: 13105.632776371882
Epoch Step: 120 / 138 Loss: 48.48618698120117 Tokens per Sec: 13278.081223467521
Epoch Step: 125 / 138 Loss: 34.21963119506836 Tokens per Sec: 12565.932306711955
Epoch Step: 130 / 138 Loss: 32.13859939575195 Tokens per Sec: 13001.06889516287
Epoch Step: 135 / 138 Loss: 136.37252807617188 Tokens per Sec: 12406.725342363972
Epoch ended with duration 0:00:48.806895
Train perplexity: 2.01467619357519
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } METHOD_5 ( STRING_1 , STRING_1 , rule . METHOD_6 ( ) . e.toString ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 + + ) ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.947587
Validation perplexity: 2.251885370342463
Epoch 50 / 1000
Epoch Step: 5 / 138 Loss: 44.6205940246582 Tokens per Sec: 12738.754820904353
Epoch Step: 10 / 138 Loss: 32.349796295166016 Tokens per Sec: 13125.474296435037
Epoch Step: 15 / 138 Loss: 23.803686141967773 Tokens per Sec: 12925.848571117567
Epoch Step: 20 / 138 Loss: 27.41179847717285 Tokens per Sec: 13755.221870284058
Epoch Step: 25 / 138 Loss: 57.46249771118164 Tokens per Sec: 13054.279211860923
Epoch Step: 30 / 138 Loss: 31.215072631835938 Tokens per Sec: 12743.177960329322
Epoch Step: 35 / 138 Loss: 24.93351936340332 Tokens per Sec: 13738.527312275075
Epoch Step: 40 / 138 Loss: 26.990028381347656 Tokens per Sec: 13672.156728813605
Epoch Step: 45 / 138 Loss: 43.36882781982422 Tokens per Sec: 13670.507840605613
Epoch Step: 50 / 138 Loss: 29.793336868286133 Tokens per Sec: 13890.415686401562
Epoch Step: 55 / 138 Loss: 29.781923294067383 Tokens per Sec: 13299.754194923806
Epoch Step: 60 / 138 Loss: 50.33272171020508 Tokens per Sec: 12326.640278780742
Epoch Step: 65 / 138 Loss: 31.435964584350586 Tokens per Sec: 13441.94690840731
Epoch Step: 70 / 138 Loss: 31.083742141723633 Tokens per Sec: 13986.148587889928
Epoch Step: 75 / 138 Loss: 49.22431182861328 Tokens per Sec: 12927.165204096522
Epoch Step: 80 / 138 Loss: 45.71710968017578 Tokens per Sec: 12703.88380416523
Epoch Step: 85 / 138 Loss: 47.03539276123047 Tokens per Sec: 13778.173275371768
Epoch Step: 90 / 138 Loss: 28.830671310424805 Tokens per Sec: 12876.124316590138
Epoch Step: 95 / 138 Loss: 35.63313674926758 Tokens per Sec: 12973.771284099757
Epoch Step: 100 / 138 Loss: 29.660634994506836 Tokens per Sec: 13137.887389136484
Epoch Step: 105 / 138 Loss: 38.82650375366211 Tokens per Sec: 13040.05253519301
Epoch Step: 110 / 138 Loss: 39.850093841552734 Tokens per Sec: 13021.680409627998
Epoch Step: 115 / 138 Loss: 41.700958251953125 Tokens per Sec: 12596.887091922605
Epoch Step: 120 / 138 Loss: 32.009185791015625 Tokens per Sec: 12662.552702990037
Epoch Step: 125 / 138 Loss: 83.1231460571289 Tokens per Sec: 12467.938850610848
Epoch Step: 130 / 138 Loss: 34.50776290893555 Tokens per Sec: 12468.777555442242
Epoch Step: 135 / 138 Loss: 41.827144622802734 Tokens per Sec: 11994.468843053957
Epoch ended with duration 0:00:48.810610
Train perplexity: 2.0367645938553807
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.855438
Validation perplexity: 1.6815220750474225
Model saved best_on_validation!
Model saved checkpoint!
Epoch 51 / 1000
Epoch Step: 5 / 138 Loss: 37.435420989990234 Tokens per Sec: 12273.868883099269
Epoch Step: 10 / 138 Loss: 31.1970272064209 Tokens per Sec: 13258.71596424755
Epoch Step: 15 / 138 Loss: 54.659019470214844 Tokens per Sec: 13472.340454227047
Epoch Step: 20 / 138 Loss: 23.4119930267334 Tokens per Sec: 13597.203823774238
Epoch Step: 25 / 138 Loss: 26.81288719177246 Tokens per Sec: 13430.244802383848
Epoch Step: 30 / 138 Loss: 55.145286560058594 Tokens per Sec: 13136.469833721583
Epoch Step: 35 / 138 Loss: 33.253501892089844 Tokens per Sec: 12738.646492900263
Epoch Step: 40 / 138 Loss: 39.9132080078125 Tokens per Sec: 13877.030830787118
Epoch Step: 45 / 138 Loss: 33.724708557128906 Tokens per Sec: 13639.044875828338
Epoch Step: 50 / 138 Loss: 19.115636825561523 Tokens per Sec: 13037.471709151294
Epoch Step: 55 / 138 Loss: 48.80186080932617 Tokens per Sec: 12773.328746048175
Epoch Step: 60 / 138 Loss: 23.209440231323242 Tokens per Sec: 13923.520919915652
Epoch Step: 65 / 138 Loss: 32.446372985839844 Tokens per Sec: 13495.44724158444
Epoch Step: 70 / 138 Loss: 37.03327560424805 Tokens per Sec: 13222.762488265102
Epoch Step: 75 / 138 Loss: 37.78160858154297 Tokens per Sec: 13628.510362331624
Epoch Step: 80 / 138 Loss: 25.00206756591797 Tokens per Sec: 12756.649435226043
Epoch Step: 85 / 138 Loss: 46.03071212768555 Tokens per Sec: 12934.675584497358
Epoch Step: 90 / 138 Loss: 41.465206146240234 Tokens per Sec: 13551.680724427877
Epoch Step: 95 / 138 Loss: 27.42275047302246 Tokens per Sec: 13552.22538935747
Epoch Step: 100 / 138 Loss: 30.514705657958984 Tokens per Sec: 13711.80232411291
Epoch Step: 105 / 138 Loss: 49.47322463989258 Tokens per Sec: 11740.79787219975
Epoch Step: 110 / 138 Loss: 24.00286865234375 Tokens per Sec: 13085.481669955783
Epoch Step: 115 / 138 Loss: 32.99612045288086 Tokens per Sec: 12954.153336362344
Epoch Step: 120 / 138 Loss: 188.48812866210938 Tokens per Sec: 12584.320167120528
Epoch Step: 125 / 138 Loss: 24.315752029418945 Tokens per Sec: 13003.451001365513
Epoch Step: 130 / 138 Loss: 37.34751510620117 Tokens per Sec: 11811.58632225564
Epoch Step: 135 / 138 Loss: 24.260292053222656 Tokens per Sec: 12774.264322556932
Epoch ended with duration 0:00:48.654760
Train perplexity: 1.7653587931045178
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) . e.toString ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.888245
Validation perplexity: 1.8361533777915038
Epoch 52 / 1000
Epoch Step: 5 / 138 Loss: 38.442413330078125 Tokens per Sec: 12604.178426830085
Epoch Step: 10 / 138 Loss: 28.593833923339844 Tokens per Sec: 12690.210854195606
Epoch Step: 15 / 138 Loss: 45.6457633972168 Tokens per Sec: 12977.851789175485
Epoch Step: 20 / 138 Loss: 43.82865524291992 Tokens per Sec: 13369.110630743102
Epoch Step: 25 / 138 Loss: 28.801530838012695 Tokens per Sec: 13831.157258216053
Epoch Step: 30 / 138 Loss: 50.87200927734375 Tokens per Sec: 12900.758117193192
Epoch Step: 35 / 138 Loss: 44.57030487060547 Tokens per Sec: 13067.2913191252
Epoch Step: 40 / 138 Loss: 43.068912506103516 Tokens per Sec: 13758.883971417403
Epoch Step: 45 / 138 Loss: 46.380062103271484 Tokens per Sec: 13633.51558137346
Epoch Step: 50 / 138 Loss: 32.97439193725586 Tokens per Sec: 13397.976403327153
Epoch Step: 55 / 138 Loss: 148.31576538085938 Tokens per Sec: 12461.370181685474
Epoch Step: 60 / 138 Loss: 41.90262222290039 Tokens per Sec: 12996.551665700585
Epoch Step: 65 / 138 Loss: 28.190454483032227 Tokens per Sec: 13025.147413993061
Epoch Step: 70 / 138 Loss: 43.066650390625 Tokens per Sec: 12883.762961785696
Epoch Step: 75 / 138 Loss: 48.68294143676758 Tokens per Sec: 13623.932012160176
Epoch Step: 80 / 138 Loss: 181.2321014404297 Tokens per Sec: 12442.174086357389
Epoch Step: 85 / 138 Loss: 59.57241439819336 Tokens per Sec: 13635.607766242552
Epoch Step: 90 / 138 Loss: 43.216732025146484 Tokens per Sec: 13130.113899327323
Epoch Step: 95 / 138 Loss: 45.034523010253906 Tokens per Sec: 13571.214520312098
Epoch Step: 100 / 138 Loss: 42.00719451904297 Tokens per Sec: 13380.415741727527
Epoch Step: 105 / 138 Loss: 34.9610595703125 Tokens per Sec: 12086.930175650035
Epoch Step: 110 / 138 Loss: 41.55159378051758 Tokens per Sec: 12993.169499456992
Epoch Step: 115 / 138 Loss: 27.67318344116211 Tokens per Sec: 13039.367897657798
Epoch Step: 120 / 138 Loss: 33.38150405883789 Tokens per Sec: 13038.298813801768
Epoch Step: 125 / 138 Loss: 30.34881591796875 Tokens per Sec: 12525.56630539208
Epoch Step: 130 / 138 Loss: 25.337804794311523 Tokens per Sec: 12947.35907551317
Epoch Step: 135 / 138 Loss: 29.811859130859375 Tokens per Sec: 13138.171950460815
Epoch ended with duration 0:00:48.853202
Train perplexity: 2.016707609816687
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.918202
Validation perplexity: 1.9263612248363569
Epoch 53 / 1000
Epoch Step: 5 / 138 Loss: 42.553035736083984 Tokens per Sec: 13851.575252802973
Epoch Step: 10 / 138 Loss: 22.820337295532227 Tokens per Sec: 13579.72567501222
Epoch Step: 15 / 138 Loss: 38.24271011352539 Tokens per Sec: 13104.53118274751
Epoch Step: 20 / 138 Loss: 32.41899871826172 Tokens per Sec: 13515.408388252892
Epoch Step: 25 / 138 Loss: 30.979143142700195 Tokens per Sec: 13073.80641451404
Epoch Step: 30 / 138 Loss: 23.88566780090332 Tokens per Sec: 12804.801366603466
Epoch Step: 35 / 138 Loss: 159.7405548095703 Tokens per Sec: 13223.951308886832
Epoch Step: 40 / 138 Loss: 32.4237060546875 Tokens per Sec: 13356.491139695214
Epoch Step: 45 / 138 Loss: 26.51853370666504 Tokens per Sec: 13455.597875598209
Epoch Step: 50 / 138 Loss: 155.91128540039062 Tokens per Sec: 12876.210809065396
Epoch Step: 55 / 138 Loss: 155.21926879882812 Tokens per Sec: 12517.501851066414
Epoch Step: 60 / 138 Loss: 160.1343231201172 Tokens per Sec: 13031.827570979305
Epoch Step: 65 / 138 Loss: 52.38031005859375 Tokens per Sec: 13703.551182513793
Epoch Step: 70 / 138 Loss: 41.12244415283203 Tokens per Sec: 13191.768230554657
Epoch Step: 75 / 138 Loss: 45.81645584106445 Tokens per Sec: 13481.329218287536
Epoch Step: 80 / 138 Loss: 93.5267562866211 Tokens per Sec: 13740.45956557126
Epoch Step: 85 / 138 Loss: 28.80144500732422 Tokens per Sec: 13349.829550080336
Epoch Step: 90 / 138 Loss: 148.7796173095703 Tokens per Sec: 12933.258442449327
Epoch Step: 95 / 138 Loss: 24.882213592529297 Tokens per Sec: 13453.788757433538
Epoch Step: 100 / 138 Loss: 52.83637237548828 Tokens per Sec: 12656.007659782334
Epoch Step: 105 / 138 Loss: 205.6899871826172 Tokens per Sec: 12880.472620220444
Epoch Step: 110 / 138 Loss: 32.33892822265625 Tokens per Sec: 12990.289733477177
Epoch Step: 115 / 138 Loss: 200.47952270507812 Tokens per Sec: 12783.946876712691
Epoch Step: 120 / 138 Loss: 39.4011116027832 Tokens per Sec: 13186.617243495888
Epoch Step: 125 / 138 Loss: 49.447776794433594 Tokens per Sec: 11519.300213615792
Epoch Step: 130 / 138 Loss: 49.592227935791016 Tokens per Sec: 12427.795604228613
Epoch Step: 135 / 138 Loss: 33.68012237548828 Tokens per Sec: 11424.83279338021
Epoch ended with duration 0:00:48.936978
Train perplexity: 2.128974746380151
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.906019
Validation perplexity: 1.9169553452793662
Epoch 54 / 1000
Epoch Step: 5 / 138 Loss: 44.82392883300781 Tokens per Sec: 13713.777626617066
Epoch Step: 10 / 138 Loss: 49.07989501953125 Tokens per Sec: 13453.53124831381
Epoch Step: 15 / 138 Loss: 86.95684814453125 Tokens per Sec: 13397.918205964676
Epoch Step: 20 / 138 Loss: 25.476518630981445 Tokens per Sec: 13882.42501975382
Epoch Step: 25 / 138 Loss: 38.359745025634766 Tokens per Sec: 13308.080199459342
Epoch Step: 30 / 138 Loss: 39.79747772216797 Tokens per Sec: 13150.3523254843
Epoch Step: 35 / 138 Loss: 43.44789123535156 Tokens per Sec: 13623.756921944805
Epoch Step: 40 / 138 Loss: 30.504350662231445 Tokens per Sec: 12637.775047301457
Epoch Step: 45 / 138 Loss: 37.124107360839844 Tokens per Sec: 13554.452138897239
Epoch Step: 50 / 138 Loss: 31.568517684936523 Tokens per Sec: 12871.691760697158
Epoch Step: 55 / 138 Loss: 55.80233383178711 Tokens per Sec: 12829.146568281534
Epoch Step: 60 / 138 Loss: 86.03767395019531 Tokens per Sec: 13508.827546991952
Epoch Step: 65 / 138 Loss: 80.66436004638672 Tokens per Sec: 13057.000316363064
Epoch Step: 70 / 138 Loss: 43.95436477661133 Tokens per Sec: 13082.243276712443
Epoch Step: 75 / 138 Loss: 106.69204711914062 Tokens per Sec: 13051.493092707655
Epoch Step: 80 / 138 Loss: 34.6411247253418 Tokens per Sec: 14009.787723097612
Epoch Step: 85 / 138 Loss: 35.52684783935547 Tokens per Sec: 13160.647389198304
Epoch Step: 90 / 138 Loss: 32.83329391479492 Tokens per Sec: 12898.877355991275
Epoch Step: 95 / 138 Loss: 29.98418426513672 Tokens per Sec: 12960.202788256722
Epoch Step: 100 / 138 Loss: 29.44077491760254 Tokens per Sec: 13724.201697690196
Epoch Step: 105 / 138 Loss: 48.9344482421875 Tokens per Sec: 11212.666431296186
Epoch Step: 110 / 138 Loss: 49.4874267578125 Tokens per Sec: 13137.929082202383
Epoch Step: 115 / 138 Loss: 33.229923248291016 Tokens per Sec: 12686.694627499133
Epoch Step: 120 / 138 Loss: 26.98941421508789 Tokens per Sec: 12327.507906190822
Epoch Step: 125 / 138 Loss: 29.95192527770996 Tokens per Sec: 12226.202903769874
Epoch Step: 130 / 138 Loss: 33.763423919677734 Tokens per Sec: 12438.100595442005
Epoch Step: 135 / 138 Loss: 43.704437255859375 Tokens per Sec: 12203.090183056822
Epoch ended with duration 0:00:48.877916
Train perplexity: 2.0331084014936724
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.981128
Validation perplexity: 2.258509496550813
Epoch 55 / 1000
Epoch Step: 5 / 138 Loss: 22.50412940979004 Tokens per Sec: 12834.861917497265
Epoch Step: 10 / 138 Loss: 46.05022430419922 Tokens per Sec: 13012.784940235504
Epoch Step: 15 / 138 Loss: 42.73264694213867 Tokens per Sec: 13857.816894331045
Epoch Step: 20 / 138 Loss: 51.03400802612305 Tokens per Sec: 13028.900560528478
Epoch Step: 25 / 138 Loss: 44.23227310180664 Tokens per Sec: 13413.765901918448
Epoch Step: 30 / 138 Loss: 24.39063835144043 Tokens per Sec: 13649.556212748768
Epoch Step: 35 / 138 Loss: 38.91337203979492 Tokens per Sec: 12708.808537223162
Epoch Step: 40 / 138 Loss: 34.30119705200195 Tokens per Sec: 13800.137460293228
Epoch Step: 45 / 138 Loss: 19.82848358154297 Tokens per Sec: 12867.508226782578
Epoch Step: 50 / 138 Loss: 28.743173599243164 Tokens per Sec: 12927.191077689304
Epoch Step: 55 / 138 Loss: 34.19862365722656 Tokens per Sec: 12993.577357585895
Epoch Step: 60 / 138 Loss: 120.17646789550781 Tokens per Sec: 13602.88433233731
Epoch Step: 65 / 138 Loss: 52.1457405090332 Tokens per Sec: 13345.144010142747
Epoch Step: 70 / 138 Loss: 25.688072204589844 Tokens per Sec: 13519.797372568617
Epoch Step: 75 / 138 Loss: 37.579620361328125 Tokens per Sec: 13600.342604434136
Epoch Step: 80 / 138 Loss: 38.964324951171875 Tokens per Sec: 13446.705438367628
Epoch Step: 85 / 138 Loss: 183.26377868652344 Tokens per Sec: 12954.022913841405
Epoch Step: 90 / 138 Loss: 45.766265869140625 Tokens per Sec: 13341.435336331784
Epoch Step: 95 / 138 Loss: 39.45780944824219 Tokens per Sec: 13377.405527869754
Epoch Step: 100 / 138 Loss: 31.88092041015625 Tokens per Sec: 12785.051307776352
Epoch Step: 105 / 138 Loss: 46.04079818725586 Tokens per Sec: 13155.692014696822
Epoch Step: 110 / 138 Loss: 41.165000915527344 Tokens per Sec: 12733.66017187741
Epoch Step: 115 / 138 Loss: 41.726287841796875 Tokens per Sec: 12264.375653823914
Epoch Step: 120 / 138 Loss: 155.85792541503906 Tokens per Sec: 12800.139605018052
Epoch Step: 125 / 138 Loss: 30.191452026367188 Tokens per Sec: 12810.833218052381
Epoch Step: 130 / 138 Loss: 37.59917068481445 Tokens per Sec: 12657.22122170146
Epoch Step: 135 / 138 Loss: 35.24718475341797 Tokens per Sec: 12785.141982141744
Epoch ended with duration 0:00:48.660682
Train perplexity: 1.9207240422229945
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.889045
Validation perplexity: 1.8977067226886724
Model saved checkpoint!
Epoch 56 / 1000
Epoch Step: 5 / 138 Loss: 152.0168914794922 Tokens per Sec: 12970.538958733407
Epoch Step: 10 / 138 Loss: 145.03724670410156 Tokens per Sec: 12696.485085694503
Epoch Step: 15 / 138 Loss: 43.77027893066406 Tokens per Sec: 12911.708622169668
Epoch Step: 20 / 138 Loss: 39.701622009277344 Tokens per Sec: 13429.408624006086
Epoch Step: 25 / 138 Loss: 43.091148376464844 Tokens per Sec: 12986.615325550642
Epoch Step: 30 / 138 Loss: 42.841224670410156 Tokens per Sec: 13770.596947643358
Epoch Step: 35 / 138 Loss: 44.754520416259766 Tokens per Sec: 12946.440610979356
Epoch Step: 40 / 138 Loss: 36.96510696411133 Tokens per Sec: 13699.636712467905
Epoch Step: 45 / 138 Loss: 30.42806625366211 Tokens per Sec: 13019.528603928335
Epoch Step: 50 / 138 Loss: 23.575437545776367 Tokens per Sec: 13835.74140513963
Epoch Step: 55 / 138 Loss: 32.48615646362305 Tokens per Sec: 12774.233047517644
Epoch Step: 60 / 138 Loss: 39.81660842895508 Tokens per Sec: 13223.482504875557
Epoch Step: 65 / 138 Loss: 37.04197692871094 Tokens per Sec: 12501.480738511831
Epoch Step: 70 / 138 Loss: 42.50720977783203 Tokens per Sec: 13468.306775874908
Epoch Step: 75 / 138 Loss: 37.58709716796875 Tokens per Sec: 13273.063019109228
Epoch Step: 80 / 138 Loss: 183.3452606201172 Tokens per Sec: 13501.671109399038
Epoch Step: 85 / 138 Loss: 37.070526123046875 Tokens per Sec: 13608.537506856412
Epoch Step: 90 / 138 Loss: 184.1261749267578 Tokens per Sec: 13363.196051950341
Epoch Step: 95 / 138 Loss: 38.981651306152344 Tokens per Sec: 13190.525159627161
Epoch Step: 100 / 138 Loss: 38.967430114746094 Tokens per Sec: 13962.154867232019
Epoch Step: 105 / 138 Loss: 37.31355667114258 Tokens per Sec: 12836.040515105478
Epoch Step: 110 / 138 Loss: 40.73702621459961 Tokens per Sec: 12715.560943941859
Epoch Step: 115 / 138 Loss: 26.999130249023438 Tokens per Sec: 13040.1305686399
Epoch Step: 120 / 138 Loss: 23.047672271728516 Tokens per Sec: 13088.05753431133
Epoch Step: 125 / 138 Loss: 116.76273345947266 Tokens per Sec: 12678.29909071363
Epoch Step: 130 / 138 Loss: 47.02130126953125 Tokens per Sec: 12903.905452261179
Epoch Step: 135 / 138 Loss: 28.46516227722168 Tokens per Sec: 11909.166897543584
Epoch ended with duration 0:00:48.595165
Train perplexity: 1.8422137145011233
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.879263
Validation perplexity: 1.7493464526667097
Epoch 57 / 1000
Epoch Step: 5 / 138 Loss: 37.7421760559082 Tokens per Sec: 13138.469205150324
Epoch Step: 10 / 138 Loss: 24.180831909179688 Tokens per Sec: 13174.555124514574
Epoch Step: 15 / 138 Loss: 42.93058776855469 Tokens per Sec: 13761.338312267351
Epoch Step: 20 / 138 Loss: 32.343788146972656 Tokens per Sec: 13058.790480307109
Epoch Step: 25 / 138 Loss: 215.05125427246094 Tokens per Sec: 12899.914594382533
Epoch Step: 30 / 138 Loss: 202.70863342285156 Tokens per Sec: 12866.827495981943
Epoch Step: 35 / 138 Loss: 45.09611129760742 Tokens per Sec: 13670.593629042858
Epoch Step: 40 / 138 Loss: 39.26061248779297 Tokens per Sec: 13650.41944230097
Epoch Step: 45 / 138 Loss: 46.89425277709961 Tokens per Sec: 13139.825553858154
Epoch Step: 50 / 138 Loss: 29.713714599609375 Tokens per Sec: 13027.383776424036
Epoch Step: 55 / 138 Loss: 24.13368034362793 Tokens per Sec: 13511.754008879756
Epoch Step: 60 / 138 Loss: 53.67470169067383 Tokens per Sec: 12867.189087537567
Epoch Step: 65 / 138 Loss: 45.078861236572266 Tokens per Sec: 13313.504490835747
Epoch Step: 70 / 138 Loss: 25.151857376098633 Tokens per Sec: 14145.330988248797
Epoch Step: 75 / 138 Loss: 233.4275665283203 Tokens per Sec: 13057.354632123262
Epoch Step: 80 / 138 Loss: 44.636653900146484 Tokens per Sec: 13095.264361807134
Epoch Step: 85 / 138 Loss: 41.961463928222656 Tokens per Sec: 13640.744635887333
Epoch Step: 90 / 138 Loss: 204.15481567382812 Tokens per Sec: 13156.648264997957
Epoch Step: 95 / 138 Loss: 28.120962142944336 Tokens per Sec: 13158.181443438918
Epoch Step: 100 / 138 Loss: 23.57908058166504 Tokens per Sec: 13019.088120073804
Epoch Step: 105 / 138 Loss: 33.53425979614258 Tokens per Sec: 11680.590255584508
Epoch Step: 110 / 138 Loss: 25.838764190673828 Tokens per Sec: 12370.963681137802
Epoch Step: 115 / 138 Loss: 39.85511016845703 Tokens per Sec: 12916.70132626052
Epoch Step: 120 / 138 Loss: 25.64457130432129 Tokens per Sec: 13083.93276547325
Epoch Step: 125 / 138 Loss: 37.9360466003418 Tokens per Sec: 13109.741028735813
Epoch Step: 130 / 138 Loss: 23.09079360961914 Tokens per Sec: 12894.37712203005
Epoch Step: 135 / 138 Loss: 39.02229690551758 Tokens per Sec: 13259.485382653895
Epoch ended with duration 0:00:48.617708
Train perplexity: 1.833967418230055
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) . METHOD_7 ( ) , } ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.972023
Validation perplexity: 2.319913770727314
Epoch 58 / 1000
Epoch Step: 5 / 138 Loss: 33.99879455566406 Tokens per Sec: 13499.667646433303
Epoch Step: 10 / 138 Loss: 30.83403205871582 Tokens per Sec: 13620.313382786302
Epoch Step: 15 / 138 Loss: 190.4921875 Tokens per Sec: 12655.977835877833
Epoch Step: 20 / 138 Loss: 39.6701774597168 Tokens per Sec: 13706.445083763883
Epoch Step: 25 / 138 Loss: 44.52226257324219 Tokens per Sec: 13220.275949007873
Epoch Step: 30 / 138 Loss: 42.06519317626953 Tokens per Sec: 13181.680796844465
Epoch Step: 35 / 138 Loss: 25.694528579711914 Tokens per Sec: 13326.922974219986
Epoch Step: 40 / 138 Loss: 26.128849029541016 Tokens per Sec: 12732.572972752232
Epoch Step: 45 / 138 Loss: 43.32351303100586 Tokens per Sec: 12941.210195366702
Epoch Step: 50 / 138 Loss: 25.665815353393555 Tokens per Sec: 13674.409710913982
Epoch Step: 55 / 138 Loss: 32.041053771972656 Tokens per Sec: 13680.293515462414
Epoch Step: 60 / 138 Loss: 184.88470458984375 Tokens per Sec: 13025.675833466692
Epoch Step: 65 / 138 Loss: 47.150123596191406 Tokens per Sec: 13793.599217080606
Epoch Step: 70 / 138 Loss: 65.47948455810547 Tokens per Sec: 12494.493069150742
Epoch Step: 75 / 138 Loss: 41.222625732421875 Tokens per Sec: 12473.4853526819
Epoch Step: 80 / 138 Loss: 32.882137298583984 Tokens per Sec: 13704.741813488317
Epoch Step: 85 / 138 Loss: 34.89651107788086 Tokens per Sec: 13160.410400769517
Epoch Step: 90 / 138 Loss: 47.31424331665039 Tokens per Sec: 13064.691237626508
Epoch Step: 95 / 138 Loss: 45.570674896240234 Tokens per Sec: 13342.789294307719
Epoch Step: 100 / 138 Loss: 28.505958557128906 Tokens per Sec: 13506.001600523572
Epoch Step: 105 / 138 Loss: 42.685970306396484 Tokens per Sec: 13187.52406730247
Epoch Step: 110 / 138 Loss: 156.70619201660156 Tokens per Sec: 12651.28754189144
Epoch Step: 115 / 138 Loss: 33.507728576660156 Tokens per Sec: 12893.322191903506
Epoch Step: 120 / 138 Loss: 50.173641204833984 Tokens per Sec: 12706.053388578644
Epoch Step: 125 / 138 Loss: 39.67021179199219 Tokens per Sec: 12977.801697217283
Epoch Step: 130 / 138 Loss: 27.00079345703125 Tokens per Sec: 12104.969212303306
Epoch Step: 135 / 138 Loss: 30.08753204345703 Tokens per Sec: 12939.085150340763
Epoch ended with duration 0:00:48.624269
Train perplexity: 1.9259355685197832
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.883142
Validation perplexity: 1.7814572783654383
Epoch 59 / 1000
Epoch Step: 5 / 138 Loss: 49.50540542602539 Tokens per Sec: 12654.240558762402
Epoch Step: 10 / 138 Loss: 25.72651481628418 Tokens per Sec: 13692.090149982901
Epoch Step: 15 / 138 Loss: 142.86669921875 Tokens per Sec: 13611.142801869593
Epoch Step: 20 / 138 Loss: 23.467071533203125 Tokens per Sec: 13541.740696729328
Epoch Step: 25 / 138 Loss: 48.45845413208008 Tokens per Sec: 13322.306075183005
Epoch Step: 30 / 138 Loss: 27.365013122558594 Tokens per Sec: 13451.93996943005
Epoch Step: 35 / 138 Loss: 24.69618797302246 Tokens per Sec: 13783.681848635233
Epoch Step: 40 / 138 Loss: 43.14520263671875 Tokens per Sec: 13308.074130975958
Epoch Step: 45 / 138 Loss: 20.86380958557129 Tokens per Sec: 12868.333157675623
Epoch Step: 50 / 138 Loss: 18.20110511779785 Tokens per Sec: 13830.425589444269
Epoch Step: 55 / 138 Loss: 28.43898582458496 Tokens per Sec: 13363.883211410324
Epoch Step: 60 / 138 Loss: 32.45412826538086 Tokens per Sec: 12971.894434980837
Epoch Step: 65 / 138 Loss: 34.4246711730957 Tokens per Sec: 12627.153517002496
Epoch Step: 70 / 138 Loss: 41.001590728759766 Tokens per Sec: 13269.192917932218
Epoch Step: 75 / 138 Loss: 52.099693298339844 Tokens per Sec: 12796.760684963809
Epoch Step: 80 / 138 Loss: 79.63362121582031 Tokens per Sec: 13220.908021539026
Epoch Step: 85 / 138 Loss: 48.226905822753906 Tokens per Sec: 12954.281872218276
Epoch Step: 90 / 138 Loss: 40.822425842285156 Tokens per Sec: 13748.480434059597
Epoch Step: 95 / 138 Loss: 48.87016296386719 Tokens per Sec: 13036.542564121293
Epoch Step: 100 / 138 Loss: 18.756391525268555 Tokens per Sec: 12923.964261387664
Epoch Step: 105 / 138 Loss: 29.240354537963867 Tokens per Sec: 13232.525262517434
Epoch Step: 110 / 138 Loss: 23.361846923828125 Tokens per Sec: 11655.664611627344
Epoch Step: 115 / 138 Loss: 26.268863677978516 Tokens per Sec: 13065.676151094458
Epoch Step: 120 / 138 Loss: 29.910581588745117 Tokens per Sec: 13157.151678708875
Epoch Step: 125 / 138 Loss: 28.133760452270508 Tokens per Sec: 12431.870295058347
Epoch Step: 130 / 138 Loss: 24.5794677734375 Tokens per Sec: 12329.237858518974
Epoch Step: 135 / 138 Loss: 38.78935241699219 Tokens per Sec: 13054.369940779252
Epoch ended with duration 0:00:48.727667
Train perplexity: 1.9414504094270426
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.918430
Validation perplexity: 1.8768989088626065
Epoch 60 / 1000
Epoch Step: 5 / 138 Loss: 23.703571319580078 Tokens per Sec: 13516.019008744053
Epoch Step: 10 / 138 Loss: 42.192298889160156 Tokens per Sec: 12716.31856763527
Epoch Step: 15 / 138 Loss: 157.2457733154297 Tokens per Sec: 13189.917981894434
Epoch Step: 20 / 138 Loss: 105.93507385253906 Tokens per Sec: 13379.059326095366
Epoch Step: 25 / 138 Loss: 126.95530700683594 Tokens per Sec: 12827.853178062911
Epoch Step: 30 / 138 Loss: 40.276615142822266 Tokens per Sec: 12979.843344955822
Epoch Step: 35 / 138 Loss: 27.836572647094727 Tokens per Sec: 13167.130538167492
Epoch Step: 40 / 138 Loss: 27.914695739746094 Tokens per Sec: 13154.694943831282
Epoch Step: 45 / 138 Loss: 40.880794525146484 Tokens per Sec: 13388.866401693536
Epoch Step: 50 / 138 Loss: 42.36653137207031 Tokens per Sec: 12982.870898233223
Epoch Step: 55 / 138 Loss: 35.229976654052734 Tokens per Sec: 12980.079025092029
Epoch Step: 60 / 138 Loss: 23.453182220458984 Tokens per Sec: 13658.126859364085
Epoch Step: 65 / 138 Loss: 22.621837615966797 Tokens per Sec: 12443.822018808574
Epoch Step: 70 / 138 Loss: 37.800758361816406 Tokens per Sec: 12885.900780147747
Epoch Step: 75 / 138 Loss: 34.01359939575195 Tokens per Sec: 14105.146904423107
Epoch Step: 80 / 138 Loss: 34.83970260620117 Tokens per Sec: 12739.095659242425
Epoch Step: 85 / 138 Loss: 25.012834548950195 Tokens per Sec: 12852.290377573632
Epoch Step: 90 / 138 Loss: 29.5087890625 Tokens per Sec: 13082.430120634397
Epoch Step: 95 / 138 Loss: 26.53923797607422 Tokens per Sec: 13673.822629999255
Epoch Step: 100 / 138 Loss: 30.229833602905273 Tokens per Sec: 13377.793075877027
Epoch Step: 105 / 138 Loss: 33.51839828491211 Tokens per Sec: 12280.359565800247
Epoch Step: 110 / 138 Loss: 27.483867645263672 Tokens per Sec: 12983.67707834482
Epoch Step: 115 / 138 Loss: 35.41977310180664 Tokens per Sec: 12406.760810019345
Epoch Step: 120 / 138 Loss: 44.34541702270508 Tokens per Sec: 12953.19004942604
Epoch Step: 125 / 138 Loss: 42.21708297729492 Tokens per Sec: 12375.666721674334
Epoch Step: 130 / 138 Loss: 96.90048217773438 Tokens per Sec: 11957.385072193973
Epoch Step: 135 / 138 Loss: 34.140625 Tokens per Sec: 12903.767705942537
Epoch ended with duration 0:00:49.096907
Train perplexity: 2.0069451707029726
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > > ( ) ; for ( long value value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:03.984608
Validation perplexity: 2.464710428551991
Model saved checkpoint!
Epoch 61 / 1000
Epoch Step: 5 / 138 Loss: 53.92823028564453 Tokens per Sec: 13222.762249590052
Epoch Step: 10 / 138 Loss: 25.961286544799805 Tokens per Sec: 13511.488643581923
Epoch Step: 15 / 138 Loss: 25.27935791015625 Tokens per Sec: 13863.695755021265
Epoch Step: 20 / 138 Loss: 136.54295349121094 Tokens per Sec: 12560.177971339408
Epoch Step: 25 / 138 Loss: 38.922306060791016 Tokens per Sec: 13387.353685400023
Epoch Step: 30 / 138 Loss: 47.35227966308594 Tokens per Sec: 13629.142017713577
Epoch Step: 35 / 138 Loss: 188.63218688964844 Tokens per Sec: 12818.735725813265
Epoch Step: 40 / 138 Loss: 43.71070098876953 Tokens per Sec: 12927.20294951913
Epoch Step: 45 / 138 Loss: 186.5409393310547 Tokens per Sec: 12905.420916426861
Epoch Step: 50 / 138 Loss: 93.78874206542969 Tokens per Sec: 13244.180136285375
Epoch Step: 55 / 138 Loss: 32.1229362487793 Tokens per Sec: 13903.431941249766
Epoch Step: 60 / 138 Loss: 41.80427551269531 Tokens per Sec: 12832.531098072088
Epoch Step: 65 / 138 Loss: 145.4923553466797 Tokens per Sec: 12382.480469402311
Epoch Step: 70 / 138 Loss: 24.436336517333984 Tokens per Sec: 12850.69124493486
Epoch Step: 75 / 138 Loss: 26.48418426513672 Tokens per Sec: 13460.027923880074
Epoch Step: 80 / 138 Loss: 31.486494064331055 Tokens per Sec: 13075.645251799326
Epoch Step: 85 / 138 Loss: 27.10080909729004 Tokens per Sec: 13281.142369446417
Epoch Step: 90 / 138 Loss: 39.22420120239258 Tokens per Sec: 13026.66451126931
Epoch Step: 95 / 138 Loss: 37.251338958740234 Tokens per Sec: 12874.00867121788
Epoch Step: 100 / 138 Loss: 31.578325271606445 Tokens per Sec: 13434.796614629662
Epoch Step: 105 / 138 Loss: 37.06327438354492 Tokens per Sec: 12923.12972847995
Epoch Step: 110 / 138 Loss: 182.97653198242188 Tokens per Sec: 12524.425907766887
Epoch Step: 115 / 138 Loss: 32.8754768371582 Tokens per Sec: 13071.811669039784
Epoch Step: 120 / 138 Loss: 42.07415008544922 Tokens per Sec: 11939.041360735988
Epoch Step: 125 / 138 Loss: 24.546863555908203 Tokens per Sec: 12824.164308414098
Epoch Step: 130 / 138 Loss: 25.586936950683594 Tokens per Sec: 13160.661455932132
Epoch Step: 135 / 138 Loss: 31.561174392700195 Tokens per Sec: 13144.172519862956
Epoch ended with duration 0:00:48.854504
Train perplexity: 1.951776850281701
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean VAR_5 ) { TYPE_5 rule rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.881254
Validation perplexity: 1.726680760596599
Epoch 62 / 1000
Epoch Step: 5 / 138 Loss: 25.895986557006836 Tokens per Sec: 13302.902031088779
Epoch Step: 10 / 138 Loss: 31.552213668823242 Tokens per Sec: 13480.817974332527
Epoch Step: 15 / 138 Loss: 41.73689270019531 Tokens per Sec: 13508.974755998383
Epoch Step: 20 / 138 Loss: 38.04924011230469 Tokens per Sec: 13195.171050655068
Epoch Step: 25 / 138 Loss: 27.27484130859375 Tokens per Sec: 13275.137053509401
Epoch Step: 30 / 138 Loss: 20.779104232788086 Tokens per Sec: 13493.566900251264
Epoch Step: 35 / 138 Loss: 17.079425811767578 Tokens per Sec: 13041.129788569904
Epoch Step: 40 / 138 Loss: 18.474794387817383 Tokens per Sec: 13219.649449261802
Epoch Step: 45 / 138 Loss: 27.559513092041016 Tokens per Sec: 12524.366060477681
Epoch Step: 50 / 138 Loss: 20.111852645874023 Tokens per Sec: 13388.888824057856
Epoch Step: 55 / 138 Loss: 24.092683792114258 Tokens per Sec: 13027.2600304526
Epoch Step: 60 / 138 Loss: 44.42684555053711 Tokens per Sec: 13118.382615607496
Epoch Step: 65 / 138 Loss: 28.465282440185547 Tokens per Sec: 13094.940913791726
Epoch Step: 70 / 138 Loss: 29.764997482299805 Tokens per Sec: 12718.476004681801
Epoch Step: 75 / 138 Loss: 36.32929992675781 Tokens per Sec: 13282.492595661814
Epoch Step: 80 / 138 Loss: 120.46244049072266 Tokens per Sec: 12886.744316299031
Epoch Step: 85 / 138 Loss: 23.321535110473633 Tokens per Sec: 13586.320125219634
Epoch Step: 90 / 138 Loss: 42.79945373535156 Tokens per Sec: 13847.74014792277
Epoch Step: 95 / 138 Loss: 38.01959228515625 Tokens per Sec: 13112.351829970312
Epoch Step: 100 / 138 Loss: 44.4461784362793 Tokens per Sec: 13095.139378486112
Epoch Step: 105 / 138 Loss: 26.287628173828125 Tokens per Sec: 10875.06052420928
Epoch Step: 110 / 138 Loss: 39.742740631103516 Tokens per Sec: 13031.179851138453
Epoch Step: 115 / 138 Loss: 26.281944274902344 Tokens per Sec: 13013.771999424924
Epoch Step: 120 / 138 Loss: 33.23431396484375 Tokens per Sec: 13273.95666509842
Epoch Step: 125 / 138 Loss: 167.61940002441406 Tokens per Sec: 12194.078947706714
Epoch Step: 130 / 138 Loss: 37.95976638793945 Tokens per Sec: 12700.096187507763
Epoch Step: 135 / 138 Loss: 205.17860412597656 Tokens per Sec: 12414.50547115475
Epoch ended with duration 0:00:48.960276
Train perplexity: 1.916946715153073
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean VAR_5 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.953409
Validation perplexity: 2.349179794178972
Epoch 63 / 1000
Epoch Step: 5 / 138 Loss: 37.963905334472656 Tokens per Sec: 13405.587624593029
Epoch Step: 10 / 138 Loss: 28.873828887939453 Tokens per Sec: 13850.998797381486
Epoch Step: 15 / 138 Loss: 46.24699783325195 Tokens per Sec: 13654.863830312075
Epoch Step: 20 / 138 Loss: 20.052942276000977 Tokens per Sec: 13003.816188606474
Epoch Step: 25 / 138 Loss: 42.554901123046875 Tokens per Sec: 12759.826541137249
Epoch Step: 30 / 138 Loss: 173.07228088378906 Tokens per Sec: 13204.133194808015
Epoch Step: 35 / 138 Loss: 44.35527801513672 Tokens per Sec: 13143.816868873995
Epoch Step: 40 / 138 Loss: 142.19618225097656 Tokens per Sec: 13530.237148320894
Epoch Step: 45 / 138 Loss: 34.144554138183594 Tokens per Sec: 12555.065915149438
Epoch Step: 50 / 138 Loss: 170.81056213378906 Tokens per Sec: 13504.181428825346
Epoch Step: 55 / 138 Loss: 35.30979537963867 Tokens per Sec: 13308.155483666957
Epoch Step: 60 / 138 Loss: 40.00199508666992 Tokens per Sec: 13485.59497077345
Epoch Step: 65 / 138 Loss: 27.07903289794922 Tokens per Sec: 13299.770936346236
Epoch Step: 70 / 138 Loss: 24.02536392211914 Tokens per Sec: 13449.916949175398
Epoch Step: 75 / 138 Loss: 23.40605354309082 Tokens per Sec: 12288.853515501643
Epoch Step: 80 / 138 Loss: 36.145668029785156 Tokens per Sec: 13929.387406220472
Epoch Step: 85 / 138 Loss: 37.2749137878418 Tokens per Sec: 13059.646184364354
Epoch Step: 90 / 138 Loss: 41.795387268066406 Tokens per Sec: 12972.050262557743
Epoch Step: 95 / 138 Loss: 158.08836364746094 Tokens per Sec: 13101.663061485193
Epoch Step: 100 / 138 Loss: 22.04769515991211 Tokens per Sec: 12752.450560476476
Epoch Step: 105 / 138 Loss: 45.53797912597656 Tokens per Sec: 11987.034962564663
Epoch Step: 110 / 138 Loss: 42.12810134887695 Tokens per Sec: 12951.68080843261
Epoch Step: 115 / 138 Loss: 29.510908126831055 Tokens per Sec: 13093.040365636536
Epoch Step: 120 / 138 Loss: 117.42774963378906 Tokens per Sec: 12734.552062739867
Epoch Step: 125 / 138 Loss: 41.19206619262695 Tokens per Sec: 12622.624889185034
Epoch Step: 130 / 138 Loss: 33.405277252197266 Tokens per Sec: 12439.569799983874
Epoch Step: 135 / 138 Loss: 24.34840965270996 Tokens per Sec: 12534.35935285515
Epoch ended with duration 0:00:48.849730
Train perplexity: 1.8984318344445794
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.889708
Validation perplexity: 1.5900862559950446
Model saved best_on_validation!
Epoch 64 / 1000
Epoch Step: 5 / 138 Loss: 23.785491943359375 Tokens per Sec: 13201.926086360028
Epoch Step: 10 / 138 Loss: 20.126361846923828 Tokens per Sec: 13017.679743025063
Epoch Step: 15 / 138 Loss: 33.54130554199219 Tokens per Sec: 13142.51542130166
Epoch Step: 20 / 138 Loss: 23.375398635864258 Tokens per Sec: 13550.140505553156
Epoch Step: 25 / 138 Loss: 35.64995193481445 Tokens per Sec: 13423.915742067273
Epoch Step: 30 / 138 Loss: 27.609811782836914 Tokens per Sec: 13431.616327372416
Epoch Step: 35 / 138 Loss: 22.256237030029297 Tokens per Sec: 12850.84537526927
Epoch Step: 40 / 138 Loss: 34.839988708496094 Tokens per Sec: 13252.188779657827
Epoch Step: 45 / 138 Loss: 30.452484130859375 Tokens per Sec: 13761.861143930568
Epoch Step: 50 / 138 Loss: 19.576414108276367 Tokens per Sec: 13522.688507451374
Epoch Step: 55 / 138 Loss: 27.44731330871582 Tokens per Sec: 13618.905168288313
Epoch Step: 60 / 138 Loss: 194.22808837890625 Tokens per Sec: 13163.61240630054
Epoch Step: 65 / 138 Loss: 33.695945739746094 Tokens per Sec: 13089.900873567176
Epoch Step: 70 / 138 Loss: 42.349876403808594 Tokens per Sec: 13398.554999976415
Epoch Step: 75 / 138 Loss: 23.03802490234375 Tokens per Sec: 13420.837380596628
Epoch Step: 80 / 138 Loss: 50.633480072021484 Tokens per Sec: 12331.32685687745
Epoch Step: 85 / 138 Loss: 47.255714416503906 Tokens per Sec: 12960.421582433388
Epoch Step: 90 / 138 Loss: 49.5728645324707 Tokens per Sec: 12298.73377740323
Epoch Step: 95 / 138 Loss: 28.7569522857666 Tokens per Sec: 13227.139024653623
Epoch Step: 100 / 138 Loss: 36.8532600402832 Tokens per Sec: 13220.467649163405
Epoch Step: 105 / 138 Loss: 28.19318389892578 Tokens per Sec: 13178.176368871173
Epoch Step: 110 / 138 Loss: 37.13401794433594 Tokens per Sec: 12615.929665271162
Epoch Step: 115 / 138 Loss: 25.02686309814453 Tokens per Sec: 12764.037663270848
Epoch Step: 120 / 138 Loss: 26.03095817565918 Tokens per Sec: 12595.176457032778
Epoch Step: 125 / 138 Loss: 182.9817657470703 Tokens per Sec: 12813.466303591491
Epoch Step: 130 / 138 Loss: 40.201210021972656 Tokens per Sec: 11950.765364487077
Epoch Step: 135 / 138 Loss: 43.85921096801758 Tokens per Sec: 12964.854744296763
Epoch ended with duration 0:00:48.820541
Train perplexity: 1.843508430999999
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.924997
Validation perplexity: 1.9364022102117766
Epoch 65 / 1000
Epoch Step: 5 / 138 Loss: 39.40730285644531 Tokens per Sec: 13579.883641461758
Epoch Step: 10 / 138 Loss: 30.05143165588379 Tokens per Sec: 12828.486570493482
Epoch Step: 15 / 138 Loss: 25.453081130981445 Tokens per Sec: 12962.325918723942
Epoch Step: 20 / 138 Loss: 26.180145263671875 Tokens per Sec: 13519.835683766512
Epoch Step: 25 / 138 Loss: 84.775146484375 Tokens per Sec: 13294.933965162107
Epoch Step: 30 / 138 Loss: 73.48846435546875 Tokens per Sec: 12468.808184301388
Epoch Step: 35 / 138 Loss: 44.91378402709961 Tokens per Sec: 12947.256431791313
Epoch Step: 40 / 138 Loss: 255.6834259033203 Tokens per Sec: 13294.40266291109
Epoch Step: 45 / 138 Loss: 41.66577911376953 Tokens per Sec: 12740.85151224127
Epoch Step: 50 / 138 Loss: 65.60562133789062 Tokens per Sec: 13781.709872530826
Epoch Step: 55 / 138 Loss: 40.239593505859375 Tokens per Sec: 12701.886108724108
Epoch Step: 60 / 138 Loss: 21.114770889282227 Tokens per Sec: 13575.52217158189
Epoch Step: 65 / 138 Loss: 38.41015625 Tokens per Sec: 13120.68875951279
Epoch Step: 70 / 138 Loss: 27.011756896972656 Tokens per Sec: 13737.648914583866
Epoch Step: 75 / 138 Loss: 21.623308181762695 Tokens per Sec: 12281.361691193735
Epoch Step: 80 / 138 Loss: 48.606590270996094 Tokens per Sec: 13113.504322341487
Epoch Step: 85 / 138 Loss: 53.342220306396484 Tokens per Sec: 13060.358470177312
Epoch Step: 90 / 138 Loss: 33.85862350463867 Tokens per Sec: 13141.726059538669
Epoch Step: 95 / 138 Loss: 41.980472564697266 Tokens per Sec: 13762.856031474465
Epoch Step: 100 / 138 Loss: 39.606815338134766 Tokens per Sec: 13540.20292205449
Epoch Step: 105 / 138 Loss: 26.372167587280273 Tokens per Sec: 11597.648897770905
Epoch Step: 110 / 138 Loss: 34.005489349365234 Tokens per Sec: 12767.04018582879
Epoch Step: 115 / 138 Loss: 180.79080200195312 Tokens per Sec: 12045.16881017615
Epoch Step: 120 / 138 Loss: 39.61593246459961 Tokens per Sec: 13205.594345523592
Epoch Step: 125 / 138 Loss: 28.462173461914062 Tokens per Sec: 13000.69001240235
Epoch Step: 130 / 138 Loss: 35.083744049072266 Tokens per Sec: 12594.694769083246
Epoch Step: 135 / 138 Loss: 39.5648307800293 Tokens per Sec: 13009.537738912026
Epoch ended with duration 0:00:48.954979
Train perplexity: 2.156187487275471
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.886278
Validation perplexity: 1.8178302366785934
Model saved checkpoint!
Epoch 66 / 1000
Epoch Step: 5 / 138 Loss: 42.60781478881836 Tokens per Sec: 13260.35874466852
Epoch Step: 10 / 138 Loss: 37.50041580200195 Tokens per Sec: 13831.1290497728
Epoch Step: 15 / 138 Loss: 34.64203643798828 Tokens per Sec: 13505.754342275472
Epoch Step: 20 / 138 Loss: 41.25907516479492 Tokens per Sec: 13591.70484735613
Epoch Step: 25 / 138 Loss: 41.619659423828125 Tokens per Sec: 13229.605428907438
Epoch Step: 30 / 138 Loss: 36.41463851928711 Tokens per Sec: 13083.569392512809
Epoch Step: 35 / 138 Loss: 21.47186279296875 Tokens per Sec: 13425.754537339957
Epoch Step: 40 / 138 Loss: 22.47195816040039 Tokens per Sec: 13118.669695506198
Epoch Step: 45 / 138 Loss: 133.31729125976562 Tokens per Sec: 12019.570415281305
Epoch Step: 50 / 138 Loss: 17.686193466186523 Tokens per Sec: 13812.347425813357
Epoch Step: 55 / 138 Loss: 29.08809471130371 Tokens per Sec: 12798.819623643887
Epoch Step: 60 / 138 Loss: 16.759450912475586 Tokens per Sec: 13751.94578208238
Epoch Step: 65 / 138 Loss: 17.33953094482422 Tokens per Sec: 13634.682044256773
Epoch Step: 70 / 138 Loss: 40.21212387084961 Tokens per Sec: 12955.026569965596
Epoch Step: 75 / 138 Loss: 21.673233032226562 Tokens per Sec: 13377.550247787609
Epoch Step: 80 / 138 Loss: 178.17202758789062 Tokens per Sec: 13371.39267667143
Epoch Step: 85 / 138 Loss: 46.78617858886719 Tokens per Sec: 13123.797037970871
Epoch Step: 90 / 138 Loss: 19.35502052307129 Tokens per Sec: 12557.715388760978
Epoch Step: 95 / 138 Loss: 30.95298194885254 Tokens per Sec: 13693.825120427076
Epoch Step: 100 / 138 Loss: 38.936161041259766 Tokens per Sec: 13146.349197119074
Epoch Step: 105 / 138 Loss: 26.13115692138672 Tokens per Sec: 12850.029502603862
Epoch Step: 110 / 138 Loss: 25.128690719604492 Tokens per Sec: 13194.407433968003
Epoch Step: 115 / 138 Loss: 24.3068904876709 Tokens per Sec: 12967.38506696098
Epoch Step: 120 / 138 Loss: 27.301239013671875 Tokens per Sec: 12642.118574068385
Epoch Step: 125 / 138 Loss: 26.322465896606445 Tokens per Sec: 12784.816819353535
Epoch Step: 130 / 138 Loss: 26.660133361816406 Tokens per Sec: 12803.058895349739
Epoch Step: 135 / 138 Loss: 23.82619857788086 Tokens per Sec: 12684.064695340425
Epoch ended with duration 0:00:48.628285
Train perplexity: 1.6746588355445844
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.894944
Validation perplexity: 1.7939882853059401
Epoch 67 / 1000
Epoch Step: 5 / 138 Loss: 22.321834564208984 Tokens per Sec: 13234.107577963332
Epoch Step: 10 / 138 Loss: 18.206375122070312 Tokens per Sec: 13640.080704407885
Epoch Step: 15 / 138 Loss: 33.637874603271484 Tokens per Sec: 13213.85853835603
Epoch Step: 20 / 138 Loss: 41.73688507080078 Tokens per Sec: 13404.051717557442
Epoch Step: 25 / 138 Loss: 23.341712951660156 Tokens per Sec: 12926.53185894103
Epoch Step: 30 / 138 Loss: 35.1743049621582 Tokens per Sec: 13494.327344870806
Epoch Step: 35 / 138 Loss: 20.2177677154541 Tokens per Sec: 13263.121388757421
Epoch Step: 40 / 138 Loss: 30.5259952545166 Tokens per Sec: 12565.379335557978
Epoch Step: 45 / 138 Loss: 39.218475341796875 Tokens per Sec: 12762.92245435229
Epoch Step: 50 / 138 Loss: 28.246217727661133 Tokens per Sec: 13866.264158011703
Epoch Step: 55 / 138 Loss: 29.934293746948242 Tokens per Sec: 12929.451670982431
Epoch Step: 60 / 138 Loss: 43.223365783691406 Tokens per Sec: 13222.217461120563
Epoch Step: 65 / 138 Loss: 212.91494750976562 Tokens per Sec: 12764.737818097456
Epoch Step: 70 / 138 Loss: 39.66627502441406 Tokens per Sec: 12828.368773538697
Epoch Step: 75 / 138 Loss: 19.767366409301758 Tokens per Sec: 13697.555683308876
Epoch Step: 80 / 138 Loss: 26.93657112121582 Tokens per Sec: 14016.085776506163
Epoch Step: 85 / 138 Loss: 23.203102111816406 Tokens per Sec: 12740.06891104107
Epoch Step: 90 / 138 Loss: 22.764650344848633 Tokens per Sec: 14113.800293955115
Epoch Step: 95 / 138 Loss: 36.01190185546875 Tokens per Sec: 13315.869231428816
Epoch Step: 100 / 138 Loss: 24.579769134521484 Tokens per Sec: 13552.80577189193
Epoch Step: 105 / 138 Loss: 28.051349639892578 Tokens per Sec: 12394.637109187872
Epoch Step: 110 / 138 Loss: 34.838409423828125 Tokens per Sec: 12795.391178741549
Epoch Step: 115 / 138 Loss: 36.75630569458008 Tokens per Sec: 13092.722747822148
Epoch Step: 120 / 138 Loss: 31.551513671875 Tokens per Sec: 12570.365496891847
Epoch Step: 125 / 138 Loss: 31.184757232666016 Tokens per Sec: 11958.57384433424
Epoch Step: 130 / 138 Loss: 33.118492126464844 Tokens per Sec: 12823.511684400053
Epoch Step: 135 / 138 Loss: 177.4877166748047 Tokens per Sec: 12728.060149812067
Epoch ended with duration 0:00:48.683329
Train perplexity: 1.750652886947397
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.956106
Validation perplexity: 1.9894668221801886
Epoch 68 / 1000
Epoch Step: 5 / 138 Loss: 22.957115173339844 Tokens per Sec: 13162.95068256512
Epoch Step: 10 / 138 Loss: 34.566864013671875 Tokens per Sec: 13417.694518080509
Epoch Step: 15 / 138 Loss: 34.76568603515625 Tokens per Sec: 13729.130033550924
Epoch Step: 20 / 138 Loss: 139.67578125 Tokens per Sec: 13014.376211317876
Epoch Step: 25 / 138 Loss: 38.131675720214844 Tokens per Sec: 12662.312389127119
Epoch Step: 30 / 138 Loss: 29.53757667541504 Tokens per Sec: 13006.420158943818
Epoch Step: 35 / 138 Loss: 40.01762008666992 Tokens per Sec: 13364.118944840337
Epoch Step: 40 / 138 Loss: 20.099952697753906 Tokens per Sec: 13232.885395342737
Epoch Step: 45 / 138 Loss: 34.5578727722168 Tokens per Sec: 12871.013056050255
Epoch Step: 50 / 138 Loss: 26.02661895751953 Tokens per Sec: 13345.796680393587
Epoch Step: 55 / 138 Loss: 30.65183448791504 Tokens per Sec: 13787.919770704195
Epoch Step: 60 / 138 Loss: 23.296798706054688 Tokens per Sec: 13901.400657529523
Epoch Step: 65 / 138 Loss: 29.749650955200195 Tokens per Sec: 13841.916141053609
Epoch Step: 70 / 138 Loss: 19.268465042114258 Tokens per Sec: 13255.997789290579
Epoch Step: 75 / 138 Loss: 228.72164916992188 Tokens per Sec: 12800.257785997223
Epoch Step: 80 / 138 Loss: 20.230194091796875 Tokens per Sec: 12690.501904324874
Epoch Step: 85 / 138 Loss: 21.991540908813477 Tokens per Sec: 13072.384636921932
Epoch Step: 90 / 138 Loss: 37.97637939453125 Tokens per Sec: 13097.294892308804
Epoch Step: 95 / 138 Loss: 87.06725311279297 Tokens per Sec: 13320.060239517074
Epoch Step: 100 / 138 Loss: 19.585697174072266 Tokens per Sec: 13091.307907468097
Epoch Step: 105 / 138 Loss: 39.525577545166016 Tokens per Sec: 12449.033524206798
Epoch Step: 110 / 138 Loss: 27.03003692626953 Tokens per Sec: 12725.41034411217
Epoch Step: 115 / 138 Loss: 20.60215950012207 Tokens per Sec: 12390.805076310236
Epoch Step: 120 / 138 Loss: 28.96712875366211 Tokens per Sec: 12119.914887902301
Epoch Step: 125 / 138 Loss: 26.747804641723633 Tokens per Sec: 12967.584360151204
Epoch Step: 130 / 138 Loss: 28.163461685180664 Tokens per Sec: 12824.464374586958
Epoch Step: 135 / 138 Loss: 23.433813095092773 Tokens per Sec: 13099.362324193546
Epoch ended with duration 0:00:48.787972
Train perplexity: 1.8322075570049894
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.976227
Validation perplexity: 2.2178016497773965
Epoch 69 / 1000
Epoch Step: 5 / 138 Loss: 21.700407028198242 Tokens per Sec: 13100.16855218152
Epoch Step: 10 / 138 Loss: 37.88710403442383 Tokens per Sec: 13366.414278109869
Epoch Step: 15 / 138 Loss: 32.51421356201172 Tokens per Sec: 13359.679222013927
Epoch Step: 20 / 138 Loss: 26.51309585571289 Tokens per Sec: 13062.404433061773
Epoch Step: 25 / 138 Loss: 30.329675674438477 Tokens per Sec: 12757.831226172608
Epoch Step: 30 / 138 Loss: 119.1142349243164 Tokens per Sec: 13652.743456258679
Epoch Step: 35 / 138 Loss: 21.091781616210938 Tokens per Sec: 13273.333538850064
Epoch Step: 40 / 138 Loss: 34.010433197021484 Tokens per Sec: 13226.481197666739
Epoch Step: 45 / 138 Loss: 35.410499572753906 Tokens per Sec: 13111.307033081266
Epoch Step: 50 / 138 Loss: 46.83307647705078 Tokens per Sec: 13719.082691455687
Epoch Step: 55 / 138 Loss: 17.018774032592773 Tokens per Sec: 13283.535152941233
Epoch Step: 60 / 138 Loss: 34.214725494384766 Tokens per Sec: 13483.259463601189
Epoch Step: 65 / 138 Loss: 41.27992630004883 Tokens per Sec: 13196.469244562884
Epoch Step: 70 / 138 Loss: 22.751802444458008 Tokens per Sec: 13365.713343318244
Epoch Step: 75 / 138 Loss: 23.31377601623535 Tokens per Sec: 12961.077902823328
Epoch Step: 80 / 138 Loss: 185.55282592773438 Tokens per Sec: 12953.61414357537
Epoch Step: 85 / 138 Loss: 24.349653244018555 Tokens per Sec: 13232.828068936053
Epoch Step: 90 / 138 Loss: 24.86424446105957 Tokens per Sec: 13914.150743987364
Epoch Step: 95 / 138 Loss: 18.719087600708008 Tokens per Sec: 13573.841852248941
Epoch Step: 100 / 138 Loss: 34.49441146850586 Tokens per Sec: 13161.299753131849
Epoch Step: 105 / 138 Loss: 131.33876037597656 Tokens per Sec: 12280.494750151063
Epoch Step: 110 / 138 Loss: 39.564456939697266 Tokens per Sec: 12164.270571045972
Epoch Step: 115 / 138 Loss: 43.66147994995117 Tokens per Sec: 13022.333646445892
Epoch Step: 120 / 138 Loss: 188.44296264648438 Tokens per Sec: 12843.133619903538
Epoch Step: 125 / 138 Loss: 38.81365203857422 Tokens per Sec: 13119.576521094445
Epoch Step: 130 / 138 Loss: 33.90888977050781 Tokens per Sec: 12955.165958422998
Epoch Step: 135 / 138 Loss: 41.37253189086914 Tokens per Sec: 13041.33059915086
Epoch ended with duration 0:00:48.516521
Train perplexity: 1.6452195092541881
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , VAR_4 , boolean VAR_5 ) { TYPE_5 rule rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . e.toString ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.884418
Validation perplexity: 1.6699963659850299
Epoch 70 / 1000
Epoch Step: 5 / 138 Loss: 21.064109802246094 Tokens per Sec: 12896.371587354255
Epoch Step: 10 / 138 Loss: 36.63665008544922 Tokens per Sec: 13173.019827328326
Epoch Step: 15 / 138 Loss: 42.96202850341797 Tokens per Sec: 13407.108940307346
Epoch Step: 20 / 138 Loss: 23.262418746948242 Tokens per Sec: 13115.887472992661
Epoch Step: 25 / 138 Loss: 24.59967803955078 Tokens per Sec: 13365.037585156846
Epoch Step: 30 / 138 Loss: 15.751511573791504 Tokens per Sec: 13028.303286958551
Epoch Step: 35 / 138 Loss: 35.93803024291992 Tokens per Sec: 12855.605935259571
Epoch Step: 40 / 138 Loss: 34.21904754638672 Tokens per Sec: 13281.979228616781
Epoch Step: 45 / 138 Loss: 47.20841598510742 Tokens per Sec: 13677.60515135468
Epoch Step: 50 / 138 Loss: 47.524898529052734 Tokens per Sec: 13743.295516882383
Epoch Step: 55 / 138 Loss: 38.29963684082031 Tokens per Sec: 13302.425953234337
Epoch Step: 60 / 138 Loss: 25.780126571655273 Tokens per Sec: 12900.882580520287
Epoch Step: 65 / 138 Loss: 29.35796546936035 Tokens per Sec: 13128.996393590593
Epoch Step: 70 / 138 Loss: 235.18630981445312 Tokens per Sec: 12536.919378492326
Epoch Step: 75 / 138 Loss: 31.763702392578125 Tokens per Sec: 12863.164176538523
Epoch Step: 80 / 138 Loss: 32.9941520690918 Tokens per Sec: 13978.184320903065
Epoch Step: 85 / 138 Loss: 29.31331443786621 Tokens per Sec: 13050.06080720593
Epoch Step: 90 / 138 Loss: 29.058883666992188 Tokens per Sec: 13355.38350573928
Epoch Step: 95 / 138 Loss: 42.36100387573242 Tokens per Sec: 12718.188477586053
Epoch Step: 100 / 138 Loss: 21.12861442565918 Tokens per Sec: 13631.702128351231
Epoch Step: 105 / 138 Loss: 28.178977966308594 Tokens per Sec: 12915.737983922589
Epoch Step: 110 / 138 Loss: 29.176471710205078 Tokens per Sec: 12525.576430101863
Epoch Step: 115 / 138 Loss: 27.885704040527344 Tokens per Sec: 12444.996573128881
Epoch Step: 120 / 138 Loss: 32.039676666259766 Tokens per Sec: 13326.676229837394
Epoch Step: 125 / 138 Loss: 32.9388427734375 Tokens per Sec: 12436.294003695613
Epoch Step: 130 / 138 Loss: 23.805036544799805 Tokens per Sec: 11998.413454110983
Epoch Step: 135 / 138 Loss: 26.319679260253906 Tokens per Sec: 13065.40100317936
Epoch ended with duration 0:00:48.801239
Train perplexity: 1.8051421125675382
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.894317
Validation perplexity: 1.7083325836433383
Model saved checkpoint!
Epoch 71 / 1000
Epoch Step: 5 / 138 Loss: 15.801492691040039 Tokens per Sec: 13150.77136787083
Epoch Step: 10 / 138 Loss: 35.948585510253906 Tokens per Sec: 13487.384098308883
Epoch Step: 15 / 138 Loss: 19.169179916381836 Tokens per Sec: 13744.14374328294
Epoch Step: 20 / 138 Loss: 24.393476486206055 Tokens per Sec: 13088.610087211315
Epoch Step: 25 / 138 Loss: 27.282943725585938 Tokens per Sec: 12820.603397203255
Epoch Step: 30 / 138 Loss: 22.576419830322266 Tokens per Sec: 13790.721329065671
Epoch Step: 35 / 138 Loss: 31.321990966796875 Tokens per Sec: 13185.089314527957
Epoch Step: 40 / 138 Loss: 23.21179962158203 Tokens per Sec: 13402.11565217524
Epoch Step: 45 / 138 Loss: 24.003625869750977 Tokens per Sec: 12633.245081755273
Epoch Step: 50 / 138 Loss: 23.768024444580078 Tokens per Sec: 13483.174732504278
Epoch Step: 55 / 138 Loss: 23.657546997070312 Tokens per Sec: 13352.219209708943
Epoch Step: 60 / 138 Loss: 207.94882202148438 Tokens per Sec: 13088.98197341385
Epoch Step: 65 / 138 Loss: 210.77223205566406 Tokens per Sec: 12999.822811345028
Epoch Step: 70 / 138 Loss: 33.69445037841797 Tokens per Sec: 12972.755069768566
Epoch Step: 75 / 138 Loss: 30.924081802368164 Tokens per Sec: 13614.689338254719
Epoch Step: 80 / 138 Loss: 26.313085556030273 Tokens per Sec: 13472.873476311801
Epoch Step: 85 / 138 Loss: 44.34084701538086 Tokens per Sec: 13351.725993660668
Epoch Step: 90 / 138 Loss: 131.36614990234375 Tokens per Sec: 12366.329048264184
Epoch Step: 95 / 138 Loss: 22.861980438232422 Tokens per Sec: 12226.938004348485
Epoch Step: 100 / 138 Loss: 29.965768814086914 Tokens per Sec: 13805.877211261106
Epoch Step: 105 / 138 Loss: 179.02850341796875 Tokens per Sec: 12549.987965590904
Epoch Step: 110 / 138 Loss: 186.70037841796875 Tokens per Sec: 12903.086388574031
Epoch Step: 115 / 138 Loss: 24.075668334960938 Tokens per Sec: 11839.444809058556
Epoch Step: 120 / 138 Loss: 24.65428924560547 Tokens per Sec: 12747.40715135416
Epoch Step: 125 / 138 Loss: 19.314239501953125 Tokens per Sec: 12780.23649603046
Epoch Step: 130 / 138 Loss: 116.74889373779297 Tokens per Sec: 12640.71937277274
Epoch Step: 135 / 138 Loss: 25.231245040893555 Tokens per Sec: 12898.133111653764
Epoch ended with duration 0:00:48.884694
Train perplexity: 1.894245760056315
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.969175
Validation perplexity: 2.0595409841390517
Epoch 72 / 1000
Epoch Step: 5 / 138 Loss: 38.885128021240234 Tokens per Sec: 13445.553898939033
Epoch Step: 10 / 138 Loss: 21.564302444458008 Tokens per Sec: 12808.2805028272
Epoch Step: 15 / 138 Loss: 27.833293914794922 Tokens per Sec: 13209.269014812415
Epoch Step: 20 / 138 Loss: 27.78066635131836 Tokens per Sec: 13287.861554843863
Epoch Step: 25 / 138 Loss: 33.3155517578125 Tokens per Sec: 13611.400936416356
Epoch Step: 30 / 138 Loss: 34.048892974853516 Tokens per Sec: 13228.177263445632
Epoch Step: 35 / 138 Loss: 19.826807022094727 Tokens per Sec: 13616.18268526224
Epoch Step: 40 / 138 Loss: 24.89752960205078 Tokens per Sec: 13844.991169840017
Epoch Step: 45 / 138 Loss: 28.542238235473633 Tokens per Sec: 12229.668907310617
Epoch Step: 50 / 138 Loss: 122.27308654785156 Tokens per Sec: 13464.19439475743
Epoch Step: 55 / 138 Loss: 37.28703689575195 Tokens per Sec: 13447.183458159163
Epoch Step: 60 / 138 Loss: 33.93665313720703 Tokens per Sec: 12999.685911805609
Epoch Step: 65 / 138 Loss: 25.964733123779297 Tokens per Sec: 13332.51069396948
Epoch Step: 70 / 138 Loss: 101.7606430053711 Tokens per Sec: 13110.209052218906
Epoch Step: 75 / 138 Loss: 19.320844650268555 Tokens per Sec: 13724.182527024832
Epoch Step: 80 / 138 Loss: 130.16806030273438 Tokens per Sec: 12768.406974064847
Epoch Step: 85 / 138 Loss: 30.654054641723633 Tokens per Sec: 12087.679189495573
Epoch Step: 90 / 138 Loss: 39.346160888671875 Tokens per Sec: 13563.661957374004
Epoch Step: 95 / 138 Loss: 38.423614501953125 Tokens per Sec: 13223.069043870388
Epoch Step: 100 / 138 Loss: 19.948244094848633 Tokens per Sec: 13082.772122645049
Epoch Step: 105 / 138 Loss: 32.3900146484375 Tokens per Sec: 13273.760799371872
Epoch Step: 110 / 138 Loss: 33.675045013427734 Tokens per Sec: 12586.63223406947
Epoch Step: 115 / 138 Loss: 223.99441528320312 Tokens per Sec: 13078.589477442087
Epoch Step: 120 / 138 Loss: 26.01392936706543 Tokens per Sec: 12273.96159957253
Epoch Step: 125 / 138 Loss: 22.476396560668945 Tokens per Sec: 11524.706936121334
Epoch Step: 130 / 138 Loss: 24.216413497924805 Tokens per Sec: 12815.489835427055
Epoch Step: 135 / 138 Loss: 27.189727783203125 Tokens per Sec: 12582.850084573904
Epoch ended with duration 0:00:48.849973
Train perplexity: 1.8050345666045353
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.955576
Validation perplexity: 1.6967284138496415
Epoch 73 / 1000
Epoch Step: 5 / 138 Loss: 19.083251953125 Tokens per Sec: 13107.644417443385
Epoch Step: 10 / 138 Loss: 29.138545989990234 Tokens per Sec: 13652.29859795377
Epoch Step: 15 / 138 Loss: 33.28538131713867 Tokens per Sec: 13346.596163547096
Epoch Step: 20 / 138 Loss: 28.482608795166016 Tokens per Sec: 12954.88060590515
Epoch Step: 25 / 138 Loss: 119.32160949707031 Tokens per Sec: 13394.31713948597
Epoch Step: 30 / 138 Loss: 17.1319637298584 Tokens per Sec: 14086.140087892101
Epoch Step: 35 / 138 Loss: 19.4285831451416 Tokens per Sec: 12072.85269986787
Epoch Step: 40 / 138 Loss: 142.0128631591797 Tokens per Sec: 13513.979807827362
Epoch Step: 45 / 138 Loss: 40.08887481689453 Tokens per Sec: 13437.367221096029
Epoch Step: 50 / 138 Loss: 25.48883628845215 Tokens per Sec: 13347.433450480376
Epoch Step: 55 / 138 Loss: 35.41678237915039 Tokens per Sec: 12502.94186647416
Epoch Step: 60 / 138 Loss: 38.260276794433594 Tokens per Sec: 13440.482593064939
Epoch Step: 65 / 138 Loss: 24.401330947875977 Tokens per Sec: 13298.416468121104
Epoch Step: 70 / 138 Loss: 30.798810958862305 Tokens per Sec: 12647.112175690918
Epoch Step: 75 / 138 Loss: 76.61162567138672 Tokens per Sec: 13361.245879422024
Epoch Step: 80 / 138 Loss: 26.737228393554688 Tokens per Sec: 13151.391762602243
Epoch Step: 85 / 138 Loss: 20.220468521118164 Tokens per Sec: 13358.34501586762
Epoch Step: 90 / 138 Loss: 20.75017547607422 Tokens per Sec: 13094.2501927157
Epoch Step: 95 / 138 Loss: 31.880115509033203 Tokens per Sec: 12739.859312301016
Epoch Step: 100 / 138 Loss: 21.289026260375977 Tokens per Sec: 12753.269476745338
Epoch Step: 105 / 138 Loss: 21.055259704589844 Tokens per Sec: 12637.324524865142
Epoch Step: 110 / 138 Loss: 28.012712478637695 Tokens per Sec: 12959.83432328507
Epoch Step: 115 / 138 Loss: 25.077301025390625 Tokens per Sec: 12874.265776777838
Epoch Step: 120 / 138 Loss: 30.60036849975586 Tokens per Sec: 12338.987429034823
Epoch Step: 125 / 138 Loss: 21.743501663208008 Tokens per Sec: 12363.589466745041
Epoch Step: 130 / 138 Loss: 23.531970977783203 Tokens per Sec: 13027.456847149462
Epoch Step: 135 / 138 Loss: 110.36569213867188 Tokens per Sec: 13038.006756501662
Epoch ended with duration 0:00:48.845123
Train perplexity: 1.7716977687192006
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.888992
Validation perplexity: 1.6939116334744513
Epoch 74 / 1000
Epoch Step: 5 / 138 Loss: 37.59536361694336 Tokens per Sec: 13336.937875700853
Epoch Step: 10 / 138 Loss: 28.25985336303711 Tokens per Sec: 13691.097397287946
Epoch Step: 15 / 138 Loss: 158.26722717285156 Tokens per Sec: 13069.922003602102
Epoch Step: 20 / 138 Loss: 16.96743392944336 Tokens per Sec: 13826.648622405866
Epoch Step: 25 / 138 Loss: 28.746957778930664 Tokens per Sec: 13157.615381312013
Epoch Step: 30 / 138 Loss: 23.200145721435547 Tokens per Sec: 13422.15375811478
Epoch Step: 35 / 138 Loss: 28.575443267822266 Tokens per Sec: 13159.00601890185
Epoch Step: 40 / 138 Loss: 29.378877639770508 Tokens per Sec: 13591.159713215418
Epoch Step: 45 / 138 Loss: 19.401124954223633 Tokens per Sec: 13394.432380180864
Epoch Step: 50 / 138 Loss: 26.61622428894043 Tokens per Sec: 13350.389628036864
Epoch Step: 55 / 138 Loss: 98.0208740234375 Tokens per Sec: 12713.412384824494
Epoch Step: 60 / 138 Loss: 31.840274810791016 Tokens per Sec: 12972.574971483467
Epoch Step: 65 / 138 Loss: 38.89707946777344 Tokens per Sec: 12621.392088243325
Epoch Step: 70 / 138 Loss: 190.56265258789062 Tokens per Sec: 12493.764193771472
Epoch Step: 75 / 138 Loss: 30.483903884887695 Tokens per Sec: 13480.99342537973
Epoch Step: 80 / 138 Loss: 31.2075138092041 Tokens per Sec: 12854.2763590689
Epoch Step: 85 / 138 Loss: 17.86785888671875 Tokens per Sec: 12843.23391796544
Epoch Step: 90 / 138 Loss: 22.072463989257812 Tokens per Sec: 13621.16504580051
Epoch Step: 95 / 138 Loss: 165.2526092529297 Tokens per Sec: 12056.29386828273
Epoch Step: 100 / 138 Loss: 33.566287994384766 Tokens per Sec: 12666.872228917126
Epoch Step: 105 / 138 Loss: 28.561628341674805 Tokens per Sec: 12537.090574595628
Epoch Step: 110 / 138 Loss: 33.21914291381836 Tokens per Sec: 12964.49609304333
Epoch Step: 115 / 138 Loss: 28.698047637939453 Tokens per Sec: 12413.375698063455
Epoch Step: 120 / 138 Loss: 17.635717391967773 Tokens per Sec: 12011.274312047964
Epoch Step: 125 / 138 Loss: 30.870834350585938 Tokens per Sec: 13183.918353238503
Epoch Step: 130 / 138 Loss: 20.630176544189453 Tokens per Sec: 12555.964521204156
Epoch Step: 135 / 138 Loss: 23.582433700561523 Tokens per Sec: 12604.872018546088
Epoch ended with duration 0:00:49.103755
Train perplexity: 1.8690699862866889
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.862228
Validation perplexity: 1.491139519561657
Model saved best_on_validation!
Epoch 75 / 1000
Epoch Step: 5 / 138 Loss: 17.529685974121094 Tokens per Sec: 13267.72105910458
Epoch Step: 10 / 138 Loss: 28.040645599365234 Tokens per Sec: 13147.312695325605
Epoch Step: 15 / 138 Loss: 42.35020065307617 Tokens per Sec: 12330.151919371876
Epoch Step: 20 / 138 Loss: 24.648983001708984 Tokens per Sec: 13466.735981989075
Epoch Step: 25 / 138 Loss: 28.522754669189453 Tokens per Sec: 13153.876064900931
Epoch Step: 30 / 138 Loss: 180.30953979492188 Tokens per Sec: 12404.751174473193
Epoch Step: 35 / 138 Loss: 25.043922424316406 Tokens per Sec: 13549.040074664088
Epoch Step: 40 / 138 Loss: 18.805774688720703 Tokens per Sec: 13151.55118365277
Epoch Step: 45 / 138 Loss: 22.016021728515625 Tokens per Sec: 12940.450279038701
Epoch Step: 50 / 138 Loss: 15.77310848236084 Tokens per Sec: 13023.199209346432
Epoch Step: 55 / 138 Loss: 25.401939392089844 Tokens per Sec: 13284.26649443055
Epoch Step: 60 / 138 Loss: 36.14445877075195 Tokens per Sec: 13445.268751351961
Epoch Step: 65 / 138 Loss: 19.837575912475586 Tokens per Sec: 13212.386114491705
Epoch Step: 70 / 138 Loss: 23.2788143157959 Tokens per Sec: 12991.84537242082
Epoch Step: 75 / 138 Loss: 15.960594177246094 Tokens per Sec: 12732.740465618379
Epoch Step: 80 / 138 Loss: 28.69426918029785 Tokens per Sec: 12862.653751521304
Epoch Step: 85 / 138 Loss: 28.055028915405273 Tokens per Sec: 13613.722368776285
Epoch Step: 90 / 138 Loss: 193.52772521972656 Tokens per Sec: 13140.465760984196
Epoch Step: 95 / 138 Loss: 31.115488052368164 Tokens per Sec: 13759.515391116638
Epoch Step: 100 / 138 Loss: 20.518882751464844 Tokens per Sec: 13282.639679123035
Epoch Step: 105 / 138 Loss: 22.722570419311523 Tokens per Sec: 12746.110172290231
Epoch Step: 110 / 138 Loss: 24.910213470458984 Tokens per Sec: 12855.645996074487
Epoch Step: 115 / 138 Loss: 21.489177703857422 Tokens per Sec: 12725.534671250036
Epoch Step: 120 / 138 Loss: 22.630449295043945 Tokens per Sec: 12898.006944063622
Epoch Step: 125 / 138 Loss: 19.483402252197266 Tokens per Sec: 13053.66101543403
Epoch Step: 130 / 138 Loss: 28.781044006347656 Tokens per Sec: 12764.774823259471
Epoch Step: 135 / 138 Loss: 27.29132843017578 Tokens per Sec: 11878.872079089504
Epoch ended with duration 0:00:49.012866
Train perplexity: 1.8398205574455122
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.922035
Validation perplexity: 1.777922958554222
Model saved checkpoint!
Epoch 76 / 1000
Epoch Step: 5 / 138 Loss: 32.785037994384766 Tokens per Sec: 13026.270740258356
Epoch Step: 10 / 138 Loss: 26.399324417114258 Tokens per Sec: 12935.332627321512
Epoch Step: 15 / 138 Loss: 166.14608764648438 Tokens per Sec: 13635.52017794623
Epoch Step: 20 / 138 Loss: 172.75953674316406 Tokens per Sec: 12704.240387408488
Epoch Step: 25 / 138 Loss: 24.92808723449707 Tokens per Sec: 13491.556955935035
Epoch Step: 30 / 138 Loss: 176.43406677246094 Tokens per Sec: 12876.306750441701
Epoch Step: 35 / 138 Loss: 25.724653244018555 Tokens per Sec: 12808.447514825999
Epoch Step: 40 / 138 Loss: 17.036426544189453 Tokens per Sec: 13045.632601244128
Epoch Step: 45 / 138 Loss: 41.05121612548828 Tokens per Sec: 13630.193850069649
Epoch Step: 50 / 138 Loss: 38.9355583190918 Tokens per Sec: 13353.424672323805
Epoch Step: 55 / 138 Loss: 22.134902954101562 Tokens per Sec: 13330.186130579237
Epoch Step: 60 / 138 Loss: 40.43727111816406 Tokens per Sec: 13122.455459471888
Epoch Step: 65 / 138 Loss: 26.310720443725586 Tokens per Sec: 12507.994694644707
Epoch Step: 70 / 138 Loss: 23.1595458984375 Tokens per Sec: 12494.983565510456
Epoch Step: 75 / 138 Loss: 37.7508430480957 Tokens per Sec: 13554.243751452306
Epoch Step: 80 / 138 Loss: 29.725419998168945 Tokens per Sec: 12981.696980395607
Epoch Step: 85 / 138 Loss: 19.79828453063965 Tokens per Sec: 14181.63907417925
Epoch Step: 90 / 138 Loss: 29.91457176208496 Tokens per Sec: 13329.968213137345
Epoch Step: 95 / 138 Loss: 94.84477996826172 Tokens per Sec: 13730.386413351263
Epoch Step: 100 / 138 Loss: 35.904632568359375 Tokens per Sec: 13295.19671847353
Epoch Step: 105 / 138 Loss: 32.32963180541992 Tokens per Sec: 12583.424193531955
Epoch Step: 110 / 138 Loss: 29.831623077392578 Tokens per Sec: 12704.920847933903
Epoch Step: 115 / 138 Loss: 21.818471908569336 Tokens per Sec: 12751.959258454503
Epoch Step: 120 / 138 Loss: 30.030235290527344 Tokens per Sec: 13133.960369126484
Epoch Step: 125 / 138 Loss: 32.915889739990234 Tokens per Sec: 12678.515217316366
Epoch Step: 130 / 138 Loss: 26.152099609375 Tokens per Sec: 12398.669352864756
Epoch Step: 135 / 138 Loss: 31.983367919921875 Tokens per Sec: 12082.188029211666
Epoch ended with duration 0:00:48.903797
Train perplexity: 1.81522704911743
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.924186
Validation perplexity: 1.7972405609443758
Epoch 77 / 1000
Epoch Step: 5 / 138 Loss: 28.702152252197266 Tokens per Sec: 12980.539339478344
Epoch Step: 10 / 138 Loss: 19.552207946777344 Tokens per Sec: 13822.470077622642
Epoch Step: 15 / 138 Loss: 27.18853759765625 Tokens per Sec: 13264.622968227312
Epoch Step: 20 / 138 Loss: 25.700143814086914 Tokens per Sec: 13254.113511776166
Epoch Step: 25 / 138 Loss: 36.185115814208984 Tokens per Sec: 12781.169667468279
Epoch Step: 30 / 138 Loss: 30.516244888305664 Tokens per Sec: 14175.624843857373
Epoch Step: 35 / 138 Loss: 30.59853744506836 Tokens per Sec: 13503.523242701962
Epoch Step: 40 / 138 Loss: 23.541229248046875 Tokens per Sec: 13246.540208931989
Epoch Step: 45 / 138 Loss: 19.702991485595703 Tokens per Sec: 13149.473431824543
Epoch Step: 50 / 138 Loss: 23.348663330078125 Tokens per Sec: 13661.38925171293
Epoch Step: 55 / 138 Loss: 35.879188537597656 Tokens per Sec: 12857.450792298252
Epoch Step: 60 / 138 Loss: 34.7730598449707 Tokens per Sec: 13258.557774964504
Epoch Step: 65 / 138 Loss: 34.871734619140625 Tokens per Sec: 12878.091858213123
Epoch Step: 70 / 138 Loss: 20.182418823242188 Tokens per Sec: 13545.414285763825
Epoch Step: 75 / 138 Loss: 26.21418571472168 Tokens per Sec: 13775.529146261028
Epoch Step: 80 / 138 Loss: 37.33406066894531 Tokens per Sec: 12683.812423411659
Epoch Step: 85 / 138 Loss: 13.425302505493164 Tokens per Sec: 13391.69179948859
Epoch Step: 90 / 138 Loss: 31.45838737487793 Tokens per Sec: 13154.033083492026
Epoch Step: 95 / 138 Loss: 32.495609283447266 Tokens per Sec: 13280.999124395941
Epoch Step: 100 / 138 Loss: 26.56603240966797 Tokens per Sec: 12759.142367166933
Epoch Step: 105 / 138 Loss: 30.594133377075195 Tokens per Sec: 12854.330331077526
Epoch Step: 110 / 138 Loss: 20.946636199951172 Tokens per Sec: 12617.457023145556
Epoch Step: 115 / 138 Loss: 35.449310302734375 Tokens per Sec: 12971.297123777189
Epoch Step: 120 / 138 Loss: 19.117328643798828 Tokens per Sec: 12733.18579370458
Epoch Step: 125 / 138 Loss: 27.652469635009766 Tokens per Sec: 13198.223338250229
Epoch Step: 130 / 138 Loss: 23.19662857055664 Tokens per Sec: 12859.94797522135
Epoch Step: 135 / 138 Loss: 27.763174057006836 Tokens per Sec: 12043.60255292098
Epoch ended with duration 0:00:48.585411
Train perplexity: 1.6360735719320478
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.985785
Validation perplexity: 2.2408545688320403
Epoch 78 / 1000
Epoch Step: 5 / 138 Loss: 15.3575439453125 Tokens per Sec: 13331.603179639387
Epoch Step: 10 / 138 Loss: 36.09169006347656 Tokens per Sec: 11636.909569727415
Epoch Step: 15 / 138 Loss: 34.718509674072266 Tokens per Sec: 13386.127113658997
Epoch Step: 20 / 138 Loss: 17.10934066772461 Tokens per Sec: 12615.548030655294
Epoch Step: 25 / 138 Loss: 31.857013702392578 Tokens per Sec: 13486.448955896472
Epoch Step: 30 / 138 Loss: 35.174503326416016 Tokens per Sec: 12935.337556859795
Epoch Step: 35 / 138 Loss: 23.619609832763672 Tokens per Sec: 13259.498736868616
Epoch Step: 40 / 138 Loss: 37.48314666748047 Tokens per Sec: 13153.962141941925
Epoch Step: 45 / 138 Loss: 28.856792449951172 Tokens per Sec: 13499.281382813297
Epoch Step: 50 / 138 Loss: 23.242097854614258 Tokens per Sec: 13400.416585118553
Epoch Step: 55 / 138 Loss: 211.42581176757812 Tokens per Sec: 13146.631163343163
Epoch Step: 60 / 138 Loss: 48.052425384521484 Tokens per Sec: 13633.615096429397
Epoch Step: 65 / 138 Loss: 129.88287353515625 Tokens per Sec: 13306.040770239988
Epoch Step: 70 / 138 Loss: 26.56077003479004 Tokens per Sec: 12584.85544116401
Epoch Step: 75 / 138 Loss: 32.1280517578125 Tokens per Sec: 13482.780841875741
Epoch Step: 80 / 138 Loss: 33.28938674926758 Tokens per Sec: 13348.27786723319
Epoch Step: 85 / 138 Loss: 26.595659255981445 Tokens per Sec: 13116.677850370776
Epoch Step: 90 / 138 Loss: 35.20008087158203 Tokens per Sec: 13291.45100895394
Epoch Step: 95 / 138 Loss: 15.158408164978027 Tokens per Sec: 13394.956648775722
Epoch Step: 100 / 138 Loss: 32.03207015991211 Tokens per Sec: 13711.906798656648
Epoch Step: 105 / 138 Loss: 22.280900955200195 Tokens per Sec: 12664.769685557281
Epoch Step: 110 / 138 Loss: 18.746328353881836 Tokens per Sec: 12926.230622640967
Epoch Step: 115 / 138 Loss: 27.872655868530273 Tokens per Sec: 11776.497524449433
Epoch Step: 120 / 138 Loss: 20.18225860595703 Tokens per Sec: 13034.179062644158
Epoch Step: 125 / 138 Loss: 31.752155303955078 Tokens per Sec: 12994.924572951348
Epoch Step: 130 / 138 Loss: 31.964956283569336 Tokens per Sec: 12408.19627780923
Epoch Step: 135 / 138 Loss: 29.36483383178711 Tokens per Sec: 12553.583170938331
Epoch ended with duration 0:00:48.888500
Train perplexity: 1.8114062830643856
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.859291
Validation perplexity: 1.4639131052701617
Model saved best_on_validation!
Epoch 79 / 1000
Epoch Step: 5 / 138 Loss: 149.59014892578125 Tokens per Sec: 12240.680419165417
Epoch Step: 10 / 138 Loss: 17.35668182373047 Tokens per Sec: 13573.213363924917
Epoch Step: 15 / 138 Loss: 27.305524826049805 Tokens per Sec: 12507.937305261874
Epoch Step: 20 / 138 Loss: 18.831518173217773 Tokens per Sec: 13339.107435072867
Epoch Step: 25 / 138 Loss: 30.09818458557129 Tokens per Sec: 13478.108435403317
Epoch Step: 30 / 138 Loss: 28.271434783935547 Tokens per Sec: 13662.64099013067
Epoch Step: 35 / 138 Loss: 17.083446502685547 Tokens per Sec: 13201.409306336052
Epoch Step: 40 / 138 Loss: 22.46185874938965 Tokens per Sec: 13838.941578573147
Epoch Step: 45 / 138 Loss: 40.623451232910156 Tokens per Sec: 13176.477307436979
Epoch Step: 50 / 138 Loss: 25.750232696533203 Tokens per Sec: 13612.54067393945
Epoch Step: 55 / 138 Loss: 34.54293441772461 Tokens per Sec: 12798.865532731104
Epoch Step: 60 / 138 Loss: 92.12936401367188 Tokens per Sec: 13634.215542328888
Epoch Step: 65 / 138 Loss: 33.999576568603516 Tokens per Sec: 13203.363722911447
Epoch Step: 70 / 138 Loss: 26.002605438232422 Tokens per Sec: 13227.879648814274
Epoch Step: 75 / 138 Loss: 26.757169723510742 Tokens per Sec: 12957.136805011727
Epoch Step: 80 / 138 Loss: 23.063682556152344 Tokens per Sec: 12991.467862164585
Epoch Step: 85 / 138 Loss: 30.70429229736328 Tokens per Sec: 13103.813296661447
Epoch Step: 90 / 138 Loss: 25.240219116210938 Tokens per Sec: 13280.505340386406
Epoch Step: 95 / 138 Loss: 33.774879455566406 Tokens per Sec: 13462.32513472696
Epoch Step: 100 / 138 Loss: 29.77012062072754 Tokens per Sec: 13466.786969448443
Epoch Step: 105 / 138 Loss: 156.48150634765625 Tokens per Sec: 12667.87377563109
Epoch Step: 110 / 138 Loss: 24.964820861816406 Tokens per Sec: 12227.292398110081
Epoch Step: 115 / 138 Loss: 134.887451171875 Tokens per Sec: 12089.922937656804
Epoch Step: 120 / 138 Loss: 28.70906639099121 Tokens per Sec: 11608.300404274642
Epoch Step: 125 / 138 Loss: 33.17007064819336 Tokens per Sec: 12609.95486001784
Epoch Step: 130 / 138 Loss: 20.823591232299805 Tokens per Sec: 13109.905987586573
Epoch Step: 135 / 138 Loss: 32.358924865722656 Tokens per Sec: 12854.140299321387
Epoch ended with duration 0:00:48.953806
Train perplexity: 1.7019703443346845
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.861975
Validation perplexity: 1.4967020719951114
Epoch 80 / 1000
Epoch Step: 5 / 138 Loss: 17.12404441833496 Tokens per Sec: 13560.901044560524
Epoch Step: 10 / 138 Loss: 183.47213745117188 Tokens per Sec: 13266.408461875719
Epoch Step: 15 / 138 Loss: 21.80447006225586 Tokens per Sec: 13118.825226538942
Epoch Step: 20 / 138 Loss: 29.813262939453125 Tokens per Sec: 13610.880522726391
Epoch Step: 25 / 138 Loss: 28.33231544494629 Tokens per Sec: 12332.202351001713
Epoch Step: 30 / 138 Loss: 25.66822624206543 Tokens per Sec: 12864.286724175772
Epoch Step: 35 / 138 Loss: 19.48141860961914 Tokens per Sec: 13797.058596234116
Epoch Step: 40 / 138 Loss: 28.51006507873535 Tokens per Sec: 13501.648503015982
Epoch Step: 45 / 138 Loss: 17.822908401489258 Tokens per Sec: 12961.53031653404
Epoch Step: 50 / 138 Loss: 18.108240127563477 Tokens per Sec: 13388.117008811176
Epoch Step: 55 / 138 Loss: 34.83359909057617 Tokens per Sec: 12581.20642127824
Epoch Step: 60 / 138 Loss: 16.489234924316406 Tokens per Sec: 13297.751514911213
Epoch Step: 65 / 138 Loss: 26.653650283813477 Tokens per Sec: 12129.132152932858
Epoch Step: 70 / 138 Loss: 31.665605545043945 Tokens per Sec: 13726.202228356626
Epoch Step: 75 / 138 Loss: 20.122770309448242 Tokens per Sec: 13783.356470430052
Epoch Step: 80 / 138 Loss: 36.47900390625 Tokens per Sec: 12994.098626638284
Epoch Step: 85 / 138 Loss: 38.1522331237793 Tokens per Sec: 13427.299076810124
Epoch Step: 90 / 138 Loss: 35.34263610839844 Tokens per Sec: 13330.987315009803
Epoch Step: 95 / 138 Loss: 18.093935012817383 Tokens per Sec: 13156.743468142915
Epoch Step: 100 / 138 Loss: 34.671485900878906 Tokens per Sec: 13627.704422932802
Epoch Step: 105 / 138 Loss: 24.13207244873047 Tokens per Sec: 12936.00552098201
Epoch Step: 110 / 138 Loss: 20.479656219482422 Tokens per Sec: 12843.703522183796
Epoch Step: 115 / 138 Loss: 176.26437377929688 Tokens per Sec: 12892.469051113287
Epoch Step: 120 / 138 Loss: 20.114412307739258 Tokens per Sec: 11900.779102147833
Epoch Step: 125 / 138 Loss: 27.458494186401367 Tokens per Sec: 12801.672196600977
Epoch Step: 130 / 138 Loss: 22.37079620361328 Tokens per Sec: 12360.511207727182
Epoch Step: 135 / 138 Loss: 181.50733947753906 Tokens per Sec: 12696.681275128738
Epoch ended with duration 0:00:48.867717
Train perplexity: 1.7128997576715308
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.887938
Validation perplexity: 1.6290667677401576
Model saved checkpoint!
Epoch 81 / 1000
Epoch Step: 5 / 138 Loss: 29.968692779541016 Tokens per Sec: 12451.098375917225
Epoch Step: 10 / 138 Loss: 22.526592254638672 Tokens per Sec: 13161.51952152918
Epoch Step: 15 / 138 Loss: 22.872655868530273 Tokens per Sec: 13946.057752594794
Epoch Step: 20 / 138 Loss: 35.92464828491211 Tokens per Sec: 13072.672231702452
Epoch Step: 25 / 138 Loss: 19.84832191467285 Tokens per Sec: 13338.59763120348
Epoch Step: 30 / 138 Loss: 16.629697799682617 Tokens per Sec: 13710.142072378903
Epoch Step: 35 / 138 Loss: 30.895811080932617 Tokens per Sec: 13134.4840544512
Epoch Step: 40 / 138 Loss: 19.33711814880371 Tokens per Sec: 13124.868856254476
Epoch Step: 45 / 138 Loss: 26.24167251586914 Tokens per Sec: 13632.171468713792
Epoch Step: 50 / 138 Loss: 20.274927139282227 Tokens per Sec: 13871.844624380772
Epoch Step: 55 / 138 Loss: 247.59121704101562 Tokens per Sec: 12519.091644055385
Epoch Step: 60 / 138 Loss: 18.934587478637695 Tokens per Sec: 13755.814142397126
Epoch Step: 65 / 138 Loss: 25.294767379760742 Tokens per Sec: 11956.905385496695
Epoch Step: 70 / 138 Loss: 27.454345703125 Tokens per Sec: 13673.82706689843
Epoch Step: 75 / 138 Loss: 26.969730377197266 Tokens per Sec: 13014.904518363901
Epoch Step: 80 / 138 Loss: 28.09720802307129 Tokens per Sec: 12530.07406175096
Epoch Step: 85 / 138 Loss: 30.89299774169922 Tokens per Sec: 13690.43396422618
Epoch Step: 90 / 138 Loss: 19.27248191833496 Tokens per Sec: 13562.562784110698
Epoch Step: 95 / 138 Loss: 29.692773818969727 Tokens per Sec: 13534.939763701002
Epoch Step: 100 / 138 Loss: 28.247840881347656 Tokens per Sec: 13087.417162059664
Epoch Step: 105 / 138 Loss: 26.325763702392578 Tokens per Sec: 12664.252963865838
Epoch Step: 110 / 138 Loss: 21.007659912109375 Tokens per Sec: 13113.253249247955
Epoch Step: 115 / 138 Loss: 29.228713989257812 Tokens per Sec: 12479.556950429998
Epoch Step: 120 / 138 Loss: 84.4589614868164 Tokens per Sec: 12458.559166781846
Epoch Step: 125 / 138 Loss: 38.96125030517578 Tokens per Sec: 13140.651011059981
Epoch Step: 130 / 138 Loss: 26.177528381347656 Tokens per Sec: 11834.363164552093
Epoch Step: 135 / 138 Loss: 21.998685836791992 Tokens per Sec: 12718.980352988548
Epoch ended with duration 0:00:48.804056
Train perplexity: 1.7006722323765946
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.917737
Validation perplexity: 1.786653343159778
Epoch 82 / 1000
Epoch Step: 5 / 138 Loss: 36.58064270019531 Tokens per Sec: 13142.321191075134
Epoch Step: 10 / 138 Loss: 32.93901443481445 Tokens per Sec: 12322.373811483136
Epoch Step: 15 / 138 Loss: 25.171144485473633 Tokens per Sec: 12772.208565166915
Epoch Step: 20 / 138 Loss: 26.62635612487793 Tokens per Sec: 13710.30613471854
Epoch Step: 25 / 138 Loss: 24.55077362060547 Tokens per Sec: 12800.841521110777
Epoch Step: 30 / 138 Loss: 14.7037935256958 Tokens per Sec: 13587.34194272235
Epoch Step: 35 / 138 Loss: 36.133392333984375 Tokens per Sec: 13179.130901447943
Epoch Step: 40 / 138 Loss: 28.267873764038086 Tokens per Sec: 12855.281169870324
Epoch Step: 45 / 138 Loss: 26.152320861816406 Tokens per Sec: 13843.087607695856
Epoch Step: 50 / 138 Loss: 16.8555908203125 Tokens per Sec: 13585.72402249059
Epoch Step: 55 / 138 Loss: 32.87968444824219 Tokens per Sec: 13684.349344155333
Epoch Step: 60 / 138 Loss: 18.763416290283203 Tokens per Sec: 14248.997256241619
Epoch Step: 65 / 138 Loss: 19.580106735229492 Tokens per Sec: 13215.555258487124
Epoch Step: 70 / 138 Loss: 21.251798629760742 Tokens per Sec: 13033.769986823347
Epoch Step: 75 / 138 Loss: 22.49752426147461 Tokens per Sec: 12772.879608114768
Epoch Step: 80 / 138 Loss: 15.971585273742676 Tokens per Sec: 13020.900305671756
Epoch Step: 85 / 138 Loss: 14.662240982055664 Tokens per Sec: 13476.517209025853
Epoch Step: 90 / 138 Loss: 26.608638763427734 Tokens per Sec: 13337.993094655782
Epoch Step: 95 / 138 Loss: 129.5625457763672 Tokens per Sec: 12762.877190884874
Epoch Step: 100 / 138 Loss: 21.157625198364258 Tokens per Sec: 13089.207084840435
Epoch Step: 105 / 138 Loss: 145.621826171875 Tokens per Sec: 12584.155506722296
Epoch Step: 110 / 138 Loss: 23.530834197998047 Tokens per Sec: 13108.042981041559
Epoch Step: 115 / 138 Loss: 27.180952072143555 Tokens per Sec: 13014.359709699831
Epoch Step: 120 / 138 Loss: 18.987424850463867 Tokens per Sec: 12879.52918865106
Epoch Step: 125 / 138 Loss: 27.962953567504883 Tokens per Sec: 13199.16314094433
Epoch Step: 130 / 138 Loss: 30.13071060180664 Tokens per Sec: 11512.82911138702
Epoch Step: 135 / 138 Loss: 22.89228057861328 Tokens per Sec: 12488.091367096707
Epoch ended with duration 0:00:48.825637
Train perplexity: 1.5911346753532312
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.857403
Validation perplexity: 1.4485091610985448
Model saved best_on_validation!
Epoch 83 / 1000
Epoch Step: 5 / 138 Loss: 19.82066535949707 Tokens per Sec: 13072.704852951485
Epoch Step: 10 / 138 Loss: 20.938251495361328 Tokens per Sec: 12809.477328369945
Epoch Step: 15 / 138 Loss: 30.19159698486328 Tokens per Sec: 13156.692264362782
Epoch Step: 20 / 138 Loss: 21.221267700195312 Tokens per Sec: 13420.99963188672
Epoch Step: 25 / 138 Loss: 128.21755981445312 Tokens per Sec: 12612.175334772446
Epoch Step: 30 / 138 Loss: 30.075746536254883 Tokens per Sec: 13476.011102168342
Epoch Step: 35 / 138 Loss: 25.91726303100586 Tokens per Sec: 12674.49294329967
Epoch Step: 40 / 138 Loss: 17.423477172851562 Tokens per Sec: 13891.373477126253
Epoch Step: 45 / 138 Loss: 28.76207160949707 Tokens per Sec: 12760.884337001218
Epoch Step: 50 / 138 Loss: 24.04181671142578 Tokens per Sec: 13839.328792930552
Epoch Step: 55 / 138 Loss: 20.26665496826172 Tokens per Sec: 13812.999065285836
Epoch Step: 60 / 138 Loss: 28.682931900024414 Tokens per Sec: 13010.91851313438
Epoch Step: 65 / 138 Loss: 24.94716453552246 Tokens per Sec: 12632.436913749623
Epoch Step: 70 / 138 Loss: 21.986339569091797 Tokens per Sec: 13669.32322088764
Epoch Step: 75 / 138 Loss: 21.350358963012695 Tokens per Sec: 13149.989142053413
Epoch Step: 80 / 138 Loss: 34.31863784790039 Tokens per Sec: 13167.907395493028
Epoch Step: 85 / 138 Loss: 24.23187255859375 Tokens per Sec: 13564.692972237171
Epoch Step: 90 / 138 Loss: 18.711273193359375 Tokens per Sec: 14086.099262674037
Epoch Step: 95 / 138 Loss: 35.12821578979492 Tokens per Sec: 12813.855619604943
Epoch Step: 100 / 138 Loss: 23.824947357177734 Tokens per Sec: 13487.080516922275
Epoch Step: 105 / 138 Loss: 16.577091217041016 Tokens per Sec: 11820.211592640053
Epoch Step: 110 / 138 Loss: 19.71603775024414 Tokens per Sec: 13116.7287331203
Epoch Step: 115 / 138 Loss: 30.19717788696289 Tokens per Sec: 12978.549424998808
Epoch Step: 120 / 138 Loss: 33.383785247802734 Tokens per Sec: 12600.696084917634
Epoch Step: 125 / 138 Loss: 21.310413360595703 Tokens per Sec: 12250.387932245907
Epoch Step: 130 / 138 Loss: 16.633806228637695 Tokens per Sec: 12972.335220876344
Epoch Step: 135 / 138 Loss: 31.516481399536133 Tokens per Sec: 13430.838037213027
Epoch ended with duration 0:00:48.649004
Train perplexity: 1.5650836006972895
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.915545
Validation perplexity: 1.5938814805799644
Epoch 84 / 1000
Epoch Step: 5 / 138 Loss: 160.76986694335938 Tokens per Sec: 12989.836748446929
Epoch Step: 10 / 138 Loss: 26.240955352783203 Tokens per Sec: 12649.532836222641
Epoch Step: 15 / 138 Loss: 15.587697982788086 Tokens per Sec: 13462.34925434703
Epoch Step: 20 / 138 Loss: 85.64053344726562 Tokens per Sec: 13227.290975575179
Epoch Step: 25 / 138 Loss: 16.869577407836914 Tokens per Sec: 13484.542367580336
Epoch Step: 30 / 138 Loss: 18.481245040893555 Tokens per Sec: 13067.201840020763
Epoch Step: 35 / 138 Loss: 19.961206436157227 Tokens per Sec: 13504.793075861637
Epoch Step: 40 / 138 Loss: 27.4698486328125 Tokens per Sec: 13230.167205703015
Epoch Step: 45 / 138 Loss: 16.927595138549805 Tokens per Sec: 13226.665100263912
Epoch Step: 50 / 138 Loss: 20.598297119140625 Tokens per Sec: 12332.881979130443
Epoch Step: 55 / 138 Loss: 29.693220138549805 Tokens per Sec: 13128.355014411803
Epoch Step: 60 / 138 Loss: 151.12745666503906 Tokens per Sec: 12911.287440833612
Epoch Step: 65 / 138 Loss: 15.15394115447998 Tokens per Sec: 13527.163063341937
Epoch Step: 70 / 138 Loss: 37.78365707397461 Tokens per Sec: 13311.50521783837
Epoch Step: 75 / 138 Loss: 19.64266586303711 Tokens per Sec: 13362.741361411061
Epoch Step: 80 / 138 Loss: 33.6045036315918 Tokens per Sec: 13329.784486045744
Epoch Step: 85 / 138 Loss: 19.272335052490234 Tokens per Sec: 13733.782281277601
Epoch Step: 90 / 138 Loss: 26.57243537902832 Tokens per Sec: 13326.36659461791
Epoch Step: 95 / 138 Loss: 32.63565444946289 Tokens per Sec: 13267.918999742626
Epoch Step: 100 / 138 Loss: 175.75900268554688 Tokens per Sec: 12963.872511987807
Epoch Step: 105 / 138 Loss: 21.778413772583008 Tokens per Sec: 12715.739049840282
Epoch Step: 110 / 138 Loss: 26.761180877685547 Tokens per Sec: 12377.397105229562
Epoch Step: 115 / 138 Loss: 16.310802459716797 Tokens per Sec: 12836.559262350189
Epoch Step: 120 / 138 Loss: 16.875823974609375 Tokens per Sec: 13352.03759003257
Epoch Step: 125 / 138 Loss: 29.34372329711914 Tokens per Sec: 12804.543848209656
Epoch Step: 130 / 138 Loss: 131.6820526123047 Tokens per Sec: 12736.737747593708
Epoch Step: 135 / 138 Loss: 31.73763084411621 Tokens per Sec: 12670.281454449516
Epoch ended with duration 0:00:48.741996
Train perplexity: 1.6108844836419582
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values TYPE_2 TYPE_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.892099
Validation perplexity: 1.5448324821657569
Epoch 85 / 1000
Epoch Step: 5 / 138 Loss: 31.336284637451172 Tokens per Sec: 12771.312862457415
Epoch Step: 10 / 138 Loss: 33.5236930847168 Tokens per Sec: 12810.61407293953
Epoch Step: 15 / 138 Loss: 24.078336715698242 Tokens per Sec: 12850.925313974654
Epoch Step: 20 / 138 Loss: 146.16160583496094 Tokens per Sec: 13048.805094313417
Epoch Step: 25 / 138 Loss: 22.484691619873047 Tokens per Sec: 13660.606126913252
Epoch Step: 30 / 138 Loss: 22.33037567138672 Tokens per Sec: 13718.94606072649
Epoch Step: 35 / 138 Loss: 28.611587524414062 Tokens per Sec: 13147.14491479342
Epoch Step: 40 / 138 Loss: 19.292098999023438 Tokens per Sec: 12730.402657828763
Epoch Step: 45 / 138 Loss: 17.624732971191406 Tokens per Sec: 13527.12716698419
Epoch Step: 50 / 138 Loss: 179.80056762695312 Tokens per Sec: 13781.626898170833
Epoch Step: 55 / 138 Loss: 27.46061897277832 Tokens per Sec: 13359.064018567778
Epoch Step: 60 / 138 Loss: 15.309253692626953 Tokens per Sec: 13511.222918697318
Epoch Step: 65 / 138 Loss: 67.26920318603516 Tokens per Sec: 13059.06970184383
Epoch Step: 70 / 138 Loss: 35.719173431396484 Tokens per Sec: 13122.89888434222
Epoch Step: 75 / 138 Loss: 25.22939109802246 Tokens per Sec: 13241.980115127177
Epoch Step: 80 / 138 Loss: 29.827960968017578 Tokens per Sec: 12993.959711356942
Epoch Step: 85 / 138 Loss: 20.33526039123535 Tokens per Sec: 13223.29215505931
Epoch Step: 90 / 138 Loss: 19.76176643371582 Tokens per Sec: 12972.037412876447
Epoch Step: 95 / 138 Loss: 18.43695640563965 Tokens per Sec: 13171.829499886135
Epoch Step: 100 / 138 Loss: 15.093531608581543 Tokens per Sec: 13251.748370020112
Epoch Step: 105 / 138 Loss: 21.731548309326172 Tokens per Sec: 13259.407590442383
Epoch Step: 110 / 138 Loss: 23.18794059753418 Tokens per Sec: 12530.146395090289
Epoch Step: 115 / 138 Loss: 21.389171600341797 Tokens per Sec: 13160.442033332934
Epoch Step: 120 / 138 Loss: 30.5167236328125 Tokens per Sec: 12660.438785762233
Epoch Step: 125 / 138 Loss: 183.14859008789062 Tokens per Sec: 12825.806441538663
Epoch Step: 130 / 138 Loss: 26.28519058227539 Tokens per Sec: 12037.537096699067
Epoch Step: 135 / 138 Loss: 28.066116333007812 Tokens per Sec: 13353.149065236727
Epoch ended with duration 0:00:48.726279
Train perplexity: 1.711101869207271
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.894387
Validation perplexity: 1.5683730136934257
Model saved checkpoint!
Epoch 86 / 1000
Epoch Step: 5 / 138 Loss: 12.539560317993164 Tokens per Sec: 13064.757018241859
Epoch Step: 10 / 138 Loss: 20.84943389892578 Tokens per Sec: 12771.170345803423
Epoch Step: 15 / 138 Loss: 22.865943908691406 Tokens per Sec: 13236.797704381397
Epoch Step: 20 / 138 Loss: 32.23471450805664 Tokens per Sec: 13201.529825655422
Epoch Step: 25 / 138 Loss: 26.213176727294922 Tokens per Sec: 12739.69212115489
Epoch Step: 30 / 138 Loss: 32.27265548706055 Tokens per Sec: 13837.206222087032
Epoch Step: 35 / 138 Loss: 25.516639709472656 Tokens per Sec: 13734.551518414368
Epoch Step: 40 / 138 Loss: 19.62297821044922 Tokens per Sec: 12738.927796290469
Epoch Step: 45 / 138 Loss: 31.01369857788086 Tokens per Sec: 13422.31139928469
Epoch Step: 50 / 138 Loss: 16.13741111755371 Tokens per Sec: 13264.301785335034
Epoch Step: 55 / 138 Loss: 23.465181350708008 Tokens per Sec: 12897.977750751981
Epoch Step: 60 / 138 Loss: 24.405569076538086 Tokens per Sec: 13912.589452415046
Epoch Step: 65 / 138 Loss: 26.9410343170166 Tokens per Sec: 13359.087501620637
Epoch Step: 70 / 138 Loss: 26.715898513793945 Tokens per Sec: 13432.184423315539
Epoch Step: 75 / 138 Loss: 23.98569107055664 Tokens per Sec: 13275.297974982319
Epoch Step: 80 / 138 Loss: 32.18191146850586 Tokens per Sec: 13479.090384024346
Epoch Step: 85 / 138 Loss: 19.367712020874023 Tokens per Sec: 13015.86438506841
Epoch Step: 90 / 138 Loss: 26.16607666015625 Tokens per Sec: 13196.522498045866
Epoch Step: 95 / 138 Loss: 27.978130340576172 Tokens per Sec: 13021.756059915746
Epoch Step: 100 / 138 Loss: 28.118621826171875 Tokens per Sec: 13518.11509429006
Epoch Step: 105 / 138 Loss: 21.149951934814453 Tokens per Sec: 12588.106694412661
Epoch Step: 110 / 138 Loss: 27.554704666137695 Tokens per Sec: 12456.595152221711
Epoch Step: 115 / 138 Loss: 35.20539855957031 Tokens per Sec: 12517.118926335464
Epoch Step: 120 / 138 Loss: 23.67462158203125 Tokens per Sec: 13142.973055271186
Epoch Step: 125 / 138 Loss: 131.55442810058594 Tokens per Sec: 12320.915050469175
Epoch Step: 130 / 138 Loss: 32.34146499633789 Tokens per Sec: 12816.589829140583
Epoch Step: 135 / 138 Loss: 21.215551376342773 Tokens per Sec: 12227.519424165015
Epoch ended with duration 0:00:48.766907
Train perplexity: 1.5965435118494227
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.921554
Validation perplexity: 1.696459145867539
Epoch 87 / 1000
Epoch Step: 5 / 138 Loss: 19.892366409301758 Tokens per Sec: 13329.214065918564
Epoch Step: 10 / 138 Loss: 24.72882652282715 Tokens per Sec: 13246.438646099381
Epoch Step: 15 / 138 Loss: 15.48783016204834 Tokens per Sec: 12997.457294089952
Epoch Step: 20 / 138 Loss: 32.05979537963867 Tokens per Sec: 13657.758693187725
Epoch Step: 25 / 138 Loss: 24.30584144592285 Tokens per Sec: 13458.047947524929
Epoch Step: 30 / 138 Loss: 16.170085906982422 Tokens per Sec: 12872.877642594907
Epoch Step: 35 / 138 Loss: 26.550771713256836 Tokens per Sec: 13020.910301188087
Epoch Step: 40 / 138 Loss: 27.954147338867188 Tokens per Sec: 13892.148674930575
Epoch Step: 45 / 138 Loss: 32.82052993774414 Tokens per Sec: 13014.665814335
Epoch Step: 50 / 138 Loss: 22.311756134033203 Tokens per Sec: 13372.208264401399
Epoch Step: 55 / 138 Loss: 15.509811401367188 Tokens per Sec: 13806.161494888316
Epoch Step: 60 / 138 Loss: 29.794187545776367 Tokens per Sec: 12738.811753888087
Epoch Step: 65 / 138 Loss: 30.892282485961914 Tokens per Sec: 12700.067273045126
Epoch Step: 70 / 138 Loss: 34.891414642333984 Tokens per Sec: 12677.43341713047
Epoch Step: 75 / 138 Loss: 23.095949172973633 Tokens per Sec: 12876.30309061551
Epoch Step: 80 / 138 Loss: 14.166426658630371 Tokens per Sec: 13187.953687361804
Epoch Step: 85 / 138 Loss: 30.34739875793457 Tokens per Sec: 13345.800849052715
Epoch Step: 90 / 138 Loss: 12.915974617004395 Tokens per Sec: 11869.954442549852
Epoch Step: 95 / 138 Loss: 156.19444274902344 Tokens per Sec: 13671.801789524783
Epoch Step: 100 / 138 Loss: 30.64297103881836 Tokens per Sec: 13422.095103420683
Epoch Step: 105 / 138 Loss: 23.666738510131836 Tokens per Sec: 13150.687090930944
Epoch Step: 110 / 138 Loss: 174.5508575439453 Tokens per Sec: 12279.360321886212
Epoch Step: 115 / 138 Loss: 29.993793487548828 Tokens per Sec: 13098.53313278124
Epoch Step: 120 / 138 Loss: 19.3895206451416 Tokens per Sec: 12474.975044164716
Epoch Step: 125 / 138 Loss: 24.70680046081543 Tokens per Sec: 13267.004868083484
Epoch Step: 130 / 138 Loss: 24.41537094116211 Tokens per Sec: 12676.002962467448
Epoch Step: 135 / 138 Loss: 18.24752426147461 Tokens per Sec: 11555.451039558744
Epoch ended with duration 0:00:48.881217
Train perplexity: 1.6659688654553941
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.925246
Validation perplexity: 1.7600355946584465
Epoch 88 / 1000
Epoch Step: 5 / 138 Loss: 26.33023452758789 Tokens per Sec: 12910.747752740042
Epoch Step: 10 / 138 Loss: 35.450016021728516 Tokens per Sec: 13262.999815118033
Epoch Step: 15 / 138 Loss: 18.606904983520508 Tokens per Sec: 13139.125957348595
Epoch Step: 20 / 138 Loss: 15.786225318908691 Tokens per Sec: 12079.162764199918
Epoch Step: 25 / 138 Loss: 13.754790306091309 Tokens per Sec: 13623.878491363157
Epoch Step: 30 / 138 Loss: 27.71892738342285 Tokens per Sec: 12721.992106361526
Epoch Step: 35 / 138 Loss: 29.621057510375977 Tokens per Sec: 13360.842589716576
Epoch Step: 40 / 138 Loss: 24.0612735748291 Tokens per Sec: 13387.23632837269
Epoch Step: 45 / 138 Loss: 192.0076141357422 Tokens per Sec: 12711.919310881298
Epoch Step: 50 / 138 Loss: 29.891624450683594 Tokens per Sec: 12885.274249757691
Epoch Step: 55 / 138 Loss: 33.53923416137695 Tokens per Sec: 13623.542177207708
Epoch Step: 60 / 138 Loss: 28.181734085083008 Tokens per Sec: 14206.953988062442
Epoch Step: 65 / 138 Loss: 21.673778533935547 Tokens per Sec: 12877.88309308054
Epoch Step: 70 / 138 Loss: 38.15071105957031 Tokens per Sec: 13988.344141587353
Epoch Step: 75 / 138 Loss: 34.91321563720703 Tokens per Sec: 13329.246305151322
Epoch Step: 80 / 138 Loss: 14.639554023742676 Tokens per Sec: 12963.781167235964
Epoch Step: 85 / 138 Loss: 16.18028450012207 Tokens per Sec: 13296.163261821968
Epoch Step: 90 / 138 Loss: 178.71690368652344 Tokens per Sec: 13602.676326735864
Epoch Step: 95 / 138 Loss: 32.19474792480469 Tokens per Sec: 12491.895834166957
Epoch Step: 100 / 138 Loss: 18.769886016845703 Tokens per Sec: 12806.229252882062
Epoch Step: 105 / 138 Loss: 19.025697708129883 Tokens per Sec: 12194.545000650593
Epoch Step: 110 / 138 Loss: 25.793548583984375 Tokens per Sec: 11541.78861927513
Epoch Step: 115 / 138 Loss: 23.110309600830078 Tokens per Sec: 11995.211215926833
Epoch Step: 120 / 138 Loss: 16.060714721679688 Tokens per Sec: 11961.438351532865
Epoch Step: 125 / 138 Loss: 23.842670440673828 Tokens per Sec: 10996.03684995226
Epoch Step: 130 / 138 Loss: 20.611379623413086 Tokens per Sec: 11866.214500952232
Epoch Step: 135 / 138 Loss: 21.37563705444336 Tokens per Sec: 11265.774723118393
Epoch ended with duration 0:00:50.041255
Train perplexity: 1.6263263922280697
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.954160
Validation perplexity: 1.9286394084475456
Epoch 89 / 1000
Epoch Step: 5 / 138 Loss: 13.814911842346191 Tokens per Sec: 12699.314118552222
Epoch Step: 10 / 138 Loss: 15.881275177001953 Tokens per Sec: 11790.934261606697
Epoch Step: 15 / 138 Loss: 24.64723014831543 Tokens per Sec: 12530.490084013598
Epoch Step: 20 / 138 Loss: 16.839160919189453 Tokens per Sec: 12145.368320890948
Epoch Step: 25 / 138 Loss: 16.31460189819336 Tokens per Sec: 12568.761296893566
Epoch Step: 30 / 138 Loss: 27.655961990356445 Tokens per Sec: 12510.725180328453
Epoch Step: 35 / 138 Loss: 18.157987594604492 Tokens per Sec: 12495.334269102224
Epoch Step: 40 / 138 Loss: 20.909391403198242 Tokens per Sec: 12944.673114903866
Epoch Step: 45 / 138 Loss: 143.7675323486328 Tokens per Sec: 11845.763834613039
Epoch Step: 50 / 138 Loss: 33.913211822509766 Tokens per Sec: 12704.40160183668
Epoch Step: 55 / 138 Loss: 15.620830535888672 Tokens per Sec: 12624.877468406212
Epoch Step: 60 / 138 Loss: 26.856679916381836 Tokens per Sec: 12103.53872681762
Epoch Step: 65 / 138 Loss: 26.098875045776367 Tokens per Sec: 11692.398291113845
Epoch Step: 70 / 138 Loss: 25.43731689453125 Tokens per Sec: 12196.731513569177
Epoch Step: 75 / 138 Loss: 161.1171112060547 Tokens per Sec: 11816.168100732784
Epoch Step: 80 / 138 Loss: 26.180753707885742 Tokens per Sec: 11964.346365950236
Epoch Step: 85 / 138 Loss: 177.33001708984375 Tokens per Sec: 11736.58431975175
Epoch Step: 90 / 138 Loss: 14.475255966186523 Tokens per Sec: 12423.36347739671
Epoch Step: 95 / 138 Loss: 22.152347564697266 Tokens per Sec: 12384.959522031708
Epoch Step: 100 / 138 Loss: 19.74160385131836 Tokens per Sec: 12602.733744998035
Epoch Step: 105 / 138 Loss: 28.268524169921875 Tokens per Sec: 12237.2691086786
Epoch Step: 110 / 138 Loss: 25.367570877075195 Tokens per Sec: 11952.91851017107
Epoch Step: 115 / 138 Loss: 21.579174041748047 Tokens per Sec: 11872.958142744194
Epoch Step: 120 / 138 Loss: 19.47955322265625 Tokens per Sec: 11903.232442097808
Epoch Step: 125 / 138 Loss: 19.55375862121582 Tokens per Sec: 11922.323891849168
Epoch Step: 130 / 138 Loss: 20.688493728637695 Tokens per Sec: 10730.650697483801
Epoch Step: 135 / 138 Loss: 34.25349044799805 Tokens per Sec: 11888.487047507067
Epoch ended with duration 0:00:52.374583
Train perplexity: 1.5658974590510901
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.953876
Validation perplexity: 2.030151051043717
Epoch 90 / 1000
Epoch Step: 5 / 138 Loss: 18.441267013549805 Tokens per Sec: 12296.850320681424
Epoch Step: 10 / 138 Loss: 19.41147232055664 Tokens per Sec: 12653.867549455055
Epoch Step: 15 / 138 Loss: 23.76186752319336 Tokens per Sec: 12533.79293352064
Epoch Step: 20 / 138 Loss: 25.32574462890625 Tokens per Sec: 12348.548252636085
Epoch Step: 25 / 138 Loss: 18.46761703491211 Tokens per Sec: 12034.521189821577
Epoch Step: 30 / 138 Loss: 22.692899703979492 Tokens per Sec: 12540.094880684128
Epoch Step: 35 / 138 Loss: 14.160414695739746 Tokens per Sec: 12869.837939129817
Epoch Step: 40 / 138 Loss: 20.997373580932617 Tokens per Sec: 12409.958323412015
Epoch Step: 45 / 138 Loss: 161.94862365722656 Tokens per Sec: 11904.526025646452
Epoch Step: 50 / 138 Loss: 24.386425018310547 Tokens per Sec: 12009.796808340445
Epoch Step: 55 / 138 Loss: 15.101984977722168 Tokens per Sec: 12500.185750611077
Epoch Step: 60 / 138 Loss: 20.448226928710938 Tokens per Sec: 12790.250659864085
Epoch Step: 65 / 138 Loss: 241.92364501953125 Tokens per Sec: 11795.399859682331
Epoch Step: 70 / 138 Loss: 22.16640281677246 Tokens per Sec: 12092.603589245327
Epoch Step: 75 / 138 Loss: 31.88023567199707 Tokens per Sec: 12570.18975980641
Epoch Step: 80 / 138 Loss: 23.922842025756836 Tokens per Sec: 12512.94403773251
Epoch Step: 85 / 138 Loss: 26.836750030517578 Tokens per Sec: 12039.307585892004
Epoch Step: 90 / 138 Loss: 78.7488784790039 Tokens per Sec: 12588.33230497653
Epoch Step: 95 / 138 Loss: 14.861970901489258 Tokens per Sec: 12253.612178666097
Epoch Step: 100 / 138 Loss: 123.49871063232422 Tokens per Sec: 12172.8758995586
Epoch Step: 105 / 138 Loss: 27.40949249267578 Tokens per Sec: 11795.000339289782
Epoch Step: 110 / 138 Loss: 24.795255661010742 Tokens per Sec: 11914.305900912206
Epoch Step: 115 / 138 Loss: 193.29635620117188 Tokens per Sec: 11535.787059434426
Epoch Step: 120 / 138 Loss: 33.26543426513672 Tokens per Sec: 10990.918588803075
Epoch Step: 125 / 138 Loss: 34.71035385131836 Tokens per Sec: 11249.484816030616
Epoch Step: 130 / 138 Loss: 25.54241371154785 Tokens per Sec: 11806.103338548806
Epoch Step: 135 / 138 Loss: 20.818185806274414 Tokens per Sec: 12029.1806135612
Epoch ended with duration 0:00:52.502534
Train perplexity: 1.5955798711009346
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.979819
Validation perplexity: 1.9065249582113268
Model saved checkpoint!
Epoch 91 / 1000
Epoch Step: 5 / 138 Loss: 22.724748611450195 Tokens per Sec: 11889.761124369667
Epoch Step: 10 / 138 Loss: 16.83237648010254 Tokens per Sec: 12701.435357222748
Epoch Step: 15 / 138 Loss: 25.829557418823242 Tokens per Sec: 12609.7322449066
Epoch Step: 20 / 138 Loss: 14.911882400512695 Tokens per Sec: 12606.715338290081
Epoch Step: 25 / 138 Loss: 20.49201202392578 Tokens per Sec: 12828.599629166372
Epoch Step: 30 / 138 Loss: 27.444337844848633 Tokens per Sec: 12353.362216218748
Epoch Step: 35 / 138 Loss: 27.76215362548828 Tokens per Sec: 12603.252442244351
Epoch Step: 40 / 138 Loss: 16.349077224731445 Tokens per Sec: 12835.338259640708
Epoch Step: 45 / 138 Loss: 33.991600036621094 Tokens per Sec: 12094.924196875214
Epoch Step: 50 / 138 Loss: 29.913381576538086 Tokens per Sec: 12075.473329711853
Epoch Step: 55 / 138 Loss: 20.59703254699707 Tokens per Sec: 12244.769393704102
Epoch Step: 60 / 138 Loss: 17.926681518554688 Tokens per Sec: 12317.382180893832
Epoch Step: 65 / 138 Loss: 29.40875244140625 Tokens per Sec: 11822.410633472095
Epoch Step: 70 / 138 Loss: 29.617717742919922 Tokens per Sec: 12772.317777108692
Epoch Step: 75 / 138 Loss: 12.542000770568848 Tokens per Sec: 12733.491208734646
Epoch Step: 80 / 138 Loss: 18.262060165405273 Tokens per Sec: 11537.417647072
Epoch Step: 85 / 138 Loss: 34.636051177978516 Tokens per Sec: 11757.744871236082
Epoch Step: 90 / 138 Loss: 18.766204833984375 Tokens per Sec: 12645.013991258898
Epoch Step: 95 / 138 Loss: 20.968772888183594 Tokens per Sec: 12058.806386852193
Epoch Step: 100 / 138 Loss: 25.536653518676758 Tokens per Sec: 12148.657557536291
Epoch Step: 105 / 138 Loss: 17.308971405029297 Tokens per Sec: 11797.67494282725
Epoch Step: 110 / 138 Loss: 22.967573165893555 Tokens per Sec: 12191.450370191727
Epoch Step: 115 / 138 Loss: 22.506912231445312 Tokens per Sec: 12061.75310982142
Epoch Step: 120 / 138 Loss: 25.948097229003906 Tokens per Sec: 11871.217353299337
Epoch Step: 125 / 138 Loss: 28.384157180786133 Tokens per Sec: 11894.363399961003
Epoch Step: 130 / 138 Loss: 18.36767578125 Tokens per Sec: 11836.706771424268
Epoch Step: 135 / 138 Loss: 24.333921432495117 Tokens per Sec: 11171.623694676895
Epoch ended with duration 0:00:52.357426
Train perplexity: 1.5828914262014775
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.877588
Validation perplexity: 1.5351289074295171
Epoch 92 / 1000
Epoch Step: 5 / 138 Loss: 15.593195915222168 Tokens per Sec: 12343.694514060991
Epoch Step: 10 / 138 Loss: 22.065956115722656 Tokens per Sec: 12230.463186035786
Epoch Step: 15 / 138 Loss: 22.16703987121582 Tokens per Sec: 11955.783536956327
Epoch Step: 20 / 138 Loss: 32.411739349365234 Tokens per Sec: 12378.763196406144
Epoch Step: 25 / 138 Loss: 22.552303314208984 Tokens per Sec: 12548.017513051354
Epoch Step: 30 / 138 Loss: 24.87595558166504 Tokens per Sec: 11880.537722223597
Epoch Step: 35 / 138 Loss: 16.87301254272461 Tokens per Sec: 12569.959258878882
Epoch Step: 40 / 138 Loss: 23.9374942779541 Tokens per Sec: 12611.225350419852
Epoch Step: 45 / 138 Loss: 16.93437385559082 Tokens per Sec: 12030.94156124653
Epoch Step: 50 / 138 Loss: 28.08388900756836 Tokens per Sec: 13095.013305204902
Epoch Step: 55 / 138 Loss: 20.52485466003418 Tokens per Sec: 11247.1644964267
Epoch Step: 60 / 138 Loss: 28.496349334716797 Tokens per Sec: 12338.25694132062
Epoch Step: 65 / 138 Loss: 21.827608108520508 Tokens per Sec: 12066.4991208771
Epoch Step: 70 / 138 Loss: 16.416704177856445 Tokens per Sec: 12166.798510495548
Epoch Step: 75 / 138 Loss: 24.439592361450195 Tokens per Sec: 12005.618344915138
Epoch Step: 80 / 138 Loss: 15.070899963378906 Tokens per Sec: 12591.064665801281
Epoch Step: 85 / 138 Loss: 25.46114730834961 Tokens per Sec: 11664.105084832543
Epoch Step: 90 / 138 Loss: 34.754066467285156 Tokens per Sec: 12485.187375385118
Epoch Step: 95 / 138 Loss: 20.826711654663086 Tokens per Sec: 12932.592331845675
Epoch Step: 100 / 138 Loss: 18.076148986816406 Tokens per Sec: 12768.267085339276
Epoch Step: 105 / 138 Loss: 24.14801025390625 Tokens per Sec: 10954.590063747997
Epoch Step: 110 / 138 Loss: 19.728839874267578 Tokens per Sec: 11273.7652509449
Epoch Step: 115 / 138 Loss: 33.205257415771484 Tokens per Sec: 12258.621009355318
Epoch Step: 120 / 138 Loss: 19.261795043945312 Tokens per Sec: 11522.225626069307
Epoch Step: 125 / 138 Loss: 31.95275115966797 Tokens per Sec: 12279.259393651077
Epoch Step: 130 / 138 Loss: 30.71722412109375 Tokens per Sec: 11969.288348307455
Epoch Step: 135 / 138 Loss: 125.63856506347656 Tokens per Sec: 11437.031066059792
Epoch ended with duration 0:00:52.586867
Train perplexity: 1.7200510603634869
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.905548
Validation perplexity: 1.7741743736708668
Epoch 93 / 1000
Epoch Step: 5 / 138 Loss: 27.271799087524414 Tokens per Sec: 11742.264460230714
Epoch Step: 10 / 138 Loss: 19.662866592407227 Tokens per Sec: 12080.871150831965
Epoch Step: 15 / 138 Loss: 21.339216232299805 Tokens per Sec: 12694.281656414974
Epoch Step: 20 / 138 Loss: 24.03553009033203 Tokens per Sec: 11907.234834647976
Epoch Step: 25 / 138 Loss: 29.991355895996094 Tokens per Sec: 12363.281170560691
Epoch Step: 30 / 138 Loss: 21.369619369506836 Tokens per Sec: 12607.031943431466
Epoch Step: 35 / 138 Loss: 22.99928092956543 Tokens per Sec: 12266.309786586737
Epoch Step: 40 / 138 Loss: 13.49733829498291 Tokens per Sec: 12433.887031354769
Epoch Step: 45 / 138 Loss: 18.340190887451172 Tokens per Sec: 12714.805897736675
Epoch Step: 50 / 138 Loss: 22.730148315429688 Tokens per Sec: 12837.025765049715
Epoch Step: 55 / 138 Loss: 17.34983253479004 Tokens per Sec: 12945.469675386357
Epoch Step: 60 / 138 Loss: 21.64905548095703 Tokens per Sec: 12463.768664415817
Epoch Step: 65 / 138 Loss: 18.51340675354004 Tokens per Sec: 12030.134408578817
Epoch Step: 70 / 138 Loss: 18.594024658203125 Tokens per Sec: 12607.14016614039
Epoch Step: 75 / 138 Loss: 23.0047607421875 Tokens per Sec: 11860.532219304292
Epoch Step: 80 / 138 Loss: 23.22629165649414 Tokens per Sec: 12321.063263305967
Epoch Step: 85 / 138 Loss: 22.774646759033203 Tokens per Sec: 12269.612471066905
Epoch Step: 90 / 138 Loss: 160.2618865966797 Tokens per Sec: 12044.049680603744
Epoch Step: 95 / 138 Loss: 15.662375450134277 Tokens per Sec: 11355.56077801415
Epoch Step: 100 / 138 Loss: 24.340524673461914 Tokens per Sec: 12377.090334600385
Epoch Step: 105 / 138 Loss: 64.26006317138672 Tokens per Sec: 11430.790168918988
Epoch Step: 110 / 138 Loss: 32.18937301635742 Tokens per Sec: 12068.76208928946
Epoch Step: 115 / 138 Loss: 24.96453857421875 Tokens per Sec: 12292.370758289313
Epoch Step: 120 / 138 Loss: 17.452856063842773 Tokens per Sec: 12153.738901962934
Epoch Step: 125 / 138 Loss: 23.038785934448242 Tokens per Sec: 11430.760498102485
Epoch Step: 130 / 138 Loss: 22.065322875976562 Tokens per Sec: 11447.3959266557
Epoch Step: 135 / 138 Loss: 20.32447052001953 Tokens per Sec: 11917.598381666914
Epoch ended with duration 0:00:52.473375
Train perplexity: 1.5899527941116656
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.937545
Validation perplexity: 1.6603939627529016
Epoch 94 / 1000
Epoch Step: 5 / 138 Loss: 33.77879333496094 Tokens per Sec: 12156.121200121228
Epoch Step: 10 / 138 Loss: 32.348628997802734 Tokens per Sec: 12196.272729918363
Epoch Step: 15 / 138 Loss: 18.105039596557617 Tokens per Sec: 11912.051712619492
Epoch Step: 20 / 138 Loss: 12.313958168029785 Tokens per Sec: 12592.802957207636
Epoch Step: 25 / 138 Loss: 24.375654220581055 Tokens per Sec: 12406.191232008445
Epoch Step: 30 / 138 Loss: 18.88017463684082 Tokens per Sec: 12758.312919487842
Epoch Step: 35 / 138 Loss: 23.415708541870117 Tokens per Sec: 12221.207472278391
Epoch Step: 40 / 138 Loss: 21.455904006958008 Tokens per Sec: 12132.990040886687
Epoch Step: 45 / 138 Loss: 16.467605590820312 Tokens per Sec: 12297.368153622723
Epoch Step: 50 / 138 Loss: 20.240314483642578 Tokens per Sec: 12490.151530584037
Epoch Step: 55 / 138 Loss: 26.946807861328125 Tokens per Sec: 12628.059204428817
Epoch Step: 60 / 138 Loss: 17.387203216552734 Tokens per Sec: 12434.200480601821
Epoch Step: 65 / 138 Loss: 30.496612548828125 Tokens per Sec: 13129.595905864453
Epoch Step: 70 / 138 Loss: 30.900066375732422 Tokens per Sec: 13070.036231053042
Epoch Step: 75 / 138 Loss: 27.301836013793945 Tokens per Sec: 13245.22568835848
Epoch Step: 80 / 138 Loss: 14.817018508911133 Tokens per Sec: 13254.33714759564
Epoch Step: 85 / 138 Loss: 28.46302604675293 Tokens per Sec: 12592.798839520534
Epoch Step: 90 / 138 Loss: 22.391063690185547 Tokens per Sec: 13379.875736485752
Epoch Step: 95 / 138 Loss: 26.84786033630371 Tokens per Sec: 13247.487134486262
Epoch Step: 100 / 138 Loss: 32.71452713012695 Tokens per Sec: 13053.523428199413
Epoch Step: 105 / 138 Loss: 110.28877258300781 Tokens per Sec: 12391.204852412138
Epoch Step: 110 / 138 Loss: 28.696735382080078 Tokens per Sec: 12617.51607426277
Epoch Step: 115 / 138 Loss: 21.409671783447266 Tokens per Sec: 13198.040128545646
Epoch Step: 120 / 138 Loss: 23.997684478759766 Tokens per Sec: 11735.369982225742
Epoch Step: 125 / 138 Loss: 16.770484924316406 Tokens per Sec: 13303.213774901516
Epoch Step: 130 / 138 Loss: 17.203285217285156 Tokens per Sec: 13004.030188933
Epoch Step: 135 / 138 Loss: 18.69687843322754 Tokens per Sec: 12470.975715783043
Epoch ended with duration 0:00:50.317978
Train perplexity: 1.6027671437597901
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.884876
Validation perplexity: 1.4493261132785686
Epoch 95 / 1000
Epoch Step: 5 / 138 Loss: 25.18484878540039 Tokens per Sec: 13580.872083238404
Epoch Step: 10 / 138 Loss: 25.46149444580078 Tokens per Sec: 13450.437258308919
Epoch Step: 15 / 138 Loss: 24.755664825439453 Tokens per Sec: 13457.179350415558
Epoch Step: 20 / 138 Loss: 15.658529281616211 Tokens per Sec: 13702.626904381608
Epoch Step: 25 / 138 Loss: 19.45574378967285 Tokens per Sec: 13390.505988347162
Epoch Step: 30 / 138 Loss: 20.751300811767578 Tokens per Sec: 13571.477221497336
Epoch Step: 35 / 138 Loss: 18.968856811523438 Tokens per Sec: 12940.647809313654
Epoch Step: 40 / 138 Loss: 17.36361312866211 Tokens per Sec: 13736.909466946436
Epoch Step: 45 / 138 Loss: 27.987964630126953 Tokens per Sec: 13311.37137912248
Epoch Step: 50 / 138 Loss: 13.010912895202637 Tokens per Sec: 13283.777557603555
Epoch Step: 55 / 138 Loss: 134.21649169921875 Tokens per Sec: 12765.649992934497
Epoch Step: 60 / 138 Loss: 110.61569213867188 Tokens per Sec: 13143.37263976743
Epoch Step: 65 / 138 Loss: 20.3920955657959 Tokens per Sec: 12995.75072165834
Epoch Step: 70 / 138 Loss: 23.737268447875977 Tokens per Sec: 12705.361614535248
Epoch Step: 75 / 138 Loss: 27.96242904663086 Tokens per Sec: 13460.44877920871
Epoch Step: 80 / 138 Loss: 17.392850875854492 Tokens per Sec: 13149.706682255348
Epoch Step: 85 / 138 Loss: 20.43398666381836 Tokens per Sec: 13211.332369193364
Epoch Step: 90 / 138 Loss: 27.569313049316406 Tokens per Sec: 13927.822439113137
Epoch Step: 95 / 138 Loss: 35.605262756347656 Tokens per Sec: 12839.973195162793
Epoch Step: 100 / 138 Loss: 10.651832580566406 Tokens per Sec: 12645.77445627575
Epoch Step: 105 / 138 Loss: 29.152620315551758 Tokens per Sec: 12858.60094920697
Epoch Step: 110 / 138 Loss: 15.961405754089355 Tokens per Sec: 12420.142093017525
Epoch Step: 115 / 138 Loss: 179.66140747070312 Tokens per Sec: 12667.282900931452
Epoch Step: 120 / 138 Loss: 18.762142181396484 Tokens per Sec: 13020.729761859933
Epoch Step: 125 / 138 Loss: 18.913179397583008 Tokens per Sec: 13071.14460498672
Epoch Step: 130 / 138 Loss: 23.423095703125 Tokens per Sec: 11808.87928750206
Epoch Step: 135 / 138 Loss: 25.418384552001953 Tokens per Sec: 12941.759560362292
Epoch ended with duration 0:00:48.695936
Train perplexity: 1.5615004954311789
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:03.927491
Validation perplexity: 1.6972264506095898
Model saved checkpoint!
Epoch 96 / 1000
Epoch Step: 5 / 138 Loss: 17.270421981811523 Tokens per Sec: 13747.489263110432
Epoch Step: 10 / 138 Loss: 19.729326248168945 Tokens per Sec: 13761.353702629456
Epoch Step: 15 / 138 Loss: 26.828922271728516 Tokens per Sec: 13275.024117217437
Epoch Step: 20 / 138 Loss: 19.82859992980957 Tokens per Sec: 13545.696460566181
Epoch Step: 25 / 138 Loss: 25.8839054107666 Tokens per Sec: 12874.527810650887
Epoch Step: 30 / 138 Loss: 29.784467697143555 Tokens per Sec: 12614.810722650793
Epoch Step: 35 / 138 Loss: 231.9048614501953 Tokens per Sec: 13464.955054287268
Epoch Step: 40 / 138 Loss: 25.210037231445312 Tokens per Sec: 13513.298721398509
Epoch Step: 45 / 138 Loss: 27.042509078979492 Tokens per Sec: 13272.77355568275
Epoch Step: 50 / 138 Loss: 28.568267822265625 Tokens per Sec: 13158.544008543293
Epoch Step: 55 / 138 Loss: 22.697172164916992 Tokens per Sec: 13593.919070119491
Epoch Step: 60 / 138 Loss: 196.79566955566406 Tokens per Sec: 13005.828255131248
Epoch Step: 65 / 138 Loss: 32.26228332519531 Tokens per Sec: 13492.818282540784
Epoch Step: 70 / 138 Loss: 19.666364669799805 Tokens per Sec: 13291.86666354129
Epoch Step: 75 / 138 Loss: 18.421852111816406 Tokens per Sec: 13444.88398624502
Epoch Step: 80 / 138 Loss: 13.935543060302734 Tokens per Sec: 13559.651099761268
Epoch Step: 85 / 138 Loss: 13.966752052307129 Tokens per Sec: 12698.270842856236
Epoch Step: 90 / 138 Loss: 21.052501678466797 Tokens per Sec: 13533.979953329223
Epoch Step: 95 / 138 Loss: 125.96318054199219 Tokens per Sec: 13039.665979760282
Epoch Step: 100 / 138 Loss: 26.032588958740234 Tokens per Sec: 12877.654637751824
Epoch Step: 105 / 138 Loss: 19.82925033569336 Tokens per Sec: 12690.521892983195
Epoch Step: 110 / 138 Loss: 24.109323501586914 Tokens per Sec: 11654.284846141598
Epoch Step: 115 / 138 Loss: 26.59406089782715 Tokens per Sec: 12479.877728639929
Epoch Step: 120 / 138 Loss: 18.621788024902344 Tokens per Sec: 12375.270277522213
Epoch Step: 125 / 138 Loss: 16.769956588745117 Tokens per Sec: 12637.34746542977
Epoch Step: 130 / 138 Loss: 25.184635162353516 Tokens per Sec: 12964.8534264704
Epoch Step: 135 / 138 Loss: 178.105712890625 Tokens per Sec: 12631.689430319639
Epoch ended with duration 0:00:48.811632
Train perplexity: 1.6303467843109398
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.926732
Validation perplexity: 1.5286886970870488
Epoch 97 / 1000
Epoch Step: 5 / 138 Loss: 20.549602508544922 Tokens per Sec: 13770.473298492005
Epoch Step: 10 / 138 Loss: 152.7095184326172 Tokens per Sec: 13431.378951137127
Epoch Step: 15 / 138 Loss: 25.265348434448242 Tokens per Sec: 12745.515539097616
Epoch Step: 20 / 138 Loss: 22.976272583007812 Tokens per Sec: 12806.976460613754
Epoch Step: 25 / 138 Loss: 21.526723861694336 Tokens per Sec: 14146.458637590948
Epoch Step: 30 / 138 Loss: 11.28396224975586 Tokens per Sec: 13379.008720792353
Epoch Step: 35 / 138 Loss: 14.109528541564941 Tokens per Sec: 14027.874557437535
Epoch Step: 40 / 138 Loss: 186.76239013671875 Tokens per Sec: 12950.447596468586
Epoch Step: 45 / 138 Loss: 15.999194145202637 Tokens per Sec: 13594.766372701893
Epoch Step: 50 / 138 Loss: 164.88314819335938 Tokens per Sec: 12393.266147350923
Epoch Step: 55 / 138 Loss: 16.34829330444336 Tokens per Sec: 13107.910672733842
Epoch Step: 60 / 138 Loss: 18.55948829650879 Tokens per Sec: 13215.341207738862
Epoch Step: 65 / 138 Loss: 20.164714813232422 Tokens per Sec: 12689.845379294613
Epoch Step: 70 / 138 Loss: 27.644805908203125 Tokens per Sec: 12851.104756794595
Epoch Step: 75 / 138 Loss: 12.553075790405273 Tokens per Sec: 13052.483121868958
Epoch Step: 80 / 138 Loss: 20.099027633666992 Tokens per Sec: 13725.959330944917
Epoch Step: 85 / 138 Loss: 26.306108474731445 Tokens per Sec: 12828.146085114124
Epoch Step: 90 / 138 Loss: 201.9527587890625 Tokens per Sec: 12802.35588368801
Epoch Step: 95 / 138 Loss: 14.792841911315918 Tokens per Sec: 13626.386437432626
Epoch Step: 100 / 138 Loss: 33.86026382446289 Tokens per Sec: 12856.23568539887
Epoch Step: 105 / 138 Loss: 29.53034782409668 Tokens per Sec: 12937.074798352327
Epoch Step: 110 / 138 Loss: 18.485342025756836 Tokens per Sec: 13508.985210714538
Epoch Step: 115 / 138 Loss: 18.534780502319336 Tokens per Sec: 12782.773512473477
Epoch Step: 120 / 138 Loss: 14.320847511291504 Tokens per Sec: 12863.666385798546
Epoch Step: 125 / 138 Loss: 17.199968338012695 Tokens per Sec: 12169.753554543771
Epoch Step: 130 / 138 Loss: 21.930316925048828 Tokens per Sec: 12516.497648303923
Epoch Step: 135 / 138 Loss: 23.10529327392578 Tokens per Sec: 12647.303898596183
Epoch ended with duration 0:00:48.777683
Train perplexity: 1.6031553792344972
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.898050
Validation perplexity: 1.520337848621121
Epoch 98 / 1000
Epoch Step: 5 / 138 Loss: 27.714859008789062 Tokens per Sec: 12633.565849797926
Epoch Step: 10 / 138 Loss: 27.91752815246582 Tokens per Sec: 13567.770122926235
Epoch Step: 15 / 138 Loss: 11.9028959274292 Tokens per Sec: 13565.856174091932
Epoch Step: 20 / 138 Loss: 13.768689155578613 Tokens per Sec: 12918.86352974494
Epoch Step: 25 / 138 Loss: 15.337636947631836 Tokens per Sec: 12896.063466709204
Epoch Step: 30 / 138 Loss: 26.52540397644043 Tokens per Sec: 13051.054665602414
Epoch Step: 35 / 138 Loss: 19.438962936401367 Tokens per Sec: 13290.768876304475
Epoch Step: 40 / 138 Loss: 21.808704376220703 Tokens per Sec: 13721.782195906584
Epoch Step: 45 / 138 Loss: 16.989490509033203 Tokens per Sec: 13330.048664696904
Epoch Step: 50 / 138 Loss: 17.622657775878906 Tokens per Sec: 13032.037460844756
Epoch Step: 55 / 138 Loss: 22.08381462097168 Tokens per Sec: 12902.128588665566
Epoch Step: 60 / 138 Loss: 27.318096160888672 Tokens per Sec: 13375.90762342036
Epoch Step: 65 / 138 Loss: 14.712508201599121 Tokens per Sec: 13478.128427578447
Epoch Step: 70 / 138 Loss: 156.8352813720703 Tokens per Sec: 13099.587222984852
Epoch Step: 75 / 138 Loss: 29.18069076538086 Tokens per Sec: 13212.111362785792
Epoch Step: 80 / 138 Loss: 17.12381935119629 Tokens per Sec: 13602.324155813983
Epoch Step: 85 / 138 Loss: 23.774078369140625 Tokens per Sec: 13632.182057701953
Epoch Step: 90 / 138 Loss: 25.49506378173828 Tokens per Sec: 13242.666553447874
Epoch Step: 95 / 138 Loss: 27.15933609008789 Tokens per Sec: 13217.08823871608
Epoch Step: 100 / 138 Loss: 24.000078201293945 Tokens per Sec: 13155.275490317075
Epoch Step: 105 / 138 Loss: 109.5718765258789 Tokens per Sec: 12360.078779058987
Epoch Step: 110 / 138 Loss: 27.69135856628418 Tokens per Sec: 12731.662382352333
Epoch Step: 115 / 138 Loss: 14.74036979675293 Tokens per Sec: 13041.003721733572
Epoch Step: 120 / 138 Loss: 190.36659240722656 Tokens per Sec: 11940.516745685363
Epoch Step: 125 / 138 Loss: 18.051639556884766 Tokens per Sec: 12240.945240026864
Epoch Step: 130 / 138 Loss: 28.81743812561035 Tokens per Sec: 12975.807123473809
Epoch Step: 135 / 138 Loss: 22.803091049194336 Tokens per Sec: 12936.583019960564
Epoch ended with duration 0:00:48.900442
Train perplexity: 1.56595847847097
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.959021
Validation perplexity: 1.7414262940480314
Epoch 99 / 1000
Epoch Step: 5 / 138 Loss: 140.7001190185547 Tokens per Sec: 12378.77584738704
Epoch Step: 10 / 138 Loss: 12.055403709411621 Tokens per Sec: 13854.814466214264
Epoch Step: 15 / 138 Loss: 21.88873863220215 Tokens per Sec: 12977.149619718328
Epoch Step: 20 / 138 Loss: 18.262771606445312 Tokens per Sec: 12906.91168645334
Epoch Step: 25 / 138 Loss: 13.181720733642578 Tokens per Sec: 13679.446578465982
Epoch Step: 30 / 138 Loss: 24.198400497436523 Tokens per Sec: 13027.304230155742
Epoch Step: 35 / 138 Loss: 14.741647720336914 Tokens per Sec: 13537.956435596569
Epoch Step: 40 / 138 Loss: 15.52817153930664 Tokens per Sec: 13243.700192333983
Epoch Step: 45 / 138 Loss: 15.467633247375488 Tokens per Sec: 13259.700767465845
Epoch Step: 50 / 138 Loss: 27.747634887695312 Tokens per Sec: 13022.109473255045
Epoch Step: 55 / 138 Loss: 29.135812759399414 Tokens per Sec: 12214.407021827721
Epoch Step: 60 / 138 Loss: 23.965421676635742 Tokens per Sec: 13239.31307910329
Epoch Step: 65 / 138 Loss: 25.50351905822754 Tokens per Sec: 13505.317110617647
Epoch Step: 70 / 138 Loss: 21.5592041015625 Tokens per Sec: 13644.502106926158
Epoch Step: 75 / 138 Loss: 30.017770767211914 Tokens per Sec: 12823.811648737046
Epoch Step: 80 / 138 Loss: 24.491783142089844 Tokens per Sec: 12623.4955541926
Epoch Step: 85 / 138 Loss: 22.676490783691406 Tokens per Sec: 12962.282627131954
Epoch Step: 90 / 138 Loss: 18.342370986938477 Tokens per Sec: 13640.88717653294
Epoch Step: 95 / 138 Loss: 123.22712707519531 Tokens per Sec: 13574.278145677734
Epoch Step: 100 / 138 Loss: 14.51427173614502 Tokens per Sec: 13463.06665421824
Epoch Step: 105 / 138 Loss: 26.8267822265625 Tokens per Sec: 12832.060902141133
Epoch Step: 110 / 138 Loss: 20.490886688232422 Tokens per Sec: 13106.497258971667
Epoch Step: 115 / 138 Loss: 20.479402542114258 Tokens per Sec: 13091.080869166746
Epoch Step: 120 / 138 Loss: 21.015348434448242 Tokens per Sec: 11975.731327156796
Epoch Step: 125 / 138 Loss: 94.21798706054688 Tokens per Sec: 12769.789178971727
Epoch Step: 130 / 138 Loss: 23.610307693481445 Tokens per Sec: 12466.203218769844
Epoch Step: 135 / 138 Loss: 22.68393898010254 Tokens per Sec: 13001.755489920604
Epoch ended with duration 0:00:48.833625
Train perplexity: 1.5986207110672526
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.922600
Validation perplexity: 1.7696402227956267
Epoch 100 / 1000
Epoch Step: 5 / 138 Loss: 20.04746437072754 Tokens per Sec: 13286.952798939537
Epoch Step: 10 / 138 Loss: 11.482792854309082 Tokens per Sec: 13611.22282284454
Epoch Step: 15 / 138 Loss: 20.241579055786133 Tokens per Sec: 12920.986189949348
Epoch Step: 20 / 138 Loss: 29.8794002532959 Tokens per Sec: 13299.499699266064
Epoch Step: 25 / 138 Loss: 27.117387771606445 Tokens per Sec: 13384.312394733646
Epoch Step: 30 / 138 Loss: 33.30720138549805 Tokens per Sec: 12500.501174378627
Epoch Step: 35 / 138 Loss: 25.557180404663086 Tokens per Sec: 13075.269831166865
Epoch Step: 40 / 138 Loss: 24.068559646606445 Tokens per Sec: 13715.397932634532
Epoch Step: 45 / 138 Loss: 12.630577087402344 Tokens per Sec: 13435.437894453973
Epoch Step: 50 / 138 Loss: 23.025232315063477 Tokens per Sec: 13225.527824976916
Epoch Step: 55 / 138 Loss: 15.915263175964355 Tokens per Sec: 13330.911087482531
Epoch Step: 60 / 138 Loss: 18.29427719116211 Tokens per Sec: 13899.926528492177
Epoch Step: 65 / 138 Loss: 23.129850387573242 Tokens per Sec: 12899.739305164368
Epoch Step: 70 / 138 Loss: 21.689002990722656 Tokens per Sec: 12980.029629207213
Epoch Step: 75 / 138 Loss: 32.03214645385742 Tokens per Sec: 12655.78474449577
Epoch Step: 80 / 138 Loss: 15.93351936340332 Tokens per Sec: 13459.800002977783
Epoch Step: 85 / 138 Loss: 23.746030807495117 Tokens per Sec: 13314.610386689823
Epoch Step: 90 / 138 Loss: 24.898584365844727 Tokens per Sec: 13153.93430197736
Epoch Step: 95 / 138 Loss: 27.90808868408203 Tokens per Sec: 13328.988435948331
Epoch Step: 100 / 138 Loss: 27.494613647460938 Tokens per Sec: 13207.510909942095
Epoch Step: 105 / 138 Loss: 16.394424438476562 Tokens per Sec: 12579.6581879406
Epoch Step: 110 / 138 Loss: 174.29522705078125 Tokens per Sec: 12083.26193283971
Epoch Step: 115 / 138 Loss: 25.979219436645508 Tokens per Sec: 12127.265567614984
Epoch Step: 120 / 138 Loss: 29.51897430419922 Tokens per Sec: 11905.500519239531
Epoch Step: 125 / 138 Loss: 20.42359161376953 Tokens per Sec: 13081.390349463034
Epoch Step: 130 / 138 Loss: 28.52524757385254 Tokens per Sec: 13056.625113050985
Epoch Step: 135 / 138 Loss: 23.561317443847656 Tokens per Sec: 13122.345398544652
Epoch ended with duration 0:00:48.841874
Train perplexity: 1.6178369313564123
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.885369
Validation perplexity: 1.4872931390822859
Model saved checkpoint!
Epoch 101 / 1000
Epoch Step: 5 / 138 Loss: 147.85708618164062 Tokens per Sec: 13176.139883415299
Epoch Step: 10 / 138 Loss: 15.194108009338379 Tokens per Sec: 12886.062632203359
Epoch Step: 15 / 138 Loss: 158.278076171875 Tokens per Sec: 13433.06898331526
Epoch Step: 20 / 138 Loss: 22.118757247924805 Tokens per Sec: 12532.189620187459
Epoch Step: 25 / 138 Loss: 36.85544204711914 Tokens per Sec: 12889.468076743306
Epoch Step: 30 / 138 Loss: 25.791858673095703 Tokens per Sec: 13608.8444805773
Epoch Step: 35 / 138 Loss: 24.4489803314209 Tokens per Sec: 13089.825749526437
Epoch Step: 40 / 138 Loss: 31.789087295532227 Tokens per Sec: 13350.046535626487
Epoch Step: 45 / 138 Loss: 22.26753044128418 Tokens per Sec: 13694.216309233496
Epoch Step: 50 / 138 Loss: 12.571822166442871 Tokens per Sec: 13681.150298649663
Epoch Step: 55 / 138 Loss: 24.69911003112793 Tokens per Sec: 12917.295928157248
Epoch Step: 60 / 138 Loss: 22.698719024658203 Tokens per Sec: 13678.364044715969
Epoch Step: 65 / 138 Loss: 18.472997665405273 Tokens per Sec: 13440.502418122607
Epoch Step: 70 / 138 Loss: 23.360841751098633 Tokens per Sec: 12903.55873066472
Epoch Step: 75 / 138 Loss: 23.463136672973633 Tokens per Sec: 13203.0671470759
Epoch Step: 80 / 138 Loss: 18.097808837890625 Tokens per Sec: 13531.302860470569
Epoch Step: 85 / 138 Loss: 150.50669860839844 Tokens per Sec: 12516.423718040416
Epoch Step: 90 / 138 Loss: 21.327571868896484 Tokens per Sec: 13299.214480012151
Epoch Step: 95 / 138 Loss: 34.00992965698242 Tokens per Sec: 13053.529842197846
Epoch Step: 100 / 138 Loss: 22.885013580322266 Tokens per Sec: 12900.258945448713
Epoch Step: 105 / 138 Loss: 22.36946678161621 Tokens per Sec: 13109.684002358563
Epoch Step: 110 / 138 Loss: 16.12850570678711 Tokens per Sec: 13044.33807433072
Epoch Step: 115 / 138 Loss: 14.211187362670898 Tokens per Sec: 12833.71945248606
Epoch Step: 120 / 138 Loss: 16.781768798828125 Tokens per Sec: 13059.366911526515
Epoch Step: 125 / 138 Loss: 85.61463928222656 Tokens per Sec: 12123.506383660533
Epoch Step: 130 / 138 Loss: 16.87255859375 Tokens per Sec: 13223.537104037065
Epoch Step: 135 / 138 Loss: 17.293054580688477 Tokens per Sec: 12034.310789200925
Epoch ended with duration 0:00:48.743748
Train perplexity: 1.5545097994478558
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.921315
Validation perplexity: 1.7624365454312416
Epoch 102 / 1000
Epoch Step: 5 / 138 Loss: 20.902246475219727 Tokens per Sec: 13665.972056649214
Epoch Step: 10 / 138 Loss: 14.042989730834961 Tokens per Sec: 12616.091779175638
Epoch Step: 15 / 138 Loss: 23.265640258789062 Tokens per Sec: 13023.067408187797
Epoch Step: 20 / 138 Loss: 13.443537712097168 Tokens per Sec: 13345.837215314034
Epoch Step: 25 / 138 Loss: 25.635892868041992 Tokens per Sec: 12685.12903153048
Epoch Step: 30 / 138 Loss: 17.25864601135254 Tokens per Sec: 13660.806919497989
Epoch Step: 35 / 138 Loss: 23.112564086914062 Tokens per Sec: 12666.236626565435
Epoch Step: 40 / 138 Loss: 10.283629417419434 Tokens per Sec: 13358.644304774269
Epoch Step: 45 / 138 Loss: 22.464067459106445 Tokens per Sec: 13445.945200935445
Epoch Step: 50 / 138 Loss: 28.548221588134766 Tokens per Sec: 13043.048278370563
Epoch Step: 55 / 138 Loss: 17.175189971923828 Tokens per Sec: 13351.580560608856
Epoch Step: 60 / 138 Loss: 13.5895414352417 Tokens per Sec: 13105.796526139666
Epoch Step: 65 / 138 Loss: 17.45794677734375 Tokens per Sec: 13727.529767843884
Epoch Step: 70 / 138 Loss: 35.34055709838867 Tokens per Sec: 12894.761794208738
Epoch Step: 75 / 138 Loss: 34.421363830566406 Tokens per Sec: 12791.535127860314
Epoch Step: 80 / 138 Loss: 20.247228622436523 Tokens per Sec: 13407.447865626966
Epoch Step: 85 / 138 Loss: 14.676705360412598 Tokens per Sec: 14107.514491437152
Epoch Step: 90 / 138 Loss: 24.51747703552246 Tokens per Sec: 13402.537380511107
Epoch Step: 95 / 138 Loss: 17.683320999145508 Tokens per Sec: 13660.70973781813
Epoch Step: 100 / 138 Loss: 13.838043212890625 Tokens per Sec: 13637.941282079451
Epoch Step: 105 / 138 Loss: 22.326662063598633 Tokens per Sec: 12579.82378363019
Epoch Step: 110 / 138 Loss: 21.662086486816406 Tokens per Sec: 13102.21270742858
Epoch Step: 115 / 138 Loss: 18.401094436645508 Tokens per Sec: 11711.887374944603
Epoch Step: 120 / 138 Loss: 171.98020935058594 Tokens per Sec: 12683.555388224146
Epoch Step: 125 / 138 Loss: 20.27305030822754 Tokens per Sec: 12913.082132568481
Epoch Step: 130 / 138 Loss: 26.67692756652832 Tokens per Sec: 13015.13182435103
Epoch Step: 135 / 138 Loss: 20.98025131225586 Tokens per Sec: 12687.456898881712
Epoch ended with duration 0:00:48.684687
Train perplexity: 1.5364184655450632
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values TYPE_2 TYPE_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = ( + STRING_2 + STRING_3 ) + STRING_4 ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.976101
Validation perplexity: 2.006319292628557
Epoch 103 / 1000
Epoch Step: 5 / 138 Loss: 25.925739288330078 Tokens per Sec: 12814.1478798576
Epoch Step: 10 / 138 Loss: 26.58253288269043 Tokens per Sec: 12821.89766400765
Epoch Step: 15 / 138 Loss: 28.08429527282715 Tokens per Sec: 13765.370594617141
Epoch Step: 20 / 138 Loss: 21.509502410888672 Tokens per Sec: 12621.454406538574
Epoch Step: 25 / 138 Loss: 15.061528205871582 Tokens per Sec: 13132.307733385016
Epoch Step: 30 / 138 Loss: 25.489612579345703 Tokens per Sec: 13739.707685625508
Epoch Step: 35 / 138 Loss: 19.571914672851562 Tokens per Sec: 13546.853017332864
Epoch Step: 40 / 138 Loss: 20.483135223388672 Tokens per Sec: 14036.883701173547
Epoch Step: 45 / 138 Loss: 14.034795761108398 Tokens per Sec: 13475.947144653124
Epoch Step: 50 / 138 Loss: 21.459360122680664 Tokens per Sec: 13247.346931352438
Epoch Step: 55 / 138 Loss: 19.30227279663086 Tokens per Sec: 13146.595712266177
Epoch Step: 60 / 138 Loss: 17.363685607910156 Tokens per Sec: 13293.824235320839
Epoch Step: 65 / 138 Loss: 19.542503356933594 Tokens per Sec: 13744.366241808868
Epoch Step: 70 / 138 Loss: 13.01341438293457 Tokens per Sec: 13172.085910442156
Epoch Step: 75 / 138 Loss: 10.3641996383667 Tokens per Sec: 13040.455678345797
Epoch Step: 80 / 138 Loss: 157.13104248046875 Tokens per Sec: 13554.459560409696
Epoch Step: 85 / 138 Loss: 20.54315948486328 Tokens per Sec: 13133.140955571147
Epoch Step: 90 / 138 Loss: 28.290494918823242 Tokens per Sec: 13568.17844644575
Epoch Step: 95 / 138 Loss: 19.09015464782715 Tokens per Sec: 12914.252520489312
Epoch Step: 100 / 138 Loss: 25.63260269165039 Tokens per Sec: 12945.595401884313
Epoch Step: 105 / 138 Loss: 26.321203231811523 Tokens per Sec: 12855.654520782
Epoch Step: 110 / 138 Loss: 24.059003829956055 Tokens per Sec: 12972.125816288084
Epoch Step: 115 / 138 Loss: 20.49574851989746 Tokens per Sec: 13111.526769731392
Epoch Step: 120 / 138 Loss: 19.347848892211914 Tokens per Sec: 13171.970639970124
Epoch Step: 125 / 138 Loss: 22.905797958374023 Tokens per Sec: 12398.270446771114
Epoch Step: 130 / 138 Loss: 17.318132400512695 Tokens per Sec: 12887.977339781457
Epoch Step: 135 / 138 Loss: 18.826576232910156 Tokens per Sec: 12173.37093044136
Epoch ended with duration 0:00:48.528350
Train perplexity: 1.4724508189280672
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 . rule . METHOD_6 ( ) ) . }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.944874
Validation perplexity: 1.7190425582461486
Epoch 104 / 1000
Epoch Step: 5 / 138 Loss: 13.812332153320312 Tokens per Sec: 12948.734058001328
Epoch Step: 10 / 138 Loss: 88.13140869140625 Tokens per Sec: 12756.659505526688
Epoch Step: 15 / 138 Loss: 21.78158187866211 Tokens per Sec: 13024.88678245645
Epoch Step: 20 / 138 Loss: 15.763150215148926 Tokens per Sec: 13272.923688091481
Epoch Step: 25 / 138 Loss: 11.505941390991211 Tokens per Sec: 12849.630565010822
Epoch Step: 30 / 138 Loss: 13.911513328552246 Tokens per Sec: 13968.030678980782
Epoch Step: 35 / 138 Loss: 22.865999221801758 Tokens per Sec: 13274.66252311259
Epoch Step: 40 / 138 Loss: 16.63848304748535 Tokens per Sec: 12249.790448031625
Epoch Step: 45 / 138 Loss: 17.338626861572266 Tokens per Sec: 14037.386140491933
Epoch Step: 50 / 138 Loss: 14.67936897277832 Tokens per Sec: 13870.99495301345
Epoch Step: 55 / 138 Loss: 17.90856170654297 Tokens per Sec: 13674.122485374968
Epoch Step: 60 / 138 Loss: 22.824552536010742 Tokens per Sec: 13429.347642188715
Epoch Step: 65 / 138 Loss: 26.930564880371094 Tokens per Sec: 13423.359634433162
Epoch Step: 70 / 138 Loss: 68.08251953125 Tokens per Sec: 12233.77513583376
Epoch Step: 75 / 138 Loss: 14.874618530273438 Tokens per Sec: 13341.45921525675
Epoch Step: 80 / 138 Loss: 12.988546371459961 Tokens per Sec: 13103.88521123378
Epoch Step: 85 / 138 Loss: 26.278770446777344 Tokens per Sec: 12387.898371312249
Epoch Step: 90 / 138 Loss: 18.568193435668945 Tokens per Sec: 13661.571442608587
Epoch Step: 95 / 138 Loss: 176.8212432861328 Tokens per Sec: 13125.4947802785
Epoch Step: 100 / 138 Loss: 21.270267486572266 Tokens per Sec: 13466.294729425532
Epoch Step: 105 / 138 Loss: 195.94171142578125 Tokens per Sec: 11732.345370475437
Epoch Step: 110 / 138 Loss: 19.50773811340332 Tokens per Sec: 12784.253459155845
Epoch Step: 115 / 138 Loss: 28.794395446777344 Tokens per Sec: 13103.098636342424
Epoch Step: 120 / 138 Loss: 16.09524154663086 Tokens per Sec: 13270.379237195408
Epoch Step: 125 / 138 Loss: 21.373422622680664 Tokens per Sec: 12992.691872453033
Epoch Step: 130 / 138 Loss: 23.99770164489746 Tokens per Sec: 13233.68170877155
Epoch Step: 135 / 138 Loss: 17.283145904541016 Tokens per Sec: 12637.011295950255
Epoch ended with duration 0:00:48.651865
Train perplexity: 1.5580935507488902
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.847932
Validation perplexity: 1.3921098213883962
Model saved best_on_validation!
Epoch 105 / 1000
Epoch Step: 5 / 138 Loss: 17.15096664428711 Tokens per Sec: 12952.714372428889
Epoch Step: 10 / 138 Loss: 20.271154403686523 Tokens per Sec: 13650.938481328634
Epoch Step: 15 / 138 Loss: 79.86293029785156 Tokens per Sec: 12645.210256351136
Epoch Step: 20 / 138 Loss: 14.29670524597168 Tokens per Sec: 13619.893543756898
Epoch Step: 25 / 138 Loss: 21.419038772583008 Tokens per Sec: 13378.002621706499
Epoch Step: 30 / 138 Loss: 23.96650505065918 Tokens per Sec: 12984.055990572797
Epoch Step: 35 / 138 Loss: 24.398937225341797 Tokens per Sec: 13454.18614860232
Epoch Step: 40 / 138 Loss: 11.127043724060059 Tokens per Sec: 13239.034972937154
Epoch Step: 45 / 138 Loss: 19.69576072692871 Tokens per Sec: 13671.103978847
Epoch Step: 50 / 138 Loss: 18.41038703918457 Tokens per Sec: 12988.054437272047
Epoch Step: 55 / 138 Loss: 21.13058090209961 Tokens per Sec: 13936.008114893259
Epoch Step: 60 / 138 Loss: 14.947906494140625 Tokens per Sec: 13367.492415532717
Epoch Step: 65 / 138 Loss: 10.899393081665039 Tokens per Sec: 13323.98252591713
Epoch Step: 70 / 138 Loss: 24.129539489746094 Tokens per Sec: 13144.103355764484
Epoch Step: 75 / 138 Loss: 14.583760261535645 Tokens per Sec: 13374.411705955967
Epoch Step: 80 / 138 Loss: 26.408367156982422 Tokens per Sec: 12665.296211868581
Epoch Step: 85 / 138 Loss: 15.772549629211426 Tokens per Sec: 13127.976299596985
Epoch Step: 90 / 138 Loss: 26.867443084716797 Tokens per Sec: 13647.115231607084
Epoch Step: 95 / 138 Loss: 15.335518836975098 Tokens per Sec: 13253.111382488367
Epoch Step: 100 / 138 Loss: 12.89715576171875 Tokens per Sec: 13311.699251365106
Epoch Step: 105 / 138 Loss: 18.085588455200195 Tokens per Sec: 12935.43531565577
Epoch Step: 110 / 138 Loss: 16.812055587768555 Tokens per Sec: 12527.306327632217
Epoch Step: 115 / 138 Loss: 20.189661026000977 Tokens per Sec: 12431.305253436161
Epoch Step: 120 / 138 Loss: 21.80497169494629 Tokens per Sec: 11804.015355111635
Epoch Step: 125 / 138 Loss: 198.51419067382812 Tokens per Sec: 12549.057366823692
Epoch Step: 130 / 138 Loss: 19.093788146972656 Tokens per Sec: 13184.03324792025
Epoch Step: 135 / 138 Loss: 19.8217716217041 Tokens per Sec: 13008.694172610954
Epoch ended with duration 0:00:48.638577
Train perplexity: 1.485425207054048
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , , , , , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.975595
Validation perplexity: 1.8720212683887782
Model saved checkpoint!
Epoch 106 / 1000
Epoch Step: 5 / 138 Loss: 15.519074440002441 Tokens per Sec: 12465.069788912604
Epoch Step: 10 / 138 Loss: 27.080045700073242 Tokens per Sec: 13699.178004059822
Epoch Step: 15 / 138 Loss: 137.75006103515625 Tokens per Sec: 12498.50681439681
Epoch Step: 20 / 138 Loss: 14.044767379760742 Tokens per Sec: 13576.100436952285
Epoch Step: 25 / 138 Loss: 22.016359329223633 Tokens per Sec: 13894.571219633612
Epoch Step: 30 / 138 Loss: 22.92436981201172 Tokens per Sec: 13588.029927840547
Epoch Step: 35 / 138 Loss: 127.56369018554688 Tokens per Sec: 13013.451854951978
Epoch Step: 40 / 138 Loss: 17.184551239013672 Tokens per Sec: 13032.085877577993
Epoch Step: 45 / 138 Loss: 154.025634765625 Tokens per Sec: 12780.513054667987
Epoch Step: 50 / 138 Loss: 13.281957626342773 Tokens per Sec: 13248.249872709477
Epoch Step: 55 / 138 Loss: 26.207351684570312 Tokens per Sec: 13028.255321707582
Epoch Step: 60 / 138 Loss: 16.868825912475586 Tokens per Sec: 12453.908898030146
Epoch Step: 65 / 138 Loss: 28.495037078857422 Tokens per Sec: 12902.169132941646
Epoch Step: 70 / 138 Loss: 19.154630661010742 Tokens per Sec: 13540.180132748363
Epoch Step: 75 / 138 Loss: 31.79924201965332 Tokens per Sec: 13234.134663019347
Epoch Step: 80 / 138 Loss: 11.342435836791992 Tokens per Sec: 13602.578263794903
Epoch Step: 85 / 138 Loss: 22.976865768432617 Tokens per Sec: 13677.008254480317
Epoch Step: 90 / 138 Loss: 14.857279777526855 Tokens per Sec: 13237.247393692123
Epoch Step: 95 / 138 Loss: 20.638208389282227 Tokens per Sec: 14018.351353763592
Epoch Step: 100 / 138 Loss: 19.723543167114258 Tokens per Sec: 12975.746382501022
Epoch Step: 105 / 138 Loss: 17.150503158569336 Tokens per Sec: 13282.611668263391
Epoch Step: 110 / 138 Loss: 17.046974182128906 Tokens per Sec: 12981.731852452942
Epoch Step: 115 / 138 Loss: 18.261844635009766 Tokens per Sec: 13309.292127811532
Epoch Step: 120 / 138 Loss: 23.642353057861328 Tokens per Sec: 12926.12980767354
Epoch Step: 125 / 138 Loss: 17.385644912719727 Tokens per Sec: 12243.344211549454
Epoch Step: 130 / 138 Loss: 20.20716667175293 Tokens per Sec: 11680.590860831759
Epoch Step: 135 / 138 Loss: 19.548261642456055 Tokens per Sec: 13054.479407997382
Epoch ended with duration 0:00:48.642225
Train perplexity: 1.482316814032129
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.865184
Validation perplexity: 1.3486326687734767
Model saved best_on_validation!
Epoch 107 / 1000
Epoch Step: 5 / 138 Loss: 15.299434661865234 Tokens per Sec: 13008.977372870797
Epoch Step: 10 / 138 Loss: 13.874332427978516 Tokens per Sec: 13179.564841808005
Epoch Step: 15 / 138 Loss: 17.03772735595703 Tokens per Sec: 13606.727733298625
Epoch Step: 20 / 138 Loss: 11.53118896484375 Tokens per Sec: 13132.454448279515
Epoch Step: 25 / 138 Loss: 16.23953628540039 Tokens per Sec: 13844.286573839416
Epoch Step: 30 / 138 Loss: 24.39777374267578 Tokens per Sec: 13410.104457014279
Epoch Step: 35 / 138 Loss: 17.572052001953125 Tokens per Sec: 13014.077660838053
Epoch Step: 40 / 138 Loss: 18.370962142944336 Tokens per Sec: 13508.74553634386
Epoch Step: 45 / 138 Loss: 19.94411277770996 Tokens per Sec: 12491.918131557508
Epoch Step: 50 / 138 Loss: 26.80876922607422 Tokens per Sec: 13294.60701279453
Epoch Step: 55 / 138 Loss: 15.708093643188477 Tokens per Sec: 12980.28485752568
Epoch Step: 60 / 138 Loss: 18.41065216064453 Tokens per Sec: 13386.523395275035
Epoch Step: 65 / 138 Loss: 34.44789123535156 Tokens per Sec: 13128.581293220059
Epoch Step: 70 / 138 Loss: 65.90647888183594 Tokens per Sec: 12858.877987211046
Epoch Step: 75 / 138 Loss: 54.70789337158203 Tokens per Sec: 13220.260893644447
Epoch Step: 80 / 138 Loss: 22.531394958496094 Tokens per Sec: 13703.025319308428
Epoch Step: 85 / 138 Loss: 51.856746673583984 Tokens per Sec: 13427.641527168693
Epoch Step: 90 / 138 Loss: 39.51708221435547 Tokens per Sec: 13587.2937854546
Epoch Step: 95 / 138 Loss: 24.726524353027344 Tokens per Sec: 13283.337833837768
Epoch Step: 100 / 138 Loss: 30.508525848388672 Tokens per Sec: 13152.925340250558
Epoch Step: 105 / 138 Loss: 18.973363876342773 Tokens per Sec: 12878.624200737739
Epoch Step: 110 / 138 Loss: 23.923852920532227 Tokens per Sec: 12790.309057933382
Epoch Step: 115 / 138 Loss: 27.602706909179688 Tokens per Sec: 13204.383413764463
Epoch Step: 120 / 138 Loss: 19.680265426635742 Tokens per Sec: 12375.627548915854
Epoch Step: 125 / 138 Loss: 29.04501724243164 Tokens per Sec: 12067.881511320491
Epoch Step: 130 / 138 Loss: 22.384620666503906 Tokens per Sec: 12954.435003942122
Epoch Step: 135 / 138 Loss: 18.37525749206543 Tokens per Sec: 12570.042404246698
Epoch ended with duration 0:00:48.653332
Train perplexity: 1.5482600565244364
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.924834
Validation perplexity: 1.571149589683061
Epoch 108 / 1000
Epoch Step: 5 / 138 Loss: 17.23155975341797 Tokens per Sec: 12540.384212618883
Epoch Step: 10 / 138 Loss: 24.543630599975586 Tokens per Sec: 13737.921902203087
Epoch Step: 15 / 138 Loss: 12.840495109558105 Tokens per Sec: 13567.998377779111
Epoch Step: 20 / 138 Loss: 14.282021522521973 Tokens per Sec: 13043.822233264395
Epoch Step: 25 / 138 Loss: 25.953256607055664 Tokens per Sec: 13291.389078532782
Epoch Step: 30 / 138 Loss: 22.752111434936523 Tokens per Sec: 13371.205662557106
Epoch Step: 35 / 138 Loss: 15.966655731201172 Tokens per Sec: 12667.866432931336
Epoch Step: 40 / 138 Loss: 18.346792221069336 Tokens per Sec: 13510.492652683666
Epoch Step: 45 / 138 Loss: 28.50751495361328 Tokens per Sec: 13103.80013731033
Epoch Step: 50 / 138 Loss: 27.255001068115234 Tokens per Sec: 13424.78820766696
Epoch Step: 55 / 138 Loss: 28.956140518188477 Tokens per Sec: 12139.7789982805
Epoch Step: 60 / 138 Loss: 26.381017684936523 Tokens per Sec: 13555.876542839394
Epoch Step: 65 / 138 Loss: 18.30169677734375 Tokens per Sec: 12916.698505165226
Epoch Step: 70 / 138 Loss: 11.075577735900879 Tokens per Sec: 14026.804346165387
Epoch Step: 75 / 138 Loss: 14.192764282226562 Tokens per Sec: 12966.693499250594
Epoch Step: 80 / 138 Loss: 21.94818115234375 Tokens per Sec: 12854.671887240753
Epoch Step: 85 / 138 Loss: 21.456531524658203 Tokens per Sec: 12944.095129215862
Epoch Step: 90 / 138 Loss: 18.865386962890625 Tokens per Sec: 12705.604364298222
Epoch Step: 95 / 138 Loss: 15.881538391113281 Tokens per Sec: 13760.630221941246
Epoch Step: 100 / 138 Loss: 22.601974487304688 Tokens per Sec: 13158.281633118455
Epoch Step: 105 / 138 Loss: 17.555044174194336 Tokens per Sec: 12963.45210048853
Epoch Step: 110 / 138 Loss: 157.35911560058594 Tokens per Sec: 11855.464794240821
Epoch Step: 115 / 138 Loss: 17.070329666137695 Tokens per Sec: 12459.835142777283
Epoch Step: 120 / 138 Loss: 20.065074920654297 Tokens per Sec: 12615.103902534303
Epoch Step: 125 / 138 Loss: 26.168468475341797 Tokens per Sec: 13223.533667276615
Epoch Step: 130 / 138 Loss: 16.64972686767578 Tokens per Sec: 13057.29034312787
Epoch Step: 135 / 138 Loss: 13.56548023223877 Tokens per Sec: 12141.17368447524
Epoch ended with duration 0:00:48.995497
Train perplexity: 1.64087049389186
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.877203
Validation perplexity: 1.4597584158615142
Epoch 109 / 1000
Epoch Step: 5 / 138 Loss: 14.526164054870605 Tokens per Sec: 13604.24566725835
Epoch Step: 10 / 138 Loss: 19.34107208251953 Tokens per Sec: 13245.44015802272
Epoch Step: 15 / 138 Loss: 17.464576721191406 Tokens per Sec: 14057.688053558257
Epoch Step: 20 / 138 Loss: 19.51197624206543 Tokens per Sec: 13320.588176301097
Epoch Step: 25 / 138 Loss: 152.09451293945312 Tokens per Sec: 12301.640279738232
Epoch Step: 30 / 138 Loss: 23.230449676513672 Tokens per Sec: 13624.814927667197
Epoch Step: 35 / 138 Loss: 27.128170013427734 Tokens per Sec: 13040.316486719454
Epoch Step: 40 / 138 Loss: 118.27189636230469 Tokens per Sec: 12373.685991655404
Epoch Step: 45 / 138 Loss: 20.940832138061523 Tokens per Sec: 12123.034819662756
Epoch Step: 50 / 138 Loss: 38.79724884033203 Tokens per Sec: 12005.202515332929
Epoch Step: 55 / 138 Loss: 25.29484748840332 Tokens per Sec: 11830.571675202395
Epoch Step: 60 / 138 Loss: 27.52191925048828 Tokens per Sec: 12198.601585472785
Epoch Step: 65 / 138 Loss: 20.410022735595703 Tokens per Sec: 12021.154079265814
Epoch Step: 70 / 138 Loss: 20.645675659179688 Tokens per Sec: 12480.280083598176
Epoch Step: 75 / 138 Loss: 24.990650177001953 Tokens per Sec: 12153.87287570342
Epoch Step: 80 / 138 Loss: 21.863290786743164 Tokens per Sec: 12689.815995648225
Epoch Step: 85 / 138 Loss: 11.030232429504395 Tokens per Sec: 12704.7246520213
Epoch Step: 90 / 138 Loss: 16.08135986328125 Tokens per Sec: 11694.954993361262
Epoch Step: 95 / 138 Loss: 29.279403686523438 Tokens per Sec: 12461.2751754171
Epoch Step: 100 / 138 Loss: 28.942651748657227 Tokens per Sec: 12645.76909511005
Epoch Step: 105 / 138 Loss: 22.801895141601562 Tokens per Sec: 11947.951430415304
Epoch Step: 110 / 138 Loss: 25.33708381652832 Tokens per Sec: 11965.30925630603
Epoch Step: 115 / 138 Loss: 125.00703430175781 Tokens per Sec: 11839.264316324128
Epoch Step: 120 / 138 Loss: 15.709311485290527 Tokens per Sec: 10753.373144769139
Epoch Step: 125 / 138 Loss: 18.60569953918457 Tokens per Sec: 11941.488950078869
Epoch Step: 130 / 138 Loss: 22.512435913085938 Tokens per Sec: 11697.710062720676
Epoch Step: 135 / 138 Loss: 15.357542037963867 Tokens per Sec: 11934.3036706735
Epoch ended with duration 0:00:51.572386
Train perplexity: 1.57433087853335
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.924212
Validation perplexity: 1.510685175306263
Epoch 110 / 1000
Epoch Step: 5 / 138 Loss: 27.63212013244629 Tokens per Sec: 12361.96587261058
Epoch Step: 10 / 138 Loss: 11.25016975402832 Tokens per Sec: 12581.529408486836
Epoch Step: 15 / 138 Loss: 19.989946365356445 Tokens per Sec: 12047.855675376057
Epoch Step: 20 / 138 Loss: 25.791410446166992 Tokens per Sec: 12408.021951527833
Epoch Step: 25 / 138 Loss: 23.58268928527832 Tokens per Sec: 12384.465290559308
Epoch Step: 30 / 138 Loss: 21.52034568786621 Tokens per Sec: 12189.232598389011
Epoch Step: 35 / 138 Loss: 26.134254455566406 Tokens per Sec: 12001.85150042736
Epoch Step: 40 / 138 Loss: 22.210556030273438 Tokens per Sec: 12083.098873172412
Epoch Step: 45 / 138 Loss: 19.724857330322266 Tokens per Sec: 12102.613746280767
Epoch Step: 50 / 138 Loss: 18.39779281616211 Tokens per Sec: 12397.914981387885
Epoch Step: 55 / 138 Loss: 135.3186492919922 Tokens per Sec: 12278.971218609973
Epoch Step: 60 / 138 Loss: 16.474334716796875 Tokens per Sec: 12541.207574827482
Epoch Step: 65 / 138 Loss: 16.226207733154297 Tokens per Sec: 12460.255904342117
Epoch Step: 70 / 138 Loss: 22.55052375793457 Tokens per Sec: 11737.87864088538
Epoch Step: 75 / 138 Loss: 22.337251663208008 Tokens per Sec: 12484.537690466292
Epoch Step: 80 / 138 Loss: 10.175371170043945 Tokens per Sec: 13034.573388196817
Epoch Step: 85 / 138 Loss: 15.93110466003418 Tokens per Sec: 12981.258638913177
Epoch Step: 90 / 138 Loss: 15.102465629577637 Tokens per Sec: 12624.687360147209
Epoch Step: 95 / 138 Loss: 29.01109504699707 Tokens per Sec: 12566.02878953966
Epoch Step: 100 / 138 Loss: 11.642492294311523 Tokens per Sec: 12414.356761226689
Epoch Step: 105 / 138 Loss: 13.071380615234375 Tokens per Sec: 11203.708017777479
Epoch Step: 110 / 138 Loss: 25.507556915283203 Tokens per Sec: 12178.882751632294
Epoch Step: 115 / 138 Loss: 22.257150650024414 Tokens per Sec: 12422.118473194962
Epoch Step: 120 / 138 Loss: 17.379186630249023 Tokens per Sec: 11860.716380695225
Epoch Step: 125 / 138 Loss: 16.52815818786621 Tokens per Sec: 10897.33177071317
Epoch Step: 130 / 138 Loss: 16.323762893676758 Tokens per Sec: 12041.10900402895
Epoch Step: 135 / 138 Loss: 19.73719596862793 Tokens per Sec: 12229.242332875552
Epoch ended with duration 0:00:52.105486
Train perplexity: 1.4666373519282607
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.930785
Validation perplexity: 1.5129264712957917
Model saved checkpoint!
Epoch 111 / 1000
Epoch Step: 5 / 138 Loss: 17.773252487182617 Tokens per Sec: 12170.622159904202
Epoch Step: 10 / 138 Loss: 69.57200622558594 Tokens per Sec: 11770.974330276538
Epoch Step: 15 / 138 Loss: 26.102285385131836 Tokens per Sec: 12195.461529374117
Epoch Step: 20 / 138 Loss: 18.1977481842041 Tokens per Sec: 12288.57134886316
Epoch Step: 25 / 138 Loss: 12.947108268737793 Tokens per Sec: 12696.510327801489
Epoch Step: 30 / 138 Loss: 22.159217834472656 Tokens per Sec: 12318.700415646019
Epoch Step: 35 / 138 Loss: 19.25779151916504 Tokens per Sec: 12297.449514195403
Epoch Step: 40 / 138 Loss: 175.68641662597656 Tokens per Sec: 12351.142111272835
Epoch Step: 45 / 138 Loss: 14.658027648925781 Tokens per Sec: 11984.34272336254
Epoch Step: 50 / 138 Loss: 33.81166076660156 Tokens per Sec: 12840.004445014398
Epoch Step: 55 / 138 Loss: 12.858111381530762 Tokens per Sec: 12520.982806493917
Epoch Step: 60 / 138 Loss: 12.839545249938965 Tokens per Sec: 12805.796360967941
Epoch Step: 65 / 138 Loss: 24.63951301574707 Tokens per Sec: 12640.061153796241
Epoch Step: 70 / 138 Loss: 23.73567771911621 Tokens per Sec: 12765.169413343214
Epoch Step: 75 / 138 Loss: 27.638883590698242 Tokens per Sec: 12061.75846348043
Epoch Step: 80 / 138 Loss: 15.329476356506348 Tokens per Sec: 12490.740223501358
Epoch Step: 85 / 138 Loss: 30.900554656982422 Tokens per Sec: 12079.499757511128
Epoch Step: 90 / 138 Loss: 32.20601272583008 Tokens per Sec: 12407.483760379042
Epoch Step: 95 / 138 Loss: 17.64644432067871 Tokens per Sec: 11697.092949456079
Epoch Step: 100 / 138 Loss: 21.945697784423828 Tokens per Sec: 11935.484212728392
Epoch Step: 105 / 138 Loss: 16.265844345092773 Tokens per Sec: 11550.184169050448
Epoch Step: 110 / 138 Loss: 23.06987762451172 Tokens per Sec: 10979.513299720407
Epoch Step: 115 / 138 Loss: 20.870166778564453 Tokens per Sec: 11869.066037492028
Epoch Step: 120 / 138 Loss: 19.678546905517578 Tokens per Sec: 11917.066132592967
Epoch Step: 125 / 138 Loss: 20.934463500976562 Tokens per Sec: 11662.270809136417
Epoch Step: 130 / 138 Loss: 13.944767951965332 Tokens per Sec: 11936.53515925993
Epoch Step: 135 / 138 Loss: 17.904743194580078 Tokens per Sec: 12020.631200293705
Epoch ended with duration 0:00:52.458811
Train perplexity: 1.5966338264218665
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.951214
Validation perplexity: 1.8933633174896671
Epoch 112 / 1000
Epoch Step: 5 / 138 Loss: 12.437131881713867 Tokens per Sec: 12767.524526111429
Epoch Step: 10 / 138 Loss: 13.23281478881836 Tokens per Sec: 11974.998012859078
Epoch Step: 15 / 138 Loss: 24.310150146484375 Tokens per Sec: 11463.289580625305
Epoch Step: 20 / 138 Loss: 17.04079818725586 Tokens per Sec: 11863.81041640971
Epoch Step: 25 / 138 Loss: 182.97193908691406 Tokens per Sec: 12084.4257211743
Epoch Step: 30 / 138 Loss: 24.325889587402344 Tokens per Sec: 12167.76475620626
Epoch Step: 35 / 138 Loss: 32.466285705566406 Tokens per Sec: 12552.90871861089
Epoch Step: 40 / 138 Loss: 99.34005737304688 Tokens per Sec: 12333.295562072813
Epoch Step: 45 / 138 Loss: 104.15634155273438 Tokens per Sec: 12114.307144422211
Epoch Step: 50 / 138 Loss: 91.59785461425781 Tokens per Sec: 12018.974204045397
Epoch Step: 55 / 138 Loss: 20.084394454956055 Tokens per Sec: 12473.769433318013
Epoch Step: 60 / 138 Loss: 24.217924118041992 Tokens per Sec: 12549.872256160139
Epoch Step: 65 / 138 Loss: 19.727785110473633 Tokens per Sec: 12479.424948970838
Epoch Step: 70 / 138 Loss: 135.38522338867188 Tokens per Sec: 12346.111270619096
Epoch Step: 75 / 138 Loss: 91.07862854003906 Tokens per Sec: 11935.676360118172
Epoch Step: 80 / 138 Loss: 26.20522689819336 Tokens per Sec: 12864.859970535044
Epoch Step: 85 / 138 Loss: 28.2029972076416 Tokens per Sec: 12134.582343597527
Epoch Step: 90 / 138 Loss: 26.978605270385742 Tokens per Sec: 12592.012451600353
Epoch Step: 95 / 138 Loss: 23.03403663635254 Tokens per Sec: 11455.297358278242
Epoch Step: 100 / 138 Loss: 23.637319564819336 Tokens per Sec: 11774.33903692288
Epoch Step: 105 / 138 Loss: 18.891387939453125 Tokens per Sec: 11701.265988772528
Epoch Step: 110 / 138 Loss: 19.473068237304688 Tokens per Sec: 11597.599125231207
Epoch Step: 115 / 138 Loss: 18.34882164001465 Tokens per Sec: 11937.413236934555
Epoch Step: 120 / 138 Loss: 15.108604431152344 Tokens per Sec: 11679.684494651196
Epoch Step: 125 / 138 Loss: 20.7547607421875 Tokens per Sec: 12312.481916946057
Epoch Step: 130 / 138 Loss: 15.093186378479004 Tokens per Sec: 11866.469291335265
Epoch Step: 135 / 138 Loss: 19.713157653808594 Tokens per Sec: 11755.080127107023
Epoch ended with duration 0:00:52.717273
Train perplexity: 1.5778932418856078
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.899353
Validation perplexity: 1.36101675825895
Epoch 113 / 1000
Epoch Step: 5 / 138 Loss: 112.41444396972656 Tokens per Sec: 11120.368473085891
Epoch Step: 10 / 138 Loss: 22.072473526000977 Tokens per Sec: 12410.28596223343
Epoch Step: 15 / 138 Loss: 21.813976287841797 Tokens per Sec: 12405.260770423174
Epoch Step: 20 / 138 Loss: 23.314254760742188 Tokens per Sec: 11640.40927403188
Epoch Step: 25 / 138 Loss: 18.42264175415039 Tokens per Sec: 11560.705490022514
Epoch Step: 30 / 138 Loss: 26.18574333190918 Tokens per Sec: 11596.505236178935
Epoch Step: 35 / 138 Loss: 23.338823318481445 Tokens per Sec: 12037.207654728822
Epoch Step: 40 / 138 Loss: 12.884574890136719 Tokens per Sec: 13170.890373781287
Epoch Step: 45 / 138 Loss: 19.217174530029297 Tokens per Sec: 12332.359702718657
Epoch Step: 50 / 138 Loss: 21.257415771484375 Tokens per Sec: 12446.518756040317
Epoch Step: 55 / 138 Loss: 20.513093948364258 Tokens per Sec: 12553.745948280777
Epoch Step: 60 / 138 Loss: 104.0726318359375 Tokens per Sec: 11713.997304578626
Epoch Step: 65 / 138 Loss: 17.419965744018555 Tokens per Sec: 12674.781919750056
Epoch Step: 70 / 138 Loss: 26.07215690612793 Tokens per Sec: 12279.218174699909
Epoch Step: 75 / 138 Loss: 23.380882263183594 Tokens per Sec: 12831.116251176156
Epoch Step: 80 / 138 Loss: 24.40560531616211 Tokens per Sec: 11901.924817710922
Epoch Step: 85 / 138 Loss: 12.865411758422852 Tokens per Sec: 12492.304928391537
Epoch Step: 90 / 138 Loss: 22.595617294311523 Tokens per Sec: 12072.087915585085
Epoch Step: 95 / 138 Loss: 27.12213897705078 Tokens per Sec: 12193.106453371904
Epoch Step: 100 / 138 Loss: 27.925832748413086 Tokens per Sec: 12764.866108303102
Epoch Step: 105 / 138 Loss: 16.436378479003906 Tokens per Sec: 12289.198568388461
Epoch Step: 110 / 138 Loss: 19.16107940673828 Tokens per Sec: 11963.436604358873
Epoch Step: 115 / 138 Loss: 19.55809783935547 Tokens per Sec: 11961.80229527005
Epoch Step: 120 / 138 Loss: 16.654518127441406 Tokens per Sec: 11807.762305644028
Epoch Step: 125 / 138 Loss: 11.954607009887695 Tokens per Sec: 12245.588879549367
Epoch Step: 130 / 138 Loss: 16.7275390625 Tokens per Sec: 11897.33516582247
Epoch Step: 135 / 138 Loss: 18.186349868774414 Tokens per Sec: 10380.164121664038
Epoch ended with duration 0:00:52.730789
Train perplexity: 1.5282135716812473
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , , , , , , , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.995300
Validation perplexity: 1.7993509162104246
Epoch 114 / 1000
Epoch Step: 5 / 138 Loss: 22.288618087768555 Tokens per Sec: 12469.799053921755
Epoch Step: 10 / 138 Loss: 78.02123260498047 Tokens per Sec: 12350.515369137463
Epoch Step: 15 / 138 Loss: 17.132198333740234 Tokens per Sec: 12698.474986984302
Epoch Step: 20 / 138 Loss: 24.768333435058594 Tokens per Sec: 12568.9421381017
Epoch Step: 25 / 138 Loss: 21.44123077392578 Tokens per Sec: 11955.441991596363
Epoch Step: 30 / 138 Loss: 11.308895111083984 Tokens per Sec: 12450.116002820692
Epoch Step: 35 / 138 Loss: 13.93301010131836 Tokens per Sec: 12463.500765937144
Epoch Step: 40 / 138 Loss: 19.811420440673828 Tokens per Sec: 11920.409357276882
Epoch Step: 45 / 138 Loss: 15.89891529083252 Tokens per Sec: 12420.729388841843
Epoch Step: 50 / 138 Loss: 14.716526985168457 Tokens per Sec: 11746.638012611302
Epoch Step: 55 / 138 Loss: 20.82158660888672 Tokens per Sec: 11981.112167324562
Epoch Step: 60 / 138 Loss: 25.285364151000977 Tokens per Sec: 11722.87546738299
Epoch Step: 65 / 138 Loss: 30.634702682495117 Tokens per Sec: 11913.605635403057
Epoch Step: 70 / 138 Loss: 36.13949203491211 Tokens per Sec: 12369.101378145402
Epoch Step: 75 / 138 Loss: 29.548133850097656 Tokens per Sec: 12032.577136296144
Epoch Step: 80 / 138 Loss: 26.9985408782959 Tokens per Sec: 12129.891339832384
Epoch Step: 85 / 138 Loss: 18.671133041381836 Tokens per Sec: 12987.050688764311
Epoch Step: 90 / 138 Loss: 13.119625091552734 Tokens per Sec: 12747.156281354979
Epoch Step: 95 / 138 Loss: 165.00978088378906 Tokens per Sec: 11718.569517912656
Epoch Step: 100 / 138 Loss: 10.44853687286377 Tokens per Sec: 12001.490546240435
Epoch Step: 105 / 138 Loss: 17.60249137878418 Tokens per Sec: 11083.803274345963
Epoch Step: 110 / 138 Loss: 18.385639190673828 Tokens per Sec: 11792.172236954322
Epoch Step: 115 / 138 Loss: 22.234344482421875 Tokens per Sec: 12104.736560886297
Epoch Step: 120 / 138 Loss: 14.162724494934082 Tokens per Sec: 11746.877757766853
Epoch Step: 125 / 138 Loss: 19.546743392944336 Tokens per Sec: 11666.290518438878
Epoch Step: 130 / 138 Loss: 17.569297790527344 Tokens per Sec: 11897.205069366053
Epoch Step: 135 / 138 Loss: 18.106094360351562 Tokens per Sec: 11674.88708646121
Epoch ended with duration 0:00:52.754348
Train perplexity: 1.6085409312160195
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.006668
Validation perplexity: 1.8205261794923508
Epoch 115 / 1000
Epoch Step: 5 / 138 Loss: 121.30925750732422 Tokens per Sec: 12103.746597835407
Epoch Step: 10 / 138 Loss: 23.255962371826172 Tokens per Sec: 12155.088591330232
Epoch Step: 15 / 138 Loss: 25.852157592773438 Tokens per Sec: 12695.54290943567
Epoch Step: 20 / 138 Loss: 22.511579513549805 Tokens per Sec: 11197.05682985288
Epoch Step: 25 / 138 Loss: 15.209966659545898 Tokens per Sec: 11947.571472779018
Epoch Step: 30 / 138 Loss: 15.454075813293457 Tokens per Sec: 12244.071757949054
Epoch Step: 35 / 138 Loss: 20.99073600769043 Tokens per Sec: 11683.76754309241
Epoch Step: 40 / 138 Loss: 22.196380615234375 Tokens per Sec: 12084.57737022826
Epoch Step: 45 / 138 Loss: 16.355012893676758 Tokens per Sec: 12238.128879419019
Epoch Step: 50 / 138 Loss: 14.763683319091797 Tokens per Sec: 12991.768592160579
Epoch Step: 55 / 138 Loss: 13.748889923095703 Tokens per Sec: 12514.826410709818
Epoch Step: 60 / 138 Loss: 24.189111709594727 Tokens per Sec: 12583.335933428658
Epoch Step: 65 / 138 Loss: 21.49822235107422 Tokens per Sec: 12354.763136005453
Epoch Step: 70 / 138 Loss: 16.612276077270508 Tokens per Sec: 12455.176472597786
Epoch Step: 75 / 138 Loss: 23.257131576538086 Tokens per Sec: 12677.462578962604
Epoch Step: 80 / 138 Loss: 11.796135902404785 Tokens per Sec: 11970.615016535226
Epoch Step: 85 / 138 Loss: 16.236434936523438 Tokens per Sec: 12985.198087113415
Epoch Step: 90 / 138 Loss: 13.549704551696777 Tokens per Sec: 12273.068272056738
Epoch Step: 95 / 138 Loss: 12.402043342590332 Tokens per Sec: 11941.296395521502
Epoch Step: 100 / 138 Loss: 20.702024459838867 Tokens per Sec: 12259.787841089566
Epoch Step: 105 / 138 Loss: 14.12637996673584 Tokens per Sec: 11966.898376709107
Epoch Step: 110 / 138 Loss: 77.4919204711914 Tokens per Sec: 10587.631047023855
Epoch Step: 115 / 138 Loss: 19.736234664916992 Tokens per Sec: 12178.452139050283
Epoch Step: 120 / 138 Loss: 18.7775936126709 Tokens per Sec: 11659.939776425283
Epoch Step: 125 / 138 Loss: 16.687305450439453 Tokens per Sec: 11551.8637317006
Epoch Step: 130 / 138 Loss: 12.608930587768555 Tokens per Sec: 12175.803823040978
Epoch Step: 135 / 138 Loss: 18.408287048339844 Tokens per Sec: 12252.718430903997
Epoch ended with duration 0:00:52.529722
Train perplexity: 1.4434040868719273
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.995577
Validation perplexity: 1.6440958366928184
Model saved checkpoint!
Epoch 116 / 1000
Epoch Step: 5 / 138 Loss: 19.263826370239258 Tokens per Sec: 12451.46811761156
Epoch Step: 10 / 138 Loss: 11.633864402770996 Tokens per Sec: 12753.374580957028
Epoch Step: 15 / 138 Loss: 25.022218704223633 Tokens per Sec: 12893.745765362837
Epoch Step: 20 / 138 Loss: 75.07743072509766 Tokens per Sec: 11876.725542144884
Epoch Step: 25 / 138 Loss: 198.46490478515625 Tokens per Sec: 12552.129622639495
Epoch Step: 30 / 138 Loss: 13.396336555480957 Tokens per Sec: 11818.620549381003
Epoch Step: 35 / 138 Loss: 18.637989044189453 Tokens per Sec: 12532.028407597147
Epoch Step: 40 / 138 Loss: 13.602502822875977 Tokens per Sec: 11795.309457219455
Epoch Step: 45 / 138 Loss: 18.020898818969727 Tokens per Sec: 12250.791086678868
Epoch Step: 50 / 138 Loss: 23.575040817260742 Tokens per Sec: 12074.361846564649
Epoch Step: 55 / 138 Loss: 14.126724243164062 Tokens per Sec: 11854.990921182598
Epoch Step: 60 / 138 Loss: 22.8776912689209 Tokens per Sec: 12337.357897438591
Epoch Step: 65 / 138 Loss: 19.00082015991211 Tokens per Sec: 12106.699459947533
Epoch Step: 70 / 138 Loss: 12.239202499389648 Tokens per Sec: 12218.482623577847
Epoch Step: 75 / 138 Loss: 12.387747764587402 Tokens per Sec: 12271.018987291478
Epoch Step: 80 / 138 Loss: 126.02786254882812 Tokens per Sec: 12390.163623573775
Epoch Step: 85 / 138 Loss: 137.7154541015625 Tokens per Sec: 12703.710481410235
Epoch Step: 90 / 138 Loss: 27.56932258605957 Tokens per Sec: 12757.783890615045
Epoch Step: 95 / 138 Loss: 11.390090942382812 Tokens per Sec: 12460.698109515848
Epoch Step: 100 / 138 Loss: 180.0293426513672 Tokens per Sec: 11288.672348946704
Epoch Step: 105 / 138 Loss: 24.350296020507812 Tokens per Sec: 11812.80621586923
Epoch Step: 110 / 138 Loss: 30.755373001098633 Tokens per Sec: 10898.677709789086
Epoch Step: 115 / 138 Loss: 21.56635093688965 Tokens per Sec: 11078.212077105043
Epoch Step: 120 / 138 Loss: 23.99840545654297 Tokens per Sec: 11477.831936982646
Epoch Step: 125 / 138 Loss: 15.289775848388672 Tokens per Sec: 11820.43984631386
Epoch Step: 130 / 138 Loss: 20.016267776489258 Tokens per Sec: 11860.895956707162
Epoch Step: 135 / 138 Loss: 15.36539077758789 Tokens per Sec: 11855.136186297164
Epoch ended with duration 0:00:52.841973
Train perplexity: 1.5408984362661142
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.911282
Validation perplexity: 1.5303993751216691
Epoch 117 / 1000
Epoch Step: 5 / 138 Loss: 16.77672576904297 Tokens per Sec: 11588.36594907534
Epoch Step: 10 / 138 Loss: 20.675838470458984 Tokens per Sec: 11710.70989896384
Epoch Step: 15 / 138 Loss: 21.45649528503418 Tokens per Sec: 11924.915405686854
Epoch Step: 20 / 138 Loss: 40.986778259277344 Tokens per Sec: 12952.999482792331
Epoch Step: 25 / 138 Loss: 21.452463150024414 Tokens per Sec: 11946.245933104829
Epoch Step: 30 / 138 Loss: 23.906625747680664 Tokens per Sec: 12430.18507815099
Epoch Step: 35 / 138 Loss: 12.560761451721191 Tokens per Sec: 12434.363000009185
Epoch Step: 40 / 138 Loss: 187.47274780273438 Tokens per Sec: 12172.46721859114
Epoch Step: 45 / 138 Loss: 20.648160934448242 Tokens per Sec: 12833.485569230565
Epoch Step: 50 / 138 Loss: 15.700543403625488 Tokens per Sec: 12418.746902968238
Epoch Step: 55 / 138 Loss: 20.82228660583496 Tokens per Sec: 12524.87124655386
Epoch Step: 60 / 138 Loss: 10.796585083007812 Tokens per Sec: 12677.661714215661
Epoch Step: 65 / 138 Loss: 24.583417892456055 Tokens per Sec: 12046.08645083114
Epoch Step: 70 / 138 Loss: 14.606313705444336 Tokens per Sec: 12327.736415690952
Epoch Step: 75 / 138 Loss: 72.48745727539062 Tokens per Sec: 12064.498527432015
Epoch Step: 80 / 138 Loss: 18.008399963378906 Tokens per Sec: 12527.916460871254
Epoch Step: 85 / 138 Loss: 28.438642501831055 Tokens per Sec: 11886.10188595487
Epoch Step: 90 / 138 Loss: 13.441025733947754 Tokens per Sec: 12188.803208405478
Epoch Step: 95 / 138 Loss: 29.67706298828125 Tokens per Sec: 12083.259453630133
Epoch Step: 100 / 138 Loss: 10.509148597717285 Tokens per Sec: 12529.495594591603
Epoch Step: 105 / 138 Loss: 21.89943504333496 Tokens per Sec: 10836.722864785905
Epoch Step: 110 / 138 Loss: 13.783224105834961 Tokens per Sec: 12018.00242952149
Epoch Step: 115 / 138 Loss: 17.888280868530273 Tokens per Sec: 12484.110283634855
Epoch Step: 120 / 138 Loss: 15.491828918457031 Tokens per Sec: 11946.060263094549
Epoch Step: 125 / 138 Loss: 16.386810302734375 Tokens per Sec: 11694.144922311858
Epoch Step: 130 / 138 Loss: 13.452073097229004 Tokens per Sec: 11591.569175056484
Epoch Step: 135 / 138 Loss: 20.706811904907227 Tokens per Sec: 12356.712334586353
Epoch ended with duration 0:00:52.541991
Train perplexity: 1.4694593703981522
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.891237
Validation perplexity: 1.3408806174077195
Model saved best_on_validation!
Epoch 118 / 1000
Epoch Step: 5 / 138 Loss: 20.345298767089844 Tokens per Sec: 12288.171569700586
Epoch Step: 10 / 138 Loss: 15.176318168640137 Tokens per Sec: 12130.064538725992
Epoch Step: 15 / 138 Loss: 19.78323745727539 Tokens per Sec: 12500.218739570664
Epoch Step: 20 / 138 Loss: 199.839111328125 Tokens per Sec: 12169.589452364573
Epoch Step: 25 / 138 Loss: 21.341161727905273 Tokens per Sec: 12206.675342360175
Epoch Step: 30 / 138 Loss: 16.801382064819336 Tokens per Sec: 12411.681414328314
Epoch Step: 35 / 138 Loss: 24.55573272705078 Tokens per Sec: 11759.427069193529
Epoch Step: 40 / 138 Loss: 14.048224449157715 Tokens per Sec: 12059.854798987275
Epoch Step: 45 / 138 Loss: 20.328948974609375 Tokens per Sec: 12070.572989409133
Epoch Step: 50 / 138 Loss: 11.974821090698242 Tokens per Sec: 12237.394264572738
Epoch Step: 55 / 138 Loss: 17.871479034423828 Tokens per Sec: 13225.203837505765
Epoch Step: 60 / 138 Loss: 23.213367462158203 Tokens per Sec: 12353.894623527302
Epoch Step: 65 / 138 Loss: 19.691734313964844 Tokens per Sec: 12249.801512991167
Epoch Step: 70 / 138 Loss: 20.328006744384766 Tokens per Sec: 12457.980661281286
Epoch Step: 75 / 138 Loss: 14.495893478393555 Tokens per Sec: 11887.271723990447
Epoch Step: 80 / 138 Loss: 162.88475036621094 Tokens per Sec: 11647.42131129904
Epoch Step: 85 / 138 Loss: 28.582447052001953 Tokens per Sec: 12532.224788928048
Epoch Step: 90 / 138 Loss: 127.22177124023438 Tokens per Sec: 11809.021377760519
Epoch Step: 95 / 138 Loss: 53.35664749145508 Tokens per Sec: 12168.066708963615
Epoch Step: 100 / 138 Loss: 91.0503158569336 Tokens per Sec: 12132.883362173177
Epoch Step: 105 / 138 Loss: 155.5109405517578 Tokens per Sec: 11466.863295035697
Epoch Step: 110 / 138 Loss: 20.11336898803711 Tokens per Sec: 12583.883283894522
Epoch Step: 115 / 138 Loss: 19.21581268310547 Tokens per Sec: 11832.743862014262
Epoch Step: 120 / 138 Loss: 16.47213363647461 Tokens per Sec: 11811.93748836862
Epoch Step: 125 / 138 Loss: 24.900217056274414 Tokens per Sec: 11762.596191956689
Epoch Step: 130 / 138 Loss: 18.027769088745117 Tokens per Sec: 12041.193994814428
Epoch Step: 135 / 138 Loss: 17.52530288696289 Tokens per Sec: 10540.758655530746
Epoch ended with duration 0:00:52.797911
Train perplexity: 1.576594808795508
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.914069
Validation perplexity: 1.473004700129217
Epoch 119 / 1000
Epoch Step: 5 / 138 Loss: 10.056144714355469 Tokens per Sec: 11780.354273595438
Epoch Step: 10 / 138 Loss: 8.436230659484863 Tokens per Sec: 12209.120618594821
Epoch Step: 15 / 138 Loss: 22.027742385864258 Tokens per Sec: 11990.339157760012
Epoch Step: 20 / 138 Loss: 22.79301643371582 Tokens per Sec: 11809.757541693303
Epoch Step: 25 / 138 Loss: 15.521641731262207 Tokens per Sec: 11760.58906206805
Epoch Step: 30 / 138 Loss: 21.357994079589844 Tokens per Sec: 12448.94161302084
Epoch Step: 35 / 138 Loss: 20.208881378173828 Tokens per Sec: 12271.81458765012
Epoch Step: 40 / 138 Loss: 18.77065086364746 Tokens per Sec: 12802.286251747071
Epoch Step: 45 / 138 Loss: 17.734394073486328 Tokens per Sec: 12042.227178317256
Epoch Step: 50 / 138 Loss: 20.169078826904297 Tokens per Sec: 12407.27531475705
Epoch Step: 55 / 138 Loss: 17.441909790039062 Tokens per Sec: 12110.203690685687
Epoch Step: 60 / 138 Loss: 83.75059509277344 Tokens per Sec: 11558.458444747022
Epoch Step: 65 / 138 Loss: 17.2751407623291 Tokens per Sec: 13200.744079001857
Epoch Step: 70 / 138 Loss: 24.282621383666992 Tokens per Sec: 11777.92058965603
Epoch Step: 75 / 138 Loss: 26.210906982421875 Tokens per Sec: 12552.504385562788
Epoch Step: 80 / 138 Loss: 13.441401481628418 Tokens per Sec: 12464.125676701391
Epoch Step: 85 / 138 Loss: 13.312793731689453 Tokens per Sec: 12337.880937953132
Epoch Step: 90 / 138 Loss: 27.022499084472656 Tokens per Sec: 11857.817217637943
Epoch Step: 95 / 138 Loss: 13.75692081451416 Tokens per Sec: 12274.4425377432
Epoch Step: 100 / 138 Loss: 144.8065643310547 Tokens per Sec: 11773.541136640797
Epoch Step: 105 / 138 Loss: 17.276803970336914 Tokens per Sec: 11921.766800219058
Epoch Step: 110 / 138 Loss: 24.508209228515625 Tokens per Sec: 10958.799508287986
Epoch Step: 115 / 138 Loss: 54.53449249267578 Tokens per Sec: 11812.876477332185
Epoch Step: 120 / 138 Loss: 13.627012252807617 Tokens per Sec: 12041.596964580885
Epoch Step: 125 / 138 Loss: 24.112110137939453 Tokens per Sec: 12228.75936394303
Epoch Step: 130 / 138 Loss: 20.682857513427734 Tokens per Sec: 12052.219922532186
Epoch Step: 135 / 138 Loss: 19.313573837280273 Tokens per Sec: 11595.411562665255
Epoch ended with duration 0:00:52.867414
Train perplexity: 1.5638746909525272
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.976338
Validation perplexity: 1.7205427878329513
Epoch 120 / 1000
Epoch Step: 5 / 138 Loss: 63.855743408203125 Tokens per Sec: 11842.27378397796
Epoch Step: 10 / 138 Loss: 12.717799186706543 Tokens per Sec: 11805.99671164513
Epoch Step: 15 / 138 Loss: 49.447635650634766 Tokens per Sec: 11922.988513359676
Epoch Step: 20 / 138 Loss: 24.152767181396484 Tokens per Sec: 12292.86028787965
Epoch Step: 25 / 138 Loss: 21.170684814453125 Tokens per Sec: 12916.027008149978
Epoch Step: 30 / 138 Loss: 18.127763748168945 Tokens per Sec: 12496.007687823523
Epoch Step: 35 / 138 Loss: 9.410856246948242 Tokens per Sec: 12466.42647370384
Epoch Step: 40 / 138 Loss: 135.73043823242188 Tokens per Sec: 11754.297298851945
Epoch Step: 45 / 138 Loss: 15.239121437072754 Tokens per Sec: 12503.780612974571
Epoch Step: 50 / 138 Loss: 165.22476196289062 Tokens per Sec: 12191.481086996097
Epoch Step: 55 / 138 Loss: 19.339656829833984 Tokens per Sec: 12257.28010767368
Epoch Step: 60 / 138 Loss: 14.638703346252441 Tokens per Sec: 12560.894456379463
Epoch Step: 65 / 138 Loss: 22.894630432128906 Tokens per Sec: 12247.253827029523
Epoch Step: 70 / 138 Loss: 13.99687385559082 Tokens per Sec: 11662.511439111417
Epoch Step: 75 / 138 Loss: 17.392995834350586 Tokens per Sec: 11866.182042701716
Epoch Step: 80 / 138 Loss: 16.665605545043945 Tokens per Sec: 12766.055778528596
Epoch Step: 85 / 138 Loss: 14.446331977844238 Tokens per Sec: 12316.01823342067
Epoch Step: 90 / 138 Loss: 22.485628128051758 Tokens per Sec: 12073.59109292305
Epoch Step: 95 / 138 Loss: 24.512849807739258 Tokens per Sec: 12678.070053192383
Epoch Step: 100 / 138 Loss: 13.208124160766602 Tokens per Sec: 13317.324276300691
Epoch Step: 105 / 138 Loss: 17.738100051879883 Tokens per Sec: 11180.79549652039
Epoch Step: 110 / 138 Loss: 15.401391983032227 Tokens per Sec: 11487.00475888497
Epoch Step: 115 / 138 Loss: 12.752305030822754 Tokens per Sec: 10883.994270383091
Epoch Step: 120 / 138 Loss: 16.98151206970215 Tokens per Sec: 11612.709172573299
Epoch Step: 125 / 138 Loss: 21.730283737182617 Tokens per Sec: 12014.593638483735
Epoch Step: 130 / 138 Loss: 17.68195343017578 Tokens per Sec: 12083.758967157157
Epoch Step: 135 / 138 Loss: 11.801250457763672 Tokens per Sec: 11663.093841809674
Epoch ended with duration 0:00:52.656882
Train perplexity: 1.4719107621392415
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.930430
Validation perplexity: 1.51097090442555
Model saved checkpoint!
Epoch 121 / 1000
Epoch Step: 5 / 138 Loss: 13.644035339355469 Tokens per Sec: 11901.221003553612
Epoch Step: 10 / 138 Loss: 13.697331428527832 Tokens per Sec: 12387.54165366647
Epoch Step: 15 / 138 Loss: 110.26953125 Tokens per Sec: 11844.385067240333
Epoch Step: 20 / 138 Loss: 19.074806213378906 Tokens per Sec: 12445.186051309505
Epoch Step: 25 / 138 Loss: 19.749591827392578 Tokens per Sec: 12552.577413592417
Epoch Step: 30 / 138 Loss: 30.894676208496094 Tokens per Sec: 12165.146143631104
Epoch Step: 35 / 138 Loss: 23.896472930908203 Tokens per Sec: 11970.657220837778
Epoch Step: 40 / 138 Loss: 17.99493980407715 Tokens per Sec: 12491.216777249152
Epoch Step: 45 / 138 Loss: 26.52875328063965 Tokens per Sec: 12252.077333860585
Epoch Step: 50 / 138 Loss: 22.913782119750977 Tokens per Sec: 12565.22832974448
Epoch Step: 55 / 138 Loss: 11.286469459533691 Tokens per Sec: 12419.33105655751
Epoch Step: 60 / 138 Loss: 24.971508026123047 Tokens per Sec: 12431.799938104514
Epoch Step: 65 / 138 Loss: 26.097915649414062 Tokens per Sec: 12018.94577939129
Epoch Step: 70 / 138 Loss: 13.914806365966797 Tokens per Sec: 12580.10563279767
Epoch Step: 75 / 138 Loss: 16.894594192504883 Tokens per Sec: 12239.411456182283
Epoch Step: 80 / 138 Loss: 19.87738609313965 Tokens per Sec: 12221.202209166953
Epoch Step: 85 / 138 Loss: 16.723281860351562 Tokens per Sec: 12245.21608399134
Epoch Step: 90 / 138 Loss: 16.456125259399414 Tokens per Sec: 13176.200619086667
Epoch Step: 95 / 138 Loss: 14.149054527282715 Tokens per Sec: 12058.46060388198
Epoch Step: 100 / 138 Loss: 10.37195873260498 Tokens per Sec: 12560.7125230419
Epoch Step: 105 / 138 Loss: 18.748374938964844 Tokens per Sec: 11983.09132279676
Epoch Step: 110 / 138 Loss: 16.490896224975586 Tokens per Sec: 10889.915551174192
Epoch Step: 115 / 138 Loss: 16.97891616821289 Tokens per Sec: 11687.911848988131
Epoch Step: 120 / 138 Loss: 23.229633331298828 Tokens per Sec: 12453.145850710735
Epoch Step: 125 / 138 Loss: 16.660642623901367 Tokens per Sec: 11746.131166403668
Epoch Step: 130 / 138 Loss: 16.68425941467285 Tokens per Sec: 11787.33345584514
Epoch Step: 135 / 138 Loss: 19.15032196044922 Tokens per Sec: 12104.521371681838
Epoch ended with duration 0:00:52.302884
Train perplexity: 1.4057562107307486
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.947432
Validation perplexity: 1.6510657528273838
Epoch 122 / 1000
Epoch Step: 5 / 138 Loss: 24.398958206176758 Tokens per Sec: 12109.111360071181
Epoch Step: 10 / 138 Loss: 22.235551834106445 Tokens per Sec: 11938.9632849338
Epoch Step: 15 / 138 Loss: 24.076990127563477 Tokens per Sec: 12227.574180209584
Epoch Step: 20 / 138 Loss: 19.39617347717285 Tokens per Sec: 12869.243769546769
Epoch Step: 25 / 138 Loss: 24.81686019897461 Tokens per Sec: 12059.022194911837
Epoch Step: 30 / 138 Loss: 155.55441284179688 Tokens per Sec: 11345.380311988602
Epoch Step: 35 / 138 Loss: 99.57923126220703 Tokens per Sec: 12829.229571217178
Epoch Step: 40 / 138 Loss: 17.540069580078125 Tokens per Sec: 11590.316145468158
Epoch Step: 45 / 138 Loss: 72.0381088256836 Tokens per Sec: 11918.060716326989
Epoch Step: 50 / 138 Loss: 20.19113540649414 Tokens per Sec: 12336.510788953527
Epoch Step: 55 / 138 Loss: 17.451892852783203 Tokens per Sec: 12006.898527393569
Epoch Step: 60 / 138 Loss: 28.744291305541992 Tokens per Sec: 12552.829789485422
Epoch Step: 65 / 138 Loss: 13.75206184387207 Tokens per Sec: 12386.060162087488
Epoch Step: 70 / 138 Loss: 21.99114418029785 Tokens per Sec: 12268.320310598543
Epoch Step: 75 / 138 Loss: 16.331201553344727 Tokens per Sec: 12133.826757666651
Epoch Step: 80 / 138 Loss: 29.04938316345215 Tokens per Sec: 12727.007472272062
Epoch Step: 85 / 138 Loss: 22.634235382080078 Tokens per Sec: 12715.896780515932
Epoch Step: 90 / 138 Loss: 17.512643814086914 Tokens per Sec: 11973.077507376542
Epoch Step: 95 / 138 Loss: 14.739013671875 Tokens per Sec: 12232.826257291848
Epoch Step: 100 / 138 Loss: 17.763092041015625 Tokens per Sec: 11852.39165489349
Epoch Step: 105 / 138 Loss: 16.61982536315918 Tokens per Sec: 11501.566401786966
Epoch Step: 110 / 138 Loss: 23.19989776611328 Tokens per Sec: 11924.743128658109
Epoch Step: 115 / 138 Loss: 21.630207061767578 Tokens per Sec: 11749.1785056245
Epoch Step: 120 / 138 Loss: 15.329437255859375 Tokens per Sec: 11148.37858720427
Epoch Step: 125 / 138 Loss: 12.045817375183105 Tokens per Sec: 12092.239146619253
Epoch Step: 130 / 138 Loss: 18.356163024902344 Tokens per Sec: 11908.90124262323
Epoch Step: 135 / 138 Loss: 11.724349021911621 Tokens per Sec: 12194.761746642398
Epoch ended with duration 0:00:52.727665
Train perplexity: 1.5524550514755868
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.907923
Validation perplexity: 1.417312174517119
Epoch 123 / 1000
Epoch Step: 5 / 138 Loss: 23.73674201965332 Tokens per Sec: 12057.456500038394
Epoch Step: 10 / 138 Loss: 20.381107330322266 Tokens per Sec: 12314.328436421481
Epoch Step: 15 / 138 Loss: 17.95193099975586 Tokens per Sec: 12083.934164435472
Epoch Step: 20 / 138 Loss: 23.039817810058594 Tokens per Sec: 11960.512359131295
Epoch Step: 25 / 138 Loss: 22.398569107055664 Tokens per Sec: 12005.114667836
Epoch Step: 30 / 138 Loss: 15.74604606628418 Tokens per Sec: 12039.118285803957
Epoch Step: 35 / 138 Loss: 15.750717163085938 Tokens per Sec: 12717.939961953542
Epoch Step: 40 / 138 Loss: 17.535879135131836 Tokens per Sec: 12298.33925961023
Epoch Step: 45 / 138 Loss: 11.867791175842285 Tokens per Sec: 12016.071839003718
Epoch Step: 50 / 138 Loss: 13.380241394042969 Tokens per Sec: 13119.74144703116
Epoch Step: 55 / 138 Loss: 21.68266487121582 Tokens per Sec: 11830.328162403704
Epoch Step: 60 / 138 Loss: 24.303932189941406 Tokens per Sec: 12380.677407523175
Epoch Step: 65 / 138 Loss: 119.61510467529297 Tokens per Sec: 12210.320426964126
Epoch Step: 70 / 138 Loss: 20.19730567932129 Tokens per Sec: 12453.330646999879
Epoch Step: 75 / 138 Loss: 27.536149978637695 Tokens per Sec: 11770.032491180827
Epoch Step: 80 / 138 Loss: 20.117849349975586 Tokens per Sec: 12888.222775800617
Epoch Step: 85 / 138 Loss: 10.89995288848877 Tokens per Sec: 12576.94579865478
Epoch Step: 90 / 138 Loss: 11.296487808227539 Tokens per Sec: 13132.358282863916
Epoch Step: 95 / 138 Loss: 12.968279838562012 Tokens per Sec: 11930.270294238397
Epoch Step: 100 / 138 Loss: 74.79315185546875 Tokens per Sec: 12294.564004224294
Epoch Step: 105 / 138 Loss: 26.241186141967773 Tokens per Sec: 11629.221114243732
Epoch Step: 110 / 138 Loss: 16.96209144592285 Tokens per Sec: 12151.292236600062
Epoch Step: 115 / 138 Loss: 14.51735782623291 Tokens per Sec: 11126.912921957573
Epoch Step: 120 / 138 Loss: 16.46949005126953 Tokens per Sec: 11857.723748274038
Epoch Step: 125 / 138 Loss: 16.61842918395996 Tokens per Sec: 11695.641543934931
Epoch Step: 130 / 138 Loss: 17.023845672607422 Tokens per Sec: 12175.122050928689
Epoch Step: 135 / 138 Loss: 11.939154624938965 Tokens per Sec: 11696.08157869542
Epoch ended with duration 0:00:52.443421
Train perplexity: 1.4079860287367636
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.916290
Validation perplexity: 1.457945539641472
Epoch 124 / 1000
Epoch Step: 5 / 138 Loss: 101.24689483642578 Tokens per Sec: 12061.007442584205
Epoch Step: 10 / 138 Loss: 172.3717803955078 Tokens per Sec: 11788.01909447184
Epoch Step: 15 / 138 Loss: 12.813325881958008 Tokens per Sec: 12016.807000451434
Epoch Step: 20 / 138 Loss: 16.445783615112305 Tokens per Sec: 11814.517820592375
Epoch Step: 25 / 138 Loss: 17.566566467285156 Tokens per Sec: 12305.675083762137
Epoch Step: 30 / 138 Loss: 30.97075653076172 Tokens per Sec: 12320.083735698538
Epoch Step: 35 / 138 Loss: 20.62639808654785 Tokens per Sec: 12451.035649759306
Epoch Step: 40 / 138 Loss: 23.585756301879883 Tokens per Sec: 12424.963363088924
Epoch Step: 45 / 138 Loss: 139.782470703125 Tokens per Sec: 11763.816190585045
Epoch Step: 50 / 138 Loss: 26.319684982299805 Tokens per Sec: 12418.801955550196
Epoch Step: 55 / 138 Loss: 21.9323787689209 Tokens per Sec: 12296.699071639672
Epoch Step: 60 / 138 Loss: 9.56755542755127 Tokens per Sec: 12730.252694525827
Epoch Step: 65 / 138 Loss: 25.784982681274414 Tokens per Sec: 12129.840620952342
Epoch Step: 70 / 138 Loss: 21.27351951599121 Tokens per Sec: 12151.898975739377
Epoch Step: 75 / 138 Loss: 13.891182899475098 Tokens per Sec: 12463.348184952056
Epoch Step: 80 / 138 Loss: 12.546957969665527 Tokens per Sec: 11991.866511921666
Epoch Step: 85 / 138 Loss: 16.198963165283203 Tokens per Sec: 12133.757897850066
Epoch Step: 90 / 138 Loss: 16.217145919799805 Tokens per Sec: 12260.893553586951
Epoch Step: 95 / 138 Loss: 19.71678924560547 Tokens per Sec: 12249.09942709641
Epoch Step: 100 / 138 Loss: 27.948768615722656 Tokens per Sec: 12240.136837984164
Epoch Step: 105 / 138 Loss: 21.790515899658203 Tokens per Sec: 11847.342516379502
Epoch Step: 110 / 138 Loss: 16.344432830810547 Tokens per Sec: 12206.936392710608
Epoch Step: 115 / 138 Loss: 14.782774925231934 Tokens per Sec: 11898.652209034219
Epoch Step: 120 / 138 Loss: 20.9680233001709 Tokens per Sec: 11672.59429153787
Epoch Step: 125 / 138 Loss: 19.401304244995117 Tokens per Sec: 11274.271251989074
Epoch Step: 130 / 138 Loss: 23.636661529541016 Tokens per Sec: 12208.15640143927
Epoch Step: 135 / 138 Loss: 20.418216705322266 Tokens per Sec: 11925.541110292945
Epoch ended with duration 0:00:52.678364
Train perplexity: 1.5566376173833938
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.917181
Validation perplexity: 1.464901856983279
Epoch 125 / 1000
Epoch Step: 5 / 138 Loss: 14.548890113830566 Tokens per Sec: 11539.937018550656
Epoch Step: 10 / 138 Loss: 18.773656845092773 Tokens per Sec: 12262.785295748714
Epoch Step: 15 / 138 Loss: 18.500349044799805 Tokens per Sec: 12466.09133944131
Epoch Step: 20 / 138 Loss: 57.62623596191406 Tokens per Sec: 12132.813955821186
Epoch Step: 25 / 138 Loss: 21.372434616088867 Tokens per Sec: 11862.316034599764
Epoch Step: 30 / 138 Loss: 20.076908111572266 Tokens per Sec: 12731.097662586022
Epoch Step: 35 / 138 Loss: 17.7628116607666 Tokens per Sec: 12115.332861712608
Epoch Step: 40 / 138 Loss: 20.29348373413086 Tokens per Sec: 12820.391688515976
Epoch Step: 45 / 138 Loss: 17.87607765197754 Tokens per Sec: 11673.915562984172
Epoch Step: 50 / 138 Loss: 18.315465927124023 Tokens per Sec: 13026.057563344739
Epoch Step: 55 / 138 Loss: 13.170273780822754 Tokens per Sec: 12842.059538082784
Epoch Step: 60 / 138 Loss: 15.254684448242188 Tokens per Sec: 13280.982302551176
Epoch Step: 65 / 138 Loss: 19.771953582763672 Tokens per Sec: 13999.866655125174
Epoch Step: 70 / 138 Loss: 11.760422706604004 Tokens per Sec: 13516.919029693898
Epoch Step: 75 / 138 Loss: 22.001955032348633 Tokens per Sec: 13109.265906790768
Epoch Step: 80 / 138 Loss: 20.946327209472656 Tokens per Sec: 12611.49833533885
Epoch Step: 85 / 138 Loss: 13.514568328857422 Tokens per Sec: 13174.859419234412
Epoch Step: 90 / 138 Loss: 18.312463760375977 Tokens per Sec: 13015.13962074438
Epoch Step: 95 / 138 Loss: 19.02293586730957 Tokens per Sec: 13621.340703938693
Epoch Step: 100 / 138 Loss: 66.26142883300781 Tokens per Sec: 12575.90688217272
Epoch Step: 105 / 138 Loss: 22.476003646850586 Tokens per Sec: 13022.518789562722
Epoch Step: 110 / 138 Loss: 21.452392578125 Tokens per Sec: 12851.041805880448
Epoch Step: 115 / 138 Loss: 11.911892890930176 Tokens per Sec: 12931.646555747147
Epoch Step: 120 / 138 Loss: 13.949992179870605 Tokens per Sec: 12024.663638757307
Epoch Step: 125 / 138 Loss: 14.125353813171387 Tokens per Sec: 12263.299924292678
Epoch Step: 130 / 138 Loss: 17.14625358581543 Tokens per Sec: 12775.917480485816
Epoch Step: 135 / 138 Loss: 17.110044479370117 Tokens per Sec: 12083.826048001692
Epoch ended with duration 0:00:50.385339
Train perplexity: 1.4336631823728692
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.978699
Validation perplexity: 1.6439406747576648
Model saved checkpoint!
Epoch 126 / 1000
Epoch Step: 5 / 138 Loss: 13.700267791748047 Tokens per Sec: 13663.527668562741
Epoch Step: 10 / 138 Loss: 20.501895904541016 Tokens per Sec: 13072.76681657906
Epoch Step: 15 / 138 Loss: 19.833515167236328 Tokens per Sec: 12965.372958834745
Epoch Step: 20 / 138 Loss: 14.354570388793945 Tokens per Sec: 13362.849964534818
Epoch Step: 25 / 138 Loss: 15.351902961730957 Tokens per Sec: 13306.250153292174
Epoch Step: 30 / 138 Loss: 20.61589813232422 Tokens per Sec: 13646.649117643288
Epoch Step: 35 / 138 Loss: 23.982858657836914 Tokens per Sec: 13173.18686877284
Epoch Step: 40 / 138 Loss: 11.779501914978027 Tokens per Sec: 13683.535477929503
Epoch Step: 45 / 138 Loss: 11.958740234375 Tokens per Sec: 12576.281911168593
Epoch Step: 50 / 138 Loss: 13.68649673461914 Tokens per Sec: 13057.072943917923
Epoch Step: 55 / 138 Loss: 22.743003845214844 Tokens per Sec: 13471.828982010005
Epoch Step: 60 / 138 Loss: 15.281974792480469 Tokens per Sec: 13246.156508407228
Epoch Step: 65 / 138 Loss: 18.129491806030273 Tokens per Sec: 13183.293073921093
Epoch Step: 70 / 138 Loss: 10.899797439575195 Tokens per Sec: 13294.478300514125
Epoch Step: 75 / 138 Loss: 12.467659950256348 Tokens per Sec: 13363.724213308999
Epoch Step: 80 / 138 Loss: 16.5981502532959 Tokens per Sec: 13913.335435838893
Epoch Step: 85 / 138 Loss: 149.4257354736328 Tokens per Sec: 12523.584956144563
Epoch Step: 90 / 138 Loss: 17.33452796936035 Tokens per Sec: 12280.16555256782
Epoch Step: 95 / 138 Loss: 16.528406143188477 Tokens per Sec: 12861.352026567589
Epoch Step: 100 / 138 Loss: 18.59263801574707 Tokens per Sec: 12623.40150787413
Epoch Step: 105 / 138 Loss: 17.415512084960938 Tokens per Sec: 13042.993304850113
Epoch Step: 110 / 138 Loss: 18.082576751708984 Tokens per Sec: 11737.058546548107
Epoch Step: 115 / 138 Loss: 115.44171142578125 Tokens per Sec: 12350.645326106172
Epoch Step: 120 / 138 Loss: 17.82566261291504 Tokens per Sec: 12433.287887894345
Epoch Step: 125 / 138 Loss: 16.487388610839844 Tokens per Sec: 13250.357761649404
Epoch Step: 130 / 138 Loss: 18.16812515258789 Tokens per Sec: 13041.59952224948
Epoch Step: 135 / 138 Loss: 17.34156036376953 Tokens per Sec: 11573.261657212357
Epoch ended with duration 0:00:49.106267
Train perplexity: 1.460942676754869
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.904292
Validation perplexity: 1.4160086288903695
Epoch 127 / 1000
Epoch Step: 5 / 138 Loss: 13.107619285583496 Tokens per Sec: 13227.305070477278
Epoch Step: 10 / 138 Loss: 11.32730484008789 Tokens per Sec: 13017.191634377623
Epoch Step: 15 / 138 Loss: 11.06405258178711 Tokens per Sec: 13252.408322649837
Epoch Step: 20 / 138 Loss: 23.000194549560547 Tokens per Sec: 13642.301621152326
Epoch Step: 25 / 138 Loss: 26.164819717407227 Tokens per Sec: 12484.996133978517
Epoch Step: 30 / 138 Loss: 14.546338081359863 Tokens per Sec: 13226.27509156431
Epoch Step: 35 / 138 Loss: 14.135078430175781 Tokens per Sec: 12922.708291971276
Epoch Step: 40 / 138 Loss: 17.164684295654297 Tokens per Sec: 12144.47510477701
Epoch Step: 45 / 138 Loss: 21.00034523010254 Tokens per Sec: 12979.745862409733
Epoch Step: 50 / 138 Loss: 17.1904296875 Tokens per Sec: 13191.799097716872
Epoch Step: 55 / 138 Loss: 18.510723114013672 Tokens per Sec: 13275.19533488769
Epoch Step: 60 / 138 Loss: 16.838151931762695 Tokens per Sec: 12896.65702105831
Epoch Step: 65 / 138 Loss: 23.123252868652344 Tokens per Sec: 13363.73487121411
Epoch Step: 70 / 138 Loss: 13.785089492797852 Tokens per Sec: 13463.245477508457
Epoch Step: 75 / 138 Loss: 15.736664772033691 Tokens per Sec: 13392.41415486206
Epoch Step: 80 / 138 Loss: 15.078998565673828 Tokens per Sec: 13743.63325828771
Epoch Step: 85 / 138 Loss: 13.779122352600098 Tokens per Sec: 13442.467661627246
Epoch Step: 90 / 138 Loss: 12.121753692626953 Tokens per Sec: 13774.390853767783
Epoch Step: 95 / 138 Loss: 15.235722541809082 Tokens per Sec: 13004.714339318112
Epoch Step: 100 / 138 Loss: 20.002153396606445 Tokens per Sec: 13046.487684302914
Epoch Step: 105 / 138 Loss: 20.623754501342773 Tokens per Sec: 12729.78295436034
Epoch Step: 110 / 138 Loss: 13.551470756530762 Tokens per Sec: 12704.773631138563
Epoch Step: 115 / 138 Loss: 16.749963760375977 Tokens per Sec: 12048.104533294974
Epoch Step: 120 / 138 Loss: 14.996941566467285 Tokens per Sec: 12555.45646596824
Epoch Step: 125 / 138 Loss: 105.77623748779297 Tokens per Sec: 12698.967998299506
Epoch Step: 130 / 138 Loss: 16.63934326171875 Tokens per Sec: 13013.841433292364
Epoch Step: 135 / 138 Loss: 11.91851806640625 Tokens per Sec: 12707.133629019823
Epoch ended with duration 0:00:48.949398
Train perplexity: 1.3797081954796773
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e . rule rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.915045
Validation perplexity: 1.4028920658822024
Epoch 128 / 1000
Epoch Step: 5 / 138 Loss: 20.053260803222656 Tokens per Sec: 13161.220202657978
Epoch Step: 10 / 138 Loss: 17.736907958984375 Tokens per Sec: 13422.397064138087
Epoch Step: 15 / 138 Loss: 18.167892456054688 Tokens per Sec: 13146.988327385485
Epoch Step: 20 / 138 Loss: 20.35306167602539 Tokens per Sec: 13139.7438220698
Epoch Step: 25 / 138 Loss: 19.121721267700195 Tokens per Sec: 13470.578555007733
Epoch Step: 30 / 138 Loss: 8.247103691101074 Tokens per Sec: 12716.162850990999
Epoch Step: 35 / 138 Loss: 21.92897605895996 Tokens per Sec: 12857.101294866867
Epoch Step: 40 / 138 Loss: 16.567041397094727 Tokens per Sec: 12725.385419713655
Epoch Step: 45 / 138 Loss: 21.51274871826172 Tokens per Sec: 13344.108221830082
Epoch Step: 50 / 138 Loss: 18.697547912597656 Tokens per Sec: 12317.163433939553
Epoch Step: 55 / 138 Loss: 15.488201141357422 Tokens per Sec: 13504.352084809707
Epoch Step: 60 / 138 Loss: 15.036039352416992 Tokens per Sec: 13678.61399098157
Epoch Step: 65 / 138 Loss: 18.410358428955078 Tokens per Sec: 13644.419379509358
Epoch Step: 70 / 138 Loss: 13.569018363952637 Tokens per Sec: 13378.318698644502
Epoch Step: 75 / 138 Loss: 24.094085693359375 Tokens per Sec: 12766.621999256738
Epoch Step: 80 / 138 Loss: 24.141164779663086 Tokens per Sec: 13168.053578772378
Epoch Step: 85 / 138 Loss: 18.97365951538086 Tokens per Sec: 13322.111853608534
Epoch Step: 90 / 138 Loss: 115.60724639892578 Tokens per Sec: 12649.242611021931
Epoch Step: 95 / 138 Loss: 18.495338439941406 Tokens per Sec: 13697.16707981332
Epoch Step: 100 / 138 Loss: 13.407609939575195 Tokens per Sec: 13128.514460890628
Epoch Step: 105 / 138 Loss: 23.829185485839844 Tokens per Sec: 12084.556244759186
Epoch Step: 110 / 138 Loss: 23.188400268554688 Tokens per Sec: 12783.364391196716
Epoch Step: 115 / 138 Loss: 19.956701278686523 Tokens per Sec: 12635.551279480569
Epoch Step: 120 / 138 Loss: 17.736648559570312 Tokens per Sec: 12928.00793933332
Epoch Step: 125 / 138 Loss: 14.288009643554688 Tokens per Sec: 12819.772806081315
Epoch Step: 130 / 138 Loss: 15.821578025817871 Tokens per Sec: 12535.59794747793
Epoch Step: 135 / 138 Loss: 19.99810218811035 Tokens per Sec: 12589.14371092607
Epoch ended with duration 0:00:48.996551
Train perplexity: 1.389407080002264
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.902052
Validation perplexity: 1.3196678587560406
Model saved best_on_validation!
Epoch 129 / 1000
Epoch Step: 5 / 138 Loss: 15.831119537353516 Tokens per Sec: 13494.1043455861
Epoch Step: 10 / 138 Loss: 13.710256576538086 Tokens per Sec: 12597.769254115128
Epoch Step: 15 / 138 Loss: 10.00047779083252 Tokens per Sec: 14112.955736388316
Epoch Step: 20 / 138 Loss: 11.486573219299316 Tokens per Sec: 13522.824332497583
Epoch Step: 25 / 138 Loss: 23.339778900146484 Tokens per Sec: 12995.889712681132
Epoch Step: 30 / 138 Loss: 24.690492630004883 Tokens per Sec: 12553.951454056067
Epoch Step: 35 / 138 Loss: 20.93208885192871 Tokens per Sec: 13412.320041138426
Epoch Step: 40 / 138 Loss: 21.562007904052734 Tokens per Sec: 11903.46903729476
Epoch Step: 45 / 138 Loss: 13.945979118347168 Tokens per Sec: 13698.155667727166
Epoch Step: 50 / 138 Loss: 17.13310432434082 Tokens per Sec: 12698.117935376138
Epoch Step: 55 / 138 Loss: 26.193283081054688 Tokens per Sec: 13241.699745642016
Epoch Step: 60 / 138 Loss: 96.5446548461914 Tokens per Sec: 13065.784506023316
Epoch Step: 65 / 138 Loss: 15.675558090209961 Tokens per Sec: 13445.640913840192
Epoch Step: 70 / 138 Loss: 19.332162857055664 Tokens per Sec: 13258.774121365721
Epoch Step: 75 / 138 Loss: 147.96868896484375 Tokens per Sec: 11690.302562747276
Epoch Step: 80 / 138 Loss: 18.213743209838867 Tokens per Sec: 13042.575327499186
Epoch Step: 85 / 138 Loss: 20.614341735839844 Tokens per Sec: 12310.291817317082
Epoch Step: 90 / 138 Loss: 18.369409561157227 Tokens per Sec: 14173.466000234615
Epoch Step: 95 / 138 Loss: 17.848129272460938 Tokens per Sec: 13032.243133680924
Epoch Step: 100 / 138 Loss: 13.566060066223145 Tokens per Sec: 13213.725757726466
Epoch Step: 105 / 138 Loss: 13.719769477844238 Tokens per Sec: 12832.129820259182
Epoch Step: 110 / 138 Loss: 17.93611717224121 Tokens per Sec: 12969.393772970003
Epoch Step: 115 / 138 Loss: 17.708425521850586 Tokens per Sec: 12455.151857281213
Epoch Step: 120 / 138 Loss: 95.22758483886719 Tokens per Sec: 12011.337329627782
Epoch Step: 125 / 138 Loss: 18.003639221191406 Tokens per Sec: 12695.174227493924
Epoch Step: 130 / 138 Loss: 14.784638404846191 Tokens per Sec: 11409.087588458144
Epoch Step: 135 / 138 Loss: 12.643536567687988 Tokens per Sec: 13099.57994466388
Epoch ended with duration 0:00:49.362418
Train perplexity: 1.5630087030053457
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.953550
Validation perplexity: 1.707279544197279
Epoch 130 / 1000
Epoch Step: 5 / 138 Loss: 16.044239044189453 Tokens per Sec: 13451.130639974428
Epoch Step: 10 / 138 Loss: 14.121197700500488 Tokens per Sec: 13023.968949533002
Epoch Step: 15 / 138 Loss: 16.206850051879883 Tokens per Sec: 13583.109560541885
Epoch Step: 20 / 138 Loss: 19.536514282226562 Tokens per Sec: 13631.096516101152
Epoch Step: 25 / 138 Loss: 19.742809295654297 Tokens per Sec: 13092.259130846089
Epoch Step: 30 / 138 Loss: 19.797290802001953 Tokens per Sec: 12813.12967550466
Epoch Step: 35 / 138 Loss: 16.470386505126953 Tokens per Sec: 12773.443529095988
Epoch Step: 40 / 138 Loss: 23.09242057800293 Tokens per Sec: 12781.108657616534
Epoch Step: 45 / 138 Loss: 79.9310073852539 Tokens per Sec: 13254.335193512887
Epoch Step: 50 / 138 Loss: 14.504976272583008 Tokens per Sec: 13625.551235639781
Epoch Step: 55 / 138 Loss: 17.863210678100586 Tokens per Sec: 13555.993166814485
Epoch Step: 60 / 138 Loss: 10.786273002624512 Tokens per Sec: 12843.356259750028
Epoch Step: 65 / 138 Loss: 53.66059494018555 Tokens per Sec: 11839.208005327206
Epoch Step: 70 / 138 Loss: 23.37466812133789 Tokens per Sec: 12665.245779128167
Epoch Step: 75 / 138 Loss: 25.184741973876953 Tokens per Sec: 12197.47912168943
Epoch Step: 80 / 138 Loss: 21.702781677246094 Tokens per Sec: 13435.808421297248
Epoch Step: 85 / 138 Loss: 15.995220184326172 Tokens per Sec: 13622.095524775123
Epoch Step: 90 / 138 Loss: 24.188091278076172 Tokens per Sec: 13456.70576186662
Epoch Step: 95 / 138 Loss: 129.07431030273438 Tokens per Sec: 13708.729421666687
Epoch Step: 100 / 138 Loss: 111.66452026367188 Tokens per Sec: 13229.065788576194
Epoch Step: 105 / 138 Loss: 14.151396751403809 Tokens per Sec: 11776.791448956132
Epoch Step: 110 / 138 Loss: 137.64443969726562 Tokens per Sec: 12951.52088864816
Epoch Step: 115 / 138 Loss: 20.918745040893555 Tokens per Sec: 12490.759793065115
Epoch Step: 120 / 138 Loss: 17.639812469482422 Tokens per Sec: 12545.265054532989
Epoch Step: 125 / 138 Loss: 17.509864807128906 Tokens per Sec: 12950.82628061444
Epoch Step: 130 / 138 Loss: 16.585115432739258 Tokens per Sec: 12756.788878654796
Epoch Step: 135 / 138 Loss: 12.281026840209961 Tokens per Sec: 13153.432661302313
Epoch ended with duration 0:00:49.006795
Train perplexity: 1.4810359609441894
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.918529
Validation perplexity: 1.4875609160763887
Model saved checkpoint!
Epoch 131 / 1000
Epoch Step: 5 / 138 Loss: 19.498125076293945 Tokens per Sec: 12844.572179862693
Epoch Step: 10 / 138 Loss: 23.14980697631836 Tokens per Sec: 12281.202726473552
Epoch Step: 15 / 138 Loss: 14.409507751464844 Tokens per Sec: 12948.944280314103
Epoch Step: 20 / 138 Loss: 69.85808563232422 Tokens per Sec: 12965.315108117346
Epoch Step: 25 / 138 Loss: 87.8588638305664 Tokens per Sec: 12376.831022045799
Epoch Step: 30 / 138 Loss: 12.39419174194336 Tokens per Sec: 13256.788579447257
Epoch Step: 35 / 138 Loss: 148.1016845703125 Tokens per Sec: 12969.78851019861
Epoch Step: 40 / 138 Loss: 21.718385696411133 Tokens per Sec: 12840.020635289029
Epoch Step: 45 / 138 Loss: 14.83647346496582 Tokens per Sec: 12772.28270407527
Epoch Step: 50 / 138 Loss: 16.878061294555664 Tokens per Sec: 12920.983144562077
Epoch Step: 55 / 138 Loss: 10.979355812072754 Tokens per Sec: 13689.977441037183
Epoch Step: 60 / 138 Loss: 14.74657154083252 Tokens per Sec: 13572.549297501617
Epoch Step: 65 / 138 Loss: 16.794389724731445 Tokens per Sec: 12962.403408220838
Epoch Step: 70 / 138 Loss: 18.736080169677734 Tokens per Sec: 13730.651986212928
Epoch Step: 75 / 138 Loss: 18.212451934814453 Tokens per Sec: 13818.488286834994
Epoch Step: 80 / 138 Loss: 16.417436599731445 Tokens per Sec: 13697.628853341754
Epoch Step: 85 / 138 Loss: 89.58140563964844 Tokens per Sec: 13311.131909706262
Epoch Step: 90 / 138 Loss: 20.178152084350586 Tokens per Sec: 13737.709566101286
Epoch Step: 95 / 138 Loss: 192.53054809570312 Tokens per Sec: 12897.633815188165
Epoch Step: 100 / 138 Loss: 113.74248504638672 Tokens per Sec: 12813.088021992593
Epoch Step: 105 / 138 Loss: 22.472902297973633 Tokens per Sec: 12401.243617870865
Epoch Step: 110 / 138 Loss: 20.972177505493164 Tokens per Sec: 13044.877160027843
Epoch Step: 115 / 138 Loss: 12.933296203613281 Tokens per Sec: 12099.001958873985
Epoch Step: 120 / 138 Loss: 22.55545997619629 Tokens per Sec: 12742.088899470376
Epoch Step: 125 / 138 Loss: 18.573747634887695 Tokens per Sec: 12087.383260794544
Epoch Step: 130 / 138 Loss: 18.00876808166504 Tokens per Sec: 12689.866953010289
Epoch Step: 135 / 138 Loss: 61.630496978759766 Tokens per Sec: 12529.20106349304
Epoch ended with duration 0:00:49.177136
Train perplexity: 1.5545723691916624
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.979630
Validation perplexity: 1.6936505955123264
Epoch 132 / 1000
Epoch Step: 5 / 138 Loss: 21.145414352416992 Tokens per Sec: 11925.688195949368
Epoch Step: 10 / 138 Loss: 19.63555145263672 Tokens per Sec: 13118.55722663781
Epoch Step: 15 / 138 Loss: 18.73213005065918 Tokens per Sec: 12473.801855837912
Epoch Step: 20 / 138 Loss: 19.971210479736328 Tokens per Sec: 12700.896730531833
Epoch Step: 25 / 138 Loss: 12.7024507522583 Tokens per Sec: 13692.000208201873
Epoch Step: 30 / 138 Loss: 9.04962158203125 Tokens per Sec: 13761.123449171297
Epoch Step: 35 / 138 Loss: 15.140868186950684 Tokens per Sec: 13594.282199634397
Epoch Step: 40 / 138 Loss: 19.44623565673828 Tokens per Sec: 12959.120186737402
Epoch Step: 45 / 138 Loss: 19.959569931030273 Tokens per Sec: 13322.642901078028
Epoch Step: 50 / 138 Loss: 10.81550407409668 Tokens per Sec: 13262.896191347983
Epoch Step: 55 / 138 Loss: 13.222241401672363 Tokens per Sec: 13599.124829895174
Epoch Step: 60 / 138 Loss: 18.15966033935547 Tokens per Sec: 12562.003000030772
Epoch Step: 65 / 138 Loss: 50.52935028076172 Tokens per Sec: 12956.248209243782
Epoch Step: 70 / 138 Loss: 14.997840881347656 Tokens per Sec: 13363.87472837651
Epoch Step: 75 / 138 Loss: 11.950676918029785 Tokens per Sec: 13222.491880446454
Epoch Step: 80 / 138 Loss: 19.395153045654297 Tokens per Sec: 13179.72639240717
Epoch Step: 85 / 138 Loss: 13.415782928466797 Tokens per Sec: 12965.298445642371
Epoch Step: 90 / 138 Loss: 20.390655517578125 Tokens per Sec: 13055.302735837033
Epoch Step: 95 / 138 Loss: 20.709060668945312 Tokens per Sec: 13695.894488720016
Epoch Step: 100 / 138 Loss: 21.654024124145508 Tokens per Sec: 13843.486042442582
Epoch Step: 105 / 138 Loss: 15.583194732666016 Tokens per Sec: 12337.066651689907
Epoch Step: 110 / 138 Loss: 18.078664779663086 Tokens per Sec: 12344.506233346407
Epoch Step: 115 / 138 Loss: 17.130859375 Tokens per Sec: 12953.432686475071
Epoch Step: 120 / 138 Loss: 121.2242202758789 Tokens per Sec: 12632.952085276645
Epoch Step: 125 / 138 Loss: 21.550439834594727 Tokens per Sec: 11666.76205217116
Epoch Step: 130 / 138 Loss: 124.76112365722656 Tokens per Sec: 12945.48735450325
Epoch Step: 135 / 138 Loss: 15.198421478271484 Tokens per Sec: 13118.495401610218
Epoch ended with duration 0:00:49.069009
Train perplexity: 1.4284010117553847
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.989959
Validation perplexity: 1.8431095615749045
Epoch 133 / 1000
Epoch Step: 5 / 138 Loss: 18.426090240478516 Tokens per Sec: 13070.621920497224
Epoch Step: 10 / 138 Loss: 15.1007080078125 Tokens per Sec: 13731.884351184524
Epoch Step: 15 / 138 Loss: 13.690630912780762 Tokens per Sec: 13144.407342270762
Epoch Step: 20 / 138 Loss: 15.463630676269531 Tokens per Sec: 13693.755411567658
Epoch Step: 25 / 138 Loss: 10.119155883789062 Tokens per Sec: 13163.36065898879
Epoch Step: 30 / 138 Loss: 14.406967163085938 Tokens per Sec: 13005.58741262371
Epoch Step: 35 / 138 Loss: 14.586748123168945 Tokens per Sec: 13166.189211042578
Epoch Step: 40 / 138 Loss: 19.0660457611084 Tokens per Sec: 13110.822330536254
Epoch Step: 45 / 138 Loss: 13.315813064575195 Tokens per Sec: 13110.661476163461
Epoch Step: 50 / 138 Loss: 18.16869354248047 Tokens per Sec: 13078.77425924724
Epoch Step: 55 / 138 Loss: 17.568456649780273 Tokens per Sec: 12919.32778883266
Epoch Step: 60 / 138 Loss: 21.374740600585938 Tokens per Sec: 13174.714334064323
Epoch Step: 65 / 138 Loss: 16.845216751098633 Tokens per Sec: 13426.6720156298
Epoch Step: 70 / 138 Loss: 11.63112735748291 Tokens per Sec: 12922.901518420269
Epoch Step: 75 / 138 Loss: 14.520020484924316 Tokens per Sec: 12935.631646274205
Epoch Step: 80 / 138 Loss: 14.16376781463623 Tokens per Sec: 12746.450793312282
Epoch Step: 85 / 138 Loss: 13.351612091064453 Tokens per Sec: 13991.69115177861
Epoch Step: 90 / 138 Loss: 25.07874870300293 Tokens per Sec: 13386.339787916215
Epoch Step: 95 / 138 Loss: 16.440500259399414 Tokens per Sec: 12256.109768915065
Epoch Step: 100 / 138 Loss: 16.860210418701172 Tokens per Sec: 13781.947777157422
Epoch Step: 105 / 138 Loss: 13.69989013671875 Tokens per Sec: 12110.896984616827
Epoch Step: 110 / 138 Loss: 13.683351516723633 Tokens per Sec: 11912.308677552934
Epoch Step: 115 / 138 Loss: 20.36427116394043 Tokens per Sec: 12532.012677174147
Epoch Step: 120 / 138 Loss: 16.1767578125 Tokens per Sec: 12998.307457122291
Epoch Step: 125 / 138 Loss: 14.1956205368042 Tokens per Sec: 12734.303104365781
Epoch Step: 130 / 138 Loss: 15.393624305725098 Tokens per Sec: 13167.48367914376
Epoch Step: 135 / 138 Loss: 17.28508949279785 Tokens per Sec: 12881.554486203326
Epoch ended with duration 0:00:48.879536
Train perplexity: 1.3929406240790434
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.890993
Validation perplexity: 1.3156346594129782
Model saved best_on_validation!
Epoch 134 / 1000
Epoch Step: 5 / 138 Loss: 13.245699882507324 Tokens per Sec: 13266.859406489948
Epoch Step: 10 / 138 Loss: 19.008649826049805 Tokens per Sec: 13169.979546398547
Epoch Step: 15 / 138 Loss: 16.892578125 Tokens per Sec: 13757.217450415028
Epoch Step: 20 / 138 Loss: 17.552871704101562 Tokens per Sec: 12845.541240567794
Epoch Step: 25 / 138 Loss: 13.093345642089844 Tokens per Sec: 13412.079244673187
Epoch Step: 30 / 138 Loss: 13.67288589477539 Tokens per Sec: 13268.996252206409
Epoch Step: 35 / 138 Loss: 158.56927490234375 Tokens per Sec: 13107.994212360712
Epoch Step: 40 / 138 Loss: 12.423656463623047 Tokens per Sec: 12901.656321480661
Epoch Step: 45 / 138 Loss: 15.964540481567383 Tokens per Sec: 13517.18126415989
Epoch Step: 50 / 138 Loss: 9.049656867980957 Tokens per Sec: 13347.674293960008
Epoch Step: 55 / 138 Loss: 16.67694664001465 Tokens per Sec: 12825.122729579358
Epoch Step: 60 / 138 Loss: 20.21955108642578 Tokens per Sec: 13349.050279785617
Epoch Step: 65 / 138 Loss: 13.350661277770996 Tokens per Sec: 12660.404996059138
Epoch Step: 70 / 138 Loss: 17.2578125 Tokens per Sec: 13238.03493560011
Epoch Step: 75 / 138 Loss: 11.236425399780273 Tokens per Sec: 13159.879797023783
Epoch Step: 80 / 138 Loss: 21.257368087768555 Tokens per Sec: 13739.595141330967
Epoch Step: 85 / 138 Loss: 131.94886779785156 Tokens per Sec: 13268.238803626762
Epoch Step: 90 / 138 Loss: 22.14581298828125 Tokens per Sec: 12557.781800290095
Epoch Step: 95 / 138 Loss: 20.250625610351562 Tokens per Sec: 12720.47661092401
Epoch Step: 100 / 138 Loss: 23.67893409729004 Tokens per Sec: 12483.959210244893
Epoch Step: 105 / 138 Loss: 15.89622974395752 Tokens per Sec: 12493.614076994296
Epoch Step: 110 / 138 Loss: 19.833492279052734 Tokens per Sec: 12904.65726186599
Epoch Step: 115 / 138 Loss: 24.494102478027344 Tokens per Sec: 12471.050063848734
Epoch Step: 120 / 138 Loss: 16.396005630493164 Tokens per Sec: 12876.276606865005
Epoch Step: 125 / 138 Loss: 15.389667510986328 Tokens per Sec: 12489.137177290675
Epoch Step: 130 / 138 Loss: 25.77503776550293 Tokens per Sec: 12030.668840012537
Epoch Step: 135 / 138 Loss: 23.325212478637695 Tokens per Sec: 12942.103381059927
Epoch ended with duration 0:00:49.160711
Train perplexity: 1.4530097757188019
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.923465
Validation perplexity: 1.494970544444932
Epoch 135 / 1000
Epoch Step: 5 / 138 Loss: 16.580244064331055 Tokens per Sec: 12269.204994510532
Epoch Step: 10 / 138 Loss: 25.82604217529297 Tokens per Sec: 13301.25715767581
Epoch Step: 15 / 138 Loss: 14.729883193969727 Tokens per Sec: 13284.164575898514
Epoch Step: 20 / 138 Loss: 17.561363220214844 Tokens per Sec: 13358.599240536409
Epoch Step: 25 / 138 Loss: 97.38558197021484 Tokens per Sec: 12806.270886950651
Epoch Step: 30 / 138 Loss: 9.869857788085938 Tokens per Sec: 12856.843822756007
Epoch Step: 35 / 138 Loss: 8.964300155639648 Tokens per Sec: 12908.631797568109
Epoch Step: 40 / 138 Loss: 14.50694751739502 Tokens per Sec: 13723.717846957861
Epoch Step: 45 / 138 Loss: 15.203149795532227 Tokens per Sec: 13795.49555492137
Epoch Step: 50 / 138 Loss: 15.28015422821045 Tokens per Sec: 13151.594590242266
Epoch Step: 55 / 138 Loss: 15.566831588745117 Tokens per Sec: 13004.60588926468
Epoch Step: 60 / 138 Loss: 22.39059829711914 Tokens per Sec: 12666.116259210354
Epoch Step: 65 / 138 Loss: 10.765335083007812 Tokens per Sec: 13553.411197601192
Epoch Step: 70 / 138 Loss: 97.662353515625 Tokens per Sec: 13162.436124493288
Epoch Step: 75 / 138 Loss: 10.860915184020996 Tokens per Sec: 12527.871074690811
Epoch Step: 80 / 138 Loss: 20.999719619750977 Tokens per Sec: 12720.487867768827
Epoch Step: 85 / 138 Loss: 96.99018859863281 Tokens per Sec: 13195.572827090153
Epoch Step: 90 / 138 Loss: 24.478328704833984 Tokens per Sec: 13707.496651112608
Epoch Step: 95 / 138 Loss: 25.28839683532715 Tokens per Sec: 13044.267567588133
Epoch Step: 100 / 138 Loss: 18.170597076416016 Tokens per Sec: 13858.32339517781
Epoch Step: 105 / 138 Loss: 17.70179557800293 Tokens per Sec: 12712.832605900117
Epoch Step: 110 / 138 Loss: 13.500506401062012 Tokens per Sec: 12061.57689900766
Epoch Step: 115 / 138 Loss: 18.100255966186523 Tokens per Sec: 12996.817084290202
Epoch Step: 120 / 138 Loss: 16.682483673095703 Tokens per Sec: 12923.044565543607
Epoch Step: 125 / 138 Loss: 12.338255882263184 Tokens per Sec: 12742.424144985116
Epoch Step: 130 / 138 Loss: 18.216506958007812 Tokens per Sec: 12136.86237430839
Epoch Step: 135 / 138 Loss: 17.518983840942383 Tokens per Sec: 12897.674242751662
Epoch ended with duration 0:00:49.064437
Train perplexity: 1.4058842749142222
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.879605
Validation perplexity: 1.3147398145387061
Model saved best_on_validation!
Model saved checkpoint!
Epoch 136 / 1000
Epoch Step: 5 / 138 Loss: 9.334366798400879 Tokens per Sec: 13524.730480219816
Epoch Step: 10 / 138 Loss: 12.170995712280273 Tokens per Sec: 14104.041687956947
Epoch Step: 15 / 138 Loss: 19.948986053466797 Tokens per Sec: 12685.23711926151
Epoch Step: 20 / 138 Loss: 11.593587875366211 Tokens per Sec: 13170.49033684333
Epoch Step: 25 / 138 Loss: 24.212663650512695 Tokens per Sec: 13056.338215537447
Epoch Step: 30 / 138 Loss: 23.566299438476562 Tokens per Sec: 13492.387654875114
Epoch Step: 35 / 138 Loss: 16.36699104309082 Tokens per Sec: 13246.990449539313
Epoch Step: 40 / 138 Loss: 18.106897354125977 Tokens per Sec: 13152.66353701416
Epoch Step: 45 / 138 Loss: 16.43215560913086 Tokens per Sec: 12850.587190503016
Epoch Step: 50 / 138 Loss: 18.695974349975586 Tokens per Sec: 13453.867676575144
Epoch Step: 55 / 138 Loss: 16.82805633544922 Tokens per Sec: 12878.235735046032
Epoch Step: 60 / 138 Loss: 21.58429527282715 Tokens per Sec: 13312.162758395372
Epoch Step: 65 / 138 Loss: 18.697696685791016 Tokens per Sec: 13062.801008396818
Epoch Step: 70 / 138 Loss: 22.956222534179688 Tokens per Sec: 13684.059040446402
Epoch Step: 75 / 138 Loss: 13.904342651367188 Tokens per Sec: 12514.984773564798
Epoch Step: 80 / 138 Loss: 14.970305442810059 Tokens per Sec: 13522.679471590664
Epoch Step: 85 / 138 Loss: 10.724848747253418 Tokens per Sec: 13166.083577848218
Epoch Step: 90 / 138 Loss: 19.293365478515625 Tokens per Sec: 12846.421355191085
Epoch Step: 95 / 138 Loss: 16.67660903930664 Tokens per Sec: 13072.175237284118
Epoch Step: 100 / 138 Loss: 16.02455711364746 Tokens per Sec: 12723.848806962906
Epoch Step: 105 / 138 Loss: 13.954977035522461 Tokens per Sec: 12821.412020762411
Epoch Step: 110 / 138 Loss: 12.27302360534668 Tokens per Sec: 12355.847590954358
Epoch Step: 115 / 138 Loss: 73.47193145751953 Tokens per Sec: 12147.352858333816
Epoch Step: 120 / 138 Loss: 14.170622825622559 Tokens per Sec: 12532.639349186597
Epoch Step: 125 / 138 Loss: 15.339107513427734 Tokens per Sec: 13078.54272122836
Epoch Step: 130 / 138 Loss: 16.308311462402344 Tokens per Sec: 11777.112241823186
Epoch Step: 135 / 138 Loss: 19.072240829467773 Tokens per Sec: 13020.24191995117
Epoch ended with duration 0:00:49.011728
Train perplexity: 1.4524729439195605
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.918531
Validation perplexity: 1.4774204947144798
Epoch 137 / 1000
Epoch Step: 5 / 138 Loss: 13.02449893951416 Tokens per Sec: 13468.805099234625
Epoch Step: 10 / 138 Loss: 9.941692352294922 Tokens per Sec: 13408.813740562702
Epoch Step: 15 / 138 Loss: 15.271561622619629 Tokens per Sec: 13899.293920632294
Epoch Step: 20 / 138 Loss: 21.239879608154297 Tokens per Sec: 12268.096238511871
Epoch Step: 25 / 138 Loss: 22.443809509277344 Tokens per Sec: 12784.0335647361
Epoch Step: 30 / 138 Loss: 13.849151611328125 Tokens per Sec: 13464.972538636217
Epoch Step: 35 / 138 Loss: 63.91948318481445 Tokens per Sec: 12942.934331418788
Epoch Step: 40 / 138 Loss: 10.23694896697998 Tokens per Sec: 13712.5242226931
Epoch Step: 45 / 138 Loss: 22.219287872314453 Tokens per Sec: 12692.270883975643
Epoch Step: 50 / 138 Loss: 11.410536766052246 Tokens per Sec: 13125.276942490797
Epoch Step: 55 / 138 Loss: 12.891281127929688 Tokens per Sec: 12386.555438352472
Epoch Step: 60 / 138 Loss: 15.173445701599121 Tokens per Sec: 13070.577627570634
Epoch Step: 65 / 138 Loss: 18.438005447387695 Tokens per Sec: 13319.087401308165
Epoch Step: 70 / 138 Loss: 19.89145851135254 Tokens per Sec: 12867.82126500905
Epoch Step: 75 / 138 Loss: 13.50827407836914 Tokens per Sec: 13879.585736319132
Epoch Step: 80 / 138 Loss: 191.2061309814453 Tokens per Sec: 12833.78274966743
Epoch Step: 85 / 138 Loss: 16.537817001342773 Tokens per Sec: 13296.57290539647
Epoch Step: 90 / 138 Loss: 19.674772262573242 Tokens per Sec: 13333.40229438703
Epoch Step: 95 / 138 Loss: 14.727540016174316 Tokens per Sec: 12946.886447397235
Epoch Step: 100 / 138 Loss: 164.7496337890625 Tokens per Sec: 13106.313256869413
Epoch Step: 105 / 138 Loss: 16.210718154907227 Tokens per Sec: 13021.374482038715
Epoch Step: 110 / 138 Loss: 16.67141342163086 Tokens per Sec: 12676.283201710921
Epoch Step: 115 / 138 Loss: 13.41969108581543 Tokens per Sec: 12674.373059539586
Epoch Step: 120 / 138 Loss: 15.860298156738281 Tokens per Sec: 11374.026352586994
Epoch Step: 125 / 138 Loss: 12.00938892364502 Tokens per Sec: 12549.638416124562
Epoch Step: 130 / 138 Loss: 20.37667465209961 Tokens per Sec: 12959.878355924577
Epoch Step: 135 / 138 Loss: 13.216682434082031 Tokens per Sec: 13223.450711149117
Epoch ended with duration 0:00:48.968837
Train perplexity: 1.365239929391808
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.916219
Validation perplexity: 1.401679900149552
Epoch 138 / 1000
Epoch Step: 5 / 138 Loss: 14.922480583190918 Tokens per Sec: 12996.184757976527
Epoch Step: 10 / 138 Loss: 21.402597427368164 Tokens per Sec: 13733.072756538242
Epoch Step: 15 / 138 Loss: 18.52855682373047 Tokens per Sec: 12459.36932554626
Epoch Step: 20 / 138 Loss: 16.935335159301758 Tokens per Sec: 13129.001187356933
Epoch Step: 25 / 138 Loss: 29.8509464263916 Tokens per Sec: 13236.465224485877
Epoch Step: 30 / 138 Loss: 19.275367736816406 Tokens per Sec: 13820.259343105101
Epoch Step: 35 / 138 Loss: 93.15396881103516 Tokens per Sec: 12646.854955950252
Epoch Step: 40 / 138 Loss: 113.62085723876953 Tokens per Sec: 12964.882654067278
Epoch Step: 45 / 138 Loss: 18.17446517944336 Tokens per Sec: 12934.291690172302
Epoch Step: 50 / 138 Loss: 23.2572078704834 Tokens per Sec: 13118.64567941141
Epoch Step: 55 / 138 Loss: 26.867706298828125 Tokens per Sec: 13332.797329365148
Epoch Step: 60 / 138 Loss: 106.35728454589844 Tokens per Sec: 12915.577456503173
Epoch Step: 65 / 138 Loss: 18.69074821472168 Tokens per Sec: 12695.30783904231
Epoch Step: 70 / 138 Loss: 17.700227737426758 Tokens per Sec: 13237.955441154094
Epoch Step: 75 / 138 Loss: 11.119300842285156 Tokens per Sec: 13448.67908085953
Epoch Step: 80 / 138 Loss: 14.256092071533203 Tokens per Sec: 13675.517061213714
Epoch Step: 85 / 138 Loss: 13.36306381225586 Tokens per Sec: 12761.592201035559
Epoch Step: 90 / 138 Loss: 9.04080581665039 Tokens per Sec: 13620.310035156492
Epoch Step: 95 / 138 Loss: 14.331048965454102 Tokens per Sec: 13151.907349795003
Epoch Step: 100 / 138 Loss: 13.173316955566406 Tokens per Sec: 13061.024660291898
Epoch Step: 105 / 138 Loss: 17.48094940185547 Tokens per Sec: 12510.99687353732
Epoch Step: 110 / 138 Loss: 16.412961959838867 Tokens per Sec: 12790.70160032018
Epoch Step: 115 / 138 Loss: 13.736355781555176 Tokens per Sec: 13344.847356416192
Epoch Step: 120 / 138 Loss: 17.966548919677734 Tokens per Sec: 11823.672907363509
Epoch Step: 125 / 138 Loss: 84.74598693847656 Tokens per Sec: 12583.211759769098
Epoch Step: 130 / 138 Loss: 16.52482032775879 Tokens per Sec: 12326.912620163313
Epoch Step: 135 / 138 Loss: 13.922216415405273 Tokens per Sec: 12885.867678814648
Epoch ended with duration 0:00:49.041919
Train perplexity: 1.5054472905890794
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.954741
Validation perplexity: 1.3902172058787896
Epoch 139 / 1000
Epoch Step: 5 / 138 Loss: 19.349573135375977 Tokens per Sec: 13046.502156840323
Epoch Step: 10 / 138 Loss: 116.11967468261719 Tokens per Sec: 12060.308763347335
Epoch Step: 15 / 138 Loss: 24.416528701782227 Tokens per Sec: 13052.930945249993
Epoch Step: 20 / 138 Loss: 21.2966251373291 Tokens per Sec: 13597.791130341253
Epoch Step: 25 / 138 Loss: 18.48909568786621 Tokens per Sec: 13680.657919818563
Epoch Step: 30 / 138 Loss: 11.508665084838867 Tokens per Sec: 13454.491096834074
Epoch Step: 35 / 138 Loss: 21.362972259521484 Tokens per Sec: 12829.9155048344
Epoch Step: 40 / 138 Loss: 17.254308700561523 Tokens per Sec: 13122.867263597125
Epoch Step: 45 / 138 Loss: 13.031390190124512 Tokens per Sec: 13094.695936042985
Epoch Step: 50 / 138 Loss: 10.953993797302246 Tokens per Sec: 13697.5629904488
Epoch Step: 55 / 138 Loss: 18.593679428100586 Tokens per Sec: 13649.105798740024
Epoch Step: 60 / 138 Loss: 14.546085357666016 Tokens per Sec: 13304.863542524168
Epoch Step: 65 / 138 Loss: 20.116188049316406 Tokens per Sec: 12394.516692468089
Epoch Step: 70 / 138 Loss: 12.986712455749512 Tokens per Sec: 13895.561792374398
Epoch Step: 75 / 138 Loss: 14.266324043273926 Tokens per Sec: 13105.102413264207
Epoch Step: 80 / 138 Loss: 12.946819305419922 Tokens per Sec: 13415.535713226822
Epoch Step: 85 / 138 Loss: 20.32570457458496 Tokens per Sec: 13681.993814125324
Epoch Step: 90 / 138 Loss: 18.467575073242188 Tokens per Sec: 13266.186750169893
Epoch Step: 95 / 138 Loss: 17.802297592163086 Tokens per Sec: 13048.489150338542
Epoch Step: 100 / 138 Loss: 15.740560531616211 Tokens per Sec: 13590.335883659072
Epoch Step: 105 / 138 Loss: 21.4132022857666 Tokens per Sec: 12189.108495586415
Epoch Step: 110 / 138 Loss: 18.34674835205078 Tokens per Sec: 12990.0272656953
Epoch Step: 115 / 138 Loss: 15.13610553741455 Tokens per Sec: 13163.104893844737
Epoch Step: 120 / 138 Loss: 15.638223648071289 Tokens per Sec: 11879.632030921033
Epoch Step: 125 / 138 Loss: 13.97122573852539 Tokens per Sec: 12458.926486119433
Epoch Step: 130 / 138 Loss: 14.193272590637207 Tokens per Sec: 12506.947754196011
Epoch Step: 135 / 138 Loss: 15.365189552307129 Tokens per Sec: 11765.931230443235
Epoch ended with duration 0:00:49.032534
Train perplexity: 1.4316375851763632
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) . METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.958516
Validation perplexity: 1.5322459829159305
Epoch 140 / 1000
Epoch Step: 5 / 138 Loss: 13.551121711730957 Tokens per Sec: 12926.999337318839
Epoch Step: 10 / 138 Loss: 21.327220916748047 Tokens per Sec: 12868.374640846789
Epoch Step: 15 / 138 Loss: 80.83064270019531 Tokens per Sec: 12973.943506815733
Epoch Step: 20 / 138 Loss: 11.35009765625 Tokens per Sec: 13395.5164093641
Epoch Step: 25 / 138 Loss: 18.974279403686523 Tokens per Sec: 12766.161324781038
Epoch Step: 30 / 138 Loss: 13.516879081726074 Tokens per Sec: 12627.244689763236
Epoch Step: 35 / 138 Loss: 19.03351593017578 Tokens per Sec: 12925.289794710652
Epoch Step: 40 / 138 Loss: 8.89881706237793 Tokens per Sec: 13493.420345765075
Epoch Step: 45 / 138 Loss: 12.398900032043457 Tokens per Sec: 13295.829097828337
Epoch Step: 50 / 138 Loss: 13.919035911560059 Tokens per Sec: 13393.251556537023
Epoch Step: 55 / 138 Loss: 11.019588470458984 Tokens per Sec: 13177.786167035176
Epoch Step: 60 / 138 Loss: 14.180072784423828 Tokens per Sec: 13602.024912883997
Epoch Step: 65 / 138 Loss: 8.635323524475098 Tokens per Sec: 13131.80192942708
Epoch Step: 70 / 138 Loss: 18.997188568115234 Tokens per Sec: 12740.090281992521
Epoch Step: 75 / 138 Loss: 21.31118392944336 Tokens per Sec: 13619.093428040671
Epoch Step: 80 / 138 Loss: 17.052528381347656 Tokens per Sec: 13607.995605864227
Epoch Step: 85 / 138 Loss: 16.53742027282715 Tokens per Sec: 13152.401726790056
Epoch Step: 90 / 138 Loss: 21.488677978515625 Tokens per Sec: 13312.25135682823
Epoch Step: 95 / 138 Loss: 13.51934814453125 Tokens per Sec: 13283.828623414403
Epoch Step: 100 / 138 Loss: 28.93470001220703 Tokens per Sec: 12911.213969805907
Epoch Step: 105 / 138 Loss: 22.47134780883789 Tokens per Sec: 12626.71345801585
Epoch Step: 110 / 138 Loss: 22.110658645629883 Tokens per Sec: 11948.514718073326
Epoch Step: 115 / 138 Loss: 26.673717498779297 Tokens per Sec: 12336.84808283902
Epoch Step: 120 / 138 Loss: 14.419142723083496 Tokens per Sec: 13039.479632714807
Epoch Step: 125 / 138 Loss: 12.802417755126953 Tokens per Sec: 12707.514609436765
Epoch Step: 130 / 138 Loss: 22.991600036621094 Tokens per Sec: 12892.090956439206
Epoch Step: 135 / 138 Loss: 167.16207885742188 Tokens per Sec: 12157.924929349265
Epoch ended with duration 0:00:49.069725
Train perplexity: 1.4505993441936156
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.024598
Validation perplexity: 2.065933795130525
Model saved checkpoint!
Epoch 141 / 1000
Epoch Step: 5 / 138 Loss: 10.562090873718262 Tokens per Sec: 12798.08872520268
Epoch Step: 10 / 138 Loss: 17.58830451965332 Tokens per Sec: 13639.242006703198
Epoch Step: 15 / 138 Loss: 12.031705856323242 Tokens per Sec: 13292.304765718804
Epoch Step: 20 / 138 Loss: 24.899993896484375 Tokens per Sec: 13415.013543240004
Epoch Step: 25 / 138 Loss: 11.805856704711914 Tokens per Sec: 12633.71673422511
Epoch Step: 30 / 138 Loss: 14.635787010192871 Tokens per Sec: 13371.961741980198
Epoch Step: 35 / 138 Loss: 17.139890670776367 Tokens per Sec: 13604.805467812195
Epoch Step: 40 / 138 Loss: 116.84429931640625 Tokens per Sec: 13210.491132079052
Epoch Step: 45 / 138 Loss: 11.118392944335938 Tokens per Sec: 12984.365156802702
Epoch Step: 50 / 138 Loss: 17.65292739868164 Tokens per Sec: 13262.22769405987
Epoch Step: 55 / 138 Loss: 8.675581932067871 Tokens per Sec: 13928.516234308514
Epoch Step: 60 / 138 Loss: 119.39573669433594 Tokens per Sec: 13090.166551854556
Epoch Step: 65 / 138 Loss: 59.892250061035156 Tokens per Sec: 12711.318871588683
Epoch Step: 70 / 138 Loss: 21.36731719970703 Tokens per Sec: 13673.666321236327
Epoch Step: 75 / 138 Loss: 20.433927536010742 Tokens per Sec: 13250.584521606617
Epoch Step: 80 / 138 Loss: 12.89969253540039 Tokens per Sec: 13206.615744279909
Epoch Step: 85 / 138 Loss: 24.097549438476562 Tokens per Sec: 13087.842185756539
Epoch Step: 90 / 138 Loss: 17.065406799316406 Tokens per Sec: 12880.931023050573
Epoch Step: 95 / 138 Loss: 14.459943771362305 Tokens per Sec: 13497.51076662765
Epoch Step: 100 / 138 Loss: 120.62474060058594 Tokens per Sec: 12687.70071680642
Epoch Step: 105 / 138 Loss: 11.92060375213623 Tokens per Sec: 12793.687969611776
Epoch Step: 110 / 138 Loss: 15.52822208404541 Tokens per Sec: 12952.350742030725
Epoch Step: 115 / 138 Loss: 15.33369255065918 Tokens per Sec: 12845.864737599453
Epoch Step: 120 / 138 Loss: 9.373242378234863 Tokens per Sec: 12599.828537822574
Epoch Step: 125 / 138 Loss: 17.115625381469727 Tokens per Sec: 12604.64038763694
Epoch Step: 130 / 138 Loss: 17.25634765625 Tokens per Sec: 11835.998699418335
Epoch Step: 135 / 138 Loss: 16.60674476623535 Tokens per Sec: 12492.438636420415
Epoch ended with duration 0:00:48.934998
Train perplexity: 1.4064222114849674
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.015007
Validation perplexity: 1.808150850088354
Epoch 142 / 1000
Epoch Step: 5 / 138 Loss: 9.282208442687988 Tokens per Sec: 13342.990924974845
Epoch Step: 10 / 138 Loss: 10.980210304260254 Tokens per Sec: 12870.40676577173
Epoch Step: 15 / 138 Loss: 14.181097030639648 Tokens per Sec: 13266.587153559669
Epoch Step: 20 / 138 Loss: 121.09774780273438 Tokens per Sec: 13585.522743067138
Epoch Step: 25 / 138 Loss: 13.467292785644531 Tokens per Sec: 13972.393276716333
Epoch Step: 30 / 138 Loss: 21.59872817993164 Tokens per Sec: 12950.707937605157
Epoch Step: 35 / 138 Loss: 15.144637107849121 Tokens per Sec: 13740.786423047972
Epoch Step: 40 / 138 Loss: 13.194038391113281 Tokens per Sec: 12792.913971052
Epoch Step: 45 / 138 Loss: 17.974328994750977 Tokens per Sec: 13045.77342679939
Epoch Step: 50 / 138 Loss: 12.512327194213867 Tokens per Sec: 13467.106562793053
Epoch Step: 55 / 138 Loss: 18.04795265197754 Tokens per Sec: 12863.159100815741
Epoch Step: 60 / 138 Loss: 14.418155670166016 Tokens per Sec: 13557.829866331143
Epoch Step: 65 / 138 Loss: 189.4707489013672 Tokens per Sec: 13245.330740405107
Epoch Step: 70 / 138 Loss: 26.158056259155273 Tokens per Sec: 13094.892964813182
Epoch Step: 75 / 138 Loss: 17.65521812438965 Tokens per Sec: 12939.555171209759
Epoch Step: 80 / 138 Loss: 19.034719467163086 Tokens per Sec: 13260.115601540398
Epoch Step: 85 / 138 Loss: 23.111160278320312 Tokens per Sec: 13240.044123272595
Epoch Step: 90 / 138 Loss: 22.38152503967285 Tokens per Sec: 13229.505528743592
Epoch Step: 95 / 138 Loss: 21.339061737060547 Tokens per Sec: 12690.14179094454
Epoch Step: 100 / 138 Loss: 13.667327880859375 Tokens per Sec: 13012.84194822182
Epoch Step: 105 / 138 Loss: 16.291790008544922 Tokens per Sec: 12084.118913547805
Epoch Step: 110 / 138 Loss: 10.833786964416504 Tokens per Sec: 12634.890845872449
Epoch Step: 115 / 138 Loss: 14.30398941040039 Tokens per Sec: 13124.491028838382
Epoch Step: 120 / 138 Loss: 14.964271545410156 Tokens per Sec: 12763.82922851061
Epoch Step: 125 / 138 Loss: 12.557345390319824 Tokens per Sec: 12661.95746843339
Epoch Step: 130 / 138 Loss: 14.730624198913574 Tokens per Sec: 12298.721464045047
Epoch Step: 135 / 138 Loss: 12.966907501220703 Tokens per Sec: 13044.87184486646
Epoch ended with duration 0:00:48.862286
Train perplexity: 1.3972927129789807
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:03.988536
Validation perplexity: 1.6938683265469072
Epoch 143 / 1000
Epoch Step: 5 / 138 Loss: 19.360027313232422 Tokens per Sec: 13537.828621202618
Epoch Step: 10 / 138 Loss: 11.879754066467285 Tokens per Sec: 13035.023398345933
Epoch Step: 15 / 138 Loss: 14.776603698730469 Tokens per Sec: 13336.980778851583
Epoch Step: 20 / 138 Loss: 19.973405838012695 Tokens per Sec: 13985.45852250264
Epoch Step: 25 / 138 Loss: 18.436553955078125 Tokens per Sec: 13411.39109635576
Epoch Step: 30 / 138 Loss: 9.038385391235352 Tokens per Sec: 12827.173940885674
Epoch Step: 35 / 138 Loss: 18.15523910522461 Tokens per Sec: 12986.243275533534
Epoch Step: 40 / 138 Loss: 12.351554870605469 Tokens per Sec: 12683.972718804782
Epoch Step: 45 / 138 Loss: 14.40584945678711 Tokens per Sec: 13319.44363569754
Epoch Step: 50 / 138 Loss: 11.038948059082031 Tokens per Sec: 12962.46364491464
Epoch Step: 55 / 138 Loss: 16.215951919555664 Tokens per Sec: 12958.98114992749
Epoch Step: 60 / 138 Loss: 13.854948043823242 Tokens per Sec: 13379.266339630356
Epoch Step: 65 / 138 Loss: 19.81421661376953 Tokens per Sec: 13331.721466821
Epoch Step: 70 / 138 Loss: 15.441144943237305 Tokens per Sec: 13390.081998351297
Epoch Step: 75 / 138 Loss: 16.440719604492188 Tokens per Sec: 13672.09405001795
Epoch Step: 80 / 138 Loss: 10.989166259765625 Tokens per Sec: 12982.858929807662
Epoch Step: 85 / 138 Loss: 66.4925765991211 Tokens per Sec: 13362.832064353905
Epoch Step: 90 / 138 Loss: 16.284238815307617 Tokens per Sec: 13229.71086498161
Epoch Step: 95 / 138 Loss: 166.7040252685547 Tokens per Sec: 13089.488473120455
Epoch Step: 100 / 138 Loss: 18.162160873413086 Tokens per Sec: 13351.69722939397
Epoch Step: 105 / 138 Loss: 15.260086059570312 Tokens per Sec: 12809.521666326593
Epoch Step: 110 / 138 Loss: 15.267623901367188 Tokens per Sec: 12725.630942320242
Epoch Step: 115 / 138 Loss: 10.832096099853516 Tokens per Sec: 12400.147531853094
Epoch Step: 120 / 138 Loss: 18.8211727142334 Tokens per Sec: 12008.43888862662
Epoch Step: 125 / 138 Loss: 16.659292221069336 Tokens per Sec: 13005.894609522818
Epoch Step: 130 / 138 Loss: 135.15269470214844 Tokens per Sec: 12446.611543626974
Epoch Step: 135 / 138 Loss: 13.248553276062012 Tokens per Sec: 12553.529911058575
Epoch ended with duration 0:00:48.835273
Train perplexity: 1.325265563019148
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.895105
Validation perplexity: 1.3049704757914427
Model saved best_on_validation!
Epoch 144 / 1000
Epoch Step: 5 / 138 Loss: 16.00272560119629 Tokens per Sec: 13669.76286800807
Epoch Step: 10 / 138 Loss: 18.06277084350586 Tokens per Sec: 12130.685328928708
Epoch Step: 15 / 138 Loss: 19.271652221679688 Tokens per Sec: 13622.641046084189
Epoch Step: 20 / 138 Loss: 10.801238059997559 Tokens per Sec: 12983.096287407481
Epoch Step: 25 / 138 Loss: 15.294737815856934 Tokens per Sec: 13324.806916385185
Epoch Step: 30 / 138 Loss: 10.849213600158691 Tokens per Sec: 13231.283169678813
Epoch Step: 35 / 138 Loss: 8.168689727783203 Tokens per Sec: 12624.975604714322
Epoch Step: 40 / 138 Loss: 14.933392524719238 Tokens per Sec: 13114.473149600135
Epoch Step: 45 / 138 Loss: 12.816173553466797 Tokens per Sec: 13729.375625370272
Epoch Step: 50 / 138 Loss: 113.56336212158203 Tokens per Sec: 13607.496040716907
Epoch Step: 55 / 138 Loss: 15.439483642578125 Tokens per Sec: 12763.87742310854
Epoch Step: 60 / 138 Loss: 11.79234504699707 Tokens per Sec: 12694.377061790283
Epoch Step: 65 / 138 Loss: 11.224419593811035 Tokens per Sec: 13645.855113425156
Epoch Step: 70 / 138 Loss: 16.468280792236328 Tokens per Sec: 13017.98714783069
Epoch Step: 75 / 138 Loss: 13.63912582397461 Tokens per Sec: 12757.665080136567
Epoch Step: 80 / 138 Loss: 15.192357063293457 Tokens per Sec: 13768.201361750307
Epoch Step: 85 / 138 Loss: 18.703197479248047 Tokens per Sec: 12390.48993617117
Epoch Step: 90 / 138 Loss: 18.36195182800293 Tokens per Sec: 13575.198593448471
Epoch Step: 95 / 138 Loss: 18.707317352294922 Tokens per Sec: 13017.90652353427
Epoch Step: 100 / 138 Loss: 11.9563627243042 Tokens per Sec: 13252.604373693423
Epoch Step: 105 / 138 Loss: 13.062045097351074 Tokens per Sec: 12637.319304988545
Epoch Step: 110 / 138 Loss: 17.19575309753418 Tokens per Sec: 13196.467005880784
Epoch Step: 115 / 138 Loss: 13.763595581054688 Tokens per Sec: 12591.888478001225
Epoch Step: 120 / 138 Loss: 14.472838401794434 Tokens per Sec: 12553.59797735919
Epoch Step: 125 / 138 Loss: 16.570655822753906 Tokens per Sec: 13147.446734672849
Epoch Step: 130 / 138 Loss: 13.969881057739258 Tokens per Sec: 11430.377482373475
Epoch Step: 135 / 138 Loss: 14.475626945495605 Tokens per Sec: 12809.182417823471
Epoch ended with duration 0:00:49.028350
Train perplexity: 1.3851920810341638
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.909712
Validation perplexity: 1.4605668922649886
Epoch 145 / 1000
Epoch Step: 5 / 138 Loss: 19.397615432739258 Tokens per Sec: 12785.049026595012
Epoch Step: 10 / 138 Loss: 16.883455276489258 Tokens per Sec: 13598.15454767467
Epoch Step: 15 / 138 Loss: 7.729495048522949 Tokens per Sec: 13184.326628136674
Epoch Step: 20 / 138 Loss: 18.872373580932617 Tokens per Sec: 13403.7366345613
Epoch Step: 25 / 138 Loss: 11.485679626464844 Tokens per Sec: 12153.200418873717
Epoch Step: 30 / 138 Loss: 14.85200309753418 Tokens per Sec: 13387.205670233527
Epoch Step: 35 / 138 Loss: 12.223484992980957 Tokens per Sec: 13322.765599712862
Epoch Step: 40 / 138 Loss: 17.362817764282227 Tokens per Sec: 13384.073400404712
Epoch Step: 45 / 138 Loss: 13.648872375488281 Tokens per Sec: 13012.965007698273
Epoch Step: 50 / 138 Loss: 11.046518325805664 Tokens per Sec: 13536.646333330515
Epoch Step: 55 / 138 Loss: 10.581256866455078 Tokens per Sec: 13878.493204539718
Epoch Step: 60 / 138 Loss: 8.887199401855469 Tokens per Sec: 13442.498870505206
Epoch Step: 65 / 138 Loss: 8.738171577453613 Tokens per Sec: 12941.661269838994
Epoch Step: 70 / 138 Loss: 16.26714515686035 Tokens per Sec: 13553.107897140288
Epoch Step: 75 / 138 Loss: 14.985198974609375 Tokens per Sec: 13133.697128523196
Epoch Step: 80 / 138 Loss: 17.318300247192383 Tokens per Sec: 13170.554968821714
Epoch Step: 85 / 138 Loss: 16.53890037536621 Tokens per Sec: 13815.380787942722
Epoch Step: 90 / 138 Loss: 18.217967987060547 Tokens per Sec: 12996.89236753884
Epoch Step: 95 / 138 Loss: 12.70283031463623 Tokens per Sec: 13142.241891860293
Epoch Step: 100 / 138 Loss: 13.3865966796875 Tokens per Sec: 13076.810572741917
Epoch Step: 105 / 138 Loss: 12.796920776367188 Tokens per Sec: 13011.31707220136
Epoch Step: 110 / 138 Loss: 16.241313934326172 Tokens per Sec: 12910.814275195824
Epoch Step: 115 / 138 Loss: 14.660482406616211 Tokens per Sec: 12181.326594261987
Epoch Step: 120 / 138 Loss: 132.89796447753906 Tokens per Sec: 12389.93608972642
Epoch Step: 125 / 138 Loss: 116.35558319091797 Tokens per Sec: 12378.388104714766
Epoch Step: 130 / 138 Loss: 73.39888000488281 Tokens per Sec: 12668.593515290671
Epoch Step: 135 / 138 Loss: 14.909934997558594 Tokens per Sec: 12520.980990123051
Epoch ended with duration 0:00:48.847596
Train perplexity: 1.3428900353393363
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.964808
Validation perplexity: 1.6172691730987108
Model saved checkpoint!
Epoch 146 / 1000
Epoch Step: 5 / 138 Loss: 13.638916969299316 Tokens per Sec: 13018.197188700959
Epoch Step: 10 / 138 Loss: 17.879318237304688 Tokens per Sec: 13215.152697199966
Epoch Step: 15 / 138 Loss: 21.474502563476562 Tokens per Sec: 13246.14529214451
Epoch Step: 20 / 138 Loss: 159.34518432617188 Tokens per Sec: 12916.112983527262
Epoch Step: 25 / 138 Loss: 100.11094665527344 Tokens per Sec: 13247.808539530011
Epoch Step: 30 / 138 Loss: 11.833639144897461 Tokens per Sec: 13376.630193263576
Epoch Step: 35 / 138 Loss: 19.629409790039062 Tokens per Sec: 13464.578588083536
Epoch Step: 40 / 138 Loss: 14.888657569885254 Tokens per Sec: 13774.363249285509
Epoch Step: 45 / 138 Loss: 17.850549697875977 Tokens per Sec: 13316.02683037254
Epoch Step: 50 / 138 Loss: 10.90266227722168 Tokens per Sec: 13114.576567904352
Epoch Step: 55 / 138 Loss: 20.49588966369629 Tokens per Sec: 13639.49934762431
Epoch Step: 60 / 138 Loss: 9.805350303649902 Tokens per Sec: 13114.29753006654
Epoch Step: 65 / 138 Loss: 14.243325233459473 Tokens per Sec: 12621.596247793266
Epoch Step: 70 / 138 Loss: 17.04151725769043 Tokens per Sec: 13718.918316013396
Epoch Step: 75 / 138 Loss: 72.2215576171875 Tokens per Sec: 12501.98663705396
Epoch Step: 80 / 138 Loss: 13.019179344177246 Tokens per Sec: 13253.346984596006
Epoch Step: 85 / 138 Loss: 23.462984085083008 Tokens per Sec: 12511.583167843848
Epoch Step: 90 / 138 Loss: 17.739173889160156 Tokens per Sec: 13111.554907343632
Epoch Step: 95 / 138 Loss: 19.640344619750977 Tokens per Sec: 13459.833225429311
Epoch Step: 100 / 138 Loss: 17.808523178100586 Tokens per Sec: 13263.792953840904
Epoch Step: 105 / 138 Loss: 14.64122486114502 Tokens per Sec: 12527.499821633242
Epoch Step: 110 / 138 Loss: 13.361903190612793 Tokens per Sec: 13126.037991435825
Epoch Step: 115 / 138 Loss: 16.848468780517578 Tokens per Sec: 12825.86315274276
Epoch Step: 120 / 138 Loss: 14.557292938232422 Tokens per Sec: 12854.896509801034
Epoch Step: 125 / 138 Loss: 59.305999755859375 Tokens per Sec: 12520.959506197134
Epoch Step: 130 / 138 Loss: 17.067583084106445 Tokens per Sec: 11595.717944163283
Epoch Step: 135 / 138 Loss: 16.58451271057129 Tokens per Sec: 13192.340712094998
Epoch ended with duration 0:00:48.908755
Train perplexity: 1.3802723305030555
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.025653
Validation perplexity: 1.6807292886981327
Epoch 147 / 1000
Epoch Step: 5 / 138 Loss: 16.082923889160156 Tokens per Sec: 12683.366279506574
Epoch Step: 10 / 138 Loss: 13.110734939575195 Tokens per Sec: 12885.836775443
Epoch Step: 15 / 138 Loss: 9.692904472351074 Tokens per Sec: 13210.60676997547
Epoch Step: 20 / 138 Loss: 17.968168258666992 Tokens per Sec: 11848.822763812303
Epoch Step: 25 / 138 Loss: 14.293010711669922 Tokens per Sec: 13371.503728907912
Epoch Step: 30 / 138 Loss: 12.771434783935547 Tokens per Sec: 13394.577837137684
Epoch Step: 35 / 138 Loss: 25.34039878845215 Tokens per Sec: 12973.757529164572
Epoch Step: 40 / 138 Loss: 17.837905883789062 Tokens per Sec: 13300.445029835504
Epoch Step: 45 / 138 Loss: 17.67580795288086 Tokens per Sec: 13018.14270193162
Epoch Step: 50 / 138 Loss: 18.362520217895508 Tokens per Sec: 13625.197343626598
Epoch Step: 55 / 138 Loss: 64.20889282226562 Tokens per Sec: 13054.009957188375
Epoch Step: 60 / 138 Loss: 104.96247100830078 Tokens per Sec: 13436.536269413009
Epoch Step: 65 / 138 Loss: 17.2091064453125 Tokens per Sec: 12589.868187626782
Epoch Step: 70 / 138 Loss: 14.78331184387207 Tokens per Sec: 13553.477703954359
Epoch Step: 75 / 138 Loss: 20.56886100769043 Tokens per Sec: 12910.499253085934
Epoch Step: 80 / 138 Loss: 13.231348037719727 Tokens per Sec: 13572.83860178801
Epoch Step: 85 / 138 Loss: 13.082117080688477 Tokens per Sec: 12949.265389338763
Epoch Step: 90 / 138 Loss: 16.74880599975586 Tokens per Sec: 14098.182423595938
Epoch Step: 95 / 138 Loss: 21.762191772460938 Tokens per Sec: 13377.388822602532
Epoch Step: 100 / 138 Loss: 13.303016662597656 Tokens per Sec: 13322.961404553229
Epoch Step: 105 / 138 Loss: 21.786319732666016 Tokens per Sec: 12710.085758579551
Epoch Step: 110 / 138 Loss: 16.30011749267578 Tokens per Sec: 12620.676321256866
Epoch Step: 115 / 138 Loss: 17.730714797973633 Tokens per Sec: 12489.802087431879
Epoch Step: 120 / 138 Loss: 15.147380828857422 Tokens per Sec: 12960.152762876764
Epoch Step: 125 / 138 Loss: 17.184484481811523 Tokens per Sec: 12726.981702451701
Epoch Step: 130 / 138 Loss: 18.335283279418945 Tokens per Sec: 12999.715164388423
Epoch Step: 135 / 138 Loss: 108.53211212158203 Tokens per Sec: 12207.633043121179
Epoch ended with duration 0:00:49.058127
Train perplexity: 1.5125771500380532
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:03.942356
Validation perplexity: 1.564583597914594
Epoch 148 / 1000
Epoch Step: 5 / 138 Loss: 20.39692497253418 Tokens per Sec: 13522.946480506462
Epoch Step: 10 / 138 Loss: 19.588260650634766 Tokens per Sec: 12984.798978243442
Epoch Step: 15 / 138 Loss: 9.71269416809082 Tokens per Sec: 13214.731132076791
Epoch Step: 20 / 138 Loss: 18.476966857910156 Tokens per Sec: 13173.788641967845
Epoch Step: 25 / 138 Loss: 17.704017639160156 Tokens per Sec: 13154.002778020023
Epoch Step: 30 / 138 Loss: 8.784027099609375 Tokens per Sec: 13865.329941908694
Epoch Step: 35 / 138 Loss: 147.54638671875 Tokens per Sec: 13021.47507298595
Epoch Step: 40 / 138 Loss: 16.918867111206055 Tokens per Sec: 12890.56953874588
Epoch Step: 45 / 138 Loss: 14.632485389709473 Tokens per Sec: 12315.82765173372
Epoch Step: 50 / 138 Loss: 12.109512329101562 Tokens per Sec: 12582.329338234471
Epoch Step: 55 / 138 Loss: 18.438459396362305 Tokens per Sec: 13427.931744693566
Epoch Step: 60 / 138 Loss: 14.754961013793945 Tokens per Sec: 13679.39569392713
Epoch Step: 65 / 138 Loss: 21.13357925415039 Tokens per Sec: 12669.197107946698
Epoch Step: 70 / 138 Loss: 18.100830078125 Tokens per Sec: 14187.362632952154
Epoch Step: 75 / 138 Loss: 79.8983383178711 Tokens per Sec: 13017.56292057092
Epoch Step: 80 / 138 Loss: 19.69436264038086 Tokens per Sec: 13383.805588688498
Epoch Step: 85 / 138 Loss: 23.106887817382812 Tokens per Sec: 12720.072346337181
Epoch Step: 90 / 138 Loss: 16.807231903076172 Tokens per Sec: 13290.499980380162
Epoch Step: 95 / 138 Loss: 21.216976165771484 Tokens per Sec: 12941.117095527663
Epoch Step: 100 / 138 Loss: 16.592029571533203 Tokens per Sec: 12908.316644369546
Epoch Step: 105 / 138 Loss: 17.101892471313477 Tokens per Sec: 12397.179362098437
Epoch Step: 110 / 138 Loss: 9.1952486038208 Tokens per Sec: 12399.646037608312
Epoch Step: 115 / 138 Loss: 18.29969024658203 Tokens per Sec: 12664.770348355361
Epoch Step: 120 / 138 Loss: 17.422344207763672 Tokens per Sec: 12501.612426899519
Epoch Step: 125 / 138 Loss: 14.127102851867676 Tokens per Sec: 11837.673139872304
Epoch Step: 130 / 138 Loss: 125.18928527832031 Tokens per Sec: 13137.037756090453
Epoch Step: 135 / 138 Loss: 13.996841430664062 Tokens per Sec: 12496.77964874148
Epoch ended with duration 0:00:49.141264
Train perplexity: 1.4386403694793957
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.992890
Validation perplexity: 1.5894839655574073
Epoch 149 / 1000
Epoch Step: 5 / 138 Loss: 126.10770416259766 Tokens per Sec: 12874.495549610792
Epoch Step: 10 / 138 Loss: 10.865572929382324 Tokens per Sec: 14041.346810848852
Epoch Step: 15 / 138 Loss: 15.925200462341309 Tokens per Sec: 13171.404114643577
Epoch Step: 20 / 138 Loss: 9.68319320678711 Tokens per Sec: 13543.979966241412
Epoch Step: 25 / 138 Loss: 133.5438690185547 Tokens per Sec: 12797.133894317376
Epoch Step: 30 / 138 Loss: 14.068117141723633 Tokens per Sec: 13447.308049424602
Epoch Step: 35 / 138 Loss: 12.348687171936035 Tokens per Sec: 13380.88860527341
Epoch Step: 40 / 138 Loss: 10.536080360412598 Tokens per Sec: 13258.07457699623
Epoch Step: 45 / 138 Loss: 12.638604164123535 Tokens per Sec: 14088.334688625364
Epoch Step: 50 / 138 Loss: 23.110078811645508 Tokens per Sec: 12859.050194266361
Epoch Step: 55 / 138 Loss: 15.088066101074219 Tokens per Sec: 12282.401452454891
Epoch Step: 60 / 138 Loss: 33.30466079711914 Tokens per Sec: 13027.87559232137
Epoch Step: 65 / 138 Loss: 18.860057830810547 Tokens per Sec: 12823.243810504453
Epoch Step: 70 / 138 Loss: 15.959920883178711 Tokens per Sec: 13635.194744716839
Epoch Step: 75 / 138 Loss: 18.96489715576172 Tokens per Sec: 12360.635299393094
Epoch Step: 80 / 138 Loss: 10.0242919921875 Tokens per Sec: 13452.075250669574
Epoch Step: 85 / 138 Loss: 18.955272674560547 Tokens per Sec: 13700.507318609996
Epoch Step: 90 / 138 Loss: 13.02934455871582 Tokens per Sec: 13449.374122947715
Epoch Step: 95 / 138 Loss: 17.171838760375977 Tokens per Sec: 12699.356258297861
Epoch Step: 100 / 138 Loss: 9.482288360595703 Tokens per Sec: 13048.779215042148
Epoch Step: 105 / 138 Loss: 14.79860782623291 Tokens per Sec: 12944.984210719602
Epoch Step: 110 / 138 Loss: 13.683941841125488 Tokens per Sec: 12610.049228773723
Epoch Step: 115 / 138 Loss: 119.83399200439453 Tokens per Sec: 12343.650814502596
Epoch Step: 120 / 138 Loss: 18.649150848388672 Tokens per Sec: 11854.387066131372
Epoch Step: 125 / 138 Loss: 21.422273635864258 Tokens per Sec: 12498.17275451194
Epoch Step: 130 / 138 Loss: 88.6755142211914 Tokens per Sec: 12554.113810298473
Epoch Step: 135 / 138 Loss: 16.67203712463379 Tokens per Sec: 12629.405482028962
Epoch ended with duration 0:00:49.037095
Train perplexity: 1.5010546444048312
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.910114
Validation perplexity: 1.450026824882741
Epoch 150 / 1000
Epoch Step: 5 / 138 Loss: 71.76213073730469 Tokens per Sec: 13260.15116018358
Epoch Step: 10 / 138 Loss: 14.785611152648926 Tokens per Sec: 13475.694361878113
Epoch Step: 15 / 138 Loss: 22.59954833984375 Tokens per Sec: 13950.806973032593
Epoch Step: 20 / 138 Loss: 11.690690040588379 Tokens per Sec: 13272.736260330657
Epoch Step: 25 / 138 Loss: 14.076523780822754 Tokens per Sec: 12349.869855181783
Epoch Step: 30 / 138 Loss: 19.735321044921875 Tokens per Sec: 13125.670355697566
Epoch Step: 35 / 138 Loss: 51.01334762573242 Tokens per Sec: 13361.007775662696
Epoch Step: 40 / 138 Loss: 9.934666633605957 Tokens per Sec: 13567.693621199303
Epoch Step: 45 / 138 Loss: 87.16215515136719 Tokens per Sec: 13169.149445470732
Epoch Step: 50 / 138 Loss: 9.150632858276367 Tokens per Sec: 14406.211992553284
Epoch Step: 55 / 138 Loss: 11.329381942749023 Tokens per Sec: 13270.937356882845
Epoch Step: 60 / 138 Loss: 16.118995666503906 Tokens per Sec: 12705.141387039532
Epoch Step: 65 / 138 Loss: 14.860640525817871 Tokens per Sec: 13187.497178489055
Epoch Step: 70 / 138 Loss: 21.678783416748047 Tokens per Sec: 13221.688275785657
Epoch Step: 75 / 138 Loss: 16.640907287597656 Tokens per Sec: 13173.164189084231
Epoch Step: 80 / 138 Loss: 18.276939392089844 Tokens per Sec: 12877.679476988733
Epoch Step: 85 / 138 Loss: 17.364696502685547 Tokens per Sec: 13671.566966456146
Epoch Step: 90 / 138 Loss: 16.707515716552734 Tokens per Sec: 13241.177395832738
Epoch Step: 95 / 138 Loss: 15.052337646484375 Tokens per Sec: 14162.923830786078
Epoch Step: 100 / 138 Loss: 15.491799354553223 Tokens per Sec: 13109.290226351613
Epoch Step: 105 / 138 Loss: 19.95567512512207 Tokens per Sec: 13150.40097967266
Epoch Step: 110 / 138 Loss: 16.180980682373047 Tokens per Sec: 12392.349162522689
Epoch Step: 115 / 138 Loss: 19.098798751831055 Tokens per Sec: 13287.0211934943
Epoch Step: 120 / 138 Loss: 136.18597412109375 Tokens per Sec: 12810.444810887555
Epoch Step: 125 / 138 Loss: 13.505605697631836 Tokens per Sec: 12705.710422134636
Epoch Step: 130 / 138 Loss: 13.176627159118652 Tokens per Sec: 12703.230122833778
Epoch Step: 135 / 138 Loss: 15.737343788146973 Tokens per Sec: 12836.844598180282
Epoch ended with duration 0:00:48.364705
Train perplexity: 1.4548277692239258
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.877802
Validation perplexity: 1.54593791377484
Model saved checkpoint!
Epoch 151 / 1000
Epoch Step: 5 / 138 Loss: 15.34638786315918 Tokens per Sec: 13934.72131216781
Epoch Step: 10 / 138 Loss: 8.653361320495605 Tokens per Sec: 13235.518813032775
Epoch Step: 15 / 138 Loss: 93.55165100097656 Tokens per Sec: 12961.048094078655
Epoch Step: 20 / 138 Loss: 13.433415412902832 Tokens per Sec: 13318.985808462648
Epoch Step: 25 / 138 Loss: 22.770732879638672 Tokens per Sec: 13643.907778660288
Epoch Step: 30 / 138 Loss: 20.132081985473633 Tokens per Sec: 12491.091084326703
Epoch Step: 35 / 138 Loss: 91.29261779785156 Tokens per Sec: 12776.030193856466
Epoch Step: 40 / 138 Loss: 16.54189682006836 Tokens per Sec: 13116.314211202907
Epoch Step: 45 / 138 Loss: 49.14129638671875 Tokens per Sec: 13132.922469170531
Epoch Step: 50 / 138 Loss: 17.559064865112305 Tokens per Sec: 13468.578288843739
Epoch Step: 55 / 138 Loss: 12.535479545593262 Tokens per Sec: 13575.494966649443
Epoch Step: 60 / 138 Loss: 20.3364315032959 Tokens per Sec: 13380.078009372637
Epoch Step: 65 / 138 Loss: 12.801737785339355 Tokens per Sec: 13748.744353491584
Epoch Step: 70 / 138 Loss: 15.39594841003418 Tokens per Sec: 14047.159677927613
Epoch Step: 75 / 138 Loss: 13.946440696716309 Tokens per Sec: 14139.714953604933
Epoch Step: 80 / 138 Loss: 20.102336883544922 Tokens per Sec: 13794.19154750402
Epoch Step: 85 / 138 Loss: 12.22684097290039 Tokens per Sec: 13375.00364674033
Epoch Step: 90 / 138 Loss: 10.758011817932129 Tokens per Sec: 14190.204705511609
Epoch Step: 95 / 138 Loss: 17.68804359436035 Tokens per Sec: 12748.309231572588
Epoch Step: 100 / 138 Loss: 18.654151916503906 Tokens per Sec: 13502.081492959938
Epoch Step: 105 / 138 Loss: 14.756390571594238 Tokens per Sec: 13114.490626639186
Epoch Step: 110 / 138 Loss: 19.34212303161621 Tokens per Sec: 13221.818633007686
Epoch Step: 115 / 138 Loss: 11.89915943145752 Tokens per Sec: 13029.373385513709
Epoch Step: 120 / 138 Loss: 17.14992904663086 Tokens per Sec: 12835.81216294493
Epoch Step: 125 / 138 Loss: 19.0791015625 Tokens per Sec: 12285.028655449716
Epoch Step: 130 / 138 Loss: 11.677008628845215 Tokens per Sec: 12983.942961876533
Epoch Step: 135 / 138 Loss: 11.55577564239502 Tokens per Sec: 12652.562768971984
Epoch ended with duration 0:00:48.101883
Train perplexity: 1.4005216039036572
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.854539
Validation perplexity: 1.420988805922805
Epoch 152 / 1000
Epoch Step: 5 / 138 Loss: 16.0379695892334 Tokens per Sec: 13591.253545138723
Epoch Step: 10 / 138 Loss: 16.71727752685547 Tokens per Sec: 12386.955978609256
Epoch Step: 15 / 138 Loss: 10.7486572265625 Tokens per Sec: 14002.755332677143
Epoch Step: 20 / 138 Loss: 151.86932373046875 Tokens per Sec: 13479.537532476157
Epoch Step: 25 / 138 Loss: 11.641993522644043 Tokens per Sec: 13545.448087069239
Epoch Step: 30 / 138 Loss: 9.724778175354004 Tokens per Sec: 13867.319534593285
Epoch Step: 35 / 138 Loss: 15.115696907043457 Tokens per Sec: 13895.122322337986
Epoch Step: 40 / 138 Loss: 9.199429512023926 Tokens per Sec: 13143.370494486453
Epoch Step: 45 / 138 Loss: 18.651613235473633 Tokens per Sec: 13132.285748285824
Epoch Step: 50 / 138 Loss: 14.623236656188965 Tokens per Sec: 13256.724188472279
Epoch Step: 55 / 138 Loss: 15.888541221618652 Tokens per Sec: 13697.104329620684
Epoch Step: 60 / 138 Loss: 14.090217590332031 Tokens per Sec: 13320.612576586742
Epoch Step: 65 / 138 Loss: 16.879356384277344 Tokens per Sec: 13416.559895244509
Epoch Step: 70 / 138 Loss: 14.377237319946289 Tokens per Sec: 12973.291696987586
Epoch Step: 75 / 138 Loss: 18.077682495117188 Tokens per Sec: 13630.11693826992
Epoch Step: 80 / 138 Loss: 18.043264389038086 Tokens per Sec: 13872.861083878455
Epoch Step: 85 / 138 Loss: 15.40036678314209 Tokens per Sec: 13488.672306882518
Epoch Step: 90 / 138 Loss: 19.3120059967041 Tokens per Sec: 13551.878764108393
Epoch Step: 95 / 138 Loss: 21.117298126220703 Tokens per Sec: 12700.55518983321
Epoch Step: 100 / 138 Loss: 19.038692474365234 Tokens per Sec: 13137.550039159602
Epoch Step: 105 / 138 Loss: 14.81488037109375 Tokens per Sec: 13251.190342065214
Epoch Step: 110 / 138 Loss: 14.735921859741211 Tokens per Sec: 13271.492288695665
Epoch Step: 115 / 138 Loss: 18.885940551757812 Tokens per Sec: 12792.831501080924
Epoch Step: 120 / 138 Loss: 12.057427406311035 Tokens per Sec: 13288.692189938154
Epoch Step: 125 / 138 Loss: 12.387212753295898 Tokens per Sec: 12838.65212024518
Epoch Step: 130 / 138 Loss: 16.878360748291016 Tokens per Sec: 13535.584363807873
Epoch Step: 135 / 138 Loss: 14.602484703063965 Tokens per Sec: 12380.53767907502
Epoch ended with duration 0:00:47.945595
Train perplexity: 1.3856380959838184
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.919331
Validation perplexity: 1.738916192052287
Epoch 153 / 1000
Epoch Step: 5 / 138 Loss: 14.378215789794922 Tokens per Sec: 13523.41475980679
Epoch Step: 10 / 138 Loss: 13.333096504211426 Tokens per Sec: 13782.735385679696
Epoch Step: 15 / 138 Loss: 13.424731254577637 Tokens per Sec: 13702.80832559107
Epoch Step: 20 / 138 Loss: 12.007461547851562 Tokens per Sec: 13973.589189536786
Epoch Step: 25 / 138 Loss: 10.53394889831543 Tokens per Sec: 13420.77205531825
Epoch Step: 30 / 138 Loss: 14.28571891784668 Tokens per Sec: 13970.844786683405
Epoch Step: 35 / 138 Loss: 18.654186248779297 Tokens per Sec: 13163.440103672354
Epoch Step: 40 / 138 Loss: 13.896293640136719 Tokens per Sec: 13237.582041935302
Epoch Step: 45 / 138 Loss: 12.107077598571777 Tokens per Sec: 13653.898423797493
Epoch Step: 50 / 138 Loss: 14.127278327941895 Tokens per Sec: 13196.824073415604
Epoch Step: 55 / 138 Loss: 183.27276611328125 Tokens per Sec: 13307.534595974017
Epoch Step: 60 / 138 Loss: 9.334210395812988 Tokens per Sec: 13821.946233831208
Epoch Step: 65 / 138 Loss: 19.218820571899414 Tokens per Sec: 12789.328402449994
Epoch Step: 70 / 138 Loss: 21.388017654418945 Tokens per Sec: 13693.78598955369
Epoch Step: 75 / 138 Loss: 10.023550987243652 Tokens per Sec: 12898.602940925255
Epoch Step: 80 / 138 Loss: 11.452938079833984 Tokens per Sec: 14093.413154069878
Epoch Step: 85 / 138 Loss: 12.402688980102539 Tokens per Sec: 13191.579170530422
Epoch Step: 90 / 138 Loss: 95.65885925292969 Tokens per Sec: 13561.700255082937
Epoch Step: 95 / 138 Loss: 14.650643348693848 Tokens per Sec: 13567.659385877949
Epoch Step: 100 / 138 Loss: 17.32732391357422 Tokens per Sec: 13107.68312432129
Epoch Step: 105 / 138 Loss: 12.989426612854004 Tokens per Sec: 11650.867951917755
Epoch Step: 110 / 138 Loss: 17.07752799987793 Tokens per Sec: 13021.727459937474
Epoch Step: 115 / 138 Loss: 12.574901580810547 Tokens per Sec: 12867.274315150195
Epoch Step: 120 / 138 Loss: 79.46800994873047 Tokens per Sec: 12605.149067256876
Epoch Step: 125 / 138 Loss: 18.649564743041992 Tokens per Sec: 13318.33872968575
Epoch Step: 130 / 138 Loss: 17.425762176513672 Tokens per Sec: 12812.35402695203
Epoch Step: 135 / 138 Loss: 14.542396545410156 Tokens per Sec: 13668.369547129732
Epoch ended with duration 0:00:47.885012
Train perplexity: 1.3540946823141282
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , , ) ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.928785
Validation perplexity: 1.773926238142219
Epoch 154 / 1000
Epoch Step: 5 / 138 Loss: 9.821893692016602 Tokens per Sec: 13263.825602572802
Epoch Step: 10 / 138 Loss: 22.094192504882812 Tokens per Sec: 13018.352577516825
Epoch Step: 15 / 138 Loss: 14.699548721313477 Tokens per Sec: 13506.111113767236
Epoch Step: 20 / 138 Loss: 18.793655395507812 Tokens per Sec: 13404.66289303334
Epoch Step: 25 / 138 Loss: 9.508225440979004 Tokens per Sec: 13548.046430488143
Epoch Step: 30 / 138 Loss: 20.313886642456055 Tokens per Sec: 13917.143650680107
Epoch Step: 35 / 138 Loss: 19.93790054321289 Tokens per Sec: 13046.425663062115
Epoch Step: 40 / 138 Loss: 19.6636962890625 Tokens per Sec: 12824.810639829971
Epoch Step: 45 / 138 Loss: 12.450608253479004 Tokens per Sec: 14321.676808591
Epoch Step: 50 / 138 Loss: 14.86264705657959 Tokens per Sec: 13730.692906531141
Epoch Step: 55 / 138 Loss: 13.086445808410645 Tokens per Sec: 12944.604540664477
Epoch Step: 60 / 138 Loss: 14.452055931091309 Tokens per Sec: 13234.17250676423
Epoch Step: 65 / 138 Loss: 15.614161491394043 Tokens per Sec: 13507.21405511947
Epoch Step: 70 / 138 Loss: 10.99620532989502 Tokens per Sec: 13696.776039108649
Epoch Step: 75 / 138 Loss: 7.245554447174072 Tokens per Sec: 13192.54661635431
Epoch Step: 80 / 138 Loss: 17.67368507385254 Tokens per Sec: 13213.437175397681
Epoch Step: 85 / 138 Loss: 120.01201629638672 Tokens per Sec: 13633.646563308754
Epoch Step: 90 / 138 Loss: 11.594220161437988 Tokens per Sec: 14048.24473690126
Epoch Step: 95 / 138 Loss: 11.443318367004395 Tokens per Sec: 13536.359394494348
Epoch Step: 100 / 138 Loss: 16.279767990112305 Tokens per Sec: 13300.379592163983
Epoch Step: 105 / 138 Loss: 16.860286712646484 Tokens per Sec: 12901.62850987693
Epoch Step: 110 / 138 Loss: 17.636032104492188 Tokens per Sec: 13240.0142446778
Epoch Step: 115 / 138 Loss: 16.93153953552246 Tokens per Sec: 11947.455300551064
Epoch Step: 120 / 138 Loss: 13.255105018615723 Tokens per Sec: 13432.69063839533
Epoch Step: 125 / 138 Loss: 13.692337036132812 Tokens per Sec: 13469.965217134568
Epoch Step: 130 / 138 Loss: 11.571606636047363 Tokens per Sec: 12694.562256916703
Epoch Step: 135 / 138 Loss: 16.20516586303711 Tokens per Sec: 13442.110413476816
Epoch ended with duration 0:00:47.877463
Train perplexity: 1.3237471610967733
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.850209
Validation perplexity: 1.4429611781151765
Epoch 155 / 1000
Epoch Step: 5 / 138 Loss: 14.84948444366455 Tokens per Sec: 13085.988961677327
Epoch Step: 10 / 138 Loss: 16.35093116760254 Tokens per Sec: 13129.908319716826
Epoch Step: 15 / 138 Loss: 19.23979949951172 Tokens per Sec: 13204.395476998001
Epoch Step: 20 / 138 Loss: 16.282997131347656 Tokens per Sec: 13621.563671507558
Epoch Step: 25 / 138 Loss: 75.51342010498047 Tokens per Sec: 12949.770142315569
Epoch Step: 30 / 138 Loss: 14.197500228881836 Tokens per Sec: 13723.043468353479
Epoch Step: 35 / 138 Loss: 10.58479118347168 Tokens per Sec: 12880.231715524897
Epoch Step: 40 / 138 Loss: 14.781526565551758 Tokens per Sec: 14115.546737279958
Epoch Step: 45 / 138 Loss: 9.320335388183594 Tokens per Sec: 13425.837315782677
Epoch Step: 50 / 138 Loss: 9.720052719116211 Tokens per Sec: 13624.702151318164
Epoch Step: 55 / 138 Loss: 10.441863059997559 Tokens per Sec: 14089.34006458761
Epoch Step: 60 / 138 Loss: 99.40502166748047 Tokens per Sec: 13250.986741271237
Epoch Step: 65 / 138 Loss: 10.868443489074707 Tokens per Sec: 13228.743127572125
Epoch Step: 70 / 138 Loss: 11.370953559875488 Tokens per Sec: 13705.527843363872
Epoch Step: 75 / 138 Loss: 12.335350036621094 Tokens per Sec: 13546.120592843992
Epoch Step: 80 / 138 Loss: 18.693923950195312 Tokens per Sec: 13564.414857490865
Epoch Step: 85 / 138 Loss: 151.18104553222656 Tokens per Sec: 13714.980806027681
Epoch Step: 90 / 138 Loss: 28.135841369628906 Tokens per Sec: 12906.93312309359
Epoch Step: 95 / 138 Loss: 22.96713638305664 Tokens per Sec: 12965.783152680575
Epoch Step: 100 / 138 Loss: 13.392305374145508 Tokens per Sec: 13096.609846316445
Epoch Step: 105 / 138 Loss: 14.059259414672852 Tokens per Sec: 12996.56629483764
Epoch Step: 110 / 138 Loss: 133.09910583496094 Tokens per Sec: 11740.901207345485
Epoch Step: 115 / 138 Loss: 14.020378112792969 Tokens per Sec: 13028.944228835533
Epoch Step: 120 / 138 Loss: 10.564983367919922 Tokens per Sec: 13083.287371110848
Epoch Step: 125 / 138 Loss: 17.797351837158203 Tokens per Sec: 13356.217340202884
Epoch Step: 130 / 138 Loss: 18.95624542236328 Tokens per Sec: 12966.528457079328
Epoch Step: 135 / 138 Loss: 15.286017417907715 Tokens per Sec: 13211.75048885074
Epoch ended with duration 0:00:48.173183
Train perplexity: 1.4079918194998418
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:03.853365
Validation perplexity: 1.471168507400002
Model saved checkpoint!
Epoch 156 / 1000
Epoch Step: 5 / 138 Loss: 15.960368156433105 Tokens per Sec: 13199.12559445846
Epoch Step: 10 / 138 Loss: 15.214000701904297 Tokens per Sec: 12411.206076992241
Epoch Step: 15 / 138 Loss: 50.523651123046875 Tokens per Sec: 12916.205075503913
Epoch Step: 20 / 138 Loss: 9.295714378356934 Tokens per Sec: 13069.361425928973
Epoch Step: 25 / 138 Loss: 16.829315185546875 Tokens per Sec: 13636.008044216198
Epoch Step: 30 / 138 Loss: 114.56731414794922 Tokens per Sec: 13563.526992785028
Epoch Step: 35 / 138 Loss: 96.5544662475586 Tokens per Sec: 13311.71013079918
Epoch Step: 40 / 138 Loss: 10.44725227355957 Tokens per Sec: 13672.635196560546
Epoch Step: 45 / 138 Loss: 17.787391662597656 Tokens per Sec: 13324.859135703839
Epoch Step: 50 / 138 Loss: 15.688909530639648 Tokens per Sec: 13876.96077167938
Epoch Step: 55 / 138 Loss: 10.266453742980957 Tokens per Sec: 14053.393600723486
Epoch Step: 60 / 138 Loss: 11.202709197998047 Tokens per Sec: 13140.257614789409
Epoch Step: 65 / 138 Loss: 11.230459213256836 Tokens per Sec: 13438.563052531848
Epoch Step: 70 / 138 Loss: 17.612350463867188 Tokens per Sec: 13433.447264626742
Epoch Step: 75 / 138 Loss: 8.027740478515625 Tokens per Sec: 13106.843263893988
Epoch Step: 80 / 138 Loss: 9.376558303833008 Tokens per Sec: 14116.401606567633
Epoch Step: 85 / 138 Loss: 9.214207649230957 Tokens per Sec: 13294.569797664388
Epoch Step: 90 / 138 Loss: 9.839153289794922 Tokens per Sec: 13358.889655907009
Epoch Step: 95 / 138 Loss: 18.776025772094727 Tokens per Sec: 13770.632644523026
Epoch Step: 100 / 138 Loss: 15.626916885375977 Tokens per Sec: 13544.019957433788
Epoch Step: 105 / 138 Loss: 13.40740966796875 Tokens per Sec: 12347.537277887888
Epoch Step: 110 / 138 Loss: 10.022768020629883 Tokens per Sec: 13463.490025642865
Epoch Step: 115 / 138 Loss: 98.35332489013672 Tokens per Sec: 13052.42608667605
Epoch Step: 120 / 138 Loss: 17.045251846313477 Tokens per Sec: 12823.2790467163
Epoch Step: 125 / 138 Loss: 11.406876564025879 Tokens per Sec: 13250.386123135975
Epoch Step: 130 / 138 Loss: 11.248357772827148 Tokens per Sec: 13066.276468375008
Epoch Step: 135 / 138 Loss: 13.931807518005371 Tokens per Sec: 12185.92679513097
Epoch ended with duration 0:00:48.069700
Train perplexity: 1.382524492145976
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) . METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.875038
Validation perplexity: 1.5245016670460723
Epoch 157 / 1000
Epoch Step: 5 / 138 Loss: 8.158639907836914 Tokens per Sec: 13362.429766242105
Epoch Step: 10 / 138 Loss: 14.751188278198242 Tokens per Sec: 13618.187804876214
Epoch Step: 15 / 138 Loss: 13.224562644958496 Tokens per Sec: 12742.976942053956
Epoch Step: 20 / 138 Loss: 14.762173652648926 Tokens per Sec: 13134.878098567067
Epoch Step: 25 / 138 Loss: 99.7225112915039 Tokens per Sec: 13062.556335442217
Epoch Step: 30 / 138 Loss: 17.049072265625 Tokens per Sec: 13416.966956167422
Epoch Step: 35 / 138 Loss: 10.267498970031738 Tokens per Sec: 14081.110959172736
Epoch Step: 40 / 138 Loss: 8.161819458007812 Tokens per Sec: 13563.228504421995
Epoch Step: 45 / 138 Loss: 16.49945831298828 Tokens per Sec: 13350.109533781095
Epoch Step: 50 / 138 Loss: 13.638864517211914 Tokens per Sec: 14344.51924712126
Epoch Step: 55 / 138 Loss: 11.22175407409668 Tokens per Sec: 13490.207279130527
Epoch Step: 60 / 138 Loss: 71.5937271118164 Tokens per Sec: 13912.514258909023
Epoch Step: 65 / 138 Loss: 13.121554374694824 Tokens per Sec: 12859.548299185013
Epoch Step: 70 / 138 Loss: 12.115861892700195 Tokens per Sec: 12994.095712328282
Epoch Step: 75 / 138 Loss: 18.15210723876953 Tokens per Sec: 13340.547490127534
Epoch Step: 80 / 138 Loss: 13.773517608642578 Tokens per Sec: 13837.17782810253
Epoch Step: 85 / 138 Loss: 10.131994247436523 Tokens per Sec: 14059.364430528945
Epoch Step: 90 / 138 Loss: 11.94015121459961 Tokens per Sec: 13904.978638105178
Epoch Step: 95 / 138 Loss: 12.818662643432617 Tokens per Sec: 12980.959311693081
Epoch Step: 100 / 138 Loss: 16.277498245239258 Tokens per Sec: 13304.719207393224
Epoch Step: 105 / 138 Loss: 116.22341918945312 Tokens per Sec: 12289.372169788145
Epoch Step: 110 / 138 Loss: 19.27499008178711 Tokens per Sec: 12943.842477620736
Epoch Step: 115 / 138 Loss: 11.683515548706055 Tokens per Sec: 13351.06832737512
Epoch Step: 120 / 138 Loss: 14.143619537353516 Tokens per Sec: 13021.349296831764
Epoch Step: 125 / 138 Loss: 80.03855895996094 Tokens per Sec: 11960.163567953929
Epoch Step: 130 / 138 Loss: 11.840991973876953 Tokens per Sec: 13375.55525192179
Epoch Step: 135 / 138 Loss: 15.2598237991333 Tokens per Sec: 13030.84526470706
Epoch ended with duration 0:00:47.972154
Train perplexity: 1.3345420158249235
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.857573
Validation perplexity: 1.44252015043983
Epoch 158 / 1000
Epoch Step: 5 / 138 Loss: 15.913321495056152 Tokens per Sec: 13017.924957741892
Epoch Step: 10 / 138 Loss: 17.144805908203125 Tokens per Sec: 13562.61619758068
Epoch Step: 15 / 138 Loss: 95.29856872558594 Tokens per Sec: 13470.569037253601
Epoch Step: 20 / 138 Loss: 18.755138397216797 Tokens per Sec: 13131.740482337087
Epoch Step: 25 / 138 Loss: 14.606996536254883 Tokens per Sec: 12628.978052978113
Epoch Step: 30 / 138 Loss: 19.19411277770996 Tokens per Sec: 13023.989050457138
Epoch Step: 35 / 138 Loss: 17.34469223022461 Tokens per Sec: 13744.819589582212
Epoch Step: 40 / 138 Loss: 15.060554504394531 Tokens per Sec: 13369.223421493127
Epoch Step: 45 / 138 Loss: 9.98574447631836 Tokens per Sec: 13449.727005735698
Epoch Step: 50 / 138 Loss: 23.929073333740234 Tokens per Sec: 13312.492823924666
Epoch Step: 55 / 138 Loss: 14.397602081298828 Tokens per Sec: 13817.855103879947
Epoch Step: 60 / 138 Loss: 10.984841346740723 Tokens per Sec: 13446.601020754377
Epoch Step: 65 / 138 Loss: 11.272981643676758 Tokens per Sec: 13401.003713364003
Epoch Step: 70 / 138 Loss: 18.850683212280273 Tokens per Sec: 14001.402700857887
Epoch Step: 75 / 138 Loss: 21.27506446838379 Tokens per Sec: 13557.165730656918
Epoch Step: 80 / 138 Loss: 14.945541381835938 Tokens per Sec: 12745.194744853437
Epoch Step: 85 / 138 Loss: 11.04832935333252 Tokens per Sec: 13216.610180286445
Epoch Step: 90 / 138 Loss: 13.058589935302734 Tokens per Sec: 14065.192165544066
Epoch Step: 95 / 138 Loss: 159.8284912109375 Tokens per Sec: 13635.495388022875
Epoch Step: 100 / 138 Loss: 21.380327224731445 Tokens per Sec: 12852.123944253995
Epoch Step: 105 / 138 Loss: 16.223731994628906 Tokens per Sec: 12152.461379489938
Epoch Step: 110 / 138 Loss: 21.183738708496094 Tokens per Sec: 13325.874949619678
Epoch Step: 115 / 138 Loss: 14.8336763381958 Tokens per Sec: 13234.552582420229
Epoch Step: 120 / 138 Loss: 19.532665252685547 Tokens per Sec: 12001.4452465925
Epoch Step: 125 / 138 Loss: 16.18556785583496 Tokens per Sec: 13233.481364124362
Epoch Step: 130 / 138 Loss: 11.01795482635498 Tokens per Sec: 12986.23851164123
Epoch Step: 135 / 138 Loss: 15.335925102233887 Tokens per Sec: 13330.603054945503
Epoch ended with duration 0:00:48.162982
Train perplexity: 1.4456757083109455
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.904277
Validation perplexity: 1.529233016284174
Epoch 159 / 1000
Epoch Step: 5 / 138 Loss: 8.894668579101562 Tokens per Sec: 13915.907933604562
Epoch Step: 10 / 138 Loss: 14.236284255981445 Tokens per Sec: 13569.94548861475
Epoch Step: 15 / 138 Loss: 11.52346134185791 Tokens per Sec: 13580.64068108916
Epoch Step: 20 / 138 Loss: 11.734931945800781 Tokens per Sec: 14459.369712117208
Epoch Step: 25 / 138 Loss: 12.391057968139648 Tokens per Sec: 12368.669951325941
Epoch Step: 30 / 138 Loss: 19.61285972595215 Tokens per Sec: 12729.854255388876
Epoch Step: 35 / 138 Loss: 13.641636848449707 Tokens per Sec: 12637.559625195983
Epoch Step: 40 / 138 Loss: 13.096001625061035 Tokens per Sec: 13511.189974020575
Epoch Step: 45 / 138 Loss: 17.851398468017578 Tokens per Sec: 13371.406415551071
Epoch Step: 50 / 138 Loss: 14.272775650024414 Tokens per Sec: 13569.141756852587
Epoch Step: 55 / 138 Loss: 144.48744201660156 Tokens per Sec: 12782.338733049231
Epoch Step: 60 / 138 Loss: 13.953377723693848 Tokens per Sec: 13924.110807015477
Epoch Step: 65 / 138 Loss: 18.438087463378906 Tokens per Sec: 13564.532024225175
Epoch Step: 70 / 138 Loss: 13.285650253295898 Tokens per Sec: 13215.488731763195
Epoch Step: 75 / 138 Loss: 12.381327629089355 Tokens per Sec: 13982.023798280312
Epoch Step: 80 / 138 Loss: 18.554988861083984 Tokens per Sec: 13271.7812042292
Epoch Step: 85 / 138 Loss: 12.106340408325195 Tokens per Sec: 13133.686978222748
Epoch Step: 90 / 138 Loss: 12.970755577087402 Tokens per Sec: 14031.52491897466
Epoch Step: 95 / 138 Loss: 14.134946823120117 Tokens per Sec: 13916.310920525406
Epoch Step: 100 / 138 Loss: 12.333059310913086 Tokens per Sec: 12108.092581118184
Epoch Step: 105 / 138 Loss: 13.018682479858398 Tokens per Sec: 13310.710395823275
Epoch Step: 110 / 138 Loss: 11.818341255187988 Tokens per Sec: 13024.019392752063
Epoch Step: 115 / 138 Loss: 13.499375343322754 Tokens per Sec: 13226.182282301239
Epoch Step: 120 / 138 Loss: 12.354985237121582 Tokens per Sec: 13121.620296940891
Epoch Step: 125 / 138 Loss: 17.680192947387695 Tokens per Sec: 11821.634271119958
Epoch Step: 130 / 138 Loss: 158.9048614501953 Tokens per Sec: 13041.443659966033
Epoch Step: 135 / 138 Loss: 25.059598922729492 Tokens per Sec: 12702.45551095942
Epoch ended with duration 0:00:48.133440
Train perplexity: 1.4047236032135475
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } }[0m
Epoch ended with duration 0:00:03.945685
Validation perplexity: 1.8347287182446044
Epoch 160 / 1000
Epoch Step: 5 / 138 Loss: 16.264514923095703 Tokens per Sec: 13983.59318231214
Epoch Step: 10 / 138 Loss: 9.62026309967041 Tokens per Sec: 13024.319634340904
Epoch Step: 15 / 138 Loss: 10.279399871826172 Tokens per Sec: 12863.872336045635
Epoch Step: 20 / 138 Loss: 14.53676700592041 Tokens per Sec: 13590.025064770509
Epoch Step: 25 / 138 Loss: 64.43758392333984 Tokens per Sec: 14042.828971473898
Epoch Step: 30 / 138 Loss: 19.81083869934082 Tokens per Sec: 13469.727583700835
Epoch Step: 35 / 138 Loss: 15.251138687133789 Tokens per Sec: 13200.302673571328
Epoch Step: 40 / 138 Loss: 10.373452186584473 Tokens per Sec: 13827.869990847686
Epoch Step: 45 / 138 Loss: 8.33169937133789 Tokens per Sec: 13664.432959216349
Epoch Step: 50 / 138 Loss: 13.0053129196167 Tokens per Sec: 12956.789424526985
Epoch Step: 55 / 138 Loss: 11.827475547790527 Tokens per Sec: 14004.43969432439
Epoch Step: 60 / 138 Loss: 8.709126472473145 Tokens per Sec: 13710.96086777181
Epoch Step: 65 / 138 Loss: 15.169358253479004 Tokens per Sec: 12540.270854063147
Epoch Step: 70 / 138 Loss: 7.549668312072754 Tokens per Sec: 13816.847904187376
Epoch Step: 75 / 138 Loss: 12.150405883789062 Tokens per Sec: 13601.830832791497
Epoch Step: 80 / 138 Loss: 12.554898262023926 Tokens per Sec: 13069.984701551562
Epoch Step: 85 / 138 Loss: 15.86008071899414 Tokens per Sec: 13495.083266748134
Epoch Step: 90 / 138 Loss: 16.220712661743164 Tokens per Sec: 12803.144674398545
Epoch Step: 95 / 138 Loss: 9.123215675354004 Tokens per Sec: 13977.802346541002
Epoch Step: 100 / 138 Loss: 19.214963912963867 Tokens per Sec: 13085.162851410132
Epoch Step: 105 / 138 Loss: 13.148491859436035 Tokens per Sec: 13052.648424374876
Epoch Step: 110 / 138 Loss: 11.354364395141602 Tokens per Sec: 12565.207321572665
Epoch Step: 115 / 138 Loss: 11.571795463562012 Tokens per Sec: 12441.516200182225
Epoch Step: 120 / 138 Loss: 10.013477325439453 Tokens per Sec: 12928.36899583028
Epoch Step: 125 / 138 Loss: 16.414878845214844 Tokens per Sec: 13273.14964576936
Epoch Step: 130 / 138 Loss: 12.222984313964844 Tokens per Sec: 13047.61934784796
Epoch Step: 135 / 138 Loss: 9.68815803527832 Tokens per Sec: 13282.620787552554
Epoch ended with duration 0:00:47.954834
Train perplexity: 1.3260263524662694
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.890466
Validation perplexity: 1.62725064910993
Model saved checkpoint!
Epoch 161 / 1000
Epoch Step: 5 / 138 Loss: 17.072002410888672 Tokens per Sec: 12361.692223597978
Epoch Step: 10 / 138 Loss: 15.809073448181152 Tokens per Sec: 13580.780719455688
Epoch Step: 15 / 138 Loss: 9.76305866241455 Tokens per Sec: 14373.762429691
Epoch Step: 20 / 138 Loss: 17.121431350708008 Tokens per Sec: 13122.743935132068
Epoch Step: 25 / 138 Loss: 15.575910568237305 Tokens per Sec: 13710.187234333465
Epoch Step: 30 / 138 Loss: 10.199748992919922 Tokens per Sec: 13084.516202031089
Epoch Step: 35 / 138 Loss: 17.321651458740234 Tokens per Sec: 13242.456563247011
Epoch Step: 40 / 138 Loss: 129.916748046875 Tokens per Sec: 13483.92914479821
Epoch Step: 45 / 138 Loss: 14.379661560058594 Tokens per Sec: 14154.305100559779
Epoch Step: 50 / 138 Loss: 11.758803367614746 Tokens per Sec: 13632.063926850853
Epoch Step: 55 / 138 Loss: 9.386059761047363 Tokens per Sec: 13279.354727329233
Epoch Step: 60 / 138 Loss: 13.143227577209473 Tokens per Sec: 13363.362932836357
Epoch Step: 65 / 138 Loss: 14.087450981140137 Tokens per Sec: 13762.084096352204
Epoch Step: 70 / 138 Loss: 9.79239559173584 Tokens per Sec: 14067.425261603747
Epoch Step: 75 / 138 Loss: 14.853500366210938 Tokens per Sec: 13590.457463913343
Epoch Step: 80 / 138 Loss: 17.355911254882812 Tokens per Sec: 13012.754783049371
Epoch Step: 85 / 138 Loss: 8.573042869567871 Tokens per Sec: 13045.462338320844
Epoch Step: 90 / 138 Loss: 14.84526252746582 Tokens per Sec: 13867.969554124522
Epoch Step: 95 / 138 Loss: 11.084624290466309 Tokens per Sec: 13456.77788623904
Epoch Step: 100 / 138 Loss: 8.907289505004883 Tokens per Sec: 13416.450994408893
Epoch Step: 105 / 138 Loss: 15.828811645507812 Tokens per Sec: 13420.249045493023
Epoch Step: 110 / 138 Loss: 8.225767135620117 Tokens per Sec: 12944.770956964214
Epoch Step: 115 / 138 Loss: 13.165736198425293 Tokens per Sec: 12915.2322111025
Epoch Step: 120 / 138 Loss: 17.21197509765625 Tokens per Sec: 12526.14250551074
Epoch Step: 125 / 138 Loss: 15.992897033691406 Tokens per Sec: 13347.396606724289
Epoch Step: 130 / 138 Loss: 12.747296333312988 Tokens per Sec: 12962.959895707774
Epoch Step: 135 / 138 Loss: 14.034753799438477 Tokens per Sec: 12387.429760202895
Epoch ended with duration 0:00:47.892891
Train perplexity: 1.3025994839945665
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.895485
Validation perplexity: 1.4055025618681347
Epoch 162 / 1000
Epoch Step: 5 / 138 Loss: 8.254685401916504 Tokens per Sec: 13466.415783855788
Epoch Step: 10 / 138 Loss: 13.896415710449219 Tokens per Sec: 13087.905104855448
Epoch Step: 15 / 138 Loss: 130.05445861816406 Tokens per Sec: 13426.367979614739
Epoch Step: 20 / 138 Loss: 14.520702362060547 Tokens per Sec: 13501.480987252107
Epoch Step: 25 / 138 Loss: 12.817069053649902 Tokens per Sec: 13621.979191320128
Epoch Step: 30 / 138 Loss: 14.946731567382812 Tokens per Sec: 13549.697396747692
Epoch Step: 35 / 138 Loss: 8.412036895751953 Tokens per Sec: 13766.416417729955
Epoch Step: 40 / 138 Loss: 12.834572792053223 Tokens per Sec: 12980.868959770572
Epoch Step: 45 / 138 Loss: 16.1203670501709 Tokens per Sec: 13702.639348571462
Epoch Step: 50 / 138 Loss: 9.855643272399902 Tokens per Sec: 13066.059539089678
Epoch Step: 55 / 138 Loss: 19.04364776611328 Tokens per Sec: 13769.148769809268
Epoch Step: 60 / 138 Loss: 55.13005065917969 Tokens per Sec: 12903.809055701093
Epoch Step: 65 / 138 Loss: 14.501724243164062 Tokens per Sec: 13412.233924654702
Epoch Step: 70 / 138 Loss: 7.6224284172058105 Tokens per Sec: 14040.285308964712
Epoch Step: 75 / 138 Loss: 13.974774360656738 Tokens per Sec: 13627.03964340725
Epoch Step: 80 / 138 Loss: 9.2051362991333 Tokens per Sec: 13701.021175544867
Epoch Step: 85 / 138 Loss: 22.883970260620117 Tokens per Sec: 13327.729141673395
Epoch Step: 90 / 138 Loss: 12.894458770751953 Tokens per Sec: 13655.698051808411
Epoch Step: 95 / 138 Loss: 15.459911346435547 Tokens per Sec: 13084.380018572152
Epoch Step: 100 / 138 Loss: 16.82779312133789 Tokens per Sec: 12935.116316804839
Epoch Step: 105 / 138 Loss: 10.730746269226074 Tokens per Sec: 12746.628701016854
Epoch Step: 110 / 138 Loss: 14.472024917602539 Tokens per Sec: 13247.112837624716
Epoch Step: 115 / 138 Loss: 12.459502220153809 Tokens per Sec: 13126.904037977076
Epoch Step: 120 / 138 Loss: 14.765571594238281 Tokens per Sec: 13275.542041657802
Epoch Step: 125 / 138 Loss: 13.58523941040039 Tokens per Sec: 12902.453520316452
Epoch Step: 130 / 138 Loss: 13.970842361450195 Tokens per Sec: 13068.83438008679
Epoch Step: 135 / 138 Loss: 16.028621673583984 Tokens per Sec: 12176.387371264871
Epoch ended with duration 0:00:47.958088
Train perplexity: 1.3163880029678672
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.884372
Validation perplexity: 1.5672545359831498
Epoch 163 / 1000
Epoch Step: 5 / 138 Loss: 9.785651206970215 Tokens per Sec: 12794.06717127748
Epoch Step: 10 / 138 Loss: 13.665898323059082 Tokens per Sec: 12920.039485989855
Epoch Step: 15 / 138 Loss: 12.722153663635254 Tokens per Sec: 13370.539466719383
Epoch Step: 20 / 138 Loss: 16.47708511352539 Tokens per Sec: 13760.226629682025
Epoch Step: 25 / 138 Loss: 12.521391868591309 Tokens per Sec: 13466.79954024554
Epoch Step: 30 / 138 Loss: 15.874597549438477 Tokens per Sec: 12953.343289429387
Epoch Step: 35 / 138 Loss: 143.96058654785156 Tokens per Sec: 13429.647740085149
Epoch Step: 40 / 138 Loss: 12.124879837036133 Tokens per Sec: 13178.175122960884
Epoch Step: 45 / 138 Loss: 38.483699798583984 Tokens per Sec: 13455.543055267899
Epoch Step: 50 / 138 Loss: 19.997028350830078 Tokens per Sec: 13655.372895444578
Epoch Step: 55 / 138 Loss: 25.214427947998047 Tokens per Sec: 14039.500301249298
Epoch Step: 60 / 138 Loss: 28.42861557006836 Tokens per Sec: 13606.345125676064
Epoch Step: 65 / 138 Loss: 10.403218269348145 Tokens per Sec: 13769.948259935814
Epoch Step: 70 / 138 Loss: 21.84431266784668 Tokens per Sec: 12802.775900511991
Epoch Step: 75 / 138 Loss: 15.164301872253418 Tokens per Sec: 14008.998471013896
Epoch Step: 80 / 138 Loss: 14.960707664489746 Tokens per Sec: 13744.61782026472
Epoch Step: 85 / 138 Loss: 12.467933654785156 Tokens per Sec: 12917.955914693672
Epoch Step: 90 / 138 Loss: 18.42279624938965 Tokens per Sec: 13334.141845922673
Epoch Step: 95 / 138 Loss: 20.636653900146484 Tokens per Sec: 13411.167206470744
Epoch Step: 100 / 138 Loss: 18.99612045288086 Tokens per Sec: 13346.00488297384
Epoch Step: 105 / 138 Loss: 94.5517807006836 Tokens per Sec: 12513.581760334142
Epoch Step: 110 / 138 Loss: 18.109188079833984 Tokens per Sec: 12541.388683138399
Epoch Step: 115 / 138 Loss: 149.62327575683594 Tokens per Sec: 12659.750354778327
Epoch Step: 120 / 138 Loss: 13.889762878417969 Tokens per Sec: 12982.974143608146
Epoch Step: 125 / 138 Loss: 13.211907386779785 Tokens per Sec: 12765.283302485977
Epoch Step: 130 / 138 Loss: 16.300073623657227 Tokens per Sec: 13424.264302749303
Epoch Step: 135 / 138 Loss: 13.056084632873535 Tokens per Sec: 12863.688002694837
Epoch ended with duration 0:00:48.162369
Train perplexity: 1.517601108854413
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.817307
Validation perplexity: 1.3143885994900957
Epoch 164 / 1000
Epoch Step: 5 / 138 Loss: 8.615904808044434 Tokens per Sec: 12877.066988769557
Epoch Step: 10 / 138 Loss: 10.062972068786621 Tokens per Sec: 13815.546891065953
Epoch Step: 15 / 138 Loss: 11.239161491394043 Tokens per Sec: 13610.35129597815
Epoch Step: 20 / 138 Loss: 15.345778465270996 Tokens per Sec: 13594.701749825377
Epoch Step: 25 / 138 Loss: 9.30815315246582 Tokens per Sec: 13306.399846429695
Epoch Step: 30 / 138 Loss: 17.000946044921875 Tokens per Sec: 13781.584991619544
Epoch Step: 35 / 138 Loss: 17.260324478149414 Tokens per Sec: 12861.38840399103
Epoch Step: 40 / 138 Loss: 119.34558868408203 Tokens per Sec: 13721.65635025863
Epoch Step: 45 / 138 Loss: 7.166293621063232 Tokens per Sec: 13622.44579310582
Epoch Step: 50 / 138 Loss: 20.579654693603516 Tokens per Sec: 13281.573248403856
Epoch Step: 55 / 138 Loss: 12.30992317199707 Tokens per Sec: 13582.415134661067
Epoch Step: 60 / 138 Loss: 14.66307258605957 Tokens per Sec: 14086.39265904161
Epoch Step: 65 / 138 Loss: 17.05800437927246 Tokens per Sec: 13294.681430364555
Epoch Step: 70 / 138 Loss: 9.158880233764648 Tokens per Sec: 13143.428830741534
Epoch Step: 75 / 138 Loss: 15.094276428222656 Tokens per Sec: 13033.199409142977
Epoch Step: 80 / 138 Loss: 10.939750671386719 Tokens per Sec: 13185.493394365489
Epoch Step: 85 / 138 Loss: 12.647093772888184 Tokens per Sec: 13448.340900341662
Epoch Step: 90 / 138 Loss: 11.553426742553711 Tokens per Sec: 13405.518974146955
Epoch Step: 95 / 138 Loss: 14.248626708984375 Tokens per Sec: 13841.83111775488
Epoch Step: 100 / 138 Loss: 7.980649948120117 Tokens per Sec: 13743.815461808634
Epoch Step: 105 / 138 Loss: 16.836017608642578 Tokens per Sec: 12419.454693198324
Epoch Step: 110 / 138 Loss: 15.871969223022461 Tokens per Sec: 13064.32815017618
Epoch Step: 115 / 138 Loss: 11.950796127319336 Tokens per Sec: 12504.831462396554
Epoch Step: 120 / 138 Loss: 15.488235473632812 Tokens per Sec: 12297.83734044497
Epoch Step: 125 / 138 Loss: 10.314435005187988 Tokens per Sec: 13489.217349766306
Epoch Step: 130 / 138 Loss: 12.520960807800293 Tokens per Sec: 13435.294904642271
Epoch Step: 135 / 138 Loss: 92.02960205078125 Tokens per Sec: 12111.044572388199
Epoch ended with duration 0:00:48.054214
Train perplexity: 1.3600854711323211
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.847699
Validation perplexity: 1.4294376410952685
Epoch 165 / 1000
Epoch Step: 5 / 138 Loss: 12.234755516052246 Tokens per Sec: 13503.550549883334
Epoch Step: 10 / 138 Loss: 10.07884407043457 Tokens per Sec: 12963.948732024055
Epoch Step: 15 / 138 Loss: 79.22130584716797 Tokens per Sec: 13251.008849960868
Epoch Step: 20 / 138 Loss: 20.400053024291992 Tokens per Sec: 13961.853980547292
Epoch Step: 25 / 138 Loss: 15.918028831481934 Tokens per Sec: 13696.588323438607
Epoch Step: 30 / 138 Loss: 10.701494216918945 Tokens per Sec: 13440.406453868944
Epoch Step: 35 / 138 Loss: 10.768806457519531 Tokens per Sec: 12696.280528857238
Epoch Step: 40 / 138 Loss: 14.086796760559082 Tokens per Sec: 13171.871179081389
Epoch Step: 45 / 138 Loss: 18.51972770690918 Tokens per Sec: 13593.73266757317
Epoch Step: 50 / 138 Loss: 15.388847351074219 Tokens per Sec: 13897.334482448476
Epoch Step: 55 / 138 Loss: 14.147013664245605 Tokens per Sec: 13040.33221528404
Epoch Step: 60 / 138 Loss: 9.271075248718262 Tokens per Sec: 13465.989738988386
Epoch Step: 65 / 138 Loss: 10.288780212402344 Tokens per Sec: 13113.935495298028
Epoch Step: 70 / 138 Loss: 14.935112953186035 Tokens per Sec: 13393.252119092931
Epoch Step: 75 / 138 Loss: 10.761344909667969 Tokens per Sec: 13828.6584787264
Epoch Step: 80 / 138 Loss: 10.82431697845459 Tokens per Sec: 13464.157386607683
Epoch Step: 85 / 138 Loss: 12.10501766204834 Tokens per Sec: 13722.36547699416
Epoch Step: 90 / 138 Loss: 10.09018325805664 Tokens per Sec: 13597.85194363395
Epoch Step: 95 / 138 Loss: 8.049242973327637 Tokens per Sec: 13986.409286590566
Epoch Step: 100 / 138 Loss: 16.33014488220215 Tokens per Sec: 13304.010643870735
Epoch Step: 105 / 138 Loss: 14.257734298706055 Tokens per Sec: 12208.714414710292
Epoch Step: 110 / 138 Loss: 96.14453887939453 Tokens per Sec: 13249.370056894686
Epoch Step: 115 / 138 Loss: 9.093542098999023 Tokens per Sec: 13035.605795061201
Epoch Step: 120 / 138 Loss: 12.859532356262207 Tokens per Sec: 13157.527070698969
Epoch Step: 125 / 138 Loss: 12.986686706542969 Tokens per Sec: 13184.0739103762
Epoch Step: 130 / 138 Loss: 9.696724891662598 Tokens per Sec: 12542.813876876964
Epoch Step: 135 / 138 Loss: 12.605537414550781 Tokens per Sec: 12163.507208614485
Epoch ended with duration 0:00:48.061227
Train perplexity: 1.3193021618876464
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.837343
Validation perplexity: 1.2778235196976169
Model saved best_on_validation!
Model saved checkpoint!
Epoch 166 / 1000
Epoch Step: 5 / 138 Loss: 6.488658905029297 Tokens per Sec: 13063.133036813464
Epoch Step: 10 / 138 Loss: 10.918350219726562 Tokens per Sec: 13445.954980451961
Epoch Step: 15 / 138 Loss: 9.458054542541504 Tokens per Sec: 12945.517942037624
Epoch Step: 20 / 138 Loss: 15.075921058654785 Tokens per Sec: 13467.356915967852
Epoch Step: 25 / 138 Loss: 14.738265991210938 Tokens per Sec: 13646.910287514975
Epoch Step: 30 / 138 Loss: 7.496598720550537 Tokens per Sec: 12902.892181759136
Epoch Step: 35 / 138 Loss: 14.16637897491455 Tokens per Sec: 13773.848545360008
Epoch Step: 40 / 138 Loss: 9.452462196350098 Tokens per Sec: 13610.830594467547
Epoch Step: 45 / 138 Loss: 9.345032691955566 Tokens per Sec: 13688.497363776309
Epoch Step: 50 / 138 Loss: 14.975761413574219 Tokens per Sec: 12921.203360877249
Epoch Step: 55 / 138 Loss: 10.137192726135254 Tokens per Sec: 13849.798216803707
Epoch Step: 60 / 138 Loss: 12.412138938903809 Tokens per Sec: 13646.61071388398
Epoch Step: 65 / 138 Loss: 14.816451072692871 Tokens per Sec: 12864.034589637246
Epoch Step: 70 / 138 Loss: 11.264430046081543 Tokens per Sec: 13380.814991240793
Epoch Step: 75 / 138 Loss: 18.476049423217773 Tokens per Sec: 13411.572938305602
Epoch Step: 80 / 138 Loss: 21.446434020996094 Tokens per Sec: 13509.8011089064
Epoch Step: 85 / 138 Loss: 20.73082160949707 Tokens per Sec: 13524.473548735647
Epoch Step: 90 / 138 Loss: 17.881397247314453 Tokens per Sec: 13698.948896192955
Epoch Step: 95 / 138 Loss: 6.926673412322998 Tokens per Sec: 13572.770771942818
Epoch Step: 100 / 138 Loss: 11.274855613708496 Tokens per Sec: 13818.359661150775
Epoch Step: 105 / 138 Loss: 11.155110359191895 Tokens per Sec: 12640.82869031245
Epoch Step: 110 / 138 Loss: 17.545000076293945 Tokens per Sec: 12928.298762014341
Epoch Step: 115 / 138 Loss: 135.5064239501953 Tokens per Sec: 12504.937765950925
Epoch Step: 120 / 138 Loss: 15.031590461730957 Tokens per Sec: 12272.40448180413
Epoch Step: 125 / 138 Loss: 14.721587181091309 Tokens per Sec: 12110.908568498484
Epoch Step: 130 / 138 Loss: 14.184955596923828 Tokens per Sec: 13086.123654102761
Epoch Step: 135 / 138 Loss: 14.87452507019043 Tokens per Sec: 13431.45195756387
Epoch ended with duration 0:00:48.118204
Train perplexity: 1.3947516139488483
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.825426
Validation perplexity: 1.3389141774930031
Epoch 167 / 1000
Epoch Step: 5 / 138 Loss: 20.62955665588379 Tokens per Sec: 13256.26629812919
Epoch Step: 10 / 138 Loss: 10.767803192138672 Tokens per Sec: 12969.504325598002
Epoch Step: 15 / 138 Loss: 126.02567291259766 Tokens per Sec: 13271.77143814519
Epoch Step: 20 / 138 Loss: 12.7589693069458 Tokens per Sec: 13131.307991221403
Epoch Step: 25 / 138 Loss: 12.5149507522583 Tokens per Sec: 13651.462806786602
Epoch Step: 30 / 138 Loss: 8.220538139343262 Tokens per Sec: 13775.353020057797
Epoch Step: 35 / 138 Loss: 10.917792320251465 Tokens per Sec: 13816.022665220722
Epoch Step: 40 / 138 Loss: 11.682415962219238 Tokens per Sec: 12864.61875111842
Epoch Step: 45 / 138 Loss: 20.418493270874023 Tokens per Sec: 12789.083979723038
Epoch Step: 50 / 138 Loss: 18.844253540039062 Tokens per Sec: 13468.00763744275
Epoch Step: 55 / 138 Loss: 15.818439483642578 Tokens per Sec: 13278.758616586152
Epoch Step: 60 / 138 Loss: 8.03333854675293 Tokens per Sec: 14055.927017264763
Epoch Step: 65 / 138 Loss: 144.42095947265625 Tokens per Sec: 13662.855375758023
Epoch Step: 70 / 138 Loss: 13.423391342163086 Tokens per Sec: 14008.913949341808
Epoch Step: 75 / 138 Loss: 14.625852584838867 Tokens per Sec: 13342.668891023188
Epoch Step: 80 / 138 Loss: 13.03309154510498 Tokens per Sec: 13325.523026392051
Epoch Step: 85 / 138 Loss: 94.51809692382812 Tokens per Sec: 12772.066794356919
Epoch Step: 90 / 138 Loss: 11.231582641601562 Tokens per Sec: 13687.076148133128
Epoch Step: 95 / 138 Loss: 8.24265193939209 Tokens per Sec: 13225.018129836064
Epoch Step: 100 / 138 Loss: 10.807653427124023 Tokens per Sec: 13535.9204766963
Epoch Step: 105 / 138 Loss: 11.305193901062012 Tokens per Sec: 13352.533262108342
Epoch Step: 110 / 138 Loss: 14.8723726272583 Tokens per Sec: 12041.87668632724
Epoch Step: 115 / 138 Loss: 13.214911460876465 Tokens per Sec: 13018.252660862077
Epoch Step: 120 / 138 Loss: 20.009010314941406 Tokens per Sec: 13195.62067550467
Epoch Step: 125 / 138 Loss: 10.168169021606445 Tokens per Sec: 13004.558545605449
Epoch Step: 130 / 138 Loss: 12.672351837158203 Tokens per Sec: 12444.683835315858
Epoch Step: 135 / 138 Loss: 11.730445861816406 Tokens per Sec: 12864.230011337038
Epoch ended with duration 0:00:48.197174
Train perplexity: 1.412243074775482
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.903930
Validation perplexity: 1.559439839106163
Epoch 168 / 1000
Epoch Step: 5 / 138 Loss: 12.815399169921875 Tokens per Sec: 13358.710997649483
Epoch Step: 10 / 138 Loss: 21.383960723876953 Tokens per Sec: 14013.460676016079
Epoch Step: 15 / 138 Loss: 17.834962844848633 Tokens per Sec: 12817.200569812781
Epoch Step: 20 / 138 Loss: 17.94594955444336 Tokens per Sec: 13829.671951042741
Epoch Step: 25 / 138 Loss: 12.162908554077148 Tokens per Sec: 14130.360740374424
Epoch Step: 30 / 138 Loss: 12.513648986816406 Tokens per Sec: 13739.504168773628
Epoch Step: 35 / 138 Loss: 20.091392517089844 Tokens per Sec: 12483.849935681501
Epoch Step: 40 / 138 Loss: 18.49011993408203 Tokens per Sec: 13073.838437520531
Epoch Step: 45 / 138 Loss: 16.074310302734375 Tokens per Sec: 12798.27319384513
Epoch Step: 50 / 138 Loss: 20.00335121154785 Tokens per Sec: 12951.288882836745
Epoch Step: 55 / 138 Loss: 15.22608470916748 Tokens per Sec: 13646.999550041819
Epoch Step: 60 / 138 Loss: 9.507001876831055 Tokens per Sec: 13515.237215560272
Epoch Step: 65 / 138 Loss: 13.40196704864502 Tokens per Sec: 13709.99072573899
Epoch Step: 70 / 138 Loss: 14.06468391418457 Tokens per Sec: 13155.35339154731
Epoch Step: 75 / 138 Loss: 19.006183624267578 Tokens per Sec: 13112.63512666952
Epoch Step: 80 / 138 Loss: 9.330864906311035 Tokens per Sec: 13559.735379200849
Epoch Step: 85 / 138 Loss: 13.350976943969727 Tokens per Sec: 13426.684195213506
Epoch Step: 90 / 138 Loss: 18.58524513244629 Tokens per Sec: 13879.592624750041
Epoch Step: 95 / 138 Loss: 10.38828182220459 Tokens per Sec: 13619.934991595408
Epoch Step: 100 / 138 Loss: 9.751538276672363 Tokens per Sec: 13244.871080393588
Epoch Step: 105 / 138 Loss: 13.476371765136719 Tokens per Sec: 12802.160305873076
Epoch Step: 110 / 138 Loss: 14.819732666015625 Tokens per Sec: 13311.76201222781
Epoch Step: 115 / 138 Loss: 16.961894989013672 Tokens per Sec: 13387.863277719516
Epoch Step: 120 / 138 Loss: 12.858687400817871 Tokens per Sec: 12817.011601658416
Epoch Step: 125 / 138 Loss: 12.113917350769043 Tokens per Sec: 12156.647935102328
Epoch Step: 130 / 138 Loss: 12.692719459533691 Tokens per Sec: 12893.749306081936
Epoch Step: 135 / 138 Loss: 81.61007690429688 Tokens per Sec: 12748.579274756228
Epoch ended with duration 0:00:48.146178
Train perplexity: 1.3784031997072608
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.909739
Validation perplexity: 1.6457763188448884
Epoch 169 / 1000
Epoch Step: 5 / 138 Loss: 11.737265586853027 Tokens per Sec: 13285.959602687317
Epoch Step: 10 / 138 Loss: 15.02784252166748 Tokens per Sec: 13226.04436837423
Epoch Step: 15 / 138 Loss: 12.737306594848633 Tokens per Sec: 13374.260110812245
Epoch Step: 20 / 138 Loss: 12.261642456054688 Tokens per Sec: 14257.3384158429
Epoch Step: 25 / 138 Loss: 14.297613143920898 Tokens per Sec: 13198.745363490718
Epoch Step: 30 / 138 Loss: 11.206022262573242 Tokens per Sec: 13700.29641072773
Epoch Step: 35 / 138 Loss: 11.257928848266602 Tokens per Sec: 13829.431134925502
Epoch Step: 40 / 138 Loss: 15.611164093017578 Tokens per Sec: 13331.957557473303
Epoch Step: 45 / 138 Loss: 146.25047302246094 Tokens per Sec: 13607.735841943902
Epoch Step: 50 / 138 Loss: 8.664063453674316 Tokens per Sec: 13322.111527798746
Epoch Step: 55 / 138 Loss: 54.11558532714844 Tokens per Sec: 12980.717038775092
Epoch Step: 60 / 138 Loss: 41.94066619873047 Tokens per Sec: 12551.656623553285
Epoch Step: 65 / 138 Loss: 13.269658088684082 Tokens per Sec: 13463.777431359398
Epoch Step: 70 / 138 Loss: 15.725090026855469 Tokens per Sec: 13019.772267361086
Epoch Step: 75 / 138 Loss: 17.973594665527344 Tokens per Sec: 13144.170588855883
Epoch Step: 80 / 138 Loss: 15.433533668518066 Tokens per Sec: 13876.025069219952
Epoch Step: 85 / 138 Loss: 13.816136360168457 Tokens per Sec: 13610.36985585339
Epoch Step: 90 / 138 Loss: 97.12210845947266 Tokens per Sec: 12837.303188737958
Epoch Step: 95 / 138 Loss: 16.18771743774414 Tokens per Sec: 14102.654503864576
Epoch Step: 100 / 138 Loss: 16.894996643066406 Tokens per Sec: 12844.892811618007
Epoch Step: 105 / 138 Loss: 14.425745964050293 Tokens per Sec: 12423.6110506318
Epoch Step: 110 / 138 Loss: 13.512585639953613 Tokens per Sec: 12617.45064752305
Epoch Step: 115 / 138 Loss: 16.86699104309082 Tokens per Sec: 12099.572612083577
Epoch Step: 120 / 138 Loss: 17.578792572021484 Tokens per Sec: 12915.384827268685
Epoch Step: 125 / 138 Loss: 125.61298370361328 Tokens per Sec: 13085.946417731162
Epoch Step: 130 / 138 Loss: 18.49149513244629 Tokens per Sec: 13401.449163323316
Epoch Step: 135 / 138 Loss: 120.7982177734375 Tokens per Sec: 12838.489323955762
Epoch ended with duration 0:00:48.188737
Train perplexity: 1.3933876750206993
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:03.913702
Validation perplexity: 1.6217356151889986
Epoch 170 / 1000
Epoch Step: 5 / 138 Loss: 19.609846115112305 Tokens per Sec: 13244.405273296046
Epoch Step: 10 / 138 Loss: 10.945881843566895 Tokens per Sec: 13995.453674201497
Epoch Step: 15 / 138 Loss: 9.932808876037598 Tokens per Sec: 13715.826671334737
Epoch Step: 20 / 138 Loss: 8.904614448547363 Tokens per Sec: 13796.74694106818
Epoch Step: 25 / 138 Loss: 14.063005447387695 Tokens per Sec: 12807.808329486888
Epoch Step: 30 / 138 Loss: 9.194780349731445 Tokens per Sec: 13171.914037685148
Epoch Step: 35 / 138 Loss: 23.325658798217773 Tokens per Sec: 13157.537093511897
Epoch Step: 40 / 138 Loss: 14.236350059509277 Tokens per Sec: 13061.546573705533
Epoch Step: 45 / 138 Loss: 15.597952842712402 Tokens per Sec: 13728.837277338458
Epoch Step: 50 / 138 Loss: 11.436060905456543 Tokens per Sec: 13698.750400407498
Epoch Step: 55 / 138 Loss: 15.081491470336914 Tokens per Sec: 13490.598126147504
Epoch Step: 60 / 138 Loss: 122.80896759033203 Tokens per Sec: 13742.672578125701
Epoch Step: 65 / 138 Loss: 77.67251586914062 Tokens per Sec: 13345.872683546257
Epoch Step: 70 / 138 Loss: 20.00200653076172 Tokens per Sec: 13883.530921482805
Epoch Step: 75 / 138 Loss: 13.030051231384277 Tokens per Sec: 13711.223377261193
Epoch Step: 80 / 138 Loss: 9.487977027893066 Tokens per Sec: 13566.733655494087
Epoch Step: 85 / 138 Loss: 11.408905982971191 Tokens per Sec: 13622.789660885364
Epoch Step: 90 / 138 Loss: 100.89568328857422 Tokens per Sec: 13092.825273878974
Epoch Step: 95 / 138 Loss: 14.536264419555664 Tokens per Sec: 12507.482754509367
Epoch Step: 100 / 138 Loss: 17.956302642822266 Tokens per Sec: 13398.638640219011
Epoch Step: 105 / 138 Loss: 93.44277954101562 Tokens per Sec: 12536.202890515198
Epoch Step: 110 / 138 Loss: 16.651803970336914 Tokens per Sec: 12300.160522907294
Epoch Step: 115 / 138 Loss: 11.534440994262695 Tokens per Sec: 13094.299613416859
Epoch Step: 120 / 138 Loss: 9.874898910522461 Tokens per Sec: 12857.824359224434
Epoch Step: 125 / 138 Loss: 16.48994255065918 Tokens per Sec: 13362.468789112983
Epoch Step: 130 / 138 Loss: 12.14351749420166 Tokens per Sec: 12866.894849851378
Epoch Step: 135 / 138 Loss: 9.50507640838623 Tokens per Sec: 13376.749855269318
Epoch ended with duration 0:00:47.933135
Train perplexity: 1.3249671668393248
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.944981
Validation perplexity: 1.645389321506333
Model saved checkpoint!
Epoch 171 / 1000
Epoch Step: 5 / 138 Loss: 14.820874214172363 Tokens per Sec: 13121.489550566122
Epoch Step: 10 / 138 Loss: 9.726302146911621 Tokens per Sec: 13812.379452735415
Epoch Step: 15 / 138 Loss: 10.030521392822266 Tokens per Sec: 14047.40723360695
Epoch Step: 20 / 138 Loss: 11.562942504882812 Tokens per Sec: 13614.075589456224
Epoch Step: 25 / 138 Loss: 73.412109375 Tokens per Sec: 13474.363663349806
Epoch Step: 30 / 138 Loss: 9.318562507629395 Tokens per Sec: 13589.028826681046
Epoch Step: 35 / 138 Loss: 18.100421905517578 Tokens per Sec: 12590.506468734524
Epoch Step: 40 / 138 Loss: 15.655617713928223 Tokens per Sec: 13124.62358966334
Epoch Step: 45 / 138 Loss: 96.29164123535156 Tokens per Sec: 12475.352299099788
Epoch Step: 50 / 138 Loss: 16.396446228027344 Tokens per Sec: 13428.255211132153
Epoch Step: 55 / 138 Loss: 22.73172950744629 Tokens per Sec: 12775.683390358876
Epoch Step: 60 / 138 Loss: 65.25177764892578 Tokens per Sec: 13308.11672667243
Epoch Step: 65 / 138 Loss: 24.813751220703125 Tokens per Sec: 12907.008832726035
Epoch Step: 70 / 138 Loss: 11.151554107666016 Tokens per Sec: 13573.835597198451
Epoch Step: 75 / 138 Loss: 12.589590072631836 Tokens per Sec: 12903.52560410175
Epoch Step: 80 / 138 Loss: 11.151265144348145 Tokens per Sec: 13512.775672891948
Epoch Step: 85 / 138 Loss: 20.504314422607422 Tokens per Sec: 13650.372884162189
Epoch Step: 90 / 138 Loss: 20.93539047241211 Tokens per Sec: 13871.673068464857
Epoch Step: 95 / 138 Loss: 15.09087085723877 Tokens per Sec: 14178.457242175224
Epoch Step: 100 / 138 Loss: 13.315144538879395 Tokens per Sec: 13742.470395426844
Epoch Step: 105 / 138 Loss: 15.395198822021484 Tokens per Sec: 13285.044489974
Epoch Step: 110 / 138 Loss: 14.994091987609863 Tokens per Sec: 11912.758689891867
Epoch Step: 115 / 138 Loss: 12.32730484008789 Tokens per Sec: 13072.145945255017
Epoch Step: 120 / 138 Loss: 13.218923568725586 Tokens per Sec: 12848.327820293274
Epoch Step: 125 / 138 Loss: 14.352858543395996 Tokens per Sec: 12525.513049756202
Epoch Step: 130 / 138 Loss: 11.220796585083008 Tokens per Sec: 13347.115379844485
Epoch Step: 135 / 138 Loss: 11.26996898651123 Tokens per Sec: 13026.181543807417
Epoch ended with duration 0:00:48.231310
Train perplexity: 1.4455163234350261
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.877198
Validation perplexity: 1.5312215364527668
Epoch 172 / 1000
Epoch Step: 5 / 138 Loss: 9.275918006896973 Tokens per Sec: 13637.786307512406
Epoch Step: 10 / 138 Loss: 11.139381408691406 Tokens per Sec: 14125.482192174291
Epoch Step: 15 / 138 Loss: 149.3728485107422 Tokens per Sec: 12274.598064299591
Epoch Step: 20 / 138 Loss: 15.579440116882324 Tokens per Sec: 13431.264798582866
Epoch Step: 25 / 138 Loss: 18.731616973876953 Tokens per Sec: 13746.33412831791
Epoch Step: 30 / 138 Loss: 14.28645133972168 Tokens per Sec: 13526.802102942895
Epoch Step: 35 / 138 Loss: 14.573829650878906 Tokens per Sec: 13991.987658291722
Epoch Step: 40 / 138 Loss: 17.111230850219727 Tokens per Sec: 13810.608077420484
Epoch Step: 45 / 138 Loss: 7.871467590332031 Tokens per Sec: 12870.58998551924
Epoch Step: 50 / 138 Loss: 15.487763404846191 Tokens per Sec: 13133.105360202659
Epoch Step: 55 / 138 Loss: 11.064949989318848 Tokens per Sec: 13525.932469292364
Epoch Step: 60 / 138 Loss: 10.79559326171875 Tokens per Sec: 13794.739471906982
Epoch Step: 65 / 138 Loss: 8.695231437683105 Tokens per Sec: 13880.331929204891
Epoch Step: 70 / 138 Loss: 8.652486801147461 Tokens per Sec: 12615.687974192337
Epoch Step: 75 / 138 Loss: 14.913561820983887 Tokens per Sec: 13240.872119269055
Epoch Step: 80 / 138 Loss: 136.92221069335938 Tokens per Sec: 12856.650794850044
Epoch Step: 85 / 138 Loss: 17.119144439697266 Tokens per Sec: 13648.753035617081
Epoch Step: 90 / 138 Loss: 12.58304500579834 Tokens per Sec: 13636.638098351123
Epoch Step: 95 / 138 Loss: 21.379789352416992 Tokens per Sec: 13266.660993635063
Epoch Step: 100 / 138 Loss: 23.023120880126953 Tokens per Sec: 13863.407994044226
Epoch Step: 105 / 138 Loss: 14.021483421325684 Tokens per Sec: 13064.231858088477
Epoch Step: 110 / 138 Loss: 173.10787963867188 Tokens per Sec: 11816.875533312867
Epoch Step: 115 / 138 Loss: 13.28631591796875 Tokens per Sec: 12882.497435434656
Epoch Step: 120 / 138 Loss: 15.95016098022461 Tokens per Sec: 13024.392696286579
Epoch Step: 125 / 138 Loss: 16.358642578125 Tokens per Sec: 12929.56623079774
Epoch Step: 130 / 138 Loss: 16.404264450073242 Tokens per Sec: 13356.522444912154
Epoch Step: 135 / 138 Loss: 15.149937629699707 Tokens per Sec: 13257.860060920802
Epoch ended with duration 0:00:47.963618
Train perplexity: 1.3726546344747423
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.920077
Validation perplexity: 1.6139250202286375
Epoch 173 / 1000
Epoch Step: 5 / 138 Loss: 13.602410316467285 Tokens per Sec: 13076.351709229457
Epoch Step: 10 / 138 Loss: 8.06456184387207 Tokens per Sec: 13687.610104420724
Epoch Step: 15 / 138 Loss: 12.330670356750488 Tokens per Sec: 13560.658344716212
Epoch Step: 20 / 138 Loss: 18.13155746459961 Tokens per Sec: 13236.78615558515
Epoch Step: 25 / 138 Loss: 16.888572692871094 Tokens per Sec: 13670.846517413658
Epoch Step: 30 / 138 Loss: 5.631478309631348 Tokens per Sec: 14138.499677502092
Epoch Step: 35 / 138 Loss: 10.151644706726074 Tokens per Sec: 13099.428440612703
Epoch Step: 40 / 138 Loss: 73.69453430175781 Tokens per Sec: 12981.421069532154
Epoch Step: 45 / 138 Loss: 11.773488998413086 Tokens per Sec: 14001.643440946258
Epoch Step: 50 / 138 Loss: 16.505659103393555 Tokens per Sec: 12786.333314230898
Epoch Step: 55 / 138 Loss: 15.877273559570312 Tokens per Sec: 13168.149679088927
Epoch Step: 60 / 138 Loss: 19.2763614654541 Tokens per Sec: 13579.602503664262
Epoch Step: 65 / 138 Loss: 12.551774024963379 Tokens per Sec: 13858.787657039067
Epoch Step: 70 / 138 Loss: 22.923376083374023 Tokens per Sec: 13581.038665309163
Epoch Step: 75 / 138 Loss: 117.53553009033203 Tokens per Sec: 13034.248714267422
Epoch Step: 80 / 138 Loss: 8.212475776672363 Tokens per Sec: 13792.789687163511
Epoch Step: 85 / 138 Loss: 17.37667465209961 Tokens per Sec: 12983.520079591526
Epoch Step: 90 / 138 Loss: 10.792234420776367 Tokens per Sec: 13239.47489945958
Epoch Step: 95 / 138 Loss: 119.5784912109375 Tokens per Sec: 12735.302947915101
Epoch Step: 100 / 138 Loss: 18.852697372436523 Tokens per Sec: 13212.466972163405
Epoch Step: 105 / 138 Loss: 11.2116117477417 Tokens per Sec: 13089.76595211733
Epoch Step: 110 / 138 Loss: 13.74913501739502 Tokens per Sec: 11924.539029364209
Epoch Step: 115 / 138 Loss: 15.413036346435547 Tokens per Sec: 13023.844214368952
Epoch Step: 120 / 138 Loss: 13.083868026733398 Tokens per Sec: 12983.029025942527
Epoch Step: 125 / 138 Loss: 74.8676986694336 Tokens per Sec: 12826.652708016867
Epoch Step: 130 / 138 Loss: 110.58839416503906 Tokens per Sec: 12924.34333153225
Epoch Step: 135 / 138 Loss: 111.40607452392578 Tokens per Sec: 12803.502288908188
Epoch ended with duration 0:00:48.277467
Train perplexity: 1.4412662083149024
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:03.960820
Validation perplexity: 1.8339834981802472
Epoch 174 / 1000
Epoch Step: 5 / 138 Loss: 20.46318244934082 Tokens per Sec: 13693.516234339788
Epoch Step: 10 / 138 Loss: 13.040254592895508 Tokens per Sec: 13969.76825570337
Epoch Step: 15 / 138 Loss: 20.184429168701172 Tokens per Sec: 13707.922848552285
Epoch Step: 20 / 138 Loss: 136.52842712402344 Tokens per Sec: 13623.413336325557
Epoch Step: 25 / 138 Loss: 26.825368881225586 Tokens per Sec: 13577.0986465658
Epoch Step: 30 / 138 Loss: 16.665815353393555 Tokens per Sec: 13083.254266591246
Epoch Step: 35 / 138 Loss: 11.776529312133789 Tokens per Sec: 13643.841856950605
Epoch Step: 40 / 138 Loss: 15.554049491882324 Tokens per Sec: 13725.533475603139
Epoch Step: 45 / 138 Loss: 16.388277053833008 Tokens per Sec: 13377.319645816506
Epoch Step: 50 / 138 Loss: 14.771126747131348 Tokens per Sec: 14068.211853824227
Epoch Step: 55 / 138 Loss: 13.795061111450195 Tokens per Sec: 12495.061583778546
Epoch Step: 60 / 138 Loss: 12.534643173217773 Tokens per Sec: 13769.841334854484
Epoch Step: 65 / 138 Loss: 11.367816925048828 Tokens per Sec: 13571.942593428315
Epoch Step: 70 / 138 Loss: 10.572404861450195 Tokens per Sec: 13480.425602069188
Epoch Step: 75 / 138 Loss: 110.79991149902344 Tokens per Sec: 13460.939408105442
Epoch Step: 80 / 138 Loss: 18.70296287536621 Tokens per Sec: 12937.775119825228
Epoch Step: 85 / 138 Loss: 11.334207534790039 Tokens per Sec: 12807.042628284906
Epoch Step: 90 / 138 Loss: 17.851787567138672 Tokens per Sec: 13822.210141995172
Epoch Step: 95 / 138 Loss: 13.607828140258789 Tokens per Sec: 13019.799666594186
Epoch Step: 100 / 138 Loss: 20.583843231201172 Tokens per Sec: 13225.721117364932
Epoch Step: 105 / 138 Loss: 12.327792167663574 Tokens per Sec: 12820.26447463905
Epoch Step: 110 / 138 Loss: 13.408661842346191 Tokens per Sec: 12918.284020016072
Epoch Step: 115 / 138 Loss: 13.34337329864502 Tokens per Sec: 12253.666339709822
Epoch Step: 120 / 138 Loss: 111.03176879882812 Tokens per Sec: 12701.038593313202
Epoch Step: 125 / 138 Loss: 62.847103118896484 Tokens per Sec: 12600.593408009816
Epoch Step: 130 / 138 Loss: 13.27491569519043 Tokens per Sec: 13336.586310052822
Epoch Step: 135 / 138 Loss: 14.614522933959961 Tokens per Sec: 13158.981463008675
Epoch ended with duration 0:00:48.008671
Train perplexity: 1.334582204982589
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.814082
Validation perplexity: 1.2810874850038598
Epoch 175 / 1000
Epoch Step: 5 / 138 Loss: 12.03398323059082 Tokens per Sec: 13825.436621898214
Epoch Step: 10 / 138 Loss: 18.516124725341797 Tokens per Sec: 14029.316084575079
Epoch Step: 15 / 138 Loss: 112.28697204589844 Tokens per Sec: 12882.804503475616
Epoch Step: 20 / 138 Loss: 114.77494049072266 Tokens per Sec: 13829.449817304838
Epoch Step: 25 / 138 Loss: 17.88216209411621 Tokens per Sec: 13127.665576216283
Epoch Step: 30 / 138 Loss: 87.50949096679688 Tokens per Sec: 13898.649578515213
Epoch Step: 35 / 138 Loss: 12.407942771911621 Tokens per Sec: 13048.062853339758
Epoch Step: 40 / 138 Loss: 66.51161193847656 Tokens per Sec: 12616.769534395527
Epoch Step: 45 / 138 Loss: 12.9087495803833 Tokens per Sec: 13276.506335928541
Epoch Step: 50 / 138 Loss: 12.909455299377441 Tokens per Sec: 13391.144196209569
Epoch Step: 55 / 138 Loss: 8.652853965759277 Tokens per Sec: 14002.980148281997
Epoch Step: 60 / 138 Loss: 13.579412460327148 Tokens per Sec: 13484.124078534414
Epoch Step: 65 / 138 Loss: 9.362417221069336 Tokens per Sec: 13171.183812815269
Epoch Step: 70 / 138 Loss: 16.22941780090332 Tokens per Sec: 12966.378205983823
Epoch Step: 75 / 138 Loss: 15.248641967773438 Tokens per Sec: 13242.709956882754
Epoch Step: 80 / 138 Loss: 9.526955604553223 Tokens per Sec: 13810.140364347617
Epoch Step: 85 / 138 Loss: 11.92104721069336 Tokens per Sec: 13829.501776257857
Epoch Step: 90 / 138 Loss: 12.935077667236328 Tokens per Sec: 13562.441457481198
Epoch Step: 95 / 138 Loss: 15.871333122253418 Tokens per Sec: 13811.392489354868
Epoch Step: 100 / 138 Loss: 8.405606269836426 Tokens per Sec: 13069.785386566102
Epoch Step: 105 / 138 Loss: 16.68212890625 Tokens per Sec: 13105.80149770329
Epoch Step: 110 / 138 Loss: 11.02558708190918 Tokens per Sec: 11817.70899061666
Epoch Step: 115 / 138 Loss: 11.5077486038208 Tokens per Sec: 12653.006442673941
Epoch Step: 120 / 138 Loss: 130.4345245361328 Tokens per Sec: 13065.57214039534
Epoch Step: 125 / 138 Loss: 13.266830444335938 Tokens per Sec: 13055.286977494876
Epoch Step: 130 / 138 Loss: 129.73175048828125 Tokens per Sec: 13162.704416060089
Epoch Step: 135 / 138 Loss: 12.309290885925293 Tokens per Sec: 13308.13686023944
Epoch ended with duration 0:00:48.032800
Train perplexity: 1.3859763406599839
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.845197
Validation perplexity: 1.3085865998792097
Model saved checkpoint!
Epoch 176 / 1000
Epoch Step: 5 / 138 Loss: 12.886273384094238 Tokens per Sec: 13268.542749284405
Epoch Step: 10 / 138 Loss: 18.447284698486328 Tokens per Sec: 13422.388587774307
Epoch Step: 15 / 138 Loss: 15.042464256286621 Tokens per Sec: 13804.771580889917
Epoch Step: 20 / 138 Loss: 96.49078369140625 Tokens per Sec: 13364.720045519965
Epoch Step: 25 / 138 Loss: 9.809146881103516 Tokens per Sec: 12857.635610308458
Epoch Step: 30 / 138 Loss: 70.44185638427734 Tokens per Sec: 13096.216376915196
Epoch Step: 35 / 138 Loss: 21.097536087036133 Tokens per Sec: 12885.244587637935
Epoch Step: 40 / 138 Loss: 14.416133880615234 Tokens per Sec: 13521.37480762204
Epoch Step: 45 / 138 Loss: 11.66816520690918 Tokens per Sec: 13607.583810306014
Epoch Step: 50 / 138 Loss: 11.162019729614258 Tokens per Sec: 12958.585625935619
Epoch Step: 55 / 138 Loss: 80.97181701660156 Tokens per Sec: 13624.109926650257
Epoch Step: 60 / 138 Loss: 7.510798454284668 Tokens per Sec: 13797.08796146001
Epoch Step: 65 / 138 Loss: 138.1996307373047 Tokens per Sec: 12815.281323897474
Epoch Step: 70 / 138 Loss: 15.1429443359375 Tokens per Sec: 14158.169569098402
Epoch Step: 75 / 138 Loss: 17.4561824798584 Tokens per Sec: 14053.103373641152
Epoch Step: 80 / 138 Loss: 11.708333969116211 Tokens per Sec: 13401.775305760462
Epoch Step: 85 / 138 Loss: 20.406766891479492 Tokens per Sec: 14020.645198744336
Epoch Step: 90 / 138 Loss: 9.736001014709473 Tokens per Sec: 13527.658902256737
Epoch Step: 95 / 138 Loss: 8.577179908752441 Tokens per Sec: 13426.172510038856
Epoch Step: 100 / 138 Loss: 101.55424499511719 Tokens per Sec: 12787.36105386442
Epoch Step: 105 / 138 Loss: 16.38314437866211 Tokens per Sec: 12988.88762526413
Epoch Step: 110 / 138 Loss: 10.523191452026367 Tokens per Sec: 12322.616169502606
Epoch Step: 115 / 138 Loss: 20.679649353027344 Tokens per Sec: 13080.80062957677
Epoch Step: 120 / 138 Loss: 13.321877479553223 Tokens per Sec: 12903.20445139776
Epoch Step: 125 / 138 Loss: 15.093505859375 Tokens per Sec: 11929.399560791431
Epoch Step: 130 / 138 Loss: 15.598468780517578 Tokens per Sec: 13258.002663820733
Epoch Step: 135 / 138 Loss: 13.594176292419434 Tokens per Sec: 13050.902785949462
Epoch ended with duration 0:00:48.088328
Train perplexity: 1.4102802146652555
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.866340
Validation perplexity: 1.6066425102792254
Epoch 177 / 1000
Epoch Step: 5 / 138 Loss: 19.21599006652832 Tokens per Sec: 13384.941471246919
Epoch Step: 10 / 138 Loss: 8.819108963012695 Tokens per Sec: 14074.839863151634
Epoch Step: 15 / 138 Loss: 9.160054206848145 Tokens per Sec: 13237.959173201994
Epoch Step: 20 / 138 Loss: 10.03162956237793 Tokens per Sec: 13609.216014294077
Epoch Step: 25 / 138 Loss: 89.5028305053711 Tokens per Sec: 13524.461052788169
Epoch Step: 30 / 138 Loss: 102.59986877441406 Tokens per Sec: 13191.725404294584
Epoch Step: 35 / 138 Loss: 12.880932807922363 Tokens per Sec: 13158.602163994527
Epoch Step: 40 / 138 Loss: 118.13040161132812 Tokens per Sec: 13600.949360886198
Epoch Step: 45 / 138 Loss: 12.144238471984863 Tokens per Sec: 13787.298473953348
Epoch Step: 50 / 138 Loss: 7.555013656616211 Tokens per Sec: 14013.093868501617
Epoch Step: 55 / 138 Loss: 13.95998477935791 Tokens per Sec: 13631.977225460038
Epoch Step: 60 / 138 Loss: 11.113058090209961 Tokens per Sec: 13112.355661214455
Epoch Step: 65 / 138 Loss: 41.239479064941406 Tokens per Sec: 12949.878783888062
Epoch Step: 70 / 138 Loss: 13.202943801879883 Tokens per Sec: 13084.024269764222
Epoch Step: 75 / 138 Loss: 10.215662956237793 Tokens per Sec: 13312.366462422939
Epoch Step: 80 / 138 Loss: 13.498985290527344 Tokens per Sec: 13872.408771229204
Epoch Step: 85 / 138 Loss: 11.381336212158203 Tokens per Sec: 13547.025942562543
Epoch Step: 90 / 138 Loss: 10.685481071472168 Tokens per Sec: 13012.8300010843
Epoch Step: 95 / 138 Loss: 121.75273895263672 Tokens per Sec: 13176.510497318926
Epoch Step: 100 / 138 Loss: 141.32489013671875 Tokens per Sec: 13356.732091512098
Epoch Step: 105 / 138 Loss: 11.831666946411133 Tokens per Sec: 13202.79754452037
Epoch Step: 110 / 138 Loss: 14.348201751708984 Tokens per Sec: 12504.000274638685
Epoch Step: 115 / 138 Loss: 9.956825256347656 Tokens per Sec: 13433.355347411358
Epoch Step: 120 / 138 Loss: 12.490492820739746 Tokens per Sec: 11736.03665480212
Epoch Step: 125 / 138 Loss: 11.624469757080078 Tokens per Sec: 13095.679594726376
Epoch Step: 130 / 138 Loss: 15.97902774810791 Tokens per Sec: 13302.70641665084
Epoch Step: 135 / 138 Loss: 12.575234413146973 Tokens per Sec: 13290.221544914943
Epoch ended with duration 0:00:47.952112
Train perplexity: 1.3665965051281594
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.829392
Validation perplexity: 1.4333362621552999
Epoch 178 / 1000
Epoch Step: 5 / 138 Loss: 15.748520851135254 Tokens per Sec: 12939.569537244932
Epoch Step: 10 / 138 Loss: 8.830482482910156 Tokens per Sec: 13971.441046159987
Epoch Step: 15 / 138 Loss: 14.154282569885254 Tokens per Sec: 13265.188113603057
Epoch Step: 20 / 138 Loss: 12.387359619140625 Tokens per Sec: 13437.464500253667
Epoch Step: 25 / 138 Loss: 127.59288787841797 Tokens per Sec: 13208.493754447081
Epoch Step: 30 / 138 Loss: 13.089210510253906 Tokens per Sec: 12866.56273297175
Epoch Step: 35 / 138 Loss: 16.330604553222656 Tokens per Sec: 13764.608932265986
Epoch Step: 40 / 138 Loss: 21.87762451171875 Tokens per Sec: 14017.628569229677
Epoch Step: 45 / 138 Loss: 18.137670516967773 Tokens per Sec: 13289.904989236471
Epoch Step: 50 / 138 Loss: 12.490157127380371 Tokens per Sec: 13977.388949687567
Epoch Step: 55 / 138 Loss: 11.159096717834473 Tokens per Sec: 13736.989929604619
Epoch Step: 60 / 138 Loss: 13.558086395263672 Tokens per Sec: 13157.923018762305
Epoch Step: 65 / 138 Loss: 10.702589988708496 Tokens per Sec: 13014.884206832594
Epoch Step: 70 / 138 Loss: 156.2209014892578 Tokens per Sec: 13440.607843635815
Epoch Step: 75 / 138 Loss: 13.32174301147461 Tokens per Sec: 13009.3357232911
Epoch Step: 80 / 138 Loss: 47.05342483520508 Tokens per Sec: 13064.898629376348
Epoch Step: 85 / 138 Loss: 16.21803092956543 Tokens per Sec: 13816.736004878265
Epoch Step: 90 / 138 Loss: 19.334993362426758 Tokens per Sec: 13613.918953142966
Epoch Step: 95 / 138 Loss: 19.710548400878906 Tokens per Sec: 14061.582801440542
Epoch Step: 100 / 138 Loss: 11.163473129272461 Tokens per Sec: 13616.887943821563
Epoch Step: 105 / 138 Loss: 10.1544828414917 Tokens per Sec: 12993.78078097482
Epoch Step: 110 / 138 Loss: 9.881482124328613 Tokens per Sec: 13350.531922786451
Epoch Step: 115 / 138 Loss: 93.6035385131836 Tokens per Sec: 12763.514113521393
Epoch Step: 120 / 138 Loss: 11.917573928833008 Tokens per Sec: 12755.795064153632
Epoch Step: 125 / 138 Loss: 16.873292922973633 Tokens per Sec: 11923.676038078363
Epoch Step: 130 / 138 Loss: 9.542189598083496 Tokens per Sec: 13264.032935482426
Epoch Step: 135 / 138 Loss: 17.045085906982422 Tokens per Sec: 12594.870083555228
Epoch ended with duration 0:00:48.017925
Train perplexity: 1.4482455230690103
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.845659
Validation perplexity: 1.49205236183942
Epoch 179 / 1000
Epoch Step: 5 / 138 Loss: 19.90180778503418 Tokens per Sec: 13327.030858186565
Epoch Step: 10 / 138 Loss: 10.09028434753418 Tokens per Sec: 14002.619892476743
Epoch Step: 15 / 138 Loss: 18.041234970092773 Tokens per Sec: 13494.74391977675
Epoch Step: 20 / 138 Loss: 113.5752182006836 Tokens per Sec: 14222.595928585028
Epoch Step: 25 / 138 Loss: 15.627798080444336 Tokens per Sec: 12864.527831125773
Epoch Step: 30 / 138 Loss: 16.457042694091797 Tokens per Sec: 13801.164496442367
Epoch Step: 35 / 138 Loss: 9.34007453918457 Tokens per Sec: 12528.098401935214
Epoch Step: 40 / 138 Loss: 11.572471618652344 Tokens per Sec: 13637.05628105822
Epoch Step: 45 / 138 Loss: 12.071037292480469 Tokens per Sec: 14004.084802949099
Epoch Step: 50 / 138 Loss: 15.147658348083496 Tokens per Sec: 12930.249526740654
Epoch Step: 55 / 138 Loss: 111.67781066894531 Tokens per Sec: 13142.5958643943
Epoch Step: 60 / 138 Loss: 15.351054191589355 Tokens per Sec: 13018.904815022379
Epoch Step: 65 / 138 Loss: 12.079872131347656 Tokens per Sec: 14520.88854235837
Epoch Step: 70 / 138 Loss: 11.637606620788574 Tokens per Sec: 13511.305930206958
Epoch Step: 75 / 138 Loss: 10.24877643585205 Tokens per Sec: 13545.247433606408
Epoch Step: 80 / 138 Loss: 8.727865219116211 Tokens per Sec: 13680.998764187638
Epoch Step: 85 / 138 Loss: 21.855918884277344 Tokens per Sec: 13367.094990341553
Epoch Step: 90 / 138 Loss: 22.456584930419922 Tokens per Sec: 12882.671146617275
Epoch Step: 95 / 138 Loss: 105.62357330322266 Tokens per Sec: 13000.979689303762
Epoch Step: 100 / 138 Loss: 11.272198677062988 Tokens per Sec: 13563.9832772083
Epoch Step: 105 / 138 Loss: 15.860176086425781 Tokens per Sec: 13018.009259604476
Epoch Step: 110 / 138 Loss: 14.192028999328613 Tokens per Sec: 12044.59184475522
Epoch Step: 115 / 138 Loss: 93.29779052734375 Tokens per Sec: 13085.884988436155
Epoch Step: 120 / 138 Loss: 14.32817268371582 Tokens per Sec: 13387.114987328052
Epoch Step: 125 / 138 Loss: 13.741622924804688 Tokens per Sec: 13136.819402876274
Epoch Step: 130 / 138 Loss: 12.506529808044434 Tokens per Sec: 13440.10538645449
Epoch Step: 135 / 138 Loss: 8.533843994140625 Tokens per Sec: 12616.82835704815
Epoch ended with duration 0:00:47.907000
Train perplexity: 1.3970874691892043
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.849501
Validation perplexity: 1.4275543183708892
Epoch 180 / 1000
Epoch Step: 5 / 138 Loss: 136.854248046875 Tokens per Sec: 13394.960508435242
Epoch Step: 10 / 138 Loss: 14.99819564819336 Tokens per Sec: 12836.194758515652
Epoch Step: 15 / 138 Loss: 15.581767082214355 Tokens per Sec: 14041.522222804633
Epoch Step: 20 / 138 Loss: 9.455829620361328 Tokens per Sec: 13520.882902772975
Epoch Step: 25 / 138 Loss: 14.249879837036133 Tokens per Sec: 13516.9070215796
Epoch Step: 30 / 138 Loss: 11.038839340209961 Tokens per Sec: 13345.574638668622
Epoch Step: 35 / 138 Loss: 17.846473693847656 Tokens per Sec: 13174.957940130997
Epoch Step: 40 / 138 Loss: 11.077478408813477 Tokens per Sec: 13503.445904901368
Epoch Step: 45 / 138 Loss: 13.761951446533203 Tokens per Sec: 13527.586831066
Epoch Step: 50 / 138 Loss: 14.262927055358887 Tokens per Sec: 13360.902923019516
Epoch Step: 55 / 138 Loss: 11.422500610351562 Tokens per Sec: 13676.948223146617
Epoch Step: 60 / 138 Loss: 11.922309875488281 Tokens per Sec: 14138.940640848645
Epoch Step: 65 / 138 Loss: 16.978012084960938 Tokens per Sec: 13553.369323238541
Epoch Step: 70 / 138 Loss: 10.017024040222168 Tokens per Sec: 13329.14269613599
Epoch Step: 75 / 138 Loss: 14.62520694732666 Tokens per Sec: 13637.94565511029
Epoch Step: 80 / 138 Loss: 14.382705688476562 Tokens per Sec: 13365.439551262796
Epoch Step: 85 / 138 Loss: 15.824532508850098 Tokens per Sec: 13995.499818832943
Epoch Step: 90 / 138 Loss: 13.007881164550781 Tokens per Sec: 13293.317183740308
Epoch Step: 95 / 138 Loss: 13.27899169921875 Tokens per Sec: 14008.522380175911
Epoch Step: 100 / 138 Loss: 17.037229537963867 Tokens per Sec: 13531.222678815442
Epoch Step: 105 / 138 Loss: 12.122198104858398 Tokens per Sec: 13091.141647917188
Epoch Step: 110 / 138 Loss: 12.638043403625488 Tokens per Sec: 12666.144341576555
Epoch Step: 115 / 138 Loss: 14.468741416931152 Tokens per Sec: 13090.656917393322
Epoch Step: 120 / 138 Loss: 13.563894271850586 Tokens per Sec: 13453.576270660753
Epoch Step: 125 / 138 Loss: 10.834343910217285 Tokens per Sec: 11736.85357863525
Epoch Step: 130 / 138 Loss: 12.784622192382812 Tokens per Sec: 12844.173226828452
Epoch Step: 135 / 138 Loss: 13.042984008789062 Tokens per Sec: 13085.288493037422
Epoch ended with duration 0:00:47.837204
Train perplexity: 1.2974363472210377
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.820497
Validation perplexity: 1.3807912909898528
Model saved checkpoint!
Epoch 181 / 1000
Epoch Step: 5 / 138 Loss: 14.129386901855469 Tokens per Sec: 13336.39700428716
Epoch Step: 10 / 138 Loss: 8.521796226501465 Tokens per Sec: 13732.048482854672
Epoch Step: 15 / 138 Loss: 9.04340934753418 Tokens per Sec: 13681.407820306371
Epoch Step: 20 / 138 Loss: 12.448217391967773 Tokens per Sec: 13329.120807930014
Epoch Step: 25 / 138 Loss: 9.870929718017578 Tokens per Sec: 13050.430922358326
Epoch Step: 30 / 138 Loss: 13.229199409484863 Tokens per Sec: 13370.885412960875
Epoch Step: 35 / 138 Loss: 146.82330322265625 Tokens per Sec: 13605.202434996449
Epoch Step: 40 / 138 Loss: 16.611413955688477 Tokens per Sec: 13155.31036734335
Epoch Step: 45 / 138 Loss: 10.17595386505127 Tokens per Sec: 13659.909761977438
Epoch Step: 50 / 138 Loss: 14.691642761230469 Tokens per Sec: 13107.150080536785
Epoch Step: 55 / 138 Loss: 8.240853309631348 Tokens per Sec: 13859.739390945764
Epoch Step: 60 / 138 Loss: 16.092422485351562 Tokens per Sec: 13396.273636662128
Epoch Step: 65 / 138 Loss: 10.851871490478516 Tokens per Sec: 13799.675828414242
Epoch Step: 70 / 138 Loss: 12.976234436035156 Tokens per Sec: 13843.790282468024
Epoch Step: 75 / 138 Loss: 12.116277694702148 Tokens per Sec: 13767.178361906066
Epoch Step: 80 / 138 Loss: 12.298881530761719 Tokens per Sec: 13330.178249243869
Epoch Step: 85 / 138 Loss: 11.646066665649414 Tokens per Sec: 13571.100653086325
Epoch Step: 90 / 138 Loss: 8.840080261230469 Tokens per Sec: 13737.716197553935
Epoch Step: 95 / 138 Loss: 86.20658111572266 Tokens per Sec: 13804.06661444991
Epoch Step: 100 / 138 Loss: 12.383025169372559 Tokens per Sec: 13996.453275011685
Epoch Step: 105 / 138 Loss: 12.008390426635742 Tokens per Sec: 12510.610816711533
Epoch Step: 110 / 138 Loss: 78.26053619384766 Tokens per Sec: 13029.836931637472
Epoch Step: 115 / 138 Loss: 17.953006744384766 Tokens per Sec: 13456.340815035257
Epoch Step: 120 / 138 Loss: 18.417776107788086 Tokens per Sec: 12791.007086036065
Epoch Step: 125 / 138 Loss: 14.654023170471191 Tokens per Sec: 13046.817162640646
Epoch Step: 130 / 138 Loss: 16.183351516723633 Tokens per Sec: 13422.052214836673
Epoch Step: 135 / 138 Loss: 17.17262077331543 Tokens per Sec: 12858.004835324731
Epoch ended with duration 0:00:47.685418
Train perplexity: 1.3171244882523703
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.881812
Validation perplexity: 1.6744302460379246
Epoch 182 / 1000
Epoch Step: 5 / 138 Loss: 73.32002258300781 Tokens per Sec: 12493.101596782762
Epoch Step: 10 / 138 Loss: 12.214715003967285 Tokens per Sec: 13801.381977725257
Epoch Step: 15 / 138 Loss: 8.30763053894043 Tokens per Sec: 12954.308013968532
Epoch Step: 20 / 138 Loss: 18.183719635009766 Tokens per Sec: 13371.580384790273
Epoch Step: 25 / 138 Loss: 13.990159034729004 Tokens per Sec: 12952.650700478902
Epoch Step: 30 / 138 Loss: 11.21334171295166 Tokens per Sec: 13644.165551519935
Epoch Step: 35 / 138 Loss: 17.644533157348633 Tokens per Sec: 13034.789331516542
Epoch Step: 40 / 138 Loss: 14.0864839553833 Tokens per Sec: 14068.898662263042
Epoch Step: 45 / 138 Loss: 103.7811508178711 Tokens per Sec: 13093.691488672635
Epoch Step: 50 / 138 Loss: 7.782960414886475 Tokens per Sec: 13648.903397414892
Epoch Step: 55 / 138 Loss: 15.507570266723633 Tokens per Sec: 13791.004433870961
Epoch Step: 60 / 138 Loss: 9.510848045349121 Tokens per Sec: 13979.862009534196
Epoch Step: 65 / 138 Loss: 10.62437915802002 Tokens per Sec: 13498.204518873425
Epoch Step: 70 / 138 Loss: 10.785266876220703 Tokens per Sec: 13716.439592643383
Epoch Step: 75 / 138 Loss: 17.112218856811523 Tokens per Sec: 13037.097133677415
Epoch Step: 80 / 138 Loss: 11.080700874328613 Tokens per Sec: 13345.788696099082
Epoch Step: 85 / 138 Loss: 11.691437721252441 Tokens per Sec: 14190.763390302425
Epoch Step: 90 / 138 Loss: 9.973930358886719 Tokens per Sec: 13633.516144289859
Epoch Step: 95 / 138 Loss: 10.48505973815918 Tokens per Sec: 14147.184347972723
Epoch Step: 100 / 138 Loss: 12.970232009887695 Tokens per Sec: 13066.473716818928
Epoch Step: 105 / 138 Loss: 10.878374099731445 Tokens per Sec: 13521.293130647244
Epoch Step: 110 / 138 Loss: 9.741471290588379 Tokens per Sec: 12318.814170274774
Epoch Step: 115 / 138 Loss: 15.06816291809082 Tokens per Sec: 12906.044189864257
Epoch Step: 120 / 138 Loss: 105.99513244628906 Tokens per Sec: 12677.558243805943
Epoch Step: 125 / 138 Loss: 15.5867280960083 Tokens per Sec: 12211.004701604283
Epoch Step: 130 / 138 Loss: 54.056148529052734 Tokens per Sec: 12874.244759156454
Epoch Step: 135 / 138 Loss: 12.562703132629395 Tokens per Sec: 12807.745068194032
Epoch ended with duration 0:00:48.038544
Train perplexity: 1.3850167594165472
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.818140
Validation perplexity: 1.3023322619644835
Epoch 183 / 1000
Epoch Step: 5 / 138 Loss: 13.16435432434082 Tokens per Sec: 13229.776981714227
Epoch Step: 10 / 138 Loss: 12.720520973205566 Tokens per Sec: 13624.055353121077
Epoch Step: 15 / 138 Loss: 8.999220848083496 Tokens per Sec: 13000.65461766162
Epoch Step: 20 / 138 Loss: 13.317435264587402 Tokens per Sec: 13274.420547123567
Epoch Step: 25 / 138 Loss: 10.879576683044434 Tokens per Sec: 13917.57452550795
Epoch Step: 30 / 138 Loss: 7.063667297363281 Tokens per Sec: 14105.891760388657
Epoch Step: 35 / 138 Loss: 15.465678215026855 Tokens per Sec: 13207.697416593126
Epoch Step: 40 / 138 Loss: 7.127816677093506 Tokens per Sec: 14138.836780321562
Epoch Step: 45 / 138 Loss: 12.95744514465332 Tokens per Sec: 13327.482612409183
Epoch Step: 50 / 138 Loss: 35.48149490356445 Tokens per Sec: 14115.777029590328
Epoch Step: 55 / 138 Loss: 14.92547607421875 Tokens per Sec: 13364.364372721042
Epoch Step: 60 / 138 Loss: 123.15398406982422 Tokens per Sec: 13282.699526196131
Epoch Step: 65 / 138 Loss: 17.265016555786133 Tokens per Sec: 13387.733008296964
Epoch Step: 70 / 138 Loss: 16.54363441467285 Tokens per Sec: 13470.15673216616
Epoch Step: 75 / 138 Loss: 137.10215759277344 Tokens per Sec: 12986.93364352424
Epoch Step: 80 / 138 Loss: 93.26197814941406 Tokens per Sec: 13478.458444330472
Epoch Step: 85 / 138 Loss: 15.079651832580566 Tokens per Sec: 13874.482572791023
Epoch Step: 90 / 138 Loss: 15.063786506652832 Tokens per Sec: 13806.527478944701
Epoch Step: 95 / 138 Loss: 11.448512077331543 Tokens per Sec: 13896.822722874756
Epoch Step: 100 / 138 Loss: 13.989901542663574 Tokens per Sec: 13711.752902943002
Epoch Step: 105 / 138 Loss: 13.257697105407715 Tokens per Sec: 12965.103692189336
Epoch Step: 110 / 138 Loss: 12.765487670898438 Tokens per Sec: 13656.77272948583
Epoch Step: 115 / 138 Loss: 12.032732963562012 Tokens per Sec: 11762.51468914612
Epoch Step: 120 / 138 Loss: 13.920961380004883 Tokens per Sec: 12747.638326684222
Epoch Step: 125 / 138 Loss: 15.830635070800781 Tokens per Sec: 13448.868244422181
Epoch Step: 130 / 138 Loss: 8.843059539794922 Tokens per Sec: 13117.375585012138
Epoch Step: 135 / 138 Loss: 13.978403091430664 Tokens per Sec: 12936.408341162805
Epoch ended with duration 0:00:47.638877
Train perplexity: 1.2863877073560732
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.830148
Validation perplexity: 1.4312851033119363
Epoch 184 / 1000
Epoch Step: 5 / 138 Loss: 7.7197041511535645 Tokens per Sec: 13585.184544631229
Epoch Step: 10 / 138 Loss: 12.866317749023438 Tokens per Sec: 13551.371785579076
Epoch Step: 15 / 138 Loss: 14.653864860534668 Tokens per Sec: 12893.70914705625
Epoch Step: 20 / 138 Loss: 15.278406143188477 Tokens per Sec: 14162.22483389066
Epoch Step: 25 / 138 Loss: 17.239351272583008 Tokens per Sec: 12950.096854760259
Epoch Step: 30 / 138 Loss: 13.297608375549316 Tokens per Sec: 12850.661641869014
Epoch Step: 35 / 138 Loss: 12.817882537841797 Tokens per Sec: 13292.256740851846
Epoch Step: 40 / 138 Loss: 9.318731307983398 Tokens per Sec: 14027.807653133275
Epoch Step: 45 / 138 Loss: 9.165764808654785 Tokens per Sec: 13353.836771409493
Epoch Step: 50 / 138 Loss: 15.955825805664062 Tokens per Sec: 13444.652814285466
Epoch Step: 55 / 138 Loss: 141.76010131835938 Tokens per Sec: 13266.378251138989
Epoch Step: 60 / 138 Loss: 15.132209777832031 Tokens per Sec: 13600.409421962813
Epoch Step: 65 / 138 Loss: 70.77100372314453 Tokens per Sec: 13529.88677827863
Epoch Step: 70 / 138 Loss: 8.185432434082031 Tokens per Sec: 13979.300860988831
Epoch Step: 75 / 138 Loss: 9.224407196044922 Tokens per Sec: 13741.878802823629
Epoch Step: 80 / 138 Loss: 18.80044174194336 Tokens per Sec: 13438.14357057151
Epoch Step: 85 / 138 Loss: 12.912657737731934 Tokens per Sec: 13719.463048785768
Epoch Step: 90 / 138 Loss: 9.823712348937988 Tokens per Sec: 12623.183613187255
Epoch Step: 95 / 138 Loss: 13.53872299194336 Tokens per Sec: 13552.788680648047
Epoch Step: 100 / 138 Loss: 19.81334114074707 Tokens per Sec: 13520.926259234386
Epoch Step: 105 / 138 Loss: 14.885760307312012 Tokens per Sec: 13278.820191009838
Epoch Step: 110 / 138 Loss: 12.727052688598633 Tokens per Sec: 13183.115876455902
Epoch Step: 115 / 138 Loss: 9.515814781188965 Tokens per Sec: 13221.10910313798
Epoch Step: 120 / 138 Loss: 14.454395294189453 Tokens per Sec: 12513.396129512164
Epoch Step: 125 / 138 Loss: 13.847408294677734 Tokens per Sec: 12289.023571039674
Epoch Step: 130 / 138 Loss: 10.676850318908691 Tokens per Sec: 12672.185762592495
Epoch Step: 135 / 138 Loss: 63.965721130371094 Tokens per Sec: 12912.965459409064
Epoch ended with duration 0:00:47.927388
Train perplexity: 1.3784519032641398
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.880726
Validation perplexity: 1.648259801469258
Epoch 185 / 1000
Epoch Step: 5 / 138 Loss: 7.411377906799316 Tokens per Sec: 13120.49920426167
Epoch Step: 10 / 138 Loss: 19.483423233032227 Tokens per Sec: 13293.336277539425
Epoch Step: 15 / 138 Loss: 14.298648834228516 Tokens per Sec: 12703.098491461098
Epoch Step: 20 / 138 Loss: 14.528464317321777 Tokens per Sec: 14017.460953921476
Epoch Step: 25 / 138 Loss: 14.468646049499512 Tokens per Sec: 13888.003431561323
Epoch Step: 30 / 138 Loss: 12.313265800476074 Tokens per Sec: 13374.768852366413
Epoch Step: 35 / 138 Loss: 15.54103946685791 Tokens per Sec: 13540.653365019849
Epoch Step: 40 / 138 Loss: 11.908479690551758 Tokens per Sec: 13060.73896870017
Epoch Step: 45 / 138 Loss: 9.528703689575195 Tokens per Sec: 13527.73997072655
Epoch Step: 50 / 138 Loss: 15.832804679870605 Tokens per Sec: 13090.093596866896
Epoch Step: 55 / 138 Loss: 9.237878799438477 Tokens per Sec: 13676.752663145538
Epoch Step: 60 / 138 Loss: 14.364056587219238 Tokens per Sec: 13484.127784879058
Epoch Step: 65 / 138 Loss: 8.811514854431152 Tokens per Sec: 13528.502933408929
Epoch Step: 70 / 138 Loss: 8.32055950164795 Tokens per Sec: 13634.278567872087
Epoch Step: 75 / 138 Loss: 11.032501220703125 Tokens per Sec: 13540.000483453741
Epoch Step: 80 / 138 Loss: 13.690560340881348 Tokens per Sec: 13319.877560434457
Epoch Step: 85 / 138 Loss: 13.719164848327637 Tokens per Sec: 12937.433452685988
Epoch Step: 90 / 138 Loss: 9.313770294189453 Tokens per Sec: 13950.350709320246
Epoch Step: 95 / 138 Loss: 15.746328353881836 Tokens per Sec: 13323.056801372204
Epoch Step: 100 / 138 Loss: 12.099763870239258 Tokens per Sec: 13789.308027944831
Epoch Step: 105 / 138 Loss: 12.532916069030762 Tokens per Sec: 13270.314610506162
Epoch Step: 110 / 138 Loss: 10.561725616455078 Tokens per Sec: 12856.81884532073
Epoch Step: 115 / 138 Loss: 53.2550048828125 Tokens per Sec: 12284.365386617137
Epoch Step: 120 / 138 Loss: 11.629999160766602 Tokens per Sec: 13464.611912886641
Epoch Step: 125 / 138 Loss: 9.9677095413208 Tokens per Sec: 12992.667916651926
Epoch Step: 130 / 138 Loss: 13.90882396697998 Tokens per Sec: 13334.89878348037
Epoch Step: 135 / 138 Loss: 13.757790565490723 Tokens per Sec: 12975.64294222506
Epoch ended with duration 0:00:47.846571
Train perplexity: 1.3411127929879232
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.872426
Validation perplexity: 1.5161677762678456
Model saved checkpoint!
Epoch 186 / 1000
Epoch Step: 5 / 138 Loss: 13.015771865844727 Tokens per Sec: 13050.108444631658
Epoch Step: 10 / 138 Loss: 13.345433235168457 Tokens per Sec: 12829.235582998532
Epoch Step: 15 / 138 Loss: 111.43679809570312 Tokens per Sec: 12397.923315499045
Epoch Step: 20 / 138 Loss: 12.161818504333496 Tokens per Sec: 12779.716657571671
Epoch Step: 25 / 138 Loss: 84.78270721435547 Tokens per Sec: 12231.904055432973
Epoch Step: 30 / 138 Loss: 14.225824356079102 Tokens per Sec: 12632.358752924345
Epoch Step: 35 / 138 Loss: 11.504422187805176 Tokens per Sec: 12662.574538549641
Epoch Step: 40 / 138 Loss: 10.428084373474121 Tokens per Sec: 12879.701804665681
Epoch Step: 45 / 138 Loss: 138.3328094482422 Tokens per Sec: 12168.163147472316
Epoch Step: 50 / 138 Loss: 94.52462768554688 Tokens per Sec: 12015.499019354305
Epoch Step: 55 / 138 Loss: 9.878268241882324 Tokens per Sec: 12357.371855272742
Epoch Step: 60 / 138 Loss: 10.884029388427734 Tokens per Sec: 12627.560818620077
Epoch Step: 65 / 138 Loss: 9.994595527648926 Tokens per Sec: 12973.530756431797
Epoch Step: 70 / 138 Loss: 17.290271759033203 Tokens per Sec: 12336.488715622087
Epoch Step: 75 / 138 Loss: 13.964164733886719 Tokens per Sec: 13105.787402107011
Epoch Step: 80 / 138 Loss: 16.384668350219727 Tokens per Sec: 12448.056422429549
Epoch Step: 85 / 138 Loss: 10.438218116760254 Tokens per Sec: 12461.547429811468
Epoch Step: 90 / 138 Loss: 14.833513259887695 Tokens per Sec: 13147.280678869578
Epoch Step: 95 / 138 Loss: 148.18289184570312 Tokens per Sec: 12613.43276373193
Epoch Step: 100 / 138 Loss: 69.21402740478516 Tokens per Sec: 12855.400285442154
Epoch Step: 105 / 138 Loss: 10.98585033416748 Tokens per Sec: 12303.001685120398
Epoch Step: 110 / 138 Loss: 18.335750579833984 Tokens per Sec: 12424.768454955934
Epoch Step: 115 / 138 Loss: 11.941093444824219 Tokens per Sec: 11575.987733184676
Epoch Step: 120 / 138 Loss: 15.609479904174805 Tokens per Sec: 11856.709472219283
Epoch Step: 125 / 138 Loss: 11.050506591796875 Tokens per Sec: 12317.621905719025
Epoch Step: 130 / 138 Loss: 12.859969139099121 Tokens per Sec: 12513.93783513843
Epoch Step: 135 / 138 Loss: 15.375838279724121 Tokens per Sec: 10600.340177805105
Epoch ended with duration 0:00:51.292681
Train perplexity: 1.454912128973486
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.888312
Validation perplexity: 1.563492592078913
Epoch 187 / 1000
Epoch Step: 5 / 138 Loss: 7.704952716827393 Tokens per Sec: 12253.932728837965
Epoch Step: 10 / 138 Loss: 11.894956588745117 Tokens per Sec: 11946.813904058203
Epoch Step: 15 / 138 Loss: 13.012619972229004 Tokens per Sec: 13018.873136742834
Epoch Step: 20 / 138 Loss: 16.56728172302246 Tokens per Sec: 12162.917550928469
Epoch Step: 25 / 138 Loss: 61.0988655090332 Tokens per Sec: 12473.909770439166
Epoch Step: 30 / 138 Loss: 15.902807235717773 Tokens per Sec: 12950.216358796783
Epoch Step: 35 / 138 Loss: 9.577147483825684 Tokens per Sec: 12019.367537533357
Epoch Step: 40 / 138 Loss: 6.855583667755127 Tokens per Sec: 13207.92108952918
Epoch Step: 45 / 138 Loss: 14.299644470214844 Tokens per Sec: 12950.5790533009
Epoch Step: 50 / 138 Loss: 17.293577194213867 Tokens per Sec: 12670.509766680962
Epoch Step: 55 / 138 Loss: 9.415545463562012 Tokens per Sec: 12313.261840312538
Epoch Step: 60 / 138 Loss: 24.162885665893555 Tokens per Sec: 11671.506569886307
Epoch Step: 65 / 138 Loss: 12.290692329406738 Tokens per Sec: 12907.876583388344
Epoch Step: 70 / 138 Loss: 14.374053001403809 Tokens per Sec: 13317.084614730707
Epoch Step: 75 / 138 Loss: 12.725982666015625 Tokens per Sec: 12897.06437620386
Epoch Step: 80 / 138 Loss: 11.081747055053711 Tokens per Sec: 13140.497858784629
Epoch Step: 85 / 138 Loss: 9.372974395751953 Tokens per Sec: 12462.09865691967
Epoch Step: 90 / 138 Loss: 10.278351783752441 Tokens per Sec: 11790.58553938945
Epoch Step: 95 / 138 Loss: 9.704212188720703 Tokens per Sec: 13068.710455283039
Epoch Step: 100 / 138 Loss: 14.080220222473145 Tokens per Sec: 12611.394429204576
Epoch Step: 105 / 138 Loss: 9.463761329650879 Tokens per Sec: 11864.416360785313
Epoch Step: 110 / 138 Loss: 12.165338516235352 Tokens per Sec: 12404.238578544346
Epoch Step: 115 / 138 Loss: 8.778685569763184 Tokens per Sec: 11972.591280075341
Epoch Step: 120 / 138 Loss: 10.230798721313477 Tokens per Sec: 12333.286801269018
Epoch Step: 125 / 138 Loss: 12.08084487915039 Tokens per Sec: 11886.892333757778
Epoch Step: 130 / 138 Loss: 11.180032730102539 Tokens per Sec: 12296.767022098173
Epoch Step: 135 / 138 Loss: 88.6409683227539 Tokens per Sec: 12266.747216323223
Epoch ended with duration 0:00:51.224578
Train perplexity: 1.326198604284152
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.892668
Validation perplexity: 1.599458587123771
Epoch 188 / 1000
Epoch Step: 5 / 138 Loss: 11.543490409851074 Tokens per Sec: 12821.37221178759
Epoch Step: 10 / 138 Loss: 11.98085880279541 Tokens per Sec: 12488.09123259093
Epoch Step: 15 / 138 Loss: 8.622366905212402 Tokens per Sec: 13063.109674512914
Epoch Step: 20 / 138 Loss: 10.89358901977539 Tokens per Sec: 12512.705075416212
Epoch Step: 25 / 138 Loss: 15.556144714355469 Tokens per Sec: 12498.063403778098
Epoch Step: 30 / 138 Loss: 135.1956787109375 Tokens per Sec: 11821.844486977634
Epoch Step: 35 / 138 Loss: 98.89161682128906 Tokens per Sec: 12514.775024197012
Epoch Step: 40 / 138 Loss: 74.18043518066406 Tokens per Sec: 12018.265207249238
Epoch Step: 45 / 138 Loss: 23.433151245117188 Tokens per Sec: 12211.953365967922
Epoch Step: 50 / 138 Loss: 7.205718040466309 Tokens per Sec: 12583.862044394002
Epoch Step: 55 / 138 Loss: 15.163418769836426 Tokens per Sec: 12704.779553045479
Epoch Step: 60 / 138 Loss: 15.976428985595703 Tokens per Sec: 12712.196402901207
Epoch Step: 65 / 138 Loss: 15.370617866516113 Tokens per Sec: 12751.375368610295
Epoch Step: 70 / 138 Loss: 18.831647872924805 Tokens per Sec: 12545.181128490452
Epoch Step: 75 / 138 Loss: 13.599198341369629 Tokens per Sec: 13151.929340498911
Epoch Step: 80 / 138 Loss: 12.000505447387695 Tokens per Sec: 13034.225748273944
Epoch Step: 85 / 138 Loss: 14.039130210876465 Tokens per Sec: 12562.45984187093
Epoch Step: 90 / 138 Loss: 8.894640922546387 Tokens per Sec: 12582.516777160457
Epoch Step: 95 / 138 Loss: 12.16754150390625 Tokens per Sec: 12491.846001013431
Epoch Step: 100 / 138 Loss: 10.167086601257324 Tokens per Sec: 12879.917072684239
Epoch Step: 105 / 138 Loss: 10.153165817260742 Tokens per Sec: 11852.17381814034
Epoch Step: 110 / 138 Loss: 17.1016845703125 Tokens per Sec: 12442.003416056918
Epoch Step: 115 / 138 Loss: 12.0462646484375 Tokens per Sec: 11776.366838451348
Epoch Step: 120 / 138 Loss: 10.402876853942871 Tokens per Sec: 12342.98116571459
Epoch Step: 125 / 138 Loss: 11.852478981018066 Tokens per Sec: 11065.058917467168
Epoch Step: 130 / 138 Loss: 12.78097915649414 Tokens per Sec: 11932.397688235218
Epoch Step: 135 / 138 Loss: 123.46858978271484 Tokens per Sec: 12278.05817061251
Epoch ended with duration 0:00:51.381530
Train perplexity: 1.3679305440278646
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.792587
Validation perplexity: 1.298243798899204
Epoch 189 / 1000
Epoch Step: 5 / 138 Loss: 12.891825675964355 Tokens per Sec: 13105.687307054763
Epoch Step: 10 / 138 Loss: 9.465989112854004 Tokens per Sec: 12405.192655901496
Epoch Step: 15 / 138 Loss: 13.554350852966309 Tokens per Sec: 12180.65605901742
Epoch Step: 20 / 138 Loss: 18.46575164794922 Tokens per Sec: 12094.608157191307
Epoch Step: 25 / 138 Loss: 20.249053955078125 Tokens per Sec: 12404.228522406504
Epoch Step: 30 / 138 Loss: 10.003989219665527 Tokens per Sec: 12915.893269211601
Epoch Step: 35 / 138 Loss: 8.605820655822754 Tokens per Sec: 13052.612176064691
Epoch Step: 40 / 138 Loss: 19.733139038085938 Tokens per Sec: 12470.322365577855
Epoch Step: 45 / 138 Loss: 13.035789489746094 Tokens per Sec: 13497.542304032517
Epoch Step: 50 / 138 Loss: 12.30990982055664 Tokens per Sec: 12801.891112939922
Epoch Step: 55 / 138 Loss: 13.689051628112793 Tokens per Sec: 13119.272571829504
Epoch Step: 60 / 138 Loss: 15.092835426330566 Tokens per Sec: 12772.27193051351
Epoch Step: 65 / 138 Loss: 9.394465446472168 Tokens per Sec: 12764.960783556277
Epoch Step: 70 / 138 Loss: 12.42772388458252 Tokens per Sec: 11741.108335516581
Epoch Step: 75 / 138 Loss: 15.530125617980957 Tokens per Sec: 12291.891775094517
Epoch Step: 80 / 138 Loss: 17.495973587036133 Tokens per Sec: 12794.934224296681
Epoch Step: 85 / 138 Loss: 95.78141021728516 Tokens per Sec: 12772.44566121375
Epoch Step: 90 / 138 Loss: 5.9165568351745605 Tokens per Sec: 12928.751095311269
Epoch Step: 95 / 138 Loss: 115.41651153564453 Tokens per Sec: 12149.194806276466
Epoch Step: 100 / 138 Loss: 11.518649101257324 Tokens per Sec: 12268.185407637038
Epoch Step: 105 / 138 Loss: 14.187271118164062 Tokens per Sec: 12246.246530153549
Epoch Step: 110 / 138 Loss: 9.460732460021973 Tokens per Sec: 11810.369950615417
Epoch Step: 115 / 138 Loss: 13.238956451416016 Tokens per Sec: 12259.8716656905
Epoch Step: 120 / 138 Loss: 12.581427574157715 Tokens per Sec: 12014.421843262817
Epoch Step: 125 / 138 Loss: 12.634069442749023 Tokens per Sec: 12308.079800366075
Epoch Step: 130 / 138 Loss: 99.78805541992188 Tokens per Sec: 11466.036311356474
Epoch Step: 135 / 138 Loss: 10.659431457519531 Tokens per Sec: 12077.115685579227
Epoch ended with duration 0:00:51.164474
Train perplexity: 1.3339904096915223
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.833106
Validation perplexity: 1.402537735743842
Epoch 190 / 1000
Epoch Step: 5 / 138 Loss: 9.041078567504883 Tokens per Sec: 11725.288831490796
Epoch Step: 10 / 138 Loss: 11.315902709960938 Tokens per Sec: 13228.545849278673
Epoch Step: 15 / 138 Loss: 14.373669624328613 Tokens per Sec: 13352.991767858377
Epoch Step: 20 / 138 Loss: 12.839096069335938 Tokens per Sec: 12701.699807668538
Epoch Step: 25 / 138 Loss: 10.985067367553711 Tokens per Sec: 12926.858585864196
Epoch Step: 30 / 138 Loss: 9.062347412109375 Tokens per Sec: 12181.511815040869
Epoch Step: 35 / 138 Loss: 10.489108085632324 Tokens per Sec: 12105.818508092814
Epoch Step: 40 / 138 Loss: 14.731721878051758 Tokens per Sec: 12557.35267087194
Epoch Step: 45 / 138 Loss: 116.74893188476562 Tokens per Sec: 11703.380847462535
Epoch Step: 50 / 138 Loss: 113.9206771850586 Tokens per Sec: 13117.425156979974
Epoch Step: 55 / 138 Loss: 8.539397239685059 Tokens per Sec: 13081.676204983829
Epoch Step: 60 / 138 Loss: 16.90081214904785 Tokens per Sec: 12208.963439196328
Epoch Step: 65 / 138 Loss: 19.712764739990234 Tokens per Sec: 13189.25602864762
Epoch Step: 70 / 138 Loss: 11.48660945892334 Tokens per Sec: 12710.791692964978
Epoch Step: 75 / 138 Loss: 100.44037628173828 Tokens per Sec: 12024.437899540651
Epoch Step: 80 / 138 Loss: 146.69740295410156 Tokens per Sec: 12077.723716935712
Epoch Step: 85 / 138 Loss: 22.3819580078125 Tokens per Sec: 12776.303677116153
Epoch Step: 90 / 138 Loss: 12.057221412658691 Tokens per Sec: 12969.592101651695
Epoch Step: 95 / 138 Loss: 9.026930809020996 Tokens per Sec: 12930.524694348913
Epoch Step: 100 / 138 Loss: 15.95146656036377 Tokens per Sec: 12118.913107206537
Epoch Step: 105 / 138 Loss: 9.321561813354492 Tokens per Sec: 11933.949991119727
Epoch Step: 110 / 138 Loss: 13.992982864379883 Tokens per Sec: 12204.241375118014
Epoch Step: 115 / 138 Loss: 11.118390083312988 Tokens per Sec: 12263.981496747634
Epoch Step: 120 / 138 Loss: 14.794869422912598 Tokens per Sec: 11020.535198227288
Epoch Step: 125 / 138 Loss: 10.098471641540527 Tokens per Sec: 12325.354316688305
Epoch Step: 130 / 138 Loss: 80.03471374511719 Tokens per Sec: 11838.11876000595
Epoch Step: 135 / 138 Loss: 8.616024017333984 Tokens per Sec: 12378.605924969122
Epoch ended with duration 0:00:51.300915
Train perplexity: 1.3628072423461253
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.920627
Validation perplexity: 1.7987841570612935
Model saved checkpoint!
Training was early stopped on epoch 191 with early stopping rounds 25
[24.02764041448225, 12.036186188766363, 8.445443519209963, 6.939609200196812, 6.390252270406107, 5.893962885321941, 5.646257847841985, 5.173116916359471, 5.04958446880862, 4.82611415231925, 4.267729346027694, 4.264968545624408, 4.278148700390497, 3.999799168800477, 3.796203578693178, 3.5639651216126826, 3.6546928188206924, 3.4365288091586086, 3.349968084053227, 3.149928219761898, 3.0581254437867704, 2.9560828960199648, 2.880421866660323, 3.0469546423722367, 2.876130039420851, 2.5538355552947944, 2.666240547180261, 2.6730329192956077, 2.742293128447786, 2.7363230904718194, 2.431089402780387, 2.335127142880168, 2.548564219401313, 2.2808023608906, 2.367457925307276, 2.547233033840717, 2.12936514146188, 2.456233739047817, 2.3949215352969446, 2.3202255718130886, 2.240902360572889, 2.0343369380581846, 2.1338968362355013, 2.131671071771358, 2.1169968968757904, 2.0800769998057627, 1.9375618396954064, 2.2366445711730973, 2.041439936468175, 2.01467619357519, 2.0367645938553807, 1.7653587931045178, 2.016707609816687, 2.128974746380151, 2.0331084014936724, 1.9207240422229945, 1.8422137145011233, 1.833967418230055, 1.9259355685197832, 1.9414504094270426, 2.0069451707029726, 1.951776850281701, 1.916946715153073, 1.8984318344445794, 1.843508430999999, 2.156187487275471, 1.6746588355445844, 1.750652886947397, 1.8322075570049894, 1.6452195092541881, 1.8051421125675382, 1.894245760056315, 1.8050345666045353, 1.7716977687192006, 1.8690699862866889, 1.8398205574455122, 1.81522704911743, 1.6360735719320478, 1.8114062830643856, 1.7019703443346845, 1.7128997576715308, 1.7006722323765946, 1.5911346753532312, 1.5650836006972895, 1.6108844836419582, 1.711101869207271, 1.5965435118494227, 1.6659688654553941, 1.6263263922280697, 1.5658974590510901, 1.5955798711009346, 1.5828914262014775, 1.7200510603634869, 1.5899527941116656, 1.6027671437597901, 1.5615004954311789, 1.6303467843109398, 1.6031553792344972, 1.56595847847097, 1.5986207110672526, 1.6178369313564123, 1.5545097994478558, 1.5364184655450632, 1.4724508189280672, 1.5580935507488902, 1.485425207054048, 1.482316814032129, 1.5482600565244364, 1.64087049389186, 1.57433087853335, 1.4666373519282607, 1.5966338264218665, 1.5778932418856078, 1.5282135716812473, 1.6085409312160195, 1.4434040868719273, 1.5408984362661142, 1.4694593703981522, 1.576594808795508, 1.5638746909525272, 1.4719107621392415, 1.4057562107307486, 1.5524550514755868, 1.4079860287367636, 1.5566376173833938, 1.4336631823728692, 1.460942676754869, 1.3797081954796773, 1.389407080002264, 1.5630087030053457, 1.4810359609441894, 1.5545723691916624, 1.4284010117553847, 1.3929406240790434, 1.4530097757188019, 1.4058842749142222, 1.4524729439195605, 1.365239929391808, 1.5054472905890794, 1.4316375851763632, 1.4505993441936156, 1.4064222114849674, 1.3972927129789807, 1.325265563019148, 1.3851920810341638, 1.3428900353393363, 1.3802723305030555, 1.5125771500380532, 1.4386403694793957, 1.5010546444048312, 1.4548277692239258, 1.4005216039036572, 1.3856380959838184, 1.3540946823141282, 1.3237471610967733, 1.4079918194998418, 1.382524492145976, 1.3345420158249235, 1.4456757083109455, 1.4047236032135475, 1.3260263524662694, 1.3025994839945665, 1.3163880029678672, 1.517601108854413, 1.3600854711323211, 1.3193021618876464, 1.3947516139488483, 1.412243074775482, 1.3784031997072608, 1.3933876750206993, 1.3249671668393248, 1.4455163234350261, 1.3726546344747423, 1.4412662083149024, 1.334582204982589, 1.3859763406599839, 1.4102802146652555, 1.3665965051281594, 1.4482455230690103, 1.3970874691892043, 1.2974363472210377, 1.3171244882523703, 1.3850167594165472, 1.2863877073560732, 1.3784519032641398, 1.3411127929879232, 1.454912128973486, 1.326198604284152, 1.3679305440278646, 1.3339904096915223, 1.3628072423461253]
[16.777293184942906, 9.791210823224155, 7.459015406125421, 7.162958906566647, 5.61216285973182, 5.812269461705547, 5.037229081576631, 5.119810346731699, 4.891460933124665, 4.355920071333316, 5.253031696599823, 3.9563811839491785, 4.825219202439651, 3.646147302968471, 3.1888652670585222, 4.087211911420378, 3.705150829948195, 4.021006123114417, 3.423781572386044, 2.9359617802742513, 2.857792167909725, 3.381430686204219, 2.803459222465286, 2.5959748898279322, 2.8301705790437617, 2.844636924160207, 2.5752545104837865, 2.7476388251729404, 2.5570476204534716, 3.169274897198359, 2.8021114567436434, 2.2559098794103614, 2.0240710785941376, 2.4857298826649643, 2.4992499091712723, 2.1397548993931443, 2.6976999010000746, 2.081590306202332, 2.2677448497695143, 1.8544669243190426, 2.5905040121023992, 2.098142510185046, 2.1147006566573605, 2.4469530799200623, 1.824978202451407, 2.1991520614384177, 1.7294272519070144, 2.19148177608661, 1.8980705492801566, 2.251885370342463, 1.6815220750474225, 1.8361533777915038, 1.9263612248363569, 1.9169553452793662, 2.258509496550813, 1.8977067226886724, 1.7493464526667097, 2.319913770727314, 1.7814572783654383, 1.8768989088626065, 2.464710428551991, 1.726680760596599, 2.349179794178972, 1.5900862559950446, 1.9364022102117766, 1.8178302366785934, 1.7939882853059401, 1.9894668221801886, 2.2178016497773965, 1.6699963659850299, 1.7083325836433383, 2.0595409841390517, 1.6967284138496415, 1.6939116334744513, 1.491139519561657, 1.777922958554222, 1.7972405609443758, 2.2408545688320403, 1.4639131052701617, 1.4967020719951114, 1.6290667677401576, 1.786653343159778, 1.4485091610985448, 1.5938814805799644, 1.5448324821657569, 1.5683730136934257, 1.696459145867539, 1.7600355946584465, 1.9286394084475456, 2.030151051043717, 1.9065249582113268, 1.5351289074295171, 1.7741743736708668, 1.6603939627529016, 1.4493261132785686, 1.6972264506095898, 1.5286886970870488, 1.520337848621121, 1.7414262940480314, 1.7696402227956267, 1.4872931390822859, 1.7624365454312416, 2.006319292628557, 1.7190425582461486, 1.3921098213883962, 1.8720212683887782, 1.3486326687734767, 1.571149589683061, 1.4597584158615142, 1.510685175306263, 1.5129264712957917, 1.8933633174896671, 1.36101675825895, 1.7993509162104246, 1.8205261794923508, 1.6440958366928184, 1.5303993751216691, 1.3408806174077195, 1.473004700129217, 1.7205427878329513, 1.51097090442555, 1.6510657528273838, 1.417312174517119, 1.457945539641472, 1.464901856983279, 1.6439406747576648, 1.4160086288903695, 1.4028920658822024, 1.3196678587560406, 1.707279544197279, 1.4875609160763887, 1.6936505955123264, 1.8431095615749045, 1.3156346594129782, 1.494970544444932, 1.3147398145387061, 1.4774204947144798, 1.401679900149552, 1.3902172058787896, 1.5322459829159305, 2.065933795130525, 1.808150850088354, 1.6938683265469072, 1.3049704757914427, 1.4605668922649886, 1.6172691730987108, 1.6807292886981327, 1.564583597914594, 1.5894839655574073, 1.450026824882741, 1.54593791377484, 1.420988805922805, 1.738916192052287, 1.773926238142219, 1.4429611781151765, 1.471168507400002, 1.5245016670460723, 1.44252015043983, 1.529233016284174, 1.8347287182446044, 1.62725064910993, 1.4055025618681347, 1.5672545359831498, 1.3143885994900957, 1.4294376410952685, 1.2778235196976169, 1.3389141774930031, 1.559439839106163, 1.6457763188448884, 1.6217356151889986, 1.645389321506333, 1.5312215364527668, 1.6139250202286375, 1.8339834981802472, 1.2810874850038598, 1.3085865998792097, 1.6066425102792254, 1.4333362621552999, 1.49205236183942, 1.4275543183708892, 1.3807912909898528, 1.6744302460379246, 1.3023322619644835, 1.4312851033119363, 1.648259801469258, 1.5161677762678456, 1.563492592078913, 1.599458587123771, 1.298243798899204, 1.402537735743842, 1.7987841570612935]
Model saved checkpoint!

====STARTING EVALUATION====
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: –∑–∞–º–µ–Ω–∞
diff_prev: org.junit.Assert.assertEquals
diff_updated: assertEquals 

Most common words:
         )     194026
         (     193976
         .      92332
         ;      82530
   –ø–∞–¥–¥–∏–Ω–≥      54790
         ,      54180
         {      42036
         }      41868
     VAR_1      41750
  —É–¥–∞–ª–µ–Ω–∏–µ      41184 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 )
05 (
06 .
07 ;
08 –ø–∞–¥–¥–∏–Ω–≥
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 35
—É–¥–∞–ª–µ–Ω–∏–µ 41184 13
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 23
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 54790 8
Number of words (types): 758
Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations.png...
Duration: 0:00:04.899658

Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations_8_threshold.png...
Duration: 0:00:02.063377

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations.png...
Duration: 0:00:03.415907

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations_8_threshold.png...
Duration: 0:00:01.866814

Starting conducting edit representation visualization experiment for defects4j_2d_representations.png...
Duration: 0:00:00.642131

Starting conducting edit representation visualization experiment for test300_2d_representations.png...
Duration: 0:00:01.699579

Starting conducting edit representation visualization experiment for val300_2d_representations.png...
Duration: 0:00:01.798545

Starting conducting edit representation visualization experiment for train300_2d_representations.png...
Duration: 0:00:01.722409

Starting conducting edit representation visualization experiment for test_2d_representations.png...
Duration: 0:00:05.139966

Starting conducting edit representation visualization experiment for val_2d_representations.png...
Duration: 0:00:05.124199

Starting conducting edit representation visualization experiment for train5000_2d_representations.png...
Duration: 0:00:21.524997

Start conducting accuracy calculation experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy: 32 / 388 = 0.08247422680412371
Top-3 accuracy: 35 / 388 = 0.09020618556701031
Top-5 accuracy: 38 / 388 = 0.0979381443298969
Top-10 accuracy: 38 / 388 = 0.0979381443298969
Top-50 accuracy: 39 / 388 = 0.10051546391752578
Duration: 0:01:56.439240

Start conducting accuracy calculation experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy: 75 / 244 = 0.3073770491803279
Top-3 accuracy: 84 / 244 = 0.3442622950819672
Top-5 accuracy: 84 / 244 = 0.3442622950819672
Top-10 accuracy: 85 / 244 = 0.3483606557377049
Top-50 accuracy: 85 / 244 = 0.3483606557377049
Duration: 0:01:05.942085

Start conducting accuracy calculation experiment for Defects4J...
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
Duration: 0:00:05.334323

Start conducting accuracy calculation experiment for Test dataset 300...
Top-1 accuracy: 42 / 300 = 0.14
Top-3 accuracy: 50 / 300 = 0.16666666666666666
Top-5 accuracy: 51 / 300 = 0.17
Top-10 accuracy: 54 / 300 = 0.18
Top-50 accuracy: 55 / 300 = 0.18333333333333332
Duration: 0:01:20.243268

Start conducting accuracy calculation experiment for Validation dataset 300...
Top-1 accuracy: 31 / 300 = 0.10333333333333333
Top-3 accuracy: 37 / 300 = 0.12333333333333334
Top-5 accuracy: 39 / 300 = 0.13
Top-10 accuracy: 40 / 300 = 0.13333333333333333
Top-50 accuracy: 42 / 300 = 0.14
Duration: 0:01:20.282030

Start conducting accuracy calculation experiment for Train dataset 300...
Top-1 accuracy: 62 / 300 = 0.20666666666666667
Top-3 accuracy: 68 / 300 = 0.22666666666666666
Top-5 accuracy: 68 / 300 = 0.22666666666666666
Top-10 accuracy: 70 / 300 = 0.23333333333333334
Top-50 accuracy: 73 / 300 = 0.24333333333333335
Duration: 0:01:20.940334

Start conducting one shot learning experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 3 / 64 = 0.046875
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 3 / 64 = 0.046875
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 4 / 64 = 0.0625
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 4 / 64 = 0.0625
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 4 / 64 = 0.0625

Top-1 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 22 / 324 = 0.06790123456790123
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 23 / 324 = 0.07098765432098765
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 23 / 324 = 0.07098765432098765
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 24 / 324 = 0.07407407407407407
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 26 / 324 = 0.08024691358024691
================
Correct Examples
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: static void METHOD_1 ( type , type , int , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
[32mExample #2[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
[32mExample #4[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: [0m
+++++++++++++++
[32mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
[32mExample #2[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
---------------
Class: Forbid overriding: add final to method
Golden example (True):
[32mExample #1[0m
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Pred: public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Pred: public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . this , VAR_1 ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public )[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: private void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
[32mExample #2[0m
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> void METHOD_1 ( int index , short value ) ;[0m
Pred: public )[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: public )[0m
[31mExample #2[0m
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> boolean METHOD_1 ( ) ;[0m
Pred: public )[0m
[31mExample #3[0m
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
Pred: public )[0m
[31mExample #4[0m
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> float METHOD_1 ( int index ) ;[0m
Pred: public )[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
Trg : public <unk> void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
Pred: public )[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public boolean[0m
+++++++++++++++
[31mExample #1[0m
Src : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
Trg : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . get ( ) . project ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( address ) ) , value ) ; }[0m
Pred: TYPE_1[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Pred: private[0m
[31mExample #4[0m
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; }[0m
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return r ; }[0m
Pred: [0m
[31mExample #5[0m
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Pred: private[0m
---------------
Class: Add null check
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: private void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
Trg : public void run ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
Pred: public[0m
[31mExample #2[0m
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; }[0m
[31mExample #3[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }[0m
Pred: public[0m
[31mExample #4[0m
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public )[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } }[0m
Pred: public )[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }[0m
Pred: public )[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , true ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Pred: private[0m
[31mExample #2[0m
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . StorageDomain ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #4[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , true , null , null , VAR_1 , true , null , false , null , null ) ; }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }[0m
Pred: public[0m
[31mExample #6[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Pred: public[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #10[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }[0m
Pred: static[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #12[0m
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
Pred: private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , msg ) , args ; } }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Pred: private[0m
[31mExample #15[0m
Src : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
Trg : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
Pred: public STRING_1 )[0m
[31mExample #16[0m
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Pred: public[0m
[31mExample #17[0m
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }[0m
Pred: public a )[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }[0m
Pred: public[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public constants[0m
[31mExample #20[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }[0m
Pred: private[0m
---------------
Class: Add statement,Remove thrown exception
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
Pred: private[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: static void METHOD_1 ( type , type , int , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int netId ) throws TYPE_2 ;[0m
Pred: public VAR_1 )[0m
[31mExample #2[0m
Src : public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Trg : public void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Pred: public[0m
[31mExample #3[0m
Src : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
Trg : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;[0m
Pred: public[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Pred: public[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Pred: static void METHOD_1 ( location , , VAR_1 , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
[31mExample #6[0m
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
Trg : void METHOD_1 ( int type , int VAR_2 ) ;[0m
Pred: public VAR_2 ) ; }[0m
[31mExample #7[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
Pred: public[0m
[31mExample #8[0m
Src : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) ;[0m
Pred: >[0m
[31mExample #9[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
Pred: public VAR_2 )[0m
[31mExample #10[0m
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Pred: public[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
Pred: public[0m
[31mExample #12[0m
Src : native boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Trg : native boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Pred: ,[0m
[31mExample #13[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Pred: public null[0m
[31mExample #14[0m
Src : void METHOD_1 ( boolean VAR_1 ) ;[0m
Trg : void METHOD_1 ( ) ;[0m
Pred: public[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: public VAR_2 }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Pred: private[0m
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
Pred: public java.lang.Boolean ( ) ; }[0m
---------------
Class: Add/Remove this qualifier
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public[0m
---------------
Class: Broad method visibility
Golden example (False):
[31mExample #1[0m
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: [0m
[31mExample #2[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Pred: private static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
[31mExample #3[0m
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public )[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Pred: public[0m
[31mExample #5[0m
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Pred: public private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #6[0m
Src : private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public[0m
[31mExample #8[0m
Src : protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Trg : public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Pred: public protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Pred: public[0m
[31mExample #10[0m
Src : private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Trg : protected boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Pred: public static boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
[31mExample #11[0m
Src : private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #12[0m
Src : protected TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Trg : public TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Pred: public )[0m
[31mExample #13[0m
Src : protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Trg : public void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Pred: public[0m
[31mExample #14[0m
Src : private static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Trg : public static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Pred: [0m
[31mExample #15[0m
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Pred: public protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: public VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Pred: public )[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Pred: private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Pred: ([0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return METHOD_3 ( VAR_1 ) ; }[0m
Pred: protected void TYPE_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . Matchers org.ovirt.engine.core.compat.Guid org.ovirt.engine.core.compat.Guid . VAR_3 ( class ) ) ) . thenReturn ( vm ) ; }[0m
---------------
Class: Change method return value
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( ) { return false ; }[0m
Trg : public boolean METHOD_1 ( ) { return true ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
Trg : protected java.lang.String getRefName ( ) { return ref ; }[0m
Pred: public STRING_1 )[0m
---------------
Class: Change method return value,Change return type
Golden example (False):
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
Pred: public public METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
Pred: public )[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Pred: public )[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public )[0m
[31mExample #3[0m
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
[31mExample #4[0m
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Pred: private static long METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
[31mExample #5[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Pred: public )[0m
[31mExample #6[0m
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Trg : private static org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Pred: private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
[31mExample #7[0m
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Pred: public java.lang.String ref[0m
[31mExample #8[0m
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Pred: private static METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
[31mExample #9[0m
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #10[0m
Src : private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Trg : private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Pred: public protected protected protected , r , r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
[31mExample #11[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . network object ) { return object . METHOD_1 ( ) ; }[0m
Trg : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
Pred: public )[0m
[31mExample #12[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . METHOD_1 ( ) . size ( ) ) ; }[0m
Pred: public object ( ) ) ; }[0m
[31mExample #13[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: ,[0m
[31mExample #14[0m
Src : public static native byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
Trg : public static native byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
Pred: public )[0m
[31mExample #15[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return ( java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Pred: public object ( )[0m
[31mExample #16[0m
Src : native void METHOD_1 ( int VAR_1 , int VAR_2 ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
Pred: public VAR_2[0m
[31mExample #17[0m
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: static void METHOD_1 ( VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #18[0m
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Pred: public[0m
[31mExample #19[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: ,[0m
[31mExample #20[0m
Src : public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Pred: public )[0m
[31mExample #21[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: protected[0m
[31mExample #22[0m
Src : public static native void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
Pred: public )[0m
[31mExample #23[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Pred: public java.lang.String ref[0m
[31mExample #24[0m
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Pred: static void METHOD_1 ( VAR_2 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
[31mExample #25[0m
Src : public static native void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
Pred: public )[0m
[31mExample #26[0m
Src : native void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Pred: ,[0m
[31mExample #27[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { network ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) ; }[0m
Pred: public VAR_1 )[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
Pred: public java.lang.String TYPE_1 METHOD_1 ( id id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public public static METHOD_1 ( ( args args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #6[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Pred: public public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 , size . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
---------------
Class: Change return type
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public )[0m
+++++++++++++++
[31mExample #1[0m
Src : protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface : : null ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public )[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = dao . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
[31mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Pred: public static METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Pred: static void METHOD_1 ( VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , false ) ; }[0m
[31mExample #4[0m
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #2[0m
Src : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
Pred: private[0m
[31mExample #3[0m
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Pred: private[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException expected ) { } } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
---------------
Class: Narrow method visibility
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public null[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Pred: public protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Pred: public protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
[31mExample #3[0m
Src : protected synchronized void METHOD_1 ( ) { }[0m
Trg : public synchronized void METHOD_1 ( ) { }[0m
Pred: public[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( ) { return user ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { return user ; }[0m
Pred: public[0m
[31mExample #5[0m
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
---------------
Class: Remove condition
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
Trg : public static TYPE_1 getInstance ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = return VAR_1 ; } }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . this , VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args ) ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a b ; return c ; }[0m
[31mExample #4[0m
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = storageDomain . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Pred: public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
[31mExample #5[0m
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }[0m
Pred: public VAR_1 )[0m
[31mExample #6[0m
Src : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
Trg : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; }[0m
Pred: private void Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
[31mExample #7[0m
Src : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
Trg : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
Pred: public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
[31mExample #8[0m
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public )[0m
[31mExample #10[0m
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
Pred: public[0m
[31mExample #11[0m
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
Pred: public )[0m
[31mExample #13[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a b ; return c ; }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public )[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Pred: public[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }[0m
Pred: public null[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , branch , null , null ) ; }[0m
Pred: [0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
Pred: public ) ; }[0m
[31mExample #9[0m
Src : public TYPE_1 create ( ) { return new TYPE_1 ( this , null ) ; }[0m
Trg : public TYPE_1 create ( ) { return new TYPE_1 ( this ) ; }[0m
Pred: public this )[0m
[31mExample #10[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , result ) ; }[0m
[31mExample #12[0m
Src : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public VAR_2 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) , null ) , false , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
[31mExample #16[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , version ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #17[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
Pred: public STRING_1[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }[0m
Pred: public }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { when ( validator ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
[31mExample #22[0m
Src : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
Pred: ( ) ) ; }[0m
[31mExample #23[0m
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 ) ; }[0m
Pred: public[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }[0m
Pred: public java.util.List ( ) ; }[0m
[31mExample #25[0m
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
[31mExample #27[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
Pred: public[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 ) . ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Pred: public[0m
[31mExample #30[0m
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Pred: static void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
---------------
Class: Remove redundant initialization
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: private void METHOD_1 ( ) { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public )[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }[0m
Pred: public VAR_1 )[0m
[31mExample #2[0m
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
Trg : public void info ( java.lang.String msg ) { log ( TYPE_1 , msg ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #8[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Pred: [0m
[31mExample #9[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
[31mExample #10[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Pred: private static int METHOD_1 ( int x , int y ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) { when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #12[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
Pred: public[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Pred: public INT_1 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , STRING_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
[31mExample #16[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
Pred: TYPE_1 METHOD_1 ( model ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { } null ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
[31mExample #19[0m
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
Pred: public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
[31mExample #20[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Pred: private static int METHOD_1 ( int x , int y ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
[31mExample #22[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: public VAR_2 ) ; }[0m
[31mExample #23[0m
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: protected ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
[31mExample #25[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #26[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Pred: public ) ; }[0m
[31mExample #27[0m
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }[0m
Pred: public void METHOD_1 ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Pred: private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 ) { }[0m
Pred: public STRING_1 )[0m
[31mExample #30[0m
Src : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
Trg : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
[31mExample #31[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { Main . METHOD_3 ( ) ; }[0m
Pred: public[0m
[31mExample #32[0m
Src : public static int METHOD_1 ( int arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - arg1 ) - VAR_1 ; }[0m
Trg : public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( - arg1 ) - VAR_1 ; }[0m
Pred: public[0m
[31mExample #33[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #34[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
Pred: public )[0m
[31mExample #35[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Pred: public )[0m
[31mExample #36[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #37[0m
Src : public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public STRING_1 )[0m
[31mExample #38[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: [0m
[31mExample #39[0m
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Pred: public[0m
[31mExample #40[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
[31mExample #41[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #42[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #43[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
[31mExample #44[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 value ) { this . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
[31mExample #45[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }[0m
Pred: public[0m
[31mExample #46[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #47[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
[31mExample #48[0m
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
[31mExample #49[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Pred: private void METHOD_1 ( VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
[31mExample #50[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
Pred: public[0m
[31mExample #51[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
Pred: public[0m
[31mExample #52[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Pred: public[0m
[31mExample #53[0m
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
Pred: public[0m
[31mExample #54[0m
Src : public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Trg : public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Pred: public static long METHOD_1 ( long arg1 , long VAR_1 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
[31mExample #55[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: [0m
[31mExample #56[0m
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }[0m
Pred: public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
[31mExample #57[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
[31mExample #58[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
Pred: public INT_1 ) ; }[0m
[31mExample #59[0m
Src : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
Trg : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
Pred: public this ) ; }[0m
[31mExample #60[0m
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Pred: public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
[31mExample #61[0m
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: private void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Pred: public target )[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
Pred: public void void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
[31mExample #5[0m
Src : boolean METHOD_1 ( ) ;[0m
Trg : boolean validate ( ) ;[0m
Pred: public[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 ( ) ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
---------------
Class: Rename parameter
Golden example (False):
[31mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public native boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public[0m
[31mExample #2[0m
Src : public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
Trg : public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
Pred: public[0m
[31mExample #3[0m
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
Pred: public VAR_1 )[0m
[31mExample #4[0m
Src : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) ;[0m
Trg : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version ) ;[0m
Pred: public Version version )[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
Trg : private <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: public )[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true , true ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { java.lang.System.out.println ( STRING_1 ) ; } }[0m
Pred: public public static METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } } }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
[31mExample #6[0m
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Pred: public private static TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Pred: ([0m
[31mExample #2[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( TYPE_2 > ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
[31mExample #4[0m
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( TYPE_1 > version , version . toString ( ) , returnValue ) ; }[0m
[31mExample #5[0m
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Pred: protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( address ) ) ) ; }[0m
Pred: )[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , res . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
Pred: public[0m
[31mExample #6[0m
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
Pred: public public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . isEqualTo ( STRING_1 ) ; }[0m
Pred: public STRING_2 ([0m
[31mExample #9[0m
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; } return false ; }[0m
[31mExample #10[0m
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Pred: public[0m
[31mExample #13[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public value )[0m
[31mExample #15[0m
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; } return VAR_1 ; }[0m
[31mExample #16[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }[0m
Pred: public )[0m
[31mExample #17[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getStoragePoolId ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Pred: private void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
[31mExample #20[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . getStoragePoolId ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
[31mExample #21[0m
Src : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Trg : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }[0m
Pred: public[0m
[31mExample #22[0m
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
Pred: public VAR_2 ) ; }[0m
[31mExample #23[0m
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #25[0m
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public )[0m
[31mExample #26[0m
Src : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
Trg : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . getName ( ) ; }[0m
Pred: public )[0m
[31mExample #27[0m
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public )[0m
[31mExample #28[0m
Src : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_1 ( storage ) ; }[0m
Pred: public storage )[0m
[31mExample #29[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }[0m
Pred: public[0m
[31mExample #30[0m
Src : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
---------------
Class: Replace statement
Golden example (False):
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
Pred: public java.lang.String ref )[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
[31mExample #2[0m
Src : public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
Trg : public static long METHOD_1 ( ) { long VAR_1 = 10 ; int VAR_2 = 3 ; return VAR_1 & VAR_2 ; }[0m
Pred: public public long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
---------------
Class: unclear
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
Trg : protected <unk> byte METHOD_1 ( ) throws java.io.IOException ;[0m
Pred: public )[0m
[31mExample #2[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
Pred: public )[0m
---------------
================
Duration: 0:03:43.567175

Start conducting one shot learning experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 14 / 56 = 0.25
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 15 / 56 = 0.26785714285714285
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 15 / 56 = 0.26785714285714285
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 15 / 56 = 0.26785714285714285
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 15 / 56 = 0.26785714285714285

Top-1 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 33 / 188 = 0.17553191489361702
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 35 / 188 = 0.18617021276595744
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 38 / 188 = 0.20212765957446807
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 38 / 188 = 0.20212765957446807
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 38 / 188 = 0.20212765957446807
================
Correct Examples
Class: Add braces to if statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; return return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
[32mExample #2[0m
Src : private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
[32mExample #2[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
[32mExample #3[0m
Src : static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
[32mExample #4[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
[32mExample #2[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
[32mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Trg : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Pred: private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) { return VAR_4 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
[32mExample #2[0m
Src : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
---------------
Class: Remove statement,Move existing statements in try block
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
---------------
Class: Remove type casting in method body
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) ; } }[0m
Trg : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
Pred: public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
[32mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
[32mExample #4[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
---------------
================
================
Incorrect Examples
Class: Add braces to if statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; return return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; return return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #2[0m
Src : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Trg : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Pred: [0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 ) ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Trg : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Pred: TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
[31mExample #2[0m
Src : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Trg : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Pred: public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #4[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . METHOD_8 ( ) , null ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 , true ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 , 0 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
[31mExample #9[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
---------------
Class: Add statement
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) { TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ; } VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; s . METHOD_10 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
[31mExample #2[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: public java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Pred: public boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! ( VAR_1 ) ; }[0m
---------------
Class: Change comparison operator (e.g. >) in condition
Golden example (False):
[31mExample #1[0m
Src : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Trg : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Pred: private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( + ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Trg : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 > VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Pred: private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 ; METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
---------------
Class: Change exception type in catch clause
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_7 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Trg : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Pred: public final TYPE_1 METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( java.util.Map VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
[31mExample #3[0m
Src : private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Trg : private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Pred: private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
[31mExample #4[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , byte [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( int session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; org.junit.Assert.assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
[31mExample #6[0m
Src : static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Trg : static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Pred: static int METHOD_1 ( long VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( args . inV ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , version , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
[31mExample #7[0m
Src : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Trg : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_2 . length , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Pred: protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result , METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_2 . get ( 0 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
[31mExample #4[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 , VAR_1 ) ; }[0m
---------------
Class: Change qualified name in response to a move class refactoring
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Trg : public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Pred: public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ ] ] ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_2 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network : : ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface . network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface . VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: [0m
[31mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , METHOD_3 ( ) ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Trg : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Pred: [0m
[31mExample #5[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; }[0m
Pred: [0m
[31mExample #8[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: [0m
[31mExample #9[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Pred: [0m
[31mExample #10[0m
Src : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Pred: [0m
[31mExample #11[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Pred: [0m
[31mExample #12[0m
Src : private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ; }[0m
[31mExample #13[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: [0m
[31mExample #15[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } source ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { return VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; try { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Trg : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Pred: public static void METHOD_1 ( int id , int flags , final VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; try { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 ++ i i = = ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . TYPE_4 ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . 1 ; 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
Trg : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type ) ; return vm ; }[0m
Pred: public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_1 , response , VAR_3 , VAR_2 ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
[31mExample #3[0m
Src : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 ) . ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
[31mExample #10[0m
Src : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( ) ) ; return VAR_2 ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
[31mExample #16[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > : : : java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; }[0m
Trg : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
Pred: protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! ( VAR_1 ) ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
[31mExample #18[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 ) ; } }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
[31mExample #19[0m
Src : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < TYPE_2 > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
[31mExample #25[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 , options ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
[31mExample #26[0m
Src : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Trg : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
---------------
Class: Remove redundant initialization,Replace statement
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ([0m
+++++++++++++++
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) {[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_2 . assertTrue ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
[31mExample #5[0m
Src : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Trg : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
[31mExample #6[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } METHOD_3 ( ) , VAR_2 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; model model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_7 ( vm ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( disk ) ; METHOD_7 ( disk ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; TYPE_2 VAR_3 = resource . get ( ) ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; getName ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; }[0m
Pred: [0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) , }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; org.mockito.Mockito . METHOD_6 ( STRING_1 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #18[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
[31mExample #19[0m
Src : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; }[0m
Trg : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }[0m
Pred: protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; return obj ; } } return null ; }[0m
[31mExample #20[0m
Src : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Trg : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Pred: private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , VAR_1 ) . METHOD_9 ( ) ) ; }[0m
Pred: [0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
[31mExample #23[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ! ( METHOD_2 ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Pred: [0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 model ; TYPE_2 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
---------------
Class: Remove statement,Add try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; VAR_1 . METHOD_7 ( ) ; server . METHOD_7 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; } }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; } }[0m
Pred: public[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
[31mExample #2[0m
Src : protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Trg : protected boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Pred: protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Trg : protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Pred: protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
[31mExample #2[0m
Src : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
Trg : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable fail ) { METHOD_6 ( fail ) ; return new byte [ 0 ] ; } }[0m
Pred: static [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Trg : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; java.lang.System.out.println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Pred: public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? ? : : b ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 , VAR_2 , VAR_4 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
---------------
Class: Replace if statement with assert statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Trg : public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Pred: public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Trg : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Pred: void METHOD_1 ( ) { if ( VAR_1 ) { android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
[31mExample #3[0m
Src : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Trg : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . log ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Pred: public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Trg : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Pred: boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) { android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
[31mExample #6[0m
Src : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; return true ; }[0m
Pred: protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #9[0m
Src : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
[31mExample #10[0m
Src : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . any ( ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
[31mExample #13[0m
Src : protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #14[0m
Src : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Trg : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Pred: public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
[31mExample #15[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
[31mExample #17[0m
Src : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
[31mExample #18[0m
Src : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Trg : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Pred: private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
[31mExample #19[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #20[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : log . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
[31mExample #21[0m
Src : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_7 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_8 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
[31mExample #23[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . getStoragePoolId ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
[31mExample #24[0m
Src : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . getStatus ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Pred: protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
[31mExample #25[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
[31mExample #26[0m
Src : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
Trg : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . getName ( ) ) ) ) ) { return network ; } } return null ; }[0m
Pred: protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
[31mExample #27[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
---------------
================
Duration: 0:02:07.177763

Start conducting one shot learning experiment for Defects4J...
Top-1 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-5 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-10 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-50 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0

Top-1 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-5 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-10 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-50 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }[0m
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }[0m
Pred: public[0m
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
[31mExample #1[0m
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public[0m
---------------
Class: ['condBlockRetAdd']
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ([0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . answer ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ([0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Pred: [0m
---------------
Class: ['notClassified']
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . getClass ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Pred: public TYPE_1[0m
+++++++++++++++
[31mExample #1[0m
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }[0m
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }[0m
Pred: public static[0m
---------------
Class: ['singleLine']
Golden example (False):
[31mExample #1[0m
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Pred: public METHOD_3 ( VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
[31mExample #2[0m
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Pred: private double double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
---------------
Class: ['wrapsIf']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }[0m
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ([0m
---------------
Class: ['wrapsIfElse']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }[0m
Pred: public[0m
---------------
================
Duration: 0:00:10.670338

Starting long experiments
Start conducting accuracy calculation experiment for Test dataset all...
Top-1 accuracy: 163 / 1098 = 0.14845173041894352
Top-3 accuracy: 179 / 1098 = 0.16302367941712204
Top-5 accuracy: 182 / 1098 = 0.1657559198542805
Top-10 accuracy: 188 / 1098 = 0.17122040072859745
Top-50 accuracy: 195 / 1098 = 0.17759562841530055
Duration: 0:04:54.464945

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset train 300...
Top-1 accuracy: 7 / 300 = 0.023333333333333334
Top-3 accuracy: 14 / 300 = 0.04666666666666667
Top-5 accuracy: 15 / 300 = 0.05
Top-10 accuracy: 17 / 300 = 0.056666666666666664
Top-50 accuracy: 18 / 300 = 0.06
Duration: 0:01:27.925549

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset val 300...
Top-1 accuracy: 2 / 300 = 0.006666666666666667
Top-3 accuracy: 6 / 300 = 0.02
Top-5 accuracy: 8 / 300 = 0.02666666666666667
Top-10 accuracy: 9 / 300 = 0.03
Top-50 accuracy: 12 / 300 = 0.04
Duration: 0:01:29.425971

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test 300...
Top-1 accuracy: 4 / 300 = 0.013333333333333334
Top-3 accuracy: 9 / 300 = 0.03
Top-5 accuracy: 11 / 300 = 0.03666666666666667
Top-10 accuracy: 12 / 300 = 0.04
Top-50 accuracy: 14 / 300 = 0.04666666666666667
Duration: 0:01:28.366056

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset train 300...
Top-1 accuracy: 8 / 300 = 0.02666666666666667
Top-3 accuracy: 10 / 300 = 0.03333333333333333
Top-5 accuracy: 10 / 300 = 0.03333333333333333
Top-10 accuracy: 13 / 300 = 0.043333333333333335
Top-50 accuracy: 13 / 300 = 0.043333333333333335
Duration: 0:01:20.168908

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset val 300...
Top-1 accuracy: 7 / 300 = 0.023333333333333334
Top-3 accuracy: 8 / 300 = 0.02666666666666667
Top-5 accuracy: 8 / 300 = 0.02666666666666667
Top-10 accuracy: 9 / 300 = 0.03
Top-50 accuracy: 13 / 300 = 0.043333333333333335
Duration: 0:01:20.420154

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test 300...
Top-1 accuracy: 17 / 300 = 0.056666666666666664
Top-3 accuracy: 18 / 300 = 0.06
Top-5 accuracy: 18 / 300 = 0.06
Top-10 accuracy: 18 / 300 = 0.06
Top-50 accuracy: 19 / 300 = 0.06333333333333334
Duration: 0:01:20.131243

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset train 300...
Top-1 accuracy: 8 / 300 = 0.02666666666666667
Top-3 accuracy: 12 / 300 = 0.04
Top-5 accuracy: 12 / 300 = 0.04
Top-10 accuracy: 14 / 300 = 0.04666666666666667
Top-50 accuracy: 16 / 300 = 0.05333333333333334
Duration: 0:01:30.334882

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset val 300...
Top-1 accuracy: 10 / 300 = 0.03333333333333333
Top-3 accuracy: 14 / 300 = 0.04666666666666667
Top-5 accuracy: 14 / 300 = 0.04666666666666667
Top-10 accuracy: 15 / 300 = 0.05
Top-50 accuracy: 17 / 300 = 0.056666666666666664
Duration: 0:01:29.658564

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test 300...
Top-1 accuracy: 13 / 300 = 0.043333333333333335
Top-3 accuracy: 15 / 300 = 0.05
Top-5 accuracy: 15 / 300 = 0.05
Top-10 accuracy: 15 / 300 = 0.05
Top-50 accuracy: 17 / 300 = 0.056666666666666664
Duration: 0:01:29.309720

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset train 300...
Top-1 accuracy: 62 / 300 = 0.20666666666666667
Top-3 accuracy: 68 / 300 = 0.22666666666666666
Top-5 accuracy: 68 / 300 = 0.22666666666666666
Top-10 accuracy: 70 / 300 = 0.23333333333333334
Top-50 accuracy: 73 / 300 = 0.24333333333333335
Duration: 0:01:20.127914

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset val 300...
Top-1 accuracy: 31 / 300 = 0.10333333333333333
Top-3 accuracy: 37 / 300 = 0.12333333333333334
Top-5 accuracy: 39 / 300 = 0.13
Top-10 accuracy: 40 / 300 = 0.13333333333333333
Top-50 accuracy: 42 / 300 = 0.14
Duration: 0:01:21.085612

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test 300...
Top-1 accuracy: 42 / 300 = 0.14
Top-3 accuracy: 50 / 300 = 0.16666666666666666
Top-5 accuracy: 51 / 300 = 0.17
Top-10 accuracy: 54 / 300 = 0.18
Top-50 accuracy: 55 / 300 = 0.18333333333333332
Duration: 0:01:20.174646

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test...
Top-1 accuracy: 92 / 5835 = 0.015766923736075408
Top-3 accuracy: 135 / 5835 = 0.02313624678663239
Top-5 accuracy: 155 / 5835 = 0.026563838903170524
Top-10 accuracy: 169 / 5835 = 0.028963153384747215
Top-50 accuracy: 223 / 5835 = 0.03821765209940017
Duration: 0:28:46.160028

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test...
Top-1 accuracy: 225 / 6545 = 0.03437738731856379
Top-3 accuracy: 266 / 6545 = 0.040641711229946524
Top-5 accuracy: 269 / 6545 = 0.04110007639419404
Top-10 accuracy: 276 / 6545 = 0.042169595110771584
Top-50 accuracy: 305 / 6545 = 0.04660045836516425
Duration: 0:29:24.172683

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test...
Top-1 accuracy: 56 / 1077 = 0.051996285979572884
Top-3 accuracy: 67 / 1077 = 0.06220984215413185
Top-5 accuracy: 71 / 1077 = 0.06592386258124419
Top-10 accuracy: 76 / 1077 = 0.07056638811513463
Top-50 accuracy: 80 / 1077 = 0.07428040854224698
Duration: 0:05:17.677917

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test...
Top-1 accuracy: 163 / 1098 = 0.14845173041894352
Top-3 accuracy: 179 / 1098 = 0.16302367941712204
Top-5 accuracy: 182 / 1098 = 0.1657559198542805
Top-10 accuracy: 188 / 1098 = 0.17122040072859745
Top-50 accuracy: 195 / 1098 = 0.17759562841530055
Duration: 0:04:55.118220

