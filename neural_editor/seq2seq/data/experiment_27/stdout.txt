
====STARTING TRAINING====
{'ADDITION_TOKEN': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 50,
 'DATASET_ROOT': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': '—É–¥–∞–ª–µ–Ω–∏–µ',
 'DEVICE': device(type='cuda', index=0),
 'DIVERSITY_STRENGTH': None,
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 25,
 'EDIT_REPRESENTATION_SIZE': 512,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LEAVE_ONLY_CHANGED': False,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_GROUPS': 1,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '../../../embeddings-for-code-diffs-data/experiment_27/',
 'PADDING_TOKEN': '–ø–∞–¥–¥–∏–Ω–≥',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': '–∑–∞–º–µ–Ω–∞',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEACHER_FORCING_RATIO': 0.9,
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TOP_K': [1, 3, 5, 10, 50],
 'TSNE_BATCH_SIZE': 1024,
 'TUFANO_BUG_FIXES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'TUFANO_BUG_FIXES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/50_100',
 'TUFANO_CODE_CHANGES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'TUFANO_CODE_CHANGES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'TUFANO_LABELED_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'TUFANO_LABELED_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/50_100',
 'UNCHANGED_TOKEN': '—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'USE_EDIT_REPRESENTATION': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 8627
valid 1079
test 1077 

First training example:
src: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
trg: private void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
diff_alignment: —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
diff_prev: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
diff_updated: private void METHOD_1 ( ) { –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; } 

Most common words:
 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ     229531
         (     138692
         )     138692
         ;      62546
         .      54160
   –ø–∞–¥–¥–∏–Ω–≥      44322
     VAR_1      43534
         {      42660
         }      42660
         ,      41936 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
05 (
06 )
07 ;
08 .
09 –ø–∞–¥–¥–∏–Ω–≥ 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 6423 33
—É–¥–∞–ª–µ–Ω–∏–µ 34492 15
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 9830 25
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 229531 4
–ø–∞–¥–¥–∏–Ω–≥ 44322 9
Number of words (types): 663
Epoch 0 / 1000
Epoch Step: 5 / 135 Loss: 169.33517456054688 Tokens per Sec: 11093.332541668156
Epoch Step: 10 / 135 Loss: 239.14883422851562 Tokens per Sec: 16531.446313300872
Epoch Step: 15 / 135 Loss: 145.83285522460938 Tokens per Sec: 15780.475507274377
Epoch Step: 20 / 135 Loss: 235.2596893310547 Tokens per Sec: 17697.124500611495
Epoch Step: 25 / 135 Loss: 192.63787841796875 Tokens per Sec: 16655.79430152577
Epoch Step: 30 / 135 Loss: 173.1435546875 Tokens per Sec: 17029.546878238052
Epoch Step: 35 / 135 Loss: 202.56185913085938 Tokens per Sec: 17505.598309571204
Epoch Step: 40 / 135 Loss: 130.05943298339844 Tokens per Sec: 18861.95564866441
Epoch Step: 45 / 135 Loss: 161.57672119140625 Tokens per Sec: 17196.92799874102
Epoch Step: 50 / 135 Loss: 147.7032470703125 Tokens per Sec: 14808.75605265842
Epoch Step: 55 / 135 Loss: 131.4936065673828 Tokens per Sec: 17752.161040932304
Epoch Step: 60 / 135 Loss: 112.46166229248047 Tokens per Sec: 17908.87789539321
Epoch Step: 65 / 135 Loss: 111.80989074707031 Tokens per Sec: 17819.531573937875
Epoch Step: 70 / 135 Loss: 67.03740692138672 Tokens per Sec: 14615.503290593682
Epoch Step: 75 / 135 Loss: 118.2208023071289 Tokens per Sec: 14300.769841923075
Epoch Step: 80 / 135 Loss: 40.08430862426758 Tokens per Sec: 14224.90659952958
Epoch Step: 85 / 135 Loss: 69.99939727783203 Tokens per Sec: 16623.593019268057
Epoch Step: 90 / 135 Loss: 126.95405578613281 Tokens per Sec: 16274.99734453545
Epoch Step: 95 / 135 Loss: 95.802978515625 Tokens per Sec: 15894.427195169394
Epoch Step: 100 / 135 Loss: 97.88053131103516 Tokens per Sec: 12911.292036780098
Epoch Step: 105 / 135 Loss: 140.0028533935547 Tokens per Sec: 14124.29780654392
Epoch Step: 110 / 135 Loss: 121.60443115234375 Tokens per Sec: 14935.331349451373
Epoch Step: 115 / 135 Loss: 116.39266967773438 Tokens per Sec: 16112.784731502787
Epoch Step: 120 / 135 Loss: 53.06525421142578 Tokens per Sec: 14308.712572607472
Epoch Step: 125 / 135 Loss: 125.99164581298828 Tokens per Sec: 16242.299265305943
Epoch Step: 130 / 135 Loss: 93.11305236816406 Tokens per Sec: 14870.860896982633
Epoch Step: 135 / 135 Loss: 80.14787292480469 Tokens per Sec: 13985.61094162226
Epoch ended with duration 0:00:16.194177
Train perplexity: 57.49589039050771
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { ( ) { ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( ) { return ( ) { return ( ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { ( ) { ( ) ; }[0m
Epoch ended with duration 0:00:00.664041
Validation perplexity: 20.157013820193665
Model saved best_on_validation!
Model saved checkpoint!
Epoch 1 / 1000
Epoch Step: 5 / 135 Loss: 82.74267578125 Tokens per Sec: 15563.109567842035
Epoch Step: 10 / 135 Loss: 130.77928161621094 Tokens per Sec: 17204.73093767228
Epoch Step: 15 / 135 Loss: 137.4734344482422 Tokens per Sec: 16420.59403611376
Epoch Step: 20 / 135 Loss: 93.64592742919922 Tokens per Sec: 15943.708588421736
Epoch Step: 25 / 135 Loss: 53.50349426269531 Tokens per Sec: 17546.810519921262
Epoch Step: 30 / 135 Loss: 105.09054565429688 Tokens per Sec: 14797.970829963775
Epoch Step: 35 / 135 Loss: 107.25108337402344 Tokens per Sec: 15470.847089626399
Epoch Step: 40 / 135 Loss: 35.0886116027832 Tokens per Sec: 15533.336143699431
Epoch Step: 45 / 135 Loss: 129.32823181152344 Tokens per Sec: 18179.634282160074
Epoch Step: 50 / 135 Loss: 46.44915771484375 Tokens per Sec: 17018.58154370388
Epoch Step: 55 / 135 Loss: 54.06656265258789 Tokens per Sec: 16722.533775230855
Epoch Step: 60 / 135 Loss: 126.71360778808594 Tokens per Sec: 17788.210480789807
Epoch Step: 65 / 135 Loss: 125.97695922851562 Tokens per Sec: 15992.709462431942
Epoch Step: 70 / 135 Loss: 96.16683959960938 Tokens per Sec: 16215.94091782051
Epoch Step: 75 / 135 Loss: 68.06910705566406 Tokens per Sec: 16950.043767271403
Epoch Step: 80 / 135 Loss: 39.34239959716797 Tokens per Sec: 13259.430393498977
Epoch Step: 85 / 135 Loss: 69.3868637084961 Tokens per Sec: 15355.799149664956
Epoch Step: 90 / 135 Loss: 66.22087097167969 Tokens per Sec: 17062.648740596444
Epoch Step: 95 / 135 Loss: 177.99171447753906 Tokens per Sec: 18548.101537318642
Epoch Step: 100 / 135 Loss: 53.990211486816406 Tokens per Sec: 16175.07730620539
Epoch Step: 105 / 135 Loss: 90.26759338378906 Tokens per Sec: 15719.478509801751
Epoch Step: 110 / 135 Loss: 83.29676055908203 Tokens per Sec: 14619.460788205168
Epoch Step: 115 / 135 Loss: 31.26966094970703 Tokens per Sec: 14696.31268145983
Epoch Step: 120 / 135 Loss: 63.11886215209961 Tokens per Sec: 13766.94731092994
Epoch Step: 125 / 135 Loss: 97.60380554199219 Tokens per Sec: 14862.670173340954
Epoch Step: 130 / 135 Loss: 114.1480484008789 Tokens per Sec: 14853.69791238881
Epoch Step: 135 / 135 Loss: 102.39653015136719 Tokens per Sec: 14894.471331203848
Epoch ended with duration 0:00:15.981576
Train perplexity: 18.67509077521105
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ( ) { return ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 ) { return ( ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ( ) { return ( ) ; }[0m
Epoch ended with duration 0:00:00.662832
Validation perplexity: 15.050434710039292
Model saved best_on_validation!
Epoch 2 / 1000
Epoch Step: 5 / 135 Loss: 31.397497177124023 Tokens per Sec: 15465.103101085764
Epoch Step: 10 / 135 Loss: 103.74723815917969 Tokens per Sec: 15568.139992922577
Epoch Step: 15 / 135 Loss: 102.20407104492188 Tokens per Sec: 13769.442632505174
Epoch Step: 20 / 135 Loss: 32.23773956298828 Tokens per Sec: 16199.099606522159
Epoch Step: 25 / 135 Loss: 97.08411407470703 Tokens per Sec: 15754.40967630337
Epoch Step: 30 / 135 Loss: 105.99293518066406 Tokens per Sec: 17378.85046461974
Epoch Step: 35 / 135 Loss: 118.62779998779297 Tokens per Sec: 16995.55162333061
Epoch Step: 40 / 135 Loss: 108.79661560058594 Tokens per Sec: 15666.182475158084
Epoch Step: 45 / 135 Loss: 109.40872955322266 Tokens per Sec: 17619.331368012245
Epoch Step: 50 / 135 Loss: 64.73039245605469 Tokens per Sec: 15058.851866614785
Epoch Step: 55 / 135 Loss: 125.90274047851562 Tokens per Sec: 18467.725863771517
Epoch Step: 60 / 135 Loss: 68.72899627685547 Tokens per Sec: 17993.429605659865
Epoch Step: 65 / 135 Loss: 51.006805419921875 Tokens per Sec: 18349.280943557853
Epoch Step: 70 / 135 Loss: 60.753204345703125 Tokens per Sec: 14283.606953270644
Epoch Step: 75 / 135 Loss: 97.0572738647461 Tokens per Sec: 12933.031211220024
Epoch Step: 80 / 135 Loss: 98.38392639160156 Tokens per Sec: 15591.05925635838
Epoch Step: 85 / 135 Loss: 72.1025619506836 Tokens per Sec: 18433.989214656463
Epoch Step: 90 / 135 Loss: 54.927093505859375 Tokens per Sec: 16417.538204767032
Epoch Step: 95 / 135 Loss: 34.713199615478516 Tokens per Sec: 15389.72344167849
Epoch Step: 100 / 135 Loss: 109.98502349853516 Tokens per Sec: 18065.775699150825
Epoch Step: 105 / 135 Loss: 59.030181884765625 Tokens per Sec: 14283.01900389043
Epoch Step: 110 / 135 Loss: 53.00563430786133 Tokens per Sec: 14450.473677081056
Epoch Step: 115 / 135 Loss: 40.60730743408203 Tokens per Sec: 14704.04917182007
Epoch Step: 120 / 135 Loss: 26.065744400024414 Tokens per Sec: 15868.890891283056
Epoch Step: 125 / 135 Loss: 160.18589782714844 Tokens per Sec: 16409.74167803144
Epoch Step: 130 / 135 Loss: 70.57259368896484 Tokens per Sec: 14109.87408990482
Epoch Step: 135 / 135 Loss: 102.82864379882812 Tokens per Sec: 15007.929216628892
Epoch ended with duration 0:00:15.964568
Train perplexity: 13.873791054714133
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( TYPE_1 METHOD_1 ( ) { return VAR_1 ) { return VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 ) { return ( ) ; }[0m
Epoch ended with duration 0:00:00.656054
Validation perplexity: 10.463805295590028
Model saved best_on_validation!
Epoch 3 / 1000
Epoch Step: 5 / 135 Loss: 75.11483001708984 Tokens per Sec: 14569.361829779244
Epoch Step: 10 / 135 Loss: 61.79387664794922 Tokens per Sec: 18190.619313528405
Epoch Step: 15 / 135 Loss: 89.37163543701172 Tokens per Sec: 17578.548431147738
Epoch Step: 20 / 135 Loss: 85.01869201660156 Tokens per Sec: 15661.831545136016
Epoch Step: 25 / 135 Loss: 68.78060913085938 Tokens per Sec: 19184.844065533794
Epoch Step: 30 / 135 Loss: 25.60287094116211 Tokens per Sec: 17312.947055680328
Epoch Step: 35 / 135 Loss: 124.81155395507812 Tokens per Sec: 16812.353301675477
Epoch Step: 40 / 135 Loss: 69.6533432006836 Tokens per Sec: 20827.45417736915
Epoch Step: 45 / 135 Loss: 79.06046295166016 Tokens per Sec: 19107.046971103166
Epoch Step: 50 / 135 Loss: 24.3424129486084 Tokens per Sec: 17093.884999790298
Epoch Step: 55 / 135 Loss: 39.9281120300293 Tokens per Sec: 15090.617945717026
Epoch Step: 60 / 135 Loss: 62.43783950805664 Tokens per Sec: 20424.88600993696
Epoch Step: 65 / 135 Loss: 100.97057342529297 Tokens per Sec: 17269.978204237355
Epoch Step: 70 / 135 Loss: 57.292869567871094 Tokens per Sec: 18931.211036059736
Epoch Step: 75 / 135 Loss: 96.56092071533203 Tokens per Sec: 19996.376070106187
Epoch Step: 80 / 135 Loss: 100.80081939697266 Tokens per Sec: 19200.651702246774
Epoch Step: 85 / 135 Loss: 58.217891693115234 Tokens per Sec: 17805.956654376005
Epoch Step: 90 / 135 Loss: 42.264976501464844 Tokens per Sec: 17191.839731604305
Epoch Step: 95 / 135 Loss: 97.457275390625 Tokens per Sec: 16964.923798318312
Epoch Step: 100 / 135 Loss: 33.93136215209961 Tokens per Sec: 19505.335145564786
Epoch Step: 105 / 135 Loss: 105.11373138427734 Tokens per Sec: 16874.430445789967
Epoch Step: 110 / 135 Loss: 132.8933563232422 Tokens per Sec: 16011.301488877307
Epoch Step: 115 / 135 Loss: 79.39743041992188 Tokens per Sec: 16444.382954892237
Epoch Step: 120 / 135 Loss: 69.47396850585938 Tokens per Sec: 17482.092048778926
Epoch Step: 125 / 135 Loss: 85.38653564453125 Tokens per Sec: 16339.464506614055
Epoch Step: 130 / 135 Loss: 24.770673751831055 Tokens per Sec: 16285.817187015695
Epoch Step: 135 / 135 Loss: 32.820213317871094 Tokens per Sec: 13908.07713265888
Epoch ended with duration 0:00:14.609527
Train perplexity: 10.665661716146275
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String > METHOD_1 ( ) { return VAR_1 ) { return VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 > METHOD_1 ( ) { return ( ) ; }[0m
Epoch ended with duration 0:00:00.660177
Validation perplexity: 10.119051169144662
Model saved best_on_validation!
Epoch 4 / 1000
Epoch Step: 5 / 135 Loss: 40.22065734863281 Tokens per Sec: 18591.01953953649
Epoch Step: 10 / 135 Loss: 67.32049560546875 Tokens per Sec: 18520.956498153937
Epoch Step: 15 / 135 Loss: 69.04518127441406 Tokens per Sec: 17093.183713663897
Epoch Step: 20 / 135 Loss: 85.87484741210938 Tokens per Sec: 15178.173779167248
Epoch Step: 25 / 135 Loss: 52.2649040222168 Tokens per Sec: 18616.85329055633
Epoch Step: 30 / 135 Loss: 42.850860595703125 Tokens per Sec: 15382.317608843256
Epoch Step: 35 / 135 Loss: 78.02790069580078 Tokens per Sec: 18872.505087411097
Epoch Step: 40 / 135 Loss: 90.04646301269531 Tokens per Sec: 16439.399874765186
Epoch Step: 45 / 135 Loss: 102.29950714111328 Tokens per Sec: 18523.733466287416
Epoch Step: 50 / 135 Loss: 43.74476623535156 Tokens per Sec: 17196.39098939175
Epoch Step: 55 / 135 Loss: 71.27140045166016 Tokens per Sec: 18986.217600575063
Epoch Step: 60 / 135 Loss: 72.05008697509766 Tokens per Sec: 17707.075772010943
Epoch Step: 65 / 135 Loss: 38.912322998046875 Tokens per Sec: 19474.30470535049
Epoch Step: 70 / 135 Loss: 48.594642639160156 Tokens per Sec: 20500.44303830316
Epoch Step: 75 / 135 Loss: 29.98208999633789 Tokens per Sec: 13837.264155163846
Epoch Step: 80 / 135 Loss: 42.294219970703125 Tokens per Sec: 17861.147742079003
Epoch Step: 85 / 135 Loss: 78.44367218017578 Tokens per Sec: 19464.210226866384
Epoch Step: 90 / 135 Loss: 68.09078979492188 Tokens per Sec: 19815.61921586101
Epoch Step: 95 / 135 Loss: 68.6172103881836 Tokens per Sec: 18058.463253931972
Epoch Step: 100 / 135 Loss: 102.73373413085938 Tokens per Sec: 20891.469960312446
Epoch Step: 105 / 135 Loss: 89.06654357910156 Tokens per Sec: 16974.524444595776
Epoch Step: 110 / 135 Loss: 66.91265869140625 Tokens per Sec: 16491.5457602264
Epoch Step: 115 / 135 Loss: 73.8224868774414 Tokens per Sec: 15626.234679209416
Epoch Step: 120 / 135 Loss: 91.8360824584961 Tokens per Sec: 17067.066464822816
Epoch Step: 125 / 135 Loss: 37.56667709350586 Tokens per Sec: 15346.152386233514
Epoch Step: 130 / 135 Loss: 61.982666015625 Tokens per Sec: 16199.118572956266
Epoch Step: 135 / 135 Loss: 27.406967163085938 Tokens per Sec: 15598.982255403129
Epoch ended with duration 0:00:14.505310
Train perplexity: 9.378457684077668
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 < TYPE_1 < TYPE_1 > > > > > VAR_1 ) { return VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 > METHOD_1 ( ) { return VAR_1 ) ; }[0m
Epoch ended with duration 0:00:00.663294
Validation perplexity: 8.239821572028573
Model saved best_on_validation!
Epoch 5 / 1000
Epoch Step: 5 / 135 Loss: 37.48786544799805 Tokens per Sec: 16885.95701622285
Epoch Step: 10 / 135 Loss: 34.83030319213867 Tokens per Sec: 19266.56879584083
Epoch Step: 15 / 135 Loss: 28.74405860900879 Tokens per Sec: 17469.87860736908
Epoch Step: 20 / 135 Loss: 69.12623596191406 Tokens per Sec: 19323.943603203566
Epoch Step: 25 / 135 Loss: 103.69895935058594 Tokens per Sec: 17812.713330782728
Epoch Step: 30 / 135 Loss: 50.0322265625 Tokens per Sec: 15599.919384316301
Epoch Step: 35 / 135 Loss: 40.15437698364258 Tokens per Sec: 18687.01098687997
Epoch Step: 40 / 135 Loss: 38.48613739013672 Tokens per Sec: 19554.84402480993
Epoch Step: 45 / 135 Loss: 82.307861328125 Tokens per Sec: 19164.86320520347
Epoch Step: 50 / 135 Loss: 24.190793991088867 Tokens per Sec: 14593.281293287164
Epoch Step: 55 / 135 Loss: 19.965469360351562 Tokens per Sec: 18876.46033054266
Epoch Step: 60 / 135 Loss: 19.4776668548584 Tokens per Sec: 17489.58688604876
Epoch Step: 65 / 135 Loss: 63.26750183105469 Tokens per Sec: 17562.023363877823
Epoch Step: 70 / 135 Loss: 79.68524169921875 Tokens per Sec: 19694.6395187581
Epoch Step: 75 / 135 Loss: 75.3521957397461 Tokens per Sec: 20050.12321075809
Epoch Step: 80 / 135 Loss: 41.4306755065918 Tokens per Sec: 18642.035410026136
Epoch Step: 85 / 135 Loss: 76.3658447265625 Tokens per Sec: 17416.402438357
Epoch Step: 90 / 135 Loss: 68.00924682617188 Tokens per Sec: 18787.19816925582
Epoch Step: 95 / 135 Loss: 65.87242126464844 Tokens per Sec: 16310.34374315241
Epoch Step: 100 / 135 Loss: 83.26986694335938 Tokens per Sec: 18843.166318369476
Epoch Step: 105 / 135 Loss: 39.88230514526367 Tokens per Sec: 14899.547183818991
Epoch Step: 110 / 135 Loss: 62.713722229003906 Tokens per Sec: 16301.009116644229
Epoch Step: 115 / 135 Loss: 39.80949783325195 Tokens per Sec: 16419.802661268495
Epoch Step: 120 / 135 Loss: 49.08487319946289 Tokens per Sec: 16788.42617830019
Epoch Step: 125 / 135 Loss: 36.15642166137695 Tokens per Sec: 16483.609477506467
Epoch Step: 130 / 135 Loss: 84.7480239868164 Tokens per Sec: 16586.34996071095
Epoch Step: 135 / 135 Loss: 48.32056427001953 Tokens per Sec: 16657.8539010385
Epoch ended with duration 0:00:14.385337
Train perplexity: 7.726659710345095
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 < TYPE_1 < TYPE_2 > > > VAR_1 ) { return VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.653754
Validation perplexity: 5.88559678662502
Model saved best_on_validation!
Model saved checkpoint!
Epoch 6 / 1000
Epoch Step: 5 / 135 Loss: 80.57179260253906 Tokens per Sec: 14965.086123177134
Epoch Step: 10 / 135 Loss: 21.535037994384766 Tokens per Sec: 17268.4977075467
Epoch Step: 15 / 135 Loss: 72.60631561279297 Tokens per Sec: 17556.37002227853
Epoch Step: 20 / 135 Loss: 22.014802932739258 Tokens per Sec: 19771.89221760876
Epoch Step: 25 / 135 Loss: 33.126976013183594 Tokens per Sec: 15413.547452604842
Epoch Step: 30 / 135 Loss: 69.56600952148438 Tokens per Sec: 21076.321724748646
Epoch Step: 35 / 135 Loss: 69.38618469238281 Tokens per Sec: 18233.10915836824
Epoch Step: 40 / 135 Loss: 94.22187042236328 Tokens per Sec: 19519.00837397218
Epoch Step: 45 / 135 Loss: 103.70674133300781 Tokens per Sec: 16856.514705480255
Epoch Step: 50 / 135 Loss: 74.36935424804688 Tokens per Sec: 19579.822771219984
Epoch Step: 55 / 135 Loss: 60.977813720703125 Tokens per Sec: 18477.302618848258
Epoch Step: 60 / 135 Loss: 65.35657501220703 Tokens per Sec: 18906.995645449817
Epoch Step: 65 / 135 Loss: 81.07754516601562 Tokens per Sec: 19407.364658232986
Epoch Step: 70 / 135 Loss: 33.547264099121094 Tokens per Sec: 16609.757624336806
Epoch Step: 75 / 135 Loss: 19.711994171142578 Tokens per Sec: 18121.059141564394
Epoch Step: 80 / 135 Loss: 94.90681457519531 Tokens per Sec: 19858.93845853728
Epoch Step: 85 / 135 Loss: 79.38099670410156 Tokens per Sec: 17725.289099987822
Epoch Step: 90 / 135 Loss: 34.21778106689453 Tokens per Sec: 16434.580625865445
Epoch Step: 95 / 135 Loss: 27.99057388305664 Tokens per Sec: 18780.003182009918
Epoch Step: 100 / 135 Loss: 47.302677154541016 Tokens per Sec: 15746.421433240985
Epoch Step: 105 / 135 Loss: 79.95140838623047 Tokens per Sec: 18684.44772906925
Epoch Step: 110 / 135 Loss: 22.392202377319336 Tokens per Sec: 17317.7335525964
Epoch Step: 115 / 135 Loss: 121.4023208618164 Tokens per Sec: 16691.164611311622
Epoch Step: 120 / 135 Loss: 36.54433059692383 Tokens per Sec: 15401.110990258016
Epoch Step: 125 / 135 Loss: 48.52911376953125 Tokens per Sec: 15536.486691028887
Epoch Step: 130 / 135 Loss: 72.75304412841797 Tokens per Sec: 16218.67962589773
Epoch Step: 135 / 135 Loss: 25.761051177978516 Tokens per Sec: 17305.40192941186
Epoch ended with duration 0:00:14.440557
Train perplexity: 7.5101580837357504
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 < TYPE_1 > METHOD_1 ( TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 > ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.651237
Validation perplexity: 5.697389668506092
Model saved best_on_validation!
Epoch 7 / 1000
Epoch Step: 5 / 135 Loss: 37.81059265136719 Tokens per Sec: 17299.39275495267
Epoch Step: 10 / 135 Loss: 48.982154846191406 Tokens per Sec: 16055.240742666458
Epoch Step: 15 / 135 Loss: 32.4482421875 Tokens per Sec: 19773.006485763533
Epoch Step: 20 / 135 Loss: 52.02338790893555 Tokens per Sec: 17356.751874302492
Epoch Step: 25 / 135 Loss: 62.346187591552734 Tokens per Sec: 20470.488131555972
Epoch Step: 30 / 135 Loss: 55.77708435058594 Tokens per Sec: 18195.883720289083
Epoch Step: 35 / 135 Loss: 50.28204345703125 Tokens per Sec: 17977.098868243364
Epoch Step: 40 / 135 Loss: 139.90171813964844 Tokens per Sec: 20148.76171089444
Epoch Step: 45 / 135 Loss: 171.29977416992188 Tokens per Sec: 17649.454582219245
Epoch Step: 50 / 135 Loss: 157.85997009277344 Tokens per Sec: 19243.34747247097
Epoch Step: 55 / 135 Loss: 20.73935890197754 Tokens per Sec: 15853.010643020842
Epoch Step: 60 / 135 Loss: 50.29098892211914 Tokens per Sec: 20347.13047708842
Epoch Step: 65 / 135 Loss: 54.28364562988281 Tokens per Sec: 18542.76758808564
Epoch Step: 70 / 135 Loss: 60.4228630065918 Tokens per Sec: 17834.787487101235
Epoch Step: 75 / 135 Loss: 96.01656341552734 Tokens per Sec: 18934.292227930855
Epoch Step: 80 / 135 Loss: 127.58222961425781 Tokens per Sec: 15533.36663276127
Epoch Step: 85 / 135 Loss: 82.80995178222656 Tokens per Sec: 17846.360371188388
Epoch Step: 90 / 135 Loss: 80.94631958007812 Tokens per Sec: 17859.32961416749
Epoch Step: 95 / 135 Loss: 16.711071014404297 Tokens per Sec: 18738.925768518664
Epoch Step: 100 / 135 Loss: 49.839698791503906 Tokens per Sec: 17794.24912126053
Epoch Step: 105 / 135 Loss: 48.21893310546875 Tokens per Sec: 16067.794019564926
Epoch Step: 110 / 135 Loss: 44.9769172668457 Tokens per Sec: 15448.931261256052
Epoch Step: 115 / 135 Loss: 26.599838256835938 Tokens per Sec: 15925.78409677148
Epoch Step: 120 / 135 Loss: 66.20832824707031 Tokens per Sec: 16289.732375092422
Epoch Step: 125 / 135 Loss: 85.51885223388672 Tokens per Sec: 16875.055340044026
Epoch Step: 130 / 135 Loss: 30.33799934387207 Tokens per Sec: 17105.37109160594
Epoch Step: 135 / 135 Loss: 47.175682067871094 Tokens per Sec: 17401.533862243377
Epoch ended with duration 0:00:14.367008
Train perplexity: 6.408722852084241
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 < TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 > ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.653791
Validation perplexity: 4.937250237961497
Model saved best_on_validation!
Epoch 8 / 1000
Epoch Step: 5 / 135 Loss: 65.25236511230469 Tokens per Sec: 19842.640552597797
Epoch Step: 10 / 135 Loss: 59.85187911987305 Tokens per Sec: 17629.237959898048
Epoch Step: 15 / 135 Loss: 59.572410583496094 Tokens per Sec: 19256.876907112695
Epoch Step: 20 / 135 Loss: 129.8660430908203 Tokens per Sec: 18534.087796903772
Epoch Step: 25 / 135 Loss: 32.57940673828125 Tokens per Sec: 16523.390334480508
Epoch Step: 30 / 135 Loss: 24.407920837402344 Tokens per Sec: 16855.512574539796
Epoch Step: 35 / 135 Loss: 99.41674041748047 Tokens per Sec: 14942.20900598355
Epoch Step: 40 / 135 Loss: 26.065404891967773 Tokens per Sec: 18060.038752639
Epoch Step: 45 / 135 Loss: 44.43455505371094 Tokens per Sec: 20722.575624546473
Epoch Step: 50 / 135 Loss: 40.63888931274414 Tokens per Sec: 18407.69498194727
Epoch Step: 55 / 135 Loss: 33.57645797729492 Tokens per Sec: 18683.62236497046
Epoch Step: 60 / 135 Loss: 62.52589416503906 Tokens per Sec: 19016.796881615253
Epoch Step: 65 / 135 Loss: 51.00027084350586 Tokens per Sec: 18481.851208199492
Epoch Step: 70 / 135 Loss: 62.77296447753906 Tokens per Sec: 19388.32394553311
Epoch Step: 75 / 135 Loss: 17.76092529296875 Tokens per Sec: 18710.133861365975
Epoch Step: 80 / 135 Loss: 71.17955780029297 Tokens per Sec: 18235.7756775097
Epoch Step: 85 / 135 Loss: 19.620691299438477 Tokens per Sec: 20094.44825911501
Epoch Step: 90 / 135 Loss: 26.635032653808594 Tokens per Sec: 17076.844427201686
Epoch Step: 95 / 135 Loss: 68.49235534667969 Tokens per Sec: 19814.974579832025
Epoch Step: 100 / 135 Loss: 56.13804244995117 Tokens per Sec: 15363.484909691251
Epoch Step: 105 / 135 Loss: 75.60212707519531 Tokens per Sec: 17260.39683223733
Epoch Step: 110 / 135 Loss: 18.38360595703125 Tokens per Sec: 16774.744634462142
Epoch Step: 115 / 135 Loss: 59.459259033203125 Tokens per Sec: 16218.453406542745
Epoch Step: 120 / 135 Loss: 79.20238494873047 Tokens per Sec: 17553.546160764592
Epoch Step: 125 / 135 Loss: 27.718975067138672 Tokens per Sec: 16009.253043438035
Epoch Step: 130 / 135 Loss: 23.708419799804688 Tokens per Sec: 16449.796947895484
Epoch Step: 135 / 135 Loss: 33.47178268432617 Tokens per Sec: 17470.80343687906
Epoch ended with duration 0:00:14.235827
Train perplexity: 5.85958910803987
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652053
Validation perplexity: 5.514167319505409
Epoch 9 / 1000
Epoch Step: 5 / 135 Loss: 43.00434112548828 Tokens per Sec: 16333.297252325796
Epoch Step: 10 / 135 Loss: 23.32170295715332 Tokens per Sec: 16949.567541896115
Epoch Step: 15 / 135 Loss: 21.1317195892334 Tokens per Sec: 18485.345451115958
Epoch Step: 20 / 135 Loss: 38.14124298095703 Tokens per Sec: 17102.476792162513
Epoch Step: 25 / 135 Loss: 44.4089469909668 Tokens per Sec: 19498.870908580102
Epoch Step: 30 / 135 Loss: 60.2863655090332 Tokens per Sec: 19252.358233151226
Epoch Step: 35 / 135 Loss: 46.13494873046875 Tokens per Sec: 18506.364482892743
Epoch Step: 40 / 135 Loss: 61.93687057495117 Tokens per Sec: 17701.964065677366
Epoch Step: 45 / 135 Loss: 54.17490768432617 Tokens per Sec: 18310.643355961078
Epoch Step: 50 / 135 Loss: 125.02005767822266 Tokens per Sec: 17987.3409030733
Epoch Step: 55 / 135 Loss: 71.47713470458984 Tokens per Sec: 19271.751203896558
Epoch Step: 60 / 135 Loss: 126.36888885498047 Tokens per Sec: 20094.865502225097
Epoch Step: 65 / 135 Loss: 24.626724243164062 Tokens per Sec: 15025.220933512834
Epoch Step: 70 / 135 Loss: 42.63182830810547 Tokens per Sec: 20001.033182522373
Epoch Step: 75 / 135 Loss: 58.11284637451172 Tokens per Sec: 18489.420008599696
Epoch Step: 80 / 135 Loss: 71.74425506591797 Tokens per Sec: 22097.847317465574
Epoch Step: 85 / 135 Loss: 35.27605056762695 Tokens per Sec: 18725.017687334235
Epoch Step: 90 / 135 Loss: 14.21113109588623 Tokens per Sec: 16798.52756482104
Epoch Step: 95 / 135 Loss: 37.745452880859375 Tokens per Sec: 17271.748359602247
Epoch Step: 100 / 135 Loss: 49.9454460144043 Tokens per Sec: 18330.718940316543
Epoch Step: 105 / 135 Loss: 97.3592758178711 Tokens per Sec: 14856.521957999257
Epoch Step: 110 / 135 Loss: 58.91240310668945 Tokens per Sec: 15969.78148157618
Epoch Step: 115 / 135 Loss: 50.31398391723633 Tokens per Sec: 17879.075532895666
Epoch Step: 120 / 135 Loss: 58.32106399536133 Tokens per Sec: 15487.739290813746
Epoch Step: 125 / 135 Loss: 39.890010833740234 Tokens per Sec: 17811.37441670185
Epoch Step: 130 / 135 Loss: 26.76638412475586 Tokens per Sec: 14447.444426748112
Epoch Step: 135 / 135 Loss: 27.927169799804688 Tokens per Sec: 17717.14652601723
Epoch ended with duration 0:00:14.303896
Train perplexity: 5.2777375854190876
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.644061
Validation perplexity: 4.424220932920834
Model saved best_on_validation!
Epoch 10 / 1000
Epoch Step: 5 / 135 Loss: 25.953176498413086 Tokens per Sec: 18279.956709484944
Epoch Step: 10 / 135 Loss: 65.65092468261719 Tokens per Sec: 19475.29588978992
Epoch Step: 15 / 135 Loss: 63.887969970703125 Tokens per Sec: 16653.327626258095
Epoch Step: 20 / 135 Loss: 68.0287857055664 Tokens per Sec: 21568.368981275424
Epoch Step: 25 / 135 Loss: 24.09128189086914 Tokens per Sec: 15692.788390856722
Epoch Step: 30 / 135 Loss: 43.05815505981445 Tokens per Sec: 19355.30301854685
Epoch Step: 35 / 135 Loss: 22.303050994873047 Tokens per Sec: 16356.514514603641
Epoch Step: 40 / 135 Loss: 38.033470153808594 Tokens per Sec: 19080.999314003275
Epoch Step: 45 / 135 Loss: 17.782344818115234 Tokens per Sec: 17564.159001949316
Epoch Step: 50 / 135 Loss: 31.58697509765625 Tokens per Sec: 20512.852244129415
Epoch Step: 55 / 135 Loss: 17.21357536315918 Tokens per Sec: 16798.549955227423
Epoch Step: 60 / 135 Loss: 18.828889846801758 Tokens per Sec: 18090.559285124094
Epoch Step: 65 / 135 Loss: 28.1458740234375 Tokens per Sec: 18638.65989362992
Epoch Step: 70 / 135 Loss: 30.952125549316406 Tokens per Sec: 19895.11103331916
Epoch Step: 75 / 135 Loss: 24.81447410583496 Tokens per Sec: 20036.407356315118
Epoch Step: 80 / 135 Loss: 23.080307006835938 Tokens per Sec: 16823.381107955487
Epoch Step: 85 / 135 Loss: 41.43163299560547 Tokens per Sec: 16034.92653074681
Epoch Step: 90 / 135 Loss: 51.8199577331543 Tokens per Sec: 20502.074369386424
Epoch Step: 95 / 135 Loss: 98.23487854003906 Tokens per Sec: 17815.673092048004
Epoch Step: 100 / 135 Loss: 73.85287475585938 Tokens per Sec: 19024.651040889345
Epoch Step: 105 / 135 Loss: 57.31303024291992 Tokens per Sec: 17318.65802691082
Epoch Step: 110 / 135 Loss: 43.79499435424805 Tokens per Sec: 16314.837643303847
Epoch Step: 115 / 135 Loss: 56.15765380859375 Tokens per Sec: 17400.35097032101
Epoch Step: 120 / 135 Loss: 60.77256393432617 Tokens per Sec: 16566.00074287195
Epoch Step: 125 / 135 Loss: 23.572921752929688 Tokens per Sec: 14802.308243315974
Epoch Step: 130 / 135 Loss: 33.78921127319336 Tokens per Sec: 17324.918701745264
Epoch Step: 135 / 135 Loss: 37.607234954833984 Tokens per Sec: 15812.996528367124
Epoch ended with duration 0:00:14.228423
Train perplexity: 4.29274617966362
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 < TYPE_2 > > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652564
Validation perplexity: 4.242147037804237
Model saved best_on_validation!
Model saved checkpoint!
Epoch 11 / 1000
Epoch Step: 5 / 135 Loss: 38.334598541259766 Tokens per Sec: 17458.411691648467
Epoch Step: 10 / 135 Loss: 65.4541244506836 Tokens per Sec: 19983.56595199866
Epoch Step: 15 / 135 Loss: 43.61880111694336 Tokens per Sec: 17470.18714780309
Epoch Step: 20 / 135 Loss: 41.78881072998047 Tokens per Sec: 15597.275194009637
Epoch Step: 25 / 135 Loss: 43.15204620361328 Tokens per Sec: 17695.640002426244
Epoch Step: 30 / 135 Loss: 41.97245407104492 Tokens per Sec: 15453.916963417732
Epoch Step: 35 / 135 Loss: 35.51752471923828 Tokens per Sec: 18540.181575342278
Epoch Step: 40 / 135 Loss: 51.111202239990234 Tokens per Sec: 17963.599992805586
Epoch Step: 45 / 135 Loss: 25.90393829345703 Tokens per Sec: 17861.77841785031
Epoch Step: 50 / 135 Loss: 69.86902618408203 Tokens per Sec: 16605.720599040018
Epoch Step: 55 / 135 Loss: 27.157838821411133 Tokens per Sec: 17489.44670350264
Epoch Step: 60 / 135 Loss: 72.05711364746094 Tokens per Sec: 18113.868739554106
Epoch Step: 65 / 135 Loss: 59.45677947998047 Tokens per Sec: 21739.793289574518
Epoch Step: 70 / 135 Loss: 37.8751335144043 Tokens per Sec: 17767.472306324093
Epoch Step: 75 / 135 Loss: 24.918630599975586 Tokens per Sec: 17560.149783610254
Epoch Step: 80 / 135 Loss: 26.685977935791016 Tokens per Sec: 16407.37173515117
Epoch Step: 85 / 135 Loss: 34.19044494628906 Tokens per Sec: 20790.72399479779
Epoch Step: 90 / 135 Loss: 181.86842346191406 Tokens per Sec: 19869.94750416851
Epoch Step: 95 / 135 Loss: 68.4814453125 Tokens per Sec: 20756.951444420276
Epoch Step: 100 / 135 Loss: 45.574581146240234 Tokens per Sec: 20355.957287537934
Epoch Step: 105 / 135 Loss: 24.530641555786133 Tokens per Sec: 17437.05226814816
Epoch Step: 110 / 135 Loss: 42.480613708496094 Tokens per Sec: 17714.06205513939
Epoch Step: 115 / 135 Loss: 47.6661376953125 Tokens per Sec: 17200.435203033994
Epoch Step: 120 / 135 Loss: 76.8488540649414 Tokens per Sec: 16218.571054622971
Epoch Step: 125 / 135 Loss: 19.697397232055664 Tokens per Sec: 16564.573108008815
Epoch Step: 130 / 135 Loss: 26.64620590209961 Tokens per Sec: 15285.769521428201
Epoch Step: 135 / 135 Loss: 52.757232666015625 Tokens per Sec: 17452.374491587158
Epoch ended with duration 0:00:14.225344
Train perplexity: 4.462694902288195
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 < TYPE_2 > TYPE_3 < TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653233
Validation perplexity: 3.6036674655042296
Model saved best_on_validation!
Epoch 12 / 1000
Epoch Step: 5 / 135 Loss: 11.196332931518555 Tokens per Sec: 17669.790573853184
Epoch Step: 10 / 135 Loss: 40.40072250366211 Tokens per Sec: 15712.697236155722
Epoch Step: 15 / 135 Loss: 51.30347442626953 Tokens per Sec: 19695.637402448534
Epoch Step: 20 / 135 Loss: 43.72309494018555 Tokens per Sec: 16054.021899972424
Epoch Step: 25 / 135 Loss: 31.387531280517578 Tokens per Sec: 17884.46165375866
Epoch Step: 30 / 135 Loss: 25.575698852539062 Tokens per Sec: 20106.817620115846
Epoch Step: 35 / 135 Loss: 21.74848747253418 Tokens per Sec: 18081.646667743986
Epoch Step: 40 / 135 Loss: 48.91486740112305 Tokens per Sec: 19410.61176811357
Epoch Step: 45 / 135 Loss: 50.67710494995117 Tokens per Sec: 20488.50571239821
Epoch Step: 50 / 135 Loss: 13.28592300415039 Tokens per Sec: 16366.203113875747
Epoch Step: 55 / 135 Loss: 40.02446365356445 Tokens per Sec: 17133.41811517034
Epoch Step: 60 / 135 Loss: 55.40330505371094 Tokens per Sec: 17834.38783961246
Epoch Step: 65 / 135 Loss: 30.167095184326172 Tokens per Sec: 15160.773250099626
Epoch Step: 70 / 135 Loss: 26.304903030395508 Tokens per Sec: 20743.670579359165
Epoch Step: 75 / 135 Loss: 41.45452117919922 Tokens per Sec: 19046.738873152535
Epoch Step: 80 / 135 Loss: 116.07762145996094 Tokens per Sec: 19032.398360400486
Epoch Step: 85 / 135 Loss: 48.30965042114258 Tokens per Sec: 19234.71200075417
Epoch Step: 90 / 135 Loss: 21.87044906616211 Tokens per Sec: 16787.836912904746
Epoch Step: 95 / 135 Loss: 47.162925720214844 Tokens per Sec: 20341.062320237015
Epoch Step: 100 / 135 Loss: 37.43684768676758 Tokens per Sec: 19934.464466828038
Epoch Step: 105 / 135 Loss: 64.80326080322266 Tokens per Sec: 15920.595797061065
Epoch Step: 110 / 135 Loss: 34.850711822509766 Tokens per Sec: 17556.246899737354
Epoch Step: 115 / 135 Loss: 43.445884704589844 Tokens per Sec: 18711.271743920686
Epoch Step: 120 / 135 Loss: 54.54640197753906 Tokens per Sec: 17116.097528965445
Epoch Step: 125 / 135 Loss: 25.946428298950195 Tokens per Sec: 14183.736122903418
Epoch Step: 130 / 135 Loss: 34.48236846923828 Tokens per Sec: 15869.446577614255
Epoch Step: 135 / 135 Loss: 76.22808837890625 Tokens per Sec: 16390.681948870166
Epoch ended with duration 0:00:14.231502
Train perplexity: 4.405576078662758
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 < TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.641868
Validation perplexity: 3.0637487423500924
Model saved best_on_validation!
Epoch 13 / 1000
Epoch Step: 5 / 135 Loss: 59.31532669067383 Tokens per Sec: 15846.09772420229
Epoch Step: 10 / 135 Loss: 11.86870002746582 Tokens per Sec: 15827.315774879295
Epoch Step: 15 / 135 Loss: 73.65119934082031 Tokens per Sec: 17197.210995210167
Epoch Step: 20 / 135 Loss: 67.7971420288086 Tokens per Sec: 20491.188643132355
Epoch Step: 25 / 135 Loss: 132.24403381347656 Tokens per Sec: 20068.524732371392
Epoch Step: 30 / 135 Loss: 35.57761764526367 Tokens per Sec: 17992.73383986976
Epoch Step: 35 / 135 Loss: 26.115314483642578 Tokens per Sec: 18388.88948981485
Epoch Step: 40 / 135 Loss: 33.099037170410156 Tokens per Sec: 17151.04403913218
Epoch Step: 45 / 135 Loss: 17.699844360351562 Tokens per Sec: 18180.711901041854
Epoch Step: 50 / 135 Loss: 35.834861755371094 Tokens per Sec: 18089.88463483026
Epoch Step: 55 / 135 Loss: 28.125673294067383 Tokens per Sec: 20138.60062880116
Epoch Step: 60 / 135 Loss: 49.53886795043945 Tokens per Sec: 19494.198303128574
Epoch Step: 65 / 135 Loss: 54.12249755859375 Tokens per Sec: 19447.71178295341
Epoch Step: 70 / 135 Loss: 31.25841522216797 Tokens per Sec: 17260.810099047736
Epoch Step: 75 / 135 Loss: 15.09370231628418 Tokens per Sec: 17455.19992973848
Epoch Step: 80 / 135 Loss: 39.62627029418945 Tokens per Sec: 19376.74282131346
Epoch Step: 85 / 135 Loss: 23.048837661743164 Tokens per Sec: 14948.245961559182
Epoch Step: 90 / 135 Loss: 14.491860389709473 Tokens per Sec: 16502.373951269572
Epoch Step: 95 / 135 Loss: 28.893220901489258 Tokens per Sec: 19497.898848195633
Epoch Step: 100 / 135 Loss: 38.9957160949707 Tokens per Sec: 19666.188340121225
Epoch Step: 105 / 135 Loss: 55.18356704711914 Tokens per Sec: 17896.174428888487
Epoch Step: 110 / 135 Loss: 40.04655075073242 Tokens per Sec: 16651.408284487876
Epoch Step: 115 / 135 Loss: 44.154640197753906 Tokens per Sec: 15287.631135008167
Epoch Step: 120 / 135 Loss: 50.820655822753906 Tokens per Sec: 16977.800873059896
Epoch Step: 125 / 135 Loss: 34.2447624206543 Tokens per Sec: 16373.141100278437
Epoch Step: 130 / 135 Loss: 60.098060607910156 Tokens per Sec: 15693.73729271633
Epoch Step: 135 / 135 Loss: 44.47626876831055 Tokens per Sec: 16855.098662660057
Epoch ended with duration 0:00:14.348865
Train perplexity: 4.029949709073746
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_1 < TYPE_2 < TYPE_2 > > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.655020
Validation perplexity: 3.72177014514891
Epoch 14 / 1000
Epoch Step: 5 / 135 Loss: 20.271024703979492 Tokens per Sec: 20175.7893386292
Epoch Step: 10 / 135 Loss: 17.98214340209961 Tokens per Sec: 21698.121712298842
Epoch Step: 15 / 135 Loss: 13.423781394958496 Tokens per Sec: 17858.691152042637
Epoch Step: 20 / 135 Loss: 64.33316040039062 Tokens per Sec: 21421.605449681847
Epoch Step: 25 / 135 Loss: 15.594776153564453 Tokens per Sec: 18776.714753178807
Epoch Step: 30 / 135 Loss: 46.910987854003906 Tokens per Sec: 18481.005719715624
Epoch Step: 35 / 135 Loss: 25.12180519104004 Tokens per Sec: 17485.187506148213
Epoch Step: 40 / 135 Loss: 36.272216796875 Tokens per Sec: 19803.709960965196
Epoch Step: 45 / 135 Loss: 53.779380798339844 Tokens per Sec: 19268.370034471845
Epoch Step: 50 / 135 Loss: 26.591028213500977 Tokens per Sec: 18993.453545442993
Epoch Step: 55 / 135 Loss: 51.015132904052734 Tokens per Sec: 17821.566651720863
Epoch Step: 60 / 135 Loss: 50.964935302734375 Tokens per Sec: 16867.027400821964
Epoch Step: 65 / 135 Loss: 37.90684127807617 Tokens per Sec: 16115.147579780887
Epoch Step: 70 / 135 Loss: 19.9547176361084 Tokens per Sec: 19374.079412650386
Epoch Step: 75 / 135 Loss: 40.20435333251953 Tokens per Sec: 17889.066621329905
Epoch Step: 80 / 135 Loss: 28.813249588012695 Tokens per Sec: 17696.042511272928
Epoch Step: 85 / 135 Loss: 19.98336410522461 Tokens per Sec: 15735.8006294148
Epoch Step: 90 / 135 Loss: 25.7603759765625 Tokens per Sec: 18274.59355383382
Epoch Step: 95 / 135 Loss: 22.839351654052734 Tokens per Sec: 17109.789458384035
Epoch Step: 100 / 135 Loss: 18.633739471435547 Tokens per Sec: 18830.78416809284
Epoch Step: 105 / 135 Loss: 32.64712905883789 Tokens per Sec: 15344.921781798937
Epoch Step: 110 / 135 Loss: 53.79866027832031 Tokens per Sec: 16727.558663538508
Epoch Step: 115 / 135 Loss: 44.622249603271484 Tokens per Sec: 15606.638770065802
Epoch Step: 120 / 135 Loss: 12.450345993041992 Tokens per Sec: 17813.54970331426
Epoch Step: 125 / 135 Loss: 16.71024513244629 Tokens per Sec: 13888.90551279487
Epoch Step: 130 / 135 Loss: 31.269968032836914 Tokens per Sec: 17934.363726513322
Epoch Step: 135 / 135 Loss: 46.57161331176758 Tokens per Sec: 16890.698649223967
Epoch ended with duration 0:00:14.213823
Train perplexity: 3.9624759609383564
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_1 < TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649450
Validation perplexity: 4.0428822839604495
Epoch 15 / 1000
Epoch Step: 5 / 135 Loss: 53.017513275146484 Tokens per Sec: 20285.586670142096
Epoch Step: 10 / 135 Loss: 20.120458602905273 Tokens per Sec: 17137.53332288456
Epoch Step: 15 / 135 Loss: 38.4566535949707 Tokens per Sec: 17600.475687447484
Epoch Step: 20 / 135 Loss: 47.28135681152344 Tokens per Sec: 19327.42183594569
Epoch Step: 25 / 135 Loss: 45.30970001220703 Tokens per Sec: 18555.213897784357
Epoch Step: 30 / 135 Loss: 51.49477005004883 Tokens per Sec: 21279.571736185968
Epoch Step: 35 / 135 Loss: 45.22872543334961 Tokens per Sec: 18212.58996881096
Epoch Step: 40 / 135 Loss: 14.837637901306152 Tokens per Sec: 16039.624780082451
Epoch Step: 45 / 135 Loss: 52.11746597290039 Tokens per Sec: 17755.311348652656
Epoch Step: 50 / 135 Loss: 34.577064514160156 Tokens per Sec: 18704.832094219757
Epoch Step: 55 / 135 Loss: 23.921573638916016 Tokens per Sec: 15551.889084795474
Epoch Step: 60 / 135 Loss: 29.15102195739746 Tokens per Sec: 17145.993951677083
Epoch Step: 65 / 135 Loss: 50.75528335571289 Tokens per Sec: 18330.348791628247
Epoch Step: 70 / 135 Loss: 21.627044677734375 Tokens per Sec: 19123.772556213728
Epoch Step: 75 / 135 Loss: 41.252288818359375 Tokens per Sec: 17499.48202060732
Epoch Step: 80 / 135 Loss: 38.27175521850586 Tokens per Sec: 19228.168315354695
Epoch Step: 85 / 135 Loss: 40.650081634521484 Tokens per Sec: 19948.574656912522
Epoch Step: 90 / 135 Loss: 41.98516845703125 Tokens per Sec: 20855.678856376748
Epoch Step: 95 / 135 Loss: 20.17974853515625 Tokens per Sec: 16045.494095202686
Epoch Step: 100 / 135 Loss: 31.009912490844727 Tokens per Sec: 19464.601542470344
Epoch Step: 105 / 135 Loss: 45.106075286865234 Tokens per Sec: 17968.09068858193
Epoch Step: 110 / 135 Loss: 16.607332229614258 Tokens per Sec: 15045.85813868508
Epoch Step: 115 / 135 Loss: 13.049614906311035 Tokens per Sec: 15776.24568082258
Epoch Step: 120 / 135 Loss: 38.27935028076172 Tokens per Sec: 15418.591934711403
Epoch Step: 125 / 135 Loss: 54.51726150512695 Tokens per Sec: 17018.773567605112
Epoch Step: 130 / 135 Loss: 27.941429138183594 Tokens per Sec: 16190.558449018747
Epoch Step: 135 / 135 Loss: 34.8438835144043 Tokens per Sec: 19070.406471597853
Epoch ended with duration 0:00:14.144935
Train perplexity: 3.2510008162014783
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_1 < TYPE_2 < TYPE_2 > > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654977
Validation perplexity: 3.3364627843952137
Model saved checkpoint!
Epoch 16 / 1000
Epoch Step: 5 / 135 Loss: 38.61006546020508 Tokens per Sec: 17595.37508092331
Epoch Step: 10 / 135 Loss: 21.574058532714844 Tokens per Sec: 21453.275549144983
Epoch Step: 15 / 135 Loss: 25.106931686401367 Tokens per Sec: 21216.413590253167
Epoch Step: 20 / 135 Loss: 20.804393768310547 Tokens per Sec: 17229.221394189397
Epoch Step: 25 / 135 Loss: 22.53318977355957 Tokens per Sec: 17385.742832330423
Epoch Step: 30 / 135 Loss: 46.53510665893555 Tokens per Sec: 18753.354247729832
Epoch Step: 35 / 135 Loss: 43.82297134399414 Tokens per Sec: 20913.726837021317
Epoch Step: 40 / 135 Loss: 16.28364372253418 Tokens per Sec: 16791.111261667957
Epoch Step: 45 / 135 Loss: 24.325515747070312 Tokens per Sec: 19384.76228429019
Epoch Step: 50 / 135 Loss: 165.22593688964844 Tokens per Sec: 17810.315569954713
Epoch Step: 55 / 135 Loss: 22.88401222229004 Tokens per Sec: 17005.132321085293
Epoch Step: 60 / 135 Loss: 29.163949966430664 Tokens per Sec: 17333.6914011101
Epoch Step: 65 / 135 Loss: 57.47287368774414 Tokens per Sec: 19631.50155121472
Epoch Step: 70 / 135 Loss: 15.365058898925781 Tokens per Sec: 19313.63037066964
Epoch Step: 75 / 135 Loss: 11.522052764892578 Tokens per Sec: 19439.61041524639
Epoch Step: 80 / 135 Loss: 14.122359275817871 Tokens per Sec: 20636.86373019558
Epoch Step: 85 / 135 Loss: 45.09741973876953 Tokens per Sec: 14097.681728000827
Epoch Step: 90 / 135 Loss: 20.618816375732422 Tokens per Sec: 15540.031339048659
Epoch Step: 95 / 135 Loss: 23.660884857177734 Tokens per Sec: 17565.101044726558
Epoch Step: 100 / 135 Loss: 41.21540451049805 Tokens per Sec: 18863.392979393237
Epoch Step: 105 / 135 Loss: 19.461395263671875 Tokens per Sec: 15696.772900214748
Epoch Step: 110 / 135 Loss: 15.636195182800293 Tokens per Sec: 17948.80259543395
Epoch Step: 115 / 135 Loss: 33.69488525390625 Tokens per Sec: 15725.151469686076
Epoch Step: 120 / 135 Loss: 106.19060516357422 Tokens per Sec: 17156.630722319314
Epoch Step: 125 / 135 Loss: 51.17158508300781 Tokens per Sec: 16910.591722741938
Epoch Step: 130 / 135 Loss: 36.12311935424805 Tokens per Sec: 17256.849122697568
Epoch Step: 135 / 135 Loss: 19.839162826538086 Tokens per Sec: 15970.940462607168
Epoch ended with duration 0:00:14.208120
Train perplexity: 3.4278713161763883
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_1 < TYPE_2 < TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649171
Validation perplexity: 2.6994588674642417
Model saved best_on_validation!
Epoch 17 / 1000
Epoch Step: 5 / 135 Loss: 19.265180587768555 Tokens per Sec: 17285.46335429374
Epoch Step: 10 / 135 Loss: 30.006195068359375 Tokens per Sec: 19186.379511472984
Epoch Step: 15 / 135 Loss: 24.758440017700195 Tokens per Sec: 19337.596268782898
Epoch Step: 20 / 135 Loss: 33.259368896484375 Tokens per Sec: 18476.435053421104
Epoch Step: 25 / 135 Loss: 24.605377197265625 Tokens per Sec: 15505.911738622794
Epoch Step: 30 / 135 Loss: 13.497404098510742 Tokens per Sec: 18413.785091590427
Epoch Step: 35 / 135 Loss: 24.03268051147461 Tokens per Sec: 19730.79384323452
Epoch Step: 40 / 135 Loss: 19.98911476135254 Tokens per Sec: 18738.416809169612
Epoch Step: 45 / 135 Loss: 44.0145263671875 Tokens per Sec: 21476.307807723642
Epoch Step: 50 / 135 Loss: 22.153518676757812 Tokens per Sec: 15636.627714527809
Epoch Step: 55 / 135 Loss: 17.14279556274414 Tokens per Sec: 16529.51901496615
Epoch Step: 60 / 135 Loss: 31.393991470336914 Tokens per Sec: 18049.33436500646
Epoch Step: 65 / 135 Loss: 115.97634887695312 Tokens per Sec: 19647.34113528732
Epoch Step: 70 / 135 Loss: 57.691463470458984 Tokens per Sec: 19792.782247672672
Epoch Step: 75 / 135 Loss: 13.212465286254883 Tokens per Sec: 20757.652015484407
Epoch Step: 80 / 135 Loss: 19.538684844970703 Tokens per Sec: 15033.487058374736
Epoch Step: 85 / 135 Loss: 24.244821548461914 Tokens per Sec: 20232.510612772978
Epoch Step: 90 / 135 Loss: 64.76945495605469 Tokens per Sec: 18041.018542698603
Epoch Step: 95 / 135 Loss: 56.86418151855469 Tokens per Sec: 16601.275584965497
Epoch Step: 100 / 135 Loss: 10.574345588684082 Tokens per Sec: 18352.40286737983
Epoch Step: 105 / 135 Loss: 30.338647842407227 Tokens per Sec: 15886.455014291154
Epoch Step: 110 / 135 Loss: 36.8011474609375 Tokens per Sec: 17628.554946342523
Epoch Step: 115 / 135 Loss: 28.94845199584961 Tokens per Sec: 17310.747683347214
Epoch Step: 120 / 135 Loss: 13.641867637634277 Tokens per Sec: 14472.450263189432
Epoch Step: 125 / 135 Loss: 11.510784149169922 Tokens per Sec: 15885.511384157751
Epoch Step: 130 / 135 Loss: 112.21684265136719 Tokens per Sec: 15844.667365003896
Epoch Step: 135 / 135 Loss: 26.07132911682129 Tokens per Sec: 17027.824079956852
Epoch ended with duration 0:00:14.282780
Train perplexity: 3.5849170504785435
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_1 < TYPE_2 < TYPE_3 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653779
Validation perplexity: 3.061444909000198
Epoch 18 / 1000
Epoch Step: 5 / 135 Loss: 22.743986129760742 Tokens per Sec: 18866.64000627233
Epoch Step: 10 / 135 Loss: 20.31403350830078 Tokens per Sec: 19606.349665241592
Epoch Step: 15 / 135 Loss: 45.348854064941406 Tokens per Sec: 19917.5124849503
Epoch Step: 20 / 135 Loss: 44.86030960083008 Tokens per Sec: 19182.542082991306
Epoch Step: 25 / 135 Loss: 63.54908752441406 Tokens per Sec: 15927.233291463435
Epoch Step: 30 / 135 Loss: 45.98809051513672 Tokens per Sec: 19988.49183835865
Epoch Step: 35 / 135 Loss: 67.15270233154297 Tokens per Sec: 16492.91138958958
Epoch Step: 40 / 135 Loss: 40.534549713134766 Tokens per Sec: 18535.89050057079
Epoch Step: 45 / 135 Loss: 50.67668914794922 Tokens per Sec: 18940.899199079504
Epoch Step: 50 / 135 Loss: 17.045318603515625 Tokens per Sec: 17082.771703488488
Epoch Step: 55 / 135 Loss: 25.906803131103516 Tokens per Sec: 19186.666766240636
Epoch Step: 60 / 135 Loss: 38.30775451660156 Tokens per Sec: 17921.597638479838
Epoch Step: 65 / 135 Loss: 12.438135147094727 Tokens per Sec: 16355.649938973163
Epoch Step: 70 / 135 Loss: 23.932466506958008 Tokens per Sec: 17774.188701082632
Epoch Step: 75 / 135 Loss: 27.879968643188477 Tokens per Sec: 19064.894165753896
Epoch Step: 80 / 135 Loss: 47.68492126464844 Tokens per Sec: 16317.382086622518
Epoch Step: 85 / 135 Loss: 17.46855354309082 Tokens per Sec: 19015.153886145596
Epoch Step: 90 / 135 Loss: 13.313419342041016 Tokens per Sec: 17418.62839393925
Epoch Step: 95 / 135 Loss: 13.178548812866211 Tokens per Sec: 18011.19922172794
Epoch Step: 100 / 135 Loss: 22.15852928161621 Tokens per Sec: 17069.74371288943
Epoch Step: 105 / 135 Loss: 16.794254302978516 Tokens per Sec: 15136.05591380999
Epoch Step: 110 / 135 Loss: 37.69617462158203 Tokens per Sec: 16319.433368595815
Epoch Step: 115 / 135 Loss: 30.119766235351562 Tokens per Sec: 16257.16804177345
Epoch Step: 120 / 135 Loss: 46.10103225708008 Tokens per Sec: 18227.615591065467
Epoch Step: 125 / 135 Loss: 32.875728607177734 Tokens per Sec: 18060.77240289055
Epoch Step: 130 / 135 Loss: 45.866634368896484 Tokens per Sec: 19040.470163507005
Epoch Step: 135 / 135 Loss: 13.92402458190918 Tokens per Sec: 14538.556146967923
Epoch ended with duration 0:00:14.271910
Train perplexity: 3.2430180278790246
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_3 < TYPE_3 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649906
Validation perplexity: 2.8568903222392312
Epoch 19 / 1000
Epoch Step: 5 / 135 Loss: 20.757333755493164 Tokens per Sec: 20462.17551811894
Epoch Step: 10 / 135 Loss: 33.01594924926758 Tokens per Sec: 18131.87796304284
Epoch Step: 15 / 135 Loss: 32.89470291137695 Tokens per Sec: 17844.67434542687
Epoch Step: 20 / 135 Loss: 12.462549209594727 Tokens per Sec: 16839.885458744877
Epoch Step: 25 / 135 Loss: 22.84099578857422 Tokens per Sec: 18066.12339080299
Epoch Step: 30 / 135 Loss: 32.848636627197266 Tokens per Sec: 17862.213678066342
Epoch Step: 35 / 135 Loss: 35.978580474853516 Tokens per Sec: 18503.095643436754
Epoch Step: 40 / 135 Loss: 16.73996353149414 Tokens per Sec: 16970.273479370517
Epoch Step: 45 / 135 Loss: 42.186866760253906 Tokens per Sec: 20892.276725970438
Epoch Step: 50 / 135 Loss: 56.641971588134766 Tokens per Sec: 18156.75443659541
Epoch Step: 55 / 135 Loss: 23.400869369506836 Tokens per Sec: 20453.69415069567
Epoch Step: 60 / 135 Loss: 33.94313430786133 Tokens per Sec: 17061.934291872283
Epoch Step: 65 / 135 Loss: 24.951053619384766 Tokens per Sec: 16589.559120450824
Epoch Step: 70 / 135 Loss: 124.04930877685547 Tokens per Sec: 19209.619572515254
Epoch Step: 75 / 135 Loss: 10.82008171081543 Tokens per Sec: 18719.117851330902
Epoch Step: 80 / 135 Loss: 27.32941246032715 Tokens per Sec: 18935.955354581532
Epoch Step: 85 / 135 Loss: 50.8623046875 Tokens per Sec: 19927.635232693625
Epoch Step: 90 / 135 Loss: 38.87439727783203 Tokens per Sec: 14484.502735452073
Epoch Step: 95 / 135 Loss: 25.322328567504883 Tokens per Sec: 16008.093925373221
Epoch Step: 100 / 135 Loss: 57.996097564697266 Tokens per Sec: 21160.354453706695
Epoch Step: 105 / 135 Loss: 18.882022857666016 Tokens per Sec: 16886.051894577056
Epoch Step: 110 / 135 Loss: 17.000585556030273 Tokens per Sec: 17508.66097780647
Epoch Step: 115 / 135 Loss: 33.87021255493164 Tokens per Sec: 17615.957857222973
Epoch Step: 120 / 135 Loss: 50.55777359008789 Tokens per Sec: 13898.267100679132
Epoch Step: 125 / 135 Loss: 17.11138153076172 Tokens per Sec: 16078.081750782478
Epoch Step: 130 / 135 Loss: 50.65156936645508 Tokens per Sec: 16536.411739527215
Epoch Step: 135 / 135 Loss: 34.13738250732422 Tokens per Sec: 16887.811843211224
Epoch ended with duration 0:00:14.283643
Train perplexity: 3.0633853052369493
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_1 < TYPE_2 < TYPE_3 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.643778
Validation perplexity: 2.341589584512503
Model saved best_on_validation!
Epoch 20 / 1000
Epoch Step: 5 / 135 Loss: 26.25115203857422 Tokens per Sec: 16570.541959703052
Epoch Step: 10 / 135 Loss: 19.354167938232422 Tokens per Sec: 17259.10281495619
Epoch Step: 15 / 135 Loss: 25.544912338256836 Tokens per Sec: 18083.358590577056
Epoch Step: 20 / 135 Loss: 18.708709716796875 Tokens per Sec: 17767.690009070968
Epoch Step: 25 / 135 Loss: 19.90595245361328 Tokens per Sec: 19456.855439207193
Epoch Step: 30 / 135 Loss: 13.803816795349121 Tokens per Sec: 20980.9746472897
Epoch Step: 35 / 135 Loss: 15.346393585205078 Tokens per Sec: 19763.25680505859
Epoch Step: 40 / 135 Loss: 19.065065383911133 Tokens per Sec: 16960.72616873731
Epoch Step: 45 / 135 Loss: 27.00578498840332 Tokens per Sec: 20616.147665018205
Epoch Step: 50 / 135 Loss: 13.361222267150879 Tokens per Sec: 15647.454134631389
Epoch Step: 55 / 135 Loss: 13.623766899108887 Tokens per Sec: 18314.448059722516
Epoch Step: 60 / 135 Loss: 43.192386627197266 Tokens per Sec: 18005.680762754724
Epoch Step: 65 / 135 Loss: 15.848895072937012 Tokens per Sec: 18228.15092421059
Epoch Step: 70 / 135 Loss: 22.323749542236328 Tokens per Sec: 18691.46859628166
Epoch Step: 75 / 135 Loss: 33.119117736816406 Tokens per Sec: 16369.886267146432
Epoch Step: 80 / 135 Loss: 36.160362243652344 Tokens per Sec: 18077.737426991705
Epoch Step: 85 / 135 Loss: 20.040084838867188 Tokens per Sec: 17390.641923259984
Epoch Step: 90 / 135 Loss: 25.904970169067383 Tokens per Sec: 19373.40573890381
Epoch Step: 95 / 135 Loss: 44.361759185791016 Tokens per Sec: 20259.683053788318
Epoch Step: 100 / 135 Loss: 34.316925048828125 Tokens per Sec: 18292.479590061805
Epoch Step: 105 / 135 Loss: 37.70042037963867 Tokens per Sec: 16963.926359656063
Epoch Step: 110 / 135 Loss: 12.526252746582031 Tokens per Sec: 16630.64360444688
Epoch Step: 115 / 135 Loss: 45.36063766479492 Tokens per Sec: 18046.66078242256
Epoch Step: 120 / 135 Loss: 34.958152770996094 Tokens per Sec: 17818.320003734698
Epoch Step: 125 / 135 Loss: 29.059110641479492 Tokens per Sec: 16127.242271141407
Epoch Step: 130 / 135 Loss: 20.199583053588867 Tokens per Sec: 14447.665717886743
Epoch Step: 135 / 135 Loss: 38.13909912109375 Tokens per Sec: 17638.935281459133
Epoch ended with duration 0:00:14.235710
Train perplexity: 2.5423435247293993
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646778
Validation perplexity: 2.617886020770757
Model saved checkpoint!
Epoch 21 / 1000
Epoch Step: 5 / 135 Loss: 14.67745590209961 Tokens per Sec: 13849.648948374761
Epoch Step: 10 / 135 Loss: 14.320780754089355 Tokens per Sec: 16392.78236506612
Epoch Step: 15 / 135 Loss: 12.435089111328125 Tokens per Sec: 15523.843569269719
Epoch Step: 20 / 135 Loss: 9.88277530670166 Tokens per Sec: 16661.98223336018
Epoch Step: 25 / 135 Loss: 30.20118522644043 Tokens per Sec: 17361.413261541158
Epoch Step: 30 / 135 Loss: 10.369976997375488 Tokens per Sec: 17141.957907633936
Epoch Step: 35 / 135 Loss: 27.029762268066406 Tokens per Sec: 20127.599728013574
Epoch Step: 40 / 135 Loss: 34.266780853271484 Tokens per Sec: 16154.565770300935
Epoch Step: 45 / 135 Loss: 24.115253448486328 Tokens per Sec: 19131.726347342952
Epoch Step: 50 / 135 Loss: 22.651994705200195 Tokens per Sec: 14454.405919006962
Epoch Step: 55 / 135 Loss: 16.370901107788086 Tokens per Sec: 16419.682409356938
Epoch Step: 60 / 135 Loss: 18.397602081298828 Tokens per Sec: 19571.60405329777
Epoch Step: 65 / 135 Loss: 38.61868667602539 Tokens per Sec: 20110.742824741206
Epoch Step: 70 / 135 Loss: 106.91582489013672 Tokens per Sec: 17258.32855453733
Epoch Step: 75 / 135 Loss: 29.633230209350586 Tokens per Sec: 16837.68429638978
Epoch Step: 80 / 135 Loss: 33.37092208862305 Tokens per Sec: 18143.96018464109
Epoch Step: 85 / 135 Loss: 93.23515319824219 Tokens per Sec: 17758.076816214634
Epoch Step: 90 / 135 Loss: 19.480926513671875 Tokens per Sec: 19486.79746129086
Epoch Step: 95 / 135 Loss: 19.74088478088379 Tokens per Sec: 14559.27469275082
Epoch Step: 100 / 135 Loss: 29.03765296936035 Tokens per Sec: 19723.244261924265
Epoch Step: 105 / 135 Loss: 24.475873947143555 Tokens per Sec: 17231.236039344494
Epoch Step: 110 / 135 Loss: 38.84391784667969 Tokens per Sec: 15296.275011873773
Epoch Step: 115 / 135 Loss: 28.936111450195312 Tokens per Sec: 14637.31617833737
Epoch Step: 120 / 135 Loss: 31.89040756225586 Tokens per Sec: 16679.16683847713
Epoch Step: 125 / 135 Loss: 26.15996551513672 Tokens per Sec: 14971.257267809004
Epoch Step: 130 / 135 Loss: 30.531620025634766 Tokens per Sec: 15386.42017455788
Epoch Step: 135 / 135 Loss: 11.661541938781738 Tokens per Sec: 15182.957326181697
Epoch ended with duration 0:00:15.068854
Train perplexity: 2.7304386954721536
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_1 < java.lang.String , TYPE_3 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.730563
Validation perplexity: 2.733160926544261
Epoch 22 / 1000
Epoch Step: 5 / 135 Loss: 8.842731475830078 Tokens per Sec: 17322.64377468198
Epoch Step: 10 / 135 Loss: 16.71255111694336 Tokens per Sec: 18504.78871275012
Epoch Step: 15 / 135 Loss: 21.175739288330078 Tokens per Sec: 18250.35649129173
Epoch Step: 20 / 135 Loss: 36.307823181152344 Tokens per Sec: 18608.947277184932
Epoch Step: 25 / 135 Loss: 29.4493350982666 Tokens per Sec: 18840.88561566294
Epoch Step: 30 / 135 Loss: 9.41460132598877 Tokens per Sec: 18202.740248552007
Epoch Step: 35 / 135 Loss: 31.970123291015625 Tokens per Sec: 18672.913783832577
Epoch Step: 40 / 135 Loss: 20.310426712036133 Tokens per Sec: 16395.0292003582
Epoch Step: 45 / 135 Loss: 21.377492904663086 Tokens per Sec: 17880.324432658785
Epoch Step: 50 / 135 Loss: 23.35064125061035 Tokens per Sec: 16361.020869241374
Epoch Step: 55 / 135 Loss: 36.643341064453125 Tokens per Sec: 18371.311273600168
Epoch Step: 60 / 135 Loss: 50.54668045043945 Tokens per Sec: 14270.405026703897
Epoch Step: 65 / 135 Loss: 12.995869636535645 Tokens per Sec: 18999.759744713112
Epoch Step: 70 / 135 Loss: 21.576217651367188 Tokens per Sec: 14943.391860836096
Epoch Step: 75 / 135 Loss: 29.615779876708984 Tokens per Sec: 17493.312372105644
Epoch Step: 80 / 135 Loss: 9.374507904052734 Tokens per Sec: 18151.106463066604
Epoch Step: 85 / 135 Loss: 25.36296844482422 Tokens per Sec: 14888.25225791138
Epoch Step: 90 / 135 Loss: 33.781978607177734 Tokens per Sec: 16625.02612785032
Epoch Step: 95 / 135 Loss: 21.995168685913086 Tokens per Sec: 16829.171254297875
Epoch Step: 100 / 135 Loss: 34.6734504699707 Tokens per Sec: 19834.98893181182
Epoch Step: 105 / 135 Loss: 31.18318748474121 Tokens per Sec: 16415.81450810764
Epoch Step: 110 / 135 Loss: 16.66443634033203 Tokens per Sec: 14466.060064433836
Epoch Step: 115 / 135 Loss: 24.107179641723633 Tokens per Sec: 15473.03523862092
Epoch Step: 120 / 135 Loss: 9.100380897521973 Tokens per Sec: 16849.862448688888
Epoch Step: 125 / 135 Loss: 20.079605102539062 Tokens per Sec: 15580.690294407486
Epoch Step: 130 / 135 Loss: 13.559362411499023 Tokens per Sec: 14405.209933555761
Epoch Step: 135 / 135 Loss: 32.28666305541992 Tokens per Sec: 15139.13501720949
Epoch ended with duration 0:00:15.034168
Train perplexity: 2.4616622210785217
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.720992
Validation perplexity: 2.09964429509893
Model saved best_on_validation!
Epoch 23 / 1000
Epoch Step: 5 / 135 Loss: 28.513654708862305 Tokens per Sec: 16769.953909172084
Epoch Step: 10 / 135 Loss: 22.781862258911133 Tokens per Sec: 18486.58027633225
Epoch Step: 15 / 135 Loss: 84.23179626464844 Tokens per Sec: 18253.707148213325
Epoch Step: 20 / 135 Loss: 10.50002670288086 Tokens per Sec: 16829.927589493116
Epoch Step: 25 / 135 Loss: 12.797717094421387 Tokens per Sec: 12915.183641007212
Epoch Step: 30 / 135 Loss: 41.69483947753906 Tokens per Sec: 17340.546948516625
Epoch Step: 35 / 135 Loss: 8.559077262878418 Tokens per Sec: 18989.922568518676
Epoch Step: 40 / 135 Loss: 10.061347007751465 Tokens per Sec: 18230.42820579717
Epoch Step: 45 / 135 Loss: 25.059354782104492 Tokens per Sec: 15510.494960272452
Epoch Step: 50 / 135 Loss: 37.500831604003906 Tokens per Sec: 18170.253589966287
Epoch Step: 55 / 135 Loss: 23.770471572875977 Tokens per Sec: 17335.520384739117
Epoch Step: 60 / 135 Loss: 21.24491310119629 Tokens per Sec: 19166.235330691383
Epoch Step: 65 / 135 Loss: 36.3043212890625 Tokens per Sec: 16154.89867088404
Epoch Step: 70 / 135 Loss: 22.513385772705078 Tokens per Sec: 14983.87879124674
Epoch Step: 75 / 135 Loss: 68.14179992675781 Tokens per Sec: 17108.060726403724
Epoch Step: 80 / 135 Loss: 40.92063522338867 Tokens per Sec: 17655.479978729665
Epoch Step: 85 / 135 Loss: 41.98168182373047 Tokens per Sec: 18235.56435080654
Epoch Step: 90 / 135 Loss: 37.60225296020508 Tokens per Sec: 18231.70702197846
Epoch Step: 95 / 135 Loss: 23.890451431274414 Tokens per Sec: 18083.811797004033
Epoch Step: 100 / 135 Loss: 28.746442794799805 Tokens per Sec: 16121.619319779526
Epoch Step: 105 / 135 Loss: 20.239896774291992 Tokens per Sec: 13811.091082035988
Epoch Step: 110 / 135 Loss: 33.235389709472656 Tokens per Sec: 16537.74172068634
Epoch Step: 115 / 135 Loss: 18.898618698120117 Tokens per Sec: 16414.30074057346
Epoch Step: 120 / 135 Loss: 34.17301559448242 Tokens per Sec: 15290.71731053012
Epoch Step: 125 / 135 Loss: 14.667463302612305 Tokens per Sec: 16596.21303122716
Epoch Step: 130 / 135 Loss: 66.28292846679688 Tokens per Sec: 16292.856367931596
Epoch Step: 135 / 135 Loss: 29.60129737854004 Tokens per Sec: 16042.736038928988
Epoch ended with duration 0:00:15.039885
Train perplexity: 2.770304836320183
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.731091
Validation perplexity: 2.799798268922451
Epoch 24 / 1000
Epoch Step: 5 / 135 Loss: 52.550331115722656 Tokens per Sec: 16492.281062013597
Epoch Step: 10 / 135 Loss: 9.280064582824707 Tokens per Sec: 18800.660380521556
Epoch Step: 15 / 135 Loss: 14.795720100402832 Tokens per Sec: 16697.822924228683
Epoch Step: 20 / 135 Loss: 14.36436939239502 Tokens per Sec: 15751.066277956981
Epoch Step: 25 / 135 Loss: 13.231610298156738 Tokens per Sec: 14737.990300122337
Epoch Step: 30 / 135 Loss: 20.49298667907715 Tokens per Sec: 17361.666333553723
Epoch Step: 35 / 135 Loss: 23.75057029724121 Tokens per Sec: 17027.90388317022
Epoch Step: 40 / 135 Loss: 33.42189407348633 Tokens per Sec: 16853.293991990762
Epoch Step: 45 / 135 Loss: 45.25703811645508 Tokens per Sec: 16470.11811815464
Epoch Step: 50 / 135 Loss: 32.5088996887207 Tokens per Sec: 18419.650008645178
Epoch Step: 55 / 135 Loss: 19.77304458618164 Tokens per Sec: 16373.355800067036
Epoch Step: 60 / 135 Loss: 48.54597854614258 Tokens per Sec: 18130.072373957617
Epoch Step: 65 / 135 Loss: 22.3233699798584 Tokens per Sec: 19077.03249234476
Epoch Step: 70 / 135 Loss: 33.594661712646484 Tokens per Sec: 17521.100018495985
Epoch Step: 75 / 135 Loss: 11.360821723937988 Tokens per Sec: 15599.765654544268
Epoch Step: 80 / 135 Loss: 20.555910110473633 Tokens per Sec: 18362.233652235114
Epoch Step: 85 / 135 Loss: 70.8902359008789 Tokens per Sec: 17195.864913590864
Epoch Step: 90 / 135 Loss: 30.650405883789062 Tokens per Sec: 17499.339514080093
Epoch Step: 95 / 135 Loss: 28.801681518554688 Tokens per Sec: 18202.66244995796
Epoch Step: 100 / 135 Loss: 35.96635437011719 Tokens per Sec: 16713.66463785871
Epoch Step: 105 / 135 Loss: 117.48387908935547 Tokens per Sec: 17240.8706295445
Epoch Step: 110 / 135 Loss: 26.037187576293945 Tokens per Sec: 14870.404682936078
Epoch Step: 115 / 135 Loss: 17.72772216796875 Tokens per Sec: 15191.54479919087
Epoch Step: 120 / 135 Loss: 31.19291877746582 Tokens per Sec: 16682.081959069947
Epoch Step: 125 / 135 Loss: 32.42979049682617 Tokens per Sec: 15423.689289768981
Epoch Step: 130 / 135 Loss: 27.111820220947266 Tokens per Sec: 15663.717487276905
Epoch Step: 135 / 135 Loss: 24.014034271240234 Tokens per Sec: 15049.59968700612
Epoch ended with duration 0:00:15.156224
Train perplexity: 2.2644959383239014
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.723137
Validation perplexity: 2.4931838417028307
Epoch 25 / 1000
Epoch Step: 5 / 135 Loss: 23.29384994506836 Tokens per Sec: 17710.3510840111
Epoch Step: 10 / 135 Loss: 13.058961868286133 Tokens per Sec: 16451.319043252293
Epoch Step: 15 / 135 Loss: 17.922958374023438 Tokens per Sec: 16993.63465185356
Epoch Step: 20 / 135 Loss: 17.613115310668945 Tokens per Sec: 18272.68900620856
Epoch Step: 25 / 135 Loss: 14.123541831970215 Tokens per Sec: 18737.671924643048
Epoch Step: 30 / 135 Loss: 20.045686721801758 Tokens per Sec: 21168.66805660773
Epoch Step: 35 / 135 Loss: 10.853302955627441 Tokens per Sec: 15991.150365472417
Epoch Step: 40 / 135 Loss: 27.453121185302734 Tokens per Sec: 17759.25528295356
Epoch Step: 45 / 135 Loss: 92.82296752929688 Tokens per Sec: 18504.99050368208
Epoch Step: 50 / 135 Loss: 24.441551208496094 Tokens per Sec: 16776.91832037557
Epoch Step: 55 / 135 Loss: 18.33108139038086 Tokens per Sec: 19311.87385908915
Epoch Step: 60 / 135 Loss: 26.719905853271484 Tokens per Sec: 16298.769557390126
Epoch Step: 65 / 135 Loss: 36.376468658447266 Tokens per Sec: 16220.050589174663
Epoch Step: 70 / 135 Loss: 32.42394256591797 Tokens per Sec: 15673.555857827903
Epoch Step: 75 / 135 Loss: 18.994850158691406 Tokens per Sec: 17100.75948321836
Epoch Step: 80 / 135 Loss: 10.56697940826416 Tokens per Sec: 18871.509598996898
Epoch Step: 85 / 135 Loss: 10.943441390991211 Tokens per Sec: 13759.934326808043
Epoch Step: 90 / 135 Loss: 21.10289764404297 Tokens per Sec: 17766.718537893463
Epoch Step: 95 / 135 Loss: 21.229473114013672 Tokens per Sec: 16945.618729649
Epoch Step: 100 / 135 Loss: 16.500972747802734 Tokens per Sec: 18497.11620121966
Epoch Step: 105 / 135 Loss: 13.892809867858887 Tokens per Sec: 15555.388382188632
Epoch Step: 110 / 135 Loss: 26.75539779663086 Tokens per Sec: 16513.752191148476
Epoch Step: 115 / 135 Loss: 46.05786895751953 Tokens per Sec: 14914.690213758071
Epoch Step: 120 / 135 Loss: 25.198930740356445 Tokens per Sec: 16163.910135296122
Epoch Step: 125 / 135 Loss: 18.174713134765625 Tokens per Sec: 15079.429370220463
Epoch Step: 130 / 135 Loss: 10.719218254089355 Tokens per Sec: 15517.490845098802
Epoch Step: 135 / 135 Loss: 27.918136596679688 Tokens per Sec: 15633.56746691328
Epoch ended with duration 0:00:14.986093
Train perplexity: 2.433473455904148
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.730183
Validation perplexity: 2.102544918835996
Model saved checkpoint!
Epoch 26 / 1000
Epoch Step: 5 / 135 Loss: 19.006999969482422 Tokens per Sec: 16897.367374078185
Epoch Step: 10 / 135 Loss: 10.021671295166016 Tokens per Sec: 15914.709721922234
Epoch Step: 15 / 135 Loss: 75.80400085449219 Tokens per Sec: 13504.436013157117
Epoch Step: 20 / 135 Loss: 54.91725540161133 Tokens per Sec: 16765.71950662403
Epoch Step: 25 / 135 Loss: 9.351652145385742 Tokens per Sec: 20436.689752321825
Epoch Step: 30 / 135 Loss: 31.066591262817383 Tokens per Sec: 18129.901154976047
Epoch Step: 35 / 135 Loss: 10.399532318115234 Tokens per Sec: 14332.847676071378
Epoch Step: 40 / 135 Loss: 18.871397018432617 Tokens per Sec: 16956.142472105275
Epoch Step: 45 / 135 Loss: 7.684791088104248 Tokens per Sec: 15685.9913711638
Epoch Step: 50 / 135 Loss: 36.48160934448242 Tokens per Sec: 19037.109755165257
Epoch Step: 55 / 135 Loss: 18.831472396850586 Tokens per Sec: 18649.634357946554
Epoch Step: 60 / 135 Loss: 11.806328773498535 Tokens per Sec: 17180.569756779423
Epoch Step: 65 / 135 Loss: 13.322425842285156 Tokens per Sec: 18628.79058295251
Epoch Step: 70 / 135 Loss: 39.12305450439453 Tokens per Sec: 17306.605997189658
Epoch Step: 75 / 135 Loss: 47.097652435302734 Tokens per Sec: 15603.826749314183
Epoch Step: 80 / 135 Loss: 20.341001510620117 Tokens per Sec: 19494.756494401296
Epoch Step: 85 / 135 Loss: 23.756576538085938 Tokens per Sec: 17950.689714653934
Epoch Step: 90 / 135 Loss: 15.80456829071045 Tokens per Sec: 16299.084068656692
Epoch Step: 95 / 135 Loss: 7.605263710021973 Tokens per Sec: 18130.07984631915
Epoch Step: 100 / 135 Loss: 33.763946533203125 Tokens per Sec: 17856.19507771368
Epoch Step: 105 / 135 Loss: 23.1715030670166 Tokens per Sec: 16596.132272848106
Epoch Step: 110 / 135 Loss: 19.26078987121582 Tokens per Sec: 16187.877474001192
Epoch Step: 115 / 135 Loss: 18.843250274658203 Tokens per Sec: 16711.205414428743
Epoch Step: 120 / 135 Loss: 23.62257957458496 Tokens per Sec: 16814.191226929186
Epoch Step: 125 / 135 Loss: 28.8875789642334 Tokens per Sec: 14934.475848076585
Epoch Step: 130 / 135 Loss: 74.02618408203125 Tokens per Sec: 13448.174431386602
Epoch Step: 135 / 135 Loss: 11.997001647949219 Tokens per Sec: 15265.678250371417
Epoch ended with duration 0:00:15.104925
Train perplexity: 2.2423742291609203
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.730692
Validation perplexity: 2.632664846777361
Epoch 27 / 1000
Epoch Step: 5 / 135 Loss: 13.764781951904297 Tokens per Sec: 14035.08428826076
Epoch Step: 10 / 135 Loss: 8.53067398071289 Tokens per Sec: 13958.896639955741
Epoch Step: 15 / 135 Loss: 32.877952575683594 Tokens per Sec: 18162.356973357684
Epoch Step: 20 / 135 Loss: 20.593830108642578 Tokens per Sec: 19037.996819168835
Epoch Step: 25 / 135 Loss: 21.68077278137207 Tokens per Sec: 17497.271794871795
Epoch Step: 30 / 135 Loss: 30.465835571289062 Tokens per Sec: 16849.746374693517
Epoch Step: 35 / 135 Loss: 31.931652069091797 Tokens per Sec: 18569.66625758598
Epoch Step: 40 / 135 Loss: 14.063554763793945 Tokens per Sec: 18155.878294732298
Epoch Step: 45 / 135 Loss: 22.278364181518555 Tokens per Sec: 18478.58859525372
Epoch Step: 50 / 135 Loss: 14.730175018310547 Tokens per Sec: 15906.47840310698
Epoch Step: 55 / 135 Loss: 26.502899169921875 Tokens per Sec: 18178.06857137231
Epoch Step: 60 / 135 Loss: 10.362457275390625 Tokens per Sec: 16342.338529569028
Epoch Step: 65 / 135 Loss: 18.493558883666992 Tokens per Sec: 20357.579599453315
Epoch Step: 70 / 135 Loss: 28.262527465820312 Tokens per Sec: 16713.414171192184
Epoch Step: 75 / 135 Loss: 43.103424072265625 Tokens per Sec: 16074.155242951298
Epoch Step: 80 / 135 Loss: 13.883545875549316 Tokens per Sec: 16082.029222302064
Epoch Step: 85 / 135 Loss: 23.320663452148438 Tokens per Sec: 20618.49899093725
Epoch Step: 90 / 135 Loss: 9.476319313049316 Tokens per Sec: 15006.928020122681
Epoch Step: 95 / 135 Loss: 13.15388298034668 Tokens per Sec: 17375.608881329677
Epoch Step: 100 / 135 Loss: 26.756851196289062 Tokens per Sec: 16866.724198414864
Epoch Step: 105 / 135 Loss: 26.79215431213379 Tokens per Sec: 16866.188493724
Epoch Step: 110 / 135 Loss: 26.79376983642578 Tokens per Sec: 16690.75051737442
Epoch Step: 115 / 135 Loss: 41.78392028808594 Tokens per Sec: 16107.631554047266
Epoch Step: 120 / 135 Loss: 13.888538360595703 Tokens per Sec: 15449.755627745204
Epoch Step: 125 / 135 Loss: 7.001420974731445 Tokens per Sec: 17691.51857490482
Epoch Step: 130 / 135 Loss: 18.501697540283203 Tokens per Sec: 15164.013355098352
Epoch Step: 135 / 135 Loss: 11.82785415649414 Tokens per Sec: 13908.913395070464
Epoch ended with duration 0:00:15.023193
Train perplexity: 2.0173555111205785
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.728124
Validation perplexity: 1.9961623740150987
Model saved best_on_validation!
Epoch 28 / 1000
Epoch Step: 5 / 135 Loss: 21.47989845275879 Tokens per Sec: 17074.593202362357
Epoch Step: 10 / 135 Loss: 29.600584030151367 Tokens per Sec: 20381.484506191595
Epoch Step: 15 / 135 Loss: 11.456756591796875 Tokens per Sec: 17469.44318298124
Epoch Step: 20 / 135 Loss: 18.479433059692383 Tokens per Sec: 15497.864817022042
Epoch Step: 25 / 135 Loss: 26.125240325927734 Tokens per Sec: 18406.894624896187
Epoch Step: 30 / 135 Loss: 21.781654357910156 Tokens per Sec: 15029.375814567697
Epoch Step: 35 / 135 Loss: 13.242717742919922 Tokens per Sec: 18110.880111344944
Epoch Step: 40 / 135 Loss: 58.094547271728516 Tokens per Sec: 17576.07440590023
Epoch Step: 45 / 135 Loss: 9.940509796142578 Tokens per Sec: 15431.91347232845
Epoch Step: 50 / 135 Loss: 13.141578674316406 Tokens per Sec: 18879.84318961111
Epoch Step: 55 / 135 Loss: 34.409305572509766 Tokens per Sec: 15546.232909080567
Epoch Step: 60 / 135 Loss: 8.575931549072266 Tokens per Sec: 16992.219761449232
Epoch Step: 65 / 135 Loss: 32.8876953125 Tokens per Sec: 17237.021486512633
Epoch Step: 70 / 135 Loss: 16.186420440673828 Tokens per Sec: 15393.203991233406
Epoch Step: 75 / 135 Loss: 148.1671600341797 Tokens per Sec: 17589.64861355797
Epoch Step: 80 / 135 Loss: 77.76471710205078 Tokens per Sec: 13982.614285440412
Epoch Step: 85 / 135 Loss: 27.506505966186523 Tokens per Sec: 14493.780622426997
Epoch Step: 90 / 135 Loss: 31.304086685180664 Tokens per Sec: 18860.631011914764
Epoch Step: 95 / 135 Loss: 20.711719512939453 Tokens per Sec: 18969.833069016153
Epoch Step: 100 / 135 Loss: 87.24860382080078 Tokens per Sec: 18537.93802243506
Epoch Step: 105 / 135 Loss: 23.210548400878906 Tokens per Sec: 15907.392176220841
Epoch Step: 110 / 135 Loss: 29.126070022583008 Tokens per Sec: 15829.793727477605
Epoch Step: 115 / 135 Loss: 18.06169319152832 Tokens per Sec: 16444.810242109666
Epoch Step: 120 / 135 Loss: 14.114888191223145 Tokens per Sec: 14431.038585125412
Epoch Step: 125 / 135 Loss: 22.697574615478516 Tokens per Sec: 14465.19420022931
Epoch Step: 130 / 135 Loss: 30.57904052734375 Tokens per Sec: 14614.256671399173
Epoch Step: 135 / 135 Loss: 21.249658584594727 Tokens per Sec: 16173.459525027572
Epoch ended with duration 0:00:15.268404
Train perplexity: 2.3579285771488827
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.722169
Validation perplexity: 1.953388670777175
Model saved best_on_validation!
Epoch 29 / 1000
Epoch Step: 5 / 135 Loss: 31.36220932006836 Tokens per Sec: 18004.436895154555
Epoch Step: 10 / 135 Loss: 26.566553115844727 Tokens per Sec: 18044.63352266636
Epoch Step: 15 / 135 Loss: 27.57421112060547 Tokens per Sec: 16159.48063217281
Epoch Step: 20 / 135 Loss: 10.322917938232422 Tokens per Sec: 17790.682189148985
Epoch Step: 25 / 135 Loss: 18.611806869506836 Tokens per Sec: 17063.780837795115
Epoch Step: 30 / 135 Loss: 25.509265899658203 Tokens per Sec: 17977.044939626212
Epoch Step: 35 / 135 Loss: 119.2518539428711 Tokens per Sec: 19659.59520274188
Epoch Step: 40 / 135 Loss: 13.087163925170898 Tokens per Sec: 17873.587261702687
Epoch Step: 45 / 135 Loss: 28.770549774169922 Tokens per Sec: 17428.169544325465
Epoch Step: 50 / 135 Loss: 27.467004776000977 Tokens per Sec: 19215.169937616065
Epoch Step: 55 / 135 Loss: 9.297760963439941 Tokens per Sec: 18480.597407723966
Epoch Step: 60 / 135 Loss: 12.186295509338379 Tokens per Sec: 13552.063389060988
Epoch Step: 65 / 135 Loss: 99.68123626708984 Tokens per Sec: 18387.603475674478
Epoch Step: 70 / 135 Loss: 22.76803207397461 Tokens per Sec: 15221.185189258606
Epoch Step: 75 / 135 Loss: 16.89309310913086 Tokens per Sec: 16682.553183166867
Epoch Step: 80 / 135 Loss: 10.142425537109375 Tokens per Sec: 18329.1415588707
Epoch Step: 85 / 135 Loss: 14.720602035522461 Tokens per Sec: 15365.086960030147
Epoch Step: 90 / 135 Loss: 12.273773193359375 Tokens per Sec: 15144.79680032484
Epoch Step: 95 / 135 Loss: 12.006591796875 Tokens per Sec: 14986.510654271975
Epoch Step: 100 / 135 Loss: 24.31838035583496 Tokens per Sec: 18059.074614140576
Epoch Step: 105 / 135 Loss: 15.845298767089844 Tokens per Sec: 15587.531191408325
Epoch Step: 110 / 135 Loss: 13.373698234558105 Tokens per Sec: 12935.394815223668
Epoch Step: 115 / 135 Loss: 113.64726257324219 Tokens per Sec: 18186.59401503786
Epoch Step: 120 / 135 Loss: 22.394886016845703 Tokens per Sec: 15291.281527142508
Epoch Step: 125 / 135 Loss: 15.37871265411377 Tokens per Sec: 14949.377746328735
Epoch Step: 130 / 135 Loss: 27.606224060058594 Tokens per Sec: 15327.59788014702
Epoch Step: 135 / 135 Loss: 24.396045684814453 Tokens per Sec: 16036.688354035472
Epoch ended with duration 0:00:15.197402
Train perplexity: 2.4277508977124875
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.730846
Validation perplexity: 1.846546552275488
Model saved best_on_validation!
Epoch 30 / 1000
Epoch Step: 5 / 135 Loss: 23.657320022583008 Tokens per Sec: 16152.117516031558
Epoch Step: 10 / 135 Loss: 85.9234390258789 Tokens per Sec: 18305.27663170513
Epoch Step: 15 / 135 Loss: 28.98894691467285 Tokens per Sec: 18645.304723006793
Epoch Step: 20 / 135 Loss: 25.791963577270508 Tokens per Sec: 14502.556721025634
Epoch Step: 25 / 135 Loss: 13.544244766235352 Tokens per Sec: 18549.36533108076
Epoch Step: 30 / 135 Loss: 13.81256103515625 Tokens per Sec: 18966.417498999286
Epoch Step: 35 / 135 Loss: 8.15472412109375 Tokens per Sec: 19307.08733896388
Epoch Step: 40 / 135 Loss: 15.091042518615723 Tokens per Sec: 18039.096786415535
Epoch Step: 45 / 135 Loss: 13.965194702148438 Tokens per Sec: 18441.124569986307
Epoch Step: 50 / 135 Loss: 6.941909313201904 Tokens per Sec: 16909.792909753378
Epoch Step: 55 / 135 Loss: 18.863584518432617 Tokens per Sec: 18685.988070363168
Epoch Step: 60 / 135 Loss: 17.828542709350586 Tokens per Sec: 19421.20296837007
Epoch Step: 65 / 135 Loss: 114.79759979248047 Tokens per Sec: 19750.101190151076
Epoch Step: 70 / 135 Loss: 32.96745681762695 Tokens per Sec: 16349.941226547704
Epoch Step: 75 / 135 Loss: 7.052090167999268 Tokens per Sec: 14459.045319831435
Epoch Step: 80 / 135 Loss: 9.285076141357422 Tokens per Sec: 16178.038239137903
Epoch Step: 85 / 135 Loss: 7.599175453186035 Tokens per Sec: 16841.288183077126
Epoch Step: 90 / 135 Loss: 29.730295181274414 Tokens per Sec: 15855.176504797906
Epoch Step: 95 / 135 Loss: 14.512765884399414 Tokens per Sec: 16914.01983394203
Epoch Step: 100 / 135 Loss: 11.610107421875 Tokens per Sec: 14443.811042251476
Epoch Step: 105 / 135 Loss: 39.861572265625 Tokens per Sec: 14448.54643414886
Epoch Step: 110 / 135 Loss: 13.641719818115234 Tokens per Sec: 15024.39409190067
Epoch Step: 115 / 135 Loss: 28.622352600097656 Tokens per Sec: 16807.062556569705
Epoch Step: 120 / 135 Loss: 8.771339416503906 Tokens per Sec: 16150.704008544548
Epoch Step: 125 / 135 Loss: 16.735490798950195 Tokens per Sec: 15665.25424532773
Epoch Step: 130 / 135 Loss: 19.857967376708984 Tokens per Sec: 16295.192030242544
Epoch Step: 135 / 135 Loss: 18.83466148376465 Tokens per Sec: 15923.652215220123
Epoch ended with duration 0:00:15.056143
Train perplexity: 2.19490658993505
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.729840
Validation perplexity: 1.8245059054194444
Model saved best_on_validation!
Model saved checkpoint!
Epoch 31 / 1000
Epoch Step: 5 / 135 Loss: 23.06320571899414 Tokens per Sec: 18715.537894025874
Epoch Step: 10 / 135 Loss: 22.020593643188477 Tokens per Sec: 19737.26643433816
Epoch Step: 15 / 135 Loss: 20.680335998535156 Tokens per Sec: 15385.492382064534
Epoch Step: 20 / 135 Loss: 87.60803985595703 Tokens per Sec: 16718.484719540753
Epoch Step: 25 / 135 Loss: 16.59682846069336 Tokens per Sec: 16787.90289098951
Epoch Step: 30 / 135 Loss: 18.553865432739258 Tokens per Sec: 18081.50177055985
Epoch Step: 35 / 135 Loss: 22.666187286376953 Tokens per Sec: 19728.501186316593
Epoch Step: 40 / 135 Loss: 14.889681816101074 Tokens per Sec: 19539.21524132861
Epoch Step: 45 / 135 Loss: 13.794351577758789 Tokens per Sec: 19753.149455527662
Epoch Step: 50 / 135 Loss: 26.71110725402832 Tokens per Sec: 18714.86531950056
Epoch Step: 55 / 135 Loss: 7.701079845428467 Tokens per Sec: 18592.20436611176
Epoch Step: 60 / 135 Loss: 9.124066352844238 Tokens per Sec: 17273.909029018083
Epoch Step: 65 / 135 Loss: 13.945383071899414 Tokens per Sec: 16870.293481276007
Epoch Step: 70 / 135 Loss: 18.209856033325195 Tokens per Sec: 15797.86434411182
Epoch Step: 75 / 135 Loss: 14.72089672088623 Tokens per Sec: 18611.710239248605
Epoch Step: 80 / 135 Loss: 14.830038070678711 Tokens per Sec: 19741.29023917259
Epoch Step: 85 / 135 Loss: 29.028841018676758 Tokens per Sec: 19858.00582703269
Epoch Step: 90 / 135 Loss: 23.128536224365234 Tokens per Sec: 18339.02054196336
Epoch Step: 95 / 135 Loss: 11.934935569763184 Tokens per Sec: 17699.889709818457
Epoch Step: 100 / 135 Loss: 18.2933406829834 Tokens per Sec: 18558.59585304314
Epoch Step: 105 / 135 Loss: 13.233861923217773 Tokens per Sec: 15515.091499257363
Epoch Step: 110 / 135 Loss: 15.259024620056152 Tokens per Sec: 14393.147238864929
Epoch Step: 115 / 135 Loss: 24.81117057800293 Tokens per Sec: 17098.03987740513
Epoch Step: 120 / 135 Loss: 24.98786735534668 Tokens per Sec: 15542.551509016623
Epoch Step: 125 / 135 Loss: 21.195636749267578 Tokens per Sec: 19410.813562534295
Epoch Step: 130 / 135 Loss: 11.434906959533691 Tokens per Sec: 15127.319066063033
Epoch Step: 135 / 135 Loss: 19.897512435913086 Tokens per Sec: 18182.683403722705
Epoch ended with duration 0:00:14.267426
Train perplexity: 1.9782658088481069
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647515
Validation perplexity: 1.6546776491949575
Model saved best_on_validation!
Epoch 32 / 1000
Epoch Step: 5 / 135 Loss: 18.29448890686035 Tokens per Sec: 14946.442342219132
Epoch Step: 10 / 135 Loss: 20.569618225097656 Tokens per Sec: 18445.059501656786
Epoch Step: 15 / 135 Loss: 15.021259307861328 Tokens per Sec: 16427.193111140172
Epoch Step: 20 / 135 Loss: 5.693253040313721 Tokens per Sec: 19961.30232765135
Epoch Step: 25 / 135 Loss: 7.492099761962891 Tokens per Sec: 17699.38503777923
Epoch Step: 30 / 135 Loss: 11.022120475769043 Tokens per Sec: 18492.257707696022
Epoch Step: 35 / 135 Loss: 23.046253204345703 Tokens per Sec: 20432.959820496097
Epoch Step: 40 / 135 Loss: 7.1952667236328125 Tokens per Sec: 14596.87515428525
Epoch Step: 45 / 135 Loss: 8.169215202331543 Tokens per Sec: 19766.352464776282
Epoch Step: 50 / 135 Loss: 15.461103439331055 Tokens per Sec: 19013.566371722296
Epoch Step: 55 / 135 Loss: 20.498056411743164 Tokens per Sec: 20459.62694619569
Epoch Step: 60 / 135 Loss: 8.071488380432129 Tokens per Sec: 18868.92020406416
Epoch Step: 65 / 135 Loss: 15.700445175170898 Tokens per Sec: 15597.182077933265
Epoch Step: 70 / 135 Loss: 22.181602478027344 Tokens per Sec: 17925.790499314586
Epoch Step: 75 / 135 Loss: 22.098913192749023 Tokens per Sec: 20203.119143195607
Epoch Step: 80 / 135 Loss: 6.054863929748535 Tokens per Sec: 16970.04692520162
Epoch Step: 85 / 135 Loss: 20.208843231201172 Tokens per Sec: 20052.195093811824
Epoch Step: 90 / 135 Loss: 19.39605712890625 Tokens per Sec: 16533.509238145998
Epoch Step: 95 / 135 Loss: 8.747970581054688 Tokens per Sec: 18039.01954520027
Epoch Step: 100 / 135 Loss: 7.289034843444824 Tokens per Sec: 19480.923799842352
Epoch Step: 105 / 135 Loss: 26.884565353393555 Tokens per Sec: 18202.758686198416
Epoch Step: 110 / 135 Loss: 46.48857116699219 Tokens per Sec: 15292.346926040982
Epoch Step: 115 / 135 Loss: 18.12047576904297 Tokens per Sec: 17789.4515738578
Epoch Step: 120 / 135 Loss: 18.517343521118164 Tokens per Sec: 16694.786973562965
Epoch Step: 125 / 135 Loss: 17.188413619995117 Tokens per Sec: 14830.084408288489
Epoch Step: 130 / 135 Loss: 25.976476669311523 Tokens per Sec: 16750.266230219262
Epoch Step: 135 / 135 Loss: 14.148683547973633 Tokens per Sec: 16174.687720402348
Epoch ended with duration 0:00:14.324391
Train perplexity: 1.9356177772789025
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654484
Validation perplexity: 2.0450658491110905
Epoch 33 / 1000
Epoch Step: 5 / 135 Loss: 22.466337203979492 Tokens per Sec: 18610.39888348281
Epoch Step: 10 / 135 Loss: 6.2888264656066895 Tokens per Sec: 17869.816171260365
Epoch Step: 15 / 135 Loss: 9.175420761108398 Tokens per Sec: 17529.329465428607
Epoch Step: 20 / 135 Loss: 23.030031204223633 Tokens per Sec: 18465.93347560084
Epoch Step: 25 / 135 Loss: 10.475014686584473 Tokens per Sec: 16259.158628078601
Epoch Step: 30 / 135 Loss: 8.206504821777344 Tokens per Sec: 17703.804516166852
Epoch Step: 35 / 135 Loss: 19.316862106323242 Tokens per Sec: 15638.776252454038
Epoch Step: 40 / 135 Loss: 16.813718795776367 Tokens per Sec: 16506.55124621298
Epoch Step: 45 / 135 Loss: 51.75143051147461 Tokens per Sec: 20927.335923757724
Epoch Step: 50 / 135 Loss: 22.783742904663086 Tokens per Sec: 19177.217651514948
Epoch Step: 55 / 135 Loss: 26.9033145904541 Tokens per Sec: 20003.117273137657
Epoch Step: 60 / 135 Loss: 12.315528869628906 Tokens per Sec: 15895.497733466766
Epoch Step: 65 / 135 Loss: 11.615323066711426 Tokens per Sec: 18363.24982412622
Epoch Step: 70 / 135 Loss: 25.0645751953125 Tokens per Sec: 18629.629489928593
Epoch Step: 75 / 135 Loss: 23.082630157470703 Tokens per Sec: 16043.54989329658
Epoch Step: 80 / 135 Loss: 7.007429599761963 Tokens per Sec: 20673.600476675652
Epoch Step: 85 / 135 Loss: 7.78842830657959 Tokens per Sec: 18772.782927884728
Epoch Step: 90 / 135 Loss: 21.61150360107422 Tokens per Sec: 19038.367572142583
Epoch Step: 95 / 135 Loss: 10.322415351867676 Tokens per Sec: 21058.267397524018
Epoch Step: 100 / 135 Loss: 9.80063533782959 Tokens per Sec: 20395.231355940512
Epoch Step: 105 / 135 Loss: 16.102924346923828 Tokens per Sec: 16216.231942063152
Epoch Step: 110 / 135 Loss: 10.506551742553711 Tokens per Sec: 15774.548039348696
Epoch Step: 115 / 135 Loss: 11.696881294250488 Tokens per Sec: 16919.296750096513
Epoch Step: 120 / 135 Loss: 20.827577590942383 Tokens per Sec: 18060.785851729936
Epoch Step: 125 / 135 Loss: 16.089189529418945 Tokens per Sec: 16742.985895502527
Epoch Step: 130 / 135 Loss: 5.948200225830078 Tokens per Sec: 16687.3544606856
Epoch Step: 135 / 135 Loss: 8.992713928222656 Tokens per Sec: 15929.746648809936
Epoch ended with duration 0:00:14.260739
Train perplexity: 1.9303986569270875
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.659495
Validation perplexity: 1.9632013159619495
Epoch 34 / 1000
Epoch Step: 5 / 135 Loss: 13.74176025390625 Tokens per Sec: 17678.156178816218
Epoch Step: 10 / 135 Loss: 26.431541442871094 Tokens per Sec: 18062.077064239267
Epoch Step: 15 / 135 Loss: 12.175830841064453 Tokens per Sec: 18566.660313767326
Epoch Step: 20 / 135 Loss: 18.30120277404785 Tokens per Sec: 15837.456828302125
Epoch Step: 25 / 135 Loss: 17.684110641479492 Tokens per Sec: 20072.82681253735
Epoch Step: 30 / 135 Loss: 25.366300582885742 Tokens per Sec: 18344.54871976645
Epoch Step: 35 / 135 Loss: 20.358999252319336 Tokens per Sec: 16949.815674550253
Epoch Step: 40 / 135 Loss: 12.688706398010254 Tokens per Sec: 18832.41516595093
Epoch Step: 45 / 135 Loss: 18.773761749267578 Tokens per Sec: 21919.660768520236
Epoch Step: 50 / 135 Loss: 13.068463325500488 Tokens per Sec: 18523.527127869143
Epoch Step: 55 / 135 Loss: 8.389528274536133 Tokens per Sec: 16662.282577231912
Epoch Step: 60 / 135 Loss: 16.342987060546875 Tokens per Sec: 20016.84041733725
Epoch Step: 65 / 135 Loss: 22.655675888061523 Tokens per Sec: 18395.689155132073
Epoch Step: 70 / 135 Loss: 28.662940979003906 Tokens per Sec: 18449.279572372303
Epoch Step: 75 / 135 Loss: 19.28568458557129 Tokens per Sec: 19568.614500297765
Epoch Step: 80 / 135 Loss: 16.519176483154297 Tokens per Sec: 17976.378027451476
Epoch Step: 85 / 135 Loss: 15.10059928894043 Tokens per Sec: 18080.818390397308
Epoch Step: 90 / 135 Loss: 13.847331047058105 Tokens per Sec: 18816.997248426575
Epoch Step: 95 / 135 Loss: 38.37074661254883 Tokens per Sec: 15752.319231385884
Epoch Step: 100 / 135 Loss: 89.53404998779297 Tokens per Sec: 19106.164848876953
Epoch Step: 105 / 135 Loss: 97.13825988769531 Tokens per Sec: 16757.381195964117
Epoch Step: 110 / 135 Loss: 13.515585899353027 Tokens per Sec: 15094.295045493764
Epoch Step: 115 / 135 Loss: 84.16061401367188 Tokens per Sec: 16968.0496073989
Epoch Step: 120 / 135 Loss: 20.670942306518555 Tokens per Sec: 17714.458317412416
Epoch Step: 125 / 135 Loss: 15.540157318115234 Tokens per Sec: 16154.875764519678
Epoch Step: 130 / 135 Loss: 7.320499897003174 Tokens per Sec: 15318.463852617166
Epoch Step: 135 / 135 Loss: 7.5100998878479 Tokens per Sec: 16764.355393083846
Epoch ended with duration 0:00:14.248197
Train perplexity: 2.099035258378369
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.660097
Validation perplexity: 1.905676924742593
Epoch 35 / 1000
Epoch Step: 5 / 135 Loss: 13.924495697021484 Tokens per Sec: 19576.50653829522
Epoch Step: 10 / 135 Loss: 19.296709060668945 Tokens per Sec: 15407.705868895826
Epoch Step: 15 / 135 Loss: 16.36796760559082 Tokens per Sec: 18760.18084324744
Epoch Step: 20 / 135 Loss: 19.50701904296875 Tokens per Sec: 21913.56451492942
Epoch Step: 25 / 135 Loss: 24.14823341369629 Tokens per Sec: 19637.53091412409
Epoch Step: 30 / 135 Loss: 21.556018829345703 Tokens per Sec: 17687.903682155797
Epoch Step: 35 / 135 Loss: 22.049964904785156 Tokens per Sec: 18141.218343142194
Epoch Step: 40 / 135 Loss: 11.892040252685547 Tokens per Sec: 15816.62549383752
Epoch Step: 45 / 135 Loss: 13.44884204864502 Tokens per Sec: 17307.010124402
Epoch Step: 50 / 135 Loss: 6.6319050788879395 Tokens per Sec: 16111.505461149965
Epoch Step: 55 / 135 Loss: 102.8676986694336 Tokens per Sec: 19032.6900967261
Epoch Step: 60 / 135 Loss: 19.056350708007812 Tokens per Sec: 19515.899012585498
Epoch Step: 65 / 135 Loss: 9.666077613830566 Tokens per Sec: 19517.158673745256
Epoch Step: 70 / 135 Loss: 8.528616905212402 Tokens per Sec: 19860.031263256104
Epoch Step: 75 / 135 Loss: 14.957181930541992 Tokens per Sec: 20032.409253900736
Epoch Step: 80 / 135 Loss: 11.220029830932617 Tokens per Sec: 16384.500350325503
Epoch Step: 85 / 135 Loss: 11.789684295654297 Tokens per Sec: 18042.92349137416
Epoch Step: 90 / 135 Loss: 13.471214294433594 Tokens per Sec: 18684.90781536607
Epoch Step: 95 / 135 Loss: 7.192379951477051 Tokens per Sec: 16685.878671840415
Epoch Step: 100 / 135 Loss: 16.3421573638916 Tokens per Sec: 14389.913952429068
Epoch Step: 105 / 135 Loss: 5.294969081878662 Tokens per Sec: 15781.567010639405
Epoch Step: 110 / 135 Loss: 12.76638412475586 Tokens per Sec: 17792.25587914863
Epoch Step: 115 / 135 Loss: 13.065691947937012 Tokens per Sec: 15827.34752599279
Epoch Step: 120 / 135 Loss: 20.834026336669922 Tokens per Sec: 16839.614903773763
Epoch Step: 125 / 135 Loss: 10.096002578735352 Tokens per Sec: 14174.774279780073
Epoch Step: 130 / 135 Loss: 10.722453117370605 Tokens per Sec: 13800.748372208027
Epoch Step: 135 / 135 Loss: 16.9648380279541 Tokens per Sec: 16413.98763176727
Epoch ended with duration 0:00:14.566761
Train perplexity: 1.9586054948121319
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656691
Validation perplexity: 1.7596671315220687
Model saved checkpoint!
Epoch 36 / 1000
Epoch Step: 5 / 135 Loss: 18.180435180664062 Tokens per Sec: 17738.798926736636
Epoch Step: 10 / 135 Loss: 16.16252899169922 Tokens per Sec: 17758.5102648862
Epoch Step: 15 / 135 Loss: 8.61559772491455 Tokens per Sec: 17437.530599365426
Epoch Step: 20 / 135 Loss: 20.12063217163086 Tokens per Sec: 17918.554432512756
Epoch Step: 25 / 135 Loss: 16.71785545349121 Tokens per Sec: 14866.930657974728
Epoch Step: 30 / 135 Loss: 5.840585231781006 Tokens per Sec: 15038.466336660347
Epoch Step: 35 / 135 Loss: 18.79166603088379 Tokens per Sec: 17161.186754252587
Epoch Step: 40 / 135 Loss: 13.403387069702148 Tokens per Sec: 17331.65247563271
Epoch Step: 45 / 135 Loss: 26.87042808532715 Tokens per Sec: 18513.88632144013
Epoch Step: 50 / 135 Loss: 20.786048889160156 Tokens per Sec: 16752.426434010158
Epoch Step: 55 / 135 Loss: 23.442705154418945 Tokens per Sec: 16904.487100184713
Epoch Step: 60 / 135 Loss: 16.88504981994629 Tokens per Sec: 17891.400737355085
Epoch Step: 65 / 135 Loss: 12.518838882446289 Tokens per Sec: 17485.714885950092
Epoch Step: 70 / 135 Loss: 18.983062744140625 Tokens per Sec: 18517.292173411013
Epoch Step: 75 / 135 Loss: 13.338996887207031 Tokens per Sec: 15737.029869766315
Epoch Step: 80 / 135 Loss: 7.5981669425964355 Tokens per Sec: 13510.24830026353
Epoch Step: 85 / 135 Loss: 16.230369567871094 Tokens per Sec: 14730.614586003836
Epoch Step: 90 / 135 Loss: 20.43134117126465 Tokens per Sec: 15121.525145779322
Epoch Step: 95 / 135 Loss: 15.720771789550781 Tokens per Sec: 15612.34222258751
Epoch Step: 100 / 135 Loss: 48.5278205871582 Tokens per Sec: 16818.524168902517
Epoch Step: 105 / 135 Loss: 54.25448226928711 Tokens per Sec: 15133.87220188369
Epoch Step: 110 / 135 Loss: 10.527164459228516 Tokens per Sec: 13253.817807054664
Epoch Step: 115 / 135 Loss: 6.757428169250488 Tokens per Sec: 14732.250043928525
Epoch Step: 120 / 135 Loss: 19.949878692626953 Tokens per Sec: 16813.404825507172
Epoch Step: 125 / 135 Loss: 10.614291191101074 Tokens per Sec: 14293.66461615085
Epoch Step: 130 / 135 Loss: 12.712817192077637 Tokens per Sec: 16392.89658917274
Epoch Step: 135 / 135 Loss: 12.095925331115723 Tokens per Sec: 14932.228875174846
Epoch ended with duration 0:00:15.669947
Train perplexity: 1.762768896210727
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.664068
Validation perplexity: 1.8332202452199307
Epoch 37 / 1000
Epoch Step: 5 / 135 Loss: 17.56430435180664 Tokens per Sec: 18564.003720756966
Epoch Step: 10 / 135 Loss: 20.996625900268555 Tokens per Sec: 17456.235106468852
Epoch Step: 15 / 135 Loss: 7.164259910583496 Tokens per Sec: 14075.311609316828
Epoch Step: 20 / 135 Loss: 11.963327407836914 Tokens per Sec: 14630.26519761333
Epoch Step: 25 / 135 Loss: 10.604902267456055 Tokens per Sec: 14951.62243435321
Epoch Step: 30 / 135 Loss: 10.801379203796387 Tokens per Sec: 16710.523599956832
Epoch Step: 35 / 135 Loss: 11.742826461791992 Tokens per Sec: 17773.671062572466
Epoch Step: 40 / 135 Loss: 10.7263765335083 Tokens per Sec: 16750.213403218422
Epoch Step: 45 / 135 Loss: 15.037446975708008 Tokens per Sec: 17947.848160554244
Epoch Step: 50 / 135 Loss: 10.379087448120117 Tokens per Sec: 15835.526072350249
Epoch Step: 55 / 135 Loss: 7.569425106048584 Tokens per Sec: 16617.31317449211
Epoch Step: 60 / 135 Loss: 18.858436584472656 Tokens per Sec: 16561.254398636123
Epoch Step: 65 / 135 Loss: 11.708029747009277 Tokens per Sec: 16014.81730713293
Epoch Step: 70 / 135 Loss: 43.328834533691406 Tokens per Sec: 16375.400184588414
Epoch Step: 75 / 135 Loss: 20.689809799194336 Tokens per Sec: 18551.583821547087
Epoch Step: 80 / 135 Loss: 8.47494888305664 Tokens per Sec: 13989.587860130125
Epoch Step: 85 / 135 Loss: 10.785711288452148 Tokens per Sec: 18596.816809308053
Epoch Step: 90 / 135 Loss: 5.164198875427246 Tokens per Sec: 18039.583483203325
Epoch Step: 95 / 135 Loss: 15.461644172668457 Tokens per Sec: 14787.116685824076
Epoch Step: 100 / 135 Loss: 5.876861572265625 Tokens per Sec: 16455.781866052934
Epoch Step: 105 / 135 Loss: 6.319582462310791 Tokens per Sec: 12710.55046869071
Epoch Step: 110 / 135 Loss: 15.315180778503418 Tokens per Sec: 14485.067182074408
Epoch Step: 115 / 135 Loss: 10.081936836242676 Tokens per Sec: 15723.005858451608
Epoch Step: 120 / 135 Loss: 18.757953643798828 Tokens per Sec: 14128.212935862057
Epoch Step: 125 / 135 Loss: 19.948427200317383 Tokens per Sec: 15468.66649605768
Epoch Step: 130 / 135 Loss: 10.073707580566406 Tokens per Sec: 15911.56123802658
Epoch Step: 135 / 135 Loss: 7.372219562530518 Tokens per Sec: 15556.071999409762
Epoch ended with duration 0:00:15.831748
Train perplexity: 1.7746495302697147
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653739
Validation perplexity: 1.6120508039487405
Model saved best_on_validation!
Epoch 38 / 1000
Epoch Step: 5 / 135 Loss: 4.818924427032471 Tokens per Sec: 17003.127195508558
Epoch Step: 10 / 135 Loss: 22.148380279541016 Tokens per Sec: 17655.638895083866
Epoch Step: 15 / 135 Loss: 13.340946197509766 Tokens per Sec: 18450.627124200448
Epoch Step: 20 / 135 Loss: 12.848223686218262 Tokens per Sec: 17921.61728158701
Epoch Step: 25 / 135 Loss: 14.527965545654297 Tokens per Sec: 15594.807927718295
Epoch Step: 30 / 135 Loss: 11.48131275177002 Tokens per Sec: 15958.364840503255
Epoch Step: 35 / 135 Loss: 4.533102512359619 Tokens per Sec: 15686.913108419913
Epoch Step: 40 / 135 Loss: 21.06665802001953 Tokens per Sec: 15816.954073728124
Epoch Step: 45 / 135 Loss: 33.77415466308594 Tokens per Sec: 17530.348680663166
Epoch Step: 50 / 135 Loss: 7.985594749450684 Tokens per Sec: 17766.63025778196
Epoch Step: 55 / 135 Loss: 16.2762451171875 Tokens per Sec: 16963.56880894968
Epoch Step: 60 / 135 Loss: 14.831542015075684 Tokens per Sec: 17278.427424174577
Epoch Step: 65 / 135 Loss: 7.5981059074401855 Tokens per Sec: 16227.096003448141
Epoch Step: 70 / 135 Loss: 28.581655502319336 Tokens per Sec: 15665.728041971675
Epoch Step: 75 / 135 Loss: 6.750317096710205 Tokens per Sec: 15736.870580847724
Epoch Step: 80 / 135 Loss: 57.71482849121094 Tokens per Sec: 16650.678115198752
Epoch Step: 85 / 135 Loss: 17.498666763305664 Tokens per Sec: 15883.327220349833
Epoch Step: 90 / 135 Loss: 11.320843696594238 Tokens per Sec: 17946.477964680245
Epoch Step: 95 / 135 Loss: 12.810205459594727 Tokens per Sec: 15467.833313281893
Epoch Step: 100 / 135 Loss: 18.588172912597656 Tokens per Sec: 16916.569812068898
Epoch Step: 105 / 135 Loss: 11.807127952575684 Tokens per Sec: 15727.773086308203
Epoch Step: 110 / 135 Loss: 10.392759323120117 Tokens per Sec: 14508.529944732223
Epoch Step: 115 / 135 Loss: 12.516165733337402 Tokens per Sec: 14493.893803531348
Epoch Step: 120 / 135 Loss: 14.191445350646973 Tokens per Sec: 15173.065403073564
Epoch Step: 125 / 135 Loss: 9.139201164245605 Tokens per Sec: 16116.082112942617
Epoch Step: 130 / 135 Loss: 4.830915927886963 Tokens per Sec: 10798.081035945846
Epoch Step: 135 / 135 Loss: 11.784295082092285 Tokens per Sec: 15076.462640594817
Epoch ended with duration 0:00:15.738869
Train perplexity: 1.7495075500376525
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654363
Validation perplexity: 1.6015309632606312
Model saved best_on_validation!
Epoch 39 / 1000
Epoch Step: 5 / 135 Loss: 7.822865009307861 Tokens per Sec: 15748.926085811914
Epoch Step: 10 / 135 Loss: 49.15605163574219 Tokens per Sec: 16873.65013480282
Epoch Step: 15 / 135 Loss: 31.977319717407227 Tokens per Sec: 17839.194784085157
Epoch Step: 20 / 135 Loss: 21.705495834350586 Tokens per Sec: 15408.303049411365
Epoch Step: 25 / 135 Loss: 23.161203384399414 Tokens per Sec: 18438.387955377402
Epoch Step: 30 / 135 Loss: 16.119802474975586 Tokens per Sec: 18241.74541481032
Epoch Step: 35 / 135 Loss: 19.585094451904297 Tokens per Sec: 16605.337361071688
Epoch Step: 40 / 135 Loss: 8.172999382019043 Tokens per Sec: 17174.51071556108
Epoch Step: 45 / 135 Loss: 7.767699718475342 Tokens per Sec: 14065.936769315325
Epoch Step: 50 / 135 Loss: 4.668219089508057 Tokens per Sec: 17137.460590523726
Epoch Step: 55 / 135 Loss: 12.045034408569336 Tokens per Sec: 17266.65762477288
Epoch Step: 60 / 135 Loss: 7.570681095123291 Tokens per Sec: 18369.977708766317
Epoch Step: 65 / 135 Loss: 10.117108345031738 Tokens per Sec: 16342.989051630182
Epoch Step: 70 / 135 Loss: 15.759303092956543 Tokens per Sec: 16199.684141531057
Epoch Step: 75 / 135 Loss: 15.13420581817627 Tokens per Sec: 15867.099984473301
Epoch Step: 80 / 135 Loss: 13.108719825744629 Tokens per Sec: 14964.426950436044
Epoch Step: 85 / 135 Loss: 18.285402297973633 Tokens per Sec: 17786.275444815255
Epoch Step: 90 / 135 Loss: 7.201447010040283 Tokens per Sec: 17016.72711447032
Epoch Step: 95 / 135 Loss: 18.47602081298828 Tokens per Sec: 15482.38334422071
Epoch Step: 100 / 135 Loss: 12.516222953796387 Tokens per Sec: 16587.997292575044
Epoch Step: 105 / 135 Loss: 12.111873626708984 Tokens per Sec: 13872.755262941871
Epoch Step: 110 / 135 Loss: 23.759016036987305 Tokens per Sec: 13017.314200386594
Epoch Step: 115 / 135 Loss: 11.412471771240234 Tokens per Sec: 15595.504388483188
Epoch Step: 120 / 135 Loss: 5.321935653686523 Tokens per Sec: 13769.553144139429
Epoch Step: 125 / 135 Loss: 14.556416511535645 Tokens per Sec: 15733.416838553449
Epoch Step: 130 / 135 Loss: 13.342826843261719 Tokens per Sec: 15461.186471439225
Epoch Step: 135 / 135 Loss: 16.283851623535156 Tokens per Sec: 16005.665408789788
Epoch ended with duration 0:00:15.742102
Train perplexity: 1.946309893289073
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657275
Validation perplexity: 1.749127865853451
Epoch 40 / 1000
Epoch Step: 5 / 135 Loss: 8.440635681152344 Tokens per Sec: 16417.607715968523
Epoch Step: 10 / 135 Loss: 51.64700698852539 Tokens per Sec: 19286.84945944099
Epoch Step: 15 / 135 Loss: 7.150177001953125 Tokens per Sec: 15372.579756426874
Epoch Step: 20 / 135 Loss: 19.002376556396484 Tokens per Sec: 18886.25015260422
Epoch Step: 25 / 135 Loss: 14.815468788146973 Tokens per Sec: 17538.48726628981
Epoch Step: 30 / 135 Loss: 20.177597045898438 Tokens per Sec: 18813.663462498258
Epoch Step: 35 / 135 Loss: 17.916654586791992 Tokens per Sec: 13253.893457634338
Epoch Step: 40 / 135 Loss: 5.259181022644043 Tokens per Sec: 18004.696274985592
Epoch Step: 45 / 135 Loss: 16.82497787475586 Tokens per Sec: 18107.271370325332
Epoch Step: 50 / 135 Loss: 13.828737258911133 Tokens per Sec: 18054.889870595787
Epoch Step: 55 / 135 Loss: 12.720582962036133 Tokens per Sec: 15029.493657465948
Epoch Step: 60 / 135 Loss: 8.12699031829834 Tokens per Sec: 16973.961995520334
Epoch Step: 65 / 135 Loss: 8.19679069519043 Tokens per Sec: 16160.454516146856
Epoch Step: 70 / 135 Loss: 16.029277801513672 Tokens per Sec: 15019.241883337281
Epoch Step: 75 / 135 Loss: 9.018754959106445 Tokens per Sec: 15512.764751922163
Epoch Step: 80 / 135 Loss: 11.833100318908691 Tokens per Sec: 15513.452020584173
Epoch Step: 85 / 135 Loss: 16.9744930267334 Tokens per Sec: 15524.96428335155
Epoch Step: 90 / 135 Loss: 11.492998123168945 Tokens per Sec: 14560.274507113509
Epoch Step: 95 / 135 Loss: 10.210962295532227 Tokens per Sec: 18613.97278775358
Epoch Step: 100 / 135 Loss: 8.518660545349121 Tokens per Sec: 15725.344369318345
Epoch Step: 105 / 135 Loss: 20.296146392822266 Tokens per Sec: 14617.788081915278
Epoch Step: 110 / 135 Loss: 13.232465744018555 Tokens per Sec: 15613.560591501784
Epoch Step: 115 / 135 Loss: 6.415653705596924 Tokens per Sec: 14005.70743844657
Epoch Step: 120 / 135 Loss: 18.87932777404785 Tokens per Sec: 16474.428225454405
Epoch Step: 125 / 135 Loss: 14.715110778808594 Tokens per Sec: 14224.900621477698
Epoch Step: 130 / 135 Loss: 11.726831436157227 Tokens per Sec: 15264.8723011083
Epoch Step: 135 / 135 Loss: 35.25459671020508 Tokens per Sec: 15487.709238729809
Epoch ended with duration 0:00:15.664125
Train perplexity: 1.6402167109808476
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.655344
Validation perplexity: 1.5697284226475194
Model saved best_on_validation!
Model saved checkpoint!
Epoch 41 / 1000
Epoch Step: 5 / 135 Loss: 11.910964012145996 Tokens per Sec: 16502.597558099453
Epoch Step: 10 / 135 Loss: 7.149097442626953 Tokens per Sec: 18957.296778268857
Epoch Step: 15 / 135 Loss: 39.17356872558594 Tokens per Sec: 16947.132209241932
Epoch Step: 20 / 135 Loss: 14.901032447814941 Tokens per Sec: 16503.0203729545
Epoch Step: 25 / 135 Loss: 5.236726760864258 Tokens per Sec: 15399.985833564473
Epoch Step: 30 / 135 Loss: 11.67589282989502 Tokens per Sec: 12747.99672064522
Epoch Step: 35 / 135 Loss: 7.86977481842041 Tokens per Sec: 17963.095716695894
Epoch Step: 40 / 135 Loss: 28.103389739990234 Tokens per Sec: 19720.299715373512
Epoch Step: 45 / 135 Loss: 31.75141716003418 Tokens per Sec: 17714.626090093607
Epoch Step: 50 / 135 Loss: 17.824295043945312 Tokens per Sec: 14436.935359342375
Epoch Step: 55 / 135 Loss: 5.341278076171875 Tokens per Sec: 17802.347892327973
Epoch Step: 60 / 135 Loss: 9.686951637268066 Tokens per Sec: 16793.305432312092
Epoch Step: 65 / 135 Loss: 10.434444427490234 Tokens per Sec: 15645.411115931267
Epoch Step: 70 / 135 Loss: 6.629446506500244 Tokens per Sec: 16398.51640071801
Epoch Step: 75 / 135 Loss: 11.026233673095703 Tokens per Sec: 15874.682933234995
Epoch Step: 80 / 135 Loss: 8.221282958984375 Tokens per Sec: 18627.213422100544
Epoch Step: 85 / 135 Loss: 5.033491611480713 Tokens per Sec: 16822.34632290774
Epoch Step: 90 / 135 Loss: 31.640256881713867 Tokens per Sec: 17422.627391703543
Epoch Step: 95 / 135 Loss: 13.313846588134766 Tokens per Sec: 14330.87877509256
Epoch Step: 100 / 135 Loss: 17.32822036743164 Tokens per Sec: 15668.084316516546
Epoch Step: 105 / 135 Loss: 12.01292896270752 Tokens per Sec: 14060.999441558031
Epoch Step: 110 / 135 Loss: 13.488319396972656 Tokens per Sec: 15019.710171085964
Epoch Step: 115 / 135 Loss: 16.439416885375977 Tokens per Sec: 15652.486948810654
Epoch Step: 120 / 135 Loss: 13.946013450622559 Tokens per Sec: 15065.271459784333
Epoch Step: 125 / 135 Loss: 16.687747955322266 Tokens per Sec: 15974.172069636907
Epoch Step: 130 / 135 Loss: 6.88342809677124 Tokens per Sec: 14960.93116952948
Epoch Step: 135 / 135 Loss: 17.179990768432617 Tokens per Sec: 14890.247580212135
Epoch ended with duration 0:00:15.749764
Train perplexity: 1.5907286651894272
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.659892
Validation perplexity: 1.987818526039143
Epoch 42 / 1000
Epoch Step: 5 / 135 Loss: 9.012319564819336 Tokens per Sec: 13752.105030985642
Epoch Step: 10 / 135 Loss: 10.850428581237793 Tokens per Sec: 16756.63128474811
Epoch Step: 15 / 135 Loss: 11.050220489501953 Tokens per Sec: 18827.22524846619
Epoch Step: 20 / 135 Loss: 7.674124717712402 Tokens per Sec: 18464.361944014865
Epoch Step: 25 / 135 Loss: 16.34418296813965 Tokens per Sec: 16480.78559524496
Epoch Step: 30 / 135 Loss: 13.840397834777832 Tokens per Sec: 17041.17247187312
Epoch Step: 35 / 135 Loss: 12.620024681091309 Tokens per Sec: 17801.923656047198
Epoch Step: 40 / 135 Loss: 5.032879829406738 Tokens per Sec: 18610.233591488108
Epoch Step: 45 / 135 Loss: 9.067787170410156 Tokens per Sec: 15923.349738619427
Epoch Step: 50 / 135 Loss: 21.596202850341797 Tokens per Sec: 16078.052180055034
Epoch Step: 55 / 135 Loss: 6.6861162185668945 Tokens per Sec: 16430.075846038217
Epoch Step: 60 / 135 Loss: 21.014616012573242 Tokens per Sec: 18873.57304117337
Epoch Step: 65 / 135 Loss: 15.636321067810059 Tokens per Sec: 14671.936550445485
Epoch Step: 70 / 135 Loss: 50.14542770385742 Tokens per Sec: 15204.581716463232
Epoch Step: 75 / 135 Loss: 25.23777961730957 Tokens per Sec: 14343.360851616058
Epoch Step: 80 / 135 Loss: 11.243633270263672 Tokens per Sec: 16013.832457336464
Epoch Step: 85 / 135 Loss: 11.981369018554688 Tokens per Sec: 18286.085179644993
Epoch Step: 90 / 135 Loss: 11.354459762573242 Tokens per Sec: 14757.639297728143
Epoch Step: 95 / 135 Loss: 6.040919303894043 Tokens per Sec: 15976.864477902094
Epoch Step: 100 / 135 Loss: 4.806483268737793 Tokens per Sec: 17254.95003893636
Epoch Step: 105 / 135 Loss: 10.736265182495117 Tokens per Sec: 14358.78457020936
Epoch Step: 110 / 135 Loss: 11.301180839538574 Tokens per Sec: 14017.69328751484
Epoch Step: 115 / 135 Loss: 73.83314514160156 Tokens per Sec: 14669.960691262408
Epoch Step: 120 / 135 Loss: 13.004961967468262 Tokens per Sec: 15707.360882506317
Epoch Step: 125 / 135 Loss: 47.50011444091797 Tokens per Sec: 16985.669555602435
Epoch Step: 130 / 135 Loss: 8.822092056274414 Tokens per Sec: 14542.608592691544
Epoch Step: 135 / 135 Loss: 7.641841411590576 Tokens per Sec: 13839.03228763629
Epoch ended with duration 0:00:15.783286
Train perplexity: 1.724856459206285
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652559
Validation perplexity: 1.5254002987392314
Model saved best_on_validation!
Epoch 43 / 1000
Epoch Step: 5 / 135 Loss: 17.670124053955078 Tokens per Sec: 14956.187672684484
Epoch Step: 10 / 135 Loss: 11.575752258300781 Tokens per Sec: 18960.480475520228
Epoch Step: 15 / 135 Loss: 11.768893241882324 Tokens per Sec: 15671.70434632636
Epoch Step: 20 / 135 Loss: 17.72827911376953 Tokens per Sec: 16360.919167573558
Epoch Step: 25 / 135 Loss: 14.189196586608887 Tokens per Sec: 18611.787504524724
Epoch Step: 30 / 135 Loss: 5.444393157958984 Tokens per Sec: 14889.669339465396
Epoch Step: 35 / 135 Loss: 5.612449645996094 Tokens per Sec: 16471.116981167284
Epoch Step: 40 / 135 Loss: 16.231048583984375 Tokens per Sec: 16387.397885903072
Epoch Step: 45 / 135 Loss: 6.404834270477295 Tokens per Sec: 12507.918921322304
Epoch Step: 50 / 135 Loss: 11.254318237304688 Tokens per Sec: 15889.952449749908
Epoch Step: 55 / 135 Loss: 15.075297355651855 Tokens per Sec: 17870.239199004878
Epoch Step: 60 / 135 Loss: 9.019998550415039 Tokens per Sec: 18791.04779992671
Epoch Step: 65 / 135 Loss: 13.566725730895996 Tokens per Sec: 17984.950677532193
Epoch Step: 70 / 135 Loss: 5.025798797607422 Tokens per Sec: 17227.136973921566
Epoch Step: 75 / 135 Loss: 16.149394989013672 Tokens per Sec: 15791.721569844016
Epoch Step: 80 / 135 Loss: 15.596343040466309 Tokens per Sec: 16042.8568823142
Epoch Step: 85 / 135 Loss: 7.429808139801025 Tokens per Sec: 12733.196577193617
Epoch Step: 90 / 135 Loss: 99.43511199951172 Tokens per Sec: 17107.654234745056
Epoch Step: 95 / 135 Loss: 14.099493026733398 Tokens per Sec: 19095.576399586345
Epoch Step: 100 / 135 Loss: 25.59478759765625 Tokens per Sec: 16590.98656416647
Epoch Step: 105 / 135 Loss: 9.287323951721191 Tokens per Sec: 14534.532381094448
Epoch Step: 110 / 135 Loss: 8.8164701461792 Tokens per Sec: 14184.265163575958
Epoch Step: 115 / 135 Loss: 6.539241313934326 Tokens per Sec: 12237.615982938029
Epoch Step: 120 / 135 Loss: 15.572656631469727 Tokens per Sec: 15391.31679169071
Epoch Step: 125 / 135 Loss: 20.057781219482422 Tokens per Sec: 16058.152601241061
Epoch Step: 130 / 135 Loss: 18.48859214782715 Tokens per Sec: 15751.527630224662
Epoch Step: 135 / 135 Loss: 14.30075740814209 Tokens per Sec: 15216.941842604081
Epoch ended with duration 0:00:15.841956
Train perplexity: 1.7081639501288997
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658322
Validation perplexity: 1.7658541765990339
Epoch 44 / 1000
Epoch Step: 5 / 135 Loss: 9.778826713562012 Tokens per Sec: 15509.86273143599
Epoch Step: 10 / 135 Loss: 12.792536735534668 Tokens per Sec: 14767.80068555523
Epoch Step: 15 / 135 Loss: 16.25262451171875 Tokens per Sec: 16602.977405028072
Epoch Step: 20 / 135 Loss: 16.986135482788086 Tokens per Sec: 18155.844422894534
Epoch Step: 25 / 135 Loss: 17.8616943359375 Tokens per Sec: 18383.06453478114
Epoch Step: 30 / 135 Loss: 8.684643745422363 Tokens per Sec: 15243.341202011705
Epoch Step: 35 / 135 Loss: 5.294773578643799 Tokens per Sec: 17493.019727894996
Epoch Step: 40 / 135 Loss: 10.89300537109375 Tokens per Sec: 15105.071923182619
Epoch Step: 45 / 135 Loss: 14.743313789367676 Tokens per Sec: 17488.54947504348
Epoch Step: 50 / 135 Loss: 8.694591522216797 Tokens per Sec: 17963.30962939007
Epoch Step: 55 / 135 Loss: 18.225873947143555 Tokens per Sec: 17924.046981740852
Epoch Step: 60 / 135 Loss: 6.288013458251953 Tokens per Sec: 18158.646454842583
Epoch Step: 65 / 135 Loss: 18.1138916015625 Tokens per Sec: 15146.35897547019
Epoch Step: 70 / 135 Loss: 12.879707336425781 Tokens per Sec: 15866.277322753464
Epoch Step: 75 / 135 Loss: 7.580876350402832 Tokens per Sec: 17284.67909220521
Epoch Step: 80 / 135 Loss: 7.01505708694458 Tokens per Sec: 13987.877000936733
Epoch Step: 85 / 135 Loss: 6.708834171295166 Tokens per Sec: 18538.917786366597
Epoch Step: 90 / 135 Loss: 8.752487182617188 Tokens per Sec: 19988.20269347384
Epoch Step: 95 / 135 Loss: 6.219912528991699 Tokens per Sec: 13512.819281144853
Epoch Step: 100 / 135 Loss: 30.09653091430664 Tokens per Sec: 16072.056965670614
Epoch Step: 105 / 135 Loss: 12.603316307067871 Tokens per Sec: 15562.22457114443
Epoch Step: 110 / 135 Loss: 11.535026550292969 Tokens per Sec: 15194.460003833214
Epoch Step: 115 / 135 Loss: 7.779460430145264 Tokens per Sec: 13966.465254001218
Epoch Step: 120 / 135 Loss: 7.665358066558838 Tokens per Sec: 14586.811194453587
Epoch Step: 125 / 135 Loss: 21.99722671508789 Tokens per Sec: 16226.693700539101
Epoch Step: 130 / 135 Loss: 11.314824104309082 Tokens per Sec: 15368.802774653825
Epoch Step: 135 / 135 Loss: 9.367278099060059 Tokens per Sec: 15859.902039565677
Epoch ended with duration 0:00:15.640530
Train perplexity: 1.525581989416534
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654001
Validation perplexity: 1.4064901679634796
Model saved best_on_validation!
Epoch 45 / 1000
Epoch Step: 5 / 135 Loss: 5.361291885375977 Tokens per Sec: 16614.733446453556
Epoch Step: 10 / 135 Loss: 7.003606796264648 Tokens per Sec: 16892.3101260138
Epoch Step: 15 / 135 Loss: 14.073295593261719 Tokens per Sec: 17153.60094125937
Epoch Step: 20 / 135 Loss: 50.83277130126953 Tokens per Sec: 15941.717439986209
Epoch Step: 25 / 135 Loss: 4.376277923583984 Tokens per Sec: 17918.092513361305
Epoch Step: 30 / 135 Loss: 45.683876037597656 Tokens per Sec: 15603.621311923702
Epoch Step: 35 / 135 Loss: 9.440835952758789 Tokens per Sec: 14716.89338392996
Epoch Step: 40 / 135 Loss: 14.20080852508545 Tokens per Sec: 16175.629928582359
Epoch Step: 45 / 135 Loss: 6.139852046966553 Tokens per Sec: 16529.93670707867
Epoch Step: 50 / 135 Loss: 9.745956420898438 Tokens per Sec: 18000.353786707703
Epoch Step: 55 / 135 Loss: 19.480510711669922 Tokens per Sec: 16847.730918564677
Epoch Step: 60 / 135 Loss: 7.732215404510498 Tokens per Sec: 17435.838469775616
Epoch Step: 65 / 135 Loss: 39.76220703125 Tokens per Sec: 16168.361514991531
Epoch Step: 70 / 135 Loss: 8.710370063781738 Tokens per Sec: 16592.733796516528
Epoch Step: 75 / 135 Loss: 17.894685745239258 Tokens per Sec: 18626.72575069907
Epoch Step: 80 / 135 Loss: 6.239522457122803 Tokens per Sec: 18674.27866067486
Epoch Step: 85 / 135 Loss: 13.958736419677734 Tokens per Sec: 16726.174928149296
Epoch Step: 90 / 135 Loss: 8.257807731628418 Tokens per Sec: 16796.716754113673
Epoch Step: 95 / 135 Loss: 10.068037033081055 Tokens per Sec: 13157.471364979134
Epoch Step: 100 / 135 Loss: 17.406789779663086 Tokens per Sec: 16196.642044272665
Epoch Step: 105 / 135 Loss: 12.082328796386719 Tokens per Sec: 15440.054189392475
Epoch Step: 110 / 135 Loss: 7.079441547393799 Tokens per Sec: 14720.754604163272
Epoch Step: 115 / 135 Loss: 12.100107192993164 Tokens per Sec: 16201.404876651171
Epoch Step: 120 / 135 Loss: 14.991477966308594 Tokens per Sec: 15573.072980864681
Epoch Step: 125 / 135 Loss: 7.8314948081970215 Tokens per Sec: 13486.24934570651
Epoch Step: 130 / 135 Loss: 14.417643547058105 Tokens per Sec: 15504.07522207104
Epoch Step: 135 / 135 Loss: 10.70212173461914 Tokens per Sec: 14644.828988423498
Epoch ended with duration 0:00:15.643911
Train perplexity: 1.6355194106597053
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646657
Validation perplexity: 1.4055142924344104
Model saved best_on_validation!
Model saved checkpoint!
Epoch 46 / 1000
Epoch Step: 5 / 135 Loss: 14.109588623046875 Tokens per Sec: 16705.26581461509
Epoch Step: 10 / 135 Loss: 7.4949870109558105 Tokens per Sec: 18459.98228404293
Epoch Step: 15 / 135 Loss: 3.476649045944214 Tokens per Sec: 16298.490597403206
Epoch Step: 20 / 135 Loss: 53.35104751586914 Tokens per Sec: 18237.23420917552
Epoch Step: 25 / 135 Loss: 11.688692092895508 Tokens per Sec: 19021.51059442906
Epoch Step: 30 / 135 Loss: 4.676981449127197 Tokens per Sec: 14279.5160770717
Epoch Step: 35 / 135 Loss: 6.310634613037109 Tokens per Sec: 17262.12839283604
Epoch Step: 40 / 135 Loss: 12.526192665100098 Tokens per Sec: 17449.455395039506
Epoch Step: 45 / 135 Loss: 15.837721824645996 Tokens per Sec: 16827.1440903517
Epoch Step: 50 / 135 Loss: 5.886576175689697 Tokens per Sec: 14283.551795739444
Epoch Step: 55 / 135 Loss: 5.086394786834717 Tokens per Sec: 15543.938403807797
Epoch Step: 60 / 135 Loss: 11.836868286132812 Tokens per Sec: 16516.61901002691
Epoch Step: 65 / 135 Loss: 5.9923224449157715 Tokens per Sec: 15393.123759561882
Epoch Step: 70 / 135 Loss: 7.955052852630615 Tokens per Sec: 16038.490207699055
Epoch Step: 75 / 135 Loss: 12.668375015258789 Tokens per Sec: 15879.696954188461
Epoch Step: 80 / 135 Loss: 4.5258002281188965 Tokens per Sec: 15612.414748865393
Epoch Step: 85 / 135 Loss: 6.253210544586182 Tokens per Sec: 17056.024695402783
Epoch Step: 90 / 135 Loss: 9.311223030090332 Tokens per Sec: 17828.45837404785
Epoch Step: 95 / 135 Loss: 11.000267028808594 Tokens per Sec: 18772.104004845783
Epoch Step: 100 / 135 Loss: 11.074333190917969 Tokens per Sec: 15677.177271293176
Epoch Step: 105 / 135 Loss: 8.280782699584961 Tokens per Sec: 14871.283799470957
Epoch Step: 110 / 135 Loss: 9.216915130615234 Tokens per Sec: 16276.039806481256
Epoch Step: 115 / 135 Loss: 5.790387153625488 Tokens per Sec: 13674.521529176103
Epoch Step: 120 / 135 Loss: 14.029293060302734 Tokens per Sec: 14450.972976184648
Epoch Step: 125 / 135 Loss: 14.052906036376953 Tokens per Sec: 16435.78262761745
Epoch Step: 130 / 135 Loss: 15.906826972961426 Tokens per Sec: 16256.893447964843
Epoch Step: 135 / 135 Loss: 11.889304161071777 Tokens per Sec: 13335.802482582605
Epoch ended with duration 0:00:15.648273
Train perplexity: 1.511682950205996
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657303
Validation perplexity: 1.4778312710875252
Epoch 47 / 1000
Epoch Step: 5 / 135 Loss: 26.584192276000977 Tokens per Sec: 15518.25970461892
Epoch Step: 10 / 135 Loss: 6.49608850479126 Tokens per Sec: 16906.952257687193
Epoch Step: 15 / 135 Loss: 7.814602851867676 Tokens per Sec: 14903.421517597772
Epoch Step: 20 / 135 Loss: 35.34284591674805 Tokens per Sec: 17271.08591405891
Epoch Step: 25 / 135 Loss: 4.936093807220459 Tokens per Sec: 14660.013362332389
Epoch Step: 30 / 135 Loss: 12.590679168701172 Tokens per Sec: 14564.113721552365
Epoch Step: 35 / 135 Loss: 4.248922348022461 Tokens per Sec: 15072.405773803086
Epoch Step: 40 / 135 Loss: 13.131509780883789 Tokens per Sec: 14361.073253034992
Epoch Step: 45 / 135 Loss: 8.295273780822754 Tokens per Sec: 18702.07423878946
Epoch Step: 50 / 135 Loss: 60.488773345947266 Tokens per Sec: 17133.343922975284
Epoch Step: 55 / 135 Loss: 7.430141925811768 Tokens per Sec: 15837.701918448296
Epoch Step: 60 / 135 Loss: 14.298439025878906 Tokens per Sec: 15304.024537825933
Epoch Step: 65 / 135 Loss: 8.56883430480957 Tokens per Sec: 19555.915602493213
Epoch Step: 70 / 135 Loss: 80.18305969238281 Tokens per Sec: 16811.81178035405
Epoch Step: 75 / 135 Loss: 7.006327152252197 Tokens per Sec: 13222.465003805
Epoch Step: 80 / 135 Loss: 11.15604019165039 Tokens per Sec: 19034.568131167434
Epoch Step: 85 / 135 Loss: 4.285797595977783 Tokens per Sec: 17018.3637849232
Epoch Step: 90 / 135 Loss: 4.7119221687316895 Tokens per Sec: 15386.310289263414
Epoch Step: 95 / 135 Loss: 17.539817810058594 Tokens per Sec: 18815.66034792194
Epoch Step: 100 / 135 Loss: 26.688989639282227 Tokens per Sec: 19010.751686308795
Epoch Step: 105 / 135 Loss: 15.677650451660156 Tokens per Sec: 16700.640269185806
Epoch Step: 110 / 135 Loss: 10.271509170532227 Tokens per Sec: 14827.965007693032
Epoch Step: 115 / 135 Loss: 16.819185256958008 Tokens per Sec: 14905.953191480983
Epoch Step: 120 / 135 Loss: 5.392508029937744 Tokens per Sec: 14153.857246151067
Epoch Step: 125 / 135 Loss: 11.933124542236328 Tokens per Sec: 15319.144943763002
Epoch Step: 130 / 135 Loss: 13.07246208190918 Tokens per Sec: 15178.631301895219
Epoch Step: 135 / 135 Loss: 9.480628967285156 Tokens per Sec: 13601.579464420964
Epoch ended with duration 0:00:15.773309
Train perplexity: 1.7153750988228453
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652664
Validation perplexity: 1.5546338527693362
Epoch 48 / 1000
Epoch Step: 5 / 135 Loss: 16.927541732788086 Tokens per Sec: 16714.390887641457
Epoch Step: 10 / 135 Loss: 10.056384086608887 Tokens per Sec: 18342.41603151435
Epoch Step: 15 / 135 Loss: 14.77749252319336 Tokens per Sec: 12551.40594544656
Epoch Step: 20 / 135 Loss: 6.601762294769287 Tokens per Sec: 16393.59493724819
Epoch Step: 25 / 135 Loss: 3.6170952320098877 Tokens per Sec: 15763.350780864763
Epoch Step: 30 / 135 Loss: 14.058079719543457 Tokens per Sec: 17170.937656616043
Epoch Step: 35 / 135 Loss: 16.718053817749023 Tokens per Sec: 17570.91415837777
Epoch Step: 40 / 135 Loss: 11.869202613830566 Tokens per Sec: 19379.093290749035
Epoch Step: 45 / 135 Loss: 46.300621032714844 Tokens per Sec: 16114.981831274645
Epoch Step: 50 / 135 Loss: 12.026761054992676 Tokens per Sec: 12871.599764414885
Epoch Step: 55 / 135 Loss: 9.426506042480469 Tokens per Sec: 18142.59539617803
Epoch Step: 60 / 135 Loss: 10.575104713439941 Tokens per Sec: 17835.992755259194
Epoch Step: 65 / 135 Loss: 17.045352935791016 Tokens per Sec: 14680.500568207026
Epoch Step: 70 / 135 Loss: 7.3117547035217285 Tokens per Sec: 19657.234848966735
Epoch Step: 75 / 135 Loss: 13.905115127563477 Tokens per Sec: 16650.51750519465
Epoch Step: 80 / 135 Loss: 13.545724868774414 Tokens per Sec: 17915.774617276908
Epoch Step: 85 / 135 Loss: 7.65891170501709 Tokens per Sec: 16779.374414225025
Epoch Step: 90 / 135 Loss: 8.175201416015625 Tokens per Sec: 17527.56781947299
Epoch Step: 95 / 135 Loss: 11.331781387329102 Tokens per Sec: 15283.800395116867
Epoch Step: 100 / 135 Loss: 4.5595879554748535 Tokens per Sec: 15355.596312758316
Epoch Step: 105 / 135 Loss: 10.809285163879395 Tokens per Sec: 14182.194190536991
Epoch Step: 110 / 135 Loss: 47.169498443603516 Tokens per Sec: 14270.561440265094
Epoch Step: 115 / 135 Loss: 10.63831901550293 Tokens per Sec: 15152.598739423198
Epoch Step: 120 / 135 Loss: 7.767546653747559 Tokens per Sec: 14869.415339952922
Epoch Step: 125 / 135 Loss: 7.4102091789245605 Tokens per Sec: 14925.64978906759
Epoch Step: 130 / 135 Loss: 10.279744148254395 Tokens per Sec: 15334.045258704344
Epoch Step: 135 / 135 Loss: 8.283161163330078 Tokens per Sec: 14378.258242927037
Epoch ended with duration 0:00:15.780281
Train perplexity: 1.5581481299757545
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.664565
Validation perplexity: 1.6782464084553723
Epoch 49 / 1000
Epoch Step: 5 / 135 Loss: 14.785637855529785 Tokens per Sec: 15036.79617073897
Epoch Step: 10 / 135 Loss: 16.290300369262695 Tokens per Sec: 16937.234793926607
Epoch Step: 15 / 135 Loss: 12.173084259033203 Tokens per Sec: 17839.83382179625
Epoch Step: 20 / 135 Loss: 15.255861282348633 Tokens per Sec: 17122.085935424824
Epoch Step: 25 / 135 Loss: 11.412211418151855 Tokens per Sec: 18571.06827701172
Epoch Step: 30 / 135 Loss: 3.7097270488739014 Tokens per Sec: 13610.33359114237
Epoch Step: 35 / 135 Loss: 11.257963180541992 Tokens per Sec: 18292.294270920745
Epoch Step: 40 / 135 Loss: 13.821113586425781 Tokens per Sec: 18281.993708996135
Epoch Step: 45 / 135 Loss: 4.450544834136963 Tokens per Sec: 18929.06999816772
Epoch Step: 50 / 135 Loss: 13.006823539733887 Tokens per Sec: 16444.433691939987
Epoch Step: 55 / 135 Loss: 9.968576431274414 Tokens per Sec: 14610.941509091841
Epoch Step: 60 / 135 Loss: 13.485757827758789 Tokens per Sec: 16783.835999690487
Epoch Step: 65 / 135 Loss: 8.83767318725586 Tokens per Sec: 13322.990862354402
Epoch Step: 70 / 135 Loss: 9.028586387634277 Tokens per Sec: 19262.1513633023
Epoch Step: 75 / 135 Loss: 7.423397064208984 Tokens per Sec: 18130.19325001719
Epoch Step: 80 / 135 Loss: 15.002829551696777 Tokens per Sec: 16097.984248002742
Epoch Step: 85 / 135 Loss: 5.974101543426514 Tokens per Sec: 14596.973466705702
Epoch Step: 90 / 135 Loss: 13.02970027923584 Tokens per Sec: 16799.174031495982
Epoch Step: 95 / 135 Loss: 5.285390853881836 Tokens per Sec: 17590.484943651645
Epoch Step: 100 / 135 Loss: 7.746075630187988 Tokens per Sec: 15313.858364782292
Epoch Step: 105 / 135 Loss: 6.917418956756592 Tokens per Sec: 16469.782342107654
Epoch Step: 110 / 135 Loss: 8.160319328308105 Tokens per Sec: 13890.220273213163
Epoch Step: 115 / 135 Loss: 10.839110374450684 Tokens per Sec: 15753.122821663363
Epoch Step: 120 / 135 Loss: 7.294556140899658 Tokens per Sec: 15395.14747998022
Epoch Step: 125 / 135 Loss: 13.31338119506836 Tokens per Sec: 14292.85207070939
Epoch Step: 130 / 135 Loss: 9.642112731933594 Tokens per Sec: 13584.791539232663
Epoch Step: 135 / 135 Loss: 11.026714324951172 Tokens per Sec: 15428.85273514317
Epoch ended with duration 0:00:15.679549
Train perplexity: 1.4806133188697506
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.663808
Validation perplexity: 1.708195696260047
Epoch 50 / 1000
Epoch Step: 5 / 135 Loss: 4.492021083831787 Tokens per Sec: 15589.618916396514
Epoch Step: 10 / 135 Loss: 11.319046020507812 Tokens per Sec: 18914.103731078234
Epoch Step: 15 / 135 Loss: 3.9333746433258057 Tokens per Sec: 13165.515537572363
Epoch Step: 20 / 135 Loss: 4.97194766998291 Tokens per Sec: 17038.40472179409
Epoch Step: 25 / 135 Loss: 9.051349639892578 Tokens per Sec: 15128.921648874037
Epoch Step: 30 / 135 Loss: 4.759088516235352 Tokens per Sec: 13271.584429022616
Epoch Step: 35 / 135 Loss: 10.355351448059082 Tokens per Sec: 18888.588381557292
Epoch Step: 40 / 135 Loss: 5.8324737548828125 Tokens per Sec: 19020.709459666494
Epoch Step: 45 / 135 Loss: 11.63276481628418 Tokens per Sec: 15012.639314230193
Epoch Step: 50 / 135 Loss: 13.590042114257812 Tokens per Sec: 16374.839512240742
Epoch Step: 55 / 135 Loss: 7.664802551269531 Tokens per Sec: 17933.955150963546
Epoch Step: 60 / 135 Loss: 9.156822204589844 Tokens per Sec: 15397.678829807028
Epoch Step: 65 / 135 Loss: 30.32615852355957 Tokens per Sec: 18310.534473529955
Epoch Step: 70 / 135 Loss: 9.017402648925781 Tokens per Sec: 17185.39756975454
Epoch Step: 75 / 135 Loss: 7.228376388549805 Tokens per Sec: 13888.12822454776
Epoch Step: 80 / 135 Loss: 3.4057247638702393 Tokens per Sec: 17609.37079780819
Epoch Step: 85 / 135 Loss: 10.893486976623535 Tokens per Sec: 15820.406674083697
Epoch Step: 90 / 135 Loss: 5.9490766525268555 Tokens per Sec: 17509.06617964322
Epoch Step: 95 / 135 Loss: 7.829590797424316 Tokens per Sec: 19590.075617604252
Epoch Step: 100 / 135 Loss: 13.040182113647461 Tokens per Sec: 15839.899539654656
Epoch Step: 105 / 135 Loss: 10.401935577392578 Tokens per Sec: 14655.073775566707
Epoch Step: 110 / 135 Loss: 11.281254768371582 Tokens per Sec: 16903.281725657667
Epoch Step: 115 / 135 Loss: 46.61758041381836 Tokens per Sec: 14627.773911649163
Epoch Step: 120 / 135 Loss: 7.389105319976807 Tokens per Sec: 14919.09640722693
Epoch Step: 125 / 135 Loss: 7.665671348571777 Tokens per Sec: 14488.64313446104
Epoch Step: 130 / 135 Loss: 11.304697036743164 Tokens per Sec: 16607.823181624397
Epoch Step: 135 / 135 Loss: 61.769065856933594 Tokens per Sec: 13286.934271758619
Epoch ended with duration 0:00:15.768326
Train perplexity: 1.5229945261459095
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651029
Validation perplexity: 1.4002813350261076
Model saved best_on_validation!
Model saved checkpoint!
Epoch 51 / 1000
Epoch Step: 5 / 135 Loss: 8.963093757629395 Tokens per Sec: 15357.011610935659
Epoch Step: 10 / 135 Loss: 11.75654125213623 Tokens per Sec: 14288.14018959384
Epoch Step: 15 / 135 Loss: 10.433987617492676 Tokens per Sec: 16474.18916793548
Epoch Step: 20 / 135 Loss: 10.904302597045898 Tokens per Sec: 19832.712256426512
Epoch Step: 25 / 135 Loss: 11.7874755859375 Tokens per Sec: 16414.061731001533
Epoch Step: 30 / 135 Loss: 10.815640449523926 Tokens per Sec: 17526.904686976388
Epoch Step: 35 / 135 Loss: 7.35249137878418 Tokens per Sec: 19391.038690103815
Epoch Step: 40 / 135 Loss: 6.555667400360107 Tokens per Sec: 15903.556173786921
Epoch Step: 45 / 135 Loss: 12.121054649353027 Tokens per Sec: 16062.015846608245
Epoch Step: 50 / 135 Loss: 9.035021781921387 Tokens per Sec: 17769.50472314785
Epoch Step: 55 / 135 Loss: 12.69812297821045 Tokens per Sec: 15726.517289333013
Epoch Step: 60 / 135 Loss: 4.113363742828369 Tokens per Sec: 15902.893503903433
Epoch Step: 65 / 135 Loss: 8.22938346862793 Tokens per Sec: 14740.666320898585
Epoch Step: 70 / 135 Loss: 14.350278854370117 Tokens per Sec: 18236.136024832853
Epoch Step: 75 / 135 Loss: 3.6106631755828857 Tokens per Sec: 14756.429208136708
Epoch Step: 80 / 135 Loss: 8.080798149108887 Tokens per Sec: 16722.707668518033
Epoch Step: 85 / 135 Loss: 4.145242214202881 Tokens per Sec: 17358.94258398203
Epoch Step: 90 / 135 Loss: 7.677424907684326 Tokens per Sec: 17049.8813269188
Epoch Step: 95 / 135 Loss: 12.410868644714355 Tokens per Sec: 15749.886186367705
Epoch Step: 100 / 135 Loss: 7.791544437408447 Tokens per Sec: 17359.684553971638
Epoch Step: 105 / 135 Loss: 6.477123737335205 Tokens per Sec: 15368.733292991565
Epoch Step: 110 / 135 Loss: 6.679677486419678 Tokens per Sec: 15370.874918903122
Epoch Step: 115 / 135 Loss: 4.951622486114502 Tokens per Sec: 16237.998422582961
Epoch Step: 120 / 135 Loss: 6.408937931060791 Tokens per Sec: 13791.22561728445
Epoch Step: 125 / 135 Loss: 8.63623046875 Tokens per Sec: 14397.484434128866
Epoch Step: 130 / 135 Loss: 6.33735990524292 Tokens per Sec: 14829.910063136816
Epoch Step: 135 / 135 Loss: 7.117362022399902 Tokens per Sec: 15396.53656918224
Epoch ended with duration 0:00:15.689371
Train perplexity: 1.4275377984942768
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645727
Validation perplexity: 1.3491092594445253
Model saved best_on_validation!
Epoch 52 / 1000
Epoch Step: 5 / 135 Loss: 11.530938148498535 Tokens per Sec: 16214.69391417313
Epoch Step: 10 / 135 Loss: 12.150057792663574 Tokens per Sec: 17363.229687979478
Epoch Step: 15 / 135 Loss: 7.748047351837158 Tokens per Sec: 19510.498728377665
Epoch Step: 20 / 135 Loss: 74.50725555419922 Tokens per Sec: 15251.443312716383
Epoch Step: 25 / 135 Loss: 14.283587455749512 Tokens per Sec: 17103.496278106482
Epoch Step: 30 / 135 Loss: 3.723945379257202 Tokens per Sec: 16762.279117394097
Epoch Step: 35 / 135 Loss: 58.90169906616211 Tokens per Sec: 14836.881459695069
Epoch Step: 40 / 135 Loss: 16.032392501831055 Tokens per Sec: 17589.147660435767
Epoch Step: 45 / 135 Loss: 3.750722646713257 Tokens per Sec: 15189.388038846779
Epoch Step: 50 / 135 Loss: 15.167083740234375 Tokens per Sec: 14494.028552317895
Epoch Step: 55 / 135 Loss: 4.556820869445801 Tokens per Sec: 13621.437435769987
Epoch Step: 60 / 135 Loss: 6.4379048347473145 Tokens per Sec: 18284.248162573538
Epoch Step: 65 / 135 Loss: 24.360383987426758 Tokens per Sec: 16086.51044885855
Epoch Step: 70 / 135 Loss: 6.480262756347656 Tokens per Sec: 15568.395140472381
Epoch Step: 75 / 135 Loss: 7.539176940917969 Tokens per Sec: 17209.83809113698
Epoch Step: 80 / 135 Loss: 13.221343040466309 Tokens per Sec: 15913.55062854851
Epoch Step: 85 / 135 Loss: 10.984766960144043 Tokens per Sec: 19718.15022369791
Epoch Step: 90 / 135 Loss: 7.029953956604004 Tokens per Sec: 16929.647990167297
Epoch Step: 95 / 135 Loss: 8.776240348815918 Tokens per Sec: 15124.336139557696
Epoch Step: 100 / 135 Loss: 4.578342437744141 Tokens per Sec: 18892.091476878
Epoch Step: 105 / 135 Loss: 8.786386489868164 Tokens per Sec: 12852.37556227067
Epoch Step: 110 / 135 Loss: 10.113115310668945 Tokens per Sec: 15696.613755289844
Epoch Step: 115 / 135 Loss: 11.586963653564453 Tokens per Sec: 15947.314753601033
Epoch Step: 120 / 135 Loss: 5.847751617431641 Tokens per Sec: 15907.685979873653
Epoch Step: 125 / 135 Loss: 12.052967071533203 Tokens per Sec: 16522.536946265733
Epoch Step: 130 / 135 Loss: 10.438031196594238 Tokens per Sec: 14786.543338480313
Epoch Step: 135 / 135 Loss: 8.368067741394043 Tokens per Sec: 13173.920783676387
Epoch ended with duration 0:00:15.733075
Train perplexity: 1.4645497323153644
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657907
Validation perplexity: 1.4836497147695604
Epoch 53 / 1000
Epoch Step: 5 / 135 Loss: 8.571786880493164 Tokens per Sec: 17035.499809783483
Epoch Step: 10 / 135 Loss: 7.585646152496338 Tokens per Sec: 16992.46817693338
Epoch Step: 15 / 135 Loss: 11.44677734375 Tokens per Sec: 17681.6772100423
Epoch Step: 20 / 135 Loss: 12.236259460449219 Tokens per Sec: 17740.47603864493
Epoch Step: 25 / 135 Loss: 4.595340728759766 Tokens per Sec: 12857.046745475502
Epoch Step: 30 / 135 Loss: 7.623615264892578 Tokens per Sec: 17243.24484278487
Epoch Step: 35 / 135 Loss: 8.596019744873047 Tokens per Sec: 17291.811912167504
Epoch Step: 40 / 135 Loss: 11.14380168914795 Tokens per Sec: 17425.03651647221
Epoch Step: 45 / 135 Loss: 7.3707804679870605 Tokens per Sec: 16469.088903187974
Epoch Step: 50 / 135 Loss: 12.949737548828125 Tokens per Sec: 16235.821731756325
Epoch Step: 55 / 135 Loss: 3.4814765453338623 Tokens per Sec: 11926.321227044073
Epoch Step: 60 / 135 Loss: 6.045045852661133 Tokens per Sec: 15378.063604869603
Epoch Step: 65 / 135 Loss: 6.495633125305176 Tokens per Sec: 19248.142528856482
Epoch Step: 70 / 135 Loss: 10.023865699768066 Tokens per Sec: 18294.06140875786
Epoch Step: 75 / 135 Loss: 13.205397605895996 Tokens per Sec: 17643.882576776563
Epoch Step: 80 / 135 Loss: 11.220015525817871 Tokens per Sec: 15249.018811045093
Epoch Step: 85 / 135 Loss: 3.315431833267212 Tokens per Sec: 17313.952194818343
Epoch Step: 90 / 135 Loss: 12.375753402709961 Tokens per Sec: 17086.76825283894
Epoch Step: 95 / 135 Loss: 3.446671485900879 Tokens per Sec: 15511.306961305585
Epoch Step: 100 / 135 Loss: 31.002744674682617 Tokens per Sec: 16149.650556564946
Epoch Step: 105 / 135 Loss: 8.323164939880371 Tokens per Sec: 15030.342019359257
Epoch Step: 110 / 135 Loss: 10.630677223205566 Tokens per Sec: 15773.367385039075
Epoch Step: 115 / 135 Loss: 5.820930480957031 Tokens per Sec: 15629.203134571828
Epoch Step: 120 / 135 Loss: 61.28103256225586 Tokens per Sec: 13520.552174575689
Epoch Step: 125 / 135 Loss: 9.40650463104248 Tokens per Sec: 13787.191864595348
Epoch Step: 130 / 135 Loss: 4.955532550811768 Tokens per Sec: 13123.448196098036
Epoch Step: 135 / 135 Loss: 38.829586029052734 Tokens per Sec: 15618.224956186446
Epoch ended with duration 0:00:15.846739
Train perplexity: 1.4832088538370236
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649980
Validation perplexity: 1.5860409140513685
Epoch 54 / 1000
Epoch Step: 5 / 135 Loss: 15.14057445526123 Tokens per Sec: 15646.248927544448
Epoch Step: 10 / 135 Loss: 7.795354843139648 Tokens per Sec: 17168.95116149353
Epoch Step: 15 / 135 Loss: 15.530020713806152 Tokens per Sec: 17116.14924237425
Epoch Step: 20 / 135 Loss: 6.2505106925964355 Tokens per Sec: 18576.567962158508
Epoch Step: 25 / 135 Loss: 10.75620174407959 Tokens per Sec: 17930.52494439545
Epoch Step: 30 / 135 Loss: 15.57044506072998 Tokens per Sec: 14657.895722540325
Epoch Step: 35 / 135 Loss: 9.5492582321167 Tokens per Sec: 16944.498554120357
Epoch Step: 40 / 135 Loss: 7.161367893218994 Tokens per Sec: 16027.809177394322
Epoch Step: 45 / 135 Loss: 15.311086654663086 Tokens per Sec: 17091.77758481006
Epoch Step: 50 / 135 Loss: 12.931636810302734 Tokens per Sec: 17519.101502203757
Epoch Step: 55 / 135 Loss: 7.80689811706543 Tokens per Sec: 16526.998825755814
Epoch Step: 60 / 135 Loss: 8.602896690368652 Tokens per Sec: 14556.902865969758
Epoch Step: 65 / 135 Loss: 3.6735646724700928 Tokens per Sec: 15453.3823741187
Epoch Step: 70 / 135 Loss: 9.289831161499023 Tokens per Sec: 17333.720990352605
Epoch Step: 75 / 135 Loss: 7.417718887329102 Tokens per Sec: 13221.322369814914
Epoch Step: 80 / 135 Loss: 74.93843078613281 Tokens per Sec: 19891.658850290005
Epoch Step: 85 / 135 Loss: 10.175870895385742 Tokens per Sec: 18181.204151059057
Epoch Step: 90 / 135 Loss: 7.1171488761901855 Tokens per Sec: 17744.546628032032
Epoch Step: 95 / 135 Loss: 3.844740629196167 Tokens per Sec: 15077.818162408437
Epoch Step: 100 / 135 Loss: 7.250728607177734 Tokens per Sec: 15137.81461899433
Epoch Step: 105 / 135 Loss: 6.352740287780762 Tokens per Sec: 15148.102166995164
Epoch Step: 110 / 135 Loss: 9.776119232177734 Tokens per Sec: 15386.854203316116
Epoch Step: 115 / 135 Loss: 4.911813259124756 Tokens per Sec: 15268.840806221475
Epoch Step: 120 / 135 Loss: 8.798255920410156 Tokens per Sec: 13761.586312632491
Epoch Step: 125 / 135 Loss: 10.77649974822998 Tokens per Sec: 16206.28997566942
Epoch Step: 130 / 135 Loss: 9.33025074005127 Tokens per Sec: 13335.394404668086
Epoch Step: 135 / 135 Loss: 9.092020988464355 Tokens per Sec: 15242.303511057728
Epoch ended with duration 0:00:15.741116
Train perplexity: 1.4813745842631652
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654049
Validation perplexity: 1.459336688221995
Epoch 55 / 1000
Epoch Step: 5 / 135 Loss: 9.288825035095215 Tokens per Sec: 16451.88066383308
Epoch Step: 10 / 135 Loss: 6.781205654144287 Tokens per Sec: 18870.89858059139
Epoch Step: 15 / 135 Loss: 10.024211883544922 Tokens per Sec: 15481.047811118397
Epoch Step: 20 / 135 Loss: 6.843480110168457 Tokens per Sec: 16571.379034961104
Epoch Step: 25 / 135 Loss: 10.963098526000977 Tokens per Sec: 17158.07351593524
Epoch Step: 30 / 135 Loss: 10.248342514038086 Tokens per Sec: 16361.759439801855
Epoch Step: 35 / 135 Loss: 11.605618476867676 Tokens per Sec: 17798.45534240766
Epoch Step: 40 / 135 Loss: 12.041040420532227 Tokens per Sec: 13661.004099772757
Epoch Step: 45 / 135 Loss: 5.729997158050537 Tokens per Sec: 15865.268270187029
Epoch Step: 50 / 135 Loss: 10.304316520690918 Tokens per Sec: 16312.243042757433
Epoch Step: 55 / 135 Loss: 2.7306668758392334 Tokens per Sec: 17027.955970692223
Epoch Step: 60 / 135 Loss: 2.9962079524993896 Tokens per Sec: 15077.728824262656
Epoch Step: 65 / 135 Loss: 3.3622376918792725 Tokens per Sec: 14211.055768711569
Epoch Step: 70 / 135 Loss: 12.807408332824707 Tokens per Sec: 17668.550333471816
Epoch Step: 75 / 135 Loss: 4.603096961975098 Tokens per Sec: 19065.639748960795
Epoch Step: 80 / 135 Loss: 4.2163543701171875 Tokens per Sec: 18361.51062448376
Epoch Step: 85 / 135 Loss: 13.345242500305176 Tokens per Sec: 16951.153855323973
Epoch Step: 90 / 135 Loss: 4.464208126068115 Tokens per Sec: 18481.42018859538
Epoch Step: 95 / 135 Loss: 9.850881576538086 Tokens per Sec: 18862.744476003165
Epoch Step: 100 / 135 Loss: 8.454118728637695 Tokens per Sec: 15078.925427940376
Epoch Step: 105 / 135 Loss: 8.571751594543457 Tokens per Sec: 15281.82937859378
Epoch Step: 110 / 135 Loss: 6.011110782623291 Tokens per Sec: 14169.845834159325
Epoch Step: 115 / 135 Loss: 5.521768569946289 Tokens per Sec: 14951.928159846517
Epoch Step: 120 / 135 Loss: 9.298202514648438 Tokens per Sec: 14317.873510497482
Epoch Step: 125 / 135 Loss: 8.928840637207031 Tokens per Sec: 15119.1247650668
Epoch Step: 130 / 135 Loss: 7.742592811584473 Tokens per Sec: 15592.006538468928
Epoch Step: 135 / 135 Loss: 43.59196472167969 Tokens per Sec: 14392.51924104533
Epoch ended with duration 0:00:15.661056
Train perplexity: 1.3681774612687596
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.667294
Validation perplexity: 1.5541606824020133
Model saved checkpoint!
Epoch 56 / 1000
Epoch Step: 5 / 135 Loss: 10.876432418823242 Tokens per Sec: 13501.901245612406
Epoch Step: 10 / 135 Loss: 12.559881210327148 Tokens per Sec: 16208.71805329397
Epoch Step: 15 / 135 Loss: 5.733057975769043 Tokens per Sec: 14055.930643775153
Epoch Step: 20 / 135 Loss: 3.4243578910827637 Tokens per Sec: 17474.901343030233
Epoch Step: 25 / 135 Loss: 7.843497276306152 Tokens per Sec: 16370.696015333244
Epoch Step: 30 / 135 Loss: 7.538875102996826 Tokens per Sec: 17398.18437525483
Epoch Step: 35 / 135 Loss: 9.602227210998535 Tokens per Sec: 19656.44310312103
Epoch Step: 40 / 135 Loss: 7.113799571990967 Tokens per Sec: 18257.300619391943
Epoch Step: 45 / 135 Loss: 3.0333333015441895 Tokens per Sec: 16851.371839509833
Epoch Step: 50 / 135 Loss: 11.604131698608398 Tokens per Sec: 16616.64699564496
Epoch Step: 55 / 135 Loss: 11.596074104309082 Tokens per Sec: 16432.362850309204
Epoch Step: 60 / 135 Loss: 8.204119682312012 Tokens per Sec: 19321.358779459413
Epoch Step: 65 / 135 Loss: 11.598176002502441 Tokens per Sec: 18003.677448561284
Epoch Step: 70 / 135 Loss: 7.890534400939941 Tokens per Sec: 14772.766116459974
Epoch Step: 75 / 135 Loss: 5.84360408782959 Tokens per Sec: 17851.83125849637
Epoch Step: 80 / 135 Loss: 7.769607067108154 Tokens per Sec: 18591.50333373196
Epoch Step: 85 / 135 Loss: 13.961134910583496 Tokens per Sec: 15513.341666562525
Epoch Step: 90 / 135 Loss: 11.774530410766602 Tokens per Sec: 17772.36875134261
Epoch Step: 95 / 135 Loss: 20.385019302368164 Tokens per Sec: 16589.255346215377
Epoch Step: 100 / 135 Loss: 22.114465713500977 Tokens per Sec: 14809.235225251052
Epoch Step: 105 / 135 Loss: 10.7353515625 Tokens per Sec: 13157.886187450802
Epoch Step: 110 / 135 Loss: 6.164426803588867 Tokens per Sec: 15064.306309993153
Epoch Step: 115 / 135 Loss: 9.156661033630371 Tokens per Sec: 14417.526437398255
Epoch Step: 120 / 135 Loss: 8.891006469726562 Tokens per Sec: 16639.369349599794
Epoch Step: 125 / 135 Loss: 14.287144660949707 Tokens per Sec: 15350.628929908906
Epoch Step: 130 / 135 Loss: 6.659686088562012 Tokens per Sec: 15572.029190199952
Epoch Step: 135 / 135 Loss: 6.905866622924805 Tokens per Sec: 14162.673743903822
Epoch ended with duration 0:00:15.650258
Train perplexity: 1.3844263125027763
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656870
Validation perplexity: 1.493811960937255
Epoch 57 / 1000
Epoch Step: 5 / 135 Loss: 8.20677661895752 Tokens per Sec: 16546.36934417885
Epoch Step: 10 / 135 Loss: 8.338746070861816 Tokens per Sec: 13374.69387755102
Epoch Step: 15 / 135 Loss: 7.589749336242676 Tokens per Sec: 18884.73515312526
Epoch Step: 20 / 135 Loss: 4.057602405548096 Tokens per Sec: 16187.382253409229
Epoch Step: 25 / 135 Loss: 3.6822478771209717 Tokens per Sec: 16923.466918021724
Epoch Step: 30 / 135 Loss: 8.672728538513184 Tokens per Sec: 16888.06420053881
Epoch Step: 35 / 135 Loss: 4.944301605224609 Tokens per Sec: 17573.12306878615
Epoch Step: 40 / 135 Loss: 12.403157234191895 Tokens per Sec: 18222.87254492301
Epoch Step: 45 / 135 Loss: 3.994190216064453 Tokens per Sec: 16686.843662689073
Epoch Step: 50 / 135 Loss: 5.884546279907227 Tokens per Sec: 15044.23894795463
Epoch Step: 55 / 135 Loss: 53.80689239501953 Tokens per Sec: 14727.034405247534
Epoch Step: 60 / 135 Loss: 4.596216678619385 Tokens per Sec: 16255.194495596947
Epoch Step: 65 / 135 Loss: 10.78803825378418 Tokens per Sec: 18081.08334647544
Epoch Step: 70 / 135 Loss: 9.548949241638184 Tokens per Sec: 15548.178910392111
Epoch Step: 75 / 135 Loss: 8.950408935546875 Tokens per Sec: 14693.57715788981
Epoch Step: 80 / 135 Loss: 8.22946834564209 Tokens per Sec: 17825.934951793613
Epoch Step: 85 / 135 Loss: 11.664865493774414 Tokens per Sec: 15866.832967013623
Epoch Step: 90 / 135 Loss: 3.7836263179779053 Tokens per Sec: 16684.411768437258
Epoch Step: 95 / 135 Loss: 5.367560863494873 Tokens per Sec: 15582.093104465344
Epoch Step: 100 / 135 Loss: 11.08357048034668 Tokens per Sec: 16888.099958897736
Epoch Step: 105 / 135 Loss: 27.894556045532227 Tokens per Sec: 15182.088285831223
Epoch Step: 110 / 135 Loss: 55.164512634277344 Tokens per Sec: 16492.436525670808
Epoch Step: 115 / 135 Loss: 7.581522464752197 Tokens per Sec: 13805.354104040132
Epoch Step: 120 / 135 Loss: 5.811796188354492 Tokens per Sec: 14629.966352549585
Epoch Step: 125 / 135 Loss: 9.16349983215332 Tokens per Sec: 13797.330933655523
Epoch Step: 130 / 135 Loss: 9.486821174621582 Tokens per Sec: 15575.030296090841
Epoch Step: 135 / 135 Loss: 10.037248611450195 Tokens per Sec: 15925.214288871637
Epoch ended with duration 0:00:15.831551
Train perplexity: 1.42754149796563
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645120
Validation perplexity: 1.3142226972144684
Model saved best_on_validation!
Epoch 58 / 1000
Epoch Step: 5 / 135 Loss: 9.766552925109863 Tokens per Sec: 18088.876516887343
Epoch Step: 10 / 135 Loss: 14.272876739501953 Tokens per Sec: 17751.037591613956
Epoch Step: 15 / 135 Loss: 9.71943473815918 Tokens per Sec: 16931.123216143107
Epoch Step: 20 / 135 Loss: 12.06887435913086 Tokens per Sec: 15709.468066604704
Epoch Step: 25 / 135 Loss: 6.217165946960449 Tokens per Sec: 14722.904089465113
Epoch Step: 30 / 135 Loss: 13.07328987121582 Tokens per Sec: 17963.04691295681
Epoch Step: 35 / 135 Loss: 11.794501304626465 Tokens per Sec: 13057.852358252523
Epoch Step: 40 / 135 Loss: 7.033596992492676 Tokens per Sec: 13444.083694052804
Epoch Step: 45 / 135 Loss: 5.783498287200928 Tokens per Sec: 18126.001345237506
Epoch Step: 50 / 135 Loss: 36.177547454833984 Tokens per Sec: 17498.736537216537
Epoch Step: 55 / 135 Loss: 6.406577110290527 Tokens per Sec: 15087.865005758369
Epoch Step: 60 / 135 Loss: 7.704377174377441 Tokens per Sec: 15567.78191374395
Epoch Step: 65 / 135 Loss: 18.626203536987305 Tokens per Sec: 16013.536389503453
Epoch Step: 70 / 135 Loss: 5.807135105133057 Tokens per Sec: 16574.861710183188
Epoch Step: 75 / 135 Loss: 3.2379214763641357 Tokens per Sec: 19053.93470473911
Epoch Step: 80 / 135 Loss: 10.83000659942627 Tokens per Sec: 18143.453099968046
Epoch Step: 85 / 135 Loss: 17.90821647644043 Tokens per Sec: 16101.16499987946
Epoch Step: 90 / 135 Loss: 7.2354631423950195 Tokens per Sec: 17175.639786809374
Epoch Step: 95 / 135 Loss: 4.763783931732178 Tokens per Sec: 17263.241406578047
Epoch Step: 100 / 135 Loss: 9.250149726867676 Tokens per Sec: 18549.715453756602
Epoch Step: 105 / 135 Loss: 5.559071063995361 Tokens per Sec: 15052.482039325128
Epoch Step: 110 / 135 Loss: 7.5036749839782715 Tokens per Sec: 14996.826084061424
Epoch Step: 115 / 135 Loss: 10.517014503479004 Tokens per Sec: 16080.37049403066
Epoch Step: 120 / 135 Loss: 50.549503326416016 Tokens per Sec: 16000.23071058394
Epoch Step: 125 / 135 Loss: 3.312532663345337 Tokens per Sec: 12244.884637574934
Epoch Step: 130 / 135 Loss: 9.835369110107422 Tokens per Sec: 15632.25292960543
Epoch Step: 135 / 135 Loss: 3.5240941047668457 Tokens per Sec: 13780.972721800823
Epoch ended with duration 0:00:15.692092
Train perplexity: 1.4011286278247364
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650038
Validation perplexity: 1.4941233804350602
Epoch 59 / 1000
Epoch Step: 5 / 135 Loss: 7.632949352264404 Tokens per Sec: 14725.714598621931
Epoch Step: 10 / 135 Loss: 9.451693534851074 Tokens per Sec: 17861.732198369955
Epoch Step: 15 / 135 Loss: 4.627396106719971 Tokens per Sec: 16250.532455335038
Epoch Step: 20 / 135 Loss: 8.622488975524902 Tokens per Sec: 17200.81552843773
Epoch Step: 25 / 135 Loss: 43.41648864746094 Tokens per Sec: 14956.139750865723
Epoch Step: 30 / 135 Loss: 6.325109481811523 Tokens per Sec: 14962.89183951413
Epoch Step: 35 / 135 Loss: 4.731801986694336 Tokens per Sec: 16154.430542295438
Epoch Step: 40 / 135 Loss: 9.12392807006836 Tokens per Sec: 16012.124224446317
Epoch Step: 45 / 135 Loss: 6.459887504577637 Tokens per Sec: 18253.506526570894
Epoch Step: 50 / 135 Loss: 10.285691261291504 Tokens per Sec: 16715.34576868739
Epoch Step: 55 / 135 Loss: 10.339940071105957 Tokens per Sec: 15490.776829964112
Epoch Step: 60 / 135 Loss: 9.143477439880371 Tokens per Sec: 18034.009123079082
Epoch Step: 65 / 135 Loss: 4.657559871673584 Tokens per Sec: 17809.421704870558
Epoch Step: 70 / 135 Loss: 4.047611713409424 Tokens per Sec: 16767.731378433906
Epoch Step: 75 / 135 Loss: 2.8796331882476807 Tokens per Sec: 16879.024748735515
Epoch Step: 80 / 135 Loss: 5.278858661651611 Tokens per Sec: 20030.132618404376
Epoch Step: 85 / 135 Loss: 10.787528038024902 Tokens per Sec: 17984.502791371917
Epoch Step: 90 / 135 Loss: 5.059864521026611 Tokens per Sec: 16204.486624897685
Epoch Step: 95 / 135 Loss: 4.872690200805664 Tokens per Sec: 14796.269260092826
Epoch Step: 100 / 135 Loss: 6.249886512756348 Tokens per Sec: 16208.646645761579
Epoch Step: 105 / 135 Loss: 9.796953201293945 Tokens per Sec: 15533.087865813286
Epoch Step: 110 / 135 Loss: 42.56578063964844 Tokens per Sec: 16215.30881734472
Epoch Step: 115 / 135 Loss: 9.422675132751465 Tokens per Sec: 17151.64661524685
Epoch Step: 120 / 135 Loss: 8.845487594604492 Tokens per Sec: 14759.158951875608
Epoch Step: 125 / 135 Loss: 8.78321647644043 Tokens per Sec: 14435.090139182148
Epoch Step: 130 / 135 Loss: 5.327789306640625 Tokens per Sec: 11971.661249460676
Epoch Step: 135 / 135 Loss: 8.804729461669922 Tokens per Sec: 13319.624290905462
Epoch ended with duration 0:00:15.742885
Train perplexity: 1.412738525417742
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.660604
Validation perplexity: 1.432956632552601
Epoch 60 / 1000
Epoch Step: 5 / 135 Loss: 6.4779229164123535 Tokens per Sec: 19701.94597201209
Epoch Step: 10 / 135 Loss: 10.843673706054688 Tokens per Sec: 18306.080344753602
Epoch Step: 15 / 135 Loss: 2.761704921722412 Tokens per Sec: 16942.901278245015
Epoch Step: 20 / 135 Loss: 6.506589412689209 Tokens per Sec: 13696.238270912765
Epoch Step: 25 / 135 Loss: 4.386782169342041 Tokens per Sec: 15817.133908052348
Epoch Step: 30 / 135 Loss: 12.818991661071777 Tokens per Sec: 12162.702386067607
Epoch Step: 35 / 135 Loss: 5.981991767883301 Tokens per Sec: 16204.481240761317
Epoch Step: 40 / 135 Loss: 6.1723198890686035 Tokens per Sec: 16007.54398126162
Epoch Step: 45 / 135 Loss: 5.505922794342041 Tokens per Sec: 16834.908939872766
Epoch Step: 50 / 135 Loss: 53.90351104736328 Tokens per Sec: 15463.742896286496
Epoch Step: 55 / 135 Loss: 3.899643898010254 Tokens per Sec: 16449.75718032543
Epoch Step: 60 / 135 Loss: 6.0671000480651855 Tokens per Sec: 19381.007463138467
Epoch Step: 65 / 135 Loss: 13.573049545288086 Tokens per Sec: 15117.135222259363
Epoch Step: 70 / 135 Loss: 8.50881290435791 Tokens per Sec: 16514.49170684901
Epoch Step: 75 / 135 Loss: 8.827974319458008 Tokens per Sec: 16464.92463354935
Epoch Step: 80 / 135 Loss: 10.646159172058105 Tokens per Sec: 17397.12064561825
Epoch Step: 85 / 135 Loss: 10.791980743408203 Tokens per Sec: 18721.0944979045
Epoch Step: 90 / 135 Loss: 4.394475936889648 Tokens per Sec: 18434.620421884065
Epoch Step: 95 / 135 Loss: 5.133228302001953 Tokens per Sec: 18567.935349941796
Epoch Step: 100 / 135 Loss: 3.2613372802734375 Tokens per Sec: 14547.882203144452
Epoch Step: 105 / 135 Loss: 10.169875144958496 Tokens per Sec: 14977.329621009492
Epoch Step: 110 / 135 Loss: 8.645052909851074 Tokens per Sec: 14730.110710694167
Epoch Step: 115 / 135 Loss: 9.685559272766113 Tokens per Sec: 15216.947487329635
Epoch Step: 120 / 135 Loss: 8.29407024383545 Tokens per Sec: 15877.378990170895
Epoch Step: 125 / 135 Loss: 3.912123441696167 Tokens per Sec: 14004.17916372495
Epoch Step: 130 / 135 Loss: 6.064868450164795 Tokens per Sec: 14740.597723646855
Epoch Step: 135 / 135 Loss: 10.171624183654785 Tokens per Sec: 16613.07911070322
Epoch ended with duration 0:00:15.667868
Train perplexity: 1.4799074259328993
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651407
Validation perplexity: 1.3120584151079642
Model saved best_on_validation!
Model saved checkpoint!
Epoch 61 / 1000
Epoch Step: 5 / 135 Loss: 7.62199592590332 Tokens per Sec: 16230.117999392138
Epoch Step: 10 / 135 Loss: 11.144241333007812 Tokens per Sec: 16605.84978998796
Epoch Step: 15 / 135 Loss: 3.6800923347473145 Tokens per Sec: 19478.44423692374
Epoch Step: 20 / 135 Loss: 3.2095775604248047 Tokens per Sec: 16204.721619755514
Epoch Step: 25 / 135 Loss: 9.108168601989746 Tokens per Sec: 14437.362157939493
Epoch Step: 30 / 135 Loss: 10.552276611328125 Tokens per Sec: 17347.472687278165
Epoch Step: 35 / 135 Loss: 6.07562255859375 Tokens per Sec: 16746.03052263715
Epoch Step: 40 / 135 Loss: 9.460500717163086 Tokens per Sec: 17039.617292011044
Epoch Step: 45 / 135 Loss: 10.435022354125977 Tokens per Sec: 18494.139408104093
Epoch Step: 50 / 135 Loss: 5.9281005859375 Tokens per Sec: 18337.547806524184
Epoch Step: 55 / 135 Loss: 4.941818714141846 Tokens per Sec: 17102.928541013465
Epoch Step: 60 / 135 Loss: 9.374549865722656 Tokens per Sec: 13590.328283150031
Epoch Step: 65 / 135 Loss: 6.613386631011963 Tokens per Sec: 16206.175347184402
Epoch Step: 70 / 135 Loss: 4.557682037353516 Tokens per Sec: 16956.912003280828
Epoch Step: 75 / 135 Loss: 2.754757881164551 Tokens per Sec: 17274.30476547812
Epoch Step: 80 / 135 Loss: 9.339787483215332 Tokens per Sec: 14845.65539473642
Epoch Step: 85 / 135 Loss: 5.360604286193848 Tokens per Sec: 16790.691098098385
Epoch Step: 90 / 135 Loss: 11.716782569885254 Tokens per Sec: 17528.319350250895
Epoch Step: 95 / 135 Loss: 10.24055004119873 Tokens per Sec: 14834.27951723588
Epoch Step: 100 / 135 Loss: 9.215274810791016 Tokens per Sec: 17641.371370622266
Epoch Step: 105 / 135 Loss: 5.700943470001221 Tokens per Sec: 16246.594051661978
Epoch Step: 110 / 135 Loss: 6.500649929046631 Tokens per Sec: 14736.840149078105
Epoch Step: 115 / 135 Loss: 6.464090347290039 Tokens per Sec: 14805.802710582877
Epoch Step: 120 / 135 Loss: 2.9874744415283203 Tokens per Sec: 15145.873406482579
Epoch Step: 125 / 135 Loss: 10.092881202697754 Tokens per Sec: 15677.52559107851
Epoch Step: 130 / 135 Loss: 4.623166084289551 Tokens per Sec: 12910.119744536265
Epoch Step: 135 / 135 Loss: 53.876285552978516 Tokens per Sec: 15902.495346232996
Epoch ended with duration 0:00:15.706755
Train perplexity: 1.400494873867427
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.660823
Validation perplexity: 1.3888385943823174
Epoch 62 / 1000
Epoch Step: 5 / 135 Loss: 4.527929306030273 Tokens per Sec: 16125.01634514268
Epoch Step: 10 / 135 Loss: 5.413895130157471 Tokens per Sec: 16067.62442095434
Epoch Step: 15 / 135 Loss: 6.168092250823975 Tokens per Sec: 17638.16162444125
Epoch Step: 20 / 135 Loss: 10.464798927307129 Tokens per Sec: 16311.935240563476
Epoch Step: 25 / 135 Loss: 10.60248851776123 Tokens per Sec: 16343.559187011919
Epoch Step: 30 / 135 Loss: 5.270359039306641 Tokens per Sec: 15143.249191985971
Epoch Step: 35 / 135 Loss: 9.854081153869629 Tokens per Sec: 16918.836202324124
Epoch Step: 40 / 135 Loss: 6.505494117736816 Tokens per Sec: 15636.397496958189
Epoch Step: 45 / 135 Loss: 4.269670486450195 Tokens per Sec: 17247.82585392818
Epoch Step: 50 / 135 Loss: 9.844661712646484 Tokens per Sec: 17549.332999683007
Epoch Step: 55 / 135 Loss: 6.143738269805908 Tokens per Sec: 18450.357523507802
Epoch Step: 60 / 135 Loss: 1.924481749534607 Tokens per Sec: 17119.564739687194
Epoch Step: 65 / 135 Loss: 10.341161727905273 Tokens per Sec: 17441.233318198192
Epoch Step: 70 / 135 Loss: 4.362681865692139 Tokens per Sec: 15311.83588799907
Epoch Step: 75 / 135 Loss: 63.286766052246094 Tokens per Sec: 15418.564914711344
Epoch Step: 80 / 135 Loss: 43.6082649230957 Tokens per Sec: 19568.37646255434
Epoch Step: 85 / 135 Loss: 9.797553062438965 Tokens per Sec: 17727.345673237553
Epoch Step: 90 / 135 Loss: 4.283211708068848 Tokens per Sec: 15417.637286851363
Epoch Step: 95 / 135 Loss: 8.817030906677246 Tokens per Sec: 17557.43714012643
Epoch Step: 100 / 135 Loss: 11.312253952026367 Tokens per Sec: 13223.328350569222
Epoch Step: 105 / 135 Loss: 5.3015875816345215 Tokens per Sec: 15516.68026567492
Epoch Step: 110 / 135 Loss: 4.952829837799072 Tokens per Sec: 12434.336311779003
Epoch Step: 115 / 135 Loss: 5.4765625 Tokens per Sec: 14926.514876758956
Epoch Step: 120 / 135 Loss: 8.165517807006836 Tokens per Sec: 16087.590108744269
Epoch Step: 125 / 135 Loss: 5.614804744720459 Tokens per Sec: 16304.335982077002
Epoch Step: 130 / 135 Loss: 15.284022331237793 Tokens per Sec: 12711.022654617675
Epoch Step: 135 / 135 Loss: 8.268218040466309 Tokens per Sec: 15669.131121661456
Epoch ended with duration 0:00:15.761950
Train perplexity: 1.3906630153712387
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651790
Validation perplexity: 1.3601743050199733
Epoch 63 / 1000
Epoch Step: 5 / 135 Loss: 3.856156826019287 Tokens per Sec: 15617.084994215218
Epoch Step: 10 / 135 Loss: 5.998231410980225 Tokens per Sec: 15123.660473232534
Epoch Step: 15 / 135 Loss: 16.832168579101562 Tokens per Sec: 15164.994494688557
Epoch Step: 20 / 135 Loss: 3.703920364379883 Tokens per Sec: 14970.882802254653
Epoch Step: 25 / 135 Loss: 42.012943267822266 Tokens per Sec: 16573.585241120145
Epoch Step: 30 / 135 Loss: 4.982771873474121 Tokens per Sec: 15690.085321242681
Epoch Step: 35 / 135 Loss: 5.988639831542969 Tokens per Sec: 16039.13899699933
Epoch Step: 40 / 135 Loss: 8.4757719039917 Tokens per Sec: 14698.717693339384
Epoch Step: 45 / 135 Loss: 44.232666015625 Tokens per Sec: 15761.25538944206
Epoch Step: 50 / 135 Loss: 5.013366222381592 Tokens per Sec: 16733.10254816034
Epoch Step: 55 / 135 Loss: 8.564309120178223 Tokens per Sec: 15791.050314006678
Epoch Step: 60 / 135 Loss: 9.609219551086426 Tokens per Sec: 17254.488843381463
Epoch Step: 65 / 135 Loss: 9.703288078308105 Tokens per Sec: 17782.848669045634
Epoch Step: 70 / 135 Loss: 9.344894409179688 Tokens per Sec: 17041.406133246724
Epoch Step: 75 / 135 Loss: 9.464909553527832 Tokens per Sec: 15911.519933200556
Epoch Step: 80 / 135 Loss: 54.624996185302734 Tokens per Sec: 17721.499214327374
Epoch Step: 85 / 135 Loss: 5.577460289001465 Tokens per Sec: 19233.214027534937
Epoch Step: 90 / 135 Loss: 6.266238212585449 Tokens per Sec: 19236.59603067354
Epoch Step: 95 / 135 Loss: 5.073355674743652 Tokens per Sec: 17434.013938669163
Epoch Step: 100 / 135 Loss: 3.9615278244018555 Tokens per Sec: 16377.724655385819
Epoch Step: 105 / 135 Loss: 5.838840961456299 Tokens per Sec: 15605.053985283628
Epoch Step: 110 / 135 Loss: 46.814918518066406 Tokens per Sec: 15976.383872570923
Epoch Step: 115 / 135 Loss: 8.632476806640625 Tokens per Sec: 13568.767842158215
Epoch Step: 120 / 135 Loss: 44.99491882324219 Tokens per Sec: 15264.01355311976
Epoch Step: 125 / 135 Loss: 9.942312240600586 Tokens per Sec: 16951.8906772055
Epoch Step: 130 / 135 Loss: 11.642045974731445 Tokens per Sec: 12647.258990439344
Epoch Step: 135 / 135 Loss: 4.126151084899902 Tokens per Sec: 13519.800250116125
Epoch ended with duration 0:00:15.816020
Train perplexity: 1.3923722538819516
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.655898
Validation perplexity: 1.4581461755047989
Epoch 64 / 1000
Epoch Step: 5 / 135 Loss: 11.793204307556152 Tokens per Sec: 16208.865633934129
Epoch Step: 10 / 135 Loss: 6.022337436676025 Tokens per Sec: 15519.100118967235
Epoch Step: 15 / 135 Loss: 55.54364776611328 Tokens per Sec: 17499.785665604217
Epoch Step: 20 / 135 Loss: 20.49130630493164 Tokens per Sec: 15552.593173024517
Epoch Step: 25 / 135 Loss: 93.420166015625 Tokens per Sec: 17023.514170134542
Epoch Step: 30 / 135 Loss: 11.514524459838867 Tokens per Sec: 19297.38554983255
Epoch Step: 35 / 135 Loss: 26.27354621887207 Tokens per Sec: 17812.472497316103
Epoch Step: 40 / 135 Loss: 4.965120315551758 Tokens per Sec: 14461.929432237645
Epoch Step: 45 / 135 Loss: 12.317438125610352 Tokens per Sec: 16481.13227071799
Epoch Step: 50 / 135 Loss: 8.85603141784668 Tokens per Sec: 17949.332544540124
Epoch Step: 55 / 135 Loss: 10.462626457214355 Tokens per Sec: 15157.535023496608
Epoch Step: 60 / 135 Loss: 16.445415496826172 Tokens per Sec: 16518.855087494678
Epoch Step: 65 / 135 Loss: 9.96958065032959 Tokens per Sec: 18220.54376064094
Epoch Step: 70 / 135 Loss: 86.1504135131836 Tokens per Sec: 19875.525663377277
Epoch Step: 75 / 135 Loss: 3.6747801303863525 Tokens per Sec: 14865.76532943763
Epoch Step: 80 / 135 Loss: 7.509225845336914 Tokens per Sec: 18665.40225068862
Epoch Step: 85 / 135 Loss: 10.909290313720703 Tokens per Sec: 17489.58094351488
Epoch Step: 90 / 135 Loss: 8.689659118652344 Tokens per Sec: 15704.929115986684
Epoch Step: 95 / 135 Loss: 5.043804168701172 Tokens per Sec: 15513.175261582926
Epoch Step: 100 / 135 Loss: 9.38024616241455 Tokens per Sec: 13174.542507837212
Epoch Step: 105 / 135 Loss: 24.666790008544922 Tokens per Sec: 12559.21147680937
Epoch Step: 110 / 135 Loss: 4.993486404418945 Tokens per Sec: 16002.028086910033
Epoch Step: 115 / 135 Loss: 43.7178955078125 Tokens per Sec: 16568.716615270754
Epoch Step: 120 / 135 Loss: 7.1162543296813965 Tokens per Sec: 14968.335645841426
Epoch Step: 125 / 135 Loss: 11.893221855163574 Tokens per Sec: 14359.090906154825
Epoch Step: 130 / 135 Loss: 10.001985549926758 Tokens per Sec: 14225.225124908093
Epoch Step: 135 / 135 Loss: 5.121942520141602 Tokens per Sec: 16857.99984105238
Epoch ended with duration 0:00:15.668378
Train perplexity: 1.5798542921759553
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public abstract TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.List < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.655205
Validation perplexity: 1.421806303395308
Epoch 65 / 1000
Epoch Step: 5 / 135 Loss: 40.032569885253906 Tokens per Sec: 15341.124877189233
Epoch Step: 10 / 135 Loss: 9.940241813659668 Tokens per Sec: 14778.969067882648
Epoch Step: 15 / 135 Loss: 2.997185230255127 Tokens per Sec: 17376.70411183624
Epoch Step: 20 / 135 Loss: 6.9310302734375 Tokens per Sec: 15646.122526421683
Epoch Step: 25 / 135 Loss: 13.914999961853027 Tokens per Sec: 18514.784030300867
Epoch Step: 30 / 135 Loss: 2.6297755241394043 Tokens per Sec: 15489.112887433925
Epoch Step: 35 / 135 Loss: 9.878192901611328 Tokens per Sec: 18156.85916008357
Epoch Step: 40 / 135 Loss: 6.666127681732178 Tokens per Sec: 15980.367824701458
Epoch Step: 45 / 135 Loss: 3.222170352935791 Tokens per Sec: 15787.844416562108
Epoch Step: 50 / 135 Loss: 9.795942306518555 Tokens per Sec: 19726.990596452306
Epoch Step: 55 / 135 Loss: 4.932877540588379 Tokens per Sec: 17411.80152463087
Epoch Step: 60 / 135 Loss: 6.117655277252197 Tokens per Sec: 15094.210085424782
Epoch Step: 65 / 135 Loss: 43.131317138671875 Tokens per Sec: 17097.59324157945
Epoch Step: 70 / 135 Loss: 12.095903396606445 Tokens per Sec: 17067.636133182175
Epoch Step: 75 / 135 Loss: 7.038035869598389 Tokens per Sec: 14799.647102335664
Epoch Step: 80 / 135 Loss: 9.193973541259766 Tokens per Sec: 18167.05218221251
Epoch Step: 85 / 135 Loss: 2.1473228931427 Tokens per Sec: 16969.81067608876
Epoch Step: 90 / 135 Loss: 3.8692409992218018 Tokens per Sec: 18198.22423687633
Epoch Step: 95 / 135 Loss: 7.767605781555176 Tokens per Sec: 15275.221843387342
Epoch Step: 100 / 135 Loss: 2.951519012451172 Tokens per Sec: 17609.675583452754
Epoch Step: 105 / 135 Loss: 8.295991897583008 Tokens per Sec: 15516.55794085772
Epoch Step: 110 / 135 Loss: 8.819220542907715 Tokens per Sec: 15708.952180877603
Epoch Step: 115 / 135 Loss: 7.187835693359375 Tokens per Sec: 15113.490391045774
Epoch Step: 120 / 135 Loss: 5.073431015014648 Tokens per Sec: 15881.634415691931
Epoch Step: 125 / 135 Loss: 6.8122639656066895 Tokens per Sec: 14308.963497060477
Epoch Step: 130 / 135 Loss: 20.569721221923828 Tokens per Sec: 14763.37588949609
Epoch Step: 135 / 135 Loss: 4.587749004364014 Tokens per Sec: 12828.872027438221
Epoch ended with duration 0:00:15.683976
Train perplexity: 1.3448122776658813
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652359
Validation perplexity: 1.3424151849402552
Model saved checkpoint!
Epoch 66 / 1000
Epoch Step: 5 / 135 Loss: 7.6947479248046875 Tokens per Sec: 15188.450424029632
Epoch Step: 10 / 135 Loss: 8.400135040283203 Tokens per Sec: 19058.921652682646
Epoch Step: 15 / 135 Loss: 7.7759528160095215 Tokens per Sec: 16635.22130267763
Epoch Step: 20 / 135 Loss: 45.159881591796875 Tokens per Sec: 16808.73712778082
Epoch Step: 25 / 135 Loss: 10.238097190856934 Tokens per Sec: 17361.30189785981
Epoch Step: 30 / 135 Loss: 12.49400520324707 Tokens per Sec: 15533.755572876558
Epoch Step: 35 / 135 Loss: 8.701255798339844 Tokens per Sec: 15296.641424405976
Epoch Step: 40 / 135 Loss: 4.829610824584961 Tokens per Sec: 16334.015529129792
Epoch Step: 45 / 135 Loss: 7.8817219734191895 Tokens per Sec: 14469.761098043036
Epoch Step: 50 / 135 Loss: 3.3838908672332764 Tokens per Sec: 15954.870420982093
Epoch Step: 55 / 135 Loss: 4.088601589202881 Tokens per Sec: 14073.65617946139
Epoch Step: 60 / 135 Loss: 3.563690185546875 Tokens per Sec: 15698.996461021507
Epoch Step: 65 / 135 Loss: 10.171547889709473 Tokens per Sec: 14974.738192260478
Epoch Step: 70 / 135 Loss: 10.578336715698242 Tokens per Sec: 18300.686365134152
Epoch Step: 75 / 135 Loss: 6.3016180992126465 Tokens per Sec: 15886.539518856545
Epoch Step: 80 / 135 Loss: 5.846720218658447 Tokens per Sec: 18568.294945728565
Epoch Step: 85 / 135 Loss: 8.61425495147705 Tokens per Sec: 17752.517923012525
Epoch Step: 90 / 135 Loss: 22.04242706298828 Tokens per Sec: 16421.622057390185
Epoch Step: 95 / 135 Loss: 2.4669532775878906 Tokens per Sec: 16649.94396561268
Epoch Step: 100 / 135 Loss: 7.730888843536377 Tokens per Sec: 18238.531836535476
Epoch Step: 105 / 135 Loss: 3.7933270931243896 Tokens per Sec: 14466.921597191335
Epoch Step: 110 / 135 Loss: 8.11109447479248 Tokens per Sec: 16387.191479540492
Epoch Step: 115 / 135 Loss: 6.16977596282959 Tokens per Sec: 14993.220729757919
Epoch Step: 120 / 135 Loss: 6.570582866668701 Tokens per Sec: 13754.584837525077
Epoch Step: 125 / 135 Loss: 4.439988613128662 Tokens per Sec: 14995.88028726966
Epoch Step: 130 / 135 Loss: 5.761549949645996 Tokens per Sec: 15680.540805441156
Epoch Step: 135 / 135 Loss: 7.151444911956787 Tokens per Sec: 16212.818371970043
Epoch ended with duration 0:00:15.751648
Train perplexity: 1.3252519265499982
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.644260
Validation perplexity: 1.2737761009542343
Model saved best_on_validation!
Epoch 67 / 1000
Epoch Step: 5 / 135 Loss: 18.621994018554688 Tokens per Sec: 12973.78088086639
Epoch Step: 10 / 135 Loss: 58.924224853515625 Tokens per Sec: 18705.625628492708
Epoch Step: 15 / 135 Loss: 12.586996078491211 Tokens per Sec: 14308.885212696707
Epoch Step: 20 / 135 Loss: 11.43548583984375 Tokens per Sec: 17283.135786126943
Epoch Step: 25 / 135 Loss: 6.894567489624023 Tokens per Sec: 14453.513595978387
Epoch Step: 30 / 135 Loss: 4.031264781951904 Tokens per Sec: 16289.884893093737
Epoch Step: 35 / 135 Loss: 12.835718154907227 Tokens per Sec: 16003.840535151787
Epoch Step: 40 / 135 Loss: 3.7613141536712646 Tokens per Sec: 17812.39339812004
Epoch Step: 45 / 135 Loss: 6.564042568206787 Tokens per Sec: 14751.641714001064
Epoch Step: 50 / 135 Loss: 7.503688335418701 Tokens per Sec: 18369.29902134329
Epoch Step: 55 / 135 Loss: 10.720580101013184 Tokens per Sec: 17778.877317749546
Epoch Step: 60 / 135 Loss: 6.468019008636475 Tokens per Sec: 18997.289475115558
Epoch Step: 65 / 135 Loss: 7.180856704711914 Tokens per Sec: 12325.458172221148
Epoch Step: 70 / 135 Loss: 6.7725324630737305 Tokens per Sec: 17948.119192418413
Epoch Step: 75 / 135 Loss: 7.756292819976807 Tokens per Sec: 16900.755599032822
Epoch Step: 80 / 135 Loss: 8.966514587402344 Tokens per Sec: 17585.666003803388
Epoch Step: 85 / 135 Loss: 9.317891120910645 Tokens per Sec: 17737.741902552352
Epoch Step: 90 / 135 Loss: 4.710333347320557 Tokens per Sec: 18173.93360876326
Epoch Step: 95 / 135 Loss: 10.292121887207031 Tokens per Sec: 15956.636079846685
Epoch Step: 100 / 135 Loss: 6.46279239654541 Tokens per Sec: 17028.036589592473
Epoch Step: 105 / 135 Loss: 3.4553370475769043 Tokens per Sec: 14015.087074570658
Epoch Step: 110 / 135 Loss: 5.629152774810791 Tokens per Sec: 14807.45096573956
Epoch Step: 115 / 135 Loss: 7.608154773712158 Tokens per Sec: 16338.019731013841
Epoch Step: 120 / 135 Loss: 7.717315196990967 Tokens per Sec: 16611.53529972113
Epoch Step: 125 / 135 Loss: 3.9303605556488037 Tokens per Sec: 13610.90168331958
Epoch Step: 130 / 135 Loss: 6.486293315887451 Tokens per Sec: 13861.087899037684
Epoch Step: 135 / 135 Loss: 8.605060577392578 Tokens per Sec: 14965.123906389234
Epoch ended with duration 0:00:15.793204
Train perplexity: 1.3713321546350778
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650627
Validation perplexity: 1.3064776200989558
Epoch 68 / 1000
Epoch Step: 5 / 135 Loss: 4.544656753540039 Tokens per Sec: 13838.162118863698
Epoch Step: 10 / 135 Loss: 3.85011887550354 Tokens per Sec: 16441.659304309243
Epoch Step: 15 / 135 Loss: 5.980698108673096 Tokens per Sec: 15805.679984393384
Epoch Step: 20 / 135 Loss: 2.6780014038085938 Tokens per Sec: 16225.575761330401
Epoch Step: 25 / 135 Loss: 6.382866382598877 Tokens per Sec: 16582.01585578103
Epoch Step: 30 / 135 Loss: 37.53360366821289 Tokens per Sec: 14919.766745141256
Epoch Step: 35 / 135 Loss: 7.185760974884033 Tokens per Sec: 19660.987099461447
Epoch Step: 40 / 135 Loss: 3.150672197341919 Tokens per Sec: 17135.141863573997
Epoch Step: 45 / 135 Loss: 5.106691837310791 Tokens per Sec: 16059.16170541587
Epoch Step: 50 / 135 Loss: 6.782557010650635 Tokens per Sec: 16525.376506210043
Epoch Step: 55 / 135 Loss: 3.8766167163848877 Tokens per Sec: 18364.70297953371
Epoch Step: 60 / 135 Loss: 8.548378944396973 Tokens per Sec: 18350.471961063988
Epoch Step: 65 / 135 Loss: 7.270115375518799 Tokens per Sec: 14889.166867564003
Epoch Step: 70 / 135 Loss: 10.562743186950684 Tokens per Sec: 14393.138055125748
Epoch Step: 75 / 135 Loss: 4.326100826263428 Tokens per Sec: 18442.171612338352
Epoch Step: 80 / 135 Loss: 10.017717361450195 Tokens per Sec: 17365.090995438546
Epoch Step: 85 / 135 Loss: 7.109553337097168 Tokens per Sec: 14462.12650089383
Epoch Step: 90 / 135 Loss: 4.811469554901123 Tokens per Sec: 15902.583304725353
Epoch Step: 95 / 135 Loss: 5.855270862579346 Tokens per Sec: 16732.42463349963
Epoch Step: 100 / 135 Loss: 3.5680336952209473 Tokens per Sec: 18323.12807842512
Epoch Step: 105 / 135 Loss: 6.267805576324463 Tokens per Sec: 14837.071145957949
Epoch Step: 110 / 135 Loss: 38.37306594848633 Tokens per Sec: 15889.649437339242
Epoch Step: 115 / 135 Loss: 7.69893217086792 Tokens per Sec: 14187.277869609597
Epoch Step: 120 / 135 Loss: 8.831501960754395 Tokens per Sec: 16653.526214289253
Epoch Step: 125 / 135 Loss: 5.265357494354248 Tokens per Sec: 13100.998942347762
Epoch Step: 130 / 135 Loss: 3.824244737625122 Tokens per Sec: 14613.049482266719
Epoch Step: 135 / 135 Loss: 32.628028869628906 Tokens per Sec: 15686.107760138371
Epoch ended with duration 0:00:15.764746
Train perplexity: 1.3210515057181809
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657317
Validation perplexity: 1.4631142045256298
Epoch 69 / 1000
Epoch Step: 5 / 135 Loss: 4.470846652984619 Tokens per Sec: 14594.778077418705
Epoch Step: 10 / 135 Loss: 2.9206039905548096 Tokens per Sec: 19290.35741732556
Epoch Step: 15 / 135 Loss: 5.259150505065918 Tokens per Sec: 14886.755252721363
Epoch Step: 20 / 135 Loss: 4.065007209777832 Tokens per Sec: 16818.33276424529
Epoch Step: 25 / 135 Loss: 6.006865501403809 Tokens per Sec: 16414.661551417612
Epoch Step: 30 / 135 Loss: 7.821142673492432 Tokens per Sec: 16554.3088345963
Epoch Step: 35 / 135 Loss: 6.113434314727783 Tokens per Sec: 18798.49346494579
Epoch Step: 40 / 135 Loss: 1.996171474456787 Tokens per Sec: 13101.469237815052
Epoch Step: 45 / 135 Loss: 3.949162483215332 Tokens per Sec: 17453.672915319974
Epoch Step: 50 / 135 Loss: 3.6856741905212402 Tokens per Sec: 17279.657181700768
Epoch Step: 55 / 135 Loss: 11.420278549194336 Tokens per Sec: 16101.11399679812
Epoch Step: 60 / 135 Loss: 4.249296188354492 Tokens per Sec: 18715.40750537578
Epoch Step: 65 / 135 Loss: 8.347103118896484 Tokens per Sec: 15617.740615265717
Epoch Step: 70 / 135 Loss: 6.53265380859375 Tokens per Sec: 15972.633792050901
Epoch Step: 75 / 135 Loss: 6.424489974975586 Tokens per Sec: 14074.928655569955
Epoch Step: 80 / 135 Loss: 7.36723518371582 Tokens per Sec: 16790.91774361649
Epoch Step: 85 / 135 Loss: 3.3003523349761963 Tokens per Sec: 16956.070989874
Epoch Step: 90 / 135 Loss: 7.558090686798096 Tokens per Sec: 18533.436016378815
Epoch Step: 95 / 135 Loss: 8.911565780639648 Tokens per Sec: 18813.568924019724
Epoch Step: 100 / 135 Loss: 3.061436653137207 Tokens per Sec: 18559.48550929482
Epoch Step: 105 / 135 Loss: 4.065380573272705 Tokens per Sec: 15588.226195603544
Epoch Step: 110 / 135 Loss: 6.880417346954346 Tokens per Sec: 14333.730035246588
Epoch Step: 115 / 135 Loss: 5.75382661819458 Tokens per Sec: 12390.359252144024
Epoch Step: 120 / 135 Loss: 9.076416015625 Tokens per Sec: 15559.098424751362
Epoch Step: 125 / 135 Loss: 4.220103740692139 Tokens per Sec: 15250.189579499216
Epoch Step: 130 / 135 Loss: 7.407900810241699 Tokens per Sec: 14979.707084832547
Epoch Step: 135 / 135 Loss: 16.67137336730957 Tokens per Sec: 13822.273408755504
Epoch ended with duration 0:00:15.762730
Train perplexity: 1.3047357348173854
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656081
Validation perplexity: 1.3307691295340818
Epoch 70 / 1000
Epoch Step: 5 / 135 Loss: 2.9685239791870117 Tokens per Sec: 13974.763514384722
Epoch Step: 10 / 135 Loss: 8.642542839050293 Tokens per Sec: 15423.805302280205
Epoch Step: 15 / 135 Loss: 3.73060941696167 Tokens per Sec: 15520.179248573557
Epoch Step: 20 / 135 Loss: 4.410129547119141 Tokens per Sec: 15820.440291030452
Epoch Step: 25 / 135 Loss: 4.469035625457764 Tokens per Sec: 20202.821233126448
Epoch Step: 30 / 135 Loss: 10.001460075378418 Tokens per Sec: 18037.528712955336
Epoch Step: 35 / 135 Loss: 3.26933217048645 Tokens per Sec: 18168.75455494787
Epoch Step: 40 / 135 Loss: 7.633418083190918 Tokens per Sec: 14393.486702046901
Epoch Step: 45 / 135 Loss: 8.702617645263672 Tokens per Sec: 18674.833687904902
Epoch Step: 50 / 135 Loss: 6.9035797119140625 Tokens per Sec: 18712.347827126156
Epoch Step: 55 / 135 Loss: 7.271583557128906 Tokens per Sec: 14398.898952351605
Epoch Step: 60 / 135 Loss: 3.6892499923706055 Tokens per Sec: 18013.784245946703
Epoch Step: 65 / 135 Loss: 3.848757743835449 Tokens per Sec: 15666.728195289515
Epoch Step: 70 / 135 Loss: 8.914326667785645 Tokens per Sec: 14540.501313446557
Epoch Step: 75 / 135 Loss: 2.7945096492767334 Tokens per Sec: 17708.578650166197
Epoch Step: 80 / 135 Loss: 2.544879198074341 Tokens per Sec: 17713.71812231031
Epoch Step: 85 / 135 Loss: 8.73989486694336 Tokens per Sec: 18663.63892081194
Epoch Step: 90 / 135 Loss: 3.6524910926818848 Tokens per Sec: 16773.525376525966
Epoch Step: 95 / 135 Loss: 7.334529876708984 Tokens per Sec: 16529.871939567376
Epoch Step: 100 / 135 Loss: 9.04958724975586 Tokens per Sec: 14300.775404356962
Epoch Step: 105 / 135 Loss: 30.401769638061523 Tokens per Sec: 14576.947736474334
Epoch Step: 110 / 135 Loss: 4.235651969909668 Tokens per Sec: 11839.835387688474
Epoch Step: 115 / 135 Loss: 5.111897945404053 Tokens per Sec: 15715.06976597351
Epoch Step: 120 / 135 Loss: 6.802255630493164 Tokens per Sec: 14655.898850277053
Epoch Step: 125 / 135 Loss: 8.455317497253418 Tokens per Sec: 15672.159073976063
Epoch Step: 130 / 135 Loss: 7.48365592956543 Tokens per Sec: 15340.089928706842
Epoch Step: 135 / 135 Loss: 6.989528656005859 Tokens per Sec: 15648.128115323578
Epoch ended with duration 0:00:15.746218
Train perplexity: 1.3253088288264272
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.665850
Validation perplexity: 1.4423792476752295
Model saved checkpoint!
Epoch 71 / 1000
Epoch Step: 5 / 135 Loss: 8.354713439941406 Tokens per Sec: 18118.17753794325
Epoch Step: 10 / 135 Loss: 6.843667030334473 Tokens per Sec: 16370.880810500472
Epoch Step: 15 / 135 Loss: 6.342641353607178 Tokens per Sec: 14084.278631121202
Epoch Step: 20 / 135 Loss: 7.667088985443115 Tokens per Sec: 15163.31334735816
Epoch Step: 25 / 135 Loss: 11.30628490447998 Tokens per Sec: 17175.37608003031
Epoch Step: 30 / 135 Loss: 9.102507591247559 Tokens per Sec: 15168.615843553438
Epoch Step: 35 / 135 Loss: 5.4732255935668945 Tokens per Sec: 13071.888369733253
Epoch Step: 40 / 135 Loss: 3.4155242443084717 Tokens per Sec: 15882.724899025628
Epoch Step: 45 / 135 Loss: 7.961532115936279 Tokens per Sec: 16454.110403931827
Epoch Step: 50 / 135 Loss: 4.224259376525879 Tokens per Sec: 19273.367470810732
Epoch Step: 55 / 135 Loss: 3.885857343673706 Tokens per Sec: 16757.148160099998
Epoch Step: 60 / 135 Loss: 3.4077320098876953 Tokens per Sec: 18100.695851344444
Epoch Step: 65 / 135 Loss: 33.26066207885742 Tokens per Sec: 17555.304866714123
Epoch Step: 70 / 135 Loss: 2.2605509757995605 Tokens per Sec: 14823.633114284527
Epoch Step: 75 / 135 Loss: 55.44487380981445 Tokens per Sec: 16004.131155329995
Epoch Step: 80 / 135 Loss: 13.618868827819824 Tokens per Sec: 17090.65843201292
Epoch Step: 85 / 135 Loss: 18.636272430419922 Tokens per Sec: 17484.115782170345
Epoch Step: 90 / 135 Loss: 9.60109806060791 Tokens per Sec: 17726.182042801236
Epoch Step: 95 / 135 Loss: 4.464324951171875 Tokens per Sec: 18361.030867014244
Epoch Step: 100 / 135 Loss: 8.706022262573242 Tokens per Sec: 14204.566498376864
Epoch Step: 105 / 135 Loss: 8.111356735229492 Tokens per Sec: 15578.356359644964
Epoch Step: 110 / 135 Loss: 2.9013547897338867 Tokens per Sec: 14291.20800713034
Epoch Step: 115 / 135 Loss: 9.448700904846191 Tokens per Sec: 15633.855746165696
Epoch Step: 120 / 135 Loss: 5.97296142578125 Tokens per Sec: 14869.132727470676
Epoch Step: 125 / 135 Loss: 6.962539196014404 Tokens per Sec: 16034.52010102793
Epoch Step: 130 / 135 Loss: 3.4912781715393066 Tokens per Sec: 14425.51446684755
Epoch Step: 135 / 135 Loss: 8.674915313720703 Tokens per Sec: 15194.348882864144
Epoch ended with duration 0:00:15.810959
Train perplexity: 1.3536673698088415
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.661665
Validation perplexity: 1.5343610403876662
Epoch 72 / 1000
Epoch Step: 5 / 135 Loss: 21.643556594848633 Tokens per Sec: 15587.716539665025
Epoch Step: 10 / 135 Loss: 7.352262020111084 Tokens per Sec: 15380.839307025264
Epoch Step: 15 / 135 Loss: 2.598958969116211 Tokens per Sec: 17542.55343654413
Epoch Step: 20 / 135 Loss: 3.5744824409484863 Tokens per Sec: 14516.814201022547
Epoch Step: 25 / 135 Loss: 4.311030387878418 Tokens per Sec: 17298.041954502376
Epoch Step: 30 / 135 Loss: 4.968927383422852 Tokens per Sec: 17303.697286223607
Epoch Step: 35 / 135 Loss: 9.171860694885254 Tokens per Sec: 18309.25878560185
Epoch Step: 40 / 135 Loss: 5.6366400718688965 Tokens per Sec: 20145.111718083008
Epoch Step: 45 / 135 Loss: 5.231832504272461 Tokens per Sec: 19692.266997939405
Epoch Step: 50 / 135 Loss: 8.018324851989746 Tokens per Sec: 19250.379910685126
Epoch Step: 55 / 135 Loss: 47.593292236328125 Tokens per Sec: 16367.843521236238
Epoch Step: 60 / 135 Loss: 4.76345682144165 Tokens per Sec: 18668.425948584365
Epoch Step: 65 / 135 Loss: 6.228084087371826 Tokens per Sec: 15826.602162780857
Epoch Step: 70 / 135 Loss: 4.105091571807861 Tokens per Sec: 18278.090141544973
Epoch Step: 75 / 135 Loss: 8.023189544677734 Tokens per Sec: 18983.451548271234
Epoch Step: 80 / 135 Loss: 5.368478298187256 Tokens per Sec: 17698.437225108726
Epoch Step: 85 / 135 Loss: 8.239739418029785 Tokens per Sec: 16981.990064773974
Epoch Step: 90 / 135 Loss: 7.139302730560303 Tokens per Sec: 20514.790182022814
Epoch Step: 95 / 135 Loss: 8.243460655212402 Tokens per Sec: 20430.907970564138
Epoch Step: 100 / 135 Loss: 3.5073280334472656 Tokens per Sec: 17001.330565151962
Epoch Step: 105 / 135 Loss: 2.7153432369232178 Tokens per Sec: 15198.514659120689
Epoch Step: 110 / 135 Loss: 6.2438530921936035 Tokens per Sec: 17416.567665590916
Epoch Step: 115 / 135 Loss: 5.919515132904053 Tokens per Sec: 17412.654278294976
Epoch Step: 120 / 135 Loss: 4.443114280700684 Tokens per Sec: 14472.890077425238
Epoch Step: 125 / 135 Loss: 6.117805004119873 Tokens per Sec: 15241.150127398487
Epoch Step: 130 / 135 Loss: 6.530328750610352 Tokens per Sec: 17078.61652053157
Epoch Step: 135 / 135 Loss: 3.9133388996124268 Tokens per Sec: 18227.819603958746
Epoch ended with duration 0:00:14.588900
Train perplexity: 1.3112282815752734
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653831
Validation perplexity: 1.5092594327347408
Epoch 73 / 1000
Epoch Step: 5 / 135 Loss: 2.955477714538574 Tokens per Sec: 18083.92518988542
Epoch Step: 10 / 135 Loss: 3.6573424339294434 Tokens per Sec: 20927.1137332267
Epoch Step: 15 / 135 Loss: 5.554806709289551 Tokens per Sec: 16389.04203511161
Epoch Step: 20 / 135 Loss: 4.505873680114746 Tokens per Sec: 14496.96372334098
Epoch Step: 25 / 135 Loss: 3.6064271926879883 Tokens per Sec: 20110.477673742604
Epoch Step: 30 / 135 Loss: 3.6093666553497314 Tokens per Sec: 17707.252001702072
Epoch Step: 35 / 135 Loss: 4.085353851318359 Tokens per Sec: 19691.303128534895
Epoch Step: 40 / 135 Loss: 8.382418632507324 Tokens per Sec: 17859.49215804494
Epoch Step: 45 / 135 Loss: 4.717067718505859 Tokens per Sec: 20229.98962154192
Epoch Step: 50 / 135 Loss: 8.310613632202148 Tokens per Sec: 18557.87792526254
Epoch Step: 55 / 135 Loss: 2.9473443031311035 Tokens per Sec: 16989.86708090003
Epoch Step: 60 / 135 Loss: 2.8680715560913086 Tokens per Sec: 18951.50005269259
Epoch Step: 65 / 135 Loss: 8.729126930236816 Tokens per Sec: 21294.991846637477
Epoch Step: 70 / 135 Loss: 1.9860373735427856 Tokens per Sec: 18940.068949887915
Epoch Step: 75 / 135 Loss: 3.526946783065796 Tokens per Sec: 17627.812365347192
Epoch Step: 80 / 135 Loss: 5.993371486663818 Tokens per Sec: 19898.67536132161
Epoch Step: 85 / 135 Loss: 3.105149507522583 Tokens per Sec: 19281.990886535506
Epoch Step: 90 / 135 Loss: 6.14329195022583 Tokens per Sec: 18291.960178351226
Epoch Step: 95 / 135 Loss: 11.937461853027344 Tokens per Sec: 16031.33477765332
Epoch Step: 100 / 135 Loss: 9.927982330322266 Tokens per Sec: 17992.22376892169
Epoch Step: 105 / 135 Loss: 5.832733631134033 Tokens per Sec: 17639.594785800182
Epoch Step: 110 / 135 Loss: 7.493687152862549 Tokens per Sec: 17739.95965211423
Epoch Step: 115 / 135 Loss: 55.58272171020508 Tokens per Sec: 16797.854325077802
Epoch Step: 120 / 135 Loss: 2.4738504886627197 Tokens per Sec: 15976.703850003074
Epoch Step: 125 / 135 Loss: 3.720996379852295 Tokens per Sec: 17474.674564867753
Epoch Step: 130 / 135 Loss: 4.302367687225342 Tokens per Sec: 16761.784409303338
Epoch Step: 135 / 135 Loss: 6.759550094604492 Tokens per Sec: 13067.435699288875
Epoch ended with duration 0:00:14.130808
Train perplexity: 1.2949507206909083
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.639589
Validation perplexity: 1.2646783907661208
Model saved best_on_validation!
Epoch 74 / 1000
Epoch Step: 5 / 135 Loss: 4.569003105163574 Tokens per Sec: 15751.900633393205
Epoch Step: 10 / 135 Loss: 3.4130406379699707 Tokens per Sec: 17282.919583959978
Epoch Step: 15 / 135 Loss: 2.667360305786133 Tokens per Sec: 20051.816363580583
Epoch Step: 20 / 135 Loss: 6.541445255279541 Tokens per Sec: 14819.13724446957
Epoch Step: 25 / 135 Loss: 2.7545385360717773 Tokens per Sec: 16668.801468959562
Epoch Step: 30 / 135 Loss: 8.518604278564453 Tokens per Sec: 18634.02612993469
Epoch Step: 35 / 135 Loss: 3.4894015789031982 Tokens per Sec: 17089.62356445333
Epoch Step: 40 / 135 Loss: 1.6379269361495972 Tokens per Sec: 19237.374970357287
Epoch Step: 45 / 135 Loss: 13.798070907592773 Tokens per Sec: 18910.22487971898
Epoch Step: 50 / 135 Loss: 3.404083251953125 Tokens per Sec: 17848.733612416392
Epoch Step: 55 / 135 Loss: 5.216862678527832 Tokens per Sec: 21223.050620910548
Epoch Step: 60 / 135 Loss: 6.756726264953613 Tokens per Sec: 19240.073830014568
Epoch Step: 65 / 135 Loss: 10.095711708068848 Tokens per Sec: 16440.10677123432
Epoch Step: 70 / 135 Loss: 5.958129405975342 Tokens per Sec: 18195.361424142317
Epoch Step: 75 / 135 Loss: 28.025623321533203 Tokens per Sec: 18946.200755336667
Epoch Step: 80 / 135 Loss: 3.3436131477355957 Tokens per Sec: 18526.492822277345
Epoch Step: 85 / 135 Loss: 3.1498961448669434 Tokens per Sec: 19234.263487321485
Epoch Step: 90 / 135 Loss: 5.973451137542725 Tokens per Sec: 17601.31568847684
Epoch Step: 95 / 135 Loss: 7.291568756103516 Tokens per Sec: 16659.017727006947
Epoch Step: 100 / 135 Loss: 2.1268961429595947 Tokens per Sec: 20503.043917691488
Epoch Step: 105 / 135 Loss: 8.837796211242676 Tokens per Sec: 14712.592716484025
Epoch Step: 110 / 135 Loss: 7.523719310760498 Tokens per Sec: 18885.69254459512
Epoch Step: 115 / 135 Loss: 6.1090569496154785 Tokens per Sec: 17652.65494231194
Epoch Step: 120 / 135 Loss: 6.544954776763916 Tokens per Sec: 15555.859834050238
Epoch Step: 125 / 135 Loss: 4.667426109313965 Tokens per Sec: 15874.391673115226
Epoch Step: 130 / 135 Loss: 3.4833288192749023 Tokens per Sec: 15626.490405414172
Epoch Step: 135 / 135 Loss: 5.308967113494873 Tokens per Sec: 17475.63500671154
Epoch ended with duration 0:00:14.379488
Train perplexity: 1.2543056793889027
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646649
Validation perplexity: 1.2441015688957542
Model saved best_on_validation!
Epoch 75 / 1000
Epoch Step: 5 / 135 Loss: 1.6805249452590942 Tokens per Sec: 17624.711128178955
Epoch Step: 10 / 135 Loss: 8.972973823547363 Tokens per Sec: 18024.049970352848
Epoch Step: 15 / 135 Loss: 3.612905740737915 Tokens per Sec: 18503.119723760672
Epoch Step: 20 / 135 Loss: 6.8667473793029785 Tokens per Sec: 16856.90717448839
Epoch Step: 25 / 135 Loss: 2.762202501296997 Tokens per Sec: 16463.310043468788
Epoch Step: 30 / 135 Loss: 2.8957228660583496 Tokens per Sec: 17776.798101406104
Epoch Step: 35 / 135 Loss: 3.6888346672058105 Tokens per Sec: 20762.672999713373
Epoch Step: 40 / 135 Loss: 6.0190839767456055 Tokens per Sec: 16816.494878202368
Epoch Step: 45 / 135 Loss: 7.112837791442871 Tokens per Sec: 20568.04722169981
Epoch Step: 50 / 135 Loss: 3.1459500789642334 Tokens per Sec: 20002.02557519015
Epoch Step: 55 / 135 Loss: 5.755821228027344 Tokens per Sec: 17555.205197140633
Epoch Step: 60 / 135 Loss: 2.7702958583831787 Tokens per Sec: 17294.811436508207
Epoch Step: 65 / 135 Loss: 4.789974689483643 Tokens per Sec: 16763.76490202481
Epoch Step: 70 / 135 Loss: 3.9516425132751465 Tokens per Sec: 15942.607450968102
Epoch Step: 75 / 135 Loss: 3.817617416381836 Tokens per Sec: 18039.85399679205
Epoch Step: 80 / 135 Loss: 5.83490514755249 Tokens per Sec: 18892.619496554315
Epoch Step: 85 / 135 Loss: 9.580937385559082 Tokens per Sec: 17388.04589776007
Epoch Step: 90 / 135 Loss: 88.05409240722656 Tokens per Sec: 21059.059044884703
Epoch Step: 95 / 135 Loss: 25.265066146850586 Tokens per Sec: 19544.442696881953
Epoch Step: 100 / 135 Loss: 76.50193786621094 Tokens per Sec: 19343.178225426986
Epoch Step: 105 / 135 Loss: 7.044194221496582 Tokens per Sec: 15688.569389256745
Epoch Step: 110 / 135 Loss: 9.461334228515625 Tokens per Sec: 15136.570567533152
Epoch Step: 115 / 135 Loss: 3.924309492111206 Tokens per Sec: 16643.806328889845
Epoch Step: 120 / 135 Loss: 10.624597549438477 Tokens per Sec: 17477.43905370932
Epoch Step: 125 / 135 Loss: 9.251012802124023 Tokens per Sec: 17610.08246604685
Epoch Step: 130 / 135 Loss: 5.9971208572387695 Tokens per Sec: 16042.068814876626
Epoch Step: 135 / 135 Loss: 50.87248992919922 Tokens per Sec: 17643.31426426769
Epoch ended with duration 0:00:14.289486
Train perplexity: 1.4163339202832632
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.643763
Validation perplexity: 1.3968980619916518
Model saved checkpoint!
Epoch 76 / 1000
Epoch Step: 5 / 135 Loss: 10.376282691955566 Tokens per Sec: 14779.712027409614
Epoch Step: 10 / 135 Loss: 6.082941055297852 Tokens per Sec: 21016.970845414344
Epoch Step: 15 / 135 Loss: 6.483789443969727 Tokens per Sec: 19543.672591088627
Epoch Step: 20 / 135 Loss: 6.684270858764648 Tokens per Sec: 17978.960541097273
Epoch Step: 25 / 135 Loss: 8.787138938903809 Tokens per Sec: 19996.956445802367
Epoch Step: 30 / 135 Loss: 6.294581890106201 Tokens per Sec: 19047.179903717308
Epoch Step: 35 / 135 Loss: 7.254944801330566 Tokens per Sec: 20558.92432443096
Epoch Step: 40 / 135 Loss: 3.166743516921997 Tokens per Sec: 17416.820248155156
Epoch Step: 45 / 135 Loss: 3.627837896347046 Tokens per Sec: 19630.1213576252
Epoch Step: 50 / 135 Loss: 8.426467895507812 Tokens per Sec: 18759.462487613055
Epoch Step: 55 / 135 Loss: 7.937173843383789 Tokens per Sec: 18529.00243643637
Epoch Step: 60 / 135 Loss: 5.036884307861328 Tokens per Sec: 17143.739765373422
Epoch Step: 65 / 135 Loss: 5.230451583862305 Tokens per Sec: 17810.79539539438
Epoch Step: 70 / 135 Loss: 3.5089752674102783 Tokens per Sec: 19516.59799003036
Epoch Step: 75 / 135 Loss: 7.029870510101318 Tokens per Sec: 18142.38722695731
Epoch Step: 80 / 135 Loss: 3.990166187286377 Tokens per Sec: 15893.163351384515
Epoch Step: 85 / 135 Loss: 50.97080612182617 Tokens per Sec: 19926.4797520811
Epoch Step: 90 / 135 Loss: 8.496321678161621 Tokens per Sec: 17315.71234313578
Epoch Step: 95 / 135 Loss: 7.30950403213501 Tokens per Sec: 17779.037781325555
Epoch Step: 100 / 135 Loss: 3.3983404636383057 Tokens per Sec: 18056.385862130617
Epoch Step: 105 / 135 Loss: 3.728747844696045 Tokens per Sec: 15382.937933998284
Epoch Step: 110 / 135 Loss: 10.033696174621582 Tokens per Sec: 17806.12134528632
Epoch Step: 115 / 135 Loss: 5.054403305053711 Tokens per Sec: 16022.3570676613
Epoch Step: 120 / 135 Loss: 20.40026092529297 Tokens per Sec: 16521.141718237457
Epoch Step: 125 / 135 Loss: 2.924298048019409 Tokens per Sec: 15062.703453240927
Epoch Step: 130 / 135 Loss: 4.722107410430908 Tokens per Sec: 17499.310768598094
Epoch Step: 135 / 135 Loss: 5.902649402618408 Tokens per Sec: 16196.399507848377
Epoch ended with duration 0:00:14.251344
Train perplexity: 1.2879387105609599
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652136
Validation perplexity: 1.325206902431841
Epoch 77 / 1000
Epoch Step: 5 / 135 Loss: 6.8213982582092285 Tokens per Sec: 18177.93318385314
Epoch Step: 10 / 135 Loss: 38.76454162597656 Tokens per Sec: 18802.80801280016
Epoch Step: 15 / 135 Loss: 7.57320499420166 Tokens per Sec: 20328.37081191718
Epoch Step: 20 / 135 Loss: 7.76678991317749 Tokens per Sec: 18190.144822251128
Epoch Step: 25 / 135 Loss: 2.977876663208008 Tokens per Sec: 19674.94175567365
Epoch Step: 30 / 135 Loss: 3.789898157119751 Tokens per Sec: 17537.454593589293
Epoch Step: 35 / 135 Loss: 5.887397766113281 Tokens per Sec: 17982.612147553406
Epoch Step: 40 / 135 Loss: 3.4706180095672607 Tokens per Sec: 18151.027971240725
Epoch Step: 45 / 135 Loss: 6.892312049865723 Tokens per Sec: 18455.636353324826
Epoch Step: 50 / 135 Loss: 1.5076664686203003 Tokens per Sec: 20180.161259491204
Epoch Step: 55 / 135 Loss: 6.714034557342529 Tokens per Sec: 18872.99304086658
Epoch Step: 60 / 135 Loss: 6.128957748413086 Tokens per Sec: 17496.481163049822
Epoch Step: 65 / 135 Loss: 8.741462707519531 Tokens per Sec: 18119.98892529718
Epoch Step: 70 / 135 Loss: 3.396850109100342 Tokens per Sec: 18550.62215818939
Epoch Step: 75 / 135 Loss: 2.9409866333007812 Tokens per Sec: 18904.928178885042
Epoch Step: 80 / 135 Loss: 3.5196151733398438 Tokens per Sec: 21347.405504486476
Epoch Step: 85 / 135 Loss: 8.926965713500977 Tokens per Sec: 13883.620209793611
Epoch Step: 90 / 135 Loss: 3.4736454486846924 Tokens per Sec: 19944.867147306933
Epoch Step: 95 / 135 Loss: 5.012571334838867 Tokens per Sec: 17552.782786298692
Epoch Step: 100 / 135 Loss: 6.5844621658325195 Tokens per Sec: 15300.039690890604
Epoch Step: 105 / 135 Loss: 5.040286540985107 Tokens per Sec: 17499.570918519305
Epoch Step: 110 / 135 Loss: 6.813720703125 Tokens per Sec: 16310.828784135605
Epoch Step: 115 / 135 Loss: 6.435226917266846 Tokens per Sec: 16609.295054659735
Epoch Step: 120 / 135 Loss: 6.310909748077393 Tokens per Sec: 17218.192958132895
Epoch Step: 125 / 135 Loss: 5.616124153137207 Tokens per Sec: 16789.10780904746
Epoch Step: 130 / 135 Loss: 14.875821113586426 Tokens per Sec: 16081.603048081974
Epoch Step: 135 / 135 Loss: 4.561145782470703 Tokens per Sec: 14346.488464153812
Epoch ended with duration 0:00:14.249691
Train perplexity: 1.2384111435391447
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.List < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646605
Validation perplexity: 1.3600209134389245
Epoch 78 / 1000
Epoch Step: 5 / 135 Loss: 2.3513526916503906 Tokens per Sec: 18327.213197514848
Epoch Step: 10 / 135 Loss: 4.681931972503662 Tokens per Sec: 20516.08261837815
Epoch Step: 15 / 135 Loss: 8.982686042785645 Tokens per Sec: 19261.05005731882
Epoch Step: 20 / 135 Loss: 3.215139150619507 Tokens per Sec: 17870.53740920587
Epoch Step: 25 / 135 Loss: 6.840413570404053 Tokens per Sec: 18700.65336963529
Epoch Step: 30 / 135 Loss: 2.4765360355377197 Tokens per Sec: 15519.45568850021
Epoch Step: 35 / 135 Loss: 6.965207099914551 Tokens per Sec: 15206.317215170317
Epoch Step: 40 / 135 Loss: 8.144947052001953 Tokens per Sec: 17783.68655829634
Epoch Step: 45 / 135 Loss: 4.942409038543701 Tokens per Sec: 20634.202389800324
Epoch Step: 50 / 135 Loss: 4.620457172393799 Tokens per Sec: 18259.469889429216
Epoch Step: 55 / 135 Loss: 14.206707954406738 Tokens per Sec: 18071.98727732232
Epoch Step: 60 / 135 Loss: 5.040226459503174 Tokens per Sec: 19010.541902947687
Epoch Step: 65 / 135 Loss: 7.659305572509766 Tokens per Sec: 17101.27463633318
Epoch Step: 70 / 135 Loss: 3.3569438457489014 Tokens per Sec: 17470.43414595024
Epoch Step: 75 / 135 Loss: 7.191195487976074 Tokens per Sec: 19369.640329797854
Epoch Step: 80 / 135 Loss: 3.1295254230499268 Tokens per Sec: 20391.42310856848
Epoch Step: 85 / 135 Loss: 3.9049341678619385 Tokens per Sec: 19452.77298441892
Epoch Step: 90 / 135 Loss: 6.010130405426025 Tokens per Sec: 18170.91466365971
Epoch Step: 95 / 135 Loss: 5.241184711456299 Tokens per Sec: 17776.07159419397
Epoch Step: 100 / 135 Loss: 3.93408465385437 Tokens per Sec: 18615.789968835717
Epoch Step: 105 / 135 Loss: 5.826685428619385 Tokens per Sec: 16138.736763962585
Epoch Step: 110 / 135 Loss: 6.5240702629089355 Tokens per Sec: 15930.481811160073
Epoch Step: 115 / 135 Loss: 4.240675449371338 Tokens per Sec: 15573.256976890307
Epoch Step: 120 / 135 Loss: 5.189940452575684 Tokens per Sec: 15903.286183102207
Epoch Step: 125 / 135 Loss: 3.5623908042907715 Tokens per Sec: 16173.240503478135
Epoch Step: 130 / 135 Loss: 5.553427219390869 Tokens per Sec: 17336.690865399178
Epoch Step: 135 / 135 Loss: 4.156162261962891 Tokens per Sec: 17838.139715755857
Epoch ended with duration 0:00:14.260695
Train perplexity: 1.278455462550991
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653096
Validation perplexity: 1.2984779599549459
Epoch 79 / 1000
Epoch Step: 5 / 135 Loss: 6.693503379821777 Tokens per Sec: 18118.292417969435
Epoch Step: 10 / 135 Loss: 10.129528045654297 Tokens per Sec: 17849.692878688445
Epoch Step: 15 / 135 Loss: 3.3566372394561768 Tokens per Sec: 20288.49821380386
Epoch Step: 20 / 135 Loss: 3.3605988025665283 Tokens per Sec: 18678.249115820752
Epoch Step: 25 / 135 Loss: 1.7877719402313232 Tokens per Sec: 14984.56372670775
Epoch Step: 30 / 135 Loss: 4.193970680236816 Tokens per Sec: 18697.069348599394
Epoch Step: 35 / 135 Loss: 3.410367250442505 Tokens per Sec: 19920.950710149853
Epoch Step: 40 / 135 Loss: 10.336673736572266 Tokens per Sec: 18536.078494063135
Epoch Step: 45 / 135 Loss: 1.9733493328094482 Tokens per Sec: 17200.548544019835
Epoch Step: 50 / 135 Loss: 4.585907459259033 Tokens per Sec: 16737.216850592777
Epoch Step: 55 / 135 Loss: 8.860048294067383 Tokens per Sec: 15874.486447853153
Epoch Step: 60 / 135 Loss: 16.498186111450195 Tokens per Sec: 15995.122173229818
Epoch Step: 65 / 135 Loss: 8.879362106323242 Tokens per Sec: 20804.46088298218
Epoch Step: 70 / 135 Loss: 7.319633960723877 Tokens per Sec: 17285.82202162199
Epoch Step: 75 / 135 Loss: 20.287870407104492 Tokens per Sec: 18954.764967039893
Epoch Step: 80 / 135 Loss: 7.209159851074219 Tokens per Sec: 20622.072640865834
Epoch Step: 85 / 135 Loss: 8.46540641784668 Tokens per Sec: 18148.844441624802
Epoch Step: 90 / 135 Loss: 9.826432228088379 Tokens per Sec: 20025.88632039615
Epoch Step: 95 / 135 Loss: 4.932814598083496 Tokens per Sec: 19710.288660910377
Epoch Step: 100 / 135 Loss: 6.022820949554443 Tokens per Sec: 17521.20513547891
Epoch Step: 105 / 135 Loss: 17.88771629333496 Tokens per Sec: 16022.432844981095
Epoch Step: 110 / 135 Loss: 3.8964197635650635 Tokens per Sec: 16602.076956639023
Epoch Step: 115 / 135 Loss: 7.366966247558594 Tokens per Sec: 18229.028129748833
Epoch Step: 120 / 135 Loss: 4.476683616638184 Tokens per Sec: 15635.252584095217
Epoch Step: 125 / 135 Loss: 4.281416893005371 Tokens per Sec: 15465.212466604677
Epoch Step: 130 / 135 Loss: 5.742861747741699 Tokens per Sec: 17662.48604226015
Epoch Step: 135 / 135 Loss: 5.083583354949951 Tokens per Sec: 17300.45609191994
Epoch ended with duration 0:00:14.244120
Train perplexity: 1.356942575513351
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647869
Validation perplexity: 1.4247638525032142
Epoch 80 / 1000
Epoch Step: 5 / 135 Loss: 5.520975589752197 Tokens per Sec: 17226.223767692027
Epoch Step: 10 / 135 Loss: 7.574252128601074 Tokens per Sec: 14935.049196838903
Epoch Step: 15 / 135 Loss: 3.984412431716919 Tokens per Sec: 17246.93214449268
Epoch Step: 20 / 135 Loss: 4.014766693115234 Tokens per Sec: 20047.917997672586
Epoch Step: 25 / 135 Loss: 3.28033185005188 Tokens per Sec: 20249.11925719676
Epoch Step: 30 / 135 Loss: 6.917963981628418 Tokens per Sec: 17007.51750345645
Epoch Step: 35 / 135 Loss: 5.5352067947387695 Tokens per Sec: 15373.909386063906
Epoch Step: 40 / 135 Loss: 2.3506205081939697 Tokens per Sec: 19615.927218101042
Epoch Step: 45 / 135 Loss: 3.684272050857544 Tokens per Sec: 17659.91012395442
Epoch Step: 50 / 135 Loss: 8.527938842773438 Tokens per Sec: 19742.06284445376
Epoch Step: 55 / 135 Loss: 5.247707843780518 Tokens per Sec: 18592.10241045055
Epoch Step: 60 / 135 Loss: 4.683895111083984 Tokens per Sec: 18797.91742558082
Epoch Step: 65 / 135 Loss: 1.8761829137802124 Tokens per Sec: 18382.86483648435
Epoch Step: 70 / 135 Loss: 19.548734664916992 Tokens per Sec: 20284.829434957883
Epoch Step: 75 / 135 Loss: 4.844213962554932 Tokens per Sec: 18717.86298554685
Epoch Step: 80 / 135 Loss: 39.001243591308594 Tokens per Sec: 18928.81566121131
Epoch Step: 85 / 135 Loss: 8.342069625854492 Tokens per Sec: 19454.065627736145
Epoch Step: 90 / 135 Loss: 7.034329891204834 Tokens per Sec: 17083.293711478385
Epoch Step: 95 / 135 Loss: 4.696865081787109 Tokens per Sec: 19619.5870860749
Epoch Step: 100 / 135 Loss: 7.528757095336914 Tokens per Sec: 18292.929428873256
Epoch Step: 105 / 135 Loss: 4.184709548950195 Tokens per Sec: 14874.078281386284
Epoch Step: 110 / 135 Loss: 5.512498378753662 Tokens per Sec: 15663.347420699469
Epoch Step: 115 / 135 Loss: 3.8530075550079346 Tokens per Sec: 17117.203480453474
Epoch Step: 120 / 135 Loss: 3.8248143196105957 Tokens per Sec: 16942.48511393415
Epoch Step: 125 / 135 Loss: 4.525346755981445 Tokens per Sec: 17435.285957545126
Epoch Step: 130 / 135 Loss: 7.799825668334961 Tokens per Sec: 15058.879350937148
Epoch Step: 135 / 135 Loss: 3.9153428077697754 Tokens per Sec: 17503.417996237895
Epoch ended with duration 0:00:14.286983
Train perplexity: 1.2915895233016697
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648905
Validation perplexity: 1.2655452979556312
Model saved checkpoint!
Epoch 81 / 1000
Epoch Step: 5 / 135 Loss: 3.176691770553589 Tokens per Sec: 17115.45726242108
Epoch Step: 10 / 135 Loss: 3.9759678840637207 Tokens per Sec: 16686.31835460281
Epoch Step: 15 / 135 Loss: 24.536605834960938 Tokens per Sec: 20252.97140326679
Epoch Step: 20 / 135 Loss: 15.807148933410645 Tokens per Sec: 16499.651039535747
Epoch Step: 25 / 135 Loss: 6.558660984039307 Tokens per Sec: 17936.07955473998
Epoch Step: 30 / 135 Loss: 8.053925514221191 Tokens per Sec: 15811.256537535064
Epoch Step: 35 / 135 Loss: 6.049698829650879 Tokens per Sec: 19930.055001824887
Epoch Step: 40 / 135 Loss: 5.004556655883789 Tokens per Sec: 16256.640571009793
Epoch Step: 45 / 135 Loss: 3.0392112731933594 Tokens per Sec: 18201.331486434952
Epoch Step: 50 / 135 Loss: 8.540738105773926 Tokens per Sec: 19412.007665327917
Epoch Step: 55 / 135 Loss: 2.6422972679138184 Tokens per Sec: 18256.10143208191
Epoch Step: 60 / 135 Loss: 3.8705077171325684 Tokens per Sec: 17417.413519480808
Epoch Step: 65 / 135 Loss: 6.08941650390625 Tokens per Sec: 18605.32841706274
Epoch Step: 70 / 135 Loss: 4.40408182144165 Tokens per Sec: 20897.732183767923
Epoch Step: 75 / 135 Loss: 4.358012676239014 Tokens per Sec: 19666.477084550454
Epoch Step: 80 / 135 Loss: 6.643585681915283 Tokens per Sec: 16306.30523083206
Epoch Step: 85 / 135 Loss: 7.119606971740723 Tokens per Sec: 19232.16095002202
Epoch Step: 90 / 135 Loss: 4.537878036499023 Tokens per Sec: 19736.444792460818
Epoch Step: 95 / 135 Loss: 12.263752937316895 Tokens per Sec: 17845.93282958544
Epoch Step: 100 / 135 Loss: 8.371821403503418 Tokens per Sec: 19525.049793315044
Epoch Step: 105 / 135 Loss: 6.296832084655762 Tokens per Sec: 17604.447493586813
Epoch Step: 110 / 135 Loss: 7.380150318145752 Tokens per Sec: 16765.843782570293
Epoch Step: 115 / 135 Loss: 5.076877593994141 Tokens per Sec: 16090.655527055991
Epoch Step: 120 / 135 Loss: 2.568361759185791 Tokens per Sec: 15947.538191972013
Epoch Step: 125 / 135 Loss: 4.977936267852783 Tokens per Sec: 18194.36230866158
Epoch Step: 130 / 135 Loss: 5.026394367218018 Tokens per Sec: 17067.428915277644
Epoch Step: 135 / 135 Loss: 24.024572372436523 Tokens per Sec: 14382.19434637316
Epoch ended with duration 0:00:14.263774
Train perplexity: 1.2865728132053162
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650129
Validation perplexity: 1.3246319369456105
Epoch 82 / 1000
Epoch Step: 5 / 135 Loss: 5.704196929931641 Tokens per Sec: 19349.157227604337
Epoch Step: 10 / 135 Loss: 3.9424333572387695 Tokens per Sec: 18800.932350170486
Epoch Step: 15 / 135 Loss: 7.978956699371338 Tokens per Sec: 17388.078937275084
Epoch Step: 20 / 135 Loss: 4.128661632537842 Tokens per Sec: 18010.218158049465
Epoch Step: 25 / 135 Loss: 7.773933410644531 Tokens per Sec: 17036.47599430505
Epoch Step: 30 / 135 Loss: 4.6821794509887695 Tokens per Sec: 17975.63400763919
Epoch Step: 35 / 135 Loss: 3.5298900604248047 Tokens per Sec: 19505.059535871205
Epoch Step: 40 / 135 Loss: 3.378268003463745 Tokens per Sec: 18523.866981600317
Epoch Step: 45 / 135 Loss: 7.380136966705322 Tokens per Sec: 15682.5291459092
Epoch Step: 50 / 135 Loss: 22.194286346435547 Tokens per Sec: 18966.34365821802
Epoch Step: 55 / 135 Loss: 8.827569961547852 Tokens per Sec: 22017.08884831061
Epoch Step: 60 / 135 Loss: 2.58231258392334 Tokens per Sec: 18260.438666722985
Epoch Step: 65 / 135 Loss: 5.178852558135986 Tokens per Sec: 17667.761776715084
Epoch Step: 70 / 135 Loss: 1.9869248867034912 Tokens per Sec: 14903.723057237068
Epoch Step: 75 / 135 Loss: 33.25116729736328 Tokens per Sec: 20279.255678585057
Epoch Step: 80 / 135 Loss: 7.245388984680176 Tokens per Sec: 19207.545262651154
Epoch Step: 85 / 135 Loss: 3.769352912902832 Tokens per Sec: 15836.788278869637
Epoch Step: 90 / 135 Loss: 4.046525955200195 Tokens per Sec: 18276.589987721338
Epoch Step: 95 / 135 Loss: 7.928598880767822 Tokens per Sec: 20366.871275286892
Epoch Step: 100 / 135 Loss: 4.811761856079102 Tokens per Sec: 16914.845698236943
Epoch Step: 105 / 135 Loss: 4.681260108947754 Tokens per Sec: 16691.377709978617
Epoch Step: 110 / 135 Loss: 6.886169910430908 Tokens per Sec: 16190.80293919462
Epoch Step: 115 / 135 Loss: 4.498778343200684 Tokens per Sec: 15933.603597211448
Epoch Step: 120 / 135 Loss: 5.0669145584106445 Tokens per Sec: 17242.876296164883
Epoch Step: 125 / 135 Loss: 5.371107578277588 Tokens per Sec: 15699.39144511348
Epoch Step: 130 / 135 Loss: 5.557168960571289 Tokens per Sec: 16506.83261799171
Epoch Step: 135 / 135 Loss: 2.9898557662963867 Tokens per Sec: 18205.579111392413
Epoch ended with duration 0:00:14.267656
Train perplexity: 1.2588582408096174
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646056
Validation perplexity: 1.2258771344095465
Model saved best_on_validation!
Epoch 83 / 1000
Epoch Step: 5 / 135 Loss: 9.160846710205078 Tokens per Sec: 17844.47511058664
Epoch Step: 10 / 135 Loss: 7.1130452156066895 Tokens per Sec: 18424.587367686898
Epoch Step: 15 / 135 Loss: 4.336738586425781 Tokens per Sec: 16529.980881085576
Epoch Step: 20 / 135 Loss: 5.637717247009277 Tokens per Sec: 19674.701814741144
Epoch Step: 25 / 135 Loss: 4.101872444152832 Tokens per Sec: 18089.781134719167
Epoch Step: 30 / 135 Loss: 2.6028897762298584 Tokens per Sec: 19243.3845982112
Epoch Step: 35 / 135 Loss: 6.637828826904297 Tokens per Sec: 18625.310053011293
Epoch Step: 40 / 135 Loss: 6.920716762542725 Tokens per Sec: 18502.33143499319
Epoch Step: 45 / 135 Loss: 7.91227388381958 Tokens per Sec: 19488.92275128184
Epoch Step: 50 / 135 Loss: 5.680050849914551 Tokens per Sec: 20870.337744677978
Epoch Step: 55 / 135 Loss: 6.690917015075684 Tokens per Sec: 16477.45884073148
Epoch Step: 60 / 135 Loss: 5.066019058227539 Tokens per Sec: 18237.98181961326
Epoch Step: 65 / 135 Loss: 5.904018878936768 Tokens per Sec: 19431.039755122252
Epoch Step: 70 / 135 Loss: 2.52864146232605 Tokens per Sec: 17659.713655997937
Epoch Step: 75 / 135 Loss: 8.394072532653809 Tokens per Sec: 19335.174188296605
Epoch Step: 80 / 135 Loss: 4.1487555503845215 Tokens per Sec: 17796.761400970485
Epoch Step: 85 / 135 Loss: 4.206344127655029 Tokens per Sec: 17278.28974262699
Epoch Step: 90 / 135 Loss: 6.800658702850342 Tokens per Sec: 18706.75510791283
Epoch Step: 95 / 135 Loss: 7.171250820159912 Tokens per Sec: 18353.208981741976
Epoch Step: 100 / 135 Loss: 43.684879302978516 Tokens per Sec: 16615.113604283724
Epoch Step: 105 / 135 Loss: 20.827190399169922 Tokens per Sec: 15117.10133226114
Epoch Step: 110 / 135 Loss: 6.332291603088379 Tokens per Sec: 15719.115339876884
Epoch Step: 115 / 135 Loss: 2.5017919540405273 Tokens per Sec: 17133.90682189531
Epoch Step: 120 / 135 Loss: 6.199556827545166 Tokens per Sec: 16305.670593894427
Epoch Step: 125 / 135 Loss: 6.663208484649658 Tokens per Sec: 16755.00786151582
Epoch Step: 130 / 135 Loss: 6.06252384185791 Tokens per Sec: 18255.44073744321
Epoch Step: 135 / 135 Loss: 5.54783821105957 Tokens per Sec: 17700.370683775316
Epoch ended with duration 0:00:14.206852
Train perplexity: 1.2492482202971482
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648613
Validation perplexity: 1.2880433136191742
Epoch 84 / 1000
Epoch Step: 5 / 135 Loss: 8.466793060302734 Tokens per Sec: 16575.310877372034
Epoch Step: 10 / 135 Loss: 3.9853267669677734 Tokens per Sec: 15834.485269053795
Epoch Step: 15 / 135 Loss: 4.635951042175293 Tokens per Sec: 17341.10196546266
Epoch Step: 20 / 135 Loss: 2.225965976715088 Tokens per Sec: 19392.868209630316
Epoch Step: 25 / 135 Loss: 2.8267898559570312 Tokens per Sec: 18219.336714497134
Epoch Step: 30 / 135 Loss: 5.529987812042236 Tokens per Sec: 19127.989153215745
Epoch Step: 35 / 135 Loss: 3.486320972442627 Tokens per Sec: 19790.95544028923
Epoch Step: 40 / 135 Loss: 3.9314661026000977 Tokens per Sec: 16538.89647964274
Epoch Step: 45 / 135 Loss: 2.5117480754852295 Tokens per Sec: 20058.669614037364
Epoch Step: 50 / 135 Loss: 4.437929153442383 Tokens per Sec: 20891.895466111484
Epoch Step: 55 / 135 Loss: 6.680690765380859 Tokens per Sec: 18287.838916261266
Epoch Step: 60 / 135 Loss: 3.275428295135498 Tokens per Sec: 19252.236379431513
Epoch Step: 65 / 135 Loss: 5.954046249389648 Tokens per Sec: 21091.710601559153
Epoch Step: 70 / 135 Loss: 5.305293083190918 Tokens per Sec: 17688.426442733045
Epoch Step: 75 / 135 Loss: 4.562151908874512 Tokens per Sec: 19549.20207753056
Epoch Step: 80 / 135 Loss: 5.172711372375488 Tokens per Sec: 18719.104481109123
Epoch Step: 85 / 135 Loss: 10.481101989746094 Tokens per Sec: 17797.3159643575
Epoch Step: 90 / 135 Loss: 2.986550807952881 Tokens per Sec: 16967.63659899813
Epoch Step: 95 / 135 Loss: 22.542524337768555 Tokens per Sec: 17180.836676640723
Epoch Step: 100 / 135 Loss: 3.7195863723754883 Tokens per Sec: 17785.922057487183
Epoch Step: 105 / 135 Loss: 3.748715877532959 Tokens per Sec: 14994.082249188728
Epoch Step: 110 / 135 Loss: 8.159174919128418 Tokens per Sec: 17512.853104726408
Epoch Step: 115 / 135 Loss: 36.1585807800293 Tokens per Sec: 17491.595502750977
Epoch Step: 120 / 135 Loss: 7.053363800048828 Tokens per Sec: 16818.193429957162
Epoch Step: 125 / 135 Loss: 5.560861587524414 Tokens per Sec: 17007.22974484376
Epoch Step: 130 / 135 Loss: 8.25720500946045 Tokens per Sec: 15394.96379439814
Epoch Step: 135 / 135 Loss: 4.008385181427002 Tokens per Sec: 16463.49089057279
Epoch ended with duration 0:00:14.220213
Train perplexity: 1.3643376424552167
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646956
Validation perplexity: 1.2667572456075746
Epoch 85 / 1000
Epoch Step: 5 / 135 Loss: 3.2886950969696045 Tokens per Sec: 18817.053671386235
Epoch Step: 10 / 135 Loss: 2.966902732849121 Tokens per Sec: 17900.640224795734
Epoch Step: 15 / 135 Loss: 9.616610527038574 Tokens per Sec: 16890.610754037192
Epoch Step: 20 / 135 Loss: 6.511960029602051 Tokens per Sec: 17863.48431899745
Epoch Step: 25 / 135 Loss: 5.636210918426514 Tokens per Sec: 19324.01790027769
Epoch Step: 30 / 135 Loss: 3.478851795196533 Tokens per Sec: 20275.38187714562
Epoch Step: 35 / 135 Loss: 1.627367377281189 Tokens per Sec: 19756.513462006693
Epoch Step: 40 / 135 Loss: 2.961743116378784 Tokens per Sec: 20681.116705756347
Epoch Step: 45 / 135 Loss: 1.6624470949172974 Tokens per Sec: 19315.42032066956
Epoch Step: 50 / 135 Loss: 1.3468819856643677 Tokens per Sec: 20260.11619012844
Epoch Step: 55 / 135 Loss: 3.2609193325042725 Tokens per Sec: 15988.946493379886
Epoch Step: 60 / 135 Loss: 8.488197326660156 Tokens per Sec: 16985.03017517586
Epoch Step: 65 / 135 Loss: 7.748199462890625 Tokens per Sec: 18438.000762391257
Epoch Step: 70 / 135 Loss: 8.067890167236328 Tokens per Sec: 16502.968199299336
Epoch Step: 75 / 135 Loss: 11.554643630981445 Tokens per Sec: 17410.11747549059
Epoch Step: 80 / 135 Loss: 3.810288667678833 Tokens per Sec: 19822.83459399817
Epoch Step: 85 / 135 Loss: 12.672979354858398 Tokens per Sec: 17016.483664265048
Epoch Step: 90 / 135 Loss: 3.5790016651153564 Tokens per Sec: 16566.775754780458
Epoch Step: 95 / 135 Loss: 6.226728916168213 Tokens per Sec: 17455.41574898758
Epoch Step: 100 / 135 Loss: 8.843605995178223 Tokens per Sec: 19901.146390342987
Epoch Step: 105 / 135 Loss: 3.4729723930358887 Tokens per Sec: 17003.845616441755
Epoch Step: 110 / 135 Loss: 3.3666763305664062 Tokens per Sec: 15524.670714622458
Epoch Step: 115 / 135 Loss: 4.450802326202393 Tokens per Sec: 16991.46989021657
Epoch Step: 120 / 135 Loss: 3.221280336380005 Tokens per Sec: 17272.62319170255
Epoch Step: 125 / 135 Loss: 2.8944993019104004 Tokens per Sec: 15369.688453235178
Epoch Step: 130 / 135 Loss: 5.6600542068481445 Tokens per Sec: 16625.927589551502
Epoch Step: 135 / 135 Loss: 5.051428318023682 Tokens per Sec: 15670.576910832979
Epoch ended with duration 0:00:14.273121
Train perplexity: 1.220257081316301
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650301
Validation perplexity: 1.2895411090235764
Model saved checkpoint!
Epoch 86 / 1000
Epoch Step: 5 / 135 Loss: 6.184502601623535 Tokens per Sec: 17348.1499124946
Epoch Step: 10 / 135 Loss: 5.469732284545898 Tokens per Sec: 20220.332858928457
Epoch Step: 15 / 135 Loss: 7.60591459274292 Tokens per Sec: 18862.347911291807
Epoch Step: 20 / 135 Loss: 2.5595529079437256 Tokens per Sec: 14317.154055189909
Epoch Step: 25 / 135 Loss: 3.6718015670776367 Tokens per Sec: 18348.154585104523
Epoch Step: 30 / 135 Loss: 2.13081955909729 Tokens per Sec: 18004.60956776567
Epoch Step: 35 / 135 Loss: 5.204086780548096 Tokens per Sec: 15128.32154490994
Epoch Step: 40 / 135 Loss: 2.97564959526062 Tokens per Sec: 17022.02717738258
Epoch Step: 45 / 135 Loss: 6.319047927856445 Tokens per Sec: 19525.593208950362
Epoch Step: 50 / 135 Loss: 5.807482719421387 Tokens per Sec: 18564.137932578717
Epoch Step: 55 / 135 Loss: 5.167205810546875 Tokens per Sec: 19955.308078754864
Epoch Step: 60 / 135 Loss: 6.12032413482666 Tokens per Sec: 17571.23757743561
Epoch Step: 65 / 135 Loss: 1.7722488641738892 Tokens per Sec: 17959.581281157152
Epoch Step: 70 / 135 Loss: 9.643054008483887 Tokens per Sec: 17216.908870838353
Epoch Step: 75 / 135 Loss: 3.074974775314331 Tokens per Sec: 15224.927681744173
Epoch Step: 80 / 135 Loss: 5.6523566246032715 Tokens per Sec: 17854.916571717178
Epoch Step: 85 / 135 Loss: 6.370769023895264 Tokens per Sec: 14747.347214549814
Epoch Step: 90 / 135 Loss: 2.68165922164917 Tokens per Sec: 16042.320595352978
Epoch Step: 95 / 135 Loss: 2.647489547729492 Tokens per Sec: 13644.905243654926
Epoch Step: 100 / 135 Loss: 4.972366809844971 Tokens per Sec: 16408.21024217585
Epoch Step: 105 / 135 Loss: 4.361282825469971 Tokens per Sec: 16714.269481291914
Epoch Step: 110 / 135 Loss: 4.370729446411133 Tokens per Sec: 15946.826274841987
Epoch Step: 115 / 135 Loss: 3.559624195098877 Tokens per Sec: 15938.0113723777
Epoch Step: 120 / 135 Loss: 6.835229396820068 Tokens per Sec: 16468.106440959393
Epoch Step: 125 / 135 Loss: 4.929166316986084 Tokens per Sec: 14792.256290188192
Epoch Step: 130 / 135 Loss: 4.8017988204956055 Tokens per Sec: 16806.457729143083
Epoch Step: 135 / 135 Loss: 2.7277045249938965 Tokens per Sec: 14596.909840350505
Epoch ended with duration 0:00:15.097094
Train perplexity: 1.2113320493462065
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.726307
Validation perplexity: 1.3368419138718401
Epoch 87 / 1000
Epoch Step: 5 / 135 Loss: 4.678155422210693 Tokens per Sec: 15101.107213465619
Epoch Step: 10 / 135 Loss: 5.496768474578857 Tokens per Sec: 15421.212805071315
Epoch Step: 15 / 135 Loss: 2.626938581466675 Tokens per Sec: 17208.043080210064
Epoch Step: 20 / 135 Loss: 2.053818702697754 Tokens per Sec: 17217.88862265842
Epoch Step: 25 / 135 Loss: 3.572105646133423 Tokens per Sec: 19188.281158832266
Epoch Step: 30 / 135 Loss: 4.213320255279541 Tokens per Sec: 18948.35704339595
Epoch Step: 35 / 135 Loss: 4.215507507324219 Tokens per Sec: 19858.736959564216
Epoch Step: 40 / 135 Loss: 2.0265872478485107 Tokens per Sec: 19186.84983750223
Epoch Step: 45 / 135 Loss: 8.839115142822266 Tokens per Sec: 17536.629197060334
Epoch Step: 50 / 135 Loss: 3.325284719467163 Tokens per Sec: 16332.047732376766
Epoch Step: 55 / 135 Loss: 2.619629144668579 Tokens per Sec: 20509.916097135512
Epoch Step: 60 / 135 Loss: 24.257381439208984 Tokens per Sec: 16627.26187645592
Epoch Step: 65 / 135 Loss: 8.719915390014648 Tokens per Sec: 15284.94148462572
Epoch Step: 70 / 135 Loss: 4.98242712020874 Tokens per Sec: 16389.801033125193
Epoch Step: 75 / 135 Loss: 2.694112777709961 Tokens per Sec: 14812.677276543358
Epoch Step: 80 / 135 Loss: 2.9685311317443848 Tokens per Sec: 15600.419524051162
Epoch Step: 85 / 135 Loss: 3.248415946960449 Tokens per Sec: 17582.189002456304
Epoch Step: 90 / 135 Loss: 4.065277576446533 Tokens per Sec: 16492.035779902104
Epoch Step: 95 / 135 Loss: 3.193779230117798 Tokens per Sec: 17318.966424245333
Epoch Step: 100 / 135 Loss: 8.1195650100708 Tokens per Sec: 17358.560085894103
Epoch Step: 105 / 135 Loss: 4.84169864654541 Tokens per Sec: 15647.203296691527
Epoch Step: 110 / 135 Loss: 3.7621243000030518 Tokens per Sec: 17464.182391433464
Epoch Step: 115 / 135 Loss: 4.145478248596191 Tokens per Sec: 16792.501177675527
Epoch Step: 120 / 135 Loss: 3.7547755241394043 Tokens per Sec: 14681.737112490111
Epoch Step: 125 / 135 Loss: 5.4728102684021 Tokens per Sec: 15149.339111002373
Epoch Step: 130 / 135 Loss: 5.767739295959473 Tokens per Sec: 15298.540890306787
Epoch Step: 135 / 135 Loss: 3.303023099899292 Tokens per Sec: 15691.608221465392
Epoch ended with duration 0:00:15.106674
Train perplexity: 1.2413525707211612
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.721030
Validation perplexity: 1.296385825469107
Epoch 88 / 1000
Epoch Step: 5 / 135 Loss: 10.180803298950195 Tokens per Sec: 15590.273877529591
Epoch Step: 10 / 135 Loss: 7.647350788116455 Tokens per Sec: 17054.019769462317
Epoch Step: 15 / 135 Loss: 6.8685197830200195 Tokens per Sec: 15854.912111500167
Epoch Step: 20 / 135 Loss: 2.1666839122772217 Tokens per Sec: 15940.37274832118
Epoch Step: 25 / 135 Loss: 2.561917304992676 Tokens per Sec: 19812.188039944274
Epoch Step: 30 / 135 Loss: 7.156021595001221 Tokens per Sec: 17292.732391375514
Epoch Step: 35 / 135 Loss: 3.005531072616577 Tokens per Sec: 18683.00602253231
Epoch Step: 40 / 135 Loss: 2.329404354095459 Tokens per Sec: 18874.339399807708
Epoch Step: 45 / 135 Loss: 1.7649874687194824 Tokens per Sec: 19747.124591995558
Epoch Step: 50 / 135 Loss: 7.8488264083862305 Tokens per Sec: 16708.396761867865
Epoch Step: 55 / 135 Loss: 2.872154474258423 Tokens per Sec: 19377.916134406667
Epoch Step: 60 / 135 Loss: 4.702945709228516 Tokens per Sec: 17674.59274391285
Epoch Step: 65 / 135 Loss: 7.116785049438477 Tokens per Sec: 17862.947714709215
Epoch Step: 70 / 135 Loss: 7.478194236755371 Tokens per Sec: 17853.30447769823
Epoch Step: 75 / 135 Loss: 7.130157470703125 Tokens per Sec: 18295.992253374934
Epoch Step: 80 / 135 Loss: 4.824889183044434 Tokens per Sec: 18925.46326867948
Epoch Step: 85 / 135 Loss: 5.0355424880981445 Tokens per Sec: 16679.202699361118
Epoch Step: 90 / 135 Loss: 5.244950771331787 Tokens per Sec: 14519.431957151424
Epoch Step: 95 / 135 Loss: 6.393405914306641 Tokens per Sec: 16588.455059367112
Epoch Step: 100 / 135 Loss: 3.9850094318389893 Tokens per Sec: 15725.731879815692
Epoch Step: 105 / 135 Loss: 29.682607650756836 Tokens per Sec: 14768.21934495304
Epoch Step: 110 / 135 Loss: 10.79123592376709 Tokens per Sec: 16609.315319232835
Epoch Step: 115 / 135 Loss: 104.35649871826172 Tokens per Sec: 14586.28329237908
Epoch Step: 120 / 135 Loss: 9.695685386657715 Tokens per Sec: 17071.507400726612
Epoch Step: 125 / 135 Loss: 23.993310928344727 Tokens per Sec: 14413.522154321205
Epoch Step: 130 / 135 Loss: 18.66341781616211 Tokens per Sec: 14571.971815273497
Epoch Step: 135 / 135 Loss: 3.9377758502960205 Tokens per Sec: 15400.23333250513
Epoch ended with duration 0:00:15.073715
Train perplexity: 1.333227133743591
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.725492
Validation perplexity: 1.2979488913837631
Epoch 89 / 1000
Epoch Step: 5 / 135 Loss: 7.273471355438232 Tokens per Sec: 17749.118212418536
Epoch Step: 10 / 135 Loss: 3.097003936767578 Tokens per Sec: 17273.36163761479
Epoch Step: 15 / 135 Loss: 7.084112167358398 Tokens per Sec: 17417.319629789567
Epoch Step: 20 / 135 Loss: 7.203627109527588 Tokens per Sec: 16480.067594397846
Epoch Step: 25 / 135 Loss: 4.495227813720703 Tokens per Sec: 18734.11601590376
Epoch Step: 30 / 135 Loss: 5.9298624992370605 Tokens per Sec: 17270.200016077535
Epoch Step: 35 / 135 Loss: 5.8368611335754395 Tokens per Sec: 17124.214212424587
Epoch Step: 40 / 135 Loss: 8.596044540405273 Tokens per Sec: 16232.67726540626
Epoch Step: 45 / 135 Loss: 3.9486806392669678 Tokens per Sec: 18656.950810776434
Epoch Step: 50 / 135 Loss: 1.9395416975021362 Tokens per Sec: 17467.10242270713
Epoch Step: 55 / 135 Loss: 2.2196943759918213 Tokens per Sec: 19534.55271848087
Epoch Step: 60 / 135 Loss: 9.390615463256836 Tokens per Sec: 17889.60366850576
Epoch Step: 65 / 135 Loss: 6.68263578414917 Tokens per Sec: 15309.05438510214
Epoch Step: 70 / 135 Loss: 5.870370388031006 Tokens per Sec: 17891.5382970209
Epoch Step: 75 / 135 Loss: 4.775025367736816 Tokens per Sec: 14016.353921513472
Epoch Step: 80 / 135 Loss: 5.79332971572876 Tokens per Sec: 17734.647006615003
Epoch Step: 85 / 135 Loss: 5.726628303527832 Tokens per Sec: 15938.171481556275
Epoch Step: 90 / 135 Loss: 6.008221626281738 Tokens per Sec: 16622.15873467549
Epoch Step: 95 / 135 Loss: 8.555432319641113 Tokens per Sec: 18881.865644548405
Epoch Step: 100 / 135 Loss: 6.364696979522705 Tokens per Sec: 16578.00154997113
Epoch Step: 105 / 135 Loss: 4.358068943023682 Tokens per Sec: 12521.524716601783
Epoch Step: 110 / 135 Loss: 2.84036922454834 Tokens per Sec: 15751.939066131452
Epoch Step: 115 / 135 Loss: 3.7328224182128906 Tokens per Sec: 15761.01427440494
Epoch Step: 120 / 135 Loss: 5.193199157714844 Tokens per Sec: 17719.177966343617
Epoch Step: 125 / 135 Loss: 23.59356689453125 Tokens per Sec: 14490.701690343682
Epoch Step: 130 / 135 Loss: 5.34153938293457 Tokens per Sec: 16737.551212103586
Epoch Step: 135 / 135 Loss: 3.903780698776245 Tokens per Sec: 16957.490453705606
Epoch ended with duration 0:00:15.143155
Train perplexity: 1.2196054783764019
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.725094
Validation perplexity: 1.2856442968145898
Epoch 90 / 1000
Epoch Step: 5 / 135 Loss: 5.662409782409668 Tokens per Sec: 18615.018255495866
Epoch Step: 10 / 135 Loss: 3.171511173248291 Tokens per Sec: 14982.582458561317
Epoch Step: 15 / 135 Loss: 4.78399658203125 Tokens per Sec: 19310.286751665
Epoch Step: 20 / 135 Loss: 3.3831517696380615 Tokens per Sec: 15913.233880826063
Epoch Step: 25 / 135 Loss: 22.9488582611084 Tokens per Sec: 19187.096185273957
Epoch Step: 30 / 135 Loss: 3.5900990962982178 Tokens per Sec: 19979.277939888914
Epoch Step: 35 / 135 Loss: 7.205451488494873 Tokens per Sec: 15404.32924087619
Epoch Step: 40 / 135 Loss: 1.1455620527267456 Tokens per Sec: 18559.94676909846
Epoch Step: 45 / 135 Loss: 3.1668660640716553 Tokens per Sec: 18649.138856845093
Epoch Step: 50 / 135 Loss: 5.123691558837891 Tokens per Sec: 18207.914995807656
Epoch Step: 55 / 135 Loss: 5.967283248901367 Tokens per Sec: 18373.44254994296
Epoch Step: 60 / 135 Loss: 5.661446571350098 Tokens per Sec: 16576.59018096926
Epoch Step: 65 / 135 Loss: 5.292697906494141 Tokens per Sec: 19442.608583844525
Epoch Step: 70 / 135 Loss: 42.27890396118164 Tokens per Sec: 15795.936205001923
Epoch Step: 75 / 135 Loss: 5.84176778793335 Tokens per Sec: 16664.433212969045
Epoch Step: 80 / 135 Loss: 27.22454833984375 Tokens per Sec: 17728.428139854826
Epoch Step: 85 / 135 Loss: 4.758492946624756 Tokens per Sec: 18112.724189984554
Epoch Step: 90 / 135 Loss: 6.443465709686279 Tokens per Sec: 14398.375685539297
Epoch Step: 95 / 135 Loss: 36.26846694946289 Tokens per Sec: 16232.8183462216
Epoch Step: 100 / 135 Loss: 3.142071008682251 Tokens per Sec: 15541.651684926186
Epoch Step: 105 / 135 Loss: 19.330781936645508 Tokens per Sec: 15758.966500527891
Epoch Step: 110 / 135 Loss: 10.337830543518066 Tokens per Sec: 14075.323972241655
Epoch Step: 115 / 135 Loss: 7.833390712738037 Tokens per Sec: 16689.498291331234
Epoch Step: 120 / 135 Loss: 112.96636199951172 Tokens per Sec: 15861.130025772723
Epoch Step: 125 / 135 Loss: 59.76826477050781 Tokens per Sec: 15653.09593421596
Epoch Step: 130 / 135 Loss: 25.328710556030273 Tokens per Sec: 14249.881658834924
Epoch Step: 135 / 135 Loss: 13.943032264709473 Tokens per Sec: 16373.289853160557
Epoch ended with duration 0:00:15.093079
Train perplexity: 1.5438761683247135
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.723687
Validation perplexity: 2.0559094080356415
Model saved checkpoint!
Epoch 91 / 1000
Epoch Step: 5 / 135 Loss: 10.662230491638184 Tokens per Sec: 17709.086471962408
Epoch Step: 10 / 135 Loss: 7.308403015136719 Tokens per Sec: 13208.824970979356
Epoch Step: 15 / 135 Loss: 11.542728424072266 Tokens per Sec: 18823.38273622825
Epoch Step: 20 / 135 Loss: 3.756800413131714 Tokens per Sec: 17112.464984357768
Epoch Step: 25 / 135 Loss: 7.750135898590088 Tokens per Sec: 14602.690563812952
Epoch Step: 30 / 135 Loss: 6.888267993927002 Tokens per Sec: 16922.975019552996
Epoch Step: 35 / 135 Loss: 3.7928805351257324 Tokens per Sec: 17191.24052276403
Epoch Step: 40 / 135 Loss: 8.42513656616211 Tokens per Sec: 13979.830002567523
Epoch Step: 45 / 135 Loss: 10.161094665527344 Tokens per Sec: 17311.834864402917
Epoch Step: 50 / 135 Loss: 3.4010121822357178 Tokens per Sec: 19698.473555440567
Epoch Step: 55 / 135 Loss: 9.182960510253906 Tokens per Sec: 18048.56198982739
Epoch Step: 60 / 135 Loss: 4.51484489440918 Tokens per Sec: 19037.49626309724
Epoch Step: 65 / 135 Loss: 7.699192047119141 Tokens per Sec: 15605.982317050346
Epoch Step: 70 / 135 Loss: 2.6166296005249023 Tokens per Sec: 18099.701487878297
Epoch Step: 75 / 135 Loss: 6.506203651428223 Tokens per Sec: 16723.183359125465
Epoch Step: 80 / 135 Loss: 6.235122203826904 Tokens per Sec: 18322.371183334908
Epoch Step: 85 / 135 Loss: 7.266252040863037 Tokens per Sec: 17218.15011994098
Epoch Step: 90 / 135 Loss: 2.587406873703003 Tokens per Sec: 19488.014861752865
Epoch Step: 95 / 135 Loss: 3.5463244915008545 Tokens per Sec: 18840.771200280415
Epoch Step: 100 / 135 Loss: 6.718809604644775 Tokens per Sec: 16009.894371738017
Epoch Step: 105 / 135 Loss: 3.246025562286377 Tokens per Sec: 14274.2527987292
Epoch Step: 110 / 135 Loss: 5.844624042510986 Tokens per Sec: 14315.877993923372
Epoch Step: 115 / 135 Loss: 4.8422675132751465 Tokens per Sec: 17405.757233429395
Epoch Step: 120 / 135 Loss: 7.01961088180542 Tokens per Sec: 17174.616648377258
Epoch Step: 125 / 135 Loss: 4.499213218688965 Tokens per Sec: 14887.1149862115
Epoch Step: 130 / 135 Loss: 5.444452285766602 Tokens per Sec: 16149.22303091078
Epoch Step: 135 / 135 Loss: 28.9320125579834 Tokens per Sec: 16105.120719179782
Epoch ended with duration 0:00:15.124580
Train perplexity: 1.3027365387589391
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.719818
Validation perplexity: 1.2495122863034167
Epoch 92 / 1000
Epoch Step: 5 / 135 Loss: 1.581479549407959 Tokens per Sec: 15331.768108539
Epoch Step: 10 / 135 Loss: 6.03137731552124 Tokens per Sec: 16476.65695419851
Epoch Step: 15 / 135 Loss: 3.8320257663726807 Tokens per Sec: 18706.83724318811
Epoch Step: 20 / 135 Loss: 4.069684982299805 Tokens per Sec: 16595.625486587793
Epoch Step: 25 / 135 Loss: 5.016284942626953 Tokens per Sec: 19376.744156567824
Epoch Step: 30 / 135 Loss: 8.692400932312012 Tokens per Sec: 16531.175317060195
Epoch Step: 35 / 135 Loss: 7.184925556182861 Tokens per Sec: 18667.643566839055
Epoch Step: 40 / 135 Loss: 6.709710121154785 Tokens per Sec: 17519.178511219532
Epoch Step: 45 / 135 Loss: 7.0122551918029785 Tokens per Sec: 18393.50677807636
Epoch Step: 50 / 135 Loss: 3.1518030166625977 Tokens per Sec: 18032.01893321393
Epoch Step: 55 / 135 Loss: 5.343149185180664 Tokens per Sec: 19512.162879046384
Epoch Step: 60 / 135 Loss: 1.997118353843689 Tokens per Sec: 18734.158090857203
Epoch Step: 65 / 135 Loss: 3.3302483558654785 Tokens per Sec: 17781.200057835198
Epoch Step: 70 / 135 Loss: 1.5850266218185425 Tokens per Sec: 17534.47355325851
Epoch Step: 75 / 135 Loss: 32.956336975097656 Tokens per Sec: 16901.80721125576
Epoch Step: 80 / 135 Loss: 3.6232621669769287 Tokens per Sec: 15943.375536248472
Epoch Step: 85 / 135 Loss: 19.41166114807129 Tokens per Sec: 15928.682898181658
Epoch Step: 90 / 135 Loss: 6.489241600036621 Tokens per Sec: 16477.35147219316
Epoch Step: 95 / 135 Loss: 3.670992612838745 Tokens per Sec: 15824.267461692329
Epoch Step: 100 / 135 Loss: 2.6202070713043213 Tokens per Sec: 18549.42962308219
Epoch Step: 105 / 135 Loss: 1.9880809783935547 Tokens per Sec: 15745.911038547516
Epoch Step: 110 / 135 Loss: 3.974384307861328 Tokens per Sec: 15866.55768788882
Epoch Step: 115 / 135 Loss: 5.711264133453369 Tokens per Sec: 17190.908402028155
Epoch Step: 120 / 135 Loss: 5.129401206970215 Tokens per Sec: 14603.227366499801
Epoch Step: 125 / 135 Loss: 5.482849597930908 Tokens per Sec: 14884.847117720914
Epoch Step: 130 / 135 Loss: 4.750168800354004 Tokens per Sec: 16524.31236055032
Epoch Step: 135 / 135 Loss: 4.785977840423584 Tokens per Sec: 15583.23221566555
Epoch ended with duration 0:00:14.993404
Train perplexity: 1.2088491666476382
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.715276
Validation perplexity: 1.2812642351112689
Epoch 93 / 1000
Epoch Step: 5 / 135 Loss: 2.2648956775665283 Tokens per Sec: 18340.612363071963
Epoch Step: 10 / 135 Loss: 2.4399919509887695 Tokens per Sec: 16247.587833474598
Epoch Step: 15 / 135 Loss: 4.242122650146484 Tokens per Sec: 17973.40682840316
Epoch Step: 20 / 135 Loss: 1.5966062545776367 Tokens per Sec: 16461.119660035056
Epoch Step: 25 / 135 Loss: 32.55914306640625 Tokens per Sec: 19646.642619659342
Epoch Step: 30 / 135 Loss: 1.71403169631958 Tokens per Sec: 18044.799534964684
Epoch Step: 35 / 135 Loss: 2.1479909420013428 Tokens per Sec: 19024.75212712461
Epoch Step: 40 / 135 Loss: 3.331087112426758 Tokens per Sec: 16689.602469563408
Epoch Step: 45 / 135 Loss: 4.9308671951293945 Tokens per Sec: 19217.026631297336
Epoch Step: 50 / 135 Loss: 5.243688106536865 Tokens per Sec: 15468.362131643853
Epoch Step: 55 / 135 Loss: 4.547439098358154 Tokens per Sec: 16877.207315077787
Epoch Step: 60 / 135 Loss: 4.769392013549805 Tokens per Sec: 18868.669266430385
Epoch Step: 65 / 135 Loss: 3.476348638534546 Tokens per Sec: 16985.028534408117
Epoch Step: 70 / 135 Loss: 6.786958694458008 Tokens per Sec: 17088.270673439067
Epoch Step: 75 / 135 Loss: 5.811331748962402 Tokens per Sec: 18089.401353339217
Epoch Step: 80 / 135 Loss: 3.067187547683716 Tokens per Sec: 18670.010534319794
Epoch Step: 85 / 135 Loss: 2.314866304397583 Tokens per Sec: 15972.280197290482
Epoch Step: 90 / 135 Loss: 4.746089935302734 Tokens per Sec: 15747.863466145196
Epoch Step: 95 / 135 Loss: 3.4950995445251465 Tokens per Sec: 15156.672739400885
Epoch Step: 100 / 135 Loss: 4.833416938781738 Tokens per Sec: 15687.417212271084
Epoch Step: 105 / 135 Loss: 5.2554121017456055 Tokens per Sec: 15409.080793704936
Epoch Step: 110 / 135 Loss: 3.5129284858703613 Tokens per Sec: 15953.338324625105
Epoch Step: 115 / 135 Loss: 5.1857523918151855 Tokens per Sec: 16858.858901266667
Epoch Step: 120 / 135 Loss: 2.8462462425231934 Tokens per Sec: 15794.50637277504
Epoch Step: 125 / 135 Loss: 3.961205005645752 Tokens per Sec: 14338.294074257758
Epoch Step: 130 / 135 Loss: 3.9755702018737793 Tokens per Sec: 12630.898476677516
Epoch Step: 135 / 135 Loss: 3.56491756439209 Tokens per Sec: 17234.762712198597
Epoch ended with duration 0:00:15.095665
Train perplexity: 1.1920648863744274
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.721027
Validation perplexity: 1.2218833016516168
Model saved best_on_validation!
Epoch 94 / 1000
Epoch Step: 5 / 135 Loss: 2.816702127456665 Tokens per Sec: 15302.798034010939
Epoch Step: 10 / 135 Loss: 28.46642303466797 Tokens per Sec: 15276.15297330012
Epoch Step: 15 / 135 Loss: 3.800396680831909 Tokens per Sec: 17680.582281501935
Epoch Step: 20 / 135 Loss: 5.587917327880859 Tokens per Sec: 17523.947531532947
Epoch Step: 25 / 135 Loss: 27.549957275390625 Tokens per Sec: 14949.055267327996
Epoch Step: 30 / 135 Loss: 4.06773042678833 Tokens per Sec: 17848.814932898098
Epoch Step: 35 / 135 Loss: 6.064382553100586 Tokens per Sec: 19766.811781232253
Epoch Step: 40 / 135 Loss: 6.772841930389404 Tokens per Sec: 15795.406074255756
Epoch Step: 45 / 135 Loss: 9.240100860595703 Tokens per Sec: 17870.852973253306
Epoch Step: 50 / 135 Loss: 7.779359340667725 Tokens per Sec: 20700.32555120036
Epoch Step: 55 / 135 Loss: 1.8242969512939453 Tokens per Sec: 17124.098293763633
Epoch Step: 60 / 135 Loss: 5.450806140899658 Tokens per Sec: 16537.54587087726
Epoch Step: 65 / 135 Loss: 5.72399377822876 Tokens per Sec: 18128.559896306597
Epoch Step: 70 / 135 Loss: 1.9758586883544922 Tokens per Sec: 18114.347137746016
Epoch Step: 75 / 135 Loss: 2.850116729736328 Tokens per Sec: 16496.452576236923
Epoch Step: 80 / 135 Loss: 5.368259429931641 Tokens per Sec: 19086.826103827127
Epoch Step: 85 / 135 Loss: 5.496382713317871 Tokens per Sec: 16115.539290508605
Epoch Step: 90 / 135 Loss: 2.581204652786255 Tokens per Sec: 17110.976624234147
Epoch Step: 95 / 135 Loss: 5.191140651702881 Tokens per Sec: 16511.639317089343
Epoch Step: 100 / 135 Loss: 5.6609320640563965 Tokens per Sec: 19062.81848811199
Epoch Step: 105 / 135 Loss: 4.4843010902404785 Tokens per Sec: 15624.75906033693
Epoch Step: 110 / 135 Loss: 4.315921783447266 Tokens per Sec: 14056.352654776185
Epoch Step: 115 / 135 Loss: 2.244683265686035 Tokens per Sec: 16420.049162637515
Epoch Step: 120 / 135 Loss: 3.814051628112793 Tokens per Sec: 15714.291913316461
Epoch Step: 125 / 135 Loss: 19.1162052154541 Tokens per Sec: 15172.105017093409
Epoch Step: 130 / 135 Loss: 3.687741756439209 Tokens per Sec: 15674.95052488455
Epoch Step: 135 / 135 Loss: 2.9322454929351807 Tokens per Sec: 16802.47673093363
Epoch ended with duration 0:00:15.082971
Train perplexity: 1.2283690101840097
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.723448
Validation perplexity: 1.2333809298094187
Epoch 95 / 1000
Epoch Step: 5 / 135 Loss: 1.3425663709640503 Tokens per Sec: 17613.28891545827
Epoch Step: 10 / 135 Loss: 6.233998775482178 Tokens per Sec: 16389.946478718663
Epoch Step: 15 / 135 Loss: 4.471099853515625 Tokens per Sec: 17596.957113679724
Epoch Step: 20 / 135 Loss: 4.5873703956604 Tokens per Sec: 17269.18547930125
Epoch Step: 25 / 135 Loss: 3.5255656242370605 Tokens per Sec: 16985.395092252245
Epoch Step: 30 / 135 Loss: 1.796389102935791 Tokens per Sec: 18756.954244350014
Epoch Step: 35 / 135 Loss: 2.217452049255371 Tokens per Sec: 19125.069158984414
Epoch Step: 40 / 135 Loss: 1.912830114364624 Tokens per Sec: 18505.748313127297
Epoch Step: 45 / 135 Loss: 9.937708854675293 Tokens per Sec: 13216.914862888001
Epoch Step: 50 / 135 Loss: 4.376818656921387 Tokens per Sec: 16758.600041420486
Epoch Step: 55 / 135 Loss: 44.377716064453125 Tokens per Sec: 18487.785723377667
Epoch Step: 60 / 135 Loss: 2.699538230895996 Tokens per Sec: 16919.53598109842
Epoch Step: 65 / 135 Loss: 2.410658359527588 Tokens per Sec: 17346.78683652789
Epoch Step: 70 / 135 Loss: 7.048807144165039 Tokens per Sec: 15267.434294697368
Epoch Step: 75 / 135 Loss: 7.234788417816162 Tokens per Sec: 17274.415892409215
Epoch Step: 80 / 135 Loss: 2.8825576305389404 Tokens per Sec: 15901.91025437742
Epoch Step: 85 / 135 Loss: 2.0722954273223877 Tokens per Sec: 19429.36727929364
Epoch Step: 90 / 135 Loss: 4.204968452453613 Tokens per Sec: 18025.440744945023
Epoch Step: 95 / 135 Loss: 4.616123676300049 Tokens per Sec: 18598.59155127264
Epoch Step: 100 / 135 Loss: 1.1372872591018677 Tokens per Sec: 19223.098148239125
Epoch Step: 105 / 135 Loss: 2.3824620246887207 Tokens per Sec: 15592.62095840062
Epoch Step: 110 / 135 Loss: 12.46435832977295 Tokens per Sec: 16299.836172871339
Epoch Step: 115 / 135 Loss: 4.431108474731445 Tokens per Sec: 14173.17985736258
Epoch Step: 120 / 135 Loss: 3.5612175464630127 Tokens per Sec: 16443.057712969738
Epoch Step: 125 / 135 Loss: 5.402139663696289 Tokens per Sec: 16998.570983252645
Epoch Step: 130 / 135 Loss: 2.49179744720459 Tokens per Sec: 14672.246506110656
Epoch Step: 135 / 135 Loss: 3.164574146270752 Tokens per Sec: 16102.950028516869
Epoch ended with duration 0:00:15.021306
Train perplexity: 1.2228869674586456
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.724336
Validation perplexity: 1.2309852441243292
Model saved checkpoint!
Epoch 96 / 1000
Epoch Step: 5 / 135 Loss: 4.808979034423828 Tokens per Sec: 13637.617261878435
Epoch Step: 10 / 135 Loss: 6.37802267074585 Tokens per Sec: 19205.39928439779
Epoch Step: 15 / 135 Loss: 2.90818190574646 Tokens per Sec: 16384.087388748136
Epoch Step: 20 / 135 Loss: 4.594735622406006 Tokens per Sec: 15310.046727659885
Epoch Step: 25 / 135 Loss: 4.543529033660889 Tokens per Sec: 14756.729848283385
Epoch Step: 30 / 135 Loss: 4.9291462898254395 Tokens per Sec: 17607.749492503925
Epoch Step: 35 / 135 Loss: 5.249930381774902 Tokens per Sec: 18362.702281999038
Epoch Step: 40 / 135 Loss: 3.3623199462890625 Tokens per Sec: 18776.912933121264
Epoch Step: 45 / 135 Loss: 2.640275716781616 Tokens per Sec: 18649.999771606665
Epoch Step: 50 / 135 Loss: 3.8005900382995605 Tokens per Sec: 17072.827114744374
Epoch Step: 55 / 135 Loss: 5.409302234649658 Tokens per Sec: 16231.08141300208
Epoch Step: 60 / 135 Loss: 3.237833023071289 Tokens per Sec: 18264.949095586882
Epoch Step: 65 / 135 Loss: 7.220213890075684 Tokens per Sec: 17859.548449960872
Epoch Step: 70 / 135 Loss: 6.9926862716674805 Tokens per Sec: 19361.208548078102
Epoch Step: 75 / 135 Loss: 8.900115966796875 Tokens per Sec: 18110.58984988982
Epoch Step: 80 / 135 Loss: 6.1331305503845215 Tokens per Sec: 17162.75005756248
Epoch Step: 85 / 135 Loss: 2.398768901824951 Tokens per Sec: 18347.25119503745
Epoch Step: 90 / 135 Loss: 6.490376949310303 Tokens per Sec: 14056.731755359933
Epoch Step: 95 / 135 Loss: 4.259041786193848 Tokens per Sec: 20590.158939995756
Epoch Step: 100 / 135 Loss: 5.034718990325928 Tokens per Sec: 14382.265284785712
Epoch Step: 105 / 135 Loss: 2.640669345855713 Tokens per Sec: 15713.265428514022
Epoch Step: 110 / 135 Loss: 2.1487607955932617 Tokens per Sec: 14641.460651234305
Epoch Step: 115 / 135 Loss: 4.191793441772461 Tokens per Sec: 15149.722643671546
Epoch Step: 120 / 135 Loss: 3.457854986190796 Tokens per Sec: 16225.396850025647
Epoch Step: 125 / 135 Loss: 4.500161170959473 Tokens per Sec: 16707.969952375704
Epoch Step: 130 / 135 Loss: 1.7292115688323975 Tokens per Sec: 16445.905628156
Epoch Step: 135 / 135 Loss: 4.351663589477539 Tokens per Sec: 17235.959444758715
Epoch ended with duration 0:00:15.114344
Train perplexity: 1.1940516042207632
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.713315
Validation perplexity: 1.219714982175773
Model saved best_on_validation!
Epoch 97 / 1000
Epoch Step: 5 / 135 Loss: 6.761172294616699 Tokens per Sec: 15883.087281401204
Epoch Step: 10 / 135 Loss: 12.149507522583008 Tokens per Sec: 17979.367036320462
Epoch Step: 15 / 135 Loss: 3.5967319011688232 Tokens per Sec: 17711.24871099511
Epoch Step: 20 / 135 Loss: 1.3634027242660522 Tokens per Sec: 17131.472046253224
Epoch Step: 25 / 135 Loss: 3.1723809242248535 Tokens per Sec: 17580.49500027869
Epoch Step: 30 / 135 Loss: 1.9233006238937378 Tokens per Sec: 18138.862617263214
Epoch Step: 35 / 135 Loss: 4.614271640777588 Tokens per Sec: 16679.988610656706
Epoch Step: 40 / 135 Loss: 5.022788047790527 Tokens per Sec: 18380.858706210092
Epoch Step: 45 / 135 Loss: 32.17009353637695 Tokens per Sec: 16832.436256084064
Epoch Step: 50 / 135 Loss: 6.058699607849121 Tokens per Sec: 18197.49563964859
Epoch Step: 55 / 135 Loss: 2.721992254257202 Tokens per Sec: 16453.108775094544
Epoch Step: 60 / 135 Loss: 8.439108848571777 Tokens per Sec: 19904.63736583388
Epoch Step: 65 / 135 Loss: 16.062070846557617 Tokens per Sec: 17649.52114685115
Epoch Step: 70 / 135 Loss: 9.969747543334961 Tokens per Sec: 15693.883540540932
Epoch Step: 75 / 135 Loss: 3.8025548458099365 Tokens per Sec: 14258.358027262682
Epoch Step: 80 / 135 Loss: 8.808880805969238 Tokens per Sec: 15751.287136907995
Epoch Step: 85 / 135 Loss: 5.347354412078857 Tokens per Sec: 18740.57057630676
Epoch Step: 90 / 135 Loss: 9.655511856079102 Tokens per Sec: 14067.449197186766
Epoch Step: 95 / 135 Loss: 6.753995895385742 Tokens per Sec: 18189.295524398472
Epoch Step: 100 / 135 Loss: 3.540353298187256 Tokens per Sec: 18522.868157154928
Epoch Step: 105 / 135 Loss: 3.698875904083252 Tokens per Sec: 14723.49632400517
Epoch Step: 110 / 135 Loss: 4.652535438537598 Tokens per Sec: 15537.092410672703
Epoch Step: 115 / 135 Loss: 2.99839186668396 Tokens per Sec: 14778.25437285722
Epoch Step: 120 / 135 Loss: 3.292858362197876 Tokens per Sec: 16908.22046604112
Epoch Step: 125 / 135 Loss: 4.941205978393555 Tokens per Sec: 15606.594352821936
Epoch Step: 130 / 135 Loss: 3.679131269454956 Tokens per Sec: 17001.095527579568
Epoch Step: 135 / 135 Loss: 4.515259742736816 Tokens per Sec: 15567.507187117904
Epoch ended with duration 0:00:15.099781
Train perplexity: 1.2770996979624814
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.733448
Validation perplexity: 1.4729969432365226
Epoch 98 / 1000
Epoch Step: 5 / 135 Loss: 5.724613189697266 Tokens per Sec: 17013.891381901813
Epoch Step: 10 / 135 Loss: 2.2676947116851807 Tokens per Sec: 15076.60220166956
Epoch Step: 15 / 135 Loss: 3.2973926067352295 Tokens per Sec: 16348.596398559424
Epoch Step: 20 / 135 Loss: 7.412074565887451 Tokens per Sec: 19729.997820613986
Epoch Step: 25 / 135 Loss: 4.753489971160889 Tokens per Sec: 20111.98399782654
Epoch Step: 30 / 135 Loss: 5.313355922698975 Tokens per Sec: 15837.831275613175
Epoch Step: 35 / 135 Loss: 3.3733673095703125 Tokens per Sec: 18243.606889835606
Epoch Step: 40 / 135 Loss: 3.2902424335479736 Tokens per Sec: 17787.291063458833
Epoch Step: 45 / 135 Loss: 3.121382713317871 Tokens per Sec: 19339.281822976194
Epoch Step: 50 / 135 Loss: 2.7016844749450684 Tokens per Sec: 15725.093786447818
Epoch Step: 55 / 135 Loss: 2.9549012184143066 Tokens per Sec: 13890.293530061119
Epoch Step: 60 / 135 Loss: 5.938024997711182 Tokens per Sec: 18292.328463319136
Epoch Step: 65 / 135 Loss: 5.769841194152832 Tokens per Sec: 19065.788516707747
Epoch Step: 70 / 135 Loss: 1.907549500465393 Tokens per Sec: 15777.940028313287
Epoch Step: 75 / 135 Loss: 5.121669769287109 Tokens per Sec: 15867.093620810394
Epoch Step: 80 / 135 Loss: 2.3650012016296387 Tokens per Sec: 16406.380309314274
Epoch Step: 85 / 135 Loss: 2.9368040561676025 Tokens per Sec: 16787.91689753806
Epoch Step: 90 / 135 Loss: 4.733389854431152 Tokens per Sec: 14927.808700502996
Epoch Step: 95 / 135 Loss: 7.482711315155029 Tokens per Sec: 19823.39838338705
Epoch Step: 100 / 135 Loss: 2.8667702674865723 Tokens per Sec: 18609.49325304953
Epoch Step: 105 / 135 Loss: 2.639439105987549 Tokens per Sec: 13725.354938819106
Epoch Step: 110 / 135 Loss: 2.4872324466705322 Tokens per Sec: 14875.112574361827
Epoch Step: 115 / 135 Loss: 7.332653045654297 Tokens per Sec: 15817.882624524236
Epoch Step: 120 / 135 Loss: 4.54458475112915 Tokens per Sec: 16278.181154325637
Epoch Step: 125 / 135 Loss: 2.5974369049072266 Tokens per Sec: 15706.541824317612
Epoch Step: 130 / 135 Loss: 2.8477513790130615 Tokens per Sec: 16570.272221928768
Epoch Step: 135 / 135 Loss: 4.905703067779541 Tokens per Sec: 16757.65174887509
Epoch ended with duration 0:00:15.090580
Train perplexity: 1.1809785952409713
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.712992
Validation perplexity: 1.233305548435407
Epoch 99 / 1000
Epoch Step: 5 / 135 Loss: 1.8876378536224365 Tokens per Sec: 17849.991505760652
Epoch Step: 10 / 135 Loss: 19.907325744628906 Tokens per Sec: 19279.20588936817
Epoch Step: 15 / 135 Loss: 7.908127307891846 Tokens per Sec: 17710.307170718388
Epoch Step: 20 / 135 Loss: 1.681483268737793 Tokens per Sec: 17796.63154774742
Epoch Step: 25 / 135 Loss: 1.5026764869689941 Tokens per Sec: 17647.92226900784
Epoch Step: 30 / 135 Loss: 4.382707118988037 Tokens per Sec: 15173.30927126124
Epoch Step: 35 / 135 Loss: 4.842568874359131 Tokens per Sec: 18585.824438194137
Epoch Step: 40 / 135 Loss: 7.103649616241455 Tokens per Sec: 16282.4097777989
Epoch Step: 45 / 135 Loss: 27.29722023010254 Tokens per Sec: 15760.46737213974
Epoch Step: 50 / 135 Loss: 2.118001699447632 Tokens per Sec: 18167.318197960416
Epoch Step: 55 / 135 Loss: 6.328781604766846 Tokens per Sec: 16673.28184269759
Epoch Step: 60 / 135 Loss: 15.539926528930664 Tokens per Sec: 16426.576157891133
Epoch Step: 65 / 135 Loss: 2.4523067474365234 Tokens per Sec: 18656.539610115276
Epoch Step: 70 / 135 Loss: 3.623889923095703 Tokens per Sec: 18589.805645616412
Epoch Step: 75 / 135 Loss: 1.234454870223999 Tokens per Sec: 18448.236419394398
Epoch Step: 80 / 135 Loss: 3.593686103820801 Tokens per Sec: 16284.378907489554
Epoch Step: 85 / 135 Loss: 6.3884172439575195 Tokens per Sec: 15858.871283700395
Epoch Step: 90 / 135 Loss: 1.5336079597473145 Tokens per Sec: 19238.08149965379
Epoch Step: 95 / 135 Loss: 2.4563305377960205 Tokens per Sec: 20202.91422812264
Epoch Step: 100 / 135 Loss: 6.724529266357422 Tokens per Sec: 14261.857168987464
Epoch Step: 105 / 135 Loss: 3.386021614074707 Tokens per Sec: 15428.296533032772
Epoch Step: 110 / 135 Loss: 4.651823043823242 Tokens per Sec: 15902.94845732225
Epoch Step: 115 / 135 Loss: 4.277069568634033 Tokens per Sec: 15557.101102835317
Epoch Step: 120 / 135 Loss: 3.186389923095703 Tokens per Sec: 14149.68405436226
Epoch Step: 125 / 135 Loss: 4.540491580963135 Tokens per Sec: 16832.855320584673
Epoch Step: 130 / 135 Loss: 3.3903627395629883 Tokens per Sec: 16126.491618358292
Epoch Step: 135 / 135 Loss: 3.8177006244659424 Tokens per Sec: 16076.099887105007
Epoch ended with duration 0:00:15.017091
Train perplexity: 1.2045910841652754
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.718113
Validation perplexity: 1.3049092001299851
Epoch 100 / 1000
Epoch Step: 5 / 135 Loss: 10.108384132385254 Tokens per Sec: 18772.672731557133
Epoch Step: 10 / 135 Loss: 4.040392875671387 Tokens per Sec: 18310.9695484863
Epoch Step: 15 / 135 Loss: 2.607640266418457 Tokens per Sec: 16942.576093482545
Epoch Step: 20 / 135 Loss: 2.0096426010131836 Tokens per Sec: 18107.688677230708
Epoch Step: 25 / 135 Loss: 2.3817625045776367 Tokens per Sec: 16084.71381733021
Epoch Step: 30 / 135 Loss: 4.1775221824646 Tokens per Sec: 17563.970354614645
Epoch Step: 35 / 135 Loss: 3.7141478061676025 Tokens per Sec: 17185.709126704292
Epoch Step: 40 / 135 Loss: 5.138881206512451 Tokens per Sec: 17644.91644476194
Epoch Step: 45 / 135 Loss: 4.926135063171387 Tokens per Sec: 17213.35173788268
Epoch Step: 50 / 135 Loss: 4.113452434539795 Tokens per Sec: 18976.93030956514
Epoch Step: 55 / 135 Loss: 3.1977450847625732 Tokens per Sec: 15599.541717109765
Epoch Step: 60 / 135 Loss: 2.3858821392059326 Tokens per Sec: 16962.646535046762
Epoch Step: 65 / 135 Loss: 1.2130799293518066 Tokens per Sec: 13603.635870580458
Epoch Step: 70 / 135 Loss: 3.7049272060394287 Tokens per Sec: 17835.782062251787
Epoch Step: 75 / 135 Loss: 4.182794094085693 Tokens per Sec: 19140.4638546795
Epoch Step: 80 / 135 Loss: 4.082334518432617 Tokens per Sec: 16359.468358303537
Epoch Step: 85 / 135 Loss: 41.40671157836914 Tokens per Sec: 18272.69820498278
Epoch Step: 90 / 135 Loss: 3.6746737957000732 Tokens per Sec: 17966.429854792183
Epoch Step: 95 / 135 Loss: 1.8672399520874023 Tokens per Sec: 18130.122527710584
Epoch Step: 100 / 135 Loss: 4.932952404022217 Tokens per Sec: 17252.423631664216
Epoch Step: 105 / 135 Loss: 2.948033332824707 Tokens per Sec: 15270.415259742578
Epoch Step: 110 / 135 Loss: 5.319347858428955 Tokens per Sec: 15801.943999704874
Epoch Step: 115 / 135 Loss: 4.247382640838623 Tokens per Sec: 13204.751899932522
Epoch Step: 120 / 135 Loss: 1.9526429176330566 Tokens per Sec: 16258.510661041782
Epoch Step: 125 / 135 Loss: 4.036043167114258 Tokens per Sec: 15233.68363666563
Epoch Step: 130 / 135 Loss: 3.8355870246887207 Tokens per Sec: 17059.446351218576
Epoch Step: 135 / 135 Loss: 2.9745116233825684 Tokens per Sec: 16475.870490331512
Epoch ended with duration 0:00:15.029879
Train perplexity: 1.1795185903735086
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.713385
Validation perplexity: 1.2105664542181216
Model saved best_on_validation!
Model saved checkpoint!
Epoch 101 / 1000
Epoch Step: 5 / 135 Loss: 3.9623234272003174 Tokens per Sec: 18672.682412818554
Epoch Step: 10 / 135 Loss: 3.6102943420410156 Tokens per Sec: 19994.668722694234
Epoch Step: 15 / 135 Loss: 2.5020689964294434 Tokens per Sec: 21211.22311966737
Epoch Step: 20 / 135 Loss: 2.0626184940338135 Tokens per Sec: 16270.628518027585
Epoch Step: 25 / 135 Loss: 5.0303053855896 Tokens per Sec: 20730.376512199524
Epoch Step: 30 / 135 Loss: 8.007353782653809 Tokens per Sec: 18539.343846593303
Epoch Step: 35 / 135 Loss: 5.59793758392334 Tokens per Sec: 18284.881782389162
Epoch Step: 40 / 135 Loss: 3.92736554145813 Tokens per Sec: 19235.36324767977
Epoch Step: 45 / 135 Loss: 4.755894660949707 Tokens per Sec: 18573.431612428034
Epoch Step: 50 / 135 Loss: 2.5687718391418457 Tokens per Sec: 17072.609804936594
Epoch Step: 55 / 135 Loss: 2.742417097091675 Tokens per Sec: 15754.911398698961
Epoch Step: 60 / 135 Loss: 3.438717842102051 Tokens per Sec: 15205.75166983494
Epoch Step: 65 / 135 Loss: 4.286960124969482 Tokens per Sec: 18600.579068167994
Epoch Step: 70 / 135 Loss: 5.737203598022461 Tokens per Sec: 19944.612559533667
Epoch Step: 75 / 135 Loss: 7.285397529602051 Tokens per Sec: 19375.74182334918
Epoch Step: 80 / 135 Loss: 1.200580358505249 Tokens per Sec: 17318.182449569344
Epoch Step: 85 / 135 Loss: 1.3309346437454224 Tokens per Sec: 20647.52951034302
Epoch Step: 90 / 135 Loss: 2.4176111221313477 Tokens per Sec: 16728.165920379855
Epoch Step: 95 / 135 Loss: 4.737959861755371 Tokens per Sec: 15077.380637247177
Epoch Step: 100 / 135 Loss: 3.5701756477355957 Tokens per Sec: 19144.570024603614
Epoch Step: 105 / 135 Loss: 3.403629779815674 Tokens per Sec: 16148.030311171018
Epoch Step: 110 / 135 Loss: 3.807922124862671 Tokens per Sec: 17285.046790422435
Epoch Step: 115 / 135 Loss: 5.951707363128662 Tokens per Sec: 18010.655726411853
Epoch Step: 120 / 135 Loss: 3.4397311210632324 Tokens per Sec: 16594.78729537182
Epoch Step: 125 / 135 Loss: 6.781975746154785 Tokens per Sec: 13480.103898346424
Epoch Step: 130 / 135 Loss: 42.95644760131836 Tokens per Sec: 17560.481493479398
Epoch Step: 135 / 135 Loss: 16.945022583007812 Tokens per Sec: 16570.778209760865
Epoch ended with duration 0:00:14.195501
Train perplexity: 1.2199546144378903
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.638960
Validation perplexity: 1.8944485336253793
Epoch 102 / 1000
Epoch Step: 5 / 135 Loss: 7.0700364112854 Tokens per Sec: 17541.089164022178
Epoch Step: 10 / 135 Loss: 1.9855579137802124 Tokens per Sec: 20567.648806635523
Epoch Step: 15 / 135 Loss: 4.060953617095947 Tokens per Sec: 20218.72596416966
Epoch Step: 20 / 135 Loss: 3.808784246444702 Tokens per Sec: 18272.87981980844
Epoch Step: 25 / 135 Loss: 4.812349319458008 Tokens per Sec: 20407.643268734333
Epoch Step: 30 / 135 Loss: 3.792943239212036 Tokens per Sec: 16480.18917351681
Epoch Step: 35 / 135 Loss: 4.365592956542969 Tokens per Sec: 18916.10601536936
Epoch Step: 40 / 135 Loss: 5.770916938781738 Tokens per Sec: 16746.807517420988
Epoch Step: 45 / 135 Loss: 2.161670684814453 Tokens per Sec: 16666.451949713886
Epoch Step: 50 / 135 Loss: 5.679018974304199 Tokens per Sec: 12393.586098921696
Epoch Step: 55 / 135 Loss: 2.7819011211395264 Tokens per Sec: 18139.29066094087
Epoch Step: 60 / 135 Loss: 7.064988613128662 Tokens per Sec: 20052.35095789955
Epoch Step: 65 / 135 Loss: 12.549931526184082 Tokens per Sec: 14437.21551243797
Epoch Step: 70 / 135 Loss: 2.947103977203369 Tokens per Sec: 20189.310600909994
Epoch Step: 75 / 135 Loss: 8.199806213378906 Tokens per Sec: 16843.233805976517
Epoch Step: 80 / 135 Loss: 7.137417793273926 Tokens per Sec: 16069.608659542346
Epoch Step: 85 / 135 Loss: 7.890443325042725 Tokens per Sec: 16085.326608878382
Epoch Step: 90 / 135 Loss: 3.8438825607299805 Tokens per Sec: 13701.975848571306
Epoch Step: 95 / 135 Loss: 35.06719207763672 Tokens per Sec: 19025.011126542704
Epoch Step: 100 / 135 Loss: 4.3951416015625 Tokens per Sec: 17189.61344937027
Epoch Step: 105 / 135 Loss: 4.046835899353027 Tokens per Sec: 14545.094757999133
Epoch Step: 110 / 135 Loss: 3.3922901153564453 Tokens per Sec: 15625.433014475113
Epoch Step: 115 / 135 Loss: 30.59368133544922 Tokens per Sec: 13552.536526892316
Epoch Step: 120 / 135 Loss: 1.9673093557357788 Tokens per Sec: 13822.425368376082
Epoch Step: 125 / 135 Loss: 3.142374038696289 Tokens per Sec: 15886.383145763371
Epoch Step: 130 / 135 Loss: 3.783174753189087 Tokens per Sec: 14615.905743578942
Epoch Step: 135 / 135 Loss: 4.79153299331665 Tokens per Sec: 16355.641649194024
Epoch ended with duration 0:00:15.161813
Train perplexity: 1.2969948797742563
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648115
Validation perplexity: 1.2981771897723724
Epoch 103 / 1000
Epoch Step: 5 / 135 Loss: 2.8036446571350098 Tokens per Sec: 18761.763010543546
Epoch Step: 10 / 135 Loss: 4.754199028015137 Tokens per Sec: 13576.30969955975
Epoch Step: 15 / 135 Loss: 10.997024536132812 Tokens per Sec: 16049.100944177571
Epoch Step: 20 / 135 Loss: 5.494082927703857 Tokens per Sec: 17263.684411659102
Epoch Step: 25 / 135 Loss: 3.8151397705078125 Tokens per Sec: 15804.212362596625
Epoch Step: 30 / 135 Loss: 7.300830841064453 Tokens per Sec: 16671.626026390517
Epoch Step: 35 / 135 Loss: 1.469441533088684 Tokens per Sec: 17527.058695276013
Epoch Step: 40 / 135 Loss: 5.435785293579102 Tokens per Sec: 18679.796767122527
Epoch Step: 45 / 135 Loss: 1.787351131439209 Tokens per Sec: 16634.92287351256
Epoch Step: 50 / 135 Loss: 6.083052635192871 Tokens per Sec: 18748.110473645625
Epoch Step: 55 / 135 Loss: 2.447359323501587 Tokens per Sec: 16694.18110523099
Epoch Step: 60 / 135 Loss: 22.154369354248047 Tokens per Sec: 17532.39266994139
Epoch Step: 65 / 135 Loss: 3.298248767852783 Tokens per Sec: 13188.531880902148
Epoch Step: 70 / 135 Loss: 2.8582286834716797 Tokens per Sec: 15077.529975397496
Epoch Step: 75 / 135 Loss: 4.844967365264893 Tokens per Sec: 15419.17778315184
Epoch Step: 80 / 135 Loss: 4.843836784362793 Tokens per Sec: 17671.318356453674
Epoch Step: 85 / 135 Loss: 5.567690372467041 Tokens per Sec: 16228.81343725887
Epoch Step: 90 / 135 Loss: 2.0987980365753174 Tokens per Sec: 17904.214256374693
Epoch Step: 95 / 135 Loss: 4.567579746246338 Tokens per Sec: 16788.688020538568
Epoch Step: 100 / 135 Loss: 3.176943302154541 Tokens per Sec: 15059.054213453024
Epoch Step: 105 / 135 Loss: 3.664717674255371 Tokens per Sec: 13585.13875291154
Epoch Step: 110 / 135 Loss: 5.723453521728516 Tokens per Sec: 14032.730474214186
Epoch Step: 115 / 135 Loss: 3.062551736831665 Tokens per Sec: 16472.78026567305
Epoch Step: 120 / 135 Loss: 3.0857839584350586 Tokens per Sec: 16074.78314330681
Epoch Step: 125 / 135 Loss: 3.692128896713257 Tokens per Sec: 16857.563359350246
Epoch Step: 130 / 135 Loss: 19.151391983032227 Tokens per Sec: 14604.114733577611
Epoch Step: 135 / 135 Loss: 2.5954177379608154 Tokens per Sec: 14820.708929388717
Epoch ended with duration 0:00:15.685481
Train perplexity: 1.1830153285204252
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.640403
Validation perplexity: 1.229508113763463
Epoch 104 / 1000
Epoch Step: 5 / 135 Loss: 1.4840900897979736 Tokens per Sec: 19098.012891291153
Epoch Step: 10 / 135 Loss: 3.4162423610687256 Tokens per Sec: 18067.89654091582
Epoch Step: 15 / 135 Loss: 2.4608476161956787 Tokens per Sec: 15759.030258454633
Epoch Step: 20 / 135 Loss: 6.06343936920166 Tokens per Sec: 18120.16575940731
Epoch Step: 25 / 135 Loss: 2.0564627647399902 Tokens per Sec: 17748.727320938393
Epoch Step: 30 / 135 Loss: 0.7877694368362427 Tokens per Sec: 18780.94993898772
Epoch Step: 35 / 135 Loss: 5.8408637046813965 Tokens per Sec: 16761.711201913382
Epoch Step: 40 / 135 Loss: 10.174941062927246 Tokens per Sec: 19852.79410847179
Epoch Step: 45 / 135 Loss: 2.4531166553497314 Tokens per Sec: 17973.16088536936
Epoch Step: 50 / 135 Loss: 2.040984630584717 Tokens per Sec: 14139.038897652392
Epoch Step: 55 / 135 Loss: 3.445669412612915 Tokens per Sec: 18021.93693823938
Epoch Step: 60 / 135 Loss: 1.0754493474960327 Tokens per Sec: 18783.169173235976
Epoch Step: 65 / 135 Loss: 1.8560277223587036 Tokens per Sec: 17051.36123446126
Epoch Step: 70 / 135 Loss: 6.630377292633057 Tokens per Sec: 18433.904042822935
Epoch Step: 75 / 135 Loss: 2.623011350631714 Tokens per Sec: 20375.225278655358
Epoch Step: 80 / 135 Loss: 3.394162893295288 Tokens per Sec: 17449.355423247915
Epoch Step: 85 / 135 Loss: 5.0027031898498535 Tokens per Sec: 18059.429898559178
Epoch Step: 90 / 135 Loss: 2.8814938068389893 Tokens per Sec: 18937.279475056086
Epoch Step: 95 / 135 Loss: 2.898568868637085 Tokens per Sec: 18743.429876307193
Epoch Step: 100 / 135 Loss: 1.9466161727905273 Tokens per Sec: 18974.664929628027
Epoch Step: 105 / 135 Loss: 3.6503233909606934 Tokens per Sec: 16989.957064694863
Epoch Step: 110 / 135 Loss: 4.348257541656494 Tokens per Sec: 13792.946610320814
Epoch Step: 115 / 135 Loss: 4.5079169273376465 Tokens per Sec: 18401.541819312373
Epoch Step: 120 / 135 Loss: 5.0776190757751465 Tokens per Sec: 17488.951610205873
Epoch Step: 125 / 135 Loss: 1.618708610534668 Tokens per Sec: 15225.54794494492
Epoch Step: 130 / 135 Loss: 24.947736740112305 Tokens per Sec: 17925.682977034907
Epoch Step: 135 / 135 Loss: 2.725048780441284 Tokens per Sec: 16912.32142569333
Epoch ended with duration 0:00:14.365572
Train perplexity: 1.2012922551553131
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645982
Validation perplexity: 1.2354402891663532
Epoch 105 / 1000
Epoch Step: 5 / 135 Loss: 3.0981557369232178 Tokens per Sec: 18427.371532918565
Epoch Step: 10 / 135 Loss: 1.7350411415100098 Tokens per Sec: 16731.44395855716
Epoch Step: 15 / 135 Loss: 5.173964977264404 Tokens per Sec: 20139.596272621726
Epoch Step: 20 / 135 Loss: 4.7105913162231445 Tokens per Sec: 18262.128349625236
Epoch Step: 25 / 135 Loss: 1.9881819486618042 Tokens per Sec: 19970.633124728916
Epoch Step: 30 / 135 Loss: 3.1279332637786865 Tokens per Sec: 18133.016198259753
Epoch Step: 35 / 135 Loss: 1.848649024963379 Tokens per Sec: 16516.300791606838
Epoch Step: 40 / 135 Loss: 3.9441208839416504 Tokens per Sec: 18943.32470396516
Epoch Step: 45 / 135 Loss: 3.1391446590423584 Tokens per Sec: 18245.4200780652
Epoch Step: 50 / 135 Loss: 4.637352466583252 Tokens per Sec: 16278.585796017805
Epoch Step: 55 / 135 Loss: 2.0196533203125 Tokens per Sec: 19303.49729828183
Epoch Step: 60 / 135 Loss: 4.256821155548096 Tokens per Sec: 16001.001234285372
Epoch Step: 65 / 135 Loss: 3.8765244483947754 Tokens per Sec: 19437.819199221038
Epoch Step: 70 / 135 Loss: 2.0466935634613037 Tokens per Sec: 17391.892539458644
Epoch Step: 75 / 135 Loss: 1.57463800907135 Tokens per Sec: 17449.661088553617
Epoch Step: 80 / 135 Loss: 2.1003286838531494 Tokens per Sec: 18896.297899781453
Epoch Step: 85 / 135 Loss: 2.144113063812256 Tokens per Sec: 19829.759902562535
Epoch Step: 90 / 135 Loss: 1.6073997020721436 Tokens per Sec: 21934.572740982545
Epoch Step: 95 / 135 Loss: 4.529278755187988 Tokens per Sec: 16383.261778230355
Epoch Step: 100 / 135 Loss: 1.454818844795227 Tokens per Sec: 20755.055377763692
Epoch Step: 105 / 135 Loss: 4.435240745544434 Tokens per Sec: 16093.049300796438
Epoch Step: 110 / 135 Loss: 2.5880391597747803 Tokens per Sec: 14997.323116550646
Epoch Step: 115 / 135 Loss: 4.686044216156006 Tokens per Sec: 18827.026784393893
Epoch Step: 120 / 135 Loss: 28.761837005615234 Tokens per Sec: 16273.319787603568
Epoch Step: 125 / 135 Loss: 2.7066290378570557 Tokens per Sec: 16022.447371133825
Epoch Step: 130 / 135 Loss: 3.5204527378082275 Tokens per Sec: 16139.951282306887
Epoch Step: 135 / 135 Loss: 5.543752193450928 Tokens per Sec: 17576.391458048834
Epoch ended with duration 0:00:14.194314
Train perplexity: 1.1650186773197289
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.636381
Validation perplexity: 1.194530044130737
Model saved best_on_validation!
Model saved checkpoint!
Epoch 106 / 1000
Epoch Step: 5 / 135 Loss: 1.7967926263809204 Tokens per Sec: 17256.812493729725
Epoch Step: 10 / 135 Loss: 4.239443302154541 Tokens per Sec: 18774.435110406892
Epoch Step: 15 / 135 Loss: 5.52467155456543 Tokens per Sec: 19134.403504802765
Epoch Step: 20 / 135 Loss: 1.7033369541168213 Tokens per Sec: 18981.477560306696
Epoch Step: 25 / 135 Loss: 5.600326061248779 Tokens per Sec: 20393.042377041493
Epoch Step: 30 / 135 Loss: 9.50386905670166 Tokens per Sec: 18947.624259171058
Epoch Step: 35 / 135 Loss: 1.8388447761535645 Tokens per Sec: 16409.512301463717
Epoch Step: 40 / 135 Loss: 3.3127262592315674 Tokens per Sec: 20445.636422533586
Epoch Step: 45 / 135 Loss: 4.829710483551025 Tokens per Sec: 18182.473677546255
Epoch Step: 50 / 135 Loss: 5.570008277893066 Tokens per Sec: 17624.09217760894
Epoch Step: 55 / 135 Loss: 1.388335108757019 Tokens per Sec: 18183.13068936766
Epoch Step: 60 / 135 Loss: 2.2163333892822266 Tokens per Sec: 18906.050092388832
Epoch Step: 65 / 135 Loss: 2.9681038856506348 Tokens per Sec: 17361.82675580695
Epoch Step: 70 / 135 Loss: 2.834294080734253 Tokens per Sec: 18140.44600300998
Epoch Step: 75 / 135 Loss: 2.1946778297424316 Tokens per Sec: 18920.46746875961
Epoch Step: 80 / 135 Loss: 5.685732364654541 Tokens per Sec: 17211.600674959223
Epoch Step: 85 / 135 Loss: 3.1610186100006104 Tokens per Sec: 19683.029293863707
Epoch Step: 90 / 135 Loss: 14.622119903564453 Tokens per Sec: 18703.929909137725
Epoch Step: 95 / 135 Loss: 4.742279529571533 Tokens per Sec: 16911.34964134633
Epoch Step: 100 / 135 Loss: 5.497313022613525 Tokens per Sec: 16470.816380958982
Epoch Step: 105 / 135 Loss: 2.791752576828003 Tokens per Sec: 17224.370738380487
Epoch Step: 110 / 135 Loss: 2.86596941947937 Tokens per Sec: 16979.338822543785
Epoch Step: 115 / 135 Loss: 3.956782817840576 Tokens per Sec: 14864.263350855437
Epoch Step: 120 / 135 Loss: 3.468939781188965 Tokens per Sec: 16290.074298833268
Epoch Step: 125 / 135 Loss: 3.48342227935791 Tokens per Sec: 16420.399490610223
Epoch Step: 130 / 135 Loss: 3.9561142921447754 Tokens per Sec: 16693.708857541522
Epoch Step: 135 / 135 Loss: 2.104433298110962 Tokens per Sec: 17222.16521990262
Epoch ended with duration 0:00:14.271886
Train perplexity: 1.1801212994015218
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649644
Validation perplexity: 1.2916649475790254
Epoch 107 / 1000
Epoch Step: 5 / 135 Loss: 1.9224056005477905 Tokens per Sec: 18951.89731469154
Epoch Step: 10 / 135 Loss: 3.9821109771728516 Tokens per Sec: 15234.993558437058
Epoch Step: 15 / 135 Loss: 3.531942129135132 Tokens per Sec: 21645.03123285566
Epoch Step: 20 / 135 Loss: 2.829632043838501 Tokens per Sec: 17063.612299982724
Epoch Step: 25 / 135 Loss: 4.55003547668457 Tokens per Sec: 18457.993979269475
Epoch Step: 30 / 135 Loss: 7.055088996887207 Tokens per Sec: 20393.115306934982
Epoch Step: 35 / 135 Loss: 3.248732805252075 Tokens per Sec: 17459.61841776543
Epoch Step: 40 / 135 Loss: 1.9589245319366455 Tokens per Sec: 17393.145185501275
Epoch Step: 45 / 135 Loss: 3.567645311355591 Tokens per Sec: 17591.619718940005
Epoch Step: 50 / 135 Loss: 1.2026760578155518 Tokens per Sec: 19365.045805575603
Epoch Step: 55 / 135 Loss: 2.748026132583618 Tokens per Sec: 15886.55701715376
Epoch Step: 60 / 135 Loss: 1.9921796321868896 Tokens per Sec: 20024.598492078898
Epoch Step: 65 / 135 Loss: 4.2499823570251465 Tokens per Sec: 15046.320322183195
Epoch Step: 70 / 135 Loss: 17.651582717895508 Tokens per Sec: 19827.831289074762
Epoch Step: 75 / 135 Loss: 0.8511413931846619 Tokens per Sec: 18464.93489533213
Epoch Step: 80 / 135 Loss: 6.042562484741211 Tokens per Sec: 18699.317862899672
Epoch Step: 85 / 135 Loss: 4.440252304077148 Tokens per Sec: 17255.356810056197
Epoch Step: 90 / 135 Loss: 1.49911630153656 Tokens per Sec: 20103.807029301803
Epoch Step: 95 / 135 Loss: 3.1109588146209717 Tokens per Sec: 19708.50913070817
Epoch Step: 100 / 135 Loss: 2.014674425125122 Tokens per Sec: 18936.177776011642
Epoch Step: 105 / 135 Loss: 3.515125274658203 Tokens per Sec: 16025.063542045187
Epoch Step: 110 / 135 Loss: 3.977531909942627 Tokens per Sec: 17921.72832896994
Epoch Step: 115 / 135 Loss: 17.492610931396484 Tokens per Sec: 15929.792569154748
Epoch Step: 120 / 135 Loss: 2.304684638977051 Tokens per Sec: 16001.45039390728
Epoch Step: 125 / 135 Loss: 3.479215621948242 Tokens per Sec: 16493.8733731535
Epoch Step: 130 / 135 Loss: 2.1680996417999268 Tokens per Sec: 15962.79712495081
Epoch Step: 135 / 135 Loss: 17.774709701538086 Tokens per Sec: 17955.788285122806
Epoch ended with duration 0:00:14.230119
Train perplexity: 1.1456018751068626
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647119
Validation perplexity: 1.2201739696737242
Epoch 108 / 1000
Epoch Step: 5 / 135 Loss: 6.102352142333984 Tokens per Sec: 18554.558543141833
Epoch Step: 10 / 135 Loss: 3.2703769207000732 Tokens per Sec: 18868.730249764118
Epoch Step: 15 / 135 Loss: 2.9116859436035156 Tokens per Sec: 19469.52925854308
Epoch Step: 20 / 135 Loss: 1.9165724515914917 Tokens per Sec: 15600.604903114629
Epoch Step: 25 / 135 Loss: 4.255400657653809 Tokens per Sec: 15632.903944866686
Epoch Step: 30 / 135 Loss: 2.1645474433898926 Tokens per Sec: 16206.016891370504
Epoch Step: 35 / 135 Loss: 2.1622772216796875 Tokens per Sec: 19888.482213491126
Epoch Step: 40 / 135 Loss: 3.44553542137146 Tokens per Sec: 17232.269484875895
Epoch Step: 45 / 135 Loss: 2.867269515991211 Tokens per Sec: 17797.16018168993
Epoch Step: 50 / 135 Loss: 2.9587533473968506 Tokens per Sec: 19455.488474987513
Epoch Step: 55 / 135 Loss: 5.283858776092529 Tokens per Sec: 16355.685095030718
Epoch Step: 60 / 135 Loss: 4.142226219177246 Tokens per Sec: 20964.170246280308
Epoch Step: 65 / 135 Loss: 1.816997766494751 Tokens per Sec: 19115.36792131985
Epoch Step: 70 / 135 Loss: 4.235326290130615 Tokens per Sec: 19168.775745244646
Epoch Step: 75 / 135 Loss: 2.545494556427002 Tokens per Sec: 19214.34137095479
Epoch Step: 80 / 135 Loss: 4.510757923126221 Tokens per Sec: 18750.786106858883
Epoch Step: 85 / 135 Loss: 4.821998596191406 Tokens per Sec: 20456.511884577587
Epoch Step: 90 / 135 Loss: 1.2629649639129639 Tokens per Sec: 21353.58129303656
Epoch Step: 95 / 135 Loss: 18.02173614501953 Tokens per Sec: 18612.116894965948
Epoch Step: 100 / 135 Loss: 5.38676118850708 Tokens per Sec: 18066.862538515892
Epoch Step: 105 / 135 Loss: 2.238182544708252 Tokens per Sec: 16696.804163173525
Epoch Step: 110 / 135 Loss: 3.6623690128326416 Tokens per Sec: 17648.190911562433
Epoch Step: 115 / 135 Loss: 1.596598505973816 Tokens per Sec: 17493.190936538413
Epoch Step: 120 / 135 Loss: 4.11197566986084 Tokens per Sec: 16339.364725936732
Epoch Step: 125 / 135 Loss: 3.486855983734131 Tokens per Sec: 16140.48271390865
Epoch Step: 130 / 135 Loss: 2.3249969482421875 Tokens per Sec: 15483.808847413353
Epoch Step: 135 / 135 Loss: 3.178673505783081 Tokens per Sec: 17695.8373043055
Epoch ended with duration 0:00:14.082794
Train perplexity: 1.139602650399467
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652049
Validation perplexity: 1.3069879203417913
Epoch 109 / 1000
Epoch Step: 5 / 135 Loss: 2.7758119106292725 Tokens per Sec: 17156.616374715526
Epoch Step: 10 / 135 Loss: 5.4867377281188965 Tokens per Sec: 19168.16865245355
Epoch Step: 15 / 135 Loss: 2.74660325050354 Tokens per Sec: 17837.925458212187
Epoch Step: 20 / 135 Loss: 1.7017234563827515 Tokens per Sec: 16872.560413087038
Epoch Step: 25 / 135 Loss: 2.414299964904785 Tokens per Sec: 19351.517828826425
Epoch Step: 30 / 135 Loss: 4.604195594787598 Tokens per Sec: 15918.674718704775
Epoch Step: 35 / 135 Loss: 5.298094272613525 Tokens per Sec: 19490.31514071113
Epoch Step: 40 / 135 Loss: 5.334404945373535 Tokens per Sec: 18378.225869391415
Epoch Step: 45 / 135 Loss: 3.709625482559204 Tokens per Sec: 17868.681047438982
Epoch Step: 50 / 135 Loss: 3.5349154472351074 Tokens per Sec: 18766.22347528582
Epoch Step: 55 / 135 Loss: 1.1631357669830322 Tokens per Sec: 16678.542672922445
Epoch Step: 60 / 135 Loss: 2.746608018875122 Tokens per Sec: 16130.047821000002
Epoch Step: 65 / 135 Loss: 2.0662801265716553 Tokens per Sec: 17256.762133309196
Epoch Step: 70 / 135 Loss: 5.716471195220947 Tokens per Sec: 18651.230450765648
Epoch Step: 75 / 135 Loss: 2.788233757019043 Tokens per Sec: 17464.72745980117
Epoch Step: 80 / 135 Loss: 4.2586259841918945 Tokens per Sec: 17949.27304912512
Epoch Step: 85 / 135 Loss: 4.505876064300537 Tokens per Sec: 19100.243127038146
Epoch Step: 90 / 135 Loss: 39.209564208984375 Tokens per Sec: 20081.776199615153
Epoch Step: 95 / 135 Loss: 2.356048345565796 Tokens per Sec: 19454.44477790053
Epoch Step: 100 / 135 Loss: 9.269316673278809 Tokens per Sec: 19007.664301141624
Epoch Step: 105 / 135 Loss: 2.866466760635376 Tokens per Sec: 17450.504051390366
Epoch Step: 110 / 135 Loss: 2.681320905685425 Tokens per Sec: 17557.214960314257
Epoch Step: 115 / 135 Loss: 2.7678356170654297 Tokens per Sec: 15868.89353069775
Epoch Step: 120 / 135 Loss: 2.641017198562622 Tokens per Sec: 15747.775315819426
Epoch Step: 125 / 135 Loss: 13.086709976196289 Tokens per Sec: 18257.01662253388
Epoch Step: 130 / 135 Loss: 1.8829362392425537 Tokens per Sec: 15187.7910850183
Epoch Step: 135 / 135 Loss: 4.1210761070251465 Tokens per Sec: 18513.173548132057
Epoch ended with duration 0:00:14.240705
Train perplexity: 1.2119034696986912
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.643721
Validation perplexity: 1.1914859913669558
Model saved best_on_validation!
Epoch 110 / 1000
Epoch Step: 5 / 135 Loss: 3.8595478534698486 Tokens per Sec: 15589.587770816433
Epoch Step: 10 / 135 Loss: 3.007587432861328 Tokens per Sec: 19176.53848346739
Epoch Step: 15 / 135 Loss: 1.0932790040969849 Tokens per Sec: 19817.895199180122
Epoch Step: 20 / 135 Loss: 29.1372127532959 Tokens per Sec: 16431.473750777128
Epoch Step: 25 / 135 Loss: 1.7327630519866943 Tokens per Sec: 18184.90664202708
Epoch Step: 30 / 135 Loss: 6.351309299468994 Tokens per Sec: 19622.52449711765
Epoch Step: 35 / 135 Loss: 2.0013480186462402 Tokens per Sec: 16714.898270751757
Epoch Step: 40 / 135 Loss: 3.109963893890381 Tokens per Sec: 16368.718976443859
Epoch Step: 45 / 135 Loss: 3.2535769939422607 Tokens per Sec: 20550.468632747696
Epoch Step: 50 / 135 Loss: 2.807605743408203 Tokens per Sec: 20680.840998546264
Epoch Step: 55 / 135 Loss: 6.171481132507324 Tokens per Sec: 13595.414268911056
Epoch Step: 60 / 135 Loss: 5.0199875831604 Tokens per Sec: 19433.73646217242
Epoch Step: 65 / 135 Loss: 1.710263729095459 Tokens per Sec: 19319.661742993325
Epoch Step: 70 / 135 Loss: 3.1514716148376465 Tokens per Sec: 20203.936113603904
Epoch Step: 75 / 135 Loss: 5.725160598754883 Tokens per Sec: 18589.749626078836
Epoch Step: 80 / 135 Loss: 1.1458067893981934 Tokens per Sec: 18025.173256867165
Epoch Step: 85 / 135 Loss: 2.6695189476013184 Tokens per Sec: 20227.568704201665
Epoch Step: 90 / 135 Loss: 1.2280223369598389 Tokens per Sec: 17143.50453829635
Epoch Step: 95 / 135 Loss: 2.338015079498291 Tokens per Sec: 19624.42150905278
Epoch Step: 100 / 135 Loss: 3.363753318786621 Tokens per Sec: 17356.668187605675
Epoch Step: 105 / 135 Loss: 2.1435186862945557 Tokens per Sec: 16234.900188805808
Epoch Step: 110 / 135 Loss: 4.567451000213623 Tokens per Sec: 16952.202736227817
Epoch Step: 115 / 135 Loss: 3.712280750274658 Tokens per Sec: 17951.375394369545
Epoch Step: 120 / 135 Loss: 2.359837770462036 Tokens per Sec: 16242.544685783008
Epoch Step: 125 / 135 Loss: 3.1169331073760986 Tokens per Sec: 16123.727923893217
Epoch Step: 130 / 135 Loss: 2.607339382171631 Tokens per Sec: 15879.746168266485
Epoch Step: 135 / 135 Loss: 2.6340718269348145 Tokens per Sec: 17719.663863931033
Epoch ended with duration 0:00:14.192454
Train perplexity: 1.1706209712509525
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651397
Validation perplexity: 1.2678454424003025
Model saved checkpoint!
Epoch 111 / 1000
Epoch Step: 5 / 135 Loss: 3.4137022495269775 Tokens per Sec: 17875.929304975183
Epoch Step: 10 / 135 Loss: 4.117928504943848 Tokens per Sec: 19069.480517682063
Epoch Step: 15 / 135 Loss: 1.755344033241272 Tokens per Sec: 19487.0435523061
Epoch Step: 20 / 135 Loss: 7.216002464294434 Tokens per Sec: 17310.9770324002
Epoch Step: 25 / 135 Loss: 4.359515190124512 Tokens per Sec: 19655.39256081059
Epoch Step: 30 / 135 Loss: 4.182794570922852 Tokens per Sec: 20338.481318097514
Epoch Step: 35 / 135 Loss: 2.3517990112304688 Tokens per Sec: 19574.93711004729
Epoch Step: 40 / 135 Loss: 1.8016785383224487 Tokens per Sec: 18793.61991259193
Epoch Step: 45 / 135 Loss: 1.124574899673462 Tokens per Sec: 18351.400402955005
Epoch Step: 50 / 135 Loss: 1.513071894645691 Tokens per Sec: 19588.62118320804
Epoch Step: 55 / 135 Loss: 4.9557976722717285 Tokens per Sec: 17868.951549788708
Epoch Step: 60 / 135 Loss: 3.8689374923706055 Tokens per Sec: 21347.80903326391
Epoch Step: 65 / 135 Loss: 3.2017362117767334 Tokens per Sec: 17676.831286021665
Epoch Step: 70 / 135 Loss: 3.829429864883423 Tokens per Sec: 19617.99430434056
Epoch Step: 75 / 135 Loss: 1.4858636856079102 Tokens per Sec: 13120.636119957475
Epoch Step: 80 / 135 Loss: 4.593771457672119 Tokens per Sec: 17161.986420451783
Epoch Step: 85 / 135 Loss: 11.391544342041016 Tokens per Sec: 17730.13617360987
Epoch Step: 90 / 135 Loss: 4.425397872924805 Tokens per Sec: 16703.51694053964
Epoch Step: 95 / 135 Loss: 1.1261744499206543 Tokens per Sec: 15020.305441770912
Epoch Step: 100 / 135 Loss: 3.603774309158325 Tokens per Sec: 21305.586962980942
Epoch Step: 105 / 135 Loss: 2.372749090194702 Tokens per Sec: 16957.355561492623
Epoch Step: 110 / 135 Loss: 3.3959152698516846 Tokens per Sec: 17395.471227129656
Epoch Step: 115 / 135 Loss: 3.5278050899505615 Tokens per Sec: 14929.358858611115
Epoch Step: 120 / 135 Loss: 3.0866641998291016 Tokens per Sec: 15018.725104945923
Epoch Step: 125 / 135 Loss: 2.654841661453247 Tokens per Sec: 17488.73350156594
Epoch Step: 130 / 135 Loss: 4.241138935089111 Tokens per Sec: 16687.079096623038
Epoch Step: 135 / 135 Loss: 2.332069158554077 Tokens per Sec: 18651.26854809663
Epoch ended with duration 0:00:14.132454
Train perplexity: 1.1660923478218905
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650316
Validation perplexity: 1.4066459257766455
Epoch 112 / 1000
Epoch Step: 5 / 135 Loss: 1.6911640167236328 Tokens per Sec: 15101.094348950157
Epoch Step: 10 / 135 Loss: 3.2492871284484863 Tokens per Sec: 19804.775072041095
Epoch Step: 15 / 135 Loss: 5.951099395751953 Tokens per Sec: 18399.904070332435
Epoch Step: 20 / 135 Loss: 2.069974660873413 Tokens per Sec: 19842.78679070892
Epoch Step: 25 / 135 Loss: 2.5084609985351562 Tokens per Sec: 14741.977157802528
Epoch Step: 30 / 135 Loss: 5.307200908660889 Tokens per Sec: 19230.492757099593
Epoch Step: 35 / 135 Loss: 2.3039023876190186 Tokens per Sec: 19701.43933855243
Epoch Step: 40 / 135 Loss: 5.836180210113525 Tokens per Sec: 19934.406283613076
Epoch Step: 45 / 135 Loss: 1.749692440032959 Tokens per Sec: 17716.047160111288
Epoch Step: 50 / 135 Loss: 2.1795549392700195 Tokens per Sec: 15743.613173770409
Epoch Step: 55 / 135 Loss: 1.485907793045044 Tokens per Sec: 19352.000669409437
Epoch Step: 60 / 135 Loss: 3.7899093627929688 Tokens per Sec: 19997.364343797744
Epoch Step: 65 / 135 Loss: 3.592522144317627 Tokens per Sec: 17671.15800059455
Epoch Step: 70 / 135 Loss: 4.254903316497803 Tokens per Sec: 21573.585254613412
Epoch Step: 75 / 135 Loss: 2.7980926036834717 Tokens per Sec: 17254.502072719217
Epoch Step: 80 / 135 Loss: 4.060683727264404 Tokens per Sec: 18368.832736218643
Epoch Step: 85 / 135 Loss: 4.174241542816162 Tokens per Sec: 17675.849817039398
Epoch Step: 90 / 135 Loss: 3.109225273132324 Tokens per Sec: 20893.708358476717
Epoch Step: 95 / 135 Loss: 33.795204162597656 Tokens per Sec: 20874.230050852264
Epoch Step: 100 / 135 Loss: 2.433774471282959 Tokens per Sec: 15262.916861524693
Epoch Step: 105 / 135 Loss: 2.4607350826263428 Tokens per Sec: 14517.682822380655
Epoch Step: 110 / 135 Loss: 4.644981861114502 Tokens per Sec: 16448.131557379325
Epoch Step: 115 / 135 Loss: 4.896218299865723 Tokens per Sec: 18188.56836033171
Epoch Step: 120 / 135 Loss: 3.3465938568115234 Tokens per Sec: 17095.236403823954
Epoch Step: 125 / 135 Loss: 3.800128698348999 Tokens per Sec: 17708.92497212257
Epoch Step: 130 / 135 Loss: 3.104860544204712 Tokens per Sec: 17205.017762828465
Epoch Step: 135 / 135 Loss: 1.6817184686660767 Tokens per Sec: 15108.225912630885
Epoch ended with duration 0:00:14.172797
Train perplexity: 1.2025161335962535
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.644892
Validation perplexity: 1.274960130304962
Epoch 113 / 1000
Epoch Step: 5 / 135 Loss: 2.3291256427764893 Tokens per Sec: 17350.0386323926
Epoch Step: 10 / 135 Loss: 3.791440963745117 Tokens per Sec: 19920.056268193774
Epoch Step: 15 / 135 Loss: 3.802469253540039 Tokens per Sec: 19428.55458500837
Epoch Step: 20 / 135 Loss: 20.57273292541504 Tokens per Sec: 17065.436825559253
Epoch Step: 25 / 135 Loss: 1.0489585399627686 Tokens per Sec: 19513.41622451903
Epoch Step: 30 / 135 Loss: 2.4279797077178955 Tokens per Sec: 17845.014754864616
Epoch Step: 35 / 135 Loss: 10.956123352050781 Tokens per Sec: 19141.11797212322
Epoch Step: 40 / 135 Loss: 3.4434027671813965 Tokens per Sec: 16540.93005145371
Epoch Step: 45 / 135 Loss: 4.593070983886719 Tokens per Sec: 15572.517980088807
Epoch Step: 50 / 135 Loss: 39.76378631591797 Tokens per Sec: 19665.127002857567
Epoch Step: 55 / 135 Loss: 2.4561774730682373 Tokens per Sec: 18729.01407849943
Epoch Step: 60 / 135 Loss: 7.373863220214844 Tokens per Sec: 14961.178549044378
Epoch Step: 65 / 135 Loss: 11.776633262634277 Tokens per Sec: 17200.247254108435
Epoch Step: 70 / 135 Loss: 7.384852409362793 Tokens per Sec: 19571.196645362237
Epoch Step: 75 / 135 Loss: 3.483522415161133 Tokens per Sec: 20034.562047552365
Epoch Step: 80 / 135 Loss: 4.83424186706543 Tokens per Sec: 19456.164754923273
Epoch Step: 85 / 135 Loss: 4.922573089599609 Tokens per Sec: 17921.846235684177
Epoch Step: 90 / 135 Loss: 4.942148208618164 Tokens per Sec: 20629.138116144684
Epoch Step: 95 / 135 Loss: 50.091033935546875 Tokens per Sec: 19002.97191642486
Epoch Step: 100 / 135 Loss: 7.370943546295166 Tokens per Sec: 17154.92027953716
Epoch Step: 105 / 135 Loss: 3.026197671890259 Tokens per Sec: 17013.80085673194
Epoch Step: 110 / 135 Loss: 5.0232625007629395 Tokens per Sec: 16213.65925313811
Epoch Step: 115 / 135 Loss: 3.645453691482544 Tokens per Sec: 17011.32438104176
Epoch Step: 120 / 135 Loss: 6.209507465362549 Tokens per Sec: 17296.555364956992
Epoch Step: 125 / 135 Loss: 2.683830976486206 Tokens per Sec: 16471.37248369455
Epoch Step: 130 / 135 Loss: 16.994041442871094 Tokens per Sec: 18624.698307308172
Epoch Step: 135 / 135 Loss: 4.8197102546691895 Tokens per Sec: 15296.934947391832
Epoch ended with duration 0:00:14.156312
Train perplexity: 1.2605546217209707
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.641317
Validation perplexity: 1.1947363594842466
Epoch 114 / 1000
Epoch Step: 5 / 135 Loss: 23.03209686279297 Tokens per Sec: 16959.807113003124
Epoch Step: 10 / 135 Loss: 4.390894412994385 Tokens per Sec: 20273.58597165979
Epoch Step: 15 / 135 Loss: 4.285381317138672 Tokens per Sec: 20758.536060378396
Epoch Step: 20 / 135 Loss: 2.6930618286132812 Tokens per Sec: 18738.39778292203
Epoch Step: 25 / 135 Loss: 2.720832586288452 Tokens per Sec: 17306.68566851784
Epoch Step: 30 / 135 Loss: 3.9528188705444336 Tokens per Sec: 17258.17628709954
Epoch Step: 35 / 135 Loss: 4.088871479034424 Tokens per Sec: 19759.855838221712
Epoch Step: 40 / 135 Loss: 1.0036513805389404 Tokens per Sec: 18641.05383015146
Epoch Step: 45 / 135 Loss: 3.830806016921997 Tokens per Sec: 22505.015777302367
Epoch Step: 50 / 135 Loss: 6.598138332366943 Tokens per Sec: 17920.74473213969
Epoch Step: 55 / 135 Loss: 2.250331163406372 Tokens per Sec: 18433.182794167675
Epoch Step: 60 / 135 Loss: 4.050312042236328 Tokens per Sec: 18941.251968698118
Epoch Step: 65 / 135 Loss: 0.923011839389801 Tokens per Sec: 19623.426623268817
Epoch Step: 70 / 135 Loss: 2.747519016265869 Tokens per Sec: 15272.6910322353
Epoch Step: 75 / 135 Loss: 6.058028221130371 Tokens per Sec: 16480.896297295225
Epoch Step: 80 / 135 Loss: 1.8828293085098267 Tokens per Sec: 17861.71898582936
Epoch Step: 85 / 135 Loss: 4.768063545227051 Tokens per Sec: 15618.582223571153
Epoch Step: 90 / 135 Loss: 1.910738229751587 Tokens per Sec: 18976.410805638825
Epoch Step: 95 / 135 Loss: 2.8810932636260986 Tokens per Sec: 19240.392225155392
Epoch Step: 100 / 135 Loss: 2.3042445182800293 Tokens per Sec: 17571.528290686234
Epoch Step: 105 / 135 Loss: 2.194399356842041 Tokens per Sec: 16203.74587908894
Epoch Step: 110 / 135 Loss: 2.9707889556884766 Tokens per Sec: 16370.667229271527
Epoch Step: 115 / 135 Loss: 3.194884777069092 Tokens per Sec: 19151.370460744965
Epoch Step: 120 / 135 Loss: 2.3833229541778564 Tokens per Sec: 14663.491155877315
Epoch Step: 125 / 135 Loss: 2.236952304840088 Tokens per Sec: 15450.406004424221
Epoch Step: 130 / 135 Loss: 3.8387863636016846 Tokens per Sec: 18133.144480656745
Epoch Step: 135 / 135 Loss: 3.0871431827545166 Tokens per Sec: 16300.840772453092
Epoch ended with duration 0:00:14.171804
Train perplexity: 1.1796433438055445
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649112
Validation perplexity: 1.3093176294026103
Epoch 115 / 1000
Epoch Step: 5 / 135 Loss: 1.9687256813049316 Tokens per Sec: 19173.220234569362
Epoch Step: 10 / 135 Loss: 3.1667635440826416 Tokens per Sec: 21033.202194749258
Epoch Step: 15 / 135 Loss: 3.9959659576416016 Tokens per Sec: 21267.967576145205
Epoch Step: 20 / 135 Loss: 2.27905011177063 Tokens per Sec: 16235.603922914925
Epoch Step: 25 / 135 Loss: 2.076108455657959 Tokens per Sec: 16824.36361256479
Epoch Step: 30 / 135 Loss: 3.5770936012268066 Tokens per Sec: 20185.01211999595
Epoch Step: 35 / 135 Loss: 3.959857702255249 Tokens per Sec: 20051.629098970705
Epoch Step: 40 / 135 Loss: 1.8961787223815918 Tokens per Sec: 18123.36650506634
Epoch Step: 45 / 135 Loss: 3.187077522277832 Tokens per Sec: 16759.313308631394
Epoch Step: 50 / 135 Loss: 2.6118383407592773 Tokens per Sec: 16867.596999790694
Epoch Step: 55 / 135 Loss: 3.6991994380950928 Tokens per Sec: 17046.02729288064
Epoch Step: 60 / 135 Loss: 1.6643390655517578 Tokens per Sec: 20975.892630926908
Epoch Step: 65 / 135 Loss: 5.300281047821045 Tokens per Sec: 18554.177192023377
Epoch Step: 70 / 135 Loss: 3.199152946472168 Tokens per Sec: 15744.204211764549
Epoch Step: 75 / 135 Loss: 4.991528034210205 Tokens per Sec: 16256.400194474236
Epoch Step: 80 / 135 Loss: 12.253535270690918 Tokens per Sec: 19034.91422018778
Epoch Step: 85 / 135 Loss: 2.997122287750244 Tokens per Sec: 18251.327208397346
Epoch Step: 90 / 135 Loss: 4.4059247970581055 Tokens per Sec: 16216.535404996634
Epoch Step: 95 / 135 Loss: 1.5287622213363647 Tokens per Sec: 19303.491143833566
Epoch Step: 100 / 135 Loss: 29.58282470703125 Tokens per Sec: 18695.75695146737
Epoch Step: 105 / 135 Loss: 2.8556814193725586 Tokens per Sec: 15935.852447550786
Epoch Step: 110 / 135 Loss: 3.8767294883728027 Tokens per Sec: 17742.061918315318
Epoch Step: 115 / 135 Loss: 5.045852184295654 Tokens per Sec: 18031.78505435419
Epoch Step: 120 / 135 Loss: 2.55491304397583 Tokens per Sec: 17498.75373912285
Epoch Step: 125 / 135 Loss: 3.0214412212371826 Tokens per Sec: 15748.81281896772
Epoch Step: 130 / 135 Loss: 3.2342162132263184 Tokens per Sec: 15218.286030838308
Epoch Step: 135 / 135 Loss: 2.820150852203369 Tokens per Sec: 18362.021027077684
Epoch ended with duration 0:00:14.155336
Train perplexity: 1.1558343491454424
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646567
Validation perplexity: 1.3553626272591932
Model saved checkpoint!
Epoch 116 / 1000
Epoch Step: 5 / 135 Loss: 7.438751697540283 Tokens per Sec: 16480.973741286543
Epoch Step: 10 / 135 Loss: 3.568366289138794 Tokens per Sec: 19269.194840404773
Epoch Step: 15 / 135 Loss: 1.3509074449539185 Tokens per Sec: 15727.593794679684
Epoch Step: 20 / 135 Loss: 1.2153881788253784 Tokens per Sec: 17478.575224050193
Epoch Step: 25 / 135 Loss: 7.155248641967773 Tokens per Sec: 18759.837538238393
Epoch Step: 30 / 135 Loss: 4.7180047035217285 Tokens per Sec: 20827.497883719607
Epoch Step: 35 / 135 Loss: 6.6494460105896 Tokens per Sec: 17527.980841807475
Epoch Step: 40 / 135 Loss: 0.9024213552474976 Tokens per Sec: 17830.239311385893
Epoch Step: 45 / 135 Loss: 30.987985610961914 Tokens per Sec: 21240.374376806736
Epoch Step: 50 / 135 Loss: 1.5687835216522217 Tokens per Sec: 18583.84149015256
Epoch Step: 55 / 135 Loss: 0.99112468957901 Tokens per Sec: 18968.72107036635
Epoch Step: 60 / 135 Loss: 2.245901584625244 Tokens per Sec: 16453.831665843132
Epoch Step: 65 / 135 Loss: 3.8814992904663086 Tokens per Sec: 18699.49702355772
Epoch Step: 70 / 135 Loss: 3.000258207321167 Tokens per Sec: 17539.96866922479
Epoch Step: 75 / 135 Loss: 2.960575580596924 Tokens per Sec: 17944.649185507795
Epoch Step: 80 / 135 Loss: 3.834916353225708 Tokens per Sec: 19224.098719003407
Epoch Step: 85 / 135 Loss: 2.2542033195495605 Tokens per Sec: 20747.086999371037
Epoch Step: 90 / 135 Loss: 4.527713775634766 Tokens per Sec: 20350.819068244888
Epoch Step: 95 / 135 Loss: 4.666477203369141 Tokens per Sec: 18039.910963751237
Epoch Step: 100 / 135 Loss: 3.779301166534424 Tokens per Sec: 17574.79355928143
Epoch Step: 105 / 135 Loss: 1.550029993057251 Tokens per Sec: 16063.580642932082
Epoch Step: 110 / 135 Loss: 3.3770010471343994 Tokens per Sec: 18950.77820433015
Epoch Step: 115 / 135 Loss: 3.4269423484802246 Tokens per Sec: 16277.95015938703
Epoch Step: 120 / 135 Loss: 3.366438150405884 Tokens per Sec: 16981.500816651667
Epoch Step: 125 / 135 Loss: 1.9143275022506714 Tokens per Sec: 17060.997624810374
Epoch Step: 130 / 135 Loss: 2.665374755859375 Tokens per Sec: 15689.262291342307
Epoch Step: 135 / 135 Loss: 2.069049119949341 Tokens per Sec: 14582.84189877817
Epoch ended with duration 0:00:14.163057
Train perplexity: 1.1607325139119373
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649173
Validation perplexity: 1.2850453052893291
Epoch 117 / 1000
Epoch Step: 5 / 135 Loss: 2.985151529312134 Tokens per Sec: 20175.460220489837
Epoch Step: 10 / 135 Loss: 4.190066337585449 Tokens per Sec: 16424.685295543204
Epoch Step: 15 / 135 Loss: 3.879115104675293 Tokens per Sec: 18973.56966458268
Epoch Step: 20 / 135 Loss: 2.0532498359680176 Tokens per Sec: 19260.28088577939
Epoch Step: 25 / 135 Loss: 6.843095779418945 Tokens per Sec: 18638.841405589435
Epoch Step: 30 / 135 Loss: 3.1282570362091064 Tokens per Sec: 15584.922707556492
Epoch Step: 35 / 135 Loss: 3.5666961669921875 Tokens per Sec: 18968.451519536902
Epoch Step: 40 / 135 Loss: 1.1428807973861694 Tokens per Sec: 17267.112182809586
Epoch Step: 45 / 135 Loss: 4.015356540679932 Tokens per Sec: 18196.482338396247
Epoch Step: 50 / 135 Loss: 4.248565196990967 Tokens per Sec: 18549.403433740987
Epoch Step: 55 / 135 Loss: 3.8624792098999023 Tokens per Sec: 20700.133104452627
Epoch Step: 60 / 135 Loss: 15.182230949401855 Tokens per Sec: 19977.270800815455
Epoch Step: 65 / 135 Loss: 0.8362178802490234 Tokens per Sec: 17400.962912824416
Epoch Step: 70 / 135 Loss: 1.2636446952819824 Tokens per Sec: 15091.72638016826
Epoch Step: 75 / 135 Loss: 2.6801788806915283 Tokens per Sec: 19957.141629331716
Epoch Step: 80 / 135 Loss: 2.734549045562744 Tokens per Sec: 20605.09114702113
Epoch Step: 85 / 135 Loss: 2.465416431427002 Tokens per Sec: 16651.994333606206
Epoch Step: 90 / 135 Loss: 3.4372003078460693 Tokens per Sec: 18144.480735327357
Epoch Step: 95 / 135 Loss: 3.476179361343384 Tokens per Sec: 19456.594432558555
Epoch Step: 100 / 135 Loss: 5.242606163024902 Tokens per Sec: 18057.16268599486
Epoch Step: 105 / 135 Loss: 2.4544761180877686 Tokens per Sec: 17264.457351932313
Epoch Step: 110 / 135 Loss: 2.596379280090332 Tokens per Sec: 18105.29790664938
Epoch Step: 115 / 135 Loss: 3.56207013130188 Tokens per Sec: 14533.520290472956
Epoch Step: 120 / 135 Loss: 5.669116497039795 Tokens per Sec: 16733.365390390998
Epoch Step: 125 / 135 Loss: 2.449436902999878 Tokens per Sec: 16046.093641599431
Epoch Step: 130 / 135 Loss: 3.556447982788086 Tokens per Sec: 16129.458275056808
Epoch Step: 135 / 135 Loss: 1.3666391372680664 Tokens per Sec: 16573.508502954843
Epoch ended with duration 0:00:14.228536
Train perplexity: 1.1640175973091165
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649808
Validation perplexity: 1.2200614562314005
Epoch 118 / 1000
Epoch Step: 5 / 135 Loss: 3.356902837753296 Tokens per Sec: 15990.628024820964
Epoch Step: 10 / 135 Loss: 1.7873036861419678 Tokens per Sec: 19084.747685913917
Epoch Step: 15 / 135 Loss: 4.552985191345215 Tokens per Sec: 15398.07347019687
Epoch Step: 20 / 135 Loss: 39.155731201171875 Tokens per Sec: 20978.5480384119
Epoch Step: 25 / 135 Loss: 30.89269256591797 Tokens per Sec: 17652.843223980206
Epoch Step: 30 / 135 Loss: 1.9818174839019775 Tokens per Sec: 17266.382677360252
Epoch Step: 35 / 135 Loss: 3.0895473957061768 Tokens per Sec: 16498.80127938881
Epoch Step: 40 / 135 Loss: 5.070968151092529 Tokens per Sec: 19393.1304465385
Epoch Step: 45 / 135 Loss: 1.6675646305084229 Tokens per Sec: 17414.978350002093
Epoch Step: 50 / 135 Loss: 5.677140235900879 Tokens per Sec: 20266.839189458275
Epoch Step: 55 / 135 Loss: 2.952291965484619 Tokens per Sec: 17866.429276132607
Epoch Step: 60 / 135 Loss: 1.3839080333709717 Tokens per Sec: 19726.807022476387
Epoch Step: 65 / 135 Loss: 2.168997049331665 Tokens per Sec: 19154.15418138145
Epoch Step: 70 / 135 Loss: 2.6703362464904785 Tokens per Sec: 19681.73997247942
Epoch Step: 75 / 135 Loss: 7.237085819244385 Tokens per Sec: 18680.898661348758
Epoch Step: 80 / 135 Loss: 2.9129865169525146 Tokens per Sec: 21472.744162412135
Epoch Step: 85 / 135 Loss: 2.145625114440918 Tokens per Sec: 18722.042028516436
Epoch Step: 90 / 135 Loss: 2.067558526992798 Tokens per Sec: 20287.070380952282
Epoch Step: 95 / 135 Loss: 1.7823710441589355 Tokens per Sec: 18166.502825991443
Epoch Step: 100 / 135 Loss: 5.920745372772217 Tokens per Sec: 17076.97062752511
Epoch Step: 105 / 135 Loss: 15.096756935119629 Tokens per Sec: 16738.678480846873
Epoch Step: 110 / 135 Loss: 4.057968616485596 Tokens per Sec: 17569.20557254925
Epoch Step: 115 / 135 Loss: 2.8233773708343506 Tokens per Sec: 16996.494816543465
Epoch Step: 120 / 135 Loss: 2.702329635620117 Tokens per Sec: 15195.896822852086
Epoch Step: 125 / 135 Loss: 1.5135257244110107 Tokens per Sec: 17615.188115672478
Epoch Step: 130 / 135 Loss: 2.529033899307251 Tokens per Sec: 17626.23976728981
Epoch Step: 135 / 135 Loss: 2.8974907398223877 Tokens per Sec: 15134.559467742998
Epoch ended with duration 0:00:14.138461
Train perplexity: 1.1591761221964583
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.638599
Validation perplexity: 1.1836751109077175
Model saved best_on_validation!
Epoch 119 / 1000
Epoch Step: 5 / 135 Loss: 3.9842374324798584 Tokens per Sec: 17150.8730744947
Epoch Step: 10 / 135 Loss: 4.12410831451416 Tokens per Sec: 18800.475018230998
Epoch Step: 15 / 135 Loss: 2.4240100383758545 Tokens per Sec: 17119.255368598497
Epoch Step: 20 / 135 Loss: 2.3260512351989746 Tokens per Sec: 18418.8483278813
Epoch Step: 25 / 135 Loss: 2.1775779724121094 Tokens per Sec: 21636.025712408256
Epoch Step: 30 / 135 Loss: 2.3965351581573486 Tokens per Sec: 18198.354458775935
Epoch Step: 35 / 135 Loss: 1.8453788757324219 Tokens per Sec: 16890.36205396456
Epoch Step: 40 / 135 Loss: 22.876266479492188 Tokens per Sec: 19324.24012501061
Epoch Step: 45 / 135 Loss: 0.9001832008361816 Tokens per Sec: 16801.68475508293
Epoch Step: 50 / 135 Loss: 1.7491822242736816 Tokens per Sec: 20224.619400851345
Epoch Step: 55 / 135 Loss: 2.029106616973877 Tokens per Sec: 21389.14711131978
Epoch Step: 60 / 135 Loss: 3.86167049407959 Tokens per Sec: 16385.934216875477
Epoch Step: 65 / 135 Loss: 1.83743417263031 Tokens per Sec: 19993.478305802215
Epoch Step: 70 / 135 Loss: 2.8869171142578125 Tokens per Sec: 18572.658293610526
Epoch Step: 75 / 135 Loss: 6.93320894241333 Tokens per Sec: 18383.990372443615
Epoch Step: 80 / 135 Loss: 1.2997195720672607 Tokens per Sec: 19089.409801977716
Epoch Step: 85 / 135 Loss: 2.469538688659668 Tokens per Sec: 19161.04719908051
Epoch Step: 90 / 135 Loss: 1.908125638961792 Tokens per Sec: 17205.40296939393
Epoch Step: 95 / 135 Loss: 2.1060631275177 Tokens per Sec: 15795.5545824365
Epoch Step: 100 / 135 Loss: 29.8778076171875 Tokens per Sec: 15983.547455510705
Epoch Step: 105 / 135 Loss: 2.4381237030029297 Tokens per Sec: 15808.582269744878
Epoch Step: 110 / 135 Loss: 4.933412551879883 Tokens per Sec: 16456.799115325655
Epoch Step: 115 / 135 Loss: 5.824042797088623 Tokens per Sec: 16474.745707395672
Epoch Step: 120 / 135 Loss: 12.26545238494873 Tokens per Sec: 17462.40761300555
Epoch Step: 125 / 135 Loss: 7.151963710784912 Tokens per Sec: 15224.601567002393
Epoch Step: 130 / 135 Loss: 2.928401231765747 Tokens per Sec: 18019.069327485802
Epoch Step: 135 / 135 Loss: 3.211639404296875 Tokens per Sec: 16951.668188177886
Epoch ended with duration 0:00:14.233399
Train perplexity: 1.1471185315403283
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.644775
Validation perplexity: 1.2637962289674953
Epoch 120 / 1000
Epoch Step: 5 / 135 Loss: 1.7733094692230225 Tokens per Sec: 15524.644577193832
Epoch Step: 10 / 135 Loss: 3.9502363204956055 Tokens per Sec: 17645.069156331658
Epoch Step: 15 / 135 Loss: 4.306330680847168 Tokens per Sec: 20605.82136212586
Epoch Step: 20 / 135 Loss: 2.8836379051208496 Tokens per Sec: 17429.942581063853
Epoch Step: 25 / 135 Loss: 3.5015323162078857 Tokens per Sec: 19110.449198977498
Epoch Step: 30 / 135 Loss: 3.361926317214966 Tokens per Sec: 19600.663109956895
Epoch Step: 35 / 135 Loss: 1.2606507539749146 Tokens per Sec: 17135.333957301293
Epoch Step: 40 / 135 Loss: 3.3846940994262695 Tokens per Sec: 17943.45728448159
Epoch Step: 45 / 135 Loss: 3.998882293701172 Tokens per Sec: 18869.0596352707
Epoch Step: 50 / 135 Loss: 19.141202926635742 Tokens per Sec: 17941.809989663794
Epoch Step: 55 / 135 Loss: 2.8212215900421143 Tokens per Sec: 21279.825387261746
Epoch Step: 60 / 135 Loss: 1.7770259380340576 Tokens per Sec: 17297.92682977696
Epoch Step: 65 / 135 Loss: 1.0010631084442139 Tokens per Sec: 20219.74236394127
Epoch Step: 70 / 135 Loss: 1.633033275604248 Tokens per Sec: 18452.928175995086
Epoch Step: 75 / 135 Loss: 3.0400187969207764 Tokens per Sec: 18163.652038712615
Epoch Step: 80 / 135 Loss: 28.85083770751953 Tokens per Sec: 19748.58645962738
Epoch Step: 85 / 135 Loss: 1.713714838027954 Tokens per Sec: 19089.80276016436
Epoch Step: 90 / 135 Loss: 3.508826732635498 Tokens per Sec: 16861.270343769353
Epoch Step: 95 / 135 Loss: 21.042325973510742 Tokens per Sec: 17478.595378269365
Epoch Step: 100 / 135 Loss: 2.8631718158721924 Tokens per Sec: 18579.778996633813
Epoch Step: 105 / 135 Loss: 2.8757548332214355 Tokens per Sec: 17733.678745581827
Epoch Step: 110 / 135 Loss: 3.689922571182251 Tokens per Sec: 14902.105020567486
Epoch Step: 115 / 135 Loss: 13.974922180175781 Tokens per Sec: 15794.953071976015
Epoch Step: 120 / 135 Loss: 2.5911619663238525 Tokens per Sec: 16364.629399442436
Epoch Step: 125 / 135 Loss: 2.3336856365203857 Tokens per Sec: 15248.133693579615
Epoch Step: 130 / 135 Loss: 4.245214939117432 Tokens per Sec: 19312.908913929405
Epoch Step: 135 / 135 Loss: 2.1583032608032227 Tokens per Sec: 14106.080990069197
Epoch ended with duration 0:00:14.288348
Train perplexity: 1.1828048222551768
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651284
Validation perplexity: 1.294439638211492
Model saved checkpoint!
Epoch 121 / 1000
Epoch Step: 5 / 135 Loss: 17.86173439025879 Tokens per Sec: 15664.092773387743
Epoch Step: 10 / 135 Loss: 0.8319178223609924 Tokens per Sec: 16677.677458705522
Epoch Step: 15 / 135 Loss: 4.362277507781982 Tokens per Sec: 17172.877363462765
Epoch Step: 20 / 135 Loss: 0.659299373626709 Tokens per Sec: 16962.78455720537
Epoch Step: 25 / 135 Loss: 0.8066819906234741 Tokens per Sec: 18887.809221883017
Epoch Step: 30 / 135 Loss: 2.0395753383636475 Tokens per Sec: 17904.69753390033
Epoch Step: 35 / 135 Loss: 20.997486114501953 Tokens per Sec: 18397.2077918636
Epoch Step: 40 / 135 Loss: 1.0130438804626465 Tokens per Sec: 18946.580435358268
Epoch Step: 45 / 135 Loss: 3.972137928009033 Tokens per Sec: 19349.956548654307
Epoch Step: 50 / 135 Loss: 2.022874116897583 Tokens per Sec: 18512.22264451664
Epoch Step: 55 / 135 Loss: 1.3739196062088013 Tokens per Sec: 19731.32653487855
Epoch Step: 60 / 135 Loss: 3.226616859436035 Tokens per Sec: 15819.826288387861
Epoch Step: 65 / 135 Loss: 1.186400055885315 Tokens per Sec: 19520.627216146157
Epoch Step: 70 / 135 Loss: 1.5166184902191162 Tokens per Sec: 14674.371372730655
Epoch Step: 75 / 135 Loss: 1.567735195159912 Tokens per Sec: 18575.062774201033
Epoch Step: 80 / 135 Loss: 2.312255859375 Tokens per Sec: 20902.684664262913
Epoch Step: 85 / 135 Loss: 4.966061592102051 Tokens per Sec: 17027.02021475733
Epoch Step: 90 / 135 Loss: 3.4130699634552 Tokens per Sec: 19270.6458001074
Epoch Step: 95 / 135 Loss: 1.5051041841506958 Tokens per Sec: 21604.225742083945
Epoch Step: 100 / 135 Loss: 3.914447546005249 Tokens per Sec: 21959.11485966389
Epoch Step: 105 / 135 Loss: 1.4626561403274536 Tokens per Sec: 14916.59863550588
Epoch Step: 110 / 135 Loss: 2.8262505531311035 Tokens per Sec: 17130.327560444566
Epoch Step: 115 / 135 Loss: 2.712369918823242 Tokens per Sec: 17743.50673099695
Epoch Step: 120 / 135 Loss: 1.5464311838150024 Tokens per Sec: 16262.252862109226
Epoch Step: 125 / 135 Loss: 3.8175652027130127 Tokens per Sec: 17273.29472796143
Epoch Step: 130 / 135 Loss: 3.9286861419677734 Tokens per Sec: 16697.224564522687
Epoch Step: 135 / 135 Loss: 2.716036558151245 Tokens per Sec: 17027.449420142984
Epoch ended with duration 0:00:14.169646
Train perplexity: 1.1466138930187562
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.655929
Validation perplexity: 1.328110123670539
Epoch 122 / 1000
Epoch Step: 5 / 135 Loss: 2.5478856563568115 Tokens per Sec: 20062.079659773495
Epoch Step: 10 / 135 Loss: 3.534451961517334 Tokens per Sec: 18729.30735220376
Epoch Step: 15 / 135 Loss: 2.135749578475952 Tokens per Sec: 15832.521248074625
Epoch Step: 20 / 135 Loss: 2.777719736099243 Tokens per Sec: 18640.220062702178
Epoch Step: 25 / 135 Loss: 3.2311625480651855 Tokens per Sec: 17181.413655177825
Epoch Step: 30 / 135 Loss: 1.6834797859191895 Tokens per Sec: 18273.120150485025
Epoch Step: 35 / 135 Loss: 2.894278049468994 Tokens per Sec: 21608.50414868633
Epoch Step: 40 / 135 Loss: 2.9637451171875 Tokens per Sec: 14220.62017080834
Epoch Step: 45 / 135 Loss: 7.761809349060059 Tokens per Sec: 19089.913342156186
Epoch Step: 50 / 135 Loss: 2.418656349182129 Tokens per Sec: 17656.077964056618
Epoch Step: 55 / 135 Loss: 4.395730018615723 Tokens per Sec: 17166.576271592494
Epoch Step: 60 / 135 Loss: 10.816886901855469 Tokens per Sec: 18240.735923570475
Epoch Step: 65 / 135 Loss: 3.9984068870544434 Tokens per Sec: 19167.84330839169
Epoch Step: 70 / 135 Loss: 2.9583351612091064 Tokens per Sec: 14741.244976909134
Epoch Step: 75 / 135 Loss: 1.9178165197372437 Tokens per Sec: 21190.306018799667
Epoch Step: 80 / 135 Loss: 1.7621276378631592 Tokens per Sec: 15921.752139961083
Epoch Step: 85 / 135 Loss: 3.2636210918426514 Tokens per Sec: 19485.06051749354
Epoch Step: 90 / 135 Loss: 1.3396202325820923 Tokens per Sec: 16635.510842123953
Epoch Step: 95 / 135 Loss: 1.5603837966918945 Tokens per Sec: 21426.562308120705
Epoch Step: 100 / 135 Loss: 3.027270555496216 Tokens per Sec: 19206.923122916392
Epoch Step: 105 / 135 Loss: 3.250668525695801 Tokens per Sec: 17697.796185151583
Epoch Step: 110 / 135 Loss: 2.8375892639160156 Tokens per Sec: 15745.027559846458
Epoch Step: 115 / 135 Loss: 2.4811785221099854 Tokens per Sec: 17258.221969893504
Epoch Step: 120 / 135 Loss: 3.527635335922241 Tokens per Sec: 16291.311284041889
Epoch Step: 125 / 135 Loss: 2.6040120124816895 Tokens per Sec: 15197.488382536723
Epoch Step: 130 / 135 Loss: 2.412658214569092 Tokens per Sec: 16500.31024358407
Epoch Step: 135 / 135 Loss: 2.859508752822876 Tokens per Sec: 18076.842132516595
Epoch ended with duration 0:00:14.279287
Train perplexity: 1.110819502908681
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649004
Validation perplexity: 1.310958757702312
Epoch 123 / 1000
Epoch Step: 5 / 135 Loss: 4.599228858947754 Tokens per Sec: 14579.624003726023
Epoch Step: 10 / 135 Loss: 4.104710102081299 Tokens per Sec: 21577.439117363465
Epoch Step: 15 / 135 Loss: 1.2160520553588867 Tokens per Sec: 16025.637276297575
Epoch Step: 20 / 135 Loss: 2.1242856979370117 Tokens per Sec: 17503.44267574439
Epoch Step: 25 / 135 Loss: 11.14261245727539 Tokens per Sec: 21618.614578320576
Epoch Step: 30 / 135 Loss: 2.034209728240967 Tokens per Sec: 21446.1746005249
Epoch Step: 35 / 135 Loss: 1.5046755075454712 Tokens per Sec: 16686.441000538227
Epoch Step: 40 / 135 Loss: 1.9263277053833008 Tokens per Sec: 19439.480902945772
Epoch Step: 45 / 135 Loss: 2.5152950286865234 Tokens per Sec: 14734.642227525721
Epoch Step: 50 / 135 Loss: 2.1605496406555176 Tokens per Sec: 19500.405576184017
Epoch Step: 55 / 135 Loss: 6.2916460037231445 Tokens per Sec: 18049.53379376915
Epoch Step: 60 / 135 Loss: 7.613981246948242 Tokens per Sec: 17227.539789555485
Epoch Step: 65 / 135 Loss: 4.079622268676758 Tokens per Sec: 19881.444059409758
Epoch Step: 70 / 135 Loss: 18.360307693481445 Tokens per Sec: 17730.90787617236
Epoch Step: 75 / 135 Loss: 24.825572967529297 Tokens per Sec: 19079.678950861005
Epoch Step: 80 / 135 Loss: 26.035743713378906 Tokens per Sec: 17387.90889093673
Epoch Step: 85 / 135 Loss: 39.73874282836914 Tokens per Sec: 20290.987490454874
Epoch Step: 90 / 135 Loss: 3.0914182662963867 Tokens per Sec: 17889.657774977877
Epoch Step: 95 / 135 Loss: 14.043952941894531 Tokens per Sec: 20329.427274075857
Epoch Step: 100 / 135 Loss: 4.3607563972473145 Tokens per Sec: 17012.430540794452
Epoch Step: 105 / 135 Loss: 5.397310733795166 Tokens per Sec: 17103.02075716314
Epoch Step: 110 / 135 Loss: 6.161046028137207 Tokens per Sec: 16146.718329616895
Epoch Step: 115 / 135 Loss: 8.976764678955078 Tokens per Sec: 15903.12134209204
Epoch Step: 120 / 135 Loss: 8.693666458129883 Tokens per Sec: 17785.800736876125
Epoch Step: 125 / 135 Loss: 4.715546607971191 Tokens per Sec: 15852.082800524753
Epoch Step: 130 / 135 Loss: 3.8666036128997803 Tokens per Sec: 17197.38809214832
Epoch Step: 135 / 135 Loss: 3.5555033683776855 Tokens per Sec: 14756.932818584279
Epoch ended with duration 0:00:14.222623
Train perplexity: 1.3472049757352016
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.644711
Validation perplexity: 1.223510386160975
Epoch 124 / 1000
Epoch Step: 5 / 135 Loss: 3.20119047164917 Tokens per Sec: 18494.724268855007
Epoch Step: 10 / 135 Loss: 2.1408748626708984 Tokens per Sec: 16082.001126348956
Epoch Step: 15 / 135 Loss: 2.7516396045684814 Tokens per Sec: 20126.890959704437
Epoch Step: 20 / 135 Loss: 1.6946039199829102 Tokens per Sec: 21515.004437746175
Epoch Step: 25 / 135 Loss: 1.922171711921692 Tokens per Sec: 15418.147095200897
Epoch Step: 30 / 135 Loss: 3.555370569229126 Tokens per Sec: 14347.684324270247
Epoch Step: 35 / 135 Loss: 6.131720542907715 Tokens per Sec: 19465.47037243803
Epoch Step: 40 / 135 Loss: 4.443221092224121 Tokens per Sec: 16648.318109520562
Epoch Step: 45 / 135 Loss: 3.0676519870758057 Tokens per Sec: 19886.065437409776
Epoch Step: 50 / 135 Loss: 3.963219165802002 Tokens per Sec: 16215.592727238667
Epoch Step: 55 / 135 Loss: 3.7558913230895996 Tokens per Sec: 19156.97976924572
Epoch Step: 60 / 135 Loss: 2.561202049255371 Tokens per Sec: 19157.584977437764
Epoch Step: 65 / 135 Loss: 4.501626491546631 Tokens per Sec: 18229.965105967145
Epoch Step: 70 / 135 Loss: 3.192039728164673 Tokens per Sec: 19721.611756568607
Epoch Step: 75 / 135 Loss: 1.5411427021026611 Tokens per Sec: 18774.86296505621
Epoch Step: 80 / 135 Loss: 1.8777868747711182 Tokens per Sec: 19797.60984205439
Epoch Step: 85 / 135 Loss: 3.9616219997406006 Tokens per Sec: 18957.64759534152
Epoch Step: 90 / 135 Loss: 1.5934672355651855 Tokens per Sec: 17739.943438757087
Epoch Step: 95 / 135 Loss: 1.9260615110397339 Tokens per Sec: 17134.62164887092
Epoch Step: 100 / 135 Loss: 2.461850166320801 Tokens per Sec: 19456.39571552047
Epoch Step: 105 / 135 Loss: 18.009082794189453 Tokens per Sec: 14937.479993412593
Epoch Step: 110 / 135 Loss: 3.665224552154541 Tokens per Sec: 17040.563971419047
Epoch Step: 115 / 135 Loss: 3.0898756980895996 Tokens per Sec: 17063.633656242448
Epoch Step: 120 / 135 Loss: 3.0761356353759766 Tokens per Sec: 18452.10588733068
Epoch Step: 125 / 135 Loss: 1.4179275035858154 Tokens per Sec: 16666.18837231284
Epoch Step: 130 / 135 Loss: 2.547551155090332 Tokens per Sec: 15362.31113039745
Epoch Step: 135 / 135 Loss: 1.7159957885742188 Tokens per Sec: 17266.518990177996
Epoch ended with duration 0:00:14.175879
Train perplexity: 1.1297076565729598
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.List < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646289
Validation perplexity: 1.2575871652764605
Epoch 125 / 1000
Epoch Step: 5 / 135 Loss: 3.6096930503845215 Tokens per Sec: 19038.087264034457
Epoch Step: 10 / 135 Loss: 3.0017812252044678 Tokens per Sec: 19626.902303144187
Epoch Step: 15 / 135 Loss: 3.1572344303131104 Tokens per Sec: 19370.063009914622
Epoch Step: 20 / 135 Loss: 1.130944848060608 Tokens per Sec: 18507.884585241027
Epoch Step: 25 / 135 Loss: 2.135737419128418 Tokens per Sec: 21408.801173173597
Epoch Step: 30 / 135 Loss: 1.3079901933670044 Tokens per Sec: 17486.93337279055
Epoch Step: 35 / 135 Loss: 1.8221614360809326 Tokens per Sec: 21604.352243454963
Epoch Step: 40 / 135 Loss: 2.8709473609924316 Tokens per Sec: 17786.791483535977
Epoch Step: 45 / 135 Loss: 30.94561767578125 Tokens per Sec: 16777.277420075214
Epoch Step: 50 / 135 Loss: 1.92767333984375 Tokens per Sec: 16943.325105316442
Epoch Step: 55 / 135 Loss: 2.3964383602142334 Tokens per Sec: 20488.206843468754
Epoch Step: 60 / 135 Loss: 4.154178619384766 Tokens per Sec: 13455.938597815591
Epoch Step: 65 / 135 Loss: 13.44434928894043 Tokens per Sec: 18230.86988969533
Epoch Step: 70 / 135 Loss: 4.607024192810059 Tokens per Sec: 18466.42573075378
Epoch Step: 75 / 135 Loss: 2.472132921218872 Tokens per Sec: 17965.635681149393
Epoch Step: 80 / 135 Loss: 4.2490620613098145 Tokens per Sec: 18474.935309427896
Epoch Step: 85 / 135 Loss: 1.5438340902328491 Tokens per Sec: 19033.42969011442
Epoch Step: 90 / 135 Loss: 1.7613091468811035 Tokens per Sec: 21174.57533685924
Epoch Step: 95 / 135 Loss: 4.079345226287842 Tokens per Sec: 17597.86951472066
Epoch Step: 100 / 135 Loss: 2.343853712081909 Tokens per Sec: 18682.73619137213
Epoch Step: 105 / 135 Loss: 2.8998587131500244 Tokens per Sec: 15920.591762594046
Epoch Step: 110 / 135 Loss: 2.2241909503936768 Tokens per Sec: 18783.370176007353
Epoch Step: 115 / 135 Loss: 2.190491199493408 Tokens per Sec: 16833.276823707525
Epoch Step: 120 / 135 Loss: 2.9679806232452393 Tokens per Sec: 16120.20504518676
Epoch Step: 125 / 135 Loss: 1.3600341081619263 Tokens per Sec: 17169.294351343968
Epoch Step: 130 / 135 Loss: 2.3964388370513916 Tokens per Sec: 15632.145512287248
Epoch Step: 135 / 135 Loss: 2.2605772018432617 Tokens per Sec: 15696.27826234768
Epoch ended with duration 0:00:14.096998
Train perplexity: 1.1346002166705988
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.644247
Validation perplexity: 1.2794321259401273
Model saved checkpoint!
Epoch 126 / 1000
Epoch Step: 5 / 135 Loss: 2.3941893577575684 Tokens per Sec: 19876.117487746757
Epoch Step: 10 / 135 Loss: 3.970094919204712 Tokens per Sec: 18099.86271408992
Epoch Step: 15 / 135 Loss: 0.9954921007156372 Tokens per Sec: 20224.284915347635
Epoch Step: 20 / 135 Loss: 2.5986363887786865 Tokens per Sec: 15439.414009703238
Epoch Step: 25 / 135 Loss: 2.4760026931762695 Tokens per Sec: 19047.59235111948
Epoch Step: 30 / 135 Loss: 1.5511016845703125 Tokens per Sec: 17184.591209173814
Epoch Step: 35 / 135 Loss: 1.368138074874878 Tokens per Sec: 19031.601064409937
Epoch Step: 40 / 135 Loss: 2.7806692123413086 Tokens per Sec: 15093.535418255366
Epoch Step: 45 / 135 Loss: 1.6424809694290161 Tokens per Sec: 19278.69764055061
Epoch Step: 50 / 135 Loss: 2.2622311115264893 Tokens per Sec: 13817.098421457384
Epoch Step: 55 / 135 Loss: 0.8459548354148865 Tokens per Sec: 18349.39658934379
Epoch Step: 60 / 135 Loss: 1.8007187843322754 Tokens per Sec: 17906.34987932277
Epoch Step: 65 / 135 Loss: 2.8484702110290527 Tokens per Sec: 14759.220938513596
Epoch Step: 70 / 135 Loss: 4.467533111572266 Tokens per Sec: 16481.842390875277
Epoch Step: 75 / 135 Loss: 2.125453472137451 Tokens per Sec: 20244.920597518427
Epoch Step: 80 / 135 Loss: 2.1035234928131104 Tokens per Sec: 18921.95367162018
Epoch Step: 85 / 135 Loss: 2.1168699264526367 Tokens per Sec: 20251.960003725017
Epoch Step: 90 / 135 Loss: 3.778844118118286 Tokens per Sec: 19785.69264102164
Epoch Step: 95 / 135 Loss: 0.6717022657394409 Tokens per Sec: 21349.087165217115
Epoch Step: 100 / 135 Loss: 0.6812267899513245 Tokens per Sec: 18435.334227267023
Epoch Step: 105 / 135 Loss: 0.9191338419914246 Tokens per Sec: 16752.186708217192
Epoch Step: 110 / 135 Loss: 2.0858936309814453 Tokens per Sec: 15407.914474443534
Epoch Step: 115 / 135 Loss: 8.356986999511719 Tokens per Sec: 14851.462280072774
Epoch Step: 120 / 135 Loss: 2.3933725357055664 Tokens per Sec: 17077.959721761334
Epoch Step: 125 / 135 Loss: 3.36134672164917 Tokens per Sec: 17093.648264650532
Epoch Step: 130 / 135 Loss: 1.6447941064834595 Tokens per Sec: 17865.424866470137
Epoch Step: 135 / 135 Loss: 1.7591983079910278 Tokens per Sec: 18359.28438123901
Epoch ended with duration 0:00:14.265270
Train perplexity: 1.1307851370356916
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647204
Validation perplexity: 1.222450293675617
Epoch 127 / 1000
Epoch Step: 5 / 135 Loss: 21.575284957885742 Tokens per Sec: 18879.435129785677
Epoch Step: 10 / 135 Loss: 3.2140939235687256 Tokens per Sec: 16338.55788059227
Epoch Step: 15 / 135 Loss: 1.029207706451416 Tokens per Sec: 21127.84596365155
Epoch Step: 20 / 135 Loss: 4.161708354949951 Tokens per Sec: 19759.61436437992
Epoch Step: 25 / 135 Loss: 0.8741800785064697 Tokens per Sec: 16836.582908454457
Epoch Step: 30 / 135 Loss: 2.339008331298828 Tokens per Sec: 17480.24245531028
Epoch Step: 35 / 135 Loss: 20.39735984802246 Tokens per Sec: 20761.3977287875
Epoch Step: 40 / 135 Loss: 1.2413113117218018 Tokens per Sec: 19152.70783874462
Epoch Step: 45 / 135 Loss: 4.727120876312256 Tokens per Sec: 14963.692562757984
Epoch Step: 50 / 135 Loss: 0.8279533982276917 Tokens per Sec: 18859.41633834014
Epoch Step: 55 / 135 Loss: 3.7736754417419434 Tokens per Sec: 18517.10877347438
Epoch Step: 60 / 135 Loss: 1.9430205821990967 Tokens per Sec: 14898.668955093559
Epoch Step: 65 / 135 Loss: 8.791566848754883 Tokens per Sec: 15390.499718084713
Epoch Step: 70 / 135 Loss: 0.8590989112854004 Tokens per Sec: 17781.437224836172
Epoch Step: 75 / 135 Loss: 1.630041480064392 Tokens per Sec: 18501.71246428292
Epoch Step: 80 / 135 Loss: 3.843838930130005 Tokens per Sec: 17764.126227049997
Epoch Step: 85 / 135 Loss: 2.6496803760528564 Tokens per Sec: 19718.667153582097
Epoch Step: 90 / 135 Loss: 3.03720760345459 Tokens per Sec: 20563.763095306236
Epoch Step: 95 / 135 Loss: 2.5489346981048584 Tokens per Sec: 20096.867213038724
Epoch Step: 100 / 135 Loss: 2.6669938564300537 Tokens per Sec: 19270.4305113388
Epoch Step: 105 / 135 Loss: 1.848110318183899 Tokens per Sec: 17750.457602642826
Epoch Step: 110 / 135 Loss: 2.8827311992645264 Tokens per Sec: 15512.94648465543
Epoch Step: 115 / 135 Loss: 1.2947626113891602 Tokens per Sec: 15706.924057682447
Epoch Step: 120 / 135 Loss: 2.871804714202881 Tokens per Sec: 17890.52112083578
Epoch Step: 125 / 135 Loss: 10.930885314941406 Tokens per Sec: 16868.851414565746
Epoch Step: 130 / 135 Loss: 2.420731782913208 Tokens per Sec: 18272.86051657206
Epoch Step: 135 / 135 Loss: 1.6418488025665283 Tokens per Sec: 16016.230208156156
Epoch ended with duration 0:00:14.187066
Train perplexity: 1.1192840289925368
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.641934
Validation perplexity: 1.2012080081535446
Epoch 128 / 1000
Epoch Step: 5 / 135 Loss: 2.9248788356781006 Tokens per Sec: 18481.683642231164
Epoch Step: 10 / 135 Loss: 3.4498775005340576 Tokens per Sec: 19865.116111759668
Epoch Step: 15 / 135 Loss: 2.4423301219940186 Tokens per Sec: 18132.01218036877
Epoch Step: 20 / 135 Loss: 2.123901844024658 Tokens per Sec: 19001.701126903532
Epoch Step: 25 / 135 Loss: 1.8998886346817017 Tokens per Sec: 16482.663092076975
Epoch Step: 30 / 135 Loss: 2.7929913997650146 Tokens per Sec: 21570.93354649132
Epoch Step: 35 / 135 Loss: 1.2642496824264526 Tokens per Sec: 16336.030737552333
Epoch Step: 40 / 135 Loss: 17.749399185180664 Tokens per Sec: 20723.17254356733
Epoch Step: 45 / 135 Loss: 3.0867764949798584 Tokens per Sec: 16735.96466202571
Epoch Step: 50 / 135 Loss: 2.5275299549102783 Tokens per Sec: 18360.574532660354
Epoch Step: 55 / 135 Loss: 3.197737693786621 Tokens per Sec: 18604.956897543274
Epoch Step: 60 / 135 Loss: 1.2869231700897217 Tokens per Sec: 15827.85784524278
Epoch Step: 65 / 135 Loss: 1.705410361289978 Tokens per Sec: 16694.533629861624
Epoch Step: 70 / 135 Loss: 16.09427261352539 Tokens per Sec: 20381.179409607368
Epoch Step: 75 / 135 Loss: 2.541624069213867 Tokens per Sec: 20928.096191359407
Epoch Step: 80 / 135 Loss: 2.276782274246216 Tokens per Sec: 18404.457145084743
Epoch Step: 85 / 135 Loss: 2.1512365341186523 Tokens per Sec: 18038.7417330004
Epoch Step: 90 / 135 Loss: 0.7902793884277344 Tokens per Sec: 17930.689751612583
Epoch Step: 95 / 135 Loss: 3.9797348976135254 Tokens per Sec: 18632.279563761072
Epoch Step: 100 / 135 Loss: 1.1365822553634644 Tokens per Sec: 17397.0397120173
Epoch Step: 105 / 135 Loss: 2.3770084381103516 Tokens per Sec: 14664.680001388324
Epoch Step: 110 / 135 Loss: 2.844574451446533 Tokens per Sec: 16876.67158260948
Epoch Step: 115 / 135 Loss: 2.3472740650177 Tokens per Sec: 17601.519055824803
Epoch Step: 120 / 135 Loss: 2.765153169631958 Tokens per Sec: 17856.30863858887
Epoch Step: 125 / 135 Loss: 2.1462881565093994 Tokens per Sec: 15193.347609800683
Epoch Step: 130 / 135 Loss: 0.9332767724990845 Tokens per Sec: 16861.139436473106
Epoch Step: 135 / 135 Loss: 2.668004035949707 Tokens per Sec: 17392.497552786615
Epoch ended with duration 0:00:14.170608
Train perplexity: 1.1133684139088091
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649987
Validation perplexity: 1.3347618766232408
Epoch 129 / 1000
Epoch Step: 5 / 135 Loss: 1.4074609279632568 Tokens per Sec: 17502.223094060446
Epoch Step: 10 / 135 Loss: 1.783726453781128 Tokens per Sec: 20924.989077530045
Epoch Step: 15 / 135 Loss: 3.690680742263794 Tokens per Sec: 18316.884361983917
Epoch Step: 20 / 135 Loss: 1.047725796699524 Tokens per Sec: 16604.828234111454
Epoch Step: 25 / 135 Loss: 20.419605255126953 Tokens per Sec: 18157.49147657626
Epoch Step: 30 / 135 Loss: 4.875597953796387 Tokens per Sec: 20596.471228798004
Epoch Step: 35 / 135 Loss: 2.5298798084259033 Tokens per Sec: 17244.18155641263
Epoch Step: 40 / 135 Loss: 1.7621134519577026 Tokens per Sec: 16695.62922089675
Epoch Step: 45 / 135 Loss: 2.331040859222412 Tokens per Sec: 19182.243956734437
Epoch Step: 50 / 135 Loss: 2.9497017860412598 Tokens per Sec: 16740.17101226957
Epoch Step: 55 / 135 Loss: 3.546996593475342 Tokens per Sec: 19373.62180767295
Epoch Step: 60 / 135 Loss: 1.1869621276855469 Tokens per Sec: 18771.88985592624
Epoch Step: 65 / 135 Loss: 3.190763473510742 Tokens per Sec: 20001.126026104637
Epoch Step: 70 / 135 Loss: 2.6980478763580322 Tokens per Sec: 19460.74557734682
Epoch Step: 75 / 135 Loss: 1.355674147605896 Tokens per Sec: 18082.612485845195
Epoch Step: 80 / 135 Loss: 1.9859460592269897 Tokens per Sec: 17351.566791586632
Epoch Step: 85 / 135 Loss: 11.230803489685059 Tokens per Sec: 19197.919688703332
Epoch Step: 90 / 135 Loss: 7.9864501953125 Tokens per Sec: 20910.297513256937
Epoch Step: 95 / 135 Loss: 3.9560859203338623 Tokens per Sec: 17094.721717941804
Epoch Step: 100 / 135 Loss: 4.22479248046875 Tokens per Sec: 18845.17442701289
Epoch Step: 105 / 135 Loss: 6.244338512420654 Tokens per Sec: 17625.774592806054
Epoch Step: 110 / 135 Loss: 2.8862931728363037 Tokens per Sec: 17926.671817628645
Epoch Step: 115 / 135 Loss: 3.0052013397216797 Tokens per Sec: 16709.934239629245
Epoch Step: 120 / 135 Loss: 4.9336628913879395 Tokens per Sec: 16810.31078940008
Epoch Step: 125 / 135 Loss: 1.61073637008667 Tokens per Sec: 15554.596277927032
Epoch Step: 130 / 135 Loss: 4.015920639038086 Tokens per Sec: 16950.81531184824
Epoch Step: 135 / 135 Loss: 1.6854705810546875 Tokens per Sec: 16499.596543219886
Epoch ended with duration 0:00:14.078867
Train perplexity: 1.1705939507893444
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.lang.String < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648857
Validation perplexity: 1.3790664271023871
Epoch 130 / 1000
Epoch Step: 5 / 135 Loss: 3.5839712619781494 Tokens per Sec: 18971.81536488804
Epoch Step: 10 / 135 Loss: 6.366413116455078 Tokens per Sec: 16830.73177638406
Epoch Step: 15 / 135 Loss: 3.2134509086608887 Tokens per Sec: 21834.16330697881
Epoch Step: 20 / 135 Loss: 1.6101417541503906 Tokens per Sec: 19302.665608956395
Epoch Step: 25 / 135 Loss: 0.7623881101608276 Tokens per Sec: 18054.59866464438
Epoch Step: 30 / 135 Loss: 3.2467315196990967 Tokens per Sec: 18512.013390378666
Epoch Step: 35 / 135 Loss: 3.9956955909729004 Tokens per Sec: 17529.133535698955
Epoch Step: 40 / 135 Loss: 15.229241371154785 Tokens per Sec: 15401.630383465352
Epoch Step: 45 / 135 Loss: 1.6131772994995117 Tokens per Sec: 16501.210261804124
Epoch Step: 50 / 135 Loss: 3.7865712642669678 Tokens per Sec: 19174.244537398143
Epoch Step: 55 / 135 Loss: 1.453546404838562 Tokens per Sec: 16667.75155989197
Epoch Step: 60 / 135 Loss: 2.8510971069335938 Tokens per Sec: 17679.23975082378
Epoch Step: 65 / 135 Loss: 1.6066508293151855 Tokens per Sec: 17809.610562676873
Epoch Step: 70 / 135 Loss: 8.084939002990723 Tokens per Sec: 17970.60225574629
Epoch Step: 75 / 135 Loss: 2.458049774169922 Tokens per Sec: 21175.959314087417
Epoch Step: 80 / 135 Loss: 2.3811070919036865 Tokens per Sec: 17489.522463699763
Epoch Step: 85 / 135 Loss: 2.8168892860412598 Tokens per Sec: 19784.156231468834
Epoch Step: 90 / 135 Loss: 1.9410889148712158 Tokens per Sec: 19098.50097181139
Epoch Step: 95 / 135 Loss: 1.7337510585784912 Tokens per Sec: 18471.823093411334
Epoch Step: 100 / 135 Loss: 2.111626148223877 Tokens per Sec: 17011.515222141563
Epoch Step: 105 / 135 Loss: 2.807067394256592 Tokens per Sec: 16803.219716182168
Epoch Step: 110 / 135 Loss: 3.51888108253479 Tokens per Sec: 15647.505992980832
Epoch Step: 115 / 135 Loss: 2.791252613067627 Tokens per Sec: 17194.897307798845
Epoch Step: 120 / 135 Loss: 2.6493489742279053 Tokens per Sec: 15573.708557919621
Epoch Step: 125 / 135 Loss: 1.7593505382537842 Tokens per Sec: 16984.41750620908
Epoch Step: 130 / 135 Loss: 2.944011926651001 Tokens per Sec: 17359.637562426007
Epoch Step: 135 / 135 Loss: 3.400665044784546 Tokens per Sec: 16314.247425178306
Epoch ended with duration 0:00:14.291737
Train perplexity: 1.136526157385801
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653467
Validation perplexity: 1.3000152541587167
Model saved checkpoint!
Epoch 131 / 1000
Epoch Step: 5 / 135 Loss: 3.2017385959625244 Tokens per Sec: 18094.83755357439
Epoch Step: 10 / 135 Loss: 1.3373175859451294 Tokens per Sec: 18023.090685916413
Epoch Step: 15 / 135 Loss: 1.669761061668396 Tokens per Sec: 18701.463785224183
Epoch Step: 20 / 135 Loss: 2.0407609939575195 Tokens per Sec: 18853.02443571539
Epoch Step: 25 / 135 Loss: 3.3220999240875244 Tokens per Sec: 15418.309892655765
Epoch Step: 30 / 135 Loss: 0.8300763368606567 Tokens per Sec: 16979.863776372487
Epoch Step: 35 / 135 Loss: 1.6893095970153809 Tokens per Sec: 18792.268744467045
Epoch Step: 40 / 135 Loss: 1.2564548254013062 Tokens per Sec: 19265.111318623265
Epoch Step: 45 / 135 Loss: 3.5865683555603027 Tokens per Sec: 17618.752013699235
Epoch Step: 50 / 135 Loss: 2.608358860015869 Tokens per Sec: 19047.530955411792
Epoch Step: 55 / 135 Loss: 1.5650944709777832 Tokens per Sec: 21931.348498558826
Epoch Step: 60 / 135 Loss: 2.3826870918273926 Tokens per Sec: 16746.11198833132
Epoch Step: 65 / 135 Loss: 3.702566623687744 Tokens per Sec: 16481.698745046717
Epoch Step: 70 / 135 Loss: 1.4251594543457031 Tokens per Sec: 17985.073428373475
Epoch Step: 75 / 135 Loss: 4.143225193023682 Tokens per Sec: 16528.820405419156
Epoch Step: 80 / 135 Loss: 1.6630829572677612 Tokens per Sec: 20600.093331107302
Epoch Step: 85 / 135 Loss: 3.939652442932129 Tokens per Sec: 18420.93886014369
Epoch Step: 90 / 135 Loss: 0.9078964591026306 Tokens per Sec: 18539.68777753948
Epoch Step: 95 / 135 Loss: 2.2118899822235107 Tokens per Sec: 19025.87183591906
Epoch Step: 100 / 135 Loss: 3.0386369228363037 Tokens per Sec: 18523.447591640288
Epoch Step: 105 / 135 Loss: 2.5139994621276855 Tokens per Sec: 17766.454503710494
Epoch Step: 110 / 135 Loss: 1.3798394203186035 Tokens per Sec: 17763.794649620584
Epoch Step: 115 / 135 Loss: 1.8135732412338257 Tokens per Sec: 16354.995559033712
Epoch Step: 120 / 135 Loss: 1.38417387008667 Tokens per Sec: 16348.982932024794
Epoch Step: 125 / 135 Loss: 1.8089007139205933 Tokens per Sec: 16177.170202777035
Epoch Step: 130 / 135 Loss: 2.1370062828063965 Tokens per Sec: 15780.550024988164
Epoch Step: 135 / 135 Loss: 2.490487575531006 Tokens per Sec: 14715.492241698883
Epoch ended with duration 0:00:14.290321
Train perplexity: 1.1060144000038479
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645019
Validation perplexity: 1.1793672613482324
Model saved best_on_validation!
Epoch 132 / 1000
Epoch Step: 5 / 135 Loss: 0.6194068193435669 Tokens per Sec: 15836.611778675966
Epoch Step: 10 / 135 Loss: 3.8593990802764893 Tokens per Sec: 19798.952589454202
Epoch Step: 15 / 135 Loss: 4.61644172668457 Tokens per Sec: 16997.643856615414
Epoch Step: 20 / 135 Loss: 3.4614951610565186 Tokens per Sec: 20222.95323557446
Epoch Step: 25 / 135 Loss: 2.216862201690674 Tokens per Sec: 18781.63138350873
Epoch Step: 30 / 135 Loss: 1.388645887374878 Tokens per Sec: 17253.30259698306
Epoch Step: 35 / 135 Loss: 1.7392174005508423 Tokens per Sec: 17074.436508085237
Epoch Step: 40 / 135 Loss: 1.945305347442627 Tokens per Sec: 17207.78782304886
Epoch Step: 45 / 135 Loss: 20.78886604309082 Tokens per Sec: 16158.719887043666
Epoch Step: 50 / 135 Loss: 1.5808537006378174 Tokens per Sec: 18447.003804634678
Epoch Step: 55 / 135 Loss: 1.5111746788024902 Tokens per Sec: 19227.03373208294
Epoch Step: 60 / 135 Loss: 0.8481099009513855 Tokens per Sec: 21371.06702501299
Epoch Step: 65 / 135 Loss: 0.798528254032135 Tokens per Sec: 15123.418568193085
Epoch Step: 70 / 135 Loss: 28.281869888305664 Tokens per Sec: 20162.544959420196
Epoch Step: 75 / 135 Loss: 2.9450619220733643 Tokens per Sec: 18304.36712514547
Epoch Step: 80 / 135 Loss: 2.201369285583496 Tokens per Sec: 18708.79534016831
Epoch Step: 85 / 135 Loss: 0.818244218826294 Tokens per Sec: 19863.84433362073
Epoch Step: 90 / 135 Loss: 4.443263530731201 Tokens per Sec: 20431.024564428793
Epoch Step: 95 / 135 Loss: 2.514967918395996 Tokens per Sec: 18630.638117870123
Epoch Step: 100 / 135 Loss: 3.8751840591430664 Tokens per Sec: 16480.088498890338
Epoch Step: 105 / 135 Loss: 1.1429061889648438 Tokens per Sec: 15997.109532317083
Epoch Step: 110 / 135 Loss: 2.217008590698242 Tokens per Sec: 19016.167461360674
Epoch Step: 115 / 135 Loss: 3.8546142578125 Tokens per Sec: 16098.099779634189
Epoch Step: 120 / 135 Loss: 4.0985107421875 Tokens per Sec: 16694.83954049413
Epoch Step: 125 / 135 Loss: 2.6561834812164307 Tokens per Sec: 17132.435733266695
Epoch Step: 130 / 135 Loss: 2.6900899410247803 Tokens per Sec: 14813.735298125739
Epoch Step: 135 / 135 Loss: 1.5907893180847168 Tokens per Sec: 16113.038773630937
Epoch ended with duration 0:00:14.250569
Train perplexity: 1.1599152479122388
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.655372
Validation perplexity: 1.3545831484044142
Epoch 133 / 1000
Epoch Step: 5 / 135 Loss: 0.8577096462249756 Tokens per Sec: 19179.741655712995
Epoch Step: 10 / 135 Loss: 3.9666831493377686 Tokens per Sec: 17234.657386248233
Epoch Step: 15 / 135 Loss: 3.721662759780884 Tokens per Sec: 21489.174884096803
Epoch Step: 20 / 135 Loss: 3.462203025817871 Tokens per Sec: 14387.333656005268
Epoch Step: 25 / 135 Loss: 0.5411952137947083 Tokens per Sec: 15363.935192603858
Epoch Step: 30 / 135 Loss: 2.6326165199279785 Tokens per Sec: 15706.870656959183
Epoch Step: 35 / 135 Loss: 3.0976150035858154 Tokens per Sec: 19270.418295126834
Epoch Step: 40 / 135 Loss: 1.3275772333145142 Tokens per Sec: 17356.73529497518
Epoch Step: 45 / 135 Loss: 4.964125156402588 Tokens per Sec: 18302.76338548205
Epoch Step: 50 / 135 Loss: 1.66804039478302 Tokens per Sec: 17740.346669771312
Epoch Step: 55 / 135 Loss: 1.3289011716842651 Tokens per Sec: 18685.34092059796
Epoch Step: 60 / 135 Loss: 1.5101786851882935 Tokens per Sec: 17538.411919739854
Epoch Step: 65 / 135 Loss: 3.1144237518310547 Tokens per Sec: 19039.62324426477
Epoch Step: 70 / 135 Loss: 4.006285667419434 Tokens per Sec: 19366.358737038863
Epoch Step: 75 / 135 Loss: 3.016106128692627 Tokens per Sec: 17675.953347855644
Epoch Step: 80 / 135 Loss: 1.1465263366699219 Tokens per Sec: 20412.567991351152
Epoch Step: 85 / 135 Loss: 3.20268177986145 Tokens per Sec: 20118.03670400816
Epoch Step: 90 / 135 Loss: 22.37745475769043 Tokens per Sec: 20127.56829461057
Epoch Step: 95 / 135 Loss: 2.8122944831848145 Tokens per Sec: 16285.752464101091
Epoch Step: 100 / 135 Loss: 48.36857604980469 Tokens per Sec: 19079.98077817366
Epoch Step: 105 / 135 Loss: 3.015700101852417 Tokens per Sec: 16180.520975242021
Epoch Step: 110 / 135 Loss: 1.0913240909576416 Tokens per Sec: 15383.98419245735
Epoch Step: 115 / 135 Loss: 1.5502969026565552 Tokens per Sec: 17713.177665876465
Epoch Step: 120 / 135 Loss: 1.1527061462402344 Tokens per Sec: 18094.200429489945
Epoch Step: 125 / 135 Loss: 2.4874162673950195 Tokens per Sec: 17079.405964088015
Epoch Step: 130 / 135 Loss: 2.35331130027771 Tokens per Sec: 15790.38180865769
Epoch Step: 135 / 135 Loss: 2.1414477825164795 Tokens per Sec: 17651.487431050056
Epoch ended with duration 0:00:14.209632
Train perplexity: 1.157590438326473
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.641975
Validation perplexity: 1.2272403297830041
Epoch 134 / 1000
Epoch Step: 5 / 135 Loss: 0.7713252305984497 Tokens per Sec: 17991.384438206293
Epoch Step: 10 / 135 Loss: 2.4883720874786377 Tokens per Sec: 18026.31196006078
Epoch Step: 15 / 135 Loss: 0.805757999420166 Tokens per Sec: 18683.034860824275
Epoch Step: 20 / 135 Loss: 2.6584136486053467 Tokens per Sec: 18608.223056659
Epoch Step: 25 / 135 Loss: 0.8571510910987854 Tokens per Sec: 18336.96858836097
Epoch Step: 30 / 135 Loss: 2.4148027896881104 Tokens per Sec: 17134.999443299817
Epoch Step: 35 / 135 Loss: 1.0437755584716797 Tokens per Sec: 19526.24057805458
Epoch Step: 40 / 135 Loss: 2.362353801727295 Tokens per Sec: 16413.162641554296
Epoch Step: 45 / 135 Loss: 1.8656901121139526 Tokens per Sec: 17150.179296009723
Epoch Step: 50 / 135 Loss: 5.426871299743652 Tokens per Sec: 16334.90532760838
Epoch Step: 55 / 135 Loss: 2.3560454845428467 Tokens per Sec: 20230.693958807802
Epoch Step: 60 / 135 Loss: 3.509028911590576 Tokens per Sec: 15766.904735853848
Epoch Step: 65 / 135 Loss: 3.274846315383911 Tokens per Sec: 15418.092235948126
Epoch Step: 70 / 135 Loss: 3.0348973274230957 Tokens per Sec: 19171.398561525835
Epoch Step: 75 / 135 Loss: 1.5139464139938354 Tokens per Sec: 19927.456164292016
Epoch Step: 80 / 135 Loss: 0.9173405766487122 Tokens per Sec: 18319.99485512059
Epoch Step: 85 / 135 Loss: 1.5713835954666138 Tokens per Sec: 20167.063547241945
Epoch Step: 90 / 135 Loss: 3.461005687713623 Tokens per Sec: 15625.015508081107
Epoch Step: 95 / 135 Loss: 3.402843952178955 Tokens per Sec: 18644.722509899482
Epoch Step: 100 / 135 Loss: 2.187309980392456 Tokens per Sec: 15019.855236848834
Epoch Step: 105 / 135 Loss: 1.5742924213409424 Tokens per Sec: 16196.431577171747
Epoch Step: 110 / 135 Loss: 2.470327615737915 Tokens per Sec: 17681.35017448155
Epoch Step: 115 / 135 Loss: 1.5453273057937622 Tokens per Sec: 13219.671730699763
Epoch Step: 120 / 135 Loss: 2.8270576000213623 Tokens per Sec: 15407.040235431527
Epoch Step: 125 / 135 Loss: 1.7539033889770508 Tokens per Sec: 16731.791732116784
Epoch Step: 130 / 135 Loss: 1.834001064300537 Tokens per Sec: 15691.552547854493
Epoch Step: 135 / 135 Loss: 1.2910280227661133 Tokens per Sec: 15881.965578356307
Epoch ended with duration 0:00:14.767295
Train perplexity: 1.1129448215541136
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.723323
Validation perplexity: 1.3030209703548243
Epoch 135 / 1000
Epoch Step: 5 / 135 Loss: 2.9790334701538086 Tokens per Sec: 15089.103081037683
Epoch Step: 10 / 135 Loss: 1.3284432888031006 Tokens per Sec: 17610.801188084683
Epoch Step: 15 / 135 Loss: 1.6665846109390259 Tokens per Sec: 17418.860696376745
Epoch Step: 20 / 135 Loss: 0.5749577283859253 Tokens per Sec: 17720.311738427346
Epoch Step: 25 / 135 Loss: 4.155327796936035 Tokens per Sec: 16573.42535854453
Epoch Step: 30 / 135 Loss: 2.8092164993286133 Tokens per Sec: 17666.466467588354
Epoch Step: 35 / 135 Loss: 2.375149965286255 Tokens per Sec: 18312.634275562963
Epoch Step: 40 / 135 Loss: 9.234298706054688 Tokens per Sec: 16014.950343148479
Epoch Step: 45 / 135 Loss: 0.5981650352478027 Tokens per Sec: 17631.09999504526
Epoch Step: 50 / 135 Loss: 3.1448419094085693 Tokens per Sec: 17831.55752010769
Epoch Step: 55 / 135 Loss: 3.05922794342041 Tokens per Sec: 19338.215414970786
Epoch Step: 60 / 135 Loss: 0.6819574236869812 Tokens per Sec: 19407.978023486812
Epoch Step: 65 / 135 Loss: 5.0624566078186035 Tokens per Sec: 16303.236306426046
Epoch Step: 70 / 135 Loss: 2.232628345489502 Tokens per Sec: 18690.280023815347
Epoch Step: 75 / 135 Loss: 0.9543695449829102 Tokens per Sec: 17644.466746995917
Epoch Step: 80 / 135 Loss: 2.5807032585144043 Tokens per Sec: 18477.134381533295
Epoch Step: 85 / 135 Loss: 3.0964667797088623 Tokens per Sec: 14146.562703069612
Epoch Step: 90 / 135 Loss: 2.951988458633423 Tokens per Sec: 17647.610213600474
Epoch Step: 95 / 135 Loss: 3.458723306655884 Tokens per Sec: 14848.288899336103
Epoch Step: 100 / 135 Loss: 2.3152456283569336 Tokens per Sec: 19342.703689068545
Epoch Step: 105 / 135 Loss: 1.9136430025100708 Tokens per Sec: 16764.89907290794
Epoch Step: 110 / 135 Loss: 2.8143150806427 Tokens per Sec: 16858.07393084863
Epoch Step: 115 / 135 Loss: 2.1481688022613525 Tokens per Sec: 14407.495652908732
Epoch Step: 120 / 135 Loss: 2.289929151535034 Tokens per Sec: 15272.696013193681
Epoch Step: 125 / 135 Loss: 2.31215238571167 Tokens per Sec: 15855.050937715503
Epoch Step: 130 / 135 Loss: 2.344423532485962 Tokens per Sec: 16178.585221821957
Epoch Step: 135 / 135 Loss: 19.264663696289062 Tokens per Sec: 14901.433588731987
Epoch ended with duration 0:00:15.019681
Train perplexity: 1.1169837440325285
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.List < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.721492
Validation perplexity: 1.276465193523801
Model saved checkpoint!
Epoch 136 / 1000
Epoch Step: 5 / 135 Loss: 3.4098079204559326 Tokens per Sec: 17772.740109664814
Epoch Step: 10 / 135 Loss: 27.324081420898438 Tokens per Sec: 14030.515799988092
Epoch Step: 15 / 135 Loss: 0.8705873489379883 Tokens per Sec: 20012.435320279972
Epoch Step: 20 / 135 Loss: 2.095975875854492 Tokens per Sec: 15735.151011764447
Epoch Step: 25 / 135 Loss: 0.8125869631767273 Tokens per Sec: 18626.21372062656
Epoch Step: 30 / 135 Loss: 3.3307926654815674 Tokens per Sec: 19537.642753888438
Epoch Step: 35 / 135 Loss: 1.2107117176055908 Tokens per Sec: 16936.109451590197
Epoch Step: 40 / 135 Loss: 1.272116780281067 Tokens per Sec: 17097.96984863496
Epoch Step: 45 / 135 Loss: 0.5645595192909241 Tokens per Sec: 16799.747129391817
Epoch Step: 50 / 135 Loss: 1.0750494003295898 Tokens per Sec: 18073.953588809676
Epoch Step: 55 / 135 Loss: 1.2443357706069946 Tokens per Sec: 18301.804763981578
Epoch Step: 60 / 135 Loss: 3.4468986988067627 Tokens per Sec: 17285.376562971815
Epoch Step: 65 / 135 Loss: 18.98573875427246 Tokens per Sec: 14110.209556584403
Epoch Step: 70 / 135 Loss: 1.1613647937774658 Tokens per Sec: 14212.641500476337
Epoch Step: 75 / 135 Loss: 4.6158294677734375 Tokens per Sec: 18654.531240190227
Epoch Step: 80 / 135 Loss: 2.095736265182495 Tokens per Sec: 19192.990081455893
Epoch Step: 85 / 135 Loss: 4.7139153480529785 Tokens per Sec: 17027.860324735335
Epoch Step: 90 / 135 Loss: 1.4478963613510132 Tokens per Sec: 17215.84996499847
Epoch Step: 95 / 135 Loss: 1.3494088649749756 Tokens per Sec: 14354.707688728264
Epoch Step: 100 / 135 Loss: 2.0101253986358643 Tokens per Sec: 17529.8350253157
Epoch Step: 105 / 135 Loss: 1.0204540491104126 Tokens per Sec: 16930.290928420636
Epoch Step: 110 / 135 Loss: 2.9713046550750732 Tokens per Sec: 14476.28180776298
Epoch Step: 115 / 135 Loss: 3.601151943206787 Tokens per Sec: 14465.143628458649
Epoch Step: 120 / 135 Loss: 9.141083717346191 Tokens per Sec: 15370.761018073104
Epoch Step: 125 / 135 Loss: 2.2180306911468506 Tokens per Sec: 16398.755354464847
Epoch Step: 130 / 135 Loss: 6.448873043060303 Tokens per Sec: 16293.32829409663
Epoch Step: 135 / 135 Loss: 1.5307337045669556 Tokens per Sec: 17489.607974372044
Epoch ended with duration 0:00:15.135312
Train perplexity: 1.1215572100153346
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.715967
Validation perplexity: 1.1672195481392371
Model saved best_on_validation!
Epoch 137 / 1000
Epoch Step: 5 / 135 Loss: 0.4246063232421875 Tokens per Sec: 19276.43755495075
Epoch Step: 10 / 135 Loss: 2.8094711303710938 Tokens per Sec: 18913.303789737536
Epoch Step: 15 / 135 Loss: 2.143322467803955 Tokens per Sec: 16801.67077012826
Epoch Step: 20 / 135 Loss: 1.9948304891586304 Tokens per Sec: 17275.239026880554
Epoch Step: 25 / 135 Loss: 7.326841354370117 Tokens per Sec: 16571.041458390348
Epoch Step: 30 / 135 Loss: 2.5780341625213623 Tokens per Sec: 15380.286177286993
Epoch Step: 35 / 135 Loss: 1.3169796466827393 Tokens per Sec: 14007.207719495042
Epoch Step: 40 / 135 Loss: 0.48040974140167236 Tokens per Sec: 18279.061141672515
Epoch Step: 45 / 135 Loss: 2.5608930587768555 Tokens per Sec: 13525.892803308136
Epoch Step: 50 / 135 Loss: 3.691866397857666 Tokens per Sec: 18599.237159807508
Epoch Step: 55 / 135 Loss: 2.830488443374634 Tokens per Sec: 18700.247297255602
Epoch Step: 60 / 135 Loss: 3.237592935562134 Tokens per Sec: 16610.351302140945
Epoch Step: 65 / 135 Loss: 2.165501356124878 Tokens per Sec: 15290.976054408293
Epoch Step: 70 / 135 Loss: 1.2163019180297852 Tokens per Sec: 14720.713938281853
Epoch Step: 75 / 135 Loss: 2.261509895324707 Tokens per Sec: 16293.492640005292
Epoch Step: 80 / 135 Loss: 1.6637276411056519 Tokens per Sec: 15555.919744590208
Epoch Step: 85 / 135 Loss: 3.071683883666992 Tokens per Sec: 17584.423322512856
Epoch Step: 90 / 135 Loss: 1.1107200384140015 Tokens per Sec: 16567.593398331683
Epoch Step: 95 / 135 Loss: 2.7558109760284424 Tokens per Sec: 18557.596925177706
Epoch Step: 100 / 135 Loss: 3.3604204654693604 Tokens per Sec: 14538.100127399908
Epoch Step: 105 / 135 Loss: 9.873781204223633 Tokens per Sec: 13815.59353166324
Epoch Step: 110 / 135 Loss: 17.09439468383789 Tokens per Sec: 14651.01162346298
Epoch Step: 115 / 135 Loss: 1.8674471378326416 Tokens per Sec: 13776.55700516602
Epoch Step: 120 / 135 Loss: 2.356701374053955 Tokens per Sec: 15386.891349794354
Epoch Step: 125 / 135 Loss: 2.814056873321533 Tokens per Sec: 14701.234561137553
Epoch Step: 130 / 135 Loss: 1.7181661128997803 Tokens per Sec: 15086.011369028627
Epoch Step: 135 / 135 Loss: 2.795654535293579 Tokens per Sec: 16200.861323035102
Epoch ended with duration 0:00:15.741791
Train perplexity: 1.1159202339561194
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.List < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645107
Validation perplexity: 1.1816976641446815
Epoch 138 / 1000
Epoch Step: 5 / 135 Loss: 1.5432175397872925 Tokens per Sec: 18609.4212100705
Epoch Step: 10 / 135 Loss: 2.7788684368133545 Tokens per Sec: 17882.73686963313
Epoch Step: 15 / 135 Loss: 2.306318521499634 Tokens per Sec: 13978.932033155028
Epoch Step: 20 / 135 Loss: 3.8227760791778564 Tokens per Sec: 16799.47593469859
Epoch Step: 25 / 135 Loss: 5.373647689819336 Tokens per Sec: 15630.760596361386
Epoch Step: 30 / 135 Loss: 0.9856175780296326 Tokens per Sec: 16352.970431429983
Epoch Step: 35 / 135 Loss: 3.2865853309631348 Tokens per Sec: 14893.670343284408
Epoch Step: 40 / 135 Loss: 2.4837229251861572 Tokens per Sec: 15753.203352625796
Epoch Step: 45 / 135 Loss: 0.6388453245162964 Tokens per Sec: 17605.70990464649
Epoch Step: 50 / 135 Loss: 2.0909557342529297 Tokens per Sec: 16741.44516614575
Epoch Step: 55 / 135 Loss: 1.6416995525360107 Tokens per Sec: 13743.754408704368
Epoch Step: 60 / 135 Loss: 2.069654703140259 Tokens per Sec: 15687.788237988794
Epoch Step: 65 / 135 Loss: 2.362412691116333 Tokens per Sec: 17472.347396821948
Epoch Step: 70 / 135 Loss: 2.097672700881958 Tokens per Sec: 15991.776209582109
Epoch Step: 75 / 135 Loss: 0.7406619787216187 Tokens per Sec: 16416.543843233267
Epoch Step: 80 / 135 Loss: 2.3901309967041016 Tokens per Sec: 18719.885056408762
Epoch Step: 85 / 135 Loss: 1.2147916555404663 Tokens per Sec: 16815.963312574328
Epoch Step: 90 / 135 Loss: 0.7989112138748169 Tokens per Sec: 19068.105585376354
Epoch Step: 95 / 135 Loss: 3.6291990280151367 Tokens per Sec: 18551.305105865686
Epoch Step: 100 / 135 Loss: 1.638086199760437 Tokens per Sec: 16457.276241693668
Epoch Step: 105 / 135 Loss: 3.340778112411499 Tokens per Sec: 15270.135672066823
Epoch Step: 110 / 135 Loss: 0.9743596911430359 Tokens per Sec: 14581.422528232557
Epoch Step: 115 / 135 Loss: 2.9521431922912598 Tokens per Sec: 14178.21045353316
Epoch Step: 120 / 135 Loss: 2.5919365882873535 Tokens per Sec: 17003.99834937488
Epoch Step: 125 / 135 Loss: 0.7474496960639954 Tokens per Sec: 14629.416506480205
Epoch Step: 130 / 135 Loss: 0.9678117036819458 Tokens per Sec: 14989.343739704987
Epoch Step: 135 / 135 Loss: 1.6499683856964111 Tokens per Sec: 14884.117573307642
Epoch ended with duration 0:00:15.664649
Train perplexity: 1.110634254861785
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.639282
Validation perplexity: 1.1668583449471726
Model saved best_on_validation!
Epoch 139 / 1000
Epoch Step: 5 / 135 Loss: 0.9297587871551514 Tokens per Sec: 16175.432154453769
Epoch Step: 10 / 135 Loss: 1.799428939819336 Tokens per Sec: 15833.217239839769
Epoch Step: 15 / 135 Loss: 0.978541374206543 Tokens per Sec: 14604.94375806386
Epoch Step: 20 / 135 Loss: 1.1675465106964111 Tokens per Sec: 16029.619205312703
Epoch Step: 25 / 135 Loss: 0.7328880429267883 Tokens per Sec: 16727.68944490741
Epoch Step: 30 / 135 Loss: 0.9782284498214722 Tokens per Sec: 16793.50119030734
Epoch Step: 35 / 135 Loss: 2.8018345832824707 Tokens per Sec: 14176.223600311752
Epoch Step: 40 / 135 Loss: 1.1693546772003174 Tokens per Sec: 19465.95830025376
Epoch Step: 45 / 135 Loss: 0.8206896781921387 Tokens per Sec: 17844.39960287696
Epoch Step: 50 / 135 Loss: 2.097025156021118 Tokens per Sec: 17947.42790320362
Epoch Step: 55 / 135 Loss: 1.9353114366531372 Tokens per Sec: 19111.638017491994
Epoch Step: 60 / 135 Loss: 2.5183746814727783 Tokens per Sec: 16633.56347904582
Epoch Step: 65 / 135 Loss: 0.791361391544342 Tokens per Sec: 15168.228174794602
Epoch Step: 70 / 135 Loss: 3.6915900707244873 Tokens per Sec: 14364.16258971642
Epoch Step: 75 / 135 Loss: 2.4731345176696777 Tokens per Sec: 15921.580304230296
Epoch Step: 80 / 135 Loss: 3.121032476425171 Tokens per Sec: 17749.736443263457
Epoch Step: 85 / 135 Loss: 2.032881259918213 Tokens per Sec: 16959.99811083743
Epoch Step: 90 / 135 Loss: 2.4939932823181152 Tokens per Sec: 16762.160115387996
Epoch Step: 95 / 135 Loss: 3.460686683654785 Tokens per Sec: 16404.505135827378
Epoch Step: 100 / 135 Loss: 1.3132611513137817 Tokens per Sec: 17227.883355156602
Epoch Step: 105 / 135 Loss: 1.632642388343811 Tokens per Sec: 15892.966044828047
Epoch Step: 110 / 135 Loss: 1.9694311618804932 Tokens per Sec: 15111.842251799035
Epoch Step: 115 / 135 Loss: 1.5831997394561768 Tokens per Sec: 15571.597303694867
Epoch Step: 120 / 135 Loss: 3.3152518272399902 Tokens per Sec: 15484.67343971675
Epoch Step: 125 / 135 Loss: 1.2178248167037964 Tokens per Sec: 12344.782042513727
Epoch Step: 130 / 135 Loss: 2.167405366897583 Tokens per Sec: 15044.542833883594
Epoch Step: 135 / 135 Loss: 7.055668354034424 Tokens per Sec: 14057.213918338219
Epoch ended with duration 0:00:15.755825
Train perplexity: 1.1012006459820565
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648297
Validation perplexity: 1.2369779858637102
Epoch 140 / 1000
Epoch Step: 5 / 135 Loss: 4.525357246398926 Tokens per Sec: 14006.953942310654
Epoch Step: 10 / 135 Loss: 2.012754201889038 Tokens per Sec: 16269.55662725477
Epoch Step: 15 / 135 Loss: 1.5673409700393677 Tokens per Sec: 17881.73203988541
Epoch Step: 20 / 135 Loss: 1.120673418045044 Tokens per Sec: 18441.97531458663
Epoch Step: 25 / 135 Loss: 1.359499216079712 Tokens per Sec: 19053.412589597334
Epoch Step: 30 / 135 Loss: 4.056248664855957 Tokens per Sec: 14417.815354565975
Epoch Step: 35 / 135 Loss: 1.6210380792617798 Tokens per Sec: 14728.15609236209
Epoch Step: 40 / 135 Loss: 26.44826316833496 Tokens per Sec: 16111.070184230928
Epoch Step: 45 / 135 Loss: 1.5747100114822388 Tokens per Sec: 19998.532496110423
Epoch Step: 50 / 135 Loss: 6.14708948135376 Tokens per Sec: 15384.414008597765
Epoch Step: 55 / 135 Loss: 3.1991653442382812 Tokens per Sec: 16043.647884158912
Epoch Step: 60 / 135 Loss: 134.05722045898438 Tokens per Sec: 16826.153105013604
Epoch Step: 65 / 135 Loss: 5.329315185546875 Tokens per Sec: 18888.7213899051
Epoch Step: 70 / 135 Loss: 24.197528839111328 Tokens per Sec: 16682.765879329334
Epoch Step: 75 / 135 Loss: 16.156272888183594 Tokens per Sec: 18715.153214623486
Epoch Step: 80 / 135 Loss: 1.7147841453552246 Tokens per Sec: 14614.154597989735
Epoch Step: 85 / 135 Loss: 4.772121906280518 Tokens per Sec: 17140.34362979658
Epoch Step: 90 / 135 Loss: 3.196899890899658 Tokens per Sec: 15570.128107118786
Epoch Step: 95 / 135 Loss: 3.346909999847412 Tokens per Sec: 15587.890796209365
Epoch Step: 100 / 135 Loss: 6.174649238586426 Tokens per Sec: 16631.881547115012
Epoch Step: 105 / 135 Loss: 2.321319580078125 Tokens per Sec: 16197.948964024785
Epoch Step: 110 / 135 Loss: 3.1103756427764893 Tokens per Sec: 15053.423245048154
Epoch Step: 115 / 135 Loss: 4.264222621917725 Tokens per Sec: 15334.756128113087
Epoch Step: 120 / 135 Loss: 3.5853755474090576 Tokens per Sec: 13858.383550913617
Epoch Step: 125 / 135 Loss: 3.86723256111145 Tokens per Sec: 16187.505097313004
Epoch Step: 130 / 135 Loss: 2.834502696990967 Tokens per Sec: 14005.043418801108
Epoch Step: 135 / 135 Loss: 3.530259370803833 Tokens per Sec: 15493.311290416723
Epoch ended with duration 0:00:15.619448
Train perplexity: 1.3706877914488242
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.List < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647411
Validation perplexity: 1.2123993485288633
Model saved checkpoint!
Epoch 141 / 1000
Epoch Step: 5 / 135 Loss: 2.63496470451355 Tokens per Sec: 14426.40774933807
Epoch Step: 10 / 135 Loss: 4.2133378982543945 Tokens per Sec: 17009.97245279905
Epoch Step: 15 / 135 Loss: 1.589398980140686 Tokens per Sec: 17069.576271555638
Epoch Step: 20 / 135 Loss: 2.8538615703582764 Tokens per Sec: 16842.277462220205
Epoch Step: 25 / 135 Loss: 1.2209051847457886 Tokens per Sec: 15293.568745995819
Epoch Step: 30 / 135 Loss: 2.7637295722961426 Tokens per Sec: 18172.191028307043
Epoch Step: 35 / 135 Loss: 3.793642044067383 Tokens per Sec: 16508.703967956837
Epoch Step: 40 / 135 Loss: 1.2447586059570312 Tokens per Sec: 14250.16637653343
Epoch Step: 45 / 135 Loss: 2.918520450592041 Tokens per Sec: 17134.461399583495
Epoch Step: 50 / 135 Loss: 2.486377239227295 Tokens per Sec: 16280.275717065282
Epoch Step: 55 / 135 Loss: 6.32516622543335 Tokens per Sec: 18214.540246477634
Epoch Step: 60 / 135 Loss: 2.171384572982788 Tokens per Sec: 15795.134220288477
Epoch Step: 65 / 135 Loss: 1.3734225034713745 Tokens per Sec: 17202.459939050048
Epoch Step: 70 / 135 Loss: 3.8188910484313965 Tokens per Sec: 15624.861584196522
Epoch Step: 75 / 135 Loss: 1.6762590408325195 Tokens per Sec: 18772.336669965178
Epoch Step: 80 / 135 Loss: 2.107516050338745 Tokens per Sec: 16396.77062606134
Epoch Step: 85 / 135 Loss: 3.511528730392456 Tokens per Sec: 16070.118328828554
Epoch Step: 90 / 135 Loss: 2.1404225826263428 Tokens per Sec: 15633.983457634009
Epoch Step: 95 / 135 Loss: 0.9082496166229248 Tokens per Sec: 19654.912405324576
Epoch Step: 100 / 135 Loss: 3.4731783866882324 Tokens per Sec: 14440.038698633138
Epoch Step: 105 / 135 Loss: 13.146775245666504 Tokens per Sec: 15364.205181866531
Epoch Step: 110 / 135 Loss: 2.0471787452697754 Tokens per Sec: 15381.610991654954
Epoch Step: 115 / 135 Loss: 0.8919590711593628 Tokens per Sec: 15364.588984595348
Epoch Step: 120 / 135 Loss: 0.9754446148872375 Tokens per Sec: 15359.9673170944
Epoch Step: 125 / 135 Loss: 11.255598068237305 Tokens per Sec: 13770.957374830276
Epoch Step: 130 / 135 Loss: 1.678330421447754 Tokens per Sec: 13290.961872465352
Epoch Step: 135 / 135 Loss: 2.5271973609924316 Tokens per Sec: 15937.448793606474
Epoch ended with duration 0:00:15.782826
Train perplexity: 1.1366338506696436
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653700
Validation perplexity: 1.2516484146100042
Epoch 142 / 1000
Epoch Step: 5 / 135 Loss: 2.766427516937256 Tokens per Sec: 17295.128355996843
Epoch Step: 10 / 135 Loss: 0.7679099440574646 Tokens per Sec: 16906.57837163384
Epoch Step: 15 / 135 Loss: 2.9292452335357666 Tokens per Sec: 15454.239737805741
Epoch Step: 20 / 135 Loss: 0.8206105828285217 Tokens per Sec: 17062.087200032933
Epoch Step: 25 / 135 Loss: 1.2406882047653198 Tokens per Sec: 17470.397929717972
Epoch Step: 30 / 135 Loss: 1.0415266752243042 Tokens per Sec: 16194.967703026316
Epoch Step: 35 / 135 Loss: 2.396172046661377 Tokens per Sec: 17864.75297279581
Epoch Step: 40 / 135 Loss: 2.1601696014404297 Tokens per Sec: 20160.186813691536
Epoch Step: 45 / 135 Loss: 1.9147253036499023 Tokens per Sec: 15318.623986719978
Epoch Step: 50 / 135 Loss: 1.3225277662277222 Tokens per Sec: 18635.108848126256
Epoch Step: 55 / 135 Loss: 9.270193099975586 Tokens per Sec: 17845.034597788974
Epoch Step: 60 / 135 Loss: 3.6255369186401367 Tokens per Sec: 16675.943167680693
Epoch Step: 65 / 135 Loss: 3.230062484741211 Tokens per Sec: 17653.547739657784
Epoch Step: 70 / 135 Loss: 2.9006168842315674 Tokens per Sec: 17899.59612597783
Epoch Step: 75 / 135 Loss: 3.715654134750366 Tokens per Sec: 15636.004837358892
Epoch Step: 80 / 135 Loss: 1.145216941833496 Tokens per Sec: 13959.505149454948
Epoch Step: 85 / 135 Loss: 1.22969651222229 Tokens per Sec: 16183.228510388959
Epoch Step: 90 / 135 Loss: 1.9303526878356934 Tokens per Sec: 17140.758160263278
Epoch Step: 95 / 135 Loss: 0.7199985980987549 Tokens per Sec: 15728.860415644838
Epoch Step: 100 / 135 Loss: 3.009782552719116 Tokens per Sec: 13818.717301919743
Epoch Step: 105 / 135 Loss: 2.244875431060791 Tokens per Sec: 15884.573733198924
Epoch Step: 110 / 135 Loss: 2.5170533657073975 Tokens per Sec: 13656.996789136523
Epoch Step: 115 / 135 Loss: 31.1610107421875 Tokens per Sec: 14819.711839767899
Epoch Step: 120 / 135 Loss: 2.189687728881836 Tokens per Sec: 15930.49509920397
Epoch Step: 125 / 135 Loss: 1.8414400815963745 Tokens per Sec: 14790.186109717375
Epoch Step: 130 / 135 Loss: 2.0973730087280273 Tokens per Sec: 15850.29346404766
Epoch Step: 135 / 135 Loss: 2.718207836151123 Tokens per Sec: 13543.620627251841
Epoch ended with duration 0:00:15.687813
Train perplexity: 1.0953363717975442
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.667848
Validation perplexity: 1.295798420213666
Epoch 143 / 1000
Epoch Step: 5 / 135 Loss: 1.359264612197876 Tokens per Sec: 12852.041229235716
Epoch Step: 10 / 135 Loss: 2.840240716934204 Tokens per Sec: 14275.897220101724
Epoch Step: 15 / 135 Loss: 0.898502767086029 Tokens per Sec: 15403.55212094814
Epoch Step: 20 / 135 Loss: 2.5266876220703125 Tokens per Sec: 15558.602452169205
Epoch Step: 25 / 135 Loss: 2.4796359539031982 Tokens per Sec: 16982.5004968198
Epoch Step: 30 / 135 Loss: 1.8254327774047852 Tokens per Sec: 17459.78968321485
Epoch Step: 35 / 135 Loss: 1.0724917650222778 Tokens per Sec: 19058.318936383494
Epoch Step: 40 / 135 Loss: 2.360283374786377 Tokens per Sec: 15549.240098598199
Epoch Step: 45 / 135 Loss: 1.9730709791183472 Tokens per Sec: 17794.266899227256
Epoch Step: 50 / 135 Loss: 0.756011962890625 Tokens per Sec: 15823.365011045511
Epoch Step: 55 / 135 Loss: 1.4532661437988281 Tokens per Sec: 14614.472643828216
Epoch Step: 60 / 135 Loss: 1.6805317401885986 Tokens per Sec: 15972.533250429717
Epoch Step: 65 / 135 Loss: 0.8988652229309082 Tokens per Sec: 18006.988123769937
Epoch Step: 70 / 135 Loss: 2.252612590789795 Tokens per Sec: 16357.657726929927
Epoch Step: 75 / 135 Loss: 2.8650853633880615 Tokens per Sec: 19130.08134196297
Epoch Step: 80 / 135 Loss: 1.3888604640960693 Tokens per Sec: 18348.025579937304
Epoch Step: 85 / 135 Loss: 11.01169204711914 Tokens per Sec: 18116.473154409898
Epoch Step: 90 / 135 Loss: 3.220205783843994 Tokens per Sec: 16702.326459933483
Epoch Step: 95 / 135 Loss: 2.561514377593994 Tokens per Sec: 18144.550509212917
Epoch Step: 100 / 135 Loss: 6.521134853363037 Tokens per Sec: 15369.668878888797
Epoch Step: 105 / 135 Loss: 2.0108163356781006 Tokens per Sec: 14884.96600915639
Epoch Step: 110 / 135 Loss: 1.9207476377487183 Tokens per Sec: 15275.953227116544
Epoch Step: 115 / 135 Loss: 3.938105583190918 Tokens per Sec: 14743.130588273105
Epoch Step: 120 / 135 Loss: 1.3705430030822754 Tokens per Sec: 15306.448247460954
Epoch Step: 125 / 135 Loss: 2.606006622314453 Tokens per Sec: 15845.4893144109
Epoch Step: 130 / 135 Loss: 2.099048137664795 Tokens per Sec: 14712.758267193634
Epoch Step: 135 / 135 Loss: 2.0245015621185303 Tokens per Sec: 16242.929889592626
Epoch ended with duration 0:00:15.664548
Train perplexity: 1.1015656341287805
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.660520
Validation perplexity: 1.2884397907726486
Epoch 144 / 1000
Epoch Step: 5 / 135 Loss: 12.701057434082031 Tokens per Sec: 15182.323163951856
Epoch Step: 10 / 135 Loss: 4.012889862060547 Tokens per Sec: 18722.045143620395
Epoch Step: 15 / 135 Loss: 0.609618067741394 Tokens per Sec: 15938.396145773539
Epoch Step: 20 / 135 Loss: 1.8355602025985718 Tokens per Sec: 17536.29705273502
Epoch Step: 25 / 135 Loss: 2.443122148513794 Tokens per Sec: 17661.431115143685
Epoch Step: 30 / 135 Loss: 2.340397834777832 Tokens per Sec: 15830.22180125314
Epoch Step: 35 / 135 Loss: 1.6145763397216797 Tokens per Sec: 14871.18733283493
Epoch Step: 40 / 135 Loss: 0.5782012343406677 Tokens per Sec: 18264.546218031435
Epoch Step: 45 / 135 Loss: 11.200958251953125 Tokens per Sec: 17174.334768686935
Epoch Step: 50 / 135 Loss: 3.192995548248291 Tokens per Sec: 12665.278246610407
Epoch Step: 55 / 135 Loss: 2.14874267578125 Tokens per Sec: 15772.44729689785
Epoch Step: 60 / 135 Loss: 1.6523133516311646 Tokens per Sec: 16847.46605465191
Epoch Step: 65 / 135 Loss: 1.2316292524337769 Tokens per Sec: 18338.866478304106
Epoch Step: 70 / 135 Loss: 1.586045503616333 Tokens per Sec: 18832.442023596013
Epoch Step: 75 / 135 Loss: 2.2265467643737793 Tokens per Sec: 18959.35660100102
Epoch Step: 80 / 135 Loss: 5.212105751037598 Tokens per Sec: 17305.693735588455
Epoch Step: 85 / 135 Loss: 1.1972235441207886 Tokens per Sec: 14536.424996077405
Epoch Step: 90 / 135 Loss: 1.0717222690582275 Tokens per Sec: 13543.633445068468
Epoch Step: 95 / 135 Loss: 1.6847110986709595 Tokens per Sec: 18384.332886787997
Epoch Step: 100 / 135 Loss: 6.992243766784668 Tokens per Sec: 16102.603196459815
Epoch Step: 105 / 135 Loss: 2.6143646240234375 Tokens per Sec: 14480.843554194158
Epoch Step: 110 / 135 Loss: 17.369049072265625 Tokens per Sec: 14590.034798442435
Epoch Step: 115 / 135 Loss: 6.0471577644348145 Tokens per Sec: 12484.44647591971
Epoch Step: 120 / 135 Loss: 2.5032644271850586 Tokens per Sec: 17371.045273103846
Epoch Step: 125 / 135 Loss: 2.491307497024536 Tokens per Sec: 16307.757151275817
Epoch Step: 130 / 135 Loss: 2.46140193939209 Tokens per Sec: 14916.857237202854
Epoch Step: 135 / 135 Loss: 3.0210559368133545 Tokens per Sec: 14708.99563272819
Epoch ended with duration 0:00:15.716969
Train perplexity: 1.1324550646935048
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645653
Validation perplexity: 1.2103133921495373
Epoch 145 / 1000
Epoch Step: 5 / 135 Loss: 0.45795804262161255 Tokens per Sec: 14801.075425624302
Epoch Step: 10 / 135 Loss: 1.1446411609649658 Tokens per Sec: 18049.654930263252
Epoch Step: 15 / 135 Loss: 2.810185432434082 Tokens per Sec: 15947.960505688538
Epoch Step: 20 / 135 Loss: 1.7633051872253418 Tokens per Sec: 15418.37766711792
Epoch Step: 25 / 135 Loss: 1.3016127347946167 Tokens per Sec: 15986.860988267561
Epoch Step: 30 / 135 Loss: 1.240258812904358 Tokens per Sec: 17448.83302746842
Epoch Step: 35 / 135 Loss: 2.7242274284362793 Tokens per Sec: 13499.26919282895
Epoch Step: 40 / 135 Loss: 1.027398943901062 Tokens per Sec: 14947.615798958193
Epoch Step: 45 / 135 Loss: 3.915559768676758 Tokens per Sec: 16914.19196297291
Epoch Step: 50 / 135 Loss: 1.2461780309677124 Tokens per Sec: 17410.254953075473
Epoch Step: 55 / 135 Loss: 0.7430492043495178 Tokens per Sec: 16985.9308515876
Epoch Step: 60 / 135 Loss: 1.2162150144577026 Tokens per Sec: 14689.072640657068
Epoch Step: 65 / 135 Loss: 1.1934947967529297 Tokens per Sec: 19826.93735865868
Epoch Step: 70 / 135 Loss: 2.1939895153045654 Tokens per Sec: 17888.338669062516
Epoch Step: 75 / 135 Loss: 1.0130665302276611 Tokens per Sec: 17408.087961510035
Epoch Step: 80 / 135 Loss: 1.1288228034973145 Tokens per Sec: 16618.826365988756
Epoch Step: 85 / 135 Loss: 0.8035463094711304 Tokens per Sec: 17720.616253558008
Epoch Step: 90 / 135 Loss: 0.7627344131469727 Tokens per Sec: 18908.69084746934
Epoch Step: 95 / 135 Loss: 4.948614597320557 Tokens per Sec: 16748.713256777093
Epoch Step: 100 / 135 Loss: 1.7303361892700195 Tokens per Sec: 16843.86271590498
Epoch Step: 105 / 135 Loss: 0.7281785011291504 Tokens per Sec: 14534.439325663829
Epoch Step: 110 / 135 Loss: 1.6813526153564453 Tokens per Sec: 16781.265307638037
Epoch Step: 115 / 135 Loss: 2.6059086322784424 Tokens per Sec: 13788.12949765556
Epoch Step: 120 / 135 Loss: 1.6068240404129028 Tokens per Sec: 15823.14397830595
Epoch Step: 125 / 135 Loss: 2.1927330493927 Tokens per Sec: 14275.205983753181
Epoch Step: 130 / 135 Loss: 2.971520185470581 Tokens per Sec: 16013.758162712598
Epoch Step: 135 / 135 Loss: 0.9760285019874573 Tokens per Sec: 13944.383200942513
Epoch ended with duration 0:00:15.655693
Train perplexity: 1.094415707278689
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645768
Validation perplexity: 1.205473365314881
Model saved checkpoint!
Epoch 146 / 1000
Epoch Step: 5 / 135 Loss: 1.0002869367599487 Tokens per Sec: 12210.434892368352
Epoch Step: 10 / 135 Loss: 1.6548385620117188 Tokens per Sec: 18603.20979975208
Epoch Step: 15 / 135 Loss: 2.1778481006622314 Tokens per Sec: 18217.617779167995
Epoch Step: 20 / 135 Loss: 1.218083143234253 Tokens per Sec: 19115.186325413866
Epoch Step: 25 / 135 Loss: 2.919860601425171 Tokens per Sec: 16822.57702003121
Epoch Step: 30 / 135 Loss: 1.882673740386963 Tokens per Sec: 17695.503947489495
Epoch Step: 35 / 135 Loss: 2.0103001594543457 Tokens per Sec: 18061.52439978636
Epoch Step: 40 / 135 Loss: 1.4166315793991089 Tokens per Sec: 15923.275789800144
Epoch Step: 45 / 135 Loss: 1.1151278018951416 Tokens per Sec: 16953.634043443133
Epoch Step: 50 / 135 Loss: 1.0023711919784546 Tokens per Sec: 17032.473727469984
Epoch Step: 55 / 135 Loss: 1.6246596574783325 Tokens per Sec: 18501.880876400537
Epoch Step: 60 / 135 Loss: 2.808995485305786 Tokens per Sec: 14300.120104630058
Epoch Step: 65 / 135 Loss: 1.6358436346054077 Tokens per Sec: 18270.667704852527
Epoch Step: 70 / 135 Loss: 0.8204269409179688 Tokens per Sec: 15183.50325413384
Epoch Step: 75 / 135 Loss: 1.3876405954360962 Tokens per Sec: 15166.458047058653
Epoch Step: 80 / 135 Loss: 16.365690231323242 Tokens per Sec: 16232.56288205803
Epoch Step: 85 / 135 Loss: 2.740112543106079 Tokens per Sec: 16206.23305569824
Epoch Step: 90 / 135 Loss: 1.4524850845336914 Tokens per Sec: 16109.411477763371
Epoch Step: 95 / 135 Loss: 2.5295088291168213 Tokens per Sec: 14504.874393223135
Epoch Step: 100 / 135 Loss: 1.055680513381958 Tokens per Sec: 15904.26295039055
Epoch Step: 105 / 135 Loss: 2.4168150424957275 Tokens per Sec: 13506.852371202858
Epoch Step: 110 / 135 Loss: 1.8559820652008057 Tokens per Sec: 14359.657532480349
Epoch Step: 115 / 135 Loss: 2.683384418487549 Tokens per Sec: 16135.982247318496
Epoch Step: 120 / 135 Loss: 2.556737184524536 Tokens per Sec: 15746.042257067644
Epoch Step: 125 / 135 Loss: 1.075974464416504 Tokens per Sec: 14139.608038197402
Epoch Step: 130 / 135 Loss: 1.7002134323120117 Tokens per Sec: 15810.78161318109
Epoch Step: 135 / 135 Loss: 1.2587847709655762 Tokens per Sec: 13042.672173871248
Epoch ended with duration 0:00:15.832615
Train perplexity: 1.0951627133249067
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654701
Validation perplexity: 1.294875272267281
Epoch 147 / 1000
Epoch Step: 5 / 135 Loss: 1.7930583953857422 Tokens per Sec: 15966.021197780025
Epoch Step: 10 / 135 Loss: 0.9805393218994141 Tokens per Sec: 18308.195684401253
Epoch Step: 15 / 135 Loss: 2.1216070652008057 Tokens per Sec: 17364.87979538277
Epoch Step: 20 / 135 Loss: 1.9277986288070679 Tokens per Sec: 16260.696059230473
Epoch Step: 25 / 135 Loss: 0.4904929995536804 Tokens per Sec: 14214.543856424343
Epoch Step: 30 / 135 Loss: 0.8000763654708862 Tokens per Sec: 17076.822989071054
Epoch Step: 35 / 135 Loss: 1.5633267164230347 Tokens per Sec: 19752.832996356832
Epoch Step: 40 / 135 Loss: 1.435117483139038 Tokens per Sec: 17674.75615573782
Epoch Step: 45 / 135 Loss: 2.8611438274383545 Tokens per Sec: 15596.662042574884
Epoch Step: 50 / 135 Loss: 2.2434096336364746 Tokens per Sec: 17818.926620171722
Epoch Step: 55 / 135 Loss: 2.4022250175476074 Tokens per Sec: 17295.527815760932
Epoch Step: 60 / 135 Loss: 1.1766453981399536 Tokens per Sec: 17752.34800793191
Epoch Step: 65 / 135 Loss: 1.9500113725662231 Tokens per Sec: 13548.933587149297
Epoch Step: 70 / 135 Loss: 1.8341796398162842 Tokens per Sec: 15295.200658122812
Epoch Step: 75 / 135 Loss: 1.9411455392837524 Tokens per Sec: 18700.83063100886
Epoch Step: 80 / 135 Loss: 0.5957628488540649 Tokens per Sec: 14219.115424023501
Epoch Step: 85 / 135 Loss: 3.0686466693878174 Tokens per Sec: 18220.659737706632
Epoch Step: 90 / 135 Loss: 1.1734782457351685 Tokens per Sec: 15809.9499488866
Epoch Step: 95 / 135 Loss: 0.9743230938911438 Tokens per Sec: 16402.906096222174
Epoch Step: 100 / 135 Loss: 3.430978298187256 Tokens per Sec: 16571.18837850701
Epoch Step: 105 / 135 Loss: 2.2226169109344482 Tokens per Sec: 13243.88448137404
Epoch Step: 110 / 135 Loss: 1.8484159708023071 Tokens per Sec: 15737.039949433514
Epoch Step: 115 / 135 Loss: 0.8623783588409424 Tokens per Sec: 15690.46410152807
Epoch Step: 120 / 135 Loss: 0.9864851236343384 Tokens per Sec: 13474.36499744307
Epoch Step: 125 / 135 Loss: 14.5612154006958 Tokens per Sec: 15437.939506559655
Epoch Step: 130 / 135 Loss: 1.5320563316345215 Tokens per Sec: 16977.217869551747
Epoch Step: 135 / 135 Loss: 2.2889244556427 Tokens per Sec: 14601.433151522195
Epoch ended with duration 0:00:15.636491
Train perplexity: 1.0852779634667498
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.662112
Validation perplexity: 1.268402070214367
Epoch 148 / 1000
Epoch Step: 5 / 135 Loss: 2.4246037006378174 Tokens per Sec: 13823.147319541222
Epoch Step: 10 / 135 Loss: 1.829807996749878 Tokens per Sec: 17466.060158768447
Epoch Step: 15 / 135 Loss: 2.736786365509033 Tokens per Sec: 16084.451751610522
Epoch Step: 20 / 135 Loss: 1.6897647380828857 Tokens per Sec: 15787.645856331095
Epoch Step: 25 / 135 Loss: 1.1271071434020996 Tokens per Sec: 17145.939732789604
Epoch Step: 30 / 135 Loss: 2.922062873840332 Tokens per Sec: 18226.757513917582
Epoch Step: 35 / 135 Loss: 2.3859012126922607 Tokens per Sec: 18410.514330673624
Epoch Step: 40 / 135 Loss: 0.4655166268348694 Tokens per Sec: 15793.645674287256
Epoch Step: 45 / 135 Loss: 0.9431218504905701 Tokens per Sec: 16464.43409535355
Epoch Step: 50 / 135 Loss: 1.1871843338012695 Tokens per Sec: 14675.948920060324
Epoch Step: 55 / 135 Loss: 12.8878755569458 Tokens per Sec: 17511.344237928606
Epoch Step: 60 / 135 Loss: 1.5066652297973633 Tokens per Sec: 14283.787700610075
Epoch Step: 65 / 135 Loss: 2.301208019256592 Tokens per Sec: 17406.821265767314
Epoch Step: 70 / 135 Loss: 3.2750210762023926 Tokens per Sec: 15368.260039150153
Epoch Step: 75 / 135 Loss: 1.1315221786499023 Tokens per Sec: 15941.240092346894
Epoch Step: 80 / 135 Loss: 1.2337515354156494 Tokens per Sec: 18434.89645427893
Epoch Step: 85 / 135 Loss: 1.9622187614440918 Tokens per Sec: 17182.55593876024
Epoch Step: 90 / 135 Loss: 0.9650986194610596 Tokens per Sec: 16895.566515070906
Epoch Step: 95 / 135 Loss: 0.4757001996040344 Tokens per Sec: 15128.400490326912
Epoch Step: 100 / 135 Loss: 1.4134620428085327 Tokens per Sec: 17901.2820325922
Epoch Step: 105 / 135 Loss: 2.256819248199463 Tokens per Sec: 16136.824497292326
Epoch Step: 110 / 135 Loss: 1.5808275938034058 Tokens per Sec: 15020.34717362055
Epoch Step: 115 / 135 Loss: 1.854953408241272 Tokens per Sec: 16789.501928358317
Epoch Step: 120 / 135 Loss: 2.1113014221191406 Tokens per Sec: 17930.076036146365
Epoch Step: 125 / 135 Loss: 1.5608795881271362 Tokens per Sec: 17712.35610712516
Epoch Step: 130 / 135 Loss: 2.5506184101104736 Tokens per Sec: 18777.440878422232
Epoch Step: 135 / 135 Loss: 1.588625192642212 Tokens per Sec: 15099.973184094666
Epoch ended with duration 0:00:15.323424
Train perplexity: 1.0970928596528569
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.List < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.638559
Validation perplexity: 1.231074880448932
Epoch 149 / 1000
Epoch Step: 5 / 135 Loss: 2.5682332515716553 Tokens per Sec: 15775.84052464664
Epoch Step: 10 / 135 Loss: 1.7492461204528809 Tokens per Sec: 15776.984086839615
Epoch Step: 15 / 135 Loss: 2.493553876876831 Tokens per Sec: 19866.479097680556
Epoch Step: 20 / 135 Loss: 2.3100385665893555 Tokens per Sec: 19736.53810462173
Epoch Step: 25 / 135 Loss: 1.4821451902389526 Tokens per Sec: 20270.87311644739
Epoch Step: 30 / 135 Loss: 1.4983291625976562 Tokens per Sec: 19333.829739459325
Epoch Step: 35 / 135 Loss: 2.5462865829467773 Tokens per Sec: 16892.075896244485
Epoch Step: 40 / 135 Loss: 1.6124110221862793 Tokens per Sec: 19412.69223292671
Epoch Step: 45 / 135 Loss: 1.7654064893722534 Tokens per Sec: 19379.399391814793
Epoch Step: 50 / 135 Loss: 0.6068409085273743 Tokens per Sec: 15379.627721301127
Epoch Step: 55 / 135 Loss: 15.294158935546875 Tokens per Sec: 18657.425842133453
Epoch Step: 60 / 135 Loss: 0.761086106300354 Tokens per Sec: 20718.555948544028
Epoch Step: 65 / 135 Loss: 26.988468170166016 Tokens per Sec: 19600.097518150786
Epoch Step: 70 / 135 Loss: 1.761183738708496 Tokens per Sec: 17853.57150501815
Epoch Step: 75 / 135 Loss: 2.72471284866333 Tokens per Sec: 15546.990705454624
Epoch Step: 80 / 135 Loss: 2.0182361602783203 Tokens per Sec: 15172.465625106834
Epoch Step: 85 / 135 Loss: 0.713944137096405 Tokens per Sec: 17696.537634683267
Epoch Step: 90 / 135 Loss: 0.9815235733985901 Tokens per Sec: 19935.140697900653
Epoch Step: 95 / 135 Loss: 25.76907730102539 Tokens per Sec: 18091.314725364577
Epoch Step: 100 / 135 Loss: 0.6422643661499023 Tokens per Sec: 20537.5078835256
Epoch Step: 105 / 135 Loss: 1.652630090713501 Tokens per Sec: 15241.669736353924
Epoch Step: 110 / 135 Loss: 2.4697909355163574 Tokens per Sec: 16126.35640756212
Epoch Step: 115 / 135 Loss: 4.552672386169434 Tokens per Sec: 18699.83981122324
Epoch Step: 120 / 135 Loss: 3.19451904296875 Tokens per Sec: 17675.438050562247
Epoch Step: 125 / 135 Loss: 30.626131057739258 Tokens per Sec: 17381.04723368455
Epoch Step: 130 / 135 Loss: 2.660832643508911 Tokens per Sec: 16803.19747201918
Epoch Step: 135 / 135 Loss: 2.8884668350219727 Tokens per Sec: 15399.15643635678
Epoch ended with duration 0:00:14.254366
Train perplexity: 1.1349782089084959
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.643543
Validation perplexity: 1.2435827595640885
Epoch 150 / 1000
Epoch Step: 5 / 135 Loss: 28.176742553710938 Tokens per Sec: 17425.789655466306
Epoch Step: 10 / 135 Loss: 3.339771270751953 Tokens per Sec: 19762.379647809023
Epoch Step: 15 / 135 Loss: 1.960719108581543 Tokens per Sec: 18267.66890884017
Epoch Step: 20 / 135 Loss: 1.560415267944336 Tokens per Sec: 18409.997330019938
Epoch Step: 25 / 135 Loss: 4.4506378173828125 Tokens per Sec: 18054.248871493804
Epoch Step: 30 / 135 Loss: 1.2704007625579834 Tokens per Sec: 18786.233306371712
Epoch Step: 35 / 135 Loss: 3.2735705375671387 Tokens per Sec: 17816.62122404141
Epoch Step: 40 / 135 Loss: 3.5131490230560303 Tokens per Sec: 18412.259493809943
Epoch Step: 45 / 135 Loss: 1.9598040580749512 Tokens per Sec: 19339.210854552646
Epoch Step: 50 / 135 Loss: 2.028115749359131 Tokens per Sec: 14551.425247822895
Epoch Step: 55 / 135 Loss: 2.5170793533325195 Tokens per Sec: 18101.477608122907
Epoch Step: 60 / 135 Loss: 0.4436543881893158 Tokens per Sec: 19071.893662396997
Epoch Step: 65 / 135 Loss: 0.6710391640663147 Tokens per Sec: 18265.608199290564
Epoch Step: 70 / 135 Loss: 1.108516812324524 Tokens per Sec: 17211.648670940733
Epoch Step: 75 / 135 Loss: 10.673784255981445 Tokens per Sec: 17106.955766239036
Epoch Step: 80 / 135 Loss: 1.3638343811035156 Tokens per Sec: 18456.991504497688
Epoch Step: 85 / 135 Loss: 0.9658144116401672 Tokens per Sec: 18137.475911840957
Epoch Step: 90 / 135 Loss: 3.400012731552124 Tokens per Sec: 18429.09495932935
Epoch Step: 95 / 135 Loss: 4.983208656311035 Tokens per Sec: 17887.41005313579
Epoch Step: 100 / 135 Loss: 0.42261314392089844 Tokens per Sec: 19788.39868988472
Epoch Step: 105 / 135 Loss: 1.2206653356552124 Tokens per Sec: 15364.671977045817
Epoch Step: 110 / 135 Loss: 1.8585662841796875 Tokens per Sec: 18235.792723801806
Epoch Step: 115 / 135 Loss: 1.8236863613128662 Tokens per Sec: 16491.724718886097
Epoch Step: 120 / 135 Loss: 2.6309561729431152 Tokens per Sec: 16617.742784262646
Epoch Step: 125 / 135 Loss: 2.0464184284210205 Tokens per Sec: 17060.947172826993
Epoch Step: 130 / 135 Loss: 2.3777682781219482 Tokens per Sec: 18049.80391123724
Epoch Step: 135 / 135 Loss: 1.7935377359390259 Tokens per Sec: 15645.812916383877
Epoch ended with duration 0:00:14.276100
Train perplexity: 1.1089306961259124
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.644519
Validation perplexity: 1.195757146618039
Model saved checkpoint!
Epoch 151 / 1000
Epoch Step: 5 / 135 Loss: 6.667062759399414 Tokens per Sec: 20214.937097503072
Epoch Step: 10 / 135 Loss: 1.3606036901474 Tokens per Sec: 15090.402345396276
Epoch Step: 15 / 135 Loss: 0.38832467794418335 Tokens per Sec: 17106.47258264034
Epoch Step: 20 / 135 Loss: 1.26344633102417 Tokens per Sec: 17971.924361490288
Epoch Step: 25 / 135 Loss: 2.9659438133239746 Tokens per Sec: 17261.48410435246
Epoch Step: 30 / 135 Loss: 0.8851003646850586 Tokens per Sec: 16421.305171598382
Epoch Step: 35 / 135 Loss: 2.124574661254883 Tokens per Sec: 20134.80071514875
Epoch Step: 40 / 135 Loss: 1.9503376483917236 Tokens per Sec: 20791.572164252786
Epoch Step: 45 / 135 Loss: 1.4610321521759033 Tokens per Sec: 16068.418529250099
Epoch Step: 50 / 135 Loss: 1.2835160493850708 Tokens per Sec: 20205.83494092893
Epoch Step: 55 / 135 Loss: 1.2547638416290283 Tokens per Sec: 16685.59265420083
Epoch Step: 60 / 135 Loss: 1.9817273616790771 Tokens per Sec: 21367.55813544124
Epoch Step: 65 / 135 Loss: 2.17765474319458 Tokens per Sec: 16773.136495169158
Epoch Step: 70 / 135 Loss: 1.4427205324172974 Tokens per Sec: 16947.444040748866
Epoch Step: 75 / 135 Loss: 0.65736985206604 Tokens per Sec: 18522.4954441265
Epoch Step: 80 / 135 Loss: 3.0872366428375244 Tokens per Sec: 19183.273195440648
Epoch Step: 85 / 135 Loss: 2.0187699794769287 Tokens per Sec: 17308.913347982983
Epoch Step: 90 / 135 Loss: 0.7743470072746277 Tokens per Sec: 20151.282916746008
Epoch Step: 95 / 135 Loss: 1.7697261571884155 Tokens per Sec: 18876.674466224315
Epoch Step: 100 / 135 Loss: 0.4100421667098999 Tokens per Sec: 19727.407225697963
Epoch Step: 105 / 135 Loss: 1.9247812032699585 Tokens per Sec: 15588.297881798495
Epoch Step: 110 / 135 Loss: 2.756239414215088 Tokens per Sec: 16763.381813546264
Epoch Step: 115 / 135 Loss: 2.5366125106811523 Tokens per Sec: 16516.951772218843
Epoch Step: 120 / 135 Loss: 1.6411617994308472 Tokens per Sec: 17752.411179075003
Epoch Step: 125 / 135 Loss: 0.7119076251983643 Tokens per Sec: 16873.098890186255
Epoch Step: 130 / 135 Loss: 8.9671049118042 Tokens per Sec: 17404.374304060122
Epoch Step: 135 / 135 Loss: 1.1760982275009155 Tokens per Sec: 15989.47316891262
Epoch ended with duration 0:00:14.218216
Train perplexity: 1.1119219133646059
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651438
Validation perplexity: 1.3473892124058768
Epoch 152 / 1000
Epoch Step: 5 / 135 Loss: 2.900710105895996 Tokens per Sec: 16241.580467282593
Epoch Step: 10 / 135 Loss: 0.39684954285621643 Tokens per Sec: 21488.38225884303
Epoch Step: 15 / 135 Loss: 1.5479234457015991 Tokens per Sec: 16672.816850641542
Epoch Step: 20 / 135 Loss: 2.3432164192199707 Tokens per Sec: 17231.799391953813
Epoch Step: 25 / 135 Loss: 1.5408070087432861 Tokens per Sec: 18685.64727706328
Epoch Step: 30 / 135 Loss: 1.067684292793274 Tokens per Sec: 20962.848629543347
Epoch Step: 35 / 135 Loss: 1.5476651191711426 Tokens per Sec: 18554.151484377162
Epoch Step: 40 / 135 Loss: 22.738693237304688 Tokens per Sec: 17668.310655244
Epoch Step: 45 / 135 Loss: 2.0653183460235596 Tokens per Sec: 17047.85683793723
Epoch Step: 50 / 135 Loss: 2.7141175270080566 Tokens per Sec: 19182.2965583789
Epoch Step: 55 / 135 Loss: 1.5233005285263062 Tokens per Sec: 19682.375716088238
Epoch Step: 60 / 135 Loss: 1.289299488067627 Tokens per Sec: 19288.633655718222
Epoch Step: 65 / 135 Loss: 11.550529479980469 Tokens per Sec: 20026.47143227364
Epoch Step: 70 / 135 Loss: 2.8221657276153564 Tokens per Sec: 16275.94981616733
Epoch Step: 75 / 135 Loss: 3.4573912620544434 Tokens per Sec: 14646.849570946542
Epoch Step: 80 / 135 Loss: 1.6330357789993286 Tokens per Sec: 18872.915727810196
Epoch Step: 85 / 135 Loss: 0.5112875699996948 Tokens per Sec: 21264.816318030385
Epoch Step: 90 / 135 Loss: 2.6534385681152344 Tokens per Sec: 18730.84271636553
Epoch Step: 95 / 135 Loss: 0.917765736579895 Tokens per Sec: 19590.289464137804
Epoch Step: 100 / 135 Loss: 1.7166658639907837 Tokens per Sec: 17562.983087947112
Epoch Step: 105 / 135 Loss: 1.5111851692199707 Tokens per Sec: 16536.47673855588
Epoch Step: 110 / 135 Loss: 0.9074491262435913 Tokens per Sec: 17121.01928847017
Epoch Step: 115 / 135 Loss: 7.484701156616211 Tokens per Sec: 16722.594806984875
Epoch Step: 120 / 135 Loss: 1.746279001235962 Tokens per Sec: 15864.054248376531
Epoch Step: 125 / 135 Loss: 1.8590474128723145 Tokens per Sec: 16313.520165724234
Epoch Step: 130 / 135 Loss: 2.4611313343048096 Tokens per Sec: 17794.202572139795
Epoch Step: 135 / 135 Loss: 2.6261634826660156 Tokens per Sec: 16576.762060760408
Epoch ended with duration 0:00:14.168419
Train perplexity: 1.1085938323804414
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.List < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.635131
Validation perplexity: 1.1652363687302434
Model saved best_on_validation!
Epoch 153 / 1000
Epoch Step: 5 / 135 Loss: 0.7510631084442139 Tokens per Sec: 18867.353259954813
Epoch Step: 10 / 135 Loss: 2.3732099533081055 Tokens per Sec: 20087.789144947128
Epoch Step: 15 / 135 Loss: 0.6369504928588867 Tokens per Sec: 18981.697845890005
Epoch Step: 20 / 135 Loss: 1.5486186742782593 Tokens per Sec: 15195.60787634555
Epoch Step: 25 / 135 Loss: 0.8026537299156189 Tokens per Sec: 17565.611651747648
Epoch Step: 30 / 135 Loss: 0.4395369291305542 Tokens per Sec: 19226.93210175786
Epoch Step: 35 / 135 Loss: 0.6911801695823669 Tokens per Sec: 15788.121865739111
Epoch Step: 40 / 135 Loss: 2.848590850830078 Tokens per Sec: 15390.052803439794
Epoch Step: 45 / 135 Loss: 5.581133842468262 Tokens per Sec: 20516.577239647886
Epoch Step: 50 / 135 Loss: 2.112753391265869 Tokens per Sec: 16615.32993403002
Epoch Step: 55 / 135 Loss: 3.9148950576782227 Tokens per Sec: 18158.864595086245
Epoch Step: 60 / 135 Loss: 0.5553902387619019 Tokens per Sec: 15894.275524868532
Epoch Step: 65 / 135 Loss: 1.5489075183868408 Tokens per Sec: 19795.447341120587
Epoch Step: 70 / 135 Loss: 2.0171103477478027 Tokens per Sec: 18540.190441142968
Epoch Step: 75 / 135 Loss: 1.6953495740890503 Tokens per Sec: 17323.663453498757
Epoch Step: 80 / 135 Loss: 1.7412981986999512 Tokens per Sec: 18881.666130663605
Epoch Step: 85 / 135 Loss: 2.377194881439209 Tokens per Sec: 21539.90345963956
Epoch Step: 90 / 135 Loss: 1.3897268772125244 Tokens per Sec: 20033.694643398572
Epoch Step: 95 / 135 Loss: 0.9355002045631409 Tokens per Sec: 18742.61154418496
Epoch Step: 100 / 135 Loss: 2.200592279434204 Tokens per Sec: 14692.72593109696
Epoch Step: 105 / 135 Loss: 1.5552079677581787 Tokens per Sec: 17043.389587886435
Epoch Step: 110 / 135 Loss: 1.0467449426651 Tokens per Sec: 16545.458714655022
Epoch Step: 115 / 135 Loss: 0.8334444761276245 Tokens per Sec: 17745.13750426822
Epoch Step: 120 / 135 Loss: 1.7222391366958618 Tokens per Sec: 16472.097799746094
Epoch Step: 125 / 135 Loss: 1.4312506914138794 Tokens per Sec: 17875.685472192676
Epoch Step: 130 / 135 Loss: 1.5240356922149658 Tokens per Sec: 16737.76650316844
Epoch Step: 135 / 135 Loss: 1.1481351852416992 Tokens per Sec: 16329.099116767999
Epoch ended with duration 0:00:14.280982
Train perplexity: 1.080440580722872
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647332
Validation perplexity: 1.2265248990773774
Epoch 154 / 1000
Epoch Step: 5 / 135 Loss: 3.220766305923462 Tokens per Sec: 19324.264241459154
Epoch Step: 10 / 135 Loss: 0.6152546405792236 Tokens per Sec: 16589.66574072764
Epoch Step: 15 / 135 Loss: 1.7855095863342285 Tokens per Sec: 20239.20829258226
Epoch Step: 20 / 135 Loss: 1.636387825012207 Tokens per Sec: 18470.37618795255
Epoch Step: 25 / 135 Loss: 0.5205471515655518 Tokens per Sec: 17788.4302838972
Epoch Step: 30 / 135 Loss: 1.4116015434265137 Tokens per Sec: 19012.26271366442
Epoch Step: 35 / 135 Loss: 20.37889862060547 Tokens per Sec: 19461.500195765882
Epoch Step: 40 / 135 Loss: 1.1365643739700317 Tokens per Sec: 15506.283360217296
Epoch Step: 45 / 135 Loss: 0.4228902757167816 Tokens per Sec: 17678.03412307201
Epoch Step: 50 / 135 Loss: 2.059296131134033 Tokens per Sec: 18505.974029422137
Epoch Step: 55 / 135 Loss: 2.478691816329956 Tokens per Sec: 19494.5764534396
Epoch Step: 60 / 135 Loss: 0.9059802889823914 Tokens per Sec: 17865.127743909765
Epoch Step: 65 / 135 Loss: 1.2709944248199463 Tokens per Sec: 17469.248937739885
Epoch Step: 70 / 135 Loss: 1.9758837223052979 Tokens per Sec: 19992.206741576992
Epoch Step: 75 / 135 Loss: 1.2333478927612305 Tokens per Sec: 18021.11626853707
Epoch Step: 80 / 135 Loss: 0.7833498120307922 Tokens per Sec: 20924.864683651802
Epoch Step: 85 / 135 Loss: 4.355654239654541 Tokens per Sec: 16236.341998950511
Epoch Step: 90 / 135 Loss: 1.6379181146621704 Tokens per Sec: 17000.39702080477
Epoch Step: 95 / 135 Loss: 2.6136085987091064 Tokens per Sec: 18349.303920148075
Epoch Step: 100 / 135 Loss: 2.17295241355896 Tokens per Sec: 21532.84773750291
Epoch Step: 105 / 135 Loss: 1.5018765926361084 Tokens per Sec: 16547.718021250024
Epoch Step: 110 / 135 Loss: 2.0451302528381348 Tokens per Sec: 17216.590786578145
Epoch Step: 115 / 135 Loss: 1.87363862991333 Tokens per Sec: 16547.54049355351
Epoch Step: 120 / 135 Loss: 1.3721983432769775 Tokens per Sec: 16945.021949901744
Epoch Step: 125 / 135 Loss: 7.305490493774414 Tokens per Sec: 15443.225341373316
Epoch Step: 130 / 135 Loss: 1.5370386838912964 Tokens per Sec: 18253.0050185604
Epoch Step: 135 / 135 Loss: 1.8951232433319092 Tokens per Sec: 16169.726857850428
Epoch ended with duration 0:00:14.130435
Train perplexity: 1.0848066531429037
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.641491
Validation perplexity: 1.1776678743323792
Epoch 155 / 1000
Epoch Step: 5 / 135 Loss: 3.0967202186584473 Tokens per Sec: 16402.781875919885
Epoch Step: 10 / 135 Loss: 3.0907809734344482 Tokens per Sec: 19055.99105256868
Epoch Step: 15 / 135 Loss: 1.0341509580612183 Tokens per Sec: 17768.480426428985
Epoch Step: 20 / 135 Loss: 2.4162697792053223 Tokens per Sec: 17148.204816117483
Epoch Step: 25 / 135 Loss: 0.6416780948638916 Tokens per Sec: 19773.31470032607
Epoch Step: 30 / 135 Loss: 0.9581478238105774 Tokens per Sec: 16338.188000719714
Epoch Step: 35 / 135 Loss: 0.8504040241241455 Tokens per Sec: 16278.543030000325
Epoch Step: 40 / 135 Loss: 1.707971453666687 Tokens per Sec: 21585.78803633861
Epoch Step: 45 / 135 Loss: 10.449751853942871 Tokens per Sec: 19266.378622111268
Epoch Step: 50 / 135 Loss: 0.8454402089118958 Tokens per Sec: 16249.542333107416
Epoch Step: 55 / 135 Loss: 1.9357446432113647 Tokens per Sec: 18901.43069270888
Epoch Step: 60 / 135 Loss: 1.0049209594726562 Tokens per Sec: 19745.29503598291
Epoch Step: 65 / 135 Loss: 17.494253158569336 Tokens per Sec: 18786.473315734896
Epoch Step: 70 / 135 Loss: 0.48114484548568726 Tokens per Sec: 18881.648931045365
Epoch Step: 75 / 135 Loss: 2.2596092224121094 Tokens per Sec: 19065.604980895136
Epoch Step: 80 / 135 Loss: 0.9708634614944458 Tokens per Sec: 18998.616328418157
Epoch Step: 85 / 135 Loss: 0.3646262288093567 Tokens per Sec: 16984.955603274506
Epoch Step: 90 / 135 Loss: 2.8579957485198975 Tokens per Sec: 17625.310171937093
Epoch Step: 95 / 135 Loss: 1.2264432907104492 Tokens per Sec: 19590.82153229635
Epoch Step: 100 / 135 Loss: 1.481118083000183 Tokens per Sec: 18477.93690093071
Epoch Step: 105 / 135 Loss: 2.150933027267456 Tokens per Sec: 17561.092544618677
Epoch Step: 110 / 135 Loss: 0.8224109411239624 Tokens per Sec: 16501.329639899373
Epoch Step: 115 / 135 Loss: 0.957944393157959 Tokens per Sec: 14201.04146478492
Epoch Step: 120 / 135 Loss: 0.6718050837516785 Tokens per Sec: 17215.471967425154
Epoch Step: 125 / 135 Loss: 6.5542826652526855 Tokens per Sec: 17266.26494096149
Epoch Step: 130 / 135 Loss: 1.281942367553711 Tokens per Sec: 15448.91136616081
Epoch Step: 135 / 135 Loss: 1.1167956590652466 Tokens per Sec: 16853.24119375509
Epoch ended with duration 0:00:14.243446
Train perplexity: 1.071294246130667
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649009
Validation perplexity: 1.273249533244814
Model saved checkpoint!
Epoch 156 / 1000
Epoch Step: 5 / 135 Loss: 0.6499406099319458 Tokens per Sec: 17356.33285540266
Epoch Step: 10 / 135 Loss: 1.1198350191116333 Tokens per Sec: 18980.618523206635
Epoch Step: 15 / 135 Loss: 1.855272650718689 Tokens per Sec: 17375.683414290186
Epoch Step: 20 / 135 Loss: 2.1245546340942383 Tokens per Sec: 16290.891361197579
Epoch Step: 25 / 135 Loss: 0.8462688326835632 Tokens per Sec: 19810.35680890177
Epoch Step: 30 / 135 Loss: 1.8433431386947632 Tokens per Sec: 18083.61478146083
Epoch Step: 35 / 135 Loss: 0.6396705508232117 Tokens per Sec: 16852.240382687105
Epoch Step: 40 / 135 Loss: 2.2159230709075928 Tokens per Sec: 17932.118843127602
Epoch Step: 45 / 135 Loss: 1.0613080263137817 Tokens per Sec: 17616.184224048917
Epoch Step: 50 / 135 Loss: 1.0878969430923462 Tokens per Sec: 16877.28970629838
Epoch Step: 55 / 135 Loss: 2.669384717941284 Tokens per Sec: 15806.306339598144
Epoch Step: 60 / 135 Loss: 1.7543840408325195 Tokens per Sec: 16246.457959256431
Epoch Step: 65 / 135 Loss: 0.9549106955528259 Tokens per Sec: 16748.447723046298
Epoch Step: 70 / 135 Loss: 1.1314138174057007 Tokens per Sec: 18157.463971179408
Epoch Step: 75 / 135 Loss: 4.132027626037598 Tokens per Sec: 17218.72375563594
Epoch Step: 80 / 135 Loss: 0.5303595066070557 Tokens per Sec: 19410.05635193974
Epoch Step: 85 / 135 Loss: 0.8015915751457214 Tokens per Sec: 17655.336965443435
Epoch Step: 90 / 135 Loss: 0.43618953227996826 Tokens per Sec: 16833.675801088433
Epoch Step: 95 / 135 Loss: 1.9970837831497192 Tokens per Sec: 14755.663310211501
Epoch Step: 100 / 135 Loss: 1.4852381944656372 Tokens per Sec: 13855.922479598932
Epoch Step: 105 / 135 Loss: 2.7560577392578125 Tokens per Sec: 16629.484233195937
Epoch Step: 110 / 135 Loss: 1.6936649084091187 Tokens per Sec: 15852.404924224653
Epoch Step: 115 / 135 Loss: 1.1646052598953247 Tokens per Sec: 16620.594115144526
Epoch Step: 120 / 135 Loss: 1.7467235326766968 Tokens per Sec: 15575.441427669863
Epoch Step: 125 / 135 Loss: 2.1499969959259033 Tokens per Sec: 16245.920175034513
Epoch Step: 130 / 135 Loss: 8.212510108947754 Tokens per Sec: 15270.487862914475
Epoch Step: 135 / 135 Loss: 1.8314330577850342 Tokens per Sec: 15499.849309049656
Epoch ended with duration 0:00:15.084732
Train perplexity: 1.1134241747308287
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.715595
Validation perplexity: 1.2887386897477555
Epoch 157 / 1000
Epoch Step: 5 / 135 Loss: 1.3390618562698364 Tokens per Sec: 15821.113897055762
Epoch Step: 10 / 135 Loss: 0.8038338422775269 Tokens per Sec: 18148.311768784763
Epoch Step: 15 / 135 Loss: 0.9002852439880371 Tokens per Sec: 18142.342031807373
Epoch Step: 20 / 135 Loss: 0.5013018846511841 Tokens per Sec: 17074.389241357818
Epoch Step: 25 / 135 Loss: 2.5150880813598633 Tokens per Sec: 17284.009656877064
Epoch Step: 30 / 135 Loss: 13.460399627685547 Tokens per Sec: 14906.035600428748
Epoch Step: 35 / 135 Loss: 6.513876914978027 Tokens per Sec: 17520.66135512686
Epoch Step: 40 / 135 Loss: 1.6258429288864136 Tokens per Sec: 19243.732162595068
Epoch Step: 45 / 135 Loss: 0.6377904415130615 Tokens per Sec: 15497.721560503238
Epoch Step: 50 / 135 Loss: 0.6668378114700317 Tokens per Sec: 16701.406605330816
Epoch Step: 55 / 135 Loss: 0.9273157119750977 Tokens per Sec: 17111.902713830743
Epoch Step: 60 / 135 Loss: 2.022404670715332 Tokens per Sec: 20623.279393683115
Epoch Step: 65 / 135 Loss: 21.71010971069336 Tokens per Sec: 15686.109300740067
Epoch Step: 70 / 135 Loss: 3.3849692344665527 Tokens per Sec: 15988.89734600983
Epoch Step: 75 / 135 Loss: 2.2879083156585693 Tokens per Sec: 15324.383358355444
Epoch Step: 80 / 135 Loss: 1.0359792709350586 Tokens per Sec: 19551.31170515353
Epoch Step: 85 / 135 Loss: 0.9093480110168457 Tokens per Sec: 19467.524445616786
Epoch Step: 90 / 135 Loss: 0.6337160468101501 Tokens per Sec: 16193.640679341761
Epoch Step: 95 / 135 Loss: 14.666681289672852 Tokens per Sec: 17693.4384087227
Epoch Step: 100 / 135 Loss: 2.373918294906616 Tokens per Sec: 18191.166095592722
Epoch Step: 105 / 135 Loss: 2.539262294769287 Tokens per Sec: 15620.536354442223
Epoch Step: 110 / 135 Loss: 1.5816481113433838 Tokens per Sec: 15365.477704672701
Epoch Step: 115 / 135 Loss: 2.7482059001922607 Tokens per Sec: 17074.06163541156
Epoch Step: 120 / 135 Loss: 2.288616180419922 Tokens per Sec: 18195.393209919315
Epoch Step: 125 / 135 Loss: 1.1118290424346924 Tokens per Sec: 14654.070902357233
Epoch Step: 130 / 135 Loss: 1.2877354621887207 Tokens per Sec: 14727.311017161463
Epoch Step: 135 / 135 Loss: 1.331821084022522 Tokens per Sec: 17186.864304703282
Epoch ended with duration 0:00:14.955668
Train perplexity: 1.0955344881504971
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.725153
Validation perplexity: 1.2843272682678923
Epoch 158 / 1000
Epoch Step: 5 / 135 Loss: 2.2084007263183594 Tokens per Sec: 12970.109689984061
Epoch Step: 10 / 135 Loss: 8.681262969970703 Tokens per Sec: 18467.79424238738
Epoch Step: 15 / 135 Loss: 1.5475120544433594 Tokens per Sec: 18031.512140928866
Epoch Step: 20 / 135 Loss: 1.9131072759628296 Tokens per Sec: 16687.155104687903
Epoch Step: 25 / 135 Loss: 1.2229657173156738 Tokens per Sec: 14324.826269531164
Epoch Step: 30 / 135 Loss: 2.5832760334014893 Tokens per Sec: 16421.391101101264
Epoch Step: 35 / 135 Loss: 1.236953616142273 Tokens per Sec: 19028.87581277373
Epoch Step: 40 / 135 Loss: 0.772698163986206 Tokens per Sec: 19314.34327344552
Epoch Step: 45 / 135 Loss: 2.7552738189697266 Tokens per Sec: 15084.528764073475
Epoch Step: 50 / 135 Loss: 2.416030168533325 Tokens per Sec: 19958.78104312816
Epoch Step: 55 / 135 Loss: 0.4127067029476166 Tokens per Sec: 18325.434836489658
Epoch Step: 60 / 135 Loss: 1.0090731382369995 Tokens per Sec: 19511.272776050926
Epoch Step: 65 / 135 Loss: 0.880884051322937 Tokens per Sec: 15714.52506555517
Epoch Step: 70 / 135 Loss: 2.3034913539886475 Tokens per Sec: 20053.79431616429
Epoch Step: 75 / 135 Loss: 0.46734267473220825 Tokens per Sec: 17200.046757305598
Epoch Step: 80 / 135 Loss: 1.234758734703064 Tokens per Sec: 18149.771054417222
Epoch Step: 85 / 135 Loss: 2.093961715698242 Tokens per Sec: 18094.71342887239
Epoch Step: 90 / 135 Loss: 0.5691918134689331 Tokens per Sec: 15068.793089188071
Epoch Step: 95 / 135 Loss: 0.7376247644424438 Tokens per Sec: 18748.742219887063
Epoch Step: 100 / 135 Loss: 3.3662071228027344 Tokens per Sec: 16658.094872899062
Epoch Step: 105 / 135 Loss: 1.82126784324646 Tokens per Sec: 14565.640768117693
Epoch Step: 110 / 135 Loss: 1.7838389873504639 Tokens per Sec: 17631.400413410985
Epoch Step: 115 / 135 Loss: 1.582577109336853 Tokens per Sec: 16525.13400280787
Epoch Step: 120 / 135 Loss: 1.9277184009552002 Tokens per Sec: 15837.309431759593
Epoch Step: 125 / 135 Loss: 0.5644444227218628 Tokens per Sec: 14744.217886186634
Epoch Step: 130 / 135 Loss: 0.7508718371391296 Tokens per Sec: 14218.067946056604
Epoch Step: 135 / 135 Loss: 1.8134033679962158 Tokens per Sec: 16668.311794715963
Epoch ended with duration 0:00:15.039327
Train perplexity: 1.0794378946779977
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.716064
Validation perplexity: 1.2426407393478802
Epoch 159 / 1000
Epoch Step: 5 / 135 Loss: 0.963925302028656 Tokens per Sec: 18711.00837804401
Epoch Step: 10 / 135 Loss: 2.155695676803589 Tokens per Sec: 15402.96480817678
Epoch Step: 15 / 135 Loss: 1.9760687351226807 Tokens per Sec: 16905.470284763836
Epoch Step: 20 / 135 Loss: 2.026104211807251 Tokens per Sec: 16369.451462289822
Epoch Step: 25 / 135 Loss: 1.3945415019989014 Tokens per Sec: 15775.261531848588
Epoch Step: 30 / 135 Loss: 0.5149523615837097 Tokens per Sec: 16977.391287976843
Epoch Step: 35 / 135 Loss: 0.4026840031147003 Tokens per Sec: 16872.276604709048
Epoch Step: 40 / 135 Loss: 6.521797180175781 Tokens per Sec: 16705.810348759245
Epoch Step: 45 / 135 Loss: 0.5655460357666016 Tokens per Sec: 18210.992645050963
Epoch Step: 50 / 135 Loss: 1.5919055938720703 Tokens per Sec: 20332.244546417114
Epoch Step: 55 / 135 Loss: 0.6017134785652161 Tokens per Sec: 18058.349691118103
Epoch Step: 60 / 135 Loss: 1.3551770448684692 Tokens per Sec: 15816.484069797725
Epoch Step: 65 / 135 Loss: 0.9696584343910217 Tokens per Sec: 18380.627586531788
Epoch Step: 70 / 135 Loss: 0.8218483924865723 Tokens per Sec: 17675.60182023994
Epoch Step: 75 / 135 Loss: 1.9930615425109863 Tokens per Sec: 15891.589835656194
Epoch Step: 80 / 135 Loss: 0.5361411571502686 Tokens per Sec: 17863.17409325449
Epoch Step: 85 / 135 Loss: 0.9241463541984558 Tokens per Sec: 20359.51721087338
Epoch Step: 90 / 135 Loss: 1.415432095527649 Tokens per Sec: 18357.95846490962
Epoch Step: 95 / 135 Loss: 10.086043357849121 Tokens per Sec: 17124.610014104077
Epoch Step: 100 / 135 Loss: 0.5220608115196228 Tokens per Sec: 18436.23221197319
Epoch Step: 105 / 135 Loss: 1.8833377361297607 Tokens per Sec: 16489.10400926693
Epoch Step: 110 / 135 Loss: 2.116131067276001 Tokens per Sec: 16502.800587369165
Epoch Step: 115 / 135 Loss: 1.81070077419281 Tokens per Sec: 14436.76283045091
Epoch Step: 120 / 135 Loss: 2.151355028152466 Tokens per Sec: 15519.525747390715
Epoch Step: 125 / 135 Loss: 0.816618800163269 Tokens per Sec: 16165.311322382982
Epoch Step: 130 / 135 Loss: 2.157041311264038 Tokens per Sec: 14323.569739177117
Epoch Step: 135 / 135 Loss: 1.137367606163025 Tokens per Sec: 14916.113764922062
Epoch ended with duration 0:00:15.012850
Train perplexity: 1.0691947109115045
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.722024
Validation perplexity: 1.229027988716896
Epoch 160 / 1000
Epoch Step: 5 / 135 Loss: 6.62736701965332 Tokens per Sec: 16453.627450713975
Epoch Step: 10 / 135 Loss: 1.2901360988616943 Tokens per Sec: 18676.243843745437
Epoch Step: 15 / 135 Loss: 0.8740925788879395 Tokens per Sec: 17895.18911166377
Epoch Step: 20 / 135 Loss: 1.6625124216079712 Tokens per Sec: 18864.292240758212
Epoch Step: 25 / 135 Loss: 2.0422942638397217 Tokens per Sec: 17612.662062283245
Epoch Step: 30 / 135 Loss: 2.1000702381134033 Tokens per Sec: 18708.447819941717
Epoch Step: 35 / 135 Loss: 1.2027148008346558 Tokens per Sec: 18466.016876593636
Epoch Step: 40 / 135 Loss: 1.2184133529663086 Tokens per Sec: 15075.87403283053
Epoch Step: 45 / 135 Loss: 0.7090137004852295 Tokens per Sec: 15778.512997481133
Epoch Step: 50 / 135 Loss: 2.3494062423706055 Tokens per Sec: 19006.297119573628
Epoch Step: 55 / 135 Loss: 5.208987712860107 Tokens per Sec: 15950.430373473686
Epoch Step: 60 / 135 Loss: 1.220859408378601 Tokens per Sec: 15035.717185745536
Epoch Step: 65 / 135 Loss: 2.030392646789551 Tokens per Sec: 18543.867459264657
Epoch Step: 70 / 135 Loss: 0.523148775100708 Tokens per Sec: 15970.446228263385
Epoch Step: 75 / 135 Loss: 1.659059762954712 Tokens per Sec: 16591.261285569937
Epoch Step: 80 / 135 Loss: 1.643996000289917 Tokens per Sec: 16290.315377398087
Epoch Step: 85 / 135 Loss: 1.3990895748138428 Tokens per Sec: 18282.453577328757
Epoch Step: 90 / 135 Loss: 1.2380660772323608 Tokens per Sec: 19027.810965342233
Epoch Step: 95 / 135 Loss: 1.0999866724014282 Tokens per Sec: 17534.938782024223
Epoch Step: 100 / 135 Loss: 0.6869348883628845 Tokens per Sec: 14916.103590985564
Epoch Step: 105 / 135 Loss: 1.2228842973709106 Tokens per Sec: 15275.409710711228
Epoch Step: 110 / 135 Loss: 1.4605770111083984 Tokens per Sec: 17217.443592750442
Epoch Step: 115 / 135 Loss: 0.8411023616790771 Tokens per Sec: 17493.018949803434
Epoch Step: 120 / 135 Loss: 1.2385185956954956 Tokens per Sec: 15351.613249364967
Epoch Step: 125 / 135 Loss: 1.1242257356643677 Tokens per Sec: 15842.66198329917
Epoch Step: 130 / 135 Loss: 1.3011956214904785 Tokens per Sec: 13881.574035999402
Epoch Step: 135 / 135 Loss: 1.134598970413208 Tokens per Sec: 13964.11042971657
Epoch ended with duration 0:00:15.106835
Train perplexity: 1.0878540356385615
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.723868
Validation perplexity: 1.1923942340985578
Model saved checkpoint!
Epoch 161 / 1000
Epoch Step: 5 / 135 Loss: 0.3181106448173523 Tokens per Sec: 17385.730414526985
Epoch Step: 10 / 135 Loss: 0.5023301839828491 Tokens per Sec: 15504.886800797822
Epoch Step: 15 / 135 Loss: 0.38972899317741394 Tokens per Sec: 18000.850635475854
Epoch Step: 20 / 135 Loss: 1.749630331993103 Tokens per Sec: 19171.775047072635
Epoch Step: 25 / 135 Loss: 1.9913990497589111 Tokens per Sec: 17944.75848336764
Epoch Step: 30 / 135 Loss: 0.7525066137313843 Tokens per Sec: 18234.75418536123
Epoch Step: 35 / 135 Loss: 1.4842063188552856 Tokens per Sec: 15388.484597512694
Epoch Step: 40 / 135 Loss: 3.4889602661132812 Tokens per Sec: 16543.439577590972
Epoch Step: 45 / 135 Loss: 2.9664061069488525 Tokens per Sec: 15531.223954297948
Epoch Step: 50 / 135 Loss: 3.4675025939941406 Tokens per Sec: 19174.817069874556
Epoch Step: 55 / 135 Loss: 2.0015764236450195 Tokens per Sec: 16206.43887949946
Epoch Step: 60 / 135 Loss: 28.473005294799805 Tokens per Sec: 18441.355988406038
Epoch Step: 65 / 135 Loss: 0.8418098092079163 Tokens per Sec: 19114.59898547424
Epoch Step: 70 / 135 Loss: 2.1914851665496826 Tokens per Sec: 14678.077643057393
Epoch Step: 75 / 135 Loss: 0.2893257737159729 Tokens per Sec: 19179.207852426276
Epoch Step: 80 / 135 Loss: 2.2172434329986572 Tokens per Sec: 20576.9296885942
Epoch Step: 85 / 135 Loss: 6.410721778869629 Tokens per Sec: 16366.776959398278
Epoch Step: 90 / 135 Loss: 1.042224407196045 Tokens per Sec: 16587.447764763605
Epoch Step: 95 / 135 Loss: 0.41986215114593506 Tokens per Sec: 18539.416513183427
Epoch Step: 100 / 135 Loss: 1.1398423910140991 Tokens per Sec: 14801.647886633345
Epoch Step: 105 / 135 Loss: 9.875326156616211 Tokens per Sec: 16021.355223108429
Epoch Step: 110 / 135 Loss: 1.9107831716537476 Tokens per Sec: 14886.93360075497
Epoch Step: 115 / 135 Loss: 1.1868757009506226 Tokens per Sec: 14616.899856810895
Epoch Step: 120 / 135 Loss: 1.7257282733917236 Tokens per Sec: 17631.81366329678
Epoch Step: 125 / 135 Loss: 1.5955427885055542 Tokens per Sec: 15307.474918390319
Epoch Step: 130 / 135 Loss: 8.086238861083984 Tokens per Sec: 15390.159583013181
Epoch Step: 135 / 135 Loss: 1.180344820022583 Tokens per Sec: 14838.498816406558
Epoch ended with duration 0:00:15.066839
Train perplexity: 1.0925185398108164
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.733289
Validation perplexity: 1.488782041643337
Epoch 162 / 1000
Epoch Step: 5 / 135 Loss: 1.1153512001037598 Tokens per Sec: 19073.97685870086
Epoch Step: 10 / 135 Loss: 1.5029258728027344 Tokens per Sec: 15820.918067401995
Epoch Step: 15 / 135 Loss: 0.9527691006660461 Tokens per Sec: 17258.316070224704
Epoch Step: 20 / 135 Loss: 23.451139450073242 Tokens per Sec: 17492.55100127691
Epoch Step: 25 / 135 Loss: 1.6785004138946533 Tokens per Sec: 17947.669232784086
Epoch Step: 30 / 135 Loss: 21.151535034179688 Tokens per Sec: 15103.723442563918
Epoch Step: 35 / 135 Loss: 1.1099475622177124 Tokens per Sec: 16429.552210363145
Epoch Step: 40 / 135 Loss: 1.0214362144470215 Tokens per Sec: 17026.71985585771
Epoch Step: 45 / 135 Loss: 1.1611104011535645 Tokens per Sec: 18615.840229270583
Epoch Step: 50 / 135 Loss: 2.320345878601074 Tokens per Sec: 16012.317618292402
Epoch Step: 55 / 135 Loss: 0.8123277425765991 Tokens per Sec: 15346.618810328606
Epoch Step: 60 / 135 Loss: 4.651503086090088 Tokens per Sec: 18105.656118555966
Epoch Step: 65 / 135 Loss: 0.9838228821754456 Tokens per Sec: 16957.075315708185
Epoch Step: 70 / 135 Loss: 0.6181914806365967 Tokens per Sec: 17427.25615591484
Epoch Step: 75 / 135 Loss: 2.0217933654785156 Tokens per Sec: 18939.22161134117
Epoch Step: 80 / 135 Loss: 8.921565055847168 Tokens per Sec: 15168.458043156457
Epoch Step: 85 / 135 Loss: 0.9448338747024536 Tokens per Sec: 17820.445124098882
Epoch Step: 90 / 135 Loss: 0.7726783752441406 Tokens per Sec: 17789.15287321068
Epoch Step: 95 / 135 Loss: 2.3094868659973145 Tokens per Sec: 19226.370958456846
Epoch Step: 100 / 135 Loss: 1.1679576635360718 Tokens per Sec: 15716.806899253159
Epoch Step: 105 / 135 Loss: 1.3321789503097534 Tokens per Sec: 15356.41359800021
Epoch Step: 110 / 135 Loss: 0.6456820368766785 Tokens per Sec: 16514.87296088312
Epoch Step: 115 / 135 Loss: 1.2627778053283691 Tokens per Sec: 14274.034235827645
Epoch Step: 120 / 135 Loss: 1.4537914991378784 Tokens per Sec: 17406.965427476585
Epoch Step: 125 / 135 Loss: 0.8619742393493652 Tokens per Sec: 16767.414734525973
Epoch Step: 130 / 135 Loss: 1.4368301630020142 Tokens per Sec: 15549.700575231167
Epoch Step: 135 / 135 Loss: 1.8461545705795288 Tokens per Sec: 14857.906142023221
Epoch ended with duration 0:00:15.129195
Train perplexity: 1.0827471656731802
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.732961
Validation perplexity: 1.310369404086858
Epoch 163 / 1000
Epoch Step: 5 / 135 Loss: 1.155055284500122 Tokens per Sec: 18658.4535757474
Epoch Step: 10 / 135 Loss: 0.8316634893417358 Tokens per Sec: 18608.423166095698
Epoch Step: 15 / 135 Loss: 3.0534467697143555 Tokens per Sec: 17739.686040468314
Epoch Step: 20 / 135 Loss: 1.524514079093933 Tokens per Sec: 18512.17151364916
Epoch Step: 25 / 135 Loss: 0.7209958434104919 Tokens per Sec: 16295.990390384704
Epoch Step: 30 / 135 Loss: 0.5401895046234131 Tokens per Sec: 17925.665590147473
Epoch Step: 35 / 135 Loss: 1.0194437503814697 Tokens per Sec: 17142.036539704462
Epoch Step: 40 / 135 Loss: 1.9002641439437866 Tokens per Sec: 18210.350828515417
Epoch Step: 45 / 135 Loss: 1.240543007850647 Tokens per Sec: 18897.335215852167
Epoch Step: 50 / 135 Loss: 1.0812764167785645 Tokens per Sec: 17811.737441600802
Epoch Step: 55 / 135 Loss: 0.49928346276283264 Tokens per Sec: 13550.309537085612
Epoch Step: 60 / 135 Loss: 3.1724777221679688 Tokens per Sec: 17868.724534554778
Epoch Step: 65 / 135 Loss: 1.3419806957244873 Tokens per Sec: 16417.60705664163
Epoch Step: 70 / 135 Loss: 1.966322660446167 Tokens per Sec: 18692.335284625067
Epoch Step: 75 / 135 Loss: 1.464144229888916 Tokens per Sec: 14983.34738286656
Epoch Step: 80 / 135 Loss: 0.5514991283416748 Tokens per Sec: 17819.701289314347
Epoch Step: 85 / 135 Loss: 1.827253818511963 Tokens per Sec: 19095.876329951396
Epoch Step: 90 / 135 Loss: 2.470491409301758 Tokens per Sec: 15491.051715016207
Epoch Step: 95 / 135 Loss: 0.563845157623291 Tokens per Sec: 15674.337174842434
Epoch Step: 100 / 135 Loss: 0.894538164138794 Tokens per Sec: 17824.46115286486
Epoch Step: 105 / 135 Loss: 1.8645918369293213 Tokens per Sec: 17266.08802921584
Epoch Step: 110 / 135 Loss: 8.203912734985352 Tokens per Sec: 16141.889628285371
Epoch Step: 115 / 135 Loss: 1.0728213787078857 Tokens per Sec: 13246.599193183043
Epoch Step: 120 / 135 Loss: 1.7094883918762207 Tokens per Sec: 16224.95790954241
Epoch Step: 125 / 135 Loss: 1.6253743171691895 Tokens per Sec: 14900.971288891751
Epoch Step: 130 / 135 Loss: 1.7848389148712158 Tokens per Sec: 14211.903470847203
Epoch Step: 135 / 135 Loss: 1.946129560470581 Tokens per Sec: 16342.076523886304
Epoch ended with duration 0:00:15.047993
Train perplexity: 1.087482088720159
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.714518
Validation perplexity: 1.180776979592005
Epoch 164 / 1000
Epoch Step: 5 / 135 Loss: 3.233508586883545 Tokens per Sec: 15028.422270591409
Epoch Step: 10 / 135 Loss: 17.473926544189453 Tokens per Sec: 19377.393710232584
Epoch Step: 15 / 135 Loss: 1.005338191986084 Tokens per Sec: 17381.76799497924
Epoch Step: 20 / 135 Loss: 2.0737175941467285 Tokens per Sec: 18463.229041388935
Epoch Step: 25 / 135 Loss: 0.757785439491272 Tokens per Sec: 16725.13519925296
Epoch Step: 30 / 135 Loss: 2.049736976623535 Tokens per Sec: 16127.352496273645
Epoch Step: 35 / 135 Loss: 0.3019393980503082 Tokens per Sec: 15358.885638231479
Epoch Step: 40 / 135 Loss: 2.0968270301818848 Tokens per Sec: 19454.909568735897
Epoch Step: 45 / 135 Loss: 2.284376382827759 Tokens per Sec: 18370.729253255504
Epoch Step: 50 / 135 Loss: 1.5172258615493774 Tokens per Sec: 15683.95198292565
Epoch Step: 55 / 135 Loss: 2.1456902027130127 Tokens per Sec: 17674.033337090805
Epoch Step: 60 / 135 Loss: 2.464562177658081 Tokens per Sec: 19466.43606691905
Epoch Step: 65 / 135 Loss: 1.7908449172973633 Tokens per Sec: 15084.057556073538
Epoch Step: 70 / 135 Loss: 1.2090423107147217 Tokens per Sec: 18174.877661464856
Epoch Step: 75 / 135 Loss: 1.8988158702850342 Tokens per Sec: 17612.166313213096
Epoch Step: 80 / 135 Loss: 0.8117676377296448 Tokens per Sec: 18229.33236459336
Epoch Step: 85 / 135 Loss: 1.2378935813903809 Tokens per Sec: 18157.937633272195
Epoch Step: 90 / 135 Loss: 2.1411702632904053 Tokens per Sec: 15214.771598394293
Epoch Step: 95 / 135 Loss: 1.8765243291854858 Tokens per Sec: 18936.89218163396
Epoch Step: 100 / 135 Loss: 20.180282592773438 Tokens per Sec: 18240.54621429433
Epoch Step: 105 / 135 Loss: 2.0273890495300293 Tokens per Sec: 15305.962218789546
Epoch Step: 110 / 135 Loss: 5.873798370361328 Tokens per Sec: 14465.350946318915
Epoch Step: 115 / 135 Loss: 4.70736837387085 Tokens per Sec: 18828.67537667974
Epoch Step: 120 / 135 Loss: 1.3667914867401123 Tokens per Sec: 13515.920669680383
Epoch Step: 125 / 135 Loss: 1.5751723051071167 Tokens per Sec: 15564.43724876793
Epoch Step: 130 / 135 Loss: 2.870540142059326 Tokens per Sec: 15236.536504386659
Epoch Step: 135 / 135 Loss: 3.185560703277588 Tokens per Sec: 15662.030508451766
Epoch ended with duration 0:00:15.017137
Train perplexity: 1.140546318584958
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.726411
Validation perplexity: 1.241915968845502
Epoch 165 / 1000
Epoch Step: 5 / 135 Loss: 0.6303264498710632 Tokens per Sec: 19789.955350489035
Epoch Step: 10 / 135 Loss: 2.042384147644043 Tokens per Sec: 20144.214504376137
Epoch Step: 15 / 135 Loss: 0.4892725348472595 Tokens per Sec: 17326.130929349703
Epoch Step: 20 / 135 Loss: 1.3681955337524414 Tokens per Sec: 18618.387214189603
Epoch Step: 25 / 135 Loss: 2.088228225708008 Tokens per Sec: 17846.04617090268
Epoch Step: 30 / 135 Loss: 3.042280673980713 Tokens per Sec: 18462.592516897374
Epoch Step: 35 / 135 Loss: 0.9851291179656982 Tokens per Sec: 19745.912987402004
Epoch Step: 40 / 135 Loss: 2.298065423965454 Tokens per Sec: 19220.366493730842
Epoch Step: 45 / 135 Loss: 0.5098727345466614 Tokens per Sec: 14286.147069666698
Epoch Step: 50 / 135 Loss: 3.522479772567749 Tokens per Sec: 15899.270364097043
Epoch Step: 55 / 135 Loss: 0.6768233776092529 Tokens per Sec: 16184.00567164778
Epoch Step: 60 / 135 Loss: 0.9394010305404663 Tokens per Sec: 15757.418642021239
Epoch Step: 65 / 135 Loss: 21.919408798217773 Tokens per Sec: 17689.873318755283
Epoch Step: 70 / 135 Loss: 2.464031219482422 Tokens per Sec: 15516.857025442921
Epoch Step: 75 / 135 Loss: 0.4428127110004425 Tokens per Sec: 15124.884591116104
Epoch Step: 80 / 135 Loss: 1.2104625701904297 Tokens per Sec: 16587.850173727515
Epoch Step: 85 / 135 Loss: 1.230989694595337 Tokens per Sec: 15199.957207754485
Epoch Step: 90 / 135 Loss: 3.0785515308380127 Tokens per Sec: 15897.78494723974
Epoch Step: 95 / 135 Loss: 0.7551945447921753 Tokens per Sec: 15206.47519294326
Epoch Step: 100 / 135 Loss: 1.5157644748687744 Tokens per Sec: 19630.385136949124
Epoch Step: 105 / 135 Loss: 2.015568256378174 Tokens per Sec: 15552.943693245725
Epoch Step: 110 / 135 Loss: 2.3172972202301025 Tokens per Sec: 17362.662625369136
Epoch Step: 115 / 135 Loss: 7.329411506652832 Tokens per Sec: 16508.563476103514
Epoch Step: 120 / 135 Loss: 1.7710999250411987 Tokens per Sec: 14726.873560775903
Epoch Step: 125 / 135 Loss: 1.8232245445251465 Tokens per Sec: 15096.648557001798
Epoch Step: 130 / 135 Loss: 0.7211070656776428 Tokens per Sec: 15746.874404844524
Epoch Step: 135 / 135 Loss: 1.6034290790557861 Tokens per Sec: 14812.085528994743
Epoch ended with duration 0:00:15.154972
Train perplexity: 1.0950964875109879
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.711696
Validation perplexity: 1.1692833046853561
Model saved checkpoint!
Epoch 166 / 1000
Epoch Step: 5 / 135 Loss: 1.9717577695846558 Tokens per Sec: 14908.403412413356
Epoch Step: 10 / 135 Loss: 1.88963782787323 Tokens per Sec: 19618.371409493397
Epoch Step: 15 / 135 Loss: 1.2310378551483154 Tokens per Sec: 20396.022515959903
Epoch Step: 20 / 135 Loss: 1.1792763471603394 Tokens per Sec: 16062.644971152911
Epoch Step: 25 / 135 Loss: 1.2577955722808838 Tokens per Sec: 17762.790195423193
Epoch Step: 30 / 135 Loss: 2.1252551078796387 Tokens per Sec: 18441.79724336369
Epoch Step: 35 / 135 Loss: 6.672364711761475 Tokens per Sec: 14562.643214772766
Epoch Step: 40 / 135 Loss: 2.7682902812957764 Tokens per Sec: 19049.15090524764
Epoch Step: 45 / 135 Loss: 1.423180103302002 Tokens per Sec: 15407.379892632036
Epoch Step: 50 / 135 Loss: 0.7714546918869019 Tokens per Sec: 17221.857674452433
Epoch Step: 55 / 135 Loss: 0.5593277215957642 Tokens per Sec: 14212.419718756773
Epoch Step: 60 / 135 Loss: 0.39365488290786743 Tokens per Sec: 15823.807487950611
Epoch Step: 65 / 135 Loss: 2.2430295944213867 Tokens per Sec: 20624.416527555913
Epoch Step: 70 / 135 Loss: 1.2643013000488281 Tokens per Sec: 16512.91503108545
Epoch Step: 75 / 135 Loss: 1.527042031288147 Tokens per Sec: 16638.163942802035
Epoch Step: 80 / 135 Loss: 0.41006630659103394 Tokens per Sec: 13211.519612882557
Epoch Step: 85 / 135 Loss: 0.9980980157852173 Tokens per Sec: 18486.85813350532
Epoch Step: 90 / 135 Loss: 1.8859307765960693 Tokens per Sec: 20198.209158679445
Epoch Step: 95 / 135 Loss: 2.002373695373535 Tokens per Sec: 17920.57614151392
Epoch Step: 100 / 135 Loss: 0.42918890714645386 Tokens per Sec: 17483.373967044732
Epoch Step: 105 / 135 Loss: 0.9118547439575195 Tokens per Sec: 14624.17924833869
Epoch Step: 110 / 135 Loss: 1.055379867553711 Tokens per Sec: 15380.757345003332
Epoch Step: 115 / 135 Loss: 1.2692543268203735 Tokens per Sec: 16889.146721638368
Epoch Step: 120 / 135 Loss: 0.9071224331855774 Tokens per Sec: 16751.748126214345
Epoch Step: 125 / 135 Loss: 1.7709174156188965 Tokens per Sec: 14766.490733823439
Epoch Step: 130 / 135 Loss: 0.5494394898414612 Tokens per Sec: 16471.44400716711
Epoch Step: 135 / 135 Loss: 0.9934825301170349 Tokens per Sec: 14277.404472653345
Epoch ended with duration 0:00:15.082538
Train perplexity: 1.0536719513596653
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.727005
Validation perplexity: 1.2139172587650113
Epoch 167 / 1000
Epoch Step: 5 / 135 Loss: 1.435408592224121 Tokens per Sec: 14874.224685954916
Epoch Step: 10 / 135 Loss: 1.032849669456482 Tokens per Sec: 17898.70769895667
Epoch Step: 15 / 135 Loss: 0.5771815180778503 Tokens per Sec: 18869.53555796686
Epoch Step: 20 / 135 Loss: 0.8323644399642944 Tokens per Sec: 16724.220405116605
Epoch Step: 25 / 135 Loss: 0.8933533430099487 Tokens per Sec: 19413.95337967604
Epoch Step: 30 / 135 Loss: 0.9200541973114014 Tokens per Sec: 15930.313016476419
Epoch Step: 35 / 135 Loss: 0.27017244696617126 Tokens per Sec: 17425.037376865563
Epoch Step: 40 / 135 Loss: 2.176934003829956 Tokens per Sec: 17033.794376625177
Epoch Step: 45 / 135 Loss: 2.271207809448242 Tokens per Sec: 17005.06019486043
Epoch Step: 50 / 135 Loss: 5.80462646484375 Tokens per Sec: 18549.174924926847
Epoch Step: 55 / 135 Loss: 3.459892511367798 Tokens per Sec: 16612.99459649522
Epoch Step: 60 / 135 Loss: 0.5728713870048523 Tokens per Sec: 17421.32273782312
Epoch Step: 65 / 135 Loss: 1.6002376079559326 Tokens per Sec: 19765.544861235114
Epoch Step: 70 / 135 Loss: 1.154337763786316 Tokens per Sec: 16726.399496305545
Epoch Step: 75 / 135 Loss: 1.2112985849380493 Tokens per Sec: 19111.901346678955
Epoch Step: 80 / 135 Loss: 0.7860280871391296 Tokens per Sec: 14924.3458481015
Epoch Step: 85 / 135 Loss: 0.5023823976516724 Tokens per Sec: 16108.18618965268
Epoch Step: 90 / 135 Loss: 1.8006263971328735 Tokens per Sec: 14710.197441457665
Epoch Step: 95 / 135 Loss: 2.243065118789673 Tokens per Sec: 18289.116279069767
Epoch Step: 100 / 135 Loss: 6.526915073394775 Tokens per Sec: 16621.39769168138
Epoch Step: 105 / 135 Loss: 1.536302089691162 Tokens per Sec: 15901.429204183345
Epoch Step: 110 / 135 Loss: 2.885169506072998 Tokens per Sec: 16517.912371327813
Epoch Step: 115 / 135 Loss: 1.1407850980758667 Tokens per Sec: 16861.58268614602
Epoch Step: 120 / 135 Loss: 0.9367160201072693 Tokens per Sec: 16341.288350434103
Epoch Step: 125 / 135 Loss: 1.424627423286438 Tokens per Sec: 15059.147943094842
Epoch Step: 130 / 135 Loss: 0.5009969472885132 Tokens per Sec: 14229.414110113212
Epoch Step: 135 / 135 Loss: 0.8576400876045227 Tokens per Sec: 14729.842659608428
Epoch ended with duration 0:00:15.136395
Train perplexity: 1.0736716354736195
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.714150
Validation perplexity: 1.2053079395222484
Epoch 168 / 1000
Epoch Step: 5 / 135 Loss: 1.1280354261398315 Tokens per Sec: 18220.282751800416
Epoch Step: 10 / 135 Loss: 1.5026395320892334 Tokens per Sec: 19116.15596980016
Epoch Step: 15 / 135 Loss: 0.5761538147926331 Tokens per Sec: 15716.113997919269
Epoch Step: 20 / 135 Loss: 0.9659277200698853 Tokens per Sec: 18152.311465826173
Epoch Step: 25 / 135 Loss: 1.7852189540863037 Tokens per Sec: 16541.28370833033
Epoch Step: 30 / 135 Loss: 0.9726003408432007 Tokens per Sec: 18831.10201137352
Epoch Step: 35 / 135 Loss: 1.3665571212768555 Tokens per Sec: 17098.81335545234
Epoch Step: 40 / 135 Loss: 0.8606433868408203 Tokens per Sec: 18360.824342396965
Epoch Step: 45 / 135 Loss: 1.2015799283981323 Tokens per Sec: 17880.970510244435
Epoch Step: 50 / 135 Loss: 2.469127655029297 Tokens per Sec: 18281.37729890628
Epoch Step: 55 / 135 Loss: 1.953184962272644 Tokens per Sec: 18445.56861303238
Epoch Step: 60 / 135 Loss: 32.919288635253906 Tokens per Sec: 17577.865316318253
Epoch Step: 65 / 135 Loss: 7.476675987243652 Tokens per Sec: 17397.50977954618
Epoch Step: 70 / 135 Loss: 3.316190481185913 Tokens per Sec: 17138.059461343262
Epoch Step: 75 / 135 Loss: 0.35419535636901855 Tokens per Sec: 16256.26542334632
Epoch Step: 80 / 135 Loss: 1.7872328758239746 Tokens per Sec: 17300.607504894015
Epoch Step: 85 / 135 Loss: 1.0477827787399292 Tokens per Sec: 16835.759505968676
Epoch Step: 90 / 135 Loss: 1.1171399354934692 Tokens per Sec: 16779.078510679476
Epoch Step: 95 / 135 Loss: 0.29637080430984497 Tokens per Sec: 16133.71101602988
Epoch Step: 100 / 135 Loss: 1.6210837364196777 Tokens per Sec: 15621.40961260525
Epoch Step: 105 / 135 Loss: 1.7893095016479492 Tokens per Sec: 17610.542644720597
Epoch Step: 110 / 135 Loss: 0.8244200944900513 Tokens per Sec: 15915.980634512516
Epoch Step: 115 / 135 Loss: 1.542823076248169 Tokens per Sec: 12984.755129526999
Epoch Step: 120 / 135 Loss: 1.237426996231079 Tokens per Sec: 15569.567581744479
Epoch Step: 125 / 135 Loss: 11.59721851348877 Tokens per Sec: 16554.26061061906
Epoch Step: 130 / 135 Loss: 1.778128743171692 Tokens per Sec: 15407.480549086209
Epoch Step: 135 / 135 Loss: 1.8565934896469116 Tokens per Sec: 15594.80958180074
Epoch ended with duration 0:00:15.021244
Train perplexity: 1.0736276848526227
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.714850
Validation perplexity: 1.1611558677823741
Model saved best_on_validation!
Epoch 169 / 1000
Epoch Step: 5 / 135 Loss: 2.618495225906372 Tokens per Sec: 16663.215321262098
Epoch Step: 10 / 135 Loss: 1.2760369777679443 Tokens per Sec: 16066.942131689428
Epoch Step: 15 / 135 Loss: 1.2991987466812134 Tokens per Sec: 17522.232374489617
Epoch Step: 20 / 135 Loss: 0.9929453134536743 Tokens per Sec: 18404.627177200786
Epoch Step: 25 / 135 Loss: 0.9797531962394714 Tokens per Sec: 20344.274233760538
Epoch Step: 30 / 135 Loss: 1.9028489589691162 Tokens per Sec: 16650.654499102602
Epoch Step: 35 / 135 Loss: 0.7719472646713257 Tokens per Sec: 15972.398999118272
Epoch Step: 40 / 135 Loss: 1.0381579399108887 Tokens per Sec: 18898.002156013237
Epoch Step: 45 / 135 Loss: 0.27780061960220337 Tokens per Sec: 17355.529493179718
Epoch Step: 50 / 135 Loss: 0.7527173757553101 Tokens per Sec: 15951.684328712776
Epoch Step: 55 / 135 Loss: 1.4286832809448242 Tokens per Sec: 15152.368511731846
Epoch Step: 60 / 135 Loss: 1.1636006832122803 Tokens per Sec: 19289.714692263413
Epoch Step: 65 / 135 Loss: 0.9078486561775208 Tokens per Sec: 19155.19208930272
Epoch Step: 70 / 135 Loss: 0.8498075008392334 Tokens per Sec: 18670.536467376336
Epoch Step: 75 / 135 Loss: 1.936951994895935 Tokens per Sec: 16486.47374781434
Epoch Step: 80 / 135 Loss: 1.8378844261169434 Tokens per Sec: 18662.379403587915
Epoch Step: 85 / 135 Loss: 0.40159881114959717 Tokens per Sec: 19026.071801075104
Epoch Step: 90 / 135 Loss: 1.1052535772323608 Tokens per Sec: 16126.391106694278
Epoch Step: 95 / 135 Loss: 0.6761066913604736 Tokens per Sec: 15908.324972092365
Epoch Step: 100 / 135 Loss: 1.2672754526138306 Tokens per Sec: 16163.309664209899
Epoch Step: 105 / 135 Loss: 1.335242748260498 Tokens per Sec: 15618.533682057125
Epoch Step: 110 / 135 Loss: 2.4619932174682617 Tokens per Sec: 16037.686992345045
Epoch Step: 115 / 135 Loss: 0.7978964447975159 Tokens per Sec: 15679.112714864936
Epoch Step: 120 / 135 Loss: 1.1771488189697266 Tokens per Sec: 14197.625459392691
Epoch Step: 125 / 135 Loss: 0.9387045502662659 Tokens per Sec: 14896.275553393985
Epoch Step: 130 / 135 Loss: 1.110005497932434 Tokens per Sec: 14483.460654588574
Epoch Step: 135 / 135 Loss: 5.7426910400390625 Tokens per Sec: 16096.766143754972
Epoch ended with duration 0:00:15.141528
Train perplexity: 1.053617731682855
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.717891
Validation perplexity: 1.163572703640611
Epoch 170 / 1000
Epoch Step: 5 / 135 Loss: 1.8973479270935059 Tokens per Sec: 16643.927241768855
Epoch Step: 10 / 135 Loss: 1.3035808801651 Tokens per Sec: 14622.768862762747
Epoch Step: 15 / 135 Loss: 0.802354097366333 Tokens per Sec: 18694.451548444194
Epoch Step: 20 / 135 Loss: 0.7473921179771423 Tokens per Sec: 17917.33176573161
Epoch Step: 25 / 135 Loss: 1.3968288898468018 Tokens per Sec: 17211.175651099275
Epoch Step: 30 / 135 Loss: 1.6856755018234253 Tokens per Sec: 14328.447142221648
Epoch Step: 35 / 135 Loss: 1.819234013557434 Tokens per Sec: 17750.313338607513
Epoch Step: 40 / 135 Loss: 0.617573618888855 Tokens per Sec: 16852.12676951093
Epoch Step: 45 / 135 Loss: 0.9285737872123718 Tokens per Sec: 18756.130943620177
Epoch Step: 50 / 135 Loss: 1.7817561626434326 Tokens per Sec: 18230.580469470562
Epoch Step: 55 / 135 Loss: 0.5176033973693848 Tokens per Sec: 17424.296314070976
Epoch Step: 60 / 135 Loss: 5.065918445587158 Tokens per Sec: 19286.29754116459
Epoch Step: 65 / 135 Loss: 2.077845811843872 Tokens per Sec: 17109.311868139906
Epoch Step: 70 / 135 Loss: 2.4730870723724365 Tokens per Sec: 17682.445240417735
Epoch Step: 75 / 135 Loss: 0.4324660897254944 Tokens per Sec: 19379.2476016378
Epoch Step: 80 / 135 Loss: 15.499496459960938 Tokens per Sec: 16970.701422463317
Epoch Step: 85 / 135 Loss: 1.0339689254760742 Tokens per Sec: 18926.818458604197
Epoch Step: 90 / 135 Loss: 0.6483151912689209 Tokens per Sec: 18319.708151343384
Epoch Step: 95 / 135 Loss: 1.7598423957824707 Tokens per Sec: 17241.4507288805
Epoch Step: 100 / 135 Loss: 1.560387134552002 Tokens per Sec: 16869.008367419097
Epoch Step: 105 / 135 Loss: 4.63157844543457 Tokens per Sec: 14407.243617516591
Epoch Step: 110 / 135 Loss: 1.8909894227981567 Tokens per Sec: 17370.550391042834
Epoch Step: 115 / 135 Loss: 21.471599578857422 Tokens per Sec: 15217.44941760518
Epoch Step: 120 / 135 Loss: 0.8366470336914062 Tokens per Sec: 15679.13498421974
Epoch Step: 125 / 135 Loss: 1.9585741758346558 Tokens per Sec: 15632.073024273033
Epoch Step: 130 / 135 Loss: 0.840880811214447 Tokens per Sec: 15593.17887531788
Epoch Step: 135 / 135 Loss: 1.1192305088043213 Tokens per Sec: 15930.0627250238
Epoch ended with duration 0:00:14.967589
Train perplexity: 1.0640395419661477
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.720008
Validation perplexity: 1.2322958030539939
Model saved checkpoint!
Epoch 171 / 1000
Epoch Step: 5 / 135 Loss: 1.6861484050750732 Tokens per Sec: 18395.46268517551
Epoch Step: 10 / 135 Loss: 1.058640718460083 Tokens per Sec: 17549.332650542317
Epoch Step: 15 / 135 Loss: 1.3717714548110962 Tokens per Sec: 15881.688988435155
Epoch Step: 20 / 135 Loss: 7.226424217224121 Tokens per Sec: 17059.53457213494
Epoch Step: 25 / 135 Loss: 1.541321873664856 Tokens per Sec: 17599.918322951464
Epoch Step: 30 / 135 Loss: 0.9607433080673218 Tokens per Sec: 14933.146986714206
Epoch Step: 35 / 135 Loss: 12.046343803405762 Tokens per Sec: 18105.467041181917
Epoch Step: 40 / 135 Loss: 1.82283616065979 Tokens per Sec: 15407.749417722396
Epoch Step: 45 / 135 Loss: 1.5918636322021484 Tokens per Sec: 17013.984846948493
Epoch Step: 50 / 135 Loss: 1.1544901132583618 Tokens per Sec: 16700.204587295437
Epoch Step: 55 / 135 Loss: 0.6215327978134155 Tokens per Sec: 13912.777268810196
Epoch Step: 60 / 135 Loss: 1.4532716274261475 Tokens per Sec: 16099.671778816886
Epoch Step: 65 / 135 Loss: 0.705656886100769 Tokens per Sec: 17160.278289315735
Epoch Step: 70 / 135 Loss: 2.8475260734558105 Tokens per Sec: 17791.390684401245
Epoch Step: 75 / 135 Loss: 2.721623420715332 Tokens per Sec: 18052.23589719497
Epoch Step: 80 / 135 Loss: 0.4861452877521515 Tokens per Sec: 20849.222968494738
Epoch Step: 85 / 135 Loss: 1.1357316970825195 Tokens per Sec: 17695.66202927284
Epoch Step: 90 / 135 Loss: 1.5475742816925049 Tokens per Sec: 16643.887248776977
Epoch Step: 95 / 135 Loss: 1.3044874668121338 Tokens per Sec: 19227.816777346576
Epoch Step: 100 / 135 Loss: 1.782621145248413 Tokens per Sec: 20580.978663930226
Epoch Step: 105 / 135 Loss: 1.679118275642395 Tokens per Sec: 17106.39589867731
Epoch Step: 110 / 135 Loss: 0.9066465497016907 Tokens per Sec: 15668.369595651951
Epoch Step: 115 / 135 Loss: 1.2374770641326904 Tokens per Sec: 14468.711793467584
Epoch Step: 120 / 135 Loss: 8.881010055541992 Tokens per Sec: 15588.60182230466
Epoch Step: 125 / 135 Loss: 0.819514274597168 Tokens per Sec: 17673.85233354307
Epoch Step: 130 / 135 Loss: 1.4219287633895874 Tokens per Sec: 15798.486765924192
Epoch Step: 135 / 135 Loss: 2.4654760360717773 Tokens per Sec: 14757.262189968162
Epoch ended with duration 0:00:14.983560
Train perplexity: 1.0660178083905139
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.724674
Validation perplexity: 1.281349627671485
Epoch 172 / 1000
Epoch Step: 5 / 135 Loss: 1.2532658576965332 Tokens per Sec: 18313.171862300413
Epoch Step: 10 / 135 Loss: 3.0587334632873535 Tokens per Sec: 18159.102936417632
Epoch Step: 15 / 135 Loss: 1.0790350437164307 Tokens per Sec: 18771.783799589433
Epoch Step: 20 / 135 Loss: 1.6279505491256714 Tokens per Sec: 16075.19869133803
Epoch Step: 25 / 135 Loss: 2.4423539638519287 Tokens per Sec: 17363.564309777274
Epoch Step: 30 / 135 Loss: 6.108527660369873 Tokens per Sec: 17251.12066744165
Epoch Step: 35 / 135 Loss: 1.4026299715042114 Tokens per Sec: 15728.824670001433
Epoch Step: 40 / 135 Loss: 0.7592850923538208 Tokens per Sec: 16100.176251770456
Epoch Step: 45 / 135 Loss: 0.8520980477333069 Tokens per Sec: 17790.532408663417
Epoch Step: 50 / 135 Loss: 0.6605135798454285 Tokens per Sec: 19346.2908391146
Epoch Step: 55 / 135 Loss: 1.2357561588287354 Tokens per Sec: 18531.19841388627
Epoch Step: 60 / 135 Loss: 25.410999298095703 Tokens per Sec: 15951.577866035468
Epoch Step: 65 / 135 Loss: 0.6369726061820984 Tokens per Sec: 15786.607917449553
Epoch Step: 70 / 135 Loss: 1.8900490999221802 Tokens per Sec: 18945.998196041102
Epoch Step: 75 / 135 Loss: 0.6477167010307312 Tokens per Sec: 15231.033186370007
Epoch Step: 80 / 135 Loss: 0.9218693971633911 Tokens per Sec: 18067.13969873188
Epoch Step: 85 / 135 Loss: 0.5129898190498352 Tokens per Sec: 17806.48325886148
Epoch Step: 90 / 135 Loss: 1.5777864456176758 Tokens per Sec: 19944.608102274815
Epoch Step: 95 / 135 Loss: 0.5277382135391235 Tokens per Sec: 16312.255801703777
Epoch Step: 100 / 135 Loss: 0.7468569278717041 Tokens per Sec: 15936.313334840925
Epoch Step: 105 / 135 Loss: 24.67706298828125 Tokens per Sec: 16532.51193246707
Epoch Step: 110 / 135 Loss: 1.5304511785507202 Tokens per Sec: 14095.372307245849
Epoch Step: 115 / 135 Loss: 0.9689511060714722 Tokens per Sec: 14008.59280602397
Epoch Step: 120 / 135 Loss: 0.7720800638198853 Tokens per Sec: 15106.880483544308
Epoch Step: 125 / 135 Loss: 1.5503841638565063 Tokens per Sec: 16553.304130388937
Epoch Step: 130 / 135 Loss: 1.2612134218215942 Tokens per Sec: 17350.81440710664
Epoch Step: 135 / 135 Loss: 1.2819143533706665 Tokens per Sec: 14982.193701121383
Epoch ended with duration 0:00:15.098144
Train perplexity: 1.1077136755655475
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.717266
Validation perplexity: 1.1659675044164097
Epoch 173 / 1000
Epoch Step: 5 / 135 Loss: 1.9034850597381592 Tokens per Sec: 18106.771825508662
Epoch Step: 10 / 135 Loss: 1.6344417333602905 Tokens per Sec: 19869.378358228856
Epoch Step: 15 / 135 Loss: 0.7833532094955444 Tokens per Sec: 18746.086375632844
Epoch Step: 20 / 135 Loss: 1.426772117614746 Tokens per Sec: 13977.761906645914
Epoch Step: 25 / 135 Loss: 0.778121829032898 Tokens per Sec: 17374.320990924887
Epoch Step: 30 / 135 Loss: 2.051448106765747 Tokens per Sec: 16946.068157661506
Epoch Step: 35 / 135 Loss: 1.361954927444458 Tokens per Sec: 13965.36534127646
Epoch Step: 40 / 135 Loss: 1.7716325521469116 Tokens per Sec: 15898.338393949994
Epoch Step: 45 / 135 Loss: 1.5701730251312256 Tokens per Sec: 15589.790297834918
Epoch Step: 50 / 135 Loss: 1.7955212593078613 Tokens per Sec: 16876.022811893
Epoch Step: 55 / 135 Loss: 0.7313302159309387 Tokens per Sec: 19675.74476262475
Epoch Step: 60 / 135 Loss: 0.8699436187744141 Tokens per Sec: 17471.64016262529
Epoch Step: 65 / 135 Loss: 0.38718387484550476 Tokens per Sec: 15736.531078117057
Epoch Step: 70 / 135 Loss: 0.29782629013061523 Tokens per Sec: 18912.394820166795
Epoch Step: 75 / 135 Loss: 0.3611573874950409 Tokens per Sec: 17649.918140050562
Epoch Step: 80 / 135 Loss: 0.572864830493927 Tokens per Sec: 16690.922232707977
Epoch Step: 85 / 135 Loss: 1.3392151594161987 Tokens per Sec: 15729.624443951318
Epoch Step: 90 / 135 Loss: 0.7887438535690308 Tokens per Sec: 15048.17874384767
Epoch Step: 95 / 135 Loss: 0.7291362881660461 Tokens per Sec: 19622.25587537861
Epoch Step: 100 / 135 Loss: 1.2244877815246582 Tokens per Sec: 20577.38442988883
Epoch Step: 105 / 135 Loss: 1.6795412302017212 Tokens per Sec: 15770.694132342096
Epoch Step: 110 / 135 Loss: 1.3649473190307617 Tokens per Sec: 13616.584930148794
Epoch Step: 115 / 135 Loss: 0.5185962915420532 Tokens per Sec: 15549.56638117675
Epoch Step: 120 / 135 Loss: 1.6894944906234741 Tokens per Sec: 16416.349549297607
Epoch Step: 125 / 135 Loss: 2.118112564086914 Tokens per Sec: 15851.460874341552
Epoch Step: 130 / 135 Loss: 1.3775253295898438 Tokens per Sec: 17070.202642053606
Epoch Step: 135 / 135 Loss: 5.981883525848389 Tokens per Sec: 15431.75075493141
Epoch ended with duration 0:00:15.110847
Train perplexity: 1.0652448028329284
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.721016
Validation perplexity: 1.1995354277288244
Epoch 174 / 1000
Epoch Step: 5 / 135 Loss: 0.9096317887306213 Tokens per Sec: 18958.73097136043
Epoch Step: 10 / 135 Loss: 1.2698639631271362 Tokens per Sec: 15420.522446013258
Epoch Step: 15 / 135 Loss: 1.9344475269317627 Tokens per Sec: 17954.448238311
Epoch Step: 20 / 135 Loss: 0.4087839424610138 Tokens per Sec: 16910.645760398125
Epoch Step: 25 / 135 Loss: 0.4313434958457947 Tokens per Sec: 15885.147045867228
Epoch Step: 30 / 135 Loss: 1.407002329826355 Tokens per Sec: 20502.5182235696
Epoch Step: 35 / 135 Loss: 1.683613896369934 Tokens per Sec: 19033.92549871476
Epoch Step: 40 / 135 Loss: 2.023648500442505 Tokens per Sec: 14286.060485970109
Epoch Step: 45 / 135 Loss: 1.8236205577850342 Tokens per Sec: 17632.592303539288
Epoch Step: 50 / 135 Loss: 1.8819012641906738 Tokens per Sec: 16558.997962147787
Epoch Step: 55 / 135 Loss: 2.263857364654541 Tokens per Sec: 17767.736177457173
Epoch Step: 60 / 135 Loss: 1.2590131759643555 Tokens per Sec: 17728.441589372524
Epoch Step: 65 / 135 Loss: 1.818953037261963 Tokens per Sec: 17489.141828897784
Epoch Step: 70 / 135 Loss: 0.5441754460334778 Tokens per Sec: 18679.645465313006
Epoch Step: 75 / 135 Loss: 1.4689571857452393 Tokens per Sec: 18137.319468036625
Epoch Step: 80 / 135 Loss: 0.3838936388492584 Tokens per Sec: 16422.771294322833
Epoch Step: 85 / 135 Loss: 4.513429641723633 Tokens per Sec: 18451.883004069714
Epoch Step: 90 / 135 Loss: 38.151641845703125 Tokens per Sec: 14790.786846804596
Epoch Step: 95 / 135 Loss: 22.48599624633789 Tokens per Sec: 18970.07878221996
Epoch Step: 100 / 135 Loss: 0.37351739406585693 Tokens per Sec: 16605.991009183203
Epoch Step: 105 / 135 Loss: 1.413253903388977 Tokens per Sec: 14944.560030143564
Epoch Step: 110 / 135 Loss: 1.1612048149108887 Tokens per Sec: 15086.113367539298
Epoch Step: 115 / 135 Loss: 1.4276907444000244 Tokens per Sec: 15031.68161334884
Epoch Step: 120 / 135 Loss: 5.951379299163818 Tokens per Sec: 16272.89447010587
Epoch Step: 125 / 135 Loss: 2.02937912940979 Tokens per Sec: 17516.30251885428
Epoch Step: 130 / 135 Loss: 1.0098453760147095 Tokens per Sec: 14925.347955732945
Epoch Step: 135 / 135 Loss: 1.804144263267517 Tokens per Sec: 14996.54752260047
Epoch ended with duration 0:00:15.036196
Train perplexity: 1.1048491694381293
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.718706
Validation perplexity: 1.2775464489633288
Epoch 175 / 1000
Epoch Step: 5 / 135 Loss: 2.223578929901123 Tokens per Sec: 12867.421740624275
Epoch Step: 10 / 135 Loss: 1.465822458267212 Tokens per Sec: 17704.706828620267
Epoch Step: 15 / 135 Loss: 1.963588833808899 Tokens per Sec: 15330.558912623555
Epoch Step: 20 / 135 Loss: 4.62056827545166 Tokens per Sec: 15270.086718793455
Epoch Step: 25 / 135 Loss: 1.0780748128890991 Tokens per Sec: 17704.353782587652
Epoch Step: 30 / 135 Loss: 1.6187294721603394 Tokens per Sec: 16062.497873127584
Epoch Step: 35 / 135 Loss: 1.0766667127609253 Tokens per Sec: 18374.593643624212
Epoch Step: 40 / 135 Loss: 1.2646071910858154 Tokens per Sec: 16799.499128954612
Epoch Step: 45 / 135 Loss: 1.1450400352478027 Tokens per Sec: 19027.990995580632
Epoch Step: 50 / 135 Loss: 1.0174373388290405 Tokens per Sec: 18471.33311947746
Epoch Step: 55 / 135 Loss: 2.3173112869262695 Tokens per Sec: 14641.22988074488
Epoch Step: 60 / 135 Loss: 0.7117043733596802 Tokens per Sec: 19464.164792919786
Epoch Step: 65 / 135 Loss: 1.0408058166503906 Tokens per Sec: 19405.44152389471
Epoch Step: 70 / 135 Loss: 0.6572033762931824 Tokens per Sec: 17230.985536700966
Epoch Step: 75 / 135 Loss: 1.4288346767425537 Tokens per Sec: 18806.477160430182
Epoch Step: 80 / 135 Loss: 1.8655592203140259 Tokens per Sec: 19362.83441158944
Epoch Step: 85 / 135 Loss: 1.8962510824203491 Tokens per Sec: 14405.456858941556
Epoch Step: 90 / 135 Loss: 0.2590504586696625 Tokens per Sec: 19116.827215572815
Epoch Step: 95 / 135 Loss: 1.0807560682296753 Tokens per Sec: 18488.775763668174
Epoch Step: 100 / 135 Loss: 0.73384690284729 Tokens per Sec: 18294.4944039998
Epoch Step: 105 / 135 Loss: 1.285637617111206 Tokens per Sec: 16230.183459436912
Epoch Step: 110 / 135 Loss: 1.390845775604248 Tokens per Sec: 16890.911403643877
Epoch Step: 115 / 135 Loss: 0.9363679885864258 Tokens per Sec: 15630.162375139085
Epoch Step: 120 / 135 Loss: 1.6183390617370605 Tokens per Sec: 15542.828301673791
Epoch Step: 125 / 135 Loss: 1.546935796737671 Tokens per Sec: 15308.079418676896
Epoch Step: 130 / 135 Loss: 1.8846988677978516 Tokens per Sec: 15021.178235281399
Epoch Step: 135 / 135 Loss: 0.8337845802307129 Tokens per Sec: 16271.116960193423
Epoch ended with duration 0:00:15.011448
Train perplexity: 1.0501478875466206
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.718288
Validation perplexity: 1.2247681196382056
Model saved checkpoint!
Epoch 176 / 1000
Epoch Step: 5 / 135 Loss: 0.6572694778442383 Tokens per Sec: 18254.143476274407
Epoch Step: 10 / 135 Loss: 1.5566558837890625 Tokens per Sec: 18552.991051395984
Epoch Step: 15 / 135 Loss: 2.071571111679077 Tokens per Sec: 18348.016973377744
Epoch Step: 20 / 135 Loss: 7.941003799438477 Tokens per Sec: 15354.085283520544
Epoch Step: 25 / 135 Loss: 1.3814963102340698 Tokens per Sec: 14805.230128818135
Epoch Step: 30 / 135 Loss: 8.055181503295898 Tokens per Sec: 17628.537982052538
Epoch Step: 35 / 135 Loss: 1.1333056688308716 Tokens per Sec: 19931.406504384897
Epoch Step: 40 / 135 Loss: 1.2671318054199219 Tokens per Sec: 17767.25449696083
Epoch Step: 45 / 135 Loss: 0.19898518919944763 Tokens per Sec: 15562.013212983808
Epoch Step: 50 / 135 Loss: 1.1373707056045532 Tokens per Sec: 19007.282986032376
Epoch Step: 55 / 135 Loss: 1.4713318347930908 Tokens per Sec: 14498.991859491425
Epoch Step: 60 / 135 Loss: 2.517155170440674 Tokens per Sec: 14115.592565643832
Epoch Step: 65 / 135 Loss: 0.6138331890106201 Tokens per Sec: 17687.160651518225
Epoch Step: 70 / 135 Loss: 0.5889227390289307 Tokens per Sec: 18272.199765122543
Epoch Step: 75 / 135 Loss: 2.215578556060791 Tokens per Sec: 16209.845495592497
Epoch Step: 80 / 135 Loss: 2.6242003440856934 Tokens per Sec: 14242.376742060322
Epoch Step: 85 / 135 Loss: 1.5864309072494507 Tokens per Sec: 16250.303081424312
Epoch Step: 90 / 135 Loss: 1.267043948173523 Tokens per Sec: 15117.71710060861
Epoch Step: 95 / 135 Loss: 0.7088146805763245 Tokens per Sec: 16302.828308682787
Epoch Step: 100 / 135 Loss: 0.5123674273490906 Tokens per Sec: 16084.85193621198
Epoch Step: 105 / 135 Loss: 7.755660057067871 Tokens per Sec: 14934.827129950716
Epoch Step: 110 / 135 Loss: 0.8491930365562439 Tokens per Sec: 15312.88590338031
Epoch Step: 115 / 135 Loss: 1.218564510345459 Tokens per Sec: 14803.628371056884
Epoch Step: 120 / 135 Loss: 0.5419355630874634 Tokens per Sec: 15485.686409755683
Epoch Step: 125 / 135 Loss: 0.983902096748352 Tokens per Sec: 15966.850805886843
Epoch Step: 130 / 135 Loss: 1.773508906364441 Tokens per Sec: 15292.163580186847
Epoch Step: 135 / 135 Loss: 1.532395362854004 Tokens per Sec: 14667.026276473653
Epoch ended with duration 0:00:15.637436
Train perplexity: 1.0665211219957904
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647779
Validation perplexity: 1.2810879687305028
Epoch 177 / 1000
Epoch Step: 5 / 135 Loss: 2.5436861515045166 Tokens per Sec: 17078.426965670486
Epoch Step: 10 / 135 Loss: 2.068124771118164 Tokens per Sec: 18574.884992055817
Epoch Step: 15 / 135 Loss: 0.6240227222442627 Tokens per Sec: 18291.344800191062
Epoch Step: 20 / 135 Loss: 1.6281712055206299 Tokens per Sec: 17036.048955933133
Epoch Step: 25 / 135 Loss: 0.6749445796012878 Tokens per Sec: 16635.694398404477
Epoch Step: 30 / 135 Loss: 1.7329802513122559 Tokens per Sec: 17597.020752073673
Epoch Step: 35 / 135 Loss: 0.5610077381134033 Tokens per Sec: 16160.853446594498
Epoch Step: 40 / 135 Loss: 0.8030701875686646 Tokens per Sec: 16346.184759179781
Epoch Step: 45 / 135 Loss: 0.5979283452033997 Tokens per Sec: 16293.47045557059
Epoch Step: 50 / 135 Loss: 0.4209190607070923 Tokens per Sec: 14592.968422657794
Epoch Step: 55 / 135 Loss: 13.186870574951172 Tokens per Sec: 15629.07712610484
Epoch Step: 60 / 135 Loss: 0.3696317672729492 Tokens per Sec: 18018.73702985462
Epoch Step: 65 / 135 Loss: 1.9927911758422852 Tokens per Sec: 17305.22472299992
Epoch Step: 70 / 135 Loss: 0.44268691539764404 Tokens per Sec: 17987.2859923065
Epoch Step: 75 / 135 Loss: 1.127598524093628 Tokens per Sec: 13757.65128377509
Epoch Step: 80 / 135 Loss: 1.1011686325073242 Tokens per Sec: 15865.496110451244
Epoch Step: 85 / 135 Loss: 0.6098989248275757 Tokens per Sec: 15711.377859340422
Epoch Step: 90 / 135 Loss: 1.2780015468597412 Tokens per Sec: 18598.210605223878
Epoch Step: 95 / 135 Loss: 0.36206209659576416 Tokens per Sec: 16449.379078903043
Epoch Step: 100 / 135 Loss: 1.4974048137664795 Tokens per Sec: 16775.036236091084
Epoch Step: 105 / 135 Loss: 0.44926607608795166 Tokens per Sec: 13294.070136373812
Epoch Step: 110 / 135 Loss: 1.3207589387893677 Tokens per Sec: 14662.963319029182
Epoch Step: 115 / 135 Loss: 0.9048339128494263 Tokens per Sec: 15755.033638891908
Epoch Step: 120 / 135 Loss: 0.6004563570022583 Tokens per Sec: 14485.490910618464
Epoch Step: 125 / 135 Loss: 1.278414249420166 Tokens per Sec: 14790.3944596031
Epoch Step: 130 / 135 Loss: 1.1368443965911865 Tokens per Sec: 14786.698847457626
Epoch Step: 135 / 135 Loss: 1.047582745552063 Tokens per Sec: 16440.052923839692
Epoch ended with duration 0:00:15.673150
Train perplexity: 1.0610384725573219
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.662347
Validation perplexity: 1.521582210848433
Epoch 178 / 1000
Epoch Step: 5 / 135 Loss: 0.5917023420333862 Tokens per Sec: 14773.275414881135
Epoch Step: 10 / 135 Loss: 0.25899621844291687 Tokens per Sec: 17180.444754627068
Epoch Step: 15 / 135 Loss: 0.4960230588912964 Tokens per Sec: 16514.178882945103
Epoch Step: 20 / 135 Loss: 0.29872703552246094 Tokens per Sec: 14333.783588681606
Epoch Step: 25 / 135 Loss: 1.4635170698165894 Tokens per Sec: 17881.374180943163
Epoch Step: 30 / 135 Loss: 1.3287744522094727 Tokens per Sec: 16375.978359337985
Epoch Step: 35 / 135 Loss: 0.7413184642791748 Tokens per Sec: 16606.564112050168
Epoch Step: 40 / 135 Loss: 0.5151846408843994 Tokens per Sec: 18647.32604299654
Epoch Step: 45 / 135 Loss: 0.7595138549804688 Tokens per Sec: 16245.591665989501
Epoch Step: 50 / 135 Loss: 1.788748025894165 Tokens per Sec: 14908.523769313553
Epoch Step: 55 / 135 Loss: 0.6200248003005981 Tokens per Sec: 17069.695954744486
Epoch Step: 60 / 135 Loss: 2.1493165493011475 Tokens per Sec: 16503.88200853118
Epoch Step: 65 / 135 Loss: 0.4808359444141388 Tokens per Sec: 16306.265291372987
Epoch Step: 70 / 135 Loss: 1.4879966974258423 Tokens per Sec: 15156.476124446004
Epoch Step: 75 / 135 Loss: 0.5527452230453491 Tokens per Sec: 17081.582008778536
Epoch Step: 80 / 135 Loss: 0.7289443612098694 Tokens per Sec: 19292.206261179632
Epoch Step: 85 / 135 Loss: 0.7186222076416016 Tokens per Sec: 17347.846923063582
Epoch Step: 90 / 135 Loss: 1.5125339031219482 Tokens per Sec: 19309.559890202934
Epoch Step: 95 / 135 Loss: 0.6839385032653809 Tokens per Sec: 17190.412243274313
Epoch Step: 100 / 135 Loss: 0.4558631181716919 Tokens per Sec: 16528.582378584088
Epoch Step: 105 / 135 Loss: 0.9170872569084167 Tokens per Sec: 14818.826825903658
Epoch Step: 110 / 135 Loss: 0.8139604330062866 Tokens per Sec: 15505.665685713064
Epoch Step: 115 / 135 Loss: 1.2305946350097656 Tokens per Sec: 14366.436442301827
Epoch Step: 120 / 135 Loss: 1.0968022346496582 Tokens per Sec: 16524.8753090324
Epoch Step: 125 / 135 Loss: 0.611356258392334 Tokens per Sec: 13832.549103250187
Epoch Step: 130 / 135 Loss: 0.853519856929779 Tokens per Sec: 13543.297032063634
Epoch Step: 135 / 135 Loss: 0.8444010615348816 Tokens per Sec: 16692.89120674139
Epoch ended with duration 0:00:15.640589
Train perplexity: 1.058615535335981
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653291
Validation perplexity: 1.20233789841629
Epoch 179 / 1000
Epoch Step: 5 / 135 Loss: 0.4479486346244812 Tokens per Sec: 11701.545844143762
Epoch Step: 10 / 135 Loss: 0.9599665999412537 Tokens per Sec: 18581.7900089516
Epoch Step: 15 / 135 Loss: 1.3566930294036865 Tokens per Sec: 18697.25862533757
Epoch Step: 20 / 135 Loss: 0.4409227669239044 Tokens per Sec: 17380.510621995025
Epoch Step: 25 / 135 Loss: 1.105190634727478 Tokens per Sec: 15646.32953405309
Epoch Step: 30 / 135 Loss: 1.1105661392211914 Tokens per Sec: 16537.21210960249
Epoch Step: 35 / 135 Loss: 2.0136845111846924 Tokens per Sec: 17862.813589162382
Epoch Step: 40 / 135 Loss: 0.45398300886154175 Tokens per Sec: 17200.78041327209
Epoch Step: 45 / 135 Loss: 0.4507419764995575 Tokens per Sec: 18839.199899679657
Epoch Step: 50 / 135 Loss: 0.9254704713821411 Tokens per Sec: 17885.654127520946
Epoch Step: 55 / 135 Loss: 1.799920916557312 Tokens per Sec: 14115.34091746228
Epoch Step: 60 / 135 Loss: 0.24445053935050964 Tokens per Sec: 13476.726153474201
Epoch Step: 65 / 135 Loss: 1.7561814785003662 Tokens per Sec: 16930.465754272795
Epoch Step: 70 / 135 Loss: 2.592925786972046 Tokens per Sec: 16616.07944827762
Epoch Step: 75 / 135 Loss: 0.7625734210014343 Tokens per Sec: 17056.816934616087
Epoch Step: 80 / 135 Loss: 24.55557632446289 Tokens per Sec: 13375.865894195676
Epoch Step: 85 / 135 Loss: 0.49363964796066284 Tokens per Sec: 16746.63363594819
Epoch Step: 90 / 135 Loss: 1.5507307052612305 Tokens per Sec: 16747.211841435335
Epoch Step: 95 / 135 Loss: 0.9780724048614502 Tokens per Sec: 17688.75779243682
Epoch Step: 100 / 135 Loss: 0.8868694305419922 Tokens per Sec: 16929.032136312686
Epoch Step: 105 / 135 Loss: 1.1182966232299805 Tokens per Sec: 14801.283789024508
Epoch Step: 110 / 135 Loss: 0.8683562874794006 Tokens per Sec: 16350.18007186655
Epoch Step: 115 / 135 Loss: 1.0165311098098755 Tokens per Sec: 15587.969149083525
Epoch Step: 120 / 135 Loss: 1.4262547492980957 Tokens per Sec: 14788.232141589628
Epoch Step: 125 / 135 Loss: 1.0019338130950928 Tokens per Sec: 15096.86068788691
Epoch Step: 130 / 135 Loss: 5.242517471313477 Tokens per Sec: 15680.340912211925
Epoch Step: 135 / 135 Loss: 0.847545325756073 Tokens per Sec: 13747.946701857207
Epoch ended with duration 0:00:15.743257
Train perplexity: 1.0787530339848275
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645208
Validation perplexity: 1.250053479551416
Epoch 180 / 1000
Epoch Step: 5 / 135 Loss: 0.5828303098678589 Tokens per Sec: 15211.965857576157
Epoch Step: 10 / 135 Loss: 1.5274012088775635 Tokens per Sec: 15862.791576272562
Epoch Step: 15 / 135 Loss: 0.5739098787307739 Tokens per Sec: 16380.50259956201
Epoch Step: 20 / 135 Loss: 0.7375316023826599 Tokens per Sec: 14822.898623290757
Epoch Step: 25 / 135 Loss: 1.6043686866760254 Tokens per Sec: 12745.26634841204
Epoch Step: 30 / 135 Loss: 1.3740198612213135 Tokens per Sec: 18125.341618490263
Epoch Step: 35 / 135 Loss: 1.1410305500030518 Tokens per Sec: 19087.754562007598
Epoch Step: 40 / 135 Loss: 0.7001878023147583 Tokens per Sec: 17508.73046371049
Epoch Step: 45 / 135 Loss: 0.9410356879234314 Tokens per Sec: 18658.600080723838
Epoch Step: 50 / 135 Loss: 0.5714757442474365 Tokens per Sec: 17596.312355408278
Epoch Step: 55 / 135 Loss: 2.4747836589813232 Tokens per Sec: 13875.093183677882
Epoch Step: 60 / 135 Loss: 1.3554937839508057 Tokens per Sec: 18044.2684801117
Epoch Step: 65 / 135 Loss: 0.6365756988525391 Tokens per Sec: 16079.489504991883
Epoch Step: 70 / 135 Loss: 0.84366375207901 Tokens per Sec: 16451.942464594522
Epoch Step: 75 / 135 Loss: 6.010801315307617 Tokens per Sec: 18271.304962768005
Epoch Step: 80 / 135 Loss: 9.75310230255127 Tokens per Sec: 16838.08085073317
Epoch Step: 85 / 135 Loss: 0.47216761112213135 Tokens per Sec: 16716.819248066768
Epoch Step: 90 / 135 Loss: 1.767444372177124 Tokens per Sec: 16724.12508897936
Epoch Step: 95 / 135 Loss: 0.611251175403595 Tokens per Sec: 18968.08753176462
Epoch Step: 100 / 135 Loss: 1.058739185333252 Tokens per Sec: 14880.222784849288
Epoch Step: 105 / 135 Loss: 0.30203869938850403 Tokens per Sec: 13353.882977071677
Epoch Step: 110 / 135 Loss: 0.9670596122741699 Tokens per Sec: 16638.76617502038
Epoch Step: 115 / 135 Loss: 1.118473768234253 Tokens per Sec: 15934.740027669563
Epoch Step: 120 / 135 Loss: 1.2322642803192139 Tokens per Sec: 15272.639879121904
Epoch Step: 125 / 135 Loss: 1.112446665763855 Tokens per Sec: 14900.673611278098
Epoch Step: 130 / 135 Loss: 1.688870906829834 Tokens per Sec: 14906.899025251121
Epoch Step: 135 / 135 Loss: 1.3996050357818604 Tokens per Sec: 14039.041831809505
Epoch ended with duration 0:00:15.687309
Train perplexity: 1.0584301773272564
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656096
Validation perplexity: 1.3399195543056004
Model saved checkpoint!
Epoch 181 / 1000
Epoch Step: 5 / 135 Loss: 0.8728145360946655 Tokens per Sec: 15714.533021960819
Epoch Step: 10 / 135 Loss: 0.49518221616744995 Tokens per Sec: 15948.851042324462
Epoch Step: 15 / 135 Loss: 0.49285686016082764 Tokens per Sec: 15247.138105323505
Epoch Step: 20 / 135 Loss: 1.1482086181640625 Tokens per Sec: 19496.02960282338
Epoch Step: 25 / 135 Loss: 0.7351750135421753 Tokens per Sec: 16559.442178064168
Epoch Step: 30 / 135 Loss: 1.3561530113220215 Tokens per Sec: 14008.427383779774
Epoch Step: 35 / 135 Loss: 0.7961313724517822 Tokens per Sec: 16455.285447205348
Epoch Step: 40 / 135 Loss: 2.858954668045044 Tokens per Sec: 14473.827643038625
Epoch Step: 45 / 135 Loss: 0.5515044331550598 Tokens per Sec: 16007.76138200842
Epoch Step: 50 / 135 Loss: 1.8408515453338623 Tokens per Sec: 17575.456949876414
Epoch Step: 55 / 135 Loss: 1.6729135513305664 Tokens per Sec: 17548.74577222114
Epoch Step: 60 / 135 Loss: 0.7526978850364685 Tokens per Sec: 14978.152967045578
Epoch Step: 65 / 135 Loss: 1.0121572017669678 Tokens per Sec: 19757.416176989092
Epoch Step: 70 / 135 Loss: 0.4251595139503479 Tokens per Sec: 17175.322396175296
Epoch Step: 75 / 135 Loss: 0.8164101839065552 Tokens per Sec: 16504.800015424196
Epoch Step: 80 / 135 Loss: 1.164797306060791 Tokens per Sec: 17785.211881477964
Epoch Step: 85 / 135 Loss: 1.0107802152633667 Tokens per Sec: 15551.370710399371
Epoch Step: 90 / 135 Loss: 1.6300654411315918 Tokens per Sec: 17360.276058172058
Epoch Step: 95 / 135 Loss: 1.150888204574585 Tokens per Sec: 14027.48057534988
Epoch Step: 100 / 135 Loss: 0.823185920715332 Tokens per Sec: 17447.957674499085
Epoch Step: 105 / 135 Loss: 1.1539890766143799 Tokens per Sec: 15833.180527960272
Epoch Step: 110 / 135 Loss: 0.6245617866516113 Tokens per Sec: 15084.825866507066
Epoch Step: 115 / 135 Loss: 1.5617854595184326 Tokens per Sec: 16932.99153266618
Epoch Step: 120 / 135 Loss: 0.7564653158187866 Tokens per Sec: 15100.562694158421
Epoch Step: 125 / 135 Loss: 0.7487728595733643 Tokens per Sec: 14327.970555470965
Epoch Step: 130 / 135 Loss: 0.9801541566848755 Tokens per Sec: 14407.399733620196
Epoch Step: 135 / 135 Loss: 0.6691226959228516 Tokens per Sec: 14528.382405758945
Epoch ended with duration 0:00:15.770923
Train perplexity: 1.053089610352088
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647790
Validation perplexity: 1.2443248460242793
Epoch 182 / 1000
Epoch Step: 5 / 135 Loss: 1.9191349744796753 Tokens per Sec: 15633.517539475733
Epoch Step: 10 / 135 Loss: 0.8691471815109253 Tokens per Sec: 14628.69538920199
Epoch Step: 15 / 135 Loss: 1.4013413190841675 Tokens per Sec: 14112.08016697787
Epoch Step: 20 / 135 Loss: 1.7860569953918457 Tokens per Sec: 17175.489807072154
Epoch Step: 25 / 135 Loss: 0.5822058916091919 Tokens per Sec: 19091.30000633632
Epoch Step: 30 / 135 Loss: 0.3674531579017639 Tokens per Sec: 18500.61467841263
Epoch Step: 35 / 135 Loss: 0.3604584336280823 Tokens per Sec: 15908.173341754184
Epoch Step: 40 / 135 Loss: 0.40005460381507874 Tokens per Sec: 18489.708011778574
Epoch Step: 45 / 135 Loss: 1.117189645767212 Tokens per Sec: 18786.23028643082
Epoch Step: 50 / 135 Loss: 0.5494994521141052 Tokens per Sec: 15305.17314583595
Epoch Step: 55 / 135 Loss: 1.477112054824829 Tokens per Sec: 15830.31645624939
Epoch Step: 60 / 135 Loss: 1.0915664434432983 Tokens per Sec: 15845.216677005352
Epoch Step: 65 / 135 Loss: 26.235700607299805 Tokens per Sec: 16508.537869451447
Epoch Step: 70 / 135 Loss: 3.247602939605713 Tokens per Sec: 15448.264369653454
Epoch Step: 75 / 135 Loss: 2.61025071144104 Tokens per Sec: 16982.879043454068
Epoch Step: 80 / 135 Loss: 2.4027328491210938 Tokens per Sec: 19613.054919854763
Epoch Step: 85 / 135 Loss: 0.9342342019081116 Tokens per Sec: 15422.813174633493
Epoch Step: 90 / 135 Loss: 1.1275146007537842 Tokens per Sec: 18081.298523026948
Epoch Step: 95 / 135 Loss: 1.4174479246139526 Tokens per Sec: 17933.078419556492
Epoch Step: 100 / 135 Loss: 1.9841402769088745 Tokens per Sec: 16341.440019681737
Epoch Step: 105 / 135 Loss: 1.394564151763916 Tokens per Sec: 15460.613430508447
Epoch Step: 110 / 135 Loss: 0.7200431227684021 Tokens per Sec: 15111.045279976142
Epoch Step: 115 / 135 Loss: 1.0218454599380493 Tokens per Sec: 13076.754265833157
Epoch Step: 120 / 135 Loss: 1.8433400392532349 Tokens per Sec: 16082.099715046897
Epoch Step: 125 / 135 Loss: 0.9702569246292114 Tokens per Sec: 15466.419818398563
Epoch Step: 130 / 135 Loss: 1.1203484535217285 Tokens per Sec: 14446.86492182586
Epoch Step: 135 / 135 Loss: 0.8530250787734985 Tokens per Sec: 15378.695986582961
Epoch ended with duration 0:00:15.613504
Train perplexity: 1.0667586338708497
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654647
Validation perplexity: 1.2853805736176283
Epoch 183 / 1000
Epoch Step: 5 / 135 Loss: 0.6586357951164246 Tokens per Sec: 16759.230660340803
Epoch Step: 10 / 135 Loss: 2.832939863204956 Tokens per Sec: 16560.115238601687
Epoch Step: 15 / 135 Loss: 1.3446365594863892 Tokens per Sec: 17921.431076738314
Epoch Step: 20 / 135 Loss: 1.5834710597991943 Tokens per Sec: 17344.31496212087
Epoch Step: 25 / 135 Loss: 1.5581859350204468 Tokens per Sec: 17202.510475399264
Epoch Step: 30 / 135 Loss: 0.4044295847415924 Tokens per Sec: 14335.388254973415
Epoch Step: 35 / 135 Loss: 0.8344844579696655 Tokens per Sec: 15563.492984455486
Epoch Step: 40 / 135 Loss: 0.2400926798582077 Tokens per Sec: 16280.59472408121
Epoch Step: 45 / 135 Loss: 0.6168068647384644 Tokens per Sec: 15409.558230373896
Epoch Step: 50 / 135 Loss: 1.4228200912475586 Tokens per Sec: 17939.278024954372
Epoch Step: 55 / 135 Loss: 0.5175316333770752 Tokens per Sec: 17083.960173629737
Epoch Step: 60 / 135 Loss: 1.6098036766052246 Tokens per Sec: 16502.455137897814
Epoch Step: 65 / 135 Loss: 0.7415683269500732 Tokens per Sec: 15804.504586315148
Epoch Step: 70 / 135 Loss: 0.44530153274536133 Tokens per Sec: 16690.155780977177
Epoch Step: 75 / 135 Loss: 0.7692996859550476 Tokens per Sec: 18045.635004497013
Epoch Step: 80 / 135 Loss: 0.9179072380065918 Tokens per Sec: 14839.893518214925
Epoch Step: 85 / 135 Loss: 0.9323872327804565 Tokens per Sec: 17722.919443775572
Epoch Step: 90 / 135 Loss: 0.30296170711517334 Tokens per Sec: 17093.620838673563
Epoch Step: 95 / 135 Loss: 0.8400582075119019 Tokens per Sec: 14518.687348704629
Epoch Step: 100 / 135 Loss: 0.6938311457633972 Tokens per Sec: 17571.8134747979
Epoch Step: 105 / 135 Loss: 0.8397525548934937 Tokens per Sec: 14013.005288803999
Epoch Step: 110 / 135 Loss: 1.2762155532836914 Tokens per Sec: 13296.935775802613
Epoch Step: 115 / 135 Loss: 1.3492790460586548 Tokens per Sec: 16961.828813687895
Epoch Step: 120 / 135 Loss: 0.6954058408737183 Tokens per Sec: 14897.01822805028
Epoch Step: 125 / 135 Loss: 0.42499613761901855 Tokens per Sec: 14432.067218185928
Epoch Step: 130 / 135 Loss: 1.0287259817123413 Tokens per Sec: 16587.31519519813
Epoch Step: 135 / 135 Loss: 0.5304508209228516 Tokens per Sec: 16974.887767949192
Epoch ended with duration 0:00:15.678932
Train perplexity: 1.0488122023463373
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646287
Validation perplexity: 1.2262756691003656
Epoch 184 / 1000
Epoch Step: 5 / 135 Loss: 20.657360076904297 Tokens per Sec: 20096.800877003272
Epoch Step: 10 / 135 Loss: 0.9070131182670593 Tokens per Sec: 19004.185544452874
Epoch Step: 15 / 135 Loss: 2.1967008113861084 Tokens per Sec: 18381.86391612277
Epoch Step: 20 / 135 Loss: 1.6509360074996948 Tokens per Sec: 16323.10896234172
Epoch Step: 25 / 135 Loss: 2.1610238552093506 Tokens per Sec: 17747.209831643868
Epoch Step: 30 / 135 Loss: 1.1063554286956787 Tokens per Sec: 16219.427303359798
Epoch Step: 35 / 135 Loss: 0.6672335267066956 Tokens per Sec: 21894.292206926395
Epoch Step: 40 / 135 Loss: 1.217695951461792 Tokens per Sec: 20915.020396290576
Epoch Step: 45 / 135 Loss: 20.45067024230957 Tokens per Sec: 18009.34793648718
Epoch Step: 50 / 135 Loss: 1.5449479818344116 Tokens per Sec: 18900.611993425573
Epoch Step: 55 / 135 Loss: 0.8209896087646484 Tokens per Sec: 16970.097878571163
Epoch Step: 60 / 135 Loss: 2.898801803588867 Tokens per Sec: 17681.187724954085
Epoch Step: 65 / 135 Loss: 1.8548188209533691 Tokens per Sec: 18335.864557147295
Epoch Step: 70 / 135 Loss: 0.884449303150177 Tokens per Sec: 18708.30230864749
Epoch Step: 75 / 135 Loss: 4.483576774597168 Tokens per Sec: 15964.630365847215
Epoch Step: 80 / 135 Loss: 12.958976745605469 Tokens per Sec: 15950.014048512392
Epoch Step: 85 / 135 Loss: 1.3981319665908813 Tokens per Sec: 20071.97389283227
Epoch Step: 90 / 135 Loss: 0.36050668358802795 Tokens per Sec: 20861.403083822046
Epoch Step: 95 / 135 Loss: 1.0176838636398315 Tokens per Sec: 19860.146292152953
Epoch Step: 100 / 135 Loss: 1.1363317966461182 Tokens per Sec: 15918.812961992373
Epoch Step: 105 / 135 Loss: 1.1387569904327393 Tokens per Sec: 15547.271125935438
Epoch Step: 110 / 135 Loss: 0.8256154656410217 Tokens per Sec: 18385.13404731651
Epoch Step: 115 / 135 Loss: 15.963662147521973 Tokens per Sec: 17217.64380201824
Epoch Step: 120 / 135 Loss: 1.139156699180603 Tokens per Sec: 17418.470902189434
Epoch Step: 125 / 135 Loss: 1.3795583248138428 Tokens per Sec: 16360.553020789948
Epoch Step: 130 / 135 Loss: 0.9538352489471436 Tokens per Sec: 14747.48234381469
Epoch Step: 135 / 135 Loss: 1.7204289436340332 Tokens per Sec: 16843.958012025436
Epoch ended with duration 0:00:14.189169
Train perplexity: 1.0767580569065178
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647391
Validation perplexity: 1.267596783418863
Epoch 185 / 1000
Epoch Step: 5 / 135 Loss: 1.5590986013412476 Tokens per Sec: 17559.23418156284
Epoch Step: 10 / 135 Loss: 1.473088264465332 Tokens per Sec: 20391.104970781387
Epoch Step: 15 / 135 Loss: 1.3708676099777222 Tokens per Sec: 19145.185578076656
Epoch Step: 20 / 135 Loss: 0.33957648277282715 Tokens per Sec: 20760.77733666559
Epoch Step: 25 / 135 Loss: 1.4520162343978882 Tokens per Sec: 16823.879503904005
Epoch Step: 30 / 135 Loss: 1.2432994842529297 Tokens per Sec: 17239.63419886864
Epoch Step: 35 / 135 Loss: 2.0788540840148926 Tokens per Sec: 17450.3657304073
Epoch Step: 40 / 135 Loss: 0.7550306916236877 Tokens per Sec: 19299.158102772042
Epoch Step: 45 / 135 Loss: 0.6017893552780151 Tokens per Sec: 19038.417791009182
Epoch Step: 50 / 135 Loss: 0.23072314262390137 Tokens per Sec: 20376.679382713268
Epoch Step: 55 / 135 Loss: 1.2055712938308716 Tokens per Sec: 20350.63908701485
Epoch Step: 60 / 135 Loss: 0.6406968832015991 Tokens per Sec: 20671.589692024274
Epoch Step: 65 / 135 Loss: 0.6654627323150635 Tokens per Sec: 18827.453689167975
Epoch Step: 70 / 135 Loss: 2.990572690963745 Tokens per Sec: 17664.054488653917
Epoch Step: 75 / 135 Loss: 0.28543421626091003 Tokens per Sec: 20764.431529589096
Epoch Step: 80 / 135 Loss: 0.4614143371582031 Tokens per Sec: 16711.77400840002
Epoch Step: 85 / 135 Loss: 0.9623222351074219 Tokens per Sec: 16990.502300486663
Epoch Step: 90 / 135 Loss: 1.1981502771377563 Tokens per Sec: 17794.40499448686
Epoch Step: 95 / 135 Loss: 3.261892080307007 Tokens per Sec: 16431.092272005
Epoch Step: 100 / 135 Loss: 9.968303680419922 Tokens per Sec: 16162.603209370169
Epoch Step: 105 / 135 Loss: 2.2772953510284424 Tokens per Sec: 17040.68249196708
Epoch Step: 110 / 135 Loss: 0.6464864015579224 Tokens per Sec: 18399.165020776905
Epoch Step: 115 / 135 Loss: 2.2591216564178467 Tokens per Sec: 14978.411765574747
Epoch Step: 120 / 135 Loss: 4.994399070739746 Tokens per Sec: 15547.289077679863
Epoch Step: 125 / 135 Loss: 0.9324147701263428 Tokens per Sec: 15975.338752463394
Epoch Step: 130 / 135 Loss: 1.8656847476959229 Tokens per Sec: 17229.920181545338
Epoch Step: 135 / 135 Loss: 2.104281425476074 Tokens per Sec: 16407.80691720802
Epoch ended with duration 0:00:14.191913
Train perplexity: 1.0800865304191527
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.642237
Validation perplexity: 1.2663420754677206
Model saved checkpoint!
Epoch 186 / 1000
Epoch Step: 5 / 135 Loss: 0.37438249588012695 Tokens per Sec: 17950.99203679966
Epoch Step: 10 / 135 Loss: 1.2517876625061035 Tokens per Sec: 21500.202234908505
Epoch Step: 15 / 135 Loss: 9.718088150024414 Tokens per Sec: 17021.197935030217
Epoch Step: 20 / 135 Loss: 2.0193395614624023 Tokens per Sec: 18612.375110903507
Epoch Step: 25 / 135 Loss: 0.5280904769897461 Tokens per Sec: 19857.62149435493
Epoch Step: 30 / 135 Loss: 0.8599793314933777 Tokens per Sec: 16604.4363875875
Epoch Step: 35 / 135 Loss: 1.6474655866622925 Tokens per Sec: 19160.193422939337
Epoch Step: 40 / 135 Loss: 0.35519087314605713 Tokens per Sec: 17690.546893231596
Epoch Step: 45 / 135 Loss: 0.16197793185710907 Tokens per Sec: 20280.17308900016
Epoch Step: 50 / 135 Loss: 1.387863278388977 Tokens per Sec: 17929.45271669962
Epoch Step: 55 / 135 Loss: 2.0978846549987793 Tokens per Sec: 19995.26398098505
Epoch Step: 60 / 135 Loss: 1.8947120904922485 Tokens per Sec: 16839.529783147704
Epoch Step: 65 / 135 Loss: 0.5482290387153625 Tokens per Sec: 17034.0276396855
Epoch Step: 70 / 135 Loss: 0.30502617359161377 Tokens per Sec: 16639.55345036047
Epoch Step: 75 / 135 Loss: 0.41865089535713196 Tokens per Sec: 14602.593485662554
Epoch Step: 80 / 135 Loss: 0.33119308948516846 Tokens per Sec: 18721.75165188376
Epoch Step: 85 / 135 Loss: 2.6818599700927734 Tokens per Sec: 18484.454254568864
Epoch Step: 90 / 135 Loss: 0.46055033802986145 Tokens per Sec: 19955.312040400244
Epoch Step: 95 / 135 Loss: 0.38426798582077026 Tokens per Sec: 19979.89817053066
Epoch Step: 100 / 135 Loss: 0.6412353515625 Tokens per Sec: 18319.957741458835
Epoch Step: 105 / 135 Loss: 2.5404393672943115 Tokens per Sec: 15114.358905708432
Epoch Step: 110 / 135 Loss: 9.208283424377441 Tokens per Sec: 15247.584003848679
Epoch Step: 115 / 135 Loss: 0.5531876087188721 Tokens per Sec: 16820.565797850522
Epoch Step: 120 / 135 Loss: 0.711661696434021 Tokens per Sec: 17460.390827532276
Epoch Step: 125 / 135 Loss: 0.8794804811477661 Tokens per Sec: 18164.967569380115
Epoch Step: 130 / 135 Loss: 0.5722168684005737 Tokens per Sec: 15350.092531973236
Epoch Step: 135 / 135 Loss: 1.1170709133148193 Tokens per Sec: 18542.881014236726
Epoch ended with duration 0:00:14.199618
Train perplexity: 1.079059476268761
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.635278
Validation perplexity: 1.1616836743800594
Epoch 187 / 1000
Epoch Step: 5 / 135 Loss: 3.7519805431365967 Tokens per Sec: 20058.69245998023
Epoch Step: 10 / 135 Loss: 0.379190593957901 Tokens per Sec: 18342.49826740966
Epoch Step: 15 / 135 Loss: 0.42510879039764404 Tokens per Sec: 19425.636880938782
Epoch Step: 20 / 135 Loss: 1.0532543659210205 Tokens per Sec: 20509.040264823765
Epoch Step: 25 / 135 Loss: 0.7606474757194519 Tokens per Sec: 17916.840124790782
Epoch Step: 30 / 135 Loss: 0.5199043154716492 Tokens per Sec: 17120.14433314495
Epoch Step: 35 / 135 Loss: 1.665574550628662 Tokens per Sec: 15248.004529746442
Epoch Step: 40 / 135 Loss: 0.6699568033218384 Tokens per Sec: 16597.309594614966
Epoch Step: 45 / 135 Loss: 0.5476842522621155 Tokens per Sec: 22273.24315410194
Epoch Step: 50 / 135 Loss: 0.5490415692329407 Tokens per Sec: 19094.404101261454
Epoch Step: 55 / 135 Loss: 3.3557608127593994 Tokens per Sec: 19431.875745796056
Epoch Step: 60 / 135 Loss: 0.6555575132369995 Tokens per Sec: 15222.783186152106
Epoch Step: 65 / 135 Loss: 0.22065775096416473 Tokens per Sec: 19236.051720566575
Epoch Step: 70 / 135 Loss: 2.4736995697021484 Tokens per Sec: 14989.403447853332
Epoch Step: 75 / 135 Loss: 0.733432412147522 Tokens per Sec: 16532.55327764238
Epoch Step: 80 / 135 Loss: 0.32144951820373535 Tokens per Sec: 20119.638848110204
Epoch Step: 85 / 135 Loss: 21.892499923706055 Tokens per Sec: 18681.9975320834
Epoch Step: 90 / 135 Loss: 1.2894761562347412 Tokens per Sec: 19658.30604168578
Epoch Step: 95 / 135 Loss: 0.9155783653259277 Tokens per Sec: 18537.554269226763
Epoch Step: 100 / 135 Loss: 0.29202523827552795 Tokens per Sec: 17130.411935366355
Epoch Step: 105 / 135 Loss: 3.6920785903930664 Tokens per Sec: 14218.84737837851
Epoch Step: 110 / 135 Loss: 1.0228221416473389 Tokens per Sec: 18008.836097219835
Epoch Step: 115 / 135 Loss: 1.0137677192687988 Tokens per Sec: 16277.028795246202
Epoch Step: 120 / 135 Loss: 0.7912336587905884 Tokens per Sec: 15971.882315111345
Epoch Step: 125 / 135 Loss: 1.1926051378250122 Tokens per Sec: 17490.78125952956
Epoch Step: 130 / 135 Loss: 1.1516011953353882 Tokens per Sec: 17933.472327849377
Epoch Step: 135 / 135 Loss: 0.6084905862808228 Tokens per Sec: 16364.901424464771
Epoch ended with duration 0:00:14.239236
Train perplexity: 1.0567569889501391
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.639058
Validation perplexity: 1.168463079302129
Epoch 188 / 1000
Epoch Step: 5 / 135 Loss: 0.9273867011070251 Tokens per Sec: 18553.221618693573
Epoch Step: 10 / 135 Loss: 0.2941303253173828 Tokens per Sec: 19097.163768513234
Epoch Step: 15 / 135 Loss: 1.1738951206207275 Tokens per Sec: 19401.79078911113
Epoch Step: 20 / 135 Loss: 1.0582804679870605 Tokens per Sec: 16729.338537095955
Epoch Step: 25 / 135 Loss: 0.7134352326393127 Tokens per Sec: 18202.279588958885
Epoch Step: 30 / 135 Loss: 0.2270265817642212 Tokens per Sec: 20457.06712842713
Epoch Step: 35 / 135 Loss: 0.8899651765823364 Tokens per Sec: 16562.130649039304
Epoch Step: 40 / 135 Loss: 1.3205995559692383 Tokens per Sec: 18263.662162109773
Epoch Step: 45 / 135 Loss: 0.3117416501045227 Tokens per Sec: 17677.25233006525
Epoch Step: 50 / 135 Loss: 0.7026869654655457 Tokens per Sec: 19354.875313324323
Epoch Step: 55 / 135 Loss: 0.6384239196777344 Tokens per Sec: 17859.412460532752
Epoch Step: 60 / 135 Loss: 1.1322426795959473 Tokens per Sec: 19114.253606841656
Epoch Step: 65 / 135 Loss: 0.6672751903533936 Tokens per Sec: 18798.867414573797
Epoch Step: 70 / 135 Loss: 0.35557639598846436 Tokens per Sec: 16957.516976967967
Epoch Step: 75 / 135 Loss: 0.6994273662567139 Tokens per Sec: 20405.764365495448
Epoch Step: 80 / 135 Loss: 0.17505218088626862 Tokens per Sec: 18827.697869751068
Epoch Step: 85 / 135 Loss: 1.5141276121139526 Tokens per Sec: 16372.222257360017
Epoch Step: 90 / 135 Loss: 0.6706264019012451 Tokens per Sec: 16430.246248850664
Epoch Step: 95 / 135 Loss: 0.37027883529663086 Tokens per Sec: 17694.14203894164
Epoch Step: 100 / 135 Loss: 0.9695641994476318 Tokens per Sec: 19791.35063641561
Epoch Step: 105 / 135 Loss: 0.8378617167472839 Tokens per Sec: 16066.474734964966
Epoch Step: 110 / 135 Loss: 0.3005329966545105 Tokens per Sec: 16251.965812336706
Epoch Step: 115 / 135 Loss: 1.1276150941848755 Tokens per Sec: 15187.599008719897
Epoch Step: 120 / 135 Loss: 1.404483675956726 Tokens per Sec: 16236.63844641536
Epoch Step: 125 / 135 Loss: 1.2017087936401367 Tokens per Sec: 19294.919080463565
Epoch Step: 130 / 135 Loss: 1.037472128868103 Tokens per Sec: 18137.68325808321
Epoch Step: 135 / 135 Loss: 0.685897946357727 Tokens per Sec: 14885.358314172468
Epoch ended with duration 0:00:14.241040
Train perplexity: 1.038900496434587
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.643377
Validation perplexity: 1.1715035081318943
Epoch 189 / 1000
Epoch Step: 5 / 135 Loss: 1.1099731922149658 Tokens per Sec: 19573.519470603413
Epoch Step: 10 / 135 Loss: 1.2873729467391968 Tokens per Sec: 17824.47380874477
Epoch Step: 15 / 135 Loss: 0.555983304977417 Tokens per Sec: 16644.96649074928
Epoch Step: 20 / 135 Loss: 1.4137041568756104 Tokens per Sec: 22115.220498442788
Epoch Step: 25 / 135 Loss: 1.2941642999649048 Tokens per Sec: 21089.67633205545
Epoch Step: 30 / 135 Loss: 0.14592933654785156 Tokens per Sec: 18977.735036454014
Epoch Step: 35 / 135 Loss: 1.0754132270812988 Tokens per Sec: 17762.489649421088
Epoch Step: 40 / 135 Loss: 0.5988979935646057 Tokens per Sec: 17514.329180444965
Epoch Step: 45 / 135 Loss: 1.6542563438415527 Tokens per Sec: 15215.395294472853
Epoch Step: 50 / 135 Loss: 1.1433473825454712 Tokens per Sec: 15919.698451237098
Epoch Step: 55 / 135 Loss: 0.6380656957626343 Tokens per Sec: 17717.764001283525
Epoch Step: 60 / 135 Loss: 0.8307960629463196 Tokens per Sec: 19162.28989045268
Epoch Step: 65 / 135 Loss: 10.733316421508789 Tokens per Sec: 21925.953931798125
Epoch Step: 70 / 135 Loss: 0.8455359935760498 Tokens per Sec: 21089.502615551086
Epoch Step: 75 / 135 Loss: 0.47021737694740295 Tokens per Sec: 21348.612310912376
Epoch Step: 80 / 135 Loss: 2.2988336086273193 Tokens per Sec: 18791.028002667317
Epoch Step: 85 / 135 Loss: 1.4408702850341797 Tokens per Sec: 16082.200172462477
Epoch Step: 90 / 135 Loss: 1.343017339706421 Tokens per Sec: 15361.951221746278
Epoch Step: 95 / 135 Loss: 1.1545847654342651 Tokens per Sec: 18302.221015552048
Epoch Step: 100 / 135 Loss: 1.307682752609253 Tokens per Sec: 16432.739177113344
Epoch Step: 105 / 135 Loss: 1.6535941362380981 Tokens per Sec: 16151.254174811149
Epoch Step: 110 / 135 Loss: 1.3740785121917725 Tokens per Sec: 17108.9373710245
Epoch Step: 115 / 135 Loss: 0.5333223342895508 Tokens per Sec: 16372.769200004837
Epoch Step: 120 / 135 Loss: 1.270285964012146 Tokens per Sec: 17687.07206093517
Epoch Step: 125 / 135 Loss: 1.223418116569519 Tokens per Sec: 17954.847010207544
Epoch Step: 130 / 135 Loss: 0.6925452351570129 Tokens per Sec: 12921.221598638622
Epoch Step: 135 / 135 Loss: 15.58446979522705 Tokens per Sec: 17680.365364189933
Epoch ended with duration 0:00:14.184445
Train perplexity: 1.0863110550232746
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646275
Validation perplexity: 1.2269494082071621
Epoch 190 / 1000
Epoch Step: 5 / 135 Loss: 0.6184400916099548 Tokens per Sec: 20120.480461689225
Epoch Step: 10 / 135 Loss: 2.15979266166687 Tokens per Sec: 18814.648454579463
Epoch Step: 15 / 135 Loss: 1.9872485399246216 Tokens per Sec: 18404.12575235608
Epoch Step: 20 / 135 Loss: 0.7483953237533569 Tokens per Sec: 14526.838948956793
Epoch Step: 25 / 135 Loss: 0.6360630393028259 Tokens per Sec: 18592.482078864236
Epoch Step: 30 / 135 Loss: 0.2734719514846802 Tokens per Sec: 14938.59429074374
Epoch Step: 35 / 135 Loss: 0.7079110145568848 Tokens per Sec: 17059.455038241184
Epoch Step: 40 / 135 Loss: 0.13789984583854675 Tokens per Sec: 15869.289631117119
Epoch Step: 45 / 135 Loss: 1.5213958024978638 Tokens per Sec: 21571.631286916054
Epoch Step: 50 / 135 Loss: 0.8950861692428589 Tokens per Sec: 21143.26426601141
Epoch Step: 55 / 135 Loss: 0.4444482922554016 Tokens per Sec: 18136.325104160762
Epoch Step: 60 / 135 Loss: 1.6233211755752563 Tokens per Sec: 15562.51477131579
Epoch Step: 65 / 135 Loss: 0.6891353130340576 Tokens per Sec: 18366.2500196677
Epoch Step: 70 / 135 Loss: 0.5079387426376343 Tokens per Sec: 18861.195188425565
Epoch Step: 75 / 135 Loss: 0.6530622839927673 Tokens per Sec: 21866.99174218265
Epoch Step: 80 / 135 Loss: 1.8544726371765137 Tokens per Sec: 15845.875841732162
Epoch Step: 85 / 135 Loss: 1.2989267110824585 Tokens per Sec: 19317.994625609983
Epoch Step: 90 / 135 Loss: 0.5097924470901489 Tokens per Sec: 18712.876225921456
Epoch Step: 95 / 135 Loss: 1.4291459321975708 Tokens per Sec: 20950.458939336768
Epoch Step: 100 / 135 Loss: 0.8383749127388 Tokens per Sec: 18165.884801249314
Epoch Step: 105 / 135 Loss: 0.9451637864112854 Tokens per Sec: 16318.853177391575
Epoch Step: 110 / 135 Loss: 0.4459971785545349 Tokens per Sec: 14650.12371849869
Epoch Step: 115 / 135 Loss: 1.4377394914627075 Tokens per Sec: 17396.721219131923
Epoch Step: 120 / 135 Loss: 0.980282187461853 Tokens per Sec: 16846.527852116997
Epoch Step: 125 / 135 Loss: 0.6824778318405151 Tokens per Sec: 16096.98139942861
Epoch Step: 130 / 135 Loss: 0.8336343169212341 Tokens per Sec: 16424.561899807984
Epoch Step: 135 / 135 Loss: 0.8193477988243103 Tokens per Sec: 18095.452472933983
Epoch ended with duration 0:00:14.215161
Train perplexity: 1.0514210084790494
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651263
Validation perplexity: 1.3843055885984437
Model saved checkpoint!
Epoch 191 / 1000
Epoch Step: 5 / 135 Loss: 0.9399811029434204 Tokens per Sec: 18381.206491955316
Epoch Step: 10 / 135 Loss: 0.9996798634529114 Tokens per Sec: 19294.779575660246
Epoch Step: 15 / 135 Loss: 2.5077264308929443 Tokens per Sec: 16239.094991368034
Epoch Step: 20 / 135 Loss: 0.6786340475082397 Tokens per Sec: 21015.156885593875
Epoch Step: 25 / 135 Loss: 1.0578904151916504 Tokens per Sec: 17503.7594030892
Epoch Step: 30 / 135 Loss: 2.2357473373413086 Tokens per Sec: 17255.493887164008
Epoch Step: 35 / 135 Loss: 0.2023829221725464 Tokens per Sec: 15972.77107425525
Epoch Step: 40 / 135 Loss: 1.1046404838562012 Tokens per Sec: 20356.246043889605
Epoch Step: 45 / 135 Loss: 0.25148534774780273 Tokens per Sec: 16428.8280818291
Epoch Step: 50 / 135 Loss: 1.972837209701538 Tokens per Sec: 17344.35766158167
Epoch Step: 55 / 135 Loss: 0.6439607739448547 Tokens per Sec: 17553.113262738414
Epoch Step: 60 / 135 Loss: 4.46899938583374 Tokens per Sec: 20692.293054687267
Epoch Step: 65 / 135 Loss: 24.278409957885742 Tokens per Sec: 20406.913093083764
Epoch Step: 70 / 135 Loss: 2.600613832473755 Tokens per Sec: 18222.31600702809
Epoch Step: 75 / 135 Loss: 2.3341426849365234 Tokens per Sec: 18630.71404000159
Epoch Step: 80 / 135 Loss: 0.48307082056999207 Tokens per Sec: 17848.90356390796
Epoch Step: 85 / 135 Loss: 3.348562479019165 Tokens per Sec: 18354.093571987178
Epoch Step: 90 / 135 Loss: 1.1501399278640747 Tokens per Sec: 20323.384359549826
Epoch Step: 95 / 135 Loss: 0.2679957151412964 Tokens per Sec: 18785.7297193932
Epoch Step: 100 / 135 Loss: 2.261910915374756 Tokens per Sec: 17012.37127669527
Epoch Step: 105 / 135 Loss: 10.808767318725586 Tokens per Sec: 14344.135858460673
Epoch Step: 110 / 135 Loss: 2.4555394649505615 Tokens per Sec: 16784.719478343843
Epoch Step: 115 / 135 Loss: 3.5055415630340576 Tokens per Sec: 18274.3101876337
Epoch Step: 120 / 135 Loss: 61.901397705078125 Tokens per Sec: 16874.681129003886
Epoch Step: 125 / 135 Loss: 2.455944299697876 Tokens per Sec: 17351.403204577895
Epoch Step: 130 / 135 Loss: 1.4172511100769043 Tokens per Sec: 16346.3754149607
Epoch Step: 135 / 135 Loss: 2.2825586795806885 Tokens per Sec: 15860.021766050118
Epoch ended with duration 0:00:14.208900
Train perplexity: 1.1442826943842073
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.644814
Validation perplexity: 1.3020367897104772
Epoch 192 / 1000
Epoch Step: 5 / 135 Loss: 3.9665496349334717 Tokens per Sec: 19328.27512538266
Epoch Step: 10 / 135 Loss: 3.9071872234344482 Tokens per Sec: 18238.612084376673
Epoch Step: 15 / 135 Loss: 1.3626374006271362 Tokens per Sec: 15952.60638376857
Epoch Step: 20 / 135 Loss: 0.9582917094230652 Tokens per Sec: 20258.506044461883
Epoch Step: 25 / 135 Loss: 2.048007011413574 Tokens per Sec: 18839.215547111635
Epoch Step: 30 / 135 Loss: 1.1313213109970093 Tokens per Sec: 16681.721714240874
Epoch Step: 35 / 135 Loss: 1.4586714506149292 Tokens per Sec: 19996.50938777078
Epoch Step: 40 / 135 Loss: 29.43935775756836 Tokens per Sec: 15627.929067836569
Epoch Step: 45 / 135 Loss: 2.2230725288391113 Tokens per Sec: 17612.806140029777
Epoch Step: 50 / 135 Loss: 2.247007131576538 Tokens per Sec: 19380.084510863744
Epoch Step: 55 / 135 Loss: 2.891319751739502 Tokens per Sec: 19949.77664103879
Epoch Step: 60 / 135 Loss: 4.255046844482422 Tokens per Sec: 20972.269774711047
Epoch Step: 65 / 135 Loss: 14.708925247192383 Tokens per Sec: 19128.681263889106
Epoch Step: 70 / 135 Loss: 10.317864418029785 Tokens per Sec: 19711.215499642654
Epoch Step: 75 / 135 Loss: 31.531126022338867 Tokens per Sec: 18353.399911036176
Epoch Step: 80 / 135 Loss: 10.87818717956543 Tokens per Sec: 17833.0645751089
Epoch Step: 85 / 135 Loss: 3.133993625640869 Tokens per Sec: 17114.862340917116
Epoch Step: 90 / 135 Loss: 5.023005962371826 Tokens per Sec: 18619.090202260704
Epoch Step: 95 / 135 Loss: 1.0615456104278564 Tokens per Sec: 16652.71128451969
Epoch Step: 100 / 135 Loss: 4.719789028167725 Tokens per Sec: 19245.274393217955
Epoch Step: 105 / 135 Loss: 2.074950933456421 Tokens per Sec: 17293.394836470514
Epoch Step: 110 / 135 Loss: 2.3507754802703857 Tokens per Sec: 17764.64093810828
Epoch Step: 115 / 135 Loss: 1.1445822715759277 Tokens per Sec: 17104.862472132732
Epoch Step: 120 / 135 Loss: 1.5192322731018066 Tokens per Sec: 16516.38069037206
Epoch Step: 125 / 135 Loss: 1.8008381128311157 Tokens per Sec: 18236.833510684264
Epoch Step: 130 / 135 Loss: 1.7783081531524658 Tokens per Sec: 15048.560809567618
Epoch Step: 135 / 135 Loss: 0.5751457810401917 Tokens per Sec: 14470.426308842276
Epoch ended with duration 0:00:14.131890
Train perplexity: 1.1712018882118087
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652617
Validation perplexity: 1.313408780600734
Epoch 193 / 1000
Epoch Step: 5 / 135 Loss: 1.0184717178344727 Tokens per Sec: 15974.354438827848
Epoch Step: 10 / 135 Loss: 9.42575454711914 Tokens per Sec: 16713.92535863763
Epoch Step: 15 / 135 Loss: 1.3684196472167969 Tokens per Sec: 21249.397407269025
Epoch Step: 20 / 135 Loss: 1.5300954580307007 Tokens per Sec: 20460.19369338691
Epoch Step: 25 / 135 Loss: 1.6501132249832153 Tokens per Sec: 19303.694833489037
Epoch Step: 30 / 135 Loss: 0.4354991316795349 Tokens per Sec: 16992.792676103083
Epoch Step: 35 / 135 Loss: 2.7037785053253174 Tokens per Sec: 17296.55251919299
Epoch Step: 40 / 135 Loss: 1.9394969940185547 Tokens per Sec: 14292.497924507217
Epoch Step: 45 / 135 Loss: 0.8114807605743408 Tokens per Sec: 18441.026406954774
Epoch Step: 50 / 135 Loss: 1.8543204069137573 Tokens per Sec: 20121.813702534866
Epoch Step: 55 / 135 Loss: 0.9689586162567139 Tokens per Sec: 19495.75036965111
Epoch Step: 60 / 135 Loss: 1.1637146472930908 Tokens per Sec: 17417.430282061858
Epoch Step: 65 / 135 Loss: 0.3334488570690155 Tokens per Sec: 15465.789839080242
Epoch Step: 70 / 135 Loss: 2.9860129356384277 Tokens per Sec: 17258.06436054271
Epoch Step: 75 / 135 Loss: 2.152419090270996 Tokens per Sec: 19856.1842995533
Epoch Step: 80 / 135 Loss: 1.4355833530426025 Tokens per Sec: 18545.928880358402
Epoch Step: 85 / 135 Loss: 0.8157199025154114 Tokens per Sec: 18183.280077193984
Epoch Step: 90 / 135 Loss: 1.0525708198547363 Tokens per Sec: 20843.232830718425
Epoch Step: 95 / 135 Loss: 0.38513946533203125 Tokens per Sec: 18893.001232774095
Epoch Step: 100 / 135 Loss: 1.8058485984802246 Tokens per Sec: 20139.862376002948
Epoch Step: 105 / 135 Loss: 0.2789117097854614 Tokens per Sec: 15988.421781138124
Epoch Step: 110 / 135 Loss: 1.2088758945465088 Tokens per Sec: 18620.287567686133
Epoch Step: 115 / 135 Loss: 0.7818333506584167 Tokens per Sec: 16405.302547543186
Epoch Step: 120 / 135 Loss: 9.170392990112305 Tokens per Sec: 15871.789672427347
Epoch Step: 125 / 135 Loss: 0.9126095771789551 Tokens per Sec: 17628.95931229913
Epoch Step: 130 / 135 Loss: 0.5917565822601318 Tokens per Sec: 15830.251266956482
Epoch Step: 135 / 135 Loss: 1.5217149257659912 Tokens per Sec: 16664.841540756483
Epoch ended with duration 0:00:14.230486
Train perplexity: 1.068440831790467
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.639033
Validation perplexity: 1.171258065073363
Training was early stopped on epoch 194 with early stopping rounds 25
[57.49589039050771, 18.67509077521105, 13.873791054714133, 10.665661716146275, 9.378457684077668, 7.726659710345095, 7.5101580837357504, 6.408722852084241, 5.85958910803987, 5.2777375854190876, 4.29274617966362, 4.462694902288195, 4.405576078662758, 4.029949709073746, 3.9624759609383564, 3.2510008162014783, 3.4278713161763883, 3.5849170504785435, 3.2430180278790246, 3.0633853052369493, 2.5423435247293993, 2.7304386954721536, 2.4616622210785217, 2.770304836320183, 2.2644959383239014, 2.433473455904148, 2.2423742291609203, 2.0173555111205785, 2.3579285771488827, 2.4277508977124875, 2.19490658993505, 1.9782658088481069, 1.9356177772789025, 1.9303986569270875, 2.099035258378369, 1.9586054948121319, 1.762768896210727, 1.7746495302697147, 1.7495075500376525, 1.946309893289073, 1.6402167109808476, 1.5907286651894272, 1.724856459206285, 1.7081639501288997, 1.525581989416534, 1.6355194106597053, 1.511682950205996, 1.7153750988228453, 1.5581481299757545, 1.4806133188697506, 1.5229945261459095, 1.4275377984942768, 1.4645497323153644, 1.4832088538370236, 1.4813745842631652, 1.3681774612687596, 1.3844263125027763, 1.42754149796563, 1.4011286278247364, 1.412738525417742, 1.4799074259328993, 1.400494873867427, 1.3906630153712387, 1.3923722538819516, 1.5798542921759553, 1.3448122776658813, 1.3252519265499982, 1.3713321546350778, 1.3210515057181809, 1.3047357348173854, 1.3253088288264272, 1.3536673698088415, 1.3112282815752734, 1.2949507206909083, 1.2543056793889027, 1.4163339202832632, 1.2879387105609599, 1.2384111435391447, 1.278455462550991, 1.356942575513351, 1.2915895233016697, 1.2865728132053162, 1.2588582408096174, 1.2492482202971482, 1.3643376424552167, 1.220257081316301, 1.2113320493462065, 1.2413525707211612, 1.333227133743591, 1.2196054783764019, 1.5438761683247135, 1.3027365387589391, 1.2088491666476382, 1.1920648863744274, 1.2283690101840097, 1.2228869674586456, 1.1940516042207632, 1.2770996979624814, 1.1809785952409713, 1.2045910841652754, 1.1795185903735086, 1.2199546144378903, 1.2969948797742563, 1.1830153285204252, 1.2012922551553131, 1.1650186773197289, 1.1801212994015218, 1.1456018751068626, 1.139602650399467, 1.2119034696986912, 1.1706209712509525, 1.1660923478218905, 1.2025161335962535, 1.2605546217209707, 1.1796433438055445, 1.1558343491454424, 1.1607325139119373, 1.1640175973091165, 1.1591761221964583, 1.1471185315403283, 1.1828048222551768, 1.1466138930187562, 1.110819502908681, 1.3472049757352016, 1.1297076565729598, 1.1346002166705988, 1.1307851370356916, 1.1192840289925368, 1.1133684139088091, 1.1705939507893444, 1.136526157385801, 1.1060144000038479, 1.1599152479122388, 1.157590438326473, 1.1129448215541136, 1.1169837440325285, 1.1215572100153346, 1.1159202339561194, 1.110634254861785, 1.1012006459820565, 1.3706877914488242, 1.1366338506696436, 1.0953363717975442, 1.1015656341287805, 1.1324550646935048, 1.094415707278689, 1.0951627133249067, 1.0852779634667498, 1.0970928596528569, 1.1349782089084959, 1.1089306961259124, 1.1119219133646059, 1.1085938323804414, 1.080440580722872, 1.0848066531429037, 1.071294246130667, 1.1134241747308287, 1.0955344881504971, 1.0794378946779977, 1.0691947109115045, 1.0878540356385615, 1.0925185398108164, 1.0827471656731802, 1.087482088720159, 1.140546318584958, 1.0950964875109879, 1.0536719513596653, 1.0736716354736195, 1.0736276848526227, 1.053617731682855, 1.0640395419661477, 1.0660178083905139, 1.1077136755655475, 1.0652448028329284, 1.1048491694381293, 1.0501478875466206, 1.0665211219957904, 1.0610384725573219, 1.058615535335981, 1.0787530339848275, 1.0584301773272564, 1.053089610352088, 1.0667586338708497, 1.0488122023463373, 1.0767580569065178, 1.0800865304191527, 1.079059476268761, 1.0567569889501391, 1.038900496434587, 1.0863110550232746, 1.0514210084790494, 1.1442826943842073, 1.1712018882118087, 1.068440831790467]
[20.157013820193665, 15.050434710039292, 10.463805295590028, 10.119051169144662, 8.239821572028573, 5.88559678662502, 5.697389668506092, 4.937250237961497, 5.514167319505409, 4.424220932920834, 4.242147037804237, 3.6036674655042296, 3.0637487423500924, 3.72177014514891, 4.0428822839604495, 3.3364627843952137, 2.6994588674642417, 3.061444909000198, 2.8568903222392312, 2.341589584512503, 2.617886020770757, 2.733160926544261, 2.09964429509893, 2.799798268922451, 2.4931838417028307, 2.102544918835996, 2.632664846777361, 1.9961623740150987, 1.953388670777175, 1.846546552275488, 1.8245059054194444, 1.6546776491949575, 2.0450658491110905, 1.9632013159619495, 1.905676924742593, 1.7596671315220687, 1.8332202452199307, 1.6120508039487405, 1.6015309632606312, 1.749127865853451, 1.5697284226475194, 1.987818526039143, 1.5254002987392314, 1.7658541765990339, 1.4064901679634796, 1.4055142924344104, 1.4778312710875252, 1.5546338527693362, 1.6782464084553723, 1.708195696260047, 1.4002813350261076, 1.3491092594445253, 1.4836497147695604, 1.5860409140513685, 1.459336688221995, 1.5541606824020133, 1.493811960937255, 1.3142226972144684, 1.4941233804350602, 1.432956632552601, 1.3120584151079642, 1.3888385943823174, 1.3601743050199733, 1.4581461755047989, 1.421806303395308, 1.3424151849402552, 1.2737761009542343, 1.3064776200989558, 1.4631142045256298, 1.3307691295340818, 1.4423792476752295, 1.5343610403876662, 1.5092594327347408, 1.2646783907661208, 1.2441015688957542, 1.3968980619916518, 1.325206902431841, 1.3600209134389245, 1.2984779599549459, 1.4247638525032142, 1.2655452979556312, 1.3246319369456105, 1.2258771344095465, 1.2880433136191742, 1.2667572456075746, 1.2895411090235764, 1.3368419138718401, 1.296385825469107, 1.2979488913837631, 1.2856442968145898, 2.0559094080356415, 1.2495122863034167, 1.2812642351112689, 1.2218833016516168, 1.2333809298094187, 1.2309852441243292, 1.219714982175773, 1.4729969432365226, 1.233305548435407, 1.3049092001299851, 1.2105664542181216, 1.8944485336253793, 1.2981771897723724, 1.229508113763463, 1.2354402891663532, 1.194530044130737, 1.2916649475790254, 1.2201739696737242, 1.3069879203417913, 1.1914859913669558, 1.2678454424003025, 1.4066459257766455, 1.274960130304962, 1.1947363594842466, 1.3093176294026103, 1.3553626272591932, 1.2850453052893291, 1.2200614562314005, 1.1836751109077175, 1.2637962289674953, 1.294439638211492, 1.328110123670539, 1.310958757702312, 1.223510386160975, 1.2575871652764605, 1.2794321259401273, 1.222450293675617, 1.2012080081535446, 1.3347618766232408, 1.3790664271023871, 1.3000152541587167, 1.1793672613482324, 1.3545831484044142, 1.2272403297830041, 1.3030209703548243, 1.276465193523801, 1.1672195481392371, 1.1816976641446815, 1.1668583449471726, 1.2369779858637102, 1.2123993485288633, 1.2516484146100042, 1.295798420213666, 1.2884397907726486, 1.2103133921495373, 1.205473365314881, 1.294875272267281, 1.268402070214367, 1.231074880448932, 1.2435827595640885, 1.195757146618039, 1.3473892124058768, 1.1652363687302434, 1.2265248990773774, 1.1776678743323792, 1.273249533244814, 1.2887386897477555, 1.2843272682678923, 1.2426407393478802, 1.229027988716896, 1.1923942340985578, 1.488782041643337, 1.310369404086858, 1.180776979592005, 1.241915968845502, 1.1692833046853561, 1.2139172587650113, 1.2053079395222484, 1.1611558677823741, 1.163572703640611, 1.2322958030539939, 1.281349627671485, 1.1659675044164097, 1.1995354277288244, 1.2775464489633288, 1.2247681196382056, 1.2810879687305028, 1.521582210848433, 1.20233789841629, 1.250053479551416, 1.3399195543056004, 1.2443248460242793, 1.2853805736176283, 1.2262756691003656, 1.267596783418863, 1.2663420754677206, 1.1616836743800594, 1.168463079302129, 1.1715035081318943, 1.2269494082071621, 1.3843055885984437, 1.3020367897104772, 1.313408780600734, 1.171258065073363]
Model saved checkpoint!

====STARTING EVALUATION====
Data set sizes (number of sentence pairs):
train 8627
valid 1079
test 1077 

First training example:
src: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
trg: private void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
diff_alignment: —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
diff_prev: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
diff_updated: private void METHOD_1 ( ) { –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; } 

Most common words:
 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ     229531
         (     138692
         )     138692
         ;      62546
         .      54160
   –ø–∞–¥–¥–∏–Ω–≥      44322
     VAR_1      43534
         {      42660
         }      42660
         ,      41936 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
05 (
06 )
07 ;
08 .
09 –ø–∞–¥–¥–∏–Ω–≥ 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 6423 33
—É–¥–∞–ª–µ–Ω–∏–µ 34492 15
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 9830 25
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 229531 4
–ø–∞–¥–¥–∏–Ω–≥ 44322 9
Number of words (types): 663
Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations.png...
Duration: 0:00:05.152438

Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations_8_threshold.png...
Duration: 0:00:03.472251

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations.png...
Duration: 0:00:04.393144

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations_8_threshold.png...
Duration: 0:00:02.485948

Starting conducting edit representation visualization experiment for defects4j_2d_representations.png...
Duration: 0:00:00.875357

Starting conducting edit representation visualization experiment for test300_2d_representations.png...
Duration: 0:00:01.264308

Starting conducting edit representation visualization experiment for val300_2d_representations.png...
Duration: 0:00:01.017032

Starting conducting edit representation visualization experiment for train300_2d_representations.png...
Duration: 0:00:01.057213

Starting conducting edit representation visualization experiment for test_2d_representations.png...
Duration: 0:00:04.285859

Starting conducting edit representation visualization experiment for val_2d_representations.png...
Duration: 0:00:04.176728

Starting conducting edit representation visualization experiment for train5000_2d_representations.png...
Duration: 0:00:56.613295

Start conducting accuracy calculation experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy: 356 / 388 = 0.9175257731958762
Top-3 accuracy: 375 / 388 = 0.9664948453608248
Top-5 accuracy: 381 / 388 = 0.9819587628865979
Top-10 accuracy: 382 / 388 = 0.9845360824742269
Top-50 accuracy: 384 / 388 = 0.9896907216494846
Duration: 0:02:14.693130

Start conducting accuracy calculation experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy: 11 / 244 = 0.045081967213114756
Top-3 accuracy: 16 / 244 = 0.06557377049180328
Top-5 accuracy: 18 / 244 = 0.07377049180327869
Top-10 accuracy: 20 / 244 = 0.08196721311475409
Top-50 accuracy: 24 / 244 = 0.09836065573770492
Duration: 0:01:07.244778

Start conducting accuracy calculation experiment for Defects4J...
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
Duration: 0:00:05.809504

Start conducting accuracy calculation experiment for Test dataset 300...
Top-1 accuracy: 181 / 300 = 0.6033333333333334
Top-3 accuracy: 203 / 300 = 0.6766666666666666
Top-5 accuracy: 211 / 300 = 0.7033333333333334
Top-10 accuracy: 221 / 300 = 0.7366666666666667
Top-50 accuracy: 237 / 300 = 0.79
Duration: 0:01:44.104937

Start conducting accuracy calculation experiment for Validation dataset 300...
Top-1 accuracy: 193 / 300 = 0.6433333333333333
Top-3 accuracy: 221 / 300 = 0.7366666666666667
Top-5 accuracy: 228 / 300 = 0.76
Top-10 accuracy: 234 / 300 = 0.78
Top-50 accuracy: 247 / 300 = 0.8233333333333334
Duration: 0:01:45.748686

Start conducting accuracy calculation experiment for Train dataset 300...
Top-1 accuracy: 275 / 300 = 0.9166666666666666
Top-3 accuracy: 284 / 300 = 0.9466666666666667
Top-5 accuracy: 289 / 300 = 0.9633333333333334
Top-10 accuracy: 293 / 300 = 0.9766666666666667
Top-50 accuracy: 296 / 300 = 0.9866666666666667
Duration: 0:01:44.887318

Start conducting one shot learning experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 57 / 64 = 0.890625
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 60 / 64 = 0.9375
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 61 / 64 = 0.953125
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 61 / 64 = 0.953125
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 62 / 64 = 0.96875

Top-1 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 16 / 324 = 0.04938271604938271
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 19 / 324 = 0.05864197530864197
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 22 / 324 = 0.06790123456790123
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 26 / 324 = 0.08024691358024691
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 35 / 324 = 0.10802469135802469
================
Correct Examples
Class: Abstract an existing method using the abstract keyword
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract void METHOD_1 ( int index , short value ) ;[0m
Pred: abstract void METHOD_1 ( int index , short value ) ;[0m
+++++++++++++++
[32mExample #1[0m
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract float METHOD_1 ( int index ) ;[0m
Pred: abstract float METHOD_1 ( int index ) ;[0m
---------------
Class: Add/Remove this qualifier
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
---------------
Class: Change method return value
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public boolean METHOD_1 ( ) { return false ; }[0m
Trg : public boolean METHOD_1 ( ) { return true ; }[0m
Pred: public boolean METHOD_1 ( ) { return true ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
---------------
Class: Forbid overriding: add final to method
Golden example (True):
[32mExample #1[0m
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Pred: public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Pred: public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (True):
[32mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
---------------
Class: Remove condition
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
---------------
Class: Rename parameter
Golden example (True):
[32mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
+++++++++++++++
[32mExample #1[0m
Src : public native boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , res . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract void METHOD_1 ( int index , short value ) ;[0m
Pred: abstract void METHOD_1 ( int index , short value ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract java.lang.String METHOD_1 ( ) ;[0m
Pred: abstract native java.lang.String METHOD_1 ( ) { ;[0m
[31mExample #2[0m
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract boolean METHOD_1 ( ) ;[0m
Pred: abstract synchronized boolean METHOD_1 ( ) ;[0m
[31mExample #3[0m
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
Pred: abstract abstract java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
[31mExample #4[0m
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
Trg : public abstract void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
Pred: public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
---------------
Class: Add invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
Trg : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . get ( ) . project ) ; }[0m
Pred: public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( ( change ) . get ( ) . project ) ; }[0m
[31mExample #2[0m
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( address ) ) , value ) ; }[0m
Pred: final void METHOD_1 ( int offset , int ) { VAR_1 . METHOD_2 ( ( offset + ( ) + ( address ) ) , value ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( VAR_2 class ) ; }[0m
[31mExample #4[0m
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; }[0m
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return r ; }[0m
Pred: static TYPE_1 METHOD_1 ( TYPE_1 a TYPE_1 ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; return r ; }[0m
[31mExample #5[0m
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Pred: private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( VAR_2 ) ; }[0m
---------------
Class: Add null check
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
Trg : public void run ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
Pred: public void run ( ) { { METHOD_1 ( true ) ; }[0m
[31mExample #2[0m
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 < TYPE_2 e ) { METHOD_4 ( STRING_1 , VAR_1 . ) ; }[0m
[31mExample #3[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 ; }[0m
[31mExample #4[0m
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public int [ ] METHOD_1 ( ) { return true ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { { walk ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { this . METHOD_2 ( ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , true ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { params = new TYPE_1 ( VAR_1 , vmId , true ) . METHOD_2 ( TYPE_2 . getParameters ( ) ) ; return params ; }[0m
[31mExample #2[0m
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . StorageDomain ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Pred: public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; return METHOD_2 ( VAR_2 . StorageDomain ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #4[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
Pred: public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true , true , null , VAR_1 , null , false , null ) ; }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , VAR_2 , true ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , true ) ; } catch ( android.os.RemoteException VAR_5 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 , true ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . VAR_2 ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; fail ( ) ; } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #10[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( this , VAR_1 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #13[0m
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
Pred: private void info ( java.lang.String msg , TYPE_1 args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . assertEquals ( ( ( STRING_1 . METHOD_4 ( ) ) + msg ) , args ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( this , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try VAR_1 = METHOD_2 ( true , null , true ) ; fail ( ) ; } catch ( e ) ; }[0m
[31mExample #16[0m
Src : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
Trg : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
Pred: private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , STRING_1 , true , true ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } catch ( android.os.RemoteException ) ; }[0m
[31mExample #18[0m
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }[0m
Pred: public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( a ) ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , true , true ) ; }[0m
[31mExample #20[0m
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 VAR_1 = new TYPE_1 ( TYPE_1 , false , false ) ; }[0m
[31mExample #21[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , null ) , STRING_1 , true ) ; }[0m
---------------
Class: Add statement,Remove thrown exception
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return ; }[0m
---------------
Class: Add/Remove parameter
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Integer returnValue ) { this . setItems ( ( ( java.util.List < > ) ( ( TYPE_2 . VdcQueryReturnValue returnValue ) ) . getReturnValue ( ) ) ) ; }[0m
[31mExample #2[0m
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int netId ) throws TYPE_2 ;[0m
Pred: TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 ; TYPE_2 ;[0m
[31mExample #3[0m
Src : public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Trg : public void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Pred: private void METHOD_1 ( TYPE_1 , event , event , com.google.gerrit.reviewdb.server.ReviewDb db ) { return db ) ; }[0m
[31mExample #4[0m
Src : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
Trg : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;[0m
Pred: static native void METHOD_1 ( long VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 VAR_4 , long VAR_5 ) ;[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_2 TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
[31mExample #7[0m
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
Trg : void METHOD_1 ( int type , int VAR_2 ) ;[0m
Pred: void METHOD_1 ( long VAR_1 , type , int VAR_2 , int VAR_2 ) ;[0m
[31mExample #8[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 TYPE_3 listener ) throws java.io.IOException { return null ; return null ; }[0m
[31mExample #9[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( TYPE_2 . VdcQueryReturnValue ) ) . getReturnValue ( ) ) ) ; }[0m
[31mExample #10[0m
Src : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) ;[0m
Pred: void onSuccess ( TYPE_1 action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) { return VAR_2 ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command ) ; }[0m
[31mExample #12[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 VAR_1 , VAR_2 , VAR_2 ) ; return false ; ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( long type , int VAR_2 VAR_2 ) { throw new TYPE_1 ( STRING_1 , STRING_1 ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
[31mExample #15[0m
Src : native boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Trg : native boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Pred: native boolean METHOD_1 ( int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
[31mExample #16[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Pred: public TYPE_1 < TYPE_2 ( TYPE_3 VAR_1 ) { return TYPE_4 . . METHOD_2 ( null ) ; }[0m
[31mExample #17[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return TYPE_4 . METHOD_3 ( ) . METHOD_5 ( path ) ; }[0m
[31mExample #18[0m
Src : void METHOD_1 ( boolean VAR_1 ) ;[0m
Trg : void METHOD_1 ( ) ;[0m
Pred: void METHOD_1 ( boolean VAR_1 ) { return VAR_1 ; }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_2 ) { TYPE_2 . getInstance ( METHOD_2 ( VAR_2 ) ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , revision , VAR_2 , null , 0 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
Pred: public void add ( android.bluetooth.BluetoothDevice device , java.lang.String ) throws java.lang.Exception { METHOD_2 METHOD_2 ( VAR_1 , project , project , STRING_1 , true , true , VAR_2 , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 , id ) . id ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( id ) . delete ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (True):
[32mExample #1[0m
Src : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
Pred: public void onSuccess ( org.ovirt.engine.core.common.businessentities.StoragePool returnValue ) { METHOD_1 ( returnValue returnValue ) ; }[0m
---------------
Class: Add/Remove this qualifier
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , java.lang.String METHOD_1 ) { return VAR_1 ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public abstract TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Pred: public static void METHOD_1 ( java.util.Map < java.lang.String > VAR_1 ) { VAR_3 . METHOD_3 ( ) ; }[0m
[31mExample #3[0m
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public abstract java.lang.String METHOD_1 ( ) { return VAR_1 . ;[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Pred: public native void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , ) ; }[0m
[31mExample #5[0m
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ; }[0m
[31mExample #6[0m
Src : private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) . METHOD_3 ( ( ) ;[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public abstract TYPE_1 METHOD_1 ( ) { return VAR_1 . ;[0m
[31mExample #8[0m
Src : protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Trg : public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Pred: public protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( TYPE_1 . METHOD_1 ( ) ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Pred: public static void METHOD_1 ( java.util.Map < java.lang.String java.lang.String > ) { VAR_1 ;[0m
[31mExample #10[0m
Src : private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Trg : protected boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Pred: public static boolean METHOD_1 ( java.util.List < > VAR_1 ) { return ( VAR_2 ) ; }[0m
[31mExample #11[0m
Src : private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public static void TYPE_1 of ( java.io.File VAR_1 , VAR_2 ) ; VAR_2 ;[0m
[31mExample #12[0m
Src : protected TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Trg : public TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Pred: public abstract TYPE_1 . DbFacade METHOD_1 ( ) { return ( ) ; }[0m
[31mExample #13[0m
Src : protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Trg : public void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Pred: public abstract void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM ) { vm ; }[0m
[31mExample #14[0m
Src : private static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Trg : public static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Pred: public static native void METHOD_1 ( java.lang.Object VAR_1 , VAR_2 ) ;[0m
[31mExample #15[0m
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Pred: public static java.lang.String METHOD_1 METHOD_1 ( ) { return METHOD_2 ( ) . ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
[31mExample #3[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Pred: protected boolean METHOD_1 ( ) { return METHOD_2 ( ) . get ( METHOD_3 ( ) . getId ( ) ) ; }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return METHOD_3 ( VAR_1 ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( ) { return VAR_2 VAR_2 . get ( key . project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM ) { org.mockito.Mockito.when ( VAR_1 . get ( java.util.List < any ( ) . Guid class ) ) . thenReturn ( vm ) ; }[0m
---------------
Class: Change method return value
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public final TYPE_1 METHOD_1 ( ) { this ; }[0m
[31mExample #2[0m
Src : protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
Trg : protected java.lang.String getRefName ( ) { return ref ; }[0m
Pred: public java.lang.String getRefName ( ) { return true ; }[0m
---------------
Class: Change method return value,Change return type
Golden example (True):
[32mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { { VAR_1 . METHOD_2 ( ) ; return ( ) ; return null ; return true ; }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( mContext , id , VAR_1 , VAR_2 , count , VAR_3 ) ; }[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network network ) { return network . . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network VAR_1 ) { return iface . . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #4[0m
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return ; }[0m
[31mExample #5[0m
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Pred: static long METHOD_1 ( long VAR_1 ) { TYPE_1 TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
[31mExample #7[0m
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Trg : private static org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Pred: private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
[31mExample #8[0m
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Pred: synchronized TYPE_1 METHOD_1 ( long VAR_1 VAR_1 ) { METHOD_2 METHOD_2 ( ) ; return METHOD_3 ( mContext , mContext , VAR_1 ) ; }[0m
[31mExample #9[0m
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Pred: static java.lang.String METHOD_1 ( long VAR_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
[31mExample #10[0m
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 VAR_1 ) { VAR_2 . VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; } return true ; }[0m
[31mExample #11[0m
Src : private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Trg : private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Pred: private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch branch . get ( ) ) ; }[0m
[31mExample #12[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . network object ) { return object . METHOD_1 ( ) ; }[0m
Trg : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
Pred: private java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network network object ) { return object . object . object . METHOD_1 ( ) ; } ( ) ; }[0m
[31mExample #13[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . METHOD_1 ( ) . size ( ) ) ; }[0m
Pred: private java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object object ) { return java.lang.String.valueOf ( ( object . object . METHOD_1 ( ) . size ( ) ) ) ; }[0m
[31mExample #14[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public static native byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
Trg : public static native byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
Pred: private native byte [ ] METHOD_1 ( long VAR_1 , int VAR_1 ) { return VAR_1 ; }[0m
[31mExample #16[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Pred: static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
[31mExample #17[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return ( java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Pred: private java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf java.lang.String.valueOf ( object object . METHOD_1 ( ) ) ) + STRING_1 + STRING_1 ; }[0m
[31mExample #18[0m
Src : native void METHOD_1 ( int VAR_1 , int VAR_2 ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
Pred: native void METHOD_1 ( long VAR_1 , long VAR_2 , int VAR_2 ) ; int ;[0m
[31mExample #19[0m
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_4 ) ; }[0m
[31mExample #20[0m
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Pred: final void METHOD_1 ( long VAR_1 VAR_1 ) { synchronized ( this ) { METHOD_2 ( this ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
[31mExample #21[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_2 ) ; }[0m
[31mExample #22[0m
Src : public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain domain ) { return ( ( domain . METHOD_2 METHOD_2 ( ) ) == == ( VAR_1 ) ) ; }[0m
[31mExample #23[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_2 ) ; }[0m
[31mExample #24[0m
Src : public static native void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
Pred: static native void METHOD_1 ( long VAR_1 VAR_1 ) throws java.io.IOException { return ; }[0m
[31mExample #25[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . StorageDomain org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_2 , VAR_3 ) ; }[0m
[31mExample #26[0m
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Pred: synchronized void METHOD_1 ( long VAR_1 , long VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_2 , s ) ; }[0m
[31mExample #27[0m
Src : public static native void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
Pred: static native void METHOD_1 ( long VAR_1 , long VAR_2 VAR_2 ) throws TYPE_1 r ; TYPE_1 ; TYPE_1 ;[0m
[31mExample #28[0m
Src : native void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Pred: native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
[31mExample #29[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) ; }[0m
Pred: public java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 METHOD_2 ( VAR_1 , new TYPE_1 ( TYPE_1 VAR_2 ) ) ; return null ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . id ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args , t ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = java.lang.String VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #5[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( INT_1 , VAR_1 . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . ; }[0m
---------------
Class: Change return type
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Pred: public java.lang.String METHOD_1 METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : ) . equals ( name ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = dao . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.util.List < TYPE_1 ) . METHOD_3 ( ( ( VAR_1 ) ) ; TYPE_2 . METHOD_4 ( result ) ; }[0m
[31mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_3 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , STRING_1 , VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 ) { return TYPE_2 ( vmId , VAR_1 , false , VAR_2 , false ) ; }[0m
[31mExample #4[0m
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( VAR_2 . get ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; super super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , false ) ; return VAR_3 == null ? METHOD_3 ( VAR_3 ) ; }[0m
[31mExample #2[0m
Src : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
Pred: public TYPE_1 TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Pred: public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (True):
[32mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
---------------
Class: Narrow method visibility
Golden example (True):
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = dao . STRING_1 ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String id ) { return new TYPE_1 ( STRING_1 ) ; }[0m
[31mExample #3[0m
Src : protected synchronized void METHOD_1 ( ) { }[0m
Trg : public synchronized void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( ) { return user ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { return user ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return user ; }[0m
[31mExample #5[0m
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Pred: public static void METHOD_1 ) { VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
---------------
Class: Remove condition
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
Trg : public static TYPE_1 getInstance ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 getInstance ( ) { if ( VAR_1 ) == VAR_1 = new TYPE_1 ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . METHOD_2 ( ) ; }[0m
---------------
Class: Remove invoked method
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = INT_1 ; ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ] ) ; }[0m
[31mExample #3[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
Pred: private float METHOD_1 ( ) { float a ; float b ; float a = FLOAT_1 ; b = FLOAT_2 . METHOD_2 ( ) ; c = a % b ; return c ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao VAR_1 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
[31mExample #5[0m
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = storageDomain . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Pred: static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
[31mExample #6[0m
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }[0m
Pred: final long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; } return ; }[0m
[31mExample #7[0m
Src : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
Trg : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; }[0m
Pred: public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
[31mExample #8[0m
Src : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
Trg : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
Pred: private TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : TYPE_2 , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 disk disk ) ; }[0m
[31mExample #9[0m
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return false ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
[31mExample #11[0m
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
Pred: public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( INT_1 ) ; . METHOD_2 ( ) . METHOD_2 ( ) : 1 ; }[0m
[31mExample #12[0m
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( TYPE_4 . METHOD_3 ( ) . METHOD_3 ( ) , TYPE_4 . instance ) ; METHOD_4 ( ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
Pred: final void METHOD_1 ( TYPE_1 value ) { status status = value . getValue ( ) ; return false ; }[0m
[31mExample #14[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
Pred: private float METHOD_1 ( ) { float a ; float b ; float a = FLOAT_1 ; b = FLOAT_2 . METHOD_2 ( ) ; c = a - b ; return c ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_5 ( ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }[0m
Pred: public org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 ) java.lang.String value value value ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; } }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true , true ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }[0m
Pred: public static void METHOD_1 ( ) throws { TYPE_2 . getInstance ( ) . METHOD_1 ( null ) ; } catch ( ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , branch , null , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData ) throws java.lang.Exception { try { METHOD_2 ( repo , null , null , null , branch , null , null ) ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { super METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; add ( VAR_1 ) ; }[0m
[31mExample #9[0m
Src : public TYPE_1 create ( ) { return new TYPE_1 ( this , null ) ; }[0m
Trg : public TYPE_1 create ( ) { return new TYPE_1 ( this ) ; }[0m
Pred: public TYPE_1 create ( ) { return new TYPE_1 ( TYPE_1 ) , new ( this , null ) ; } return false ; }[0m
[31mExample #10[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public static boolean METHOD_1 ( VAR_1 , java.lang.Class [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_3 ( ) , VAR_2 ) ; } }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
[31mExample #12[0m
Src : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_3 , VAR_4 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { super METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) , null ) , false , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk ( ) ) , false , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
[31mExample #16[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , version ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_2 , VAR_3 , version ) . METHOD_2 ( ) ; } }[0m
[31mExample #17[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) , ( VAR_1 , STRING_1 ) ; } return false ; }[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , true , true ) ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
[31mExample #22[0m
Src : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > getParameters ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . METHOD_1 ( ) . getId ( ) ) ; }[0m
[31mExample #23[0m
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 ) ; }[0m
Pred: public final void METHOD_1 ( TYPE_1 TYPE_2 ) throws TYPE_3 . OrmException { if ( ) { METHOD_2 ( VAR_1 , null , null ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 METHOD_1 ( new new java.util.HashMap < > ( ) ( true ) , true , true , true ) ; }[0m
[31mExample #25[0m
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . VAR_2 . METHOD_3 ( VAR_1 ) ; } return false ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
[31mExample #27[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
Pred: public java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , null , new new java.io.File ( VAR_2 , STRING_1 ) ) , false , false ) ; }[0m
[31mExample #30[0m
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String ) { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
---------------
Class: Remove redundant initialization
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }[0m
Pred: public java.util.List < METHOD_1 ( ) { }[0m
[31mExample #2[0m
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
Trg : public void info ( java.lang.String msg ) { log ( TYPE_1 , msg ) ; }[0m
Pred: public void info ( msg ) { }[0m
[31mExample #3[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
Pred: public static METHOD_1 ( long ) { }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_6 ( resource ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_2 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_5 = INT_1 ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_3 ( STRING_1 ) ; }[0m
[31mExample #8[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Pred: abstract METHOD_1 ( TYPE_2 ) { return VAR_1 ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( VAR_1 ) { VAR_1 ; }[0m
[31mExample #10[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Pred: public void METHOD_1 ( x ) { return VAR_2 ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_2 ) ; }[0m
[31mExample #12[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
Pred: public static METHOD_1 ( long ) { }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_6 ( ) ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_7 ( resource ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { METHOD_4 ( ) ; }[0m
[31mExample #17[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
Pred: protected TYPE_1 METHOD_1 ( model ) { return model ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_4 ( VAR_3 ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { value . value ; }[0m
[31mExample #21[0m
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
Pred: public boolean METHOD_1 ( int ) { }[0m
[31mExample #22[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Pred: public void METHOD_1 ( x ) { return y ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { resource METHOD_7 ( ; }[0m
[31mExample #24[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( VAR_1 ) { }[0m
[31mExample #25[0m
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: void METHOD_1 ( java.lang.String VAR_1 ) { }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_6 ( VAR_4 , VAR_6 ) ; }[0m
[31mExample #27[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 ) { VAR_2 ; }[0m
[31mExample #28[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { }[0m
[31mExample #29[0m
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
[31mExample #30[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_6 ( ) ; }[0m
[31mExample #31[0m
Src : public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 ) { }[0m
Pred: public void METHOD_1 ( VAR_1 ) { }[0m
[31mExample #32[0m
Src : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
Trg : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { }[0m
[31mExample #33[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { Main . METHOD_3 ( ) ; }[0m
Pred: public static void ( java.lang.String ) { }[0m
[31mExample #34[0m
Src : public static int METHOD_1 ( int arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - arg1 ) - VAR_1 ; }[0m
Trg : public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( - arg1 ) - VAR_1 ; }[0m
Pred: public static METHOD_1 ( int VAR_1 ) { VAR_1 ; }[0m
[31mExample #35[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 ; }[0m
[31mExample #36[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { }[0m
[31mExample #37[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 METHOD_4 ( command ) ; }[0m
[31mExample #38[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { }[0m
[31mExample #39[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( VAR_1 ) { }[0m
[31mExample #40[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public int METHOD_1 ( int ) { return INT_3 ; }[0m
[31mExample #41[0m
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Pred: public static METHOD_1 ( value ) { }[0m
[31mExample #42[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_5 ( ) ; }[0m
[31mExample #43[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_3 ; }[0m
[31mExample #44[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { }[0m
[31mExample #45[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 METHOD_3 ( ) ; }[0m
[31mExample #46[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( value ) { METHOD_2 ( STRING_2 ) ; }[0m
[31mExample #47[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }[0m
Pred: public static METHOD_1 ( long ) { }[0m
[31mExample #48[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { }[0m
[31mExample #49[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_6 ( resource ) ; }[0m
[31mExample #50[0m
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( value ) { }[0m
[31mExample #51[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Pred: public void METHOD_1 ( VAR_1 ) { VAR_1 ; }[0m
[31mExample #52[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 3 ) ; }[0m
[31mExample #53[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( VAR_1 ) { }[0m
[31mExample #54[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( VAR_1 ) { }[0m
[31mExample #55[0m
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
Pred: public float METHOD_1 ( float ) { }[0m
[31mExample #56[0m
Src : public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Trg : public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Pred: public static METHOD_1 ( long VAR_1 ) { }[0m
[31mExample #57[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public int METHOD_1 ( int ) { return INT_3 ; }[0m
[31mExample #58[0m
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }[0m
Pred: public void METHOD_1 ( VAR_1 ) { file ; }[0m
[31mExample #59[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String args ) { }[0m
[31mExample #60[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { super ; }[0m
[31mExample #61[0m
Src : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
Trg : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( VAR_1 ) { }[0m
[31mExample #62[0m
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { VAR_1 ; }[0m
[31mExample #63[0m
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 < > > ) ( result ) ) ( result ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < > ) ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ) . getReturnValue ( ) ) ; VAR_2 = VAR_1 ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . getInstance ( ) . METHOD_2 ( target ) ; } ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( ( returnValue ) ( returnValue ) ) ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
Pred: public void add ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[31mExample #8[0m
Src : boolean METHOD_1 ( ) ;[0m
Trg : boolean validate ( ) ;[0m
Pred: public boolean validate ( ( ) ) { return false ; ; ( ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_6 METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; }[0m
---------------
Class: Rename parameter
Golden example (True):
[32mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
Trg : public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
Pred: public void METHOD_1 ( com.android.jack.ir.ast.JMethod method method ) { return false ; }[0m
[31mExample #2[0m
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
Pred: public abstract ( java.lang.String java.lang.String VAR_1 ) throws TYPE_2 ;[0m
[31mExample #3[0m
Src : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) ;[0m
Trg : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version ) ;[0m
Pred: public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) ;[0m
---------------
Class: Rename variable
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
Trg : private native java.lang.String METHOD_1 ( ) ;[0m
Pred: public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 . METHOD_4 ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( TYPE_1 STRING_2 , STRING_3 ) . METHOD_2 ( ) . . METHOD_2 ( STRING_4 ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { java.lang.System.out.println ( STRING_1 ) ; } }[0m
Pred: public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { TYPE_2 ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
[31mExample #6[0m
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Pred: private static < TYPE_1 > void ( TYPE_1 [ VAR_1 ) { int length = VAR_1 . length ; ; org.junit.Assert.assertEquals ( ( STRING_1 , VAR_1 . length ) ) , 0 , length ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Pred: public TYPE_1 METHOD_1 METHOD_1 ( ) { return getEntity ( new org.ovirt.engine.core.compat.Guid ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 VAR_2 class , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new VAR_3 ( VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , new TYPE_3 ( ) ) ; }[0m
[31mExample #4[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( METHOD_4 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
[31mExample #6[0m
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( value , org.ovirt.engine.core.compat . VdcQueryReturnValue returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 . get ( ) ) ) + STRING_2 ) . METHOD_3 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , false ) ; METHOD_4 ( result ) ; METHOD_4 ( result ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = ( VAR_2 . ( STRING_2 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) . METHOD_2 ( ) ) ; }[0m
[31mExample #4[0m
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( address ) ) ) ; }[0m
Pred: public byte METHOD_1 ( int offset ) { return ( VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ) ; return VAR_1 ; }[0m
[31mExample #5[0m
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , ( VAR_2 ) METHOD_5 ( VAR_2 ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . isEqualTo ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( STRING_1 , VAR_1 VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; com.google.common.truth.Truth.assertThat ( STRING_1 ) ; }[0m
[31mExample #7[0m
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . ( VAR_2 ) ; return VAR_3 . METHOD_2 ( VAR_1 ) ; return ( VAR_3 ) ; return false ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) . METHOD_2 ( ) ; }[0m
[31mExample #11[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . getName ( ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ) ; return VAR_4 ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . . VAR_1 . METHOD_2 ( value ) ; }[0m
[31mExample #13[0m
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( METHOD_2 ( ) ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
[31mExample #14[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return ( METHOD_2 ( ) ? VAR_1 VAR_1 . METHOD_3 ( ) : null ) ; return ( ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void METHOD_1 ( java.lang.Object , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) = ( ( TYPE_2 > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getStoragePoolId ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( result ) ; METHOD_4 ( ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; METHOD_1 ( new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
[31mExample #18[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . getStoragePoolId ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_3 ( getEntity ( ) ) ; return METHOD_5 ( VAR_2 , params ) ; }[0m
[31mExample #19[0m
Src : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Trg : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }[0m
Pred: public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . getName ( ) ) . METHOD_2 ( ) ; }[0m
[31mExample #20[0m
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
Pred: protected int METHOD_1 ( ) { return ( VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ) ; }[0m
[31mExample #21[0m
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }[0m
Pred: public TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; } return METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_3 ) ) . getInstance ( ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #23[0m
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { { return VAR_1 . VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #24[0m
Src : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
Trg : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . getName ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return ( entity ) . getInstance ( ) ; }[0m
[31mExample #25[0m
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) { { return this . . VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_1 ( storage ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( ) ; } catch ( ( ) ) ; }[0m
[31mExample #27[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) . equals ( VAR_1 ) ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup = dao . METHOD_3 ( ) ; TYPE_1 . METHOD_5 ( VAR_1 ) ; TYPE_1 . assertEquals ( VAR_1 ) ; }[0m
---------------
Class: Replace statement
Golden example (True):
[32mExample #1[0m
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; TYPE_2 . METHOD_3 ( ) ; }[0m
[31mExample #2[0m
Src : public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
Trg : public static long METHOD_1 ( ) { long VAR_1 = 10 ; int VAR_2 = 3 ; return VAR_1 & VAR_2 ; }[0m
Pred: public static long METHOD_1 ( ) { long VAR_1 = Main . VAR_2 = 3 ; VAR_2 ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ; }[0m
---------------
Class: unclear
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
Trg : protected native byte METHOD_1 ( ) throws java.io.IOException ;[0m
Pred: public byte METHOD_1 ( ) { return ( ( byte ) ( METHOD_2 ( ) ( METHOD_2 ( ) ) ) ) ; }[0m
[31mExample #2[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Pred: public java.util.List < > METHOD_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . . instance ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) . METHOD_2 ( ) ; } catch ( ) ; }[0m
---------------
================
Duration: 0:04:20.614995

Start conducting one shot learning experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 2 / 56 = 0.03571428571428571
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 3 / 56 = 0.05357142857142857
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 3 / 56 = 0.05357142857142857
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 4 / 56 = 0.07142857142857142
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 4 / 56 = 0.07142857142857142

Top-1 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 3 / 188 = 0.015957446808510637
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 4 / 188 = 0.02127659574468085
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 5 / 188 = 0.026595744680851064
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 5 / 188 = 0.026595744680851064
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 6 / 188 = 0.031914893617021274
================
Correct Examples
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 context ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
[32mExample #2[0m
Src : static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Trg : static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Pred: static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Add braces to if statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Slog.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = service == null ) { return ; } return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 , int ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Slog.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } service = service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #2[0m
Src : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; <unk> = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Trg : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; <unk> = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Pred: public void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Slog.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( ) ; msg.arg1 = INT_1 ; } return 0 ; 0 . METHOD_3 ( msg ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 fd java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( , ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Trg : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Pred: TYPE_1 < TYPE_2 > . METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( TYPE_2 . METHOD_4 ( ) ) return r ; } catch ( STRING_1 + ) ; return null ; }[0m
[31mExample #2[0m
Src : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Trg : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Pred: public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 ( VAR_3 ) ; return VAR_3 . METHOD_4 ( ) ; } return null ; }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( VAR_4 . Guid ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( ) ; }[0m
[31mExample #4[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return factory new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . METHOD_2 ( ) . getParameters ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_8 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Pred: private void METHOD_1 ( ) { cmd cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( true ) ; cmd . METHOD_5 ( ) . METHOD_7 ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 , true ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { METHOD_5 ( VAR_5 ) ; } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: private void METHOD_1 ( ) { cmd cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 , 0 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_1 ( d . METHOD_5 ( ) , r ) ; }[0m
[31mExample #9[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int userId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return ; }[0m
---------------
Class: Add statement
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = <unk> . METHOD_3 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) { TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ; } VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = <unk> . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 entry ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; return TYPE_4 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; s . METHOD_10 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Pred: private void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 , VAR_5 ) ; s . METHOD_8 ( ) ; METHOD_9 . METHOD_7 ( ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ; VAR_5 = ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; s . METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_6 . METHOD_7 ( ) ; }[0m
[31mExample #2[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 . ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; } }[0m
---------------
Class: Broad method visibility
Golden example (False):
[31mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( ( validator . value ) ) { VAR_3 . add ( ( TYPE_1 ) ( disk ) ) ; } } return return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: public java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( ! ( TYPE_3 . get ( ) ) , in ) ) { return false ; } } return true ; }[0m
[31mExample #3[0m
Src : private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Pred: public static boolean METHOD_1 ( ) { boolean VAR_1 VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ) . METHOD_4 ( ) ) ) . isEmpty ( ) ) ; if ( VAR_1 ) { } return ! VAR_1 ; }[0m
[31mExample #4[0m
Src : private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != null ) { return false ; } return ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
---------------
Class: Change comparison operator (e.g. >) in condition
Golden example (False):
[31mExample #1[0m
Src : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Trg : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Pred: private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ) ; ++ ( STRING_1 , TYPE_2 . METHOD_2 ( ( VAR_1 + 1 ) ) + STRING_1 ) ; } return VAR_2 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Trg : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 > VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Pred: private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 . ( ( STRING_1 ) + STRING_2 ) ) ; } return new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
---------------
Class: Change exception type in catch clause
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_1 ( ) , VAR_4 ) ; } catch ( java.lang.RuntimeException expected , e ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_7 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw ( ( x , e ) ) ; } }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 context ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_4 ( VAR_7 , VAR_6 , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
[31mExample #2[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int d , int VAR_5 ) { METHOD_2 ( mContext , id , VAR_1 , VAR_2 , VAR_4 , w , d , VAR_5 , VAR_5 ) ; }[0m
[31mExample #3[0m
Src : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Trg : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Pred: private final METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( VAR_1 , VAR_2 ) ; } while ( res . METHOD_4 ( ) ) ; return res ; } new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( java.util.Map VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Trg : private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Pred: private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; for ( TYPE_2 map : VAR_2 ) { return ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } return VAR_4 ; }[0m
[31mExample #6[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
[31mExample #7[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , byte [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int VAR_6 ) { METHOD_2 ( mContext , id , VAR_1 , VAR_2 , w , w , VAR_5 , d , VAR_6 ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( int session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Pred: private void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_1 , VAR_1 , c , VAR_2 , walk , callback ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 [ 2 ] . toString ( ) . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . Guid ( ) ) ) . thenReturn ( command . validate ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Pred: private void METHOD_1 ( ) { { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_4 ( ) . METHOD_6 ( ) . METHOD_6 ( ) . METHOD_6 ( VAR_7 class , VAR_8 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new TYPE_5 ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( java.util.ArrayList < > > ( ) ) ; } return METHOD_6 ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( args . inV ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; for ( t . METHOD_1 ( ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , version , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
[31mExample #7[0m
Src : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Trg : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_2 . length , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Pred: protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) ) ; for ( int VAR_6 . VmTemplate ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 > java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( == == null ) { m . METHOD_2 ( VAR_1 , value ) ; } } catch ( TYPE_3 e ) ; TYPE_4 . assertEquals ( VAR_2 ) ; }[0m
[31mExample #2[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 > d value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( == == null ) ; } . ( ( long VAR_4 ) != null ) ; VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_2 . get ( 0 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = result . METHOD_2 ( result ) ; TYPE_2 . METHOD_3 ( result . size ( ) , 1 ) ; TYPE_2 . assertEquals ( STRING_1 ) ; }[0m
[31mExample #4[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 > d value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( == == null ) { m . METHOD_2 ( VAR_1 , value ) ; } } catch ( TYPE_3 e ) ; TYPE_4 . assertEquals ( VAR_2 ) ; }[0m
---------------
Class: Change qualified name in response to a move class refactoring
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Trg : public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Pred: public java.lang.String toString ( ) { TYPE_1 ( new TYPE_1 ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( int i ) ; return ( STRING_1 ) ; } sb.append ( CHAR_2 ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new TYPE_5 ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? VAR_1 . METHOD_6 ( ) ; } return METHOD_6 ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_2 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Pred: public void METHOD_3 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_4 . METHOD_6 ( ) ) ; validator . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . commit ( VAR_5 ) ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: public void validate METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . > ( VAR_2 . METHOD_6 ( ) ) ; for ( METHOD_6 . id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network . METHOD_3 ( resource ) ; if ( network != null ) ; resource . METHOD_4 ( ) . getName ( resource ) ; } return METHOD_7 ( resource , VAR_2 , VAR_4 ) ; }[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: public void validate METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network . get ( ) . METHOD_6 ( id ) ; for ( METHOD_6 . id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Pred: public void METHOD_5 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; <unk> ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; <unk> ( VAR_4 ) ; }[0m
Pred: public void METHOD_3 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_7 ( VAR_4 ) ; METHOD_6 ( VAR_4 ) ; VAR_4 ( VAR_4 VAR_4 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new TYPE_5 ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( null ) ; } } METHOD_5 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } METHOD_4 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new TYPE_5 ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != ( VAR_1 , VAR_2 ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
[31mExample #3[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_3 , disk . METHOD_3 ( ) : STRING_1 ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new TYPE_5 ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return false ; } runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) ; } }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_1 ( TYPE_1 . METHOD_2 ( new ( ( getModel ( ) , new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) , returnValue ) ) . getModel ( ) . isEmpty ( ) . isEmpty ( ) ) ) ; } } ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { final TYPE_1 . patchSet = new ( ( ) ) { public java.lang.Object valueOf ( ( source , org.ovirt.engine.ui.frontend.AsyncQuery ) ) { return source == < TYPE_1 > ( ) ; } } METHOD_5 ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat , boolean VAR_1 ) { aQuery.converterCallback = new new ( ( ) ) { public java.lang.Object valueOf ( ( source , org.ovirt.engine.ui.frontend.AsyncQuery ) ) { return source ; params . METHOD_7 ( ) ; } . runQuery ( VAR_2 , params , aQuery ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , METHOD_3 ( ) ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback ( row , new TYPE_5 ( ) ) { public = valueOf ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ; } ; } METHOD_2 ( ) . METHOD_2 ( ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Trg : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Pred: private void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) == null ) ) { TYPE_1 . METHOD_2 ( new ( this , new TYPE_1 ( ) , returnValue ) ) ; VAR_1 = METHOD_3 ( ) ; } } , METHOD_3 ( ) ; } }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { final TYPE_1 . DiskImage = new ( ( ) ) { public java.lang.Object valueOf ( ( source , org.ovirt.engine.ui.frontend.AsyncQuery ) ) { return source == ( TYPE_1 > ) ; } } METHOD_6 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { diskImage = new com.google.gerrit.reviewdb.client.Account.Id ( ) ; new TYPE_1 ( ) . valueOf ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return METHOD_6 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new java.util.ArrayList ( VAR_1 ) ( VAR_1 ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new TYPE_1 ( ( model , java.lang.Object returnValue ) ( returnValue ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #8[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { final TYPE_1 . DiskImage = new ( ( ) ) { public java.lang.Object valueOf ( ( source , org.ovirt.engine.ui.frontend.AsyncQuery ) ) { return source ; } ; TYPE_2 . METHOD_2 ( ) ; } . runQuery ( VAR_2 , params , aQuery ) ; }[0m
[31mExample #9[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ! ( ( getEntity ( ) ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new TYPE_4 ( ( java.util.List < ) ) ( returnValue ) ) ; } METHOD_3 ( ) ; } getEntity ( ) . getId ( ) ) ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Trg : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Pred: private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( this , new org.ovirt.engine.core.compat.Guid ( ) ) { public void onSuccess ( ( target , java.lang.Object returnValue ) ) { VAR_1 . METHOD_3 ( ( java.util.ArrayList < TYPE_3 > ) ( returnValue ) ) ) ; } }[0m
[31mExample #11[0m
Src : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new java.util.ArrayList ( VAR_1 ) ( VAR_1 ) ; VAR_2 = new org.ovirt.engine.core.compat.Guid ( ( java.util.List < java.lang.Object > ) ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ) ; } } METHOD_5 ( ( new TYPE_3 ( ) , VAR_1 ) ) ; }[0m
[31mExample #12[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { TYPE_1 . patchSet = new TYPE_5 ( ) { public = valueOf ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ) ; } ; } ; METHOD_5 ( ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
[31mExample #13[0m
Src : private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( this , new org.ovirt.engine.core.compat.Guid ( ) ) ) { TYPE_1 . onSuccess ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 , boolean VAR_2 ) { aQuery.converterCallback = new TYPE_5 ( ) { public java.lang.Object valueOf ( ( source , org.ovirt.engine.ui.frontend.AsyncQuery ) ) { return source ; } return ; } METHOD_5 ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
[31mExample #15[0m
Src : public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Collections < TYPE_1 . Version > ( ) ) { VAR_2 . put ( VAR_3 , VAR_3 ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
[31mExample #16[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { if ( name , new TYPE_5 ( ) ) { public java.lang.Object valueOf ( ( source , org.ovirt.engine.ui.frontend.AsyncQuery ) ) { return source == ( ) ; } return METHOD_6 ( VAR_1 , ( ) , STRING_2 ) . get ( ) , aQuery ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , long <unk> , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( <unk> , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , long <unk> , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( <unk> , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { return VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } return VAR_5 = VAR_4 . METHOD_2 ( ) ; } finally { ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; try { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Trg : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Pred: public static void METHOD_1 ( int , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id , VAR_3 ) ; } catch ( java.lang.RuntimeException e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; try { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( VAR_3 ) { VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . getName ( ) ) ; VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; METHOD_6 ( new TYPE_1 ( ) ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_2 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . getValue ( ) , TYPE_4 . getParameters ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new TYPE_5 ( ) { public = ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != ( VAR_1 ) . METHOD_3 ( ) : 1 ; } ; METHOD_4 ( TYPE_1 TYPE_1 . METHOD_5 ( ) ) , aQuery ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; } } METHOD_5 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
Trg : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type ) ; return vm ; }[0m
Pred: public static map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_4 ( ) ; } VAR_3 = VAR_3 . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_1 , response , VAR_3 , VAR_2 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 ) throws TYPE_3 , TYPE_4 { try . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
[31mExample #3[0m
Src : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_6 ( VAR_1 ) . METHOD_6 ( ) . getStatus ( ) . getStatus ( ) . METHOD_8 ( ) ; return null ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( VAR_3 . METHOD_7 ( ) ) ; } ( ( VAR_3 . getStatus ( ) ) ) , 1 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_5 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( ) ) ) ; org.mockito.Mockito.when ( METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) ; dao . METHOD_5 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , TYPE_3 . METHOD_3 ( ) ) , null ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
[31mExample #10[0m
Src : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( ) ) ; return VAR_2 ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = ( METHOD_6 ( ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( true ) . when ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_6 ( command ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , VAR_3 ) ; . METHOD_3 ( VAR_4 ) ; org.junit.Assert.assertEquals ( expected , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 ( this . METHOD_3 ( node ) , TYPE_4 . METHOD_5 ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 , byte [ VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 . METHOD_3 ( ) , VAR_6 , VAR_6 ) ; METHOD_5 ( ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 context , VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( VAR_2 . . getName ( ) ) ) ) { context . METHOD_5 ( node ) , ( STRING_2 , STRING_3 ) , null ) ; } }[0m
[31mExample #16[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; }[0m
Trg : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; }[0m
[31mExample #18[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 ) ; } }[0m
Pred: public static void METHOD_1 ( TYPE_1 , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
[31mExample #19[0m
Src : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Pred: public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) ; } } METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + VAR_1 ) ; VAR_2 = new TYPE_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_2 ) ) , VAR_1 ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( TYPE_1 . METHOD_5 ( ) . METHOD_6 ( STRING_1 ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_2 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 = = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( context . ( ) , VAR_4 ) ; } return METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_6 ( VAR_2 class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
[31mExample #25[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 , options ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { VAR_4 TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
[31mExample #26[0m
Src : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Trg : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . add ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; }[0m
---------------
Class: Remove redundant initialization,Replace statement
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 > config ) { TYPE_3 input = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_1 . METHOD_3 ( config ) ) ; return VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 input = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 . METHOD_1 ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . equals ( ) ) ) ; return METHOD_4 ( VAR_2 , path , action ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( <unk> , STRING_8 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( <unk> , STRING_8 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( STRING_5 , STRING_6 ) ; provider . METHOD_2 ( a , STRING_8 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_4 ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; } ( INT_1 , VAR_3 . getStatus ( ) ) ; } }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
[31mExample #5[0m
Src : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Trg : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 params = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 ) ; METHOD_6 . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
[31mExample #6[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . setId ( VAR_2 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; VAR_1 . METHOD_5 ( vm ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , STRING_1 , STRING_1 , new TYPE_2 ( ) ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; TYPE_2 VAR_3 = resource . getName ( ) ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; getName ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ! ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { METHOD_3 ( vds ) ; METHOD_4 ( ) . setIsChangable ( false ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , true ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . put class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 . METHOD_5 ( VAR_2 ) ; METHOD_7 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { TYPE_2 info . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
[31mExample #16[0m
Src : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) { return VAR_4 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , entity , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 = VAR_1 == ( ) ; } return super . METHOD_1 ( source , VAR_1 ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_5 ( STRING_1 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_7 ( ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } long c = TYPE_1 . METHOD_1 ( s ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_5 ( command ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
[31mExample #20[0m
Src : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( VAR_1 . equals ( ) ) ) ; return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
[31mExample #21[0m
Src : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; }[0m
Trg : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res != null ) . METHOD_4 ( METHOD_5 ( ) ) ; } return null ; }[0m
[31mExample #22[0m
Src : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Trg : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Pred: public static < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , VAR_1 ) . METHOD_9 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new TYPE_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) . METHOD_5 ( VAR_3 , vm . getId ( ) ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( VAR_1 ) ; } ( VAR_4 , STRING_2 , STRING_4 , STRING_4 ) ; }[0m
[31mExample #25[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ! ( METHOD_2 ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new new TYPE_1 ( VAR_2 , 0 , this , VAR_1 , null ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( STRING_1 ) ; METHOD_8 ( VAR_3 ) ; } }[0m
---------------
Class: Remove statement,Add try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; VAR_1 . METHOD_7 ( ) ; server . METHOD_7 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . getId ( ) ) ) ; final int VAR_2 = STRING_1 , ( ( VAR_2 ) ) ; } . METHOD_7 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 . isEmpty ( ) ) ; assertTrue ( STRING_1 , VAR_1 ) ; } }[0m
---------------
Class: Remove statement,Move existing statements in try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( ) ; } METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( diskImage class , new java.lang.String [ ] { VAR_3 . METHOD_5 ( ) ; } finally . METHOD_5 ( ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( diskImage class , new java.lang.String [ ] { VAR_3 } , new TYPE_1 ( ) , null ) ; } ( TYPE_2 VAR_5 ) ; } catch ( VAR_5 ) ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( diskImage class , new java.lang.String [ ] { VAR_3 } . get ( ) ; } finally . METHOD_5 ( ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( true ) ; try { resource . METHOD_6 ( ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
---------------
Class: Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( ) ; } else { ( ( ) . METHOD_2 ( ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) ; } }[0m
Trg : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
Pred: public void METHOD_1 ( final float value ) { long VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == ) || ( VAR_1 == ) ) || ( VAR_1 == ( ) ) ) ; } VAR_2 . METHOD_4 ( value ) ; } }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Pred: public boolean validate METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ( new TYPE_2 [ ) , } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( ) ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Trg : protected boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Pred: protected boolean validate METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) . validate ( METHOD_5 ( ) ) ) && ( validate ( validator . getStatus ( ) , METHOD_3 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Pred: public boolean validate METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_7 ( new TYPE_2 ( ) ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
[31mExample #6[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Trg : protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Pred: protected boolean validate METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
[31mExample #7[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( VAR_3 . length ( ) ) + VAR_1 ) || ( TYPE_1 . ValidationResult ( ) ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( METHOD_2 ( ) . isEmpty ( ) ) { if ( ! ( ) ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ) . getReturnValue ( ( java.util.ArrayList < TYPE_3 > ) ( VAR_1 ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > ( VAR_2 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; pool = VAR_1 . get ( ) ) { TYPE_2 . METHOD_2 ( ( ( ) ) model . getId ( ) ) ; } }[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( ) ; TYPE_2 . METHOD_7 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Pred: public java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) : ( VAR_2 . METHOD_3 ( ) ) ) { list . put ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
[31mExample #2[0m
Src : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
Trg : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable fail ) { METHOD_6 ( fail ) ; return new byte [ 0 ] ; } }[0m
Pred: public byte [ METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_5 ( ) ; } catch ( t ) ; return new byte [ 0 ] ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . view ( ) . view ( ) . ) ; } ( 1 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Trg : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; java.lang.System.out.println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Pred: public static int METHOD_1 ( a , int b , int c ) { int [ ] values = new int [ ] { a , b , c ; } . println ( ( ( STRING_1 + ( ) ) ) + STRING_2 ) ; return a > b : b : b ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , <unk> . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , <unk> . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , VAR_6 . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_3 ) . METHOD_6 ( ) ) ; assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_4 ) . METHOD_3 ( VAR_5 ) ; ; assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( new TYPE_2 ( ) ) ; org.mockito.Mockito.doReturn ( false ) . validate ( ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) ; } return TYPE_5 new TYPE_5 ( VAR_1 , METHOD_3 ( ) ) ; return TYPE_5 ( new TYPE_4 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 ( TYPE_1 , TYPE_1 ) class . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_6 ( cmd . METHOD_7 ( ) . METHOD_7 ( ) . METHOD_8 ( ) . toString ( ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . METHOD_6 ( ) . METHOD_7 ( ( ) ) ) ; }[0m
---------------
Class: Replace if statement with assert statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Trg : public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Pred: public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 ) ; } METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s != null ) ; } return s . METHOD_3 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( value ) ; if ( VAR_2 . get ( value ) ) { VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 2 ) . METHOD_2 ( 2 ) . assertEquals ( 2 ) . assertEquals ( 2 , VAR_1 . METHOD_5 ( STRING_5 ) . METHOD_6 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 m , TYPE_2 , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( == == null ) ; ( ( ( VAR_3 ) != ) ) ; } = ! ( VAR_3 ) ; TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Trg : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( VAR_2 . TAG , ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + STRING_3 ) + VAR_5 . METHOD_2 ( ) ; }[0m
[31mExample #3[0m
Src : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Trg : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . log ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Pred: public void run ( ) { TYPE_1 i = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( project ) ; try { VAR_5 = VAR_2 . METHOD_2 ( ) VAR_4 ; } else { break ; } } catch ( java.io.IOException e ) { } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Trg : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Pred: public boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 , java.lang.String > > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 ( TYPE_1 . METHOD_2 ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
[31mExample #6[0m
Src : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; return true ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , true ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 . TAG , ( STRING_1 , STRING_2 ) + VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( ) , STRING_1 ) ; else { return ( TYPE_1 . METHOD_4 ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) ) ) ) ; }[0m
[31mExample #10[0m
Src : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getStoragePoolId ( ) . getStoragePoolId ( ) , TYPE_1 . getParameters ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . <unk> class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . any ( ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . VM ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( ) , true ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) , new TYPE_1 ( ) , new TYPE_4 ( ) , TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( TYPE_2 > ) ; VAR_1 . METHOD_3 ( TYPE_2 entity ) ; } return METHOD_6 ( ) ; } , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #15[0m
Src : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Trg : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Pred: public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( VAR_4 ) , VAR_5 ) ; return true ; } catch ( java.lang.Exception e ) { } return false ; }[0m
[31mExample #16[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Pred: public java.util.List < TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > 0 ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; METHOD_5 ( true , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
[31mExample #19[0m
Src : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Trg : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Pred: public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
[31mExample #20[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #21[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : log . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . get ( STRING_1 , TYPE_2 . METHOD_5 ( ) ) ; return METHOD_6 ( ) . METHOD_8 ( false ) ; return super . METHOD_1 ( ) ; }[0m
[31mExample #22[0m
Src : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_7 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_8 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_6 ( ) . getName ( ) . getName ( ) , ) ; METHOD_8 METHOD_8 ( ) ; } }[0m
[31mExample #24[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . getStoragePoolId ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
[31mExample #25[0m
Src : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . getStatus ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Pred: public boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; } = ( TYPE_1 . METHOD_2 ( ) . getStatus ( ) ) != ( VAR_2 ) ; returnValue = false ; } return returnValue ; }[0m
[31mExample #26[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; vds . METHOD_5 ( ( vds . getId ( ) ) ) ; } TYPE_1 . METHOD_9 ( vds ) ; }[0m
[31mExample #27[0m
Src : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
Trg : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . getName ( ) ) ) ) ) { return network ; } } return null ; }[0m
Pred: public TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) && ( ( VAR_1 . getId ( ) ) ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) { return network ; } return null ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) , null , new ( ( ) ) , TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
---------------
================
Duration: 0:02:05.928459

Start conducting one shot learning experiment for Defects4J...
Top-1 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-5 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-10 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-50 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0

Top-1 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-5 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-10 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-50 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Pred: public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case ( ( VAR_2 != null ) ? 1 : - 1 : VAR_1 : case ) { return return VAR_1 ; VAR_2 ; } return ( ( STRING_1 + VAR_1 + STRING_2 ) ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Pred: public boolean ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; if ( ! ( VAR_1 != null ) ) { this . VAR_2 = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( d ) ; }[0m
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
[31mExample #1[0m
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Pred: void add ( ( VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } c c = VAR_1 . METHOD_2 ( ) ; c = METHOD_3 ( ) ) { android.util.Log.w ( STRING_1 ) ; i ( STRING_1 ) ; } addCanDoActionMessage ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return ( VAR_1 . METHOD_2 ( VAR_2 ) , VAR_2 ( VAR_2 , VAR_3 ) ) ; return ( VAR_1 != null ) ; } catch ( VAR_1 ) ; }[0m
---------------
Class: ['condBlockRetAdd']
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( == null == null ) || ( VAR_1 == null ) == null == null == null ) { return VAR_1 == null ; } return METHOD_2 ( VAR_1 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . <unk> ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public TYPE_1 float ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( ( VAR_1 == null ) ) { return ; } return { return VAR_1 . METHOD_1 ( ) . METHOD_1 ( ) ; } }[0m
[31mExample #2[0m
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) != null ; TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) == null ; if ( VAR_1 . METHOD_2 ( ) ) : VAR_1 : TYPE_2 . METHOD_3 ( VAR_2 ) ; ) { VAR_4 = VAR_3 ; } } ( ( VAR_2 , VAR_4 ) ; } } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Pred: public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } if ( VAR_1 == null ) { for ( TYPE_2 VAR_2 . METHOD_3 ( ) ) { break ; } else { return false ; } } return true ; }[0m
---------------
Class: ['notClassified']
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . <unk> ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Pred: public com.google.gerrit.reviewdb.client.Change [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ( TYPE_1 . METHOD_2 ( ) , VAR_1 ) { return ++ ; return METHOD_1 ( ) ; } return out ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Pred: public java.lang.Object double METHOD_1 ( int ] VAR_1 , int [ ] VAR_2 ) { int [ 0 ; for ( int i = 0 ; i < < VAR_1 ) ] { final int VAR_3 = VAR_3 , VAR_3 ; } return TYPE_1 . METHOD_2 ( d ) ; }[0m
---------------
Class: ['singleLine']
Golden example (False):
[31mExample #1[0m
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Pred: static float METHOD_1 ( java.io.File VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = VAR_1 . getName ( ) ; try { METHOD_1 ( VAR_4 ) ; } return ( error ) ; }[0m
[31mExample #2[0m
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Pred: private void METHOD_1 ( double VAR_1 , final int VAR_2 ) throws TYPE_1 , int VAR_4 = VAR_2 ; return TYPE_5 ( VAR_1 + 1 ) ; return INT_1 VAR_8 ; }[0m
---------------
Class: ['wrapsIf']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
Pred: public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 ) { VAR_1 . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } else { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 = ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }[0m
Pred: public static boolean equals ( TYPE_1 VAR_1 TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null == VAR_2 == null ) { if ( VAR_1 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; } }[0m
---------------
Class: ['wrapsIfElse']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_1 ( VAR_1 ) != null ) { METHOD_1 ( ( TYPE_2 < ? > ) ) VAR_1 ; } return METHOD_1 ( VAR_1 , 0 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 . METHOD_1 ( account != null ) { TYPE_3 VAR_1 = java.util.Collections . METHOD_1 ( null ) { TYPE_3 VAR_2 = ( ) ; } return ( TYPE_1 VAR_2 ) VAR_2 ; return VAR_3 . METHOD_1 ( field ) ; } return VAR_3 ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( final int x ) { if ( x != null ) { return result ; } return METHOD_2 ( x ) ; } return false ; } return x x ; }[0m
---------------
================
Duration: 0:00:11.496566

Starting long experiments
Start conducting accuracy calculation experiment for Test dataset all...
Top-1 accuracy: 652 / 1077 = 0.6053853296193129
Top-3 accuracy: 745 / 1077 = 0.691736304549675
Top-5 accuracy: 774 / 1077 = 0.7186629526462396
Top-10 accuracy: 798 / 1077 = 0.7409470752089137
Top-50 accuracy: 855 / 1077 = 0.7938718662952646
Duration: 0:06:03.421500

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset train 300...
Top-1 accuracy: 109 / 300 = 0.36333333333333334
Top-3 accuracy: 124 / 300 = 0.41333333333333333
Top-5 accuracy: 129 / 300 = 0.43
Top-10 accuracy: 136 / 300 = 0.4533333333333333
Top-50 accuracy: 148 / 300 = 0.49333333333333335
Duration: 0:01:42.895612

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset val 300...
Top-1 accuracy: 102 / 300 = 0.34
Top-3 accuracy: 115 / 300 = 0.38333333333333336
Top-5 accuracy: 119 / 300 = 0.39666666666666667
Top-10 accuracy: 125 / 300 = 0.4166666666666667
Top-50 accuracy: 138 / 300 = 0.46
Duration: 0:01:43.430669

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test 300...
Top-1 accuracy: 117 / 300 = 0.39
Top-3 accuracy: 132 / 300 = 0.44
Top-5 accuracy: 140 / 300 = 0.4666666666666667
Top-10 accuracy: 144 / 300 = 0.48
Top-50 accuracy: 153 / 300 = 0.51
Duration: 0:01:43.793224

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset train 300...
Top-1 accuracy: 1 / 300 = 0.0033333333333333335
Top-3 accuracy: 2 / 300 = 0.006666666666666667
Top-5 accuracy: 2 / 300 = 0.006666666666666667
Top-10 accuracy: 2 / 300 = 0.006666666666666667
Top-50 accuracy: 3 / 300 = 0.01
Duration: 0:01:24.071665

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset val 300...
Top-1 accuracy: 1 / 300 = 0.0033333333333333335
Top-3 accuracy: 4 / 300 = 0.013333333333333334
Top-5 accuracy: 4 / 300 = 0.013333333333333334
Top-10 accuracy: 6 / 300 = 0.02
Top-50 accuracy: 8 / 300 = 0.02666666666666667
Duration: 0:01:24.038442

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test 300...
Top-1 accuracy: 3 / 300 = 0.01
Top-3 accuracy: 3 / 300 = 0.01
Top-5 accuracy: 3 / 300 = 0.01
Top-10 accuracy: 4 / 300 = 0.013333333333333334
Top-50 accuracy: 5 / 300 = 0.016666666666666666
Duration: 0:01:24.455360

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset train 300...
Top-1 accuracy: 275 / 300 = 0.9166666666666666
Top-3 accuracy: 284 / 300 = 0.9466666666666667
Top-5 accuracy: 289 / 300 = 0.9633333333333334
Top-10 accuracy: 293 / 300 = 0.9766666666666667
Top-50 accuracy: 296 / 300 = 0.9866666666666667
Duration: 0:01:43.873623

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset val 300...
Top-1 accuracy: 193 / 300 = 0.6433333333333333
Top-3 accuracy: 221 / 300 = 0.7366666666666667
Top-5 accuracy: 228 / 300 = 0.76
Top-10 accuracy: 234 / 300 = 0.78
Top-50 accuracy: 247 / 300 = 0.8233333333333334
Duration: 0:01:45.679272

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test 300...
Top-1 accuracy: 181 / 300 = 0.6033333333333334
Top-3 accuracy: 203 / 300 = 0.6766666666666666
Top-5 accuracy: 211 / 300 = 0.7033333333333334
Top-10 accuracy: 221 / 300 = 0.7366666666666667
Top-50 accuracy: 237 / 300 = 0.79
Duration: 0:01:43.616003

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset train 300...
Top-1 accuracy: 15 / 300 = 0.05
Top-3 accuracy: 17 / 300 = 0.056666666666666664
Top-5 accuracy: 19 / 300 = 0.06333333333333334
Top-10 accuracy: 20 / 300 = 0.06666666666666667
Top-50 accuracy: 24 / 300 = 0.08
Duration: 0:01:24.318687

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset val 300...
Top-1 accuracy: 3 / 300 = 0.01
Top-3 accuracy: 4 / 300 = 0.013333333333333334
Top-5 accuracy: 7 / 300 = 0.023333333333333334
Top-10 accuracy: 7 / 300 = 0.023333333333333334
Top-50 accuracy: 8 / 300 = 0.02666666666666667
Duration: 0:01:22.555124

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test 300...
Top-1 accuracy: 9 / 300 = 0.03
Top-3 accuracy: 12 / 300 = 0.04
Top-5 accuracy: 13 / 300 = 0.043333333333333335
Top-10 accuracy: 16 / 300 = 0.05333333333333334
Top-50 accuracy: 17 / 300 = 0.056666666666666664
Duration: 0:01:23.898938

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test...
Top-1 accuracy: 2031 / 5835 = 0.3480719794344473
Top-3 accuracy: 2365 / 5835 = 0.40531276778063413
Top-5 accuracy: 2487 / 5835 = 0.42622107969151674
Top-10 accuracy: 2651 / 5835 = 0.4543273350471294
Top-50 accuracy: 2877 / 5835 = 0.4930591259640103
Duration: 0:32:54.023798

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test...
Top-1 accuracy: 43 / 6545 = 0.006569900687547746
Top-3 accuracy: 64 / 6545 = 0.009778456837280366
Top-5 accuracy: 75 / 6545 = 0.01145912910618793
Top-10 accuracy: 91 / 6545 = 0.013903743315508022
Top-50 accuracy: 121 / 6545 = 0.018487394957983194
Duration: 0:30:06.514438

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test...
Top-1 accuracy: 652 / 1077 = 0.6053853296193129
Top-3 accuracy: 745 / 1077 = 0.691736304549675
Top-5 accuracy: 774 / 1077 = 0.7186629526462396
Top-10 accuracy: 798 / 1077 = 0.7409470752089137
Top-50 accuracy: 855 / 1077 = 0.7938718662952646
Duration: 0:06:00.230559

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test...
Top-1 accuracy: 30 / 1098 = 0.0273224043715847
Top-3 accuracy: 40 / 1098 = 0.03642987249544627
Top-5 accuracy: 43 / 1098 = 0.039162112932604735
Top-10 accuracy: 54 / 1098 = 0.04918032786885246
Top-50 accuracy: 59 / 1098 = 0.05373406193078324
Duration: 0:04:59.476659

