
====STARTING TRAINING====
{'ADDITION_TOKEN': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 50,
 'DATASET_ROOT': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': '—É–¥–∞–ª–µ–Ω–∏–µ',
 'DEVICE': device(type='cuda', index=0),
 'DIVERSITY_STRENGTH': None,
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 25,
 'EDIT_REPRESENTATION_SIZE': 512,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LEAVE_ONLY_CHANGED': False,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_GROUPS': 1,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '../../../embeddings-for-code-diffs-data/experiment_28/',
 'PADDING_TOKEN': '–ø–∞–¥–¥–∏–Ω–≥',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': '–∑–∞–º–µ–Ω–∞',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEACHER_FORCING_RATIO': 0.9,
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TOP_K': [1, 3, 5, 10, 50],
 'TSNE_BATCH_SIZE': 1024,
 'TUFANO_BUG_FIXES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'TUFANO_BUG_FIXES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/50_100',
 'TUFANO_CODE_CHANGES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'TUFANO_CODE_CHANGES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'TUFANO_LABELED_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'TUFANO_LABELED_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/50_100',
 'UNCHANGED_TOKEN': '—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'USE_EDIT_REPRESENTATION': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∑–∞–º–µ–Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
diff_prev: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_updated: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; } 

Most common words:
 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ     606749
         (     370366
         )     370366
         .     174374
         ;     158794
         ,     101876
         {      80764
         }      80764
     VAR_1      79696
     VAR_2      54916 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
05 (
06 )
07 .
08 ;
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 43
—É–¥–∞–ª–µ–Ω–∏–µ 41184 17
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 37
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 606749 4
–ø–∞–¥–¥–∏–Ω–≥ 54790 14
Number of words (types): 759
Epoch 0 / 1000
Epoch Step: 5 / 138 Loss: 391.5353698730469 Tokens per Sec: 11552.801534510387
Epoch Step: 10 / 138 Loss: 471.054443359375 Tokens per Sec: 14664.769738837618
Epoch Step: 15 / 138 Loss: 579.82568359375 Tokens per Sec: 15525.052313775355
Epoch Step: 20 / 138 Loss: 422.656005859375 Tokens per Sec: 15616.303421966464
Epoch Step: 25 / 138 Loss: 342.6695251464844 Tokens per Sec: 14960.35125360509
Epoch Step: 30 / 138 Loss: 334.8844909667969 Tokens per Sec: 16246.430994781926
Epoch Step: 35 / 138 Loss: 281.2294006347656 Tokens per Sec: 17028.442231581867
Epoch Step: 40 / 138 Loss: 331.9443664550781 Tokens per Sec: 17252.11398496331
Epoch Step: 45 / 138 Loss: 386.26361083984375 Tokens per Sec: 15976.133534288549
Epoch Step: 50 / 138 Loss: 262.2945556640625 Tokens per Sec: 16530.71732191503
Epoch Step: 55 / 138 Loss: 341.77276611328125 Tokens per Sec: 15862.937677205893
Epoch Step: 60 / 138 Loss: 225.21510314941406 Tokens per Sec: 15981.123268812897
Epoch Step: 65 / 138 Loss: 332.0561218261719 Tokens per Sec: 16408.94968845326
Epoch Step: 70 / 138 Loss: 247.84840393066406 Tokens per Sec: 15068.584587719006
Epoch Step: 75 / 138 Loss: 230.6875457763672 Tokens per Sec: 15257.080866706629
Epoch Step: 80 / 138 Loss: 225.76747131347656 Tokens per Sec: 16231.717573083251
Epoch Step: 85 / 138 Loss: 305.531982421875 Tokens per Sec: 15824.334916398207
Epoch Step: 90 / 138 Loss: 245.2530975341797 Tokens per Sec: 15168.261618208577
Epoch Step: 95 / 138 Loss: 233.75941467285156 Tokens per Sec: 15809.622542423622
Epoch Step: 100 / 138 Loss: 249.2564697265625 Tokens per Sec: 16241.598293766312
Epoch Step: 105 / 138 Loss: 224.57485961914062 Tokens per Sec: 15665.479481297312
Epoch Step: 110 / 138 Loss: 251.44200134277344 Tokens per Sec: 14925.729307351992
Epoch Step: 115 / 138 Loss: 298.076416015625 Tokens per Sec: 14882.932711647412
Epoch Step: 120 / 138 Loss: 387.1168518066406 Tokens per Sec: 14428.975609290475
Epoch Step: 125 / 138 Loss: 309.33282470703125 Tokens per Sec: 16174.390797381666
Epoch Step: 130 / 138 Loss: 210.58700561523438 Tokens per Sec: 16266.940877586061
Epoch Step: 135 / 138 Loss: 192.5872802734375 Tokens per Sec: 16479.31091308969
Epoch ended with duration 0:00:41.014989
Train perplexity: 68.80237685047486
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) ; } ( ) ; } ( ) ; } ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( ) ; } ( )[0m
Epoch ended with duration 0:00:01.762592
Validation perplexity: 27.486101102824826
Model saved best_on_validation!
Model saved checkpoint!
Epoch 1 / 1000
Epoch Step: 5 / 138 Loss: 190.2850799560547 Tokens per Sec: 15796.669491135253
Epoch Step: 10 / 138 Loss: 229.55422973632812 Tokens per Sec: 17564.55165702662
Epoch Step: 15 / 138 Loss: 256.2242736816406 Tokens per Sec: 15062.176967617414
Epoch Step: 20 / 138 Loss: 261.6290588378906 Tokens per Sec: 15665.941162849336
Epoch Step: 25 / 138 Loss: 240.30685424804688 Tokens per Sec: 16299.946224735972
Epoch Step: 30 / 138 Loss: 302.5284729003906 Tokens per Sec: 16530.140652513863
Epoch Step: 35 / 138 Loss: 174.1603546142578 Tokens per Sec: 15003.90242301898
Epoch Step: 40 / 138 Loss: 170.3812255859375 Tokens per Sec: 16593.088049226444
Epoch Step: 45 / 138 Loss: 253.76243591308594 Tokens per Sec: 17034.899741874484
Epoch Step: 50 / 138 Loss: 190.3961181640625 Tokens per Sec: 15002.025725484224
Epoch Step: 55 / 138 Loss: 210.96900939941406 Tokens per Sec: 15930.009294598269
Epoch Step: 60 / 138 Loss: 213.9403076171875 Tokens per Sec: 15744.571098504632
Epoch Step: 65 / 138 Loss: 248.39772033691406 Tokens per Sec: 16698.092729834018
Epoch Step: 70 / 138 Loss: 206.3087615966797 Tokens per Sec: 15184.09127084397
Epoch Step: 75 / 138 Loss: 242.72174072265625 Tokens per Sec: 15046.690287668393
Epoch Step: 80 / 138 Loss: 285.951904296875 Tokens per Sec: 15158.700638194892
Epoch Step: 85 / 138 Loss: 308.3214416503906 Tokens per Sec: 16335.973748529812
Epoch Step: 90 / 138 Loss: 277.01544189453125 Tokens per Sec: 17503.579787830786
Epoch Step: 95 / 138 Loss: 285.88494873046875 Tokens per Sec: 15915.365905083596
Epoch Step: 100 / 138 Loss: 228.42112731933594 Tokens per Sec: 15178.512220678873
Epoch Step: 105 / 138 Loss: 227.88331604003906 Tokens per Sec: 14127.514838588952
Epoch Step: 110 / 138 Loss: 202.1374053955078 Tokens per Sec: 14745.087969359869
Epoch Step: 115 / 138 Loss: 368.2642822265625 Tokens per Sec: 15747.290449838674
Epoch Step: 120 / 138 Loss: 260.2491455078125 Tokens per Sec: 14668.465081352402
Epoch Step: 125 / 138 Loss: 255.96083068847656 Tokens per Sec: 15162.346327665375
Epoch Step: 130 / 138 Loss: 199.00637817382812 Tokens per Sec: 15145.836528104874
Epoch Step: 135 / 138 Loss: 206.61358642578125 Tokens per Sec: 15082.576184689215
Epoch ended with duration 0:00:40.782264
Train perplexity: 25.263019968401746
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 , VAR_1 , VAR_1 ) { VAR_1 ) { VAR_1 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 ) { VAR_1 ) { VAR_1 ) { VAR_1 ) { VAR_1 ) ; }[0m
Epoch ended with duration 0:00:01.779460
Validation perplexity: 22.18303512606159
Model saved best_on_validation!
Epoch 2 / 1000
Epoch Step: 5 / 138 Loss: 194.68060302734375 Tokens per Sec: 15785.22680523716
Epoch Step: 10 / 138 Loss: 237.11094665527344 Tokens per Sec: 15034.593635659674
Epoch Step: 15 / 138 Loss: 167.903564453125 Tokens per Sec: 15016.853938326676
Epoch Step: 20 / 138 Loss: 204.25662231445312 Tokens per Sec: 15310.729038611278
Epoch Step: 25 / 138 Loss: 162.77767944335938 Tokens per Sec: 15421.401076008664
Epoch Step: 30 / 138 Loss: 147.8258514404297 Tokens per Sec: 15818.874832452404
Epoch Step: 35 / 138 Loss: 217.96116638183594 Tokens per Sec: 15412.716809488235
Epoch Step: 40 / 138 Loss: 266.2973937988281 Tokens per Sec: 15942.34931346014
Epoch Step: 45 / 138 Loss: 194.16531372070312 Tokens per Sec: 15707.407564849724
Epoch Step: 50 / 138 Loss: 187.60174560546875 Tokens per Sec: 16827.44908889964
Epoch Step: 55 / 138 Loss: 188.91307067871094 Tokens per Sec: 18148.149806998397
Epoch Step: 60 / 138 Loss: 170.5461883544922 Tokens per Sec: 17174.960157896658
Epoch Step: 65 / 138 Loss: 235.1600799560547 Tokens per Sec: 17657.856809701585
Epoch Step: 70 / 138 Loss: 227.7906036376953 Tokens per Sec: 16339.23166678975
Epoch Step: 75 / 138 Loss: 186.0620574951172 Tokens per Sec: 15147.5398471609
Epoch Step: 80 / 138 Loss: 165.55462646484375 Tokens per Sec: 16016.597395997485
Epoch Step: 85 / 138 Loss: 237.82177734375 Tokens per Sec: 16873.915068770893
Epoch Step: 90 / 138 Loss: 208.8618927001953 Tokens per Sec: 17432.395568548964
Epoch Step: 95 / 138 Loss: 221.06320190429688 Tokens per Sec: 14900.714751759919
Epoch Step: 100 / 138 Loss: 149.08006286621094 Tokens per Sec: 16084.624407343183
Epoch Step: 105 / 138 Loss: 219.3607635498047 Tokens per Sec: 14719.363644747522
Epoch Step: 110 / 138 Loss: 258.6848449707031 Tokens per Sec: 13544.468407891545
Epoch Step: 115 / 138 Loss: 211.5613555908203 Tokens per Sec: 15172.696779215725
Epoch Step: 120 / 138 Loss: 199.0232391357422 Tokens per Sec: 14999.506236336994
Epoch Step: 125 / 138 Loss: 245.6063690185547 Tokens per Sec: 15078.655316956254
Epoch Step: 130 / 138 Loss: 238.1100311279297 Tokens per Sec: 15824.240202693794
Epoch Step: 135 / 138 Loss: 183.3593292236328 Tokens per Sec: 15508.066873239604
Epoch ended with duration 0:00:40.509141
Train perplexity: 18.56588952311293
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 ,[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 , VAR_1 ) { if ( ) { if ( ) { if ( ) { if ( ) ; }[0m
Epoch ended with duration 0:00:01.706225
Validation perplexity: 15.827108839668133
Model saved best_on_validation!
Epoch 3 / 1000
Epoch Step: 5 / 138 Loss: 209.4669647216797 Tokens per Sec: 18567.370429254992
Epoch Step: 10 / 138 Loss: 170.9690704345703 Tokens per Sec: 17266.444510845107
Epoch Step: 15 / 138 Loss: 241.06935119628906 Tokens per Sec: 16806.80759963496
Epoch Step: 20 / 138 Loss: 185.40611267089844 Tokens per Sec: 15645.20074958275
Epoch Step: 25 / 138 Loss: 214.4790802001953 Tokens per Sec: 16309.316565121986
Epoch Step: 30 / 138 Loss: 179.52464294433594 Tokens per Sec: 15679.663285182125
Epoch Step: 35 / 138 Loss: 141.8714599609375 Tokens per Sec: 16061.464662019343
Epoch Step: 40 / 138 Loss: 207.71005249023438 Tokens per Sec: 15504.319901970795
Epoch Step: 45 / 138 Loss: 136.76217651367188 Tokens per Sec: 14765.376712803307
Epoch Step: 50 / 138 Loss: 241.98651123046875 Tokens per Sec: 16267.924068186492
Epoch Step: 55 / 138 Loss: 165.9156951904297 Tokens per Sec: 15865.798330578486
Epoch Step: 60 / 138 Loss: 237.4110107421875 Tokens per Sec: 17251.918298293767
Epoch Step: 65 / 138 Loss: 303.92071533203125 Tokens per Sec: 17192.923957190265
Epoch Step: 70 / 138 Loss: 299.4381408691406 Tokens per Sec: 14887.428180137811
Epoch Step: 75 / 138 Loss: 171.20709228515625 Tokens per Sec: 14863.886178842817
Epoch Step: 80 / 138 Loss: 234.85133361816406 Tokens per Sec: 15521.619673560594
Epoch Step: 85 / 138 Loss: 364.1251220703125 Tokens per Sec: 16021.336812397387
Epoch Step: 90 / 138 Loss: 192.16244506835938 Tokens per Sec: 15393.276368115934
Epoch Step: 95 / 138 Loss: 261.71734619140625 Tokens per Sec: 16508.366910288754
Epoch Step: 100 / 138 Loss: 194.6992950439453 Tokens per Sec: 16023.44905689175
Epoch Step: 105 / 138 Loss: 203.9921875 Tokens per Sec: 15010.681222045167
Epoch Step: 110 / 138 Loss: 134.5159912109375 Tokens per Sec: 14950.534466279798
Epoch Step: 115 / 138 Loss: 173.75372314453125 Tokens per Sec: 16296.125221515022
Epoch Step: 120 / 138 Loss: 143.45103454589844 Tokens per Sec: 16265.02552955204
Epoch Step: 125 / 138 Loss: 216.57550048828125 Tokens per Sec: 15256.347717560991
Epoch Step: 130 / 138 Loss: 143.4680633544922 Tokens per Sec: 14591.75968469434
Epoch Step: 135 / 138 Loss: 154.12461853027344 Tokens per Sec: 15858.27467775958
Epoch ended with duration 0:00:40.225052
Train perplexity: 14.89877105083011
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 > VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 , int , java.lang.String , java.lang.String , VAR_1 , VAR_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 ,[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) ; }[0m
Epoch ended with duration 0:00:01.788380
Validation perplexity: 16.33052652328715
Epoch 4 / 1000
Epoch Step: 5 / 138 Loss: 184.20973205566406 Tokens per Sec: 15256.225256894293
Epoch Step: 10 / 138 Loss: 136.34481811523438 Tokens per Sec: 16536.51137495611
Epoch Step: 15 / 138 Loss: 201.72756958007812 Tokens per Sec: 14715.646631295138
Epoch Step: 20 / 138 Loss: 204.1325225830078 Tokens per Sec: 16122.828192498922
Epoch Step: 25 / 138 Loss: 145.23590087890625 Tokens per Sec: 15959.29138547301
Epoch Step: 30 / 138 Loss: 130.24261474609375 Tokens per Sec: 16728.579631107008
Epoch Step: 35 / 138 Loss: 157.09970092773438 Tokens per Sec: 16149.87036430827
Epoch Step: 40 / 138 Loss: 208.53390502929688 Tokens per Sec: 15983.30151657137
Epoch Step: 45 / 138 Loss: 171.92132568359375 Tokens per Sec: 15323.239206751632
Epoch Step: 50 / 138 Loss: 172.05783081054688 Tokens per Sec: 17573.907343965107
Epoch Step: 55 / 138 Loss: 199.50418090820312 Tokens per Sec: 17156.32327689728
Epoch Step: 60 / 138 Loss: 230.90797424316406 Tokens per Sec: 16321.353542434443
Epoch Step: 65 / 138 Loss: 154.06959533691406 Tokens per Sec: 15159.010411171794
Epoch Step: 70 / 138 Loss: 269.859130859375 Tokens per Sec: 14960.123660285855
Epoch Step: 75 / 138 Loss: 229.47520446777344 Tokens per Sec: 18405.57347897508
Epoch Step: 80 / 138 Loss: 224.69461059570312 Tokens per Sec: 17800.595985353302
Epoch Step: 85 / 138 Loss: 172.91952514648438 Tokens per Sec: 15867.836601758872
Epoch Step: 90 / 138 Loss: 203.62310791015625 Tokens per Sec: 15897.316968277682
Epoch Step: 95 / 138 Loss: 206.7535858154297 Tokens per Sec: 15817.587962816495
Epoch Step: 100 / 138 Loss: 352.3926086425781 Tokens per Sec: 15504.541555127795
Epoch Step: 105 / 138 Loss: 172.25030517578125 Tokens per Sec: 15909.392018761933
Epoch Step: 110 / 138 Loss: 215.64329528808594 Tokens per Sec: 14376.093617615252
Epoch Step: 115 / 138 Loss: 392.0320129394531 Tokens per Sec: 15169.919246334699
Epoch Step: 120 / 138 Loss: 224.94927978515625 Tokens per Sec: 14882.99969398168
Epoch Step: 125 / 138 Loss: 236.6812286376953 Tokens per Sec: 13607.278032345557
Epoch Step: 130 / 138 Loss: 347.64166259765625 Tokens per Sec: 14803.96956999977
Epoch Step: 135 / 138 Loss: 167.41912841796875 Tokens per Sec: 15536.491656260869
Epoch ended with duration 0:00:40.286386
Train perplexity: 14.177987725923893
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 = new TYPE_1 > > > > > > > > > VAR_1 = new TYPE_1 > VAR_1 = new TYPE_1 . METHOD_2 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , java.lang.String , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ,[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) ; } ( ) ; } ( ) ; } } } } } } } } } } } } } } } } } } } } } } } } } } } }[0m
Epoch ended with duration 0:00:01.751490
Validation perplexity: 10.940201881424379
Model saved best_on_validation!
Epoch 5 / 1000
Epoch Step: 5 / 138 Loss: 223.93215942382812 Tokens per Sec: 13426.247337855548
Epoch Step: 10 / 138 Loss: 158.5778045654297 Tokens per Sec: 15977.298559904919
Epoch Step: 15 / 138 Loss: 189.53353881835938 Tokens per Sec: 17552.86472048369
Epoch Step: 20 / 138 Loss: 199.46958923339844 Tokens per Sec: 15797.411382762562
Epoch Step: 25 / 138 Loss: 218.2802734375 Tokens per Sec: 16561.66537572221
Epoch Step: 30 / 138 Loss: 179.08016967773438 Tokens per Sec: 17234.133547961108
Epoch Step: 35 / 138 Loss: 199.21437072753906 Tokens per Sec: 18061.962674589256
Epoch Step: 40 / 138 Loss: 141.97865295410156 Tokens per Sec: 16549.810155463925
Epoch Step: 45 / 138 Loss: 203.29583740234375 Tokens per Sec: 16392.033925886808
Epoch Step: 50 / 138 Loss: 134.8624725341797 Tokens per Sec: 13913.464444220986
Epoch Step: 55 / 138 Loss: 204.9176025390625 Tokens per Sec: 14561.424374834465
Epoch Step: 60 / 138 Loss: 128.36651611328125 Tokens per Sec: 15999.289934875143
Epoch Step: 65 / 138 Loss: 236.8932647705078 Tokens per Sec: 14862.229809297549
Epoch Step: 70 / 138 Loss: 164.02105712890625 Tokens per Sec: 17103.366110438135
Epoch Step: 75 / 138 Loss: 150.83595275878906 Tokens per Sec: 16355.114776739438
Epoch Step: 80 / 138 Loss: 122.78304290771484 Tokens per Sec: 16342.792076744914
Epoch Step: 85 / 138 Loss: 147.06185913085938 Tokens per Sec: 15921.651748958944
Epoch Step: 90 / 138 Loss: 187.40206909179688 Tokens per Sec: 16904.12413233472
Epoch Step: 95 / 138 Loss: 166.2261505126953 Tokens per Sec: 16627.342429617613
Epoch Step: 100 / 138 Loss: 164.26051330566406 Tokens per Sec: 15925.065238883239
Epoch Step: 105 / 138 Loss: 219.03720092773438 Tokens per Sec: 13788.392842736905
Epoch Step: 110 / 138 Loss: 121.06877136230469 Tokens per Sec: 15146.09110019595
Epoch Step: 115 / 138 Loss: 127.25032043457031 Tokens per Sec: 15245.293363721818
Epoch Step: 120 / 138 Loss: 165.61106872558594 Tokens per Sec: 15617.273955220722
Epoch Step: 125 / 138 Loss: 126.53832244873047 Tokens per Sec: 15076.313475442865
Epoch Step: 130 / 138 Loss: 135.5122833251953 Tokens per Sec: 14931.463946407024
Epoch Step: 135 / 138 Loss: 139.4607696533203 Tokens per Sec: 17055.210261072672
Epoch ended with duration 0:00:40.183633
Train perplexity: 12.657694171292695
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 , java.lang.String > > > > > > > > > > > > > > > > > > > ) ; } < > ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( java.lang.String , java.lang.String , int , int , int VAR_1 , java.lang.String , VAR_1 , VAR_2 , VAR_2 , VAR_2 ) { if ( ) { if ( ) ; } ( ) ; } ( ) ; } } } } } } } } } } } } } } } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) ; if ( ) ; } ( ) ; } ( ) ; } ( ) ; }[0m
Epoch ended with duration 0:00:01.747169
Validation perplexity: 12.465920292160867
Model saved checkpoint!
Epoch 6 / 1000
Epoch Step: 5 / 138 Loss: 151.85638427734375 Tokens per Sec: 16217.959326207167
Epoch Step: 10 / 138 Loss: 218.6062774658203 Tokens per Sec: 16623.93747372288
Epoch Step: 15 / 138 Loss: 139.31396484375 Tokens per Sec: 15294.534163126855
Epoch Step: 20 / 138 Loss: 170.1248321533203 Tokens per Sec: 16734.783285151323
Epoch Step: 25 / 138 Loss: 175.60557556152344 Tokens per Sec: 15325.569888422191
Epoch Step: 30 / 138 Loss: 123.81902313232422 Tokens per Sec: 16805.911635518045
Epoch Step: 35 / 138 Loss: 155.14573669433594 Tokens per Sec: 15569.849524476775
Epoch Step: 40 / 138 Loss: 143.047119140625 Tokens per Sec: 17034.48364571
Epoch Step: 45 / 138 Loss: 229.791748046875 Tokens per Sec: 15005.97697719583
Epoch Step: 50 / 138 Loss: 145.30511474609375 Tokens per Sec: 15964.939715946355
Epoch Step: 55 / 138 Loss: 177.2308807373047 Tokens per Sec: 17480.09311292265
Epoch Step: 60 / 138 Loss: 162.70144653320312 Tokens per Sec: 16214.920346131747
Epoch Step: 65 / 138 Loss: 148.65870666503906 Tokens per Sec: 15087.172457725712
Epoch Step: 70 / 138 Loss: 179.0615997314453 Tokens per Sec: 16309.137023706808
Epoch Step: 75 / 138 Loss: 184.26312255859375 Tokens per Sec: 15851.976764732033
Epoch Step: 80 / 138 Loss: 139.73171997070312 Tokens per Sec: 15465.398848793888
Epoch Step: 85 / 138 Loss: 206.32723999023438 Tokens per Sec: 17212.07150931864
Epoch Step: 90 / 138 Loss: 283.3360595703125 Tokens per Sec: 15307.052774157191
Epoch Step: 95 / 138 Loss: 143.49526977539062 Tokens per Sec: 17112.069222965445
Epoch Step: 100 / 138 Loss: 144.10693359375 Tokens per Sec: 16065.459377971689
Epoch Step: 105 / 138 Loss: 193.9298553466797 Tokens per Sec: 15221.358436081018
Epoch Step: 110 / 138 Loss: 180.39883422851562 Tokens per Sec: 14847.285340434117
Epoch Step: 115 / 138 Loss: 154.85702514648438 Tokens per Sec: 13532.88513116917
Epoch Step: 120 / 138 Loss: 141.6251220703125 Tokens per Sec: 15490.888578414035
Epoch Step: 125 / 138 Loss: 137.13990783691406 Tokens per Sec: 14770.872475629805
Epoch Step: 130 / 138 Loss: 161.44650268554688 Tokens per Sec: 15223.541365722507
Epoch Step: 135 / 138 Loss: 114.23921203613281 Tokens per Sec: 15554.556570571152
Epoch ended with duration 0:00:40.379044
Train perplexity: 12.110697352557356
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String > METHOD_1 ( ) { TYPE_1 > VAR_1 , java.lang.String > > > > > > > > > > > > > > > > > > > > > > > > > > ) ; for ( ) ; } < > ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , int VAR_1 , java.lang.String VAR_1 , VAR_2 , VAR_2 , VAR_2 ) { if ( VAR_2 ) ; if ( VAR_3 . METHOD_2 ( ) ; } } } } } } } } } } } } } } } } } } } } } } } } } } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ) { if ( ) { if ( ( ) { if ( ) { if ( ) ; if ( ( ) ; } ( ) ; } ( ( ) ; }[0m
Epoch ended with duration 0:00:01.729134
Validation perplexity: 9.606355979013001
Model saved best_on_validation!
Epoch 7 / 1000
Epoch Step: 5 / 138 Loss: 161.5083465576172 Tokens per Sec: 15747.535313777706
Epoch Step: 10 / 138 Loss: 142.40097045898438 Tokens per Sec: 15626.378848425933
Epoch Step: 15 / 138 Loss: 183.25926208496094 Tokens per Sec: 14937.640314058925
Epoch Step: 20 / 138 Loss: 146.81939697265625 Tokens per Sec: 17629.274579501856
Epoch Step: 25 / 138 Loss: 145.9078826904297 Tokens per Sec: 14817.854385388911
Epoch Step: 30 / 138 Loss: 133.6483917236328 Tokens per Sec: 15951.461552643614
Epoch Step: 35 / 138 Loss: 132.94261169433594 Tokens per Sec: 17012.55161698756
Epoch Step: 40 / 138 Loss: 140.13905334472656 Tokens per Sec: 15655.384973259366
Epoch Step: 45 / 138 Loss: 155.9622802734375 Tokens per Sec: 16459.135400413794
Epoch Step: 50 / 138 Loss: 209.0713348388672 Tokens per Sec: 17417.907160598443
Epoch Step: 55 / 138 Loss: 187.93148803710938 Tokens per Sec: 17983.82363506996
Epoch Step: 60 / 138 Loss: 123.167236328125 Tokens per Sec: 16288.44142798772
Epoch Step: 65 / 138 Loss: 131.7084197998047 Tokens per Sec: 15468.580593693358
Epoch Step: 70 / 138 Loss: 193.37225341796875 Tokens per Sec: 15755.065123188053
Epoch Step: 75 / 138 Loss: 202.09262084960938 Tokens per Sec: 16287.437199628443
Epoch Step: 80 / 138 Loss: 120.05699157714844 Tokens per Sec: 16557.61501196563
Epoch Step: 85 / 138 Loss: 152.48068237304688 Tokens per Sec: 16352.336228535887
Epoch Step: 90 / 138 Loss: 188.5675048828125 Tokens per Sec: 15745.395080796352
Epoch Step: 95 / 138 Loss: 129.42161560058594 Tokens per Sec: 16420.92387390381
Epoch Step: 100 / 138 Loss: 132.0204620361328 Tokens per Sec: 15500.398950968387
Epoch Step: 105 / 138 Loss: 137.1755828857422 Tokens per Sec: 15103.856622470566
Epoch Step: 110 / 138 Loss: 163.311767578125 Tokens per Sec: 15389.949733976877
Epoch Step: 115 / 138 Loss: 337.52130126953125 Tokens per Sec: 15139.754120281552
Epoch Step: 120 / 138 Loss: 131.2085418701172 Tokens per Sec: 15073.523372286767
Epoch Step: 125 / 138 Loss: 374.6024169921875 Tokens per Sec: 14182.149212001746
Epoch Step: 130 / 138 Loss: 122.80577850341797 Tokens per Sec: 14460.947082126759
Epoch Step: 135 / 138 Loss: 115.36062622070312 Tokens per Sec: 14843.576725384555
Epoch ended with duration 0:00:40.372879
Train perplexity: 10.341224141378163
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String > METHOD_1 ( ) throws java.lang.Exception { java.lang.String > VAR_1 , java.lang.String > VAR_1 = new java.util.ArrayList < > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > VAR_1 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( java.lang.String , java.lang.String , java.lang.String , int VAR_1 , int VAR_2 , int VAR_2 , int VAR_2 , VAR_2 , VAR_2 , VAR_2 ) { if ( VAR_2 . METHOD_2 ( ) ) { if ( VAR_2 . METHOD_3 ( ) ; } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ) { if ( ( ) { if ( ( ) { if ( ) { if ( ( ) { if ( VAR_2 ) ; } return VAR_2 = new TYPE_1 ( ( ) ; }[0m
Epoch ended with duration 0:00:01.762672
Validation perplexity: 9.58704938812864
Model saved best_on_validation!
Epoch 8 / 1000
Epoch Step: 5 / 138 Loss: 171.779541015625 Tokens per Sec: 15638.797299279882
Epoch Step: 10 / 138 Loss: 359.5116271972656 Tokens per Sec: 15859.334850092182
Epoch Step: 15 / 138 Loss: 114.03569793701172 Tokens per Sec: 15838.78142234233
Epoch Step: 20 / 138 Loss: 266.29034423828125 Tokens per Sec: 15692.074197196323
Epoch Step: 25 / 138 Loss: 139.7878875732422 Tokens per Sec: 16314.789877869542
Epoch Step: 30 / 138 Loss: 121.44205474853516 Tokens per Sec: 16408.912592903893
Epoch Step: 35 / 138 Loss: 159.9952850341797 Tokens per Sec: 16362.040124805768
Epoch Step: 40 / 138 Loss: 109.83075714111328 Tokens per Sec: 15636.435149851866
Epoch Step: 45 / 138 Loss: 119.29843139648438 Tokens per Sec: 16135.771294212063
Epoch Step: 50 / 138 Loss: 195.64691162109375 Tokens per Sec: 16030.419398499584
Epoch Step: 55 / 138 Loss: 134.16897583007812 Tokens per Sec: 15461.734158319568
Epoch Step: 60 / 138 Loss: 187.19842529296875 Tokens per Sec: 16772.814642990223
Epoch Step: 65 / 138 Loss: 157.91082763671875 Tokens per Sec: 16808.583737784968
Epoch Step: 70 / 138 Loss: 122.48974609375 Tokens per Sec: 15196.13498880521
Epoch Step: 75 / 138 Loss: 320.9476013183594 Tokens per Sec: 15111.421498609317
Epoch Step: 80 / 138 Loss: 105.19342041015625 Tokens per Sec: 16634.753419294677
Epoch Step: 85 / 138 Loss: 116.91188049316406 Tokens per Sec: 16761.245212361202
Epoch Step: 90 / 138 Loss: 116.76768493652344 Tokens per Sec: 16737.935236603134
Epoch Step: 95 / 138 Loss: 117.88240814208984 Tokens per Sec: 15361.965522927812
Epoch Step: 100 / 138 Loss: 124.26146697998047 Tokens per Sec: 17168.22934782402
Epoch Step: 105 / 138 Loss: 209.4423370361328 Tokens per Sec: 13901.84531445056
Epoch Step: 110 / 138 Loss: 179.0606689453125 Tokens per Sec: 15119.048353028387
Epoch Step: 115 / 138 Loss: 189.29505920410156 Tokens per Sec: 17396.83859294804
Epoch Step: 120 / 138 Loss: 185.05905151367188 Tokens per Sec: 17145.017130639077
Epoch Step: 125 / 138 Loss: 261.0020751953125 Tokens per Sec: 15038.432360061728
Epoch Step: 130 / 138 Loss: 154.22459411621094 Tokens per Sec: 14863.546435791846
Epoch Step: 135 / 138 Loss: 130.14476013183594 Tokens per Sec: 15165.471922169778
Epoch ended with duration 0:00:40.063827
Train perplexity: 9.85274548291275
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 < java.lang.String , java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String > VAR_1 , java.lang.String > VAR_1 ) { java.util.List < java.lang.String > > > > > > > > > > > > > > > > > > > > > > > > ( ) ; } return new TYPE_1 . METHOD_3 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String , java.lang.String , int VAR_2 , int VAR_2 , int VAR_2 , int VAR_2 , VAR_2 ) ; if ( VAR_1 . METHOD_3 ( ) ) { return false ; } } } } } } } } } } } } } } } } } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ) { if ( ! ( ) ) { if ( ! ( ) { if ( VAR_3 ) ; if ( VAR_3 = new TYPE_2 . METHOD_3 ( ) ) ; }[0m
Epoch ended with duration 0:00:01.786444
Validation perplexity: 9.318062319428053
Model saved best_on_validation!
Epoch 9 / 1000
Epoch Step: 5 / 138 Loss: 123.04241943359375 Tokens per Sec: 15248.68053365648
Epoch Step: 10 / 138 Loss: 169.52394104003906 Tokens per Sec: 15318.779527258528
Epoch Step: 15 / 138 Loss: 314.9176025390625 Tokens per Sec: 16083.775488559157
Epoch Step: 20 / 138 Loss: 105.52383422851562 Tokens per Sec: 16385.454746323518
Epoch Step: 25 / 138 Loss: 171.4662628173828 Tokens per Sec: 15748.75009497307
Epoch Step: 30 / 138 Loss: 108.96126556396484 Tokens per Sec: 16726.79470469418
Epoch Step: 35 / 138 Loss: 171.65426635742188 Tokens per Sec: 16114.395913125953
Epoch Step: 40 / 138 Loss: 126.81035614013672 Tokens per Sec: 16202.276808509348
Epoch Step: 45 / 138 Loss: 164.3353271484375 Tokens per Sec: 16153.327246085617
Epoch Step: 50 / 138 Loss: 110.92965698242188 Tokens per Sec: 15268.113305413208
Epoch Step: 55 / 138 Loss: 160.84803771972656 Tokens per Sec: 15541.897107217388
Epoch Step: 60 / 138 Loss: 192.22918701171875 Tokens per Sec: 15596.777607372078
Epoch Step: 65 / 138 Loss: 170.28138732910156 Tokens per Sec: 17169.95856986697
Epoch Step: 70 / 138 Loss: 110.55119323730469 Tokens per Sec: 16579.995188553006
Epoch Step: 75 / 138 Loss: 132.6160888671875 Tokens per Sec: 15378.478343585833
Epoch Step: 80 / 138 Loss: 168.51246643066406 Tokens per Sec: 15655.655737923198
Epoch Step: 85 / 138 Loss: 188.98048400878906 Tokens per Sec: 16380.487300724157
Epoch Step: 90 / 138 Loss: 151.7312774658203 Tokens per Sec: 16157.74897372374
Epoch Step: 95 / 138 Loss: 138.0086212158203 Tokens per Sec: 17368.29159294986
Epoch Step: 100 / 138 Loss: 185.67481994628906 Tokens per Sec: 16932.32154296373
Epoch Step: 105 / 138 Loss: 196.94659423828125 Tokens per Sec: 14144.469264418452
Epoch Step: 110 / 138 Loss: 163.30943298339844 Tokens per Sec: 14822.887860562845
Epoch Step: 115 / 138 Loss: 242.14476013183594 Tokens per Sec: 16153.359929435674
Epoch Step: 120 / 138 Loss: 172.16845703125 Tokens per Sec: 14977.685422569655
Epoch Step: 125 / 138 Loss: 121.1137924194336 Tokens per Sec: 15672.380702829541
Epoch Step: 130 / 138 Loss: 186.00157165527344 Tokens per Sec: 15924.350439774134
Epoch Step: 135 / 138 Loss: 125.39421844482422 Tokens per Sec: 15042.411398984557
Epoch ended with duration 0:00:40.279872
Train perplexity: 8.947413612097854
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 < java.lang.String [ ] , int VAR_1 , java.lang.String VAR_1 , java.lang.String > VAR_2 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > > > > > > > > > > > > > > > > > > > > > > ( ) ; } return new TYPE_1 . METHOD_3 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 , java.lang.String , java.lang.String , java.lang.String , java.lang.String VAR_4 , int VAR_3 , int VAR_3 , int VAR_3 ) { if ( ) ; if ( ) ; if ( ) { if ( VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_4 , VAR_4 , e ) ; } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ) ) { if ( ( ) { if ( ! ( ) ) { if ( VAR_3 ) { if ( VAR_3 = new TYPE_3 ( ) ) ; } return VAR_3 = new TYPE_3 ( STRING_1 + ( ) ) ; }[0m
Epoch ended with duration 0:00:01.752352
Validation perplexity: 7.2712933996752875
Model saved best_on_validation!
Epoch 10 / 1000
Epoch Step: 5 / 138 Loss: 133.01553344726562 Tokens per Sec: 16616.967649227758
Epoch Step: 10 / 138 Loss: 167.1663055419922 Tokens per Sec: 15336.336604692273
Epoch Step: 15 / 138 Loss: 133.50027465820312 Tokens per Sec: 16730.974249074236
Epoch Step: 20 / 138 Loss: 143.06129455566406 Tokens per Sec: 16141.343354426535
Epoch Step: 25 / 138 Loss: 156.31887817382812 Tokens per Sec: 15161.841915090543
Epoch Step: 30 / 138 Loss: 169.54872131347656 Tokens per Sec: 16837.698346138404
Epoch Step: 35 / 138 Loss: 165.87734985351562 Tokens per Sec: 16009.680510233695
Epoch Step: 40 / 138 Loss: 111.98446655273438 Tokens per Sec: 18155.571598832157
Epoch Step: 45 / 138 Loss: 89.11129760742188 Tokens per Sec: 17765.3530850603
Epoch Step: 50 / 138 Loss: 115.63787841796875 Tokens per Sec: 17453.56018413098
Epoch Step: 55 / 138 Loss: 319.1462097167969 Tokens per Sec: 14818.886790579581
Epoch Step: 60 / 138 Loss: 146.89031982421875 Tokens per Sec: 15941.057544334575
Epoch Step: 65 / 138 Loss: 106.81517028808594 Tokens per Sec: 16699.431426816278
Epoch Step: 70 / 138 Loss: 111.27491760253906 Tokens per Sec: 15272.5354376727
Epoch Step: 75 / 138 Loss: 128.15570068359375 Tokens per Sec: 15601.65505574429
Epoch Step: 80 / 138 Loss: 128.2337646484375 Tokens per Sec: 15426.88163834414
Epoch Step: 85 / 138 Loss: 159.9660186767578 Tokens per Sec: 16376.18322451446
Epoch Step: 90 / 138 Loss: 140.12680053710938 Tokens per Sec: 16539.314130551513
Epoch Step: 95 / 138 Loss: 94.66618347167969 Tokens per Sec: 16394.989223365046
Epoch Step: 100 / 138 Loss: 101.31845092773438 Tokens per Sec: 15067.611779305023
Epoch Step: 105 / 138 Loss: 379.5029296875 Tokens per Sec: 14870.00045573934
Epoch Step: 110 / 138 Loss: 112.1102294921875 Tokens per Sec: 15574.410030327042
Epoch Step: 115 / 138 Loss: 114.42858123779297 Tokens per Sec: 14343.458120903131
Epoch Step: 120 / 138 Loss: 110.9319839477539 Tokens per Sec: 15143.217213121376
Epoch Step: 125 / 138 Loss: 118.51888275146484 Tokens per Sec: 14808.008431777205
Epoch Step: 130 / 138 Loss: 132.67376708984375 Tokens per Sec: 15316.85737434387
Epoch Step: 135 / 138 Loss: 99.06587219238281 Tokens per Sec: 13303.522066934218
Epoch ended with duration 0:00:40.445058
Train perplexity: 6.977266136583677
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( TYPE_1 [ ] , int VAR_1 , int VAR_1 , java.lang.String VAR_2 , java.lang.String > VAR_2 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > VAR_2 = new java.util.ArrayList < > > > > > > > > > > > ( ) ; for ( ) ; } return new TYPE_1 . METHOD_3 ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 , java.lang.String VAR_2 , java.lang.String VAR_2 , java.lang.String VAR_4 , java.lang.String VAR_4 , java.lang.String VAR_4 ) { try { METHOD_2 ( ) ; if ( ) { if ( VAR_2 . METHOD_3 ( ) , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_4 ) ; } catch ( STRING_1 , e ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ) ) ) { if ( ! ( ) { if ( VAR_3 ) { if ( VAR_3 ) { return VAR_3 = new TYPE_1 ( STRING_1 + ( ) ) ; } catch ( STRING_1 + STRING_2 , STRING_2 , STRING_2 , STRING_2 , STRING_2 , null , null , null , null , null ) ; }[0m
Epoch ended with duration 0:00:01.755249
Validation perplexity: 11.532093457318433
Model saved checkpoint!
Epoch 11 / 1000
Epoch Step: 5 / 138 Loss: 233.55055236816406 Tokens per Sec: 16919.3054893402
Epoch Step: 10 / 138 Loss: 122.02015686035156 Tokens per Sec: 16352.631255728209
Epoch Step: 15 / 138 Loss: 145.4944305419922 Tokens per Sec: 15675.826926037518
Epoch Step: 20 / 138 Loss: 102.9737319946289 Tokens per Sec: 15149.579062878964
Epoch Step: 25 / 138 Loss: 106.01093292236328 Tokens per Sec: 15892.13291983633
Epoch Step: 30 / 138 Loss: 104.66546630859375 Tokens per Sec: 16519.835195195745
Epoch Step: 35 / 138 Loss: 116.5013656616211 Tokens per Sec: 15383.466897090428
Epoch Step: 40 / 138 Loss: 83.27140808105469 Tokens per Sec: 15517.134785077431
Epoch Step: 45 / 138 Loss: 125.7669677734375 Tokens per Sec: 16924.827516813304
Epoch Step: 50 / 138 Loss: 134.58531188964844 Tokens per Sec: 15308.319615692162
Epoch Step: 55 / 138 Loss: 104.64180755615234 Tokens per Sec: 15368.326531166886
Epoch Step: 60 / 138 Loss: 169.66477966308594 Tokens per Sec: 16984.77125491562
Epoch Step: 65 / 138 Loss: 106.49545288085938 Tokens per Sec: 15617.341002312653
Epoch Step: 70 / 138 Loss: 146.59210205078125 Tokens per Sec: 15682.239866576172
Epoch Step: 75 / 138 Loss: 96.78080749511719 Tokens per Sec: 16860.313960623105
Epoch Step: 80 / 138 Loss: 152.07907104492188 Tokens per Sec: 15900.322781912879
Epoch Step: 85 / 138 Loss: 91.33395385742188 Tokens per Sec: 14795.925324107275
Epoch Step: 90 / 138 Loss: 115.95352935791016 Tokens per Sec: 15869.739055666892
Epoch Step: 95 / 138 Loss: 232.00389099121094 Tokens per Sec: 15233.048482261527
Epoch Step: 100 / 138 Loss: 148.72543334960938 Tokens per Sec: 17993.885739664333
Epoch Step: 105 / 138 Loss: 163.9838104248047 Tokens per Sec: 17307.33637422452
Epoch Step: 110 / 138 Loss: 319.73614501953125 Tokens per Sec: 15322.680039225188
Epoch Step: 115 / 138 Loss: 144.36720275878906 Tokens per Sec: 13608.91072078955
Epoch Step: 120 / 138 Loss: 102.8497543334961 Tokens per Sec: 14680.049568057026
Epoch Step: 125 / 138 Loss: 331.95233154296875 Tokens per Sec: 14965.39944054439
Epoch Step: 130 / 138 Loss: 158.05398559570312 Tokens per Sec: 15366.686572599761
Epoch Step: 135 / 138 Loss: 91.91524505615234 Tokens per Sec: 15055.379352073858
Epoch ended with duration 0:00:40.439147
Train perplexity: 7.374029905784987
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String [ ] , int [ ] , java.lang.String VAR_2 , java.lang.String > VAR_2 ) { java.util.List < java.lang.String > VAR_2 = new TYPE_2 > VAR_1 = new java.util.ArrayList < > > > > > > > > > > > ( ) ; for ( ) ; } return new TYPE_3 . METHOD_3 ( ) ; } return new TYPE_1 . METHOD_3 ( ) , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_2 , java.lang.String VAR_4 , java.lang.String VAR_4 , int VAR_4 ) { METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { if ( ) { if ( ) { if ( ) { METHOD_4 ( ) ; } catch ( ) ; } catch ( ) ; } catch ( ) ; } } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( ( ( ) ) ) && ( ) == null ) { if ( VAR_3 ) { if ( VAR_3 ) { VAR_3 = VAR_3 = VAR_3 = ( VAR_4 ) ; } ( STRING_1 + ( ) ) ; }[0m
Epoch ended with duration 0:00:01.774328
Validation perplexity: 5.938699513132858
Model saved best_on_validation!
Epoch 12 / 1000
Epoch Step: 5 / 138 Loss: 143.02989196777344 Tokens per Sec: 16216.187376069098
Epoch Step: 10 / 138 Loss: 155.49021911621094 Tokens per Sec: 16153.668565079066
Epoch Step: 15 / 138 Loss: 113.59545135498047 Tokens per Sec: 16151.984163337067
Epoch Step: 20 / 138 Loss: 173.91946411132812 Tokens per Sec: 16381.498579130015
Epoch Step: 25 / 138 Loss: 121.05889892578125 Tokens per Sec: 16007.684127987537
Epoch Step: 30 / 138 Loss: 147.07102966308594 Tokens per Sec: 15914.842833002887
Epoch Step: 35 / 138 Loss: 98.85371398925781 Tokens per Sec: 15455.471930617834
Epoch Step: 40 / 138 Loss: 143.9935760498047 Tokens per Sec: 15832.581996603014
Epoch Step: 45 / 138 Loss: 86.93806457519531 Tokens per Sec: 16926.766300415104
Epoch Step: 50 / 138 Loss: 144.22389221191406 Tokens per Sec: 15464.29135823802
Epoch Step: 55 / 138 Loss: 126.10775756835938 Tokens per Sec: 16004.232517990115
Epoch Step: 60 / 138 Loss: 163.08790588378906 Tokens per Sec: 16059.189659467373
Epoch Step: 65 / 138 Loss: 98.01728057861328 Tokens per Sec: 16601.523471889162
Epoch Step: 70 / 138 Loss: 92.17086029052734 Tokens per Sec: 17214.84247393662
Epoch Step: 75 / 138 Loss: 94.26790618896484 Tokens per Sec: 16589.780097638817
Epoch Step: 80 / 138 Loss: 148.70767211914062 Tokens per Sec: 15188.42532645658
Epoch Step: 85 / 138 Loss: 119.47470092773438 Tokens per Sec: 15510.090895052133
Epoch Step: 90 / 138 Loss: 102.5938491821289 Tokens per Sec: 14357.732129582768
Epoch Step: 95 / 138 Loss: 96.5668716430664 Tokens per Sec: 15926.132782688417
Epoch Step: 100 / 138 Loss: 85.85553741455078 Tokens per Sec: 15968.607877471328
Epoch Step: 105 / 138 Loss: 131.38841247558594 Tokens per Sec: 14878.844498273793
Epoch Step: 110 / 138 Loss: 145.48326110839844 Tokens per Sec: 16021.15353739555
Epoch Step: 115 / 138 Loss: 100.3927001953125 Tokens per Sec: 15226.0676314166
Epoch Step: 120 / 138 Loss: 129.1224365234375 Tokens per Sec: 14046.185752991267
Epoch Step: 125 / 138 Loss: 79.9434814453125 Tokens per Sec: 15728.55813211067
Epoch Step: 130 / 138 Loss: 151.3262939453125 Tokens per Sec: 15515.438898464867
Epoch Step: 135 / 138 Loss: 312.6993408203125 Tokens per Sec: 14150.980351939297
Epoch ended with duration 0:00:40.579427
Train perplexity: 7.145685243455768
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] , int [ ] , int VAR_2 , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new TYPE_3 . METHOD_2 ( ) ; java.util.List < > > > > > > > > ( ) ; for ( ) ; } return ( ) ; } return new TYPE_1 . METHOD_3 ( ) ; } ( ( ) , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_2 , TYPE_3 , TYPE_3 VAR_4 , TYPE_3 VAR_4 ) { try { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) { if ( ) { if ( VAR_1 , VAR_2 , VAR_2 , VAR_4 , VAR_4 ) ; } catch ( STRING_1 ) ; } catch ( ) ; } catch ( ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( ) ) && ( ) != null ) { if ( VAR_3 : VAR_3 ) { VAR_3 = VAR_3 = VAR_3 = ( VAR_4 ) + ( STRING_1 + STRING_2 ) + STRING_2 ) ) ; }[0m
Epoch ended with duration 0:00:01.795857
Validation perplexity: 8.780789004192362
Epoch 13 / 1000
Epoch Step: 5 / 138 Loss: 400.62451171875 Tokens per Sec: 15993.87464931128
Epoch Step: 10 / 138 Loss: 118.91136169433594 Tokens per Sec: 16627.114211565466
Epoch Step: 15 / 138 Loss: 123.95123291015625 Tokens per Sec: 15016.254549694999
Epoch Step: 20 / 138 Loss: 124.64569091796875 Tokens per Sec: 16161.69376839102
Epoch Step: 25 / 138 Loss: 74.47509765625 Tokens per Sec: 18690.484201844
Epoch Step: 30 / 138 Loss: 133.9253692626953 Tokens per Sec: 17148.991210163193
Epoch Step: 35 / 138 Loss: 132.9740753173828 Tokens per Sec: 16359.540740420209
Epoch Step: 40 / 138 Loss: 88.04259490966797 Tokens per Sec: 16571.189640456214
Epoch Step: 45 / 138 Loss: 159.0949249267578 Tokens per Sec: 16770.075325810405
Epoch Step: 50 / 138 Loss: 140.234619140625 Tokens per Sec: 15356.945941531741
Epoch Step: 55 / 138 Loss: 135.7938232421875 Tokens per Sec: 15897.272823171254
Epoch Step: 60 / 138 Loss: 92.93730163574219 Tokens per Sec: 15085.40873672734
Epoch Step: 65 / 138 Loss: 346.95123291015625 Tokens per Sec: 15463.660897609148
Epoch Step: 70 / 138 Loss: 94.43225860595703 Tokens per Sec: 14934.511853235816
Epoch Step: 75 / 138 Loss: 75.9623794555664 Tokens per Sec: 16082.430894048404
Epoch Step: 80 / 138 Loss: 107.11749267578125 Tokens per Sec: 15036.766585236699
Epoch Step: 85 / 138 Loss: 142.62977600097656 Tokens per Sec: 16538.386493779693
Epoch Step: 90 / 138 Loss: 74.14366912841797 Tokens per Sec: 15956.419235534524
Epoch Step: 95 / 138 Loss: 217.3887481689453 Tokens per Sec: 15198.630497823842
Epoch Step: 100 / 138 Loss: 102.76480102539062 Tokens per Sec: 15437.055976459018
Epoch Step: 105 / 138 Loss: 88.93535614013672 Tokens per Sec: 14934.458999032833
Epoch Step: 110 / 138 Loss: 130.8759307861328 Tokens per Sec: 16059.5606782945
Epoch Step: 115 / 138 Loss: 130.80905151367188 Tokens per Sec: 14269.667027633805
Epoch Step: 120 / 138 Loss: 195.91075134277344 Tokens per Sec: 15153.933004361767
Epoch Step: 125 / 138 Loss: 106.89055633544922 Tokens per Sec: 16560.537825885596
Epoch Step: 130 / 138 Loss: 129.22772216796875 Tokens per Sec: 16772.121180997416
Epoch Step: 135 / 138 Loss: 88.27910614013672 Tokens per Sec: 15554.497973589563
Epoch ended with duration 0:00:40.206943
Train perplexity: 5.886846542044321
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] , int [ ] , java.lang.Object , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = VAR_3 = new TYPE_2 . METHOD_3 ( VAR_1 ) ; java.util.List < > > > > > > > ( ) ; for ( ) { return VAR_2 . METHOD_3 ( ) ; } return new TYPE_1 . METHOD_3 ( ) , ( ) , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4 , VAR_4[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , TYPE_3 VAR_4 ) { try { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) { if ( ) { if ( VAR_1 , VAR_2 , VAR_2 , VAR_4 , VAR_4 ) ; } catch ( STRING_1 , e ) ; } catch ( ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( VAR_2 ) && ( VAR_2 ) ) { if ( VAR_3 : VAR_3 ) { for ( VAR_3 ) { VAR_3 = VAR_3 = ( STRING_1 + STRING_2 + STRING_2 ) + STRING_2 ) ; }[0m
Epoch ended with duration 0:00:01.760628
Validation perplexity: 4.9780024205829365
Model saved best_on_validation!
Epoch 14 / 1000
Epoch Step: 5 / 138 Loss: 102.48797607421875 Tokens per Sec: 17334.99487434913
Epoch Step: 10 / 138 Loss: 99.63575744628906 Tokens per Sec: 17267.911299340416
Epoch Step: 15 / 138 Loss: 110.05084991455078 Tokens per Sec: 16665.072109285007
Epoch Step: 20 / 138 Loss: 388.337890625 Tokens per Sec: 16872.7263857079
Epoch Step: 25 / 138 Loss: 136.36476135253906 Tokens per Sec: 15887.85672950434
Epoch Step: 30 / 138 Loss: 92.90544891357422 Tokens per Sec: 15502.537200991126
Epoch Step: 35 / 138 Loss: 345.18316650390625 Tokens per Sec: 15371.601998909002
Epoch Step: 40 / 138 Loss: 103.92765808105469 Tokens per Sec: 16471.61388775817
Epoch Step: 45 / 138 Loss: 119.7715072631836 Tokens per Sec: 15445.949972206781
Epoch Step: 50 / 138 Loss: 86.08000183105469 Tokens per Sec: 15247.682936574907
Epoch Step: 55 / 138 Loss: 131.09005737304688 Tokens per Sec: 14884.07857040022
Epoch Step: 60 / 138 Loss: 257.1944885253906 Tokens per Sec: 15880.852220074641
Epoch Step: 65 / 138 Loss: 95.37841033935547 Tokens per Sec: 16192.527843388158
Epoch Step: 70 / 138 Loss: 95.94082641601562 Tokens per Sec: 16532.58746995674
Epoch Step: 75 / 138 Loss: 118.5656509399414 Tokens per Sec: 14285.716400108291
Epoch Step: 80 / 138 Loss: 83.81620788574219 Tokens per Sec: 15386.406369981045
Epoch Step: 85 / 138 Loss: 125.43304443359375 Tokens per Sec: 18373.902139818725
Epoch Step: 90 / 138 Loss: 92.0436782836914 Tokens per Sec: 15433.555448305118
Epoch Step: 95 / 138 Loss: 240.58306884765625 Tokens per Sec: 16016.808494825751
Epoch Step: 100 / 138 Loss: 140.24501037597656 Tokens per Sec: 16763.441260671792
Epoch Step: 105 / 138 Loss: 112.307373046875 Tokens per Sec: 14455.56955480386
Epoch Step: 110 / 138 Loss: 96.01252746582031 Tokens per Sec: 15585.317371119081
Epoch Step: 115 / 138 Loss: 96.52127838134766 Tokens per Sec: 14735.663769213144
Epoch Step: 120 / 138 Loss: 105.69373321533203 Tokens per Sec: 14919.547264679333
Epoch Step: 125 / 138 Loss: 94.774658203125 Tokens per Sec: 15075.296786437368
Epoch Step: 130 / 138 Loss: 343.25537109375 Tokens per Sec: 14823.533548279183
Epoch Step: 135 / 138 Loss: 93.64736938476562 Tokens per Sec: 15413.283162372329
Epoch ended with duration 0:00:40.617989
Train perplexity: 5.320008699470797
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] , int [ ] , java.lang.Object [ ] ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < > > > > > > > > ( ) ; for ( ) { return VAR_2 . METHOD_3 ( ) ; } return new TYPE_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 , STRING_1 , STRING_1 , STRING_1 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , int VAR_5 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) { if ( ) { if ( METHOD_4 ( VAR_2 , VAR_2 , VAR_4 , VAR_4 ) , e ) { throw new TYPE_3 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( VAR_2 ) && ( VAR_2 ) != null ) { for ( TYPE_1 > VAR_2 ) { VAR_3 = VAR_3 = VAR_3 = ( STRING_1 + STRING_2 + STRING_2 + STRING_2 ) + STRING_2 ) ; } catch ( STRING_1 , VAR_5 , VAR_5 , null , null , null ) ; } }[0m
Epoch ended with duration 0:00:01.746724
Validation perplexity: 3.6433219036548943
Model saved best_on_validation!
Epoch 15 / 1000
Epoch Step: 5 / 138 Loss: 70.23115539550781 Tokens per Sec: 15808.785249428893
Epoch Step: 10 / 138 Loss: 77.1099853515625 Tokens per Sec: 15651.373510538364
Epoch Step: 15 / 138 Loss: 67.85033416748047 Tokens per Sec: 15811.208893421137
Epoch Step: 20 / 138 Loss: 101.70928955078125 Tokens per Sec: 15787.34599508627
Epoch Step: 25 / 138 Loss: 69.50016021728516 Tokens per Sec: 16398.78214699739
Epoch Step: 30 / 138 Loss: 126.89605712890625 Tokens per Sec: 15971.180185018846
Epoch Step: 35 / 138 Loss: 73.29338836669922 Tokens per Sec: 14756.167616501092
Epoch Step: 40 / 138 Loss: 94.43474578857422 Tokens per Sec: 15200.256890951983
Epoch Step: 45 / 138 Loss: 97.71752166748047 Tokens per Sec: 16182.30101861157
Epoch Step: 50 / 138 Loss: 79.73564147949219 Tokens per Sec: 17600.850007560293
Epoch Step: 55 / 138 Loss: 85.27223205566406 Tokens per Sec: 17076.6925029795
Epoch Step: 60 / 138 Loss: 79.98341369628906 Tokens per Sec: 16255.98285674905
Epoch Step: 65 / 138 Loss: 71.33483123779297 Tokens per Sec: 15615.521873980526
Epoch Step: 70 / 138 Loss: 142.71337890625 Tokens per Sec: 16090.836537720154
Epoch Step: 75 / 138 Loss: 83.08170318603516 Tokens per Sec: 16419.12150622231
Epoch Step: 80 / 138 Loss: 84.83518981933594 Tokens per Sec: 16311.907057475855
Epoch Step: 85 / 138 Loss: 138.7058868408203 Tokens per Sec: 15534.49122323297
Epoch Step: 90 / 138 Loss: 66.26280212402344 Tokens per Sec: 16025.881762829036
Epoch Step: 95 / 138 Loss: 97.98712158203125 Tokens per Sec: 16546.821341652976
Epoch Step: 100 / 138 Loss: 94.27842712402344 Tokens per Sec: 17030.57775522974
Epoch Step: 105 / 138 Loss: 58.0006103515625 Tokens per Sec: 15143.63532195178
Epoch Step: 110 / 138 Loss: 94.21440124511719 Tokens per Sec: 14263.926027620055
Epoch Step: 115 / 138 Loss: 274.5345458984375 Tokens per Sec: 15125.273334277563
Epoch Step: 120 / 138 Loss: 115.0927963256836 Tokens per Sec: 15764.68805046151
Epoch Step: 125 / 138 Loss: 82.16974639892578 Tokens per Sec: 15340.961511648817
Epoch Step: 130 / 138 Loss: 106.87120056152344 Tokens per Sec: 14774.21071750889
Epoch Step: 135 / 138 Loss: 110.01445007324219 Tokens per Sec: 14347.131790181407
Epoch ended with duration 0:00:40.445497
Train perplexity: 4.5799962322936425
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] , int [ ] , java.lang.Object [ ] ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_3 ( VAR_1 ) ; java.util.List < > > > > > > ( java.util.ArrayList < > ) ; for ( VAR_2 : ) { return VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 . METHOD_2 ( STRING_1 , STRING_1 , STRING_1 , STRING_1 , STRING_1 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_4 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , int VAR_5 ) { TYPE_4 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { if ( ) { METHOD_4 ( ) , METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_6 ( STRING_1 , METHOD_6 ( ) ) . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( VAR_2 ) && ( VAR_2 ) != null ) { for ( TYPE_1 VAR_2 ) { VAR_3 = VAR_3 = ( STRING_1 + ( STRING_1 + STRING_2 + STRING_2 + STRING_2 ) + STRING_2 ) + STRING_2 ) ; }[0m
Epoch ended with duration 0:00:01.687178
Validation perplexity: 5.200904325477836
Model saved checkpoint!
Epoch 16 / 1000
Epoch Step: 5 / 138 Loss: 91.9012451171875 Tokens per Sec: 15756.694402339253
Epoch Step: 10 / 138 Loss: 74.70411682128906 Tokens per Sec: 16410.799735792112
Epoch Step: 15 / 138 Loss: 77.5057601928711 Tokens per Sec: 15941.703965079561
Epoch Step: 20 / 138 Loss: 116.38603210449219 Tokens per Sec: 16051.389043623747
Epoch Step: 25 / 138 Loss: 78.18878936767578 Tokens per Sec: 15842.627116563055
Epoch Step: 30 / 138 Loss: 121.547119140625 Tokens per Sec: 15910.977600767672
Epoch Step: 35 / 138 Loss: 120.30850219726562 Tokens per Sec: 15301.593896655204
Epoch Step: 40 / 138 Loss: 107.66151428222656 Tokens per Sec: 15863.509282254137
Epoch Step: 45 / 138 Loss: 127.99958038330078 Tokens per Sec: 15468.155236418756
Epoch Step: 50 / 138 Loss: 131.1488494873047 Tokens per Sec: 17517.67627730714
Epoch Step: 55 / 138 Loss: 119.20596313476562 Tokens per Sec: 15181.043679476437
Epoch Step: 60 / 138 Loss: 93.41936492919922 Tokens per Sec: 16183.170959386449
Epoch Step: 65 / 138 Loss: 206.09555053710938 Tokens per Sec: 16018.251653578585
Epoch Step: 70 / 138 Loss: 89.70345306396484 Tokens per Sec: 15226.24323042299
Epoch Step: 75 / 138 Loss: 79.66834259033203 Tokens per Sec: 15943.88695758515
Epoch Step: 80 / 138 Loss: 119.53459167480469 Tokens per Sec: 15291.9269430689
Epoch Step: 85 / 138 Loss: 74.072998046875 Tokens per Sec: 15762.667653160834
Epoch Step: 90 / 138 Loss: 279.4023742675781 Tokens per Sec: 16026.897808787402
Epoch Step: 95 / 138 Loss: 59.267452239990234 Tokens per Sec: 15028.723637406232
Epoch Step: 100 / 138 Loss: 272.11126708984375 Tokens per Sec: 15605.327232159714
Epoch Step: 105 / 138 Loss: 118.66293334960938 Tokens per Sec: 13797.48061057954
Epoch Step: 110 / 138 Loss: 90.40565490722656 Tokens per Sec: 17192.941321145292
Epoch Step: 115 / 138 Loss: 61.48183059692383 Tokens per Sec: 16208.350862320596
Epoch Step: 120 / 138 Loss: 65.91327667236328 Tokens per Sec: 15013.60471702243
Epoch Step: 125 / 138 Loss: 71.10722351074219 Tokens per Sec: 15257.179175923124
Epoch Step: 130 / 138 Loss: 79.83573150634766 Tokens per Sec: 15389.261913036657
Epoch Step: 135 / 138 Loss: 100.64082336425781 Tokens per Sec: 14124.417677458636
Epoch ended with duration 0:00:40.814087
Train perplexity: 4.444155602058129
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < > ( ) ; for ( : for ( ) { for ( VAR_5 ) ; } return new TYPE_1 . METHOD_3 ( ) . METHOD_3 ( ) , VAR_2 , VAR_2 , STRING_1 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , TYPE_3 VAR_4 , TYPE_4 VAR_4 , int VAR_5 ) { TYPE_4 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) { if ( ) { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_4 ) ; } catch ( STRING_1 ) { METHOD_6 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 > VAR_2 ) { java.lang.String VAR_3 = VAR_3 = ( STRING_1 + ( STRING_1 + STRING_2 + STRING_2 ) + STRING_2 ) + STRING_2 ) ; } . METHOD_2 ( VAR_5 , , ( ) , null , null ) ; } } } } }[0m
Epoch ended with duration 0:00:01.779528
Validation perplexity: 4.584920005389759
Epoch 17 / 1000
Epoch Step: 5 / 138 Loss: 284.3179626464844 Tokens per Sec: 16333.371569641567
Epoch Step: 10 / 138 Loss: 101.93241882324219 Tokens per Sec: 15493.908679247685
Epoch Step: 15 / 138 Loss: 108.3850326538086 Tokens per Sec: 15894.401973192289
Epoch Step: 20 / 138 Loss: 79.23783874511719 Tokens per Sec: 16372.198179008408
Epoch Step: 25 / 138 Loss: 66.35047149658203 Tokens per Sec: 15871.346953002396
Epoch Step: 30 / 138 Loss: 66.75799560546875 Tokens per Sec: 15832.790804164855
Epoch Step: 35 / 138 Loss: 66.5360336303711 Tokens per Sec: 15214.000953592773
Epoch Step: 40 / 138 Loss: 121.92823028564453 Tokens per Sec: 16595.573936954923
Epoch Step: 45 / 138 Loss: 112.9564208984375 Tokens per Sec: 15763.050655387879
Epoch Step: 50 / 138 Loss: 65.7324447631836 Tokens per Sec: 14885.069924540814
Epoch Step: 55 / 138 Loss: 66.17697143554688 Tokens per Sec: 16347.177949926032
Epoch Step: 60 / 138 Loss: 71.94525909423828 Tokens per Sec: 18084.590297602364
Epoch Step: 65 / 138 Loss: 79.3969955444336 Tokens per Sec: 16631.29262535038
Epoch Step: 70 / 138 Loss: 92.01168823242188 Tokens per Sec: 14743.504691187065
Epoch Step: 75 / 138 Loss: 302.6697998046875 Tokens per Sec: 15648.227735005594
Epoch Step: 80 / 138 Loss: 84.67132568359375 Tokens per Sec: 16216.341856126288
Epoch Step: 85 / 138 Loss: 70.487548828125 Tokens per Sec: 17098.330527213497
Epoch Step: 90 / 138 Loss: 97.36556243896484 Tokens per Sec: 17134.19543693966
Epoch Step: 95 / 138 Loss: 59.958072662353516 Tokens per Sec: 14988.208174515665
Epoch Step: 100 / 138 Loss: 103.41849517822266 Tokens per Sec: 16423.137009877322
Epoch Step: 105 / 138 Loss: 63.508663177490234 Tokens per Sec: 15515.606224199404
Epoch Step: 110 / 138 Loss: 78.29627990722656 Tokens per Sec: 15958.568817744315
Epoch Step: 115 / 138 Loss: 88.47877502441406 Tokens per Sec: 14073.430386110875
Epoch Step: 120 / 138 Loss: 62.15328598022461 Tokens per Sec: 15803.86330661871
Epoch Step: 125 / 138 Loss: 74.2844467163086 Tokens per Sec: 14652.503555172612
Epoch Step: 130 / 138 Loss: 215.24209594726562 Tokens per Sec: 14851.428040977313
Epoch Step: 135 / 138 Loss: 57.79862594604492 Tokens per Sec: 14987.0966933176
Epoch ended with duration 0:00:40.402932
Train perplexity: 4.038411500662531
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( : : : : { TYPE_4 . METHOD_3 ( ) ; } return new TYPE_1 . METHOD_3 ( VAR_5 . TAG , STRING_1 ) ; } , VAR_2 , ( ) , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , TYPE_3 VAR_4 , TYPE_4 VAR_5 , int VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( { if ( ) { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_4 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , e ) { METHOD_6 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( VAR_2 ) != null ) != null ) { for ( TYPE_1 result ) { java.lang.String VAR_3 = VAR_3 ( STRING_1 + ( STRING_1 + STRING_2 + STRING_2 ) + STRING_2 ) ; } . METHOD_2 ( VAR_5 , VAR_5 , ( ) , null , null , null , null ) ; } } }[0m
Epoch ended with duration 0:00:01.797761
Validation perplexity: 5.384900299798444
Epoch 18 / 1000
Epoch Step: 5 / 138 Loss: 107.8544921875 Tokens per Sec: 15888.93762120106
Epoch Step: 10 / 138 Loss: 53.21983337402344 Tokens per Sec: 16543.147569699024
Epoch Step: 15 / 138 Loss: 66.48089599609375 Tokens per Sec: 17109.61095797801
Epoch Step: 20 / 138 Loss: 70.72996520996094 Tokens per Sec: 15582.938787523446
Epoch Step: 25 / 138 Loss: 99.44691467285156 Tokens per Sec: 17208.776177889402
Epoch Step: 30 / 138 Loss: 63.745574951171875 Tokens per Sec: 15801.726092354185
Epoch Step: 35 / 138 Loss: 182.7983856201172 Tokens per Sec: 17720.06644717257
Epoch Step: 40 / 138 Loss: 61.434261322021484 Tokens per Sec: 15804.45130646039
Epoch Step: 45 / 138 Loss: 91.80986022949219 Tokens per Sec: 15895.02787588963
Epoch Step: 50 / 138 Loss: 109.8280258178711 Tokens per Sec: 15469.537939989561
Epoch Step: 55 / 138 Loss: 58.82362747192383 Tokens per Sec: 15974.446112675485
Epoch Step: 60 / 138 Loss: 93.42037963867188 Tokens per Sec: 16513.431083937663
Epoch Step: 65 / 138 Loss: 87.29264831542969 Tokens per Sec: 15541.576843776473
Epoch Step: 70 / 138 Loss: 46.30268478393555 Tokens per Sec: 15665.222827630247
Epoch Step: 75 / 138 Loss: 83.68310546875 Tokens per Sec: 14385.974343383774
Epoch Step: 80 / 138 Loss: 60.71463394165039 Tokens per Sec: 15901.20048851851
Epoch Step: 85 / 138 Loss: 82.6769790649414 Tokens per Sec: 17072.076824241685
Epoch Step: 90 / 138 Loss: 68.53919982910156 Tokens per Sec: 16388.95810475345
Epoch Step: 95 / 138 Loss: 54.40412902832031 Tokens per Sec: 14816.942277973287
Epoch Step: 100 / 138 Loss: 65.55048370361328 Tokens per Sec: 16555.676889940787
Epoch Step: 105 / 138 Loss: 70.49480438232422 Tokens per Sec: 15660.551690763623
Epoch Step: 110 / 138 Loss: 62.13691711425781 Tokens per Sec: 15637.533219947603
Epoch Step: 115 / 138 Loss: 59.88324737548828 Tokens per Sec: 15153.318098572314
Epoch Step: 120 / 138 Loss: 76.89148712158203 Tokens per Sec: 14256.123546911003
Epoch Step: 125 / 138 Loss: 56.189334869384766 Tokens per Sec: 16589.312443440533
Epoch Step: 130 / 138 Loss: 71.5466537475586 Tokens per Sec: 16743.042141707014
Epoch Step: 135 / 138 Loss: 42.79414749145508 Tokens per Sec: 16138.767200643157
Epoch ended with duration 0:00:39.934335
Train perplexity: 3.4809560570254217
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( for : : : : { return VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 . METHOD_3 ( VAR_5 . TAG , STRING_1 ) , STRING_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , VAR_2 , TYPE_3 VAR_3 , TYPE_4 , int VAR_5 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , e ) { METHOD_6 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 result : VAR_2 ) { java.lang.String VAR_3 = VAR_3 ( STRING_1 + ( STRING_1 + STRING_2 ) + STRING_2 ) ; } . METHOD_2 ( VAR_4 , , , name , ( ) . METHOD_4 ( ) , null , null , null ) ; } } } }[0m
Epoch ended with duration 0:00:01.753053
Validation perplexity: 3.7191383025131928
Epoch 19 / 1000
Epoch Step: 5 / 138 Loss: 69.48999786376953 Tokens per Sec: 15125.566958290105
Epoch Step: 10 / 138 Loss: 91.15724182128906 Tokens per Sec: 17116.43257280653
Epoch Step: 15 / 138 Loss: 42.45378494262695 Tokens per Sec: 16192.898475850734
Epoch Step: 20 / 138 Loss: 45.61443328857422 Tokens per Sec: 16234.778563899923
Epoch Step: 25 / 138 Loss: 77.24148559570312 Tokens per Sec: 15719.018469321003
Epoch Step: 30 / 138 Loss: 72.20748138427734 Tokens per Sec: 17093.523904486792
Epoch Step: 35 / 138 Loss: 258.8749084472656 Tokens per Sec: 14583.742546297619
Epoch Step: 40 / 138 Loss: 42.280364990234375 Tokens per Sec: 15008.96701364693
Epoch Step: 45 / 138 Loss: 92.2024154663086 Tokens per Sec: 16768.57958828398
Epoch Step: 50 / 138 Loss: 79.34864044189453 Tokens per Sec: 16554.047555034296
Epoch Step: 55 / 138 Loss: 84.8401870727539 Tokens per Sec: 15861.983949134968
Epoch Step: 60 / 138 Loss: 53.92642593383789 Tokens per Sec: 16758.266536066665
Epoch Step: 65 / 138 Loss: 50.85548400878906 Tokens per Sec: 16658.549236255836
Epoch Step: 70 / 138 Loss: 89.80692291259766 Tokens per Sec: 16061.217961826831
Epoch Step: 75 / 138 Loss: 87.13359069824219 Tokens per Sec: 16087.182349104876
Epoch Step: 80 / 138 Loss: 93.59683227539062 Tokens per Sec: 18262.666232265554
Epoch Step: 85 / 138 Loss: 45.20296096801758 Tokens per Sec: 17653.493519611035
Epoch Step: 90 / 138 Loss: 81.5929183959961 Tokens per Sec: 14829.399863503873
Epoch Step: 95 / 138 Loss: 87.81938171386719 Tokens per Sec: 16386.70300045967
Epoch Step: 100 / 138 Loss: 64.0282211303711 Tokens per Sec: 16254.55323240511
Epoch Step: 105 / 138 Loss: 82.04230499267578 Tokens per Sec: 15088.271152491208
Epoch Step: 110 / 138 Loss: 85.7073745727539 Tokens per Sec: 15230.76990563043
Epoch Step: 115 / 138 Loss: 51.865989685058594 Tokens per Sec: 15006.793502042141
Epoch Step: 120 / 138 Loss: 53.45833969116211 Tokens per Sec: 15497.571307996232
Epoch Step: 125 / 138 Loss: 65.78584289550781 Tokens per Sec: 15547.809108216514
Epoch Step: 130 / 138 Loss: 74.95925903320312 Tokens per Sec: 15068.631378397633
Epoch Step: 135 / 138 Loss: 46.673587799072266 Tokens per Sec: 13785.260505303215
Epoch ended with duration 0:00:40.095544
Train perplexity: 3.221695590219752
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 , TYPE_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( source : : : : { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_1 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_3 , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , int VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ) { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , e ) { METHOD_6 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) != null ) { for ( TYPE_1 VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_1 + STRING_2 + STRING_3 ) + STRING_2 ) ; } . METHOD_2 ( VAR_4 , , , ( ) , null , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.745837
Validation perplexity: 2.7079621215011938
Model saved best_on_validation!
Epoch 20 / 1000
Epoch Step: 5 / 138 Loss: 63.56960678100586 Tokens per Sec: 14834.348884272373
Epoch Step: 10 / 138 Loss: 82.88553619384766 Tokens per Sec: 14615.607683611475
Epoch Step: 15 / 138 Loss: 53.47273254394531 Tokens per Sec: 16233.93729600217
Epoch Step: 20 / 138 Loss: 81.77870178222656 Tokens per Sec: 14772.838239356939
Epoch Step: 25 / 138 Loss: 41.17565155029297 Tokens per Sec: 15615.181607809058
Epoch Step: 30 / 138 Loss: 39.84946060180664 Tokens per Sec: 16503.77321191092
Epoch Step: 35 / 138 Loss: 78.8451919555664 Tokens per Sec: 15261.949444640846
Epoch Step: 40 / 138 Loss: 83.30756378173828 Tokens per Sec: 17715.26289069518
Epoch Step: 45 / 138 Loss: 69.4141845703125 Tokens per Sec: 18311.222844657903
Epoch Step: 50 / 138 Loss: 78.86035919189453 Tokens per Sec: 17036.309406134096
Epoch Step: 55 / 138 Loss: 222.31588745117188 Tokens per Sec: 14282.951248454354
Epoch Step: 60 / 138 Loss: 290.1307678222656 Tokens per Sec: 16194.15434150484
Epoch Step: 65 / 138 Loss: 231.12083435058594 Tokens per Sec: 17341.139236039766
Epoch Step: 70 / 138 Loss: 39.37340545654297 Tokens per Sec: 16311.533441558675
Epoch Step: 75 / 138 Loss: 62.87158966064453 Tokens per Sec: 16506.99841039996
Epoch Step: 80 / 138 Loss: 95.58501434326172 Tokens per Sec: 16382.249755248184
Epoch Step: 85 / 138 Loss: 65.06480407714844 Tokens per Sec: 15261.807944218772
Epoch Step: 90 / 138 Loss: 42.54166793823242 Tokens per Sec: 15802.577419687152
Epoch Step: 95 / 138 Loss: 52.10552978515625 Tokens per Sec: 16638.22083778059
Epoch Step: 100 / 138 Loss: 68.69935607910156 Tokens per Sec: 16116.23754574535
Epoch Step: 105 / 138 Loss: 48.99419403076172 Tokens per Sec: 15040.095356855512
Epoch Step: 110 / 138 Loss: 209.47950744628906 Tokens per Sec: 15872.559837510935
Epoch Step: 115 / 138 Loss: 79.62671661376953 Tokens per Sec: 16241.145035129675
Epoch Step: 120 / 138 Loss: 46.13795852661133 Tokens per Sec: 14940.944979764736
Epoch Step: 125 / 138 Loss: 58.20184326171875 Tokens per Sec: 14615.980084324758
Epoch Step: 130 / 138 Loss: 73.6476821899414 Tokens per Sec: 16124.258490591867
Epoch Step: 135 / 138 Loss: 71.23452758789062 Tokens per Sec: 14258.999464755998
Epoch ended with duration 0:00:40.352505
Train perplexity: 2.923561095700538
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , byte [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer : : : { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_3 , VAR_3 , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , int VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ) { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , e ) { METHOD_6 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) != null ) { for ( TYPE_1 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 + STRING_3 ) + STRING_2 ) ; } . METHOD_2 ( VAR_4 , , , name ( ) . METHOD_4 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.756980
Validation perplexity: 2.573610704852507
Model saved best_on_validation!
Model saved checkpoint!
Epoch 21 / 1000
Epoch Step: 5 / 138 Loss: 49.655860900878906 Tokens per Sec: 16982.677622114144
Epoch Step: 10 / 138 Loss: 71.07844543457031 Tokens per Sec: 17821.24607538104
Epoch Step: 15 / 138 Loss: 76.95140838623047 Tokens per Sec: 15375.144358837762
Epoch Step: 20 / 138 Loss: 201.54583740234375 Tokens per Sec: 16225.807982940309
Epoch Step: 25 / 138 Loss: 61.77382278442383 Tokens per Sec: 14897.937974302604
Epoch Step: 30 / 138 Loss: 55.718017578125 Tokens per Sec: 15677.434656663405
Epoch Step: 35 / 138 Loss: 52.0178108215332 Tokens per Sec: 17426.848871313927
Epoch Step: 40 / 138 Loss: 48.370330810546875 Tokens per Sec: 16753.743397850885
Epoch Step: 45 / 138 Loss: 55.92694091796875 Tokens per Sec: 16408.042069028386
Epoch Step: 50 / 138 Loss: 74.97453308105469 Tokens per Sec: 15910.118339060917
Epoch Step: 55 / 138 Loss: 53.33606719970703 Tokens per Sec: 16518.168466213247
Epoch Step: 60 / 138 Loss: 64.21305084228516 Tokens per Sec: 16715.94757435002
Epoch Step: 65 / 138 Loss: 73.35203552246094 Tokens per Sec: 14228.494104516712
Epoch Step: 70 / 138 Loss: 79.89026641845703 Tokens per Sec: 15475.322486848143
Epoch Step: 75 / 138 Loss: 71.41899108886719 Tokens per Sec: 15172.915794030312
Epoch Step: 80 / 138 Loss: 52.6811637878418 Tokens per Sec: 15387.953349327716
Epoch Step: 85 / 138 Loss: 39.81058120727539 Tokens per Sec: 17050.13401621277
Epoch Step: 90 / 138 Loss: 53.49811935424805 Tokens per Sec: 16944.58814766144
Epoch Step: 95 / 138 Loss: 41.199607849121094 Tokens per Sec: 16570.870373247973
Epoch Step: 100 / 138 Loss: 81.29033660888672 Tokens per Sec: 15577.743317886388
Epoch Step: 105 / 138 Loss: 101.37016296386719 Tokens per Sec: 14042.4082906578
Epoch Step: 110 / 138 Loss: 64.03910064697266 Tokens per Sec: 16578.03971215251
Epoch Step: 115 / 138 Loss: 56.480003356933594 Tokens per Sec: 15137.976765597783
Epoch Step: 120 / 138 Loss: 76.26219940185547 Tokens per Sec: 14951.190264173345
Epoch Step: 125 / 138 Loss: 62.664024353027344 Tokens per Sec: 15361.767981488723
Epoch Step: 130 / 138 Loss: 48.19504165649414 Tokens per Sec: 15359.805436124856
Epoch Step: 135 / 138 Loss: 48.81558609008789 Tokens per Sec: 15421.38908374402
Epoch ended with duration 0:00:40.171041
Train perplexity: 3.0126085212497165
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer : : : ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_1 , 0 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ) { try { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_6 ) ; } catch ( STRING_1 , STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) != null ) { for ( TYPE_1 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 + STRING_3 ) + STRING_3 ) ; r . METHOD_2 ( VAR_4 , , , name ( ) , VAR_3 , VAR_3 , null , null ) ; } } }[0m
Epoch ended with duration 0:00:01.775400
Validation perplexity: 3.654944705864903
Epoch 22 / 1000
Epoch Step: 5 / 138 Loss: 56.369747161865234 Tokens per Sec: 16415.238218645973
Epoch Step: 10 / 138 Loss: 52.36709976196289 Tokens per Sec: 14147.934634386595
Epoch Step: 15 / 138 Loss: 170.96685791015625 Tokens per Sec: 15927.243085184493
Epoch Step: 20 / 138 Loss: 78.50247192382812 Tokens per Sec: 16181.60659767057
Epoch Step: 25 / 138 Loss: 53.88261795043945 Tokens per Sec: 16065.682820014807
Epoch Step: 30 / 138 Loss: 68.30081176757812 Tokens per Sec: 15849.807836507674
Epoch Step: 35 / 138 Loss: 68.36661529541016 Tokens per Sec: 16145.804166008083
Epoch Step: 40 / 138 Loss: 36.432865142822266 Tokens per Sec: 16625.37191476261
Epoch Step: 45 / 138 Loss: 40.51201248168945 Tokens per Sec: 16620.59054187585
Epoch Step: 50 / 138 Loss: 43.52800750732422 Tokens per Sec: 16048.433917049291
Epoch Step: 55 / 138 Loss: 61.3514404296875 Tokens per Sec: 15510.882387908829
Epoch Step: 60 / 138 Loss: 54.739131927490234 Tokens per Sec: 15593.336629008943
Epoch Step: 65 / 138 Loss: 50.68710708618164 Tokens per Sec: 17618.558143370818
Epoch Step: 70 / 138 Loss: 74.06745147705078 Tokens per Sec: 16816.20504057587
Epoch Step: 75 / 138 Loss: 68.27251434326172 Tokens per Sec: 15589.382813692491
Epoch Step: 80 / 138 Loss: 41.382781982421875 Tokens per Sec: 15364.828718391385
Epoch Step: 85 / 138 Loss: 38.86933517456055 Tokens per Sec: 16453.020737287265
Epoch Step: 90 / 138 Loss: 50.413734436035156 Tokens per Sec: 17575.384518748102
Epoch Step: 95 / 138 Loss: 68.78154754638672 Tokens per Sec: 15506.660621057017
Epoch Step: 100 / 138 Loss: 56.94297409057617 Tokens per Sec: 16582.779435884462
Epoch Step: 105 / 138 Loss: 238.11473083496094 Tokens per Sec: 13240.304761964782
Epoch Step: 110 / 138 Loss: 275.5924072265625 Tokens per Sec: 15813.499882977942
Epoch Step: 115 / 138 Loss: 36.28854751586914 Tokens per Sec: 15204.79237649263
Epoch Step: 120 / 138 Loss: 200.97413635253906 Tokens per Sec: 15617.753548731751
Epoch Step: 125 / 138 Loss: 57.20698547363281 Tokens per Sec: 16203.102543143255
Epoch Step: 130 / 138 Loss: 62.79985427856445 Tokens per Sec: 15259.684964502858
Epoch Step: 135 / 138 Loss: 47.521663665771484 Tokens per Sec: 15674.326586595094
Epoch ended with duration 0:00:40.230917
Train perplexity: 2.6513488108220575
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer : : : ) { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 . METHOD_3 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_2 , VAR_2 , VAR_2 , VAR_3 , VAR_3 , VAR_3 , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ) != null ) { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , e ) . METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) != null ) { for ( TYPE_1 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 + STRING_3 ) + STRING_2 ) ; r . METHOD_2 ( VAR_4 , , name , ( ) , VAR_3 , null , null ) ; } } }[0m
Epoch ended with duration 0:00:01.774401
Validation perplexity: 2.4144690108154547
Model saved best_on_validation!
Epoch 23 / 1000
Epoch Step: 5 / 138 Loss: 55.08595275878906 Tokens per Sec: 15101.715786357392
Epoch Step: 10 / 138 Loss: 39.08898162841797 Tokens per Sec: 16126.156296680954
Epoch Step: 15 / 138 Loss: 32.305728912353516 Tokens per Sec: 18063.751228300564
Epoch Step: 20 / 138 Loss: 47.89173889160156 Tokens per Sec: 15835.448741658069
Epoch Step: 25 / 138 Loss: 55.16017150878906 Tokens per Sec: 16828.770708473825
Epoch Step: 30 / 138 Loss: 65.22347259521484 Tokens per Sec: 16820.20192883263
Epoch Step: 35 / 138 Loss: 44.520198822021484 Tokens per Sec: 16774.49613420339
Epoch Step: 40 / 138 Loss: 30.441770553588867 Tokens per Sec: 16995.774648117105
Epoch Step: 45 / 138 Loss: 207.065185546875 Tokens per Sec: 16306.926272967867
Epoch Step: 50 / 138 Loss: 50.780757904052734 Tokens per Sec: 16649.454294270876
Epoch Step: 55 / 138 Loss: 36.14211654663086 Tokens per Sec: 15688.120077620595
Epoch Step: 60 / 138 Loss: 42.12326431274414 Tokens per Sec: 15772.813666818914
Epoch Step: 65 / 138 Loss: 68.14990997314453 Tokens per Sec: 16445.81930598333
Epoch Step: 70 / 138 Loss: 55.55881881713867 Tokens per Sec: 16320.062942267126
Epoch Step: 75 / 138 Loss: 58.40203094482422 Tokens per Sec: 15184.352373678978
Epoch Step: 80 / 138 Loss: 72.24281311035156 Tokens per Sec: 15184.500738820941
Epoch Step: 85 / 138 Loss: 48.042179107666016 Tokens per Sec: 14902.643944648858
Epoch Step: 90 / 138 Loss: 47.1530647277832 Tokens per Sec: 16884.36818042789
Epoch Step: 95 / 138 Loss: 67.10684204101562 Tokens per Sec: 15374.478249365446
Epoch Step: 100 / 138 Loss: 57.59142303466797 Tokens per Sec: 17054.021695476822
Epoch Step: 105 / 138 Loss: 74.91868591308594 Tokens per Sec: 15838.29283324836
Epoch Step: 110 / 138 Loss: 69.58195495605469 Tokens per Sec: 15410.38416847283
Epoch Step: 115 / 138 Loss: 48.59040832519531 Tokens per Sec: 15444.807604809333
Epoch Step: 120 / 138 Loss: 60.81965637207031 Tokens per Sec: 13286.021819313091
Epoch Step: 125 / 138 Loss: 44.325340270996094 Tokens per Sec: 15899.725640269577
Epoch Step: 130 / 138 Loss: 51.39800262451172 Tokens per Sec: 15406.459150868026
Epoch Step: 135 / 138 Loss: 41.5565071105957 Tokens per Sec: 17207.643889525556
Epoch ended with duration 0:00:39.919048
Train perplexity: 2.9573941321781283
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer : : : { VAR_4 . METHOD_3 ( ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , boolean VAR_5 , int VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ) { { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 : VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 + STRING_3 ) + STRING_2 ) ; } . METHOD_2 ( VAR_4 , , , name . METHOD_3 ( ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:01.741638
Validation perplexity: 2.2881010794614545
Model saved best_on_validation!
Epoch 24 / 1000
Epoch Step: 5 / 138 Loss: 65.85848236083984 Tokens per Sec: 15031.69183668101
Epoch Step: 10 / 138 Loss: 41.3642692565918 Tokens per Sec: 17286.596484111073
Epoch Step: 15 / 138 Loss: 52.63572692871094 Tokens per Sec: 15964.659328827629
Epoch Step: 20 / 138 Loss: 50.74314498901367 Tokens per Sec: 15295.242433099427
Epoch Step: 25 / 138 Loss: 282.8514099121094 Tokens per Sec: 15503.17630688175
Epoch Step: 30 / 138 Loss: 50.00455093383789 Tokens per Sec: 16711.25586196785
Epoch Step: 35 / 138 Loss: 219.65496826171875 Tokens per Sec: 17646.671868741927
Epoch Step: 40 / 138 Loss: 293.88037109375 Tokens per Sec: 15860.556100519643
Epoch Step: 45 / 138 Loss: 43.054481506347656 Tokens per Sec: 15757.360179219819
Epoch Step: 50 / 138 Loss: 38.70868682861328 Tokens per Sec: 15380.878298405541
Epoch Step: 55 / 138 Loss: 62.06293869018555 Tokens per Sec: 15972.080522263215
Epoch Step: 60 / 138 Loss: 61.44981002807617 Tokens per Sec: 15926.73824719209
Epoch Step: 65 / 138 Loss: 65.49581146240234 Tokens per Sec: 17568.81543900343
Epoch Step: 70 / 138 Loss: 41.228904724121094 Tokens per Sec: 15786.52237709511
Epoch Step: 75 / 138 Loss: 60.769893646240234 Tokens per Sec: 14937.02848618611
Epoch Step: 80 / 138 Loss: 61.452449798583984 Tokens per Sec: 17079.19456024283
Epoch Step: 85 / 138 Loss: 41.946327209472656 Tokens per Sec: 18027.441763408482
Epoch Step: 90 / 138 Loss: 56.6457633972168 Tokens per Sec: 17611.00554281472
Epoch Step: 95 / 138 Loss: 66.30768585205078 Tokens per Sec: 16202.29127725414
Epoch Step: 100 / 138 Loss: 27.954330444335938 Tokens per Sec: 15453.381198931844
Epoch Step: 105 / 138 Loss: 36.962615966796875 Tokens per Sec: 15758.971115301365
Epoch Step: 110 / 138 Loss: 40.711490631103516 Tokens per Sec: 15461.904337674348
Epoch Step: 115 / 138 Loss: 67.21096801757812 Tokens per Sec: 13149.288651276136
Epoch Step: 120 / 138 Loss: 66.5074462890625 Tokens per Sec: 16196.914298007625
Epoch Step: 125 / 138 Loss: 53.680137634277344 Tokens per Sec: 15978.253079163995
Epoch Step: 130 / 138 Loss: 42.81538391113281 Tokens per Sec: 14921.166642093161
Epoch Step: 135 / 138 Loss: 48.685516357421875 Tokens per Sec: 15567.620221054538
Epoch ended with duration 0:00:39.954807
Train perplexity: 2.643179655569197
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer : : : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 : : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 + STRING_3 ) + STRING_3 ) ; r . METHOD_2 ( VAR_4 , , , name . METHOD_3 ( ) , VAR_3 , null , null ) ; } } }[0m
Epoch ended with duration 0:00:01.772922
Validation perplexity: 2.570653231644302
Epoch 25 / 1000
Epoch Step: 5 / 138 Loss: 46.059783935546875 Tokens per Sec: 16549.62497426292
Epoch Step: 10 / 138 Loss: 56.486026763916016 Tokens per Sec: 15219.725599135576
Epoch Step: 15 / 138 Loss: 218.913818359375 Tokens per Sec: 16535.824785614306
Epoch Step: 20 / 138 Loss: 47.00636672973633 Tokens per Sec: 15517.414972242039
Epoch Step: 25 / 138 Loss: 46.78516387939453 Tokens per Sec: 15908.92673939099
Epoch Step: 30 / 138 Loss: 33.177162170410156 Tokens per Sec: 16326.46874942176
Epoch Step: 35 / 138 Loss: 28.764991760253906 Tokens per Sec: 16132.863858069282
Epoch Step: 40 / 138 Loss: 52.025413513183594 Tokens per Sec: 16333.857477513264
Epoch Step: 45 / 138 Loss: 62.801849365234375 Tokens per Sec: 15913.583787640478
Epoch Step: 50 / 138 Loss: 34.78388595581055 Tokens per Sec: 15706.906856417878
Epoch Step: 55 / 138 Loss: 58.72386932373047 Tokens per Sec: 17343.25165452865
Epoch Step: 60 / 138 Loss: 40.61491012573242 Tokens per Sec: 16596.28829713111
Epoch Step: 65 / 138 Loss: 37.86486053466797 Tokens per Sec: 16744.37482286124
Epoch Step: 70 / 138 Loss: 31.563444137573242 Tokens per Sec: 15797.105287662507
Epoch Step: 75 / 138 Loss: 39.651309967041016 Tokens per Sec: 16575.362130448193
Epoch Step: 80 / 138 Loss: 60.099674224853516 Tokens per Sec: 16181.928108043798
Epoch Step: 85 / 138 Loss: 57.486183166503906 Tokens per Sec: 15220.339196735773
Epoch Step: 90 / 138 Loss: 44.712459564208984 Tokens per Sec: 14884.725326105186
Epoch Step: 95 / 138 Loss: 34.856910705566406 Tokens per Sec: 16196.972708637897
Epoch Step: 100 / 138 Loss: 50.23454284667969 Tokens per Sec: 17258.48514377503
Epoch Step: 105 / 138 Loss: 42.485050201416016 Tokens per Sec: 15846.416787085845
Epoch Step: 110 / 138 Loss: 38.438270568847656 Tokens per Sec: 15411.11281432315
Epoch Step: 115 / 138 Loss: 37.67028045654297 Tokens per Sec: 13924.027562289033
Epoch Step: 120 / 138 Loss: 61.36048889160156 Tokens per Sec: 15108.328164075527
Epoch Step: 125 / 138 Loss: 48.332115173339844 Tokens per Sec: 16035.523241260555
Epoch Step: 130 / 138 Loss: 50.94813537597656 Tokens per Sec: 14543.127641961779
Epoch Step: 135 / 138 Loss: 33.94462966918945 Tokens per Sec: 14769.536317004508
Epoch ended with duration 0:00:40.290389
Train perplexity: 2.182134735049838
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer : : : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 : VAR_2 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; r . METHOD_2 ( VAR_4 , name , name . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.767942
Validation perplexity: 2.4110432906949897
Model saved checkpoint!
Epoch 26 / 1000
Epoch Step: 5 / 138 Loss: 44.599246978759766 Tokens per Sec: 15423.98611971506
Epoch Step: 10 / 138 Loss: 39.509212493896484 Tokens per Sec: 15099.859530193742
Epoch Step: 15 / 138 Loss: 56.407501220703125 Tokens per Sec: 17605.504308333137
Epoch Step: 20 / 138 Loss: 155.734375 Tokens per Sec: 16677.231999336476
Epoch Step: 25 / 138 Loss: 45.12181854248047 Tokens per Sec: 16188.738131512355
Epoch Step: 30 / 138 Loss: 55.91585922241211 Tokens per Sec: 16006.47449334002
Epoch Step: 35 / 138 Loss: 37.24678039550781 Tokens per Sec: 16099.756885873814
Epoch Step: 40 / 138 Loss: 55.733795166015625 Tokens per Sec: 15160.319765921457
Epoch Step: 45 / 138 Loss: 166.49844360351562 Tokens per Sec: 17196.46292397389
Epoch Step: 50 / 138 Loss: 255.9292755126953 Tokens per Sec: 16488.516275969723
Epoch Step: 55 / 138 Loss: 37.62580490112305 Tokens per Sec: 16381.65355630992
Epoch Step: 60 / 138 Loss: 44.2734375 Tokens per Sec: 14977.19980056986
Epoch Step: 65 / 138 Loss: 45.1517448425293 Tokens per Sec: 16485.852616218104
Epoch Step: 70 / 138 Loss: 58.623233795166016 Tokens per Sec: 16383.929309969693
Epoch Step: 75 / 138 Loss: 44.59071350097656 Tokens per Sec: 17914.035454080982
Epoch Step: 80 / 138 Loss: 29.201053619384766 Tokens per Sec: 16442.07101124197
Epoch Step: 85 / 138 Loss: 39.61567306518555 Tokens per Sec: 16023.086071223033
Epoch Step: 90 / 138 Loss: 38.15632247924805 Tokens per Sec: 14867.909544955775
Epoch Step: 95 / 138 Loss: 146.8033905029297 Tokens per Sec: 16662.256104293
Epoch Step: 100 / 138 Loss: 53.3801155090332 Tokens per Sec: 15518.088105269224
Epoch Step: 105 / 138 Loss: 158.92893981933594 Tokens per Sec: 14867.319339813843
Epoch Step: 110 / 138 Loss: 41.88187789916992 Tokens per Sec: 15322.802533925977
Epoch Step: 115 / 138 Loss: 33.95216369628906 Tokens per Sec: 15468.53315057117
Epoch Step: 120 / 138 Loss: 36.02916717529297 Tokens per Sec: 15714.765895967874
Epoch Step: 125 / 138 Loss: 53.490699768066406 Tokens per Sec: 16799.585804927527
Epoch Step: 130 / 138 Loss: 48.83782196044922 Tokens per Sec: 15470.648673092976
Epoch Step: 135 / 138 Loss: 44.88447189331055 Tokens per Sec: 15115.285827172853
Epoch ended with duration 0:00:39.925459
Train perplexity: 2.2056000205287463
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , int [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer : : : ) { return METHOD_3 ( ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , METHOD_10 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_3 ) ; r . METHOD_2 ( VAR_4 , w , name . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.757670
Validation perplexity: 2.1615472053906832
Model saved best_on_validation!
Epoch 27 / 1000
Epoch Step: 5 / 138 Loss: 45.72782516479492 Tokens per Sec: 16383.021436584815
Epoch Step: 10 / 138 Loss: 44.551082611083984 Tokens per Sec: 15176.021723139304
Epoch Step: 15 / 138 Loss: 49.899879455566406 Tokens per Sec: 16251.59127865245
Epoch Step: 20 / 138 Loss: 28.687284469604492 Tokens per Sec: 15601.5718610706
Epoch Step: 25 / 138 Loss: 30.506864547729492 Tokens per Sec: 15908.44368075921
Epoch Step: 30 / 138 Loss: 27.592529296875 Tokens per Sec: 16251.560495727566
Epoch Step: 35 / 138 Loss: 39.84197235107422 Tokens per Sec: 15324.778033713315
Epoch Step: 40 / 138 Loss: 42.62778091430664 Tokens per Sec: 14970.520822151817
Epoch Step: 45 / 138 Loss: 274.06549072265625 Tokens per Sec: 16080.505178644245
Epoch Step: 50 / 138 Loss: 36.47507858276367 Tokens per Sec: 17231.572599715048
Epoch Step: 55 / 138 Loss: 310.37054443359375 Tokens per Sec: 16010.16220829763
Epoch Step: 60 / 138 Loss: 34.80049514770508 Tokens per Sec: 17062.427168379338
Epoch Step: 65 / 138 Loss: 53.54383850097656 Tokens per Sec: 16013.050261487788
Epoch Step: 70 / 138 Loss: 28.177486419677734 Tokens per Sec: 14992.190321217144
Epoch Step: 75 / 138 Loss: 48.36474609375 Tokens per Sec: 15316.564039689209
Epoch Step: 80 / 138 Loss: 35.170066833496094 Tokens per Sec: 17420.232646690514
Epoch Step: 85 / 138 Loss: 193.5640106201172 Tokens per Sec: 18001.82673105383
Epoch Step: 90 / 138 Loss: 80.68608093261719 Tokens per Sec: 16264.940248746316
Epoch Step: 95 / 138 Loss: 39.07597732543945 Tokens per Sec: 16006.667534853737
Epoch Step: 100 / 138 Loss: 44.50445556640625 Tokens per Sec: 16087.221848185245
Epoch Step: 105 / 138 Loss: 54.56407165527344 Tokens per Sec: 16398.210169095193
Epoch Step: 110 / 138 Loss: 172.03097534179688 Tokens per Sec: 13247.567041400129
Epoch Step: 115 / 138 Loss: 37.67136001586914 Tokens per Sec: 15249.690120238713
Epoch Step: 120 / 138 Loss: 38.07200241088867 Tokens per Sec: 16510.372151027008
Epoch Step: 125 / 138 Loss: 46.52687454223633 Tokens per Sec: 14499.567624696512
Epoch Step: 130 / 138 Loss: 45.071529388427734 Tokens per Sec: 15265.84546270506
Epoch Step: 135 / 138 Loss: 39.9222412109375 Tokens per Sec: 15153.316427814092
Epoch ended with duration 0:00:40.356123
Train perplexity: 2.3485966966918226
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , java.lang.Integer VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer : : : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) , null ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 status : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; r . METHOD_2 ( VAR_4 , w , name . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.781220
Validation perplexity: 2.226566797654247
Epoch 28 / 1000
Epoch Step: 5 / 138 Loss: 38.95311737060547 Tokens per Sec: 15152.737537308532
Epoch Step: 10 / 138 Loss: 50.22259521484375 Tokens per Sec: 16177.933889568649
Epoch Step: 15 / 138 Loss: 188.13772583007812 Tokens per Sec: 16103.092414184146
Epoch Step: 20 / 138 Loss: 48.525794982910156 Tokens per Sec: 15256.60485361173
Epoch Step: 25 / 138 Loss: 29.60969352722168 Tokens per Sec: 15848.041009125816
Epoch Step: 30 / 138 Loss: 42.195552825927734 Tokens per Sec: 15643.397520909437
Epoch Step: 35 / 138 Loss: 37.466644287109375 Tokens per Sec: 15721.651210526767
Epoch Step: 40 / 138 Loss: 52.30559539794922 Tokens per Sec: 16044.00359218441
Epoch Step: 45 / 138 Loss: 49.9155387878418 Tokens per Sec: 15506.013913909852
Epoch Step: 50 / 138 Loss: 50.16394805908203 Tokens per Sec: 18269.47262188666
Epoch Step: 55 / 138 Loss: 40.029354095458984 Tokens per Sec: 17060.43193280813
Epoch Step: 60 / 138 Loss: 36.54943084716797 Tokens per Sec: 15488.80925656823
Epoch Step: 65 / 138 Loss: 58.0591926574707 Tokens per Sec: 16657.201342665834
Epoch Step: 70 / 138 Loss: 27.85538101196289 Tokens per Sec: 16157.540796294725
Epoch Step: 75 / 138 Loss: 45.18828582763672 Tokens per Sec: 16423.25619465484
Epoch Step: 80 / 138 Loss: 112.99944305419922 Tokens per Sec: 17309.16087929651
Epoch Step: 85 / 138 Loss: 26.592357635498047 Tokens per Sec: 15627.018516119975
Epoch Step: 90 / 138 Loss: 138.32003784179688 Tokens per Sec: 15385.06704925535
Epoch Step: 95 / 138 Loss: 240.7986602783203 Tokens per Sec: 16676.178939292095
Epoch Step: 100 / 138 Loss: 54.53058624267578 Tokens per Sec: 15774.598129844211
Epoch Step: 105 / 138 Loss: 166.50186157226562 Tokens per Sec: 15198.450267114966
Epoch Step: 110 / 138 Loss: 46.49831008911133 Tokens per Sec: 15070.127347507207
Epoch Step: 115 / 138 Loss: 36.823909759521484 Tokens per Sec: 14898.496409812602
Epoch Step: 120 / 138 Loss: 50.30192947387695 Tokens per Sec: 15358.463380426796
Epoch Step: 125 / 138 Loss: 25.278053283691406 Tokens per Sec: 13177.149873767603
Epoch Step: 130 / 138 Loss: 37.52086639404297 Tokens per Sec: 15572.375672296239
Epoch Step: 135 / 138 Loss: 29.199670791625977 Tokens per Sec: 15271.623738392462
Epoch ended with duration 0:00:40.415241
Train perplexity: 2.3906931751609193
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer key : : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) . METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 status : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 + STRING_3 ) + STRING_4 ) ; r . METHOD_2 ( VAR_4 , w , name . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.667872
Validation perplexity: 2.0703464534248437
Model saved best_on_validation!
Epoch 29 / 1000
Epoch Step: 5 / 138 Loss: 116.6864242553711 Tokens per Sec: 16177.15632876883
Epoch Step: 10 / 138 Loss: 30.422161102294922 Tokens per Sec: 17264.803737880204
Epoch Step: 15 / 138 Loss: 36.703125 Tokens per Sec: 15170.535498521556
Epoch Step: 20 / 138 Loss: 34.087318420410156 Tokens per Sec: 16596.541202171014
Epoch Step: 25 / 138 Loss: 41.50754165649414 Tokens per Sec: 16882.85458631008
Epoch Step: 30 / 138 Loss: 41.5374870300293 Tokens per Sec: 15472.202357826087
Epoch Step: 35 / 138 Loss: 44.72105026245117 Tokens per Sec: 16246.443817132164
Epoch Step: 40 / 138 Loss: 47.52653121948242 Tokens per Sec: 15598.264206896658
Epoch Step: 45 / 138 Loss: 56.767581939697266 Tokens per Sec: 15891.033084965438
Epoch Step: 50 / 138 Loss: 25.14699363708496 Tokens per Sec: 15579.246898630276
Epoch Step: 55 / 138 Loss: 51.43565368652344 Tokens per Sec: 16294.94148294272
Epoch Step: 60 / 138 Loss: 41.09434127807617 Tokens per Sec: 16167.945375799667
Epoch Step: 65 / 138 Loss: 41.01405715942383 Tokens per Sec: 15636.39527693843
Epoch Step: 70 / 138 Loss: 32.20743179321289 Tokens per Sec: 15983.138896118779
Epoch Step: 75 / 138 Loss: 44.14989471435547 Tokens per Sec: 15876.793919135418
Epoch Step: 80 / 138 Loss: 248.1728515625 Tokens per Sec: 14995.19852444565
Epoch Step: 85 / 138 Loss: 47.53278732299805 Tokens per Sec: 17368.21940157023
Epoch Step: 90 / 138 Loss: 33.46879959106445 Tokens per Sec: 15161.072918053336
Epoch Step: 95 / 138 Loss: 33.23178482055664 Tokens per Sec: 15405.565656083809
Epoch Step: 100 / 138 Loss: 37.35031509399414 Tokens per Sec: 15845.20808035282
Epoch Step: 105 / 138 Loss: 43.297298431396484 Tokens per Sec: 14941.565702710059
Epoch Step: 110 / 138 Loss: 45.92726516723633 Tokens per Sec: 15417.932323287514
Epoch Step: 115 / 138 Loss: 39.400447845458984 Tokens per Sec: 14403.285974368995
Epoch Step: 120 / 138 Loss: 53.8513298034668 Tokens per Sec: 15898.730719171663
Epoch Step: 125 / 138 Loss: 39.760581970214844 Tokens per Sec: 15163.710858178058
Epoch Step: 130 / 138 Loss: 46.65000915527344 Tokens per Sec: 14236.975397930295
Epoch Step: 135 / 138 Loss: 50.76945114135742 Tokens per Sec: 14571.031426406891
Epoch ended with duration 0:00:40.605756
Train perplexity: 2.442230671166841
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , java.lang.Integer VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( java.lang.Integer key : : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 status : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; com.google.common.truth.Truth.assertThat . METHOD_2 ( VAR_4 , w , , name . METHOD_3 ( ) , VAR_3 . METHOD_3 ( ) ) , null ) ; } }[0m
Epoch ended with duration 0:00:01.758808
Validation perplexity: 3.0593946774492538
Epoch 30 / 1000
Epoch Step: 5 / 138 Loss: 34.0493278503418 Tokens per Sec: 15849.972420971657
Epoch Step: 10 / 138 Loss: 42.45439529418945 Tokens per Sec: 16337.331509737809
Epoch Step: 15 / 138 Loss: 29.40983009338379 Tokens per Sec: 16318.429116672469
Epoch Step: 20 / 138 Loss: 36.3687858581543 Tokens per Sec: 16535.95273075271
Epoch Step: 25 / 138 Loss: 29.264142990112305 Tokens per Sec: 16925.93834546758
Epoch Step: 30 / 138 Loss: 37.98891830444336 Tokens per Sec: 14792.604528589633
Epoch Step: 35 / 138 Loss: 45.69416809082031 Tokens per Sec: 17266.553503166157
Epoch Step: 40 / 138 Loss: 44.054508209228516 Tokens per Sec: 14308.996362994696
Epoch Step: 45 / 138 Loss: 28.3620662689209 Tokens per Sec: 17176.31367057037
Epoch Step: 50 / 138 Loss: 42.735618591308594 Tokens per Sec: 15871.527436444174
Epoch Step: 55 / 138 Loss: 41.43996810913086 Tokens per Sec: 15531.002955420508
Epoch Step: 60 / 138 Loss: 37.78662109375 Tokens per Sec: 15204.39747855712
Epoch Step: 65 / 138 Loss: 27.150510787963867 Tokens per Sec: 14799.217675619657
Epoch Step: 70 / 138 Loss: 30.121660232543945 Tokens per Sec: 17844.082797524807
Epoch Step: 75 / 138 Loss: 40.22200012207031 Tokens per Sec: 17552.028561193605
Epoch Step: 80 / 138 Loss: 44.09926986694336 Tokens per Sec: 16469.25783158898
Epoch Step: 85 / 138 Loss: 40.82122802734375 Tokens per Sec: 16427.60521011027
Epoch Step: 90 / 138 Loss: 292.8452453613281 Tokens per Sec: 15941.278667697872
Epoch Step: 95 / 138 Loss: 39.8874626159668 Tokens per Sec: 15138.082388252069
Epoch Step: 100 / 138 Loss: 18.578092575073242 Tokens per Sec: 16466.32871109918
Epoch Step: 105 / 138 Loss: 31.850460052490234 Tokens per Sec: 14793.140281336537
Epoch Step: 110 / 138 Loss: 184.4029541015625 Tokens per Sec: 14760.416838976003
Epoch Step: 115 / 138 Loss: 30.949604034423828 Tokens per Sec: 14742.75930623473
Epoch Step: 120 / 138 Loss: 45.65258026123047 Tokens per Sec: 14987.024545664839
Epoch Step: 125 / 138 Loss: 45.021202087402344 Tokens per Sec: 15077.842683692466
Epoch Step: 130 / 138 Loss: 52.42030715942383 Tokens per Sec: 13641.278980871191
Epoch Step: 135 / 138 Loss: 28.8338565826416 Tokens per Sec: 15073.810463022613
Epoch ended with duration 0:00:40.583375
Train perplexity: 1.9793930713912093
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , java.lang.Integer VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) . METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 status : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; com.google.common.truth.Truth.assertThat . METHOD_2 ( VAR_4 , w , name . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.757722
Validation perplexity: 2.0321127862876502
Model saved best_on_validation!
Model saved checkpoint!
Epoch 31 / 1000
Epoch Step: 5 / 138 Loss: 31.140626907348633 Tokens per Sec: 15131.559968380561
Epoch Step: 10 / 138 Loss: 49.86749267578125 Tokens per Sec: 15951.529867256266
Epoch Step: 15 / 138 Loss: 38.35931396484375 Tokens per Sec: 17870.620266754642
Epoch Step: 20 / 138 Loss: 36.6500129699707 Tokens per Sec: 17002.79222305819
Epoch Step: 25 / 138 Loss: 22.172388076782227 Tokens per Sec: 15607.675003642265
Epoch Step: 30 / 138 Loss: 37.529361724853516 Tokens per Sec: 15869.424613761004
Epoch Step: 35 / 138 Loss: 38.46582794189453 Tokens per Sec: 17358.19734221637
Epoch Step: 40 / 138 Loss: 235.40576171875 Tokens per Sec: 16082.528966899454
Epoch Step: 45 / 138 Loss: 44.778175354003906 Tokens per Sec: 14999.65401734639
Epoch Step: 50 / 138 Loss: 38.48399353027344 Tokens per Sec: 15954.42659749152
Epoch Step: 55 / 138 Loss: 43.81522750854492 Tokens per Sec: 15978.542451283849
Epoch Step: 60 / 138 Loss: 43.47938919067383 Tokens per Sec: 16391.914992398084
Epoch Step: 65 / 138 Loss: 26.926685333251953 Tokens per Sec: 15805.831774159633
Epoch Step: 70 / 138 Loss: 25.240694046020508 Tokens per Sec: 16328.77355704751
Epoch Step: 75 / 138 Loss: 45.44275665283203 Tokens per Sec: 15950.661391527517
Epoch Step: 80 / 138 Loss: 42.58654022216797 Tokens per Sec: 16352.67763165337
Epoch Step: 85 / 138 Loss: 34.90632247924805 Tokens per Sec: 15280.363041930063
Epoch Step: 90 / 138 Loss: 30.287166595458984 Tokens per Sec: 16648.14303172901
Epoch Step: 95 / 138 Loss: 35.72406005859375 Tokens per Sec: 15530.3585643569
Epoch Step: 100 / 138 Loss: 35.10319137573242 Tokens per Sec: 16844.59172211034
Epoch Step: 105 / 138 Loss: 40.40195846557617 Tokens per Sec: 15437.078629322987
Epoch Step: 110 / 138 Loss: 26.63242530822754 Tokens per Sec: 14377.188437347857
Epoch Step: 115 / 138 Loss: 40.346378326416016 Tokens per Sec: 14573.216384801091
Epoch Step: 120 / 138 Loss: 29.09796714782715 Tokens per Sec: 14508.88579725475
Epoch Step: 125 / 138 Loss: 32.4712028503418 Tokens per Sec: 16529.832598029658
Epoch Step: 130 / 138 Loss: 31.063133239746094 Tokens per Sec: 15792.075193745028
Epoch Step: 135 / 138 Loss: 31.244348526000977 Tokens per Sec: 15279.12372656101
Epoch ended with duration 0:00:40.229555
Train perplexity: 1.8885231959943953
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_5 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) . METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_9 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 status : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; com.google.common.truth.Truth.assertThat . METHOD_2 ( VAR_4 , w , id . METHOD_3 ( ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.740834
Validation perplexity: 1.747255179803219
Model saved best_on_validation!
Epoch 32 / 1000
Epoch Step: 5 / 138 Loss: 34.47775650024414 Tokens per Sec: 16328.808246649174
Epoch Step: 10 / 138 Loss: 35.710838317871094 Tokens per Sec: 15095.509822069855
Epoch Step: 15 / 138 Loss: 27.45560073852539 Tokens per Sec: 16821.981947523378
Epoch Step: 20 / 138 Loss: 41.41188430786133 Tokens per Sec: 15794.092888019897
Epoch Step: 25 / 138 Loss: 202.77944946289062 Tokens per Sec: 16470.536808873807
Epoch Step: 30 / 138 Loss: 20.460037231445312 Tokens per Sec: 15610.518149478712
Epoch Step: 35 / 138 Loss: 23.773536682128906 Tokens per Sec: 17294.79428895971
Epoch Step: 40 / 138 Loss: 36.29250717163086 Tokens per Sec: 15292.78069311686
Epoch Step: 45 / 138 Loss: 20.576290130615234 Tokens per Sec: 17098.013495366722
Epoch Step: 50 / 138 Loss: 27.94277000427246 Tokens per Sec: 15394.58591160234
Epoch Step: 55 / 138 Loss: 32.005558013916016 Tokens per Sec: 14966.11204168053
Epoch Step: 60 / 138 Loss: 32.385536193847656 Tokens per Sec: 16208.199724220856
Epoch Step: 65 / 138 Loss: 46.523765563964844 Tokens per Sec: 15945.911967032705
Epoch Step: 70 / 138 Loss: 30.40019989013672 Tokens per Sec: 15795.501336086854
Epoch Step: 75 / 138 Loss: 26.966283798217773 Tokens per Sec: 14772.892313413626
Epoch Step: 80 / 138 Loss: 50.23139190673828 Tokens per Sec: 15806.097681167485
Epoch Step: 85 / 138 Loss: 38.544795989990234 Tokens per Sec: 18097.305355398337
Epoch Step: 90 / 138 Loss: 38.83395004272461 Tokens per Sec: 18451.753520877344
Epoch Step: 95 / 138 Loss: 36.18165969848633 Tokens per Sec: 15531.733861840126
Epoch Step: 100 / 138 Loss: 27.317659378051758 Tokens per Sec: 16167.80552445983
Epoch Step: 105 / 138 Loss: 40.60645294189453 Tokens per Sec: 16105.257794602921
Epoch Step: 110 / 138 Loss: 30.737680435180664 Tokens per Sec: 13847.890252168927
Epoch Step: 115 / 138 Loss: 31.66107177734375 Tokens per Sec: 15139.790747797533
Epoch Step: 120 / 138 Loss: 225.1234588623047 Tokens per Sec: 15010.739398490887
Epoch Step: 125 / 138 Loss: 29.57322883605957 Tokens per Sec: 14833.235906095166
Epoch Step: 130 / 138 Loss: 24.535926818847656 Tokens per Sec: 15533.869472269093
Epoch Step: 135 / 138 Loss: 40.071937561035156 Tokens per Sec: 14832.89084525984
Epoch ended with duration 0:00:40.344410
Train perplexity: 2.084497189223456
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , java.lang.Integer VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) . METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 status : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; com.google.common.truth.Truth.assertThat . METHOD_2 ( VAR_4 , w , mContext . METHOD_3 ( ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.741469
Validation perplexity: 1.530827500816811
Model saved best_on_validation!
Epoch 33 / 1000
Epoch Step: 5 / 138 Loss: 24.442630767822266 Tokens per Sec: 15149.049614651221
Epoch Step: 10 / 138 Loss: 25.86431884765625 Tokens per Sec: 15538.342207986689
Epoch Step: 15 / 138 Loss: 35.17479705810547 Tokens per Sec: 16751.429954123258
Epoch Step: 20 / 138 Loss: 35.906463623046875 Tokens per Sec: 16089.938374741252
Epoch Step: 25 / 138 Loss: 22.12791633605957 Tokens per Sec: 17012.038361496565
Epoch Step: 30 / 138 Loss: 41.845848083496094 Tokens per Sec: 15134.157760455519
Epoch Step: 35 / 138 Loss: 22.005346298217773 Tokens per Sec: 15920.441279243567
Epoch Step: 40 / 138 Loss: 32.0873908996582 Tokens per Sec: 16540.646791601
Epoch Step: 45 / 138 Loss: 37.389190673828125 Tokens per Sec: 17648.90088565779
Epoch Step: 50 / 138 Loss: 33.596981048583984 Tokens per Sec: 17007.160307762406
Epoch Step: 55 / 138 Loss: 40.41227340698242 Tokens per Sec: 16445.06658299114
Epoch Step: 60 / 138 Loss: 38.28520965576172 Tokens per Sec: 16603.720538897276
Epoch Step: 65 / 138 Loss: 33.14514923095703 Tokens per Sec: 16394.8063211755
Epoch Step: 70 / 138 Loss: 38.81768798828125 Tokens per Sec: 15642.67345394894
Epoch Step: 75 / 138 Loss: 37.211177825927734 Tokens per Sec: 16141.7325579558
Epoch Step: 80 / 138 Loss: 34.42411804199219 Tokens per Sec: 14495.116772801966
Epoch Step: 85 / 138 Loss: 26.588703155517578 Tokens per Sec: 15211.382802870718
Epoch Step: 90 / 138 Loss: 23.757078170776367 Tokens per Sec: 15430.193491318565
Epoch Step: 95 / 138 Loss: 20.32275390625 Tokens per Sec: 16884.150885762792
Epoch Step: 100 / 138 Loss: 41.185752868652344 Tokens per Sec: 17038.352560511255
Epoch Step: 105 / 138 Loss: 48.91313171386719 Tokens per Sec: 13839.243641152547
Epoch Step: 110 / 138 Loss: 30.56365203857422 Tokens per Sec: 14265.142121855117
Epoch Step: 115 / 138 Loss: 32.289093017578125 Tokens per Sec: 15168.395885829406
Epoch Step: 120 / 138 Loss: 38.15815353393555 Tokens per Sec: 15276.631503230317
Epoch Step: 125 / 138 Loss: 29.342653274536133 Tokens per Sec: 15463.751543467173
Epoch Step: 130 / 138 Loss: 40.690486907958984 Tokens per Sec: 14856.958382811925
Epoch Step: 135 / 138 Loss: 30.184520721435547 Tokens per Sec: 14915.541190585667
Epoch ended with duration 0:00:40.413694
Train perplexity: 1.838908643676269
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , java.lang.Integer VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) . METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_9 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 t : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; cm . METHOD_2 ( VAR_4 , w , mContext . METHOD_3 ( ) ) , null ) ; } }[0m
Epoch ended with duration 0:00:01.771249
Validation perplexity: 1.9132420040083846
Epoch 34 / 1000
Epoch Step: 5 / 138 Loss: 19.26712417602539 Tokens per Sec: 16393.30015504899
Epoch Step: 10 / 138 Loss: 20.556068420410156 Tokens per Sec: 17777.240199288277
Epoch Step: 15 / 138 Loss: 25.037921905517578 Tokens per Sec: 17320.374158161103
Epoch Step: 20 / 138 Loss: 40.252166748046875 Tokens per Sec: 16936.060076214886
Epoch Step: 25 / 138 Loss: 24.67428207397461 Tokens per Sec: 17024.15533582393
Epoch Step: 30 / 138 Loss: 23.613744735717773 Tokens per Sec: 16438.600830579042
Epoch Step: 35 / 138 Loss: 30.524700164794922 Tokens per Sec: 16322.665705134948
Epoch Step: 40 / 138 Loss: 98.69247436523438 Tokens per Sec: 15271.93341948355
Epoch Step: 45 / 138 Loss: 21.66427230834961 Tokens per Sec: 16108.962084717952
Epoch Step: 50 / 138 Loss: 41.52454376220703 Tokens per Sec: 16115.694724545448
Epoch Step: 55 / 138 Loss: 24.09762954711914 Tokens per Sec: 15839.682066968882
Epoch Step: 60 / 138 Loss: 35.12565612792969 Tokens per Sec: 15352.548368162983
Epoch Step: 65 / 138 Loss: 35.73119354248047 Tokens per Sec: 16080.083727750489
Epoch Step: 70 / 138 Loss: 19.939647674560547 Tokens per Sec: 16668.429138914144
Epoch Step: 75 / 138 Loss: 213.9412384033203 Tokens per Sec: 16014.163433405258
Epoch Step: 80 / 138 Loss: 26.907333374023438 Tokens per Sec: 15408.696864540498
Epoch Step: 85 / 138 Loss: 23.981054306030273 Tokens per Sec: 16164.213054654723
Epoch Step: 90 / 138 Loss: 30.667537689208984 Tokens per Sec: 16370.31656247266
Epoch Step: 95 / 138 Loss: 39.4334831237793 Tokens per Sec: 15415.381834942224
Epoch Step: 100 / 138 Loss: 30.109214782714844 Tokens per Sec: 15398.086593019068
Epoch Step: 105 / 138 Loss: 26.994792938232422 Tokens per Sec: 15691.942496046979
Epoch Step: 110 / 138 Loss: 26.838274002075195 Tokens per Sec: 15009.554753397235
Epoch Step: 115 / 138 Loss: 37.8479118347168 Tokens per Sec: 16541.239727166027
Epoch Step: 120 / 138 Loss: 29.999183654785156 Tokens per Sec: 15020.940434198528
Epoch Step: 125 / 138 Loss: 30.39109992980957 Tokens per Sec: 15717.680204737475
Epoch Step: 130 / 138 Loss: 32.97925567626953 Tokens per Sec: 13809.558111101625
Epoch Step: 135 / 138 Loss: 24.183773040771484 Tokens per Sec: 14891.215667906812
Epoch ended with duration 0:00:39.981330
Train perplexity: 1.9075681196437573
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , java.lang.Integer VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 t : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; com.google.common.truth.Truth.assertThat . METHOD_2 ( VAR_4 , w , mContext . METHOD_3 ( ) ) , null ) ; } }[0m
Epoch ended with duration 0:00:01.757531
Validation perplexity: 2.0148803121062904
Epoch 35 / 1000
Epoch Step: 5 / 138 Loss: 38.55789566040039 Tokens per Sec: 15558.27119631506
Epoch Step: 10 / 138 Loss: 34.41957092285156 Tokens per Sec: 16572.425835669175
Epoch Step: 15 / 138 Loss: 220.30599975585938 Tokens per Sec: 15982.980311696145
Epoch Step: 20 / 138 Loss: 142.01596069335938 Tokens per Sec: 16474.712850980977
Epoch Step: 25 / 138 Loss: 131.39549255371094 Tokens per Sec: 15964.132992970555
Epoch Step: 30 / 138 Loss: 28.221616744995117 Tokens per Sec: 15261.900328112464
Epoch Step: 35 / 138 Loss: 19.522192001342773 Tokens per Sec: 15932.379922733893
Epoch Step: 40 / 138 Loss: 44.42201614379883 Tokens per Sec: 16346.614787879591
Epoch Step: 45 / 138 Loss: 34.8388671875 Tokens per Sec: 17421.22284705457
Epoch Step: 50 / 138 Loss: 44.00339889526367 Tokens per Sec: 15473.816824675047
Epoch Step: 55 / 138 Loss: 208.24481201171875 Tokens per Sec: 14679.38573251863
Epoch Step: 60 / 138 Loss: 24.34735870361328 Tokens per Sec: 16373.373388763825
Epoch Step: 65 / 138 Loss: 44.15044021606445 Tokens per Sec: 16463.47979038391
Epoch Step: 70 / 138 Loss: 30.201026916503906 Tokens per Sec: 16619.12872997919
Epoch Step: 75 / 138 Loss: 38.95348358154297 Tokens per Sec: 15333.260842725416
Epoch Step: 80 / 138 Loss: 41.00508499145508 Tokens per Sec: 14670.939521799859
Epoch Step: 85 / 138 Loss: 137.79727172851562 Tokens per Sec: 16079.659941267313
Epoch Step: 90 / 138 Loss: 31.529958724975586 Tokens per Sec: 15735.029234328364
Epoch Step: 95 / 138 Loss: 22.34876823425293 Tokens per Sec: 16113.566834941541
Epoch Step: 100 / 138 Loss: 19.166725158691406 Tokens per Sec: 17255.595677060475
Epoch Step: 105 / 138 Loss: 211.28819274902344 Tokens per Sec: 14858.545573120515
Epoch Step: 110 / 138 Loss: 29.630939483642578 Tokens per Sec: 15472.711152864984
Epoch Step: 115 / 138 Loss: 37.461952209472656 Tokens per Sec: 13487.530307718785
Epoch Step: 120 / 138 Loss: 25.237586975097656 Tokens per Sec: 15013.493389528197
Epoch Step: 125 / 138 Loss: 27.85988426208496 Tokens per Sec: 14856.732128806583
Epoch Step: 130 / 138 Loss: 106.5920181274414 Tokens per Sec: 14951.584014128795
Epoch Step: 135 / 138 Loss: 25.262739181518555 Tokens per Sec: 15631.378144567863
Epoch ended with duration 0:00:40.730747
Train perplexity: 2.033497054792968
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , METHOD_10 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; com.google.common.truth.Truth.assertThat . METHOD_2 ( VAR_4 , w , mContext . METHOD_3 ( ) ) , null ) ; } }[0m
Epoch ended with duration 0:00:01.740319
Validation perplexity: 1.6229391404426619
Model saved checkpoint!
Epoch 36 / 1000
Epoch Step: 5 / 138 Loss: 32.62709426879883 Tokens per Sec: 15852.700876245677
Epoch Step: 10 / 138 Loss: 26.709854125976562 Tokens per Sec: 15640.493669598041
Epoch Step: 15 / 138 Loss: 30.369874954223633 Tokens per Sec: 15794.231316358715
Epoch Step: 20 / 138 Loss: 30.81174087524414 Tokens per Sec: 15184.175117838196
Epoch Step: 25 / 138 Loss: 25.43402099609375 Tokens per Sec: 16270.473084050001
Epoch Step: 30 / 138 Loss: 37.465084075927734 Tokens per Sec: 17725.412633731612
Epoch Step: 35 / 138 Loss: 26.27574348449707 Tokens per Sec: 15810.665916994833
Epoch Step: 40 / 138 Loss: 163.49365234375 Tokens per Sec: 16170.898627560637
Epoch Step: 45 / 138 Loss: 29.231250762939453 Tokens per Sec: 16998.106610819796
Epoch Step: 50 / 138 Loss: 28.174808502197266 Tokens per Sec: 16919.773047817886
Epoch Step: 55 / 138 Loss: 19.463363647460938 Tokens per Sec: 16925.500461503692
Epoch Step: 60 / 138 Loss: 215.77056884765625 Tokens per Sec: 15942.859519835521
Epoch Step: 65 / 138 Loss: 22.804325103759766 Tokens per Sec: 16943.347035807772
Epoch Step: 70 / 138 Loss: 32.873348236083984 Tokens per Sec: 16300.209754010762
Epoch Step: 75 / 138 Loss: 171.41815185546875 Tokens per Sec: 14741.559968609134
Epoch Step: 80 / 138 Loss: 31.29314422607422 Tokens per Sec: 15643.209525972006
Epoch Step: 85 / 138 Loss: 30.803688049316406 Tokens per Sec: 15638.510994659062
Epoch Step: 90 / 138 Loss: 38.69994354248047 Tokens per Sec: 16183.79704894805
Epoch Step: 95 / 138 Loss: 28.407127380371094 Tokens per Sec: 15445.214929583082
Epoch Step: 100 / 138 Loss: 18.867563247680664 Tokens per Sec: 16885.133674902914
Epoch Step: 105 / 138 Loss: 20.643388748168945 Tokens per Sec: 15234.71029206077
Epoch Step: 110 / 138 Loss: 26.817195892333984 Tokens per Sec: 15378.442895851778
Epoch Step: 115 / 138 Loss: 21.8726863861084 Tokens per Sec: 14628.68804757691
Epoch Step: 120 / 138 Loss: 30.70638656616211 Tokens per Sec: 15378.25869780809
Epoch Step: 125 / 138 Loss: 37.65021514892578 Tokens per Sec: 17835.158914856445
Epoch Step: 130 / 138 Loss: 35.870662689208984 Tokens per Sec: 17126.65847371713
Epoch Step: 135 / 138 Loss: 37.12386703491211 Tokens per Sec: 13565.803398097969
Epoch ended with duration 0:00:39.953939
Train perplexity: 1.6597466808013008
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , java.lang.Integer VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) . METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , w , mContext . METHOD_3 ( ) ) , null ) ; } }[0m
Epoch ended with duration 0:00:01.779674
Validation perplexity: 2.0826917786184906
Epoch 37 / 1000
Epoch Step: 5 / 138 Loss: 38.240516662597656 Tokens per Sec: 15523.816256927643
Epoch Step: 10 / 138 Loss: 30.416074752807617 Tokens per Sec: 15303.138129763562
Epoch Step: 15 / 138 Loss: 27.901559829711914 Tokens per Sec: 15681.354200704443
Epoch Step: 20 / 138 Loss: 37.549068450927734 Tokens per Sec: 16351.487020317933
Epoch Step: 25 / 138 Loss: 122.52503204345703 Tokens per Sec: 17173.2634774564
Epoch Step: 30 / 138 Loss: 30.78249740600586 Tokens per Sec: 15922.72865123605
Epoch Step: 35 / 138 Loss: 38.382564544677734 Tokens per Sec: 15927.391164341621
Epoch Step: 40 / 138 Loss: 40.84613800048828 Tokens per Sec: 16409.054469222574
Epoch Step: 45 / 138 Loss: 18.777881622314453 Tokens per Sec: 17387.108209591992
Epoch Step: 50 / 138 Loss: 18.150684356689453 Tokens per Sec: 16264.363259414156
Epoch Step: 55 / 138 Loss: 27.366357803344727 Tokens per Sec: 16054.339661148795
Epoch Step: 60 / 138 Loss: 23.68471908569336 Tokens per Sec: 14355.090331568823
Epoch Step: 65 / 138 Loss: 15.200185775756836 Tokens per Sec: 15874.80207600225
Epoch Step: 70 / 138 Loss: 37.357460021972656 Tokens per Sec: 15335.382634616793
Epoch Step: 75 / 138 Loss: 26.515897750854492 Tokens per Sec: 14553.715328912047
Epoch Step: 80 / 138 Loss: 26.824922561645508 Tokens per Sec: 16332.776681074134
Epoch Step: 85 / 138 Loss: 30.205013275146484 Tokens per Sec: 16410.545756370648
Epoch Step: 90 / 138 Loss: 18.797292709350586 Tokens per Sec: 16360.633606951491
Epoch Step: 95 / 138 Loss: 33.226314544677734 Tokens per Sec: 17800.352970387332
Epoch Step: 100 / 138 Loss: 56.25523376464844 Tokens per Sec: 18227.743297572462
Epoch Step: 105 / 138 Loss: 51.96233367919922 Tokens per Sec: 15146.534349587684
Epoch Step: 110 / 138 Loss: 25.857189178466797 Tokens per Sec: 15255.18341642328
Epoch Step: 115 / 138 Loss: 136.6208953857422 Tokens per Sec: 15269.478393299125
Epoch Step: 120 / 138 Loss: 41.013675689697266 Tokens per Sec: 15657.937401160034
Epoch Step: 125 / 138 Loss: 26.55198097229004 Tokens per Sec: 14972.563865030703
Epoch Step: 130 / 138 Loss: 118.19690704345703 Tokens per Sec: 14873.599545061728
Epoch Step: 135 / 138 Loss: 31.90801429748535 Tokens per Sec: 15663.819541211316
Epoch ended with duration 0:00:40.379257
Train perplexity: 1.9551930286281525
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , java.lang.Integer VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , w , , mContext . METHOD_3 ( value ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.749435
Validation perplexity: 1.5687693292258422
Epoch 38 / 1000
Epoch Step: 5 / 138 Loss: 16.238780975341797 Tokens per Sec: 17665.802560595213
Epoch Step: 10 / 138 Loss: 22.328800201416016 Tokens per Sec: 15944.056437636016
Epoch Step: 15 / 138 Loss: 35.89291000366211 Tokens per Sec: 16535.87291818916
Epoch Step: 20 / 138 Loss: 158.96572875976562 Tokens per Sec: 14880.251338823085
Epoch Step: 25 / 138 Loss: 27.4636287689209 Tokens per Sec: 16287.054981703053
Epoch Step: 30 / 138 Loss: 32.65425491333008 Tokens per Sec: 15713.06732185931
Epoch Step: 35 / 138 Loss: 30.699857711791992 Tokens per Sec: 14306.811686242256
Epoch Step: 40 / 138 Loss: 17.444061279296875 Tokens per Sec: 16211.052806433703
Epoch Step: 45 / 138 Loss: 24.371274948120117 Tokens per Sec: 16047.556511505214
Epoch Step: 50 / 138 Loss: 26.692096710205078 Tokens per Sec: 17141.033704500795
Epoch Step: 55 / 138 Loss: 229.92140197753906 Tokens per Sec: 17990.3341195801
Epoch Step: 60 / 138 Loss: 15.38361930847168 Tokens per Sec: 14995.751140836534
Epoch Step: 65 / 138 Loss: 33.962886810302734 Tokens per Sec: 15320.648727139713
Epoch Step: 70 / 138 Loss: 32.99215316772461 Tokens per Sec: 17328.90496498533
Epoch Step: 75 / 138 Loss: 122.73082733154297 Tokens per Sec: 15100.500451562246
Epoch Step: 80 / 138 Loss: 29.875795364379883 Tokens per Sec: 15505.913459690086
Epoch Step: 85 / 138 Loss: 217.8385467529297 Tokens per Sec: 15284.740550505838
Epoch Step: 90 / 138 Loss: 20.042842864990234 Tokens per Sec: 15526.04222396478
Epoch Step: 95 / 138 Loss: 24.740957260131836 Tokens per Sec: 15522.087749236152
Epoch Step: 100 / 138 Loss: 28.646968841552734 Tokens per Sec: 17192.33125292998
Epoch Step: 105 / 138 Loss: 36.461246490478516 Tokens per Sec: 15109.340555416826
Epoch Step: 110 / 138 Loss: 25.245159149169922 Tokens per Sec: 12986.923764456209
Epoch Step: 115 / 138 Loss: 20.51850700378418 Tokens per Sec: 15987.716363079533
Epoch Step: 120 / 138 Loss: 26.40633773803711 Tokens per Sec: 15832.8446023242
Epoch Step: 125 / 138 Loss: 27.23154640197754 Tokens per Sec: 14524.367189490482
Epoch Step: 130 / 138 Loss: 25.63372802734375 Tokens per Sec: 15055.54080775006
Epoch Step: 135 / 138 Loss: 22.380958557128906 Tokens per Sec: 15226.616416580035
Epoch ended with duration 0:00:40.639212
Train perplexity: 1.9359948665591624
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , w , mContext . METHOD_3 ( ) ) , null ) ; } } }[0m
Epoch ended with duration 0:00:01.783798
Validation perplexity: 1.6983749368215417
Epoch 39 / 1000
Epoch Step: 5 / 138 Loss: 35.1891975402832 Tokens per Sec: 16250.673754771606
Epoch Step: 10 / 138 Loss: 140.19973754882812 Tokens per Sec: 16600.070255333878
Epoch Step: 15 / 138 Loss: 20.55336570739746 Tokens per Sec: 16949.72525112292
Epoch Step: 20 / 138 Loss: 33.3671989440918 Tokens per Sec: 16790.225671674743
Epoch Step: 25 / 138 Loss: 22.83730697631836 Tokens per Sec: 16550.068785043124
Epoch Step: 30 / 138 Loss: 39.776512145996094 Tokens per Sec: 16683.71936159063
Epoch Step: 35 / 138 Loss: 41.474449157714844 Tokens per Sec: 15116.038401599055
Epoch Step: 40 / 138 Loss: 270.4399108886719 Tokens per Sec: 16411.29288802578
Epoch Step: 45 / 138 Loss: 34.16281509399414 Tokens per Sec: 15897.942679250245
Epoch Step: 50 / 138 Loss: 23.61016082763672 Tokens per Sec: 15739.80128916805
Epoch Step: 55 / 138 Loss: 40.56385803222656 Tokens per Sec: 15961.426851171156
Epoch Step: 60 / 138 Loss: 41.39366149902344 Tokens per Sec: 16111.666438854922
Epoch Step: 65 / 138 Loss: 19.67043113708496 Tokens per Sec: 16800.22784707457
Epoch Step: 70 / 138 Loss: 35.667144775390625 Tokens per Sec: 13843.838562761941
Epoch Step: 75 / 138 Loss: 34.27922821044922 Tokens per Sec: 15261.679263697126
Epoch Step: 80 / 138 Loss: 27.003555297851562 Tokens per Sec: 15811.880731030951
Epoch Step: 85 / 138 Loss: 20.06600570678711 Tokens per Sec: 17351.290179669857
Epoch Step: 90 / 138 Loss: 25.917469024658203 Tokens per Sec: 15364.891888870714
Epoch Step: 95 / 138 Loss: 32.13319778442383 Tokens per Sec: 16686.434506487276
Epoch Step: 100 / 138 Loss: 240.55752563476562 Tokens per Sec: 14792.34878667255
Epoch Step: 105 / 138 Loss: 33.226341247558594 Tokens per Sec: 13193.958394380536
Epoch Step: 110 / 138 Loss: 25.031757354736328 Tokens per Sec: 15925.584376735866
Epoch Step: 115 / 138 Loss: 25.100780487060547 Tokens per Sec: 17230.004850733018
Epoch Step: 120 / 138 Loss: 28.224836349487305 Tokens per Sec: 15885.646273972683
Epoch Step: 125 / 138 Loss: 21.03363609313965 Tokens per Sec: 15563.790858153547
Epoch Step: 130 / 138 Loss: 90.13102722167969 Tokens per Sec: 15628.681012497369
Epoch Step: 135 / 138 Loss: 16.808629989624023 Tokens per Sec: 15306.682901593891
Epoch ended with duration 0:00:40.155522
Train perplexity: 1.9572533450462373
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , java.lang.Integer VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) . METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( value ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.745514
Validation perplexity: 1.4103182379578016
Model saved best_on_validation!
Epoch 40 / 1000
Epoch Step: 5 / 138 Loss: 24.74563980102539 Tokens per Sec: 15520.79789422435
Epoch Step: 10 / 138 Loss: 28.72198486328125 Tokens per Sec: 17008.27144814193
Epoch Step: 15 / 138 Loss: 32.004573822021484 Tokens per Sec: 16329.138966122142
Epoch Step: 20 / 138 Loss: 30.09250259399414 Tokens per Sec: 16020.51396521714
Epoch Step: 25 / 138 Loss: 27.155872344970703 Tokens per Sec: 15946.009150813255
Epoch Step: 30 / 138 Loss: 23.647571563720703 Tokens per Sec: 16549.354234353686
Epoch Step: 35 / 138 Loss: 28.730669021606445 Tokens per Sec: 15640.04772250708
Epoch Step: 40 / 138 Loss: 31.725616455078125 Tokens per Sec: 14313.794662888591
Epoch Step: 45 / 138 Loss: 170.79348754882812 Tokens per Sec: 16453.946395151528
Epoch Step: 50 / 138 Loss: 40.30732727050781 Tokens per Sec: 15574.465801612523
Epoch Step: 55 / 138 Loss: 16.141279220581055 Tokens per Sec: 16260.491649032749
Epoch Step: 60 / 138 Loss: 28.138362884521484 Tokens per Sec: 17071.40506426947
Epoch Step: 65 / 138 Loss: 29.908945083618164 Tokens per Sec: 15930.965651135419
Epoch Step: 70 / 138 Loss: 203.03013610839844 Tokens per Sec: 16840.961370430872
Epoch Step: 75 / 138 Loss: 34.82527542114258 Tokens per Sec: 16361.787977619077
Epoch Step: 80 / 138 Loss: 26.14885139465332 Tokens per Sec: 15371.09123048181
Epoch Step: 85 / 138 Loss: 35.96414566040039 Tokens per Sec: 17519.215329549894
Epoch Step: 90 / 138 Loss: 19.601179122924805 Tokens per Sec: 15643.500153970672
Epoch Step: 95 / 138 Loss: 134.33432006835938 Tokens per Sec: 15361.18359176468
Epoch Step: 100 / 138 Loss: 31.84925079345703 Tokens per Sec: 16322.361632438833
Epoch Step: 105 / 138 Loss: 20.22853660583496 Tokens per Sec: 15538.720847063067
Epoch Step: 110 / 138 Loss: 26.879858016967773 Tokens per Sec: 14583.714790323098
Epoch Step: 115 / 138 Loss: 21.082988739013672 Tokens per Sec: 15619.987468379375
Epoch Step: 120 / 138 Loss: 20.125038146972656 Tokens per Sec: 15011.85391778098
Epoch Step: 125 / 138 Loss: 23.654611587524414 Tokens per Sec: 14222.835041256183
Epoch Step: 130 / 138 Loss: 25.275278091430664 Tokens per Sec: 15174.98874266954
Epoch Step: 135 / 138 Loss: 22.366172790527344 Tokens per Sec: 16351.973251418527
Epoch ended with duration 0:00:40.323985
Train perplexity: 1.7529511894828056
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_9 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( value ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.806086
Validation perplexity: 1.9382861651979226
Model saved checkpoint!
Epoch 41 / 1000
Epoch Step: 5 / 138 Loss: 30.70288848876953 Tokens per Sec: 16238.949077352134
Epoch Step: 10 / 138 Loss: 29.29644203186035 Tokens per Sec: 15687.463925957396
Epoch Step: 15 / 138 Loss: 15.836915969848633 Tokens per Sec: 16150.884777423464
Epoch Step: 20 / 138 Loss: 35.21487045288086 Tokens per Sec: 15002.129782626133
Epoch Step: 25 / 138 Loss: 25.192611694335938 Tokens per Sec: 15294.435184244583
Epoch Step: 30 / 138 Loss: 17.961809158325195 Tokens per Sec: 16902.445923423846
Epoch Step: 35 / 138 Loss: 21.576684951782227 Tokens per Sec: 16542.569242009333
Epoch Step: 40 / 138 Loss: 18.584196090698242 Tokens per Sec: 17324.804105008363
Epoch Step: 45 / 138 Loss: 15.544838905334473 Tokens per Sec: 15823.192752181752
Epoch Step: 50 / 138 Loss: 29.499217987060547 Tokens per Sec: 15778.198634314374
Epoch Step: 55 / 138 Loss: 19.47684097290039 Tokens per Sec: 16059.42108404809
Epoch Step: 60 / 138 Loss: 27.76657485961914 Tokens per Sec: 14856.750419458349
Epoch Step: 65 / 138 Loss: 19.43299102783203 Tokens per Sec: 16413.57045832887
Epoch Step: 70 / 138 Loss: 27.66704559326172 Tokens per Sec: 15030.743426195771
Epoch Step: 75 / 138 Loss: 18.14686393737793 Tokens per Sec: 16760.646370802257
Epoch Step: 80 / 138 Loss: 12.883654594421387 Tokens per Sec: 16705.823686100724
Epoch Step: 85 / 138 Loss: 30.6630916595459 Tokens per Sec: 15847.063352683665
Epoch Step: 90 / 138 Loss: 20.591888427734375 Tokens per Sec: 15541.302748662525
Epoch Step: 95 / 138 Loss: 24.850343704223633 Tokens per Sec: 15530.504232913727
Epoch Step: 100 / 138 Loss: 14.981889724731445 Tokens per Sec: 17801.390285425867
Epoch Step: 105 / 138 Loss: 24.676918029785156 Tokens per Sec: 14977.867832970593
Epoch Step: 110 / 138 Loss: 25.882171630859375 Tokens per Sec: 14740.38207115109
Epoch Step: 115 / 138 Loss: 19.677881240844727 Tokens per Sec: 14106.344789408315
Epoch Step: 120 / 138 Loss: 25.720409393310547 Tokens per Sec: 15073.391056354381
Epoch Step: 125 / 138 Loss: 19.761371612548828 Tokens per Sec: 15679.017844163023
Epoch Step: 130 / 138 Loss: 32.78596496582031 Tokens per Sec: 14045.809472198724
Epoch Step: 135 / 138 Loss: 17.478452682495117 Tokens per Sec: 14911.359757494478
Epoch ended with duration 0:00:40.702990
Train perplexity: 1.5657145723787058
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_9 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.680347
Validation perplexity: 1.6098858098872009
Epoch 42 / 1000
Epoch Step: 5 / 138 Loss: 21.763681411743164 Tokens per Sec: 16357.58196878906
Epoch Step: 10 / 138 Loss: 22.82169532775879 Tokens per Sec: 15464.9389653903
Epoch Step: 15 / 138 Loss: 31.035276412963867 Tokens per Sec: 16113.93522069859
Epoch Step: 20 / 138 Loss: 28.982181549072266 Tokens per Sec: 15418.469876981826
Epoch Step: 25 / 138 Loss: 29.81466293334961 Tokens per Sec: 16192.044281201133
Epoch Step: 30 / 138 Loss: 37.62959289550781 Tokens per Sec: 16397.686823095264
Epoch Step: 35 / 138 Loss: 21.645112991333008 Tokens per Sec: 15315.568908592504
Epoch Step: 40 / 138 Loss: 33.154945373535156 Tokens per Sec: 15961.626851304005
Epoch Step: 45 / 138 Loss: 22.309450149536133 Tokens per Sec: 14785.350326920165
Epoch Step: 50 / 138 Loss: 24.539602279663086 Tokens per Sec: 15297.086228027893
Epoch Step: 55 / 138 Loss: 29.677959442138672 Tokens per Sec: 15048.930185545267
Epoch Step: 60 / 138 Loss: 140.49945068359375 Tokens per Sec: 15513.681121442314
Epoch Step: 65 / 138 Loss: 27.271018981933594 Tokens per Sec: 17390.88739332312
Epoch Step: 70 / 138 Loss: 23.80795669555664 Tokens per Sec: 14066.0967832374
Epoch Step: 75 / 138 Loss: 22.06614875793457 Tokens per Sec: 15293.23405194286
Epoch Step: 80 / 138 Loss: 17.869544982910156 Tokens per Sec: 17780.49442682783
Epoch Step: 85 / 138 Loss: 13.95676040649414 Tokens per Sec: 16508.058723394224
Epoch Step: 90 / 138 Loss: 19.390987396240234 Tokens per Sec: 18304.934712579856
Epoch Step: 95 / 138 Loss: 27.35371208190918 Tokens per Sec: 17124.833913071834
Epoch Step: 100 / 138 Loss: 27.517194747924805 Tokens per Sec: 16632.554594626148
Epoch Step: 105 / 138 Loss: 25.542150497436523 Tokens per Sec: 15546.02694569971
Epoch Step: 110 / 138 Loss: 18.467538833618164 Tokens per Sec: 15177.892508251189
Epoch Step: 115 / 138 Loss: 35.67338180541992 Tokens per Sec: 15236.95502701761
Epoch Step: 120 / 138 Loss: 25.020526885986328 Tokens per Sec: 15170.3924231613
Epoch Step: 125 / 138 Loss: 17.184913635253906 Tokens per Sec: 15904.329812169542
Epoch Step: 130 / 138 Loss: 20.79981803894043 Tokens per Sec: 13053.632407531682
Epoch Step: 135 / 138 Loss: 29.62813377380371 Tokens per Sec: 15583.367681530777
Epoch ended with duration 0:00:40.485544
Train perplexity: 1.6848788766107072
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) . METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_9 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.777356
Validation perplexity: 1.5720043776021568
Epoch 43 / 1000
Epoch Step: 5 / 138 Loss: 95.24070739746094 Tokens per Sec: 15620.70427267325
Epoch Step: 10 / 138 Loss: 32.26628875732422 Tokens per Sec: 14896.11259990377
Epoch Step: 15 / 138 Loss: 19.1884822845459 Tokens per Sec: 16452.664191210468
Epoch Step: 20 / 138 Loss: 21.51517677307129 Tokens per Sec: 16162.954628687989
Epoch Step: 25 / 138 Loss: 30.9964542388916 Tokens per Sec: 16521.43177495769
Epoch Step: 30 / 138 Loss: 26.03036117553711 Tokens per Sec: 15737.346158610306
Epoch Step: 35 / 138 Loss: 22.66075897216797 Tokens per Sec: 17832.505065116107
Epoch Step: 40 / 138 Loss: 20.23545265197754 Tokens per Sec: 16324.476285957257
Epoch Step: 45 / 138 Loss: 21.03876495361328 Tokens per Sec: 16218.682932403273
Epoch Step: 50 / 138 Loss: 28.51162338256836 Tokens per Sec: 15923.657842147953
Epoch Step: 55 / 138 Loss: 21.42021369934082 Tokens per Sec: 15221.633772891362
Epoch Step: 60 / 138 Loss: 23.062517166137695 Tokens per Sec: 18405.41730550811
Epoch Step: 65 / 138 Loss: 30.5854549407959 Tokens per Sec: 16585.87668585428
Epoch Step: 70 / 138 Loss: 28.67327880859375 Tokens per Sec: 15665.153163084926
Epoch Step: 75 / 138 Loss: 24.50875473022461 Tokens per Sec: 16884.756049412175
Epoch Step: 80 / 138 Loss: 21.39520263671875 Tokens per Sec: 15236.02257153172
Epoch Step: 85 / 138 Loss: 19.031719207763672 Tokens per Sec: 14601.987963783255
Epoch Step: 90 / 138 Loss: 26.674535751342773 Tokens per Sec: 15760.875260191464
Epoch Step: 95 / 138 Loss: 35.638545989990234 Tokens per Sec: 16060.43128396484
Epoch Step: 100 / 138 Loss: 14.182295799255371 Tokens per Sec: 15065.053445658832
Epoch Step: 105 / 138 Loss: 21.09467315673828 Tokens per Sec: 15371.3985553746
Epoch Step: 110 / 138 Loss: 22.087059020996094 Tokens per Sec: 15280.254805874345
Epoch Step: 115 / 138 Loss: 28.25545310974121 Tokens per Sec: 14849.056067067664
Epoch Step: 120 / 138 Loss: 24.13209342956543 Tokens per Sec: 12660.739629391774
Epoch Step: 125 / 138 Loss: 27.78801918029785 Tokens per Sec: 16670.98575889456
Epoch Step: 130 / 138 Loss: 23.87958526611328 Tokens per Sec: 15114.259918800197
Epoch Step: 135 / 138 Loss: 138.79676818847656 Tokens per Sec: 15040.500029600023
Epoch ended with duration 0:00:40.500569
Train perplexity: 1.622075761430845
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_9 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.802032
Validation perplexity: 1.9366504561650277
Epoch 44 / 1000
Epoch Step: 5 / 138 Loss: 157.8732147216797 Tokens per Sec: 15576.334542121005
Epoch Step: 10 / 138 Loss: 25.000972747802734 Tokens per Sec: 17178.697150687134
Epoch Step: 15 / 138 Loss: 14.038287162780762 Tokens per Sec: 17823.05007615968
Epoch Step: 20 / 138 Loss: 30.642568588256836 Tokens per Sec: 17677.658594633016
Epoch Step: 25 / 138 Loss: 27.810937881469727 Tokens per Sec: 15832.635808546465
Epoch Step: 30 / 138 Loss: 23.20194435119629 Tokens per Sec: 15665.14451068822
Epoch Step: 35 / 138 Loss: 28.680383682250977 Tokens per Sec: 16129.11855120975
Epoch Step: 40 / 138 Loss: 21.985395431518555 Tokens per Sec: 16902.127841824575
Epoch Step: 45 / 138 Loss: 23.908775329589844 Tokens per Sec: 16656.67960377279
Epoch Step: 50 / 138 Loss: 27.893381118774414 Tokens per Sec: 16439.845536253655
Epoch Step: 55 / 138 Loss: 23.688989639282227 Tokens per Sec: 16633.207205574257
Epoch Step: 60 / 138 Loss: 27.718036651611328 Tokens per Sec: 16567.48745301167
Epoch Step: 65 / 138 Loss: 27.535213470458984 Tokens per Sec: 15771.734526567785
Epoch Step: 70 / 138 Loss: 24.39067268371582 Tokens per Sec: 15671.180975073386
Epoch Step: 75 / 138 Loss: 14.07714557647705 Tokens per Sec: 16459.198951210477
Epoch Step: 80 / 138 Loss: 27.430822372436523 Tokens per Sec: 15644.53320473178
Epoch Step: 85 / 138 Loss: 29.55613899230957 Tokens per Sec: 15817.898606042907
Epoch Step: 90 / 138 Loss: 25.288232803344727 Tokens per Sec: 15204.511803619338
Epoch Step: 95 / 138 Loss: 14.163777351379395 Tokens per Sec: 16167.878887050598
Epoch Step: 100 / 138 Loss: 23.09527587890625 Tokens per Sec: 15150.702414132622
Epoch Step: 105 / 138 Loss: 20.307891845703125 Tokens per Sec: 14866.53829517844
Epoch Step: 110 / 138 Loss: 190.25404357910156 Tokens per Sec: 14488.355219100305
Epoch Step: 115 / 138 Loss: 21.170822143554688 Tokens per Sec: 14034.944115317183
Epoch Step: 120 / 138 Loss: 16.32577133178711 Tokens per Sec: 15284.527943674468
Epoch Step: 125 / 138 Loss: 27.265823364257812 Tokens per Sec: 16754.251749158593
Epoch Step: 130 / 138 Loss: 30.709266662597656 Tokens per Sec: 16355.536659808879
Epoch Step: 135 / 138 Loss: 30.88788414001465 Tokens per Sec: 15178.188052627258
Epoch ended with duration 0:00:40.109427
Train perplexity: 1.6478811524367836
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.740492
Validation perplexity: 1.3668019590698415
Model saved best_on_validation!
Epoch 45 / 1000
Epoch Step: 5 / 138 Loss: 16.495115280151367 Tokens per Sec: 16787.939271312025
Epoch Step: 10 / 138 Loss: 15.629759788513184 Tokens per Sec: 17170.888421929587
Epoch Step: 15 / 138 Loss: 30.248022079467773 Tokens per Sec: 15050.089873263409
Epoch Step: 20 / 138 Loss: 15.754483222961426 Tokens per Sec: 16630.775190119322
Epoch Step: 25 / 138 Loss: 201.41371154785156 Tokens per Sec: 15956.217725813498
Epoch Step: 30 / 138 Loss: 26.515499114990234 Tokens per Sec: 15411.101819402826
Epoch Step: 35 / 138 Loss: 21.45085334777832 Tokens per Sec: 16233.05474018128
Epoch Step: 40 / 138 Loss: 27.068376541137695 Tokens per Sec: 15448.98624486337
Epoch Step: 45 / 138 Loss: 24.89907455444336 Tokens per Sec: 16177.680545760313
Epoch Step: 50 / 138 Loss: 174.2816619873047 Tokens per Sec: 15882.321275360304
Epoch Step: 55 / 138 Loss: 24.75745391845703 Tokens per Sec: 16076.310320876562
Epoch Step: 60 / 138 Loss: 17.265701293945312 Tokens per Sec: 16010.55894032624
Epoch Step: 65 / 138 Loss: 27.2948055267334 Tokens per Sec: 15489.298349561752
Epoch Step: 70 / 138 Loss: 24.81266975402832 Tokens per Sec: 17061.221411854152
Epoch Step: 75 / 138 Loss: 33.001556396484375 Tokens per Sec: 16164.988814618606
Epoch Step: 80 / 138 Loss: 23.174367904663086 Tokens per Sec: 18290.550864850582
Epoch Step: 85 / 138 Loss: 27.461986541748047 Tokens per Sec: 17506.875864375437
Epoch Step: 90 / 138 Loss: 19.964643478393555 Tokens per Sec: 15990.389859016577
Epoch Step: 95 / 138 Loss: 17.107778549194336 Tokens per Sec: 15628.699560500536
Epoch Step: 100 / 138 Loss: 30.38195037841797 Tokens per Sec: 15049.623886662248
Epoch Step: 105 / 138 Loss: 31.82745933532715 Tokens per Sec: 15831.610894547199
Epoch Step: 110 / 138 Loss: 24.225692749023438 Tokens per Sec: 14677.357200007758
Epoch Step: 115 / 138 Loss: 23.83755111694336 Tokens per Sec: 14954.55938844424
Epoch Step: 120 / 138 Loss: 24.183053970336914 Tokens per Sec: 15274.872585509147
Epoch Step: 125 / 138 Loss: 21.344276428222656 Tokens per Sec: 15194.958592903944
Epoch Step: 130 / 138 Loss: 17.905481338500977 Tokens per Sec: 15342.157913794903
Epoch Step: 135 / 138 Loss: 26.025789260864258 Tokens per Sec: 14705.8776586244
Epoch ended with duration 0:00:40.221796
Train perplexity: 1.6238054226727463
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_9 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.772720
Validation perplexity: 1.642268439586848
Model saved checkpoint!
Epoch 46 / 1000
Epoch Step: 5 / 138 Loss: 124.18572998046875 Tokens per Sec: 16864.1418799634
Epoch Step: 10 / 138 Loss: 16.888078689575195 Tokens per Sec: 15568.758526696982
Epoch Step: 15 / 138 Loss: 157.1446990966797 Tokens per Sec: 16045.717058180308
Epoch Step: 20 / 138 Loss: 11.286064147949219 Tokens per Sec: 15523.664246918757
Epoch Step: 25 / 138 Loss: 28.53989601135254 Tokens per Sec: 14783.871421305801
Epoch Step: 30 / 138 Loss: 17.87875747680664 Tokens per Sec: 17414.05241646244
Epoch Step: 35 / 138 Loss: 18.24892234802246 Tokens per Sec: 16860.951545470252
Epoch Step: 40 / 138 Loss: 23.130619049072266 Tokens per Sec: 16934.78841902695
Epoch Step: 45 / 138 Loss: 25.90787124633789 Tokens per Sec: 16115.442520877281
Epoch Step: 50 / 138 Loss: 30.344112396240234 Tokens per Sec: 15838.323124187371
Epoch Step: 55 / 138 Loss: 16.262765884399414 Tokens per Sec: 16343.079338172169
Epoch Step: 60 / 138 Loss: 24.534801483154297 Tokens per Sec: 15492.357549472155
Epoch Step: 65 / 138 Loss: 17.174257278442383 Tokens per Sec: 16945.741953603483
Epoch Step: 70 / 138 Loss: 19.47420883178711 Tokens per Sec: 16819.02875488953
Epoch Step: 75 / 138 Loss: 17.884836196899414 Tokens per Sec: 15437.774940726396
Epoch Step: 80 / 138 Loss: 28.04345703125 Tokens per Sec: 15017.563354070262
Epoch Step: 85 / 138 Loss: 14.519247055053711 Tokens per Sec: 15675.739266428194
Epoch Step: 90 / 138 Loss: 15.854809761047363 Tokens per Sec: 17492.71329383994
Epoch Step: 95 / 138 Loss: 22.75992202758789 Tokens per Sec: 15103.980861539265
Epoch Step: 100 / 138 Loss: 20.69363021850586 Tokens per Sec: 15056.376010572674
Epoch Step: 105 / 138 Loss: 26.919782638549805 Tokens per Sec: 15291.856163433606
Epoch Step: 110 / 138 Loss: 19.717239379882812 Tokens per Sec: 13423.99251025135
Epoch Step: 115 / 138 Loss: 18.168819427490234 Tokens per Sec: 14752.067345261392
Epoch Step: 120 / 138 Loss: 21.041860580444336 Tokens per Sec: 15125.191778724695
Epoch Step: 125 / 138 Loss: 23.385290145874023 Tokens per Sec: 15983.691665368102
Epoch Step: 130 / 138 Loss: 17.267044067382812 Tokens per Sec: 15213.894038094708
Epoch Step: 135 / 138 Loss: 23.37828826904297 Tokens per Sec: 14463.223782720188
Epoch ended with duration 0:00:40.479772
Train perplexity: 1.4907089135417306
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_9 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.661064
Validation perplexity: 1.3362808965189266
Model saved best_on_validation!
Epoch 47 / 1000
Epoch Step: 5 / 138 Loss: 18.402925491333008 Tokens per Sec: 16397.682705083393
Epoch Step: 10 / 138 Loss: 19.610437393188477 Tokens per Sec: 16181.856247850903
Epoch Step: 15 / 138 Loss: 26.59473419189453 Tokens per Sec: 15669.362201900216
Epoch Step: 20 / 138 Loss: 21.776643753051758 Tokens per Sec: 15579.471476990817
Epoch Step: 25 / 138 Loss: 210.39154052734375 Tokens per Sec: 15557.567635245397
Epoch Step: 30 / 138 Loss: 29.936370849609375 Tokens per Sec: 15195.841825940073
Epoch Step: 35 / 138 Loss: 28.35043716430664 Tokens per Sec: 15998.808954558031
Epoch Step: 40 / 138 Loss: 20.929302215576172 Tokens per Sec: 17058.15287645613
Epoch Step: 45 / 138 Loss: 34.912349700927734 Tokens per Sec: 15932.376249531088
Epoch Step: 50 / 138 Loss: 37.37200927734375 Tokens per Sec: 16584.305838210545
Epoch Step: 55 / 138 Loss: 20.578031539916992 Tokens per Sec: 15257.546631358022
Epoch Step: 60 / 138 Loss: 19.46115493774414 Tokens per Sec: 17405.944605771434
Epoch Step: 65 / 138 Loss: 20.333385467529297 Tokens per Sec: 16017.875134781663
Epoch Step: 70 / 138 Loss: 22.116497039794922 Tokens per Sec: 15506.862780493651
Epoch Step: 75 / 138 Loss: 19.236021041870117 Tokens per Sec: 16511.30200327481
Epoch Step: 80 / 138 Loss: 98.56084442138672 Tokens per Sec: 16527.4672996315
Epoch Step: 85 / 138 Loss: 11.648331642150879 Tokens per Sec: 15925.293033748654
Epoch Step: 90 / 138 Loss: 23.706632614135742 Tokens per Sec: 16565.817270571017
Epoch Step: 95 / 138 Loss: 22.370481491088867 Tokens per Sec: 15725.700075673498
Epoch Step: 100 / 138 Loss: 19.117408752441406 Tokens per Sec: 16864.798783467373
Epoch Step: 105 / 138 Loss: 27.523799896240234 Tokens per Sec: 17565.564686637998
Epoch Step: 110 / 138 Loss: 20.078201293945312 Tokens per Sec: 15885.634598619705
Epoch Step: 115 / 138 Loss: 19.1744327545166 Tokens per Sec: 15136.89881806547
Epoch Step: 120 / 138 Loss: 16.11684226989746 Tokens per Sec: 14990.622450437588
Epoch Step: 125 / 138 Loss: 21.501935958862305 Tokens per Sec: 13415.783695218628
Epoch Step: 130 / 138 Loss: 24.408376693725586 Tokens per Sec: 15525.311151060767
Epoch Step: 135 / 138 Loss: 20.675996780395508 Tokens per Sec: 14281.107445745603
Epoch ended with duration 0:00:40.148389
Train perplexity: 1.715021078894106
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.737782
Validation perplexity: 1.5874776700843172
Epoch 48 / 1000
Epoch Step: 5 / 138 Loss: 27.475982666015625 Tokens per Sec: 15790.48253951701
Epoch Step: 10 / 138 Loss: 23.593095779418945 Tokens per Sec: 15172.91541984327
Epoch Step: 15 / 138 Loss: 22.35919761657715 Tokens per Sec: 15691.967777462349
Epoch Step: 20 / 138 Loss: 19.326688766479492 Tokens per Sec: 15222.731530822752
Epoch Step: 25 / 138 Loss: 22.56561279296875 Tokens per Sec: 16745.286555633546
Epoch Step: 30 / 138 Loss: 13.524005889892578 Tokens per Sec: 16921.10472859654
Epoch Step: 35 / 138 Loss: 19.16423797607422 Tokens per Sec: 14949.617794406298
Epoch Step: 40 / 138 Loss: 25.039690017700195 Tokens per Sec: 16598.800341804083
Epoch Step: 45 / 138 Loss: 231.60556030273438 Tokens per Sec: 15289.082008408985
Epoch Step: 50 / 138 Loss: 32.96905517578125 Tokens per Sec: 15608.232092877577
Epoch Step: 55 / 138 Loss: 19.213462829589844 Tokens per Sec: 15543.6720581165
Epoch Step: 60 / 138 Loss: 17.350475311279297 Tokens per Sec: 17585.970938382667
Epoch Step: 65 / 138 Loss: 19.88875961303711 Tokens per Sec: 17851.97909724194
Epoch Step: 70 / 138 Loss: 21.49243927001953 Tokens per Sec: 16359.884815085992
Epoch Step: 75 / 138 Loss: 13.500672340393066 Tokens per Sec: 16274.608290805818
Epoch Step: 80 / 138 Loss: 17.499326705932617 Tokens per Sec: 16244.409590093
Epoch Step: 85 / 138 Loss: 11.984989166259766 Tokens per Sec: 15222.339384106586
Epoch Step: 90 / 138 Loss: 22.205791473388672 Tokens per Sec: 15877.77514551061
Epoch Step: 95 / 138 Loss: 205.3955078125 Tokens per Sec: 14639.810217439785
Epoch Step: 100 / 138 Loss: 19.20611000061035 Tokens per Sec: 17064.149829706388
Epoch Step: 105 / 138 Loss: 131.36265563964844 Tokens per Sec: 14883.478188658548
Epoch Step: 110 / 138 Loss: 15.763304710388184 Tokens per Sec: 15975.723401980584
Epoch Step: 115 / 138 Loss: 20.876651763916016 Tokens per Sec: 14185.395284543234
Epoch Step: 120 / 138 Loss: 14.8294038772583 Tokens per Sec: 14781.126291496244
Epoch Step: 125 / 138 Loss: 18.215007781982422 Tokens per Sec: 15634.100670783318
Epoch Step: 130 / 138 Loss: 21.115203857421875 Tokens per Sec: 13357.572172485727
Epoch Step: 135 / 138 Loss: 28.76161003112793 Tokens per Sec: 15357.669642946094
Epoch ended with duration 0:00:40.657171
Train perplexity: 1.5820044868399588
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.768495
Validation perplexity: 1.3904158928879327
Epoch 49 / 1000
Epoch Step: 5 / 138 Loss: 27.07053565979004 Tokens per Sec: 14897.676255471664
Epoch Step: 10 / 138 Loss: 10.565149307250977 Tokens per Sec: 15078.278016901682
Epoch Step: 15 / 138 Loss: 21.33552360534668 Tokens per Sec: 15321.052579251033
Epoch Step: 20 / 138 Loss: 17.84917449951172 Tokens per Sec: 17936.64140679394
Epoch Step: 25 / 138 Loss: 13.012784004211426 Tokens per Sec: 18309.443747852172
Epoch Step: 30 / 138 Loss: 21.492679595947266 Tokens per Sec: 16559.3097142923
Epoch Step: 35 / 138 Loss: 24.734952926635742 Tokens per Sec: 15588.883224331483
Epoch Step: 40 / 138 Loss: 24.706581115722656 Tokens per Sec: 15065.138169244952
Epoch Step: 45 / 138 Loss: 14.486953735351562 Tokens per Sec: 16427.17681672015
Epoch Step: 50 / 138 Loss: 10.447914123535156 Tokens per Sec: 16494.73242515003
Epoch Step: 55 / 138 Loss: 108.05354309082031 Tokens per Sec: 16434.874731983364
Epoch Step: 60 / 138 Loss: 20.23848533630371 Tokens per Sec: 16515.27961627106
Epoch Step: 65 / 138 Loss: 15.647917747497559 Tokens per Sec: 15811.854344200348
Epoch Step: 70 / 138 Loss: 25.42225456237793 Tokens per Sec: 15141.98150389919
Epoch Step: 75 / 138 Loss: 13.724858283996582 Tokens per Sec: 15915.045162667542
Epoch Step: 80 / 138 Loss: 15.814885139465332 Tokens per Sec: 16751.324810010803
Epoch Step: 85 / 138 Loss: 20.75279998779297 Tokens per Sec: 16309.160248532471
Epoch Step: 90 / 138 Loss: 178.52584838867188 Tokens per Sec: 16070.191377824938
Epoch Step: 95 / 138 Loss: 18.84758949279785 Tokens per Sec: 16021.424302383084
Epoch Step: 100 / 138 Loss: 18.440765380859375 Tokens per Sec: 14680.507573115266
Epoch Step: 105 / 138 Loss: 30.059268951416016 Tokens per Sec: 13875.341577423811
Epoch Step: 110 / 138 Loss: 20.118270874023438 Tokens per Sec: 15528.107357822013
Epoch Step: 115 / 138 Loss: 25.591293334960938 Tokens per Sec: 16382.755922693874
Epoch Step: 120 / 138 Loss: 23.20556640625 Tokens per Sec: 17669.07960882029
Epoch Step: 125 / 138 Loss: 19.0821590423584 Tokens per Sec: 15643.831940781702
Epoch Step: 130 / 138 Loss: 16.307458877563477 Tokens per Sec: 15279.669441829405
Epoch Step: 135 / 138 Loss: 121.81617736816406 Tokens per Sec: 15014.433517892629
Epoch ended with duration 0:00:40.131329
Train perplexity: 1.5468342757580695
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_9 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.785936
Validation perplexity: 1.6998050909212854
Epoch 50 / 1000
Epoch Step: 5 / 138 Loss: 25.473806381225586 Tokens per Sec: 15250.433600579205
Epoch Step: 10 / 138 Loss: 16.15529441833496 Tokens per Sec: 15735.637249849236
Epoch Step: 15 / 138 Loss: 14.342726707458496 Tokens per Sec: 15693.634950922818
Epoch Step: 20 / 138 Loss: 14.675360679626465 Tokens per Sec: 16188.689401244328
Epoch Step: 25 / 138 Loss: 31.604278564453125 Tokens per Sec: 15445.138362491387
Epoch Step: 30 / 138 Loss: 19.251405715942383 Tokens per Sec: 15267.296473023624
Epoch Step: 35 / 138 Loss: 17.611461639404297 Tokens per Sec: 17026.506167718533
Epoch Step: 40 / 138 Loss: 18.01963233947754 Tokens per Sec: 16911.16856246128
Epoch Step: 45 / 138 Loss: 20.60028648376465 Tokens per Sec: 17100.48479407583
Epoch Step: 50 / 138 Loss: 15.801481246948242 Tokens per Sec: 16329.328981381188
Epoch Step: 55 / 138 Loss: 13.235109329223633 Tokens per Sec: 16169.559723138773
Epoch Step: 60 / 138 Loss: 24.824718475341797 Tokens per Sec: 14535.13482271247
Epoch Step: 65 / 138 Loss: 19.032758712768555 Tokens per Sec: 16731.371366440948
Epoch Step: 70 / 138 Loss: 15.742229461669922 Tokens per Sec: 16938.2059327929
Epoch Step: 75 / 138 Loss: 26.923053741455078 Tokens per Sec: 15331.877563860075
Epoch Step: 80 / 138 Loss: 24.993627548217773 Tokens per Sec: 15080.492740612315
Epoch Step: 85 / 138 Loss: 29.46006965637207 Tokens per Sec: 17501.61850474144
Epoch Step: 90 / 138 Loss: 23.217937469482422 Tokens per Sec: 16719.826212114684
Epoch Step: 95 / 138 Loss: 17.909067153930664 Tokens per Sec: 17162.490230917487
Epoch Step: 100 / 138 Loss: 20.65643882751465 Tokens per Sec: 15927.94044594234
Epoch Step: 105 / 138 Loss: 18.69377326965332 Tokens per Sec: 15713.937902082978
Epoch Step: 110 / 138 Loss: 19.69837760925293 Tokens per Sec: 14753.44841807955
Epoch Step: 115 / 138 Loss: 22.20411491394043 Tokens per Sec: 15332.784615014907
Epoch Step: 120 / 138 Loss: 18.167049407958984 Tokens per Sec: 14999.941321364688
Epoch Step: 125 / 138 Loss: 68.65615844726562 Tokens per Sec: 15343.163474334062
Epoch Step: 130 / 138 Loss: 18.33069610595703 Tokens per Sec: 14731.881170029752
Epoch Step: 135 / 138 Loss: 20.874494552612305 Tokens per Sec: 13753.87630661917
Epoch ended with duration 0:00:40.406061
Train perplexity: 1.6095623242836719
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.760188
Validation perplexity: 1.3127837611781887
Model saved best_on_validation!
Model saved checkpoint!
Epoch 51 / 1000
Epoch Step: 5 / 138 Loss: 21.957782745361328 Tokens per Sec: 14547.245915266363
Epoch Step: 10 / 138 Loss: 15.37942123413086 Tokens per Sec: 15795.699767990218
Epoch Step: 15 / 138 Loss: 23.572246551513672 Tokens per Sec: 16198.692658238613
Epoch Step: 20 / 138 Loss: 15.724103927612305 Tokens per Sec: 16124.130986324277
Epoch Step: 25 / 138 Loss: 17.198694229125977 Tokens per Sec: 15687.62967410404
Epoch Step: 30 / 138 Loss: 28.28319549560547 Tokens per Sec: 15723.523503348328
Epoch Step: 35 / 138 Loss: 20.60201072692871 Tokens per Sec: 14753.861262468216
Epoch Step: 40 / 138 Loss: 19.747920989990234 Tokens per Sec: 16511.363902600904
Epoch Step: 45 / 138 Loss: 19.91827964782715 Tokens per Sec: 18147.154420394923
Epoch Step: 50 / 138 Loss: 10.5332612991333 Tokens per Sec: 16875.098922970126
Epoch Step: 55 / 138 Loss: 25.256135940551758 Tokens per Sec: 15444.04810911281
Epoch Step: 60 / 138 Loss: 15.863222122192383 Tokens per Sec: 17441.550283368393
Epoch Step: 65 / 138 Loss: 19.065874099731445 Tokens per Sec: 16512.77603622609
Epoch Step: 70 / 138 Loss: 21.69612693786621 Tokens per Sec: 15502.01635303783
Epoch Step: 75 / 138 Loss: 20.180500030517578 Tokens per Sec: 16508.389252022625
Epoch Step: 80 / 138 Loss: 13.406510353088379 Tokens per Sec: 14739.015417999844
Epoch Step: 85 / 138 Loss: 23.58431625366211 Tokens per Sec: 15119.046239930616
Epoch Step: 90 / 138 Loss: 18.828243255615234 Tokens per Sec: 16477.507299277262
Epoch Step: 95 / 138 Loss: 10.767596244812012 Tokens per Sec: 16381.582444989883
Epoch Step: 100 / 138 Loss: 15.967573165893555 Tokens per Sec: 16873.310517904876
Epoch Step: 105 / 138 Loss: 28.74585723876953 Tokens per Sec: 12926.543360935313
Epoch Step: 110 / 138 Loss: 13.801655769348145 Tokens per Sec: 15021.28866848514
Epoch Step: 115 / 138 Loss: 16.532981872558594 Tokens per Sec: 15165.086747563204
Epoch Step: 120 / 138 Loss: 176.18951416015625 Tokens per Sec: 14823.732067609124
Epoch Step: 125 / 138 Loss: 14.728736877441406 Tokens per Sec: 15703.873033486958
Epoch Step: 130 / 138 Loss: 20.734859466552734 Tokens per Sec: 13816.111922908376
Epoch Step: 135 / 138 Loss: 11.857248306274414 Tokens per Sec: 15834.425372210528
Epoch ended with duration 0:00:40.617751
Train perplexity: 1.3929445863164842
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.658571
Validation perplexity: 1.40728264222836
Epoch 52 / 1000
Epoch Step: 5 / 138 Loss: 23.55368995666504 Tokens per Sec: 15569.529224975853
Epoch Step: 10 / 138 Loss: 17.46676254272461 Tokens per Sec: 15441.37958906766
Epoch Step: 15 / 138 Loss: 22.020755767822266 Tokens per Sec: 15306.293601505204
Epoch Step: 20 / 138 Loss: 19.81433868408203 Tokens per Sec: 15997.301748240396
Epoch Step: 25 / 138 Loss: 13.010018348693848 Tokens per Sec: 16744.98953239205
Epoch Step: 30 / 138 Loss: 22.52416229248047 Tokens per Sec: 15348.107919238098
Epoch Step: 35 / 138 Loss: 19.99607276916504 Tokens per Sec: 15681.346543908921
Epoch Step: 40 / 138 Loss: 18.793317794799805 Tokens per Sec: 16581.07061576979
Epoch Step: 45 / 138 Loss: 25.200965881347656 Tokens per Sec: 15984.024775048754
Epoch Step: 50 / 138 Loss: 22.486726760864258 Tokens per Sec: 15964.572488869562
Epoch Step: 55 / 138 Loss: 103.58393096923828 Tokens per Sec: 15584.749904333317
Epoch Step: 60 / 138 Loss: 27.146499633789062 Tokens per Sec: 16257.849557472538
Epoch Step: 65 / 138 Loss: 19.048288345336914 Tokens per Sec: 15494.41904924274
Epoch Step: 70 / 138 Loss: 23.191831588745117 Tokens per Sec: 15578.01100887564
Epoch Step: 75 / 138 Loss: 24.28634262084961 Tokens per Sec: 17111.040962299252
Epoch Step: 80 / 138 Loss: 194.8873291015625 Tokens per Sec: 14995.534581100936
Epoch Step: 85 / 138 Loss: 33.57734298706055 Tokens per Sec: 16123.810965299908
Epoch Step: 90 / 138 Loss: 22.129199981689453 Tokens per Sec: 16336.563293885147
Epoch Step: 95 / 138 Loss: 25.59228515625 Tokens per Sec: 17731.421854743825
Epoch Step: 100 / 138 Loss: 22.42006492614746 Tokens per Sec: 17591.79317286668
Epoch Step: 105 / 138 Loss: 18.827159881591797 Tokens per Sec: 14190.252065879156
Epoch Step: 110 / 138 Loss: 21.003276824951172 Tokens per Sec: 15382.899358506487
Epoch Step: 115 / 138 Loss: 18.48758888244629 Tokens per Sec: 15241.029413884404
Epoch Step: 120 / 138 Loss: 19.800975799560547 Tokens per Sec: 15062.174032785293
Epoch Step: 125 / 138 Loss: 17.17580223083496 Tokens per Sec: 14743.216799470138
Epoch Step: 130 / 138 Loss: 13.305245399475098 Tokens per Sec: 15659.819855395901
Epoch Step: 135 / 138 Loss: 15.149808883666992 Tokens per Sec: 15628.413577424146
Epoch ended with duration 0:00:40.445992
Train perplexity: 1.5678790090888401
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( METHOD_4 VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.745423
Validation perplexity: 1.460500489001739
Epoch 53 / 1000
Epoch Step: 5 / 138 Loss: 20.04669952392578 Tokens per Sec: 16240.656975848193
Epoch Step: 10 / 138 Loss: 11.053627014160156 Tokens per Sec: 16866.35042847172
Epoch Step: 15 / 138 Loss: 20.031885147094727 Tokens per Sec: 15642.16441678247
Epoch Step: 20 / 138 Loss: 18.442806243896484 Tokens per Sec: 16602.957031255
Epoch Step: 25 / 138 Loss: 19.733911514282227 Tokens per Sec: 15469.642286473967
Epoch Step: 30 / 138 Loss: 13.469322204589844 Tokens per Sec: 14988.887825603153
Epoch Step: 35 / 138 Loss: 84.106689453125 Tokens per Sec: 15807.47818360939
Epoch Step: 40 / 138 Loss: 22.07654571533203 Tokens per Sec: 15324.860405659785
Epoch Step: 45 / 138 Loss: 11.436274528503418 Tokens per Sec: 15635.283482563469
Epoch Step: 50 / 138 Loss: 97.49171447753906 Tokens per Sec: 15308.101647671281
Epoch Step: 55 / 138 Loss: 113.78242492675781 Tokens per Sec: 15072.23198574405
Epoch Step: 60 / 138 Loss: 130.62020874023438 Tokens per Sec: 16549.58031681319
Epoch Step: 65 / 138 Loss: 25.315492630004883 Tokens per Sec: 18343.489427048917
Epoch Step: 70 / 138 Loss: 19.322288513183594 Tokens per Sec: 17398.975803023484
Epoch Step: 75 / 138 Loss: 23.826358795166016 Tokens per Sec: 16726.21772697648
Epoch Step: 80 / 138 Loss: 47.7976188659668 Tokens per Sec: 17683.350909913093
Epoch Step: 85 / 138 Loss: 15.116113662719727 Tokens per Sec: 16177.859051111744
Epoch Step: 90 / 138 Loss: 112.69828033447266 Tokens per Sec: 16054.812828789112
Epoch Step: 95 / 138 Loss: 14.529561042785645 Tokens per Sec: 16272.496361021062
Epoch Step: 100 / 138 Loss: 26.72730255126953 Tokens per Sec: 15722.299990607682
Epoch Step: 105 / 138 Loss: 148.72731018066406 Tokens per Sec: 14706.082520335112
Epoch Step: 110 / 138 Loss: 17.801513671875 Tokens per Sec: 14918.515837149074
Epoch Step: 115 / 138 Loss: 199.25428771972656 Tokens per Sec: 15592.023993772393
Epoch Step: 120 / 138 Loss: 21.546728134155273 Tokens per Sec: 15074.153646165203
Epoch Step: 125 / 138 Loss: 30.739992141723633 Tokens per Sec: 13393.20932623423
Epoch Step: 130 / 138 Loss: 21.774106979370117 Tokens per Sec: 15615.604062735893
Epoch Step: 135 / 138 Loss: 17.706615447998047 Tokens per Sec: 13625.112895372968
Epoch ended with duration 0:00:40.486731
Train perplexity: 1.621527224140123
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.751235
Validation perplexity: 1.4680374720354563
Epoch 54 / 1000
Epoch Step: 5 / 138 Loss: 22.506216049194336 Tokens per Sec: 17006.48656578908
Epoch Step: 10 / 138 Loss: 28.51274299621582 Tokens per Sec: 16710.377403378276
Epoch Step: 15 / 138 Loss: 64.49063110351562 Tokens per Sec: 16437.089673003964
Epoch Step: 20 / 138 Loss: 12.306231498718262 Tokens per Sec: 18539.152961801923
Epoch Step: 25 / 138 Loss: 17.07984733581543 Tokens per Sec: 17544.387086096835
Epoch Step: 30 / 138 Loss: 20.93734359741211 Tokens per Sec: 16612.433470623124
Epoch Step: 35 / 138 Loss: 19.486461639404297 Tokens per Sec: 16135.343321571703
Epoch Step: 40 / 138 Loss: 14.324954986572266 Tokens per Sec: 14847.752806623099
Epoch Step: 45 / 138 Loss: 19.36958122253418 Tokens per Sec: 16151.95428008686
Epoch Step: 50 / 138 Loss: 16.797258377075195 Tokens per Sec: 15387.51939635469
Epoch Step: 55 / 138 Loss: 22.23003387451172 Tokens per Sec: 15804.458124640249
Epoch Step: 60 / 138 Loss: 40.58148956298828 Tokens per Sec: 16464.82809614451
Epoch Step: 65 / 138 Loss: 47.43308639526367 Tokens per Sec: 16862.092545433003
Epoch Step: 70 / 138 Loss: 22.63979721069336 Tokens per Sec: 16319.150806999603
Epoch Step: 75 / 138 Loss: 70.53089904785156 Tokens per Sec: 15635.299163980651
Epoch Step: 80 / 138 Loss: 21.03839874267578 Tokens per Sec: 16697.46110075291
Epoch Step: 85 / 138 Loss: 18.10024642944336 Tokens per Sec: 15661.180178144798
Epoch Step: 90 / 138 Loss: 19.611305236816406 Tokens per Sec: 15079.201291276378
Epoch Step: 95 / 138 Loss: 17.919797897338867 Tokens per Sec: 15415.14072141931
Epoch Step: 100 / 138 Loss: 15.937305450439453 Tokens per Sec: 16129.449364105107
Epoch Step: 105 / 138 Loss: 29.122928619384766 Tokens per Sec: 13495.247389395718
Epoch Step: 110 / 138 Loss: 23.617084503173828 Tokens per Sec: 16436.380629171836
Epoch Step: 115 / 138 Loss: 18.871469497680664 Tokens per Sec: 14479.863814372902
Epoch Step: 120 / 138 Loss: 15.681757926940918 Tokens per Sec: 14465.51162513896
Epoch Step: 125 / 138 Loss: 15.83739948272705 Tokens per Sec: 15092.098037702595
Epoch Step: 130 / 138 Loss: 17.08961296081543 Tokens per Sec: 15870.147012750502
Epoch Step: 135 / 138 Loss: 22.832778930664062 Tokens per Sec: 15516.096222505304
Epoch ended with duration 0:00:40.014543
Train perplexity: 1.5422020876662452
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.748053
Validation perplexity: 1.6533827289372838
Epoch 55 / 1000
Epoch Step: 5 / 138 Loss: 12.288717269897461 Tokens per Sec: 15407.463879532874
Epoch Step: 10 / 138 Loss: 21.191940307617188 Tokens per Sec: 16559.9283378553
Epoch Step: 15 / 138 Loss: 20.095613479614258 Tokens per Sec: 16773.614799144172
Epoch Step: 20 / 138 Loss: 34.23929977416992 Tokens per Sec: 15517.46390189952
Epoch Step: 25 / 138 Loss: 23.467967987060547 Tokens per Sec: 15329.70450538513
Epoch Step: 30 / 138 Loss: 12.32709789276123 Tokens per Sec: 17085.052073193878
Epoch Step: 35 / 138 Loss: 25.162261962890625 Tokens per Sec: 15731.483048784094
Epoch Step: 40 / 138 Loss: 19.497127532958984 Tokens per Sec: 17136.165599604195
Epoch Step: 45 / 138 Loss: 9.511274337768555 Tokens per Sec: 14794.604232988642
Epoch Step: 50 / 138 Loss: 17.216535568237305 Tokens per Sec: 14934.710074144377
Epoch Step: 55 / 138 Loss: 20.07621955871582 Tokens per Sec: 15662.214187356718
Epoch Step: 60 / 138 Loss: 83.77120971679688 Tokens per Sec: 16407.03628141818
Epoch Step: 65 / 138 Loss: 24.047672271728516 Tokens per Sec: 15555.590953611343
Epoch Step: 70 / 138 Loss: 12.12720012664795 Tokens per Sec: 16103.517534715327
Epoch Step: 75 / 138 Loss: 17.508726119995117 Tokens per Sec: 16500.57246311262
Epoch Step: 80 / 138 Loss: 20.02024269104004 Tokens per Sec: 17840.90489915587
Epoch Step: 85 / 138 Loss: 162.33721923828125 Tokens per Sec: 17461.3862092073
Epoch Step: 90 / 138 Loss: 24.062576293945312 Tokens per Sec: 16230.607577695886
Epoch Step: 95 / 138 Loss: 23.900766372680664 Tokens per Sec: 16062.447122148447
Epoch Step: 100 / 138 Loss: 20.2821044921875 Tokens per Sec: 14946.23743396034
Epoch Step: 105 / 138 Loss: 21.265583038330078 Tokens per Sec: 15662.524429394582
Epoch Step: 110 / 138 Loss: 19.1050968170166 Tokens per Sec: 14503.615140678767
Epoch Step: 115 / 138 Loss: 17.97660255432129 Tokens per Sec: 14271.274566101818
Epoch Step: 120 / 138 Loss: 133.88523864746094 Tokens per Sec: 15378.615422138078
Epoch Step: 125 / 138 Loss: 15.192069053649902 Tokens per Sec: 15061.991775312032
Epoch Step: 130 / 138 Loss: 20.160123825073242 Tokens per Sec: 16096.407013325152
Epoch Step: 135 / 138 Loss: 18.04718017578125 Tokens per Sec: 14829.718646386838
Epoch ended with duration 0:00:40.396719
Train perplexity: 1.4975555980405955
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , VAR_4 , STRING_3 , VAR_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_9 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.749784
Validation perplexity: 1.4876572315563035
Model saved checkpoint!
Epoch 56 / 1000
Epoch Step: 5 / 138 Loss: 86.53398895263672 Tokens per Sec: 16119.547994162891
Epoch Step: 10 / 138 Loss: 96.66781616210938 Tokens per Sec: 15244.290075038673
Epoch Step: 15 / 138 Loss: 29.10432243347168 Tokens per Sec: 15399.235410295241
Epoch Step: 20 / 138 Loss: 18.8387451171875 Tokens per Sec: 16524.31454366205
Epoch Step: 25 / 138 Loss: 23.160978317260742 Tokens per Sec: 15029.105500986958
Epoch Step: 30 / 138 Loss: 22.1104736328125 Tokens per Sec: 16162.089413584968
Epoch Step: 35 / 138 Loss: 23.872459411621094 Tokens per Sec: 14916.881118414576
Epoch Step: 40 / 138 Loss: 23.954654693603516 Tokens per Sec: 17253.840237235043
Epoch Step: 45 / 138 Loss: 19.1751708984375 Tokens per Sec: 16815.323919496586
Epoch Step: 50 / 138 Loss: 14.608759880065918 Tokens per Sec: 18660.439652832738
Epoch Step: 55 / 138 Loss: 21.067628860473633 Tokens per Sec: 15871.196718034655
Epoch Step: 60 / 138 Loss: 19.61933135986328 Tokens per Sec: 16345.53415236994
Epoch Step: 65 / 138 Loss: 18.17281723022461 Tokens per Sec: 14758.520553934011
Epoch Step: 70 / 138 Loss: 24.92010498046875 Tokens per Sec: 16834.2389933694
Epoch Step: 75 / 138 Loss: 20.556678771972656 Tokens per Sec: 16028.822667706583
Epoch Step: 80 / 138 Loss: 136.57925415039062 Tokens per Sec: 17383.540729206874
Epoch Step: 85 / 138 Loss: 17.60971450805664 Tokens per Sec: 16279.516529985645
Epoch Step: 90 / 138 Loss: 147.0504608154297 Tokens per Sec: 17306.308243285293
Epoch Step: 95 / 138 Loss: 22.243471145629883 Tokens per Sec: 15364.194981544806
Epoch Step: 100 / 138 Loss: 18.733213424682617 Tokens per Sec: 16653.14713779954
Epoch Step: 105 / 138 Loss: 20.216123580932617 Tokens per Sec: 15356.37173431552
Epoch Step: 110 / 138 Loss: 20.556751251220703 Tokens per Sec: 14909.213881498312
Epoch Step: 115 / 138 Loss: 16.610721588134766 Tokens per Sec: 15003.156814767459
Epoch Step: 120 / 138 Loss: 14.483609199523926 Tokens per Sec: 15667.255653711874
Epoch Step: 125 / 138 Loss: 69.48853302001953 Tokens per Sec: 15858.641019043063
Epoch Step: 130 / 138 Loss: 26.867408752441406 Tokens per Sec: 15100.3225736672
Epoch Step: 135 / 138 Loss: 17.79867172241211 Tokens per Sec: 13621.751660109385
Epoch ended with duration 0:00:40.143217
Train perplexity: 1.4403963962096167
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.750499
Validation perplexity: 1.331534101161639
Epoch 57 / 1000
Epoch Step: 5 / 138 Loss: 22.550621032714844 Tokens per Sec: 16232.065804533211
Epoch Step: 10 / 138 Loss: 15.116618156433105 Tokens per Sec: 17258.572529230998
Epoch Step: 15 / 138 Loss: 21.0177059173584 Tokens per Sec: 17639.37310179971
Epoch Step: 20 / 138 Loss: 11.80620288848877 Tokens per Sec: 15723.759251920354
Epoch Step: 25 / 138 Loss: 202.52891540527344 Tokens per Sec: 15764.24075228052
Epoch Step: 30 / 138 Loss: 162.65419006347656 Tokens per Sec: 15620.547518035537
Epoch Step: 35 / 138 Loss: 22.18482780456543 Tokens per Sec: 16224.522961924615
Epoch Step: 40 / 138 Loss: 17.792743682861328 Tokens per Sec: 16278.281969968288
Epoch Step: 45 / 138 Loss: 18.150060653686523 Tokens per Sec: 15722.099835942188
Epoch Step: 50 / 138 Loss: 13.628595352172852 Tokens per Sec: 15272.276667594451
Epoch Step: 55 / 138 Loss: 12.267441749572754 Tokens per Sec: 16746.059233201475
Epoch Step: 60 / 138 Loss: 23.8408203125 Tokens per Sec: 14809.023617635336
Epoch Step: 65 / 138 Loss: 22.719436645507812 Tokens per Sec: 16587.30930086063
Epoch Step: 70 / 138 Loss: 12.752538681030273 Tokens per Sec: 17339.219461718727
Epoch Step: 75 / 138 Loss: 218.11424255371094 Tokens per Sec: 15770.446950832704
Epoch Step: 80 / 138 Loss: 28.620891571044922 Tokens per Sec: 16144.531708501821
Epoch Step: 85 / 138 Loss: 18.741655349731445 Tokens per Sec: 15468.729618396417
Epoch Step: 90 / 138 Loss: 163.13304138183594 Tokens per Sec: 16379.893358624317
Epoch Step: 95 / 138 Loss: 12.752857208251953 Tokens per Sec: 15548.917184306525
Epoch Step: 100 / 138 Loss: 13.595444679260254 Tokens per Sec: 15152.968700931197
Epoch Step: 105 / 138 Loss: 18.275402069091797 Tokens per Sec: 14205.236350012074
Epoch Step: 110 / 138 Loss: 16.00657081604004 Tokens per Sec: 16084.242294471827
Epoch Step: 115 / 138 Loss: 19.689489364624023 Tokens per Sec: 15226.793062542223
Epoch Step: 120 / 138 Loss: 11.987317085266113 Tokens per Sec: 15025.796520569205
Epoch Step: 125 / 138 Loss: 19.33829689025879 Tokens per Sec: 15373.115932059804
Epoch Step: 130 / 138 Loss: 12.735916137695312 Tokens per Sec: 15088.083338925315
Epoch Step: 135 / 138 Loss: 18.921161651611328 Tokens per Sec: 15556.189679290563
Epoch ended with duration 0:00:40.369273
Train perplexity: 1.4334949850831056
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_5 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.785430
Validation perplexity: 1.5987852012741703
Epoch 58 / 1000
Epoch Step: 5 / 138 Loss: 15.745233535766602 Tokens per Sec: 15793.031059760904
Epoch Step: 10 / 138 Loss: 16.433460235595703 Tokens per Sec: 16319.723798994064
Epoch Step: 15 / 138 Loss: 146.10968017578125 Tokens per Sec: 15051.360147739179
Epoch Step: 20 / 138 Loss: 19.988727569580078 Tokens per Sec: 16321.79262738388
Epoch Step: 25 / 138 Loss: 24.988971710205078 Tokens per Sec: 16055.206117435288
Epoch Step: 30 / 138 Loss: 26.058839797973633 Tokens per Sec: 15725.710330407195
Epoch Step: 35 / 138 Loss: 13.68690013885498 Tokens per Sec: 15681.15650402974
Epoch Step: 40 / 138 Loss: 16.56044578552246 Tokens per Sec: 14622.272877615507
Epoch Step: 45 / 138 Loss: 20.825956344604492 Tokens per Sec: 14978.221974718714
Epoch Step: 50 / 138 Loss: 15.433520317077637 Tokens per Sec: 16887.365643706176
Epoch Step: 55 / 138 Loss: 16.08184051513672 Tokens per Sec: 16132.538272604945
Epoch Step: 60 / 138 Loss: 154.26612854003906 Tokens per Sec: 17462.75348509863
Epoch Step: 65 / 138 Loss: 20.77587890625 Tokens per Sec: 18487.179953023584
Epoch Step: 70 / 138 Loss: 40.75362777709961 Tokens per Sec: 15133.184285801179
Epoch Step: 75 / 138 Loss: 19.68370246887207 Tokens per Sec: 14814.51333613527
Epoch Step: 80 / 138 Loss: 28.468585968017578 Tokens per Sec: 16126.678796291024
Epoch Step: 85 / 138 Loss: 22.323328018188477 Tokens per Sec: 16006.741455271676
Epoch Step: 90 / 138 Loss: 24.831876754760742 Tokens per Sec: 15469.75929393006
Epoch Step: 95 / 138 Loss: 24.165456771850586 Tokens per Sec: 15512.130148219501
Epoch Step: 100 / 138 Loss: 16.69767189025879 Tokens per Sec: 16615.76313800884
Epoch Step: 105 / 138 Loss: 20.483234405517578 Tokens per Sec: 15246.306440373864
Epoch Step: 110 / 138 Loss: 106.39493560791016 Tokens per Sec: 14947.385394749786
Epoch Step: 115 / 138 Loss: 18.31519889831543 Tokens per Sec: 14813.868992042559
Epoch Step: 120 / 138 Loss: 22.87803840637207 Tokens per Sec: 15241.31299680057
Epoch Step: 125 / 138 Loss: 19.927467346191406 Tokens per Sec: 14900.447027592378
Epoch Step: 130 / 138 Loss: 13.830676078796387 Tokens per Sec: 14427.391160441046
Epoch Step: 135 / 138 Loss: 15.682380676269531 Tokens per Sec: 15062.339078255185
Epoch ended with duration 0:00:40.688070
Train perplexity: 1.5000285514384215
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , null . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.766923
Validation perplexity: 1.4326657658112085
Epoch 59 / 1000
Epoch Step: 5 / 138 Loss: 26.784181594848633 Tokens per Sec: 14988.498965847464
Epoch Step: 10 / 138 Loss: 14.612953186035156 Tokens per Sec: 16334.345496423808
Epoch Step: 15 / 138 Loss: 74.46435546875 Tokens per Sec: 16411.60795131096
Epoch Step: 20 / 138 Loss: 12.507562637329102 Tokens per Sec: 16351.229443166863
Epoch Step: 25 / 138 Loss: 23.850934982299805 Tokens per Sec: 16410.112841134785
Epoch Step: 30 / 138 Loss: 14.246026039123535 Tokens per Sec: 17745.293963179232
Epoch Step: 35 / 138 Loss: 13.243303298950195 Tokens per Sec: 18182.80034705014
Epoch Step: 40 / 138 Loss: 23.265140533447266 Tokens per Sec: 16339.68043866979
Epoch Step: 45 / 138 Loss: 11.675699234008789 Tokens per Sec: 15549.871198163972
Epoch Step: 50 / 138 Loss: 9.954736709594727 Tokens per Sec: 16511.944920850838
Epoch Step: 55 / 138 Loss: 17.158794403076172 Tokens per Sec: 15694.54861093803
Epoch Step: 60 / 138 Loss: 18.048717498779297 Tokens per Sec: 15244.181001312172
Epoch Step: 65 / 138 Loss: 19.975893020629883 Tokens per Sec: 15540.847943915316
Epoch Step: 70 / 138 Loss: 26.774253845214844 Tokens per Sec: 16153.739754410783
Epoch Step: 75 / 138 Loss: 24.958744049072266 Tokens per Sec: 15579.974687835822
Epoch Step: 80 / 138 Loss: 28.32230567932129 Tokens per Sec: 15466.649415986121
Epoch Step: 85 / 138 Loss: 18.31623077392578 Tokens per Sec: 15297.916183390173
Epoch Step: 90 / 138 Loss: 17.2526798248291 Tokens per Sec: 17167.74437927236
Epoch Step: 95 / 138 Loss: 24.64185333251953 Tokens per Sec: 15171.4617346254
Epoch Step: 100 / 138 Loss: 12.269147872924805 Tokens per Sec: 15551.716321962262
Epoch Step: 105 / 138 Loss: 17.46855926513672 Tokens per Sec: 15779.773951958334
Epoch Step: 110 / 138 Loss: 14.083237648010254 Tokens per Sec: 13217.751508023282
Epoch Step: 115 / 138 Loss: 13.6836519241333 Tokens per Sec: 15058.829255721552
Epoch Step: 120 / 138 Loss: 15.673035621643066 Tokens per Sec: 15709.408260512977
Epoch Step: 125 / 138 Loss: 17.116865158081055 Tokens per Sec: 14972.191719715887
Epoch Step: 130 / 138 Loss: 11.397360801696777 Tokens per Sec: 16031.469324257685
Epoch Step: 135 / 138 Loss: 18.52458381652832 Tokens per Sec: 15908.433533776262
Epoch ended with duration 0:00:40.343721
Train perplexity: 1.5137550792672438
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.773067
Validation perplexity: 1.417457547651641
Epoch 60 / 1000
Epoch Step: 5 / 138 Loss: 10.274580955505371 Tokens per Sec: 16113.38582542771
Epoch Step: 10 / 138 Loss: 18.66069221496582 Tokens per Sec: 14846.285855521852
Epoch Step: 15 / 138 Loss: 100.5472640991211 Tokens per Sec: 15604.754813703003
Epoch Step: 20 / 138 Loss: 97.34796905517578 Tokens per Sec: 16529.494590957584
Epoch Step: 25 / 138 Loss: 94.24901580810547 Tokens per Sec: 15582.689761790858
Epoch Step: 30 / 138 Loss: 20.444705963134766 Tokens per Sec: 15127.651945795049
Epoch Step: 35 / 138 Loss: 15.54822063446045 Tokens per Sec: 15382.11048912468
Epoch Step: 40 / 138 Loss: 15.118494033813477 Tokens per Sec: 16215.062733473334
Epoch Step: 45 / 138 Loss: 20.067018508911133 Tokens per Sec: 15721.290914397645
Epoch Step: 50 / 138 Loss: 22.790050506591797 Tokens per Sec: 14847.268836636676
Epoch Step: 55 / 138 Loss: 17.36067771911621 Tokens per Sec: 15520.702338155379
Epoch Step: 60 / 138 Loss: 12.12646770477295 Tokens per Sec: 16543.812833722815
Epoch Step: 65 / 138 Loss: 11.858510971069336 Tokens per Sec: 15183.731208051207
Epoch Step: 70 / 138 Loss: 16.595245361328125 Tokens per Sec: 15731.364268690973
Epoch Step: 75 / 138 Loss: 17.427412033081055 Tokens per Sec: 16650.15512830777
Epoch Step: 80 / 138 Loss: 18.470535278320312 Tokens per Sec: 15582.818494335004
Epoch Step: 85 / 138 Loss: 14.391080856323242 Tokens per Sec: 16100.752482231217
Epoch Step: 90 / 138 Loss: 19.459516525268555 Tokens per Sec: 17321.77044207321
Epoch Step: 95 / 138 Loss: 13.650215148925781 Tokens per Sec: 17853.855665287756
Epoch Step: 100 / 138 Loss: 12.557351112365723 Tokens per Sec: 17006.28470629336
Epoch Step: 105 / 138 Loss: 18.87132453918457 Tokens per Sec: 14517.205199444428
Epoch Step: 110 / 138 Loss: 16.23177719116211 Tokens per Sec: 14950.230379999784
Epoch Step: 115 / 138 Loss: 18.330570220947266 Tokens per Sec: 14752.34156077477
Epoch Step: 120 / 138 Loss: 24.02770233154297 Tokens per Sec: 15976.673995871963
Epoch Step: 125 / 138 Loss: 23.919391632080078 Tokens per Sec: 15296.130228911104
Epoch Step: 130 / 138 Loss: 71.92733001708984 Tokens per Sec: 13657.765520761292
Epoch Step: 135 / 138 Loss: 16.36126136779785 Tokens per Sec: 14868.814216726514
Epoch ended with duration 0:00:40.788667
Train perplexity: 1.5490717000262542
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.794272
Validation perplexity: 1.7623160713403412
Model saved checkpoint!
Epoch 61 / 1000
Epoch Step: 5 / 138 Loss: 23.775270462036133 Tokens per Sec: 15605.08722461972
Epoch Step: 10 / 138 Loss: 10.48492431640625 Tokens per Sec: 16198.327047961375
Epoch Step: 15 / 138 Loss: 13.713643074035645 Tokens per Sec: 17652.58692389382
Epoch Step: 20 / 138 Loss: 84.38079833984375 Tokens per Sec: 15312.416209862362
Epoch Step: 25 / 138 Loss: 28.283639907836914 Tokens per Sec: 16247.36893965559
Epoch Step: 30 / 138 Loss: 24.260597229003906 Tokens per Sec: 16673.582808876432
Epoch Step: 35 / 138 Loss: 167.77676391601562 Tokens per Sec: 15164.58942642847
Epoch Step: 40 / 138 Loss: 21.37757110595703 Tokens per Sec: 15454.676174923892
Epoch Step: 45 / 138 Loss: 122.14149475097656 Tokens per Sec: 16087.806326259002
Epoch Step: 50 / 138 Loss: 37.877960205078125 Tokens per Sec: 18081.186428249224
Epoch Step: 55 / 138 Loss: 15.924180030822754 Tokens per Sec: 18843.78832979944
Epoch Step: 60 / 138 Loss: 21.456945419311523 Tokens per Sec: 15773.326590486233
Epoch Step: 65 / 138 Loss: 105.85771179199219 Tokens per Sec: 14540.507168634094
Epoch Step: 70 / 138 Loss: 13.108859062194824 Tokens per Sec: 15208.769207094098
Epoch Step: 75 / 138 Loss: 16.458038330078125 Tokens per Sec: 15681.878747614424
Epoch Step: 80 / 138 Loss: 21.22115135192871 Tokens per Sec: 15640.749388836794
Epoch Step: 85 / 138 Loss: 16.854583740234375 Tokens per Sec: 16678.85828170422
Epoch Step: 90 / 138 Loss: 18.24149513244629 Tokens per Sec: 15510.07853919858
Epoch Step: 95 / 138 Loss: 20.401845932006836 Tokens per Sec: 15325.978885135644
Epoch Step: 100 / 138 Loss: 15.102655410766602 Tokens per Sec: 15938.485507073034
Epoch Step: 105 / 138 Loss: 23.307809829711914 Tokens per Sec: 15370.083593351388
Epoch Step: 110 / 138 Loss: 180.5155487060547 Tokens per Sec: 14536.83395704419
Epoch Step: 115 / 138 Loss: 21.673290252685547 Tokens per Sec: 16275.35660500308
Epoch Step: 120 / 138 Loss: 18.553272247314453 Tokens per Sec: 13407.72007601832
Epoch Step: 125 / 138 Loss: 14.90839672088623 Tokens per Sec: 15276.863806637166
Epoch Step: 130 / 138 Loss: 14.458786964416504 Tokens per Sec: 15160.431645949533
Epoch Step: 135 / 138 Loss: 17.771169662475586 Tokens per Sec: 15565.650008391302
Epoch ended with duration 0:00:40.560292
Train perplexity: 1.5045678668587052
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.786677
Validation perplexity: 1.3262143764271734
Epoch 62 / 1000
Epoch Step: 5 / 138 Loss: 11.815130233764648 Tokens per Sec: 15455.153025352118
Epoch Step: 10 / 138 Loss: 17.881675720214844 Tokens per Sec: 15791.006758579973
Epoch Step: 15 / 138 Loss: 20.143163681030273 Tokens per Sec: 18068.457152880823
Epoch Step: 20 / 138 Loss: 16.071977615356445 Tokens per Sec: 17576.066000456212
Epoch Step: 25 / 138 Loss: 13.874185562133789 Tokens per Sec: 16964.134305156455
Epoch Step: 30 / 138 Loss: 11.915421485900879 Tokens per Sec: 16403.094022178084
Epoch Step: 35 / 138 Loss: 7.885194301605225 Tokens per Sec: 15352.236028644727
Epoch Step: 40 / 138 Loss: 8.816540718078613 Tokens per Sec: 16043.834172664203
Epoch Step: 45 / 138 Loss: 14.255253791809082 Tokens per Sec: 14855.392891638445
Epoch Step: 50 / 138 Loss: 9.191625595092773 Tokens per Sec: 15531.744469995396
Epoch Step: 55 / 138 Loss: 12.542226791381836 Tokens per Sec: 15516.017565772734
Epoch Step: 60 / 138 Loss: 19.827293395996094 Tokens per Sec: 15116.925105434972
Epoch Step: 65 / 138 Loss: 16.63258934020996 Tokens per Sec: 15704.879600259952
Epoch Step: 70 / 138 Loss: 13.608338356018066 Tokens per Sec: 15282.883810723903
Epoch Step: 75 / 138 Loss: 24.26736068725586 Tokens per Sec: 16065.682889156964
Epoch Step: 80 / 138 Loss: 44.53366470336914 Tokens per Sec: 16536.817176847406
Epoch Step: 85 / 138 Loss: 11.327157020568848 Tokens per Sec: 17116.199766978578
Epoch Step: 90 / 138 Loss: 19.8896427154541 Tokens per Sec: 16704.549624262578
Epoch Step: 95 / 138 Loss: 18.5964412689209 Tokens per Sec: 15585.238452097477
Epoch Step: 100 / 138 Loss: 26.9434871673584 Tokens per Sec: 16148.75195764585
Epoch Step: 105 / 138 Loss: 18.415281295776367 Tokens per Sec: 12149.98524215711
Epoch Step: 110 / 138 Loss: 19.745685577392578 Tokens per Sec: 15185.254388832329
Epoch Step: 115 / 138 Loss: 17.311735153198242 Tokens per Sec: 15114.356632512694
Epoch Step: 120 / 138 Loss: 17.110496520996094 Tokens per Sec: 17791.240597867367
Epoch Step: 125 / 138 Loss: 149.0824737548828 Tokens per Sec: 16137.94458151214
Epoch Step: 130 / 138 Loss: 18.325117111206055 Tokens per Sec: 14866.896157250218
Epoch Step: 135 / 138 Loss: 112.42801666259766 Tokens per Sec: 14856.228116847129
Epoch ended with duration 0:00:40.390499
Train perplexity: 1.4867661159288936
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.772425
Validation perplexity: 1.524509266646625
Epoch 63 / 1000
Epoch Step: 5 / 138 Loss: 14.363302230834961 Tokens per Sec: 16566.700485721798
Epoch Step: 10 / 138 Loss: 11.912140846252441 Tokens per Sec: 17597.302996306644
Epoch Step: 15 / 138 Loss: 21.42603874206543 Tokens per Sec: 15920.635786229723
Epoch Step: 20 / 138 Loss: 10.47996997833252 Tokens per Sec: 15559.370034361538
Epoch Step: 25 / 138 Loss: 22.63433837890625 Tokens per Sec: 15516.911136485434
Epoch Step: 30 / 138 Loss: 128.62249755859375 Tokens per Sec: 15925.977195873105
Epoch Step: 35 / 138 Loss: 20.55514907836914 Tokens per Sec: 15292.16485667262
Epoch Step: 40 / 138 Loss: 133.0926055908203 Tokens per Sec: 16317.597892790447
Epoch Step: 45 / 138 Loss: 20.200265884399414 Tokens per Sec: 14690.280682548695
Epoch Step: 50 / 138 Loss: 115.06126403808594 Tokens per Sec: 16619.224207383195
Epoch Step: 55 / 138 Loss: 19.422931671142578 Tokens per Sec: 16156.63094515257
Epoch Step: 60 / 138 Loss: 23.00155258178711 Tokens per Sec: 16183.630494334695
Epoch Step: 65 / 138 Loss: 14.356547355651855 Tokens per Sec: 16293.164355169323
Epoch Step: 70 / 138 Loss: 16.593292236328125 Tokens per Sec: 16985.386417788766
Epoch Step: 75 / 138 Loss: 23.754270553588867 Tokens per Sec: 15475.575122932145
Epoch Step: 80 / 138 Loss: 25.80068016052246 Tokens per Sec: 18893.06660764461
Epoch Step: 85 / 138 Loss: 25.155786514282227 Tokens per Sec: 15874.636948190175
Epoch Step: 90 / 138 Loss: 31.118144989013672 Tokens per Sec: 15614.767166399013
Epoch Step: 95 / 138 Loss: 142.43191528320312 Tokens per Sec: 15605.505447496344
Epoch Step: 100 / 138 Loss: 12.977170944213867 Tokens per Sec: 15616.650801931903
Epoch Step: 105 / 138 Loss: 48.772865295410156 Tokens per Sec: 13619.507877330127
Epoch Step: 110 / 138 Loss: 29.88693618774414 Tokens per Sec: 14955.140226486064
Epoch Step: 115 / 138 Loss: 21.357521057128906 Tokens per Sec: 15659.905229207487
Epoch Step: 120 / 138 Loss: 112.70807647705078 Tokens per Sec: 14907.724751876021
Epoch Step: 125 / 138 Loss: 22.67276382446289 Tokens per Sec: 14973.446112571206
Epoch Step: 130 / 138 Loss: 22.547040939331055 Tokens per Sec: 14968.42643545119
Epoch Step: 135 / 138 Loss: 16.87111473083496 Tokens per Sec: 14623.42168491365
Epoch ended with duration 0:00:40.521704
Train perplexity: 1.584689435083236
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.745256
Validation perplexity: 1.3065531117613787
Model saved best_on_validation!
Epoch 64 / 1000
Epoch Step: 5 / 138 Loss: 12.862703323364258 Tokens per Sec: 16045.749708978161
Epoch Step: 10 / 138 Loss: 11.84546184539795 Tokens per Sec: 15262.701052069418
Epoch Step: 15 / 138 Loss: 20.720478057861328 Tokens per Sec: 15753.6587649733
Epoch Step: 20 / 138 Loss: 13.27965259552002 Tokens per Sec: 16378.789930930969
Epoch Step: 25 / 138 Loss: 15.683016777038574 Tokens per Sec: 16251.538370835191
Epoch Step: 30 / 138 Loss: 18.01801872253418 Tokens per Sec: 18220.09774038578
Epoch Step: 35 / 138 Loss: 10.592663764953613 Tokens per Sec: 16453.227592069405
Epoch Step: 40 / 138 Loss: 17.903963088989258 Tokens per Sec: 15689.399744597038
Epoch Step: 45 / 138 Loss: 13.648533821105957 Tokens per Sec: 17226.15226917423
Epoch Step: 50 / 138 Loss: 7.930274963378906 Tokens per Sec: 16739.69767817299
Epoch Step: 55 / 138 Loss: 17.624723434448242 Tokens per Sec: 16090.50994689678
Epoch Step: 60 / 138 Loss: 146.8963165283203 Tokens per Sec: 15661.49065341147
Epoch Step: 65 / 138 Loss: 19.140851974487305 Tokens per Sec: 15524.530194730496
Epoch Step: 70 / 138 Loss: 18.765838623046875 Tokens per Sec: 16180.590287528781
Epoch Step: 75 / 138 Loss: 11.966699600219727 Tokens per Sec: 16469.044944744917
Epoch Step: 80 / 138 Loss: 21.959651947021484 Tokens per Sec: 15073.48600178426
Epoch Step: 85 / 138 Loss: 16.872509002685547 Tokens per Sec: 15325.656217901109
Epoch Step: 90 / 138 Loss: 23.853965759277344 Tokens per Sec: 14878.973834598555
Epoch Step: 95 / 138 Loss: 16.357357025146484 Tokens per Sec: 15847.859307757688
Epoch Step: 100 / 138 Loss: 16.819854736328125 Tokens per Sec: 15761.596767898913
Epoch Step: 105 / 138 Loss: 17.865583419799805 Tokens per Sec: 15622.921006987168
Epoch Step: 110 / 138 Loss: 18.564054489135742 Tokens per Sec: 14394.152780251065
Epoch Step: 115 / 138 Loss: 14.266908645629883 Tokens per Sec: 15194.389733549677
Epoch Step: 120 / 138 Loss: 13.75620174407959 Tokens per Sec: 14520.18979113316
Epoch Step: 125 / 138 Loss: 129.61021423339844 Tokens per Sec: 15425.787443135046
Epoch Step: 130 / 138 Loss: 23.904422760009766 Tokens per Sec: 13669.884311967315
Epoch Step: 135 / 138 Loss: 21.09650993347168 Tokens per Sec: 15351.946854921993
Epoch ended with duration 0:00:40.626022
Train perplexity: 1.4414087918960476
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.771264
Validation perplexity: 1.486653610562165
Epoch 65 / 1000
Epoch Step: 5 / 138 Loss: 19.54435157775879 Tokens per Sec: 18431.342004622384
Epoch Step: 10 / 138 Loss: 17.205476760864258 Tokens per Sec: 16644.523113048876
Epoch Step: 15 / 138 Loss: 12.940910339355469 Tokens per Sec: 16110.087990284634
Epoch Step: 20 / 138 Loss: 16.51580238342285 Tokens per Sec: 17428.140037943213
Epoch Step: 25 / 138 Loss: 15.737394332885742 Tokens per Sec: 15460.588455626714
Epoch Step: 30 / 138 Loss: 16.968276977539062 Tokens per Sec: 14747.84994909426
Epoch Step: 35 / 138 Loss: 17.072114944458008 Tokens per Sec: 15073.840509204474
Epoch Step: 40 / 138 Loss: 205.1282958984375 Tokens per Sec: 16140.515553644218
Epoch Step: 45 / 138 Loss: 20.823177337646484 Tokens per Sec: 15700.500667009785
Epoch Step: 50 / 138 Loss: 19.75270652770996 Tokens per Sec: 16273.054894461704
Epoch Step: 55 / 138 Loss: 20.110130310058594 Tokens per Sec: 14746.728569932768
Epoch Step: 60 / 138 Loss: 10.743760108947754 Tokens per Sec: 16531.190815262835
Epoch Step: 65 / 138 Loss: 15.549376487731934 Tokens per Sec: 16429.31178984462
Epoch Step: 70 / 138 Loss: 9.707022666931152 Tokens per Sec: 16809.682818797042
Epoch Step: 75 / 138 Loss: 10.764188766479492 Tokens per Sec: 13882.506118057609
Epoch Step: 80 / 138 Loss: 22.45185661315918 Tokens per Sec: 14973.247161460631
Epoch Step: 85 / 138 Loss: 20.27896499633789 Tokens per Sec: 16422.886506463852
Epoch Step: 90 / 138 Loss: 15.540010452270508 Tokens per Sec: 15635.764934499553
Epoch Step: 95 / 138 Loss: 20.51235008239746 Tokens per Sec: 18917.11704141688
Epoch Step: 100 / 138 Loss: 21.478076934814453 Tokens per Sec: 18006.982724822716
Epoch Step: 105 / 138 Loss: 13.077195167541504 Tokens per Sec: 13302.252985516809
Epoch Step: 110 / 138 Loss: 18.073974609375 Tokens per Sec: 15526.003880922884
Epoch Step: 115 / 138 Loss: 161.10472106933594 Tokens per Sec: 14166.88111911555
Epoch Step: 120 / 138 Loss: 20.322460174560547 Tokens per Sec: 15680.956149442121
Epoch Step: 125 / 138 Loss: 16.517833709716797 Tokens per Sec: 15260.287156336972
Epoch Step: 130 / 138 Loss: 18.518165588378906 Tokens per Sec: 14617.41462552619
Epoch Step: 135 / 138 Loss: 17.088260650634766 Tokens per Sec: 15399.776316470708
Epoch ended with duration 0:00:40.338862
Train perplexity: 1.4981668246945745
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.782757
Validation perplexity: 1.408710251264516
Model saved checkpoint!
Epoch 66 / 1000
Epoch Step: 5 / 138 Loss: 19.258630752563477 Tokens per Sec: 16145.727867078494
Epoch Step: 10 / 138 Loss: 15.422792434692383 Tokens per Sec: 16396.473428823992
Epoch Step: 15 / 138 Loss: 14.097979545593262 Tokens per Sec: 16068.311930237398
Epoch Step: 20 / 138 Loss: 18.92376136779785 Tokens per Sec: 16325.219727259397
Epoch Step: 25 / 138 Loss: 19.018112182617188 Tokens per Sec: 16751.809695274125
Epoch Step: 30 / 138 Loss: 23.052383422851562 Tokens per Sec: 15810.483379701634
Epoch Step: 35 / 138 Loss: 13.543360710144043 Tokens per Sec: 16295.652846679706
Epoch Step: 40 / 138 Loss: 14.014209747314453 Tokens per Sec: 14898.811804987952
Epoch Step: 45 / 138 Loss: 111.51123809814453 Tokens per Sec: 13949.078629511192
Epoch Step: 50 / 138 Loss: 8.710614204406738 Tokens per Sec: 17112.379948250877
Epoch Step: 55 / 138 Loss: 16.134592056274414 Tokens per Sec: 15190.939857433787
Epoch Step: 60 / 138 Loss: 8.426351547241211 Tokens per Sec: 17704.0561509242
Epoch Step: 65 / 138 Loss: 8.714766502380371 Tokens per Sec: 18257.904307250836
Epoch Step: 70 / 138 Loss: 23.694265365600586 Tokens per Sec: 15641.892980593904
Epoch Step: 75 / 138 Loss: 11.154638290405273 Tokens per Sec: 15631.652622675598
Epoch Step: 80 / 138 Loss: 121.52108001708984 Tokens per Sec: 15910.183867844225
Epoch Step: 85 / 138 Loss: 20.877235412597656 Tokens per Sec: 15501.848515846683
Epoch Step: 90 / 138 Loss: 9.060684204101562 Tokens per Sec: 14812.25788685277
Epoch Step: 95 / 138 Loss: 17.05634880065918 Tokens per Sec: 16645.59886834089
Epoch Step: 100 / 138 Loss: 19.472341537475586 Tokens per Sec: 14921.818773836052
Epoch Step: 105 / 138 Loss: 12.194061279296875 Tokens per Sec: 15773.812429149451
Epoch Step: 110 / 138 Loss: 11.918974876403809 Tokens per Sec: 15784.121877499316
Epoch Step: 115 / 138 Loss: 11.057120323181152 Tokens per Sec: 15643.227311962222
Epoch Step: 120 / 138 Loss: 13.76414680480957 Tokens per Sec: 15661.373856743467
Epoch Step: 125 / 138 Loss: 12.787734031677246 Tokens per Sec: 15054.011965109692
Epoch Step: 130 / 138 Loss: 13.424659729003906 Tokens per Sec: 14850.586559824524
Epoch Step: 135 / 138 Loss: 14.820863723754883 Tokens per Sec: 14743.520872797557
Epoch ended with duration 0:00:40.567379
Train perplexity: 1.3377792583307617
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.776816
Validation perplexity: 1.3997952611187239
Epoch 67 / 1000
Epoch Step: 5 / 138 Loss: 9.174893379211426 Tokens per Sec: 16867.44203859331
Epoch Step: 10 / 138 Loss: 7.871795654296875 Tokens per Sec: 16863.58962031972
Epoch Step: 15 / 138 Loss: 19.004390716552734 Tokens per Sec: 15864.790770918376
Epoch Step: 20 / 138 Loss: 19.349016189575195 Tokens per Sec: 17417.64086299675
Epoch Step: 25 / 138 Loss: 11.297410011291504 Tokens per Sec: 16987.145476162932
Epoch Step: 30 / 138 Loss: 16.64760398864746 Tokens per Sec: 17142.38759564624
Epoch Step: 35 / 138 Loss: 11.302931785583496 Tokens per Sec: 16260.574852150081
Epoch Step: 40 / 138 Loss: 18.488882064819336 Tokens per Sec: 14326.020506122126
Epoch Step: 45 / 138 Loss: 21.611278533935547 Tokens per Sec: 14549.988211375414
Epoch Step: 50 / 138 Loss: 13.55068588256836 Tokens per Sec: 16613.8475207641
Epoch Step: 55 / 138 Loss: 16.334014892578125 Tokens per Sec: 15250.732504516398
Epoch Step: 60 / 138 Loss: 20.49463653564453 Tokens per Sec: 15514.514511361936
Epoch Step: 65 / 138 Loss: 134.83575439453125 Tokens per Sec: 14896.601307422181
Epoch Step: 70 / 138 Loss: 22.134023666381836 Tokens per Sec: 14889.451800176643
Epoch Step: 75 / 138 Loss: 9.133760452270508 Tokens per Sec: 16041.59699969371
Epoch Step: 80 / 138 Loss: 16.506465911865234 Tokens per Sec: 17573.431350433824
Epoch Step: 85 / 138 Loss: 12.130423545837402 Tokens per Sec: 15752.652108295146
Epoch Step: 90 / 138 Loss: 12.592565536499023 Tokens per Sec: 16971.946343595064
Epoch Step: 95 / 138 Loss: 12.275137901306152 Tokens per Sec: 16844.56088044825
Epoch Step: 100 / 138 Loss: 9.756780624389648 Tokens per Sec: 17298.910421591132
Epoch Step: 105 / 138 Loss: 15.404773712158203 Tokens per Sec: 14562.86406153554
Epoch Step: 110 / 138 Loss: 18.59909439086914 Tokens per Sec: 14615.290952422749
Epoch Step: 115 / 138 Loss: 18.773290634155273 Tokens per Sec: 15407.666219019451
Epoch Step: 120 / 138 Loss: 14.386321067810059 Tokens per Sec: 14086.076897774481
Epoch Step: 125 / 138 Loss: 15.549060821533203 Tokens per Sec: 13379.679403756567
Epoch Step: 130 / 138 Loss: 17.7623348236084 Tokens per Sec: 16359.730750270703
Epoch Step: 135 / 138 Loss: 128.82054138183594 Tokens per Sec: 17056.76596796459
Epoch ended with duration 0:00:40.298554
Train perplexity: 1.3798826080946947
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.788301
Validation perplexity: 1.4400617070854351
Epoch 68 / 1000
Epoch Step: 5 / 138 Loss: 13.907417297363281 Tokens per Sec: 15919.493931900803
Epoch Step: 10 / 138 Loss: 16.87812614440918 Tokens per Sec: 15968.983131045416
Epoch Step: 15 / 138 Loss: 18.264448165893555 Tokens per Sec: 16974.8589719114
Epoch Step: 20 / 138 Loss: 85.3077621459961 Tokens per Sec: 16023.788016735372
Epoch Step: 25 / 138 Loss: 19.74245262145996 Tokens per Sec: 14572.77752250396
Epoch Step: 30 / 138 Loss: 15.14271068572998 Tokens per Sec: 15390.537484740158
Epoch Step: 35 / 138 Loss: 20.686967849731445 Tokens per Sec: 15686.56759512433
Epoch Step: 40 / 138 Loss: 10.086224555969238 Tokens per Sec: 15767.608504960315
Epoch Step: 45 / 138 Loss: 14.338769912719727 Tokens per Sec: 15942.470841318887
Epoch Step: 50 / 138 Loss: 11.371598243713379 Tokens per Sec: 15952.892082995248
Epoch Step: 55 / 138 Loss: 19.046438217163086 Tokens per Sec: 17299.951631863005
Epoch Step: 60 / 138 Loss: 12.570684432983398 Tokens per Sec: 17106.50859027796
Epoch Step: 65 / 138 Loss: 15.941852569580078 Tokens per Sec: 17004.10536707183
Epoch Step: 70 / 138 Loss: 10.181952476501465 Tokens per Sec: 15629.318055165766
Epoch Step: 75 / 138 Loss: 154.4903106689453 Tokens per Sec: 14959.036264485165
Epoch Step: 80 / 138 Loss: 9.909733772277832 Tokens per Sec: 16073.915341836107
Epoch Step: 85 / 138 Loss: 13.645075798034668 Tokens per Sec: 17106.123086435233
Epoch Step: 90 / 138 Loss: 20.6397762298584 Tokens per Sec: 15623.757556099805
Epoch Step: 95 / 138 Loss: 35.026710510253906 Tokens per Sec: 16831.08409859678
Epoch Step: 100 / 138 Loss: 12.712250709533691 Tokens per Sec: 16066.999960917847
Epoch Step: 105 / 138 Loss: 24.960243225097656 Tokens per Sec: 14327.324767712113
Epoch Step: 110 / 138 Loss: 14.109003067016602 Tokens per Sec: 15186.868535507527
Epoch Step: 115 / 138 Loss: 11.978787422180176 Tokens per Sec: 14498.307151439125
Epoch Step: 120 / 138 Loss: 14.526859283447266 Tokens per Sec: 13885.755691300279
Epoch Step: 125 / 138 Loss: 15.571306228637695 Tokens per Sec: 15139.202826284289
Epoch Step: 130 / 138 Loss: 12.894387245178223 Tokens per Sec: 15180.558480247497
Epoch Step: 135 / 138 Loss: 9.959559440612793 Tokens per Sec: 15928.635719164655
Epoch ended with duration 0:00:40.565305
Train perplexity: 1.4454792994007493
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.790343
Validation perplexity: 1.6503474368973639
Epoch 69 / 1000
Epoch Step: 5 / 138 Loss: 12.806775093078613 Tokens per Sec: 15854.743413669317
Epoch Step: 10 / 138 Loss: 16.952484130859375 Tokens per Sec: 15578.4632893813
Epoch Step: 15 / 138 Loss: 14.443318367004395 Tokens per Sec: 16041.215705649982
Epoch Step: 20 / 138 Loss: 13.847381591796875 Tokens per Sec: 15262.806687514932
Epoch Step: 25 / 138 Loss: 13.277250289916992 Tokens per Sec: 15804.514677142453
Epoch Step: 30 / 138 Loss: 76.5599594116211 Tokens per Sec: 16889.641727483388
Epoch Step: 35 / 138 Loss: 9.508068084716797 Tokens per Sec: 15809.632280672882
Epoch Step: 40 / 138 Loss: 16.96950912475586 Tokens per Sec: 16620.57448195356
Epoch Step: 45 / 138 Loss: 16.38193702697754 Tokens per Sec: 17008.06137108662
Epoch Step: 50 / 138 Loss: 21.856159210205078 Tokens per Sec: 17452.74820097658
Epoch Step: 55 / 138 Loss: 8.277406692504883 Tokens per Sec: 15693.611986356222
Epoch Step: 60 / 138 Loss: 17.662384033203125 Tokens per Sec: 16592.999663850173
Epoch Step: 65 / 138 Loss: 23.041465759277344 Tokens per Sec: 15433.338082845443
Epoch Step: 70 / 138 Loss: 12.114482879638672 Tokens per Sec: 15976.221838249727
Epoch Step: 75 / 138 Loss: 12.120107650756836 Tokens per Sec: 15218.368628604443
Epoch Step: 80 / 138 Loss: 125.88094329833984 Tokens per Sec: 15277.408756878958
Epoch Step: 85 / 138 Loss: 13.155004501342773 Tokens per Sec: 15818.388683669225
Epoch Step: 90 / 138 Loss: 11.062776565551758 Tokens per Sec: 17059.459829250656
Epoch Step: 95 / 138 Loss: 7.278317451477051 Tokens per Sec: 15700.686759429735
Epoch Step: 100 / 138 Loss: 16.525989532470703 Tokens per Sec: 15702.132447918211
Epoch Step: 105 / 138 Loss: 82.44890594482422 Tokens per Sec: 15421.489225462516
Epoch Step: 110 / 138 Loss: 20.724855422973633 Tokens per Sec: 13991.42123373148
Epoch Step: 115 / 138 Loss: 23.924964904785156 Tokens per Sec: 15792.290957573343
Epoch Step: 120 / 138 Loss: 127.61906433105469 Tokens per Sec: 15286.743784762797
Epoch Step: 125 / 138 Loss: 20.77349090576172 Tokens per Sec: 14976.333134627792
Epoch Step: 130 / 138 Loss: 15.100603103637695 Tokens per Sec: 15094.768183938155
Epoch Step: 135 / 138 Loss: 19.425180435180664 Tokens per Sec: 15183.562674438406
Epoch ended with duration 0:00:40.443437
Train perplexity: 1.3141485235165078
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.748437
Validation perplexity: 1.2962162227998768
Model saved best_on_validation!
Epoch 70 / 1000
Epoch Step: 5 / 138 Loss: 11.602045059204102 Tokens per Sec: 17363.856105830477
Epoch Step: 10 / 138 Loss: 19.260536193847656 Tokens per Sec: 16394.532337310182
Epoch Step: 15 / 138 Loss: 23.362302780151367 Tokens per Sec: 16457.961916081393
Epoch Step: 20 / 138 Loss: 8.216071128845215 Tokens per Sec: 15824.476669688864
Epoch Step: 25 / 138 Loss: 11.59634780883789 Tokens per Sec: 16147.72351670861
Epoch Step: 30 / 138 Loss: 7.764792442321777 Tokens per Sec: 16116.800372172993
Epoch Step: 35 / 138 Loss: 19.92104721069336 Tokens per Sec: 15386.571140184165
Epoch Step: 40 / 138 Loss: 16.450075149536133 Tokens per Sec: 16227.65591869364
Epoch Step: 45 / 138 Loss: 18.60811424255371 Tokens per Sec: 16092.491929591806
Epoch Step: 50 / 138 Loss: 21.337806701660156 Tokens per Sec: 16684.05623088835
Epoch Step: 55 / 138 Loss: 17.417634963989258 Tokens per Sec: 15896.350966772332
Epoch Step: 60 / 138 Loss: 15.940145492553711 Tokens per Sec: 16052.009663722742
Epoch Step: 65 / 138 Loss: 10.909506797790527 Tokens per Sec: 15997.586269656986
Epoch Step: 70 / 138 Loss: 148.26939392089844 Tokens per Sec: 15082.33177366172
Epoch Step: 75 / 138 Loss: 15.246307373046875 Tokens per Sec: 15119.212746600217
Epoch Step: 80 / 138 Loss: 16.146427154541016 Tokens per Sec: 16680.802069885984
Epoch Step: 85 / 138 Loss: 14.926779747009277 Tokens per Sec: 15626.31164097465
Epoch Step: 90 / 138 Loss: 13.852946281433105 Tokens per Sec: 15631.189944614749
Epoch Step: 95 / 138 Loss: 19.619548797607422 Tokens per Sec: 15401.154114998511
Epoch Step: 100 / 138 Loss: 11.269857406616211 Tokens per Sec: 17167.129551990394
Epoch Step: 105 / 138 Loss: 15.895320892333984 Tokens per Sec: 16559.45739608375
Epoch Step: 110 / 138 Loss: 14.691851615905762 Tokens per Sec: 15952.53882479606
Epoch Step: 115 / 138 Loss: 17.468740463256836 Tokens per Sec: 14825.137541082508
Epoch Step: 120 / 138 Loss: 13.80977725982666 Tokens per Sec: 16585.286148406314
Epoch Step: 125 / 138 Loss: 16.30331039428711 Tokens per Sec: 14707.085005290786
Epoch Step: 130 / 138 Loss: 9.882489204406738 Tokens per Sec: 13649.375552742094
Epoch Step: 135 / 138 Loss: 13.60745620727539 Tokens per Sec: 15375.293994746444
Epoch ended with duration 0:00:40.246937
Train perplexity: 1.384357501825508
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.784559
Validation perplexity: 1.3691677673017189
Model saved checkpoint!
Epoch 71 / 1000
Epoch Step: 5 / 138 Loss: 9.239358901977539 Tokens per Sec: 15797.23324963658
Epoch Step: 10 / 138 Loss: 17.984371185302734 Tokens per Sec: 16538.484562799604
Epoch Step: 15 / 138 Loss: 8.111257553100586 Tokens per Sec: 16101.39216776102
Epoch Step: 20 / 138 Loss: 11.647052764892578 Tokens per Sec: 15950.91556523991
Epoch Step: 25 / 138 Loss: 12.507584571838379 Tokens per Sec: 15620.799202963557
Epoch Step: 30 / 138 Loss: 9.942813873291016 Tokens per Sec: 16757.657356799868
Epoch Step: 35 / 138 Loss: 13.508729934692383 Tokens per Sec: 15977.895230136855
Epoch Step: 40 / 138 Loss: 12.949651718139648 Tokens per Sec: 16555.334698907547
Epoch Step: 45 / 138 Loss: 10.56106948852539 Tokens per Sec: 14284.404569073045
Epoch Step: 50 / 138 Loss: 12.12092399597168 Tokens per Sec: 16042.272329838013
Epoch Step: 55 / 138 Loss: 9.789321899414062 Tokens per Sec: 16275.646420161118
Epoch Step: 60 / 138 Loss: 144.92507934570312 Tokens per Sec: 17563.43858724681
Epoch Step: 65 / 138 Loss: 148.72940063476562 Tokens per Sec: 17291.94689903739
Epoch Step: 70 / 138 Loss: 20.597171783447266 Tokens per Sec: 15822.553177149875
Epoch Step: 75 / 138 Loss: 13.374796867370605 Tokens per Sec: 16953.5615049624
Epoch Step: 80 / 138 Loss: 9.756799697875977 Tokens per Sec: 16097.368356951913
Epoch Step: 85 / 138 Loss: 22.164836883544922 Tokens per Sec: 16759.0198327542
Epoch Step: 90 / 138 Loss: 79.6556167602539 Tokens per Sec: 14548.16503540999
Epoch Step: 95 / 138 Loss: 12.12839412689209 Tokens per Sec: 14555.717363294947
Epoch Step: 100 / 138 Loss: 15.092185020446777 Tokens per Sec: 16557.47977874449
Epoch Step: 105 / 138 Loss: 146.76185607910156 Tokens per Sec: 15165.37451445637
Epoch Step: 110 / 138 Loss: 128.9757080078125 Tokens per Sec: 15751.062953000197
Epoch Step: 115 / 138 Loss: 14.934532165527344 Tokens per Sec: 13468.583312483366
Epoch Step: 120 / 138 Loss: 13.565583229064941 Tokens per Sec: 15416.673880637694
Epoch Step: 125 / 138 Loss: 10.413270950317383 Tokens per Sec: 15059.713350246664
Epoch Step: 130 / 138 Loss: 98.30213165283203 Tokens per Sec: 16029.699169480296
Epoch Step: 135 / 138 Loss: 16.059267044067383 Tokens per Sec: 14430.292262938887
Epoch ended with duration 0:00:40.366688
Train perplexity: 1.44772912874481
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.781843
Validation perplexity: 1.5326922179591096
Epoch 72 / 1000
Epoch Step: 5 / 138 Loss: 20.701417922973633 Tokens per Sec: 16219.74564018024
Epoch Step: 10 / 138 Loss: 9.10483169555664 Tokens per Sec: 15968.02249567011
Epoch Step: 15 / 138 Loss: 13.001978874206543 Tokens per Sec: 15500.328447669432
Epoch Step: 20 / 138 Loss: 12.247238159179688 Tokens per Sec: 17612.04595871227
Epoch Step: 25 / 138 Loss: 13.766812324523926 Tokens per Sec: 18138.910409002834
Epoch Step: 30 / 138 Loss: 17.384735107421875 Tokens per Sec: 15587.387635877616
Epoch Step: 35 / 138 Loss: 10.097172737121582 Tokens per Sec: 16836.601282188367
Epoch Step: 40 / 138 Loss: 12.179353713989258 Tokens per Sec: 16450.002820926504
Epoch Step: 45 / 138 Loss: 18.310197830200195 Tokens per Sec: 14390.072577728388
Epoch Step: 50 / 138 Loss: 46.78415298461914 Tokens per Sec: 16348.692541240967
Epoch Step: 55 / 138 Loss: 17.055057525634766 Tokens per Sec: 16407.589085643678
Epoch Step: 60 / 138 Loss: 14.033660888671875 Tokens per Sec: 15509.810115411554
Epoch Step: 65 / 138 Loss: 16.231901168823242 Tokens per Sec: 16010.60460913406
Epoch Step: 70 / 138 Loss: 77.01622009277344 Tokens per Sec: 16864.313140813007
Epoch Step: 75 / 138 Loss: 9.120427131652832 Tokens per Sec: 16701.61754354399
Epoch Step: 80 / 138 Loss: 92.95974731445312 Tokens per Sec: 15317.635685970723
Epoch Step: 85 / 138 Loss: 16.67021942138672 Tokens per Sec: 14085.735667385828
Epoch Step: 90 / 138 Loss: 18.040348052978516 Tokens per Sec: 15578.17352169258
Epoch Step: 95 / 138 Loss: 18.496000289916992 Tokens per Sec: 15790.118742768602
Epoch Step: 100 / 138 Loss: 10.196147918701172 Tokens per Sec: 16687.474069265372
Epoch Step: 105 / 138 Loss: 14.821235656738281 Tokens per Sec: 14964.563400968522
Epoch Step: 110 / 138 Loss: 17.30156135559082 Tokens per Sec: 14240.767130192207
Epoch Step: 115 / 138 Loss: 166.7158966064453 Tokens per Sec: 15488.87114683119
Epoch Step: 120 / 138 Loss: 14.66181755065918 Tokens per Sec: 14719.889669734435
Epoch Step: 125 / 138 Loss: 14.620977401733398 Tokens per Sec: 14365.321249977866
Epoch Step: 130 / 138 Loss: 14.521400451660156 Tokens per Sec: 16813.640508931123
Epoch Step: 135 / 138 Loss: 15.39787483215332 Tokens per Sec: 15478.427752105177
Epoch ended with duration 0:00:40.351629
Train perplexity: 1.4086631227643245
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.780371
Validation perplexity: 1.3748799399374665
Epoch 73 / 1000
Epoch Step: 5 / 138 Loss: 10.934717178344727 Tokens per Sec: 15819.69666812391
Epoch Step: 10 / 138 Loss: 17.52199363708496 Tokens per Sec: 16441.803214425716
Epoch Step: 15 / 138 Loss: 21.74313735961914 Tokens per Sec: 16330.916540256083
Epoch Step: 20 / 138 Loss: 19.943397521972656 Tokens per Sec: 15519.780743059346
Epoch Step: 25 / 138 Loss: 102.38069152832031 Tokens per Sec: 16558.391610617837
Epoch Step: 30 / 138 Loss: 10.492172241210938 Tokens per Sec: 17716.873970996618
Epoch Step: 35 / 138 Loss: 13.51580810546875 Tokens per Sec: 15311.065486725664
Epoch Step: 40 / 138 Loss: 187.42538452148438 Tokens per Sec: 15982.078515248211
Epoch Step: 45 / 138 Loss: 24.18683624267578 Tokens per Sec: 15836.494136949545
Epoch Step: 50 / 138 Loss: 15.91517448425293 Tokens per Sec: 16086.765127287395
Epoch Step: 55 / 138 Loss: 21.540964126586914 Tokens per Sec: 14649.93641535943
Epoch Step: 60 / 138 Loss: 20.67735481262207 Tokens per Sec: 16398.60279821743
Epoch Step: 65 / 138 Loss: 18.582353591918945 Tokens per Sec: 16374.259735926016
Epoch Step: 70 / 138 Loss: 15.261283874511719 Tokens per Sec: 15667.863261425104
Epoch Step: 75 / 138 Loss: 53.31169128417969 Tokens per Sec: 17932.500633928896
Epoch Step: 80 / 138 Loss: 18.378765106201172 Tokens per Sec: 17158.429841125067
Epoch Step: 85 / 138 Loss: 7.591576099395752 Tokens per Sec: 16369.45029221169
Epoch Step: 90 / 138 Loss: 11.710558891296387 Tokens per Sec: 15095.860313994135
Epoch Step: 95 / 138 Loss: 13.800979614257812 Tokens per Sec: 14562.417876945345
Epoch Step: 100 / 138 Loss: 8.8069429397583 Tokens per Sec: 14943.417216727748
Epoch Step: 105 / 138 Loss: 11.799379348754883 Tokens per Sec: 14978.234800443388
Epoch Step: 110 / 138 Loss: 13.342300415039062 Tokens per Sec: 14843.391903774567
Epoch Step: 115 / 138 Loss: 12.44571304321289 Tokens per Sec: 15749.20058472522
Epoch Step: 120 / 138 Loss: 17.722116470336914 Tokens per Sec: 14058.132891604955
Epoch Step: 125 / 138 Loss: 11.081827163696289 Tokens per Sec: 14757.954315039682
Epoch Step: 130 / 138 Loss: 16.395709991455078 Tokens per Sec: 15034.048747916488
Epoch Step: 135 / 138 Loss: 71.895751953125 Tokens per Sec: 15868.9747972405
Epoch ended with duration 0:00:40.579739
Train perplexity: 1.4729189861278722
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.782834
Validation perplexity: 1.3757520244999881
Epoch 74 / 1000
Epoch Step: 5 / 138 Loss: 17.989290237426758 Tokens per Sec: 16350.81991014305
Epoch Step: 10 / 138 Loss: 16.964908599853516 Tokens per Sec: 16361.884509230811
Epoch Step: 15 / 138 Loss: 103.54440307617188 Tokens per Sec: 16511.24904105735
Epoch Step: 20 / 138 Loss: 9.716534614562988 Tokens per Sec: 17551.41294794916
Epoch Step: 25 / 138 Loss: 18.1058349609375 Tokens per Sec: 15761.83371722761
Epoch Step: 30 / 138 Loss: 10.002335548400879 Tokens per Sec: 16123.525119447319
Epoch Step: 35 / 138 Loss: 12.808794021606445 Tokens per Sec: 16532.720899831176
Epoch Step: 40 / 138 Loss: 19.04574203491211 Tokens per Sec: 16890.43986612762
Epoch Step: 45 / 138 Loss: 11.676347732543945 Tokens per Sec: 17667.24351140517
Epoch Step: 50 / 138 Loss: 16.429973602294922 Tokens per Sec: 16872.87575371853
Epoch Step: 55 / 138 Loss: 60.9879150390625 Tokens per Sec: 15748.268158641462
Epoch Step: 60 / 138 Loss: 16.173128128051758 Tokens per Sec: 15415.603368033733
Epoch Step: 65 / 138 Loss: 20.317516326904297 Tokens per Sec: 15529.205806685955
Epoch Step: 70 / 138 Loss: 115.25566864013672 Tokens per Sec: 15887.999885748339
Epoch Step: 75 / 138 Loss: 18.357961654663086 Tokens per Sec: 15889.39332660578
Epoch Step: 80 / 138 Loss: 16.252229690551758 Tokens per Sec: 15232.294773486718
Epoch Step: 85 / 138 Loss: 9.156509399414062 Tokens per Sec: 16097.061360210042
Epoch Step: 90 / 138 Loss: 9.285476684570312 Tokens per Sec: 16681.72765979101
Epoch Step: 95 / 138 Loss: 136.04922485351562 Tokens per Sec: 15077.590272396159
Epoch Step: 100 / 138 Loss: 20.48176383972168 Tokens per Sec: 14179.619548022632
Epoch Step: 105 / 138 Loss: 14.6692533493042 Tokens per Sec: 14846.790122387298
Epoch Step: 110 / 138 Loss: 14.645140647888184 Tokens per Sec: 15110.753858408754
Epoch Step: 115 / 138 Loss: 14.509546279907227 Tokens per Sec: 15267.614215842357
Epoch Step: 120 / 138 Loss: 10.108725547790527 Tokens per Sec: 13428.993049279929
Epoch Step: 125 / 138 Loss: 14.820639610290527 Tokens per Sec: 15610.00050873127
Epoch Step: 130 / 138 Loss: 12.793621063232422 Tokens per Sec: 15165.0848522497
Epoch Step: 135 / 138 Loss: 13.801998138427734 Tokens per Sec: 15433.799956170053
Epoch ended with duration 0:00:40.411614
Train perplexity: 1.4495579342420883
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.742061
Validation perplexity: 1.2339576962015815
Model saved best_on_validation!
Epoch 75 / 1000
Epoch Step: 5 / 138 Loss: 8.726225852966309 Tokens per Sec: 18093.760542558008
Epoch Step: 10 / 138 Loss: 17.65931510925293 Tokens per Sec: 16436.81763589924
Epoch Step: 15 / 138 Loss: 26.0122013092041 Tokens per Sec: 13915.640087700816
Epoch Step: 20 / 138 Loss: 11.169876098632812 Tokens per Sec: 15958.459589197573
Epoch Step: 25 / 138 Loss: 17.930334091186523 Tokens per Sec: 15764.482787827455
Epoch Step: 30 / 138 Loss: 154.58578491210938 Tokens per Sec: 15471.614689105383
Epoch Step: 35 / 138 Loss: 13.595281600952148 Tokens per Sec: 16027.886425437047
Epoch Step: 40 / 138 Loss: 17.74609375 Tokens per Sec: 15926.627360614522
Epoch Step: 45 / 138 Loss: 14.527737617492676 Tokens per Sec: 15445.148692242166
Epoch Step: 50 / 138 Loss: 7.719923973083496 Tokens per Sec: 15454.51338456545
Epoch Step: 55 / 138 Loss: 16.462078094482422 Tokens per Sec: 16182.895095797501
Epoch Step: 60 / 138 Loss: 17.53940773010254 Tokens per Sec: 15621.966747096407
Epoch Step: 65 / 138 Loss: 10.325108528137207 Tokens per Sec: 15555.079490583043
Epoch Step: 70 / 138 Loss: 10.326448440551758 Tokens per Sec: 15885.328789310606
Epoch Step: 75 / 138 Loss: 7.313660144805908 Tokens per Sec: 15837.682301994862
Epoch Step: 80 / 138 Loss: 17.55296516418457 Tokens per Sec: 15011.109232899098
Epoch Step: 85 / 138 Loss: 17.00357437133789 Tokens per Sec: 16763.964269233104
Epoch Step: 90 / 138 Loss: 130.30972290039062 Tokens per Sec: 16133.713474924369
Epoch Step: 95 / 138 Loss: 15.078868865966797 Tokens per Sec: 16967.15683347218
Epoch Step: 100 / 138 Loss: 13.112931251525879 Tokens per Sec: 16756.681524975924
Epoch Step: 105 / 138 Loss: 15.680594444274902 Tokens per Sec: 16710.86332504785
Epoch Step: 110 / 138 Loss: 14.73689079284668 Tokens per Sec: 16596.933301373738
Epoch Step: 115 / 138 Loss: 11.356963157653809 Tokens per Sec: 15200.487228002898
Epoch Step: 120 / 138 Loss: 11.044635772705078 Tokens per Sec: 15714.480551747267
Epoch Step: 125 / 138 Loss: 13.222334861755371 Tokens per Sec: 15352.579924744929
Epoch Step: 130 / 138 Loss: 13.529080390930176 Tokens per Sec: 15047.515130156198
Epoch Step: 135 / 138 Loss: 13.13369369506836 Tokens per Sec: 13665.306997201587
Epoch ended with duration 0:00:40.438207
Train perplexity: 1.4563588981204896
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.756964
Validation perplexity: 1.3569783400289537
Model saved checkpoint!
Epoch 76 / 1000
Epoch Step: 5 / 138 Loss: 12.955122947692871 Tokens per Sec: 16095.520516932576
Epoch Step: 10 / 138 Loss: 14.834572792053223 Tokens per Sec: 15602.430910225437
Epoch Step: 15 / 138 Loss: 110.72156524658203 Tokens per Sec: 16723.09798608018
Epoch Step: 20 / 138 Loss: 105.80753326416016 Tokens per Sec: 15878.513478291412
Epoch Step: 25 / 138 Loss: 11.040444374084473 Tokens per Sec: 16285.2015231752
Epoch Step: 30 / 138 Loss: 132.03717041015625 Tokens per Sec: 15388.160090755431
Epoch Step: 35 / 138 Loss: 16.252111434936523 Tokens per Sec: 15638.885311967031
Epoch Step: 40 / 138 Loss: 9.073166847229004 Tokens per Sec: 16520.495841133466
Epoch Step: 45 / 138 Loss: 20.122386932373047 Tokens per Sec: 16541.204732244845
Epoch Step: 50 / 138 Loss: 21.124923706054688 Tokens per Sec: 15729.149151648839
Epoch Step: 55 / 138 Loss: 13.965420722961426 Tokens per Sec: 16155.57677881176
Epoch Step: 60 / 138 Loss: 20.642812728881836 Tokens per Sec: 15989.944555555965
Epoch Step: 65 / 138 Loss: 15.74813461303711 Tokens per Sec: 14366.306414637955
Epoch Step: 70 / 138 Loss: 12.941884994506836 Tokens per Sec: 15185.280700176387
Epoch Step: 75 / 138 Loss: 17.7713680267334 Tokens per Sec: 18456.048296387573
Epoch Step: 80 / 138 Loss: 16.125673294067383 Tokens per Sec: 16693.865114271433
Epoch Step: 85 / 138 Loss: 11.910222053527832 Tokens per Sec: 17369.10619901022
Epoch Step: 90 / 138 Loss: 16.66685676574707 Tokens per Sec: 15759.782297901227
Epoch Step: 95 / 138 Loss: 52.46454620361328 Tokens per Sec: 17722.93255059007
Epoch Step: 100 / 138 Loss: 18.687664031982422 Tokens per Sec: 16257.851319057825
Epoch Step: 105 / 138 Loss: 18.139331817626953 Tokens per Sec: 14722.234606169157
Epoch Step: 110 / 138 Loss: 18.687898635864258 Tokens per Sec: 15652.501355051301
Epoch Step: 115 / 138 Loss: 13.152338027954102 Tokens per Sec: 14626.83898945751
Epoch Step: 120 / 138 Loss: 12.45718002319336 Tokens per Sec: 15455.050133907369
Epoch Step: 125 / 138 Loss: 18.02975082397461 Tokens per Sec: 15194.11255430989
Epoch Step: 130 / 138 Loss: 16.333986282348633 Tokens per Sec: 14706.180226699858
Epoch Step: 135 / 138 Loss: 16.391324996948242 Tokens per Sec: 14199.126177841646
Epoch ended with duration 0:00:40.272513
Train perplexity: 1.4275126323676088
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.762992
Validation perplexity: 1.4057471329420053
Epoch 77 / 1000
Epoch Step: 5 / 138 Loss: 14.176515579223633 Tokens per Sec: 15666.906330035114
Epoch Step: 10 / 138 Loss: 5.579087257385254 Tokens per Sec: 16751.73824018149
Epoch Step: 15 / 138 Loss: 16.611759185791016 Tokens per Sec: 16448.680778938655
Epoch Step: 20 / 138 Loss: 15.273941993713379 Tokens per Sec: 17452.68123655019
Epoch Step: 25 / 138 Loss: 15.65074348449707 Tokens per Sec: 16588.255043454257
Epoch Step: 30 / 138 Loss: 13.657279014587402 Tokens per Sec: 17810.8950052963
Epoch Step: 35 / 138 Loss: 12.911796569824219 Tokens per Sec: 15923.97671645546
Epoch Step: 40 / 138 Loss: 15.30373477935791 Tokens per Sec: 15162.559519563149
Epoch Step: 45 / 138 Loss: 11.368120193481445 Tokens per Sec: 16101.862116260108
Epoch Step: 50 / 138 Loss: 11.204923629760742 Tokens per Sec: 16441.625843713657
Epoch Step: 55 / 138 Loss: 17.97060203552246 Tokens per Sec: 14989.457324499928
Epoch Step: 60 / 138 Loss: 16.245439529418945 Tokens per Sec: 16226.682652939544
Epoch Step: 65 / 138 Loss: 13.968013763427734 Tokens per Sec: 15007.298227931866
Epoch Step: 70 / 138 Loss: 12.545086860656738 Tokens per Sec: 16364.762800738034
Epoch Step: 75 / 138 Loss: 10.75503921508789 Tokens per Sec: 16465.044144152012
Epoch Step: 80 / 138 Loss: 21.571138381958008 Tokens per Sec: 14888.255822115292
Epoch Step: 85 / 138 Loss: 6.4491448402404785 Tokens per Sec: 16305.111969610207
Epoch Step: 90 / 138 Loss: 20.017253875732422 Tokens per Sec: 15954.777915431598
Epoch Step: 95 / 138 Loss: 18.39361572265625 Tokens per Sec: 16822.65851285424
Epoch Step: 100 / 138 Loss: 18.629779815673828 Tokens per Sec: 15528.144931675006
Epoch Step: 105 / 138 Loss: 16.636293411254883 Tokens per Sec: 15390.572611825399
Epoch Step: 110 / 138 Loss: 12.103154182434082 Tokens per Sec: 14897.921484808498
Epoch Step: 115 / 138 Loss: 21.160541534423828 Tokens per Sec: 15726.2324148219
Epoch Step: 120 / 138 Loss: 10.376673698425293 Tokens per Sec: 14611.65867323596
Epoch Step: 125 / 138 Loss: 12.285843849182129 Tokens per Sec: 16030.752721398974
Epoch Step: 130 / 138 Loss: 11.70434284210205 Tokens per Sec: 15178.594130902997
Epoch Step: 135 / 138 Loss: 16.373132705688477 Tokens per Sec: 15411.04705200916
Epoch ended with duration 0:00:40.085845
Train perplexity: 1.319445066465985
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.769855
Validation perplexity: 1.6923050009687501
Epoch 78 / 1000
Epoch Step: 5 / 138 Loss: 8.042919158935547 Tokens per Sec: 15996.07436834578
Epoch Step: 10 / 138 Loss: 19.63011360168457 Tokens per Sec: 13586.411163288878
Epoch Step: 15 / 138 Loss: 20.413888931274414 Tokens per Sec: 16895.477830011812
Epoch Step: 20 / 138 Loss: 9.38251781463623 Tokens per Sec: 14849.679349455608
Epoch Step: 25 / 138 Loss: 14.143091201782227 Tokens per Sec: 16968.804716052167
Epoch Step: 30 / 138 Loss: 16.743629455566406 Tokens per Sec: 15383.844023082496
Epoch Step: 35 / 138 Loss: 11.725221633911133 Tokens per Sec: 15917.272301175246
Epoch Step: 40 / 138 Loss: 22.962425231933594 Tokens per Sec: 15963.724796952134
Epoch Step: 45 / 138 Loss: 19.448896408081055 Tokens per Sec: 16647.91041116743
Epoch Step: 50 / 138 Loss: 11.914657592773438 Tokens per Sec: 15854.23009476976
Epoch Step: 55 / 138 Loss: 132.563720703125 Tokens per Sec: 17119.670032552593
Epoch Step: 60 / 138 Loss: 17.83694076538086 Tokens per Sec: 16181.956654316295
Epoch Step: 65 / 138 Loss: 84.34686279296875 Tokens per Sec: 16613.66523226677
Epoch Step: 70 / 138 Loss: 15.436369895935059 Tokens per Sec: 15015.169963388274
Epoch Step: 75 / 138 Loss: 14.512677192687988 Tokens per Sec: 16456.36679000676
Epoch Step: 80 / 138 Loss: 17.737796783447266 Tokens per Sec: 16527.6462130531
Epoch Step: 85 / 138 Loss: 16.04591941833496 Tokens per Sec: 15924.21628299464
Epoch Step: 90 / 138 Loss: 22.445980072021484 Tokens per Sec: 17540.349847602945
Epoch Step: 95 / 138 Loss: 7.695855617523193 Tokens per Sec: 17570.119808255393
Epoch Step: 100 / 138 Loss: 20.86199378967285 Tokens per Sec: 17154.14642292889
Epoch Step: 105 / 138 Loss: 11.011555671691895 Tokens per Sec: 14299.035232293656
Epoch Step: 110 / 138 Loss: 9.643632888793945 Tokens per Sec: 15850.53216359486
Epoch Step: 115 / 138 Loss: 12.793469429016113 Tokens per Sec: 13986.477041564236
Epoch Step: 120 / 138 Loss: 11.27961254119873 Tokens per Sec: 15375.653290250346
Epoch Step: 125 / 138 Loss: 15.364893913269043 Tokens per Sec: 15123.716716909617
Epoch Step: 130 / 138 Loss: 13.025331497192383 Tokens per Sec: 14859.615405458091
Epoch Step: 135 / 138 Loss: 16.880352020263672 Tokens per Sec: 14763.76692929956
Epoch ended with duration 0:00:40.260370
Train perplexity: 1.4230768520560388
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.759186
Validation perplexity: 1.2275607672796525
Model saved best_on_validation!
Epoch 79 / 1000
Epoch Step: 5 / 138 Loss: 91.0923843383789 Tokens per Sec: 14969.628051202648
Epoch Step: 10 / 138 Loss: 8.499406814575195 Tokens per Sec: 16617.520851973277
Epoch Step: 15 / 138 Loss: 15.189997673034668 Tokens per Sec: 14725.044210560225
Epoch Step: 20 / 138 Loss: 7.270581245422363 Tokens per Sec: 16263.78054134874
Epoch Step: 25 / 138 Loss: 13.939626693725586 Tokens per Sec: 16323.316338471284
Epoch Step: 30 / 138 Loss: 15.587554931640625 Tokens per Sec: 17464.695210251924
Epoch Step: 35 / 138 Loss: 7.464170932769775 Tokens per Sec: 15785.590441434311
Epoch Step: 40 / 138 Loss: 13.077176094055176 Tokens per Sec: 16960.415795639296
Epoch Step: 45 / 138 Loss: 18.606353759765625 Tokens per Sec: 15965.313793789739
Epoch Step: 50 / 138 Loss: 11.52466869354248 Tokens per Sec: 16624.570959138902
Epoch Step: 55 / 138 Loss: 15.689164161682129 Tokens per Sec: 17354.771207203266
Epoch Step: 60 / 138 Loss: 65.24256134033203 Tokens per Sec: 18607.354569264262
Epoch Step: 65 / 138 Loss: 16.10890769958496 Tokens per Sec: 16245.442896588253
Epoch Step: 70 / 138 Loss: 14.234719276428223 Tokens per Sec: 15284.566882811057
Epoch Step: 75 / 138 Loss: 14.219257354736328 Tokens per Sec: 14714.135906547948
Epoch Step: 80 / 138 Loss: 10.369062423706055 Tokens per Sec: 14906.340014708074
Epoch Step: 85 / 138 Loss: 19.891799926757812 Tokens per Sec: 16245.836266623348
Epoch Step: 90 / 138 Loss: 15.433361053466797 Tokens per Sec: 16284.050916626213
Epoch Step: 95 / 138 Loss: 16.99930763244629 Tokens per Sec: 16852.18991237801
Epoch Step: 100 / 138 Loss: 19.41183853149414 Tokens per Sec: 16113.323838811082
Epoch Step: 105 / 138 Loss: 119.82711029052734 Tokens per Sec: 15096.266970886432
Epoch Step: 110 / 138 Loss: 13.896368980407715 Tokens per Sec: 14410.110785134708
Epoch Step: 115 / 138 Loss: 99.12796020507812 Tokens per Sec: 14931.71886154232
Epoch Step: 120 / 138 Loss: 20.90227508544922 Tokens per Sec: 13807.92128238247
Epoch Step: 125 / 138 Loss: 22.71696662902832 Tokens per Sec: 14332.496958303242
Epoch Step: 130 / 138 Loss: 10.968284606933594 Tokens per Sec: 15320.326327108802
Epoch Step: 135 / 138 Loss: 18.77829933166504 Tokens per Sec: 15397.344454469756
Epoch ended with duration 0:00:40.418184
Train perplexity: 1.3953845118721648
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.757230
Validation perplexity: 1.264315370012844
Epoch 80 / 1000
Epoch Step: 5 / 138 Loss: 9.13554573059082 Tokens per Sec: 17095.645078297635
Epoch Step: 10 / 138 Loss: 143.94607543945312 Tokens per Sec: 15991.790223532229
Epoch Step: 15 / 138 Loss: 11.475074768066406 Tokens per Sec: 17448.402871203947
Epoch Step: 20 / 138 Loss: 15.811426162719727 Tokens per Sec: 17867.07581650639
Epoch Step: 25 / 138 Loss: 18.249208450317383 Tokens per Sec: 14237.960930255354
Epoch Step: 30 / 138 Loss: 11.918578147888184 Tokens per Sec: 15354.589944294572
Epoch Step: 35 / 138 Loss: 7.881048202514648 Tokens per Sec: 17550.02284098708
Epoch Step: 40 / 138 Loss: 13.000190734863281 Tokens per Sec: 16341.930737157863
Epoch Step: 45 / 138 Loss: 9.955860137939453 Tokens per Sec: 16279.96597234744
Epoch Step: 50 / 138 Loss: 7.554152965545654 Tokens per Sec: 16849.165895909384
Epoch Step: 55 / 138 Loss: 18.875459671020508 Tokens per Sec: 15199.243852877113
Epoch Step: 60 / 138 Loss: 7.511218547821045 Tokens per Sec: 15832.965530195037
Epoch Step: 65 / 138 Loss: 13.795433044433594 Tokens per Sec: 14892.000675736568
Epoch Step: 70 / 138 Loss: 13.566886901855469 Tokens per Sec: 16408.890779116664
Epoch Step: 75 / 138 Loss: 9.72641372680664 Tokens per Sec: 16388.707898033503
Epoch Step: 80 / 138 Loss: 16.843103408813477 Tokens per Sec: 15666.051841429628
Epoch Step: 85 / 138 Loss: 21.587007522583008 Tokens per Sec: 16121.539264567378
Epoch Step: 90 / 138 Loss: 17.33310317993164 Tokens per Sec: 16436.56273183491
Epoch Step: 95 / 138 Loss: 8.290273666381836 Tokens per Sec: 16225.436787374649
Epoch Step: 100 / 138 Loss: 16.760761260986328 Tokens per Sec: 17037.804310952983
Epoch Step: 105 / 138 Loss: 11.567975997924805 Tokens per Sec: 15499.684783886922
Epoch Step: 110 / 138 Loss: 10.467191696166992 Tokens per Sec: 15333.645486727906
Epoch Step: 115 / 138 Loss: 135.17872619628906 Tokens per Sec: 17138.036774726243
Epoch Step: 120 / 138 Loss: 12.94995403289795 Tokens per Sec: 14721.957435403727
Epoch Step: 125 / 138 Loss: 10.399127960205078 Tokens per Sec: 14912.533840692238
Epoch Step: 130 / 138 Loss: 13.102822303771973 Tokens per Sec: 14904.95856179865
Epoch Step: 135 / 138 Loss: 158.0579071044922 Tokens per Sec: 15422.08179845852
Epoch ended with duration 0:00:39.893602
Train perplexity: 1.3783011710520912
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.734368
Validation perplexity: 1.3015678288745494
Model saved checkpoint!
Epoch 81 / 1000
Epoch Step: 5 / 138 Loss: 17.166513442993164 Tokens per Sec: 15325.018683134016
Epoch Step: 10 / 138 Loss: 15.739493370056152 Tokens per Sec: 16473.198665821263
Epoch Step: 15 / 138 Loss: 10.296062469482422 Tokens per Sec: 15913.489426413062
Epoch Step: 20 / 138 Loss: 19.213829040527344 Tokens per Sec: 15507.417301725043
Epoch Step: 25 / 138 Loss: 12.8728609085083 Tokens per Sec: 16554.197720478078
Epoch Step: 30 / 138 Loss: 9.257706642150879 Tokens per Sec: 17027.7830037509
Epoch Step: 35 / 138 Loss: 14.659385681152344 Tokens per Sec: 15389.15592517589
Epoch Step: 40 / 138 Loss: 12.332513809204102 Tokens per Sec: 15627.742488452133
Epoch Step: 45 / 138 Loss: 10.531244277954102 Tokens per Sec: 16684.86575590265
Epoch Step: 50 / 138 Loss: 6.930314064025879 Tokens per Sec: 16713.206760239307
Epoch Step: 55 / 138 Loss: 178.40663146972656 Tokens per Sec: 14870.989537534682
Epoch Step: 60 / 138 Loss: 11.040544509887695 Tokens per Sec: 16637.059648151524
Epoch Step: 65 / 138 Loss: 12.397315979003906 Tokens per Sec: 14751.786721002942
Epoch Step: 70 / 138 Loss: 11.911703109741211 Tokens per Sec: 18417.43869700847
Epoch Step: 75 / 138 Loss: 15.230308532714844 Tokens per Sec: 16111.697453364
Epoch Step: 80 / 138 Loss: 14.883927345275879 Tokens per Sec: 14546.394848818816
Epoch Step: 85 / 138 Loss: 14.258846282958984 Tokens per Sec: 16690.193358682525
Epoch Step: 90 / 138 Loss: 9.864459991455078 Tokens per Sec: 16130.67112491862
Epoch Step: 95 / 138 Loss: 16.432445526123047 Tokens per Sec: 17044.223445306867
Epoch Step: 100 / 138 Loss: 14.956147193908691 Tokens per Sec: 15671.151485555161
Epoch Step: 105 / 138 Loss: 11.180171966552734 Tokens per Sec: 14693.33615261379
Epoch Step: 110 / 138 Loss: 11.321965217590332 Tokens per Sec: 15427.116830515242
Epoch Step: 115 / 138 Loss: 16.0410099029541 Tokens per Sec: 15184.898680952947
Epoch Step: 120 / 138 Loss: 50.06829071044922 Tokens per Sec: 15183.702075701303
Epoch Step: 125 / 138 Loss: 19.026464462280273 Tokens per Sec: 15322.685309981649
Epoch Step: 130 / 138 Loss: 12.886387825012207 Tokens per Sec: 13739.780255398771
Epoch Step: 135 / 138 Loss: 11.685684204101562 Tokens per Sec: 15216.462948289278
Epoch ended with duration 0:00:40.503455
Train perplexity: 1.3569622213464627
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_5 ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.759315
Validation perplexity: 1.3650233025187615
Epoch 82 / 1000
Epoch Step: 5 / 138 Loss: 15.821778297424316 Tokens per Sec: 15849.105686157467
Epoch Step: 10 / 138 Loss: 19.021312713623047 Tokens per Sec: 14461.025722962344
Epoch Step: 15 / 138 Loss: 19.07220458984375 Tokens per Sec: 15296.708501153618
Epoch Step: 20 / 138 Loss: 12.078518867492676 Tokens per Sec: 16608.448147872747
Epoch Step: 25 / 138 Loss: 15.587913513183594 Tokens per Sec: 14944.755033947205
Epoch Step: 30 / 138 Loss: 7.633284568786621 Tokens per Sec: 16701.75812338755
Epoch Step: 35 / 138 Loss: 16.542627334594727 Tokens per Sec: 15352.66152789148
Epoch Step: 40 / 138 Loss: 13.580853462219238 Tokens per Sec: 16502.15139006646
Epoch Step: 45 / 138 Loss: 13.717254638671875 Tokens per Sec: 18674.761401572265
Epoch Step: 50 / 138 Loss: 9.307014465332031 Tokens per Sec: 16896.429623082247
Epoch Step: 55 / 138 Loss: 15.770012855529785 Tokens per Sec: 16325.514439620816
Epoch Step: 60 / 138 Loss: 9.48881721496582 Tokens per Sec: 17405.745833281482
Epoch Step: 65 / 138 Loss: 8.641610145568848 Tokens per Sec: 16751.86465952166
Epoch Step: 70 / 138 Loss: 9.293644905090332 Tokens per Sec: 15288.829473067792
Epoch Step: 75 / 138 Loss: 15.075498580932617 Tokens per Sec: 15743.5962360439
Epoch Step: 80 / 138 Loss: 10.39777946472168 Tokens per Sec: 15778.25841252668
Epoch Step: 85 / 138 Loss: 6.100154876708984 Tokens per Sec: 16438.059486850627
Epoch Step: 90 / 138 Loss: 15.714056015014648 Tokens per Sec: 16150.760929396296
Epoch Step: 95 / 138 Loss: 71.6236801147461 Tokens per Sec: 15139.216410845616
Epoch Step: 100 / 138 Loss: 13.629348754882812 Tokens per Sec: 15405.433456261762
Epoch Step: 105 / 138 Loss: 95.75604248046875 Tokens per Sec: 15668.283763422953
Epoch Step: 110 / 138 Loss: 13.538166999816895 Tokens per Sec: 15605.043806166002
Epoch Step: 115 / 138 Loss: 16.073261260986328 Tokens per Sec: 15297.859749081079
Epoch Step: 120 / 138 Loss: 10.70764446258545 Tokens per Sec: 15498.058462924595
Epoch Step: 125 / 138 Loss: 11.761232376098633 Tokens per Sec: 15213.083263819031
Epoch Step: 130 / 138 Loss: 14.505488395690918 Tokens per Sec: 13401.988917491059
Epoch Step: 135 / 138 Loss: 12.721327781677246 Tokens per Sec: 14762.42438891885
Epoch ended with duration 0:00:40.481043
Train perplexity: 1.2982817968616756
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.686120
Validation perplexity: 1.2142896037303876
Model saved best_on_validation!
Epoch 83 / 1000
Epoch Step: 5 / 138 Loss: 11.379983901977539 Tokens per Sec: 17173.056113780858
Epoch Step: 10 / 138 Loss: 8.226645469665527 Tokens per Sec: 15470.292126347493
Epoch Step: 15 / 138 Loss: 15.983016014099121 Tokens per Sec: 16551.957033030263
Epoch Step: 20 / 138 Loss: 11.866822242736816 Tokens per Sec: 15805.548538073625
Epoch Step: 25 / 138 Loss: 75.31022644042969 Tokens per Sec: 15151.655942101434
Epoch Step: 30 / 138 Loss: 13.90260124206543 Tokens per Sec: 16181.252067145493
Epoch Step: 35 / 138 Loss: 13.874730110168457 Tokens per Sec: 14688.396608120705
Epoch Step: 40 / 138 Loss: 7.830178260803223 Tokens per Sec: 16647.670873848223
Epoch Step: 45 / 138 Loss: 16.969327926635742 Tokens per Sec: 14909.656888557502
Epoch Step: 50 / 138 Loss: 11.773393630981445 Tokens per Sec: 16589.092489842933
Epoch Step: 55 / 138 Loss: 10.78187370300293 Tokens per Sec: 16569.03850236486
Epoch Step: 60 / 138 Loss: 12.069975852966309 Tokens per Sec: 14616.442639673745
Epoch Step: 65 / 138 Loss: 14.172404289245605 Tokens per Sec: 14540.49923906386
Epoch Step: 70 / 138 Loss: 11.554628372192383 Tokens per Sec: 15908.824296127019
Epoch Step: 75 / 138 Loss: 11.710206985473633 Tokens per Sec: 16219.237735528863
Epoch Step: 80 / 138 Loss: 18.722440719604492 Tokens per Sec: 15879.767552022771
Epoch Step: 85 / 138 Loss: 11.12617301940918 Tokens per Sec: 16369.90461002581
Epoch Step: 90 / 138 Loss: 7.456996440887451 Tokens per Sec: 17504.4852937995
Epoch Step: 95 / 138 Loss: 19.354047775268555 Tokens per Sec: 17229.89870821845
Epoch Step: 100 / 138 Loss: 14.62527084350586 Tokens per Sec: 18231.864621764187
Epoch Step: 105 / 138 Loss: 8.25736141204834 Tokens per Sec: 14391.933658843654
Epoch Step: 110 / 138 Loss: 10.322942733764648 Tokens per Sec: 15230.603565140693
Epoch Step: 115 / 138 Loss: 14.322921752929688 Tokens per Sec: 15683.339473407153
Epoch Step: 120 / 138 Loss: 17.545682907104492 Tokens per Sec: 15028.479097253869
Epoch Step: 125 / 138 Loss: 12.23524284362793 Tokens per Sec: 14428.028126780802
Epoch Step: 130 / 138 Loss: 10.368515014648438 Tokens per Sec: 15243.495916059203
Epoch Step: 135 / 138 Loss: 14.46416187286377 Tokens per Sec: 16586.632090320072
Epoch ended with duration 0:00:40.390829
Train perplexity: 1.2716664706080303
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.766003
Validation perplexity: 1.2937277317463263
Epoch 84 / 1000
Epoch Step: 5 / 138 Loss: 73.28263854980469 Tokens per Sec: 15496.049630811425
Epoch Step: 10 / 138 Loss: 15.815858840942383 Tokens per Sec: 14355.377717962236
Epoch Step: 15 / 138 Loss: 9.062240600585938 Tokens per Sec: 16469.734335616722
Epoch Step: 20 / 138 Loss: 54.49896240234375 Tokens per Sec: 17006.223215909646
Epoch Step: 25 / 138 Loss: 9.239789009094238 Tokens per Sec: 15891.160038045342
Epoch Step: 30 / 138 Loss: 10.338125228881836 Tokens per Sec: 15356.531419117888
Epoch Step: 35 / 138 Loss: 10.485557556152344 Tokens per Sec: 16188.388359693845
Epoch Step: 40 / 138 Loss: 16.078296661376953 Tokens per Sec: 16509.717849503973
Epoch Step: 45 / 138 Loss: 11.084884643554688 Tokens per Sec: 16693.82328245781
Epoch Step: 50 / 138 Loss: 12.403437614440918 Tokens per Sec: 15070.796028241137
Epoch Step: 55 / 138 Loss: 13.224661827087402 Tokens per Sec: 15327.040008751059
Epoch Step: 60 / 138 Loss: 91.91092681884766 Tokens per Sec: 16420.26293147791
Epoch Step: 65 / 138 Loss: 8.012365341186523 Tokens per Sec: 17960.049743168118
Epoch Step: 70 / 138 Loss: 19.789403915405273 Tokens per Sec: 16773.664763476023
Epoch Step: 75 / 138 Loss: 8.976505279541016 Tokens per Sec: 15737.041646895339
Epoch Step: 80 / 138 Loss: 17.71047019958496 Tokens per Sec: 16204.651219177713
Epoch Step: 85 / 138 Loss: 12.62254810333252 Tokens per Sec: 17012.73514064324
Epoch Step: 90 / 138 Loss: 11.302732467651367 Tokens per Sec: 16122.318695400543
Epoch Step: 95 / 138 Loss: 16.233760833740234 Tokens per Sec: 15794.024352830042
Epoch Step: 100 / 138 Loss: 136.40647888183594 Tokens per Sec: 15976.482906134108
Epoch Step: 105 / 138 Loss: 11.335040092468262 Tokens per Sec: 14825.101981012933
Epoch Step: 110 / 138 Loss: 11.586435317993164 Tokens per Sec: 14192.23128700699
Epoch Step: 115 / 138 Loss: 8.918362617492676 Tokens per Sec: 14908.001376669115
Epoch Step: 120 / 138 Loss: 10.485074996948242 Tokens per Sec: 16415.209830006726
Epoch Step: 125 / 138 Loss: 14.603560447692871 Tokens per Sec: 14488.645029135363
Epoch Step: 130 / 138 Loss: 95.78074645996094 Tokens per Sec: 15359.530063481396
Epoch Step: 135 / 138 Loss: 14.51193618774414 Tokens per Sec: 15099.786341366824
Epoch ended with duration 0:00:40.337128
Train perplexity: 1.3211871990782538
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.740235
Validation perplexity: 1.2629168977826626
Epoch 85 / 1000
Epoch Step: 5 / 138 Loss: 16.486797332763672 Tokens per Sec: 15298.244144880131
Epoch Step: 10 / 138 Loss: 18.269081115722656 Tokens per Sec: 15419.053071658987
Epoch Step: 15 / 138 Loss: 11.734330177307129 Tokens per Sec: 14952.851004607248
Epoch Step: 20 / 138 Loss: 92.89238739013672 Tokens per Sec: 16173.08329183079
Epoch Step: 25 / 138 Loss: 12.525612831115723 Tokens per Sec: 18310.44077258543
Epoch Step: 30 / 138 Loss: 13.626208305358887 Tokens per Sec: 17496.421545819798
Epoch Step: 35 / 138 Loss: 14.236283302307129 Tokens per Sec: 15510.849882469824
Epoch Step: 40 / 138 Loss: 12.201984405517578 Tokens per Sec: 16575.422693713765
Epoch Step: 45 / 138 Loss: 9.99669075012207 Tokens per Sec: 17031.049811791603
Epoch Step: 50 / 138 Loss: 156.88189697265625 Tokens per Sec: 16611.677850646447
Epoch Step: 55 / 138 Loss: 13.094762802124023 Tokens per Sec: 16098.15738306902
Epoch Step: 60 / 138 Loss: 6.724079132080078 Tokens per Sec: 16734.19449802837
Epoch Step: 65 / 138 Loss: 34.30223083496094 Tokens per Sec: 16018.502188685183
Epoch Step: 70 / 138 Loss: 21.391138076782227 Tokens per Sec: 15764.775068032033
Epoch Step: 75 / 138 Loss: 14.231582641601562 Tokens per Sec: 16383.256912978513
Epoch Step: 80 / 138 Loss: 19.52669906616211 Tokens per Sec: 15212.124201596529
Epoch Step: 85 / 138 Loss: 11.921465873718262 Tokens per Sec: 15759.562422028228
Epoch Step: 90 / 138 Loss: 7.100010395050049 Tokens per Sec: 16753.648907485465
Epoch Step: 95 / 138 Loss: 11.845782279968262 Tokens per Sec: 16140.480064728612
Epoch Step: 100 / 138 Loss: 9.193193435668945 Tokens per Sec: 15409.48555869412
Epoch Step: 105 / 138 Loss: 9.670772552490234 Tokens per Sec: 15873.942995627625
Epoch Step: 110 / 138 Loss: 15.651702880859375 Tokens per Sec: 14742.465383966843
Epoch Step: 115 / 138 Loss: 10.548683166503906 Tokens per Sec: 15752.381236479925
Epoch Step: 120 / 138 Loss: 20.01236343383789 Tokens per Sec: 15397.26991199467
Epoch Step: 125 / 138 Loss: 145.70188903808594 Tokens per Sec: 15386.620562650749
Epoch Step: 130 / 138 Loss: 11.860950469970703 Tokens per Sec: 14337.0798739822
Epoch Step: 135 / 138 Loss: 14.797642707824707 Tokens per Sec: 17643.8813946764
Epoch ended with duration 0:00:39.886275
Train perplexity: 1.369480281234945
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.741518
Validation perplexity: 1.3324300370522297
Model saved checkpoint!
Epoch 86 / 1000
Epoch Step: 5 / 138 Loss: 6.460156440734863 Tokens per Sec: 16125.18127931615
Epoch Step: 10 / 138 Loss: 11.255373001098633 Tokens per Sec: 15005.08106489454
Epoch Step: 15 / 138 Loss: 13.884014129638672 Tokens per Sec: 15959.164199167413
Epoch Step: 20 / 138 Loss: 13.872560501098633 Tokens per Sec: 16104.584740568645
Epoch Step: 25 / 138 Loss: 13.79917049407959 Tokens per Sec: 15386.867069982862
Epoch Step: 30 / 138 Loss: 15.742839813232422 Tokens per Sec: 16719.015851576394
Epoch Step: 35 / 138 Loss: 17.381710052490234 Tokens per Sec: 16744.41878791112
Epoch Step: 40 / 138 Loss: 12.51161003112793 Tokens per Sec: 14789.228012059944
Epoch Step: 45 / 138 Loss: 16.866018295288086 Tokens per Sec: 15727.447895374704
Epoch Step: 50 / 138 Loss: 9.189417839050293 Tokens per Sec: 16557.356278456613
Epoch Step: 55 / 138 Loss: 14.523019790649414 Tokens per Sec: 14956.490588262075
Epoch Step: 60 / 138 Loss: 13.863177299499512 Tokens per Sec: 16795.193357027787
Epoch Step: 65 / 138 Loss: 14.002321243286133 Tokens per Sec: 15581.75420871823
Epoch Step: 70 / 138 Loss: 10.252819061279297 Tokens per Sec: 16007.367142163188
Epoch Step: 75 / 138 Loss: 14.923333168029785 Tokens per Sec: 15786.403793965072
Epoch Step: 80 / 138 Loss: 17.40926742553711 Tokens per Sec: 16024.94202460007
Epoch Step: 85 / 138 Loss: 6.74138069152832 Tokens per Sec: 16622.051440880477
Epoch Step: 90 / 138 Loss: 14.47852897644043 Tokens per Sec: 17287.79107163592
Epoch Step: 95 / 138 Loss: 14.275909423828125 Tokens per Sec: 16991.69886075769
Epoch Step: 100 / 138 Loss: 11.676881790161133 Tokens per Sec: 16121.54618324598
Epoch Step: 105 / 138 Loss: 11.376087188720703 Tokens per Sec: 15666.2708006396
Epoch Step: 110 / 138 Loss: 16.540931701660156 Tokens per Sec: 14356.895388168523
Epoch Step: 115 / 138 Loss: 17.199617385864258 Tokens per Sec: 15060.739774623904
Epoch Step: 120 / 138 Loss: 11.675050735473633 Tokens per Sec: 16337.22523350171
Epoch Step: 125 / 138 Loss: 75.54490661621094 Tokens per Sec: 14435.636192286715
Epoch Step: 130 / 138 Loss: 15.846131324768066 Tokens per Sec: 15894.022295690274
Epoch Step: 135 / 138 Loss: 9.95443344116211 Tokens per Sec: 14404.833979262545
Epoch ended with duration 0:00:40.409439
Train perplexity: 1.3058836915613707
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:01.743991
Validation perplexity: 1.3321609281599827
Epoch 87 / 1000
Epoch Step: 5 / 138 Loss: 11.413873672485352 Tokens per Sec: 16314.694353903551
Epoch Step: 10 / 138 Loss: 10.049964904785156 Tokens per Sec: 15823.189195290899
Epoch Step: 15 / 138 Loss: 8.042991638183594 Tokens per Sec: 15868.646980772746
Epoch Step: 20 / 138 Loss: 13.572747230529785 Tokens per Sec: 17682.520879918633
Epoch Step: 25 / 138 Loss: 11.68670654296875 Tokens per Sec: 16069.705262096864
Epoch Step: 30 / 138 Loss: 7.3311357498168945 Tokens per Sec: 15695.232788069434
Epoch Step: 35 / 138 Loss: 14.88442611694336 Tokens per Sec: 15278.152024558161
Epoch Step: 40 / 138 Loss: 16.0498104095459 Tokens per Sec: 16671.9318139694
Epoch Step: 45 / 138 Loss: 12.245381355285645 Tokens per Sec: 15203.87763076802
Epoch Step: 50 / 138 Loss: 15.870966911315918 Tokens per Sec: 17598.918745114686
Epoch Step: 55 / 138 Loss: 6.77351713180542 Tokens per Sec: 18526.316903389517
Epoch Step: 60 / 138 Loss: 18.03034782409668 Tokens per Sec: 15736.759889056148
Epoch Step: 65 / 138 Loss: 20.497560501098633 Tokens per Sec: 15487.878188850143
Epoch Step: 70 / 138 Loss: 18.56787872314453 Tokens per Sec: 15310.419258078196
Epoch Step: 75 / 138 Loss: 9.518050193786621 Tokens per Sec: 15391.819059734145
Epoch Step: 80 / 138 Loss: 7.280740737915039 Tokens per Sec: 15091.708832044289
Epoch Step: 85 / 138 Loss: 13.935677528381348 Tokens per Sec: 15932.569668440778
Epoch Step: 90 / 138 Loss: 6.165149211883545 Tokens per Sec: 14484.613921056953
Epoch Step: 95 / 138 Loss: 102.72039031982422 Tokens per Sec: 16861.317083357844
Epoch Step: 100 / 138 Loss: 17.721830368041992 Tokens per Sec: 16067.946406405788
Epoch Step: 105 / 138 Loss: 12.612442016601562 Tokens per Sec: 15945.68782990602
Epoch Step: 110 / 138 Loss: 121.85906219482422 Tokens per Sec: 14582.24987393119
Epoch Step: 115 / 138 Loss: 15.02008056640625 Tokens per Sec: 15744.273239423652
Epoch Step: 120 / 138 Loss: 10.782373428344727 Tokens per Sec: 14820.361893955862
Epoch Step: 125 / 138 Loss: 12.325096130371094 Tokens per Sec: 15593.474572285348
Epoch Step: 130 / 138 Loss: 14.59925365447998 Tokens per Sec: 14727.671829821433
Epoch Step: 135 / 138 Loss: 10.69154167175293 Tokens per Sec: 13933.952894215567
Epoch ended with duration 0:00:40.382806
Train perplexity: 1.3314703276054198
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.693564
Validation perplexity: 1.3739862587891154
Epoch 88 / 1000
Epoch Step: 5 / 138 Loss: 12.693663597106934 Tokens per Sec: 16883.862854062056
Epoch Step: 10 / 138 Loss: 20.611427307128906 Tokens per Sec: 16288.783993243384
Epoch Step: 15 / 138 Loss: 8.88880729675293 Tokens per Sec: 15635.202129853624
Epoch Step: 20 / 138 Loss: 9.046854972839355 Tokens per Sec: 14408.581710310267
Epoch Step: 25 / 138 Loss: 6.78171443939209 Tokens per Sec: 16889.038990732046
Epoch Step: 30 / 138 Loss: 12.029026985168457 Tokens per Sec: 15581.877753499084
Epoch Step: 35 / 138 Loss: 14.898866653442383 Tokens per Sec: 16196.142796642462
Epoch Step: 40 / 138 Loss: 11.553162574768066 Tokens per Sec: 16630.51736166956
Epoch Step: 45 / 138 Loss: 134.43397521972656 Tokens per Sec: 15105.23091528093
Epoch Step: 50 / 138 Loss: 13.49676513671875 Tokens per Sec: 15469.885290311131
Epoch Step: 55 / 138 Loss: 17.920190811157227 Tokens per Sec: 16486.654173393672
Epoch Step: 60 / 138 Loss: 16.09504508972168 Tokens per Sec: 17513.14522392192
Epoch Step: 65 / 138 Loss: 10.276410102844238 Tokens per Sec: 15570.7192061811
Epoch Step: 70 / 138 Loss: 18.178159713745117 Tokens per Sec: 16916.871462694882
Epoch Step: 75 / 138 Loss: 16.386741638183594 Tokens per Sec: 15999.839588003286
Epoch Step: 80 / 138 Loss: 8.124428749084473 Tokens per Sec: 16372.197634706896
Epoch Step: 85 / 138 Loss: 7.764542579650879 Tokens per Sec: 15641.356708860081
Epoch Step: 90 / 138 Loss: 92.36111450195312 Tokens per Sec: 16346.328422733332
Epoch Step: 95 / 138 Loss: 17.933881759643555 Tokens per Sec: 15070.436761197981
Epoch Step: 100 / 138 Loss: 11.332686424255371 Tokens per Sec: 16475.637338177305
Epoch Step: 105 / 138 Loss: 11.123125076293945 Tokens per Sec: 14926.22164000576
Epoch Step: 110 / 138 Loss: 15.177440643310547 Tokens per Sec: 14199.245576292571
Epoch Step: 115 / 138 Loss: 10.05650806427002 Tokens per Sec: 16188.40668129998
Epoch Step: 120 / 138 Loss: 9.827948570251465 Tokens per Sec: 16761.522257410783
Epoch Step: 125 / 138 Loss: 12.039986610412598 Tokens per Sec: 14092.492480863011
Epoch Step: 130 / 138 Loss: 10.78274154663086 Tokens per Sec: 15619.74006881132
Epoch Step: 135 / 138 Loss: 11.241094589233398 Tokens per Sec: 13788.354405447135
Epoch ended with duration 0:00:40.360353
Train perplexity: 1.3150882248465758
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { java.lang.String . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.777487
Validation perplexity: 1.4439226940694019
Epoch 89 / 1000
Epoch Step: 5 / 138 Loss: 7.706735134124756 Tokens per Sec: 16911.986981470967
Epoch Step: 10 / 138 Loss: 8.770170211791992 Tokens per Sec: 15267.762345173576
Epoch Step: 15 / 138 Loss: 11.024441719055176 Tokens per Sec: 16529.091734892732
Epoch Step: 20 / 138 Loss: 6.030329704284668 Tokens per Sec: 15586.860680482298
Epoch Step: 25 / 138 Loss: 9.348675727844238 Tokens per Sec: 16618.246833354435
Epoch Step: 30 / 138 Loss: 11.550773620605469 Tokens per Sec: 16178.270942541369
Epoch Step: 35 / 138 Loss: 10.466485023498535 Tokens per Sec: 16508.052218795096
Epoch Step: 40 / 138 Loss: 7.533926486968994 Tokens per Sec: 16715.494876981993
Epoch Step: 45 / 138 Loss: 95.3022689819336 Tokens per Sec: 15425.728967739637
Epoch Step: 50 / 138 Loss: 12.97651481628418 Tokens per Sec: 16328.329536790203
Epoch Step: 55 / 138 Loss: 6.283629417419434 Tokens per Sec: 16741.7032480597
Epoch Step: 60 / 138 Loss: 12.468031883239746 Tokens per Sec: 15225.875225884909
Epoch Step: 65 / 138 Loss: 15.58393669128418 Tokens per Sec: 15285.678592478185
Epoch Step: 70 / 138 Loss: 16.69525718688965 Tokens per Sec: 16463.47501913991
Epoch Step: 75 / 138 Loss: 62.74497604370117 Tokens per Sec: 16556.65238759229
Epoch Step: 80 / 138 Loss: 13.146471977233887 Tokens per Sec: 16366.341681676757
Epoch Step: 85 / 138 Loss: 115.0257568359375 Tokens per Sec: 15447.72387990537
Epoch Step: 90 / 138 Loss: 6.943470478057861 Tokens per Sec: 16520.15329915945
Epoch Step: 95 / 138 Loss: 14.382198333740234 Tokens per Sec: 16502.096087721646
Epoch Step: 100 / 138 Loss: 11.73291301727295 Tokens per Sec: 16270.943281536023
Epoch Step: 105 / 138 Loss: 13.247260093688965 Tokens per Sec: 15400.210085178524
Epoch Step: 110 / 138 Loss: 13.621691703796387 Tokens per Sec: 15180.778745848429
Epoch Step: 115 / 138 Loss: 10.044780731201172 Tokens per Sec: 15552.899559891648
Epoch Step: 120 / 138 Loss: 10.476770401000977 Tokens per Sec: 15162.215490069138
Epoch Step: 125 / 138 Loss: 9.454291343688965 Tokens per Sec: 16486.455133245512
Epoch Step: 130 / 138 Loss: 10.923405647277832 Tokens per Sec: 13103.632098170565
Epoch Step: 135 / 138 Loss: 17.422611236572266 Tokens per Sec: 14652.506105968208
Epoch ended with duration 0:00:40.173400
Train perplexity: 1.2739514808492292
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.784022
Validation perplexity: 1.5736935340482694
Epoch 90 / 1000
Epoch Step: 5 / 138 Loss: 9.287996292114258 Tokens per Sec: 15809.449936181909
Epoch Step: 10 / 138 Loss: 13.2011079788208 Tokens per Sec: 16881.891859576288
Epoch Step: 15 / 138 Loss: 10.159218788146973 Tokens per Sec: 15644.79636302128
Epoch Step: 20 / 138 Loss: 13.501358032226562 Tokens per Sec: 15519.212061550188
Epoch Step: 25 / 138 Loss: 10.123526573181152 Tokens per Sec: 16835.78094085869
Epoch Step: 30 / 138 Loss: 10.876927375793457 Tokens per Sec: 17788.11119212594
Epoch Step: 35 / 138 Loss: 6.73641300201416 Tokens per Sec: 17584.78266678307
Epoch Step: 40 / 138 Loss: 10.387192726135254 Tokens per Sec: 15574.37355202523
Epoch Step: 45 / 138 Loss: 127.49153900146484 Tokens per Sec: 15192.668464449294
Epoch Step: 50 / 138 Loss: 12.844383239746094 Tokens per Sec: 15321.537224536933
Epoch Step: 55 / 138 Loss: 8.168951988220215 Tokens per Sec: 17118.943684293103
Epoch Step: 60 / 138 Loss: 11.046465873718262 Tokens per Sec: 16361.207575780916
Epoch Step: 65 / 138 Loss: 164.20057678222656 Tokens per Sec: 15798.919606956044
Epoch Step: 70 / 138 Loss: 13.987617492675781 Tokens per Sec: 15850.419219209149
Epoch Step: 75 / 138 Loss: 38.324317932128906 Tokens per Sec: 16452.256279688732
Epoch Step: 80 / 138 Loss: 53.39009094238281 Tokens per Sec: 16494.048900217058
Epoch Step: 85 / 138 Loss: 22.469388961791992 Tokens per Sec: 15762.267416692921
Epoch Step: 90 / 138 Loss: 76.65432739257812 Tokens per Sec: 16629.155009992162
Epoch Step: 95 / 138 Loss: 8.233023643493652 Tokens per Sec: 15677.154153043613
Epoch Step: 100 / 138 Loss: 101.03585052490234 Tokens per Sec: 15548.898157744345
Epoch Step: 105 / 138 Loss: 15.772306442260742 Tokens per Sec: 15406.800401955672
Epoch Step: 110 / 138 Loss: 17.917633056640625 Tokens per Sec: 15240.735012526382
Epoch Step: 115 / 138 Loss: 211.57359313964844 Tokens per Sec: 14490.871665009374
Epoch Step: 120 / 138 Loss: 24.490385055541992 Tokens per Sec: 14031.728120583855
Epoch Step: 125 / 138 Loss: 21.6397647857666 Tokens per Sec: 14301.256929628498
Epoch Step: 130 / 138 Loss: 17.060379028320312 Tokens per Sec: 16594.544450946254
Epoch Step: 135 / 138 Loss: 11.59277057647705 Tokens per Sec: 16802.717336372018
Epoch ended with duration 0:00:40.107287
Train perplexity: 1.405369041269686
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.776737
Validation perplexity: 1.535313354135446
Model saved checkpoint!
Epoch 91 / 1000
Epoch Step: 5 / 138 Loss: 15.066535949707031 Tokens per Sec: 15409.713326650372
Epoch Step: 10 / 138 Loss: 8.736943244934082 Tokens per Sec: 16480.07499137958
Epoch Step: 15 / 138 Loss: 10.572059631347656 Tokens per Sec: 16558.543419220387
Epoch Step: 20 / 138 Loss: 8.013387680053711 Tokens per Sec: 16313.43909018016
Epoch Step: 25 / 138 Loss: 11.897759437561035 Tokens per Sec: 16124.558161021883
Epoch Step: 30 / 138 Loss: 14.605452537536621 Tokens per Sec: 15896.251074947853
Epoch Step: 35 / 138 Loss: 14.111112594604492 Tokens per Sec: 17243.114214315774
Epoch Step: 40 / 138 Loss: 9.107279777526855 Tokens per Sec: 16468.618929758886
Epoch Step: 45 / 138 Loss: 18.749984741210938 Tokens per Sec: 16229.00196918855
Epoch Step: 50 / 138 Loss: 16.148632049560547 Tokens per Sec: 14914.977848741764
Epoch Step: 55 / 138 Loss: 11.372611045837402 Tokens per Sec: 16008.735453883035
Epoch Step: 60 / 138 Loss: 10.85803508758545 Tokens per Sec: 15862.222469948429
Epoch Step: 65 / 138 Loss: 16.24092674255371 Tokens per Sec: 15917.161631198238
Epoch Step: 70 / 138 Loss: 18.946853637695312 Tokens per Sec: 17177.45564495209
Epoch Step: 75 / 138 Loss: 7.069716453552246 Tokens per Sec: 16920.045941201875
Epoch Step: 80 / 138 Loss: 8.804486274719238 Tokens per Sec: 14783.246090469833
Epoch Step: 85 / 138 Loss: 17.434160232543945 Tokens per Sec: 14617.061067482622
Epoch Step: 90 / 138 Loss: 11.233184814453125 Tokens per Sec: 17552.060343806836
Epoch Step: 95 / 138 Loss: 13.756101608276367 Tokens per Sec: 16313.393374938705
Epoch Step: 100 / 138 Loss: 13.387092590332031 Tokens per Sec: 17162.511903156275
Epoch Step: 105 / 138 Loss: 9.567936897277832 Tokens per Sec: 15659.338642802513
Epoch Step: 110 / 138 Loss: 12.78588581085205 Tokens per Sec: 16390.223146914737
Epoch Step: 115 / 138 Loss: 11.795083999633789 Tokens per Sec: 15528.85662638476
Epoch Step: 120 / 138 Loss: 12.833141326904297 Tokens per Sec: 15185.094617148678
Epoch Step: 125 / 138 Loss: 15.168805122375488 Tokens per Sec: 15178.345433624796
Epoch Step: 130 / 138 Loss: 9.99286937713623 Tokens per Sec: 15582.402403619777
Epoch Step: 135 / 138 Loss: 12.285884857177734 Tokens per Sec: 13524.27542120387
Epoch ended with duration 0:00:40.131384
Train perplexity: 1.3291349217235808
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.755048
Validation perplexity: 1.2680595902369123
Epoch 92 / 1000
Epoch Step: 5 / 138 Loss: 6.640416145324707 Tokens per Sec: 16469.927679523465
Epoch Step: 10 / 138 Loss: 7.154214382171631 Tokens per Sec: 15838.076571433994
Epoch Step: 15 / 138 Loss: 11.872167587280273 Tokens per Sec: 15093.702695244
Epoch Step: 20 / 138 Loss: 16.692834854125977 Tokens per Sec: 16008.106837030802
Epoch Step: 25 / 138 Loss: 14.710612297058105 Tokens per Sec: 16913.069242010526
Epoch Step: 30 / 138 Loss: 13.369080543518066 Tokens per Sec: 14982.318463044887
Epoch Step: 35 / 138 Loss: 8.442184448242188 Tokens per Sec: 16389.626157295384
Epoch Step: 40 / 138 Loss: 11.497453689575195 Tokens per Sec: 16393.25693237744
Epoch Step: 45 / 138 Loss: 8.48972225189209 Tokens per Sec: 15815.262102401277
Epoch Step: 50 / 138 Loss: 15.541620254516602 Tokens per Sec: 17377.83289194953
Epoch Step: 55 / 138 Loss: 8.312103271484375 Tokens per Sec: 14190.489573874045
Epoch Step: 60 / 138 Loss: 13.48487377166748 Tokens per Sec: 17734.136299257
Epoch Step: 65 / 138 Loss: 12.740398406982422 Tokens per Sec: 17413.042101403924
Epoch Step: 70 / 138 Loss: 9.251421928405762 Tokens per Sec: 16751.229135703146
Epoch Step: 75 / 138 Loss: 13.4779691696167 Tokens per Sec: 15669.386283133777
Epoch Step: 80 / 138 Loss: 6.8813796043396 Tokens per Sec: 16571.05218250706
Epoch Step: 85 / 138 Loss: 14.600314140319824 Tokens per Sec: 15161.370200095884
Epoch Step: 90 / 138 Loss: 14.956862449645996 Tokens per Sec: 15761.257787457764
Epoch Step: 95 / 138 Loss: 10.871662139892578 Tokens per Sec: 16788.54028534837
Epoch Step: 100 / 138 Loss: 8.039383888244629 Tokens per Sec: 17269.401837953283
Epoch Step: 105 / 138 Loss: 13.685508728027344 Tokens per Sec: 13517.701906067214
Epoch Step: 110 / 138 Loss: 9.696930885314941 Tokens per Sec: 14593.623226887183
Epoch Step: 115 / 138 Loss: 17.25974464416504 Tokens per Sec: 15750.057388467465
Epoch Step: 120 / 138 Loss: 12.683232307434082 Tokens per Sec: 14856.082456679385
Epoch Step: 125 / 138 Loss: 15.26781940460205 Tokens per Sec: 15647.370569802748
Epoch Step: 130 / 138 Loss: 16.09994125366211 Tokens per Sec: 15600.611368879989
Epoch Step: 135 / 138 Loss: 71.7548828125 Tokens per Sec: 14596.482835707291
Epoch ended with duration 0:00:40.248362
Train perplexity: 1.3488722190241529
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.767667
Validation perplexity: 1.2992596088566613
Epoch 93 / 1000
Epoch Step: 5 / 138 Loss: 14.429551124572754 Tokens per Sec: 15098.33651877477
Epoch Step: 10 / 138 Loss: 9.560721397399902 Tokens per Sec: 16129.711223044573
Epoch Step: 15 / 138 Loss: 10.032156944274902 Tokens per Sec: 18162.768071216567
Epoch Step: 20 / 138 Loss: 12.592019081115723 Tokens per Sec: 17138.729285094978
Epoch Step: 25 / 138 Loss: 15.53201961517334 Tokens per Sec: 16098.893583438477
Epoch Step: 30 / 138 Loss: 12.05015754699707 Tokens per Sec: 17163.534010420146
Epoch Step: 35 / 138 Loss: 13.949695587158203 Tokens per Sec: 15247.760246757714
Epoch Step: 40 / 138 Loss: 7.640414237976074 Tokens per Sec: 16456.15996644347
Epoch Step: 45 / 138 Loss: 11.241031646728516 Tokens per Sec: 17563.980272818088
Epoch Step: 50 / 138 Loss: 12.519399642944336 Tokens per Sec: 17181.66772720899
Epoch Step: 55 / 138 Loss: 10.12893295288086 Tokens per Sec: 17306.527939622698
Epoch Step: 60 / 138 Loss: 13.52759075164795 Tokens per Sec: 15941.288044706567
Epoch Step: 65 / 138 Loss: 7.445400714874268 Tokens per Sec: 15631.055376261898
Epoch Step: 70 / 138 Loss: 9.503570556640625 Tokens per Sec: 16766.55318245995
Epoch Step: 75 / 138 Loss: 13.946843147277832 Tokens per Sec: 15193.047518308444
Epoch Step: 80 / 138 Loss: 11.839829444885254 Tokens per Sec: 15212.481634307052
Epoch Step: 85 / 138 Loss: 11.093833923339844 Tokens per Sec: 16614.46012892354
Epoch Step: 90 / 138 Loss: 96.97144317626953 Tokens per Sec: 15683.869859222359
Epoch Step: 95 / 138 Loss: 5.9180827140808105 Tokens per Sec: 14733.007837519792
Epoch Step: 100 / 138 Loss: 12.552401542663574 Tokens per Sec: 16133.165125532762
Epoch Step: 105 / 138 Loss: 43.207672119140625 Tokens per Sec: 14802.699575146009
Epoch Step: 110 / 138 Loss: 17.542993545532227 Tokens per Sec: 15631.685569915615
Epoch Step: 115 / 138 Loss: 13.54598617553711 Tokens per Sec: 15232.416565849728
Epoch Step: 120 / 138 Loss: 7.997962951660156 Tokens per Sec: 16007.616383151262
Epoch Step: 125 / 138 Loss: 13.173008918762207 Tokens per Sec: 16117.609215220858
Epoch Step: 130 / 138 Loss: 12.185879707336426 Tokens per Sec: 14502.586742454148
Epoch Step: 135 / 138 Loss: 9.869548797607422 Tokens per Sec: 15408.247538552876
Epoch ended with duration 0:00:39.951393
Train perplexity: 1.3051421575835205
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.767799
Validation perplexity: 1.3172142716966027
Epoch 94 / 1000
Epoch Step: 5 / 138 Loss: 20.833158493041992 Tokens per Sec: 16248.402769463126
Epoch Step: 10 / 138 Loss: 16.67910385131836 Tokens per Sec: 15864.29483077964
Epoch Step: 15 / 138 Loss: 9.2047758102417 Tokens per Sec: 15400.634754198632
Epoch Step: 20 / 138 Loss: 7.164723873138428 Tokens per Sec: 16503.188629810156
Epoch Step: 25 / 138 Loss: 11.805215835571289 Tokens per Sec: 16616.035966718773
Epoch Step: 30 / 138 Loss: 9.775909423828125 Tokens per Sec: 16744.180564192353
Epoch Step: 35 / 138 Loss: 13.951345443725586 Tokens per Sec: 16500.840583967893
Epoch Step: 40 / 138 Loss: 13.96389102935791 Tokens per Sec: 15648.682779902947
Epoch Step: 45 / 138 Loss: 10.893109321594238 Tokens per Sec: 15936.846001692664
Epoch Step: 50 / 138 Loss: 9.894246101379395 Tokens per Sec: 16468.863497730246
Epoch Step: 55 / 138 Loss: 15.053825378417969 Tokens per Sec: 15836.22533006303
Epoch Step: 60 / 138 Loss: 10.020926475524902 Tokens per Sec: 16166.989506698466
Epoch Step: 65 / 138 Loss: 15.252434730529785 Tokens per Sec: 15237.871195619984
Epoch Step: 70 / 138 Loss: 18.45297622680664 Tokens per Sec: 15716.538121218471
Epoch Step: 75 / 138 Loss: 14.140387535095215 Tokens per Sec: 15417.102411840875
Epoch Step: 80 / 138 Loss: 7.939884185791016 Tokens per Sec: 16280.01099513474
Epoch Step: 85 / 138 Loss: 18.715232849121094 Tokens per Sec: 16205.37496861605
Epoch Step: 90 / 138 Loss: 10.504842758178711 Tokens per Sec: 17663.79889866768
Epoch Step: 95 / 138 Loss: 12.409173965454102 Tokens per Sec: 16195.617649641288
Epoch Step: 100 / 138 Loss: 18.45106315612793 Tokens per Sec: 15550.200218351541
Epoch Step: 105 / 138 Loss: 69.82435607910156 Tokens per Sec: 15276.636995717912
Epoch Step: 110 / 138 Loss: 12.598662376403809 Tokens per Sec: 15119.917880935798
Epoch Step: 115 / 138 Loss: 9.7788667678833 Tokens per Sec: 15486.217584094475
Epoch Step: 120 / 138 Loss: 12.773481369018555 Tokens per Sec: 13647.823103536795
Epoch Step: 125 / 138 Loss: 8.572714805603027 Tokens per Sec: 15602.425240395984
Epoch Step: 130 / 138 Loss: 8.584009170532227 Tokens per Sec: 15518.522557651419
Epoch Step: 135 / 138 Loss: 10.93118953704834 Tokens per Sec: 15817.954784533811
Epoch ended with duration 0:00:40.249722
Train perplexity: 1.3320921946508077
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.775068
Validation perplexity: 1.209027639943479
Model saved best_on_validation!
Epoch 95 / 1000
Epoch Step: 5 / 138 Loss: 11.870489120483398 Tokens per Sec: 16574.282901751973
Epoch Step: 10 / 138 Loss: 11.941366195678711 Tokens per Sec: 15553.97031571174
Epoch Step: 15 / 138 Loss: 13.867551803588867 Tokens per Sec: 16459.820936238215
Epoch Step: 20 / 138 Loss: 9.213215827941895 Tokens per Sec: 17067.02817895276
Epoch Step: 25 / 138 Loss: 8.918479919433594 Tokens per Sec: 16325.109271596977
Epoch Step: 30 / 138 Loss: 11.7942476272583 Tokens per Sec: 17062.92967363016
Epoch Step: 35 / 138 Loss: 9.651047706604004 Tokens per Sec: 16161.647255367114
Epoch Step: 40 / 138 Loss: 9.526058197021484 Tokens per Sec: 17772.097927830557
Epoch Step: 45 / 138 Loss: 16.366212844848633 Tokens per Sec: 17688.90656550981
Epoch Step: 50 / 138 Loss: 6.494986534118652 Tokens per Sec: 17562.41625623402
Epoch Step: 55 / 138 Loss: 90.76821899414062 Tokens per Sec: 15883.670679866642
Epoch Step: 60 / 138 Loss: 51.30018997192383 Tokens per Sec: 15548.50829663301
Epoch Step: 65 / 138 Loss: 11.957794189453125 Tokens per Sec: 15445.780585164266
Epoch Step: 70 / 138 Loss: 14.317328453063965 Tokens per Sec: 15197.953331986282
Epoch Step: 75 / 138 Loss: 13.15844440460205 Tokens per Sec: 15953.719705644527
Epoch Step: 80 / 138 Loss: 9.664060592651367 Tokens per Sec: 16071.018694609353
Epoch Step: 85 / 138 Loss: 10.377108573913574 Tokens per Sec: 15626.366139481985
Epoch Step: 90 / 138 Loss: 14.400248527526855 Tokens per Sec: 17167.46654803443
Epoch Step: 95 / 138 Loss: 12.649697303771973 Tokens per Sec: 14923.302390106672
Epoch Step: 100 / 138 Loss: 5.926673412322998 Tokens per Sec: 14340.812475734218
Epoch Step: 105 / 138 Loss: 15.029923439025879 Tokens per Sec: 15546.196979546234
Epoch Step: 110 / 138 Loss: 9.4256010055542 Tokens per Sec: 14858.69556157958
Epoch Step: 115 / 138 Loss: 102.20941925048828 Tokens per Sec: 16034.420598487082
Epoch Step: 120 / 138 Loss: 9.55971622467041 Tokens per Sec: 16247.79239982738
Epoch Step: 125 / 138 Loss: 11.380046844482422 Tokens per Sec: 15917.68270619507
Epoch Step: 130 / 138 Loss: 12.54592514038086 Tokens per Sec: 12977.390734062677
Epoch Step: 135 / 138 Loss: 12.933945655822754 Tokens per Sec: 15417.61720511372
Epoch ended with duration 0:00:40.080517
Train perplexity: 1.2753859899553082
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , ( METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.676791
Validation perplexity: 1.3790706211272652
Model saved checkpoint!
Epoch 96 / 1000
Epoch Step: 5 / 138 Loss: 6.991787433624268 Tokens per Sec: 18089.955230897995
Epoch Step: 10 / 138 Loss: 10.27051067352295 Tokens per Sec: 16918.922636495612
Epoch Step: 15 / 138 Loss: 10.576120376586914 Tokens per Sec: 15819.234032234044
Epoch Step: 20 / 138 Loss: 12.941591262817383 Tokens per Sec: 15893.405820817463
Epoch Step: 25 / 138 Loss: 13.634195327758789 Tokens per Sec: 15344.839721751723
Epoch Step: 30 / 138 Loss: 16.428680419921875 Tokens per Sec: 15011.357377809374
Epoch Step: 35 / 138 Loss: 126.6578598022461 Tokens per Sec: 16514.16458333488
Epoch Step: 40 / 138 Loss: 15.49285888671875 Tokens per Sec: 16773.820402788417
Epoch Step: 45 / 138 Loss: 13.982263565063477 Tokens per Sec: 15880.797133981423
Epoch Step: 50 / 138 Loss: 16.88474464416504 Tokens per Sec: 15674.819432254524
Epoch Step: 55 / 138 Loss: 10.606472969055176 Tokens per Sec: 17129.61712151661
Epoch Step: 60 / 138 Loss: 154.50938415527344 Tokens per Sec: 15167.752476313182
Epoch Step: 65 / 138 Loss: 17.661251068115234 Tokens per Sec: 16268.84445229392
Epoch Step: 70 / 138 Loss: 11.96915340423584 Tokens per Sec: 15491.027955140768
Epoch Step: 75 / 138 Loss: 8.215079307556152 Tokens per Sec: 15990.739848043731
Epoch Step: 80 / 138 Loss: 6.560898780822754 Tokens per Sec: 17009.570508997414
Epoch Step: 85 / 138 Loss: 7.686577796936035 Tokens per Sec: 15497.433100244698
Epoch Step: 90 / 138 Loss: 8.469964981079102 Tokens per Sec: 16283.982928332822
Epoch Step: 95 / 138 Loss: 85.9902572631836 Tokens per Sec: 16176.674595210075
Epoch Step: 100 / 138 Loss: 12.52106761932373 Tokens per Sec: 15050.094044297208
Epoch Step: 105 / 138 Loss: 11.532920837402344 Tokens per Sec: 15814.091851507215
Epoch Step: 110 / 138 Loss: 12.489978790283203 Tokens per Sec: 14243.977448316544
Epoch Step: 115 / 138 Loss: 10.628890991210938 Tokens per Sec: 15651.81346835449
Epoch Step: 120 / 138 Loss: 10.090117454528809 Tokens per Sec: 14536.982251078329
Epoch Step: 125 / 138 Loss: 9.641668319702148 Tokens per Sec: 15329.219704039995
Epoch Step: 130 / 138 Loss: 13.667762756347656 Tokens per Sec: 15639.976661461364
Epoch Step: 135 / 138 Loss: 121.33429718017578 Tokens per Sec: 16159.664150145765
Epoch ended with duration 0:00:40.193665
Train perplexity: 1.327658017105406
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_3 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.754907
Validation perplexity: 1.2810961754870795
Epoch 97 / 1000
Epoch Step: 5 / 138 Loss: 13.56815242767334 Tokens per Sec: 17061.881954454027
Epoch Step: 10 / 138 Loss: 122.18869018554688 Tokens per Sec: 16533.559356511403
Epoch Step: 15 / 138 Loss: 14.043506622314453 Tokens per Sec: 15075.79526407739
Epoch Step: 20 / 138 Loss: 11.839959144592285 Tokens per Sec: 15407.644504235697
Epoch Step: 25 / 138 Loss: 9.715860366821289 Tokens per Sec: 17181.77407471947
Epoch Step: 30 / 138 Loss: 5.885811805725098 Tokens per Sec: 16290.953409419055
Epoch Step: 35 / 138 Loss: 6.649295806884766 Tokens per Sec: 17947.96607905055
Epoch Step: 40 / 138 Loss: 125.09808349609375 Tokens per Sec: 16059.982710299611
Epoch Step: 45 / 138 Loss: 8.159289360046387 Tokens per Sec: 15981.711417708599
Epoch Step: 50 / 138 Loss: 105.63189697265625 Tokens per Sec: 15008.463399753726
Epoch Step: 55 / 138 Loss: 6.479116916656494 Tokens per Sec: 16751.373767950146
Epoch Step: 60 / 138 Loss: 8.645344734191895 Tokens per Sec: 16036.144655668599
Epoch Step: 65 / 138 Loss: 11.045472145080566 Tokens per Sec: 16248.178558481832
Epoch Step: 70 / 138 Loss: 16.239412307739258 Tokens per Sec: 16954.367830610157
Epoch Step: 75 / 138 Loss: 7.442399501800537 Tokens per Sec: 16751.396402132657
Epoch Step: 80 / 138 Loss: 9.961782455444336 Tokens per Sec: 16511.090885021287
Epoch Step: 85 / 138 Loss: 14.167373657226562 Tokens per Sec: 14756.759933715219
Epoch Step: 90 / 138 Loss: 129.393798828125 Tokens per Sec: 15692.331399742356
Epoch Step: 95 / 138 Loss: 6.686440944671631 Tokens per Sec: 16976.240453682007
Epoch Step: 100 / 138 Loss: 20.86396598815918 Tokens per Sec: 15293.388235342838
Epoch Step: 105 / 138 Loss: 12.400139808654785 Tokens per Sec: 15053.371752009398
Epoch Step: 110 / 138 Loss: 9.166862487792969 Tokens per Sec: 16158.680944002692
Epoch Step: 115 / 138 Loss: 10.867547988891602 Tokens per Sec: 14997.976981217089
Epoch Step: 120 / 138 Loss: 8.62077808380127 Tokens per Sec: 15344.424715322282
Epoch Step: 125 / 138 Loss: 10.186028480529785 Tokens per Sec: 13720.538156205128
Epoch Step: 130 / 138 Loss: 11.980271339416504 Tokens per Sec: 15562.679263185144
Epoch Step: 135 / 138 Loss: 11.828083038330078 Tokens per Sec: 14501.718683888043
Epoch ended with duration 0:00:40.242028
Train perplexity: 1.3209969577609624
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.748701
Validation perplexity: 1.2763745727556044
Epoch 98 / 1000
Epoch Step: 5 / 138 Loss: 14.558815956115723 Tokens per Sec: 15183.827646874372
Epoch Step: 10 / 138 Loss: 15.419363021850586 Tokens per Sec: 16605.184677416688
Epoch Step: 15 / 138 Loss: 6.584833145141602 Tokens per Sec: 17303.378482461823
Epoch Step: 20 / 138 Loss: 8.150389671325684 Tokens per Sec: 15704.554415143733
Epoch Step: 25 / 138 Loss: 5.9446539878845215 Tokens per Sec: 14846.54258791743
Epoch Step: 30 / 138 Loss: 14.170865058898926 Tokens per Sec: 16314.849959530067
Epoch Step: 35 / 138 Loss: 10.884175300598145 Tokens per Sec: 17358.63086711962
Epoch Step: 40 / 138 Loss: 11.80423355102539 Tokens per Sec: 18249.895888030678
Epoch Step: 45 / 138 Loss: 8.35539436340332 Tokens per Sec: 15674.261406797103
Epoch Step: 50 / 138 Loss: 8.649689674377441 Tokens per Sec: 15500.036307286735
Epoch Step: 55 / 138 Loss: 11.54155158996582 Tokens per Sec: 15014.597944826548
Epoch Step: 60 / 138 Loss: 11.361663818359375 Tokens per Sec: 16345.06848662945
Epoch Step: 65 / 138 Loss: 5.940329551696777 Tokens per Sec: 16132.455232761047
Epoch Step: 70 / 138 Loss: 103.40794372558594 Tokens per Sec: 16186.986608385283
Epoch Step: 75 / 138 Loss: 17.70682144165039 Tokens per Sec: 15658.05765519289
Epoch Step: 80 / 138 Loss: 10.24522590637207 Tokens per Sec: 17455.912185276968
Epoch Step: 85 / 138 Loss: 11.769075393676758 Tokens per Sec: 17068.771688560853
Epoch Step: 90 / 138 Loss: 14.096528053283691 Tokens per Sec: 15671.606684064203
Epoch Step: 95 / 138 Loss: 15.58729362487793 Tokens per Sec: 16136.583205880439
Epoch Step: 100 / 138 Loss: 14.709185600280762 Tokens per Sec: 15214.535700848359
Epoch Step: 105 / 138 Loss: 72.42777252197266 Tokens per Sec: 14569.697617634827
Epoch Step: 110 / 138 Loss: 12.299722671508789 Tokens per Sec: 15055.338265257487
Epoch Step: 115 / 138 Loss: 9.776383399963379 Tokens per Sec: 14862.929909621398
Epoch Step: 120 / 138 Loss: 108.5428466796875 Tokens per Sec: 14484.160387952232
Epoch Step: 125 / 138 Loss: 11.440080642700195 Tokens per Sec: 14761.454111595653
Epoch Step: 130 / 138 Loss: 12.898208618164062 Tokens per Sec: 15601.056854466296
Epoch Step: 135 / 138 Loss: 11.835970878601074 Tokens per Sec: 17165.672254658293
Epoch ended with duration 0:00:40.256877
Train perplexity: 1.295552012052705
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.747641
Validation perplexity: 1.3851890840384633
Epoch 99 / 1000
Epoch Step: 5 / 138 Loss: 96.59160614013672 Tokens per Sec: 15478.395538022003
Epoch Step: 10 / 138 Loss: 5.138178825378418 Tokens per Sec: 17089.895798596102
Epoch Step: 15 / 138 Loss: 12.431967735290527 Tokens per Sec: 15783.99439723517
Epoch Step: 20 / 138 Loss: 9.773143768310547 Tokens per Sec: 15498.073257793061
Epoch Step: 25 / 138 Loss: 6.618313312530518 Tokens per Sec: 16556.38052096605
Epoch Step: 30 / 138 Loss: 13.121464729309082 Tokens per Sec: 16181.624808074483
Epoch Step: 35 / 138 Loss: 5.6415605545043945 Tokens per Sec: 16636.495001658317
Epoch Step: 40 / 138 Loss: 6.678994178771973 Tokens per Sec: 16172.583022608367
Epoch Step: 45 / 138 Loss: 8.249828338623047 Tokens per Sec: 15684.40115218585
Epoch Step: 50 / 138 Loss: 13.243066787719727 Tokens per Sec: 15768.18771943988
Epoch Step: 55 / 138 Loss: 13.140007972717285 Tokens per Sec: 14726.832595374755
Epoch Step: 60 / 138 Loss: 13.384093284606934 Tokens per Sec: 15475.32868129127
Epoch Step: 65 / 138 Loss: 16.95829963684082 Tokens per Sec: 16653.44258264533
Epoch Step: 70 / 138 Loss: 16.13470458984375 Tokens per Sec: 17393.173274609333
Epoch Step: 75 / 138 Loss: 19.615684509277344 Tokens per Sec: 15192.49513337702
Epoch Step: 80 / 138 Loss: 18.378557205200195 Tokens per Sec: 15270.23793631024
Epoch Step: 85 / 138 Loss: 11.090792655944824 Tokens per Sec: 15675.358065152232
Epoch Step: 90 / 138 Loss: 9.983587265014648 Tokens per Sec: 16425.502793864787
Epoch Step: 95 / 138 Loss: 74.00963592529297 Tokens per Sec: 17631.050793282517
Epoch Step: 100 / 138 Loss: 7.651427268981934 Tokens per Sec: 17992.587786363398
Epoch Step: 105 / 138 Loss: 13.068771362304688 Tokens per Sec: 15874.78407633324
Epoch Step: 110 / 138 Loss: 9.939148902893066 Tokens per Sec: 15314.185749066193
Epoch Step: 115 / 138 Loss: 12.166353225708008 Tokens per Sec: 15841.855610414363
Epoch Step: 120 / 138 Loss: 9.146674156188965 Tokens per Sec: 14110.623646930431
Epoch Step: 125 / 138 Loss: 46.84874725341797 Tokens per Sec: 15454.828648041152
Epoch Step: 130 / 138 Loss: 12.066813468933105 Tokens per Sec: 14832.321975282965
Epoch Step: 135 / 138 Loss: 12.051496505737305 Tokens per Sec: 15113.624431446293
Epoch ended with duration 0:00:40.202250
Train perplexity: 1.3249311663815966
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_3 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.751137
Validation perplexity: 1.4463684870677633
Epoch 100 / 1000
Epoch Step: 5 / 138 Loss: 8.264124870300293 Tokens per Sec: 16738.035995354563
Epoch Step: 10 / 138 Loss: 7.023662090301514 Tokens per Sec: 17228.51018565804
Epoch Step: 15 / 138 Loss: 10.16606616973877 Tokens per Sec: 16075.743069984344
Epoch Step: 20 / 138 Loss: 17.90727424621582 Tokens per Sec: 15854.818919265055
Epoch Step: 25 / 138 Loss: 15.46193790435791 Tokens per Sec: 15656.498904148024
Epoch Step: 30 / 138 Loss: 18.07964324951172 Tokens per Sec: 14814.502105440115
Epoch Step: 35 / 138 Loss: 19.444194793701172 Tokens per Sec: 16388.963416824932
Epoch Step: 40 / 138 Loss: 10.75642204284668 Tokens per Sec: 16697.612339774565
Epoch Step: 45 / 138 Loss: 6.692441463470459 Tokens per Sec: 16376.419420796155
Epoch Step: 50 / 138 Loss: 11.421150207519531 Tokens per Sec: 15213.137292817395
Epoch Step: 55 / 138 Loss: 6.19049072265625 Tokens per Sec: 15954.10642337002
Epoch Step: 60 / 138 Loss: 11.472707748413086 Tokens per Sec: 17851.68295094653
Epoch Step: 65 / 138 Loss: 14.287983894348145 Tokens per Sec: 16669.227669739623
Epoch Step: 70 / 138 Loss: 13.847556114196777 Tokens per Sec: 16427.73739872473
Epoch Step: 75 / 138 Loss: 16.271617889404297 Tokens per Sec: 15181.77358084446
Epoch Step: 80 / 138 Loss: 8.38622760772705 Tokens per Sec: 16319.734688067152
Epoch Step: 85 / 138 Loss: 14.649678230285645 Tokens per Sec: 15986.334927687605
Epoch Step: 90 / 138 Loss: 12.925047874450684 Tokens per Sec: 15923.330237037826
Epoch Step: 95 / 138 Loss: 17.063262939453125 Tokens per Sec: 16038.653893682182
Epoch Step: 100 / 138 Loss: 17.224300384521484 Tokens per Sec: 15667.932784686198
Epoch Step: 105 / 138 Loss: 9.978913307189941 Tokens per Sec: 14908.146341699163
Epoch Step: 110 / 138 Loss: 130.0859375 Tokens per Sec: 14985.146704084726
Epoch Step: 115 / 138 Loss: 14.407581329345703 Tokens per Sec: 14312.76638778456
Epoch Step: 120 / 138 Loss: 14.298017501831055 Tokens per Sec: 13563.249794710731
Epoch Step: 125 / 138 Loss: 11.283991813659668 Tokens per Sec: 15103.134512867917
Epoch Step: 130 / 138 Loss: 13.864982604980469 Tokens per Sec: 14857.923395359236
Epoch Step: 135 / 138 Loss: 13.142382621765137 Tokens per Sec: 15352.662777152153
Epoch ended with duration 0:00:40.539356
Train perplexity: 1.3429814925217147
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.760815
Validation perplexity: 1.2966567462837586
Model saved checkpoint!
Epoch 101 / 1000
Epoch Step: 5 / 138 Loss: 80.68801879882812 Tokens per Sec: 16207.597158611055
Epoch Step: 10 / 138 Loss: 6.892843723297119 Tokens per Sec: 16585.771803172793
Epoch Step: 15 / 138 Loss: 90.68891906738281 Tokens per Sec: 18727.668061967528
Epoch Step: 20 / 138 Loss: 11.375396728515625 Tokens per Sec: 16904.19709898927
Epoch Step: 25 / 138 Loss: 18.835098266601562 Tokens per Sec: 15734.009354074491
Epoch Step: 30 / 138 Loss: 14.921737670898438 Tokens per Sec: 16401.6716669728
Epoch Step: 35 / 138 Loss: 14.29362678527832 Tokens per Sec: 16088.970311834628
Epoch Step: 40 / 138 Loss: 15.596832275390625 Tokens per Sec: 15508.628980352982
Epoch Step: 45 / 138 Loss: 10.015613555908203 Tokens per Sec: 17536.94758603264
Epoch Step: 50 / 138 Loss: 7.539544582366943 Tokens per Sec: 16499.74960477707
Epoch Step: 55 / 138 Loss: 15.230802536010742 Tokens per Sec: 15566.277098802784
Epoch Step: 60 / 138 Loss: 12.88128662109375 Tokens per Sec: 16447.351380791803
Epoch Step: 65 / 138 Loss: 8.248475074768066 Tokens per Sec: 16393.860011460714
Epoch Step: 70 / 138 Loss: 13.617393493652344 Tokens per Sec: 15598.322572981406
Epoch Step: 75 / 138 Loss: 12.493041038513184 Tokens per Sec: 15777.542158401104
Epoch Step: 80 / 138 Loss: 9.062567710876465 Tokens per Sec: 16270.471388858938
Epoch Step: 85 / 138 Loss: 99.60672760009766 Tokens per Sec: 15672.528514017364
Epoch Step: 90 / 138 Loss: 13.32770824432373 Tokens per Sec: 16720.771100894897
Epoch Step: 95 / 138 Loss: 19.756567001342773 Tokens per Sec: 15810.175289675153
Epoch Step: 100 / 138 Loss: 10.019709587097168 Tokens per Sec: 14889.889911179669
Epoch Step: 105 / 138 Loss: 11.001626014709473 Tokens per Sec: 15314.545600463456
Epoch Step: 110 / 138 Loss: 7.726327419281006 Tokens per Sec: 16146.903724358399
Epoch Step: 115 / 138 Loss: 7.664196491241455 Tokens per Sec: 15016.539920411142
Epoch Step: 120 / 138 Loss: 7.88099479675293 Tokens per Sec: 15494.535488753101
Epoch Step: 125 / 138 Loss: 53.96224594116211 Tokens per Sec: 14279.059948870523
Epoch Step: 130 / 138 Loss: 7.828049182891846 Tokens per Sec: 17388.47131098518
Epoch Step: 135 / 138 Loss: 9.196224212646484 Tokens per Sec: 15119.707860109746
Epoch ended with duration 0:00:39.799163
Train perplexity: 1.2729150197852128
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.786165
Validation perplexity: 1.4312674364420126
Epoch 102 / 1000
Epoch Step: 5 / 138 Loss: 10.9148588180542 Tokens per Sec: 16090.32318662176
Epoch Step: 10 / 138 Loss: 7.2965474128723145 Tokens per Sec: 14933.403101144524
Epoch Step: 15 / 138 Loss: 12.530564308166504 Tokens per Sec: 15384.290547950382
Epoch Step: 20 / 138 Loss: 8.12757682800293 Tokens per Sec: 16563.705228720253
Epoch Step: 25 / 138 Loss: 13.151737213134766 Tokens per Sec: 15040.103767352304
Epoch Step: 30 / 138 Loss: 9.417732238769531 Tokens per Sec: 16627.42415652736
Epoch Step: 35 / 138 Loss: 11.172123908996582 Tokens per Sec: 15838.073606255433
Epoch Step: 40 / 138 Loss: 4.421894073486328 Tokens per Sec: 15900.535697472902
Epoch Step: 45 / 138 Loss: 8.702857971191406 Tokens per Sec: 16187.033319380167
Epoch Step: 50 / 138 Loss: 12.84753131866455 Tokens per Sec: 15491.385841708969
Epoch Step: 55 / 138 Loss: 7.320366859436035 Tokens per Sec: 15773.035239882924
Epoch Step: 60 / 138 Loss: 6.773080825805664 Tokens per Sec: 16384.170319068377
Epoch Step: 65 / 138 Loss: 8.154166221618652 Tokens per Sec: 16896.416225840898
Epoch Step: 70 / 138 Loss: 24.38200569152832 Tokens per Sec: 15254.208971531525
Epoch Step: 75 / 138 Loss: 18.711795806884766 Tokens per Sec: 16218.699511532233
Epoch Step: 80 / 138 Loss: 11.204051971435547 Tokens per Sec: 18223.972336250605
Epoch Step: 85 / 138 Loss: 6.732425212860107 Tokens per Sec: 19025.93261108544
Epoch Step: 90 / 138 Loss: 11.603029251098633 Tokens per Sec: 16143.99971657216
Epoch Step: 95 / 138 Loss: 7.998513221740723 Tokens per Sec: 16137.347063132029
Epoch Step: 100 / 138 Loss: 7.6642680168151855 Tokens per Sec: 16816.08288654103
Epoch Step: 105 / 138 Loss: 13.113204002380371 Tokens per Sec: 15014.018184666324
Epoch Step: 110 / 138 Loss: 13.87115478515625 Tokens per Sec: 14932.203587139216
Epoch Step: 115 / 138 Loss: 8.365032196044922 Tokens per Sec: 13200.212182470905
Epoch Step: 120 / 138 Loss: 119.71410369873047 Tokens per Sec: 15487.01214429559
Epoch Step: 125 / 138 Loss: 10.570006370544434 Tokens per Sec: 15471.343225576025
Epoch Step: 130 / 138 Loss: 15.536060333251953 Tokens per Sec: 16373.4825078969
Epoch Step: 135 / 138 Loss: 13.593019485473633 Tokens per Sec: 15162.43701363925
Epoch ended with duration 0:00:40.237381
Train perplexity: 1.293478470643503
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , VAR_4 , STRING_3 , VAR_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.779420
Validation perplexity: 1.506593509629416
Epoch 103 / 1000
Epoch Step: 5 / 138 Loss: 16.21570587158203 Tokens per Sec: 15008.19985663516
Epoch Step: 10 / 138 Loss: 15.53979206085205 Tokens per Sec: 14819.847423975547
Epoch Step: 15 / 138 Loss: 19.003835678100586 Tokens per Sec: 16350.80728436113
Epoch Step: 20 / 138 Loss: 13.743181228637695 Tokens per Sec: 15304.636237549274
Epoch Step: 25 / 138 Loss: 7.511226177215576 Tokens per Sec: 16371.260182724147
Epoch Step: 30 / 138 Loss: 13.619990348815918 Tokens per Sec: 16403.18899417955
Epoch Step: 35 / 138 Loss: 9.780653953552246 Tokens per Sec: 16667.78722429373
Epoch Step: 40 / 138 Loss: 11.697824478149414 Tokens per Sec: 17432.95433681919
Epoch Step: 45 / 138 Loss: 7.265735626220703 Tokens per Sec: 17881.67016243173
Epoch Step: 50 / 138 Loss: 9.17203140258789 Tokens per Sec: 17073.59708765842
Epoch Step: 55 / 138 Loss: 9.572127342224121 Tokens per Sec: 15599.804020498143
Epoch Step: 60 / 138 Loss: 8.507991790771484 Tokens per Sec: 15955.065592837236
Epoch Step: 65 / 138 Loss: 8.00071907043457 Tokens per Sec: 17299.233047180893
Epoch Step: 70 / 138 Loss: 3.9086813926696777 Tokens per Sec: 15347.384323955828
Epoch Step: 75 / 138 Loss: 5.469297885894775 Tokens per Sec: 15681.684303886488
Epoch Step: 80 / 138 Loss: 94.06681823730469 Tokens per Sec: 16372.164107094812
Epoch Step: 85 / 138 Loss: 12.08444595336914 Tokens per Sec: 15361.884303215042
Epoch Step: 90 / 138 Loss: 16.07465362548828 Tokens per Sec: 16147.84172261722
Epoch Step: 95 / 138 Loss: 10.818601608276367 Tokens per Sec: 15532.989125089223
Epoch Step: 100 / 138 Loss: 14.444161415100098 Tokens per Sec: 15429.6230271537
Epoch Step: 105 / 138 Loss: 14.40507698059082 Tokens per Sec: 15328.62912248921
Epoch Step: 110 / 138 Loss: 12.304007530212402 Tokens per Sec: 14834.166612068315
Epoch Step: 115 / 138 Loss: 11.973445892333984 Tokens per Sec: 15729.037019460377
Epoch Step: 120 / 138 Loss: 9.031560897827148 Tokens per Sec: 16169.493642838846
Epoch Step: 125 / 138 Loss: 12.58062744140625 Tokens per Sec: 15015.972677961216
Epoch Step: 130 / 138 Loss: 9.90027141571045 Tokens per Sec: 15031.153839717286
Epoch Step: 135 / 138 Loss: 11.246126174926758 Tokens per Sec: 13925.18423363498
Epoch ended with duration 0:00:40.289483
Train perplexity: 1.2478213996855732
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.787568
Validation perplexity: 1.3597341158279
Epoch 104 / 1000
Epoch Step: 5 / 138 Loss: 7.595574855804443 Tokens per Sec: 15810.13846093844
Epoch Step: 10 / 138 Loss: 59.471893310546875 Tokens per Sec: 17074.272135283685
Epoch Step: 15 / 138 Loss: 12.723007202148438 Tokens per Sec: 16613.49704021442
Epoch Step: 20 / 138 Loss: 8.46412181854248 Tokens per Sec: 16048.485713305663
Epoch Step: 25 / 138 Loss: 5.179386138916016 Tokens per Sec: 15103.600620072386
Epoch Step: 30 / 138 Loss: 6.431692123413086 Tokens per Sec: 16729.259814551846
Epoch Step: 35 / 138 Loss: 11.964317321777344 Tokens per Sec: 15954.390629664716
Epoch Step: 40 / 138 Loss: 8.945053100585938 Tokens per Sec: 14358.201204029048
Epoch Step: 45 / 138 Loss: 8.634857177734375 Tokens per Sec: 17288.086291313222
Epoch Step: 50 / 138 Loss: 7.313530445098877 Tokens per Sec: 17597.5590169839
Epoch Step: 55 / 138 Loss: 9.370012283325195 Tokens per Sec: 17295.992887365293
Epoch Step: 60 / 138 Loss: 12.767776489257812 Tokens per Sec: 16263.458626200687
Epoch Step: 65 / 138 Loss: 14.636187553405762 Tokens per Sec: 16072.82660004367
Epoch Step: 70 / 138 Loss: 56.336360931396484 Tokens per Sec: 14894.50130178885
Epoch Step: 75 / 138 Loss: 11.350452423095703 Tokens per Sec: 15564.430061051251
Epoch Step: 80 / 138 Loss: 7.0156636238098145 Tokens per Sec: 15891.996815778086
Epoch Step: 85 / 138 Loss: 16.831953048706055 Tokens per Sec: 14320.961215372768
Epoch Step: 90 / 138 Loss: 11.090485572814941 Tokens per Sec: 16415.164069691105
Epoch Step: 95 / 138 Loss: 135.4817352294922 Tokens per Sec: 16294.264299510834
Epoch Step: 100 / 138 Loss: 11.221172332763672 Tokens per Sec: 17067.20035498571
Epoch Step: 105 / 138 Loss: 109.61090850830078 Tokens per Sec: 13721.192178449459
Epoch Step: 110 / 138 Loss: 11.98345947265625 Tokens per Sec: 16357.386985152156
Epoch Step: 115 / 138 Loss: 18.13542366027832 Tokens per Sec: 17507.633508288105
Epoch Step: 120 / 138 Loss: 8.700881004333496 Tokens per Sec: 16437.89367276743
Epoch Step: 125 / 138 Loss: 10.865538597106934 Tokens per Sec: 16447.582410056042
Epoch Step: 130 / 138 Loss: 13.321040153503418 Tokens per Sec: 15698.540861717656
Epoch Step: 135 / 138 Loss: 8.703818321228027 Tokens per Sec: 14937.193540755497
Epoch ended with duration 0:00:39.813876
Train perplexity: 1.3168958720344346
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.721438
Validation perplexity: 1.2012898973553017
Model saved best_on_validation!
Epoch 105 / 1000
Epoch Step: 5 / 138 Loss: 7.46652364730835 Tokens per Sec: 15314.750673598883
Epoch Step: 10 / 138 Loss: 8.755684852600098 Tokens per Sec: 16398.79560009283
Epoch Step: 15 / 138 Loss: 61.140594482421875 Tokens per Sec: 15647.68374889462
Epoch Step: 20 / 138 Loss: 6.043115139007568 Tokens per Sec: 16233.436968009151
Epoch Step: 25 / 138 Loss: 12.15014934539795 Tokens per Sec: 16105.601400995682
Epoch Step: 30 / 138 Loss: 13.062079429626465 Tokens per Sec: 15388.093222694248
Epoch Step: 35 / 138 Loss: 13.539529800415039 Tokens per Sec: 16688.132692064584
Epoch Step: 40 / 138 Loss: 6.325127124786377 Tokens per Sec: 16756.914412507715
Epoch Step: 45 / 138 Loss: 9.98056697845459 Tokens per Sec: 16966.43708188587
Epoch Step: 50 / 138 Loss: 8.07924747467041 Tokens per Sec: 15838.871851819098
Epoch Step: 55 / 138 Loss: 8.85573959350586 Tokens per Sec: 16664.101535731577
Epoch Step: 60 / 138 Loss: 9.695699691772461 Tokens per Sec: 16018.298066950627
Epoch Step: 65 / 138 Loss: 5.00424337387085 Tokens per Sec: 16676.753240539565
Epoch Step: 70 / 138 Loss: 14.232684135437012 Tokens per Sec: 17378.812618210362
Epoch Step: 75 / 138 Loss: 7.473816871643066 Tokens per Sec: 17036.238409941645
Epoch Step: 80 / 138 Loss: 15.536640167236328 Tokens per Sec: 14491.224443898896
Epoch Step: 85 / 138 Loss: 8.47315788269043 Tokens per Sec: 15661.501067549887
Epoch Step: 90 / 138 Loss: 15.84623908996582 Tokens per Sec: 16284.147881453813
Epoch Step: 95 / 138 Loss: 6.628955364227295 Tokens per Sec: 16548.43415708314
Epoch Step: 100 / 138 Loss: 5.508538246154785 Tokens per Sec: 16614.092218758065
Epoch Step: 105 / 138 Loss: 10.454673767089844 Tokens per Sec: 14741.412730440317
Epoch Step: 110 / 138 Loss: 10.222387313842773 Tokens per Sec: 15106.915438087846
Epoch Step: 115 / 138 Loss: 11.979026794433594 Tokens per Sec: 14562.984124432855
Epoch Step: 120 / 138 Loss: 12.136646270751953 Tokens per Sec: 13707.793413177313
Epoch Step: 125 / 138 Loss: 125.01747131347656 Tokens per Sec: 15970.582522766867
Epoch Step: 130 / 138 Loss: 11.599143981933594 Tokens per Sec: 15893.229432100437
Epoch Step: 135 / 138 Loss: 9.972823143005371 Tokens per Sec: 15339.795627645826
Epoch ended with duration 0:00:40.183838
Train perplexity: 1.2432177101209894
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.765738
Validation perplexity: 1.468568551886905
Model saved checkpoint!
Epoch 106 / 1000
Epoch Step: 5 / 138 Loss: 6.162049293518066 Tokens per Sec: 14672.273341469734
Epoch Step: 10 / 138 Loss: 14.058122634887695 Tokens per Sec: 16392.533006464135
Epoch Step: 15 / 138 Loss: 104.45401763916016 Tokens per Sec: 15315.365540275148
Epoch Step: 20 / 138 Loss: 7.423952579498291 Tokens per Sec: 16566.383337811312
Epoch Step: 25 / 138 Loss: 12.532068252563477 Tokens per Sec: 17022.1495877092
Epoch Step: 30 / 138 Loss: 11.217428207397461 Tokens per Sec: 17540.329794681016
Epoch Step: 35 / 138 Loss: 78.52885437011719 Tokens per Sec: 17236.254739912492
Epoch Step: 40 / 138 Loss: 11.303007125854492 Tokens per Sec: 16289.967365980288
Epoch Step: 45 / 138 Loss: 117.14374542236328 Tokens per Sec: 15132.165766192877
Epoch Step: 50 / 138 Loss: 6.473845958709717 Tokens per Sec: 15603.82557600891
Epoch Step: 55 / 138 Loss: 12.136341094970703 Tokens per Sec: 16220.285964308041
Epoch Step: 60 / 138 Loss: 10.430048942565918 Tokens per Sec: 14813.540912482533
Epoch Step: 65 / 138 Loss: 17.959796905517578 Tokens per Sec: 15726.47863366101
Epoch Step: 70 / 138 Loss: 10.881697654724121 Tokens per Sec: 15812.359123335646
Epoch Step: 75 / 138 Loss: 15.34640884399414 Tokens per Sec: 16930.12911219446
Epoch Step: 80 / 138 Loss: 4.994874954223633 Tokens per Sec: 16056.575012038678
Epoch Step: 85 / 138 Loss: 13.018183708190918 Tokens per Sec: 16526.20126744479
Epoch Step: 90 / 138 Loss: 6.964190483093262 Tokens per Sec: 15920.356920965647
Epoch Step: 95 / 138 Loss: 10.382734298706055 Tokens per Sec: 16638.083805558697
Epoch Step: 100 / 138 Loss: 10.365030288696289 Tokens per Sec: 15297.450522456586
Epoch Step: 105 / 138 Loss: 7.697828769683838 Tokens per Sec: 15845.632889395403
Epoch Step: 110 / 138 Loss: 8.973172187805176 Tokens per Sec: 15480.933722997275
Epoch Step: 115 / 138 Loss: 10.155593872070312 Tokens per Sec: 15700.352688225421
Epoch Step: 120 / 138 Loss: 12.215700149536133 Tokens per Sec: 15202.588554286285
Epoch Step: 125 / 138 Loss: 10.028216361999512 Tokens per Sec: 14742.905046483926
Epoch Step: 130 / 138 Loss: 9.001097679138184 Tokens per Sec: 14006.261079730186
Epoch Step: 135 / 138 Loss: 10.505309104919434 Tokens per Sec: 15635.501174363744
Epoch ended with duration 0:00:40.204936
Train perplexity: 1.2568133045946144
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.663475
Validation perplexity: 1.1809579821194773
Model saved best_on_validation!
Epoch 107 / 1000
Epoch Step: 5 / 138 Loss: 8.560007095336914 Tokens per Sec: 15814.911782217738
Epoch Step: 10 / 138 Loss: 5.645858287811279 Tokens per Sec: 15691.636153928199
Epoch Step: 15 / 138 Loss: 7.759620189666748 Tokens per Sec: 16179.714790572658
Epoch Step: 20 / 138 Loss: 6.292102336883545 Tokens per Sec: 15846.25210014053
Epoch Step: 25 / 138 Loss: 10.113234519958496 Tokens per Sec: 16560.071662019993
Epoch Step: 30 / 138 Loss: 10.929595947265625 Tokens per Sec: 15262.59663363923
Epoch Step: 35 / 138 Loss: 8.476302146911621 Tokens per Sec: 15372.225417355161
Epoch Step: 40 / 138 Loss: 8.199579238891602 Tokens per Sec: 16764.259469189783
Epoch Step: 45 / 138 Loss: 11.528203010559082 Tokens per Sec: 14999.008208435913
Epoch Step: 50 / 138 Loss: 15.49305534362793 Tokens per Sec: 16386.107039523657
Epoch Step: 55 / 138 Loss: 9.505497932434082 Tokens per Sec: 15356.789090252627
Epoch Step: 60 / 138 Loss: 7.721405029296875 Tokens per Sec: 16456.139667500516
Epoch Step: 65 / 138 Loss: 11.785425186157227 Tokens per Sec: 15452.50477603321
Epoch Step: 70 / 138 Loss: 14.616737365722656 Tokens per Sec: 15426.317945572366
Epoch Step: 75 / 138 Loss: 16.813003540039062 Tokens per Sec: 16047.61515179937
Epoch Step: 80 / 138 Loss: 9.403987884521484 Tokens per Sec: 17293.479585126326
Epoch Step: 85 / 138 Loss: 14.594417572021484 Tokens per Sec: 15855.15968480501
Epoch Step: 90 / 138 Loss: 11.767516136169434 Tokens per Sec: 16286.990776171104
Epoch Step: 95 / 138 Loss: 17.875181198120117 Tokens per Sec: 16476.71128640064
Epoch Step: 100 / 138 Loss: 12.854533195495605 Tokens per Sec: 17204.8528893468
Epoch Step: 105 / 138 Loss: 10.16344165802002 Tokens per Sec: 16700.507240687213
Epoch Step: 110 / 138 Loss: 12.872347831726074 Tokens per Sec: 15161.608145048154
Epoch Step: 115 / 138 Loss: 11.294075012207031 Tokens per Sec: 15596.611061722913
Epoch Step: 120 / 138 Loss: 8.848370552062988 Tokens per Sec: 15097.445206203307
Epoch Step: 125 / 138 Loss: 11.32995319366455 Tokens per Sec: 13629.532249548367
Epoch Step: 130 / 138 Loss: 11.41254711151123 Tokens per Sec: 15319.393047483458
Epoch Step: 135 / 138 Loss: 9.06982135772705 Tokens per Sec: 14705.421846022902
Epoch ended with duration 0:00:40.417141
Train perplexity: 1.233295432482523
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.777452
Validation perplexity: 1.3018828617888147
Epoch 108 / 1000
Epoch Step: 5 / 138 Loss: 8.706069946289062 Tokens per Sec: 15717.844189774403
Epoch Step: 10 / 138 Loss: 14.959854125976562 Tokens per Sec: 17450.77584841566
Epoch Step: 15 / 138 Loss: 8.093631744384766 Tokens per Sec: 17143.707558884897
Epoch Step: 20 / 138 Loss: 7.606717109680176 Tokens per Sec: 16096.972202445959
Epoch Step: 25 / 138 Loss: 14.290725708007812 Tokens per Sec: 15716.204608702406
Epoch Step: 30 / 138 Loss: 13.165743827819824 Tokens per Sec: 15788.24253144188
Epoch Step: 35 / 138 Loss: 7.303686141967773 Tokens per Sec: 15101.385886717124
Epoch Step: 40 / 138 Loss: 11.031095504760742 Tokens per Sec: 16779.23064699525
Epoch Step: 45 / 138 Loss: 17.608121871948242 Tokens per Sec: 15951.674855678943
Epoch Step: 50 / 138 Loss: 14.689127922058105 Tokens per Sec: 15974.757889671158
Epoch Step: 55 / 138 Loss: 17.714136123657227 Tokens per Sec: 14708.400625401984
Epoch Step: 60 / 138 Loss: 14.569561004638672 Tokens per Sec: 18192.061189713855
Epoch Step: 65 / 138 Loss: 10.58099365234375 Tokens per Sec: 17528.269862333334
Epoch Step: 70 / 138 Loss: 6.361121654510498 Tokens per Sec: 16566.502112894963
Epoch Step: 75 / 138 Loss: 6.267323017120361 Tokens per Sec: 15389.598597171296
Epoch Step: 80 / 138 Loss: 11.067242622375488 Tokens per Sec: 15541.01687365589
Epoch Step: 85 / 138 Loss: 12.081076622009277 Tokens per Sec: 15618.026992813848
Epoch Step: 90 / 138 Loss: 11.089010238647461 Tokens per Sec: 15083.05573071634
Epoch Step: 95 / 138 Loss: 10.116124153137207 Tokens per Sec: 17045.256527085756
Epoch Step: 100 / 138 Loss: 12.858904838562012 Tokens per Sec: 15867.714803017812
Epoch Step: 105 / 138 Loss: 7.324355602264404 Tokens per Sec: 15226.134053000153
Epoch Step: 110 / 138 Loss: 77.38330078125 Tokens per Sec: 14041.347182597763
Epoch Step: 115 / 138 Loss: 9.983478546142578 Tokens per Sec: 14143.516568610365
Epoch Step: 120 / 138 Loss: 10.698844909667969 Tokens per Sec: 14694.163098127772
Epoch Step: 125 / 138 Loss: 12.737732887268066 Tokens per Sec: 15478.641975231507
Epoch Step: 130 / 138 Loss: 8.964537620544434 Tokens per Sec: 15193.578782650859
Epoch Step: 135 / 138 Loss: 8.391789436340332 Tokens per Sec: 14937.844948871007
Epoch ended with duration 0:00:40.436311
Train perplexity: 1.3590403405324527
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.742090
Validation perplexity: 1.239768920852287
Epoch 109 / 1000
Epoch Step: 5 / 138 Loss: 6.824387073516846 Tokens per Sec: 16052.944776353675
Epoch Step: 10 / 138 Loss: 7.970628261566162 Tokens per Sec: 15841.507031696196
Epoch Step: 15 / 138 Loss: 8.91096305847168 Tokens per Sec: 18420.358386445725
Epoch Step: 20 / 138 Loss: 12.17028522491455 Tokens per Sec: 17902.667443316845
Epoch Step: 25 / 138 Loss: 78.21822357177734 Tokens per Sec: 15478.585910179827
Epoch Step: 30 / 138 Loss: 12.547248840332031 Tokens per Sec: 16304.030389049847
Epoch Step: 35 / 138 Loss: 20.2048282623291 Tokens per Sec: 16091.285892736567
Epoch Step: 40 / 138 Loss: 49.410884857177734 Tokens per Sec: 17056.449881736702
Epoch Step: 45 / 138 Loss: 16.74222755432129 Tokens per Sec: 15630.951126766704
Epoch Step: 50 / 138 Loss: 24.49659538269043 Tokens per Sec: 15431.407855179466
Epoch Step: 55 / 138 Loss: 17.80009651184082 Tokens per Sec: 15260.876245030606
Epoch Step: 60 / 138 Loss: 13.988264083862305 Tokens per Sec: 15514.852593845479
Epoch Step: 65 / 138 Loss: 9.876384735107422 Tokens per Sec: 14555.298624844849
Epoch Step: 70 / 138 Loss: 12.398655891418457 Tokens per Sec: 16479.403061402387
Epoch Step: 75 / 138 Loss: 15.770244598388672 Tokens per Sec: 15918.689219993874
Epoch Step: 80 / 138 Loss: 12.8059720993042 Tokens per Sec: 16042.326693389863
Epoch Step: 85 / 138 Loss: 4.6633148193359375 Tokens per Sec: 16390.47522236703
Epoch Step: 90 / 138 Loss: 5.650756359100342 Tokens per Sec: 14642.651786722003
Epoch Step: 95 / 138 Loss: 16.334489822387695 Tokens per Sec: 15832.36612582288
Epoch Step: 100 / 138 Loss: 12.57695198059082 Tokens per Sec: 16388.421082172117
Epoch Step: 105 / 138 Loss: 12.923707008361816 Tokens per Sec: 15562.148227272444
Epoch Step: 110 / 138 Loss: 13.2003812789917 Tokens per Sec: 15080.351597119747
Epoch Step: 115 / 138 Loss: 109.61707305908203 Tokens per Sec: 16495.500352185547
Epoch Step: 120 / 138 Loss: 7.747810363769531 Tokens per Sec: 14652.10842738577
Epoch Step: 125 / 138 Loss: 10.818466186523438 Tokens per Sec: 15581.53623979763
Epoch Step: 130 / 138 Loss: 11.362161636352539 Tokens per Sec: 14853.88778354116
Epoch Step: 135 / 138 Loss: 8.584137916564941 Tokens per Sec: 14774.22198636193
Epoch ended with duration 0:00:40.277786
Train perplexity: 1.3192905171167149
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.759352
Validation perplexity: 1.2604992574564768
Epoch 110 / 1000
Epoch Step: 5 / 138 Loss: 16.305330276489258 Tokens per Sec: 16483.605828051903
Epoch Step: 10 / 138 Loss: 5.562618732452393 Tokens per Sec: 16409.29099460481
Epoch Step: 15 / 138 Loss: 10.026395797729492 Tokens per Sec: 14879.460611017203
Epoch Step: 20 / 138 Loss: 13.398186683654785 Tokens per Sec: 15930.158533102805
Epoch Step: 25 / 138 Loss: 13.17299747467041 Tokens per Sec: 16243.334142167396
Epoch Step: 30 / 138 Loss: 13.115375518798828 Tokens per Sec: 15641.084102400666
Epoch Step: 35 / 138 Loss: 13.47465991973877 Tokens per Sec: 15338.050536096935
Epoch Step: 40 / 138 Loss: 14.366588592529297 Tokens per Sec: 15596.503444695638
Epoch Step: 45 / 138 Loss: 10.712076187133789 Tokens per Sec: 15710.970634967656
Epoch Step: 50 / 138 Loss: 11.971168518066406 Tokens per Sec: 15846.89349319818
Epoch Step: 55 / 138 Loss: 68.88434600830078 Tokens per Sec: 16299.42562118605
Epoch Step: 60 / 138 Loss: 8.469095230102539 Tokens per Sec: 15628.585022557048
Epoch Step: 65 / 138 Loss: 7.691064357757568 Tokens per Sec: 15951.083905959966
Epoch Step: 70 / 138 Loss: 16.05125617980957 Tokens per Sec: 15218.783315232107
Epoch Step: 75 / 138 Loss: 12.048547744750977 Tokens per Sec: 15903.123529462875
Epoch Step: 80 / 138 Loss: 4.967973709106445 Tokens per Sec: 16342.159037208101
Epoch Step: 85 / 138 Loss: 8.035022735595703 Tokens per Sec: 17832.52810637622
Epoch Step: 90 / 138 Loss: 8.404770851135254 Tokens per Sec: 18316.80369260823
Epoch Step: 95 / 138 Loss: 16.63239097595215 Tokens per Sec: 17732.300525221162
Epoch Step: 100 / 138 Loss: 5.090278148651123 Tokens per Sec: 16589.853328660178
Epoch Step: 105 / 138 Loss: 7.85148811340332 Tokens per Sec: 13978.154983816677
Epoch Step: 110 / 138 Loss: 14.668744087219238 Tokens per Sec: 15696.835190197035
Epoch Step: 115 / 138 Loss: 10.316476821899414 Tokens per Sec: 15526.892898389693
Epoch Step: 120 / 138 Loss: 10.37069320678711 Tokens per Sec: 14990.564511143748
Epoch Step: 125 / 138 Loss: 10.620054244995117 Tokens per Sec: 14252.908051041399
Epoch Step: 130 / 138 Loss: 8.951598167419434 Tokens per Sec: 15400.008899291417
Epoch Step: 135 / 138 Loss: 11.403752326965332 Tokens per Sec: 16079.801437087053
Epoch ended with duration 0:00:40.164394
Train perplexity: 1.2361393060813253
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.758010
Validation perplexity: 1.2670903576593686
Model saved checkpoint!
Epoch 111 / 1000
Epoch Step: 5 / 138 Loss: 7.773462772369385 Tokens per Sec: 16531.45155498925
Epoch Step: 10 / 138 Loss: 62.34754180908203 Tokens per Sec: 15732.928573922496
Epoch Step: 15 / 138 Loss: 12.65060806274414 Tokens per Sec: 15388.121416869555
Epoch Step: 20 / 138 Loss: 7.458648204803467 Tokens per Sec: 16217.942791498312
Epoch Step: 25 / 138 Loss: 5.9808573722839355 Tokens per Sec: 16623.24862123128
Epoch Step: 30 / 138 Loss: 8.743687629699707 Tokens per Sec: 15283.378104960308
Epoch Step: 35 / 138 Loss: 12.565821647644043 Tokens per Sec: 15945.94229682368
Epoch Step: 40 / 138 Loss: 149.62234497070312 Tokens per Sec: 15757.231355114081
Epoch Step: 45 / 138 Loss: 8.226554870605469 Tokens per Sec: 15363.584386733412
Epoch Step: 50 / 138 Loss: 22.375215530395508 Tokens per Sec: 18650.36454690299
Epoch Step: 55 / 138 Loss: 8.155322074890137 Tokens per Sec: 17712.206522414916
Epoch Step: 60 / 138 Loss: 8.331245422363281 Tokens per Sec: 17610.805014371217
Epoch Step: 65 / 138 Loss: 17.75481414794922 Tokens per Sec: 16186.67268649374
Epoch Step: 70 / 138 Loss: 28.274280548095703 Tokens per Sec: 16121.03171418718
Epoch Step: 75 / 138 Loss: 16.18889808654785 Tokens per Sec: 15912.260239412557
Epoch Step: 80 / 138 Loss: 7.776608467102051 Tokens per Sec: 15782.580908909733
Epoch Step: 85 / 138 Loss: 30.017595291137695 Tokens per Sec: 15486.256641971873
Epoch Step: 90 / 138 Loss: 15.740296363830566 Tokens per Sec: 16476.061254362343
Epoch Step: 95 / 138 Loss: 11.863483428955078 Tokens per Sec: 15085.599780033037
Epoch Step: 100 / 138 Loss: 12.570069313049316 Tokens per Sec: 15146.825014798364
Epoch Step: 105 / 138 Loss: 10.544153213500977 Tokens per Sec: 14873.482672136899
Epoch Step: 110 / 138 Loss: 13.389847755432129 Tokens per Sec: 14357.226217250698
Epoch Step: 115 / 138 Loss: 12.763815879821777 Tokens per Sec: 15645.819473524747
Epoch Step: 120 / 138 Loss: 11.115585327148438 Tokens per Sec: 14843.136236986455
Epoch Step: 125 / 138 Loss: 14.732416152954102 Tokens per Sec: 14578.806643325108
Epoch Step: 130 / 138 Loss: 7.068963527679443 Tokens per Sec: 15273.14838464304
Epoch Step: 135 / 138 Loss: 10.838966369628906 Tokens per Sec: 15233.547228531332
Epoch ended with duration 0:00:40.348552
Train perplexity: 1.3654438072722959
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.771397
Validation perplexity: 1.5308439092254797
Epoch 112 / 1000
Epoch Step: 5 / 138 Loss: 4.958495140075684 Tokens per Sec: 17170.073247512395
Epoch Step: 10 / 138 Loss: 8.03929615020752 Tokens per Sec: 16939.56427565269
Epoch Step: 15 / 138 Loss: 13.960518836975098 Tokens per Sec: 16138.402595908008
Epoch Step: 20 / 138 Loss: 11.709589958190918 Tokens per Sec: 16069.231744431014
Epoch Step: 25 / 138 Loss: 100.79077911376953 Tokens per Sec: 16420.636667949286
Epoch Step: 30 / 138 Loss: 14.014577865600586 Tokens per Sec: 15480.415976872453
Epoch Step: 35 / 138 Loss: 16.16782569885254 Tokens per Sec: 15848.72720577346
Epoch Step: 40 / 138 Loss: 44.467864990234375 Tokens per Sec: 16798.301913213385
Epoch Step: 45 / 138 Loss: 70.96311950683594 Tokens per Sec: 15402.953556248447
Epoch Step: 50 / 138 Loss: 44.77988052368164 Tokens per Sec: 15688.033049582078
Epoch Step: 55 / 138 Loss: 11.990655899047852 Tokens per Sec: 16473.292950278043
Epoch Step: 60 / 138 Loss: 10.233907699584961 Tokens per Sec: 15478.916032831605
Epoch Step: 65 / 138 Loss: 13.880374908447266 Tokens per Sec: 17033.010495781273
Epoch Step: 70 / 138 Loss: 93.3034439086914 Tokens per Sec: 15993.67998839306
Epoch Step: 75 / 138 Loss: 53.432334899902344 Tokens per Sec: 15381.396409932586
Epoch Step: 80 / 138 Loss: 12.682616233825684 Tokens per Sec: 16010.693432639591
Epoch Step: 85 / 138 Loss: 17.736839294433594 Tokens per Sec: 15550.915254237289
Epoch Step: 90 / 138 Loss: 11.43571949005127 Tokens per Sec: 16679.764514069164
Epoch Step: 95 / 138 Loss: 9.779058456420898 Tokens per Sec: 14899.27615712121
Epoch Step: 100 / 138 Loss: 12.072202682495117 Tokens per Sec: 15521.006071805064
Epoch Step: 105 / 138 Loss: 9.895516395568848 Tokens per Sec: 14691.366401521556
Epoch Step: 110 / 138 Loss: 10.957795143127441 Tokens per Sec: 13836.542442423037
Epoch Step: 115 / 138 Loss: 10.981304168701172 Tokens per Sec: 15428.50519283715
Epoch Step: 120 / 138 Loss: 7.182282447814941 Tokens per Sec: 16195.242340393419
Epoch Step: 125 / 138 Loss: 10.75644302368164 Tokens per Sec: 17098.149378004135
Epoch Step: 130 / 138 Loss: 8.641226768493652 Tokens per Sec: 14813.885013441688
Epoch Step: 135 / 138 Loss: 7.701193809509277 Tokens per Sec: 15226.26542998701
Epoch ended with duration 0:00:40.341830
Train perplexity: 1.2811013444117902
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.747886
Validation perplexity: 1.1782635050701202
Model saved best_on_validation!
Epoch 113 / 1000
Epoch Step: 5 / 138 Loss: 60.56012725830078 Tokens per Sec: 14242.746243011949
Epoch Step: 10 / 138 Loss: 11.478965759277344 Tokens per Sec: 16640.77212714326
Epoch Step: 15 / 138 Loss: 9.727954864501953 Tokens per Sec: 16453.11450116982
Epoch Step: 20 / 138 Loss: 13.439841270446777 Tokens per Sec: 15513.15902051826
Epoch Step: 25 / 138 Loss: 12.299027442932129 Tokens per Sec: 14704.490909132943
Epoch Step: 30 / 138 Loss: 12.837945938110352 Tokens per Sec: 15989.072608783843
Epoch Step: 35 / 138 Loss: 11.783340454101562 Tokens per Sec: 15411.085910683129
Epoch Step: 40 / 138 Loss: 6.35375452041626 Tokens per Sec: 17491.965154448582
Epoch Step: 45 / 138 Loss: 11.75589370727539 Tokens per Sec: 15411.734891209926
Epoch Step: 50 / 138 Loss: 12.73171329498291 Tokens per Sec: 15954.470662984495
Epoch Step: 55 / 138 Loss: 11.482382774353027 Tokens per Sec: 16527.107195797482
Epoch Step: 60 / 138 Loss: 37.59772872924805 Tokens per Sec: 15223.571116203333
Epoch Step: 65 / 138 Loss: 8.043088912963867 Tokens per Sec: 16539.345427196964
Epoch Step: 70 / 138 Loss: 12.137716293334961 Tokens per Sec: 16160.653073661288
Epoch Step: 75 / 138 Loss: 12.01966667175293 Tokens per Sec: 16833.27029420434
Epoch Step: 80 / 138 Loss: 14.412531852722168 Tokens per Sec: 16932.926500314374
Epoch Step: 85 / 138 Loss: 6.406624794006348 Tokens per Sec: 18120.85294839636
Epoch Step: 90 / 138 Loss: 12.473590850830078 Tokens per Sec: 16433.696845317896
Epoch Step: 95 / 138 Loss: 13.694107055664062 Tokens per Sec: 15632.933035917513
Epoch Step: 100 / 138 Loss: 18.578062057495117 Tokens per Sec: 16756.163645320437
Epoch Step: 105 / 138 Loss: 9.042797088623047 Tokens per Sec: 15831.814080686048
Epoch Step: 110 / 138 Loss: 10.324405670166016 Tokens per Sec: 15344.074866812989
Epoch Step: 115 / 138 Loss: 10.841323852539062 Tokens per Sec: 15689.86569783761
Epoch Step: 120 / 138 Loss: 11.463172912597656 Tokens per Sec: 14936.950384243486
Epoch Step: 125 / 138 Loss: 6.63278341293335 Tokens per Sec: 15505.25712319304
Epoch Step: 130 / 138 Loss: 9.884798049926758 Tokens per Sec: 15161.513770105654
Epoch Step: 135 / 138 Loss: 9.498514175415039 Tokens per Sec: 13251.843108882105
Epoch ended with duration 0:00:40.256296
Train perplexity: 1.2619192175335863
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.785119
Validation perplexity: 1.4392692561926734
Epoch 114 / 1000
Epoch Step: 5 / 138 Loss: 13.102360725402832 Tokens per Sec: 16841.760119995095
Epoch Step: 10 / 138 Loss: 53.61015319824219 Tokens per Sec: 16740.799494428513
Epoch Step: 15 / 138 Loss: 9.248215675354004 Tokens per Sec: 16567.075088997273
Epoch Step: 20 / 138 Loss: 11.959826469421387 Tokens per Sec: 15636.337059171228
Epoch Step: 25 / 138 Loss: 11.85285758972168 Tokens per Sec: 15109.7783723999
Epoch Step: 30 / 138 Loss: 5.1671013832092285 Tokens per Sec: 16566.001903665412
Epoch Step: 35 / 138 Loss: 7.552340984344482 Tokens per Sec: 16551.45593996442
Epoch Step: 40 / 138 Loss: 13.62866497039795 Tokens per Sec: 15398.048165590715
Epoch Step: 45 / 138 Loss: 11.593832969665527 Tokens per Sec: 17961.910532890048
Epoch Step: 50 / 138 Loss: 6.541769981384277 Tokens per Sec: 16263.975729604215
Epoch Step: 55 / 138 Loss: 13.158984184265137 Tokens per Sec: 15783.525252505859
Epoch Step: 60 / 138 Loss: 16.15410614013672 Tokens per Sec: 15844.917776546652
Epoch Step: 65 / 138 Loss: 18.8400936126709 Tokens per Sec: 15654.103804406053
Epoch Step: 70 / 138 Loss: 17.411649703979492 Tokens per Sec: 16152.030569619505
Epoch Step: 75 / 138 Loss: 14.616912841796875 Tokens per Sec: 15232.88886447684
Epoch Step: 80 / 138 Loss: 16.00090980529785 Tokens per Sec: 15964.481716885975
Epoch Step: 85 / 138 Loss: 9.245789527893066 Tokens per Sec: 17543.572156444847
Epoch Step: 90 / 138 Loss: 7.503674507141113 Tokens per Sec: 16640.578054822094
Epoch Step: 95 / 138 Loss: 106.99512481689453 Tokens per Sec: 15472.558933897933
Epoch Step: 100 / 138 Loss: 5.8319573402404785 Tokens per Sec: 16344.566731533172
Epoch Step: 105 / 138 Loss: 9.92569637298584 Tokens per Sec: 13799.141223633596
Epoch Step: 110 / 138 Loss: 11.259541511535645 Tokens per Sec: 16466.83048021496
Epoch Step: 115 / 138 Loss: 11.77548599243164 Tokens per Sec: 15440.320097271318
Epoch Step: 120 / 138 Loss: 7.747232913970947 Tokens per Sec: 15067.663426994564
Epoch Step: 125 / 138 Loss: 10.837284088134766 Tokens per Sec: 15101.82859487694
Epoch Step: 130 / 138 Loss: 10.226823806762695 Tokens per Sec: 15417.962763688261
Epoch Step: 135 / 138 Loss: 9.93777084350586 Tokens per Sec: 15513.803066405246
Epoch ended with duration 0:00:40.088591
Train perplexity: 1.3349607898571065
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 ( METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.689560
Validation perplexity: 1.5509740349801
Epoch 115 / 1000
Epoch Step: 5 / 138 Loss: 65.90328216552734 Tokens per Sec: 16770.31201537244
Epoch Step: 10 / 138 Loss: 12.744783401489258 Tokens per Sec: 15613.396602284301
Epoch Step: 15 / 138 Loss: 15.072309494018555 Tokens per Sec: 17374.49193745893
Epoch Step: 20 / 138 Loss: 14.102785110473633 Tokens per Sec: 13876.187360019212
Epoch Step: 25 / 138 Loss: 10.533092498779297 Tokens per Sec: 14508.584458344098
Epoch Step: 30 / 138 Loss: 10.020145416259766 Tokens per Sec: 15977.271193635077
Epoch Step: 35 / 138 Loss: 11.067805290222168 Tokens per Sec: 15998.30481802386
Epoch Step: 40 / 138 Loss: 9.230142593383789 Tokens per Sec: 15485.026168497157
Epoch Step: 45 / 138 Loss: 10.597633361816406 Tokens per Sec: 16241.023796855887
Epoch Step: 50 / 138 Loss: 9.359979629516602 Tokens per Sec: 17496.002875489245
Epoch Step: 55 / 138 Loss: 6.371090412139893 Tokens per Sec: 16070.199540110654
Epoch Step: 60 / 138 Loss: 13.149638175964355 Tokens per Sec: 16779.809178407202
Epoch Step: 65 / 138 Loss: 11.256675720214844 Tokens per Sec: 16224.98592943462
Epoch Step: 70 / 138 Loss: 8.271539688110352 Tokens per Sec: 16324.554643458194
Epoch Step: 75 / 138 Loss: 12.479903221130371 Tokens per Sec: 16569.142696826646
Epoch Step: 80 / 138 Loss: 5.669567108154297 Tokens per Sec: 15536.822669179408
Epoch Step: 85 / 138 Loss: 7.9639787673950195 Tokens per Sec: 16910.96967082233
Epoch Step: 90 / 138 Loss: 6.970404624938965 Tokens per Sec: 15506.414133260789
Epoch Step: 95 / 138 Loss: 7.334279537200928 Tokens per Sec: 16287.929368937199
Epoch Step: 100 / 138 Loss: 10.218047142028809 Tokens per Sec: 15900.414228097005
Epoch Step: 105 / 138 Loss: 6.775138854980469 Tokens per Sec: 15403.075846024754
Epoch Step: 110 / 138 Loss: 49.139766693115234 Tokens per Sec: 14752.579737811606
Epoch Step: 115 / 138 Loss: 11.166620254516602 Tokens per Sec: 16976.655713682692
Epoch Step: 120 / 138 Loss: 9.800533294677734 Tokens per Sec: 14982.391221717768
Epoch Step: 125 / 138 Loss: 8.279458999633789 Tokens per Sec: 14811.521414024404
Epoch Step: 130 / 138 Loss: 5.6903486251831055 Tokens per Sec: 15637.161864351145
Epoch Step: 135 / 138 Loss: 9.302363395690918 Tokens per Sec: 16366.773975263452
Epoch ended with duration 0:00:40.077029
Train perplexity: 1.2287757156927623
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.764851
Validation perplexity: 1.3301604051760823
Model saved checkpoint!
Epoch 116 / 1000
Epoch Step: 5 / 138 Loss: 10.036455154418945 Tokens per Sec: 16306.265411065298
Epoch Step: 10 / 138 Loss: 5.715789318084717 Tokens per Sec: 16784.317712991095
Epoch Step: 15 / 138 Loss: 12.596477508544922 Tokens per Sec: 16449.983911038307
Epoch Step: 20 / 138 Loss: 48.048091888427734 Tokens per Sec: 16553.177097977976
Epoch Step: 25 / 138 Loss: 134.833740234375 Tokens per Sec: 16208.06354725257
Epoch Step: 30 / 138 Loss: 8.23210334777832 Tokens per Sec: 15049.04969540107
Epoch Step: 35 / 138 Loss: 11.740187644958496 Tokens per Sec: 15885.243908211181
Epoch Step: 40 / 138 Loss: 7.186545372009277 Tokens per Sec: 15719.213567228728
Epoch Step: 45 / 138 Loss: 10.634210586547852 Tokens per Sec: 16130.710919226936
Epoch Step: 50 / 138 Loss: 13.810389518737793 Tokens per Sec: 15608.125090627993
Epoch Step: 55 / 138 Loss: 9.33834171295166 Tokens per Sec: 15853.169907790036
Epoch Step: 60 / 138 Loss: 12.811314582824707 Tokens per Sec: 17819.126748066774
Epoch Step: 65 / 138 Loss: 11.634882926940918 Tokens per Sec: 16603.994282174233
Epoch Step: 70 / 138 Loss: 5.465096950531006 Tokens per Sec: 16000.746234673856
Epoch Step: 75 / 138 Loss: 5.617893218994141 Tokens per Sec: 16473.586907439007
Epoch Step: 80 / 138 Loss: 100.5534439086914 Tokens per Sec: 15987.277424753143
Epoch Step: 85 / 138 Loss: 76.21267700195312 Tokens per Sec: 17055.093043863835
Epoch Step: 90 / 138 Loss: 12.544506072998047 Tokens per Sec: 16446.1402367651
Epoch Step: 95 / 138 Loss: 5.027960777282715 Tokens per Sec: 17079.4731885924
Epoch Step: 100 / 138 Loss: 147.3505859375 Tokens per Sec: 14398.234491851912
Epoch Step: 105 / 138 Loss: 13.976004600524902 Tokens per Sec: 14351.351018860418
Epoch Step: 110 / 138 Loss: 16.253755569458008 Tokens per Sec: 13508.834304455355
Epoch Step: 115 / 138 Loss: 10.753077507019043 Tokens per Sec: 14300.019259762039
Epoch Step: 120 / 138 Loss: 11.33505630493164 Tokens per Sec: 14283.861273689212
Epoch Step: 125 / 138 Loss: 7.841208457946777 Tokens per Sec: 15742.224433432668
Epoch Step: 130 / 138 Loss: 11.993932723999023 Tokens per Sec: 15636.10837496796
Epoch Step: 135 / 138 Loss: 8.255622863769531 Tokens per Sec: 14982.100593203866
Epoch ended with duration 0:00:40.514210
Train perplexity: 1.298935178495044
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.766643
Validation perplexity: 1.2988766815239536
Epoch 117 / 1000
Epoch Step: 5 / 138 Loss: 12.977604866027832 Tokens per Sec: 14686.8972158521
Epoch Step: 10 / 138 Loss: 12.596080780029297 Tokens per Sec: 14807.959937256226
Epoch Step: 15 / 138 Loss: 12.073884963989258 Tokens per Sec: 14773.285654023604
Epoch Step: 20 / 138 Loss: 46.32538604736328 Tokens per Sec: 16822.49138198473
Epoch Step: 25 / 138 Loss: 11.808882713317871 Tokens per Sec: 16959.23541896778
Epoch Step: 30 / 138 Loss: 14.686230659484863 Tokens per Sec: 17745.207956868682
Epoch Step: 35 / 138 Loss: 7.249691486358643 Tokens per Sec: 16676.587424595564
Epoch Step: 40 / 138 Loss: 107.76126098632812 Tokens per Sec: 15890.255845020101
Epoch Step: 45 / 138 Loss: 9.963138580322266 Tokens per Sec: 17035.37398376012
Epoch Step: 50 / 138 Loss: 7.210349082946777 Tokens per Sec: 15729.07354397927
Epoch Step: 55 / 138 Loss: 11.232221603393555 Tokens per Sec: 16612.744630044937
Epoch Step: 60 / 138 Loss: 5.286745548248291 Tokens per Sec: 16353.058350685196
Epoch Step: 65 / 138 Loss: 13.372002601623535 Tokens per Sec: 15838.528691407124
Epoch Step: 70 / 138 Loss: 8.218381881713867 Tokens per Sec: 16697.752910858882
Epoch Step: 75 / 138 Loss: 43.25334167480469 Tokens per Sec: 15725.110501389421
Epoch Step: 80 / 138 Loss: 14.074986457824707 Tokens per Sec: 16035.642636075423
Epoch Step: 85 / 138 Loss: 16.44757080078125 Tokens per Sec: 15957.017942493014
Epoch Step: 90 / 138 Loss: 6.145814418792725 Tokens per Sec: 16255.826697612149
Epoch Step: 95 / 138 Loss: 17.575027465820312 Tokens per Sec: 15621.360363964379
Epoch Step: 100 / 138 Loss: 5.71396017074585 Tokens per Sec: 15766.680202380923
Epoch Step: 105 / 138 Loss: 11.71772575378418 Tokens per Sec: 13001.978911770206
Epoch Step: 110 / 138 Loss: 7.785848140716553 Tokens per Sec: 16033.724716925399
Epoch Step: 115 / 138 Loss: 8.786246299743652 Tokens per Sec: 15896.138166363104
Epoch Step: 120 / 138 Loss: 9.646686553955078 Tokens per Sec: 15180.730216488244
Epoch Step: 125 / 138 Loss: 8.699600219726562 Tokens per Sec: 15653.450954473996
Epoch Step: 130 / 138 Loss: 6.836466312408447 Tokens per Sec: 16422.486701231377
Epoch Step: 135 / 138 Loss: 11.40381908416748 Tokens per Sec: 16871.717217095196
Epoch ended with duration 0:00:40.117105
Train perplexity: 1.2798707108797445
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { result . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.735703
Validation perplexity: 1.1757548478839654
Model saved best_on_validation!
Epoch 118 / 1000
Epoch Step: 5 / 138 Loss: 11.846174240112305 Tokens per Sec: 16068.643856321178
Epoch Step: 10 / 138 Loss: 9.43111515045166 Tokens per Sec: 15224.635357533747
Epoch Step: 15 / 138 Loss: 10.907342910766602 Tokens per Sec: 16546.569173797416
Epoch Step: 20 / 138 Loss: 103.65292358398438 Tokens per Sec: 15915.83666661475
Epoch Step: 25 / 138 Loss: 10.084039688110352 Tokens per Sec: 16087.7925171144
Epoch Step: 30 / 138 Loss: 6.465656757354736 Tokens per Sec: 16449.236839709323
Epoch Step: 35 / 138 Loss: 11.756871223449707 Tokens per Sec: 15840.20936355934
Epoch Step: 40 / 138 Loss: 6.478774070739746 Tokens per Sec: 16379.242164417488
Epoch Step: 45 / 138 Loss: 9.078550338745117 Tokens per Sec: 15587.72378796244
Epoch Step: 50 / 138 Loss: 6.595151901245117 Tokens per Sec: 15773.718371127145
Epoch Step: 55 / 138 Loss: 7.632453918457031 Tokens per Sec: 17270.05715811781
Epoch Step: 60 / 138 Loss: 12.135957717895508 Tokens per Sec: 16404.85935195787
Epoch Step: 65 / 138 Loss: 12.078743934631348 Tokens per Sec: 15488.752923662889
Epoch Step: 70 / 138 Loss: 11.82071304321289 Tokens per Sec: 16321.582948054762
Epoch Step: 75 / 138 Loss: 6.379039287567139 Tokens per Sec: 15871.753300633787
Epoch Step: 80 / 138 Loss: 120.60081481933594 Tokens per Sec: 15199.891851053435
Epoch Step: 85 / 138 Loss: 14.397640228271484 Tokens per Sec: 17899.576977103214
Epoch Step: 90 / 138 Loss: 88.37723541259766 Tokens per Sec: 16894.805004141337
Epoch Step: 95 / 138 Loss: 19.33205223083496 Tokens per Sec: 16015.174907558878
Epoch Step: 100 / 138 Loss: 54.31547927856445 Tokens per Sec: 15565.07341982338
Epoch Step: 105 / 138 Loss: 113.47217559814453 Tokens per Sec: 14500.637533797175
Epoch Step: 110 / 138 Loss: 11.647014617919922 Tokens per Sec: 16459.019866639213
Epoch Step: 115 / 138 Loss: 10.945038795471191 Tokens per Sec: 15466.431877075616
Epoch Step: 120 / 138 Loss: 8.185800552368164 Tokens per Sec: 15592.46929120075
Epoch Step: 125 / 138 Loss: 13.636062622070312 Tokens per Sec: 15540.893774036856
Epoch Step: 130 / 138 Loss: 9.161348342895508 Tokens per Sec: 15286.392439339006
Epoch Step: 135 / 138 Loss: 8.027132034301758 Tokens per Sec: 13097.26102418765
Epoch ended with duration 0:00:40.287054
Train perplexity: 1.2976482618080831
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.774004
Validation perplexity: 1.2427055319085127
Epoch 119 / 1000
Epoch Step: 5 / 138 Loss: 5.941559791564941 Tokens per Sec: 15228.919942962504
Epoch Step: 10 / 138 Loss: 4.2941694259643555 Tokens per Sec: 15689.277616016821
Epoch Step: 15 / 138 Loss: 10.66884708404541 Tokens per Sec: 14875.29512550003
Epoch Step: 20 / 138 Loss: 10.163196563720703 Tokens per Sec: 15846.236683118386
Epoch Step: 25 / 138 Loss: 7.302338123321533 Tokens per Sec: 15321.625744161058
Epoch Step: 30 / 138 Loss: 13.86520004272461 Tokens per Sec: 16886.361678466073
Epoch Step: 35 / 138 Loss: 12.227232933044434 Tokens per Sec: 15997.685232491835
Epoch Step: 40 / 138 Loss: 12.806588172912598 Tokens per Sec: 16412.0690638816
Epoch Step: 45 / 138 Loss: 12.406083106994629 Tokens per Sec: 15378.210326758935
Epoch Step: 50 / 138 Loss: 16.597801208496094 Tokens per Sec: 17318.376908583898
Epoch Step: 55 / 138 Loss: 10.366802215576172 Tokens per Sec: 17699.918274490352
Epoch Step: 60 / 138 Loss: 70.88411712646484 Tokens per Sec: 16548.644523549465
Epoch Step: 65 / 138 Loss: 13.295797348022461 Tokens per Sec: 18054.651036612326
Epoch Step: 70 / 138 Loss: 15.914351463317871 Tokens per Sec: 15321.848307353039
Epoch Step: 75 / 138 Loss: 19.87991714477539 Tokens per Sec: 16000.808200925349
Epoch Step: 80 / 138 Loss: 9.326995849609375 Tokens per Sec: 16026.829549279202
Epoch Step: 85 / 138 Loss: 9.503127098083496 Tokens per Sec: 16742.16130824416
Epoch Step: 90 / 138 Loss: 16.896068572998047 Tokens per Sec: 14941.686973658167
Epoch Step: 95 / 138 Loss: 6.704203128814697 Tokens per Sec: 17076.008081981294
Epoch Step: 100 / 138 Loss: 55.15696334838867 Tokens per Sec: 15083.834965164944
Epoch Step: 105 / 138 Loss: 10.33564281463623 Tokens per Sec: 16015.370712238298
Epoch Step: 110 / 138 Loss: 14.477726936340332 Tokens per Sec: 13380.504810541504
Epoch Step: 115 / 138 Loss: 41.986045837402344 Tokens per Sec: 15638.04139706689
Epoch Step: 120 / 138 Loss: 6.387858867645264 Tokens per Sec: 15486.76290352446
Epoch Step: 125 / 138 Loss: 13.973968505859375 Tokens per Sec: 15697.80418192705
Epoch Step: 130 / 138 Loss: 12.546669960021973 Tokens per Sec: 16189.38374222988
Epoch Step: 135 / 138 Loss: 12.44459342956543 Tokens per Sec: 15003.284476013861
Epoch ended with duration 0:00:40.213869
Train perplexity: 1.3779898489905047
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.771804
Validation perplexity: 1.3504066399682748
Epoch 120 / 1000
Epoch Step: 5 / 138 Loss: 47.247432708740234 Tokens per Sec: 15407.527459593892
Epoch Step: 10 / 138 Loss: 9.282686233520508 Tokens per Sec: 17270.42867912981
Epoch Step: 15 / 138 Loss: 16.85771942138672 Tokens per Sec: 16519.375144822676
Epoch Step: 20 / 138 Loss: 16.12629508972168 Tokens per Sec: 15876.574962045011
Epoch Step: 25 / 138 Loss: 11.62887191772461 Tokens per Sec: 16519.783977690553
Epoch Step: 30 / 138 Loss: 9.043035507202148 Tokens per Sec: 15788.839219450498
Epoch Step: 35 / 138 Loss: 3.9773852825164795 Tokens per Sec: 16006.088821299241
Epoch Step: 40 / 138 Loss: 63.285308837890625 Tokens per Sec: 14387.51309849069
Epoch Step: 45 / 138 Loss: 9.556051254272461 Tokens per Sec: 16695.631898805634
Epoch Step: 50 / 138 Loss: 115.84095001220703 Tokens per Sec: 15215.28853705327
Epoch Step: 55 / 138 Loss: 10.810966491699219 Tokens per Sec: 16092.583501687946
Epoch Step: 60 / 138 Loss: 6.972467422485352 Tokens per Sec: 16671.62953912001
Epoch Step: 65 / 138 Loss: 11.287123680114746 Tokens per Sec: 16071.110085931157
Epoch Step: 70 / 138 Loss: 6.955179691314697 Tokens per Sec: 15817.410027957994
Epoch Step: 75 / 138 Loss: 10.075448036193848 Tokens per Sec: 15413.284651032998
Epoch Step: 80 / 138 Loss: 6.831580638885498 Tokens per Sec: 16399.341120578934
Epoch Step: 85 / 138 Loss: 6.782588481903076 Tokens per Sec: 15492.019790556762
Epoch Step: 90 / 138 Loss: 10.592375755310059 Tokens per Sec: 15145.569242315223
Epoch Step: 95 / 138 Loss: 10.992569923400879 Tokens per Sec: 16272.49680196517
Epoch Step: 100 / 138 Loss: 5.796411514282227 Tokens per Sec: 17341.64982292488
Epoch Step: 105 / 138 Loss: 10.833431243896484 Tokens per Sec: 13894.134486059507
Epoch Step: 110 / 138 Loss: 7.3858256340026855 Tokens per Sec: 15453.677255472805
Epoch Step: 115 / 138 Loss: 6.942989826202393 Tokens per Sec: 14907.125341914267
Epoch Step: 120 / 138 Loss: 9.996574401855469 Tokens per Sec: 16694.817652506976
Epoch Step: 125 / 138 Loss: 10.36329174041748 Tokens per Sec: 15741.058235511957
Epoch Step: 130 / 138 Loss: 9.848315238952637 Tokens per Sec: 15098.761058580443
Epoch Step: 135 / 138 Loss: 6.612796783447266 Tokens per Sec: 14840.28490297115
Epoch ended with duration 0:00:40.422547
Train perplexity: 1.251685025259063
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.760826
Validation perplexity: 1.2934277904091147
Model saved checkpoint!
Epoch 121 / 1000
Epoch Step: 5 / 138 Loss: 8.305387496948242 Tokens per Sec: 15857.218096405486
Epoch Step: 10 / 138 Loss: 7.735308647155762 Tokens per Sec: 15922.988265900094
Epoch Step: 15 / 138 Loss: 57.169864654541016 Tokens per Sec: 16320.993789061287
Epoch Step: 20 / 138 Loss: 5.715283393859863 Tokens per Sec: 15751.918470172765
Epoch Step: 25 / 138 Loss: 7.292776584625244 Tokens per Sec: 17187.273597936222
Epoch Step: 30 / 138 Loss: 14.911334991455078 Tokens per Sec: 15849.523354558447
Epoch Step: 35 / 138 Loss: 13.560199737548828 Tokens per Sec: 14952.443982841818
Epoch Step: 40 / 138 Loss: 8.590042114257812 Tokens per Sec: 16002.101115299765
Epoch Step: 45 / 138 Loss: 10.91354751586914 Tokens per Sec: 16346.082169495543
Epoch Step: 50 / 138 Loss: 10.668021202087402 Tokens per Sec: 16247.672542875218
Epoch Step: 55 / 138 Loss: 4.800668239593506 Tokens per Sec: 15797.206580674077
Epoch Step: 60 / 138 Loss: 11.635965347290039 Tokens per Sec: 15976.968272441318
Epoch Step: 65 / 138 Loss: 13.056007385253906 Tokens per Sec: 15076.001552968959
Epoch Step: 70 / 138 Loss: 6.694391250610352 Tokens per Sec: 15710.018839261214
Epoch Step: 75 / 138 Loss: 9.008631706237793 Tokens per Sec: 15398.742307050721
Epoch Step: 80 / 138 Loss: 8.571287155151367 Tokens per Sec: 17418.70348062205
Epoch Step: 85 / 138 Loss: 7.712742805480957 Tokens per Sec: 17648.937829939263
Epoch Step: 90 / 138 Loss: 7.527749538421631 Tokens per Sec: 16914.6743795981
Epoch Step: 95 / 138 Loss: 8.464629173278809 Tokens per Sec: 15871.581525109726
Epoch Step: 100 / 138 Loss: 5.439917087554932 Tokens per Sec: 16558.641618981364
Epoch Step: 105 / 138 Loss: 9.94615650177002 Tokens per Sec: 15387.579334817867
Epoch Step: 110 / 138 Loss: 7.921902179718018 Tokens per Sec: 13453.278476615866
Epoch Step: 115 / 138 Loss: 9.12490177154541 Tokens per Sec: 14922.57109065866
Epoch Step: 120 / 138 Loss: 11.765605926513672 Tokens per Sec: 15619.617807984097
Epoch Step: 125 / 138 Loss: 8.328109741210938 Tokens per Sec: 14617.38483392312
Epoch Step: 130 / 138 Loss: 7.768280506134033 Tokens per Sec: 14814.768764656359
Epoch Step: 135 / 138 Loss: 8.29361629486084 Tokens per Sec: 15695.997590270428
Epoch ended with duration 0:00:40.361599
Train perplexity: 1.1916706867613978
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.782763
Validation perplexity: 1.319431585626495
Epoch 122 / 1000
Epoch Step: 5 / 138 Loss: 13.79957389831543 Tokens per Sec: 15563.12743674147
Epoch Step: 10 / 138 Loss: 13.323620796203613 Tokens per Sec: 16120.01429493211
Epoch Step: 15 / 138 Loss: 11.523848533630371 Tokens per Sec: 16527.345343935733
Epoch Step: 20 / 138 Loss: 9.469733238220215 Tokens per Sec: 16667.09105122316
Epoch Step: 25 / 138 Loss: 10.527486801147461 Tokens per Sec: 15487.198692085116
Epoch Step: 30 / 138 Loss: 112.36438751220703 Tokens per Sec: 16043.092355541396
Epoch Step: 35 / 138 Loss: 25.70950698852539 Tokens per Sec: 18993.454924202833
Epoch Step: 40 / 138 Loss: 7.516237258911133 Tokens per Sec: 14543.782434079729
Epoch Step: 45 / 138 Loss: 62.928009033203125 Tokens per Sec: 15662.306032454686
Epoch Step: 50 / 138 Loss: 9.184539794921875 Tokens per Sec: 15905.636460428505
Epoch Step: 55 / 138 Loss: 10.246902465820312 Tokens per Sec: 15544.44146152718
Epoch Step: 60 / 138 Loss: 14.83147144317627 Tokens per Sec: 16363.475424731994
Epoch Step: 65 / 138 Loss: 7.11304235458374 Tokens per Sec: 16291.118040577992
Epoch Step: 70 / 138 Loss: 11.460193634033203 Tokens per Sec: 15657.753594150847
Epoch Step: 75 / 138 Loss: 9.88358211517334 Tokens per Sec: 15492.884035826728
Epoch Step: 80 / 138 Loss: 16.568592071533203 Tokens per Sec: 16672.0350417317
Epoch Step: 85 / 138 Loss: 10.332182884216309 Tokens per Sec: 17352.444923127983
Epoch Step: 90 / 138 Loss: 11.007990837097168 Tokens per Sec: 15055.71681191185
Epoch Step: 95 / 138 Loss: 6.169409275054932 Tokens per Sec: 15563.801344063973
Epoch Step: 100 / 138 Loss: 8.080366134643555 Tokens per Sec: 15361.110612101493
Epoch Step: 105 / 138 Loss: 8.48327350616455 Tokens per Sec: 15398.518825047384
Epoch Step: 110 / 138 Loss: 12.8684663772583 Tokens per Sec: 15601.59510976179
Epoch Step: 115 / 138 Loss: 10.951883316040039 Tokens per Sec: 14698.148332429168
Epoch Step: 120 / 138 Loss: 8.419550895690918 Tokens per Sec: 14587.185109227554
Epoch Step: 125 / 138 Loss: 6.658121585845947 Tokens per Sec: 15737.49351287119
Epoch Step: 130 / 138 Loss: 8.754504203796387 Tokens per Sec: 14772.560288607006
Epoch Step: 135 / 138 Loss: 5.984767913818359 Tokens per Sec: 17246.222558585832
Epoch ended with duration 0:00:40.200507
Train perplexity: 1.2791339687549699
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.742660
Validation perplexity: 1.2132467647201188
Epoch 123 / 1000
Epoch Step: 5 / 138 Loss: 14.009293556213379 Tokens per Sec: 15543.798362037132
Epoch Step: 10 / 138 Loss: 8.975240707397461 Tokens per Sec: 16307.576649088782
Epoch Step: 15 / 138 Loss: 9.303506851196289 Tokens per Sec: 15602.643807265646
Epoch Step: 20 / 138 Loss: 11.964454650878906 Tokens per Sec: 15203.95718917205
Epoch Step: 25 / 138 Loss: 12.799164772033691 Tokens per Sec: 15580.192282241984
Epoch Step: 30 / 138 Loss: 9.665769577026367 Tokens per Sec: 14859.271923097103
Epoch Step: 35 / 138 Loss: 9.65483283996582 Tokens per Sec: 16103.960492948132
Epoch Step: 40 / 138 Loss: 10.908202171325684 Tokens per Sec: 15332.742257752841
Epoch Step: 45 / 138 Loss: 5.659651756286621 Tokens per Sec: 15788.075014563858
Epoch Step: 50 / 138 Loss: 7.100127696990967 Tokens per Sec: 17109.40285395779
Epoch Step: 55 / 138 Loss: 11.547168731689453 Tokens per Sec: 15696.544016922346
Epoch Step: 60 / 138 Loss: 13.654298782348633 Tokens per Sec: 16038.702037498975
Epoch Step: 65 / 138 Loss: 67.52481842041016 Tokens per Sec: 16627.60240531287
Epoch Step: 70 / 138 Loss: 11.036543846130371 Tokens per Sec: 16271.790404044472
Epoch Step: 75 / 138 Loss: 17.949935913085938 Tokens per Sec: 15801.849736879863
Epoch Step: 80 / 138 Loss: 8.608678817749023 Tokens per Sec: 16449.13662638334
Epoch Step: 85 / 138 Loss: 5.60782527923584 Tokens per Sec: 16446.92882833901
Epoch Step: 90 / 138 Loss: 5.744289398193359 Tokens per Sec: 17062.8330487131
Epoch Step: 95 / 138 Loss: 5.8588643074035645 Tokens per Sec: 16426.82932389948
Epoch Step: 100 / 138 Loss: 40.24116134643555 Tokens per Sec: 18044.331670869942
Epoch Step: 105 / 138 Loss: 15.864434242248535 Tokens per Sec: 15573.731026118086
Epoch Step: 110 / 138 Loss: 10.2067289352417 Tokens per Sec: 16093.612699927435
Epoch Step: 115 / 138 Loss: 7.482861042022705 Tokens per Sec: 13952.476736204875
Epoch Step: 120 / 138 Loss: 9.665987968444824 Tokens per Sec: 15398.030612313662
Epoch Step: 125 / 138 Loss: 8.194108009338379 Tokens per Sec: 15163.673413922026
Epoch Step: 130 / 138 Loss: 10.783129692077637 Tokens per Sec: 15770.993081809023
Epoch Step: 135 / 138 Loss: 6.479300498962402 Tokens per Sec: 15412.116803609111
Epoch ended with duration 0:00:40.078198
Train perplexity: 1.207452762910999
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.756660
Validation perplexity: 1.248876546441737
Epoch 124 / 1000
Epoch Step: 5 / 138 Loss: 48.23786926269531 Tokens per Sec: 15338.141809978215
Epoch Step: 10 / 138 Loss: 93.5288314819336 Tokens per Sec: 15780.812105946432
Epoch Step: 15 / 138 Loss: 4.862954139709473 Tokens per Sec: 15268.780192392362
Epoch Step: 20 / 138 Loss: 9.02072525024414 Tokens per Sec: 16009.233928489819
Epoch Step: 25 / 138 Loss: 11.281099319458008 Tokens per Sec: 16230.207226016899
Epoch Step: 30 / 138 Loss: 12.289867401123047 Tokens per Sec: 16724.21499512574
Epoch Step: 35 / 138 Loss: 11.060450553894043 Tokens per Sec: 16379.339995916147
Epoch Step: 40 / 138 Loss: 10.713364601135254 Tokens per Sec: 15859.718164539689
Epoch Step: 45 / 138 Loss: 106.11519622802734 Tokens per Sec: 14886.599852736013
Epoch Step: 50 / 138 Loss: 18.4213924407959 Tokens per Sec: 15805.435120889491
Epoch Step: 55 / 138 Loss: 17.1297607421875 Tokens per Sec: 16340.481371819573
Epoch Step: 60 / 138 Loss: 11.889747619628906 Tokens per Sec: 17491.63435456172
Epoch Step: 65 / 138 Loss: 23.89853286743164 Tokens per Sec: 17613.292038253945
Epoch Step: 70 / 138 Loss: 13.482759475708008 Tokens per Sec: 16619.14010890008
Epoch Step: 75 / 138 Loss: 10.345175743103027 Tokens per Sec: 16564.319011878826
Epoch Step: 80 / 138 Loss: 8.157735824584961 Tokens per Sec: 15846.152460783402
Epoch Step: 85 / 138 Loss: 10.118468284606934 Tokens per Sec: 15874.739460434064
Epoch Step: 90 / 138 Loss: 12.375027656555176 Tokens per Sec: 15554.658174485481
Epoch Step: 95 / 138 Loss: 13.466887474060059 Tokens per Sec: 15714.947255702255
Epoch Step: 100 / 138 Loss: 13.252151489257812 Tokens per Sec: 16514.939916098803
Epoch Step: 105 / 138 Loss: 10.11207103729248 Tokens per Sec: 14855.785765283832
Epoch Step: 110 / 138 Loss: 7.79929256439209 Tokens per Sec: 16230.767569739051
Epoch Step: 115 / 138 Loss: 6.966738224029541 Tokens per Sec: 14487.091615894396
Epoch Step: 120 / 138 Loss: 12.224002838134766 Tokens per Sec: 14505.457655930559
Epoch Step: 125 / 138 Loss: 7.553239822387695 Tokens per Sec: 13795.721410695163
Epoch Step: 130 / 138 Loss: 14.51729679107666 Tokens per Sec: 16211.291284982954
Epoch Step: 135 / 138 Loss: 10.792771339416504 Tokens per Sec: 15335.339653552732
Epoch ended with duration 0:00:40.378366
Train perplexity: 1.3395153436514249
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.752992
Validation perplexity: 1.2662143433988093
Epoch 125 / 1000
Epoch Step: 5 / 138 Loss: 8.638542175292969 Tokens per Sec: 15262.203288723376
Epoch Step: 10 / 138 Loss: 11.432400703430176 Tokens per Sec: 15421.955506321525
Epoch Step: 15 / 138 Loss: 9.709830284118652 Tokens per Sec: 18332.48892264566
Epoch Step: 20 / 138 Loss: 22.599609375 Tokens per Sec: 17803.83692569435
Epoch Step: 25 / 138 Loss: 10.820300102233887 Tokens per Sec: 14978.402861253353
Epoch Step: 30 / 138 Loss: 8.865446090698242 Tokens per Sec: 16328.36198035032
Epoch Step: 35 / 138 Loss: 10.602270126342773 Tokens per Sec: 16157.644865193224
Epoch Step: 40 / 138 Loss: 10.325594902038574 Tokens per Sec: 16485.457459003046
Epoch Step: 45 / 138 Loss: 9.135872840881348 Tokens per Sec: 14675.475618985765
Epoch Step: 50 / 138 Loss: 10.178775787353516 Tokens per Sec: 17103.816166908036
Epoch Step: 55 / 138 Loss: 7.752517223358154 Tokens per Sec: 15517.455159209152
Epoch Step: 60 / 138 Loss: 8.691710472106934 Tokens per Sec: 15633.659479711698
Epoch Step: 65 / 138 Loss: 10.80969524383545 Tokens per Sec: 17185.44414826961
Epoch Step: 70 / 138 Loss: 4.2053937911987305 Tokens per Sec: 16915.62001015227
Epoch Step: 75 / 138 Loss: 10.211386680603027 Tokens per Sec: 15168.605316085188
Epoch Step: 80 / 138 Loss: 10.433801651000977 Tokens per Sec: 15151.354086117146
Epoch Step: 85 / 138 Loss: 4.673193454742432 Tokens per Sec: 15938.342166741526
Epoch Step: 90 / 138 Loss: 9.66407299041748 Tokens per Sec: 15692.380253885189
Epoch Step: 95 / 138 Loss: 7.785738468170166 Tokens per Sec: 16847.044509917363
Epoch Step: 100 / 138 Loss: 54.27284240722656 Tokens per Sec: 14588.59551195414
Epoch Step: 105 / 138 Loss: 12.733931541442871 Tokens per Sec: 15186.50374139202
Epoch Step: 110 / 138 Loss: 11.462177276611328 Tokens per Sec: 14759.718739661368
Epoch Step: 115 / 138 Loss: 6.808898448944092 Tokens per Sec: 17138.376932876374
Epoch Step: 120 / 138 Loss: 8.143561363220215 Tokens per Sec: 15693.042603714404
Epoch Step: 125 / 138 Loss: 6.842163562774658 Tokens per Sec: 14788.62092587384
Epoch Step: 130 / 138 Loss: 8.787989616394043 Tokens per Sec: 14815.282457960951
Epoch Step: 135 / 138 Loss: 9.759420394897461 Tokens per Sec: 13873.95213347755
Epoch ended with duration 0:00:40.510029
Train perplexity: 1.2180451199456064
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.772402
Validation perplexity: 1.3563054250146442
Model saved checkpoint!
Epoch 126 / 1000
Epoch Step: 5 / 138 Loss: 6.545014381408691 Tokens per Sec: 16089.504603244191
Epoch Step: 10 / 138 Loss: 12.132365226745605 Tokens per Sec: 16084.86377772169
Epoch Step: 15 / 138 Loss: 8.546133995056152 Tokens per Sec: 15571.253359712973
Epoch Step: 20 / 138 Loss: 6.129485607147217 Tokens per Sec: 16888.60685959375
Epoch Step: 25 / 138 Loss: 4.725407600402832 Tokens per Sec: 16274.908773382102
Epoch Step: 30 / 138 Loss: 8.892247200012207 Tokens per Sec: 16411.838094401013
Epoch Step: 35 / 138 Loss: 13.115896224975586 Tokens per Sec: 16126.84227687063
Epoch Step: 40 / 138 Loss: 5.08204460144043 Tokens per Sec: 16149.266812518808
Epoch Step: 45 / 138 Loss: 4.784846782684326 Tokens per Sec: 14831.598044507835
Epoch Step: 50 / 138 Loss: 5.592525005340576 Tokens per Sec: 16100.507853830604
Epoch Step: 55 / 138 Loss: 11.968036651611328 Tokens per Sec: 16420.87338776174
Epoch Step: 60 / 138 Loss: 7.844236373901367 Tokens per Sec: 15751.177639804815
Epoch Step: 65 / 138 Loss: 10.030858993530273 Tokens per Sec: 15544.53729206682
Epoch Step: 70 / 138 Loss: 6.613005638122559 Tokens per Sec: 15914.184514549257
Epoch Step: 75 / 138 Loss: 6.046903133392334 Tokens per Sec: 15977.291276906582
Epoch Step: 80 / 138 Loss: 10.529088020324707 Tokens per Sec: 17157.4346244173
Epoch Step: 85 / 138 Loss: 106.12594604492188 Tokens per Sec: 16115.62399066253
Epoch Step: 90 / 138 Loss: 8.464065551757812 Tokens per Sec: 15944.985754036368
Epoch Step: 95 / 138 Loss: 9.923714637756348 Tokens per Sec: 15284.6094647544
Epoch Step: 100 / 138 Loss: 12.324580192565918 Tokens per Sec: 14950.99131198647
Epoch Step: 105 / 138 Loss: 7.956986427307129 Tokens per Sec: 15758.680140902557
Epoch Step: 110 / 138 Loss: 9.955549240112305 Tokens per Sec: 14672.127500226103
Epoch Step: 115 / 138 Loss: 75.17363739013672 Tokens per Sec: 14357.179332868882
Epoch Step: 120 / 138 Loss: 10.192490577697754 Tokens per Sec: 15133.959650235587
Epoch Step: 125 / 138 Loss: 10.376753807067871 Tokens per Sec: 16452.89284300443
Epoch Step: 130 / 138 Loss: 10.02338981628418 Tokens per Sec: 15331.323426433832
Epoch Step: 135 / 138 Loss: 9.067537307739258 Tokens per Sec: 14172.962638696523
Epoch ended with duration 0:00:40.527366
Train perplexity: 1.2321520834743402
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.766597
Validation perplexity: 1.2152672289079853
Epoch 127 / 1000
Epoch Step: 5 / 138 Loss: 5.555905818939209 Tokens per Sec: 15963.929781122686
Epoch Step: 10 / 138 Loss: 5.258208274841309 Tokens per Sec: 15762.703782773375
Epoch Step: 15 / 138 Loss: 5.754210472106934 Tokens per Sec: 16341.851836536345
Epoch Step: 20 / 138 Loss: 12.214306831359863 Tokens per Sec: 16811.487495803744
Epoch Step: 25 / 138 Loss: 14.340533256530762 Tokens per Sec: 14341.999460878707
Epoch Step: 30 / 138 Loss: 5.828352928161621 Tokens per Sec: 15378.538090570828
Epoch Step: 35 / 138 Loss: 5.5281171798706055 Tokens per Sec: 15817.33694379407
Epoch Step: 40 / 138 Loss: 10.697093963623047 Tokens per Sec: 14407.033410121232
Epoch Step: 45 / 138 Loss: 12.109745979309082 Tokens per Sec: 16273.986026970377
Epoch Step: 50 / 138 Loss: 9.912460327148438 Tokens per Sec: 17544.783884394375
Epoch Step: 55 / 138 Loss: 7.390496730804443 Tokens per Sec: 16694.423851177624
Epoch Step: 60 / 138 Loss: 8.533559799194336 Tokens per Sec: 15941.36503456988
Epoch Step: 65 / 138 Loss: 13.205680847167969 Tokens per Sec: 15866.191646301004
Epoch Step: 70 / 138 Loss: 7.844557285308838 Tokens per Sec: 15765.594519259923
Epoch Step: 75 / 138 Loss: 8.107646942138672 Tokens per Sec: 15837.561039546003
Epoch Step: 80 / 138 Loss: 9.630278587341309 Tokens per Sec: 16837.647731332618
Epoch Step: 85 / 138 Loss: 5.599504470825195 Tokens per Sec: 16052.147373849546
Epoch Step: 90 / 138 Loss: 6.362694263458252 Tokens per Sec: 16982.375005063852
Epoch Step: 95 / 138 Loss: 8.635919570922852 Tokens per Sec: 16040.87078314552
Epoch Step: 100 / 138 Loss: 11.17978286743164 Tokens per Sec: 16167.393640358105
Epoch Step: 105 / 138 Loss: 9.581087112426758 Tokens per Sec: 14900.692934639965
Epoch Step: 110 / 138 Loss: 6.982700347900391 Tokens per Sec: 15846.778248747712
Epoch Step: 115 / 138 Loss: 9.012513160705566 Tokens per Sec: 14835.215021887458
Epoch Step: 120 / 138 Loss: 8.418359756469727 Tokens per Sec: 15611.876593631407
Epoch Step: 125 / 138 Loss: 59.88058090209961 Tokens per Sec: 15873.843847714988
Epoch Step: 130 / 138 Loss: 9.954431533813477 Tokens per Sec: 15407.23950262577
Epoch Step: 135 / 138 Loss: 7.575324535369873 Tokens per Sec: 14869.181704940134
Epoch ended with duration 0:00:40.278924
Train perplexity: 1.1939899038548392
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { result . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.669810
Validation perplexity: 1.2299750712385982
Epoch 128 / 1000
Epoch Step: 5 / 138 Loss: 12.849838256835938 Tokens per Sec: 16112.630872795035
Epoch Step: 10 / 138 Loss: 9.561908721923828 Tokens per Sec: 16492.590505398322
Epoch Step: 15 / 138 Loss: 7.051361560821533 Tokens per Sec: 15431.044549915574
Epoch Step: 20 / 138 Loss: 9.31877613067627 Tokens per Sec: 15658.915644157873
Epoch Step: 25 / 138 Loss: 9.788185119628906 Tokens per Sec: 16686.281220381996
Epoch Step: 30 / 138 Loss: 3.5614569187164307 Tokens per Sec: 15091.2849722009
Epoch Step: 35 / 138 Loss: 10.394336700439453 Tokens per Sec: 16468.867985246394
Epoch Step: 40 / 138 Loss: 10.984321594238281 Tokens per Sec: 15169.493959294125
Epoch Step: 45 / 138 Loss: 11.63019847869873 Tokens per Sec: 15853.888080025778
Epoch Step: 50 / 138 Loss: 8.960033416748047 Tokens per Sec: 14491.587910741435
Epoch Step: 55 / 138 Loss: 7.752232074737549 Tokens per Sec: 16640.840151222106
Epoch Step: 60 / 138 Loss: 8.036285400390625 Tokens per Sec: 16751.994008258942
Epoch Step: 65 / 138 Loss: 7.895966529846191 Tokens per Sec: 16623.002290421515
Epoch Step: 70 / 138 Loss: 7.167754173278809 Tokens per Sec: 16459.952764046662
Epoch Step: 75 / 138 Loss: 12.259690284729004 Tokens per Sec: 14961.811752511147
Epoch Step: 80 / 138 Loss: 12.246251106262207 Tokens per Sec: 16806.183987987086
Epoch Step: 85 / 138 Loss: 6.35994291305542 Tokens per Sec: 15753.89889263989
Epoch Step: 90 / 138 Loss: 96.7644271850586 Tokens per Sec: 15308.55759000897
Epoch Step: 95 / 138 Loss: 9.479373931884766 Tokens per Sec: 16363.717921680773
Epoch Step: 100 / 138 Loss: 5.648923397064209 Tokens per Sec: 16583.564397143004
Epoch Step: 105 / 138 Loss: 10.783698081970215 Tokens per Sec: 13492.759048577464
Epoch Step: 110 / 138 Loss: 8.97857666015625 Tokens per Sec: 15733.116230918
Epoch Step: 115 / 138 Loss: 9.066534042358398 Tokens per Sec: 16613.98755687837
Epoch Step: 120 / 138 Loss: 8.832069396972656 Tokens per Sec: 16299.970183225854
Epoch Step: 125 / 138 Loss: 7.116491317749023 Tokens per Sec: 15727.558928935394
Epoch Step: 130 / 138 Loss: 7.260189533233643 Tokens per Sec: 14602.272521276785
Epoch Step: 135 / 138 Loss: 9.34549331665039 Tokens per Sec: 15372.264301869782
Epoch ended with duration 0:00:40.384622
Train perplexity: 1.1907808745362516
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.757142
Validation perplexity: 1.1682818734433975
Model saved best_on_validation!
Epoch 129 / 1000
Epoch Step: 5 / 138 Loss: 9.840410232543945 Tokens per Sec: 16042.21947984831
Epoch Step: 10 / 138 Loss: 8.143590927124023 Tokens per Sec: 15787.84531375359
Epoch Step: 15 / 138 Loss: 5.386509418487549 Tokens per Sec: 16848.051403673122
Epoch Step: 20 / 138 Loss: 6.195372104644775 Tokens per Sec: 16379.689945716276
Epoch Step: 25 / 138 Loss: 10.697999000549316 Tokens per Sec: 16218.893160589385
Epoch Step: 30 / 138 Loss: 13.672138214111328 Tokens per Sec: 15204.524854385338
Epoch Step: 35 / 138 Loss: 13.202494621276855 Tokens per Sec: 16703.750234539988
Epoch Step: 40 / 138 Loss: 12.943075180053711 Tokens per Sec: 14210.261196104275
Epoch Step: 45 / 138 Loss: 8.44374942779541 Tokens per Sec: 16742.75662236155
Epoch Step: 50 / 138 Loss: 12.959626197814941 Tokens per Sec: 16006.84529390434
Epoch Step: 55 / 138 Loss: 19.07763671875 Tokens per Sec: 15791.254253661346
Epoch Step: 60 / 138 Loss: 82.9127426147461 Tokens per Sec: 17055.50726066131
Epoch Step: 65 / 138 Loss: 10.803668975830078 Tokens per Sec: 17978.93752059007
Epoch Step: 70 / 138 Loss: 10.3778657913208 Tokens per Sec: 16219.534684864098
Epoch Step: 75 / 138 Loss: 69.07220458984375 Tokens per Sec: 13998.837965998518
Epoch Step: 80 / 138 Loss: 6.607321262359619 Tokens per Sec: 16196.875307877235
Epoch Step: 85 / 138 Loss: 11.159697532653809 Tokens per Sec: 14550.350114763492
Epoch Step: 90 / 138 Loss: 7.925003528594971 Tokens per Sec: 17449.387859040413
Epoch Step: 95 / 138 Loss: 10.251913070678711 Tokens per Sec: 15786.15851281366
Epoch Step: 100 / 138 Loss: 6.9976606369018555 Tokens per Sec: 16295.843420818157
Epoch Step: 105 / 138 Loss: 8.078441619873047 Tokens per Sec: 15506.710371511
Epoch Step: 110 / 138 Loss: 8.524879455566406 Tokens per Sec: 15864.04016902616
Epoch Step: 115 / 138 Loss: 11.656770706176758 Tokens per Sec: 14981.850119065048
Epoch Step: 120 / 138 Loss: 39.06733703613281 Tokens per Sec: 14387.022687362793
Epoch Step: 125 / 138 Loss: 7.69183349609375 Tokens per Sec: 14637.22019242282
Epoch Step: 130 / 138 Loss: 7.970792293548584 Tokens per Sec: 13483.89045604654
Epoch Step: 135 / 138 Loss: 6.002064228057861 Tokens per Sec: 15307.989641619786
Epoch ended with duration 0:00:40.571640
Train perplexity: 1.29003586777537
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.767500
Validation perplexity: 1.4096405638736922
Epoch 130 / 1000
Epoch Step: 5 / 138 Loss: 8.3702974319458 Tokens per Sec: 17033.48385091375
Epoch Step: 10 / 138 Loss: 7.623867988586426 Tokens per Sec: 15439.098225813072
Epoch Step: 15 / 138 Loss: 7.34614372253418 Tokens per Sec: 16467.038656900917
Epoch Step: 20 / 138 Loss: 9.485298156738281 Tokens per Sec: 17857.554460525902
Epoch Step: 25 / 138 Loss: 6.6800432205200195 Tokens per Sec: 17097.764745740267
Epoch Step: 30 / 138 Loss: 9.630210876464844 Tokens per Sec: 16439.781223752274
Epoch Step: 35 / 138 Loss: 8.177858352661133 Tokens per Sec: 15723.493220968983
Epoch Step: 40 / 138 Loss: 14.080997467041016 Tokens per Sec: 15613.017546070269
Epoch Step: 45 / 138 Loss: 37.788997650146484 Tokens per Sec: 16140.06368573053
Epoch Step: 50 / 138 Loss: 8.165562629699707 Tokens per Sec: 15984.236103469324
Epoch Step: 55 / 138 Loss: 8.53382682800293 Tokens per Sec: 16511.98079913362
Epoch Step: 60 / 138 Loss: 5.301603317260742 Tokens per Sec: 15111.301410087648
Epoch Step: 65 / 138 Loss: 11.018714904785156 Tokens per Sec: 14033.460792547463
Epoch Step: 70 / 138 Loss: 8.739845275878906 Tokens per Sec: 15254.56387935533
Epoch Step: 75 / 138 Loss: 12.559093475341797 Tokens per Sec: 14080.406708298504
Epoch Step: 80 / 138 Loss: 7.604617595672607 Tokens per Sec: 15684.177376425658
Epoch Step: 85 / 138 Loss: 5.56279182434082 Tokens per Sec: 16134.039697440525
Epoch Step: 90 / 138 Loss: 12.611061096191406 Tokens per Sec: 16909.960641288024
Epoch Step: 95 / 138 Loss: 69.88683319091797 Tokens per Sec: 17726.0194891766
Epoch Step: 100 / 138 Loss: 57.597904205322266 Tokens per Sec: 16802.084120670286
Epoch Step: 105 / 138 Loss: 7.23972225189209 Tokens per Sec: 13448.753076284956
Epoch Step: 110 / 138 Loss: 75.31581115722656 Tokens per Sec: 16466.488482163502
Epoch Step: 115 / 138 Loss: 13.206718444824219 Tokens per Sec: 14537.495901481929
Epoch Step: 120 / 138 Loss: 10.81026554107666 Tokens per Sec: 14908.756882121375
Epoch Step: 125 / 138 Loss: 8.522500991821289 Tokens per Sec: 15300.93113051675
Epoch Step: 130 / 138 Loss: 9.614543914794922 Tokens per Sec: 15071.661248952085
Epoch Step: 135 / 138 Loss: 5.996649742126465 Tokens per Sec: 17435.018013945708
Epoch ended with duration 0:00:40.115233
Train perplexity: 1.2170365729372459
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.746063
Validation perplexity: 1.298088978355927
Model saved checkpoint!
Epoch 131 / 1000
Epoch Step: 5 / 138 Loss: 8.022072792053223 Tokens per Sec: 16389.334848206552
Epoch Step: 10 / 138 Loss: 13.702497482299805 Tokens per Sec: 15224.329889098157
Epoch Step: 15 / 138 Loss: 7.6024346351623535 Tokens per Sec: 15473.536061607974
Epoch Step: 20 / 138 Loss: 30.651002883911133 Tokens per Sec: 15435.165898975409
Epoch Step: 25 / 138 Loss: 86.82315826416016 Tokens per Sec: 15403.985154895478
Epoch Step: 30 / 138 Loss: 4.236843585968018 Tokens per Sec: 15584.313319908293
Epoch Step: 35 / 138 Loss: 113.97354125976562 Tokens per Sec: 16023.101491307301
Epoch Step: 40 / 138 Loss: 12.023958206176758 Tokens per Sec: 16579.28388789053
Epoch Step: 45 / 138 Loss: 10.38381290435791 Tokens per Sec: 14993.568727878004
Epoch Step: 50 / 138 Loss: 10.031132698059082 Tokens per Sec: 15536.304950851743
Epoch Step: 55 / 138 Loss: 5.928508281707764 Tokens per Sec: 16718.529563302505
Epoch Step: 60 / 138 Loss: 9.199738502502441 Tokens per Sec: 17077.582299497877
Epoch Step: 65 / 138 Loss: 8.926359176635742 Tokens per Sec: 15679.930302258608
Epoch Step: 70 / 138 Loss: 10.630435943603516 Tokens per Sec: 16813.379689450387
Epoch Step: 75 / 138 Loss: 8.021161079406738 Tokens per Sec: 16876.49256935966
Epoch Step: 80 / 138 Loss: 8.909608840942383 Tokens per Sec: 16493.183029070075
Epoch Step: 85 / 138 Loss: 75.15645599365234 Tokens per Sec: 18116.130746736435
Epoch Step: 90 / 138 Loss: 10.4190673828125 Tokens per Sec: 18532.299777075204
Epoch Step: 95 / 138 Loss: 89.22393035888672 Tokens per Sec: 16687.00359940425
Epoch Step: 100 / 138 Loss: 76.26742553710938 Tokens per Sec: 15666.39616549365
Epoch Step: 105 / 138 Loss: 11.0025053024292 Tokens per Sec: 15264.271712116819
Epoch Step: 110 / 138 Loss: 9.290034294128418 Tokens per Sec: 15271.044204398864
Epoch Step: 115 / 138 Loss: 5.693036079406738 Tokens per Sec: 14112.141730508507
Epoch Step: 120 / 138 Loss: 12.027682304382324 Tokens per Sec: 15221.715753210441
Epoch Step: 125 / 138 Loss: 9.175201416015625 Tokens per Sec: 14059.466511084805
Epoch Step: 130 / 138 Loss: 9.564809799194336 Tokens per Sec: 14947.125802785728
Epoch Step: 135 / 138 Loss: 41.44625473022461 Tokens per Sec: 16214.691533699408
Epoch ended with duration 0:00:40.178007
Train perplexity: 1.2996053698760892
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; METHOD_5 ( STRING_1 , null ) . METHOD_5 ( ) . METHOD_6 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.786294
Validation perplexity: 1.367066536117666
Epoch 132 / 1000
Epoch Step: 5 / 138 Loss: 10.512495994567871 Tokens per Sec: 13899.61518636
Epoch Step: 10 / 138 Loss: 12.382789611816406 Tokens per Sec: 15482.466787873482
Epoch Step: 15 / 138 Loss: 13.406963348388672 Tokens per Sec: 16012.747335858545
Epoch Step: 20 / 138 Loss: 12.420646667480469 Tokens per Sec: 14300.30518478422
Epoch Step: 25 / 138 Loss: 4.972525596618652 Tokens per Sec: 17162.152784993006
Epoch Step: 30 / 138 Loss: 4.704777717590332 Tokens per Sec: 17068.094171746292
Epoch Step: 35 / 138 Loss: 8.88872241973877 Tokens per Sec: 17857.733255427265
Epoch Step: 40 / 138 Loss: 12.84959602355957 Tokens per Sec: 15531.575597632016
Epoch Step: 45 / 138 Loss: 11.516741752624512 Tokens per Sec: 17661.0123072662
Epoch Step: 50 / 138 Loss: 5.293345928192139 Tokens per Sec: 17685.82839344482
Epoch Step: 55 / 138 Loss: 7.042180061340332 Tokens per Sec: 17197.488828160134
Epoch Step: 60 / 138 Loss: 8.685026168823242 Tokens per Sec: 14666.426871768736
Epoch Step: 65 / 138 Loss: 18.116674423217773 Tokens per Sec: 15903.543639769907
Epoch Step: 70 / 138 Loss: 8.31676197052002 Tokens per Sec: 16227.227430307581
Epoch Step: 75 / 138 Loss: 5.321678161621094 Tokens per Sec: 15419.657799579503
Epoch Step: 80 / 138 Loss: 10.273622512817383 Tokens per Sec: 15450.104348761608
Epoch Step: 85 / 138 Loss: 6.707172393798828 Tokens per Sec: 16339.679293994219
Epoch Step: 90 / 138 Loss: 12.282031059265137 Tokens per Sec: 16368.327254796726
Epoch Step: 95 / 138 Loss: 11.791667938232422 Tokens per Sec: 16750.181269126588
Epoch Step: 100 / 138 Loss: 10.564600944519043 Tokens per Sec: 17508.93646209959
Epoch Step: 105 / 138 Loss: 10.556804656982422 Tokens per Sec: 14134.62380742428
Epoch Step: 110 / 138 Loss: 9.870251655578613 Tokens per Sec: 15087.153336688827
Epoch Step: 115 / 138 Loss: 9.478517532348633 Tokens per Sec: 15592.125334287344
Epoch Step: 120 / 138 Loss: 70.95295715332031 Tokens per Sec: 15317.479177660614
Epoch Step: 125 / 138 Loss: 14.674609184265137 Tokens per Sec: 14387.657491249744
Epoch Step: 130 / 138 Loss: 73.39739990234375 Tokens per Sec: 16047.316767114273
Epoch Step: 135 / 138 Loss: 7.5705060958862305 Tokens per Sec: 16399.246068704706
Epoch ended with duration 0:00:40.120692
Train perplexity: 1.224478135279795
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.775496
Validation perplexity: 1.4995162365864807
Epoch 133 / 1000
Epoch Step: 5 / 138 Loss: 8.575783729553223 Tokens per Sec: 15886.194594520715
Epoch Step: 10 / 138 Loss: 8.996000289916992 Tokens per Sec: 18266.94449011491
Epoch Step: 15 / 138 Loss: 7.942173480987549 Tokens per Sec: 17330.896078659356
Epoch Step: 20 / 138 Loss: 6.903125762939453 Tokens per Sec: 17494.442271796568
Epoch Step: 25 / 138 Loss: 3.547149896621704 Tokens per Sec: 16587.44501397396
Epoch Step: 30 / 138 Loss: 8.978376388549805 Tokens per Sec: 15684.311224620998
Epoch Step: 35 / 138 Loss: 8.872775077819824 Tokens per Sec: 16146.498553644105
Epoch Step: 40 / 138 Loss: 10.075146675109863 Tokens per Sec: 15511.027170156784
Epoch Step: 45 / 138 Loss: 8.226384162902832 Tokens per Sec: 15887.156192346483
Epoch Step: 50 / 138 Loss: 10.108810424804688 Tokens per Sec: 15593.370553297886
Epoch Step: 55 / 138 Loss: 10.881291389465332 Tokens per Sec: 15314.025283093495
Epoch Step: 60 / 138 Loss: 8.977949142456055 Tokens per Sec: 16269.15671729023
Epoch Step: 65 / 138 Loss: 6.487258434295654 Tokens per Sec: 16137.343355011717
Epoch Step: 70 / 138 Loss: 6.0627264976501465 Tokens per Sec: 16219.088779021919
Epoch Step: 75 / 138 Loss: 8.75507640838623 Tokens per Sec: 16677.360440576835
Epoch Step: 80 / 138 Loss: 6.743955135345459 Tokens per Sec: 16262.769920463288
Epoch Step: 85 / 138 Loss: 5.649692535400391 Tokens per Sec: 17046.67126299106
Epoch Step: 90 / 138 Loss: 10.028721809387207 Tokens per Sec: 15744.20597471236
Epoch Step: 95 / 138 Loss: 7.52719259262085 Tokens per Sec: 14917.281997788197
Epoch Step: 100 / 138 Loss: 10.32230281829834 Tokens per Sec: 16926.400687246532
Epoch Step: 105 / 138 Loss: 8.223880767822266 Tokens per Sec: 14500.976225741977
Epoch Step: 110 / 138 Loss: 8.381789207458496 Tokens per Sec: 14912.065086504586
Epoch Step: 115 / 138 Loss: 10.891846656799316 Tokens per Sec: 16694.471161845417
Epoch Step: 120 / 138 Loss: 9.094642639160156 Tokens per Sec: 16201.693298306443
Epoch Step: 125 / 138 Loss: 8.303799629211426 Tokens per Sec: 14988.661509138925
Epoch Step: 130 / 138 Loss: 8.183669090270996 Tokens per Sec: 15860.976911301037
Epoch Step: 135 / 138 Loss: 8.692906379699707 Tokens per Sec: 15629.38071824218
Epoch ended with duration 0:00:39.691794
Train perplexity: 1.2102290523682662
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.731603
Validation perplexity: 1.1634153675365457
Model saved best_on_validation!
Epoch 134 / 1000
Epoch Step: 5 / 138 Loss: 5.339813709259033 Tokens per Sec: 15683.776866318147
Epoch Step: 10 / 138 Loss: 10.367735862731934 Tokens per Sec: 15022.915075911467
Epoch Step: 15 / 138 Loss: 8.60002326965332 Tokens per Sec: 16355.81555931964
Epoch Step: 20 / 138 Loss: 8.942940711975098 Tokens per Sec: 16068.380463176842
Epoch Step: 25 / 138 Loss: 7.666110992431641 Tokens per Sec: 15962.061780246335
Epoch Step: 30 / 138 Loss: 8.125259399414062 Tokens per Sec: 16082.325011759
Epoch Step: 35 / 138 Loss: 122.78162384033203 Tokens per Sec: 16260.680151844768
Epoch Step: 40 / 138 Loss: 5.250616073608398 Tokens per Sec: 16019.610983507253
Epoch Step: 45 / 138 Loss: 9.20083236694336 Tokens per Sec: 17056.164478223032
Epoch Step: 50 / 138 Loss: 3.609868288040161 Tokens per Sec: 16860.370634536062
Epoch Step: 55 / 138 Loss: 10.485145568847656 Tokens per Sec: 15388.914366485995
Epoch Step: 60 / 138 Loss: 11.464685440063477 Tokens per Sec: 16013.762529955
Epoch Step: 65 / 138 Loss: 7.793889045715332 Tokens per Sec: 15494.281168478201
Epoch Step: 70 / 138 Loss: 8.734602928161621 Tokens per Sec: 16312.51675975942
Epoch Step: 75 / 138 Loss: 5.588174343109131 Tokens per Sec: 16801.793940110096
Epoch Step: 80 / 138 Loss: 10.49985122680664 Tokens per Sec: 18630.90284853432
Epoch Step: 85 / 138 Loss: 97.11814880371094 Tokens per Sec: 18040.74006019304
Epoch Step: 90 / 138 Loss: 13.595108032226562 Tokens per Sec: 15413.55241689092
Epoch Step: 95 / 138 Loss: 11.52981948852539 Tokens per Sec: 15125.556041250587
Epoch Step: 100 / 138 Loss: 8.150996208190918 Tokens per Sec: 14856.566640260073
Epoch Step: 105 / 138 Loss: 6.782538890838623 Tokens per Sec: 15520.874692252324
Epoch Step: 110 / 138 Loss: 9.508686065673828 Tokens per Sec: 15399.444614636483
Epoch Step: 115 / 138 Loss: 12.408034324645996 Tokens per Sec: 15543.14224179167
Epoch Step: 120 / 138 Loss: 7.680629253387451 Tokens per Sec: 15258.669078933923
Epoch Step: 125 / 138 Loss: 7.84864616394043 Tokens per Sec: 15263.580488388323
Epoch Step: 130 / 138 Loss: 16.101137161254883 Tokens per Sec: 13688.002078444222
Epoch Step: 135 / 138 Loss: 10.391571998596191 Tokens per Sec: 15941.569320220238
Epoch ended with duration 0:00:40.221590
Train perplexity: 1.2446993439112326
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.760174
Validation perplexity: 1.2802448513806097
Epoch 135 / 1000
Epoch Step: 5 / 138 Loss: 11.062146186828613 Tokens per Sec: 14644.621609244346
Epoch Step: 10 / 138 Loss: 15.17254638671875 Tokens per Sec: 15941.29546767668
Epoch Step: 15 / 138 Loss: 7.4784321784973145 Tokens per Sec: 16057.68900855002
Epoch Step: 20 / 138 Loss: 9.659527778625488 Tokens per Sec: 17060.877435236605
Epoch Step: 25 / 138 Loss: 32.16242218017578 Tokens per Sec: 15124.873981656223
Epoch Step: 30 / 138 Loss: 4.615370273590088 Tokens per Sec: 15854.546910905688
Epoch Step: 35 / 138 Loss: 4.6033616065979 Tokens per Sec: 17421.24781715081
Epoch Step: 40 / 138 Loss: 7.386411666870117 Tokens per Sec: 17364.185508946313
Epoch Step: 45 / 138 Loss: 8.470976829528809 Tokens per Sec: 17512.257988991016
Epoch Step: 50 / 138 Loss: 7.075126647949219 Tokens per Sec: 16225.09160310316
Epoch Step: 55 / 138 Loss: 10.89924430847168 Tokens per Sec: 15274.931956290979
Epoch Step: 60 / 138 Loss: 14.658571243286133 Tokens per Sec: 14723.198816765702
Epoch Step: 65 / 138 Loss: 4.910035610198975 Tokens per Sec: 16066.931674231686
Epoch Step: 70 / 138 Loss: 45.123809814453125 Tokens per Sec: 16093.434985072166
Epoch Step: 75 / 138 Loss: 4.650732517242432 Tokens per Sec: 15214.635156838693
Epoch Step: 80 / 138 Loss: 13.392017364501953 Tokens per Sec: 15551.392473738684
Epoch Step: 85 / 138 Loss: 88.55765533447266 Tokens per Sec: 15768.618644162898
Epoch Step: 90 / 138 Loss: 8.816247940063477 Tokens per Sec: 16214.123360595138
Epoch Step: 95 / 138 Loss: 15.030567169189453 Tokens per Sec: 16893.862313177906
Epoch Step: 100 / 138 Loss: 7.022286891937256 Tokens per Sec: 17290.38696629898
Epoch Step: 105 / 138 Loss: 10.164192199707031 Tokens per Sec: 15031.283012389693
Epoch Step: 110 / 138 Loss: 6.779803276062012 Tokens per Sec: 13272.162300926762
Epoch Step: 115 / 138 Loss: 7.353114128112793 Tokens per Sec: 15585.429697387392
Epoch Step: 120 / 138 Loss: 10.986091613769531 Tokens per Sec: 15514.438938708328
Epoch Step: 125 / 138 Loss: 5.958992958068848 Tokens per Sec: 15344.36507224421
Epoch Step: 130 / 138 Loss: 9.351480484008789 Tokens per Sec: 14427.409536588373
Epoch Step: 135 / 138 Loss: 8.415875434875488 Tokens per Sec: 15321.370127733275
Epoch ended with duration 0:00:40.389569
Train perplexity: 1.2045256290911115
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.651046
Validation perplexity: 1.1656286819150252
Model saved checkpoint!
Epoch 136 / 1000
Epoch Step: 5 / 138 Loss: 4.140760898590088 Tokens per Sec: 15728.86981852699
Epoch Step: 10 / 138 Loss: 5.64879035949707 Tokens per Sec: 17669.494159303697
Epoch Step: 15 / 138 Loss: 10.572235107421875 Tokens per Sec: 15413.742838800697
Epoch Step: 20 / 138 Loss: 5.6704840660095215 Tokens per Sec: 16609.548036256878
Epoch Step: 25 / 138 Loss: 8.913554191589355 Tokens per Sec: 16143.183800512325
Epoch Step: 30 / 138 Loss: 11.938287734985352 Tokens per Sec: 16074.464292921637
Epoch Step: 35 / 138 Loss: 7.457452297210693 Tokens per Sec: 15971.635936238728
Epoch Step: 40 / 138 Loss: 10.600996971130371 Tokens per Sec: 16020.499802591183
Epoch Step: 45 / 138 Loss: 8.598544120788574 Tokens per Sec: 14939.270149476168
Epoch Step: 50 / 138 Loss: 7.300910949707031 Tokens per Sec: 16691.428952079066
Epoch Step: 55 / 138 Loss: 10.173087120056152 Tokens per Sec: 16348.66003693521
Epoch Step: 60 / 138 Loss: 13.84737777709961 Tokens per Sec: 16130.756743315851
Epoch Step: 65 / 138 Loss: 10.785538673400879 Tokens per Sec: 15993.637428964199
Epoch Step: 70 / 138 Loss: 14.756282806396484 Tokens per Sec: 16262.338762299703
Epoch Step: 75 / 138 Loss: 7.917395114898682 Tokens per Sec: 14664.719831105647
Epoch Step: 80 / 138 Loss: 8.149967193603516 Tokens per Sec: 16377.838668359398
Epoch Step: 85 / 138 Loss: 5.057491302490234 Tokens per Sec: 16204.923863707543
Epoch Step: 90 / 138 Loss: 8.423084259033203 Tokens per Sec: 15067.852398386482
Epoch Step: 95 / 138 Loss: 10.529643058776855 Tokens per Sec: 15595.35468714699
Epoch Step: 100 / 138 Loss: 8.884979248046875 Tokens per Sec: 15168.85857320761
Epoch Step: 105 / 138 Loss: 7.731454849243164 Tokens per Sec: 14795.242820091351
Epoch Step: 110 / 138 Loss: 5.684956073760986 Tokens per Sec: 16147.58385882174
Epoch Step: 115 / 138 Loss: 69.66767120361328 Tokens per Sec: 15926.340717163093
Epoch Step: 120 / 138 Loss: 8.497464179992676 Tokens per Sec: 15113.014470087766
Epoch Step: 125 / 138 Loss: 7.291396141052246 Tokens per Sec: 15616.65326207404
Epoch Step: 130 / 138 Loss: 9.434831619262695 Tokens per Sec: 13941.26049724571
Epoch Step: 135 / 138 Loss: 12.36345386505127 Tokens per Sec: 15607.177005598782
Epoch ended with duration 0:00:40.515721
Train perplexity: 1.2289959945243871
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.769314
Validation perplexity: 1.2414337116069243
Epoch 137 / 1000
Epoch Step: 5 / 138 Loss: 7.750877380371094 Tokens per Sec: 16892.462932040977
Epoch Step: 10 / 138 Loss: 4.064199447631836 Tokens per Sec: 15856.234197355976
Epoch Step: 15 / 138 Loss: 8.0151948928833 Tokens per Sec: 16995.60118663646
Epoch Step: 20 / 138 Loss: 11.6215181350708 Tokens per Sec: 14551.172098033752
Epoch Step: 25 / 138 Loss: 13.21474552154541 Tokens per Sec: 14812.433319371767
Epoch Step: 30 / 138 Loss: 8.886876106262207 Tokens per Sec: 16400.598147638146
Epoch Step: 35 / 138 Loss: 46.38538360595703 Tokens per Sec: 15927.037813085457
Epoch Step: 40 / 138 Loss: 4.559883117675781 Tokens per Sec: 16760.89818845463
Epoch Step: 45 / 138 Loss: 11.151931762695312 Tokens per Sec: 15623.034171996118
Epoch Step: 50 / 138 Loss: 5.030468463897705 Tokens per Sec: 16221.043024670209
Epoch Step: 55 / 138 Loss: 5.211681365966797 Tokens per Sec: 15421.29202101152
Epoch Step: 60 / 138 Loss: 7.278029441833496 Tokens per Sec: 17870.116820162508
Epoch Step: 65 / 138 Loss: 8.843262672424316 Tokens per Sec: 17891.183224403107
Epoch Step: 70 / 138 Loss: 11.437333106994629 Tokens per Sec: 15450.793352324805
Epoch Step: 75 / 138 Loss: 7.681961536407471 Tokens per Sec: 16824.964372016675
Epoch Step: 80 / 138 Loss: 111.0868911743164 Tokens per Sec: 15622.641685324988
Epoch Step: 85 / 138 Loss: 11.28729248046875 Tokens per Sec: 16019.385520149028
Epoch Step: 90 / 138 Loss: 10.437246322631836 Tokens per Sec: 16154.66722627503
Epoch Step: 95 / 138 Loss: 7.182936668395996 Tokens per Sec: 14899.57694037813
Epoch Step: 100 / 138 Loss: 83.59156799316406 Tokens per Sec: 16355.47843954225
Epoch Step: 105 / 138 Loss: 8.4631986618042 Tokens per Sec: 15231.496743215097
Epoch Step: 110 / 138 Loss: 7.08659553527832 Tokens per Sec: 14448.776687491965
Epoch Step: 115 / 138 Loss: 7.0688323974609375 Tokens per Sec: 15009.51893995781
Epoch Step: 120 / 138 Loss: 8.599383354187012 Tokens per Sec: 12901.787547506034
Epoch Step: 125 / 138 Loss: 5.439396381378174 Tokens per Sec: 15125.561175374494
Epoch Step: 130 / 138 Loss: 11.734757423400879 Tokens per Sec: 16178.067268974177
Epoch Step: 135 / 138 Loss: 7.2460150718688965 Tokens per Sec: 15643.351642323505
Epoch ended with duration 0:00:40.415490
Train perplexity: 1.1795227032130768
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.754750
Validation perplexity: 1.2108122267767738
Epoch 138 / 1000
Epoch Step: 5 / 138 Loss: 6.573339462280273 Tokens per Sec: 15629.671608975197
Epoch Step: 10 / 138 Loss: 13.080438613891602 Tokens per Sec: 16658.461383302118
Epoch Step: 15 / 138 Loss: 8.726511001586914 Tokens per Sec: 15641.368633666827
Epoch Step: 20 / 138 Loss: 8.078144073486328 Tokens per Sec: 17679.687334345206
Epoch Step: 25 / 138 Loss: 9.424694061279297 Tokens per Sec: 17601.679036722096
Epoch Step: 30 / 138 Loss: 9.07034969329834 Tokens per Sec: 16504.517288742336
Epoch Step: 35 / 138 Loss: 40.697845458984375 Tokens per Sec: 15032.50186839393
Epoch Step: 40 / 138 Loss: 38.3775749206543 Tokens per Sec: 15827.933064476558
Epoch Step: 45 / 138 Loss: 10.017433166503906 Tokens per Sec: 15147.861470157364
Epoch Step: 50 / 138 Loss: 7.305229187011719 Tokens per Sec: 16402.399785859005
Epoch Step: 55 / 138 Loss: 10.61306095123291 Tokens per Sec: 16379.68113876224
Epoch Step: 60 / 138 Loss: 65.82566833496094 Tokens per Sec: 15324.902660197367
Epoch Step: 65 / 138 Loss: 8.086568832397461 Tokens per Sec: 15397.953616500907
Epoch Step: 70 / 138 Loss: 8.519031524658203 Tokens per Sec: 16637.785639800062
Epoch Step: 75 / 138 Loss: 3.7831273078918457 Tokens per Sec: 16035.923012482634
Epoch Step: 80 / 138 Loss: 7.071863174438477 Tokens per Sec: 16237.204354145939
Epoch Step: 85 / 138 Loss: 6.93859338760376 Tokens per Sec: 15275.784767969679
Epoch Step: 90 / 138 Loss: 4.281117916107178 Tokens per Sec: 16254.739301092428
Epoch Step: 95 / 138 Loss: 7.476734161376953 Tokens per Sec: 15841.449130536901
Epoch Step: 100 / 138 Loss: 6.384657382965088 Tokens per Sec: 15379.17657961586
Epoch Step: 105 / 138 Loss: 9.600141525268555 Tokens per Sec: 15649.163391027292
Epoch Step: 110 / 138 Loss: 8.538742065429688 Tokens per Sec: 15860.64578326488
Epoch Step: 115 / 138 Loss: 6.460147380828857 Tokens per Sec: 15939.9137635248
Epoch Step: 120 / 138 Loss: 7.388378143310547 Tokens per Sec: 14210.789346674048
Epoch Step: 125 / 138 Loss: 39.8345947265625 Tokens per Sec: 16885.039961153765
Epoch Step: 130 / 138 Loss: 8.282227516174316 Tokens per Sec: 15337.554948357572
Epoch Step: 135 / 138 Loss: 8.217924118041992 Tokens per Sec: 14935.437086846343
Epoch ended with duration 0:00:40.208767
Train perplexity: 1.2295317339964769
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.750247
Validation perplexity: 1.2047349850673668
Epoch 139 / 1000
Epoch Step: 5 / 138 Loss: 10.709047317504883 Tokens per Sec: 15589.161744692128
Epoch Step: 10 / 138 Loss: 70.9432601928711 Tokens per Sec: 15121.178003715866
Epoch Step: 15 / 138 Loss: 9.162649154663086 Tokens per Sec: 15173.159361552123
Epoch Step: 20 / 138 Loss: 7.173398494720459 Tokens per Sec: 16240.912470557123
Epoch Step: 25 / 138 Loss: 9.854581832885742 Tokens per Sec: 16468.605925049847
Epoch Step: 30 / 138 Loss: 5.356236934661865 Tokens per Sec: 16642.936032605856
Epoch Step: 35 / 138 Loss: 11.335548400878906 Tokens per Sec: 16031.831039813183
Epoch Step: 40 / 138 Loss: 11.577052116394043 Tokens per Sec: 16051.820720776843
Epoch Step: 45 / 138 Loss: 7.127017498016357 Tokens per Sec: 16624.581186284417
Epoch Step: 50 / 138 Loss: 5.833884239196777 Tokens per Sec: 16450.4100305493
Epoch Step: 55 / 138 Loss: 9.305578231811523 Tokens per Sec: 16378.743412025819
Epoch Step: 60 / 138 Loss: 7.602203845977783 Tokens per Sec: 16204.312310975987
Epoch Step: 65 / 138 Loss: 10.778647422790527 Tokens per Sec: 14835.19338221759
Epoch Step: 70 / 138 Loss: 6.567539215087891 Tokens per Sec: 17059.72254730854
Epoch Step: 75 / 138 Loss: 5.398019790649414 Tokens per Sec: 16143.727812206853
Epoch Step: 80 / 138 Loss: 7.383939743041992 Tokens per Sec: 16554.104182220806
Epoch Step: 85 / 138 Loss: 10.180059432983398 Tokens per Sec: 18879.61905944605
Epoch Step: 90 / 138 Loss: 8.688613891601562 Tokens per Sec: 17643.263344946357
Epoch Step: 95 / 138 Loss: 8.790996551513672 Tokens per Sec: 16398.247028251302
Epoch Step: 100 / 138 Loss: 9.045453071594238 Tokens per Sec: 17683.73656591291
Epoch Step: 105 / 138 Loss: 14.510915756225586 Tokens per Sec: 14455.0755730438
Epoch Step: 110 / 138 Loss: 10.231745719909668 Tokens per Sec: 15290.985459402196
Epoch Step: 115 / 138 Loss: 7.78481388092041 Tokens per Sec: 14857.319458756263
Epoch Step: 120 / 138 Loss: 10.07837200164795 Tokens per Sec: 13794.569538744301
Epoch Step: 125 / 138 Loss: 8.143094062805176 Tokens per Sec: 14975.950108290224
Epoch Step: 130 / 138 Loss: 8.537798881530762 Tokens per Sec: 14984.970815229335
Epoch Step: 135 / 138 Loss: 8.3555908203125 Tokens per Sec: 14477.686348332754
Epoch ended with duration 0:00:40.179828
Train perplexity: 1.221525624082666
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.726778
Validation perplexity: 1.350197546680011
Epoch 140 / 1000
Epoch Step: 5 / 138 Loss: 5.527710437774658 Tokens per Sec: 15910.827533467587
Epoch Step: 10 / 138 Loss: 11.771856307983398 Tokens per Sec: 15239.001465551379
Epoch Step: 15 / 138 Loss: 85.43153381347656 Tokens per Sec: 16220.857219118574
Epoch Step: 20 / 138 Loss: 10.680737495422363 Tokens per Sec: 17168.748859212617
Epoch Step: 25 / 138 Loss: 12.583610534667969 Tokens per Sec: 14784.26855859574
Epoch Step: 30 / 138 Loss: 6.642893314361572 Tokens per Sec: 15339.004707365413
Epoch Step: 35 / 138 Loss: 13.47278881072998 Tokens per Sec: 15165.009225452544
Epoch Step: 40 / 138 Loss: 4.057538986206055 Tokens per Sec: 16650.596166161995
Epoch Step: 45 / 138 Loss: 6.7035651206970215 Tokens per Sec: 17446.84235496234
Epoch Step: 50 / 138 Loss: 6.3719282150268555 Tokens per Sec: 17754.552840060805
Epoch Step: 55 / 138 Loss: 5.138448715209961 Tokens per Sec: 17035.614377389753
Epoch Step: 60 / 138 Loss: 6.781007289886475 Tokens per Sec: 17010.25753656496
Epoch Step: 65 / 138 Loss: 4.823544502258301 Tokens per Sec: 16672.669121718052
Epoch Step: 70 / 138 Loss: 10.723861694335938 Tokens per Sec: 14910.974572783776
Epoch Step: 75 / 138 Loss: 12.426133155822754 Tokens per Sec: 16250.137782417834
Epoch Step: 80 / 138 Loss: 9.81949234008789 Tokens per Sec: 17385.4690705309
Epoch Step: 85 / 138 Loss: 8.472742080688477 Tokens per Sec: 15720.05266130583
Epoch Step: 90 / 138 Loss: 8.883354187011719 Tokens per Sec: 15525.69404652604
Epoch Step: 95 / 138 Loss: 7.090524673461914 Tokens per Sec: 17029.967473137905
Epoch Step: 100 / 138 Loss: 13.164212226867676 Tokens per Sec: 15772.270340927904
Epoch Step: 105 / 138 Loss: 12.247679710388184 Tokens per Sec: 14617.763641490856
Epoch Step: 110 / 138 Loss: 8.122889518737793 Tokens per Sec: 13945.437551950803
Epoch Step: 115 / 138 Loss: 6.890971660614014 Tokens per Sec: 14347.041510717172
Epoch Step: 120 / 138 Loss: 6.4142866134643555 Tokens per Sec: 15281.828959512548
Epoch Step: 125 / 138 Loss: 5.845730781555176 Tokens per Sec: 15698.961273958896
Epoch Step: 130 / 138 Loss: 13.908403396606445 Tokens per Sec: 15388.14142415328
Epoch Step: 135 / 138 Loss: 106.00350189208984 Tokens per Sec: 13944.82015792616
Epoch ended with duration 0:00:40.356581
Train perplexity: 1.2409515954163373
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , TYPE_5 { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) ) { try { METHOD_3 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.779072
Validation perplexity: 1.5844574174960742
Model saved checkpoint!
Epoch 141 / 1000
Epoch Step: 5 / 138 Loss: 5.948364734649658 Tokens per Sec: 16594.24776103846
Epoch Step: 10 / 138 Loss: 5.846725940704346 Tokens per Sec: 18409.001982521357
Epoch Step: 15 / 138 Loss: 6.455239772796631 Tokens per Sec: 17659.79978832256
Epoch Step: 20 / 138 Loss: 13.587379455566406 Tokens per Sec: 15726.692243206062
Epoch Step: 25 / 138 Loss: 4.264019966125488 Tokens per Sec: 14614.475832923916
Epoch Step: 30 / 138 Loss: 8.225259780883789 Tokens per Sec: 16798.37675674631
Epoch Step: 35 / 138 Loss: 9.01192569732666 Tokens per Sec: 16377.076085617351
Epoch Step: 40 / 138 Loss: 55.70083236694336 Tokens per Sec: 16295.969750307584
Epoch Step: 45 / 138 Loss: 5.7627410888671875 Tokens per Sec: 15421.29183644681
Epoch Step: 50 / 138 Loss: 7.797574996948242 Tokens per Sec: 16539.388442318876
Epoch Step: 55 / 138 Loss: 3.5808699131011963 Tokens per Sec: 17350.147792951953
Epoch Step: 60 / 138 Loss: 55.321998596191406 Tokens per Sec: 16531.27281289478
Epoch Step: 65 / 138 Loss: 35.06755065917969 Tokens per Sec: 16051.784986374034
Epoch Step: 70 / 138 Loss: 8.84610366821289 Tokens per Sec: 16810.628373461906
Epoch Step: 75 / 138 Loss: 8.579591751098633 Tokens per Sec: 15982.346303467357
Epoch Step: 80 / 138 Loss: 7.178727149963379 Tokens per Sec: 16089.755562315986
Epoch Step: 85 / 138 Loss: 15.558605194091797 Tokens per Sec: 15416.94395223123
Epoch Step: 90 / 138 Loss: 7.951909065246582 Tokens per Sec: 15091.265247845486
Epoch Step: 95 / 138 Loss: 6.504624366760254 Tokens per Sec: 16485.520846268777
Epoch Step: 100 / 138 Loss: 69.43238067626953 Tokens per Sec: 15638.978099634041
Epoch Step: 105 / 138 Loss: 5.671752452850342 Tokens per Sec: 15990.156640817364
Epoch Step: 110 / 138 Loss: 8.312652587890625 Tokens per Sec: 15912.811173219103
Epoch Step: 115 / 138 Loss: 7.911468505859375 Tokens per Sec: 16861.278595196727
Epoch Step: 120 / 138 Loss: 4.804525375366211 Tokens per Sec: 15891.998398685884
Epoch Step: 125 / 138 Loss: 9.854354858398438 Tokens per Sec: 15617.683058770366
Epoch Step: 130 / 138 Loss: 8.52932357788086 Tokens per Sec: 13606.793878187776
Epoch Step: 135 / 138 Loss: 9.849125862121582 Tokens per Sec: 14992.596004253746
Epoch ended with duration 0:00:39.727332
Train perplexity: 1.2002085766283128
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , int ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.779844
Validation perplexity: 1.4241535345422882
Epoch 142 / 1000
Epoch Step: 5 / 138 Loss: 3.4759459495544434 Tokens per Sec: 15670.229238305854
Epoch Step: 10 / 138 Loss: 4.3623480796813965 Tokens per Sec: 15119.9778803651
Epoch Step: 15 / 138 Loss: 7.724966526031494 Tokens per Sec: 16096.306180090585
Epoch Step: 20 / 138 Loss: 79.6998519897461 Tokens per Sec: 17381.520027462157
Epoch Step: 25 / 138 Loss: 5.972242832183838 Tokens per Sec: 17792.96501904736
Epoch Step: 30 / 138 Loss: 9.713754653930664 Tokens per Sec: 15203.833459387162
Epoch Step: 35 / 138 Loss: 7.2614336013793945 Tokens per Sec: 16605.20904086025
Epoch Step: 40 / 138 Loss: 5.248468399047852 Tokens per Sec: 15091.53091167002
Epoch Step: 45 / 138 Loss: 9.015462875366211 Tokens per Sec: 15654.892593148868
Epoch Step: 50 / 138 Loss: 6.2377190589904785 Tokens per Sec: 16210.80025002208
Epoch Step: 55 / 138 Loss: 7.349811553955078 Tokens per Sec: 16171.842864144575
Epoch Step: 60 / 138 Loss: 7.456160068511963 Tokens per Sec: 16845.324347235925
Epoch Step: 65 / 138 Loss: 156.6838836669922 Tokens per Sec: 15847.549450184695
Epoch Step: 70 / 138 Loss: 11.09493637084961 Tokens per Sec: 17009.369049300087
Epoch Step: 75 / 138 Loss: 7.882124900817871 Tokens per Sec: 16911.13804070049
Epoch Step: 80 / 138 Loss: 11.705904006958008 Tokens per Sec: 16997.72289369169
Epoch Step: 85 / 138 Loss: 12.159374237060547 Tokens per Sec: 16237.325915530202
Epoch Step: 90 / 138 Loss: 10.866517066955566 Tokens per Sec: 15962.608922601672
Epoch Step: 95 / 138 Loss: 13.201231002807617 Tokens per Sec: 15752.817387703948
Epoch Step: 100 / 138 Loss: 8.43492317199707 Tokens per Sec: 15801.692190289454
Epoch Step: 105 / 138 Loss: 7.494356155395508 Tokens per Sec: 13445.763370017728
Epoch Step: 110 / 138 Loss: 5.022861003875732 Tokens per Sec: 15696.329512268861
Epoch Step: 115 / 138 Loss: 9.137039184570312 Tokens per Sec: 15495.854374030832
Epoch Step: 120 / 138 Loss: 6.634892463684082 Tokens per Sec: 14821.449882296456
Epoch Step: 125 / 138 Loss: 6.509824275970459 Tokens per Sec: 14966.194306639954
Epoch Step: 130 / 138 Loss: 7.820472240447998 Tokens per Sec: 15209.927782668341
Epoch Step: 135 / 138 Loss: 6.589023590087891 Tokens per Sec: 16034.679904834491
Epoch ended with duration 0:00:40.152854
Train perplexity: 1.20958919875062
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , TYPE_5 { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) ) { try { result . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.747814
Validation perplexity: 1.403753432048971
Epoch 143 / 1000
Epoch Step: 5 / 138 Loss: 10.050386428833008 Tokens per Sec: 16007.864885948367
Epoch Step: 10 / 138 Loss: 5.194384574890137 Tokens per Sec: 15723.543673053153
Epoch Step: 15 / 138 Loss: 6.671908855438232 Tokens per Sec: 15501.923941383875
Epoch Step: 20 / 138 Loss: 12.209519386291504 Tokens per Sec: 16666.97879874026
Epoch Step: 25 / 138 Loss: 11.333196640014648 Tokens per Sec: 16202.277056216453
Epoch Step: 30 / 138 Loss: 3.1924235820770264 Tokens per Sec: 15883.755770993803
Epoch Step: 35 / 138 Loss: 8.457205772399902 Tokens per Sec: 17563.89969322891
Epoch Step: 40 / 138 Loss: 6.400539398193359 Tokens per Sec: 16084.707072064324
Epoch Step: 45 / 138 Loss: 6.622963905334473 Tokens per Sec: 16250.705064000917
Epoch Step: 50 / 138 Loss: 5.231717586517334 Tokens per Sec: 15952.202662912516
Epoch Step: 55 / 138 Loss: 8.09988021850586 Tokens per Sec: 15489.04572834624
Epoch Step: 60 / 138 Loss: 8.423043251037598 Tokens per Sec: 16127.019328433636
Epoch Step: 65 / 138 Loss: 10.872736930847168 Tokens per Sec: 15635.737715743542
Epoch Step: 70 / 138 Loss: 6.680271625518799 Tokens per Sec: 16343.584311754299
Epoch Step: 75 / 138 Loss: 7.7950968742370605 Tokens per Sec: 15852.558642576534
Epoch Step: 80 / 138 Loss: 5.862661361694336 Tokens per Sec: 15092.10385105519
Epoch Step: 85 / 138 Loss: 31.24970817565918 Tokens per Sec: 16317.810357791186
Epoch Step: 90 / 138 Loss: 8.363962173461914 Tokens per Sec: 16397.595735542473
Epoch Step: 95 / 138 Loss: 72.86225891113281 Tokens per Sec: 16005.6425680943
Epoch Step: 100 / 138 Loss: 9.080353736877441 Tokens per Sec: 15904.545705015937
Epoch Step: 105 / 138 Loss: 6.1725921630859375 Tokens per Sec: 15656.42951290934
Epoch Step: 110 / 138 Loss: 7.2629475593566895 Tokens per Sec: 14842.554765915456
Epoch Step: 115 / 138 Loss: 4.950254440307617 Tokens per Sec: 14629.7367672747
Epoch Step: 120 / 138 Loss: 8.141650199890137 Tokens per Sec: 13897.98191653603
Epoch Step: 125 / 138 Loss: 7.993334770202637 Tokens per Sec: 15008.24529352703
Epoch Step: 130 / 138 Loss: 94.23345184326172 Tokens per Sec: 14762.094148490407
Epoch Step: 135 / 138 Loss: 7.993964672088623 Tokens per Sec: 14859.317063240947
Epoch ended with duration 0:00:40.626911
Train perplexity: 1.1547505632354969
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , null ) ; } } }[0m
Epoch ended with duration 0:00:01.655755
Validation perplexity: 1.1676212216924047
Epoch 144 / 1000
Epoch Step: 5 / 138 Loss: 7.663059711456299 Tokens per Sec: 17803.028870216272
Epoch Step: 10 / 138 Loss: 8.269441604614258 Tokens per Sec: 14096.59003828486
Epoch Step: 15 / 138 Loss: 11.466378211975098 Tokens per Sec: 16510.06671058315
Epoch Step: 20 / 138 Loss: 4.556149005889893 Tokens per Sec: 15285.202950516448
Epoch Step: 25 / 138 Loss: 10.552605628967285 Tokens per Sec: 16216.84052966712
Epoch Step: 30 / 138 Loss: 5.416088581085205 Tokens per Sec: 15289.175108514291
Epoch Step: 35 / 138 Loss: 4.65721321105957 Tokens per Sec: 14958.30958399874
Epoch Step: 40 / 138 Loss: 14.269326210021973 Tokens per Sec: 15240.658973244359
Epoch Step: 45 / 138 Loss: 15.569043159484863 Tokens per Sec: 16991.840206241402
Epoch Step: 50 / 138 Loss: 197.14723205566406 Tokens per Sec: 17320.452785194055
Epoch Step: 55 / 138 Loss: 14.092296600341797 Tokens per Sec: 15209.538062663545
Epoch Step: 60 / 138 Loss: 7.571170330047607 Tokens per Sec: 15306.79364220952
Epoch Step: 65 / 138 Loss: 7.848246097564697 Tokens per Sec: 17191.343624678564
Epoch Step: 70 / 138 Loss: 8.378890991210938 Tokens per Sec: 15263.078823617565
Epoch Step: 75 / 138 Loss: 9.0946044921875 Tokens per Sec: 15078.027235262978
Epoch Step: 80 / 138 Loss: 7.776866912841797 Tokens per Sec: 16955.27357349535
Epoch Step: 85 / 138 Loss: 13.657532691955566 Tokens per Sec: 14438.223752151463
Epoch Step: 90 / 138 Loss: 10.381566047668457 Tokens per Sec: 17232.321088605226
Epoch Step: 95 / 138 Loss: 10.517333030700684 Tokens per Sec: 17013.87543549013
Epoch Step: 100 / 138 Loss: 6.046151638031006 Tokens per Sec: 17431.70574072204
Epoch Step: 105 / 138 Loss: 6.640063762664795 Tokens per Sec: 14564.723554180406
Epoch Step: 110 / 138 Loss: 8.673919677734375 Tokens per Sec: 16161.845778405119
Epoch Step: 115 / 138 Loss: 6.753585338592529 Tokens per Sec: 14982.995631460028
Epoch Step: 120 / 138 Loss: 6.544533729553223 Tokens per Sec: 14564.669511071976
Epoch Step: 125 / 138 Loss: 9.454987525939941 Tokens per Sec: 15004.289387907673
Epoch Step: 130 / 138 Loss: 7.967400550842285 Tokens per Sec: 13153.143641030503
Epoch Step: 135 / 138 Loss: 8.191912651062012 Tokens per Sec: 15256.907133530198
Epoch ended with duration 0:00:40.703211
Train perplexity: 1.2799493877665729
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.784725
Validation perplexity: 1.2410667169097427
Epoch 145 / 1000
Epoch Step: 5 / 138 Loss: 10.070352554321289 Tokens per Sec: 15808.732140935173
Epoch Step: 10 / 138 Loss: 8.759163856506348 Tokens per Sec: 17114.998488648293
Epoch Step: 15 / 138 Loss: 3.409140110015869 Tokens per Sec: 15682.54999284218
Epoch Step: 20 / 138 Loss: 9.452261924743652 Tokens per Sec: 15827.313982922911
Epoch Step: 25 / 138 Loss: 4.751441478729248 Tokens per Sec: 14969.446323614522
Epoch Step: 30 / 138 Loss: 7.378756999969482 Tokens per Sec: 16436.778470425266
Epoch Step: 35 / 138 Loss: 6.779543399810791 Tokens per Sec: 15962.088964329143
Epoch Step: 40 / 138 Loss: 7.513175010681152 Tokens per Sec: 15569.959806388699
Epoch Step: 45 / 138 Loss: 5.558444976806641 Tokens per Sec: 15112.196569609841
Epoch Step: 50 / 138 Loss: 3.8827223777770996 Tokens per Sec: 15889.630128602112
Epoch Step: 55 / 138 Loss: 5.060266494750977 Tokens per Sec: 16323.646833544008
Epoch Step: 60 / 138 Loss: 3.1810696125030518 Tokens per Sec: 17427.592917608774
Epoch Step: 65 / 138 Loss: 3.8825836181640625 Tokens per Sec: 17130.652770058354
Epoch Step: 70 / 138 Loss: 6.94953727722168 Tokens per Sec: 18074.376901568576
Epoch Step: 75 / 138 Loss: 6.527327537536621 Tokens per Sec: 15511.923330735272
Epoch Step: 80 / 138 Loss: 9.502284049987793 Tokens per Sec: 15850.881865511683
Epoch Step: 85 / 138 Loss: 8.757404327392578 Tokens per Sec: 16121.28621581467
Epoch Step: 90 / 138 Loss: 8.637824058532715 Tokens per Sec: 15202.912300211021
Epoch Step: 95 / 138 Loss: 4.527612686157227 Tokens per Sec: 15191.548454590727
Epoch Step: 100 / 138 Loss: 5.974896430969238 Tokens per Sec: 15643.44154634424
Epoch Step: 105 / 138 Loss: 5.816980361938477 Tokens per Sec: 15431.262378973313
Epoch Step: 110 / 138 Loss: 7.203695297241211 Tokens per Sec: 15240.762842309574
Epoch Step: 115 / 138 Loss: 5.71943998336792 Tokens per Sec: 14322.431700774023
Epoch Step: 120 / 138 Loss: 84.83596801757812 Tokens per Sec: 14997.659938332983
Epoch Step: 125 / 138 Loss: 86.56735229492188 Tokens per Sec: 14471.372913556348
Epoch Step: 130 / 138 Loss: 42.43583679199219 Tokens per Sec: 15503.293017020955
Epoch Step: 135 / 138 Loss: 7.2710771560668945 Tokens per Sec: 14985.620557617447
Epoch ended with duration 0:00:40.644501
Train perplexity: 1.173269678588937
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_4 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , null ) ; } } }[0m
Epoch ended with duration 0:00:01.782825
Validation perplexity: 1.3910419473488935
Model saved checkpoint!
Epoch 146 / 1000
Epoch Step: 5 / 138 Loss: 6.649608612060547 Tokens per Sec: 15974.652442952705
Epoch Step: 10 / 138 Loss: 11.079853057861328 Tokens per Sec: 17350.185229571845
Epoch Step: 15 / 138 Loss: 11.969071388244629 Tokens per Sec: 17330.67983985946
Epoch Step: 20 / 138 Loss: 89.57256317138672 Tokens per Sec: 16008.933956857822
Epoch Step: 25 / 138 Loss: 70.23925018310547 Tokens per Sec: 16120.592771351588
Epoch Step: 30 / 138 Loss: 4.901520252227783 Tokens per Sec: 16201.120008189975
Epoch Step: 35 / 138 Loss: 9.23156452178955 Tokens per Sec: 16850.077036566323
Epoch Step: 40 / 138 Loss: 7.741365432739258 Tokens per Sec: 16672.26817183202
Epoch Step: 45 / 138 Loss: 10.40342903137207 Tokens per Sec: 16337.825427216349
Epoch Step: 50 / 138 Loss: 4.475791931152344 Tokens per Sec: 15573.54409615639
Epoch Step: 55 / 138 Loss: 10.086809158325195 Tokens per Sec: 17562.607513207815
Epoch Step: 60 / 138 Loss: 3.228874683380127 Tokens per Sec: 15656.420306218595
Epoch Step: 65 / 138 Loss: 5.818798065185547 Tokens per Sec: 15331.202896789475
Epoch Step: 70 / 138 Loss: 7.801004886627197 Tokens per Sec: 16571.40213731881
Epoch Step: 75 / 138 Loss: 30.51034164428711 Tokens per Sec: 15194.827324340555
Epoch Step: 80 / 138 Loss: 5.9598798751831055 Tokens per Sec: 15868.688672773837
Epoch Step: 85 / 138 Loss: 11.328933715820312 Tokens per Sec: 14542.300968738558
Epoch Step: 90 / 138 Loss: 8.987652778625488 Tokens per Sec: 15818.447623474094
Epoch Step: 95 / 138 Loss: 10.456974029541016 Tokens per Sec: 16393.774496418282
Epoch Step: 100 / 138 Loss: 9.2830810546875 Tokens per Sec: 15686.412992626787
Epoch Step: 105 / 138 Loss: 7.992851257324219 Tokens per Sec: 14809.714596308242
Epoch Step: 110 / 138 Loss: 6.399782180786133 Tokens per Sec: 15446.253201102341
Epoch Step: 115 / 138 Loss: 8.379934310913086 Tokens per Sec: 15511.256295766892
Epoch Step: 120 / 138 Loss: 6.761676788330078 Tokens per Sec: 16738.59349545996
Epoch Step: 125 / 138 Loss: 41.86415100097656 Tokens per Sec: 16386.250087686567
Epoch Step: 130 / 138 Loss: 7.9840803146362305 Tokens per Sec: 13230.332730192049
Epoch Step: 135 / 138 Loss: 8.266589164733887 Tokens per Sec: 15182.899142615644
Epoch ended with duration 0:00:40.157533
Train perplexity: 1.1779538755279026
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.800790
Validation perplexity: 1.3886629199668308
Epoch 147 / 1000
Epoch Step: 5 / 138 Loss: 8.012672424316406 Tokens per Sec: 14812.816500771201
Epoch Step: 10 / 138 Loss: 6.51643180847168 Tokens per Sec: 14832.61096820953
Epoch Step: 15 / 138 Loss: 4.329427719116211 Tokens per Sec: 15300.693367507532
Epoch Step: 20 / 138 Loss: 10.361470222473145 Tokens per Sec: 14303.20126948028
Epoch Step: 25 / 138 Loss: 5.481202602386475 Tokens per Sec: 15963.903511126817
Epoch Step: 30 / 138 Loss: 8.008429527282715 Tokens per Sec: 17252.363244336637
Epoch Step: 35 / 138 Loss: 14.326229095458984 Tokens per Sec: 14907.973780610728
Epoch Step: 40 / 138 Loss: 8.137269020080566 Tokens per Sec: 15733.76736209847
Epoch Step: 45 / 138 Loss: 8.910094261169434 Tokens per Sec: 15835.339459343795
Epoch Step: 50 / 138 Loss: 9.800726890563965 Tokens per Sec: 16725.561441088907
Epoch Step: 55 / 138 Loss: 39.091495513916016 Tokens per Sec: 16194.403798923327
Epoch Step: 60 / 138 Loss: 59.486351013183594 Tokens per Sec: 16359.492297701532
Epoch Step: 65 / 138 Loss: 7.864696025848389 Tokens per Sec: 15876.458679294587
Epoch Step: 70 / 138 Loss: 5.274703025817871 Tokens per Sec: 18067.381186037437
Epoch Step: 75 / 138 Loss: 11.665278434753418 Tokens per Sec: 17187.247389352327
Epoch Step: 80 / 138 Loss: 7.781958103179932 Tokens per Sec: 17302.244687725775
Epoch Step: 85 / 138 Loss: 7.194914817810059 Tokens per Sec: 15305.459678413572
Epoch Step: 90 / 138 Loss: 6.013285160064697 Tokens per Sec: 17080.27152779876
Epoch Step: 95 / 138 Loss: 9.133316040039062 Tokens per Sec: 15628.915999421135
Epoch Step: 100 / 138 Loss: 5.273591041564941 Tokens per Sec: 16437.02517367835
Epoch Step: 105 / 138 Loss: 9.415776252746582 Tokens per Sec: 15405.134326751153
Epoch Step: 110 / 138 Loss: 8.096973419189453 Tokens per Sec: 14166.808621405073
Epoch Step: 115 / 138 Loss: 7.059757709503174 Tokens per Sec: 14126.445327114423
Epoch Step: 120 / 138 Loss: 7.027507305145264 Tokens per Sec: 15784.43962421925
Epoch Step: 125 / 138 Loss: 8.930249214172363 Tokens per Sec: 15491.742503635902
Epoch Step: 130 / 138 Loss: 8.274250984191895 Tokens per Sec: 15699.054678261911
Epoch Step: 135 / 138 Loss: 67.93363952636719 Tokens per Sec: 14587.44642229523
Epoch ended with duration 0:00:40.634034
Train perplexity: 1.240814382291191
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { METHOD_4 ( METHOD_4 ( VAR_2 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.785628
Validation perplexity: 1.2873828202912643
Epoch 148 / 1000
Epoch Step: 5 / 138 Loss: 11.104172706604004 Tokens per Sec: 16926.797631719535
Epoch Step: 10 / 138 Loss: 9.515957832336426 Tokens per Sec: 15150.446222590366
Epoch Step: 15 / 138 Loss: 4.6257758140563965 Tokens per Sec: 15472.446765919503
Epoch Step: 20 / 138 Loss: 11.113144874572754 Tokens per Sec: 16208.926339502359
Epoch Step: 25 / 138 Loss: 8.62629222869873 Tokens per Sec: 15246.526875597534
Epoch Step: 30 / 138 Loss: 3.834986448287964 Tokens per Sec: 17001.247319763148
Epoch Step: 35 / 138 Loss: 102.8718490600586 Tokens per Sec: 17475.306644343877
Epoch Step: 40 / 138 Loss: 9.00377082824707 Tokens per Sec: 17069.313472643673
Epoch Step: 45 / 138 Loss: 9.088974952697754 Tokens per Sec: 14439.59757322756
Epoch Step: 50 / 138 Loss: 5.548898220062256 Tokens per Sec: 15028.554815158981
Epoch Step: 55 / 138 Loss: 6.886913299560547 Tokens per Sec: 16213.492698179172
Epoch Step: 60 / 138 Loss: 7.392971992492676 Tokens per Sec: 17994.248749251372
Epoch Step: 65 / 138 Loss: 10.056692123413086 Tokens per Sec: 14837.35069208661
Epoch Step: 70 / 138 Loss: 7.676643371582031 Tokens per Sec: 18159.823854430644
Epoch Step: 75 / 138 Loss: 48.35832977294922 Tokens per Sec: 15699.256121804347
Epoch Step: 80 / 138 Loss: 11.472830772399902 Tokens per Sec: 16728.05014008185
Epoch Step: 85 / 138 Loss: 11.592827796936035 Tokens per Sec: 15937.81612075605
Epoch Step: 90 / 138 Loss: 7.846349239349365 Tokens per Sec: 16839.857900068444
Epoch Step: 95 / 138 Loss: 11.09124755859375 Tokens per Sec: 15049.217148829814
Epoch Step: 100 / 138 Loss: 8.115618705749512 Tokens per Sec: 15119.429942862342
Epoch Step: 105 / 138 Loss: 9.41110897064209 Tokens per Sec: 14729.057492847234
Epoch Step: 110 / 138 Loss: 3.2813620567321777 Tokens per Sec: 15243.222630579663
Epoch Step: 115 / 138 Loss: 8.116622924804688 Tokens per Sec: 15193.595000272238
Epoch Step: 120 / 138 Loss: 8.63126277923584 Tokens per Sec: 14591.220290719206
Epoch Step: 125 / 138 Loss: 7.27822208404541 Tokens per Sec: 13554.625094457846
Epoch Step: 130 / 138 Loss: 79.65384674072266 Tokens per Sec: 15810.1079806124
Epoch Step: 135 / 138 Loss: 7.300654411315918 Tokens per Sec: 14884.674184748457
Epoch ended with duration 0:00:40.479852
Train perplexity: 1.2279358266148026
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) ) { try { METHOD_4 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.698006
Validation perplexity: 1.3124554180844372
Epoch 149 / 1000
Epoch Step: 5 / 138 Loss: 71.45374298095703 Tokens per Sec: 16668.468694296025
Epoch Step: 10 / 138 Loss: 5.954577445983887 Tokens per Sec: 17354.757645605252
Epoch Step: 15 / 138 Loss: 9.768095970153809 Tokens per Sec: 15913.754649515902
Epoch Step: 20 / 138 Loss: 4.6605916023254395 Tokens per Sec: 17260.577083791046
Epoch Step: 25 / 138 Loss: 87.08206176757812 Tokens per Sec: 15319.451798350014
Epoch Step: 30 / 138 Loss: 6.720892906188965 Tokens per Sec: 16575.93368979104
Epoch Step: 35 / 138 Loss: 5.8008527755737305 Tokens per Sec: 15898.340442303248
Epoch Step: 40 / 138 Loss: 5.127443790435791 Tokens per Sec: 16158.179741524624
Epoch Step: 45 / 138 Loss: 4.952216148376465 Tokens per Sec: 17036.465439685795
Epoch Step: 50 / 138 Loss: 12.001112937927246 Tokens per Sec: 15004.10063471633
Epoch Step: 55 / 138 Loss: 14.785005569458008 Tokens per Sec: 15136.723823635628
Epoch Step: 60 / 138 Loss: 15.037430763244629 Tokens per Sec: 16397.33115143013
Epoch Step: 65 / 138 Loss: 13.129528999328613 Tokens per Sec: 15584.182326734566
Epoch Step: 70 / 138 Loss: 9.334437370300293 Tokens per Sec: 16107.15408513136
Epoch Step: 75 / 138 Loss: 13.545745849609375 Tokens per Sec: 14556.933778855991
Epoch Step: 80 / 138 Loss: 6.515838623046875 Tokens per Sec: 16207.277529962304
Epoch Step: 85 / 138 Loss: 9.669154167175293 Tokens per Sec: 16148.03371433591
Epoch Step: 90 / 138 Loss: 5.338661193847656 Tokens per Sec: 16184.993666888391
Epoch Step: 95 / 138 Loss: 7.904414176940918 Tokens per Sec: 14585.526246745645
Epoch Step: 100 / 138 Loss: 3.2086009979248047 Tokens per Sec: 15943.830622484205
Epoch Step: 105 / 138 Loss: 10.263763427734375 Tokens per Sec: 17335.50746251925
Epoch Step: 110 / 138 Loss: 8.155109405517578 Tokens per Sec: 16115.09030228401
Epoch Step: 115 / 138 Loss: 57.4178466796875 Tokens per Sec: 15045.09506086167
Epoch Step: 120 / 138 Loss: 8.536188125610352 Tokens per Sec: 13926.379193798975
Epoch Step: 125 / 138 Loss: 11.289809226989746 Tokens per Sec: 14214.477894622594
Epoch Step: 130 / 138 Loss: 69.88968658447266 Tokens per Sec: 15520.333044416335
Epoch Step: 135 / 138 Loss: 9.00865364074707 Tokens per Sec: 14477.79984200376
Epoch ended with duration 0:00:40.421265
Train perplexity: 1.265315602217356
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.780970
Validation perplexity: 1.2417931070459232
Epoch 150 / 1000
Epoch Step: 5 / 138 Loss: 40.351463317871094 Tokens per Sec: 16860.573310573745
Epoch Step: 10 / 138 Loss: 7.0386857986450195 Tokens per Sec: 15945.342937764053
Epoch Step: 15 / 138 Loss: 10.041216850280762 Tokens per Sec: 16448.219011781577
Epoch Step: 20 / 138 Loss: 5.60893440246582 Tokens per Sec: 15839.044200408467
Epoch Step: 25 / 138 Loss: 5.470196723937988 Tokens per Sec: 14186.805300774753
Epoch Step: 30 / 138 Loss: 9.989174842834473 Tokens per Sec: 15014.962094634287
Epoch Step: 35 / 138 Loss: 30.84450340270996 Tokens per Sec: 16544.34781124749
Epoch Step: 40 / 138 Loss: 5.4513373374938965 Tokens per Sec: 15575.018725017993
Epoch Step: 45 / 138 Loss: 50.79444122314453 Tokens per Sec: 15650.85433755097
Epoch Step: 50 / 138 Loss: 3.7077126502990723 Tokens per Sec: 17875.264757790337
Epoch Step: 55 / 138 Loss: 4.892544746398926 Tokens per Sec: 17539.77251736667
Epoch Step: 60 / 138 Loss: 9.565463066101074 Tokens per Sec: 16429.898388882502
Epoch Step: 65 / 138 Loss: 8.84131145477295 Tokens per Sec: 15970.840843910739
Epoch Step: 70 / 138 Loss: 11.082716941833496 Tokens per Sec: 15543.046773809952
Epoch Step: 75 / 138 Loss: 8.122775077819824 Tokens per Sec: 15475.818296632404
Epoch Step: 80 / 138 Loss: 10.254684448242188 Tokens per Sec: 15080.541499881547
Epoch Step: 85 / 138 Loss: 6.849153995513916 Tokens per Sec: 15730.762598711111
Epoch Step: 90 / 138 Loss: 8.647116661071777 Tokens per Sec: 15107.658165592587
Epoch Step: 95 / 138 Loss: 8.893831253051758 Tokens per Sec: 17413.544271369687
Epoch Step: 100 / 138 Loss: 6.354528427124023 Tokens per Sec: 16146.865202785539
Epoch Step: 105 / 138 Loss: 7.980769157409668 Tokens per Sec: 15223.798188198152
Epoch Step: 110 / 138 Loss: 6.358016490936279 Tokens per Sec: 13516.316565879764
Epoch Step: 115 / 138 Loss: 9.704456329345703 Tokens per Sec: 15482.000340889723
Epoch Step: 120 / 138 Loss: 118.57691955566406 Tokens per Sec: 15084.43080520844
Epoch Step: 125 / 138 Loss: 5.996691703796387 Tokens per Sec: 14748.767099655031
Epoch Step: 130 / 138 Loss: 6.765721321105957 Tokens per Sec: 14392.131464674989
Epoch Step: 135 / 138 Loss: 9.099242210388184 Tokens per Sec: 14900.661494971271
Epoch ended with duration 0:00:40.856605
Train perplexity: 1.2193952269771742
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.758015
Validation perplexity: 1.295599716486672
Model saved checkpoint!
Epoch 151 / 1000
Epoch Step: 5 / 138 Loss: 7.969967365264893 Tokens per Sec: 16823.95476966576
Epoch Step: 10 / 138 Loss: 4.894700050354004 Tokens per Sec: 15530.641925983022
Epoch Step: 15 / 138 Loss: 57.061397552490234 Tokens per Sec: 16289.859080333104
Epoch Step: 20 / 138 Loss: 5.116162300109863 Tokens per Sec: 17140.59057373098
Epoch Step: 25 / 138 Loss: 6.748059272766113 Tokens per Sec: 16987.13850829523
Epoch Step: 30 / 138 Loss: 10.8930025100708 Tokens per Sec: 14564.896625256524
Epoch Step: 35 / 138 Loss: 62.785404205322266 Tokens per Sec: 15745.59476273861
Epoch Step: 40 / 138 Loss: 9.550580024719238 Tokens per Sec: 15766.353311701198
Epoch Step: 45 / 138 Loss: 34.58522415161133 Tokens per Sec: 15711.449840959292
Epoch Step: 50 / 138 Loss: 7.49302864074707 Tokens per Sec: 15755.941734795562
Epoch Step: 55 / 138 Loss: 6.449813365936279 Tokens per Sec: 16125.468633028064
Epoch Step: 60 / 138 Loss: 8.82911491394043 Tokens per Sec: 15667.14520965107
Epoch Step: 65 / 138 Loss: 6.0301713943481445 Tokens per Sec: 16460.27776301592
Epoch Step: 70 / 138 Loss: 7.818183898925781 Tokens per Sec: 16784.427468256334
Epoch Step: 75 / 138 Loss: 6.176789283752441 Tokens per Sec: 17344.816284674693
Epoch Step: 80 / 138 Loss: 8.653914451599121 Tokens per Sec: 16012.248361840953
Epoch Step: 85 / 138 Loss: 5.046367645263672 Tokens per Sec: 15561.597404419446
Epoch Step: 90 / 138 Loss: 5.190410614013672 Tokens per Sec: 17718.907059459205
Epoch Step: 95 / 138 Loss: 10.465648651123047 Tokens per Sec: 15073.936675019835
Epoch Step: 100 / 138 Loss: 9.284643173217773 Tokens per Sec: 15527.773690031607
Epoch Step: 105 / 138 Loss: 8.159576416015625 Tokens per Sec: 15265.98704887538
Epoch Step: 110 / 138 Loss: 9.46224594116211 Tokens per Sec: 16038.539331710015
Epoch Step: 115 / 138 Loss: 7.041318416595459 Tokens per Sec: 15107.348554754946
Epoch Step: 120 / 138 Loss: 8.257146835327148 Tokens per Sec: 15194.612576445154
Epoch Step: 125 / 138 Loss: 8.645085334777832 Tokens per Sec: 14044.600999284386
Epoch Step: 130 / 138 Loss: 5.511042594909668 Tokens per Sec: 16547.71343253961
Epoch Step: 135 / 138 Loss: 5.090967178344727 Tokens per Sec: 16155.70246537092
Epoch ended with duration 0:00:40.105477
Train perplexity: 1.2013710573416685
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) ) { try { METHOD_3 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.747193
Validation perplexity: 1.1950248201605616
Epoch 152 / 1000
Epoch Step: 5 / 138 Loss: 7.689140796661377 Tokens per Sec: 16302.365769683358
Epoch Step: 10 / 138 Loss: 9.205089569091797 Tokens per Sec: 14542.473740861053
Epoch Step: 15 / 138 Loss: 5.886926174163818 Tokens per Sec: 17546.447585849328
Epoch Step: 20 / 138 Loss: 108.15996551513672 Tokens per Sec: 16039.227336798527
Epoch Step: 25 / 138 Loss: 5.960209369659424 Tokens per Sec: 16305.881582813723
Epoch Step: 30 / 138 Loss: 5.479657173156738 Tokens per Sec: 17345.59861931013
Epoch Step: 35 / 138 Loss: 8.23720645904541 Tokens per Sec: 16160.89766523617
Epoch Step: 40 / 138 Loss: 4.98018741607666 Tokens per Sec: 15598.4596716916
Epoch Step: 45 / 138 Loss: 8.295748710632324 Tokens per Sec: 15557.315777587683
Epoch Step: 50 / 138 Loss: 6.071321964263916 Tokens per Sec: 16135.27581489493
Epoch Step: 55 / 138 Loss: 6.997576713562012 Tokens per Sec: 15836.830279089512
Epoch Step: 60 / 138 Loss: 4.972789287567139 Tokens per Sec: 15501.931056783207
Epoch Step: 65 / 138 Loss: 8.089028358459473 Tokens per Sec: 15597.849555269335
Epoch Step: 70 / 138 Loss: 5.2002387046813965 Tokens per Sec: 15776.57069953786
Epoch Step: 75 / 138 Loss: 10.882978439331055 Tokens per Sec: 15796.954757943558
Epoch Step: 80 / 138 Loss: 10.219514846801758 Tokens per Sec: 16570.977936763724
Epoch Step: 85 / 138 Loss: 9.9312744140625 Tokens per Sec: 15662.166970654818
Epoch Step: 90 / 138 Loss: 9.101252555847168 Tokens per Sec: 17419.513775199528
Epoch Step: 95 / 138 Loss: 7.62399959564209 Tokens per Sec: 16284.028547012364
Epoch Step: 100 / 138 Loss: 8.038053512573242 Tokens per Sec: 15860.359517968896
Epoch Step: 105 / 138 Loss: 5.814825534820557 Tokens per Sec: 15119.140355006897
Epoch Step: 110 / 138 Loss: 6.908276557922363 Tokens per Sec: 15475.69566408525
Epoch Step: 115 / 138 Loss: 9.025717735290527 Tokens per Sec: 15236.053162888826
Epoch Step: 120 / 138 Loss: 5.438325881958008 Tokens per Sec: 15251.142511871009
Epoch Step: 125 / 138 Loss: 8.338004112243652 Tokens per Sec: 14830.494700041327
Epoch Step: 130 / 138 Loss: 7.804581165313721 Tokens per Sec: 15520.992255310819
Epoch Step: 135 / 138 Loss: 7.9198832511901855 Tokens per Sec: 14113.63471411659
Epoch ended with duration 0:00:40.406080
Train perplexity: 1.1908121940578011
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.791994
Validation perplexity: 1.428488683321248
Epoch 153 / 1000
Epoch Step: 5 / 138 Loss: 8.341611862182617 Tokens per Sec: 17169.978239366963
Epoch Step: 10 / 138 Loss: 8.080184936523438 Tokens per Sec: 16308.49396143778
Epoch Step: 15 / 138 Loss: 8.312114715576172 Tokens per Sec: 16219.123931175025
Epoch Step: 20 / 138 Loss: 5.3265533447265625 Tokens per Sec: 16349.072026303229
Epoch Step: 25 / 138 Loss: 4.93504524230957 Tokens per Sec: 16343.32517186186
Epoch Step: 30 / 138 Loss: 6.271688938140869 Tokens per Sec: 16814.167047223804
Epoch Step: 35 / 138 Loss: 8.451502799987793 Tokens per Sec: 16151.118218817885
Epoch Step: 40 / 138 Loss: 5.8042893409729 Tokens per Sec: 17191.955083536115
Epoch Step: 45 / 138 Loss: 6.105835437774658 Tokens per Sec: 17636.599137455458
Epoch Step: 50 / 138 Loss: 7.956901550292969 Tokens per Sec: 15216.730743831386
Epoch Step: 55 / 138 Loss: 136.87680053710938 Tokens per Sec: 15536.952119670557
Epoch Step: 60 / 138 Loss: 4.639490604400635 Tokens per Sec: 16143.03864599584
Epoch Step: 65 / 138 Loss: 9.269506454467773 Tokens per Sec: 14496.526723845069
Epoch Step: 70 / 138 Loss: 11.07681941986084 Tokens per Sec: 16125.370206187647
Epoch Step: 75 / 138 Loss: 4.5994110107421875 Tokens per Sec: 14921.657781932056
Epoch Step: 80 / 138 Loss: 5.396868705749512 Tokens per Sec: 17083.260466824362
Epoch Step: 85 / 138 Loss: 7.308266639709473 Tokens per Sec: 15443.246537591967
Epoch Step: 90 / 138 Loss: 70.65887451171875 Tokens per Sec: 16101.591297096526
Epoch Step: 95 / 138 Loss: 9.386943817138672 Tokens per Sec: 16536.752168467927
Epoch Step: 100 / 138 Loss: 10.217772483825684 Tokens per Sec: 16309.280804527265
Epoch Step: 105 / 138 Loss: 6.5518479347229 Tokens per Sec: 14053.746741201094
Epoch Step: 110 / 138 Loss: 7.723519325256348 Tokens per Sec: 15256.246977541763
Epoch Step: 115 / 138 Loss: 6.780670642852783 Tokens per Sec: 14670.44391555739
Epoch Step: 120 / 138 Loss: 46.104061126708984 Tokens per Sec: 14750.397366957504
Epoch Step: 125 / 138 Loss: 9.431794166564941 Tokens per Sec: 15300.372902349985
Epoch Step: 130 / 138 Loss: 7.269432544708252 Tokens per Sec: 14450.119562239703
Epoch Step: 135 / 138 Loss: 7.583598613739014 Tokens per Sec: 16062.02552923378
Epoch ended with duration 0:00:40.251609
Train perplexity: 1.187655949457334
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_3 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.764013
Validation perplexity: 1.3982313712557202
Epoch 154 / 1000
Epoch Step: 5 / 138 Loss: 4.001412868499756 Tokens per Sec: 17492.926596758818
Epoch Step: 10 / 138 Loss: 10.036561012268066 Tokens per Sec: 16753.69049366259
Epoch Step: 15 / 138 Loss: 6.486238956451416 Tokens per Sec: 15745.158841771621
Epoch Step: 20 / 138 Loss: 8.966089248657227 Tokens per Sec: 15527.207644664342
Epoch Step: 25 / 138 Loss: 4.767501354217529 Tokens per Sec: 16454.695555007995
Epoch Step: 30 / 138 Loss: 10.402244567871094 Tokens per Sec: 16649.700025423772
Epoch Step: 35 / 138 Loss: 10.578801155090332 Tokens per Sec: 14497.455013804978
Epoch Step: 40 / 138 Loss: 9.789432525634766 Tokens per Sec: 15355.1971589811
Epoch Step: 45 / 138 Loss: 4.434223651885986 Tokens per Sec: 17913.651261645537
Epoch Step: 50 / 138 Loss: 5.998723983764648 Tokens per Sec: 15851.751012033428
Epoch Step: 55 / 138 Loss: 6.74569845199585 Tokens per Sec: 15752.458450051865
Epoch Step: 60 / 138 Loss: 4.666511535644531 Tokens per Sec: 15719.540982946828
Epoch Step: 65 / 138 Loss: 5.997034072875977 Tokens per Sec: 16259.49291990967
Epoch Step: 70 / 138 Loss: 4.1440629959106445 Tokens per Sec: 15899.005178142468
Epoch Step: 75 / 138 Loss: 3.2620387077331543 Tokens per Sec: 15932.579164908282
Epoch Step: 80 / 138 Loss: 9.582015991210938 Tokens per Sec: 15958.847265844322
Epoch Step: 85 / 138 Loss: 64.79497528076172 Tokens per Sec: 16695.87922975836
Epoch Step: 90 / 138 Loss: 6.4891157150268555 Tokens per Sec: 16689.235445152237
Epoch Step: 95 / 138 Loss: 5.893686771392822 Tokens per Sec: 17119.16606173294
Epoch Step: 100 / 138 Loss: 7.577508926391602 Tokens per Sec: 16317.33154378458
Epoch Step: 105 / 138 Loss: 7.663756370544434 Tokens per Sec: 15144.957626856869
Epoch Step: 110 / 138 Loss: 8.311018943786621 Tokens per Sec: 17017.00145899744
Epoch Step: 115 / 138 Loss: 7.17351770401001 Tokens per Sec: 14371.500199829272
Epoch Step: 120 / 138 Loss: 6.807084560394287 Tokens per Sec: 15856.795663978079
Epoch Step: 125 / 138 Loss: 6.588445663452148 Tokens per Sec: 16123.422988855094
Epoch Step: 130 / 138 Loss: 5.406773090362549 Tokens per Sec: 15351.583789569206
Epoch Step: 135 / 138 Loss: 7.392348766326904 Tokens per Sec: 16091.561913584144
Epoch ended with duration 0:00:39.828225
Train perplexity: 1.1419732449095554
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_6 ) { TYPE_5 ( = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { METHOD_3 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.785320
Validation perplexity: 1.218522640631151
Epoch 155 / 1000
Epoch Step: 5 / 138 Loss: 7.05412483215332 Tokens per Sec: 15080.08865817521
Epoch Step: 10 / 138 Loss: 6.160583972930908 Tokens per Sec: 15425.094398572019
Epoch Step: 15 / 138 Loss: 8.470190048217773 Tokens per Sec: 16043.433547721092
Epoch Step: 20 / 138 Loss: 6.284413814544678 Tokens per Sec: 15770.380379114395
Epoch Step: 25 / 138 Loss: 29.223236083984375 Tokens per Sec: 15047.467783471568
Epoch Step: 30 / 138 Loss: 5.387693405151367 Tokens per Sec: 15897.516689144048
Epoch Step: 35 / 138 Loss: 4.070151329040527 Tokens per Sec: 15062.569548980304
Epoch Step: 40 / 138 Loss: 7.2558112144470215 Tokens per Sec: 16678.90383256249
Epoch Step: 45 / 138 Loss: 3.382833480834961 Tokens per Sec: 16202.497004680927
Epoch Step: 50 / 138 Loss: 4.165576457977295 Tokens per Sec: 15835.312101414467
Epoch Step: 55 / 138 Loss: 5.414034366607666 Tokens per Sec: 16475.37675601526
Epoch Step: 60 / 138 Loss: 46.1475715637207 Tokens per Sec: 15860.036217905697
Epoch Step: 65 / 138 Loss: 4.000548839569092 Tokens per Sec: 16962.197728057414
Epoch Step: 70 / 138 Loss: 6.880284309387207 Tokens per Sec: 17950.538000090808
Epoch Step: 75 / 138 Loss: 7.007493019104004 Tokens per Sec: 16590.546102049924
Epoch Step: 80 / 138 Loss: 8.895029067993164 Tokens per Sec: 15399.191259103876
Epoch Step: 85 / 138 Loss: 71.54737091064453 Tokens per Sec: 16982.865575004704
Epoch Step: 90 / 138 Loss: 6.065204620361328 Tokens per Sec: 15081.994676641772
Epoch Step: 95 / 138 Loss: 11.744150161743164 Tokens per Sec: 14470.69592901376
Epoch Step: 100 / 138 Loss: 5.923527717590332 Tokens per Sec: 15447.118969556072
Epoch Step: 105 / 138 Loss: 5.937307834625244 Tokens per Sec: 15510.293559846645
Epoch Step: 110 / 138 Loss: 77.46974182128906 Tokens per Sec: 13663.091698120224
Epoch Step: 115 / 138 Loss: 5.7175164222717285 Tokens per Sec: 14948.592381590808
Epoch Step: 120 / 138 Loss: 4.929004192352295 Tokens per Sec: 15428.930215073973
Epoch Step: 125 / 138 Loss: 7.153287887573242 Tokens per Sec: 15287.642680202774
Epoch Step: 130 / 138 Loss: 8.163214683532715 Tokens per Sec: 15473.667524594124
Epoch Step: 135 / 138 Loss: 6.591614246368408 Tokens per Sec: 15240.151469396997
Epoch ended with duration 0:00:40.808143
Train perplexity: 1.1608520674798926
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( java.lang.NullPointerException != null ) { try { result . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.777034
Validation perplexity: 1.2696912194432215
Model saved checkpoint!
Epoch 156 / 1000
Epoch Step: 5 / 138 Loss: 7.86868953704834 Tokens per Sec: 15329.528014210677
Epoch Step: 10 / 138 Loss: 6.695613384246826 Tokens per Sec: 14285.614711244498
Epoch Step: 15 / 138 Loss: 26.667770385742188 Tokens per Sec: 15339.416949954642
Epoch Step: 20 / 138 Loss: 4.107624530792236 Tokens per Sec: 15085.156857980064
Epoch Step: 25 / 138 Loss: 7.272241592407227 Tokens per Sec: 17325.622111883808
Epoch Step: 30 / 138 Loss: 69.56746673583984 Tokens per Sec: 18504.785744194298
Epoch Step: 35 / 138 Loss: 65.5657958984375 Tokens per Sec: 17217.68299205256
Epoch Step: 40 / 138 Loss: 3.292391061782837 Tokens per Sec: 16198.92169126611
Epoch Step: 45 / 138 Loss: 8.223005294799805 Tokens per Sec: 15259.259297643337
Epoch Step: 50 / 138 Loss: 8.376298904418945 Tokens per Sec: 16926.678430671174
Epoch Step: 55 / 138 Loss: 4.846015930175781 Tokens per Sec: 16607.173148442344
Epoch Step: 60 / 138 Loss: 5.515045642852783 Tokens per Sec: 15039.930694710745
Epoch Step: 65 / 138 Loss: 5.895734786987305 Tokens per Sec: 16086.047113808398
Epoch Step: 70 / 138 Loss: 9.344145774841309 Tokens per Sec: 16395.143773279353
Epoch Step: 75 / 138 Loss: 3.1163156032562256 Tokens per Sec: 16026.765363238592
Epoch Step: 80 / 138 Loss: 3.1035683155059814 Tokens per Sec: 16813.491224779824
Epoch Step: 85 / 138 Loss: 3.8259899616241455 Tokens per Sec: 16496.25069488817
Epoch Step: 90 / 138 Loss: 3.8858463764190674 Tokens per Sec: 15802.495901473165
Epoch Step: 95 / 138 Loss: 10.886621475219727 Tokens per Sec: 16134.11445550664
Epoch Step: 100 / 138 Loss: 8.809650421142578 Tokens per Sec: 16112.772855798357
Epoch Step: 105 / 138 Loss: 6.747076034545898 Tokens per Sec: 14763.492069453801
Epoch Step: 110 / 138 Loss: 5.253724098205566 Tokens per Sec: 16069.922259471634
Epoch Step: 115 / 138 Loss: 46.970069885253906 Tokens per Sec: 14992.361173750412
Epoch Step: 120 / 138 Loss: 8.6591215133667 Tokens per Sec: 14999.345115068234
Epoch Step: 125 / 138 Loss: 5.648555755615234 Tokens per Sec: 16010.031402425953
Epoch Step: 130 / 138 Loss: 4.998050212860107 Tokens per Sec: 15577.771948322275
Epoch Step: 135 / 138 Loss: 6.737172603607178 Tokens per Sec: 15232.466642556004
Epoch ended with duration 0:00:40.028667
Train perplexity: 1.179236447190133
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) ) { try { METHOD_3 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.719074
Validation perplexity: 1.2792113998167842
Epoch 157 / 1000
Epoch Step: 5 / 138 Loss: 3.6476640701293945 Tokens per Sec: 15671.798375413977
Epoch Step: 10 / 138 Loss: 7.102259635925293 Tokens per Sec: 15737.192326349712
Epoch Step: 15 / 138 Loss: 7.178780555725098 Tokens per Sec: 14886.300465063734
Epoch Step: 20 / 138 Loss: 7.804470539093018 Tokens per Sec: 15121.797654304042
Epoch Step: 25 / 138 Loss: 58.87308883666992 Tokens per Sec: 15454.144360416969
Epoch Step: 30 / 138 Loss: 8.646401405334473 Tokens per Sec: 15949.437363011026
Epoch Step: 35 / 138 Loss: 4.36055850982666 Tokens per Sec: 17207.806424987575
Epoch Step: 40 / 138 Loss: 4.568253040313721 Tokens per Sec: 15954.368179893063
Epoch Step: 45 / 138 Loss: 9.282054901123047 Tokens per Sec: 15765.33401192759
Epoch Step: 50 / 138 Loss: 6.811622619628906 Tokens per Sec: 18022.075432309095
Epoch Step: 55 / 138 Loss: 5.196574687957764 Tokens per Sec: 15805.679170165195
Epoch Step: 60 / 138 Loss: 22.0250301361084 Tokens per Sec: 16238.445672072308
Epoch Step: 65 / 138 Loss: 7.23707914352417 Tokens per Sec: 14925.08257287474
Epoch Step: 70 / 138 Loss: 5.229618549346924 Tokens per Sec: 15314.12332910509
Epoch Step: 75 / 138 Loss: 9.961085319519043 Tokens per Sec: 15505.610948048092
Epoch Step: 80 / 138 Loss: 7.644833087921143 Tokens per Sec: 16916.254401054153
Epoch Step: 85 / 138 Loss: 5.247186183929443 Tokens per Sec: 17160.512398709157
Epoch Step: 90 / 138 Loss: 5.567397594451904 Tokens per Sec: 17019.732268600652
Epoch Step: 95 / 138 Loss: 7.484403610229492 Tokens per Sec: 16847.223310007786
Epoch Step: 100 / 138 Loss: 9.341658592224121 Tokens per Sec: 17003.846152933726
Epoch Step: 105 / 138 Loss: 61.83539581298828 Tokens per Sec: 14404.831931042121
Epoch Step: 110 / 138 Loss: 9.745280265808105 Tokens per Sec: 14471.599825791696
Epoch Step: 115 / 138 Loss: 5.167975425720215 Tokens per Sec: 15743.892789350302
Epoch Step: 120 / 138 Loss: 6.831932544708252 Tokens per Sec: 15361.957675856022
Epoch Step: 125 / 138 Loss: 57.25447463989258 Tokens per Sec: 13914.454997556684
Epoch Step: 130 / 138 Loss: 5.451977252960205 Tokens per Sec: 16281.588485340168
Epoch Step: 135 / 138 Loss: 7.257357597351074 Tokens per Sec: 14619.756571112586
Epoch ended with duration 0:00:40.506452
Train perplexity: 1.1540647407199365
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) ) { try { result . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:01.743504
Validation perplexity: 1.261890098617858
Epoch 158 / 1000
Epoch Step: 5 / 138 Loss: 9.63814640045166 Tokens per Sec: 14783.558418606352
Epoch Step: 10 / 138 Loss: 8.828958511352539 Tokens per Sec: 15341.12475924323
Epoch Step: 15 / 138 Loss: 42.29225540161133 Tokens per Sec: 16497.14002484253
Epoch Step: 20 / 138 Loss: 11.09988021850586 Tokens per Sec: 14976.565255200028
Epoch Step: 25 / 138 Loss: 7.962132930755615 Tokens per Sec: 14476.974958054096
Epoch Step: 30 / 138 Loss: 9.281636238098145 Tokens per Sec: 15042.534752506059
Epoch Step: 35 / 138 Loss: 5.775853157043457 Tokens per Sec: 16954.917045715418
Epoch Step: 40 / 138 Loss: 5.353936195373535 Tokens per Sec: 15804.247523050935
Epoch Step: 45 / 138 Loss: 3.0179896354675293 Tokens per Sec: 16145.533564321151
Epoch Step: 50 / 138 Loss: 12.187326431274414 Tokens per Sec: 15798.796010394735
Epoch Step: 55 / 138 Loss: 6.287441730499268 Tokens per Sec: 15948.705004475956
Epoch Step: 60 / 138 Loss: 6.051438331604004 Tokens per Sec: 16398.39209534798
Epoch Step: 65 / 138 Loss: 3.8230278491973877 Tokens per Sec: 17927.06787354183
Epoch Step: 70 / 138 Loss: 9.987212181091309 Tokens per Sec: 17556.037015390546
Epoch Step: 75 / 138 Loss: 11.749446868896484 Tokens per Sec: 16992.685182687743
Epoch Step: 80 / 138 Loss: 7.865530967712402 Tokens per Sec: 15662.830960884954
Epoch Step: 85 / 138 Loss: 4.625547885894775 Tokens per Sec: 15721.016612101677
Epoch Step: 90 / 138 Loss: 6.446774482727051 Tokens per Sec: 16203.456235875543
Epoch Step: 95 / 138 Loss: 72.40545654296875 Tokens per Sec: 16068.11998441663
Epoch Step: 100 / 138 Loss: 9.326895713806152 Tokens per Sec: 16035.49704790179
Epoch Step: 105 / 138 Loss: 8.299116134643555 Tokens per Sec: 13929.850145791435
Epoch Step: 110 / 138 Loss: 10.986692428588867 Tokens per Sec: 16281.364359073787
Epoch Step: 115 / 138 Loss: 7.409180164337158 Tokens per Sec: 15543.460824251575
Epoch Step: 120 / 138 Loss: 11.129972457885742 Tokens per Sec: 13141.94581654797
Epoch Step: 125 / 138 Loss: 8.396992683410645 Tokens per Sec: 15693.452985570299
Epoch Step: 130 / 138 Loss: 5.424642086029053 Tokens per Sec: 15481.1322665909
Epoch Step: 135 / 138 Loss: 6.617743492126465 Tokens per Sec: 15769.200438252372
Epoch ended with duration 0:00:40.587887
Train perplexity: 1.2026377780028643
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( <unk> != null ) { try { <unk> . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , <unk> . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( != null ) { try { { . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , result . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:01.752645
Validation perplexity: 1.2607694511427139
Training was early stopped on epoch 159 with early stopping rounds 25
[68.80237685047486, 25.263019968401746, 18.56588952311293, 14.89877105083011, 14.177987725923893, 12.657694171292695, 12.110697352557356, 10.341224141378163, 9.85274548291275, 8.947413612097854, 6.977266136583677, 7.374029905784987, 7.145685243455768, 5.886846542044321, 5.320008699470797, 4.5799962322936425, 4.444155602058129, 4.038411500662531, 3.4809560570254217, 3.221695590219752, 2.923561095700538, 3.0126085212497165, 2.6513488108220575, 2.9573941321781283, 2.643179655569197, 2.182134735049838, 2.2056000205287463, 2.3485966966918226, 2.3906931751609193, 2.442230671166841, 1.9793930713912093, 1.8885231959943953, 2.084497189223456, 1.838908643676269, 1.9075681196437573, 2.033497054792968, 1.6597466808013008, 1.9551930286281525, 1.9359948665591624, 1.9572533450462373, 1.7529511894828056, 1.5657145723787058, 1.6848788766107072, 1.622075761430845, 1.6478811524367836, 1.6238054226727463, 1.4907089135417306, 1.715021078894106, 1.5820044868399588, 1.5468342757580695, 1.6095623242836719, 1.3929445863164842, 1.5678790090888401, 1.621527224140123, 1.5422020876662452, 1.4975555980405955, 1.4403963962096167, 1.4334949850831056, 1.5000285514384215, 1.5137550792672438, 1.5490717000262542, 1.5045678668587052, 1.4867661159288936, 1.584689435083236, 1.4414087918960476, 1.4981668246945745, 1.3377792583307617, 1.3798826080946947, 1.4454792994007493, 1.3141485235165078, 1.384357501825508, 1.44772912874481, 1.4086631227643245, 1.4729189861278722, 1.4495579342420883, 1.4563588981204896, 1.4275126323676088, 1.319445066465985, 1.4230768520560388, 1.3953845118721648, 1.3783011710520912, 1.3569622213464627, 1.2982817968616756, 1.2716664706080303, 1.3211871990782538, 1.369480281234945, 1.3058836915613707, 1.3314703276054198, 1.3150882248465758, 1.2739514808492292, 1.405369041269686, 1.3291349217235808, 1.3488722190241529, 1.3051421575835205, 1.3320921946508077, 1.2753859899553082, 1.327658017105406, 1.3209969577609624, 1.295552012052705, 1.3249311663815966, 1.3429814925217147, 1.2729150197852128, 1.293478470643503, 1.2478213996855732, 1.3168958720344346, 1.2432177101209894, 1.2568133045946144, 1.233295432482523, 1.3590403405324527, 1.3192905171167149, 1.2361393060813253, 1.3654438072722959, 1.2811013444117902, 1.2619192175335863, 1.3349607898571065, 1.2287757156927623, 1.298935178495044, 1.2798707108797445, 1.2976482618080831, 1.3779898489905047, 1.251685025259063, 1.1916706867613978, 1.2791339687549699, 1.207452762910999, 1.3395153436514249, 1.2180451199456064, 1.2321520834743402, 1.1939899038548392, 1.1907808745362516, 1.29003586777537, 1.2170365729372459, 1.2996053698760892, 1.224478135279795, 1.2102290523682662, 1.2446993439112326, 1.2045256290911115, 1.2289959945243871, 1.1795227032130768, 1.2295317339964769, 1.221525624082666, 1.2409515954163373, 1.2002085766283128, 1.20958919875062, 1.1547505632354969, 1.2799493877665729, 1.173269678588937, 1.1779538755279026, 1.240814382291191, 1.2279358266148026, 1.265315602217356, 1.2193952269771742, 1.2013710573416685, 1.1908121940578011, 1.187655949457334, 1.1419732449095554, 1.1608520674798926, 1.179236447190133, 1.1540647407199365, 1.2026377780028643]
[27.486101102824826, 22.18303512606159, 15.827108839668133, 16.33052652328715, 10.940201881424379, 12.465920292160867, 9.606355979013001, 9.58704938812864, 9.318062319428053, 7.2712933996752875, 11.532093457318433, 5.938699513132858, 8.780789004192362, 4.9780024205829365, 3.6433219036548943, 5.200904325477836, 4.584920005389759, 5.384900299798444, 3.7191383025131928, 2.7079621215011938, 2.573610704852507, 3.654944705864903, 2.4144690108154547, 2.2881010794614545, 2.570653231644302, 2.4110432906949897, 2.1615472053906832, 2.226566797654247, 2.0703464534248437, 3.0593946774492538, 2.0321127862876502, 1.747255179803219, 1.530827500816811, 1.9132420040083846, 2.0148803121062904, 1.6229391404426619, 2.0826917786184906, 1.5687693292258422, 1.6983749368215417, 1.4103182379578016, 1.9382861651979226, 1.6098858098872009, 1.5720043776021568, 1.9366504561650277, 1.3668019590698415, 1.642268439586848, 1.3362808965189266, 1.5874776700843172, 1.3904158928879327, 1.6998050909212854, 1.3127837611781887, 1.40728264222836, 1.460500489001739, 1.4680374720354563, 1.6533827289372838, 1.4876572315563035, 1.331534101161639, 1.5987852012741703, 1.4326657658112085, 1.417457547651641, 1.7623160713403412, 1.3262143764271734, 1.524509266646625, 1.3065531117613787, 1.486653610562165, 1.408710251264516, 1.3997952611187239, 1.4400617070854351, 1.6503474368973639, 1.2962162227998768, 1.3691677673017189, 1.5326922179591096, 1.3748799399374665, 1.3757520244999881, 1.2339576962015815, 1.3569783400289537, 1.4057471329420053, 1.6923050009687501, 1.2275607672796525, 1.264315370012844, 1.3015678288745494, 1.3650233025187615, 1.2142896037303876, 1.2937277317463263, 1.2629168977826626, 1.3324300370522297, 1.3321609281599827, 1.3739862587891154, 1.4439226940694019, 1.5736935340482694, 1.535313354135446, 1.2680595902369123, 1.2992596088566613, 1.3172142716966027, 1.209027639943479, 1.3790706211272652, 1.2810961754870795, 1.2763745727556044, 1.3851890840384633, 1.4463684870677633, 1.2966567462837586, 1.4312674364420126, 1.506593509629416, 1.3597341158279, 1.2012898973553017, 1.468568551886905, 1.1809579821194773, 1.3018828617888147, 1.239768920852287, 1.2604992574564768, 1.2670903576593686, 1.5308439092254797, 1.1782635050701202, 1.4392692561926734, 1.5509740349801, 1.3301604051760823, 1.2988766815239536, 1.1757548478839654, 1.2427055319085127, 1.3504066399682748, 1.2934277904091147, 1.319431585626495, 1.2132467647201188, 1.248876546441737, 1.2662143433988093, 1.3563054250146442, 1.2152672289079853, 1.2299750712385982, 1.1682818734433975, 1.4096405638736922, 1.298088978355927, 1.367066536117666, 1.4995162365864807, 1.1634153675365457, 1.2802448513806097, 1.1656286819150252, 1.2414337116069243, 1.2108122267767738, 1.2047349850673668, 1.350197546680011, 1.5844574174960742, 1.4241535345422882, 1.403753432048971, 1.1676212216924047, 1.2410667169097427, 1.3910419473488935, 1.3886629199668308, 1.2873828202912643, 1.3124554180844372, 1.2417931070459232, 1.295599716486672, 1.1950248201605616, 1.428488683321248, 1.3982313712557202, 1.218522640631151, 1.2696912194432215, 1.2792113998167842, 1.261890098617858, 1.2607694511427139]
Model saved checkpoint!

====STARTING EVALUATION====
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∑–∞–º–µ–Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
diff_prev: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_updated: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; } 

Most common words:
 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ     606749
         (     370366
         )     370366
         .     174374
         ;     158794
         ,     101876
         {      80764
         }      80764
     VAR_1      79696
     VAR_2      54916 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
05 (
06 )
07 .
08 ;
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 43
—É–¥–∞–ª–µ–Ω–∏–µ 41184 17
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 37
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 606749 4
–ø–∞–¥–¥–∏–Ω–≥ 54790 14
Number of words (types): 759
Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations.png...
Duration: 0:00:07.975714

Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations_8_threshold.png...
Duration: 0:00:04.351188

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations.png...
Duration: 0:00:06.069257

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations_8_threshold.png...
Duration: 0:00:04.582635

Starting conducting edit representation visualization experiment for defects4j_2d_representations.png...
Duration: 0:00:01.248476

Starting conducting edit representation visualization experiment for test300_2d_representations.png...
Duration: 0:00:01.725707

Starting conducting edit representation visualization experiment for val300_2d_representations.png...
Duration: 0:00:01.698523

Starting conducting edit representation visualization experiment for train300_2d_representations.png...
Duration: 0:00:01.995805

Starting conducting edit representation visualization experiment for test_2d_representations.png...
Duration: 0:00:07.739562

Starting conducting edit representation visualization experiment for val_2d_representations.png...
Duration: 0:00:08.847907

Starting conducting edit representation visualization experiment for train5000_2d_representations.png...
Duration: 0:01:17.792844

Start conducting accuracy calculation experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy: 89 / 388 = 0.22938144329896906
Top-3 accuracy: 112 / 388 = 0.28865979381443296
Top-5 accuracy: 124 / 388 = 0.31958762886597936
Top-10 accuracy: 141 / 388 = 0.3634020618556701
Top-50 accuracy: 167 / 388 = 0.43041237113402064
Duration: 0:03:26.410554

Start conducting accuracy calculation experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy: 145 / 244 = 0.5942622950819673
Top-3 accuracy: 185 / 244 = 0.7581967213114754
Top-5 accuracy: 192 / 244 = 0.7868852459016393
Top-10 accuracy: 200 / 244 = 0.819672131147541
Top-50 accuracy: 218 / 244 = 0.8934426229508197
Duration: 0:01:55.500372

Start conducting accuracy calculation experiment for Defects4J...
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
Duration: 0:00:07.092621

Start conducting accuracy calculation experiment for Test dataset 300...
Top-1 accuracy: 88 / 300 = 0.29333333333333333
Top-3 accuracy: 118 / 300 = 0.3933333333333333
Top-5 accuracy: 127 / 300 = 0.42333333333333334
Top-10 accuracy: 136 / 300 = 0.4533333333333333
Top-50 accuracy: 154 / 300 = 0.5133333333333333
Duration: 0:02:17.983122

Start conducting accuracy calculation experiment for Validation dataset 300...
Top-1 accuracy: 95 / 300 = 0.31666666666666665
Top-3 accuracy: 117 / 300 = 0.39
Top-5 accuracy: 128 / 300 = 0.4266666666666667
Top-10 accuracy: 136 / 300 = 0.4533333333333333
Top-50 accuracy: 162 / 300 = 0.54
Duration: 0:02:16.845129

Start conducting accuracy calculation experiment for Train dataset 300...
Top-1 accuracy: 139 / 300 = 0.4633333333333333
Top-3 accuracy: 180 / 300 = 0.6
Top-5 accuracy: 187 / 300 = 0.6233333333333333
Top-10 accuracy: 196 / 300 = 0.6533333333333333
Top-50 accuracy: 216 / 300 = 0.72
Duration: 0:02:15.648179

Start conducting one shot learning experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 10 / 64 = 0.15625
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 14 / 64 = 0.21875
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 16 / 64 = 0.25
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 19 / 64 = 0.296875
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 24 / 64 = 0.375

Top-1 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 16 / 324 = 0.04938271604938271
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 30 / 324 = 0.09259259259259259
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 32 / 324 = 0.09876543209876543
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 37 / 324 = 0.11419753086419752
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 51 / 324 = 0.1574074074074074
================
Correct Examples
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int type , int size , int ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : void METHOD_1 ( boolean VAR_1 ) ;[0m
Trg : void METHOD_1 ( ) ;[0m
Pred: void METHOD_1 ( ) ;[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Pred: synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
[32mExample #2[0m
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Pred: static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
[32mExample #3[0m
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
[32mExample #4[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
---------------
Class: Remove condition
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( VAR_1 ) { }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_2 ( , TYPE_3 . METHOD_1 ( VAR_1 ) ) , STRING_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> void METHOD_1 ( int index , short value ) ;[0m
Pred: public void METHOD_1 ( int index , short ) { throw new TYPE_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: public android.os.Bundle java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #2[0m
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> boolean METHOD_1 ( ) ;[0m
Pred: public synchronized synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #3[0m
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
Pred: public static java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #4[0m
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> float METHOD_1 ( int index ) ;[0m
Pred: public float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
Trg : public <unk> void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
Pred: public public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; } throw new TYPE_3 ( ) ; }[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public void METHOD_1 ( ) { try { . METHOD_2 ( STRING_1 ) ; } catch ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException expected ) { } } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
Trg : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . get ( ) . project ) ; }[0m
Pred: public Project . METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
[31mExample #2[0m
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( address ) ) , value ) ; }[0m
Pred: public void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( ( offset + ( address ) ) ) , false ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . isEqualTo ( STRING_1 , STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
[31mExample #4[0m
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; }[0m
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return r ; }[0m
Pred: static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; try ( TYPE_1 TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ) ; return r ; }[0m
[31mExample #5[0m
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Pred: private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_2 ( ) ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
---------------
Class: Add null check
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: public void METHOD_1 ( final java.lang.String name ) { name = name name ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
Trg : public void run ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
Pred: public void run ( ) { VAR_1 . METHOD_1 ( status ) ; }[0m
[31mExample #2[0m
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public int [ ] METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { close ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { this . METHOD_1 ( ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , true ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , null ) ; params . METHOD_2 ( METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) ; return params ; }[0m
[31mExample #2[0m
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . StorageDomain ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Pred: public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ) ; else { return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #4[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , , null , null , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , null , null , null , null , null , VAR_2 , true ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_4 , VAR_1 ) ; } } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { try { METHOD_3 ( VAR_1 , null , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
[31mExample #9[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_1 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) , null ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #12[0m
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
Pred: private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) ) , args ) ; } }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , null ) ; } TYPE_1 . fail ( ) ; } catch ( TYPE_2 expected ) { } }[0m
[31mExample #15[0m
Src : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
Trg : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
Pred: private TYPE_1 . METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_3 , state ) ; } } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
[31mExample #17[0m
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }[0m
Pred: public static void METHOD_1 ( short [ ] a { TYPE_1 . METHOD_1 ( a ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
[31mExample #20[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , null ) , STRING_1 , true ) ; }[0m
---------------
Class: Add statement,Remove thrown exception
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { throw new TYPE_2 ( e.getMessage ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) { }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int type , int size , int ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object returnValue ) { this . ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #2[0m
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int netId ) throws TYPE_2 ;[0m
Pred: TYPE_1 [ ] { TYPE_2 ;[0m
[31mExample #3[0m
Src : public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Trg : public void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Pred: public void METHOD_1 ( TYPE_1 event ) { }[0m
[31mExample #4[0m
Src : public static <unk> void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
Trg : public static <unk> void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;[0m
Pred: public static void METHOD_1 ( VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_2 VAR_1 , java.lang.String java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
[31mExample #7[0m
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
Trg : void METHOD_1 ( int type , int VAR_2 ) ;[0m
Pred: void METHOD_1 ( int type , VAR_2 ) ;[0m
[31mExample #8[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_3 ) { return null ; }[0m
[31mExample #9[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object returnValue ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ( ) ) ) . getReturnValue ( ) ) ) ; }[0m
[31mExample #10[0m
Src : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 action < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( METHOD_2 ( new TYPE_1 . DiskImage DiskImage ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
[31mExample #12[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
Pred: void void METHOD_1 ( VAR_2 ) ;[0m
[31mExample #13[0m
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( int type ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
[31mExample #15[0m
Src : <unk> boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Trg : <unk> boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Pred: public boolean METHOD_1 ( int VAR_2 [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ; }[0m
[31mExample #16[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Pred: public TYPE_1 < TYPE_2 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
[31mExample #17[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
[31mExample #18[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( java.lang.String project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , null ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
Pred: public void void METHOD_1 ( ) throws java.lang.Exception throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( int project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 , id ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object returnValue ) { METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
Pred: public void onSuccess ( java.lang.Object ( java.lang.Boolean ) ) { }[0m
---------------
Class: Add/Remove this qualifier
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public void onSuccess ( java.lang.Boolean ) {[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) {[0m
[31mExample #2[0m
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , java.lang.String > { return VAR_1 ; }[0m
---------------
Class: Broad method visibility
Golden example (False):
[31mExample #1[0m
Src : <unk> TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public <unk> TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public java.lang.String TYPE_1 id ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( ) { VAR_1 ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Pred: public static void METHOD_1 ( java.util.Map < java.lang.String > VAR_1 , VAR_2 ) { TYPE_1 VAR_3 = VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
[31mExample #3[0m
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public protected java.lang.String METHOD_1 ( { return VAR_1 . get ( ) ; }[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Pred: public protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; } }[0m
[31mExample #5[0m
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Pred: public static boolean METHOD_1 ( VAR_1 ) { return ( ( TYPE_2 . getVm ( ) ) && ( ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ) ; }[0m
[31mExample #6[0m
Src : private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) ) ) ; } }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public protected TYPE_1 METHOD_1 ( { return VAR_1 . get ( ) ; }[0m
[31mExample #8[0m
Src : protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Trg : public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.VM getVdsGroup getVdsGroup ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; } }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Pred: public static void METHOD_1 ( java.util.Map < java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
[31mExample #10[0m
Src : private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Trg : protected boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Pred: public boolean validate ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; } } return false ; }[0m
[31mExample #11[0m
Src : private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: private static TYPE_1 ( java.io.File VAR_1 , TYPE_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #12[0m
Src : protected TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Trg : public TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Pred: public TYPE_1 TYPE_1 . METHOD_1 ( ) { return ( ) ; }[0m
[31mExample #13[0m
Src : protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Trg : public void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Pred: public void void METHOD_1 ( value ) { vm = value ; }[0m
[31mExample #14[0m
Src : private static <unk> void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Trg : public static <unk> void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Pred: public static synchronized void METHOD_1 ( VAR_1 , VAR_2 ) ;[0m
[31mExample #15[0m
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Pred: public protected java.lang.String METHOD_1 ( { if ( ( METHOD_2 ( ) ) ) { return null ; } return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
Pred: public void METHOD_1 ( ) { super ( true , null ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Pred: protected boolean METHOD_1 ( ) { if ( TYPE_1 TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return METHOD_3 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws TYPE_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
---------------
Class: Change method return value
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public final TYPE_1 METHOD_1 ( this . ) ; }[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( ) { return false ; }[0m
Trg : public boolean METHOD_1 ( ) { return true ; }[0m
Pred: public boolean METHOD_1 ( false ) ; }[0m
[31mExample #3[0m
Src : protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
Trg : protected java.lang.String getRefName ( ) { return ref ; }[0m
Pred: public java.lang.String java.lang.String { return STRING_1 ; }[0m
---------------
Class: Change method return value,Change return type
Golden example (False):
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
Pred: public java.lang.String METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
Pred: public public java.lang.Object METHOD_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , long VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , d , VAR_3 , VAR_3 ) ; }[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; } }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #4[0m
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
[31mExample #5[0m
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Pred: static long METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
[31mExample #7[0m
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Trg : private static org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Pred: private static TYPE_1 METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
[31mExample #8[0m
Src : private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Trg : private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Pred: private static void METHOD_1 ( final java.lang.StringBuilder r , TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
[31mExample #9[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . network object ) { return object . METHOD_1 ( ) ; }[0m
Trg : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
Pred: private java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.Network network object ) { return object . METHOD_1 ( ) ; }[0m
[31mExample #10[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . METHOD_1 ( ) . size ( ) ) ; }[0m
Pred: private java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return ( ( object . METHOD_1 ( ) . size ( ) ) ) ; }[0m
[31mExample #11[0m
Src : public static <unk> byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
Trg : public static <unk> byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
Pred: private static java.lang.Object [ ] METHOD_1 ( int VAR_1 ) ;[0m
[31mExample #12[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Pred: private static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
[31mExample #13[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return ( java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Pred: private java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
[31mExample #14[0m
Src : <unk> void METHOD_1 ( int VAR_1 , int VAR_2 ) ;[0m
Trg : <unk> void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
Pred: protected void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
[31mExample #15[0m
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: synchronized long METHOD_1 ( long VAR_1 , long VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #16[0m
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Pred: private void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } } }[0m
[31mExample #17[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #18[0m
Src : public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
[31mExample #19[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #20[0m
Src : public static <unk> void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;[0m
Trg : public static <unk> void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
Pred: private static void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
[31mExample #21[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VM entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
[31mExample #22[0m
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Pred: synchronized void METHOD_1 ( long VAR_1 , long VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
[31mExample #23[0m
Src : public static <unk> void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;[0m
Trg : public static <unk> void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
Pred: private static void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
[31mExample #24[0m
Src : <unk> void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Trg : <unk> void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Pred: protected void METHOD_1 ( long VAR_1 , long id , long VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ; }[0m
[31mExample #25[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Pred: private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) ; }[0m
Pred: protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args , t ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #6[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( STRING_2 , VAR_1 ) ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) , 2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; } TYPE_2 . assertEquals ( VAR_2 , VAR_2 ) ; }[0m
---------------
Class: Change return type
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public void onSuccess ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Pred: [0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ( METHOD_2 ( vmId ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = dao . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > result . METHOD_3 ( ( ( VAR_1 ) ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
[31mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_3 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 ) { return METHOD_1 ( vmId , true , false , false , false ) ; }[0m
[31mExample #4[0m
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 . ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
---------------
Class: Forbid overriding: add final to method
Golden example (False):
[31mExample #1[0m
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Pred: public long long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Pred: public double double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; METHOD_3 ( ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ) ; return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; METHOD_3 ( ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ) ; return VAR_2 ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( ) ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
[31mExample #3[0m
Src : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( VAR_2 ) ; return VAR_3 ; }[0m
[31mExample #4[0m
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Pred: public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new ( ( VAR_1 + ( VAR_2 ) ) ) ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; } return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( ) ; } try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
---------------
Class: Narrow method visibility
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: protected TYPE_1 > { return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Pred: protected TYPE_1 TYPE_1 ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
[31mExample #3[0m
Src : protected synchronized void METHOD_1 ( ) { }[0m
Trg : public synchronized void METHOD_1 ( ) { }[0m
Pred: protected void ) { }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( ) { return user ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { return user ; }[0m
Pred: public TYPE_1 ) { return user ; }[0m
[31mExample #5[0m
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( STRING_1 STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
---------------
Class: Remove condition
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { VAR_1 . METHOD_1 ( value ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String line ) { }[0m
[31mExample #3[0m
Src : public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
Trg : public static TYPE_1 getInstance ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 getInstance ( ) { if ( new TYPE_1 ( ) ) ; } } return VAR_1 ; }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; METHOD_3 ( TYPE_2 . a ( a , this , VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , in ) ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . ( ) [ 1 ) ; }[0m
[31mExample #3[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
Pred: public static int METHOD_1 ( ) { float a ; float b ; float a = METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( ) ; c = a : b ; return c ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
[31mExample #5[0m
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = storageDomain . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = METHOD_2 ( storageDomain ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
[31mExample #6[0m
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }[0m
Pred: public long METHOD_1 ( TYPE_1 element , TYPE_2 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #7[0m
Src : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
Trg : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; }[0m
Pred: public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return ( ( ) ) ) . METHOD_1 ( ) ; }[0m
[31mExample #8[0m
Src : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
Trg : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
Pred: public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : ) ; METHOD_3 ( vmId ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
[31mExample #9[0m
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
[31mExample #11[0m
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
Pred: public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != ( ( ) ) ) . METHOD_2 ( ) ; }[0m
[31mExample #12[0m
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { status = value . ( ) ; }[0m
[31mExample #14[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
Pred: public static int METHOD_1 ( ) { float a ; float b ; float a = METHOD_2 ( FLOAT_1 ) ; b = . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }[0m
Pred: public final org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 METHOD_1 ( java.lang.String ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( when command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }[0m
Pred: public static void METHOD_1 ( ) { METHOD_1 ( null ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , branch , null , null ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
[31mExample #9[0m
Src : public TYPE_1 create ( ) { return new TYPE_1 ( this , null ) ; }[0m
Trg : public TYPE_1 create ( ) { return new TYPE_1 ( this ) ; }[0m
Pred: public TYPE_1 create ( ) { TYPE_1 ( this , null ) ; }[0m
[31mExample #10[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
[31mExample #12[0m
Src : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 apply ( TYPE_2 ) { return ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { super METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) , null ) , false , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
[31mExample #16[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , version ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return ( VAR_1 , VAR_3 , version ) ; }[0m
[31mExample #17[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; }[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( true , true , true ) ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.doReturn when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
[31mExample #22[0m
Src : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > ) { new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
[31mExample #23[0m
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 ) ; }[0m
Pred: public final void METHOD_1 ( final TYPE_2 ) { TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_1 ( new java.util.HashMap ( ) , true , true ) ; }[0m
[31mExample #25[0m
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( int ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
[31mExample #27[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
Pred: public java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
[31mExample #30[0m
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String ) { TYPE_2 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
---------------
Class: Remove redundant initialization
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException expected ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 VAR_2 ; TYPE_2 = new TYPE_2 ( METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( VAR_1 ) { }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > { return METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
Trg : public void info ( java.lang.String msg ) { log ( TYPE_1 , msg ) ; }[0m
Pred: public void info info { if ( ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
[31mExample #3[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
Pred: public static long long METHOD_1 ( ) { return TYPE_1 > > 0 ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_4 ( 1 , 0 , ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , changeId ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.lang.String java.lang.String VAR_2 = METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #8[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Pred: TYPE_1 TYPE_1 METHOD_1 ( VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Pred: public void void METHOD_1 ( ) { VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
[31mExample #10[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Pred: public static int METHOD_1 ( int ) { int int VAR_2 = x ; y ; return VAR_2 - y ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #12[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
Pred: public static long METHOD_1 ( ) { return - ( - INT_2 - ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Pred: public void void METHOD_1 ( ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_4 ( METHOD_5 ( 1 ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { c . METHOD_3 ( null , VAR_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException expected ) { } }[0m
[31mExample #17[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
Pred: protected TYPE_1 TYPE_1 METHOD_1 ( model ) { VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { protected TYPE_3 . METHOD_2 ( ) ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . ( ( STRING_2 + ) ) , value . METHOD_3 ( ) ) ; }[0m
[31mExample #21[0m
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 ) { return { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + STRING_2 ) + response ) ) ; } }[0m
[31mExample #22[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Pred: public static int METHOD_1 ( int ) { } int VAR_2 = x - y ; return y ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
[31mExample #24[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void void METHOD_1 ( ) { TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #25[0m
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: void void METHOD_1 ( ) { VAR_2 . METHOD_3 ( ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
[31mExample #27[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }[0m
Pred: TYPE_1 TYPE_1 METHOD_1 ( VAR_1 ) { VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #28[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_4 ( ) ; }[0m
[31mExample #29[0m
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }[0m
Pred: public static void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
[31mExample #30[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
[31mExample #31[0m
Src : public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 ) { }[0m
Pred: public void void METHOD_1 ( ) { }[0m
[31mExample #32[0m
Src : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
Trg : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
[31mExample #33[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { Main . METHOD_3 ( ) ; }[0m
Pred: public static void void METHOD_1 ( ) { Main . METHOD_3 ( ) ; }[0m
[31mExample #34[0m
Src : public static int METHOD_1 ( int arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - arg1 ) - VAR_1 ; }[0m
Trg : public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( - arg1 ) - VAR_1 ; }[0m
Pred: public static int int METHOD_1 ( VAR_2 ) { } return ( - arg1 ) - VAR_1 ; }[0m
[31mExample #35[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #36[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
Pred: public void void METHOD_2 ( ) ; }[0m
[31mExample #37[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { command . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
[31mExample #38[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_4 ( ) ; }[0m
[31mExample #39[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: public void void METHOD_1 ( ) { VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #40[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int int METHOD_1 ( ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
[31mExample #41[0m
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Pred: public static byte byte METHOD_1 ( ) { return ( ( byte ) ( ( char ) ) ) ; }[0m
[31mExample #42[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
[31mExample #43[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.lang.String java.lang.String VAR_2 = METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #44[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void void METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #45[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
[31mExample #46[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void void METHOD_1 ( ) { METHOD_2 ( new TYPE_2 ( ) ) ; METHOD_2 ( new TYPE_2 ( ) ) ; }[0m
[31mExample #47[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }[0m
Pred: public static long METHOD_1 ( ) { return { return - 1 ; } }[0m
[31mExample #48[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_3 ( ) ) ; }[0m
[31mExample #49[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
[31mExample #50[0m
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( ) ) ; }[0m
[31mExample #51[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Pred: public void void METHOD_1 ( ) { VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
[31mExample #52[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
Pred: public void void METHOD_1 ( ) { METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
[31mExample #53[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 TYPE_1 METHOD_1 ( ) { METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
[31mExample #54[0m
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
Pred: public static float float ( { ) { return VAR_2 / ; } }[0m
[31mExample #55[0m
Src : public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Trg : public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Pred: public static long long METHOD_1 ( VAR_2 ) { long long VAR_3 = VAR_1 ; return ( + + VAR_3 ) | ( VAR_3 + VAR_3 ) ; }[0m
[31mExample #56[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int int METHOD_1 ( ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_2 ; }[0m
[31mExample #57[0m
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }[0m
Pred: public void void METHOD_1 ( VAR_1 ) { if ( ! ( VAR_1 ) ) ) { file = VAR_1 ; } }[0m
[31mExample #58[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Pred: public static void void METHOD_1 ( ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
[31mExample #59[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; }[0m
[31mExample #60[0m
Src : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
Trg : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
Pred: protected void void METHOD_1 ( ) { TYPE_1 . METHOD_3 ( this ) ; }[0m
[31mExample #61[0m
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Pred: public static boolean METHOD_1 ( VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
[31mExample #62[0m
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public java.lang.String java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; } }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
Pred: public void void ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
[31mExample #5[0m
Src : boolean METHOD_1 ( ) ;[0m
Trg : boolean validate ( ) ;[0m
Pred: public boolean METHOD_1 ( ) ;[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
---------------
Class: Rename parameter
Golden example (False):
[31mExample #1[0m
Src : public <unk> float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public <unk> float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public public float TYPE_1 METHOD_1 ( ) throws java.lang.Exception {[0m
+++++++++++++++
[31mExample #1[0m
Src : public <unk> boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public <unk> boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public public void METHOD_1 ( VAR_1 ) throws java.lang.Exception {[0m
[31mExample #2[0m
Src : public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
Trg : public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
Pred: public void void METHOD_1 ( ) { }[0m
[31mExample #3[0m
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
Pred: TYPE_1 TYPE_1 id ( ) throws TYPE_2[0m
[31mExample #4[0m
Src : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) ;[0m
Trg : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version ) ;[0m
Pred: public int int METHOD_1 ( VAR_1 , org.ovirt.engine.core.compat ) ;[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws { VAR_2 = VAR_1 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
Trg : private <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: public java.lang.String METHOD_1 ( ) { return TYPE_1 METHOD_1 ( ) ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - 1 ) ) ; } }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { java.lang.System.out.println ( STRING_1 ) ; } }[0m
Pred: public static void METHOD_1 ( long VAR_1 ) { try TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . fail ( STRING_1 ) ; } }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
[31mExample #6[0m
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Pred: private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + 1 ) , 0 , 1 ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_2 ( , TYPE_3 . METHOD_1 ( VAR_1 ) ) , STRING_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new ( ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
[31mExample #4[0m
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > TYPE_1 ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
[31mExample #5[0m
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( value , TYPE_1 ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
[31mExample #6[0m
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Pred: protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > TYPE_1 ( ) ; cluster . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.StringBuilder r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 . get ( ) ) ) + STRING_2 ) . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) ; }[0m
[31mExample #5[0m
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( address ) ) ) ; }[0m
Pred: final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , res . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) . isEqualTo ( ) ; }[0m
[31mExample #7[0m
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) METHOD_5 ( VAR_2 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) . isEqualTo ( ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . isEqualTo ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null ) ) ; }[0m
[31mExample #10[0m
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; } return false ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 item , VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item ) ; }[0m
[31mExample #14[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . ) ) && ( ! ( java.lang.Boolean > ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) . METHOD_3 ( VAR_3 ) ; } return VAR_4 ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . . METHOD_2 ( value ) ; }[0m
[31mExample #16[0m
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( METHOD_2 ( ) ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
[31mExample #17[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ( ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ( returnValue ) ) { VAR_1 . METHOD_2 ( hosts ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getStoragePoolId ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
[31mExample #20[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . getStoragePoolId ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_3 ( ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ; return false ; }[0m
[31mExample #22[0m
Src : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Trg : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }[0m
Pred: public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; }[0m
[31mExample #23[0m
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
Pred: protected int METHOD_1 ( ) { return < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #24[0m
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }[0m
Pred: protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #25[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_3 ) ) . thenReturn ( VAR_4 ) ; }[0m
[31mExample #26[0m
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #27[0m
Src : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
Trg : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . getName ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
[31mExample #28[0m
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_1 ( storage ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
[31mExample #30[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . ) ; }[0m
[31mExample #31[0m
Src : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
---------------
Class: Replace statement
Golden example (False):
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( METHOD_2 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) . METHOD_3 ( ) ; }[0m
[31mExample #2[0m
Src : public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
Trg : public static long METHOD_1 ( ) { long VAR_1 = 10 ; int VAR_2 = 3 ; return VAR_1 & VAR_2 ; }[0m
Pred: public static long METHOD_1 ( ) { long VAR_1 = Main METHOD_2 ( INT_1 ) ; return VAR_1 , VAR_2 ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) . equals ( ) ) ; }[0m
---------------
Class: unclear
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
Trg : protected <unk> byte METHOD_1 ( ) throws java.io.IOException ;[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return ( ( ) ( METHOD_2 ( ) ) ) ; } }[0m
[31mExample #2[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Pred: public java.util.List < TYPE_1 > VAR_1 { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < java.lang.String METHOD_1 ( ) ; }[0m
---------------
================
Duration: 0:06:33.539527

Start conducting one shot learning experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 29 / 56 = 0.5178571428571429
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 37 / 56 = 0.6607142857142857
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 40 / 56 = 0.7142857142857143
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 42 / 56 = 0.75
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 45 / 56 = 0.8035714285714286

Top-1 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 20 / 188 = 0.10638297872340426
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 31 / 188 = 0.16489361702127658
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 36 / 188 = 0.19148936170212766
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 41 / 188 = 0.21808510638297873
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 49 / 188 = 0.26063829787234044
================
Correct Examples
Class: Add braces to if statement
Golden example (True):
[32mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
[32mExample #2[0m
Src : private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
---------------
Class: Change exception type in catch clause
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_7 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_7 ( x , e ) ; } }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
[32mExample #2[0m
Src : static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Trg : static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Pred: static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[32mExample #2[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
[32mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Trg : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Pred: private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
[32mExample #2[0m
Src : private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Pred: public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
[32mExample #4[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Trg : protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Pred: protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Rename variable
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Trg : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Pred: public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
---------------
================
================
Incorrect Examples
Class: Add braces to if statement
Golden example (True):
[32mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Trg : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Pred: public synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service service . METHOD_1 ( fd , VAR_1 , args , args ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Trg : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Pred: TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client . i . METHOD_4 ( ) ; return ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
[31mExample #2[0m
Src : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Trg : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Pred: public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #4[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . METHOD_4 ( ) , ( ) . get ( METHOD_2 ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . METHOD_8 ( ) , null ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_6 ( 1 ) . METHOD_7 ( TYPE_3 . any ( ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 , true ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { METHOD_5 ( VAR_5 ) ; } } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 , 0 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = TYPE_6 ( VAR_5 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) ) ; }[0m
[31mExample #9[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
---------------
Class: Add statement
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) { TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ; } VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; s . METHOD_10 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
[31mExample #2[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: public java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true , true ) ; } return VAR_1 ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Pred: public boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
---------------
Class: Change comparison operator (e.g. >) in condition
Golden example (False):
[31mExample #1[0m
Src : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Trg : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Pred: private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Trg : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 > VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Pred: private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( STRING_1 + STRING_2 ) + VAR_2 ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
[31mExample #2[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , long VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
[31mExample #3[0m
Src : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Trg : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Pred: private final TYPE_1 METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( java.util.Map VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Trg : private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Pred: private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
[31mExample #6[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 , VAR_3 ) ; }[0m
[31mExample #7[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , byte [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , long VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , long [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( int session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Pred: private void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return org.ovirt.engine.ui.frontend.Frontend.getInstance ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( args . inV ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , version , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
[31mExample #7[0m
Src : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Trg : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_2 . length , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Pred: protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 , VAR_1 size ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } }[0m
[31mExample #2[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( ( ) == null ) ) ; } catch ( TYPE_4 e ) { TYPE_3 . assertEquals ( VAR_2 , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_2 . get ( 0 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
[31mExample #4[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } }[0m
---------------
Class: Change qualified name in response to a move class refactoring
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Trg : public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Pred: public java.lang.String toString ( ) { java.lang.StringBuilder = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_2 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id , id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat , org.ovirt.engine.core.compat , VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , METHOD_3 ( ) ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Trg : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Pred: private void METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) == null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id , id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = VAR_1 ) ; VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #8[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
[31mExample #9[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( ( getEntity ( ) ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
[31mExample #10[0m
Src : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Pred: public void void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new java.util.ArrayList < ( ) ( ) ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < java.lang.Integer , org.ovirt.engine.core.compat . Version > > > ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
[31mExample #11[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { synchronized ( ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
[31mExample #12[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , VAR_1 , java.lang.Object > VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
[31mExample #13[0m
Src : public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public void void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { synchronized ( ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return ; } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) . VAR_2 . StoragePool ) , aQuery ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { return VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , float VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; try { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ ] ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Trg : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Pred: public static void METHOD_1 ( id , int state VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; try { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ] i = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object source ( source ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
Trg : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type ) ; return vm ; }[0m
Pred: public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_1 , response , VAR_3 , VAR_2 ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
[31mExample #3[0m
Src : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
[31mExample #10[0m
Src : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( ) ) ; return VAR_2 ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 , node , location ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
[31mExample #16[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; }[0m
Trg : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
Pred: protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_3 ) , TYPE_2 . any ( VAR_4 ) ) ; }[0m
[31mExample #18[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 ) ; } }[0m
Pred: public static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
[31mExample #19[0m
Src : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Pred: public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; } VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) ; return ( r != null ) { return VAR_3 ; } } return null ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
[31mExample #25[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 , options ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
[31mExample #26[0m
Src : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Trg : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
---------------
Class: Remove redundant initialization,Replace statement
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( VAR_5 != null ) { if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( VAR_2 != null ) { if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( VAR_5 : VAR_5 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( ) ; }[0m
[31mExample #5[0m
Src : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Trg : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . VAR_2 ; }[0m
[31mExample #6[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( vm ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . Disk disk ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; getName ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . setId class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , VAR_6 ) ; }[0m
[31mExample #16[0m
Src : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) { return VAR_4 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( ) ; } return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( STRING_1 ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } long c = TYPE_1 . METHOD_3 ( ) ; long s = TYPE_1 . METHOD_4 ( c ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
[31mExample #20[0m
Src : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { else if ( TYPE_1 STRING_3 ) ; return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
[31mExample #21[0m
Src : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; }[0m
Trg : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }[0m
Pred: protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) ; return ; } return null ; }[0m
[31mExample #22[0m
Src : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Trg : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 ) ) ; METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , VAR_1 ) . METHOD_9 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_5 . METHOD_8 ( vm , diskImage ) ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( ) ; METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
[31mExample #25[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ! ( METHOD_2 ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
---------------
Class: Remove statement,Add try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; VAR_1 . METHOD_7 ( ) ; server . METHOD_7 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; } . METHOD_7 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; }[0m
---------------
Class: Remove statement,Move existing statements in try block
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
---------------
Class: Remove type casting in method body
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) ; } }[0m
Trg : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
Pred: public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( VAR_3 ) ( value ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 ( value ) ) ; } }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Trg : protected boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Pred: protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) { METHOD_4 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( result result != null ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
---------------
Class: Rename variable
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
Trg : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable fail ) { METHOD_6 ( fail ) ; return new byte [ 0 ] ; } }[0m
Pred: byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Trg : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; java.lang.System.out.println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Pred: public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } } VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; } return a > b ? a : b : a : b ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , VAR_1 , fd , callback ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params , params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 , VAR_4 ) ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) . METHOD_7 ( TYPE_4 ) ) ) ; }[0m
---------------
Class: Replace if statement with assert statement
Golden example (True):
[32mExample #1[0m
Src : public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Trg : public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Pred: public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 . METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Trg : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Pred: void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
[31mExample #3[0m
Src : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Trg : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . log ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Pred: public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Trg : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Pred: boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = true ; VAR_1 = false ; return true ; } return false ; } return false ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
[31mExample #6[0m
Src : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; return true ; }[0m
Pred: protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #10[0m
Src : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 . add ( ) ) ; return null ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . any ( ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #15[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
[31mExample #17[0m
Src : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_2 ( ) ; METHOD_7 ( ) . METHOD_7 ( ) ; return null ; }[0m
[31mExample #18[0m
Src : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Trg : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Pred: public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return false ; } return true ; }[0m
[31mExample #19[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 . getName ( ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #20[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : log . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
[31mExample #21[0m
Src : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_7 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_8 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
[31mExample #23[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . getStoragePoolId ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , toString ( ) , TYPE_1 . name ( ) ) ; }[0m
[31mExample #24[0m
Src : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . getStatus ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Pred: protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
[31mExample #25[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
[31mExample #26[0m
Src : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
Trg : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . getName ( ) ) ) ) ) { return network ; } } return null ; }[0m
Pred: protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
[31mExample #27[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
---------------
================
Duration: 0:03:40.829727

Start conducting one shot learning experiment for Defects4J...
Top-1 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-5 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-10 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-50 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0

Top-1 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-5 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-10 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-50 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Pred: public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - 1 ; if ( VAR_2 == null ) { return VAR_2 ; } return - 1 : return - 1 ; case 1 : return ; ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Pred: public int ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . METHOD_4 ( VAR_2 ) ; } if ( VAR_2 != null ) { this . METHOD_3 ( VAR_2 ) ; this . VAR_2 = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( ) ; }[0m
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
[31mExample #1[0m
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Pred: void add ( ui VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { if ( ( ) != null ) { append ( STRING_1 ) ; } append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
---------------
Class: ['condBlockRetAdd']
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null == null ) { return false ; } if ( VAR_1 == null : VAR_2 == null ) { return VAR_1 == null ; VAR_2 ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . <unk> ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public TYPE_1 TYPE_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_1 == null ) { return ; } return METHOD_2 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( VAR_1 == null ) { return false ; } for ( VAR_2 VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! ( VAR_5 ) ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Pred: boolean METHOD_1 ( ) { TYPE_1 VAR_1 = = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 VAR_2 VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
---------------
Class: ['notClassified']
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . <unk> ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Pred: public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] = TYPE_3 . get ( 0 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Pred: public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int result = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i = 0 ] ; VAR_3 += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( ) ; } }[0m
---------------
Class: ['singleLine']
Golden example (False):
[31mExample #1[0m
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Pred: static float long METHOD_1 ( VAR_1 ) { return METHOD_2 ( VAR_1 , VAR_2 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
[31mExample #2[0m
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Pred: private static METHOD_1 ( final double VAR_1 , final int VAR_2 ) throws TYPE_1 , final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / ; ; double double VAR_7 = ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
---------------
Class: ['wrapsIf']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
Pred: public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 this this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } else { throw new TYPE_1 . METHOD_2 ( ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }[0m
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || ( VAR_2 == null ) == null ) { return false ; } return false ; } return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
---------------
Class: ['wrapsIfElse']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_1 ( METHOD_1 ( VAR_1 ) { METHOD_1 ( VAR_1 ) { METHOD_1 ( METHOD_1 ( VAR_1 ) ) { METHOD_1 ( METHOD_1 ( VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { if ( VAR_1 != null ) { synchronized ( VAR_1 != null ) { VAR_1 = VAR_1 . METHOD_1 ( ) ; } if ( VAR_1 != null ) && ( VAR_1 != null ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] { return ( TYPE_1 ) ; } return VAR_3 ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( final int x ) { synchronized ( int x != null ) { return METHOD_2 ( x ) ; } return METHOD_2 ( x ) ; }[0m
---------------
================
Duration: 0:00:16.294151

Starting long experiments
Start conducting accuracy calculation experiment for Test dataset all...
Top-1 accuracy: 391 / 1098 = 0.3561020036429873
Top-3 accuracy: 516 / 1098 = 0.46994535519125685
Top-5 accuracy: 548 / 1098 = 0.4990892531876138
Top-10 accuracy: 594 / 1098 = 0.5409836065573771
Top-50 accuracy: 672 / 1098 = 0.6120218579234973
Duration: 0:08:21.963685

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset train 300...
Top-1 accuracy: 18 / 300 = 0.06
Top-3 accuracy: 26 / 300 = 0.08666666666666667
Top-5 accuracy: 29 / 300 = 0.09666666666666666
Top-10 accuracy: 38 / 300 = 0.12666666666666668
Top-50 accuracy: 51 / 300 = 0.17
Duration: 0:02:34.699892

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset val 300...
Top-1 accuracy: 21 / 300 = 0.07
Top-3 accuracy: 31 / 300 = 0.10333333333333333
Top-5 accuracy: 36 / 300 = 0.12
Top-10 accuracy: 41 / 300 = 0.13666666666666666
Top-50 accuracy: 52 / 300 = 0.17333333333333334
Duration: 0:02:30.697978

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test 300...
Top-1 accuracy: 21 / 300 = 0.07
Top-3 accuracy: 30 / 300 = 0.1
Top-5 accuracy: 34 / 300 = 0.11333333333333333
Top-10 accuracy: 41 / 300 = 0.13666666666666666
Top-50 accuracy: 57 / 300 = 0.19
Duration: 0:02:29.630655

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset train 300...
Top-1 accuracy: 33 / 300 = 0.11
Top-3 accuracy: 43 / 300 = 0.14333333333333334
Top-5 accuracy: 43 / 300 = 0.14333333333333334
Top-10 accuracy: 46 / 300 = 0.15333333333333332
Top-50 accuracy: 54 / 300 = 0.18
Duration: 0:02:16.735080

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset val 300...
Top-1 accuracy: 21 / 300 = 0.07
Top-3 accuracy: 28 / 300 = 0.09333333333333334
Top-5 accuracy: 31 / 300 = 0.10333333333333333
Top-10 accuracy: 37 / 300 = 0.12333333333333334
Top-50 accuracy: 52 / 300 = 0.17333333333333334
Duration: 0:02:17.019989

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test 300...
Top-1 accuracy: 32 / 300 = 0.10666666666666667
Top-3 accuracy: 42 / 300 = 0.14
Top-5 accuracy: 44 / 300 = 0.14666666666666667
Top-10 accuracy: 47 / 300 = 0.15666666666666668
Top-50 accuracy: 52 / 300 = 0.17333333333333334
Duration: 0:02:16.868140

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset train 300...
Top-1 accuracy: 32 / 300 = 0.10666666666666667
Top-3 accuracy: 47 / 300 = 0.15666666666666668
Top-5 accuracy: 51 / 300 = 0.17
Top-10 accuracy: 61 / 300 = 0.20333333333333334
Top-50 accuracy: 71 / 300 = 0.23666666666666666
Duration: 0:02:36.616850

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset val 300...
Top-1 accuracy: 36 / 300 = 0.12
Top-3 accuracy: 51 / 300 = 0.17
Top-5 accuracy: 54 / 300 = 0.18
Top-10 accuracy: 62 / 300 = 0.20666666666666667
Top-50 accuracy: 79 / 300 = 0.2633333333333333
Duration: 0:02:40.183369

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test 300...
Top-1 accuracy: 40 / 300 = 0.13333333333333333
Top-3 accuracy: 55 / 300 = 0.18333333333333332
Top-5 accuracy: 58 / 300 = 0.19333333333333333
Top-10 accuracy: 67 / 300 = 0.22333333333333333
Top-50 accuracy: 86 / 300 = 0.2866666666666667
Duration: 0:02:35.883291

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset train 300...
Top-1 accuracy: 139 / 300 = 0.4633333333333333
Top-3 accuracy: 180 / 300 = 0.6
Top-5 accuracy: 187 / 300 = 0.6233333333333333
Top-10 accuracy: 196 / 300 = 0.6533333333333333
Top-50 accuracy: 216 / 300 = 0.72
Duration: 0:02:19.220286

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset val 300...
Top-1 accuracy: 95 / 300 = 0.31666666666666665
Top-3 accuracy: 117 / 300 = 0.39
Top-5 accuracy: 128 / 300 = 0.4266666666666667
Top-10 accuracy: 136 / 300 = 0.4533333333333333
Top-50 accuracy: 162 / 300 = 0.54
Duration: 0:02:16.432741

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test 300...
Top-1 accuracy: 88 / 300 = 0.29333333333333333
Top-3 accuracy: 118 / 300 = 0.3933333333333333
Top-5 accuracy: 127 / 300 = 0.42333333333333334
Top-10 accuracy: 136 / 300 = 0.4533333333333333
Top-50 accuracy: 154 / 300 = 0.5133333333333333
Duration: 0:02:18.206028

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test...
Top-1 accuracy: 434 / 5835 = 0.07437874892887747
Top-3 accuracy: 619 / 5835 = 0.10608397600685518
Top-5 accuracy: 706 / 5835 = 0.12099400171379605
Top-10 accuracy: 826 / 5835 = 0.14155955441302484
Top-50 accuracy: 1066 / 5835 = 0.18269065981148244
Duration: 0:48:04.773285

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test...
Top-1 accuracy: 691 / 6545 = 0.10557677616501146
Top-3 accuracy: 883 / 6545 = 0.13491214667685256
Top-5 accuracy: 975 / 6545 = 0.1489686783804431
Top-10 accuracy: 1071 / 6545 = 0.16363636363636364
Top-50 accuracy: 1281 / 6545 = 0.19572192513368983
Duration: 0:47:44.987059

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test...
Top-1 accuracy: 166 / 1077 = 0.1541318477251625
Top-3 accuracy: 224 / 1077 = 0.20798514391829154
Top-5 accuracy: 254 / 1077 = 0.23584029712163418
Top-10 accuracy: 290 / 1077 = 0.2692664809656453
Top-50 accuracy: 356 / 1077 = 0.3305478180129991
Duration: 0:08:45.925772

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test...
Top-1 accuracy: 391 / 1098 = 0.3561020036429873
Top-3 accuracy: 516 / 1098 = 0.46994535519125685
Top-5 accuracy: 548 / 1098 = 0.4990892531876138
Top-10 accuracy: 594 / 1098 = 0.5409836065573771
Top-50 accuracy: 672 / 1098 = 0.6120218579234973
Duration: 0:08:04.131619

