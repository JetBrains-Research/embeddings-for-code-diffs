public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 a = METHOD_3 ( ) ; java.util.ArrayList < TYPE_1 > result = new java.util.ArrayList < TYPE_1 > ( ) ; while ( a != null ) { result . add ( a ) ; a = METHOD_3 ( ) ; } return result ; }
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 t = TYPE_1 . METHOD_3 ( ( INT_1 * INT_2 ) ) ; METHOD_4 ( new TYPE_2 ( ) , METHOD_5 ( ) . add ( t ) ) ; java.lang.System.out.println ( ( STRING_1 + ( METHOD_6 ( ) . METHOD_7 ( ) ) ) ) ; TYPE_3 . METHOD_8 ( this . METHOD_9 ( ) , STRING_2 , VAR_2 ) ; }
public void METHOD_1 ( ) { int VAR_1 = 0 ; try { VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.Exception VAR_3 ) { } if ( VAR_1 == INT_1 ) { TYPE_1 VAR_4 = METHOD_3 ( ) ; METHOD_4 ( VAR_4 ) ; } else { VAR_5 . append ( VAR_2 ) ; } }
private void execute ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { METHOD_1 ( ) ; for ( final TYPE_3 VAR_3 : VAR_1 . METHOD_2 ( ) ) { for ( TYPE_4 VAR_4 : VAR_3 . METHOD_3 ( ) ) { try { METHOD_4 ( ) ; VAR_4 = VAR_2 . METHOD_5 ( VAR_4 ) ; METHOD_6 ( ) ; } catch ( final java.lang.Exception VAR_5 ) { TYPE_5 . error ( VAR_5 . METHOD_7 ( ) , VAR_5 ) ; } } } METHOD_8 ( VAR_1 ) ; METHOD_9 ( ) ; }
private void METHOD_1 ( final TYPE_1 VAR_1 ) { java.lang.System.out.println ( STRING_1 ) ; if ( VAR_1 instanceof TYPE_2 ) { TYPE_2 msg = ( ( TYPE_2 ) ( VAR_1 ) ) ; METHOD_2 ( msg , msg . METHOD_3 ( ) ) ; } else if ( VAR_1 instanceof TYPE_3 ) { TYPE_3 msg = ( ( TYPE_3 ) ( VAR_1 ) ) ; METHOD_4 ( msg , msg . METHOD_3 ( ) ) ; } }
protected java.lang.String METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( path == null ) || ( VAR_1 == null ) ) { return STRING_1 ; } if ( ( path . startsWith ( STRING_2 ) ) || ( path . startsWith ( STRING_3 ) ) ) { return path ; } return ( ( ( STRING_4 + path ) + STRING_5 ) + VAR_1 ) + STRING_6 ; }
private void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.util.Date date ) { METHOD_2 ( VAR_1 ) ; METHOD_2 ( ( VAR_1 + INT_1 ) ) ; long VAR_4 = ( date . getTime ( ) ) - ( new java.util.Date ( ) . getTime ( ) ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , boolean commit ) throws java.io.IOException { java.util.HashSet < TYPE_2 > VAR_2 = this . METHOD_2 ( VAR_1 ) ; java.util.HashSet < TYPE_2 > VAR_3 = ( ( java.util.HashSet < TYPE_2 > ) ( VAR_2 . METHOD_3 ( ) ) ) ; for ( TYPE_2 VAR_4 : VAR_3 ) { this . METHOD_4 ( VAR_1 , VAR_4 ) ; } }
private java.lang.String METHOD_1 ( ) { java.lang.String url = null ; try { url = VAR_1 . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_1 VAR_3 ) { TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_4 ) ) + ( VAR_3 . METHOD_4 ( ) ) ) , VAR_3 ) ; return url ; } catch ( java.lang.Exception VAR_3 ) { TYPE_2 . METHOD_3 ( ( ( STRING_2 + ( VAR_4 ) ) + ( VAR_3 . METHOD_4 ( ) ) ) , VAR_3 ) ; } return url ; }
public TYPE_1 start ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; java.util.List < TYPE_4 > VAR_3 = VAR_4 ; TYPE_1 VAR_5 = new TYPE_1 ( STRING_1 ) ; VAR_5 . METHOD_4 ( STRING_2 , VAR_3 ) ; return VAR_5 ; }
private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( VAR_3 ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; VAR_1 . METHOD_4 ( ) . add ( VAR_3 , VAR_2 ) . commit ( ) ; VAR_4 = new TYPE_4 ( INT_1 , INT_2 ) { public void METHOD_5 ( long VAR_5 ) { } public void METHOD_6 ( ) { METHOD_7 ( ) ; METHOD_8 ( ) ; } } ; VAR_4 . start ( ) ; } }
public static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { java.util.List < TYPE_1 > result = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { result . add ( TYPE_3 . METHOD_1 ( VAR_2 ) ) ; } return result ; }
private int METHOD_1 ( double [ ] VAR_1 ) { double VAR_2 = VAR_1 [ 0 ] ; int VAR_3 = 0 ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) > 0 ) { if ( ( java.lang.Double . METHOD_2 ( VAR_1 [ i ] , VAR_2 ) ) > 1 ) { VAR_2 = VAR_1 [ i ] ; VAR_3 = i ; } } } return VAR_3 ; }
void METHOD_1 ( ) { int tmp = 1 ; for ( int i = 1 ; i <= ( ( int ) ( ( double ) ( VAR_1 . data ) ) ) ; i ++ ) { tmp *= i ; } VAR_1 . data = ( ( double ) ( tmp ) ) ; }
public void METHOD_1 ( int VAR_1 , int VAR_2 , android.content.Intent data ) { if ( VAR_2 == ( VAR_3 ) ) { if ( VAR_1 == ( VAR_4 ) ) { TYPE_1 VAR_5 = data . getData ( ) ; if ( null != VAR_5 ) { java.lang.String path = METHOD_2 ( VAR_5 ) ; VAR_6 . METHOD_3 ( VAR_5 ) ; } } } }
public static void METHOD_1 ( int [ ] [ ] VAR_1 ) { for ( int VAR_2 = 0 ; VAR_2 < ( VAR_1 . length ) ; VAR_2 ++ ) { for ( int VAR_3 = 0 ; VAR_3 < INT_1 ; VAR_3 ++ ) { java.util.Random VAR_4 = new java.util.Random ( ) ; VAR_1 [ VAR_2 ] [ VAR_3 ] = VAR_4 . METHOD_2 ( INT_2 ) ; } } }
public static TYPE_1 METHOD_1 ( java.lang.String label ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( label ) ; VAR_1 . add ( VAR_2 ) ; TYPE_3 text = new TYPE_3 ( ) ; VAR_1 . add ( text ) ; return VAR_1 ; }
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3 = null ; try { VAR_3 = new TYPE_3 ( VAR_1 , VAR_2 ) ; return new TYPE_1 ( VAR_3 . METHOD_2 ( ) ) ; } catch ( TYPE_4 VAR_4 ) { return null ; } finally { TYPE_5 . METHOD_3 ( VAR_3 ) ; } }
private TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) throws TYPE_3 { TYPE_1 VAR_3 ; if ( VAR_1 == null ) { VAR_3 = VAR_4 . METHOD_2 ( ) ; } else { VAR_3 = VAR_1 ; } final java.lang.String name = VAR_2 . getValue ( "name" ) ; final java.lang.String VAR_5 = VAR_2 . getValue ( STRING_1 ) ; TYPE_4 . info ( STRING_2 , VAR_3 . METHOD_3 ( ) , name , VAR_5 ) ; return VAR_3 . METHOD_4 ( name , VAR_5 ) ; }
public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_1 < TYPE_2 > ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_1 ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { VAR_3 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_2 ) ) ) ; TYPE_3 . METHOD_3 ( STRING_1 , VAR_3 . getText ( ) . toString ( ) ) ; VAR_4 = VAR_3 . getText ( ) . toString ( ) ; if ( VAR_4 . equals ( STRING_2 ) ) { VAR_5 = STRING_3 ; } else { VAR_5 = STRING_4 ; } }
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws TYPE_3 { try { return METHOD_2 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = VAR_5 ; java.lang.String msg = VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; throw new TYPE_3 ( VAR_4 , msg , null , VAR_3 ) ; } }
public TYPE_1 METHOD_1 ( java.lang.String path ) throws TYPE_2 { set ( VAR_1 , path ) ; TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 class ) ; java.util.Scanner VAR_4 = new java.util.Scanner ( new java.io.FileInputStream ( path ) ) ; while ( VAR_4 . METHOD_3 ( ) ) { java.lang.String VAR_5 = VAR_4 . METHOD_4 ( ) ; VAR_6 . add ( VAR_5 ) ; VAR_2 . error ( ( STRING_1 + VAR_5 ) ) ; } return this ; }
private void METHOD_1 ( ) { VAR_1 = false ; if ( ( ( VAR_2 ) >= ( VAR_3 . size ( ) ) ) && ( ! ( VAR_4 ) ) ) { METHOD_2 ( ) ; } else { try { VAR_5 . METHOD_3 ( VAR_3 . get ( VAR_2 ) ) ; VAR_5 . METHOD_4 ( ) ; VAR_5 . start ( ) ; } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_5 ( ) ; } ( VAR_2 ) ++ ; } }
public void METHOD_1 ( ) { VAR_1 = false ; try { METHOD_2 ( ) ; } catch ( java.lang.NullPointerException a ) { } VAR_2 = - 1 ; METHOD_3 ( ) ; VAR_3 . METHOD_4 ( 0 ) ; VAR_4 = false ; if ( VAR_5 ) { VAR_6 . METHOD_5 ( ) ; } if ( VAR_7 ) { a . METHOD_5 ( ) ; } VAR_1 = true ; }
public void METHOD_1 ( ) { for ( int i = INT_1 ; i > 0 ; i -- ) { int VAR_1 = ( ( int ) ( ( java.lang.Math.random ( ) ) * ( i + 1 ) ) ) ; TYPE_1 temp = VAR_2 [ i ] ; VAR_2 [ i ] = VAR_2 [ VAR_3 ] ; VAR_2 [ VAR_1 ] = temp ; } VAR_4 = 0 ; }
private static boolean METHOD_1 ( int x , int y , int VAR_1 , int height , TYPE_1 VAR_2 , TYPE_2 < TYPE_1 > VAR_3 ) { for ( TYPE_1 VAR_4 : VAR_3 ) { if ( VAR_2 . METHOD_1 ( x , y , VAR_1 , height ) ) { return true ; } } return false ; }
public void METHOD_1 ( ) { TYPE_1 . i ( VAR_1 , STRING_1 ) ; if ( ( VAR_2 ) == false ) { TYPE_1 . i ( VAR_1 , STRING_2 ) ; METHOD_2 ( ) ; VAR_2 = true ; } if ( VAR_3 ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_3 ) ; } else { METHOD_4 ( ) ; TYPE_1 . i ( VAR_1 , STRING_4 ) ; VAR_3 = true ; VAR_4 = new java.util.ArrayList < > ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this ) { VAR_2 . remove ( VAR_1 ) ; if ( ( ( VAR_3 ) > 0 ) && ( VAR_2 . isEmpty ( ) ) ) { METHOD_2 ( ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_3 ( ) ; VAR_4 = null ; } } } }
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( ! ( TYPE_3 . getType ( ) . equals ( VAR_1 . getType ( ) ) ) ) ) && ( ! ( TYPE_4 . getType ( ) . equals ( VAR_1 . getType ( ) ) ) ) ) { throw new TYPE_2 ( ( ( STRING_1 + ( VAR_1 . getType ( ) ) ) + STRING_2 ) ) ; } }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { double VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; int VAR_3 = TYPE_4 . METHOD_5 ( VAR_4 , VAR_5 ) ; VAR_2 = METHOD_6 ( VAR_2 , VAR_3 ) ; return new TYPE_1 ( VAR_6 , VAR_2 , this , VAR_1 ) ; }
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 0 ) . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_2 ( 1 ) . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_2 ( INT_1 ) . METHOD_3 ( VAR_4 ) ; VAR_1 . METHOD_2 ( INT_2 ) . METHOD_3 ( VAR_5 ) ; }
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 context ) { final long start = TYPE_3 . METHOD_2 ( ) ; final java.util.List < TYPE_1 > list = TYPE_4 . METHOD_3 ( context ) ; java.lang.System.out.println ( ( ( STRING_1 + ( ( TYPE_3 . METHOD_2 ( ) ) - start ) ) + STRING_2 ) ) ; return list ; }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_2 . METHOD_3 ( VAR_4 ) ) ) ; for ( TYPE_4 VAR_5 : VAR_6 ) { TYPE_5 VAR_7 = new TYPE_5 ( VAR_5 . name , VAR_5 . url ) ; VAR_2 . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_7 ) , VAR_7 ) ; VAR_3 . add ( VAR_7 ) ; } VAR_3 . METHOD_6 ( ) ; }
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String [ ] VAR_2 = new java.lang.String [ ] { VAR_3 , VAR_4 , VAR_5 , VAR_6 } ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { if ( ! ( TYPE_2 . isEmpty ( VAR_2 [ i ] ) ) ) { return VAR_2 [ i ] ; } } return null ; }
public java.lang.Object METHOD_1 ( ) { if ( null != ( VAR_1 ) ) { return VAR_1 ; } try { long id = ( ( java.lang.Long ) ( super . METHOD_2 ( ) ) ) ; VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; return VAR_1 ; } catch ( TYPE_2 | TYPE_3 VAR_2 ) { VAR_3 . METHOD_6 ( VAR_4 , STRING_1 , VAR_2 ) ; return null ; } }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int i ) throws TYPE_3 { try { return new TYPE_1 ( VAR_1 . getInt ( "id" ) , VAR_1 . getString ( STRING_1 ) , VAR_1 . getString ( STRING_2 ) , VAR_1 . getString ( STRING_3 ) , VAR_1 . getString ( STRING_4 ) , VAR_1 . getString ( STRING_5 ) , VAR_1 . getString ( STRING_6 ) , VAR_1 . getInt ( STRING_7 ) ) ; } catch ( TYPE_3 VAR_2 ) { throw new TYPE_4 ( VAR_2 ) ; } }
< TYPE_1 extends TYPE_2 < TYPE_1 > > void METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_1 [ ] VAR_2 ) { java.util.List < TYPE_1 > list = java.util.Arrays.asList ( VAR_1 ) ; TYPE_3 . METHOD_2 ( list ) ; boolean VAR_3 = TYPE_4 . equals ( list . METHOD_3 ( new java.lang.Object [ VAR_1 . length ] ) , VAR_1 ) ; assertTrue ( VAR_3 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { final java.lang.String VAR_2 = VAR_1 . getText ( ) ; if ( METHOD_2 ( VAR_2 ) ) { if ( ! ( ( ( ( ( VAR_3 ) && ( METHOD_3 ( VAR_1 ) ) ) || ( METHOD_4 ( VAR_2 ) ) ) || ( ( VAR_4 ) && ( METHOD_5 ( VAR_2 , VAR_5 ) ) ) ) || ( ( VAR_6 ) && ( METHOD_5 ( VAR_2 , VAR_7 ) ) ) ) ) { METHOD_6 ( VAR_1 . METHOD_7 ( ) , STRING_1 ) ; } } }
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_3 ; } else if ( VAR_1 . METHOD_3 ( ) ) { return VAR_4 ; } else { return VAR_5 ; } } else { return VAR_6 ; } }
private java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 ) { if ( VAR_2 ) { return new java.util.ArrayList < TYPE_1 > ( 0 ) ; } java.util.List < TYPE_1 > VAR_3 = VAR_4 . METHOD_1 ( VAR_1 ) ; if ( ( VAR_1 > 0 ) && ( ( VAR_3 . size ( ) ) == 0 ) ) { VAR_4 . METHOD_2 ( ) ; VAR_2 = true ; } return VAR_3 ; }
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } else { VAR_1 . METHOD_6 ( ( ( METHOD_7 ( ) ) & INT_1 ) ) ; } VAR_3 += VAR_1 . METHOD_8 ( ) ; for ( TYPE_2 VAR_4 : METHOD_9 ( ) . VAR_5 ) { VAR_4 . METHOD_10 ( VAR_1 ) ; } return VAR_1 ; }
private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , final java.util.Map < java.lang.String , TYPE_1 > VAR_2 , final java.util.Set < java.lang.String > VAR_3 ) { if ( ( ( ( VAR_1 == null ) || ( VAR_2 == null ) ) || ( VAR_1 . isEmpty ( ) ) ) || ( VAR_3 != null ) ) { return ; } TYPE_2 . METHOD_1 ( null , VAR_1 , VAR_2 , VAR_3 ) ; }
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( context ) ; if ( ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) > ( - 1 ) ) { if ( ( VAR_3 ) < 0 ) { VAR_3 = 0 ; } } else { VAR_1 . show ( ) ; TYPE_3 . get ( ) . METHOD_5 ( new TYPE_4 ( ) { public void METHOD_6 ( ) { VAR_1 . METHOD_7 ( ) ; } } ) ; } }
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 != null ) && ( VAR_2 . equals ( STRING_2 ) ) ) { TYPE_4 VAR_3 = new TYPE_4 ( new TYPE_5 ( ) ) ; java.util.List < TYPE_6 > VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_3 , VAR_4 ) ; TYPE_7 VAR_5 = METHOD_5 ( ) . METHOD_6 ( STRING_4 ) ; VAR_5 . METHOD_7 ( VAR_1 , response ) ; } }
void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 = java.util.Calendar.getInstance ( ) ; VAR_3 . set ( VAR_1 , ( VAR_2 - 1 ) , 1 ) ; VAR_3 . set ( VAR_4 , VAR_3 . METHOD_2 ( VAR_4 ) ) ; java.util.Date date = VAR_3 . getTime ( ) ; TYPE_1 TYPE_2 = new TYPE_3 ( STRING_1 , VAR_5 ) ; VAR_6 = TYPE_2 . format ( date ) ; }
public void METHOD_1 ( TYPE_1 out ) throws java.io.IOException { super . METHOD_1 ( out ) ; int VAR_1 = VAR_2 . size ( ) ; out . METHOD_2 ( VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { TYPE_2 VAR_3 = VAR_2 . get ( i ) ; out . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; out . METHOD_3 ( VAR_3 . METHOD_5 ( ) ) ; } }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . VAR_2 ; if ( VAR_3 ) { super . METHOD_1 ( ) ; } else if ( ( VAR_4 ) == null ) { VAR_5 . METHOD_1 ( ) ; VAR_6 = VAR_5 ; } else { this . VAR_7 = TYPE_2 . METHOD_2 ( ) . VAR_8 . METHOD_3 ( ) ; this . VAR_9 = TYPE_2 . METHOD_2 ( ) . VAR_10 . METHOD_3 ( ) ; } }
public static int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( VAR_2 == 0 ) return 1 ; if ( VAR_2 == 1 ) return VAR_1 ; final int VAR_4 = TYPE_1 . METHOD_2 ( VAR_1 , ( VAR_2 / INT_1 ) ) ; if ( ( VAR_2 % INT_1 ) == 0 ) return ( VAR_4 * VAR_4 ) % VAR_3 ; else return ( ( ( VAR_4 * VAR_4 ) % VAR_3 ) * VAR_1 ) % VAR_3 ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 n : VAR_1 ) { if ( ( n . type ( ) ) == ( VAR_2 ) ) { switch ( n . getName ( ) ) { case STRING_1 : METHOD_2 ( ( ( TYPE_3 ) ( n ) ) ) ; break ; } } } }
private void METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { if ( ( VAR_3 . METHOD_2 ( ) ) != null ) { VAR_3 . METHOD_3 ( null ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( 0 ) ; } } }
private java.lang.CharSequence METHOD_1 ( final int VAR_1 , final TYPE_1 VAR_2 , final java.lang.String VAR_3 ) { if ( 0 == VAR_1 ) { return STRING_1 ; } return java.lang.String.format ( ( ( ( VAR_3 + STRING_2 ) + VAR_3 ) + STRING_3 ) , java.lang.Integer . METHOD_2 ( VAR_1 ) , METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) . toString ( ) ) ) ; }
public static TYPE_1 METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return VAR_3 ; case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_7 ; case VAR_8 : return VAR_9 ; case VAR_10 : return VAR_11 ; case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; case VAR_16 : return VAR_17 ; } throw new TYPE_2 ( ( STRING_1 + VAR_1 ) ) ; }
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 = false ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; java.io.File VAR_3 = new java.io.File ( TYPE_1 . METHOD_5 ( null , VAR_4 ) . METHOD_6 ( ) ) ; java.io.File VAR_5 = new java.io.File ( TYPE_1 . METHOD_5 ( null , VAR_6 ) . METHOD_6 ( ) ) ; METHOD_7 ( VAR_3 , VAR_5 ) ; }
public void METHOD_1 ( java.lang.String name , int VAR_1 ) { if ( ( name . length ( ) ) > INT_1 ) { name = name . substring ( 0 , INT_1 ) ; } for ( TYPE_1 VAR_2 : VAR_3 . values ( ) ) { TYPE_2 obj = VAR_2 . METHOD_2 ( VAR_4 ) ; if ( VAR_1 == 0 ) { METHOD_3 ( obj , name ) . METHOD_1 ( 1 ) ; } METHOD_3 ( obj , name ) . METHOD_1 ( VAR_1 ) ; } }
public void METHOD_1 ( ) throws java.lang.Exception { final java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ( ( long ) ( VAR_1 . size ( ) ) ) ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 , VAR_4 ) ; final long VAR_5 = VAR_6 . METHOD_5 ( VAR_3 ) ; TYPE_2 . assertThat ( VAR_5 ) . METHOD_6 ( STRING_1 ) . METHOD_7 ( VAR_1 . size ( ) ) ; }
private void METHOD_1 ( ) { android.view.View view = this . METHOD_2 ( ) ; if ( view != null ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_3 ( VAR_2 ) ) ) ; VAR_1 . METHOD_4 ( view . METHOD_5 ( ) , 0 ) ; } if ( ( VAR_3 . METHOD_6 ( ) ) == ( VAR_4 ) ) { VAR_3 . METHOD_7 ( VAR_5 ) ; } else { VAR_3 . METHOD_7 ( VAR_6 ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( STRING_1 , ( ( VAR_2 + STRING_2 ) + VAR_3 ) , false ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_5 , VAR_4 ) ; }
public void METHOD_1 ( android.view.View VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_3 . METHOD_5 ( 0 , true ) ; VAR_5 . METHOD_6 ( getString ( VAR_6 ) , VAR_7 [ 0 ] ) ; VAR_5 . METHOD_7 ( ) ; VAR_8 . METHOD_8 ( ) ; VAR_9 . setText ( METHOD_9 ( 0 , VAR_7 [ 0 ] ) ) ; }
public static void METHOD_1 ( byte [ ] [ ] VAR_1 , int VAR_2 , int VAR_3 , int y ) { for ( int x = TYPE_1 . min ( VAR_2 , VAR_3 ) ; x < ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) ; x ++ ) { VAR_1 [ y ] [ x ] = ( ( byte ) ( VAR_4 ) ) ; } }
public java.util.Iterator < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > set = new java.util.HashSet < TYPE_1 > ( ) ; for ( TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; ! ( VAR_3 . isEmpty ( ) ) ; VAR_1 = VAR_2 . METHOD_2 ( ) ) { set . add ( VAR_1 ) ; if ( METHOD_3 ( VAR_1 , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ) { set . remove ( VAR_1 ) ; } } return set . iterator ( ) ; }
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { java.util.List < ? extends TYPE_1 > VAR_3 = VAR_1 . METHOD_4 ( ) ; for ( TYPE_1 VAR_4 : VAR_3 ) java.lang.System.out.println ( ( ( VAR_4 . METHOD_5 ( ) ) + "\n" ) ) ; java.lang.String VAR_5 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( VAR_5 , VAR_3 ) ; } }
public java.lang.Double [ ] METHOD_1 ( ) { java.util.ArrayList < java.lang.Double > VAR_1 = VAR_2 . remove ( 0 ) ; java.lang.Double [ ] VAR_3 = new java.lang.Double [ INT_1 ] ; for ( int i = 0 ; i < INT_1 ; i ++ ) { VAR_3 [ i ] = VAR_1 . remove ( 0 ) ; } return VAR_3 ; }
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; TYPE_2 result = METHOD_4 ( VAR_2 ) ; TYPE_3 listener = new TYPE_3 ( ) ; listener . METHOD_5 ( result ) ; listener . METHOD_6 ( result ) ; java.io.File file = TYPE_1 . METHOD_7 ( ) ; TYPE_4 . METHOD_8 ( file . METHOD_9 ( ) ) ; }
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_1 > value = null ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( ) ; value . add ( VAR_2 ) ; value . add ( VAR_3 ) ; return value ; }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( INT_1 , INT_2 , INT_3 ) ; TYPE_1 VAR_2 = null ; METHOD_3 ( VAR_3 . METHOD_4 ( VAR_1 ) ) . METHOD_5 ( VAR_1 ) ; java.lang.Object VAR_4 = VAR_5 . METHOD_6 ( VAR_2 , VAR_1 , VAR_6 class , VAR_6 class ) ; TYPE_2 . assertThat ( VAR_4 , TYPE_3 . METHOD_7 ( VAR_6 class ) ) ; TYPE_2 . assertEquals ( VAR_1 , VAR_4 ) ; METHOD_8 ( VAR_3 , METHOD_9 ( 1 ) ) . METHOD_4 ( VAR_1 ) ; }
private void METHOD_1 ( java.lang.Throwable VAR_1 ) throws java.lang.Exception { TYPE_1 method = VAR_2 class . METHOD_2 ( STRING_1 ) ; java.lang.Object VAR_3 = new TYPE_2 ( VAR_1 ) ; new TYPE_3 ( VAR_3 , method ) . METHOD_3 ( VAR_4 , null ) ; TYPE_4 . fail ( STRING_2 ) ; }
private TYPE_1 METHOD_1 ( final java.util.List < TYPE_2 > VAR_1 , final TYPE_3 VAR_2 , final TYPE_4 VAR_3 ) throws java.io.IOException { final TYPE_5 VAR_4 = this . VAR_5 . METHOD_2 ( VAR_2 ) ; final TYPE_6 < java.lang.String , TYPE_7 > VAR_6 = TYPE_8 . METHOD_3 ( VAR_1 ) ; final TYPE_9 VAR_7 = VAR_4 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_4 . METHOD_4 ( ) ) . METHOD_6 ( TYPE_8 . METHOD_7 ( VAR_7 . METHOD_8 ( ) , VAR_6 ) ) ; return new TYPE_10 ( VAR_3 ) ; }
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 class ) ; TYPE_4 VAR_3 = new TYPE_5 ( VAR_4 , VAR_1 , null , null , null , null , null ) ; TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_5 ) ) . METHOD_5 ( new TYPE_6 ( STRING_1 ) ) ; VAR_3 . METHOD_6 ( VAR_5 ) ; }
private boolean METHOD_1 ( int VAR_1 , int time , int [ ] date ) { return ( ( ( VAR_1 > time ) && ( ( date [ VAR_2 ] ) == ( VAR_3 ) ) ) && ( ( date [ VAR_4 ] ) == ( VAR_5 ) ) ) && ( ( date [ VAR_6 ] ) == ( VAR_7 ) ) ; }
public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { switch ( VAR_3 ) { case 1 : TYPE_2 VAR_4 = new TYPE_2 ( ) ; return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ; case INT_1 : TYPE_3 VAR_5 = new TYPE_3 ( ) ; return VAR_5 . METHOD_2 ( VAR_1 , VAR_2 ) ; } return null ; }
public static void METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_1 VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_1 ) { if ( VAR_3 == null ) { continue ; } switch ( VAR_3 . METHOD_2 ( ) ) { case VAR_4 : case VAR_5 : VAR_6 = VAR_7 ; VAR_8 = VAR_9 ; break ; } } }
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . i ( VAR_1 , STRING_1 ) ; android.widget.Button VAR_2 = ( ( android.widget.Button ) ( VAR_3 . METHOD_2 ( VAR_4 ) ) ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( android.view.View VAR_5 ) { TYPE_1 . i ( VAR_1 , STRING_2 ) ; VAR_6 . METHOD_5 ( ) ; } } ) ; }
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = this . VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } return this . METHOD_2 ( VAR_2 ) ; }
protected TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { try { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_1 ( VAR_2 ) ; VAR_1 = METHOD_3 ( VAR_3 ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_6 . METHOD_4 ( VAR_7 , VAR_5 , VAR_8 ) ; throw new TYPE_4 ( VAR_5 ) ; } return VAR_1 ; }
public int compareTo ( java.lang.Object t ) { if ( ( VAR_1 ) > ( ( ( TYPE_1 ) ( t ) ) . VAR_1 ) ) return 1 ; else if ( ( VAR_1 ) < ( ( ( TYPE_1 ) ( t ) ) . VAR_1 ) ) return - 1 ; else return 0 ; }
public java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { java.util.Map < java.lang.String , java.lang.Object > result = new java.util.HashMap < > ( ) ; result . METHOD_2 ( VAR_1 ) ; result . METHOD_2 ( VAR_2 ) ; return result ; }
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 errors ) { java.lang.String VAR_3 = STRING_1 ; java.lang.String VAR_4 = STRING_2 ; if ( errors . METHOD_2 ( ) ) { return VAR_3 ; } TYPE_4 VAR_5 = VAR_6 . METHOD_3 ( VAR_2 ) ; VAR_6 . METHOD_4 ( VAR_5 ) ; VAR_1 . METHOD_5 ( STRING_3 , VAR_5 ) ; return VAR_4 ; }
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( VAR_2 [ 1 ] , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_2 [ 0 ] , ( ( VAR_3 ) - 1 ) ) ; if ( ( VAR_3 ) == 1 ) { fail ( STRING_1 ) ; } assertThat ( VAR_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( null ) ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return super . METHOD_1 ( ) . equals ( VAR_1 . METHOD_1 ( ) ) ; }
private static TYPE_1 METHOD_1 ( TYPE_1 field ) { TYPE_1 [ ] VAR_1 = field . METHOD_2 ( ) ; if ( ( ( ( VAR_1 [ 0 ] ) != null ) && ( STRING_1 . equals ( VAR_1 [ 0 ] . name ( ) ) ) ) && ( TYPE_2 . equals ( VAR_1 [ 0 ] . type ( ) ) ) ) { return VAR_1 [ 0 ] . METHOD_2 ( ) [ 0 ] ; } return field ; }
private java.util.Map < java.lang.String , java.util.List < TYPE_1 > > METHOD_1 ( java.util.Map < java.lang.String , java.util.List < TYPE_1 > > VAR_1 ) { java.util.Map < java.lang.String , java.util.List < TYPE_1 > > VAR_2 = new java.util.HashMap < > ( ) ; METHOD_1 ( VAR_1 , VAR_2 ) ; return VAR_2 ; }
private void METHOD_1 ( int ... VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ( INT_1 * INT_2 ) ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) != 0 ) { VAR_2 . set ( i ) ; } } TYPE_2 . assertThat ( VAR_3 . METHOD_2 ( ) ) . METHOD_3 ( VAR_2 ) ; }
public void METHOD_1 ( boolean VAR_1 ) { if ( ( this . VAR_1 ) && ( ! VAR_1 ) ) { TYPE_1 . METHOD_2 ( ) ; } boolean VAR_2 = VAR_1 ; this . VAR_1 = VAR_1 ; if ( VAR_2 && ( this . METHOD_3 ( ) ) ) this . METHOD_4 ( this . VAR_3 ) ; }
protected TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . getString ( STRING_1 , null ) ; java.lang.String VAR_3 = VAR_2 . getString ( STRING_2 , null ) ; java.lang.String url = VAR_2 . getString ( STRING_3 ) ; return new TYPE_2 ( VAR_1 , VAR_3 , url ) ; }
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , ( STRING_1 + ( VAR_2 ) ) ) ; METHOD_3 ( ) ; if ( ( state ) != ( VAR_3 ) ) { final long VAR_4 = TYPE_2 . METHOD_4 ( ) ; state = VAR_3 ; METHOD_5 ( ) ; final int VAR_5 = ( ( int ) ( TYPE_3 . METHOD_6 ( ( ( TYPE_2 . METHOD_4 ( ) ) - VAR_4 ) ) ) ) ; VAR_6 . METHOD_7 ( VAR_5 ) ; } }
public void METHOD_1 ( int VAR_1 , int VAR_2 ) { int VAR_3 = METHOD_2 ( VAR_1 ) ; int VAR_4 = METHOD_2 ( VAR_2 ) ; int VAR_5 = size ( VAR_3 ) ; int VAR_6 = size ( VAR_4 ) ; if ( VAR_5 > VAR_6 ) { id [ VAR_4 ] = VAR_3 ; size [ VAR_3 ] = VAR_5 + VAR_6 ; } else { id [ VAR_3 ] = VAR_4 ; size [ VAR_4 ] = VAR_5 + VAR_6 ; } }
private static synchronized void METHOD_1 ( java.lang.String key ) { if ( ( TYPE_1 . METHOD_2 ( ) . context ) == null ) { TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) ; return ; } TYPE_3 VAR_1 = TYPE_1 . METHOD_2 ( ) . context . METHOD_4 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_5 ( ) . remove ( key ) ; }
protected java.lang.Boolean METHOD_1 ( java.lang.Void ... params ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; if ( ! ( VAR_6 ) ) { VAR_7 = VAR_8 ; return false ; } TYPE_3 VAR_9 = new TYPE_3 ( VAR_2 , METHOD_3 ( ) ) ; TYPE_4 VAR_10 = VAR_9 . METHOD_4 ( VAR_11 ) ; if ( ! ( VAR_12 ) ) { VAR_7 = VAR_13 ; } VAR_14 = VAR_15 ; return true ; }
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( METHOD_2 ( ) ) ) || ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) { return new TYPE_2 ( 0 ) ; } return new TYPE_2 ( ( ( value ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . getValue ( ) ) ) ) ; }
public boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( this . VAR_1 . size ( ) ) != 0 ) { for ( int i = 0 ; i < ( this . VAR_1 . size ( ) ) ; i ++ ) { if ( this . VAR_1 . get ( i ) . equals ( VAR_1 ) ) { return true ; } else { return false ; } } } return false ; }
public java.util.List < java.lang.Integer > METHOD_1 ( ) { java.util.List < java.lang.Integer > result = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( java.util.Map.Entry < java.lang.Integer , java.lang.Boolean > VAR_1 : VAR_2 . METHOD_2 ( ) ) { if ( ( VAR_1 . getValue ( ) ) == false ) result . add ( VAR_1 . METHOD_3 ( ) ) ; } return result ; }
public void delete ( java.lang.String id ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { if ( ( VAR_2 . get ( i ) . getId ( ) . equals ( id ) ) && ( ( VAR_2 . get ( i ) ) != null ) ) { this . VAR_2 . delete ( java.lang.Integer.parseInt ( VAR_2 . get ( i ) . getId ( ) ) ) ; } } }
public java.util.ArrayList < java.lang.String > METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( VAR_2 . contains ( VAR_1 . get ( i ) . METHOD_2 ( ) ) ) ) VAR_2 . add ( VAR_1 . get ( i ) . METHOD_2 ( ) ) ; } return VAR_2 ; }
public int METHOD_1 ( int VAR_1 ) { this . VAR_2 . METHOD_2 ( ) ; try { ( this . VAR_3 ) -- ; while ( VAR_1 == ( VAR_4 ) ) { try { VAR_5 . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_6 ) { java.lang.Thread . METHOD_4 ( ) . METHOD_5 ( ) ; } } VAR_5 . METHOD_6 ( ) ; } finally { VAR_2 . METHOD_7 ( ) ; } return VAR_4 ; }
int METHOD_1 ( ) { java.lang.String VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_2 ) ) ) . METHOD_3 ( ) ; return ! ( TYPE_2 . isEmpty ( VAR_1 ) ) ? java.lang.Integer.parseInt ( VAR_1 . substring ( 0 , INT_1 ) ) : 0 ; }
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . init ( ) ; VAR_2 . init ( STRING_1 ) ; java.lang.Thread t = VAR_3 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , INT_1 , TYPE_2 . METHOD_4 ( VAR_4 class ) , INT_2 ) ; t . METHOD_5 ( ) ; TYPE_3 . assertEquals ( 1 , VAR_2 . METHOD_6 ( ) . size ( ) ) ; METHOD_7 ( 1 , VAR_1 ) ; }
private int METHOD_1 ( int VAR_1 ) throws java.io.IOException { int VAR_2 = 0 ; METHOD_2 ( ) ; if ( ( ( ( VAR_3 ) != CHAR_1 ) && ( ( VAR_3 ) != CHAR_2 ) ) && ( ( VAR_3 ) != CHAR_3 ) ) { METHOD_3 ( ) ; } while ( ( VAR_3 ) == CHAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( ++ VAR_2 ) == VAR_1 ) { break ; } } return VAR_2 ; }
private static java.lang.Class < ? > METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String name ) { try { final java.lang.Class < ? > VAR_2 = TYPE_1 . METHOD_2 ( name ) ; if ( VAR_2 != null ) { return VAR_2 ; } } catch ( TYPE_2 | java.lang.Exception VAR_3 ) { } final java.lang.Class < ? > VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 , name ) ; if ( VAR_4 != null ) { return VAR_4 ; } return null ; }
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { results = VAR_1 . select ( STRING_1 ) ; VAR_2 = VAR_1 . select ( STRING_2 ) ; for ( int j = 0 ; j < ( VAR_2 . size ( ) ) ; j ++ ) { results . add ( VAR_2 . get ( j ) ) ; } java.lang.System.out.println ( ( ( results . size ( ) ) + STRING_3 ) ) ; return results ; }
public void METHOD_1 ( final TYPE_1 VAR_1 , int position ) { java.lang.String VAR_2 = VAR_3 . get ( position ) ; if ( position == 0 ) { VAR_4 . METHOD_2 ( VAR_5 ) ; } else { if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) { TYPE_3 VAR_6 = ( ( TYPE_3 ) ( METHOD_4 ( VAR_2 ) ) ) ; TYPE_4 . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_7 ) . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_4 ) ; } } VAR_8 . setText ( VAR_2 ) ; }
public void METHOD_1 ( final TYPE_1 VAR_1 , final int status ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( VAR_1 . METHOD_3 ( ) . getName ( ) . contains ( STRING_3 ) ) { METHOD_4 ( VAR_1 ) ; } else if ( VAR_1 . METHOD_3 ( ) . getName ( ) . contains ( STRING_4 ) ) { METHOD_5 ( VAR_1 ) ; } else { } }
public void METHOD_1 ( ) { try { VAR_1 = new java.io.BufferedReader ( new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ) ; while ( ( ! ( VAR_3 ) ) || ( VAR_1 . METHOD_3 ( ) ) ) { java.lang.String line = VAR_1 . METHOD_4 ( ) ; if ( line != null ) { METHOD_5 ( line ) ; } java.lang.Thread . METHOD_6 ( VAR_4 ) ; } VAR_1 . METHOD_7 ( ) ; } catch ( java.lang.Exception VAR_5 ) { VAR_5 . METHOD_8 ( VAR_6 ) ; } }
public void METHOD_1 ( TYPE_1 ... VAR_1 ) { java.util.HashSet < TYPE_1 > VAR_2 = new java.util.HashSet < TYPE_1 > ( ) ; for ( TYPE_1 position : VAR_1 ) { position = position . METHOD_2 ( 1 ) ; METHOD_3 ( position , VAR_2 ) ; METHOD_3 ( position . METHOD_4 ( 1 ) , VAR_2 ) ; METHOD_3 ( position . METHOD_4 ( ( - 1 ) ) , VAR_2 ) ; } for ( TYPE_1 position : VAR_2 ) { VAR_3 . METHOD_5 ( position , true ) ; } }
private TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = null ; try { VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; } catch ( java.lang.Exception VAR_2 ) { } if ( VAR_1 == null ) { VAR_1 = STRING_2 ; } TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; return VAR_3 ; }
public java.lang.String getTime ( ) { java.lang.String VAR_1 = STRING_1 ; if ( ( VAR_2 ) < INT_1 ) VAR_1 += STRING_2 ; VAR_1 += ( java.lang.String . METHOD_1 ( VAR_2 ) ) + STRING_3 ; if ( ( VAR_3 ) < INT_1 ) VAR_1 += STRING_2 ; VAR_1 += java.lang.String . METHOD_1 ( VAR_3 ) ; return VAR_1 ; }
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws java.io.IOException , TYPE_3 { TYPE_4 [ ] VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , VAR_2 ) ; VAR_1 . METHOD_4 ( STRING_2 ) . METHOD_5 ( VAR_1 , response ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 . length ( ) ) == 0 ) && ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_3 ) ) ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; } else { java.lang.String item = STRING_1 ; long VAR_4 = TYPE_2 . METHOD_5 ( ) ; VAR_5 . add ( java.lang.String.format ( item , VAR_4 , VAR_1 . METHOD_2 ( ) ) ) ; java.lang.System.out.println ( ( ( VAR_1 . METHOD_6 ( ) ) + STRING_2 ) ) ; } }
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.System.out.println ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_1 . length ( ) ) ) ) ; if ( ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) return null ; for ( java.lang.String VAR_2 : VAR_3 ) { if ( VAR_2 . startsWith ( VAR_1 ) ) return VAR_2 ; } return null ; }
public static void main ( java.lang.String [ ] args ) { try { TYPE_1 . METHOD_1 ( VAR_1 , STRING_1 , new java.lang.Object [ ] { VAR_2 , TYPE_2 . METHOD_2 ( VAR_2 ) } ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_1 . METHOD_1 ( VAR_4 , STRING_2 , new java.lang.Object [ ] { VAR_3 . METHOD_3 ( ) } ) ; } }
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = new java.util.HashMap < > ( ) ; VAR_1 . put ( VAR_2 , VAR_3 ) ; VAR_1 . put ( VAR_4 , VAR_5 ) ; VAR_1 . put ( VAR_6 , VAR_7 ) ; VAR_1 . put ( VAR_8 , VAR_9 ) ; return null ; }
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_3 ( STRING_1 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_2 ( STRING_3 ) ; TYPE_4 . assertTrue ( STRING_4 , VAR_3 . METHOD_3 ( ) . equals ( STRING_5 ) ) ; }
public void add ( byte [ ] data , java.lang.String name , java.lang.String fileName , java.lang.String VAR_1 ) { VAR_2 . add ( VAR_3 ) ; VAR_2 . add ( this . VAR_4 ) ; VAR_2 . add ( VAR_3 ) ; VAR_2 . add ( METHOD_1 ( name , fileName , VAR_1 ) ) ; VAR_2 . add ( data ) ; }
private boolean METHOD_1 ( android.content.Context VAR_1 ) { TYPE_1 VAR_2 = TYPE_1 . get ( VAR_1 ) ; try { for ( TYPE_2 VAR_3 : VAR_2 . METHOD_2 ( ) ) { if ( VAR_4 . METHOD_3 ( STRING_1 ) ) { return true ; } } } catch ( java.lang.Exception VAR_5 ) { TYPE_3 . METHOD_4 ( VAR_6 , STRING_2 ) ; return true ; } return false ; }
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_3 , STRING_1 ) ; return null ; } if ( TYPE_3 . isEmpty ( VAR_1 ) ) { return null ; } TYPE_4 VAR_4 = VAR_5 . remove ( VAR_1 ) ; if ( ( ( VAR_4 != null ) && ( ( VAR_4 . data ) != null ) ) && ( VAR_4 . METHOD_4 ( ) ) ) { return VAR_4 . data ; } else { return null ; } }
public TYPE_1 METHOD_1 ( float value ) { if ( ( VAR_1 ) == ( VAR_2 ) ) return METHOD_2 ( new float [ ] { value } , new int [ ] { 1 } , new int [ ] { 1 } , 0 ) ; else if ( ( VAR_1 ) == ( VAR_3 ) ) return METHOD_1 ( ( ( double ) ( value ) ) ) ; else return METHOD_1 ( ( ( int ) ( value ) ) ) ; }
public void METHOD_1 ( ) { try { VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.System.out.println ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; while ( true ) { TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_3 TYPE_4 = new TYPE_3 ( VAR_3 , VAR_4 ) ; VAR_5 . METHOD_3 ( TYPE_4 ) ; java.lang.System.out.println ( STRING_3 ) ; } } catch ( java.io.IOException VAR_6 ) { VAR_6 . METHOD_4 ( ) ; } }
public void METHOD_1 ( java.lang.Boolean VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) && ( ( METHOD_3 ( ) ) != null ) ) { VAR_2 . METHOD_4 ( ( ! VAR_1 ) ) ; TYPE_1 . METHOD_5 ( getActivity ( ) , getActivity ( ) . getString ( ( VAR_1 ? VAR_3 : VAR_4 ) , METHOD_3 ( ) ) ) ; } }
public static boolean METHOD_1 ( final java.lang.String name ) { java.lang.String VAR_1 = name . replace ( STRING_1 , STRING_2 ) ; synchronized ( VAR_2 ) { java.util.Iterator < TYPE_1 > iterator = VAR_2 . iterator ( ) ; TYPE_1 VAR_3 ; while ( iterator . METHOD_2 ( ) ) { VAR_3 = iterator . METHOD_3 ( ) ; if ( VAR_3 . getName ( ) . METHOD_4 ( VAR_1 ) ) { iterator . remove ( ) ; return true ; } } } return false ; }
public int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = - 1 ; TYPE_2 p = VAR_1 . METHOD_2 ( ) ; java.lang.System.out.println ( ( ( ( STRING_1 + ( p . x ) ) + STRING_2 ) + ( p . y ) ) ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; VAR_2 = ( ( p . y ) / ( VAR_3 . METHOD_5 ( ) ) ) + 1 ; return VAR_2 ; }
public void METHOD_1 ( android.view.View view ) { METHOD_2 ( ) ; if ( ! ( TYPE_1 . METHOD_3 ( METHOD_4 ( ) ) ) ) { TYPE_2 . METHOD_5 ( METHOD_4 ( ) , STRING_1 , VAR_1 ) . show ( ) ; METHOD_6 ( ) ; return ; } }
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , ( STRING_1 + ( VAR_1 . getName ( ) ) ) ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_1 , STRING_2 ) ; METHOD_6 ( VAR_1 , VAR_2 ) ; }
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( this . VAR_3 , VAR_1 . METHOD_3 ( ) ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { return VAR_2 ; } return TYPE_2 . METHOD_2 ( this . VAR_3 , VAR_4 ) ; }
public boolean METHOD_1 ( double x , double y ) { if ( ( ( ( ( ( VAR_1 ) + ( error ) ) >= x ) || ( ( ( VAR_1 ) - ( error ) ) <= x ) ) || ( ( ( VAR_2 ) + ( error ) ) >= y ) ) || ( ( ( VAR_2 ) - ( error ) ) <= y ) ) { return true ; } else return false ; }
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . update ( this ) ; } for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { if ( VAR_2 . get ( i ) . VAR_3 ) { VAR_2 . get ( i ) . end ( this ) ; VAR_2 . remove ( i ) ; i -- ; } } }
public void start ( ) { TYPE_1 n = ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_2 ; TYPE_3 VAR_3 = TYPE_4 . METHOD_1 ( ) [ 0 ] . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_4 = TYPE_5 . METHOD_4 ( n . METHOD_5 ( ) , VAR_3 , ( ( VAR_5 ) - INT_1 ) ) . METHOD_6 ( new java.lang.String [ ] { } ) ; index = 0 ; java.lang.System.out.println ( TYPE_6 . toString ( VAR_4 ) ) ; }
static void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < TYPE_2 , java.lang.Long > update ) { java.util.Map < TYPE_2 , java.lang.Long > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; for ( java.util.Map.Entry < TYPE_2 , java.lang.Long > position : update . METHOD_4 ( ) ) { VAR_2 . put ( position . METHOD_5 ( ) , position . getValue ( ) ) ; } VAR_1 . METHOD_6 ( VAR_3 , TYPE_3 . toString ( VAR_2 ) ) ; }
public static java.lang.String METHOD_1 ( java.lang.String url , java.lang.String field , TYPE_1 value ) { if ( null == value ) { return url ; } return url . contains ( STRING_1 ) ? ( ( STRING_2 + field ) + STRING_3 ) + value : ( ( STRING_1 + field ) + STRING_3 ) + value ; }
