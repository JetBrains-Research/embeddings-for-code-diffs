public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 options = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; options . METHOD_5 ( VAR_2 ) ; options . METHOD_6 ( ( ( ( TYPE_3 . METHOD_7 ( ) ) + ( VAR_3 ) ) + ( VAR_1 . METHOD_8 ( ) ) ) ) ; options . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; return options ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . d ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; if ( VAR_3 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( status , VAR_4 ) ; } else { VAR_3 . METHOD_3 ( status , VAR_5 ) ; } METHOD_4 ( ) ; } 
static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String type ; if ( ( VAR_1 . equals ( STRING_1 ) ) || ( VAR_1 . equals ( STRING_2 ) ) ) { type = STRING_3 ; } else if ( VAR_1 . METHOD_2 ( STRING_4 ) ) { type = STRING_4 ; } else { type = VAR_1 ; } return type ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != ( this ) ) { throw new TYPE_2 ( ) ; } final TYPE_3 VAR_3 = this . VAR_3 ; if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { return false ; } boolean VAR_4 = false ; try { VAR_4 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_4 ) { VAR_3 . METHOD_4 ( ) ; } } return VAR_4 ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( null , STRING_1 , VAR_2 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) ; verify ( VAR_3 , METHOD_3 ( 0 ) ) . METHOD_4 ( METHOD_5 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_6 ( ) , METHOD_7 ( VAR_4 class ) ) ; } 
public void run ( java.lang.String VAR_1 , java.lang.String expected ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_1 ( null ) ; for ( TYPE_1 VAR_3 : VAR_2 ) { TYPE_3 out = new TYPE_3 ( ) ; ( ( TYPE_4 ) ( VAR_3 ) ) . METHOD_2 ( out ) ; TYPE_5 . assertEquals ( 0 , VAR_3 . run ( new java.lang.String [ 0 ] , VAR_1 , VAR_4 ) ) ; TYPE_5 . assertEquals ( expected , out . toString ( ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 config , TYPE_1 VAR_2 , int [ ] VAR_3 ) { int VAR_4 = METHOD_2 ( VAR_1 , config , VAR_2 , VAR_3 ) ; if ( VAR_4 == 0 ) { return VAR_5 ; } return new TYPE_4 ( VAR_4 ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 ) { protected void METHOD_2 ( ) { } } ; VAR_1 . METHOD_3 ( VAR_5 , new TYPE_2 ( STRING_3 ) , STRING_4 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 out = new TYPE_1 ( new TYPE_2 ( ) ) ; out . METHOD_2 ( null ) ; out . METHOD_3 ( new TYPE_3 ( STRING_1 ) ) ; out . METHOD_4 ( new byte [ 1 ] ) ; out . METHOD_5 ( ) ; out . METHOD_6 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 , int VAR_2 ) { int VAR_3 = ( VAR_1 . METHOD_2 ( ) ) + VAR_2 ; TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( VAR_3 ) ; assert VAR_4 != ( VAR_5 ) ; java.lang.String id = ( ( STRING_1 + VAR_3 ) + STRING_2 ) + ( METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ; TYPE_1 VAR_6 = METHOD_6 ( id , id , METHOD_7 ( VAR_4 . METHOD_5 ( ) ) , null ) ; VAR_6 . METHOD_8 ( ) ; return VAR_6 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { boolean VAR_4 = ( VAR_3 == ( VAR_5 ) ) || ( ( VAR_2 & ( VAR_6 ) ) != 0 ) ; VAR_7 . METHOD_2 ( ( VAR_4 ? ( VAR_8 ) | ( VAR_9 ) : ( VAR_8 ) & ( ~ ( VAR_9 ) ) ) ) ; if ( ( VAR_10 ) != null ) VAR_10 . METHOD_1 ( ( VAR_2 > 0 ) ) ; } 
static TYPE_1 METHOD_1 ( int VAR_1 ) { return new TYPE_1 ( 1 , 2 , VAR_1 , new TYPE_2 ( ) , VAR_2 , STRING_1 , STRING_2 , VAR_3 , null , new TYPE_3 ( 1 , 2 , 3 , 4 , 5 , 6 ) ) ; } 
private void run ( java.lang.String VAR_1 , java.io.File [ ] VAR_2 ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_3 = TYPE_2 . METHOD_1 ( null ) ; for ( TYPE_1 VAR_4 : VAR_3 ) { TYPE_3 . assertEquals ( 0 , VAR_4 . METHOD_2 ( new java.lang.String [ 0 ] , VAR_5 , new java.lang.String [ ] { VAR_1 } , VAR_2 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_2 class ) ) ; TYPE_3 VAR_3 = TYPE_1 . METHOD_5 ( new TYPE_4 ( STRING_1 , STRING_2 ) , STRING_3 ) ; TYPE_5 VAR_4 = new TYPE_6 ( VAR_3 , STRING_4 ) . METHOD_6 ( VAR_5 ) . build ( ) ; VAR_6 . METHOD_7 ( VAR_4 ) ; TYPE_5 VAR_7 = VAR_6 . METHOD_8 ( VAR_3 ) ; assertEquals ( VAR_8 , VAR_7 . METHOD_9 ( ) ) ; } 
synchronized int METHOD_1 ( int [ ] VAR_1 , int [ ] src , int [ ] VAR_2 , int [ ] VAR_3 , int [ ] VAR_4 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , src , VAR_2 , VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 , false , STRING_1 ) ; if ( ( VAR_2 . get ( VAR_1 ) ) != null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } VAR_2 . METHOD_5 ( VAR_1 , new java.lang.Integer ( VAR_3 ) ) ; super . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { assertEquals ( 1 , TYPE_1 . METHOD_1 ( 100 , INT_1 , 100 , INT_1 ) ) ; assertEquals ( 2 , TYPE_1 . METHOD_1 ( INT_2 , INT_3 , INT_4 , INT_5 ) ) ; assertEquals ( 1 , TYPE_1 . METHOD_1 ( INT_6 , INT_7 , INT_8 , INT_9 ) ) ; assertEquals ( 4 , TYPE_1 . METHOD_1 ( 100 , INT_10 , INT_11 , INT_12 ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 location , java.lang.String VAR_2 , java.lang.Object data ) { if ( ( ( VAR_3 ) != null ) && ( VAR_4 . METHOD_2 ( this , VAR_1 , VAR_3 ) ) ) { return ; } super . METHOD_1 ( VAR_1 , location , VAR_2 , data ) ; } 
public static void METHOD_1 ( TYPE_1 test , java.lang.Object [ ] VAR_1 ) throws java.lang.Exception { assertFalse ( STRING_1 , ( ( VAR_1 . length ) == 0 ) ) ; TYPE_2 . METHOD_1 ( test , VAR_1 , TYPE_2 . METHOD_2 ( test , VAR_1 [ 0 ] ) ) ; } 
boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) || ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { return METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 project , java.lang.String name , java.lang.String value ) { java.lang.String text = TYPE_3 . METHOD_2 ( name , value ) ; final TYPE_4 VAR_1 = TYPE_3 . METHOD_3 ( project , text ) ; return VAR_1 . METHOD_4 ( ) . get ( 0 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != ( this ) ) { throw new TYPE_2 ( ) ; } final TYPE_3 VAR_3 = this . VAR_3 ; VAR_3 . METHOD_2 ( ) ; boolean VAR_4 = false ; try { VAR_4 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_4 ) { VAR_3 . METHOD_4 ( ) ; } } return VAR_4 ; } 
public int METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( METHOD_2 ( ) ) == ( VAR_2 ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; } 
public void METHOD_1 ( int version , int VAR_1 , java.lang.String name , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String [ ] VAR_4 ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 , VAR_5 ) ) ; TYPE_1 . METHOD_4 ( ( ( this . VAR_4 ) == null ) ) ; this . VAR_4 = TYPE_3 . METHOD_5 ( VAR_4 ) ; VAR_6 = name ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = null ; if ( VAR_1 != null ) { try { VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_4 = VAR_3 . METHOD_3 ( locale ) ; } catch ( java.lang.IllegalArgumentException e ) { } } VAR_5 = null ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( TYPE_2 . get ( VAR_1 ) . METHOD_3 ( STRING_2 , false ) ) { for ( TYPE_3 VAR_2 : VAR_3 . METHOD_4 ( ) ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } } else { TYPE_1 . i ( STRING_1 , STRING_3 ) ; } } 
public int METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( ( VAR_1 < 0 ) || ( VAR_2 > ( count ) ) ) || ( VAR_1 > VAR_2 ) ) { throw new TYPE_1 ( ) ; } return TYPE_2 . METHOD_1 ( this , VAR_1 , VAR_2 ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , byte error ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + error ) ) ; TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( device , error ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < java.io.File > VAR_1 = METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 . size ( ) ) ; for ( java.io.File VAR_3 : VAR_1 ) { VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 , true , true , null ) ) ; } return VAR_2 ; } 
void METHOD_1 ( int VAR_1 , java.lang.String address ) { METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.Integer VAR_3 = VAR_4 . METHOD_3 ( VAR_1 , address ) ; if ( VAR_3 == null ) { android.util.Log.d ( VAR_5 . TAG , ( STRING_2 + address ) ) ; return ; } if ( VAR_6 ) android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_3 + address ) + STRING_4 ) + VAR_3 ) ) ; METHOD_4 ( VAR_1 , address ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_1 ) ; TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_2 ) . METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( VAR_2 ) ; } 
public static java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 , STRING_28 , STRING_29 , STRING_30 , STRING_31 , STRING_32 , STRING_33 , STRING_34 , VAR_1 } ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String name , java.lang.String VAR_2 , int VAR_3 ) { TYPE_2 d = METHOD_2 ( VAR_1 , name , VAR_2 ) ; if ( d == null ) { return VAR_4 ; } else { return ( d . METHOD_3 ( ) ) == VAR_3 ? VAR_5 : VAR_6 ; } } 
public void METHOD_1 ( ) { TYPE_1 msg = TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_3 . d ( TYPE_2 . TAG , msg . toString ( ) ) ; assertEquals ( STRING_1 , 0 , msg . METHOD_3 ( ) ) ; assertEquals ( STRING_2 , 0 , msg . METHOD_4 ( ) ) ; assertEquals ( STRING_3 , INT_1 , msg . METHOD_5 ( ) ) ; assertEquals ( STRING_4 , VAR_2 , msg . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } int pos = METHOD_2 ( ) ; int VAR_2 = METHOD_3 ( ) ; assert pos <= VAR_2 ; int VAR_3 = ( pos <= VAR_2 ) ? VAR_2 - pos : 0 ; int VAR_4 = pos + ( offset ) ; assert VAR_4 >= 0 ; return new TYPE_3 ( VAR_5 , ( - 1 ) , 0 , VAR_3 , VAR_3 , VAR_4 , VAR_6 ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( info , VAR_3 ) ; METHOD_4 ( VAR_2 ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
public void METHOD_1 ( final int VAR_1 ) { if ( METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 ) ; } } ) ; return ; } VAR_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , int value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final int VAR_3 = ( v == null ) ? ( ( int ) ( m . METHOD_2 ( ) ) ) : ( ( int ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 session , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { synchronized ( VAR_3 ) { TYPE_4 VAR_4 = METHOD_2 ( session , VAR_1 ) ; if ( VAR_4 == null ) { VAR_2 . METHOD_3 ( ) ; return ; } VAR_2 . set ( VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; if ( ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) { return ; } TYPE_3 VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 ) ; assertEquals ( CHAR_1 , new TYPE_4 ( VAR_1 ) . METHOD_4 ( ) ) ; assertEquals ( STRING_2 , VAR_2 . format ( INT_1 ) ) ; } 
public boolean METHOD_1 ( java.lang.String path ) { if ( path . METHOD_2 ( STRING_1 ) ) { java.lang.String VAR_1 = TYPE_1 . METHOD_3 ( path ) ; java.lang.String VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { for ( java.lang.String VAR_5 : VAR_3 ) { if ( VAR_1 . METHOD_2 ( VAR_5 ) ) { return true ; } } } return false ; } else { return true ; } } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) ; } } ) ; } 
private boolean METHOD_1 ( ) { return ( ( VAR_1 ) != null ) && ( ! ( ( ( ( VAR_1 . state ) == ( VAR_2 ) ) || ( ( VAR_1 . state ) == ( VAR_3 ) ) ) || ( ( VAR_1 . state ) == ( VAR_4 ) ) ) ) ; } 
public void METHOD_1 ( ) { try { java.io.File VAR_1 = new java.io.File ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 , false ) ) ; TYPE_3 . METHOD_2 ( VAR_3 , METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( VAR_4 , ( STRING_1 + ( e.getMessage ( ) ) ) ) ; } } 
public static int METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : case VAR_3 : case VAR_4 : return VAR_5 ; case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : return VAR_12 ; case VAR_13 : case VAR_14 : case VAR_15 : return VAR_5 ; case VAR_16 : if ( ( TYPE_1 . METHOD_2 ( ) ) == ( VAR_17 ) ) { return VAR_5 ; } else { return VAR_12 ; } default : return VAR_12 ; } } 
void METHOD_1 ( ) throws java.io.IOException { if ( ( ( ( ( VAR_1 ) != ( VAR_2 ) ) || ( ( VAR_3 ) != ( VAR_2 ) ) ) || ( ( VAR_4 ) != ( VAR_5 ) ) ) || ( ( VAR_6 ) != ( VAR_5 ) ) ) { throw new TYPE_1 ( VAR_7 ) ; } VAR_2 = null ; VAR_5 = null ; } 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_1 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , INT_3 , STRING_1 ) ; assertEquals ( match , result ) ; } 
public static final TYPE_1 start ( final java.lang.String VAR_1 , final java.lang.String VAR_2 , int uid , int VAR_3 , int [ ] VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 , java.lang.String VAR_8 , java.lang.String [ ] VAR_9 ) { try { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , uid , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; } catch ( TYPE_3 ex ) { android.util.Log.e ( VAR_10 , STRING_1 ) ; throw new java.lang.RuntimeException ( STRING_1 , ex ) ; } } 
public boolean METHOD_1 ( TYPE_1 item ) { TYPE_2 . METHOD_2 ( this , STRING_1 , VAR_1 ) . METHOD_3 ( ) ; if ( ( item . METHOD_4 ( ) ) == ( VAR_2 ) ) { return true ; } else if ( ( item . METHOD_4 ( ) ) == ( VAR_3 ) ) { return true ; } else { return super . METHOD_1 ( item ) ; } } 
public java.lang.Integer call ( ) { java.lang.Integer result ; try { java.lang.Class < ? > c = java.lang.Class . METHOD_1 ( STRING_1 ) ; TYPE_1 m = c . METHOD_2 ( STRING_2 , new java.lang.Class [ ] { VAR_1 . Object class } ) ; result = ( ( java.lang.Integer ) ( m . invoke ( null , VAR_2 ) ) ) ; } catch ( java.lang.Exception e ) { VAR_3 . println ( STRING_3 ) ; e . METHOD_3 ( ) ; result = - 1 ; } return result ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 options = TYPE_1 . METHOD_2 ( args ) ; TYPE_2 . METHOD_3 ( VAR_1 , options . METHOD_4 ( ) ) ; if ( options == null ) { return ; } TYPE_2 VAR_2 = new TYPE_2 ( options ) ; int error = VAR_2 . run ( ) ; TYPE_3 . METHOD_5 ( error ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 parent , TYPE_3 VAR_1 ) { TYPE_4 path = METHOD_2 ( parent , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) . append ( VAR_1 . getName ( ) ) ; return new TYPE_1 ( path . toString ( ) , CHAR_1 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( ) ; final TYPE_2 config = TYPE_2 . METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 , config , new java.lang.Runnable ( ) { public void run ( ) { if ( VAR_1 instanceof TYPE_4 ) { config . METHOD_5 ( ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_6 ( ) , true ) ; } else { config . METHOD_5 ( ( ( TYPE_5 ) ( VAR_1 ) ) , true ) ; } } } ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_1 ) != null ) { TYPE_2 VAR_2 = VAR_1 ; TYPE_3 < TYPE_4 > VAR_3 = TYPE_5 . get ( context ) . METHOD_3 ( ) . METHOD_4 ( ( ) - > { new TYPE_6 ( context ) . METHOD_5 ( VAR_2 ) ; return null ; } ) ; TYPE_7 . METHOD_6 ( VAR_3 , new TYPE_8 ( ) , TYPE_9 . METHOD_7 ( ) ) ; VAR_1 = null ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_2 = VAR_1 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) ) ; return true ; } catch ( TYPE_3 e ) { TYPE_4 . METHOD_2 ( VAR_4 , ( STRING_1 + ( e . METHOD_3 ( ) ) ) , VAR_5 ) . METHOD_4 ( ) ; } return false ; } 
public static void METHOD_1 ( int i , byte [ ] VAR_1 , int offset ) { VAR_1 [ offset ] = ( ( byte ) ( i > > 8 ) ) ; VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i ) ) ; } 
public TYPE_1 get ( int key , TYPE_1 VAR_1 ) { int i = TYPE_2 . METHOD_1 ( VAR_2 , 0 , VAR_3 , key ) ; if ( ( ( i < 0 ) || ( ( VAR_4 [ i ] ) == ( VAR_5 ) ) ) || ( ( VAR_4 [ i ] . get ( ) ) == null ) ) { return VAR_1 ; } else { return ( ( TYPE_1 ) ( VAR_4 [ i ] . get ( ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 class . METHOD_2 ( ) . METHOD_3 ( true ) ; scheduler = TYPE_1 . METHOD_4 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_5 ( ) ; VAR_3 = VAR_2 . METHOD_6 ( ) ; VAR_3 . METHOD_7 ( VAR_4 class ) ; VAR_3 . METHOD_7 ( VAR_5 class ) ; VAR_3 . METHOD_7 ( VAR_6 class ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { synchronized ( VAR_2 ) { if ( ( VAR_1 ) != null ) { if ( ( VAR_3 ) == null ) { VAR_3 = new TYPE_1 ( this ) ; VAR_3 . METHOD_2 ( true ) ; VAR_3 . start ( ) ; } VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( new TYPE_2 [ VAR_1 . size ( ) ] ) ) ; } } } } 
public void METHOD_1 ( TYPE_1 VAR_1 , int status ) { if ( VAR_2 ) android.util.Log.d ( VAR_3 . TAG , STRING_1 ) ; if ( ( status == ( VAR_4 ) ) && ( ( VAR_5 . METHOD_2 ( VAR_6 ) ) != null ) ) { METHOD_3 ( ) ; METHOD_4 ( INT_1 ) ; METHOD_5 ( VAR_7 ) ; } } 
private boolean METHOD_1 ( ) { if ( ! ( options . METHOD_2 ( ) ) ) { return false ; } TYPE_1 session = TYPE_2 . METHOD_3 ( ) ; return ( ( ( VAR_1 ) == null ) || ( ! ( VAR_2 . METHOD_4 ( session . METHOD_5 ( ) ) ) ) ) || ( ! ( VAR_2 . METHOD_6 ( session . METHOD_5 ( ) ) ) ) ; } 
public void METHOD_1 ( android.os.Message msg ) { METHOD_2 ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( msg.obj ) ) + STRING_3 ) + ( VAR_2 . get ( ) ) ) ) ; if ( ( ( VAR_1 ) == ( VAR_3 ) ) && ( ( ( long ) ( msg.obj ) ) == ( VAR_2 . get ( ) ) ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { return ; } VAR_1 = false ; VAR_2 = false ; TYPE_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; VAR_7 . METHOD_5 ( null ) ; VAR_8 . METHOD_6 ( ) ; METHOD_7 ( ) ; VAR_9 . METHOD_6 ( ) ; if ( ( VAR_10 ) != null ) { VAR_10 . METHOD_8 ( true ) ; VAR_10 = null ; } METHOD_9 ( ) ; } 
public void METHOD_1 ( ) { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 } ; try { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , null , null ) ; VAR_2 . METHOD_4 ( ) ; } catch ( java.io.IOException e ) { fail ( STRING_2 ) ; } } 
public void run ( com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws java.lang.Exception { if ( type instanceof TYPE_1 ) { TYPE_2 VAR_1 = new TYPE_2 ( type . METHOD_1 ( ) ) ; VAR_1 . append ( new TYPE_3 ( ( ( TYPE_1 ) ( type ) ) ) ) ; VAR_1 . METHOD_2 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { for ( java.lang.String VAR_1 : TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( VAR_1 . equals ( STRING_1 ) ) { continue ; } TYPE_1 VAR_2 = TYPE_1 . METHOD_4 ( VAR_1 ) ; assertNotNull ( VAR_2 . METHOD_5 ( ) ) ; if ( VAR_2 . METHOD_6 ( ) ) { TYPE_2 VAR_3 = VAR_2 . METHOD_7 ( ) ; assertNotNull ( VAR_3 ) ; assertNotNull ( VAR_3 . METHOD_8 ( ) ) ; } } } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : return false ; } return true ; } 
public int METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return - 1 ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return - 1 ; } } 
private void METHOD_1 ( boolean VAR_1 ) { synchronized ( VAR_2 ) { final boolean VAR_3 = METHOD_2 ( ) ; if ( ( VAR_2 . METHOD_3 ( ) ) != VAR_1 ) { VAR_2 . METHOD_4 ( VAR_1 ) ; if ( VAR_3 != ( METHOD_2 ( ) ) ) { if ( ! VAR_3 ) { METHOD_5 ( ) ; METHOD_6 ( VAR_4 ) ; } else { METHOD_7 ( VAR_5 ) ; } } } } } 
public static java.lang.Class METHOD_1 ( Main m , boolean VAR_1 ) { if ( ! ( Main . METHOD_2 ( STRING_1 ) ) ) { return VAR_2 class ; } Main . METHOD_3 ( STRING_1 ) ; if ( VAR_1 ) { Main . METHOD_4 ( STRING_1 ) ; } Main VAR_3 = m . METHOD_5 ( ) ; if ( VAR_1 ) { while ( ! ( Main . METHOD_6 ( STRING_1 ) ) ) { } } return VAR_3 == null ? null : VAR_3 . METHOD_7 ( ) ; } 
private byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; VAR_1 . METHOD_2 ( VAR_4 , 0 ) ; return VAR_2 . METHOD_3 ( ) ; } 
private static boolean METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { return ( ( ( ( ( VAR_1 . METHOD_2 ( ) ) && ( ( ( TYPE_2 . METHOD_3 ( VAR_1 ) ) & ( VAR_2 ) ) != 0 ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) && ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) && ( VAR_1 . METHOD_6 ( ) ) ) && ( VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ) ; } 
public boolean METHOD_1 ( java.io.File VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 ) { TYPE_2 VAR_4 = null ; try { VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_4 , VAR_3 ) ; return true ; } catch ( java.io.IOException VAR_5 ) { } finally { if ( VAR_4 != null ) { try { VAR_4 . METHOD_4 ( ) ; } catch ( java.io.IOException e ) { } } } return false ; } 
public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( METHOD_3 ( ) ) == ( VAR_1 ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { try { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; int VAR_3 = VAR_2 . METHOD_5 ( ) ; byte [ ] VAR_4 = new byte [ VAR_3 ] ; VAR_2 . METHOD_6 ( VAR_4 ) ; return new java.lang.String ( VAR_4 , VAR_5 ) ; } catch ( java.io.IOException VAR_6 ) { throw new TYPE_3 ( VAR_6 ) ; } } 
public void METHOD_1 ( ) { int VAR_1 = TYPE_1 . METHOD_2 ( ) . size ( ) ; TYPE_2 VAR_2 = new TYPE_3 ( STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; assertEquals ( ( VAR_1 + 1 ) , TYPE_1 . METHOD_2 ( ) . size ( ) ) ; TYPE_1 . METHOD_4 ( VAR_2 ) ; assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( ) . size ( ) ) ; } 
public final TYPE_1 METHOD_1 ( int i , int x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
public final TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String name ) { if ( VAR_1 == null ) { java.lang.String msg = STRING_1 + name ; android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , msg ) ; throw new TYPE_3 ( msg ) ; } return METHOD_2 ( VAR_1 , name ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( ( VAR_1 ) != null ) { VAR_2 = VAR_1 ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; } VAR_1 = null ; VAR_4 = null ; VAR_6 = null ; METHOD_3 ( event ) ; if ( ( VAR_7 ) != ( VAR_8 ) ) { METHOD_4 ( event ) ; } else { METHOD_5 ( ) ; } } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . METHOD_3 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_2 ( null ) ; TYPE_3 . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Throwable { android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ; TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_2 = METHOD_2 ( ) ; if ( ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ) { METHOD_3 ( INT_1 , INT_2 , true , false ) ; } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( METHOD_4 ( STRING_1 . METHOD_5 ( STRING_2 ) ) ) . METHOD_6 ( STRING_3 ) ) ; server . METHOD_7 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_8 ( STRING_4 ) . METHOD_9 ( ) ) ) ; try { assertEquals ( INT_1 , VAR_1 . METHOD_10 ( ) ) ; } finally { VAR_1 . METHOD_11 ( ) ; } } 
private TYPE_1 METHOD_1 ( final java.lang.String packageName ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 ) { public java.lang.String METHOD_2 ( ) { return packageName ; } protected void METHOD_3 ( ) { } } ; VAR_1 . METHOD_4 ( VAR_5 , new TYPE_2 ( STRING_3 ) , STRING_4 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; java.util.Map < java.lang.String , java.lang.String > VAR_4 = VAR_1 . METHOD_3 ( ) ; assertEquals ( 3 , VAR_4 . size ( ) ) ; assertEquals ( STRING_1 , VAR_4 . get ( STRING_2 ) ) ; assertEquals ( STRING_3 , VAR_4 . get ( STRING_4 ) ) ; assertEquals ( STRING_5 , VAR_4 . get ( STRING_6 ) ) ; } 
private static java.util.Set < java.lang.Integer > METHOD_1 ( ) { java.util.List < java.util.List < java.lang.String > > VAR_1 = TYPE_1 . METHOD_2 ( ) ; java.util.Set < java.lang.Integer > retval = new TYPE_2 < java.lang.Integer > ( ) ; for ( java.util.List < java.lang.String > i : VAR_1 ) { int VAR_2 = java.lang.Integer . METHOD_3 ( i . get ( 2 ) ) ; if ( VAR_2 != 0 ) { retval . METHOD_4 ( VAR_2 ) ; } } return retval ; } 
public void METHOD_1 ( TYPE_1 v ) { if ( TYPE_2 . METHOD_2 ( ) ) { VAR_1 . METHOD_1 ( new TYPE_1 ( v . x , v . y , VAR_2 , v . w ) ) ; return ; } METHOD_1 ( v . x ) ; METHOD_1 ( v . y ) ; METHOD_1 ( VAR_2 ) ; METHOD_1 ( v . w ) ; } 
public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 ) { TYPE_1 . d ( VAR_3 . TAG , ( ( VAR_1 ? STRING_1 : STRING_2 ) + STRING_3 ) ) ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( VAR_1 ) ; } if ( VAR_1 ) METHOD_3 ( true ) ; } 
private long METHOD_1 ( ) { TYPE_1 pm = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; try { TYPE_3 VAR_1 = pm . METHOD_4 ( TYPE_2 . METHOD_2 ( ) . METHOD_5 ( ) , 0 ) ; return ( VAR_2 ) ^ ( ( ( long ) ( VAR_3 ) ) < < INT_1 ) ; } catch ( TYPE_1 e ) { throw new java.lang.RuntimeException ( e ) ; } } 
private static boolean METHOD_1 ( java.io.File VAR_1 , TYPE_1 log ) { for ( java.lang.String VAR_2 : VAR_3 ) { java.io.File f = new java.io.File ( VAR_1 , VAR_2 ) ; if ( ! ( f . METHOD_2 ( ) ) ) { log . METHOD_3 ( null , STRING_1 , VAR_1 . getName ( ) , VAR_2 ) ; return false ; } } return true ; } 
protected void METHOD_1 ( ) throws java.io.IOException { java.lang.String VAR_1 = VAR_2 . toString ( ) ; try { VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_2 e ) { try { VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 ) ; } catch ( TYPE_2 VAR_5 ) { VAR_3 = null ; return ; } } VAR_3 . METHOD_3 ( VAR_6 . METHOD_4 ( ) ) ; } 
protected java.lang.String METHOD_1 ( java.util.List < java.io.File > VAR_1 ) throws java.lang.Exception { VAR_2 = new java.lang.StringBuilder ( ) ; TYPE_1 VAR_3 = METHOD_2 ( ) ; java.lang.String result = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_4 ) != CHAR_1 ) { result = result . METHOD_4 ( VAR_4 , CHAR_1 ) ; } for ( java.io.File f : VAR_1 ) { METHOD_5 ( f ) ; } return result ; } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 source = new TYPE_1 ( VAR_1 , ( ( VAR_3 ) | ( VAR_4 ) ) ) ; source . METHOD_2 ( new TYPE_4 [ ] { TYPE_5 . METHOD_3 ( ) , TYPE_6 . METHOD_3 ( ) } ) ; source . METHOD_4 ( VAR_2 ) ; return source ; } 
public synchronized java.lang.Object METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > v = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) ; VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 = 0 ; return v ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ) ; } } 
public boolean METHOD_1 ( java.lang.String VAR_1 , byte [ ] key ) { try { return ( VAR_2 . METHOD_2 ( VAR_1 , key ) ) == ( VAR_3 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_4 . TAG , STRING_1 , e ) ; return false ; } } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { assert ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ; if ( VAR_2 instanceof TYPE_3 ) { TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_2 ) ) ; int VAR_5 = VAR_4 . METHOD_3 ( ) ; return TYPE_4 . METHOD_4 ( VAR_1 , VAR_5 ) ; } return STRING_1 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 , int offset , int length ) { for ( int i = 0 ; i < length ; i ++ ) { assertEquals ( VAR_1 . get ( i ) , VAR_2 [ ( offset + i ) ] ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { int VAR_3 = VAR_4 ; int VAR_5 = ( ( int ) ( TYPE_2 . METHOD_2 ( VAR_6 . METHOD_3 ( ) ) ) ) ; if ( VAR_7 . METHOD_4 ( ) ) { METHOD_5 ( VAR_3 , VAR_2 , VAR_5 ) ; } else { METHOD_6 ( VAR_4 , VAR_2 ) ; } } 
private void METHOD_1 ( java.lang.String provider ) throws java.lang.Exception { TYPE_1 key = new TYPE_2 ( VAR_1 , STRING_1 ) ; TYPE_3 c = TYPE_3 . METHOD_2 ( STRING_2 , provider ) ; TYPE_4 VAR_2 = new TYPE_5 ( VAR_3 ) ; try { c . METHOD_3 ( VAR_4 , key , VAR_2 ) ; fail ( ( STRING_3 + provider ) ) ; } catch ( TYPE_6 expected ) { } } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_1 , VAR_2 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_3 ) ; VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; } 
void METHOD_1 ( TYPE_1 session , TYPE_2 VAR_1 , int VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 ) { long VAR_5 = TYPE_4 . METHOD_2 ( ) ; try { synchronized ( VAR_6 ) { TYPE_5 w = METHOD_3 ( session , VAR_1 ) ; if ( w != null ) { VAR_7 = false ; VAR_8 . set ( VAR_3 ) ; VAR_9 . set ( VAR_4 ) ; VAR_10 = VAR_2 ; VAR_11 = true ; METHOD_4 ( ) ; } } } finally { TYPE_4 . METHOD_5 ( VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( false ) ; VAR_3 . METHOD_3 ( ) ; verify ( VAR_1 , METHOD_4 ( ) ) . METHOD_5 ( ) ; verify ( VAR_2 , METHOD_4 ( ) ) . METHOD_5 ( ) ; assertTrue ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
private static TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > v = new TYPE_1 < TYPE_2 > ( ) ; v . METHOD_2 ( new TYPE_2 ( 0 , 3 , VAR_1 ) ) ; v . METHOD_2 ( new TYPE_2 ( 3 , 4 , VAR_2 ) ) ; v . METHOD_2 ( new TYPE_2 ( 4 , 6 , VAR_3 ) ) ; v . METHOD_2 ( new TYPE_2 ( 7 , 9 , VAR_4 ) ) ; return v ; } 
public void METHOD_1 ( ) { try { TYPE_1 format = TYPE_1 . METHOD_2 ( VAR_1 , VAR_1 , VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; java.lang.String VAR_4 = format . format ( VAR_3 ) ; TYPE_3 VAR_5 = new TYPE_3 ( STRING_1 ) ; assertTrue ( STRING_2 , VAR_5 . format ( VAR_3 ) . equals ( VAR_4 ) ) ; } catch ( java.lang.Exception e ) { fail ( ( STRING_3 + ( e.toString ( ) ) ) ) ; } } 
void METHOD_1 ( ) { if ( ( VAR_1 ) && ( ( METHOD_2 ( ) . VAR_2 ) > 0 ) ) { VAR_1 = false ; TYPE_1 VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_3 . METHOD_5 ( ) ) { METHOD_6 ( true , true ) ; } } } 
public java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_1 < 0 ) { throw new TYPE_1 ( this , VAR_1 ) ; } if ( VAR_2 > ( count ) ) { throw new TYPE_1 ( this , VAR_2 ) ; } int VAR_3 = VAR_2 - VAR_1 ; if ( VAR_3 < 0 ) { throw new TYPE_1 ( VAR_3 ) ; } return ( VAR_1 == 0 ) && ( VAR_2 == ( count ) ) ? this : METHOD_2 ( VAR_1 , VAR_3 ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { int VAR_4 = METHOD_2 ( VAR_2 , VAR_3 , true ) ; if ( ( VAR_4 & ( VAR_5 ) ) != 0 ) { long VAR_6 = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_6 == 0 ) { return true ; } } return false ; } 
static void METHOD_1 ( char [ ] [ ] VAR_1 ) { try { for ( int i = 0 ; i < ( VAR_1 . length ) ; ++ i ) { VAR_1 [ i ] = new char [ INT_1 * INT_2 ] ; } } catch ( TYPE_1 VAR_2 ) { VAR_3 = true ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; int VAR_3 = VAR_4 ; if ( VAR_5 . METHOD_3 ( VAR_1 ) ) { METHOD_4 ( VAR_3 , VAR_6 ) ; return ; } if ( ( VAR_5 . size ( ) ) >= ( METHOD_5 ( ) ) ) { METHOD_4 ( VAR_3 , VAR_7 ) ; return ; } if ( ! ( VAR_8 . METHOD_6 ( VAR_1 ) ) ) { METHOD_4 ( VAR_3 , VAR_9 ) ; return ; } VAR_5 . METHOD_7 ( VAR_1 ) ; } 
private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) throws java.io.IOException , TYPE_1 { final TYPE_2 res = VAR_3 ; final int VAR_4 = res . METHOD_2 ( ) . VAR_4 ; try { METHOD_3 ( res , VAR_4 , VAR_1 , VAR_2 ) ; } finally { TYPE_3 . METHOD_4 ( res , VAR_4 ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = null ; java.util.List < TYPE_3 > VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_5 VAR_4 = TYPE_6 . METHOD_3 ( ) ; for ( TYPE_3 path : VAR_3 ) { TYPE_7 VAR_5 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( path ) ; if ( VAR_5 != null ) { VAR_2 = VAR_1 . METHOD_6 ( VAR_5 ) ; if ( VAR_2 != null ) { break ; } } } return VAR_2 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { METHOD_1 ( VAR_1 ) ; if ( ! ( VAR_2 . METHOD_2 ( VAR_4 ) ) ) { METHOD_3 ( VAR_1 ) ; } METHOD_4 ( VAR_1 , VAR_2 ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; } 
private static java.util.List < TYPE_1 < ? super TYPE_2 > > METHOD_1 ( TYPE_3 ... VAR_1 ) { java.util.ArrayList < TYPE_1 < ? super TYPE_2 > > VAR_2 = new java.util.ArrayList ( VAR_1 . length ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_2 . METHOD_2 ( VAR_1 [ i ] . VAR_3 ) ; } return VAR_2 ; } 
public byte [ ] METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 ) throws TYPE_2 { try { return VAR_3 . METHOD_2 ( VAR_2 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_2 ( ( STRING_1 + ( e . METHOD_3 ( ) ) ) ) ; } } 
public TYPE_1 [ ] METHOD_1 ( TYPE_2 VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { return new TYPE_1 [ 0 ] ; } else { return VAR_2 . METHOD_2 ( new TYPE_1 [ VAR_2 . size ( ) ] ) ; } } 
public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( VAR_1 ) android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ; return true ; } try { return VAR_3 . METHOD_1 ( TYPE_1 . METHOD_3 ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_2 , e ) ; } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_9 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_10 ( ) ) ; METHOD_11 ( TYPE_1 . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 context , android.content.Intent VAR_1 ) { java.lang.String action = VAR_1 . METHOD_2 ( ) ; if ( action . equals ( VAR_2 ) ) { METHOD_3 ( ) ; } else if ( ( action . equals ( VAR_3 ) ) || ( action . equals ( VAR_4 ) ) ) { METHOD_4 ( ) ; } else if ( action . equals ( VAR_5 ) ) { METHOD_5 ( VAR_1 ) ; } else if ( action . equals ( VAR_6 ) ) { METHOD_6 ( VAR_1 ) ; } } 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 . start ( VAR_1 , new TYPE_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) , VAR_3 ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) ) ) . METHOD_8 ( ( ( ( VAR_2 . METHOD_9 ( ) ) & ( VAR_4 ) ) == ( VAR_4 ) ) ) ) ; } 
public boolean METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; boolean VAR_3 = false ; if ( METHOD_3 ( VAR_2 ) ) { java.lang.String VAR_4 = VAR_5 . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( VAR_4 , VAR_6 ) ; try { VAR_7 = java.lang.Integer . METHOD_6 ( VAR_4 , VAR_1 ) ; VAR_3 = true ; } catch ( TYPE_2 e ) { VAR_8 = false ; } } return VAR_3 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 , VAR_1 ) ; int result = METHOD_3 ( VAR_2 , true ) ; assertEquals ( VAR_4 , result ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { return new TYPE_2 < TYPE_3 , TYPE_4 , TYPE_3 > ( new TYPE_5 < TYPE_3 , TYPE_4 , TYPE_3 > ( ) { public TYPE_6 get ( TYPE_7 < TYPE_8 , TYPE_6 > entry ) { return entry . value ; } } , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( VAR_3 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , mContext . METHOD_5 ( ) , VAR_3 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { if ( ( VAR_3 ) == VAR_1 ) { VAR_3 = ( ( TYPE_3 ) ( VAR_2 ) ) ; return ; } for ( TYPE_4 < TYPE_5 , TYPE_6 > VAR_4 : VAR_5 . METHOD_2 ( ) ) { if ( ( VAR_4 . METHOD_3 ( ) ) == VAR_1 ) { VAR_5 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , ( ( TYPE_6 ) ( VAR_2 ) ) ) ; return ; } } super . METHOD_1 ( VAR_1 , VAR_2 ) ; } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 , boolean VAR_8 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , INT_1 , VAR_9 , VAR_9 , VAR_9 , VAR_9 , 0 , VAR_8 ) ; } 
void test ( ) { java.util.List < java.lang.String > result = new java.util.ArrayList ( TYPE_1 . METHOD_1 ( ) . VAR_1 ) ; if ( ( result . size ( ) ) == 0 ) { status = VAR_2 ; } else { METHOD_2 ( ) ; status = VAR_3 ; } METHOD_3 ( ) ; } 
public java.util.List < android.bluetooth.BluetoothDevice > METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ; TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; return service . METHOD_1 ( ) ; } 
public static void METHOD_1 ( ) { VAR_1 class . METHOD_2 ( ) . METHOD_3 ( true ) ; VAR_2 = new java.io.File [ ] { TYPE_1 . METHOD_4 ( STRING_1 ) } ; VAR_3 = new java.io.File [ ] { TYPE_1 . METHOD_4 ( STRING_2 ) , TYPE_1 . METHOD_4 ( STRING_3 ) , TYPE_1 . METHOD_4 ( STRING_4 ) , TYPE_1 . METHOD_4 ( STRING_5 ) , TYPE_1 . METHOD_4 ( STRING_6 ) } ; VAR_4 = TYPE_1 . METHOD_5 ( STRING_7 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 context ) throws TYPE_4 { TYPE_2 VAR_1 = this . VAR_2 . METHOD_2 ( context , value ) ; if ( VAR_1 != null ) { return new TYPE_5 < TYPE_2 > ( VAR_1 ) ; } else { return new TYPE_6 ( value ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( STRING_1 ) ; TYPE_4 VAR_2 = TYPE_5 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 , true ) . METHOD_7 ( ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_8 ( ) ; } } 
public void METHOD_1 ( java.lang.Throwable VAR_1 , java.lang.Throwable VAR_2 ) { if ( VAR_2 == VAR_1 ) { throw new java.lang.IllegalArgumentException ( STRING_1 , VAR_2 ) ; } if ( VAR_2 == null ) { throw new java.lang.NullPointerException ( STRING_2 ) ; } synchronized ( this ) { java.util.List < java.lang.Throwable > VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = new java.util.ArrayList < > ( 1 ) ; VAR_4 . METHOD_2 ( VAR_1 , VAR_3 ) ; } VAR_3 . METHOD_3 ( VAR_2 ) ; } } 
public TYPE_1 get ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_1 ( ) ; TYPE_3 type = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_2 ( ) ; TYPE_1 result = VAR_2 . get ( type ) ; if ( result == null ) { throw new java.lang.IllegalArgumentException ( ( STRING_2 + VAR_1 ) ) ; } return result ; } 
public void METHOD_1 ( ) { VAR_1 . set ( 0 ) ; VAR_2 . METHOD_2 ( ) ; if ( ( VAR_3 ) != 0 ) { int [ ] VAR_4 = new int [ ] { VAR_3 } ; TYPE_1 . METHOD_3 ( 1 , VAR_4 , 0 ) ; } TYPE_1 . METHOD_4 ( ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_5 ( ) ; VAR_5 = null ; } if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_5 ( ) ; VAR_6 = null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( false ) ; TYPE_1 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_1 ) throws android.os.RemoteException { VAR_1 . METHOD_6 ( VAR_2 , TYPE_1 . METHOD_7 ( VAR_3 class ) ) ; return ; } } ) . when ( VAR_4 ) . METHOD_8 ( org.mockito.Matchers . METHOD_9 ( VAR_5 class ) ) ; assertFalse ( VAR_6 . METHOD_10 ( new TYPE_4 ( ) , false ) ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String ... expected ) { java.lang.String [ ] result = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; java.lang.System.out.println ( ( STRING_1 + ( expected . length ) ) ) ; if ( ( expected . length ) == 0 ) { METHOD_4 ( result ) ; } else { assertNotNull ( VAR_1 , result ) ; assertEquals ( VAR_1 , TYPE_3 . METHOD_5 ( expected ) , TYPE_3 . METHOD_5 ( result ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) ) ; TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( ) ; TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 , STRING_5 , STRING_3 , STRING_4 , false ) ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { final int VAR_1 = VAR_2 . size ( ) ; try { TYPE_1 . METHOD_2 ( null , new java.lang.Object ( ) ) ; fail ( STRING_1 ) ; } catch ( java.lang.NullPointerException e ) { } for ( int VAR_3 = 0 ; VAR_3 < VAR_1 ; VAR_3 ++ ) { assertEquals ( STRING_2 , VAR_2 . get ( VAR_3 ) , VAR_2 . get ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_2 . get ( VAR_3 ) ) ) ) ; } } 
private static void METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , java.lang.Class < ? > VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_2 . METHOD_2 ( ) ) { int VAR_4 = VAR_3 . METHOD_3 ( ) ; if ( ( ! ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ) && ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) { VAR_1 . METHOD_6 ( VAR_3 ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { TYPE_1 VAR_2 = new TYPE_2 ( ( ( int ) ( FLOAT_1 * INT_1 ) ) , STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; VAR_2 = TYPE_1 . METHOD_2 ( ) ; TYPE_3 f = new TYPE_3 ( ) ; if ( ! ( f . METHOD_4 ( ) . equals ( VAR_2 ) ) ) errln ( STRING_2 ) ; } finally { TYPE_1 . METHOD_3 ( VAR_1 ) ; } } 
public boolean METHOD_1 ( java.lang.String packageName , boolean VAR_1 ) { TYPE_1 p ; synchronized ( VAR_2 ) { p = VAR_2 . get ( packageName ) ; if ( p == null ) { return false ; } if ( VAR_1 ) { VAR_3 = TYPE_2 . METHOD_2 ( ) ; } VAR_4 . METHOD_3 ( ) ; if ( ! ( VAR_5 ) ) { return false ; } } synchronized ( VAR_6 ) { return ( METHOD_4 ( p , false , false , true ) ) == ( VAR_7 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; assertTrue ( VAR_1 . METHOD_2 ( VAR_4 ) ) ; assertEquals ( CHAR_1 , VAR_5 ) ; assertEquals ( 0 , VAR_4 . number ) ; assertEquals ( CHAR_2 , VAR_6 [ 0 ] ) ; assertEquals ( CHAR_1 , VAR_6 [ 1 ] ) ; assertEquals ( 0 , VAR_6 [ 2 ] ) ; assertEquals ( 0 , VAR_6 [ 3 ] ) ; } 
public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { long VAR_3 = VAR_1 . start ; long VAR_4 = VAR_2 . start ; if ( ( VAR_3 - VAR_4 ) > 0 ) { return 1 ; } if ( ( VAR_3 - VAR_4 ) < 0 ) { return - 1 ; } return 0 ; } 
public void METHOD_1 ( ) { if ( VAR_1 ) log ( ( STRING_1 + ( VAR_2 ? STRING_2 : STRING_3 ) ) ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_1 ( ) ; VAR_6 . METHOD_1 ( VAR_4 ) ; VAR_7 . METHOD_1 ( ) ; VAR_8 . METHOD_1 ( ) ; } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , java.util.List < TYPE_3 > VAR_2 ) { boolean VAR_3 = false ; boolean VAR_4 = false ; VAR_2 . METHOD_2 ( new TYPE_4 ( context , TYPE_5 . METHOD_3 ( context , VAR_1 . METHOD_4 ( ) , TYPE_6 . METHOD_5 ( VAR_1 ) , VAR_3 , VAR_4 ) , VAR_5 , VAR_6 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { for ( TYPE_1 data : VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; org.junit.Assert.assertEquals ( VAR_7 , TYPE_4 . METHOD_1 ( VAR_8 , VAR_2 , VAR_9 ) ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws TYPE_2 { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } java.util.ArrayList < TYPE_3 > VAR_3 = METHOD_2 ( VAR_1 , null ) ; if ( VAR_3 == null ) { throw METHOD_3 ( this . VAR_4 , VAR_1 ) ; } return new TYPE_1 ( VAR_3 . get ( 0 ) . METHOD_4 ( VAR_2 ) , VAR_3 . get ( 0 ) . METHOD_5 ( ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < java.io.File > VAR_1 = METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 . size ( ) ) ; for ( java.io.File VAR_3 : VAR_1 ) { VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_1 expected ) { } } 
public static java.lang.String METHOD_1 ( TYPE_1 context ) { java.lang.String msg = STRING_1 ; try { TYPE_2 pm = context . METHOD_2 ( ) ; TYPE_3 VAR_1 = pm . METHOD_3 ( context . METHOD_4 ( ) , 0 ) ; msg = STRING_2 ; if ( ( VAR_2 ) > 0 ) { msg = java.lang.Integer . toString ( VAR_2 ) ; } } catch ( TYPE_4 e ) { TYPE_5 . d ( VAR_3 . TAG , msg ) ; } return msg ; } 
public static java.lang.String [ ] [ ] METHOD_1 ( java.lang.String [ ] [ ] VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) != null ) { if ( VAR_1 [ i ] [ 0 ] . METHOD_2 ( VAR_2 ) ) { VAR_1 [ i ] = null ; } } } return VAR_1 ; } 
protected void METHOD_1 ( short VAR_1 ) throws java.io.IOException { switch ( VAR_1 ) { case VAR_2 : { if ( ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) && ( ( VAR_3 ) != null ) ) { METHOD_4 ( VAR_4 ) ; } break ; } default : { super . METHOD_1 ( VAR_1 ) ; } } } 
public int METHOD_1 ( int VAR_1 , int VAR_2 ) { synchronized ( VAR_3 ) { final TYPE_1 VAR_4 = VAR_3 . get ( VAR_1 ) ; if ( VAR_4 == null ) return VAR_2 ; final TYPE_1 VAR_5 = VAR_3 . get ( VAR_2 ) ; if ( VAR_5 != VAR_4 ) return VAR_2 ; final int VAR_6 = VAR_5 . get ( VAR_1 , ( - 1 ) ) ; final int VAR_7 = VAR_5 . get ( VAR_2 , ( - 1 ) ) ; return VAR_6 > VAR_7 ? VAR_1 : VAR_2 ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 source , TYPE_3 VAR_1 , java.lang.String VAR_2 , java.lang.String path , int VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 , TYPE_4 VAR_7 , TYPE_5 VAR_8 , java.lang.String VAR_9 ) { TYPE_6 VAR_10 = new TYPE_6 ( source , VAR_1 , VAR_2 , path , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; return VAR_10 ; } 
public void METHOD_1 ( int session , int VAR_1 , int context , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertTrue ( STRING_2 , ( 0 != ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ) ; super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { java.lang.String id = METHOD_2 ( VAR_4 ) ; if ( ( VAR_2 . start ) == VAR_1 ) { VAR_5 . METHOD_3 ( id ) ; } else if ( ( VAR_6 ) == VAR_1 ) { assert VAR_5 . METHOD_4 ( id ) ; VAR_5 . METHOD_5 ( id ) ; } } } 
synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = VAR_1 . METHOD_2 ( ) ; java.util.List < TYPE_5 > VAR_5 = METHOD_3 ( VAR_1 ) ; TYPE_5 VAR_6 = new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) , VAR_1 . METHOD_7 ( ) , VAR_3 ) ; VAR_5 . METHOD_8 ( VAR_6 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) == 0 ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } VAR_4 = VAR_2 ; if ( VAR_1 != null ) { int ret = VAR_1 . METHOD_2 ( VAR_5 . METHOD_3 ( ) ) ; if ( ret != ( VAR_6 ) ) { android.util.Log.e ( VAR_7 . TAG , ( STRING_2 + ret ) ) ; return false ; } } else { VAR_2 . METHOD_4 ( VAR_5 . METHOD_3 ( ) ) ; } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) ; assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; METHOD_5 ( VAR_1 ) ; TYPE_1 VAR_5 = TYPE_2 . METHOD_6 ( VAR_6 , 1 ) . METHOD_7 ( STRING_1 ) . METHOD_8 ( ) ; assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) ; METHOD_5 ( VAR_1 ) ; METHOD_9 ( ) ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( METHOD_3 ( ) . values ( ) , TYPE_4 . METHOD_4 ( ) ) ; if ( ! ( VAR_2 ) ) { throw new TYPE_5 ( STRING_1 , METHOD_5 ( ) , java.lang.String . METHOD_6 ( STRING_2 , METHOD_7 ( ) ) ) ; } return VAR_1 ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 project ) { if ( TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { boolean VAR_2 = TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( project ) , null , true ) ; if ( VAR_2 ) { TYPE_6 . METHOD_6 ( VAR_1 , STRING_1 , ( STRING_2 + ( ( ( STRING_3 + STRING_4 ) + STRING_5 ) + STRING_6 ) ) ) ; return false ; } } return true ; } 
public static void assertEquals ( java.lang.String VAR_1 , java.lang.Object expected , java.lang.Object VAR_2 ) { if ( VAR_2 == null ? expected != null : ! ( VAR_2 . equals ( expected ) ) ) { TYPE_1 . fail ( VAR_1 , ( ( ( STRING_1 + expected ) + STRING_2 ) + VAR_2 ) ) ; } } 
public TYPE_1 [ ] METHOD_1 ( boolean VAR_1 ) { try { if ( ( VAR_2 ) != null ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; } } catch ( TYPE_2 e ) { } METHOD_2 ( ) ; synchronized ( VAR_3 ) { TYPE_3 [ ] VAR_4 = null ; if ( METHOD_3 ( ) ) { VAR_4 = TYPE_4 . METHOD_4 ( VAR_5 , VAR_1 ) ; } if ( VAR_4 != null ) { return VAR_4 ; } else { return new TYPE_5 [ 0 ] ; } } } 
protected boolean start ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_1 ( VAR_3 ) ; try { METHOD_2 ( VAR_4 , VAR_1 ) ; } catch ( java.lang.Exception e ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 , e ) ; } VAR_5 = new TYPE_3 ( this ) ; TYPE_2 . METHOD_3 ( this ) ; VAR_5 . start ( ) ; return true ; } 
public TYPE_1 METHOD_1 ( java.lang.String path , int flags , int VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_1 & ( VAR_2 ) ) != ( VAR_3 ) ) { TYPE_3 . METHOD_2 ( ) . METHOD_4 ( ) ; } return os . METHOD_1 ( path , flags , VAR_1 ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 s ) { java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < ( s . length ( ) ) ; ++ i ) { if ( i != 0 ) result . append ( CHAR_1 ) ; result . append ( TYPE_2 . METHOD_1 ( s . METHOD_2 ( i ) ) ) ; } return result . toString ( ) ; } 
public boolean METHOD_1 ( final int VAR_1 , final TYPE_1 event ) { VAR_2 . METHOD_2 ( false ) ; if ( METHOD_3 ( ) ) { boolean ret = METHOD_4 ( new TYPE_2 < TYPE_3 > ( ) { public TYPE_3 call ( ) { return METHOD_1 ( VAR_1 , event ) ; } } ) ; return ret ; } return VAR_3 . METHOD_5 ( ) . METHOD_1 ( VAR_1 , event ) ; } 
public byte [ ] METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) throws java.io.IOException { boolean VAR_3 = VAR_1 != null ; TYPE_2 result = METHOD_2 ( VAR_3 , VAR_2 , null ) ; if ( VAR_3 ) { result . METHOD_3 ( VAR_1 ) ; } return result . METHOD_4 ( ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; } if ( ( ( VAR_2 . METHOD_6 ( VAR_3 ) ) || ( VAR_2 . METHOD_6 ( VAR_4 ) ) ) || ( VAR_2 . METHOD_6 ( VAR_5 ) ) ) { VAR_2 . METHOD_7 ( ) ; } super . METHOD_1 ( ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , java.lang.Exception [ ] VAR_4 ) { try { TYPE_1 VAR_5 = VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ; if ( VAR_5 != null ) { VAR_5 . METHOD_3 ( INT_1 ) ; VAR_5 = new TYPE_4 ( VAR_5 ) . METHOD_4 ( VAR_6 ) ; } return VAR_5 ; } catch ( java.lang.Exception e ) { if ( VAR_4 != null ) { VAR_4 [ 0 ] = e ; } } return null ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 VAR_2 = METHOD_2 ( VAR_3 ) ; if ( VAR_2 == null ) { METHOD_3 ( null ) ; return ; } TYPE_4 info = METHOD_4 ( x ) ; METHOD_3 ( new TYPE_5 ( info , METHOD_5 ( info , VAR_4 ) , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_6 ( x , e ) ; } } 
private static int [ ] METHOD_1 ( int [ ] VAR_1 , int offset , int VAR_2 , int value , int VAR_3 ) { int VAR_4 = VAR_2 ; if ( ( offset + 1 ) == VAR_4 ) { VAR_4 += VAR_3 ; int [ ] VAR_5 = new int [ VAR_4 ] ; TYPE_1 . METHOD_2 ( VAR_1 , 0 , VAR_5 , 0 , offset ) ; VAR_1 = VAR_5 ; } VAR_1 [ offset ] = value ; return VAR_1 ; } 
public final TYPE_1 METHOD_1 ( int x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { assert ( VAR_1 ) != null ; if ( ( VAR_2 ) == null ) { VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_1 ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ; if ( ( VAR_2 ) == null ) { VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 , ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) ) ; throw new TYPE_2 ( ) ; } } return VAR_2 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : if ( ( VAR_3 ) == null ) { VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; } return VAR_3 ; case VAR_4 : if ( ( VAR_5 ) == null ) { VAR_5 = TYPE_1 . METHOD_2 ( VAR_1 ) ; } return VAR_5 ; default : assert false : STRING_1 ; } return TYPE_1 . METHOD_1 ( ) ; } 
TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( 1 ) ; when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( false ) ; when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( false ) ; when ( VAR_1 . METHOD_6 ( ) ) . thenReturn ( true ) ; when ( VAR_1 . METHOD_7 ( ) ) . thenReturn ( false ) ; return VAR_1 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 , java.lang.String [ ] args ) { if ( METHOD_2 ( VAR_3 ) ) { java.util.List < TYPE_5 > VAR_8 = TYPE_6 . METHOD_3 ( VAR_3 , VAR_2 , args ) ; return new TYPE_7 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_8 ) ; } else { return null ; } } 
private long METHOD_1 ( android.os.AsyncResult ar ) { TYPE_1 response = ( ( TYPE_1 ) ( ar . result ) ) ; if ( ( response . METHOD_2 ( ) ) < 0 ) { if ( VAR_1 ) log ( STRING_1 ) ; return VAR_2 ; } else if ( ( response . METHOD_2 ( ) ) == ( VAR_3 ) ) { if ( VAR_1 ) log ( STRING_2 ) ; return VAR_4 ; } return ( ( long ) ( response . METHOD_2 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) ; assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 server = new TYPE_1 ( 0 ) ; int VAR_1 = server . METHOD_2 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_3 ( ) , VAR_1 , true ) ; assertEquals ( STRING_1 , VAR_1 , VAR_2 . METHOD_4 ( ) ) ; VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_3 ( ) , VAR_1 , false ) ; VAR_2 . METHOD_5 ( ) ; } 
public void METHOD_1 ( int VAR_1 , int VAR_2 ) { synchronized ( this ) { if ( ( ( VAR_3 ) == 0 ) && ( ! ( VAR_4 ) ) ) { METHOD_2 ( VAR_1 , VAR_5 , VAR_2 , INT_1 , VAR_6 ) ; VAR_7 . METHOD_3 ( android.os.Message . METHOD_4 ( VAR_7 , 1 , this ) , VAR_2 ) ; } } } 
public void METHOD_1 ( byte [ ] VAR_1 ) { synchronized ( this ) { if ( ( VAR_2 ) == null ) { VAR_2 = VAR_3 . get ( VAR_4 ) ; } if ( ( VAR_2 . METHOD_2 ( VAR_1 , null , VAR_5 ) ) < 0 ) { VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 , null , VAR_5 ) ; } } } 
protected void METHOD_1 ( short VAR_1 , short VAR_2 , java.lang.String VAR_3 , java.lang.Exception VAR_4 ) throws java.io.IOException { if ( ! ( VAR_5 ) ) { this . VAR_5 = true ; if ( VAR_1 == ( VAR_6 ) ) { METHOD_2 ( ) ; this . VAR_7 = true ; } METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; VAR_8 . METHOD_4 ( ) ; if ( VAR_1 != ( VAR_6 ) ) { return ; } } throw new java.io.IOException ( VAR_9 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 call = TYPE_2 . METHOD_2 ( VAR_1 class ) ; TYPE_2 . when ( call . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; TYPE_2 . when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( call ) ; TYPE_3 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; org.mockito.Mockito.verify ( call ) . METHOD_6 ( false , null ) ; } 
public static void METHOD_1 ( TYPE_1 context ) { TYPE_2 . METHOD_2 ( TYPE_3 . TAG ) ; TYPE_2 . METHOD_3 ( context ) ; TYPE_2 . METHOD_4 ( ) ; for ( TYPE_4 p : VAR_1 ) { TYPE_2 . METHOD_5 ( p ) ; } TYPE_2 . METHOD_6 ( TYPE_3 : : METHOD_7 ) ; TYPE_2 . METHOD_8 ( TYPE_5 : : METHOD_9 ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 target ) { java.lang.StringBuilder result = new java.lang.StringBuilder ( VAR_1 . getName ( ) ) ; for ( TYPE_3 VAR_2 : VAR_3 ) { if ( VAR_2 != null ) { java.lang.String VAR_4 = VAR_2 . METHOD_2 ( target ) ; if ( ( VAR_4 != null ) && ( ( VAR_4 . length ( ) ) > 0 ) ) { result . append ( VAR_5 ) ; result . append ( VAR_4 ) ; } } } return result . toString ( ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 + ( ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) ; final java.lang.String expected = STRING_10 + ( STRING_11 + STRING_12 ) ; assertEquals ( expected , METHOD_2 ( VAR_1 ) ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { android.content.Intent VAR_4 = new android.content.Intent ( VAR_5 ) ; VAR_4 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 ) ) ; VAR_1 . METHOD_4 ( VAR_4 , VAR_7 , VAR_8 , VAR_9 , null , null , VAR_10 , null , null ) ; } 
public final void METHOD_1 ( int VAR_1 , java.lang.String format , byte [ ] VAR_2 ) throws TYPE_1 { synchronized ( VAR_3 ) { if ( ( VAR_4 ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } try { VAR_4 . METHOD_1 ( VAR_1 , format , VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_5 , ( STRING_2 + ( e.getMessage ( ) ) ) ) ; METHOD_2 ( VAR_1 , 0 , VAR_6 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( INT_1 ) . METHOD_4 ( STRING_1 ) ) ; server . METHOD_5 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_6 ( STRING_2 ) . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( VAR_1 . METHOD_9 ( ) , VAR_2 ) ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . METHOD_2 ( VAR_1 ) ) { return STRING_2 ; } else if ( STRING_3 . METHOD_2 ( VAR_1 ) ) { return STRING_4 ; } else if ( STRING_5 . METHOD_2 ( VAR_1 ) ) { return STRING_6 ; } else { throw new java.lang.IllegalArgumentException ( ( STRING_7 + VAR_1 ) ) ; } } 
public TYPE_1 [ ] METHOD_1 ( ) { int n = 0 ; for ( java.util.ArrayList < TYPE_1 > VAR_1 : VAR_2 . values ( ) ) { n += VAR_1 . size ( ) ; } TYPE_1 [ ] VAR_3 = new TYPE_1 [ n ] ; int i = 0 ; for ( java.util.ArrayList < TYPE_1 > VAR_1 : VAR_2 . values ( ) ) { for ( TYPE_1 source : VAR_1 ) { VAR_3 [ ( i ++ ) ] = source ; } } return VAR_3 ; } 
private static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 != null ) { TYPE_4 VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 != null ) { return VAR_2 . METHOD_5 ( ) ; } } return null ; } 
TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( int id ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( ( entry . id ) == id ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + id ) ) ; return null ; } 
public final void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_3 , VAR_2 , 10 , 12 , INT_1 , INT_2 ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_3 ) ; TYPE_5 VAR_5 = m . METHOD_2 ( VAR_4 ) ; TYPE_5 VAR_6 = m . METHOD_2 ( VAR_4 ) ; METHOD_3 ( VAR_6 , VAR_5 ) ; } 
private void METHOD_1 ( byte [ ] address , byte VAR_1 , int [ ] VAR_2 ) { if ( VAR_3 ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; TYPE_2 VAR_6 = VAR_7 new TYPE_3 ( address , VAR_1 , VAR_2 ) ; android.os.Message msg = VAR_8 . METHOD_2 ( VAR_9 ) ; msg.obj = VAR_6 ; VAR_8 . METHOD_3 ( msg ) ; } 
public void METHOD_1 ( java.lang.String address , java.lang.String VAR_1 , int flags , int VAR_2 ) { if ( VAR_3 . equals ( VAR_1 ) ) { if ( VAR_4 ) { log ( ( ( ( ( ( ( ( STRING_1 + address ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + flags ) + STRING_4 ) + VAR_2 ) ) ; } VAR_5 . METHOD_2 ( VAR_6 , new TYPE_1 ( address ) ) ; } } 
private synchronized void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 . size ( ) ) ) ) ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { METHOD_3 ( new TYPE_2 < TYPE_3 > ( VAR_4 , null ) ) ; } } 
private static int METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , int VAR_4 ) { if ( VAR_1 && ( VAR_4 == 0 ) ) { return - 1 ; } if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; } return VAR_4 ; } 
public void METHOD_1 ( ) { log ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; log ( STRING_2 ) ; METHOD_3 ( ) ; VAR_2 . METHOD_4 ( METHOD_5 ( ) ) ; VAR_3 . set ( false ) ; ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_6 ( ) ; } 
public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; sb.append ( METHOD_1 ( ) . getName ( ) ) ; sb.append ( CHAR_1 ) ; sb.append ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) ; sb.append ( CHAR_2 ) ; sb.append ( method ) ; if ( ( VAR_1 ) != null ) { sb.append ( CHAR_2 ) ; sb.append ( VAR_1 ) ; } sb.append ( CHAR_3 ) ; return sb . toString ( ) ; } 
public void METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; final TYPE_1 parent = VAR_3 . METHOD_4 ( ) ; if ( ! ( parent instanceof TYPE_3 ) ) { return ; } final TYPE_4 VAR_4 = TYPE_5 . METHOD_5 ( VAR_3 , VAR_5 class ) ; if ( VAR_4 == null ) { return ; } METHOD_6 ( ( ( TYPE_3 ) ( parent ) ) , VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , java.io.IOException { if ( VAR_3 ) { java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } TYPE_4 < TYPE_1 , TYPE_5 > result = TYPE_6 . METHOD_2 ( VAR_1 , VAR_2 , null ) ; return result . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 , STRING_2 , STRING_3 ) ) ) ) ; java.lang.String text = STRING_4 ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( text ) ; VAR_2 . METHOD_4 ( 1 ) ; assertEquals ( 1 , VAR_2 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( STRING_5 ) ; VAR_2 . METHOD_4 ( 1 ) ; assertEquals ( 0 , VAR_2 . METHOD_5 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) ) { VAR_1 = STRING_2 ; } else if ( STRING_3 . equals ( VAR_1 ) ) { VAR_1 = STRING_4 ; } final int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == 0 ) { return null ; } TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) ; return new TYPE_1 ( VAR_2 ) ; } 
public static < TYPE_1 , TYPE_2 > TYPE_1 [ ] METHOD_1 ( TYPE_2 [ ] VAR_1 , int VAR_2 , java.lang.Class < ? extends TYPE_1 [ ] > VAR_3 ) { if ( VAR_2 < 0 ) { throw new TYPE_3 ( ) ; } return TYPE_4 . METHOD_2 ( VAR_1 , 0 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final int VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_1 ) ; args . METHOD_2 ( STRING_2 , VAR_2 ) ; TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 , false ) ; TYPE_4 . METHOD_6 ( VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( double number , TYPE_1 result , TYPE_2 VAR_1 , boolean VAR_2 , boolean VAR_3 , boolean VAR_4 , int VAR_5 ) { if ( ( VAR_6 ) == ( VAR_7 ) ) { return METHOD_1 ( VAR_8 . METHOD_2 ( METHOD_3 ( number ) ) , result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } else { return METHOD_1 ( result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } } 
public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( subId ) ; if ( VAR_2 != null ) { if ( ! ( TYPE_2 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ) { return null ; } return VAR_2 . METHOD_4 ( ) ; } else { loge ( ( STRING_2 + subId ) ) ; return null ; } } 
public TYPE_1 METHOD_1 ( char x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 context ) { TYPE_3 VAR_1 = context . METHOD_2 ( VAR_2 class ) ; java.util.List < TYPE_1 > VAR_3 ; try { VAR_3 = VAR_1 . METHOD_3 ( ) ; } catch ( TYPE_4 e ) { throw TYPE_5 . METHOD_4 ( ( STRING_1 + e ) ) ; } for ( TYPE_1 VAR_4 : VAR_3 ) { TYPE_6 VAR_5 = VAR_1 . METHOD_5 ( VAR_4 ) ; if ( VAR_5 . METHOD_6 ( VAR_6 ) ) { return VAR_4 ; } } throw TYPE_5 . METHOD_4 ( STRING_2 ) ; } 
private static boolean METHOD_1 ( java.lang.String VAR_1 ) { try { java.io.File VAR_2 = new java.io.File ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_2 ) , VAR_3 ) ; } catch ( TYPE_3 e ) { return false ; } return true ; } 
private static void METHOD_1 ( TYPE_1 a , TYPE_1 b ) { if ( a != b ) { assertEquals ( a . METHOD_2 ( ) . METHOD_3 ( ) , b . METHOD_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( a . METHOD_2 ( ) . METHOD_4 ( ) , b . METHOD_2 ( ) . METHOD_4 ( ) ) ; assertEquals ( a . METHOD_5 ( ) , b . METHOD_5 ( ) ) ; } } 
public boolean METHOD_1 ( ) { if ( VAR_1 ) { android.util.Log.v ( VAR_2 . TAG , STRING_1 ) ; } METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_3 ( ) ; } if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_4 ( null ) ; } return true ; } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( 1 ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; ++ i ) VAR_2 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( ) ; } catch ( TYPE_3 VAR_4 ) { } } 
TYPE_1 METHOD_1 ( TYPE_2 parent , TYPE_3 VAR_1 ) { TYPE_4 path = TYPE_5 . METHOD_2 ( parent , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) . append ( VAR_1 . getName ( ) ) ; return new TYPE_1 ( path . toString ( ) , CHAR_1 ) ; } 
public static TYPE_1 METHOD_1 ( ) { TYPE_2 v = new TYPE_2 ( ) ; TYPE_3 . METHOD_2 ( v , TYPE_4 . METHOD_1 ( ) ) ; TYPE_3 . METHOD_2 ( v , TYPE_5 . METHOD_1 ( ) ) ; TYPE_3 . METHOD_2 ( v , TYPE_6 . METHOD_1 ( ) ) ; TYPE_3 . METHOD_2 ( v , TYPE_7 . METHOD_1 ( ) ) ; return v . METHOD_3 ( ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( this ) { if ( ( ! ( METHOD_2 ( VAR_2 , VAR_1 , TYPE_2 . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_5 ( ) ; return ( VAR_4 ) != null ? VAR_4 . METHOD_6 ( ) : null ; } } 
public static int METHOD_1 ( TYPE_1 context ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( context ) ) { return VAR_2 . METHOD_4 ( VAR_3 ) ; } else { return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , 0 ) ; } } 
public int METHOD_1 ( ) { int count = VAR_1 . METHOD_2 ( ) . get ( ) ; if ( count == 0 ) { TYPE_1 VAR_2 = VAR_3 . get ( getElement ( ) ) ; if ( VAR_2 != null ) { count = VAR_2 . get ( ) ; } } return count ; } 
public java.lang.String METHOD_1 ( TYPE_1 number ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; if ( number . METHOD_2 ( ) ) { char [ ] VAR_2 = new char [ number . METHOD_3 ( ) ] ; TYPE_2 . METHOD_4 ( VAR_2 , CHAR_1 ) ; VAR_1 . append ( new java.lang.String ( VAR_2 ) ) ; } VAR_1 . append ( number . METHOD_5 ( ) ) ; return VAR_1 . toString ( ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 request ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; java.lang.String VAR_2 = request . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_2 . METHOD_4 ( ) , ( STRING_2 + VAR_2 ) ) ) ; java.lang.String time = request . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_3 ( new TYPE_1 ( VAR_4 , ( ( ( STRING_2 + VAR_2 ) + STRING_4 ) + time ) ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_2 . when ( VAR_4 . METHOD_4 ( ) ) . thenReturn ( VAR_5 ) ; TYPE_2 . when ( VAR_4 . METHOD_5 ( ) ) . thenReturn ( VAR_6 ) ; VAR_3 . METHOD_6 ( VAR_7 , VAR_8 ) ; assertEquals ( VAR_9 , VAR_10 . METHOD_7 ( VAR_11 ) . METHOD_8 ( ) ) ; assertEquals ( VAR_9 , VAR_12 . METHOD_7 ( VAR_11 ) . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( null , STRING_1 , VAR_2 . TAG , null , null , null , null , false ) ; verify ( VAR_3 , METHOD_3 ( 0 ) ) . METHOD_4 ( METHOD_5 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_6 ( ) , METHOD_7 ( VAR_4 class ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , null , VAR_1 , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; TYPE_2 call = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ; assert call . METHOD_8 ( ) ; assertEquals ( VAR_2 , call . METHOD_9 ( ) ) ; call . METHOD_10 ( VAR_4 . METHOD_11 ( ) ) ; assert ! ( call . METHOD_8 ( ) ) ; assertEquals ( VAR_5 , call . METHOD_9 ( ) ) ; } 
static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , float VAR_5 ) { TYPE_1 d = VAR_6 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) ; return true ; } 
private static java.lang.String METHOD_1 ( byte [ ] content ) throws java.lang.Exception { java.io.File f = java.io.File . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_1 VAR_1 = new TYPE_1 ( f ) ; VAR_1 . METHOD_3 ( content ) ; VAR_1 . METHOD_4 ( ) ; return f . METHOD_5 ( ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { METHOD_3 ( VAR_3 , false , 0 ) ; } else { METHOD_4 ( VAR_3 , false ) ; try { VAR_4 . METHOD_5 ( VAR_5 , VAR_3 , false ) ; } catch ( android.os.RemoteException e ) { android.util.Log.d ( VAR_6 . TAG , STRING_1 , e ) ; } } } 
static int METHOD_1 ( int VAR_1 , float VAR_2 , float t , float r , float b , int VAR_3 , int VAR_4 ) { TYPE_1 VAR_5 = VAR_6 . METHOD_2 ( VAR_1 ) ; if ( VAR_5 == null ) { return 0 ; } TYPE_2 VAR_7 = TYPE_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_7 == null ) { return 0 ; } return VAR_5 . METHOD_3 ( new TYPE_3 ( VAR_2 , t , r , b ) , VAR_7 , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; boolean VAR_3 = VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_2 ) ) ; assertEquals ( VAR_3 , true ) ; } 
public void METHOD_1 ( int VAR_1 , byte [ ] VAR_2 , int VAR_3 , byte [ ] VAR_4 ) { android.os.Message msg = VAR_5 . METHOD_2 ( VAR_6 ) ; msg.arg1 = VAR_7 ; VAR_8 = VAR_1 ; msg.obj = VAR_3 ; msg . METHOD_3 ( ) . METHOD_4 ( VAR_9 , VAR_2 ) ; msg . METHOD_3 ( ) . METHOD_4 ( VAR_10 , VAR_4 ) ; VAR_5 . METHOD_5 ( msg ) ; } 
static void METHOD_1 ( int VAR_1 , java.lang.String text , int start , int VAR_2 , int VAR_3 , int VAR_4 , float x , float y , int flags , int VAR_5 ) { int count = VAR_2 - start ; char [ ] VAR_6 = TYPE_1 . METHOD_2 ( count ) ; TYPE_2 . METHOD_3 ( text , start , VAR_2 , VAR_6 , 0 ) ; TYPE_3 . METHOD_4 ( VAR_1 , VAR_6 , 0 , count , x , y , flags , VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 field , java.lang.String name , java.lang.Object value , TYPE_2 VAR_1 , java.lang.String source , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_3 entry = VAR_4 . get ( field ) ; if ( entry == null ) { entry = new TYPE_3 ( TYPE_4 . METHOD_2 ( ) , VAR_1 , source , VAR_2 , VAR_3 , true ) ; VAR_4 . METHOD_3 ( field , entry ) ; METHOD_4 ( field ) ; } entry . METHOD_5 ( VAR_1 , value ) ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 , int w , int h , short [ ] data ) { mRS . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , w , h ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , ( ( data . length ) * 2 ) ) ; } 
private void METHOD_1 ( final int VAR_1 , final boolean VAR_2 , boolean VAR_3 ) throws java.lang.Exception { METHOD_2 ( VAR_2 ) ; TYPE_1 config = new TYPE_1 ( ) ; VAR_4 = VAR_1 ; assertTrue ( VAR_5 . METHOD_3 ( config , VAR_3 ) ) ; METHOD_4 ( VAR_2 , VAR_3 , 1 ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } int VAR_2 = this . METHOD_2 ( ) ; int VAR_3 = this . METHOD_3 ( ) ; assert VAR_2 <= VAR_3 ; int VAR_4 = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ; int size = VAR_4 > > 1 ; return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; } 
public java.util.List < android.bluetooth.BluetoothDevice > METHOD_1 ( int [ ] VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + ( TYPE_1 . toString ( VAR_1 ) ) ) ) ; TYPE_2 service = METHOD_2 ( ) ; if ( service == null ) { return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; } return service . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( this ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; for ( TYPE_2 VAR_3 : VAR_4 . values ( ) ) { if ( VAR_3 == null ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } VAR_1 . METHOD_3 ( VAR_3 ) ; } } VAR_1 . METHOD_4 ( this ) ; } 
public void METHOD_1 ( final int w , final int h , final int VAR_1 , final int VAR_2 ) { if ( METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( w , h , VAR_1 , VAR_2 ) ; } } ) ; return ; } VAR_4 . METHOD_4 ( ) . METHOD_1 ( w , h , VAR_1 , VAR_2 ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 s = new TYPE_1 ( ) ; s . METHOD_5 ( method ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == 0 ) { return null ; } java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 < java.lang.String , TYPE_3 > entry : VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( entry . METHOD_4 ( ) . METHOD_5 ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { TYPE_4 . METHOD_2 ( s , fd , callback , VAR_2 , 0 , VAR_2 . length , 0 ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { byte [ ] VAR_1 = METHOD_2 ( ) . get ( 2 , VAR_2 ) ; if ( ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) { fail ( STRING_1 ) ; } } 
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return false ; } TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ! ( VAR_2 instanceof TYPE_2 ) ) { return false ; } TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_2 ) ) ; return ( VAR_3 . METHOD_3 ( ) ) && ( VAR_3 . METHOD_1 ( ) ) ; } 
void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( STRING_1 ) ; TYPE_2 . METHOD_3 ( ( STRING_1 + STRING_2 ) ) ; if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_3 ) ; } java.lang.String error = METHOD_4 ( VAR_1 , VAR_2 ) ; if ( error != null ) { throw new TYPE_3 ( error ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , int VAR_4 ) throws TYPE_4 , java.io.IOException { VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; byte [ ] VAR_5 = VAR_2 . METHOD_5 ( ) ; METHOD_6 ( VAR_5 , VAR_3 , VAR_4 ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { java.lang.String text = VAR_2 . METHOD_2 ( ) ; if ( ! ( VAR_3 . equals ( text ) ) ) { VAR_4 = true ; try { boolean VAR_5 = METHOD_3 ( VAR_1 , text ) ; if ( ! VAR_5 ) { return false ; } } finally { VAR_4 = false ; } VAR_3 = text ; } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = ( VAR_2 ) + 1 ; when ( VAR_3 . METHOD_2 ( VAR_1 ) ) . thenReturn ( false ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; VAR_5 . verify ( VAR_6 , METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( VAR_7 class ) ) ; VAR_5 . verify ( VAR_6 , METHOD_4 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( VAR_8 class ) ) ; } 
public void run ( ) { METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { if ( VAR_1 . METHOD_4 ( ) ) { boolean VAR_2 = true ; if ( ( VAR_3 ) != null ) { VAR_2 = ! ( METHOD_5 ( ) ) ; } if ( VAR_2 ) { METHOD_1 ( ) . METHOD_6 ( ) ; } } else { METHOD_7 ( ) ; } } } ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
public boolean METHOD_1 ( int netId , java.lang.String name , java.util.Map < java.lang.String , java.lang.String > values ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( values ) ; if ( VAR_1 == null ) { return false ; } return METHOD_3 ( netId , name , ( ( STRING_1 + VAR_1 ) + STRING_1 ) ) ; } 
private java.lang.String METHOD_1 ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; if ( ( VAR_2 ) != null ) { VAR_1 . append ( VAR_2 ) . append ( CHAR_1 ) ; } METHOD_2 ( VAR_1 ) ; if ( ( ( VAR_3 ) != null ) && ( ! ( VAR_3 . METHOD_3 ( ) ) ) ) { VAR_1 . append ( CHAR_2 ) . append ( VAR_3 . METHOD_4 ( ) ) ; } return VAR_1 . toString ( ) ; } 
public synchronized void METHOD_1 ( ) { if ( VAR_1 ) { return ; } VAR_1 = true ; if ( ( VAR_2 ) == null ) { return ; } try { VAR_3 = new TYPE_1 ( path . METHOD_2 ( ) ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_2 . METHOD_3 ( ( STRING_1 + ( path ) ) , VAR_4 ) ; VAR_3 = null ; } } 
synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] src , int [ ] VAR_2 , int [ ] VAR_3 , int [ ] VAR_4 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , src , VAR_2 , VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; java.util.List < TYPE_2 > VAR_2 = TYPE_2 . METHOD_2 ( ) . get ( VAR_1 ) ; assertNotNull ( VAR_2 ) ; for ( TYPE_2 p : VAR_2 ) { assertTrue ( ( ( STRING_2 + p ) + STRING_3 ) , p . METHOD_3 ( ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( ( METHOD_3 ( ) ) != null ) { ( ( TYPE_2 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ( ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_5 ( ) ) ) ) ; } } 
public static void METHOD_1 ( TYPE_1 listener ) { synchronized ( VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( listener ) ) == false ) { VAR_2 . METHOD_3 ( listener ) ; if ( ( VAR_3 ) != null ) { try { listener . METHOD_4 ( VAR_3 ) ; } catch ( java.lang.Exception e ) { TYPE_2 . e ( VAR_4 , e ) ; } } } } } 
public byte METHOD_1 ( byte in ) { if ( METHOD_2 ( ) ) { throw new TYPE_1 ( STRING_1 ) ; } if ( ( index ) == 0 ) { METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; } byte out = ( ( byte ) ( ( VAR_1 [ index ] ) ^ in ) ) ; index = ( ( index ) + 1 ) & INT_1 ; return out ; } 
public int METHOD_1 ( int type , java.lang.String VAR_1 ) { mContext . METHOD_2 ( VAR_2 , STRING_1 ) ; METHOD_3 ( ) ; if ( VAR_3 ) { TYPE_1 . i ( TYPE_2 . TAG , STRING_2 ) ; } try { TYPE_3 event = VAR_4 . METHOD_4 ( STRING_3 , STRING_4 , VAR_5 [ type ] , new TYPE_4 ( METHOD_5 ( VAR_1 ) ) ) ; return java.lang.Integer.parseInt ( event . getMessage ( ) ) ; } catch ( TYPE_5 e ) { return e . METHOD_6 ( ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.List < TYPE_3 > VAR_2 , TYPE_3 VAR_3 , java.util.List < TYPE_3 > VAR_4 , TYPE_1 parent ) throws java.io.IOException { VAR_4 = VAR_5 < TYPE_3 > METHOD_2 ( ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_4 ) . build ( ) ; if ( ! ( VAR_2 . METHOD_5 ( ) ) ) { parent = TYPE_4 . METHOD_6 ( VAR_2 , VAR_1 , parent ) ; } return TYPE_4 . METHOD_6 ( VAR_4 , VAR_1 , parent ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.Class [ ] VAR_1 = new java.lang.Class [ ] { VAR_2 . Object class } ; TYPE_1 < ? > VAR_3 = VAR_4 class . METHOD_2 ( VAR_1 ) ; int count = VAR_3 . METHOD_3 ( ) ; assertEquals ( 1 , count ) ; } 
public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 16 , INT_1 , false ) ; TYPE_3 in = t . METHOD_3 ( args . in ) ; args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_7 ( ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) TYPE_2 . log ( ( STRING_1 + VAR_1 ) ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; if ( TYPE_2 . METHOD_4 ( mContext ) ) { TYPE_2 . log ( STRING_2 ) ; } else { TYPE_2 . log ( STRING_3 ) ; METHOD_5 ( VAR_1 ) ; } if ( VAR_2 ) TYPE_2 . log ( ( STRING_4 + VAR_1 ) ) ; } 
private static void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . get ( VAR_2 ) ; if ( ( ( ! ( TYPE_1 . METHOD_2 ( VAR_3 , false ) ) ) || ( VAR_1 == null ) ) || ( VAR_1 . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_4 ( VAR_4 ) ; } } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , byte [ ] VAR_4 ) { METHOD_2 ( ) ; if ( VAR_4 == null ) { METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 ) ; } else { METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } 
public void METHOD_1 ( TYPE_1 listener ) { if ( ( VAR_1 ) != null ) { android.util.Log.w ( VAR_2 , STRING_1 ) ; return ; } VAR_1 = ( listener != null ) ? listener : new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; java.lang.String VAR_6 = TYPE_2 . METHOD_3 ( VAR_3 , STRING_2 ) ; boolean result = VAR_7 . METHOD_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; TYPE_3 . assertTrue ( VAR_6 , result ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_3 ) ) ; METHOD_3 ( METHOD_4 ( info , VAR_2 , true , VAR_1 ) ) ; } catch ( TYPE_5 e ) { throw METHOD_5 ( x , e ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_2 VAR_1 = TYPE_2 . METHOD_4 ( 100 ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_4 ( 100 ) ; try { VAR_3 . METHOD_5 ( VAR_1 , new TYPE_2 [ ] { VAR_2 } ) ; fail ( STRING_1 ) ; } catch ( TYPE_3 ex ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( VAR_1 , true , STRING_3 ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; METHOD_4 ( VAR_2 , VAR_3 , STRING_4 ) ; METHOD_4 ( VAR_2 , VAR_4 , STRING_5 ) ; METHOD_4 ( VAR_2 , VAR_5 , STRING_6 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.Object data ) { TYPE_2 [ ] VAR_1 = null ; int VAR_2 = 0 ; if ( data == null ) { return VAR_3 ; } switch ( VAR_4 ) { case VAR_5 : VAR_6 . METHOD_2 ( ( ( TYPE_2 ) ( data ) ) ) ; break ; case VAR_7 : VAR_1 = ( ( TYPE_2 [ ] ) ( data ) ) ; for ( TYPE_2 VAR_8 : VAR_1 ) { VAR_6 . METHOD_2 ( VAR_8 ) ; } break ; } return VAR_9 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String path ) { VAR_1 . METHOD_2 ( ) ; int VAR_3 = VAR_1 . METHOD_3 ( VAR_2 , path ) ; if ( VAR_3 == 0 ) { throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; } TYPE_1 VAR_4 = new TYPE_1 ( VAR_3 , VAR_1 , null ) ; VAR_4 . METHOD_4 ( ) ; return VAR_4 ; } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; for ( int i = 0 ; i < ( ( VAR_3 ) - 1 ) ; ++ i ) VAR_2 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } } 
private void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; switch ( VAR_1 ) { case VAR_4 : VAR_5 . METHOD_3 ( VAR_6 ) ; break ; case VAR_7 : case VAR_8 : break ; default : VAR_5 . METHOD_3 ( VAR_9 ) ; } } 
private void METHOD_1 ( ) { VAR_1 = false ; boolean VAR_2 = true ; for ( TYPE_1 VAR_3 : VAR_4 . METHOD_2 ( ) ) { VAR_2 &= VAR_3 . METHOD_3 ( true ) ; } if ( VAR_2 ) { return ; } if ( ! ( VAR_5 . METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_6 . METHOD_6 ( ) , VAR_6 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) { return ; } VAR_1 = ( VAR_7 . METHOD_9 ( true ) ) == false ; } 
private void METHOD_1 ( TYPE_1 s ) throws java.io.IOException , TYPE_2 { VAR_1 = ( ( byte [ ] ) ( s . METHOD_2 ( ) ) ) ; VAR_2 = ( ( byte [ ] ) ( s . METHOD_2 ( ) ) ) ; VAR_3 = ( ( java.lang.String ) ( s . METHOD_2 ( ) ) ) ; VAR_4 = ( ( java.lang.String ) ( s . METHOD_2 ( ) ) ) ; } 
public void METHOD_1 ( TYPE_1 error ) { if ( error == null ) { METHOD_1 ( null , null ) ; } else { TYPE_2 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( 0 , 0 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ; METHOD_1 ( error , VAR_1 ) ; } } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = ( VAR_1 != null ) ? VAR_1 : VAR_2 ; if ( ( VAR_1 != null ) && ( VAR_2 != null ) ) { VAR_3 += STRING_1 + VAR_2 ; } VAR_3 = TYPE_1 . METHOD_2 ( VAR_3 ) ; return VAR_3 ; } 
public static void METHOD_1 ( TYPE_1 context , java.lang.String VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( ) ) ) { java.io.File VAR_2 = TYPE_3 . METHOD_3 ( context , VAR_1 ) ; if ( VAR_2 != null ) { TYPE_4 . i ( TYPE_3 . TAG , ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) ) ; } else { VAR_2 = new java.io.File ( VAR_3 , VAR_1 ) ; } TYPE_2 . METHOD_5 ( VAR_2 . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . addFeature ( VAR_2 ) . addFeature ( VAR_3 ) . build ( ) ; TYPE_1 VAR_4 = new TYPE_2 ( ) . addFeature ( VAR_3 ) . addFeature ( VAR_2 ) . build ( ) ; TYPE_3 . assertEquals ( VAR_1 , VAR_4 ) ; } 
public java.lang.String toString ( ) { TYPE_1 b = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( METHOD_1 ( ) ) ; ++ i ) { b . append ( METHOD_2 ( i ) ) ; } b . append ( CHAR_1 ) ; for ( int i = 0 ; i < ( METHOD_3 ( ) ) ; ++ i ) { b . append ( METHOD_4 ( i ) . toString ( ) ) ; } return b . toString ( ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 type ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( VAR_3 ) ; if ( VAR_2 . METHOD_2 ( ) ) { java.util.Map < java.lang.String , java.lang.String > VAR_4 = TYPE_5 . METHOD_4 ( VAR_2 , null ) ; if ( VAR_4 != null ) { return new TYPE_1 ( VAR_1 , VAR_4 , type ) ; } } } return null ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) ) { VAR_1 = STRING_2 ; } else if ( STRING_3 . equals ( VAR_1 ) ) { VAR_1 = STRING_4 ; } final long VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == 0 ) { return null ; } TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_3 , VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_3 , VAR_5 ) ; return new TYPE_1 ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = VAR_2 ; VAR_3 = VAR_4 ; TYPE_1 VAR_5 = METHOD_2 ( STRING_1 , VAR_6 . METHOD_3 ( ) , VAR_7 ) ; assertEquals ( VAR_8 , VAR_9 . METHOD_4 ( VAR_10 ) . METHOD_5 ( ) ) ; VAR_11 . METHOD_6 ( VAR_10 ) ; org.mockito.Mockito.verify ( VAR_7 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_12 ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_13 ) , org.mockito.Matchers . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( java.lang.String line ) throws java.lang.Exception { java.lang.String [ ] VAR_1 = new java.lang.String [ 5 ] ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 . METHOD_2 ( line , CHAR_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( VAR_1 , line ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 + ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) ; final java.lang.String expected = STRING_8 + ( STRING_9 + STRING_10 ) ; assertEquals ( expected , METHOD_2 ( VAR_1 ) ) ; } 
TYPE_1 call ( ) throws java.lang.Exception { java.lang.String VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 ) ; synchronized ( VAR_3 ) { if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { return null ; } VAR_3 . METHOD_3 ( VAR_1 ) ; } TYPE_3 . File VAR_4 = TYPE_2 . METHOD_4 ( VAR_5 , VAR_2 ) ; if ( VAR_6 ) { VAR_4 . METHOD_5 ( ) ; } VAR_7 . METHOD_6 ( VAR_2 , VAR_4 , VAR_6 , options , VAR_8 ) ; return null ; } 
public boolean METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( this ) { if ( ( ! ( METHOD_2 ( VAR_2 , VAR_1 , TYPE_1 . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) { return false ; } TYPE_2 VAR_3 = METHOD_5 ( ) ; if ( ( VAR_4 ) != null ) { TYPE_3 text = VAR_4 . METHOD_6 ( 0 ) . METHOD_7 ( ) ; return ( text != null ) && ( ( text . length ( ) ) > 0 ) ; } return false ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , null , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) ) ; TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.IllegalArgumentException { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } final int VAR_2 ; synchronized ( VAR_3 ) { VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == 0 ) { throw new java.lang.IllegalArgumentException ( ( STRING_2 + VAR_1 ) ) ; } TYPE_2 . METHOD_3 ( VAR_2 ) ; } return new TYPE_1 ( VAR_2 ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) { final java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ; final TYPE_1 [ ] VAR_4 = VAR_2 . METHOD_4 ( VAR_3 , true ) ; if ( ( VAR_4 . length ) == 1 ) { return VAR_4 [ 0 ] ; } return null ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new java.util.HashMap < TYPE_2 , TYPE_1 > ( ) ; } TYPE_1 VAR_3 = VAR_2 . get ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( VAR_1 , VAR_3 ) ; } return VAR_3 ; } 
private static java.io.File [ ] METHOD_1 ( java.lang.String path ) { java.util.ArrayList < java.io.File > result = TYPE_1 . METHOD_2 ( path , TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) , true ) ; return result . METHOD_4 ( new java.io.File [ result . size ( ) ] ) ; } 
public boolean METHOD_1 ( TYPE_1 call ) throws TYPE_2 { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) , VAR_5 ) ; } if ( ( call . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) && ( call . METHOD_6 ( ) . equals ( VAR_1 ) ) ) { assert call . METHOD_7 ( ) . METHOD_5 ( VAR_2 ) ; return true ; } return false ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_1 result = VAR_2 . get ( VAR_1 ) ; if ( result == null ) { result = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_1 , result ) ; } return result ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] [ ] VAR_2 = TYPE_4 . METHOD_2 ( s ) ; TYPE_5 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) , VAR_2 ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < java.lang.Integer > ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_4 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_5 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 , java.util.ArrayList < java.lang.Integer > VAR_5 , TYPE_5 listener , TYPE_6 VAR_6 ) { return new TYPE_1 ( VAR_7 . METHOD_2 ( ) , VAR_1 , VAR_4 , VAR_5 , listener , VAR_6 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { this . VAR_2 = VAR_1 ; if ( VAR_1 instanceof TYPE_3 ) { final TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_1 ) ) ; VAR_3 . METHOD_2 ( this ) ; METHOD_3 ( VAR_4 , VAR_3 . METHOD_4 ( ) ) ; METHOD_3 ( STRING_1 , STRING_2 ) ; } else if ( VAR_1 instanceof TYPE_4 ) { METHOD_3 ( VAR_4 , java.lang.String.format ( STRING_3 , METHOD_5 ( ) ) ) ; METHOD_3 ( VAR_5 , STRING_4 ) ; } } 
public void METHOD_1 ( java.lang.String [ ] [ ] VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } for ( java.lang.String [ ] VAR_2 : VAR_1 ) { if ( ( VAR_2 . length ) < 5 ) { throw new java.lang.IllegalArgumentException ( ( ( TYPE_1 . toString ( VAR_2 ) ) + STRING_2 ) ) ; } } this . VAR_1 = TYPE_2 . METHOD_2 ( VAR_1 ) ; this . VAR_3 = true ; } 
private void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = METHOD_2 ( ) ; int VAR_2 = java.lang.Integer . METHOD_3 ( VAR_1 ) ; android.content.Intent VAR_3 = METHOD_4 ( VAR_4 ) ; try { TYPE_1 VAR_5 = VAR_6 . METHOD_5 ( VAR_2 ) ; if ( VAR_5 != null ) { VAR_5 . METHOD_6 ( VAR_3 ) ; } } catch ( android.os.RemoteException e ) { } } 
protected java.lang.String METHOD_1 ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; int VAR_1 = VAR_2 . length ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { sb.append ( STRING_1 ) ; sb.append ( VAR_3 . get ( i ) ) ; sb.append ( STRING_2 ) ; sb.append ( VAR_2 [ i ] ) ; } return sb . toString ( ) ; } 
protected boolean start ( ) { android.util.Log.e ( TYPE_1 . TAG , STRING_1 ) ; TYPE_1 . METHOD_1 ( this ) ; if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_2 . METHOD_2 ( this ) ; } VAR_2 = TYPE_3 . METHOD_3 ( ) ; VAR_3 = false ; TYPE_4 VAR_4 = new TYPE_4 ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( VAR_7 , VAR_4 ) ; METHOD_6 ( ) ; return ! ( VAR_3 ) ; } 
private boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , 0 , VAR_4 ) ; if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_5 ) ) { METHOD_4 ( ) ; return true ; } } catch ( TYPE_3 e ) { } return false ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.lang.RuntimeException { java.lang.Class < ? > VAR_3 = VAR_1 . METHOD_2 ( ) ; int VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 == 0 ? VAR_3 != ( void . class ) : VAR_3 != ( VAR_2 . METHOD_4 ( 0 ) ) ) throw TYPE_2 . METHOD_5 ( STRING_1 , VAR_1 , VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_4 VAR_3 = null ; for ( TYPE_5 field : VAR_2 . METHOD_3 ( ) ) { if ( STRING_2 . equals ( field . name ) ) { VAR_3 = VAR_4 . METHOD_4 ( ) ; } } return VAR_3 . METHOD_5 ( name ) ; } 
private void METHOD_1 ( java.lang.String test ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ( ( STRING_1 + test ) + STRING_2 ) ) ) ; VAR_1 . METHOD_3 ( new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ) ; } 
public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , java.lang.String name , java.lang.String VAR_3 ) { if ( ( ( VAR_4 ) == null ) && ( VAR_1 == ( VAR_5 ) ) ) { TYPE_1 . METHOD_2 ( VAR_2 . equals ( VAR_6 ) , STRING_1 , VAR_2 , VAR_6 ) ; VAR_4 = TYPE_2 . METHOD_3 ( VAR_2 , name , VAR_3 ) ; } super . METHOD_1 ( VAR_1 , VAR_2 , name , VAR_3 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 e ) { if ( VAR_2 ) { TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_1 ) ) ; return TYPE_5 . METHOD_1 ( VAR_1 , e ) ; } int id = VAR_1 . METHOD_2 ( 8 , e . METHOD_3 ( VAR_1 ) ) ; if ( ! ( e . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ) ) { throw new TYPE_6 ( STRING_1 ) ; } return new TYPE_1 ( id , VAR_1 , e ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; s . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( ) ; } 
public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; if ( VAR_1 == false ) { VAR_3 . METHOD_2 ( ) ; } try { TYPE_1 . METHOD_3 ( this , VAR_1 ) ; } catch ( java.io.IOException VAR_4 ) { VAR_4 . METHOD_4 ( ) ; } METHOD_5 ( VAR_5 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 node ) { TYPE_4 pos = ( ( TYPE_4 ) ( METHOD_2 ( node , 0 , 0 ) ) ) ; if ( pos != null ) { return TYPE_1 . METHOD_3 ( VAR_1 , pos , ( ( TYPE_4 ) ( pos . METHOD_4 ( ) ) ) ) ; } return TYPE_1 . METHOD_3 ( VAR_1 ) ; } 
static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out , java.lang.String [ ] args , long VAR_2 ) throws android.os.RemoteException , java.io.IOException { if ( VAR_1 instanceof TYPE_3 ) { try { VAR_1 . METHOD_2 ( out , args ) ; } catch ( android.os.RemoteException e ) { } return ; } TYPE_4 VAR_3 = new TYPE_4 ( ) ; try { VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) , args ) ; VAR_3 . METHOD_6 ( out , VAR_2 ) ; } finally { VAR_3 . METHOD_7 ( ) ; } } 
private synchronized boolean METHOD_1 ( java.lang.String packageName ) { for ( TYPE_1 info : VAR_1 ) { if ( VAR_2 . equals ( packageName ) ) { if ( VAR_3 ) android.util.Log.v ( VAR_4 . TAG , ( ( STRING_1 + packageName ) + STRING_2 ) ) ; return true ; } } if ( VAR_3 ) android.util.Log.v ( VAR_4 . TAG , ( ( STRING_1 + packageName ) + STRING_3 ) ) ; return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; final java.io.File VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) ; final java.io.File VAR_2 = new java.io.File ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . METHOD_8 ( ) , VAR_3 ) ) ; assertTrue ( VAR_2 . METHOD_9 ( ) ) ; TYPE_1 . METHOD_10 ( VAR_2 ) ; } 
static boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return true ; } TYPE_2 VAR_6 = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( VAR_6 == null ) { return true ; } return VAR_7 . METHOD_3 ( VAR_6 . METHOD_4 ( ) , VAR_3 ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , byte type , byte id , byte [ ] data ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + device ) + STRING_2 ) + type ) + STRING_3 ) + id ) ) ; TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( device , type , id , data ) ; } 
public final void METHOD_1 ( ) throws android.os.RemoteException { synchronized ( this ) { if ( METHOD_2 ( ) ) { throw new TYPE_1 ( STRING_1 ) ; } if ( ( VAR_1 ) == ( VAR_2 ) ) { return ; } METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_6 ( this , 0 ) ; } VAR_3 = null ; VAR_1 = VAR_2 ; } } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . d ( VAR_1 , ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) ) ; if ( ( ! ( VAR_2 ) ) && ( ! ( VAR_4 . METHOD_2 ( VAR_3 ) ) ) ) { TYPE_1 . d ( VAR_1 , STRING_4 ) ; METHOD_3 ( VAR_5 ) ; } METHOD_4 ( ) ; } 
private int METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ( VAR_1 < 0 ) || ( VAR_1 > ( VAR_3 ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) ) ; } int VAR_4 = VAR_5 [ VAR_1 ] ; return ( METHOD_2 ( ( VAR_4 + VAR_2 ) ) ) - ( METHOD_2 ( VAR_4 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , ( - 1 ) , new TYPE_3 ( VAR_1 ) ) ; } 
public static void run ( ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( VAR_1 class ) ; TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( 1 ) ; TYPE_4 t = new TYPE_4 ( ) { public void run ( ) { try { TYPE_2 . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } VAR_2 . METHOD_4 ( ) ; } } ; t . start ( ) ; VAR_2 . METHOD_5 ( ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String name ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 class ) ; TYPE_2 . when ( VAR_2 . getName ( ) ) . thenReturn ( name ) ; TYPE_3 VAR_4 = TYPE_4 . METHOD_3 ( VAR_1 ) ; TYPE_2 . when ( VAR_2 . METHOD_4 ( ) ) . thenReturn ( VAR_4 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } METHOD_4 ( VAR_2 , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_5 ( VAR_2 , VAR_3 ) ; METHOD_6 ( VAR_2 , VAR_5 ) ; final TYPE_2 VAR_6 = METHOD_5 ( VAR_2 , VAR_5 ) ; TYPE_3 . METHOD_7 ( VAR_6 , VAR_4 ) ; } 
protected TYPE_1 METHOD_1 ( java.io.File VAR_1 , java.io.File VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { TYPE_4 VAR_4 = TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; if ( ( VAR_5 ) == null ) { return null ; } return TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 , VAR_3 ) ; } 
public TYPE_1 METHOD_1 ( int i , int x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
public void METHOD_1 ( ) { java.lang.StringBuilder output = METHOD_2 ( ) ; METHOD_3 ( output ) ; METHOD_4 ( output ) ; VAR_1 . METHOD_5 ( VAR_2 , 1 ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; VAR_1 . METHOD_7 ( VAR_4 , VAR_3 , VAR_5 ) ; VAR_1 . METHOD_8 ( VAR_3 , VAR_6 ) ; VAR_1 . METHOD_9 ( 0 , VAR_6 ) ; METHOD_10 ( output . toString ( ) ) ; } 
private boolean METHOD_1 ( TYPE_1 sb ) { char [ ] VAR_1 = sb . METHOD_2 ( ) ; int n = count ; if ( n != ( sb . length ( ) ) ) { return false ; } for ( int i = 0 ; i < n ; i ++ ) { if ( ( METHOD_3 ( i ) ) != ( VAR_1 [ i ] ) ) { return false ; } } return true ; } 
public static TYPE_1 METHOD_1 ( ) { if ( ( TYPE_2 . version ) == null ) { TYPE_3 is = VAR_1 class . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; if ( is != null ) { TYPE_2 . version = new TYPE_1 ( is ) ; } else { VAR_3 . log ( VAR_4 , ( STRING_1 + ( VAR_2 ) ) ) ; throw new TYPE_4 ( ) ; } } return TYPE_2 . version ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 location , java.lang.String VAR_2 , java.lang.Object data ) { if ( ( ( VAR_3 ) != null ) && ( VAR_4 . METHOD_2 ( VAR_1 , VAR_3 ) ) ) { return ; } super . METHOD_1 ( VAR_1 , location , VAR_2 , data ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; assertEquals ( STRING_1 , server . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( 0 ) ; TYPE_2 s = new TYPE_2 ( STRING_2 , VAR_2 . METHOD_3 ( ) ) ; VAR_2 . METHOD_5 ( ) ; s . METHOD_5 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( TYPE_2 m : METHOD_2 ( ) ) { sb.append ( m . toString ( ) ) ; sb.append ( CHAR_1 ) ; } VAR_1 . METHOD_3 ( new java.lang.Object [ ] { sb . toString ( ) } , new TYPE_3 [ ] { TYPE_4 . METHOD_4 ( ) } ) ; } 
private TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , java.util.ArrayList < TYPE_2 > VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_2 ) { if ( VAR_3 instanceof TYPE_3 ) { TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_3 ) ) ; if ( VAR_1 . equals ( VAR_4 . METHOD_2 ( ) ) ) { return VAR_4 . METHOD_3 ( ) ; } } } return null ; } 
private void METHOD_1 ( java.util.Map < TYPE_1 , TYPE_2 > VAR_1 ) { for ( TYPE_3 t = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; t . METHOD_4 ( ) ; ) { TYPE_4 entry = ( ( TYPE_4 ) ( t . METHOD_5 ( ) ) ) ; TYPE_2 s = ( ( TYPE_2 ) ( entry . METHOD_6 ( ) ) ) ; if ( ( s . METHOD_7 ( ) ) == false ) { t . METHOD_8 ( ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = new TYPE_4 ( this , VAR_1 , VAR_2 ) ; synchronized ( VAR_4 ) { if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_2 ( new TYPE_5 < TYPE_4 > ( VAR_3 ) ) ; } } TYPE_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; return VAR_3 ; } 
public static TYPE_1 METHOD_1 ( short [ ] VAR_1 , TYPE_2 VAR_2 , byte [ ] VAR_3 ) throws java.io.IOException { try { TYPE_3 VAR_4 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; return new TYPE_1 ( VAR_4 , VAR_2 ) ; } catch ( java.lang.RuntimeException e ) { throw new TYPE_5 ( VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; if ( ( VAR_1 ) > INT_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 = new TYPE_2 ( VAR_2 ) ; } else { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 = new TYPE_2 ( VAR_2 ) ; } } 
public void METHOD_1 ( android.os.Message msg ) { switch ( VAR_1 ) { case VAR_2 : METHOD_2 ( ) ; break ; case VAR_3 : METHOD_3 ( ) ; break ; case VAR_4 : METHOD_4 ( msg.arg1 , ( ( android.os.AsyncResult ) ( msg.obj ) ) ) ; break ; case VAR_5 : METHOD_5 ( ( ( android.os.AsyncResult ) ( msg.obj ) ) ) ; break ; case VAR_6 : if ( VAR_7 ) android.util.Log.d ( VAR_8 , STRING_1 ) ; METHOD_6 ( ) ; break ; default : } } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( ( VAR_2 . get ( VAR_1 ) ) == null ) ) { int state = VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_1 , state ) ; } return VAR_2 . get ( VAR_1 ) ; } 
private static boolean METHOD_1 ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { return false ; } if ( VAR_1 instanceof TYPE_1 ) { return false ; } TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) ; java.lang.String VAR_3 = VAR_4 . getName ( VAR_1 ) ; return VAR_2 . METHOD_4 ( VAR_3 ) ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( ( ( VAR_1 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { METHOD_3 ( ) ; try { TYPE_3 VAR_3 = VAR_2 . METHOD_4 ( ) ; if ( VAR_3 == null ) { throw new TYPE_2 ( STRING_1 , VAR_4 ) ; } VAR_1 = new TYPE_4 ( VAR_3 ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_1 , e , VAR_5 ) ; } } return VAR_1 ; } 
private static void METHOD_1 ( int expected , java.lang.String VAR_1 ) { assertEquals ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , java.lang.Integer . toString ( expected ) , VAR_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( name ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( CHAR_1 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String name ) { TYPE_1 callback ; synchronized ( VAR_2 ) { callback = VAR_2 . get ( VAR_1 ) ; } if ( callback == null ) { android.util.Log.e ( VAR_3 . TAG , ( ( STRING_1 + name ) + STRING_2 ) ) ; } return callback ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { android.util.Log . i ( TYPE_2 . TAG , ( STRING_1 + VAR_1 ) ) ; } TYPE_3 w = VAR_3 ; if ( w != null ) { w . METHOD_2 ( ) ; METHOD_3 ( ) ; } else { android.util.Log.w ( TYPE_2 . TAG , STRING_2 ) ; } } 
public java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return null ; } java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( int subId : VAR_3 . METHOD_2 ( ) ) { java.lang.String VAR_4 = VAR_5 . METHOD_3 ( subId ) ; if ( VAR_1 . METHOD_4 ( VAR_4 ) ) { VAR_2 . METHOD_5 ( VAR_4 ) ; } } return VAR_2 . METHOD_6 ( ) ? null : VAR_2 ; } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , short [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; } 
private void METHOD_1 ( int state , android.bluetooth.BluetoothDevice device ) { switch ( state ) { case VAR_1 : if ( VAR_2 . equals ( device ) ) { METHOD_2 ( VAR_3 , device ) ; METHOD_3 ( VAR_2 , VAR_4 , VAR_5 ) ; transitionTo ( VAR_6 ) ; } else { android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + device ) ) ; } break ; default : android.util.Log.e ( VAR_7 . TAG , ( ( ( STRING_2 + device ) + STRING_3 ) + state ) ) ; break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 p = new TYPE_1 ( STRING_1 ) ; TYPE_2 ar = new TYPE_2 ( p . METHOD_2 ( ) [ 0 ] , null ) ; assertFalse ( VAR_1 . METHOD_3 ( ar , VAR_2 , false , VAR_3 , VAR_4 ) ) ; assertTrue ( ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ) != ( - 1 ) ) ) ; } 
public void run ( ) { try { VAR_1 . METHOD_1 ( ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; } catch ( TYPE_1 VAR_3 ) { } catch ( java.lang.Throwable t ) { METHOD_4 ( t ) ; } throw new java.lang.RuntimeException ( ) ; } 
public void run ( com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws java.lang.Exception { if ( ! ( METHOD_1 ( ) . METHOD_2 ( this . METHOD_3 ( ) , type ) ) ) { return ; } TYPE_1 VAR_1 = TYPE_2 . get ( VAR_2 ) ; try { VAR_1 . METHOD_4 ( type ) ; } catch ( TYPE_3 e ) { TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_3 , e ) ; throw new TYPE_5 ( e ) ; } } 
private TYPE_1 METHOD_1 ( final java.lang.String packageName ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 ) { public java.lang.String METHOD_2 ( ) { return packageName ; } } ; VAR_1 . METHOD_3 ( VAR_5 , new TYPE_2 ( STRING_3 ) , STRING_4 ) ; return VAR_1 ; } 
public void METHOD_1 ( int session , int VAR_1 , int context , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { if ( VAR_3 ) { try { VAR_4 = TYPE_4 . METHOD_2 ( VAR_1 ) ; } catch ( java.lang.Exception e ) { VAR_5 = e ; } } super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) ; } 
static void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return ; } TYPE_2 VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return ; } TYPE_3 VAR_6 = VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_5 . set ( TYPE_2 . METHOD_5 ( VAR_6 ) ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_3 ) { TYPE_4 VAR_4 = ( ( TYPE_4 ) ( VAR_1 ) ) ; return TYPE_5 . METHOD_2 ( VAR_4 , VAR_2 ) ; } TYPE_6 VAR_5 = VAR_6 ; boolean VAR_7 = false ; int VAR_8 = 1 ; int id = VAR_1 . METHOD_3 ( VAR_9 , VAR_10 , VAR_7 , VAR_8 ) ; return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_5 , VAR_7 , VAR_8 ) ; } 
private static int METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { if ( ( VAR_2 ) < ( VAR_3 ) ) { return VAR_4 ; } if ( VAR_1 == null ) { TYPE_3 . i ( STRING_1 , STRING_2 ) ; VAR_1 = TYPE_4 . METHOD_2 ( context ) ; if ( VAR_1 == null ) { TYPE_3 . i ( STRING_1 , STRING_3 ) ; return VAR_4 ; } } if ( context . METHOD_3 ( VAR_5 class ) . METHOD_4 ( VAR_1 ) ) { return VAR_6 ; } return 0 ; } 
void METHOD_1 ( TYPE_1 t , long VAR_1 ) { try { t . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_3 ( VAR_2 ) ; } finally { if ( ( t . METHOD_4 ( ) ) != ( VAR_3 ) ) { t . METHOD_5 ( ) ; fail ( STRING_1 ) ; } } } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_3 > VAR_2 = VAR_1 . METHOD_2 ( VAR_3 , false ) ; for ( TYPE_3 VAR_4 : VAR_2 ) { if ( ( ( VAR_4 . METHOD_3 ( ) ) == 1 ) && ( VAR_4 . METHOD_4 ( 0 ) . getName ( ) . equals ( VAR_5 ) ) ) { return true ; } } return false ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { TYPE_1 config = this ; if ( VAR_1 . METHOD_2 ( ) ) { config = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ( config != null ) ) ; } java.util.Map < java.lang.String , java.lang.String > VAR_2 = VAR_3 . METHOD_5 ( ) ; return VAR_2 != null ? VAR_2 : VAR_4 < java.lang.String , java.lang.String > of ( ) ; } 
public void METHOD_1 ( ) { java.lang.Throwable VAR_1 = new TYPE_1 ( STRING_1 , null , false ) ; METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( new java.lang.Throwable ( ) ) ; METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( new java.lang.Throwable ( ) ) ; METHOD_2 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.Object obj ) { if ( ! ( obj instanceof TYPE_2 ) ) { throw new java.lang.IllegalArgumentException ( ) ; } TYPE_2 number = ( ( TYPE_2 ) ( obj ) ) ; TYPE_3 VAR_1 = METHOD_2 ( number . METHOD_3 ( ) , null ) ; return super . METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( android.bluetooth.BluetoothDevice VAR_1 , TYPE_1 config , boolean VAR_2 ) { VAR_3 = config ; TYPE_2 . d ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; android.os.Bundle result = new android.os.Bundle ( ) ; result . METHOD_2 ( STRING_3 , VAR_2 ) ; VAR_4 . METHOD_3 ( STRING_4 , result ) ; } 
void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) { return ; } if ( VAR_1 && ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) { return ; } else if ( ( ! VAR_1 ) && ( ! ( VAR_3 . METHOD_3 ( ) ) ) ) { return ; } VAR_2 = VAR_1 ; VAR_4 . METHOD_4 ( ) ; } 
private static boolean METHOD_1 ( TYPE_1 . List < java.lang.String > VAR_1 , TYPE_1 . List < java.lang.String > VAR_2 , java.lang.String VAR_3 ) { for ( java.lang.String VAR_4 : VAR_1 ) { if ( VAR_3 . METHOD_2 ( VAR_4 ) ) { VAR_1 . METHOD_3 ( VAR_4 ) ; return true ; } } java.lang.String VAR_5 = TYPE_2 . METHOD_4 ( VAR_3 ) ; if ( VAR_2 . METHOD_5 ( VAR_5 ) ) { VAR_2 . METHOD_3 ( VAR_5 ) ; return true ; } return false ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 session , java.lang.String VAR_2 ) throws TYPE_3 { TYPE_4 path = new TYPE_4 ( VAR_2 , VAR_3 ) ; TYPE_5 VAR_4 = new TYPE_5 ( path , VAR_1 ) ; for ( TYPE_5 VAR_5 : session . METHOD_2 ( ) ) { if ( VAR_5 . METHOD_3 ( ) . equals ( path ) ) { throw new TYPE_3 ( VAR_4 . METHOD_4 ( ) , VAR_5 . METHOD_4 ( ) ) ; } } session . METHOD_5 ( VAR_4 ) ; } 
public boolean METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; boolean VAR_3 = false ; if ( METHOD_3 ( VAR_2 ) ) { java.lang.String VAR_4 = VAR_5 . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( VAR_4 , VAR_6 ) ; try { VAR_7 = new TYPE_2 ( VAR_4 , VAR_1 ) ; VAR_3 = true ; } catch ( TYPE_3 e ) { VAR_8 = false ; } } return VAR_3 ; } 
TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , java.lang.Class < ? > VAR_2 ) { TYPE_1 result = METHOD_2 ( name ) ; if ( result == null ) { TYPE_1 VAR_3 = new TYPE_1 ( name , VAR_1 , VAR_2 ) ; do { if ( METHOD_3 ( VAR_3 ) ) { return VAR_3 ; } result = METHOD_2 ( name ) ; } while ( result == null ) ; } return result ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = VAR_1 . METHOD_2 ( VAR_2 ) ; int VAR_5 = VAR_4 . METHOD_3 ( ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_5 ) ; for ( int VAR_7 = 0 ; VAR_7 < VAR_5 ; VAR_7 ++ ) { TYPE_5 VAR_8 = METHOD_4 ( VAR_1 , VAR_4 . METHOD_3 ( ) , VAR_3 ) ; VAR_8 . METHOD_5 ( ) ; VAR_6 . set ( VAR_7 , VAR_8 ) ; } return VAR_6 ; } 
private void METHOD_1 ( long VAR_1 ) { if ( VAR_1 > 0 ) { long VAR_2 = TYPE_1 . METHOD_2 ( ) ; do { try { this . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_2 e ) { } if ( VAR_3 ) { break ; } VAR_1 = ( VAR_1 - ( TYPE_1 . METHOD_2 ( ) ) ) - VAR_2 ; } while ( VAR_1 > 0 ) ; } } 
public static void METHOD_1 ( boolean a , java.lang.Integer b ) { if ( a && ( ( b . METHOD_2 ( ) ) == INT_1 ) ) { return ; } Main . fail ( ( ( ( STRING_1 + a ) + STRING_2 ) + b ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ; byte [ ] VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 [ 0 ] = CHAR_1 ; TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_5 ( ) ) != 0 ) ) { TYPE_1 VAR_3 = VAR_1 . METHOD_6 ( mContext ) ; if ( VAR_3 != null ) { return VAR_3 ; } } return METHOD_7 ( VAR_2 ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String name ) { return name . METHOD_2 ( STRING_1 ) ? new TYPE_2 ( VAR_1 , name . METHOD_3 ( 0 , ( ( name . METHOD_4 ( CHAR_1 ) ) - 1 ) ) , name . METHOD_3 ( ( ( name . METHOD_4 ( CHAR_1 ) ) + 1 ) ) ) : new TYPE_3 ( name ) ; } 
private void METHOD_1 ( java.lang.Object VAR_1 ) { final TYPE_1 VAR_2 = this . VAR_2 ; VAR_2 . METHOD_2 ( ) ; try { java.lang.Object [ ] VAR_3 = VAR_4 ; int n = size ; for ( int i = 0 ; i < n ; i ++ ) { if ( VAR_1 == ( VAR_3 [ i ] ) ) { METHOD_3 ( i ) ; break ; } } } finally { VAR_2 . METHOD_4 ( ) ; } } 
public int METHOD_1 ( byte [ ] VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) throws java.io.IOException { try { return VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( TYPE_1 VAR_6 ) { VAR_5 . fail ( VAR_6 . METHOD_2 ( ) ) ; throw VAR_6 ; } catch ( java.io.IOException e ) { VAR_5 . fail ( VAR_7 ) ; throw e ; } catch ( java.lang.RuntimeException e ) { VAR_5 . fail ( VAR_7 ) ; throw new TYPE_1 ( VAR_7 ) ; } } 
public int METHOD_1 ( ) { try { TYPE_1 service = METHOD_2 ( ) ; return service . METHOD_3 ( METHOD_4 ( ) ) ; } catch ( android.os.RemoteException ex ) { ex . METHOD_5 ( ) ; } catch ( java.lang.NullPointerException ex ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_1 ; } 
private void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; METHOD_3 ( TYPE_1 . METHOD_4 ( ) , true ) ; VAR_1 . METHOD_2 ( CHAR_1 ) ; } 
private TYPE_1 METHOD_1 ( int number , TYPE_1 result , TYPE_2 VAR_1 , boolean VAR_2 , boolean VAR_3 , boolean VAR_4 , int VAR_5 ) { if ( ( VAR_6 ) == ( VAR_7 ) ) { return METHOD_1 ( VAR_8 . METHOD_2 ( METHOD_3 ( number ) ) , result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } else { return METHOD_1 ( result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } } 
protected com.android.jack.ir.ast.JMethod METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { for ( com.android.jack.ir.ast.JMethod m : VAR_1 . METHOD_2 ( ) ) { if ( ( ( m . METHOD_3 ( ) ) == VAR_2 ) && ( ( m . METHOD_4 ( ) ) == VAR_3 ) ) { return m ; } } return null ; } 
final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_3 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_4 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_4 != 0 ) { TYPE_1 res = new TYPE_1 ( this , VAR_4 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_2 ( ( STRING_2 + VAR_2 ) ) ; } 
protected void METHOD_1 ( TYPE_1 f ) { if ( VAR_1 . METHOD_2 ( f ) ) { METHOD_1 ( f . METHOD_3 ( ) ) ; METHOD_1 ( f . METHOD_4 ( ) ) ; METHOD_5 ( f ) ; VAR_1 . METHOD_6 ( f ) ; } } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 method , TYPE_4 call ) { java.lang.String VAR_2 = VAR_3 ; if ( ( VAR_2 . equals ( STRING_1 ) ) && ( ( context . METHOD_2 ( ) . METHOD_3 ( ) ) >= 8 ) ) { java.lang.String VAR_4 = java.lang.String.format ( ( STRING_2 + STRING_3 ) , call . name ) ; context . METHOD_4 ( VAR_5 , method , context . METHOD_5 ( call ) , VAR_4 , null ) ; } } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { long time = TYPE_4 . METHOD_2 ( session ) ; assertTrue ( ( time != 0 ) ) ; assertTrue ( ( time < ( TYPE_5 . METHOD_3 ( ) ) ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , STRING_2 , 0 , CHAR_1 , 6 , INT_1 ) ; METHOD_4 ( VAR_1 , STRING_3 , INT_2 , INT_3 , 0 , CHAR_1 , 6 , INT_1 ) ; METHOD_4 ( VAR_1 , STRING_4 , INT_3 , INT_2 , 0 , CHAR_1 , 6 , INT_1 ) ; METHOD_4 ( VAR_1 , STRING_2 , 0 , CHAR_1 , 6 , INT_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( 5 ) ; METHOD_2 ( 1 , VAR_1 ) ; METHOD_2 ( INT_1 , VAR_1 ) ; METHOD_2 ( INT_2 , VAR_1 ) ; METHOD_2 ( INT_3 , VAR_1 ) ; METHOD_2 ( INT_4 , VAR_1 ) ; TYPE_2 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } 
public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return 0 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return 0 ; return service . METHOD_1 ( ) ; } 
static int METHOD_1 ( int VAR_1 , java.lang.String text , int start , int VAR_2 , int VAR_3 , float [ ] VAR_4 ) { return TYPE_1 . METHOD_1 ( VAR_1 , text . METHOD_2 ( ) , start , ( VAR_2 - start ) , VAR_3 , VAR_4 ) ; } 
public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( mContext , VAR_1 , node . METHOD_4 ( ) . METHOD_5 ( ) , 0 , VAR_1 . length ( ) ) ; return super . METHOD_1 ( node ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = METHOD_2 ( ) ; final int VAR_2 = java.lang.Integer . METHOD_3 ( VAR_1 ) ; final TYPE_1 VAR_3 = METHOD_4 ( ) ; if ( VAR_3 == null ) { VAR_4 . println ( STRING_1 ) ; return ; } try { VAR_5 . METHOD_5 ( VAR_2 , VAR_3 ) ; } catch ( android.os.RemoteException e ) { } } 
public synchronized void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( method . METHOD_1 ( ) ) || ( method . METHOD_2 ( ) ) ) { return ; } TYPE_1 session = TYPE_2 . METHOD_3 ( ) ; TYPE_3 VAR_1 = session . METHOD_4 ( VAR_2 class ) ; if ( VAR_1 == null ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_1 = session . METHOD_5 ( VAR_3 ) ; } TYPE_4 VAR_4 = new TYPE_4 ( VAR_1 ) ; VAR_4 . METHOD_6 ( method ) ; } 
static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 ) { TYPE_2 . METHOD_2 ( VAR_1 , ( ( int ) ( VAR_8 ) ) , ( ( int ) ( VAR_9 ) ) , ( ( int ) ( VAR_2 . METHOD_3 ( ) ) ) , ( ( int ) ( VAR_2 . METHOD_4 ( ) ) ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; } 
public static int METHOD_1 ( int value , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } int VAR_3 = INT_1 ; return ( ( ( ( value < < ( VAR_1 | INT_2 ) ) + ( value > > ( VAR_1 ^ INT_3 ) ) ) + ( value > > > ( VAR_1 + INT_4 ) ) ) + ( value < < ( VAR_1 - VAR_3 ) ) ) + ( value > > ( ( byte ) ( VAR_1 ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return new TYPE_2 ( VAR_2 . in ) ; } else { METHOD_2 ( ) ; try { return new TYPE_3 ( VAR_1 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( e ) ; } } } 
public static final TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String provider ) throws TYPE_2 , TYPE_3 , TYPE_4 { if ( ( provider == null ) || ( ( provider . length ( ) ) == 0 ) ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } TYPE_5 p = TYPE_6 . METHOD_2 ( provider ) ; if ( p == null ) { throw new TYPE_3 ( ( STRING_2 + provider ) ) ; } return TYPE_1 . METHOD_3 ( VAR_1 , p ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 provider = new TYPE_1 ( STRING_1 ) ; assertNotNull ( TYPE_2 . METHOD_2 ( provider . getName ( ) ) ) ; TYPE_2 . METHOD_3 ( provider ) ; assertNotNull ( TYPE_2 . METHOD_2 ( provider . getName ( ) ) ) ; TYPE_2 . METHOD_4 ( provider . getName ( ) ) ; METHOD_5 ( TYPE_2 . METHOD_2 ( provider . getName ( ) ) ) ; } 
public void run ( ) { try { if ( ! VAR_1 ) { server . METHOD_1 ( ( 1 * INT_1 ) ) ; } server . METHOD_2 ( VAR_1 ) ; server . METHOD_3 ( ) ; } catch ( TYPE_1 e ) { VAR_2 [ 0 ] = e ; } catch ( TYPE_2 e ) { VAR_3 [ 0 ] = e ; } catch ( java.lang.RuntimeException e ) { throw e ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } } 
private java.util.List < java.lang.String > METHOD_1 ( java.lang.StringBuilder VAR_1 ) { METHOD_2 ( ( FLOAT_1 - FLOAT_2 ) ) ; java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String s : VAR_3 . METHOD_3 ( VAR_1 ) ) { if ( ( s != null ) && ( ! ( s . METHOD_4 ( ) ) ) ) { VAR_2 . METHOD_5 ( s . METHOD_6 ( ) ) ; } } return VAR_2 ; } 
private void METHOD_1 ( java.lang.String [ ] [ ] VAR_1 , java.util.Set < java.lang.String > VAR_2 , TYPE_1 ... VAR_3 ) { int count = 0 ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_3 ) ; for ( java.lang.String [ ] test : VAR_1 ) { if ( ( test [ 1 ] . METHOD_2 ( STRING_1 ) ) && ( METHOD_3 ( STRING_2 , STRING_3 ) ) ) continue ; METHOD_1 ( ( ++ count ) , VAR_4 , test [ 0 ] , test [ 1 ] , VAR_2 ) ; } } 
synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_5 , new TYPE_4 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) , VAR_1 . METHOD_6 ( ) , VAR_6 ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { android.content.Intent VAR_1 = new android.content.Intent ( VAR_2 ) ; byte [ ] VAR_3 = METHOD_2 ( 0 , 0 , VAR_4 , STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 , TYPE_1 . METHOD_4 ( VAR_3 ) ) ; METHOD_5 ( ) . METHOD_6 ( VAR_1 , STRING_3 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { int VAR_3 = 0 ; TYPE_3 context = mContext ; if ( VAR_2 >= 0 ) { TYPE_4 VAR_4 = METHOD_2 ( VAR_1 ) ; if ( VAR_4 != null ) { context = VAR_4 . context ; VAR_3 = VAR_5 . METHOD_3 ( VAR_2 , 0 ) ; } } if ( VAR_3 != 0 ) { return TYPE_5 . METHOD_1 ( context , VAR_3 ) ; } return null ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , short value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final short VAR_3 = ( v == null ) ? ( ( short ) ( m . METHOD_2 ( ) ) ) : ( ( short ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public int METHOD_1 ( android.content.Intent VAR_1 , int flags , int VAR_2 ) { if ( VAR_3 ) { android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ; } if ( VAR_1 . METHOD_2 ( VAR_5 , false ) ) { METHOD_3 ( ) ; return 0 ; } else { TYPE_1 VAR_6 = new TYPE_1 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; VAR_6 . METHOD_4 ( VAR_8 ) ; METHOD_5 ( VAR_9 , VAR_6 ) ; return VAR_10 ; } } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { TYPE_4 . METHOD_2 ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 0 ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
static void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( ( ( VAR_5 ) != null ) && ( ( VAR_5 . METHOD_3 ( ) ) == false ) ) { TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_6 , VAR_5 . METHOD_6 ( ) , null , null ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , int flags ) { VAR_1 . METHOD_2 ( this . VAR_2 ) ; VAR_1 . METHOD_2 ( this . VAR_3 ) ; VAR_1 . METHOD_2 ( this . VAR_4 ) ; VAR_1 . METHOD_2 ( this . VAR_5 ) ; VAR_1 . METHOD_2 ( this . VAR_6 ) ; VAR_1 . METHOD_2 ( this . VAR_7 ) ; VAR_1 . METHOD_3 ( this . VAR_8 ) ; } 
private void METHOD_1 ( int i , int uid ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( i ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( ) ; } if ( ( VAR_2 . size ( ) ) == 0 ) { VAR_3 . METHOD_4 ( ) ; } TYPE_2 VAR_4 = TYPE_3 . METHOD_5 ( ) ; try { VAR_5 . METHOD_6 ( uid ) ; } catch ( android.os.RemoteException e ) { } finally { TYPE_3 . METHOD_7 ( VAR_4 ) ; } } 
public static java.lang.String METHOD_1 ( byte [ ] s ) { TYPE_1 result = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( s . length ) ; ++ i ) { if ( i != 0 ) result . append ( CHAR_1 ) ; result . append ( TYPE_2 . METHOD_1 ( s [ i ] ) ) ; } return result . toString ( ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 result = VAR_1 . METHOD_2 ( TYPE_3 . suite ( VAR_2 class , VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class ) ) ; if ( result . METHOD_3 ( ) ) { TYPE_4 . METHOD_4 ( 0 ) ; } else { TYPE_4 . METHOD_4 ( 1 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( out ) ; } catch ( java.lang.RuntimeException ex ) { throw TYPE_4 . METHOD_4 ( ex , ( ( STRING_1 + STRING_2 ) + ( VAR_4 . METHOD_5 ( ) ) ) ) ; } } 
protected int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = super . METHOD_1 ( VAR_1 ) ; if ( VAR_2 != 0 ) { return VAR_2 ; } TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 ) ) ; TYPE_3 VAR_4 = METHOD_2 ( ) ; TYPE_3 VAR_5 = VAR_3 . METHOD_2 ( ) ; return VAR_4 . METHOD_3 ( VAR_5 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 item ) throws java.io.IOException { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_1 , VAR_2 , item ) ; TYPE_5 VAR_4 = VAR_1 . METHOD_2 ( VAR_5 ) ; VAR_4 . METHOD_3 ( TYPE_6 . toString ( VAR_2 . METHOD_4 ( ) ) ) ; VAR_3 . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ; return VAR_3 ; } 
public static void METHOD_1 ( java.io.File src , java.io.File VAR_1 ) { try { if ( ( src . METHOD_2 ( ) ) != null ) { TYPE_1 . METHOD_3 ( src , VAR_1 ) ; } TYPE_1 . METHOD_4 ( src ) ; } catch ( java.io.IOException e ) { TYPE_2 . e ( STRING_1 ) ; TYPE_2 . e ( e ) ; } } 
public void METHOD_1 ( ) throws android.os.RemoteException { TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( VAR_2 class ) ) ) . thenReturn ( VAR_3 ) ; TYPE_1 . when ( VAR_1 . METHOD_4 ( VAR_3 ) ) . thenReturn ( METHOD_5 ( VAR_3 ) . build ( ) ) ; TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int offset , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( CHAR_1 ) . append ( VAR_2 ) . append ( CHAR_2 ) ; sb.append ( VAR_3 ) . append ( CHAR_3 ) . append ( CHAR_4 ) ; sb.append ( VAR_4 ) . append ( CHAR_4 ) ; TYPE_2 VAR_5 = new TYPE_2 ( offset , sb . toString ( ) ) ; VAR_1 . addChild ( VAR_5 ) ; } 
public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) { return ; } if ( ! ( VAR_1 . METHOD_4 ( ) ) ) { return ; } boolean VAR_2 = VAR_1 . METHOD_5 ( ) ; TYPE_2 callback = METHOD_6 ( ) ; assertFalse ( VAR_1 . METHOD_5 ( ) ) ; METHOD_7 ( callback , VAR_2 ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_5 ( ) ) ; } 
public int METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 , null ) ; if ( VAR_1 . METHOD_3 ( ) ) { TYPE_1 < TYPE_3 > VAR_3 = VAR_1 . get ( ) . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ; if ( VAR_3 . METHOD_3 ( ) ) { return java.lang.Integer.parseInt ( VAR_3 . get ( ) . METHOD_6 ( ) ) ; } } return VAR_4 ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( ( VAR_2 ) != null ) ) ; VAR_3 . METHOD_2 ( ( ( VAR_2 ) != null ) ) ; if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; } } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String packageName , int userId , int flags , int VAR_2 , java.lang.String VAR_3 , int VAR_4 ) throws TYPE_1 { if ( ! ( METHOD_2 ( ) ) ) return ; try { VAR_5 . METHOD_1 ( VAR_1 , packageName , userId , flags , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { throw TYPE_1 . from ( e ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , true ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( new TYPE_2 ( VAR_4 , VAR_5 , VAR_6 , mContext ) ) ; VAR_2 . METHOD_5 ( VAR_7 ) ; VAR_8 . METHOD_6 ( ) ; VAR_9 . METHOD_6 ( ) ; for ( TYPE_3 VAR_10 : VAR_11 . values ( ) ) { VAR_10 . METHOD_6 ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ) { return ; } VAR_3 . append ( new TYPE_2 ( VAR_1 . METHOD_5 ( ) , METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) ) ; TYPE_3 VAR_4 = METHOD_8 ( VAR_1 . METHOD_7 ( ) , VAR_1 ) ; VAR_3 . append ( new TYPE_4 ( VAR_1 , VAR_4 ) ) ; } 
void METHOD_1 ( int VAR_1 ) { TYPE_1 [ ] VAR_2 = VAR_3 ; int VAR_4 = VAR_2 . length ; if ( VAR_4 == ( VAR_5 ) ) { VAR_6 = VAR_7 ; return ; } TYPE_1 [ ] VAR_8 = new TYPE_1 [ VAR_1 ] ; METHOD_2 ( VAR_8 , METHOD_3 ( VAR_1 ) ) ; VAR_3 = VAR_8 ; VAR_6 = ( ( int ) ( TYPE_2 . METHOD_4 ( ( VAR_1 * ( VAR_9 ) ) , ( ( VAR_5 ) + 1 ) ) ) ) ; } 
public static void run ( ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( VAR_1 class ) ; TYPE_2 t = new TYPE_2 ( STRING_1 ) { public void run ( ) { try { TYPE_3 . METHOD_2 ( ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } } } ; t . start ( ) ; t . METHOD_3 ( ) ; } 
private void METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 ) ; android.renderscript.Allocation VAR_4 = android.renderscript.Allocation . METHOD_5 ( VAR_5 , VAR_1 ) ; VAR_6 . METHOD_6 ( VAR_4 ) ; VAR_4 . METHOD_7 ( VAR_1 ) ; TYPE_2 . METHOD_8 ( VAR_1 , STRING_1 , name , VAR_5 . METHOD_9 ( ) ) ; VAR_4 . METHOD_10 ( ) ; } 
public int METHOD_1 ( int i ) { if ( ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) { return 0 ; } return ( ( value [ ( i > > > 5 ) ] ) & ( VAR_2 [ ( i & INT_1 ) ] ) ) != 0 ? 1 : 0 ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( VAR_1 ) == null ) { return ; } if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_4 ( VAR_2 ) ; } VAR_1 . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; } 
public static void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; VAR_2 = TYPE_1 . METHOD_2 ( STRING_2 ) ; VAR_3 = TYPE_1 . METHOD_3 ( STRING_3 ) ; java.io.File VAR_4 = TYPE_2 . METHOD_4 ( STRING_4 , STRING_5 ) ; TYPE_3 VAR_5 = TYPE_2 . METHOD_5 ( VAR_6 class ) ; VAR_5 . METHOD_6 ( VAR_7 ) ; VAR_5 . METHOD_7 ( null , VAR_4 , true , VAR_1 ) ; VAR_8 = VAR_4 ; } 
public boolean METHOD_1 ( android.os.Message VAR_1 ) { METHOD_2 ( VAR_1 , this ) ; switch ( VAR_2 ) { case VAR_3 : transitionTo ( VAR_4 ) ; break ; case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : VAR_16 = VAR_17 ; METHOD_3 ( VAR_1 ) ; break ; default : return VAR_18 ; } return VAR_19 ; } 
private synchronized void METHOD_1 ( java.lang.String packageName ) { if ( VAR_1 ) android.util.Log.d ( VAR_2 . TAG , ( STRING_1 + packageName ) ) ; int VAR_3 = METHOD_2 ( packageName ) ; if ( VAR_3 != ( - 1 ) ) { VAR_4 . METHOD_3 ( VAR_3 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final long VAR_1 = 0 ; final long VAR_2 = VAR_3 ; VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , true ) ; assertTrue ( VAR_4 . METHOD_3 ( ) ) ; assertTrue ( VAR_4 . METHOD_4 ( ) ) ; assertEquals ( VAR_1 , VAR_4 . METHOD_5 ( ) ) ; assertEquals ( VAR_2 , VAR_4 . size ( ) ) ; METHOD_6 ( VAR_5 , VAR_4 . METHOD_7 ( ) ) ; METHOD_6 ( VAR_5 , VAR_4 . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( VAR_2 class ) ) ) . thenReturn ( METHOD_4 ( VAR_3 , VAR_4 ) ) ; TYPE_2 VAR_5 = METHOD_5 ( VAR_6 , false , true , INT_1 , INT_2 , VAR_7 , VAR_3 , VAR_8 , VAR_9 , VAR_10 , TYPE_3 . of ( VAR_4 ) ) ; VAR_11 . METHOD_6 ( VAR_5 , VAR_12 , VAR_13 ) ; TYPE_4 VAR_14 = METHOD_7 ( VAR_4 ) ; assertEquals ( VAR_14 . METHOD_8 ( VAR_15 ) , VAR_16 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; int VAR_3 = VAR_4 ; if ( VAR_5 . METHOD_3 ( VAR_1 ) ) { METHOD_4 ( VAR_3 , VAR_6 ) ; return ; } if ( ! ( VAR_7 . METHOD_5 ( VAR_1 ) ) ) { METHOD_4 ( VAR_3 , VAR_8 ) ; return ; } VAR_5 . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 , STRING_1 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_2 , STRING_2 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 , STRING_3 ) ) ; TYPE_1 result = TYPE_3 . METHOD_5 ( VAR_1 , INT_2 , STRING_1 ) ; METHOD_6 ( result ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; server = new TYPE_1 ( ) ; java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_2 = new java.io.File ( VAR_1 , ( STRING_2 + ( TYPE_3 . METHOD_3 ( ) ) ) ) ; VAR_2 . METHOD_4 ( ) ; TYPE_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , INT_1 ) ; } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , float VAR_5 , float VAR_6 , float VAR_7 ) { TYPE_1 VAR_8 = VAR_9 . METHOD_2 ( VAR_1 ) ; if ( VAR_8 == null ) { return ; } VAR_8 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } if ( VAR_1 == ( VAR_2 ) ) { return new TYPE_1 ( this ) ; } return new TYPE_1 ( VAR_3 . METHOD_2 ( ( VAR_1 - ( VAR_2 ) ) ) , VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , long VAR_2 , boolean VAR_3 ) { int [ ] VAR_4 = new int [ 2 ] ; VAR_1 . METHOD_2 ( VAR_2 , false , VAR_4 ) ; int VAR_5 = VAR_4 [ 0 ] ; int VAR_6 = VAR_4 [ 1 ] ; TYPE_3 VAR_7 = null ; if ( VAR_3 ) { VAR_7 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } return TYPE_1 . METHOD_5 ( VAR_5 , VAR_6 , VAR_2 , VAR_7 ) ; } 
public static TYPE_1 < java.lang.Object [ ] > data ( ) throws java.io.IOException , TYPE_2 , TYPE_3 { java.util.List < java.lang.Object [ ] > VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( new java.io.File ( VAR_3 ) ) ; java.util.List < TYPE_5 > VAR_4 = VAR_2 . METHOD_1 ( ) ; for ( TYPE_5 VAR_5 : VAR_4 ) { VAR_1 . METHOD_2 ( new java.lang.Object [ ] { VAR_5 . getName ( ) , VAR_5 } ) ; } return VAR_1 ; } 
public boolean METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return false ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return ( VAR_3 . METHOD_4 ( ) ) == ( VAR_4 ) ; } else { return false ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { final TYPE_3 VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; final java.util.List < TYPE_1 > VAR_3 = VAR_4 . get ( VAR_2 . METHOD_4 ( ) ) ; return VAR_3 != null ? TYPE_4 . METHOD_5 ( VAR_3 ) : METHOD_6 ( VAR_1 ) ; } 
private static void METHOD_1 ( int VAR_1 , long VAR_2 , TYPE_1 VAR_3 ) { assertEquals ( ( VAR_1 * INT_1 ) , VAR_3 . METHOD_2 ( ( VAR_2 * INT_1 ) ) ) ; assertFalse ( VAR_3 . METHOD_3 ( new TYPE_2 ( ( VAR_2 * INT_1 ) ) ) ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , TYPE_2 f ) { java.lang.String VAR_2 = ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_1 . METHOD_2 ( ) . getName ( ) ) ) + STRING_3 ) + ( f . getName ( ) ) ; return new TYPE_1 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) ; TYPE_3 . METHOD_4 ( VAR_1 , STRING_2 ) ; assertTrue ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( new TYPE_4 ( ) . METHOD_7 ( VAR_3 ) ) . METHOD_8 ( ) ) ; TYPE_2 . METHOD_9 ( VAR_1 , STRING_2 , null ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 pm , boolean VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( context , pm , VAR_1 ) ; VAR_2 . start ( ) ; synchronized ( VAR_2 ) { while ( ( VAR_3 ) == null ) { try { VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_5 e ) { } } } return VAR_3 ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { final java.lang.String name = VAR_1 . getName ( ) ; if ( name == null ) { throw new java.lang.NullPointerException ( ) ; } METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; if ( VAR_2 . METHOD_4 ( VAR_1 ) ) { METHOD_5 ( VAR_1 , name , ( name + STRING_1 ) ) ; return true ; } else { return false ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = VAR_1 . get ( VAR_4 , STRING_1 ) ; java.util.List < java.lang.String > VAR_5 = TYPE_2 . METHOD_2 ( ) ; for ( java.lang.String VAR_6 : VAR_3 . METHOD_3 ( VAR_7 ) ) { VAR_5 . METHOD_4 ( VAR_6 ) ; } VAR_5 . METHOD_5 ( VAR_2 ) ; TYPE_3 VAR_8 = TYPE_3 . on ( VAR_7 ) ; VAR_1 . METHOD_6 ( VAR_4 , VAR_8 . METHOD_7 ( VAR_5 ) ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ; if ( ( VAR_2 . METHOD_1 ( VAR_1 ) ) != ( VAR_4 ) ) { VAR_5 . METHOD_3 ( false ) ; VAR_5 . METHOD_4 ( VAR_6 ) ; return ; } VAR_5 . METHOD_4 ( STRING_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , byte [ ] VAR_2 , int event , int VAR_3 , byte [ ] data ) { synchronized ( VAR_4 ) { android.util.Log.d ( VAR_5 . TAG , STRING_1 ) ; assertTrue ( ( VAR_1 == ( VAR_6 ) ) ) ; assertTrue ( ( event == 2 ) ) ; assertTrue ( ( VAR_3 == INT_1 ) ) ; assertTrue ( ( VAR_2 == null ) ) ; assertTrue ( ( data == null ) ) ; VAR_7 = true ; VAR_4 . METHOD_2 ( ) ; } } 
private void METHOD_1 ( ) { boolean VAR_1 = false ; synchronized ( this ) { if ( ! ( VAR_2 ) ) { VAR_1 = true ; VAR_2 = true ; } } if ( VAR_1 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; if ( mRS . METHOD_4 ( ) ) { mRS . METHOD_5 ( VAR_5 ) ; } VAR_3 . METHOD_6 ( ) ; mRS = null ; VAR_5 = 0 ; } } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { TYPE_4 . METHOD_2 ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 0 ) ; fail ( ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
public < TYPE_1 > TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] a ) { if ( ( a . length ) < ( size ) ) return ( ( TYPE_1 [ ] ) ( TYPE_2 . METHOD_2 ( VAR_1 , size , a . METHOD_3 ( ) ) ) ) ; TYPE_3 . METHOD_4 ( VAR_1 , 0 , a , 0 , size ) ; if ( ( a . length ) > ( size ) ) a [ size ] = null ; return a ; } 
public void METHOD_1 ( boolean VAR_1 ) { boolean VAR_2 = ( VAR_1 ) ? VAR_3 . METHOD_2 ( ) : VAR_3 . METHOD_3 ( ) ; if ( VAR_2 ) { METHOD_4 ( ( VAR_1 ? VAR_4 : VAR_5 ) ) ; } else { if ( VAR_6 ) { android.util.Log.v ( VAR_7 . TAG , ( ( STRING_1 + STRING_2 ) + VAR_1 ) ) ; } METHOD_5 ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( TYPE_3 . get ( VAR_1 ) . METHOD_3 ( STRING_2 , false ) ) { for ( TYPE_4 VAR_2 : VAR_3 . METHOD_4 ( ) ) { VAR_2 . METHOD_1 ( VAR_1 , this ) ; } } else { TYPE_2 . i ( STRING_1 , STRING_3 ) ; } } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; METHOD_3 ( TYPE_4 . METHOD_4 ( info , VAR_2 . METHOD_5 ( ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_6 ( x , e ) ; } } 
private static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 project ) { TYPE_3 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 target = VAR_1 . METHOD_3 ( project ) ; if ( target != null ) { TYPE_5 VAR_2 = VAR_1 . METHOD_4 ( target ) ; TYPE_6 VAR_3 = VAR_2 . METHOD_5 ( ) ; return VAR_3 . METHOD_6 ( ) ; } return TYPE_7 . METHOD_7 ( ) ; } 
private void METHOD_1 ( java.util.Map VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; while ( VAR_2 . METHOD_4 ( ) ) { TYPE_2 entry = ( ( TYPE_2 ) ( VAR_2 . METHOD_5 ( ) ) ) ; METHOD_6 ( ( ( TYPE_3 ) ( entry . METHOD_7 ( ) ) ) , ( ( TYPE_4 ) ( entry . METHOD_8 ( ) ) ) ) ; } } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; } 
void METHOD_1 ( int status , int VAR_1 ) throws android.os.RemoteException { if ( VAR_2 ) android.util.Log.d ( VAR_3 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + status ) ) ; VAR_4 . METHOD_2 ( VAR_1 , status ) ; TYPE_1 app = VAR_5 . METHOD_3 ( VAR_1 ) ; if ( app != null ) { if ( status == 0 ) { VAR_6 . METHOD_4 ( VAR_7 , true , null ) ; } else { VAR_6 . METHOD_4 ( VAR_8 , true , null ) ; } } } 
public boolean METHOD_1 ( java.lang.String key , byte [ ] value ) { try { return ( VAR_1 . METHOD_2 ( key , value , ( - 1 ) ) ) == ( VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) ; return false ; } } 
public static void METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( ) ) ) { return ; } TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) . METHOD_6 ( TYPE_1 . METHOD_8 ( VAR_2 ) ) . METHOD_6 ( TYPE_1 . METHOD_9 ( ) ) ; } 
public void run ( TYPE_1 action ) { java.util.List < TYPE_2 > VAR_1 = TYPE_3 . METHOD_1 ( VAR_2 , true ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_4 . METHOD_3 ( VAR_1 , null , null , false , true ) ; } else { TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( ) , STRING_1 , STRING_2 ) ; } } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { TYPE_4 . METHOD_2 ( s ) ; TYPE_4 . METHOD_3 ( s , fd , callback , new byte [ ] { INT_1 } , 0 , 1 , 0 ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
public void METHOD_1 ( ) { float VAR_1 = VAR_2 ; VAR_1 -= FLOAT_1 * ( VAR_3 ) ; synchronized ( VAR_4 ) { int VAR_5 = VAR_4 . size ( ) ; for ( int i = 0 ; i < VAR_5 ; i ++ ) { TYPE_1 VAR_6 = VAR_4 . get ( i ) ; VAR_1 -= ( VAR_6 . METHOD_2 ( ) ) + ( FLOAT_1 * ( VAR_3 ) ) ; VAR_6 . METHOD_3 ( VAR_1 ) ; } } } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; synchronized ( VAR_2 ) { VAR_2 . METHOD_3 ( ) ; VAR_3 = 0 ; } if ( ( VAR_4 ) == null ) { return ; } java.util.List < TYPE_1 > VAR_5 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ; java.util.List < TYPE_1 > VAR_6 = TYPE_2 . METHOD_6 ( ) ; METHOD_7 ( VAR_5 , VAR_6 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { TYPE_2 . METHOD_2 ( VAR_2 , new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_3 , TYPE_1 VAR_4 ) { return VAR_3 . getName ( ) . METHOD_4 ( VAR_4 . getName ( ) ) ; } } ) ; VAR_1 = true ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_3 ) ; ++ i ) { assertEquals ( new TYPE_3 ( i ) , ( ( TYPE_3 ) ( VAR_1 . METHOD_3 ( 0 , VAR_4 ) ) ) ) ; } METHOD_4 ( VAR_1 . METHOD_3 ( 0 , VAR_4 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; while ( ! ( VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) ) ; while ( ! ( VAR_1 . METHOD_2 ( VAR_3 , VAR_4 ) ) ) ; METHOD_3 ( VAR_4 , VAR_1 . get ( ) ) ; while ( ! ( VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) ) ) ; METHOD_3 ( VAR_5 , VAR_1 . get ( ) ) ; } 
protected void METHOD_1 ( java.lang.Exception VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } java.lang.String VAR_4 = VAR_1 . getMessage ( ) ; if ( VAR_4 == null ) { VAR_4 = STRING_1 + ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; } if ( ( VAR_5 ) != null ) { TYPE_1 . METHOD_5 ( VAR_5 , VAR_6 , VAR_4 , VAR_2 , VAR_7 ) ; } } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , VAR_1 ) ; if ( ! ( METHOD_4 ( VAR_1 , STRING_1 ) ) ) { return null ; } int subId = TYPE_3 . METHOD_5 ( VAR_2 ) ; return TYPE_4 . METHOD_6 ( VAR_4 . METHOD_7 ( ) , subId ) . METHOD_8 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 { assert ( VAR_2 ) != null ; java.util.List < TYPE_5 > VAR_3 = new java.util.ArrayList < TYPE_5 > ( ) ; for ( TYPE_6 value : values ) { VAR_3 . METHOD_2 ( value . METHOD_1 ( VAR_1 ) ) ; } TYPE_7 VAR_4 = VAR_2 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_4 , VAR_3 ) ; return VAR_5 ; } 
public void METHOD_1 ( TYPE_1 < ? > parent , TYPE_2 VAR_1 , int VAR_2 , long id ) { if ( VAR_3 ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; if ( ! ( VAR_5 ) ) { VAR_6 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } VAR_5 = false ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 ) ; } } ) ; return ; } VAR_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; } 
public static TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; byte [ ] VAR_3 = ( ( byte [ ] ) ( VAR_2 . METHOD_3 ( byte . class , VAR_1 ) ) ) ; int address = ( ( int ) ( VAR_2 . METHOD_4 ( VAR_3 ) ) ) ; return new TYPE_3 ( VAR_3 , address , VAR_1 ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( this ) ; } else { TYPE_1 . e ( this , new java.lang.NullPointerException ( ) , STRING_1 , METHOD_2 ( ) ) ; } TYPE_1 . METHOD_3 ( this , VAR_4 ) ; } } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( VAR_1 ) { android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ; } TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( device ) ; } 
static void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 [ ] VAR_3 = VAR_4 ; if ( METHOD_2 ( VAR_3 ) ) { TYPE_4 VAR_5 = VAR_6 ; if ( VAR_5 == null ) { return true ; } java.lang.String VAR_7 = new java.lang.String ( VAR_6 . METHOD_3 ( ) ) ; TYPE_5 item = TYPE_6 . METHOD_4 ( VAR_7 , TYPE_7 . METHOD_5 ( VAR_1 ) ) ; METHOD_6 ( VAR_7 , item ) ; METHOD_7 ( VAR_3 , item ) ; } return true ; } 
private void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = METHOD_2 ( ) ; try { if ( VAR_1 . equals ( STRING_1 ) ) { VAR_2 . METHOD_3 ( ) ; } else { int VAR_3 = java.lang.Integer . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; } VAR_4 . println ( ( ( STRING_2 + ( VAR_2 . METHOD_6 ( ) ? STRING_3 : STRING_4 ) ) + STRING_5 ) ) ; } catch ( android.os.RemoteException e ) { } } 
private TYPE_1 METHOD_1 ( java.lang.String name , java.util.List < ? extends TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { synchronized ( VAR_3 ) { for ( TYPE_1 id : VAR_3 ) { if ( id . equals ( name , VAR_1 ) ) { assert ( id . METHOD_2 ( ) ) == VAR_2 ; return id ; } } } return null ; } 
public TYPE_1 METHOD_1 ( ) { mRS . METHOD_2 ( ) ; int id = mRS . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; TYPE_1 VAR_7 = new TYPE_1 ( id , mRS ) ; VAR_8 = VAR_9 ; VAR_10 = VAR_11 ; VAR_12 = VAR_13 ; VAR_14 = VAR_15 ; VAR_16 = VAR_17 ; VAR_18 = VAR_6 ; return VAR_7 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int c = TYPE_1 . METHOD_2 ( ) ; assertTrue ( ( c != ( VAR_1 ) ) ) ; int VAR_2 = TYPE_1 . METHOD_2 ( ) ; assertTrue ( ( c != VAR_2 ) ) ; TYPE_1 . METHOD_3 ( c ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ( VAR_1 ) != null ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( ) ; } super . METHOD_1 ( ) ; } 
public void METHOD_1 ( short id , TYPE_1 status , short VAR_1 ) { if ( VAR_2 ) { android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( STRING_1 + id ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) + STRING_3 ) + VAR_1 ) ) ; } if ( ( status . status ) == ( VAR_3 ) ) { VAR_4 . METHOD_3 ( id , false , VAR_1 ) ; } else { VAR_4 . METHOD_4 ( id , false , status . status ) ; } } 
public java.lang.String METHOD_1 ( TYPE_1 locale ) { if ( ( locale . METHOD_2 ( ) . length ( ) ) == 0 ) { return VAR_1 ; } TYPE_2 VAR_2 = TYPE_2 . get ( locale ) ; if ( VAR_3 . equals ( VAR_1 ) ) { return VAR_4 ; } java.lang.String VAR_5 = TYPE_3 . METHOD_3 ( locale . toString ( ) , VAR_1 ) ; return VAR_5 != null ? VAR_5 : VAR_1 ; } 
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; int VAR_3 = VAR_4 ; if ( ( VAR_2 ) == ( VAR_5 ) ) { VAR_3 = VAR_6 ; } else if ( ( VAR_2 ) == ( VAR_7 ) ) { VAR_3 = VAR_8 ; } METHOD_3 ( this , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; METHOD_4 ( STRING_1 , 0 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( ) ; server . METHOD_5 ( ) ; } 
public void METHOD_1 ( short VAR_1 , TYPE_1 status ) { if ( VAR_2 ) { android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) ) ; } VAR_3 . METHOD_3 ( VAR_1 , status . status , false ) ; } 
public java.lang.Object METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; VAR_2 = ( ( TYPE_2 ) ( VAR_3 . METHOD_1 ( ) ) ) ; return VAR_1 ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( e ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = new TYPE_3 ( METHOD_2 ( ) . METHOD_3 ( ) ) ; final TYPE_4 VAR_4 = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_1 , 10 ) ; TYPE_5 . assertTrue ( VAR_4 . METHOD_6 ( ) , VAR_4 . METHOD_7 ( ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : VAR_4 ) { if ( ( VAR_3 . METHOD_2 ( ) ) == VAR_1 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; } } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 method , TYPE_3 VAR_2 , int offset , TYPE_4 VAR_3 ) { byte VAR_4 = VAR_5 ; switch ( VAR_4 ) { case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : case VAR_16 : case VAR_17 : case VAR_18 : case VAR_19 : VAR_20 = true ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { synchronized ( this ) { int index = METHOD_2 ( VAR_1 , false ) ; if ( index >= 0 ) { TYPE_3 r = ( ( TYPE_3 ) ( VAR_2 . get ( index ) ) ) ; return VAR_3 . METHOD_3 ( ) ; } return null ; } } 
public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert METHOD_2 ( VAR_1 . METHOD_3 ( ) ) : ( ( ( STRING_1 + ( TYPE_3 . getName ( VAR_1 . METHOD_3 ( ) ) ) ) + STRING_2 ) + ( this . METHOD_3 ( ) . getName ( ) ) ) + STRING_3 ; METHOD_4 ( ) ; assert ( VAR_2 ) != null ; return ( ( TYPE_1 ) ( VAR_2 . METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 ) ) ) ; } 
synchronized TYPE_1 METHOD_1 ( TYPE_2 call ) { TYPE_3 VAR_1 = VAR_1 = VAR_2 . get ( call . METHOD_2 ( ) ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; return VAR_1 ; } else { android.util.Log.e ( VAR_3 , ( ( STRING_1 + call ) + STRING_2 ) ) ; return null ; } } 
public java.lang.String METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return STRING_1 ; } java.lang.StringBuilder result = new java.lang.StringBuilder ( ) ; int index = 0 ; while ( index < ( VAR_1 ) ) { TYPE_1 VAR_2 = VAR_3 [ ( index ++ ) ] ; if ( VAR_2 != null ) { if ( ( result . length ( ) ) > 0 ) { result . append ( CHAR_1 ) ; } result . append ( VAR_2 . METHOD_3 ( ) ) ; } } return result . toString ( ) ; } 
public static void METHOD_1 ( TYPE_1 context ) { if ( TYPE_2 . METHOD_2 ( context ) ) { TYPE_2 . METHOD_3 ( context , VAR_1 , true ) ; } else { TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , true ) . METHOD_7 ( ) ; } } 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_1 . println ( ( ( ( ( ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) + STRING_2 ) + ( VAR_2 . METHOD_3 ( ) ) ) + STRING_3 ) + ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) + CHAR_1 ) ) ; VAR_1 . println ( ( ( STRING_4 + ( VAR_2 . METHOD_6 ( ) ) ) + CHAR_1 ) ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , int value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final int VAR_3 = ( v == null ) ? ( ( int ) ( m . METHOD_2 ( ) ) ) : ( ( int ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( char c ) { if ( ! ( TYPE_1 . METHOD_2 ( c ) ) ) { TYPE_2 . e ( VAR_1 , ( ( STRING_1 + c ) + STRING_2 ) ) ; } else { if ( ( VAR_2 . METHOD_3 ( ) ) == ( VAR_3 ) ) { VAR_2 . METHOD_1 ( c , null ) ; } } } 
public int METHOD_1 ( ) { if ( ( VAR_1 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_1 ) ; } int result = VAR_2 ; if ( null != ( VAR_3 ) ) { android.os.Message msg = VAR_3 . METHOD_3 ( VAR_4 ) ; result = ( VAR_3 . METHOD_4 ( msg ) ) ? VAR_5 : result ; } return result ; } 
public synchronized boolean METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ; if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { if ( VAR_3 ) android.util.Log.d ( VAR_4 . TAG , STRING_2 ) ; return false ; } if ( VAR_2 ) { VAR_5 = VAR_1 ; } VAR_6 = VAR_1 . METHOD_3 ( ) ; if ( VAR_7 ) { METHOD_4 ( ) ; } return true ; } 
public void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { if ( ( VAR_2 [ i ] ) == null ) { throw new java.lang.NullPointerException ( ( ( STRING_1 + i ) + STRING_2 ) ) ; } } VAR_3 = VAR_2 ; } 
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_2 ( VAR_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) ; TYPE_2 . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 , TYPE_1 . METHOD_2 ( VAR_1 ) ) ; VAR_2 . METHOD_3 ( VAR_4 , true ) ; int result = METHOD_4 ( VAR_2 , true ) ; assertEquals ( VAR_5 , result ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_7 ) , org.mockito.Matchers.eq ( TYPE_1 . METHOD_2 ( VAR_1 ) ) , TYPE_2 . METHOD_6 ( VAR_8 class ) , org.mockito.Matchers.eq ( true ) , org.mockito.Matchers.eq ( VAR_9 ) ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_3 class ) ; TYPE_2 VAR_4 = METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_5 = METHOD_2 ( VAR_6 class ) ; TYPE_4 VAR_7 = METHOD_4 ( ) ; TYPE_5 VAR_8 = METHOD_5 ( ) ; TYPE_6 VAR_9 = METHOD_6 ( VAR_5 , VAR_10 ) ; METHOD_7 ( VAR_7 , VAR_4 , VAR_5 , VAR_2 ) ; METHOD_8 ( VAR_9 , VAR_5 , VAR_8 ) ; METHOD_9 ( VAR_2 ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_4 ) ; } 
private boolean METHOD_1 ( ) { boolean VAR_1 = true ; int VAR_2 = VAR_3 . METHOD_2 ( ) ; java.lang.String type = ( VAR_2 != ( - 1 ) ) ? VAR_4 . get ( VAR_2 ) : null ; if ( type == null ) { METHOD_3 ( STRING_1 ) ; VAR_1 = false ; } else { METHOD_3 ( null ) ; } TYPE_1 VAR_5 = ( ( TYPE_1 ) ( METHOD_4 ( ) ) ) ; VAR_5 . METHOD_5 ( type ) ; METHOD_6 ( VAR_1 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.io.IOException { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , null , STRING_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( new java.io.File ( VAR_1 , STRING_1 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; byte [ ] VAR_4 = new byte [ INT_1 ] ; try { VAR_3 . METHOD_4 ( ) ; fail ( STRING_2 ) ; } catch ( java.io.IOException VAR_5 ) { } } 
public static void METHOD_1 ( java.lang.String [ ] VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_2 , TYPE_2 . METHOD_3 ( VAR_1 ) ) ; if ( ! ( VAR_3 ) ) { java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String VAR_5 : VAR_1 ) { if ( ! ( TYPE_1 . METHOD_4 ( VAR_5 ) ) ) { VAR_4 . METHOD_5 ( VAR_5 ) ; } } assertEquals ( VAR_6 , VAR_4 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 context , java.lang.String packageName ) { if ( TYPE_3 . METHOD_2 ( packageName ) ) { return null ; } TYPE_4 < TYPE_1 > VAR_1 = TYPE_5 . METHOD_3 ( context ) ; for ( TYPE_1 app : VAR_1 ) { if ( packageName . equals ( VAR_2 ) ) { return app ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; TYPE_3 . METHOD_3 ( VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 ) ; TYPE_5 . METHOD_5 ( VAR_3 . METHOD_6 ( STRING_2 ) . get ( ) ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return null ; } assert ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) == ( TYPE_3 . METHOD_5 ( ) ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_1 ( ) ; if ( VAR_3 != null ) { return VAR_3 ; } if ( ( VAR_4 ) != null ) { return VAR_1 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) ; } return null ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { boolean result = false ; try { byte [ ] VAR_2 ; try { VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; } catch ( TYPE_1 e ) { return result ; } TYPE_2 . METHOD_3 ( VAR_4 , VAR_2 , VAR_2 . length , TYPE_3 . METHOD_4 ( ) ) ; result = true ; } catch ( java.lang.Exception e ) { return false ; } finally { if ( result == false ) { TYPE_4 . METHOD_5 ( VAR_5 ) ; } } return result ; } 
public int [ ] METHOD_1 ( int [ ] src , int [ ] VAR_1 ) { return new int [ ] { TYPE_1 . METHOD_2 ( src [ 0 ] , VAR_1 [ 0 ] ) , TYPE_1 . METHOD_2 ( src [ 1 ] , VAR_1 [ 1 ] ) , TYPE_1 . METHOD_2 ( src [ 2 ] , VAR_1 [ 2 ] ) , TYPE_1 . METHOD_3 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; } 
public void METHOD_1 ( final int VAR_1 , final java.lang.String VAR_2 , final java.lang.String name , final java.lang.String VAR_3 ) { boolean VAR_4 = VAR_1 == ( VAR_5 ) ; VAR_6 . METHOD_2 ( VAR_2 , name , VAR_3 , VAR_4 ) ; VAR_7 . METHOD_1 ( VAR_1 , VAR_2 , name , VAR_3 ) ; } 
private void METHOD_1 ( int VAR_1 , int VAR_2 ) { switch ( VAR_1 ) { case VAR_3 : VAR_4 = VAR_5 ; METHOD_2 ( VAR_4 , METHOD_3 ( VAR_6 ) ) ; break ; case VAR_7 : android.util.Log.v ( VAR_8 . TAG , STRING_1 ) ; VAR_9 = VAR_5 ; METHOD_4 ( ) ; break ; case VAR_10 : VAR_11 = VAR_5 ; METHOD_5 ( true ) ; VAR_12 = ( ( long ) ( VAR_2 ) ) * INT_1 ; break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( VAR_1 . METHOD_2 ( ) . length , VAR_2 . METHOD_3 ( ) ) ; assertEquals ( VAR_3 . length , VAR_4 . METHOD_3 ( ) ) ; assertEquals ( VAR_5 . length , VAR_6 . METHOD_3 ( ) ) ; assertNotNull ( VAR_7 . METHOD_3 ( ) ) ; assertNotNull ( VAR_8 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; } 
public TYPE_1 METHOD_1 ( float x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
public static void METHOD_1 ( final TYPE_1 context , final java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( context , STRING_1 , VAR_2 ) . METHOD_3 ( ) ; new TYPE_3 < TYPE_4 , TYPE_4 , TYPE_4 > ( ) { protected TYPE_4 METHOD_4 ( TYPE_4 ... VAR_3 ) { TYPE_5 . METHOD_5 ( context , VAR_1 , VAR_4 ) ; return null ; } } . METHOD_6 ( ) ; } 
public static java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 , VAR_1 } ; } 
private static TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { return new TYPE_1 ( name , name , VAR_1 , STRING_1 , STRING_1 , new TYPE_2 [ 0 ] , new TYPE_2 [ 0 ] , new TYPE_3 [ 1 ] , false ) ; } else { return new TYPE_1 ( name , VAR_1 ) ; } } 
static int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return 0 ; } TYPE_2 VAR_5 = new TYPE_2 ( VAR_4 . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) , TYPE_3 . METHOD_4 ( VAR_3 ) ) ; return VAR_6 . METHOD_5 ( VAR_5 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 { TYPE_1 status = new TYPE_1 ( ) ; VAR_2 = new java.util.ArrayList < TYPE_5 > ( ) ; try { VAR_1 . METHOD_2 ( STRING_1 , 5 ) ; VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_3 ( ) ; java.util.List < TYPE_5 > VAR_5 = METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( 1 ) ; } finally { VAR_1 . METHOD_7 ( ) ; } return status ; } 
synchronized boolean METHOD_1 ( ) { log ( STRING_1 ) ; if ( ! ( METHOD_2 ( ) ) ) { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; return false ; } METHOD_3 ( new TYPE_1 ( 0 , 0 , VAR_2 , STRING_3 , 0 ) , true ) ; METHOD_4 ( false ) ; log ( STRING_4 ) ; return true ; } 
public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { if ( key . METHOD_2 ( STRING_1 ) ) { } else if ( key . METHOD_2 ( STRING_2 ) ) { if ( ! ( VAR_2 . METHOD_3 ( VAR_3 ) ) ) { return VAR_4 ; } } else { type = key . toString ( ) ; return VAR_5 ; } return null ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; synchronized ( VAR_4 ) { TYPE_3 VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; if ( VAR_5 != null ) { for ( TYPE_4 < android.os.Bundle , TYPE_5 > item : VAR_6 ) { VAR_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 , VAR_7 , VAR_8 ) ) ; } } } return VAR_3 ; } 
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , new TYPE_2 ( VAR_5 ) ) ; if ( VAR_1 == null ) { VAR_1 = ! ( METHOD_3 ( ) ) ; } if ( VAR_1 ) { VAR_6 . METHOD_4 ( ) ; } else { METHOD_5 ( ) ; VAR_6 . METHOD_6 ( ) ; } return VAR_1 ; } 
private long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( VAR_5 == ( VAR_6 ) ) { return - 1 ; } else if ( VAR_5 == ( - 1 ) ) { VAR_5 = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( VAR_5 == ( VAR_6 ) ) { return - 1 ; } } return VAR_5 ; } 
public android.content.Intent METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == null ) { return null ; } TYPE_1 VAR_3 = VAR_2 . get ( VAR_1 ) ; android.content.Intent VAR_4 = new android.content.Intent ( ( ( VAR_5 ) != null ? VAR_5 : VAR_6 ) ) ; VAR_4 . METHOD_2 ( ( ( VAR_7 ) | ( VAR_8 ) ) ) ; TYPE_2 VAR_9 = VAR_10 ; VAR_4 . METHOD_3 ( new TYPE_3 ( VAR_11 . packageName , VAR_9 . name ) ) ; return VAR_4 ; } 
static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 , TYPE_1 VAR_4 ) { long VAR_5 ; long VAR_6 ; if ( VAR_3 != null ) { VAR_3 . METHOD_2 ( ) ; VAR_5 = VAR_7 ; } else { VAR_5 = 0 ; } if ( VAR_4 != null ) { VAR_4 . METHOD_2 ( ) ; VAR_6 = VAR_8 ; } else { VAR_6 = 0 ; } TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 , VAR_9 , VAR_10 ) ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; s . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; } 
private void METHOD_1 ( java.io.File VAR_1 ) throws TYPE_1 , TYPE_2 { if ( VAR_1 . METHOD_2 ( ) ) { throw new TYPE_1 ( STRING_1 , VAR_1 ) ; } if ( VAR_1 . METHOD_3 ( ) ) { if ( ( VAR_1 . METHOD_4 ( ) ) == false ) { throw new TYPE_1 ( STRING_2 , VAR_1 ) ; } } else { throw new TYPE_2 ( java.lang.String.format ( STRING_3 , VAR_1 ) ) ; } } 
TYPE_1 METHOD_1 ( ) { TYPE_1 context = TYPE_2 . METHOD_2 ( VAR_1 class ) ; TYPE_3 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 class ) ; TYPE_2 . when ( context . METHOD_3 ( ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . when ( context . METHOD_4 ( VAR_5 ) ) . thenReturn ( VAR_6 ) ; return context ; } 
protected void METHOD_1 ( short VAR_1 , short VAR_2 , java.lang.String VAR_3 , java.lang.Exception VAR_4 ) throws java.io.IOException { METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; byte [ ] error = new byte [ 2 ] ; error [ 0 ] = ( ( byte ) ( VAR_1 ) ) ; error [ 1 ] = ( ( byte ) ( VAR_2 ) ) ; METHOD_4 ( VAR_5 , error , 0 , 2 ) ; } 
static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { int VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = VAR_1 . METHOD_3 ( 0 , VAR_3 ) ; java.lang.String VAR_5 = null ; if ( VAR_3 < ( VAR_1 . length ( ) ) ) { VAR_5 = VAR_1 . METHOD_3 ( VAR_3 , VAR_1 . length ( ) ) ; } return new TYPE_1 ( VAR_4 , VAR_5 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) { TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 ) ; return ; } METHOD_5 ( VAR_2 , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_6 ( VAR_2 ) ; METHOD_7 ( VAR_2 , VAR_5 ) ; final TYPE_2 VAR_6 = METHOD_6 ( VAR_2 ) ; TYPE_3 . METHOD_8 ( VAR_4 , VAR_6 ) ; } 
public java.lang.String toString ( ) { TYPE_1 b = new TYPE_1 ( ) ; return ( ( VAR_1 ) == ( VAR_2 ) ? TYPE_2 . METHOD_1 ( b , VAR_1 , false ) : TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_1 ( b , VAR_1 , false ) . append ( CHAR_1 ) , VAR_2 , false ) ) . toString ( ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { byte [ ] VAR_1 ; try { VAR_1 = METHOD_2 ( ) . get ( 2 , VAR_2 ) ; } catch ( TYPE_1 expected ) { return ; } if ( ( VAR_1 != null ) && ( ( VAR_1 . length ) > 0 ) ) { fail ( ( ( ( STRING_1 + ( VAR_1 . length ) ) + STRING_2 ) + ( new java.lang.String ( VAR_1 , STRING_3 ) ) ) ) ; } } 
public final TYPE_1 METHOD_1 ( char x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return false ; } for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { TYPE_2 VAR_3 = VAR_4 [ i ] ; TYPE_2 VAR_5 = VAR_6 [ i ] ; if ( ( ( VAR_3 != null ) && ( VAR_5 != null ) ) && ( ( VAR_3 . METHOD_1 ( VAR_5 ) ) == false ) ) { return false ; } } return true ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 ; if ( VAR_3 ) { VAR_2 = VAR_1 ; } else { VAR_2 = METHOD_2 ( VAR_1 ) ; } java.util.Map < java.lang.String , TYPE_1 > VAR_4 = new java.util.HashMap < > ( ) ; for ( TYPE_1 config : VAR_2 ) { VAR_4 . METHOD_3 ( config . METHOD_4 ( true ) , config ) ; } return VAR_4 ; } 
public void METHOD_1 ( TYPE_1 method ) { java.lang.String VAR_1 = method . METHOD_2 ( ) ; java.lang.String VAR_2 = method . METHOD_3 ( ) . METHOD_4 ( STRING_1 , STRING_2 ) ; java.lang.String VAR_3 = ( VAR_2 + STRING_2 ) + VAR_1 ; TYPE_2 . METHOD_5 ( VAR_3 , null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = new java.io.File ( STRING_1 ) ; assertTrue ( VAR_1 . METHOD_2 ( ) ) ; assertTrue ( VAR_1 . METHOD_3 ( ) ) ; assertFalse ( VAR_1 . METHOD_4 ( ) ) ; assertTrue ( VAR_1 . METHOD_5 ( ) ) ; TYPE_1 . METHOD_6 ( VAR_1 , STRING_2 ) ; TYPE_1 . METHOD_7 ( VAR_1 , STRING_2 ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; try { TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class } , VAR_1 ) ; VAR_5 . println ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException VAR_6 ) { java.lang.System.out.println ( STRING_2 ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String address = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( address != null ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( address . METHOD_5 ( ) , VAR_3 , VAR_4 ) ; VAR_2 . METHOD_6 ( address , STRING_1 , null ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.io.File VAR_2 = TYPE_3 . METHOD_1 ( STRING_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ; VAR_1 . METHOD_3 ( new TYPE_4 ( VAR_3 ) ) ; return VAR_3 ; } catch ( java.io.IOException e ) { throw new TYPE_5 ( e ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_3 [ ] VAR_1 = VAR_2 . METHOD_1 ( ) ; int count = VAR_1 . length ; if ( count > 0 ) { java.util.List < TYPE_2 > result = TYPE_4 . METHOD_2 ( count ) ; for ( TYPE_3 VAR_3 : VAR_1 ) { result . METHOD_3 ( new TYPE_5 ( VAR_3 ) ) ; } return result ; } return TYPE_6 . METHOD_4 ( ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( name ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_3 . METHOD_2 ( name ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_4 . METHOD_2 ( name ) ; } if ( VAR_1 == null ) { VAR_1 = TYPE_5 . METHOD_2 ( name ) ; } if ( VAR_1 == null ) { VAR_1 = TYPE_6 . METHOD_2 ( name ) ; } } return VAR_1 ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException { TYPE_1 VAR_4 = METHOD_2 ( VAR_1 ) ; int VAR_5 = METHOD_3 ( VAR_2 , VAR_4 . METHOD_4 ( ) ) ; assertTrue ( java.lang.String.format ( STRING_1 , VAR_2 ) , ( VAR_5 > 0 ) ) ; TYPE_2 call = VAR_4 . METHOD_5 ( VAR_5 ) ; java.lang.String VAR_6 = call . format ( new TYPE_3 ( VAR_4 . METHOD_6 ( ) ) ) ; assertEquals ( VAR_3 , VAR_6 ) ; } 
private void METHOD_1 ( TYPE_1 project , java.io.File source , java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_3 = project . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 . METHOD_3 ( ) ) == false ) { TYPE_6 VAR_4 = new TYPE_6 ( source ) ; VAR_3 . METHOD_4 ( VAR_4 , false , new TYPE_7 ( VAR_2 , 10 ) ) ; } } 
public int METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , int version , byte [ ] VAR_4 ) { if ( ( VAR_5 ) == false ) { throw new java.lang.RuntimeException ( ( ( VAR_6 . TAG ) + STRING_1 ) ) ; } return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_2 ( null ) ; TYPE_3 . METHOD_3 ( STRING_1 ) ; TYPE_3 . METHOD_3 ( STRING_2 ) ; TYPE_3 . METHOD_3 ( STRING_3 ) ; TYPE_3 . METHOD_3 ( STRING_4 ) ; TYPE_3 . METHOD_3 ( STRING_5 ) ; TYPE_3 . METHOD_3 ( STRING_6 ) ; server . METHOD_4 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ; } super . METHOD_1 ( ) ; } 
private TYPE_1 METHOD_1 ( java.io.File VAR_1 ) throws java.io.IOException { java.io.File VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( TYPE_3 . getName ( ) , VAR_2 . METHOD_4 ( ) ) ; VAR_3 . METHOD_3 ( TYPE_4 . getName ( ) , STRING_3 ) ; VAR_3 . METHOD_3 ( TYPE_5 . getName ( ) , STRING_3 ) ; VAR_3 . METHOD_3 ( TYPE_6 . getName ( ) , VAR_1 . METHOD_5 ( ) ) ; return VAR_3 ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_4 ) ; } METHOD_3 ( VAR_3 , VAR_1 ) ; } 
private java.lang.Class < ? > METHOD_1 ( java.lang.String name ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { TYPE_2 [ ] VAR_2 = METHOD_2 ( ) ; VAR_1 = new TYPE_3 ( VAR_2 , this ) ; } try { VAR_3 = true ; return VAR_1 . METHOD_3 ( name ) ; } finally { VAR_3 = false ; } } 
public static void METHOD_1 ( int id , long value ) { try { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( id ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( id , VAR_2 ) , value ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_7 ( e ) ; } finally { VAR_1 . METHOD_8 ( ) ; } } 
public void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; if ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) { e . data = METHOD_5 ( ) ; return ; } if ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ; e . data = VAR_2 ; return ; } VAR_3 = VAR_4 ; VAR_5 = false ; } 
protected void METHOD_1 ( TYPE_1 address , int VAR_1 ) throws java.io.IOException { TYPE_2 . METHOD_1 ( fd , address , VAR_1 ) ; this . address = address ; if ( VAR_1 != 0 ) { this . VAR_2 = VAR_1 ; } else { this . VAR_2 = TYPE_2 . METHOD_2 ( fd ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , int VAR_3 , int VAR_4 ) { if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { return null ; } TYPE_4 VAR_5 = TYPE_5 . METHOD_3 ( VAR_2 ) ; return new TYPE_1 ( VAR_1 , VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { VAR_2 . METHOD_3 ( ) ; } else if ( ! ( METHOD_4 ( ) ) ) { VAR_1 . METHOD_5 ( false , 0 ) ; VAR_2 . METHOD_3 ( ) ; } else { final long VAR_3 = VAR_4 . METHOD_6 ( ) ; final long VAR_5 = ( TYPE_2 . METHOD_7 ( ) ) - VAR_3 ; VAR_1 . METHOD_5 ( true , VAR_5 ) ; } } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_1 , ( - 1 ) , true , true , this , ( - 1 ) , null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( 1 , STRING_1 ) ; TYPE_1 . METHOD_2 ( INT_1 , STRING_2 ) ; TYPE_1 . METHOD_2 ( 1 , STRING_3 ) ; TYPE_1 . METHOD_2 ( ( ( short ) ( INT_2 ) ) , STRING_4 ) ; TYPE_1 . METHOD_2 ( ( ( byte ) ( INT_3 ) ) , STRING_5 ) ; TYPE_1 . METHOD_2 ( FLOAT_1 , STRING_6 ) ; TYPE_1 . METHOD_2 ( ( - FLOAT_2 ) , STRING_7 ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 VAR_2 = METHOD_2 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_2 ( VAR_5 ) ; TYPE_5 VAR_6 = new TYPE_5 ( METHOD_3 ( x ) , VAR_4 , VAR_2 ) ; METHOD_4 ( VAR_6 ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
public static boolean METHOD_1 ( byte [ ] VAR_1 , int VAR_2 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { int VAR_3 = 7 - ( VAR_2 / 8 ) ; int VAR_4 = VAR_2 % 8 ; if ( VAR_3 < ( VAR_1 . length ) ) { return ( ( VAR_1 [ VAR_3 ] ) & ( 1 < < VAR_4 ) ) > 0 ; } } return false ; } 
void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 value , int VAR_2 ) { TYPE_3 < TYPE_1 , TYPE_2 > VAR_3 = VAR_4 ; if ( VAR_3 != ( VAR_5 ) ) { boolean VAR_6 ; ( size ) ++ ; try { VAR_6 = METHOD_2 ( VAR_3 ) ; } finally { ( size ) -- ; } if ( VAR_6 ) { METHOD_3 ( VAR_3 . key ) ; } } super . METHOD_1 ( VAR_1 , key , value , VAR_2 ) ; } 
private static char METHOD_1 ( java.lang.String VAR_1 , char VAR_2 ) { final int length = VAR_1 . length ( ) ; if ( length == 1 ) { return VAR_1 . METHOD_2 ( 0 ) ; } if ( length == 2 ) { char VAR_3 = VAR_1 . METHOD_2 ( 0 ) ; if ( ( ( VAR_3 == CHAR_1 ) || ( VAR_3 == CHAR_2 ) ) || ( VAR_3 == CHAR_3 ) ) ; { return VAR_1 . METHOD_2 ( 1 ) ; } } return VAR_2 ; } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String id , int VAR_2 , int VAR_3 , TYPE_3 [ ] VAR_4 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , id , new android.content.Intent ( VAR_1 , VAR_5 class ) . METHOD_3 ( VAR_6 , id ) . METHOD_3 ( VAR_7 , VAR_2 ) . METHOD_3 ( VAR_8 , VAR_3 ) . METHOD_3 ( VAR_9 , VAR_4 ) , null ) ; } 
public void METHOD_1 ( ) { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_2 ( null , expected , STRING_1 , STRING_2 , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { java.lang.String VAR_4 = VAR_5 . get ( STRING_1 , VAR_1 ) ; if ( ! ( VAR_4 . equals ( VAR_1 ) ) ) { return VAR_4 ; } } return VAR_5 . get ( STRING_2 , VAR_1 ) ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = false ; if ( ! ( VAR_2 . equals ( VAR_3 ) ) ) { try { VAR_4 . METHOD_1 ( ) ; VAR_1 = true ; } catch ( java.lang.NullPointerException ex ) { loge ( ( ( STRING_1 + ex ) + STRING_2 ) ) ; } } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.Class < ? > VAR_4 , TYPE_3 < java.lang.String > VAR_5 , TYPE_4 VAR_6 , int VAR_7 , boolean VAR_8 ) { if ( METHOD_2 ( VAR_4 ) ) { return new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; } else { return null ; } } 
public TYPE_1 METHOD_1 ( int x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) throws java.io.IOException { if ( ( VAR_1 != null ) && ( VAR_2 != ( VAR_3 ) ) ) { VAR_4 . METHOD_1 ( VAR_1 , ( VAR_2 + 1 ) ) ; } else { VAR_4 . METHOD_2 ( ) ; } } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( METHOD_4 ( ) . get ( VAR_5 ) ) ) ; METHOD_5 ( new TYPE_6 ( info , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_6 ( x , e ) ; } } 
protected void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 , TYPE_5 { final TYPE_6 VAR_4 ; try { VAR_4 = VAR_2 . METHOD_2 ( VAR_5 class ) ; } catch ( TYPE_7 e ) { throw new TYPE_4 ( e ) ; } METHOD_1 ( VAR_1 , key , VAR_4 , VAR_3 ) ; } 
public void run ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 , VAR_3 ) ; if ( VAR_1 != null ) { VAR_4 = VAR_1 ; TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_4 . METHOD_4 ( ) . METHOD_5 ( new java.lang.Runnable ( ) { public void run ( ) { TYPE_5 . METHOD_6 ( VAR_5 , VAR_3 , VAR_1 ) ; } } ) ; } } 
public void METHOD_1 ( ) { try { java.lang.Integer [ ] VAR_1 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_1 [ i ] = new java.lang.Integer ( i ) ; TYPE_1 VAR_3 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } } 
public final void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != ( VAR_3 ) ) { return ; } if ( VAR_1 . METHOD_2 ( this ) ) { for ( java.lang.Object value : METHOD_3 ( ) ) { if ( value instanceof TYPE_2 ) { ( ( TYPE_2 ) ( value ) ) . METHOD_1 ( VAR_1 ) ; } } VAR_1 . METHOD_4 ( this ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_2 = VAR_1 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) , null ) ; return true ; } catch ( TYPE_3 e ) { TYPE_4 . METHOD_2 ( VAR_4 , ( STRING_1 + ( e . METHOD_3 ( ) ) ) , VAR_5 ) . METHOD_4 ( ) ; } return false ; } 
public static int METHOD_1 ( int a , int b ) { int [ ] values = new int [ ] { a , b } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 source , TYPE_3 VAR_1 , int VAR_2 , java.lang.String VAR_3 , int VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 , java.lang.String VAR_7 , TYPE_4 VAR_8 , TYPE_5 VAR_9 , java.lang.String VAR_10 ) { return new TYPE_6 ( source , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = VAR_1 . get ( VAR_4 , STRING_1 ) ; TYPE_2 < java.lang.String > VAR_5 = new TYPE_3 < java.lang.String > ( ) ; for ( java.lang.String VAR_6 : VAR_3 . METHOD_2 ( VAR_7 ) ) { VAR_5 . METHOD_3 ( VAR_6 ) ; } VAR_5 . METHOD_4 ( VAR_2 ) ; TYPE_4 VAR_8 = TYPE_4 . on ( VAR_7 ) ; VAR_1 . METHOD_5 ( VAR_4 , VAR_8 . METHOD_6 ( VAR_5 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 , false ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_3 ( false ) ; org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( true ) ; org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_6 ( 2 ) ) . METHOD_2 ( TYPE_1 . METHOD_7 ( ) ) ; org.junit.Assert.assertEquals ( VAR_4 , VAR_1 . METHOD_4 ( ) ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { java.lang.Class < ? > c = java.lang.Class . METHOD_2 ( STRING_1 ) ; TYPE_1 m = c . METHOD_3 ( STRING_2 , ( ( java.lang.Class [ ] ) ( null ) ) ) ; java.lang.Integer result = ( ( java.lang.Integer ) ( m . invoke ( null ) ) ) ; if ( result != 5 ) { throw new TYPE_2 ( ( STRING_3 + result ) ) ; } } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( VAR_1 ) android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ; TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) return false ; return ( ( service . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( service . METHOD_4 ( ) . equals ( device ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , android.renderscript.Allocation a ) { android.util.Log.e ( STRING_1 , ( STRING_2 + a ) ) ; VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( 0 , VAR_1 , a ) ; VAR_3 = true ; VAR_4 = true ; VAR_5 = false ; VAR_6 = true ; VAR_2 . METHOD_3 ( 0 ) ; return VAR_2 ; } 
protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > METHOD_1 ( TYPE_4 < TYPE_5 , TYPE_1 > VAR_1 , TYPE_5 data ) throws TYPE_6 { TYPE_7 event = METHOD_2 ( VAR_1 , data ) ; try { return VAR_1 . METHOD_3 ( data ) ; } catch ( java.lang.Throwable e ) { TYPE_8 VAR_2 = scheduler . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; throw new TYPE_6 ( VAR_1 , VAR_2 , data , e ) ; } finally { event . METHOD_7 ( ) ; } } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { assert ! ( METHOD_2 ( ) ) ; assert VAR_2 . METHOD_3 ( VAR_3 ) ; java.io.File path = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; try { return new TYPE_4 ( path ) ; } catch ( TYPE_5 e ) { TYPE_6 . METHOD_6 ( path , VAR_1 . METHOD_7 ( ) , VAR_4 ) ; throw new TYPE_7 ( e ) ; } } 
public static byte [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( ) ; for ( java.lang.String line : VAR_1 . METHOD_2 ( STRING_1 ) ) TYPE_3 . METHOD_3 ( line , VAR_2 ) ; return VAR_2 . METHOD_4 ( ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 response ) { VAR_2 . METHOD_2 ( VAR_1 , response ) ; TYPE_2 request = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( request != null ) { VAR_4 = response ; METHOD_4 ( VAR_1 , request , null ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( null ) ; METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; super . METHOD_1 ( ) ; } 
public java.lang.String METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return null ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return null ; return service . METHOD_1 ( device ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( 100 , 100 , VAR_2 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( - INT_1 , true ) ) ; VAR_3 . METHOD_4 ( 0 , 0 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; VAR_3 . METHOD_7 ( ) ; TYPE_1 VAR_4 = TYPE_4 . METHOD_8 ( VAR_1 , - INT_1 ) ; METHOD_9 ( VAR_4 ) ; } 
protected TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_2 VAR_3 , TYPE_2 VAR_4 ) { TYPE_1 VAR_5 = VAR_6 . get ( VAR_1 ) ; if ( VAR_5 != null ) { return VAR_5 ; } int id = mRS . METHOD_2 ( METHOD_3 ( mRS ) , VAR_1 , VAR_2 ) ; if ( id == 0 ) { throw new TYPE_3 ( STRING_1 ) ; } VAR_5 = new TYPE_1 ( id , mRS , this , VAR_1 , VAR_2 ) ; VAR_6 . METHOD_4 ( VAR_1 , VAR_5 ) ; return VAR_5 ; } 
public java.lang.Object METHOD_1 ( ) { try { java.util.ArrayList < TYPE_1 > v = ( ( java.util.ArrayList < TYPE_1 > ) ( super . METHOD_1 ( ) ) ) ; VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , size ) ; VAR_3 = 0 ; return v ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( ) ; } } 
public static void METHOD_1 ( Main m , boolean VAR_1 ) { if ( ! ( Main . METHOD_2 ( STRING_1 ) ) ) { return ; } Main . METHOD_3 ( ) ; if ( VAR_1 ) { while ( ! ( Main . METHOD_4 ( STRING_1 ) ) ) { } } for ( int i = 0 ; i < ( VAR_1 ? INT_1 : 1 ) ; ++ i ) { m . METHOD_5 ( ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { java.io.File [ ] VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( VAR_3 ) - > TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) ; for ( java.io.File source : VAR_2 ) { METHOD_6 ( source . METHOD_5 ( ) , VAR_4 ) ; } java.io.File VAR_5 = new java.io.File ( VAR_1 . METHOD_2 ( ) , VAR_6 ) ; if ( VAR_5 . METHOD_7 ( ) ) { METHOD_8 ( VAR_5 . METHOD_5 ( ) ) ; } return this ; } 
public static void METHOD_1 ( java.io.File [ ] VAR_1 , java.io.File [ ] VAR_2 , java.io.File VAR_3 , boolean VAR_4 , boolean VAR_5 , float VAR_6 , TYPE_1 VAR_7 , TYPE_2 [ ] VAR_8 ) throws java.lang.Exception { TYPE_3 . METHOD_1 ( new TYPE_4 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final int VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { final int VAR_2 = TYPE_1 . METHOD_3 ( STRING_1 ) ; TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , null , true ) ; } finally { TYPE_1 . METHOD_5 ( VAR_1 ) ; } TYPE_2 . METHOD_6 ( ) ; } 
private java.io.File METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { java.io.File VAR_3 = java.io.File . METHOD_2 ( VAR_2 , STRING_1 ) ; TYPE_1 VAR_4 = null ; try { VAR_4 = new TYPE_1 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( ) ; } finally { TYPE_2 . METHOD_6 ( VAR_4 ) ; } return VAR_3 ; } 
public final TYPE_1 METHOD_1 ( int i , byte x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i ) ) , x ) ; return this ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_2 target = VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; if ( target != null ) { VAR_3 . METHOD_1 ( target ) ; VAR_4 . METHOD_5 ( ) ; } } } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = context . METHOD_2 ( VAR_3 class ) . METHOD_3 ( VAR_1 ) ; TYPE_4 VAR_4 = TYPE_5 . METHOD_4 ( context , TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_2 . METHOD_6 ( ) ) ; TYPE_5 . METHOD_7 ( context , VAR_4 , VAR_1 ) ; context . METHOD_2 ( VAR_5 class ) . METHOD_8 ( VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.Class < ? > VAR_4 , TYPE_3 < java.lang.String > VAR_5 , TYPE_4 VAR_6 , int VAR_7 , boolean VAR_8 ) { for ( TYPE_5 VAR_9 : VAR_10 ) { TYPE_1 VAR_11 = VAR_9 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; if ( VAR_11 != null ) { return VAR_11 ; } } return null ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == null ) { return ; } TYPE_2 key = VAR_1 . METHOD_2 ( ) ; if ( key != null ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; } for ( TYPE_1 VAR_4 : VAR_1 . METHOD_5 ( ) ) { METHOD_1 ( VAR_4 , key ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.util.List < TYPE_3 > VAR_3 ) { for ( TYPE_4 VAR_4 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_4 . METHOD_3 ( ) ) { METHOD_1 ( ( ( TYPE_1 ) ( VAR_4 ) ) , VAR_2 , VAR_3 ) ; } else { TYPE_3 VAR_5 = ( ( TYPE_3 ) ( VAR_4 ) ) ; if ( VAR_2 . METHOD_4 ( VAR_5 ) ) { VAR_3 . METHOD_5 ( VAR_5 ) ; } } } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( ( ( byte [ ] ) ( org.mockito.Matchers . METHOD_5 ( ) ) ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( ( ( ( VAR_3 ) == null ) || ( VAR_1 == null ) ) || ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_1 . METHOD_2 ( ) ) ) ) { android.util.Slog.w ( VAR_5 . TAG , ( STRING_1 + VAR_1 ) ) ; return ; } VAR_6 . METHOD_3 ( VAR_7 ) ; } } 
void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { assert ! ( METHOD_2 ( ) ) ; assert VAR_2 . METHOD_3 ( VAR_3 ) ; java.io.File path = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; if ( ( ! ( path . METHOD_1 ( ) ) ) || ( path . METHOD_6 ( ) ) ) { throw new TYPE_2 ( VAR_1 . METHOD_7 ( ) ) ; } } 
private static boolean METHOD_1 ( TYPE_1 start , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( start == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_2 ) ; } int VAR_3 = VAR_2 . METHOD_2 ( start ) . METHOD_3 ( ) ; int VAR_4 = VAR_2 . METHOD_4 ( VAR_1 ) . METHOD_3 ( ) ; return ( VAR_4 - VAR_3 ) <= ( VAR_5 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , ( ( VAR_3 ) - 1 ) ) ; java.lang.String VAR_4 = STRING_1 + ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ; TYPE_1 VAR_5 = METHOD_5 ( VAR_4 , VAR_4 , VAR_2 . METHOD_4 ( ) , null ) ; return VAR_5 ; } 
protected boolean METHOD_1 ( int VAR_1 ) { java.lang.String [ ] VAR_2 = mContext . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; for ( java.lang.String name : VAR_2 ) { try { TYPE_1 VAR_3 = mContext . METHOD_2 ( ) . METHOD_4 ( name , 0 ) ; if ( ( ( VAR_4 . flags ) & ( VAR_5 ) ) != 0 ) { return true ; } } catch ( TYPE_2 e ) { return false ; } } return false ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_2 ( ) . length ) > 0 ) ) ; for ( TYPE_2 target : VAR_1 . METHOD_2 ( ) ) { if ( ! ( METHOD_1 ( target ) ) ) { continue ; } TYPE_3 status = new TYPE_4 ( target ) . run ( new TYPE_5 ( ) ) ; if ( ( status . METHOD_3 ( ) ) != ( VAR_2 ) ) { fail ( STRING_2 ) ; } } } 
public boolean METHOD_1 ( TYPE_1 pkg ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( pkg ) ) == ( VAR_2 ) ) ) { return ( VAR_1 . METHOD_3 ( ) ) == ( pkg . METHOD_3 ( ) ) ; } return false ; } 
public void METHOD_1 ( java.io.File from , java.io.File to , java.util.Map < java.lang.String , java.lang.String > VAR_1 ) throws TYPE_1 , java.io.IOException , TYPE_2 { java.lang.String [ ] VAR_2 = new java.lang.String [ ] { VAR_3 , STRING_1 , STRING_2 , from . METHOD_2 ( ) , STRING_3 , to . METHOD_2 ( ) } ; VAR_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public java.lang.Object [ ] METHOD_1 ( ) { java.lang.Object [ ] a = c . METHOD_1 ( ) ; for ( int i = 0 ; i < ( a . length ) ; i ++ ) a [ i ] = new TYPE_1 < > ( ( ( TYPE_2 < TYPE_3 , TYPE_4 > ) ( a [ i ] ) ) ) ; return a ; } 
public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , false , false , this , VAR_1 , null ) ; } 
void METHOD_1 ( ) { for ( int i = ( VAR_1 . size ( ) ) - 1 ; i >= 0 ; i -- ) { android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) ) ) ) ; } } 
public void METHOD_1 ( java.lang.String line , int options ) throws java.lang.Exception { java.lang.String [ ] VAR_1 = new java.lang.String [ 5 ] ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 . METHOD_2 ( line , CHAR_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( VAR_1 , line , options ) ; } 
public void log ( java.lang.Throwable VAR_1 , java.lang.String format , java.lang.Object ... args ) { if ( VAR_1 != null ) { VAR_1 . METHOD_1 ( ) ; } java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; if ( format != null ) { sb.append ( java.lang.String.format ( format , args ) ) ; } if ( VAR_1 != null ) { sb.append ( VAR_1 . toString ( ) ) ; } VAR_2 . println ( sb ) ; if ( VAR_1 != null ) { fail ( VAR_1 . toString ( ) ) ; } } 
android.bluetooth.BluetoothDevice [ ] METHOD_1 ( ) { android.bluetooth.BluetoothDevice [ ] VAR_1 = new android.bluetooth.BluetoothDevice [ 0 ] ; synchronized ( VAR_2 ) { if ( VAR_3 . METHOD_2 ( ) ) return new android.bluetooth.BluetoothDevice [ 0 ] ; try { VAR_1 = VAR_3 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( ( STRING_1 + ( VAR_1 . length ) ) ) ; return VAR_1 ; } catch ( TYPE_1 VAR_4 ) { METHOD_5 ( STRING_2 ) ; return new android.bluetooth.BluetoothDevice [ 0 ] ; } } } 
public void METHOD_1 ( android.content.Intent VAR_1 , android.os.Bundle VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 VAR_3 = VAR_1 . METHOD_3 ( VAR_4 ) ; if ( VAR_3 != null ) { TYPE_2 . METHOD_4 ( VAR_3 ) ; } return ; } try { TYPE_2 . METHOD_5 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
private static TYPE_1 . List < TYPE_2 > METHOD_1 ( TYPE_1 . List < TYPE_3 > VAR_1 ) { TYPE_1 . List < TYPE_2 > VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( TYPE_3 VAR_3 : VAR_1 ) { VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_3 ) ) ; } return VAR_2 ; } 
public TYPE_1 METHOD_1 ( ) { try { TYPE_2 service = METHOD_2 ( ) ; return service . METHOD_3 ( METHOD_4 ( ) ) ; } catch ( android.os.RemoteException ex ) { ex . METHOD_5 ( ) ; } catch ( java.lang.NullPointerException ex ) { throw new TYPE_3 ( STRING_1 ) ; } return null ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { android.util.Log . i ( VAR_3 . TAG , STRING_1 ) ; } if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ) { VAR_5 . set ( true ) ; } else { VAR_6 . set ( true ) ; } return false ; } 
public int METHOD_1 ( TYPE_1 type ) { if ( type == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 item = VAR_1 . get ( type ) ; if ( item == null ) { throw new java.lang.IllegalArgumentException ( ( STRING_2 + type ) ) ; } return item . METHOD_3 ( ) ; } 
public static void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_4 ( TYPE_2 . METHOD_5 ( STRING_1 ) ) ; VAR_2 . METHOD_6 ( TYPE_3 . getName ( ) , STRING_2 ) ; VAR_3 = new TYPE_4 ( ) ; VAR_4 . session = TYPE_2 . METHOD_7 ( VAR_2 , VAR_3 ) ; VAR_5 = VAR_6 . METHOD_8 ( ) ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 , int w , int h , byte [ ] data ) { mRS . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , w , h ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , data . length ) ; } 
public void METHOD_1 ( final long value ) { if ( ( value == INT_1 ) || ( value == INT_2 ) ) { VAR_1 . METHOD_2 ( ( ( VAR_2 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_1 . METHOD_3 ( new TYPE_1 ( value ) ) ; } } 
synchronized boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , byte type , byte id , byte [ ] data ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + device ) + STRING_2 ) + type ) + STRING_3 ) + id ) ) ; if ( ! ( METHOD_2 ( device ) ) ) { return false ; } return METHOD_3 ( type , id , data ) ; } 
public boolean METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; boolean VAR_3 = false ; if ( METHOD_3 ( VAR_2 ) ) { java.lang.String VAR_4 = VAR_5 . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( VAR_4 , VAR_6 ) ; try { VAR_7 = TYPE_2 . METHOD_6 ( VAR_4 , VAR_1 ) ; VAR_3 = true ; } catch ( TYPE_3 e ) { VAR_8 = false ; } } return VAR_3 ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 ) { java.util.ArrayList < TYPE_2 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( com.android.jack.ir.ast.JMethod method : VAR_1 . METHOD_2 ( ) ) { TYPE_3 VAR_3 = method . METHOD_3 ( ) ; if ( VAR_3 instanceof TYPE_4 ) { VAR_2 . METHOD_4 ( ( ( TYPE_4 ) ( VAR_3 ) ) . METHOD_5 ( ) ) ; } } return VAR_2 . METHOD_6 ( ) ; } 
boolean METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String name ) { if ( ( VAR_3 ) < ( TYPE_1 . METHOD_2 ( ) ) ) { return true ; } final int VAR_4 = METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , ( - 1 ) ) ; if ( VAR_4 == ( VAR_6 ) ) { return true ; } android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , ( ( ( name + STRING_1 ) + VAR_2 ) + STRING_2 ) ) ; return false ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int flags , int userId ) { if ( ! ( VAR_3 . METHOD_2 ( userId ) ) ) return ; METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_2 , flags , userId ) ; } 
public void METHOD_1 ( TYPE_1 method , TYPE_2 VAR_1 ) { int VAR_2 = 0 ; for ( TYPE_3 VAR_3 : VAR_1 . METHOD_2 ( ) ) { try { METHOD_3 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( method . METHOD_4 ( ) ) ) , VAR_3 ) ; } catch ( TYPE_4 e ) { throw new java.lang.RuntimeException ( e ) ; } } } 
private void METHOD_1 ( ) { if ( VAR_1 ) { android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ; } int action = VAR_3 ; TYPE_1 c = METHOD_2 ( VAR_4 , VAR_5 , VAR_6 ) ; if ( c != null ) { if ( TYPE_2 . METHOD_3 ( METHOD_4 ( VAR_7 ) , action , 0 ) ) { METHOD_5 ( VAR_8 , action ) ; METHOD_6 ( VAR_9 , VAR_10 ) ; } else { android.util.Log.e ( VAR_2 . TAG , STRING_2 ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . build ( ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , TYPE_3 . METHOD_3 ( null ) ) ; VAR_2 . METHOD_2 ( STRING_2 , VAR_4 , TYPE_3 . METHOD_3 ( VAR_5 ) ) ; VAR_2 . METHOD_2 ( STRING_3 , VAR_6 , TYPE_3 . METHOD_3 ( 0 ) ) ; VAR_2 . METHOD_2 ( STRING_4 , VAR_7 , TYPE_3 . METHOD_3 ( 0 ) ) ; VAR_2 . METHOD_2 ( STRING_5 , VAR_8 , TYPE_3 . METHOD_3 ( true ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final long VAR_1 = 100 ; final long VAR_2 = INT_1 ; VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , true ) ; assertTrue ( VAR_3 . METHOD_3 ( ) ) ; assertTrue ( VAR_3 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_4 , VAR_3 . METHOD_6 ( ) ) ; METHOD_5 ( VAR_4 , VAR_3 . METHOD_7 ( ) ) ; assertEquals ( VAR_1 , VAR_3 . METHOD_8 ( ) ) ; assertEquals ( VAR_2 , VAR_3 . size ( ) ) ; } 
public static int METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( VAR_2 ) { ( VAR_3 ) ++ ; synchronized ( VAR_4 ) { VAR_4 . METHOD_2 ( ) ; } VAR_5 = null ; for ( TYPE_1 p : VAR_1 ) { TYPE_2 . METHOD_3 ( p ) ; } VAR_2 = false ; } return VAR_3 ; } } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) || ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; return ; } VAR_3 . METHOD_4 ( context . METHOD_5 ( VAR_6 , VAR_2 ) ) ; VAR_3 . METHOD_3 ( VAR_7 ) ; if ( VAR_8 ) { VAR_5 . METHOD_3 ( VAR_7 ) ; } } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; if ( VAR_3 . get ( VAR_2 ) . METHOD_5 ( ) ) { METHOD_6 ( VAR_4 ) ; } else { METHOD_6 ( VAR_5 ) ; } } 
public TYPE_1 METHOD_1 ( int type , java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , int VAR_4 ) { if ( ! ( TYPE_3 . METHOD_2 ( VAR_5 ) ) ) { android.util.Log.w ( TYPE_4 . TAG , STRING_1 ) ; return null ; } TYPE_4 service = METHOD_3 ( ) ; if ( service == null ) return null ; return service . METHOD_1 ( type , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } 
public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } } 
public void METHOD_1 ( TYPE_1 e ) { java.lang.Object VAR_1 = ( ( TYPE_2 ) ( e . item ) ) . METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_3 ) { VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) , null ) ; } else if ( VAR_1 instanceof TYPE_4 ) { VAR_2 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_4 ( ) , ( ( TYPE_4 ) ( VAR_1 ) ) ) ; } } 
public void METHOD_1 ( long VAR_1 , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) { ( VAR_3 ) -- ; if ( ( VAR_3 ) > 0 ) { return ; } METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( ) , VAR_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 < java.lang.String , TYPE_4 > VAR_2 = VAR_1 . METHOD_3 ( ) ; java.util.List < TYPE_4 > values = VAR_2 . get ( STRING_1 ) ; assertEquals ( 2 , values . size ( ) ) ; TYPE_4 VAR_3 = values . get ( 1 ) ; assertNotNull ( VAR_3 . METHOD_4 ( ) ) ; } 
public boolean METHOD_1 ( ) { METHOD_2 ( ) ; android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + ( VAR_1 ) ) ) ; synchronized ( VAR_2 ) { if ( METHOD_3 ( ) ) { VAR_1 = TYPE_1 . METHOD_4 ( ) ; VAR_3 = null ; if ( TYPE_1 . METHOD_5 ( VAR_4 , VAR_1 ) ) { return true ; } } return false ; } } 
public final TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_3 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_4 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_4 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_4 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 ) ; TYPE_4 VAR_3 = TYPE_4 . from ( VAR_1 . METHOD_3 ( ) ) ; TYPE_5 VAR_4 = VAR_3 . METHOD_4 ( VAR_5 , VAR_1 , false ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_4 , VAR_7 , this ) ; VAR_8 . METHOD_5 ( VAR_6 ) ; return VAR_6 ; } 
private boolean METHOD_1 ( java.lang.String name ) { assert ( name . METHOD_2 ( CHAR_1 ) ) == ( - 1 ) ; if ( name . METHOD_3 ( STRING_1 ) ) { return true ; } return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_4 ( name ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.io.File VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = VAR_3 . METHOD_5 ( ) . get ( STRING_2 ) ; assertEquals ( 1 , VAR_4 . size ( ) ) ; assertTrue ( VAR_4 . get ( 0 ) . METHOD_6 ( ) ) ; METHOD_7 ( VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , int format , TYPE_3 VAR_5 , TYPE_3 VAR_6 , boolean VAR_7 , TYPE_4 VAR_8 , TYPE_5 VAR_9 , TYPE_6 VAR_10 , java.lang.String VAR_11 , int VAR_12 , boolean VAR_13 , int VAR_14 ) { TYPE_7 . e ( VAR_15 . TAG , STRING_1 ) ; return null ; } 
public boolean METHOD_1 ( java.lang.String packageName ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( ! ( VAR_1 ) ) { return false ; } TYPE_2 p ; synchronized ( VAR_2 ) { p = VAR_2 . get ( packageName ) ; if ( ( p == null ) || ( VAR_3 ) ) { return false ; } } synchronized ( VAR_4 ) { return ( METHOD_3 ( p , false , false ) ) == ( VAR_5 ) ; } } 
private void METHOD_1 ( TYPE_1 out ) { if ( out . METHOD_2 ( ) ) { out . METHOD_3 ( ( ( ( out . METHOD_3 ( ) ) + ( data [ VAR_1 ] ) ) - ( out . METHOD_4 ( ) ) ) ) ; } else { out . METHOD_5 ( output , 0 , data [ VAR_1 ] ) ; } output = null ; } 
private static TYPE_1 METHOD_1 ( int [ ] VAR_1 , int VAR_2 ) { TYPE_2 [ ] VAR_3 = new TYPE_2 [ VAR_1 . length ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; ++ i ) { VAR_3 [ i ] = TYPE_3 . METHOD_2 ( VAR_1 [ i ] ) ; } return new TYPE_1 ( 0 , 0 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( android.content.Intent VAR_1 , android.os.Bundle VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 VAR_3 = VAR_1 . METHOD_3 ( VAR_4 ) ; if ( VAR_3 != null ) { TYPE_2 . METHOD_4 ( VAR_3 ) ; } return ; } try { METHOD_5 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_3 ) ; assertEquals ( match , result ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 entry ) { org.junit.Assert.assertEquals ( VAR_1 , VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_4 , VAR_5 ) ; org.junit.Assert.assertEquals ( VAR_6 , VAR_7 ) ; org.junit.Assert.assertEquals ( VAR_8 , entry . set ) ; org.junit.Assert.assertEquals ( VAR_9 , VAR_10 ) ; org.junit.Assert.assertEquals ( VAR_11 , entry . uid ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , ( ( VAR_3 ) - 1 ) ) ; java.lang.String VAR_4 = STRING_1 + ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ; TYPE_1 VAR_5 = METHOD_5 ( VAR_4 , VAR_4 , VAR_2 . METHOD_4 ( ) , null ) ; VAR_5 . METHOD_6 ( ) ; return VAR_5 ; } 
static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_4 = VAR_1 . METHOD_3 ( ) ; VAR_5 = VAR_1 . METHOD_4 ( ) ; VAR_6 = VAR_1 . METHOD_5 ( ) ; VAR_7 = VAR_1 . METHOD_6 ( ) ; VAR_8 = VAR_1 . METHOD_7 ( ) ; VAR_9 = VAR_1 . METHOD_8 ( ) ; VAR_10 = VAR_1 . METHOD_9 ( ) ; return VAR_2 ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; java.lang.String line ; while ( ( line = VAR_3 . METHOD_2 ( ) ) != null ) { if ( ( line . METHOD_3 ( STRING_1 ) ) || ( line . METHOD_3 ( STRING_2 ) ) ) return true ; } return false ; } 
protected boolean METHOD_1 ( java.lang.String pkg ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } if ( pkg . equals ( VAR_1 . METHOD_3 ( ) ) ) { return true ; } for ( TYPE_1 project : VAR_1 . METHOD_4 ( ) ) { if ( pkg . equals ( project . METHOD_3 ( ) ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) { assertTrue ( VAR_1 . METHOD_2 ( STRING_1 ) ) ; assertTrue ( VAR_1 . METHOD_2 ( STRING_2 ) ) ; assertTrue ( VAR_1 . METHOD_2 ( STRING_3 ) ) ; assertTrue ( VAR_1 . METHOD_2 ( STRING_4 ) ) ; assertTrue ( VAR_1 . METHOD_2 ( STRING_5 ) ) ; assertFalse ( VAR_1 . METHOD_2 ( STRING_6 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertFalse ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( ) ; assertTrue ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) ) ; VAR_1 = new TYPE_1 ( VAR_2 ) ; assertFalse ( STRING_2 , VAR_1 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( ) ; assertTrue ( STRING_2 , VAR_1 . METHOD_2 ( ) ) ; } 
public TYPE_1 METHOD_1 ( android.content.Intent VAR_1 ) { if ( VAR_2 ) { log ( STRING_1 ) ; } if ( ( ( VAR_3 ) != null ) && ( ( VAR_4 ) == null ) ) { throw new TYPE_2 ( ( STRING_2 + ( VAR_5 ) ) ) ; } return VAR_4 ; } 
public void METHOD_1 ( java.util.Map VAR_1 , java.lang.Object VAR_2 ) throws TYPE_1 { this . VAR_2 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ; this . VAR_3 . METHOD_2 ( VAR_1 ) ; this . VAR_4 . METHOD_2 ( java.lang.Integer . METHOD_5 ( VAR_5 . size ( ) ) ) ; } 
public static java.lang.Object METHOD_1 ( java.lang.Object VAR_1 ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 . METHOD_4 ( ) ) ; TYPE_5 VAR_5 = new TYPE_5 ( VAR_4 ) ; java.lang.Object VAR_6 = VAR_5 . METHOD_5 ( ) ; VAR_7 = VAR_6 ; VAR_5 . METHOD_3 ( ) ; return VAR_6 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { byte [ ] VAR_1 = new byte [ INT_1 ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_1 [ i ] = ( ( byte ) ( i ) ) ; } assertEquals ( new TYPE_1 < java.lang.String > ( TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 ) ) , TYPE_3 . METHOD_3 ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ; int count = VAR_1 . METHOD_5 ( ) ; assertEquals ( 0 , count ) ; assertTrue ( TYPE_2 . METHOD_3 ( ) . METHOD_6 ( ) ) ; } finally { VAR_1 . METHOD_7 ( ) ; assertTrue ( TYPE_2 . METHOD_8 ( ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) . build ( ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; assertTrue ( STRING_1 , VAR_1 . METHOD_4 ( VAR_4 ) ) ; VAR_1 = VAR_2 . METHOD_2 ( STRING_2 ) . build ( ) ; assertFalse ( STRING_1 , VAR_1 . METHOD_4 ( VAR_4 ) ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , boolean value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final boolean VAR_3 = ( v == null ) ? ( ( boolean ) ( m . METHOD_2 ( ) ) ) : ( ( boolean ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 project ) { VAR_1 = null ; VAR_2 = null ; TYPE_2 VAR_3 = project . METHOD_2 ( ) ; VAR_4 = new TYPE_3 < TYPE_4 , java.util.List < TYPE_5 > > ( VAR_5 class ) ; VAR_6 = VAR_7 . METHOD_3 ( VAR_8 , VAR_3 , VAR_9 , VAR_4 ) ; METHOD_4 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 , java.lang.String [ ] args ) { if ( METHOD_2 ( VAR_3 ) ) { return new TYPE_5 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_3 , VAR_2 , args ) ; } else { return null ; } } 
public int METHOD_1 ( int VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_3 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_3 ; return service . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . when ( VAR_2 . METHOD_2 ( org.mockito.Matchers.eq ( VAR_1 ) ) ) . thenReturn ( true ) ; METHOD_3 ( ) ; assertFalse ( VAR_3 . METHOD_4 ( VAR_1 ) ) ; org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) . METHOD_2 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; METHOD_6 ( 4 , false , false ) ; assertTrue ( VAR_3 . METHOD_4 ( VAR_1 ) ) ; org.mockito.Mockito.verify ( VAR_2 ) . METHOD_2 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String > VAR_1 , TYPE_3 < TYPE_4 > VAR_2 , TYPE_5 VAR_3 , java.lang.String VAR_4 , TYPE_6 type , TYPE_7 < java.lang.String > VAR_5 ) throws java.io.IOException , TYPE_8 , TYPE_9 { TYPE_10 VAR_6 = new TYPE_10 ( ) ; TYPE_11 VAR_7 = VAR_6 . METHOD_2 ( VAR_4 ) ; return VAR_7 != null ? new TYPE_1 ( VAR_6 , VAR_3 , VAR_1 , VAR_2 , VAR_7 . METHOD_3 ( ) , type , VAR_5 ) : null ; } 
public static boolean METHOD_1 ( java.io.File VAR_1 , java.io.File VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) return false ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_4 = VAR_2 . METHOD_2 ( ) ; if ( VAR_3 . equals ( VAR_4 ) ) { return true ; } if ( ! ( VAR_3 . METHOD_3 ( STRING_1 ) ) ) { VAR_3 += STRING_1 ; } return VAR_4 . METHOD_4 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) ; assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) ; assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) ; assertTrue ( STRING_4 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_4 ) ) ) ) ; assertTrue ( STRING_5 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_5 ) ) ) ) ; assertTrue ( STRING_6 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_6 ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 , false ) ; org.junit.Assert.assertEquals ( null , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_4 ( false ) ; org.mockito.Mockito.verify ( VAR_3 ) . METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( ) ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = java.io.File . METHOD_2 ( STRING_1 , null ) ; VAR_2 = new java.io.File ( ( ( TYPE_1 . METHOD_3 ( STRING_2 ) ) + STRING_3 ) ) ; if ( ! ( VAR_2 . METHOD_4 ( ) ) ) { VAR_2 . METHOD_5 ( ) ; } VAR_3 = TYPE_1 . METHOD_3 ( STRING_4 ) . equals ( STRING_5 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( true ) ; if ( METHOD_3 ( ) ) { METHOD_4 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 ) ; } } ) ; return ; } VAR_3 . METHOD_5 ( ) . METHOD_1 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( ) ; return this ; } final TYPE_2 VAR_2 = TYPE_3 . METHOD_4 ( VAR_1 , true ) ; if ( VAR_2 == null ) { throw new TYPE_4 ( ( STRING_1 + VAR_1 ) ) ; } METHOD_5 ( VAR_2 ) ; return this ; } 
static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return VAR_2 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( ( ( VAR_5 ) != null ) && ( ( VAR_5 . METHOD_3 ( ) ) == false ) ) { TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_6 , VAR_5 . METHOD_6 ( ) , null , null ) ; } return VAR_2 ; } 
public void METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 , TYPE_1 VAR_3 , TYPE_1 VAR_4 ) throws java.io.IOException { TYPE_2 . d ( ( STRING_1 + VAR_1 ) ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_1 . METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 ) ; VAR_5 . start ( ) ; VAR_6 = VAR_5 ; } 
public void METHOD_1 ( TYPE_1 e ) { TYPE_2 node = ( ( VAR_1 . METHOD_2 ( ) ) != null ) ? VAR_1 . METHOD_2 ( ) : VAR_1 ; node . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_6 ( ) ; VAR_5 = null ; } } 
public final void METHOD_1 ( ) { m . METHOD_2 ( ) ; TYPE_1 s = m . METHOD_3 ( ) ; assertFalse ( s . METHOD_4 ( ) ) ; assertFalse ( s . METHOD_5 ( ) ) ; assertFalse ( s . METHOD_6 ( ) ) ; assertTrue ( s . METHOD_7 ( ) ) ; assertTrue ( s . METHOD_8 ( ) ) ; assertEquals ( ( - 1 ) , s . METHOD_9 ( ) ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( VAR_2 ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_2 ( ) ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_3 ( ) ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_4 ( ) ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_5 ( VAR_4 ) ) ; return sb . toString ( ) ; } 
static java.lang.String format ( java.lang.String VAR_1 , java.lang.Object expected , java.lang.Object VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; if ( VAR_1 != null ) VAR_3 = VAR_1 + STRING_2 ; return ( ( ( ( VAR_3 + STRING_3 ) + expected ) + STRING_4 ) + VAR_2 ) + STRING_5 ; } 
private void METHOD_1 ( byte VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) throws java.lang.Exception { TYPE_2 VAR_4 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_2 ) ; byte [ ] VAR_6 = VAR_4 . METHOD_4 ( VAR_7 ) ; TYPE_2 VAR_8 = TYPE_2 . METHOD_2 ( STRING_2 ) ; VAR_8 . METHOD_3 ( VAR_9 , VAR_3 ) ; byte [ ] VAR_10 = VAR_8 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( VAR_1 , VAR_7 , VAR_10 ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; if ( ! ( METHOD_3 ( s ) ) ) { result = - 1 ; } else { s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; } VAR_1 . METHOD_7 ( ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer VAR_2 ) throws java.io.IOException { TYPE_1 . d ( ( STRING_1 + VAR_1 ) ) ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_1 , VAR_2 . METHOD_2 ( ) ) ; VAR_4 . start ( ) ; VAR_5 = VAR_4 ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; s . METHOD_3 ( 0 , 0 ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_4 ; boolean VAR_5 = false ; int VAR_6 = 1 ; int id = VAR_1 . METHOD_2 ( VAR_7 , VAR_8 , VAR_5 , VAR_6 ) ; return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } 
private static void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_1 . start ( ) ; VAR_2 . start ( ) ; try { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_3 e ) { VAR_3 . println ( STRING_1 ) ; } } 
void test ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_1 ( METHOD_2 ( ) , VAR_2 ) ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ) { status = VAR_4 ; } else { status = VAR_5 ; } METHOD_4 ( ) ; } 
private void METHOD_1 ( int VAR_1 , TYPE_1 node ) { java.lang.String VAR_2 = node . METHOD_2 ( ) ; boolean VAR_3 = ( VAR_2 . METHOD_3 ( CHAR_1 ) ) != ( - 1 ) ; if ( VAR_3 && ( ! ( METHOD_4 ( ) ) ) ) { VAR_4 . append ( VAR_5 ) ; } VAR_4 . append ( STRING_1 ) ; VAR_4 . append ( VAR_2 ) ; VAR_4 . append ( STRING_2 ) ; if ( VAR_3 ) { VAR_4 . append ( VAR_5 ) ; } } 
public void METHOD_1 ( java.lang.Runnable r , TYPE_1 < java.lang.String > VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; Main . METHOD_4 ( r ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; METHOD_5 ( VAR_1 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return ; } VAR_5 [ 0 ] = VAR_2 ; VAR_5 [ 1 ] = 0 ; VAR_5 [ 2 ] = 0 ; VAR_5 [ 3 ] = 0 ; VAR_5 [ 4 ] = VAR_3 ; VAR_5 [ 5 ] = 0 ; VAR_5 [ 6 ] = 0 ; VAR_5 [ 7 ] = 0 ; VAR_5 [ 8 ] = 1 ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , TYPE_1 VAR_6 , TYPE_1 VAR_7 , java.lang.String VAR_8 ) { TYPE_2 VAR_9 = new TYPE_2 ( VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; try { VAR_9 . METHOD_2 ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_1 , VAR_8 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_10 , VAR_2 . METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( INT_1 , VAR_2 . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( VAR_7 , VAR_2 . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( ( ( VAR_7 ) + VAR_1 ) , VAR_2 . METHOD_6 ( ) ) ; } 
private TYPE_1 METHOD_1 ( java.io.File VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . getName ( ) ; TYPE_2 VAR_3 = METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; if ( VAR_3 != null ) { TYPE_3 VAR_4 = METHOD_5 ( VAR_3 ) ; if ( VAR_4 != null ) { TYPE_1 VAR_5 = VAR_4 . METHOD_6 ( VAR_1 . getName ( ) ) ; if ( VAR_5 != null ) { return VAR_5 ; } } } return null ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( element . METHOD_2 ( VAR_1 , VAR_2 ) ) { return ; } if ( ( context . METHOD_3 ( ) . METHOD_4 ( ) ) < 11 ) { return ; } if ( TYPE_3 . equals ( element . METHOD_5 ( VAR_1 , VAR_3 ) ) ) { return ; } java.lang.String VAR_4 = STRING_1 ; context . METHOD_6 ( VAR_5 , element , context . METHOD_7 ( element ) , VAR_4 , null ) ; } 
boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { METHOD_2 ( VAR_1 , STRING_1 ) ; int VAR_2 = VAR_3 . METHOD_3 ( device ) ; if ( ( VAR_2 != ( VAR_4 ) ) && ( VAR_2 != ( VAR_5 ) ) ) { return false ; } VAR_3 . METHOD_4 ( VAR_6 ) ; return true ; } 
public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; TYPE_3 project = METHOD_2 ( ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_3 ( ) ; if ( line != null ) { TYPE_4 . METHOD_4 ( VAR_3 , project , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } } 
private void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , int VAR_2 ) throws java.io.IOException { VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) ; VAR_6 . METHOD_3 ( VAR_7 ) ; VAR_6 . METHOD_4 ( VAR_8 ) ; VAR_6 . METHOD_5 ( ) ; if ( VAR_2 == 0 ) { VAR_6 . METHOD_6 ( ) ; } else { METHOD_7 ( VAR_1 , VAR_2 ) ; } VAR_3 . METHOD_8 ( VAR_4 , ( ( VAR_5 ) + 1 ) ) ; VAR_6 . METHOD_9 ( ) ; } 
public boolean METHOD_1 ( int VAR_1 , int flags , int VAR_2 , int VAR_3 , java.lang.String VAR_4 ) { try { if ( ( VAR_5 ) != null ) { return VAR_5 . METHOD_1 ( VAR_1 , flags , VAR_2 , VAR_3 , VAR_4 ) ; } } catch ( TYPE_1 e ) { } METHOD_2 ( ) ; synchronized ( VAR_6 ) { if ( METHOD_3 ( ) ) { return TYPE_2 . METHOD_4 ( VAR_7 , VAR_1 , flags , VAR_2 , VAR_3 , VAR_4 ) ; } else { return false ; } } } 
final void METHOD_1 ( ) throws java.io.IOException { if ( ( ( ( pos ) != ( VAR_1 ) ) || ( ( METHOD_2 ( ) ) != ( - 1 ) ) ) && ( ( VAR_2 [ pos ] ) == CHAR_1 ) ) { ( pos ) ++ ; } } 
public void METHOD_1 ( ) { TYPE_1 telephony = METHOD_2 ( ) ; if ( telephony == null ) { TYPE_2 . e ( VAR_1 . TAG , STRING_1 ) ; throw new java.lang.RuntimeException ( STRING_1 ) ; } try { telephony . METHOD_3 ( VAR_2 , VAR_3 ) ; } catch ( android.os.RemoteException ex ) { TYPE_2 . e ( VAR_1 . TAG , STRING_2 , ex ) ; ex . METHOD_4 ( ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { java.util.Map < TYPE_2 , TYPE_3 > VAR_1 = TYPE_4 . METHOD_2 ( project ) ; for ( TYPE_2 VAR_2 : new java.util.ArrayList < TYPE_2 > ( VAR_1 . METHOD_3 ( ) ) ) { if ( METHOD_4 ( VAR_2 ) ) { VAR_1 . METHOD_5 ( VAR_2 ) ; TYPE_5 . METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_2 ) ; } } } 
private void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ; android.content.Intent VAR_3 = new android.content.Intent ( VAR_4 ) ; TYPE_1 VAR_5 = TYPE_1 . METHOD_2 ( this , 0 , VAR_3 , 0 ) ; TYPE_2 VAR_6 = ( ( TYPE_2 ) ( this . METHOD_3 ( VAR_7 ) ) ) ; VAR_5 . METHOD_4 ( ) ; VAR_6 . METHOD_4 ( VAR_5 ) ; VAR_8 = false ; } 
public void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_3 , VAR_4 , ( - 1 ) ) ; METHOD_5 ( ) . METHOD_6 ( false ) ; VAR_5 = new TYPE_1 ( this , METHOD_7 ( ) ) ; TYPE_2 VAR_6 = ( ( TYPE_2 ) ( METHOD_8 ( VAR_7 ) ) ) ; VAR_6 . METHOD_9 ( VAR_5 ) ; VAR_8 = 0 ; VAR_9 = new TYPE_3 ( ) ; } 
public void run ( ) { try { TYPE_1 . METHOD_1 ( project , VAR_1 , VAR_2 , callback , false , true , false ) ; } catch ( java.lang.IllegalArgumentException e ) { VAR_3 . set ( new TYPE_2 ( e.getMessage ( ) , TYPE_3 . METHOD_2 ( STRING_1 , VAR_4 ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_1 ) ; return ; } assertTrue ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; METHOD_5 ( VAR_2 , INT_1 , INT_2 , 1 ) ; boolean VAR_3 = TYPE_2 . METHOD_6 ( VAR_1 ) ; if ( ! VAR_3 ) { TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_2 ) ; return ; } METHOD_5 ( VAR_2 , INT_1 , INT_2 , 4 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 in = null ; try { in = new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ; return in . METHOD_2 ( ) . METHOD_3 ( ) ; } finally { if ( in != null ) { in . METHOD_4 ( ) ; } } } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( method ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_5 ( method ) ; VAR_2 . METHOD_7 ( ) ; } 
private boolean METHOD_1 ( TYPE_1 method ) { if ( ( method . METHOD_2 ( ) . METHOD_3 ( ) ) > 0 ) { return false ; } TYPE_2 VAR_1 = method . METHOD_4 ( ) ; if ( ! ( VAR_1 . METHOD_5 ( VAR_2 ) ) ) { return false ; } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { android.util.Log.v ( TAG , STRING_1 ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 device = TYPE_2 . METHOD_3 ( VAR_1 ) ; java.lang.String VAR_3 = device . METHOD_4 ( ( STRING_2 + ( VAR_4 ) ) ) ; java.lang.String [ ] VAR_5 = VAR_3 . METHOD_5 ( STRING_3 ) ; for ( java.lang.String VAR_6 : VAR_5 ) { if ( VAR_6 . METHOD_6 ( STRING_4 ) ) { device . METHOD_4 ( java.lang.String.format ( STRING_5 , VAR_4 , VAR_6 ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new java.io.File ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) , STRING_1 ) ; if ( VAR_1 . METHOD_4 ( ) ) { TYPE_2 . METHOD_5 ( VAR_1 ) ; } VAR_2 = new TYPE_3 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { VAR_1 . println ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; if ( ! ( METHOD_3 ( ) ) ) { VAR_2 . METHOD_4 ( VAR_4 ) ; return ; } java.lang.String VAR_5 = STRING_2 ; TYPE_1 VAR_6 = METHOD_5 ( VAR_5 , true , false ) ; METHOD_6 ( VAR_6 ) ; VAR_1 . println ( STRING_3 ) ; } 
public boolean METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_3 ) ; ++ i ) { assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) ; } try { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; } catch ( TYPE_3 VAR_4 ) { } } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_3 > VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; for ( TYPE_3 VAR_4 : VAR_2 ) { if ( ( ( VAR_4 . METHOD_3 ( ) ) == 1 ) && ( VAR_4 . METHOD_4 ( 0 ) . getName ( ) . equals ( VAR_5 ) ) ) { return true ; } } return false ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { this . VAR_1 = VAR_1 ; if ( VAR_2 != null ) { this . VAR_2 = VAR_2 ; } TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_4 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) ) ; if ( VAR_3 != null ) { try { METHOD_1 ( VAR_3 , VAR_2 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( STRING_1 ) ; } } else { throw new TYPE_5 ( STRING_2 ) ; } } 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_3 ) , STRING_4 ) ; return VAR_2 ; } 
private void METHOD_1 ( TYPE_1 config , int status ) { if ( VAR_1 ) { log ( ( ( ( STRING_1 + config ) + STRING_2 ) + status ) ) ; } TYPE_2 callback = VAR_2 . get ( config ) . VAR_3 ; if ( callback == null ) { android.util.Log.e ( VAR_4 . TAG , STRING_3 ) ; } try { callback . METHOD_2 ( config , status ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_4 . TAG , ( STRING_4 + e ) ) ; } } 
public static int METHOD_1 ( TYPE_1 provider , int VAR_1 ) { int size = VAR_2 . size ( ) ; if ( ( VAR_1 < 1 ) || ( VAR_1 > size ) ) { VAR_1 = size + 1 ; } VAR_2 . METHOD_2 ( ( VAR_1 - 1 ) , provider ) ; VAR_3 . METHOD_3 ( provider . getName ( ) , provider ) ; TYPE_2 . METHOD_4 ( ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { if ( ! ( METHOD_2 ( true ) ) ) { VAR_1 = VAR_2 ; transitionTo ( VAR_3 ) ; return ; } try { VAR_4 . METHOD_3 ( VAR_5 ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( VAR_6 . TAG , ( STRING_1 + ( e.toString ( ) ) ) ) ; VAR_1 = VAR_7 ; transitionTo ( VAR_3 ) ; return ; } if ( ! ( VAR_8 . start ( ) ) ) { android.util.Log.e ( VAR_6 . TAG , STRING_2 ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 request ) { TYPE_4 VAR_2 = VAR_1 . METHOD_2 ( ) ; return new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_2 , VAR_1 , new TYPE_7 ( VAR_2 ) ) , METHOD_3 ( VAR_2 , request ) , null ) ; } 
public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { TYPE_2 result = this ; while ( ! ( VAR_1 . METHOD_2 ( result . METHOD_3 ( ) ) ) ) { result = result . METHOD_1 ( ) ; if ( result == null ) { throw new TYPE_3 ( ) ; } } return ( ( TYPE_1 ) ( result ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Throwable { TYPE_1 provider = TYPE_1 . provider ( ) ; TYPE_2 VAR_1 = provider . METHOD_2 ( 2 , TYPE_3 . METHOD_3 ( ) ) ; TYPE_4 VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( new TYPE_5 ( 0 ) ) ; assertNotNull ( VAR_2 . METHOD_6 ( ) ) ; VAR_2 . METHOD_8 ( ) ; } 
private void METHOD_1 ( int [ ] VAR_1 ) { android.util.Log.d ( VAR_2 , ( STRING_1 + ( ( VAR_1 [ 0 ] ) != 0 ? STRING_2 : STRING_3 ) ) ) ; this . VAR_3 . METHOD_2 ( ( ( VAR_1 [ 0 ] ) != 0 ) ) ; } 
protected static final TYPE_1 METHOD_1 ( int obj ) { final TYPE_1 [ ] VAR_1 = VAR_2 ; synchronized ( VAR_1 ) { TYPE_1 p ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { p = VAR_1 [ i ] ; if ( p != null ) { VAR_1 [ i ] = null ; if ( VAR_4 ) { VAR_5 = new java.lang.RuntimeException ( ) ; } p . METHOD_2 ( obj ) ; return p ; } } } return new TYPE_1 ( obj ) ; } 
public boolean METHOD_1 ( final TYPE_1 event ) { VAR_1 . METHOD_2 ( false ) ; if ( METHOD_3 ( ) ) { boolean ret = METHOD_4 ( new TYPE_2 < TYPE_3 > ( ) { public TYPE_3 call ( ) { return METHOD_1 ( event ) ; } } ) ; return ret ; } return VAR_2 . METHOD_5 ( ) . METHOD_1 ( event ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , short value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final short VAR_3 = ( v == null ) ? ( ( short ) ( m . METHOD_2 ( ) ) ) : ( ( short ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Throwable { android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ; TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_2 = METHOD_2 ( ) ; if ( ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ) { METHOD_3 ( INT_1 , INT_2 , false , false ) ; } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } } 
private static final long METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { return VAR_1 . time ; } TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) ; VAR_3 . METHOD_3 ( true ) ; return VAR_3 . METHOD_4 ( ) ; } 
protected void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 location , java.lang.String VAR_3 , java.lang.Object data ) { if ( VAR_1 == ( VAR_4 ) ) { assertNotNull ( VAR_3 , TYPE_5 . METHOD_2 ( VAR_1 , VAR_3 , VAR_5 ) ) ; assertNotNull ( VAR_3 , TYPE_5 . METHOD_3 ( VAR_1 , VAR_3 , VAR_5 ) ) ; } } 
public int METHOD_1 ( int VAR_1 ) { int VAR_2 ; if ( VAR_1 == ( VAR_3 ) ) { VAR_2 = VAR_4 ; } else { VAR_2 = VAR_5 ; if ( VAR_1 == ( VAR_6 ) ) { VAR_2 -= VAR_7 ; } else if ( VAR_1 != ( VAR_8 ) ) { VAR_2 -= VAR_9 ; } } return VAR_2 ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { int pos = METHOD_2 ( true ) ; if ( pos >= 0 ) { VAR_2 = VAR_3 ; if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + pos ) ) ; VAR_5 . METHOD_3 ( pos , VAR_1 ) ; METHOD_4 ( ( pos + 1 ) ) ; return ; } VAR_2 = null ; METHOD_5 ( VAR_1 , true ) ; METHOD_4 ( pos ) ; } 
private TYPE_1 [ ] METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_2 VAR_2 : VAR_3 ) { TYPE_3 VAR_4 = VAR_2 . METHOD_2 ( ) ; TYPE_1 e = METHOD_3 ( VAR_4 ) ; VAR_1 . METHOD_4 ( e ) ; } return VAR_1 . METHOD_5 ( new TYPE_1 [ VAR_1 . size ( ) ] ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 info = new TYPE_2 ( VAR_1 , VAR_2 ) ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; VAR_9 = VAR_10 ; int VAR_11 = VAR_12 ; VAR_13 = VAR_14 . METHOD_2 ( ) . METHOD_3 ( VAR_11 ) ; VAR_15 = TYPE_3 . METHOD_4 ( VAR_13 , VAR_14 . METHOD_2 ( ) . METHOD_3 ( VAR_16 ) ) ; VAR_17 = TYPE_3 . METHOD_4 ( VAR_13 , VAR_14 . METHOD_2 ( ) . METHOD_3 ( VAR_18 ) ) ; METHOD_5 ( VAR_19 ) ; } 
private < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_2 node , java.lang.Class < TYPE_1 > VAR_1 ) { for ( node = node . METHOD_2 ( ) ; node != null ; node = node . METHOD_2 ( ) ) { if ( node . METHOD_3 ( ) . equals ( VAR_1 ) ) { return ( ( TYPE_1 ) ( node ) ) ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) ; TYPE_3 p = TYPE_3 . METHOD_2 ( VAR_1 , new TYPE_4 ( ) { void METHOD_5 ( TYPE_5 VAR_2 , TYPE_5 server ) { server . METHOD_6 ( true ) ; } } ) ; METHOD_7 ( p ) ; VAR_1 . METHOD_8 ( ) ; } 
void test ( ) { METHOD_1 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_1 ) ) ) ; java.util.List < java.lang.String > result = new java.util.ArrayList ( TYPE_1 . METHOD_2 ( ) . VAR_2 ) ; if ( ( ( result . size ( ) ) > 0 ) && ( result . METHOD_3 ( VAR_3 ) ) ) { status = VAR_4 ; } else { METHOD_4 ( ) ; status = VAR_5 ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { java.lang.String VAR_5 = VAR_3 . METHOD_2 ( ) ; boolean VAR_6 = VAR_1 . equals ( VAR_5 ) ; if ( VAR_6 ) { TYPE_2 . log ( ( VAR_1 + STRING_1 ) ) ; } if ( ( VAR_5 == null ) || VAR_6 ) { if ( VAR_2 ) { VAR_3 . METHOD_3 ( ) ; } VAR_3 . METHOD_4 ( ) ; } } } 
private void METHOD_1 ( TYPE_1 device , java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { TYPE_2 VAR_3 = device . METHOD_2 ( new TYPE_3 ( ) . METHOD_3 ( STRING_1 ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; TYPE_2 VAR_4 = device . METHOD_2 ( new TYPE_3 ( ) . METHOD_5 ( VAR_2 ) ) ; VAR_4 . METHOD_6 ( INT_1 ) ; TYPE_4 . assertTrue ( VAR_4 . METHOD_7 ( ) ) ; METHOD_8 ( device , VAR_1 . length ( ) ) ; } 
private void METHOD_1 ( ) { VAR_1 = false ; boolean VAR_2 = true ; for ( TYPE_1 VAR_3 : VAR_4 . METHOD_2 ( ) ) { VAR_2 &= VAR_3 . METHOD_3 ( true ) ; } if ( VAR_2 ) { return ; } if ( ! ( VAR_5 . METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_6 . METHOD_6 ( ) , VAR_6 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) { return ; } VAR_1 = ! ( VAR_7 . METHOD_9 ( ) ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.lang.Object [ ] options = new java.lang.Object [ ] { VAR_3 } ; TYPE_1 . METHOD_2 ( null , VAR_1 , VAR_2 , VAR_4 , VAR_5 , null , options , options [ 0 ] ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( INT_1 ) . build ( ) ; java.lang.String VAR_2 = STRING_1 ; VAR_3 . METHOD_3 ( VAR_4 , VAR_2 , VAR_5 , VAR_1 ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( VAR_1 ) ) ; } 
public final void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_3 , VAR_2 , 10 , 12 , INT_1 , INT_2 ) ; TYPE_4 VAR_4 = TYPE_4 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ; TYPE_5 VAR_5 = m . METHOD_2 ( VAR_4 ) ; TYPE_5 VAR_6 = m . METHOD_2 ( VAR_4 ) ; METHOD_4 ( VAR_6 , VAR_5 ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException { java.io.File VAR_4 = new java.io.File ( VAR_5 , VAR_6 ) ; VAR_4 = new java.io.File ( VAR_4 , VAR_1 ) ; if ( VAR_2 != null ) { VAR_4 = new java.io.File ( VAR_4 , VAR_2 ) ; } VAR_4 = new java.io.File ( VAR_4 , VAR_3 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( int i ) throws java.lang.RuntimeException { if ( ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) { throw new java.lang.RuntimeException ( ) ; } if ( i > ( ( VAR_1 ) - 1 ) ) { return ; } value [ ( i > > > 5 ) ] ^= VAR_2 [ ( i & INT_1 ) ] ; } 
private void METHOD_1 ( ) { TYPE_1 . i ( STRING_1 , STRING_2 , VAR_1 . size ( ) , VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { java.lang.String VAR_3 = STRING_3 ; for ( int id : VAR_1 . METHOD_3 ( ) ) { VAR_3 = ( VAR_3 + id ) + STRING_4 ; } TYPE_1 . i ( STRING_1 , ( STRING_5 + VAR_3 ) ) ; } } 
protected boolean METHOD_1 ( java.util.List VAR_1 ) { if ( ( VAR_1 . size ( ) ) > INT_1 ) return false ; TYPE_1 result = new TYPE_1 ( ) ; for ( int i = 0 ; i < 10 ; ++ i ) { result . append ( ( ( char ) ( VAR_2 . METHOD_2 ( INT_2 ) ) ) ) ; } VAR_1 . METHOD_3 ( result . toString ( ) ) ; return true ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int w , int h , int d , byte [ ] data ) { mRS . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , data . length ) ; } 
public java.lang.Object METHOD_1 ( ) { if ( ! ( VAR_1 ) ) METHOD_2 ( ) ; try { TYPE_1 result = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; VAR_2 = VAR_3 . METHOD_1 ( ) ; result . METHOD_3 ( ) ; return result ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( ) ; } } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { if ( context . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 ) ) { VAR_3 = true ; return ; } if ( ( VAR_4 ) == null ) { VAR_4 = new java.util.ArrayList < TYPE_2 > ( ) ; } VAR_4 . METHOD_4 ( VAR_1 ) ; } 
public java.lang.String METHOD_1 ( ) { try { int VAR_1 = VAR_2 . METHOD_1 ( VAR_3 , 0 , VAR_4 ) ; if ( VAR_1 < 0 ) { return null ; } return new java.lang.String ( VAR_3 , 0 , VAR_1 ) ; } catch ( java.io.IOException e ) { TYPE_1 . w ( this , STRING_1 , e ) ; } return null ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = true ; METHOD_2 ( true ) ; METHOD_3 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 , VAR_5 , null , VAR_6 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_2 ) ; METHOD_6 ( ) ; } 
public void METHOD_1 ( TYPE_1 e , java.lang.Object VAR_1 , boolean VAR_2 , TYPE_2 callback ) { TYPE_3 event = METHOD_2 ( VAR_1 , callback ) ; int id ; if ( e instanceof TYPE_4 ) { id = TYPE_5 . METHOD_3 ( VAR_3 , ( ( TYPE_4 ) ( e ) ) , VAR_2 ) ; } else { id = TYPE_5 . METHOD_4 ( VAR_3 , ( ( TYPE_6 ) ( e ) ) ) ; } VAR_4 . METHOD_5 ( id , event ) ; } 
private void run ( java.lang.String VAR_1 , java.io.File [ ] VAR_2 ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_3 = TYPE_2 . METHOD_1 ( null ) ; for ( TYPE_1 VAR_4 : VAR_3 ) { org.junit.Assert.assertEquals ( 0 , VAR_4 . METHOD_2 ( new java.lang.String [ 0 ] , VAR_5 , new java.lang.String [ ] { VAR_1 } , VAR_2 ) ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( this ) ) { if ( VAR_1 . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( this ) ; VAR_2 . METHOD_5 ( this ) ; VAR_2 . METHOD_6 ( this ) ; } VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( VAR_4 ) ; VAR_5 . METHOD_1 ( VAR_1 ) ; } VAR_1 . METHOD_8 ( this ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_3 VAR_2 = context . METHOD_2 ( VAR_3 class ) ; for ( TYPE_1 VAR_4 : VAR_2 . METHOD_3 ( ) ) { TYPE_4 VAR_5 = VAR_2 . METHOD_4 ( VAR_4 ) ; if ( ( VAR_5 . METHOD_5 ( VAR_6 ) ) && ( ! ( VAR_4 . equals ( VAR_1 ) ) ) ) { return VAR_4 ; } } return null ; } 
public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 ) ; fail ( ( STRING_2 + STRING_3 ) ) ; } catch ( TYPE_2 e ) { assertEquals ( STRING_4 , e . METHOD_2 ( ) . getName ( ) ) ; assertEquals ( 0 , e . METHOD_3 ( ) ) ; } } 
public void METHOD_1 ( ) { assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( VAR_3 ) ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) ) ; assertEquals ( null , VAR_2 . METHOD_3 ( VAR_3 , VAR_5 ) ) ; assertNotNull ( VAR_2 . METHOD_3 ( VAR_6 , VAR_4 ) ) ; assertNotNull ( VAR_2 . METHOD_3 ( VAR_6 , VAR_5 ) ) ; METHOD_4 ( VAR_2 . METHOD_3 ( VAR_7 , VAR_5 ) ) ; assertEquals ( null , VAR_2 . METHOD_2 ( VAR_8 ) ) ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int w , int h , int d , float [ ] data ) { mRS . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , ( ( data . length ) * 4 ) ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , TYPE_1 call ) { TYPE_2 service = METHOD_2 ( ) ; if ( service == null ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } return service . METHOD_1 ( device , call . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 method , TYPE_3 VAR_2 , TYPE_4 location , java.lang.String VAR_3 , java.lang.Object data ) { if ( ( method != null ) && ( VAR_4 . METHOD_2 ( VAR_1 , VAR_5 , method , VAR_2 ) ) ) { return ; } METHOD_1 ( VAR_1 , location , VAR_3 , data ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 type ; try { type = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } catch ( java.lang.NullPointerException ex ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_4 ( ) ; if ( ( VAR_2 . get ( type ) ) != null ) { throw new java.lang.IllegalArgumentException ( ( STRING_2 + type ) ) ; } VAR_2 . METHOD_5 ( type , VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 ; synchronized ( this ) { VAR_1 = VAR_2 ; VAR_2 = null ; } if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } VAR_1 . METHOD_2 ( ) ; while ( true ) { try { VAR_1 . METHOD_3 ( ) ; return ; } catch ( TYPE_3 VAR_3 ) { } } } 
public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 < ? extends TYPE_1 > VAR_1 ) { TYPE_4 . METHOD_2 ( VAR_1 ) ; return VAR_1 instanceof TYPE_5 ? TYPE_2 . METHOD_1 ( TYPE_6 . METHOD_3 ( VAR_1 ) ) : TYPE_2 . METHOD_1 ( VAR_1 . METHOD_4 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; java.lang.String VAR_3 = TYPE_4 . METHOD_4 ( VAR_1 ) ; TYPE_5 VAR_4 = new TYPE_5 ( new TYPE_6 ( VAR_3 ) ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_2 , new TYPE_6 ( VAR_1 . METHOD_5 ( ) ) , VAR_4 ) ; return VAR_5 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; java.io.File f = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( f . METHOD_5 ( ) ) { TYPE_2 VAR_3 = METHOD_6 ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_2 ( VAR_1 ) ; METHOD_7 ( VAR_3 ) ; } METHOD_8 ( VAR_3 , f ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try { TYPE_1 VAR_3 = new TYPE_1 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( STRING_1 ) ; TYPE_2 VAR_4 = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , VAR_3 ) ; return VAR_4 . METHOD_7 ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device , VAR_1 , null ) ; } 
public void METHOD_1 ( java.lang.String id , int VAR_1 ) throws java.lang.Exception { VAR_2 . get ( id ) . state = VAR_3 ; VAR_2 . get ( id ) . VAR_1 = new TYPE_1 ( VAR_1 ) ; for ( TYPE_2 a : VAR_4 ) { a . METHOD_2 ( id , VAR_2 . get ( id ) . VAR_1 ) ; } } 
private static TYPE_1 METHOD_1 ( java.io.File VAR_1 , java.util.Set < TYPE_1 > VAR_2 ) { TYPE_1 VAR_3 = null ; for ( TYPE_1 project : VAR_2 ) { java.io.File VAR_4 = project . METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( VAR_4 , VAR_1 ) ) { VAR_3 = project ; break ; } } return VAR_3 ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; int VAR_2 = ( VAR_1 . METHOD_3 ( new TYPE_2 ( time ) ) ) ? VAR_1 . METHOD_4 ( ) : 0 ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; VAR_4 [ VAR_5 ] = VAR_2 ; VAR_4 [ VAR_6 ] = VAR_3 ; METHOD_6 ( VAR_3 ) ; for ( int i = 0 ; i < ( VAR_7 ) ; i ++ ) { VAR_8 [ i ] = true ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = VAR_2 ; TYPE_1 VAR_3 = METHOD_2 ( STRING_1 , VAR_4 . METHOD_3 ( ) , VAR_5 ) ; assertEquals ( VAR_6 , VAR_7 . METHOD_4 ( VAR_8 ) . METHOD_5 ( ) ) ; VAR_9 . METHOD_6 ( VAR_8 ) ; TYPE_2 . METHOD_7 ( VAR_10 ) ; org.mockito.Mockito.verify ( VAR_5 . METHOD_8 ( ) , TYPE_3 . METHOD_9 ( ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_11 ) , org.mockito.Matchers . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; int VAR_2 = INT_1 ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( 10 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( 10 ) ; TYPE_2 VAR_5 = METHOD_3 ( VAR_1 , VAR_2 ) ; try { TYPE_3 result = VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ; } catch ( TYPE_4 expected ) { } } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , java.lang.String name ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device , name ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { java.lang.String id = METHOD_2 ( VAR_4 ) ; if ( ( VAR_2 . start ) == VAR_1 ) { assert ! ( VAR_5 . METHOD_3 ( id ) ) ; VAR_5 . METHOD_4 ( id ) ; } else if ( ( VAR_6 ) == VAR_1 ) { assert VAR_5 . METHOD_3 ( id ) ; VAR_5 . METHOD_5 ( id ) ; } } } 
protected void METHOD_1 ( ) { java.lang.Object [ ] VAR_1 = METHOD_2 ( ) ; if ( ( ( VAR_1 . length ) == 1 ) && ( ( VAR_1 [ 0 ] ) instanceof TYPE_1 ) ) { TYPE_1 item = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ; VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 , item , ( ( VAR_4 ) && ( VAR_5 . METHOD_4 ( ) ) ) ) ; } } 
public int METHOD_1 ( android.bluetooth.BluetoothDevice device ) { android.util.Log.v ( VAR_1 . TAG , ( STRING_1 + device ) ) ; final TYPE_1 service = VAR_2 ; if ( service != null ) { try { return service . METHOD_1 ( device ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } return VAR_3 ; } 
private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { for ( int i = 0 , n = VAR_2 . length ; i < n ; i ++ ) { if ( VAR_2 [ i ] . equals ( VAR_1 ) ) { return VAR_3 [ i ] ; } } return null ; } 
public static boolean METHOD_1 ( TYPE_1 context , int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_2 . METHOD_2 ( context ) ) ) { TYPE_3 . i ( STRING_1 , STRING_2 ) ; return false ; } if ( ! ( TYPE_4 . METHOD_3 ( ) ) ) { return false ; } return ( TYPE_5 . METHOD_4 ( VAR_1 ) ) || ( TYPE_6 . METHOD_5 ( VAR_2 ) ) ; } 
public void METHOD_1 ( int subId , java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( subId ) ; if ( VAR_3 != null ) { if ( ! ( TYPE_3 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ) { return ; } VAR_3 . METHOD_1 ( VAR_2 ) ; } else { loge ( ( STRING_2 + subId ) ) ; return ; } } 
static TYPE_1 METHOD_1 ( TYPE_1 n , TYPE_2 VAR_1 ) { int VAR_2 = n . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , VAR_1 ) ; while ( ( VAR_3 . equals ( VAR_4 ) ) || ( ( VAR_3 . METHOD_3 ( n ) ) >= 0 ) ) { VAR_3 = new TYPE_1 ( VAR_2 , VAR_1 ) ; } return VAR_3 ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( 0 ) ; TYPE_1 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 ) . METHOD_4 ( true ) . build ( ) ; VAR_5 . METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_6 ) ; boolean VAR_7 ; try { VAR_7 = VAR_1 . METHOD_7 ( ) ; } catch ( TYPE_3 e ) { VAR_7 = false ; } VAR_8 = VAR_7 ; METHOD_8 ( new TYPE_4 ( VAR_3 , VAR_7 ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { TYPE_3 entry = VAR_2 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ; if ( entry == null ) { throw new TYPE_5 ( VAR_1 . toString ( ) ) ; } return new TYPE_6 ( VAR_1 , VAR_2 , entry ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String pkg ) { synchronized ( this ) { if ( ( ! ( METHOD_2 ( VAR_1 , pkg , TYPE_2 . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) { return null ; } METHOD_5 ( TYPE_2 . METHOD_3 ( ) , pkg ) ; return METHOD_6 ( ) . VAR_2 ; } } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; if ( VAR_2 != null ) { TYPE_5 VAR_6 = TYPE_4 . METHOD_3 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ; if ( VAR_6 == null ) { java.lang.String VAR_11 = java.lang.String.format ( STRING_1 , VAR_1 . name ) ; context . METHOD_4 ( VAR_12 , VAR_2 , null , context . METHOD_5 ( VAR_2 , VAR_1 ) , VAR_11 , null ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) ; server . METHOD_5 ( ) ; TYPE_2 VAR_1 = server . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ; VAR_1 . METHOD_8 ( STRING_4 , STRING_5 ) ; assertEquals ( STRING_1 , METHOD_9 ( VAR_1 . METHOD_10 ( ) , VAR_2 ) ) ; TYPE_3 request = server . METHOD_11 ( ) ; METHOD_12 ( request . METHOD_13 ( ) , STRING_6 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { if ( ! ( METHOD_2 ( ) ) ) { if ( ( event . METHOD_3 ( ) ) == ( VAR_1 ) ) { VAR_2 . METHOD_4 ( event . METHOD_5 ( ) , event ) ; } else { VAR_2 . METHOD_6 ( event . METHOD_5 ( ) , event ) ; } } } 
private int METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == 1 ) { return VAR_1 ; } else { final int VAR_3 = TYPE_1 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; if ( ( VAR_5 ) == ( VAR_6 ) ) { return VAR_3 + VAR_1 ; } else { final int VAR_7 = ( VAR_1 + VAR_3 ) + ( VAR_2 ) ; return VAR_7 - ( VAR_7 % ( VAR_2 ) ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( this , VAR_1 , VAR_3 ) ; VAR_2 . METHOD_2 ( ) ; if ( VAR_4 ) { android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_1 + ( VAR_2 . toString ( ) ) ) + STRING_2 ) + ( VAR_1 . toString ( ) ) ) ) ; } } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( VAR_1 ) ) { return ; } TYPE_1 [ ] VAR_2 = new TYPE_1 [ ] { VAR_3 , VAR_4 } ; byte [ ] VAR_5 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 result = VAR_6 . METHOD_3 ( VAR_2 , null , VAR_5 ) ; assertEquals ( 1 , result . METHOD_4 ( ) . size ( ) ) ; assertEquals ( 0 , result . METHOD_5 ( ) . size ( ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 ; } TYPE_2 VAR_4 = VAR_5 [ VAR_1 . METHOD_3 ( ) ] ; if ( VAR_4 != null ) { VAR_2 = VAR_3 . get ( VAR_4 ) ; if ( VAR_2 != null ) { return VAR_2 ; } } throw new TYPE_4 ( ( STRING_1 + VAR_1 ) , null , null ) ; } 
public void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_4 = METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_5 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; } 
private TYPE_1 METHOD_1 ( int id , int VAR_1 ) { TYPE_1 info = new TYPE_1 ( id , STRING_1 , VAR_1 , STRING_1 , STRING_1 , 0 , 0 , STRING_1 , 0 , null , 0 , 0 , STRING_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( id , new TYPE_2 ( mContext , VAR_4 , VAR_5 , VAR_6 , VAR_7 , this , info , VAR_8 , VAR_9 . METHOD_3 ( ) ) ) ; return info ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , STRING_2 , CHAR_1 , 0 , INT_1 , 6 ) ; METHOD_4 ( VAR_1 , STRING_3 , INT_2 , INT_3 , CHAR_1 , 0 , INT_1 , 6 ) ; METHOD_4 ( VAR_1 , STRING_4 , INT_3 , INT_2 , CHAR_1 , 0 , INT_1 , 6 ) ; METHOD_4 ( VAR_1 , STRING_2 , CHAR_1 , 0 , INT_1 , 6 ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( VAR_2 . equals ( VAR_3 ) ) ) { java.lang.String VAR_4 = STRING_1 ; context . METHOD_3 ( VAR_5 , VAR_1 , context . METHOD_4 ( VAR_1 ) , VAR_4 , null ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 r ) { if ( ! ( VAR_3 . get ( ) ) ) return ; int y = r . y ; final int VAR_4 = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_5 = VAR_6 . METHOD_4 ( ) ; TYPE_5 . METHOD_5 ( VAR_2 , 0 , VAR_4 , 0 , y , VAR_5 ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ; TYPE_2 status = VAR_1 . METHOD_3 ( ) ; if ( status . METHOD_4 ( ) ) { VAR_3 . METHOD_5 ( STRING_1 ) ; METHOD_6 ( VAR_4 ) . METHOD_7 ( true ) ; } else { VAR_3 . METHOD_5 ( status . METHOD_8 ( ) ) ; VAR_3 . METHOD_9 ( ) ; METHOD_6 ( VAR_4 ) . METHOD_7 ( false ) ; } } 
static boolean METHOD_1 ( int VAR_1 , float VAR_2 ) { TYPE_1 d = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } double VAR_4 = TYPE_2 . METHOD_3 ( VAR_2 ) ; float VAR_5 = ( ( float ) ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ) ; float VAR_6 = ( ( float ) ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) ; d . METHOD_6 ( TYPE_1 . METHOD_7 ( VAR_5 , VAR_6 ) ) ; return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; boolean VAR_2 = ! ( VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; assertTrue ( ( STRING_1 + ( VAR_1 . METHOD_4 ( ) ) ) , ( ( VAR_1 . METHOD_4 ( ) ) == VAR_2 ) ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ( VAR_1 + ( name ) ) , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_2 ( VAR_6 . METHOD_3 ( ) ) ; VAR_7 . METHOD_2 ( VAR_8 . METHOD_3 ( ) ) ; VAR_9 . METHOD_2 ( VAR_10 . METHOD_3 ( ) ) ; VAR_11 . METHOD_2 ( VAR_12 . METHOD_3 ( ) ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } METHOD_4 ( VAR_2 , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_5 ( VAR_2 , VAR_3 ) ; METHOD_6 ( VAR_2 , VAR_5 ) ; final TYPE_2 VAR_6 = METHOD_5 ( VAR_2 , VAR_5 ) ; TYPE_3 . METHOD_7 ( VAR_4 , VAR_6 ) ; } 
public void METHOD_1 ( ) { when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) ; VAR_2 . METHOD_5 ( false ) ; VAR_2 . METHOD_6 ( VAR_3 ) ; VAR_4 . METHOD_7 ( VAR_5 ) ; VAR_6 . METHOD_8 ( ) ; verify ( VAR_7 ) . METHOD_9 ( ) ; verify ( VAR_7 , METHOD_10 ( ) ) . METHOD_11 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , int x , int y , int VAR_4 ) { VAR_1 . METHOD_2 ( ( VAR_3 != null ? VAR_3 : METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( VAR_5 . METHOD_5 ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) return null ; final TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == null ) return null ; return new TYPE_1 ( VAR_2 , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 call , boolean VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_1 && ( ( call . METHOD_2 ( ) ) != null ) ) && ( ! ( call . METHOD_3 ( VAR_3 ) ) ) ) { int subId = VAR_4 . METHOD_4 ( ) . METHOD_5 ( call . METHOD_6 ( ) ) ; METHOD_7 ( call . METHOD_8 ( ) , call . METHOD_2 ( ) . METHOD_9 ( ) , VAR_2 , subId ) ; } } 
public int METHOD_1 ( int context ) throws TYPE_1 { int s = TYPE_2 . METHOD_2 ( context ) ; TYPE_2 . METHOD_3 ( s , new java.lang.String [ ] { STRING_1 } ) ; if ( ( VAR_1 ) != null ) { TYPE_2 . METHOD_4 ( s , VAR_1 ) ; } return s ; } 
public static void set ( java.lang.String key , java.lang.String VAR_1 ) { if ( ( key . length ( ) ) > ( VAR_2 ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; } if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > ( VAR_3 ) ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_2 + ( VAR_3 ) ) ) ; } if ( VAR_4 ) TYPE_1 . METHOD_1 ( key ) ; TYPE_1 . METHOD_2 ( key , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 fd , TYPE_2 pw , java.lang.String [ ] args ) { super . METHOD_1 ( fd , pw , args ) ; pw.println ( ( STRING_1 + ( VAR_1 ) ) ) ; pw.println ( ( STRING_2 + ( VAR_2 ) ) ) ; pw.println ( ( STRING_3 + ( VAR_3 ) ) ) ; } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } } 
public void METHOD_1 ( ) { if ( VAR_1 ) METHOD_2 ( STRING_1 ) ; for ( TYPE_1 config : METHOD_3 ( ) ) { if ( TYPE_2 . METHOD_4 ( config ) ) { java.lang.String VAR_2 = TYPE_2 . METHOD_5 ( VAR_3 , VAR_4 . METHOD_6 ( ) ) ; VAR_4 . METHOD_7 ( VAR_2 ) ; VAR_4 . METHOD_8 ( STRING_2 ) ; } } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 value = ( ( TYPE_2 ) ( VAR_1 ) ) ; if ( ( value . value ) != null ) { assert ( this . value ) != null : ( ( STRING_1 + ( this . value ) ) + STRING_2 ) + ( value . value ) ; this . value = value . value ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_1 VAR_4 = VAR_2 . METHOD_2 ( ) ; for ( TYPE_1 VAR_5 : VAR_1 . METHOD_3 ( ) ) { TYPE_1 VAR_6 = VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ; VAR_6 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; VAR_3 . append ( new TYPE_3 ( VAR_5 , VAR_6 ) ) ; } } 
public void run ( ) { while ( ! ( VAR_1 . METHOD_1 ( ) ) ) { try { TYPE_1 . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_2 e ) { return ; } } try { VAR_1 . METHOD_3 ( VAR_3 , VAR_4 , 0 ) ; } catch ( java.lang.Exception e ) { TYPE_3 . e ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; VAR_3 . METHOD_6 ( VAR_4 , new java.lang.String [ ] { VAR_5 , VAR_6 } ) ; VAR_3 . METHOD_7 ( STRING_2 , VAR_7 ) ; VAR_3 . METHOD_7 ( STRING_3 , VAR_8 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.ArrayList < java.lang.Integer > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_2 ( 2 ) ; VAR_1 . METHOD_2 ( 3 ) ; try { VAR_1 . METHOD_3 ( new TYPE_1 < java.lang.Integer > ( ) { public void METHOD_4 ( java.lang.Integer t ) { if ( t == 3 ) { VAR_1 . METHOD_2 ( t ) ; } } } ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { char [ ] VAR_1 = new char [ 10 ] ; STRING_1 . METHOD_2 ( 0 , 10 , VAR_1 , 0 ) ; pw = new TYPE_1 ( ) ; VAR_2 = new TYPE_2 ( ( VAR_3 = new TYPE_3 ( pw ) ) , STRING_2 ) ; VAR_2 . start ( ) ; pw . METHOD_3 ( VAR_1 ) ; pw . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( INT_1 ) ; assertEquals ( STRING_3 , STRING_1 , new java.lang.String ( VAR_4 ) ) ; } 
static void METHOD_1 ( int VAR_1 , java.lang.String text , int start , int VAR_2 , float x , float y , final int flags , int VAR_3 ) { int count = VAR_2 - start ; char [ ] VAR_4 = TYPE_1 . METHOD_2 ( count ) ; TYPE_2 . METHOD_3 ( text , start , VAR_2 , VAR_4 , 0 ) ; TYPE_3 . METHOD_1 ( VAR_1 , VAR_4 , 0 , count , x , y , flags , VAR_3 ) ; } 
public static void METHOD_1 ( ) throws java.lang.Exception { int size = ( INT_1 * INT_2 ) * INT_2 ; for ( int i = 0 ; i < ( VAR_1 . length ) ; ) { try { VAR_1 [ i ] = new char [ size ] ; i ++ ; } catch ( TYPE_1 VAR_2 ) { size = size / 2 ; if ( size == 0 ) { break ; } } } VAR_1 [ 0 ] = new char [ INT_3 ] ; } 
public java.lang.String METHOD_1 ( int VAR_1 , byte [ ] VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . get ( ) ; if ( VAR_3 == null ) { android.util.Log.e ( VAR_5 . TAG , STRING_1 ) ; return STRING_2 ; } if ( VAR_6 ) { android.util.Log.e ( VAR_5 . TAG , STRING_3 ) ; return STRING_2 ; } return VAR_3 . METHOD_2 ( VAR_7 , VAR_1 , VAR_2 , null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers.eq ( false ) , TYPE_2 . METHOD_5 ( VAR_6 . String class ) ) ; assertEquals ( VAR_2 , true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final long VAR_1 = 100 ; final long VAR_2 = INT_1 ; VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , false ) ; assertTrue ( VAR_3 . METHOD_3 ( ) ) ; assertFalse ( VAR_3 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_4 , VAR_3 . METHOD_6 ( ) ) ; METHOD_5 ( VAR_4 , VAR_3 . METHOD_7 ( ) ) ; assertEquals ( VAR_1 , VAR_3 . METHOD_8 ( ) ) ; assertEquals ( VAR_2 , VAR_3 . size ( ) ) ; } 
private final int METHOD_1 ( TYPE_1 VAR_1 ) { int count = VAR_2 . size ( ) ; TYPE_2 r = null ; int index = - 1 ; for ( int i = count - 1 ; i >= 0 ; i -- ) { java.lang.Object VAR_3 = VAR_2 . get ( i ) ; if ( VAR_3 == VAR_1 ) { r = ( ( TYPE_2 ) ( VAR_3 ) ) ; index = i ; break ; } } return index ; } 
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( null ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_4 ( ) ; try { VAR_2 . METHOD_5 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 expected ) { } VAR_1 . METHOD_6 ( ) ; try { VAR_2 . METHOD_5 ( ) ; fail ( STRING_2 ) ; } catch ( TYPE_3 expected ) { } } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , boolean value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final boolean VAR_3 = ( v == null ) ? ( ( boolean ) ( m . METHOD_2 ( ) ) ) : ( ( boolean ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public int METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return VAR_3 ; } final TYPE_2 VAR_4 = METHOD_3 ( subId ) ; if ( VAR_4 != null ) { return VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ; } else { return VAR_3 ; } } 
public java.util.List < TYPE_1 > get ( int index ) { int VAR_1 = size ( ) ; TYPE_2 . METHOD_1 ( index , VAR_1 ) ; int start = index * ( size ) ; int VAR_2 = TYPE_3 . METHOD_2 ( ( start + ( size ) ) , VAR_3 . size ( ) ) ; return VAR_3 . METHOD_3 ( start , VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 x , java.lang.String VAR_1 ) { assertEquals ( x , VAR_2 . METHOD_2 ( VAR_1 ) ) ; assertEquals ( TYPE_2 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) , VAR_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ) ; assertTrue ( VAR_2 . METHOD_7 ( VAR_1 ) ) ; assertEquals ( x , VAR_2 . METHOD_8 ( x ) ) ; } 
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { int userId = TYPE_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != userId ) { final int VAR_3 = VAR_2 ; VAR_2 = userId ; TYPE_2 VAR_4 = VAR_5 . get ( VAR_3 ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_3 ( ) ; } TYPE_2 VAR_6 = METHOD_4 ( userId ) ; VAR_6 . METHOD_5 ( ) ; } } } 
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_1 . METHOD_3 ( false ) ; VAR_1 . METHOD_4 ( false ) ; VAR_1 . METHOD_5 ( false ) ; VAR_1 . METHOD_6 ( FLOAT_1 ) ; return VAR_1 ; } 
public < TYPE_1 , TYPE_2 > java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( TYPE_3 < java.util.Map < TYPE_1 , TYPE_2 > > action , boolean VAR_1 ) { TYPE_4 VAR_2 = METHOD_2 ( ) ; try { return TYPE_5 . METHOD_3 ( VAR_2 , action , VAR_1 ) ; } finally { VAR_2 . METHOD_4 ( ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , boolean VAR_4 , TYPE_2 VAR_5 , int VAR_6 ) { if ( ( VAR_3 == null ) || ( VAR_2 == null ) ) { return null ; } TYPE_3 VAR_7 = new TYPE_3 ( ) ; VAR_8 = VAR_3 ; VAR_9 = VAR_5 ; return TYPE_4 . METHOD_2 ( VAR_2 , VAR_4 , VAR_7 , VAR_6 ) ; } 
public void METHOD_1 ( ) { double [ ] VAR_1 = ( ( double [ ] ) ( VAR_2 . METHOD_2 ( ) ) ) ; double [ ] VAR_3 = VAR_4 . METHOD_3 ( ) ; assertTrue ( STRING_1 , VAR_3 . equals ( VAR_2 ) ) ; VAR_3 [ 0 ] = FLOAT_1 ; assertTrue ( STRING_2 , ( ! ( VAR_3 . equals ( VAR_1 ) ) ) ) ; } 
static int METHOD_1 ( ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { int d = b . toString ( ) . METHOD_2 ( STRING_1 , 1 ) ; } return b . length ( ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; boolean VAR_2 = false ; if ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( VAR_5 ) ) { VAR_2 = true ; } VAR_1 . METHOD_2 ( VAR_6 ) . METHOD_3 ( VAR_2 ) ; return true ; } 
public void METHOD_1 ( java.io.File from , java.io.File to ) throws TYPE_1 { try { TYPE_2 VAR_1 = new TYPE_3 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( STRING_1 , STRING_2 , from . METHOD_4 ( ) , STRING_3 , to . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_4 result = VAR_3 . METHOD_6 ( VAR_1 , VAR_4 ) ; result . METHOD_7 ( ) . METHOD_8 ( ) ; } catch ( TYPE_5 e ) { throw new TYPE_1 ( e ) ; } } 
public boolean METHOD_1 ( final int VAR_1 , final TYPE_1 VAR_2 ) { VAR_3 . METHOD_2 ( false ) ; if ( METHOD_3 ( ) ) { boolean ret = METHOD_4 ( new TYPE_2 < TYPE_3 > ( ) { public TYPE_3 call ( ) { return METHOD_1 ( VAR_1 , VAR_2 ) ; } } ) ; return ret ; } VAR_4 . METHOD_5 ( ) . METHOD_1 ( ) ; return VAR_5 . METHOD_6 ( VAR_1 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { return ; } METHOD_3 ( STRING_1 ) ; METHOD_4 ( ) ; METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; VAR_1 . METHOD_6 ( VAR_2 , null ) ; assertEquals ( STRING_3 , VAR_3 , VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) ; assertTrue ( METHOD_4 ( VAR_1 , STRING_1 ) ) ; TYPE_2 . METHOD_5 ( VAR_1 , STRING_1 ) ; assertFalse ( METHOD_4 ( VAR_1 , STRING_1 ) ) ; } 
public void METHOD_1 ( TYPE_1 . Allocation in , TYPE_1 . Allocation out , boolean VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_4 ) ; if ( ( VAR_3 != null ) && ( VAR_5 ) ) { TYPE_1 . Allocation VAR_6 = in ; if ( VAR_1 ) { VAR_6 = TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) , in . METHOD_5 ( ) ) ; VAR_6 . METHOD_6 ( out ) ; } VAR_2 . METHOD_7 ( VAR_3 , VAR_6 , out ) ; } } 
protected void METHOD_1 ( ) throws java.io.IOException { synchronized ( VAR_1 ) { if ( ( fd ) != null ) { if ( ! ( VAR_2 ) ) { TYPE_1 . METHOD_2 ( ) ; } if ( VAR_3 ) { return ; } VAR_3 = true ; METHOD_3 ( ) ; fd = null ; return ; } } } 
private void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( VAR_2 . TAG , ( STRING_1 + ( VAR_3 ) ) ) ; if ( ( VAR_3 ) == null ) return ; METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 , METHOD_4 ( ) ) ; } 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = null ; try { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_1 = VAR_2 . METHOD_3 ( METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) ) ; } } catch ( android.os.RemoteException ex ) { } return METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < java.lang.String > c = java.lang.String : : METHOD_2 ; org.junit.Assert.assertEquals ( 2 , c . METHOD_3 ( ) . METHOD_4 ( ) . length ) ; TYPE_2 m = c . METHOD_3 ( ) . METHOD_5 ( STRING_1 , VAR_1 . Object class ) ; org.junit.Assert.assertEquals ( boolean . class , m . METHOD_6 ( ) ) ; TYPE_3 . assertFalse ( m . METHOD_7 ( ) ) ; TYPE_3 . assertFalse ( m . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 , STRING_2 ) ; java.lang.String packageName = STRING_3 ; java.lang.String VAR_2 = ( packageName . METHOD_4 ( CHAR_1 , CHAR_2 ) ) + STRING_4 ; java.util.Map < java.lang.String , TYPE_1 > input = TYPE_2 . METHOD_5 ( ) ; input . METHOD_3 ( STRING_5 , new TYPE_1 ( true ) . METHOD_6 ( STRING_6 , true ) ) ; METHOD_7 ( packageName , input ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getName ( ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) . METHOD_12 ( VAR_1 . METHOD_13 ( ) ) . METHOD_14 ( VAR_1 . METHOD_15 ( ) ) . METHOD_16 ( VAR_1 . METHOD_17 ( ) ) ; } 
static void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return ; } TYPE_2 VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return ; } TYPE_3 VAR_6 = VAR_3 . METHOD_3 ( ) ; TYPE_4 VAR_7 = VAR_6 . METHOD_4 ( ) ; TYPE_4 VAR_8 = VAR_5 . METHOD_5 ( ) ; VAR_7 . METHOD_6 ( VAR_8 ) ; VAR_6 . METHOD_7 ( VAR_7 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 c = TYPE_1 . METHOD_2 ( ) ; TYPE_2 [ ] VAR_1 = TYPE_3 . METHOD_3 ( c , null ) ; METHOD_4 ( VAR_1 [ 0 ] , VAR_1 [ 1 ] ) ; c . METHOD_5 ( ) ; } 
public boolean equals ( java.lang.Object obj ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return ( ( ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_4 . equals ( VAR_5 ) ) ) && ( VAR_6 . equals ( VAR_7 ) ) ) && ( VAR_8 . equals ( VAR_9 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) return ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( STRING_1 , VAR_4 ) ; VAR_3 . METHOD_6 ( STRING_2 , VAR_5 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( VAR_3 ) ) ; } VAR_4 . METHOD_5 ( ) ; VAR_5 = null ; VAR_6 = false ; VAR_7 = false ; VAR_8 . METHOD_6 ( false ) ; VAR_9 . METHOD_7 ( false ) ; METHOD_8 ( ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( TYPE_4 . METHOD_5 ( new TYPE_5 ( ) ) ) ; VAR_1 . METHOD_4 ( TYPE_4 . METHOD_5 ( new TYPE_6 ( VAR_2 , VAR_3 ) ) ) ; VAR_1 . METHOD_4 ( TYPE_4 . METHOD_5 ( new TYPE_7 ( ) ) ) ; return VAR_1 ; } 
public static synchronized TYPE_1 METHOD_1 ( java.io.File VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( ! ( VAR_1 . equals ( VAR_3 ) ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_2 = new TYPE_3 ( VAR_1 ) ; } 
protected static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 , TYPE_1 b ) { synchronized ( VAR_4 ) { VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_5 = TYPE_4 . get ( VAR_4 ) ; if ( VAR_5 != null ) { return VAR_5 ; } TYPE_4 . METHOD_3 ( ( ( TYPE_5 ) ( VAR_4 . METHOD_4 ( ) ) ) , b ) ; return b ; } } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 = method . METHOD_1 ( ) ; if ( ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_5 ( method ) ; } 
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( ( ( ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) == false ) && ( ( VAR_1 . METHOD_2 ( STRING_2 ) ) == false ) ) && ( ( VAR_1 . METHOD_2 ( STRING_3 ) ) == false ) ) && ( ( VAR_1 . METHOD_2 ( STRING_4 ) ) == false ) ) && ( ( VAR_1 . METHOD_3 ( STRING_5 ) ) == false ) ; } 
public int METHOD_1 ( int index ) { int i = index - 1 ; if ( ( i < 0 ) || ( i >= ( count ) ) ) { throw new TYPE_1 ( index ) ; } return TYPE_2 . METHOD_1 ( this , index ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 info ) { assert ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) && ( ( VAR_3 ) != null ) ; return new TYPE_1 ( info , new TYPE_3 ( info , null , VAR_1 , VAR_3 , TYPE_4 . METHOD_2 ( ) , false ) ) ; } 
public void METHOD_1 ( TYPE_1 status , TYPE_2 test , java.lang.String VAR_1 ) { java.lang.String VAR_2 ; if ( status == ( VAR_3 ) ) { VAR_2 = VAR_4 ; } else { VAR_2 = VAR_5 ; } TYPE_3 VAR_6 = new TYPE_3 ( new TYPE_4 ( test ) , VAR_2 , VAR_1 , null ) ; VAR_7 . METHOD_2 ( ) . METHOD_3 ( VAR_6 ) ; } 
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , final TYPE_2 VAR_2 , final java.util.List < ? extends TYPE_2 > VAR_3 ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( INT_1 ) ) ; VAR_1 . METHOD_2 ( METHOD_4 ( VAR_2 , VAR_3 ) ) ; if ( ( VAR_3 . size ( ) ) > 0 ) { VAR_1 . METHOD_2 ( METHOD_5 ( VAR_3 , VAR_4 ) ) ; } } 
public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( ( VAR_2 . length ) < VAR_1 ) ) { byte [ ] VAR_3 = new byte [ VAR_1 ] ; TYPE_1 . METHOD_2 ( VAR_2 , 0 , VAR_3 , 0 , size ) ; VAR_2 = VAR_3 ; } return this ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( false ) ; TYPE_1 . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_1 ) throws android.os.RemoteException { VAR_1 . METHOD_6 ( VAR_2 , TYPE_1 . METHOD_7 ( VAR_3 class ) ) ; return ; } } ) . when ( VAR_4 ) . METHOD_8 ( org.mockito.Matchers . METHOD_9 ( VAR_5 class ) ) ; assertFalse ( VAR_6 . METHOD_10 ( new TYPE_4 ( ) , false ) ) ; } 
private void METHOD_1 ( TYPE_1 id , java.lang.String VAR_1 ) { java.io.File f = new java.io.File ( VAR_2 , VAR_1 ) ; java.lang.String VAR_3 = f . METHOD_2 ( ) ; if ( ( f . METHOD_3 ( ) ) && ( ( VAR_3 . METHOD_4 ( ( ( VAR_3 . length ( ) ) - 1 ) ) ) != ( VAR_4 ) ) ) { VAR_3 += VAR_4 ; } VAR_5 . METHOD_5 ( id , VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , float x , float y , float VAR_2 , float VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { METHOD_3 ( METHOD_4 ( this , VAR_1 ) , x , y , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , float VAR_5 ) { TYPE_1 d = VAR_6 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return ; } VAR_7 = TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
public static void METHOD_1 ( TYPE_1 context ) { if ( VAR_1 ) { android.util.Log.v ( TYPE_2 . TAG , STRING_1 ) ; } if ( ( VAR_2 ) != null ) { android.util.Log.w ( TYPE_2 . TAG , STRING_2 ) ; } VAR_2 = new TYPE_2 ( context ) ; } 
synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , java.lang.Object d , int VAR_6 , TYPE_1 VAR_7 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , d , VAR_6 , VAR_8 ) ; } 
private static int METHOD_1 ( int [ ] x ) { int r = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { r += x [ i ] ; } for ( int i = r ; i < 16 ; i ++ ) { r += i ; } return r ; } 
public static void e ( final java.lang.String msg , java.lang.Exception e ) { TYPE_1 . log ( ( ( VAR_1 ) + msg ) ) ; if ( ! ( VAR_2 ) ) { TYPE_2 . println ( ( ( VAR_1 ) + msg ) ) ; if ( e != null ) { TYPE_2 . println ( e.getMessage ( ) ) ; } return ; } VAR_3 . println ( ( ( VAR_1 ) + msg ) ) ; if ( e != null ) { e . METHOD_1 ( ) ; } } 
protected final void METHOD_1 ( TYPE_1 h , long VAR_1 ) { final TYPE_2 TYPE_3 = new TYPE_2 ( 1 ) ; h . METHOD_2 ( TYPE_3 : : METHOD_3 ) ; while ( ( TYPE_3 . METHOD_4 ( ) ) > 0 ) { try { TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_4 e ) { } } } 
private TYPE_1 METHOD_1 ( TYPE_2 node ) { if ( ! ( VAR_1 ) ) { return new TYPE_1 ( ) ; } TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_3 parent = METHOD_3 ( ) ; TYPE_1 VAR_3 ; while ( parent != null ) { VAR_3 = parent . METHOD_2 ( ) ; if ( ! ( VAR_2 . METHOD_4 ( VAR_3 ) ) ) { return new TYPE_1 ( ) ; } parent = parent . METHOD_3 ( ) ; } return VAR_2 ; } 
public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { while ( ! ( VAR_2 . equals ( STRING_1 ) ) ) { if ( VAR_1 . equals ( VAR_2 ) ) { return true ; } VAR_2 = METHOD_2 ( VAR_2 ) ; if ( VAR_2 == null ) { return true ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( false ) ; TYPE_1 . when ( VAR_1 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_2 class ) ) ) . thenReturn ( false ) ; assertFalse ( VAR_3 . METHOD_6 ( new TYPE_2 ( ) , false ) ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 = method . METHOD_1 ( ) ; if ( ( ( method . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( ! ( VAR_2 . METHOD_4 ( this . METHOD_5 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_3 = new TYPE_1 ( method ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_3 , VAR_1 . METHOD_6 ( ) ) ; VAR_4 . METHOD_4 ( method ) ; VAR_3 . METHOD_7 ( ) ; } 
public static void METHOD_1 ( int id , long VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( id ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( id , VAR_3 ) , VAR_1 ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_7 ( e ) ; } finally { VAR_2 . METHOD_8 ( ) ; } } 
public final void METHOD_1 ( int VAR_1 , java.lang.String format , byte [ ] VAR_2 ) throws TYPE_1 { synchronized ( VAR_3 ) { if ( ( VAR_4 ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } try { VAR_4 . METHOD_1 ( VAR_1 , format , VAR_2 ) ; METHOD_2 ( VAR_1 , 0 , VAR_5 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_6 , ( STRING_2 + ( e.getMessage ( ) ) ) ) ; METHOD_2 ( VAR_1 , 0 , VAR_7 ) ; } } } 
public java.lang.String getName ( android.bluetooth.BluetoothDevice device ) { TYPE_1 VAR_1 = METHOD_1 ( device ) ; if ( VAR_1 != null ) { return VAR_1 . getName ( ) ; } java.lang.String name = device . METHOD_2 ( ) ; if ( name != null ) { return name ; } return device . METHOD_3 ( ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; assert ( VAR_3 ) != null ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( type ) ) || ( type . METHOD_2 ( VAR_1 ) ) ) { for ( TYPE_3 field : type . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( field . METHOD_5 ( ) ) ; } } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; TYPE_3 . METHOD_3 ( VAR_1 , VAR_3 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_1 ) ; TYPE_5 . METHOD_5 ( VAR_4 . METHOD_6 ( STRING_1 ) . get ( ) ) ; } 
public static < TYPE_1 extends TYPE_2 < TYPE_1 > > TYPE_3 < TYPE_1 > METHOD_1 ( TYPE_4 < TYPE_1 > VAR_1 , java.lang.Class < TYPE_1 > VAR_2 ) { TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_3 < TYPE_1 > set = TYPE_3 . METHOD_3 ( VAR_2 ) ; TYPE_6 . METHOD_4 ( set , VAR_1 ) ; return set ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String url , boolean VAR_2 ) { final TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) ; if ( VAR_2 && ( ( VAR_5 ) != null ) ) { VAR_5 . METHOD_3 ( false ) ; VAR_5 = null ; } if ( ( VAR_5 ) == null ) { VAR_5 = new TYPE_3 ( this , VAR_3 , VAR_1 ) ; VAR_5 . METHOD_4 ( url ) ; } } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; java.lang.String VAR_3 ; try { long time = TYPE_4 . METHOD_3 ( ) ; VAR_3 = TYPE_5 . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) ; TYPE_6 . METHOD_6 ( STRING_1 , ( ( TYPE_4 . METHOD_3 ( ) ) - time ) , VAR_5 ) ; } finally { TYPE_3 . METHOD_7 ( VAR_2 ) ; } return VAR_3 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } } 
public static void METHOD_1 ( ) { VAR_1 class . METHOD_2 ( ) . METHOD_3 ( true ) ; VAR_2 = new java.io.File [ ] { TYPE_1 . METHOD_4 ( STRING_1 ) , TYPE_1 . METHOD_4 ( STRING_2 ) , TYPE_1 . METHOD_4 ( STRING_3 ) , TYPE_1 . METHOD_4 ( STRING_4 ) , TYPE_1 . METHOD_4 ( STRING_5 ) , TYPE_1 . METHOD_4 ( STRING_6 ) } ; VAR_3 = TYPE_1 . METHOD_5 ( STRING_7 ) ; } 
static void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return ; } VAR_3 . set ( VAR_5 ) ; } 
protected void METHOD_1 ( final TYPE_1 test , TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 { try { if ( ! ( VAR_2 ) ) { VAR_3 = test . METHOD_2 ( ) ; VAR_3 . run ( VAR_4 , test , VAR_1 ) ; } } catch ( TYPE_4 e ) { METHOD_3 ( ) ; throw e ; } } 
private void METHOD_1 ( TYPE_1 < TYPE_2 > expected , TYPE_1 < TYPE_2 > VAR_1 ) { java.util.Set < TYPE_2 > VAR_2 = new TYPE_3 ( expected ) ; java.util.Set < TYPE_2 > VAR_3 = new TYPE_3 ( VAR_1 ) ; assertEquals ( VAR_1 . size ( ) , VAR_3 . size ( ) ) ; assertEquals ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( s ) ; TYPE_2 e = TYPE_3 . METHOD_3 ( VAR_1 ) ; int count = 0 ; while ( e . METHOD_4 ( ) ) assertTrue ( STRING_1 , ( ( e . METHOD_5 ( ) ) == ( VAR_2 [ ( count ++ ) ] ) ) ) ; assertTrue ( ( STRING_2 + count ) , ( count == ( VAR_2 . length ) ) ) ; } 
public void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; assertFalse ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ; assertFalse ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ; assertFalse ( TYPE_1 . METHOD_6 ( VAR_1 ) ) ; assertFalse ( TYPE_1 . METHOD_7 ( VAR_1 ) ) ; assertTrue ( TYPE_1 . METHOD_8 ( VAR_1 ) ) ; assertFalse ( TYPE_1 . METHOD_9 ( VAR_1 ) ) ; assertFalse ( TYPE_1 . METHOD_10 ( VAR_1 ) ) ; } 
private void METHOD_1 ( android.bluetooth.BluetoothDevice device , int VAR_1 , int state ) { android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_4 , VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_5 , state ) ; VAR_2 . METHOD_2 ( VAR_6 , device ) ; mContext . METHOD_3 ( VAR_2 , VAR_7 ) ; log ( ( ( ( ( ( STRING_1 + device ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + state ) ) ; VAR_8 . METHOD_4 ( device , VAR_9 , state , VAR_1 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; try { VAR_2 . METHOD_4 ( VAR_3 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_5 = VAR_6 ; android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; } METHOD_5 ( false ) ; } 
public TYPE_1 < TYPE_2 , TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 ) { synchronized ( VAR_3 ) { TYPE_4 VAR_4 = METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; if ( ( VAR_4 == null ) || ( ( VAR_5 ) < 0 ) ) { return null ; } return TYPE_1 . METHOD_3 ( VAR_5 , VAR_6 ) ; } } 
public final synchronized TYPE_1 get ( TYPE_2 key ) { if ( key == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } TYPE_1 result = VAR_1 . get ( key ) ; if ( result != null ) { return result ; } result = METHOD_1 ( key ) ; if ( result != null ) { VAR_1 . METHOD_2 ( key , result ) ; METHOD_3 ( VAR_2 ) ; } return result ; } 
public void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) ; VAR_1 . METHOD_3 ( VAR_6 , VAR_7 ) ; VAR_1 . METHOD_4 ( VAR_8 , VAR_9 ) ; VAR_1 . METHOD_4 ( VAR_10 , VAR_11 ) ; VAR_1 . METHOD_4 ( VAR_12 , VAR_13 ) ; VAR_1 . METHOD_4 ( VAR_14 , VAR_15 ) ; VAR_16 . METHOD_1 ( VAR_1 ) ; } 
public static int METHOD_1 ( int uid , int VAR_1 , int [ ] VAR_2 , int VAR_3 , int [ ] [ ] VAR_4 , long VAR_5 , long VAR_6 ) { VAR_3 |= VAR_7 ; TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; int VAR_8 = TYPE_2 . METHOD_4 ( uid , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; if ( VAR_8 == 0 ) { TYPE_3 . METHOD_5 ( true , VAR_3 ) ; } TYPE_1 . METHOD_6 ( ) ; return VAR_8 ; } 
public java.lang.String METHOD_1 ( java.lang.String key , java.lang.String VAR_1 ) { java.lang.String value = VAR_2 . get ( key ) ; if ( ( TYPE_1 . METHOD_2 ( value ) ) || ( TYPE_2 . equals ( value ) ) ) return STRING_1 ; value = METHOD_3 ( value ) ; if ( value . METHOD_4 ( VAR_1 ) ) { return value . METHOD_5 ( VAR_1 . length ( ) ) ; } else { return value ; } } 
public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) { return ; } assertEquals ( VAR_1 , TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ) ; METHOD_5 ( ) ; } 
private static void METHOD_1 ( TYPE_1 context , int VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_3 . d ( VAR_3 , ( STRING_1 + VAR_2 ) ) ; TYPE_4 VAR_4 = ( ( TYPE_4 ) ( context . METHOD_3 ( VAR_5 ) ) ) ; VAR_4 . METHOD_4 ( VAR_2 , true ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String input ) throws TYPE_2 { final TYPE_3 < TYPE_1 > VAR_1 = VAR_2 < TYPE_1 > METHOD_2 ( ) ; for ( java.lang.String VAR_3 : TYPE_4 . METHOD_3 ( input ) ) { VAR_1 . METHOD_4 ( VAR_4 . METHOD_1 ( input ) ) ; } return VAR_1 . build ( ) ; } 
public void METHOD_1 ( final float VAR_1 ) { int VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( ( ( VAR_2 == INT_1 ) || ( VAR_2 == INT_2 ) ) || ( VAR_2 == INT_3 ) ) { VAR_3 . METHOD_3 ( ( ( VAR_4 ) + ( ( int ) ( VAR_1 ) ) ) ) ; } else { VAR_3 . METHOD_4 ( new TYPE_2 . Float ( VAR_1 ) ) ; } } 
private void METHOD_1 ( java.lang.String expected , TYPE_1 VAR_1 , int VAR_2 ) throws java.io.IOException { VAR_1 . METHOD_2 ( ) ; assertEquals ( expected , METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_2 ) ) ; ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_6 ( ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 result = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 ) ; TYPE_4 VAR_3 = TYPE_3 . METHOD_4 ( VAR_1 ) ; if ( VAR_2 != null ) { result = TYPE_1 . METHOD_5 ( result , VAR_2 ) ; } if ( VAR_3 != null ) { result = TYPE_1 . METHOD_5 ( result , VAR_3 ) ; } return result ; } 
public java.util.List < java.io.File > METHOD_1 ( ) { java.util.List < java.io.File > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 VAR_2 : VAR_3 ) { java.io.File VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( ( VAR_4 != null ) && ( VAR_4 . METHOD_4 ( ) ) ) { VAR_1 . METHOD_5 ( VAR_4 ) ; } } return VAR_1 ; } 
public void format ( double number , TYPE_1 VAR_1 , int pos , int VAR_2 ) { if ( VAR_2 >= ( VAR_3 ) ) { throw new TYPE_2 ( ( STRING_1 + ( name ) ) ) ; } TYPE_3 VAR_4 = METHOD_1 ( number ) ; VAR_4 . METHOD_2 ( number , VAR_1 , pos , ( ++ VAR_2 ) ) ; } 
private void METHOD_1 ( ) { final int n = VAR_1 . size ( ) ; for ( int i = 0 ; i < n ; ++ i ) { VAR_1 . METHOD_2 ( i ) . METHOD_3 ( ) ; } VAR_1 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . get ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; assertEquals ( STRING_3 , VAR_2 [ 0 ] ) ; assertEquals ( STRING_4 , VAR_3 [ 0 ] ) ; assertEquals ( STRING_5 , VAR_4 [ 0 ] ) ; assertEquals ( STRING_6 , VAR_5 [ 0 ] ) ; assertEquals ( STRING_4 , VAR_6 [ 0 ] ) ; assertEquals ( STRING_7 , VAR_7 [ 0 ] ) ; } 
public boolean METHOD_1 ( TYPE_1 call ) throws TYPE_2 { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) , VAR_5 ) ; } if ( ( call . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) && ( call . METHOD_6 ( ) . equals ( VAR_1 ) ) ) { assert VAR_6 . getName ( call . METHOD_7 ( ) ) . equals ( VAR_7 ) ; return true ; } return false ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 class ) ; TYPE_4 VAR_5 = new TYPE_4 ( ) ; VAR_1 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , VAR_6 . METHOD_5 ( ) , VAR_3 ) ; VAR_7 . METHOD_6 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_8 , VAR_1 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { int length = METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( os ) ; for ( int i = 0 ; i < length ; i ++ ) { VAR_2 . METHOD_3 ( VAR_3 [ i ] ) ; } java.lang.String result = new java.lang.String ( os . METHOD_4 ( ) ) ; assertEquals ( VAR_1 , result ) ; } 
protected void METHOD_1 ( java.io.File VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { java.io.File [ ] VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 != null ) { for ( java.io.File VAR_4 : VAR_3 ) { if ( ( VAR_4 . METHOD_3 ( ) ) && ( TYPE_3 . METHOD_4 ( VAR_4 . getName ( ) ) ) ) { TYPE_4 VAR_5 = TYPE_5 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_6 ) != null ) { METHOD_6 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) ; } } } } } 
public TYPE_1 METHOD_1 ( TYPE_2 context , java.lang.String VAR_1 ) throws TYPE_3 { super . METHOD_1 ( context , VAR_1 ) ; if ( VAR_1 . equals ( VAR_2 ) ) { return new TYPE_1 ( ) ; } else { try { return new TYPE_1 ( VAR_1 , VAR_3 ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( e.getMessage ( ) , e ) ; } } } 
public synchronized java.lang.Throwable [ ] METHOD_1 ( java.lang.Throwable VAR_1 ) { java.util.List < java.lang.Throwable > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( ( VAR_2 == null ) || ( VAR_2 . METHOD_2 ( ) ) ) { return VAR_4 ; } return VAR_2 . METHOD_3 ( new java.lang.Throwable [ 0 ] ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 . METHOD_1 ( ) , new TYPE_5 < TYPE_2 , TYPE_2 > ( ) { public TYPE_2 METHOD_4 ( TYPE_2 VAR_2 ) { return new TYPE_6 ( VAR_2 ) ; } } ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( VAR_1 ) log ( STRING_1 ) ; TYPE_2 context = VAR_2 . METHOD_2 ( ) ; context . METHOD_3 ( STRING_2 , STRING_3 ) ; synchronized ( VAR_3 ) { android.os.Message response = VAR_4 . METHOD_4 ( VAR_5 ) ; ( ( TYPE_3 ) ( VAR_2 . METHOD_5 ( ) ) ) . METHOD_6 ( VAR_6 , response ) ; try { VAR_3 . METHOD_7 ( ) ; } catch ( TYPE_4 e ) { log ( STRING_4 ) ; } } return VAR_7 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( ) , STRING_1 ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( ) , STRING_2 ) ) ) ; org.junit.Assert.assertEquals ( VAR_3 , TYPE_1 . METHOD_4 ( new java.io.File ( METHOD_3 ( ) , STRING_3 ) ) ) ; org.junit.Assert.assertEquals ( VAR_4 , TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( ) , STRING_3 ) ) ) ; } 
public TYPE_1 METHOD_1 ( boolean VAR_1 , boolean VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( ) ; try { java.util.Map < java.lang.String , TYPE_1 > VAR_4 = TYPE_3 . METHOD_3 ( VAR_3 , new TYPE_4 ( ) , VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) ; TYPE_1 VAR_5 = VAR_4 . get ( STRING_2 ) ; if ( VAR_2 ) { TYPE_3 . METHOD_4 ( VAR_5 ) ; } return VAR_5 ; } finally { VAR_3 . METHOD_5 ( ) ; } } 
protected java.lang.Class < ? > METHOD_1 ( java.lang.String name , boolean VAR_1 ) throws TYPE_1 { if ( ( name . equals ( STRING_1 ) ) || ( name . equals ( STRING_2 ) ) ) { return super . METHOD_1 ( name , VAR_1 ) ; } else if ( name . equals ( STRING_3 ) ) { java.lang.System.out.println ( STRING_4 ) ; return VAR_2 . METHOD_1 ( STRING_2 , VAR_1 ) ; } return super . METHOD_1 ( name , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; java.util.List < TYPE_4 > VAR_2 = METHOD_3 ( info , VAR_3 , VAR_4 ) ; METHOD_4 ( info , x , null , VAR_2 , VAR_1 ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
public void METHOD_1 ( final double value ) { long VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_1 ( value ) ) ; } } 
public static < TYPE_1 extends TYPE_2 > java.lang.String print ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return STRING_1 ; } TYPE_3 VAR_2 = new TYPE_3 ( ) ; try { TYPE_4 . print ( null , VAR_1 . METHOD_1 ( ) , VAR_1 , new TYPE_3 ( ) , VAR_2 ) ; } catch ( TYPE_5 e ) { return STRING_2 + ( e.getMessage ( ) ) ; } return VAR_2 . toString ( ) ; } 
private static boolean METHOD_1 ( TYPE_1 context ) { TYPE_2 VAR_1 = context . METHOD_2 ( ) ; if ( ( TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) ) ) && ( TYPE_4 . equals ( VAR_1 . METHOD_4 ( ) ) ) ) { if ( ( TYPE_5 . METHOD_5 ( ) ) instanceof TYPE_6 ) { return true ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( ( ( byte [ ] ) ( org.mockito.Matchers . METHOD_5 ( ) ) ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ; } 
public void METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) == false ) && ( ( VAR_3 . METHOD_3 ( ) ) == false ) ) { android.os.Message m = VAR_1 . METHOD_4 ( VAR_2 ) ; m . obj = device ; VAR_1 . METHOD_5 ( m , VAR_4 ) ; } } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String format , java.lang.String VAR_3 , boolean VAR_4 , byte [ ] VAR_5 ) { try { METHOD_2 ( VAR_1 , VAR_2 , VAR_6 , VAR_7 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_8 , ( STRING_1 + ( e.getMessage ( ) ) ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 ; } TYPE_1 result = new TYPE_1 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 , result ) ; return result ; } 
public void run ( ) { VAR_1 . METHOD_1 ( this ) ; final int VAR_2 = METHOD_2 ( packageName , uid , flags ) ; if ( VAR_3 != null ) { try { VAR_3 . METHOD_3 ( packageName , VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_1 ) ; } } } 
private void METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 , TYPE_2 < java.util.Map < java.lang.String , java.lang.String > > VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) ) { android.util.Log . METHOD_3 ( VAR_4 . TAG , STRING_1 ) ; return ; } if ( VAR_1 . METHOD_4 ( ) ) { android.util.Log.w ( VAR_4 . TAG , STRING_2 ) ; return ; } if ( ! ( VAR_5 ) ) { METHOD_5 ( VAR_1 ) ; } } 
static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , float VAR_3 , float VAR_4 ) { TYPE_2 VAR_5 = VAR_6 . METHOD_2 ( VAR_1 ) ; if ( VAR_5 == null ) { return ; } VAR_7 . append ( new TYPE_3 . Float ( VAR_8 , VAR_9 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , ( - VAR_3 ) , ( - VAR_4 ) , VAR_10 ) , false ) ; } 
static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( VAR_1 > 0 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { TYPE_2 . METHOD_3 ( VAR_5 , 0 , VAR_6 , 0 , VAR_7 ) ; } } return VAR_4 . METHOD_4 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( VAR_2 class ) ; TYPE_2 VAR_3 = METHOD_4 ( false ) ; TYPE_3 VAR_4 = METHOD_5 ( ) ; TYPE_4 VAR_5 = METHOD_6 ( VAR_1 , VAR_6 ) ; METHOD_7 ( null , VAR_3 , null , VAR_1 ) ; METHOD_8 ( VAR_5 , VAR_3 , VAR_1 , VAR_4 ) ; METHOD_9 ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { int [ ] data = VAR_2 . get ( VAR_1 ) ; if ( data == null ) { TYPE_2 VAR_3 = TYPE_2 . get ( VAR_1 ) ; data = new int [ 2 ] ; data [ 0 ] = VAR_4 . METHOD_2 ( ) ; data [ 1 ] = VAR_5 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 , data ) ; } VAR_6 = data [ 0 ] ; VAR_7 = data [ 1 ] ; } 
public boolean METHOD_1 ( ) throws java.lang.Exception { java.lang.String result = device . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; android.util.Log.d ( TAG , ( STRING_2 + result ) ) ; boolean VAR_2 = ( ( VAR_3 . METHOD_3 ( ) ) >= INT_1 ) ? ( result . METHOD_4 ( STRING_3 ) ) && ( result . METHOD_4 ( STRING_4 ) ) : ( result . METHOD_4 ( STRING_5 ) ) && ( result . METHOD_4 ( STRING_6 ) ) ; return VAR_2 ; } 
public void METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 , java.lang.String VAR_3 , java.lang.Integer VAR_4 , java.lang.Integer VAR_5 ) throws android.os.RemoteException { TYPE_1 session ; synchronized ( VAR_6 ) { session = VAR_7 . get ( VAR_1 ) ; } if ( session == null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } byte [ ] VAR_8 = VAR_3 . METHOD_2 ( ) ; session . METHOD_3 ( VAR_2 , VAR_8 , VAR_4 , VAR_5 ) ; } 
TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( TYPE_3 VAR_2 ) { TYPE_4 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_3 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_4 . equals ( VAR_2 ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + VAR_2 ) ) ; return null ; } 
private TYPE_1 METHOD_1 ( java.io.File VAR_1 ) throws java.io.IOException { if ( ( VAR_2 ) == null ) { VAR_2 = TYPE_2 . METHOD_2 ( ) ; } else { TYPE_1 VAR_3 = VAR_2 . get ( VAR_1 ) ; if ( VAR_3 != null ) { return VAR_3 ; } } TYPE_1 VAR_3 = TYPE_3 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 , VAR_3 ) ; return VAR_3 ; } 
public static boolean METHOD_1 ( TYPE_1 context ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( context ) ) { return VAR_2 . METHOD_4 ( VAR_3 , false ) ; } else { return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , false ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_2 VAR_5 , TYPE_4 callback ) { TYPE_5 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , callback ) ; } 
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { TYPE_1 < TYPE_2 < TYPE_3 > > VAR_2 = METHOD_2 ( ) ; for ( TYPE_2 < TYPE_3 > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( VAR_4 , null ) ; VAR_3 . METHOD_3 ( VAR_5 , null ) ; } } TYPE_4 . METHOD_4 ( ) ; } 
private void METHOD_1 ( ) { final boolean VAR_1 = ( VAR_2 ) > ( VAR_3 ) ; final int VAR_4 = ( VAR_1 ) ? VAR_5 : VAR_6 ; android.util.Log.w ( VAR_7 . TAG , ( ( ( ( ( STRING_1 + VAR_4 ) + STRING_2 ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ) ) ; METHOD_2 ( VAR_8 , VAR_4 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_4 VAR_2 = new TYPE_4 ( new TYPE_5 ( ) . METHOD_3 ( VAR_3 ) ) ; VAR_2 . METHOD_4 ( ) ; TYPE_6 item = VAR_2 . METHOD_5 ( new TYPE_5 ( ) . METHOD_6 ( STRING_2 ) , STRING_3 ) ; item . METHOD_7 ( ) ; } 
private TYPE_1 METHOD_1 ( int VAR_1 ) { java.lang.String msg = METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 ) == null ) { TYPE_2 VAR_3 = new TYPE_2 ( mContext ) ; VAR_3 . METHOD_3 ( msg ) ; VAR_3 . METHOD_4 ( false ) ; VAR_3 . METHOD_5 ( VAR_4 , null ) ; VAR_2 = VAR_3 . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) ; } else { VAR_2 . METHOD_3 ( msg ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; super . METHOD_1 ( ) ; TYPE_2 VAR_1 = null ; if ( TYPE_2 . METHOD_3 ( METHOD_4 ( ) ) ) { VAR_1 = TYPE_2 . METHOD_5 ( ) ; } VAR_2 . METHOD_6 ( VAR_1 ) ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) return true ; if ( ! ( VAR_1 instanceof TYPE_1 ) ) return false ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ( VAR_3 ) != ( VAR_4 ) ) return false ; if ( ! ( VAR_5 . equals ( VAR_6 ) ) ) return false ; return TYPE_2 . equals ( VAR_7 , VAR_8 ) ; } 
private static void METHOD_1 ( long [ ] VAR_1 , int VAR_2 , int VAR_3 , int m , int [ ] VAR_4 ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; int VAR_5 = VAR_3 - m ; int j = VAR_4 . length ; while ( ( -- j ) >= 0 ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_4 [ j ] ) + VAR_5 ) ) ; } TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_5 ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Throwable { Main . METHOD_2 ( ) ; Main . METHOD_3 ( ) ; Main . METHOD_4 ( ) ; Main . METHOD_5 ( ) ; Main . METHOD_6 ( ) ; Main . METHOD_7 ( ) ; Main . METHOD_8 ( ) ; Main . METHOD_9 ( ) ; Main . METHOD_10 ( ) ; Main . METHOD_11 ( ) ; Main . METHOD_12 ( ) ; } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , short [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; } 
public void METHOD_1 ( android.os.Message msg ) { switch ( VAR_1 ) { case VAR_2 : TYPE_1 . d ( VAR_3 , ( STRING_1 + ( VAR_4 ) ) ) ; VAR_5 = false ; if ( ( VAR_4 ) == ( VAR_6 ) ) { VAR_7 . METHOD_2 ( VAR_8 ) . METHOD_3 ( VAR_9 ) ; } METHOD_4 ( VAR_10 ) ; break ; } } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; if ( ! ( METHOD_3 ( s ) ) ) { METHOD_4 ( ) ; } else { s . METHOD_5 ( 0 , 0 ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( ) ; } VAR_1 . METHOD_8 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( ( VAR_2 ) != null ) && ( ( VAR_3 ) != null ) ) && ( VAR_4 ) ) { VAR_4 = false ; VAR_5 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; } } 
public static TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( TYPE_4 project , TYPE_2 VAR_1 , TYPE_5 VAR_2 ) { TYPE_6 type = TYPE_7 . METHOD_2 ( VAR_2 ) ; java.lang.String VAR_3 = type . METHOD_3 ( ) ; java.lang.String VAR_4 = type . METHOD_4 ( ) ; if ( VAR_4 == null ) { VAR_4 = type . METHOD_5 ( ) . toString ( ) ; } java.lang.String VAR_5 = type . METHOD_6 ( project ) ; return TYPE_8 . METHOD_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_1 ) ) ; TYPE_2 . assertEquals ( STRING_2 , VAR_1 . METHOD_4 ( ) ) ; TYPE_2 . assertEquals ( STRING_2 , TYPE_2 . METHOD_3 ( VAR_1 ) ) ; } 
public static java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 , STRING_28 , STRING_29 , STRING_30 , STRING_31 , STRING_32 , STRING_33 , STRING_34 , STRING_35 , VAR_1 } ; } 
public boolean METHOD_1 ( ) { if ( VAR_1 ) { android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ; } if ( ! ( METHOD_2 ( ) ) ) { if ( VAR_1 ) { android.util.Log.d ( VAR_2 . TAG , ( STRING_2 + STRING_3 ) ) ; } return true ; } else { if ( VAR_3 ) android.util.Log.d ( VAR_2 . TAG , STRING_4 ) ; } METHOD_3 ( VAR_4 , VAR_5 ) ; if ( ( VAR_6 ) != null ) { METHOD_4 ( ) ; } VAR_7 = false ; return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 res = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . METHOD_3 ( res ) ; java.io.File VAR_2 = TYPE_4 . METHOD_4 ( STRING_1 , STRING_2 ) ; java.io.File VAR_3 = new java.io.File ( VAR_2 , STRING_3 ) ; TYPE_5 < TYPE_1 > VAR_4 = VAR_1 . METHOD_5 ( VAR_3 ) ; assertEquals ( VAR_5 , VAR_4 . status ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , null , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) , TYPE_4 . of ( ) ) ; TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) ; } 
void METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } } catch ( TYPE_1 e ) { } METHOD_4 ( ) ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; if ( ! ( METHOD_3 ( s ) ) ) { result = - 1 ; } else { s . METHOD_4 ( 0 , 0 ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; } VAR_1 . METHOD_7 ( ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 . v ( this , STRING_2 ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_4 . METHOD_3 ( ) . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; VAR_1 = null ; } TYPE_1 . METHOD_5 ( ) ; } 
static boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 ) { TYPE_1 VAR_6 = VAR_7 . METHOD_2 ( VAR_1 ) ; if ( VAR_6 == null ) { return true ; } VAR_8 = new TYPE_2 ( new TYPE_3 . Float ( VAR_2 , VAR_3 , ( VAR_4 - VAR_2 ) , ( VAR_5 - VAR_3 ) ) ) ; return ( VAR_8 . METHOD_3 ( ) . METHOD_4 ( ) ) == false ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; VAR_2 . METHOD_6 ( METHOD_7 ( ) , ( ( VAR_5 ) + 1 ) , 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; METHOD_8 ( VAR_1 . length ( ) ) ; } 
public void METHOD_1 ( TYPE_1 context , android.content.Intent VAR_1 ) { final java.lang.String action = VAR_1 . METHOD_2 ( ) ; if ( TYPE_2 . equals ( action ) ) { TYPE_3 . METHOD_3 ( false ) ; final android.content.Intent VAR_2 = context . METHOD_4 ( null , new TYPE_4 ( VAR_3 ) ) ; if ( VAR_2 != null ) { METHOD_5 ( context , VAR_2 ) ; } } else if ( TYPE_5 . equals ( action ) ) { METHOD_5 ( context , VAR_1 ) ; } } 
public static final int METHOD_1 ( final TYPE_1 input , final int VAR_1 ) throws java.io.IOException { int VAR_2 = 1 ; int VAR_3 = input . METHOD_2 ( ) ; input . METHOD_3 ( VAR_1 ) ; while ( ( input . METHOD_4 ( ) ) > 0 ) { int VAR_4 = input . METHOD_5 ( ) ; if ( VAR_4 != VAR_1 ) { break ; } input . METHOD_3 ( VAR_1 ) ; VAR_2 ++ ; } input . METHOD_6 ( VAR_3 ) ; return VAR_2 ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( new TYPE_2 ( VAR_1 . in ) ) ; java.lang.String line = null ; java.lang.StringBuilder VAR_2 = new java.lang.StringBuilder ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; while ( ( line = in . METHOD_2 ( ) ) != null ) TYPE_4 . METHOD_3 ( line , VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers.eq ( ( ( char ) ( VAR_4 ) ) ) ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; } 
public boolean METHOD_1 ( java.lang.Class < ? extends TYPE_1 > target ) { if ( target == ( VAR_1 class ) ) { return true ; } for ( java.lang.Class < ? extends TYPE_1 > VAR_2 : VAR_3 ) { if ( VAR_2 . METHOD_2 ( target ) ) { return true ; } } return false ; } 
public synchronized void METHOD_1 ( long time , int type , int id , float ... values ) { assert ( values . length ) == ( VAR_1 ) ; float VAR_2 = FLOAT_1 ; for ( float value : values ) { VAR_2 += value ; } VAR_3 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ; VAR_4 . METHOD_1 ( new TYPE_2 ( ( ( time - ( VAR_5 ) ) / FLOAT_2 ) , type , id , values ) ) ; } 
public synchronized void start ( ) { if ( ( VAR_1 ) != 0 ) throw new TYPE_1 ( ) ; VAR_2 . METHOD_1 ( this ) ; VAR_3 = false ; try { TYPE_2 . METHOD_2 ( this , VAR_4 , VAR_5 ) ; VAR_3 = true ; } finally { try { if ( ! ( VAR_3 ) ) { VAR_2 . METHOD_3 ( this ) ; } } catch ( java.lang.Throwable VAR_6 ) { } } } 
public static void METHOD_1 ( java.lang.String [ ] args ) throws java.io.IOException { TYPE_1 TYPE_2 = new TYPE_1 ( ) ; if ( ! ( TYPE_2 . METHOD_2 ( args ) ) ) { TYPE_2 . METHOD_3 ( ) ; return ; } boolean VAR_1 = TYPE_2 . run ( ) ; TYPE_3 . METHOD_4 ( ( VAR_1 ? 0 : 1 ) ) ; } 
public final void METHOD_1 ( TYPE_1 VAR_1 ) { final long VAR_2 = TYPE_2 . METHOD_2 ( ) ; synchronized ( this ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_3 ( VAR_1 ) ; if ( VAR_3 != null ) { TYPE_4 . METHOD_4 ( VAR_1 ) ; } } TYPE_2 . METHOD_5 ( VAR_2 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String path ) { int VAR_2 = VAR_1 . METHOD_2 ( path ) ; if ( VAR_2 == 0 ) { throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; } TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , VAR_1 , null ) ; VAR_3 . METHOD_3 ( ) ; return VAR_3 ; } 
public void METHOD_1 ( ) { android.os.Message VAR_1 = METHOD_2 ( ) ; android.util.Log . i ( TYPE_1 . TAG , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_1 == null ? STRING_3 : TYPE_1 . METHOD_3 ( VAR_3 ) ) ) ) ; VAR_4 = VAR_5 ; METHOD_4 ( VAR_6 ) ; METHOD_5 ( VAR_7 ) ; METHOD_6 ( VAR_4 , VAR_8 ) ; METHOD_7 ( VAR_9 , VAR_10 ) ; } 
java.util.Map < TYPE_1 , java.util.Map < TYPE_2 , TYPE_3 > > METHOD_1 ( ) { TYPE_4 < java.util.Map < TYPE_2 , TYPE_5 > , java.util.Map < TYPE_2 , TYPE_3 > > VAR_1 = new TYPE_4 < java.util.Map < TYPE_2 , TYPE_5 > , java.util.Map < TYPE_2 , TYPE_3 > > ( ) { public java.util.Map < TYPE_2 , TYPE_3 > METHOD_2 ( java.util.Map < TYPE_2 , TYPE_5 > VAR_2 ) { return TYPE_6 . METHOD_3 ( VAR_2 , VAR_3 ) ; } } ; return TYPE_6 . METHOD_3 ( VAR_4 . METHOD_4 ( ) , VAR_1 ) ; } 
public boolean METHOD_1 ( java.lang.String key , int uid ) { try { return ( VAR_1 . METHOD_1 ( key , uid ) ) == ( VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) ; return false ; } } 
private void METHOD_1 ( TYPE_1 info , java.io.File VAR_1 ) { if ( TYPE_2 . METHOD_2 ( ) ) { return ; } try { int uid = TYPE_2 . METHOD_3 ( ) ; java.lang.String [ ] VAR_2 = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( uid ) ; if ( ( VAR_2 != null ) && ( ( VAR_2 . length ) == 1 ) ) { TYPE_4 . METHOD_6 ( VAR_1 ) ; TYPE_5 . METHOD_6 ( VAR_1 ) ; } } catch ( android.os.RemoteException e ) { } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; assertEquals ( STRING_1 , ( ( java.lang.String ) ( VAR_1 . get ( VAR_2 ) ) ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; METHOD_3 ( VAR_1 . get ( STRING_2 ) ) ; } 
protected boolean METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ; if ( VAR_2 ) { METHOD_2 ( ) ; VAR_2 = false ; } if ( ( VAR_3 ) != null ) { for ( android.bluetooth.BluetoothDevice device : VAR_3 . METHOD_3 ( ) ) { int VAR_4 = METHOD_4 ( device ) ; if ( VAR_4 != ( VAR_5 ) ) { METHOD_5 ( device , VAR_6 ) ; } } VAR_3 . METHOD_6 ( ) ; } TYPE_1 . METHOD_7 ( ) ; return true ; } 
public void METHOD_1 ( java.lang.String v ) throws java.io.IOException { try { byte [ ] VAR_1 = v . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ( ( short ) ( VAR_1 . length ) ) ) ; for ( byte b : VAR_1 ) { METHOD_4 ( b ) ; } } catch ( TYPE_1 e ) { throw new java.lang.RuntimeException ( e ) ; } } 
private void METHOD_1 ( TYPE_1 f ) throws java.lang.Exception { TYPE_2 VAR_1 = METHOD_2 ( f , VAR_2 ) ; byte [ ] VAR_3 = METHOD_3 ( VAR_2 ) ; assertEquals ( TYPE_3 . toString ( VAR_1 . METHOD_1 ( ) ) , TYPE_3 . toString ( VAR_3 ) ) ; } 
public static java.io.File METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 , java.io.IOException { try { final java.io.File VAR_1 = TYPE_4 . METHOD_1 ( VAR_2 ) ; TYPE_5 . METHOD_2 ( ) . METHOD_3 ( new TYPE_6 ( ) { public void run ( ) { try { TYPE_7 . METHOD_4 ( VAR_1 ) ; } catch ( java.io.IOException e ) { VAR_3 . println ( e.getMessage ( ) ) ; } } } ) ; return VAR_1 ; } catch ( TYPE_8 e ) { throw new java.io.IOException ( e ) ; } } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( context , VAR_1 ) ; VAR_2 . METHOD_2 ( TYPE_4 . METHOD_3 ( context , VAR_1 ) , VAR_3 ) ; TYPE_5 . METHOD_4 ( context , VAR_1 ) ; TYPE_6 . start ( context , VAR_1 ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) throws java.io.IOException { if ( ! ( TYPE_1 . METHOD_2 ( args ) ) ) { TYPE_1 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ( - 1 ) ) ; } long start = TYPE_2 . METHOD_5 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_6 ( ) ; long VAR_2 = TYPE_2 . METHOD_5 ( ) ; java.lang.System.out.println ( ( STRING_1 + ( ( VAR_2 - start ) / INT_1 ) ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 , VAR_1 ) ; for ( int i = 0 , size = VAR_3 . size ( ) ; i < size ; ++ i ) { TYPE_1 type = VAR_3 . get ( i ) ; if ( type . equals ( VAR_1 ) ) { VAR_3 . set ( i , VAR_2 ) ; } } } 
public void METHOD_1 ( TYPE_1 listener ) { synchronized ( VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 ) { if ( ( VAR_3 ) == listener ) { VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; listener . METHOD_4 ( ) . METHOD_5 ( VAR_2 , 0 ) ; return ; } } } } 
boolean METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String name ) { if ( ( VAR_3 ) < ( TYPE_1 . METHOD_2 ( ) ) ) { return true ; } final int VAR_4 = METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , ( - 1 ) ) ; if ( VAR_4 == ( VAR_6 ) ) { return true ; } android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , ( ( ( name + STRING_1 ) + VAR_2 ) + STRING_2 ) ) ; return false ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; TYPE_2 < TYPE_3 < TYPE_4 , TYPE_5 > > VAR_3 = METHOD_4 ( ) . METHOD_5 ( ) ; while ( VAR_3 . METHOD_6 ( ) ) { TYPE_3 < TYPE_4 , TYPE_5 > entry = VAR_3 . METHOD_7 ( ) ; VAR_1 . METHOD_1 ( entry . METHOD_8 ( ) ) ; VAR_1 . METHOD_1 ( entry . METHOD_9 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) { return VAR_4 . METHOD_4 ( ) ; } else { return ( ( TYPE_1 ) ( scheduler . METHOD_5 ( ) . METHOD_6 ( VAR_5 class ) ) ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = null ; TYPE_3 service = METHOD_2 ( ) ; if ( service != null ) { VAR_2 = service . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { METHOD_3 ( STRING_1 ) ; } } return VAR_2 ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { android.content.Intent VAR_3 = new android.content.Intent ( VAR_4 ) ; VAR_3 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_5 , VAR_2 , 0 ) ) ; VAR_1 . METHOD_4 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 , null , null , VAR_9 , null , null ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final short VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_2 ) ; args . METHOD_2 ( STRING_2 , 0 ) ; args . METHOD_2 ( STRING_3 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; TYPE_4 . METHOD_5 ( VAR_4 ) ; } 
protected final void METHOD_1 ( ) throws java.lang.Throwable { try { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; } synchronized ( VAR_2 ) { transitionTo ( VAR_3 ) ; } } finally { super . METHOD_1 ( ) ; } } 
public byte [ ] METHOD_1 ( byte [ ] VAR_1 ) throws java.io.IOException { TYPE_1 in = new TYPE_2 ( new TYPE_3 ( VAR_1 ) ) ; TYPE_4 out = new TYPE_4 ( ) ; byte [ ] VAR_2 = new byte [ INT_1 ] ; int count ; while ( ( count = in . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ) { out . METHOD_3 ( VAR_2 , 0 , count ) ; } return out . METHOD_4 ( ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 VAR_2 ; assert ( ( VAR_2 = VAR_3 . METHOD_2 ( ) ) == null ) || ( METHOD_3 ( ) . get ( VAR_4 ) . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( METHOD_6 ( METHOD_7 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_8 ( x , e ) ; } } 
public boolean METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) || ( METHOD_4 ( ) ) ) { final long VAR_2 = TYPE_1 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; return true ; } finally { TYPE_1 . METHOD_7 ( VAR_2 ) ; } } else { throw new TYPE_2 ( STRING_1 ) ; } } 
public void METHOD_1 ( ) { java.lang.Class < ? > target = VAR_1 class ; java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( target , null , VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_4 ( VAR_5 , VAR_6 , VAR_7 , 0 , VAR_2 ) ; VAR_4 . run ( null ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( VAR_8 class , ( ( target . getName ( ) ) + STRING_1 ) ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( VAR_9 ) ; } 
public static TYPE_1 [ ] METHOD_1 ( TYPE_1 project ) throws TYPE_2 { TYPE_1 [ ] VAR_1 = project . METHOD_1 ( ) ; java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 p : VAR_1 ) { if ( ( p . METHOD_2 ( ) ) && ( p . METHOD_3 ( VAR_3 ) ) ) { VAR_2 . METHOD_4 ( p ) ; } } return VAR_2 . METHOD_5 ( new TYPE_1 [ VAR_2 . size ( ) ] ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 v = new TYPE_2 ( ) ; v . METHOD_2 ( new TYPE_3 ( VAR_1 ) ) ; if ( ( VAR_2 ) != 16 ) { v . METHOD_2 ( new TYPE_4 ( VAR_2 ) ) ; } return new TYPE_5 ( v ) ; } 
private byte [ ] METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) { int key = VAR_2 . size ( ) ; VAR_2 . METHOD_3 ( key , VAR_1 ) ; return METHOD_4 ( key ) ; } else { for ( int key : VAR_2 . METHOD_5 ( ) ) { if ( VAR_2 . get ( key ) . equals ( VAR_1 ) ) { return METHOD_4 ( key ) ; } } } return null ; } 
public java.util.Map < TYPE_1 , java.util.Map < java.lang.String , TYPE_2 > > METHOD_1 ( TYPE_3 VAR_1 ) { java.util.Map < TYPE_1 , java.util.Map < java.lang.String , TYPE_2 > > VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 class ) ; synchronized ( VAR_4 ) { for ( TYPE_1 key : TYPE_1 . values ( ) ) { VAR_2 . METHOD_3 ( key , METHOD_4 ( key , VAR_1 ) ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( 100 , 100 , VAR_2 ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( 0 , true ) ) ; VAR_3 . METHOD_4 ( 0 , 0 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; VAR_3 . METHOD_7 ( ) ; TYPE_1 VAR_4 = TYPE_4 . METHOD_8 ( VAR_1 ) ; METHOD_9 ( VAR_4 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 in ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( int i = in . METHOD_2 ( 0 ) ; i >= 0 ; i = in . METHOD_2 ( ( i + 1 ) ) ) { assert ! ( VAR_2 . METHOD_3 ( VAR_1 . get ( i ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 . get ( i ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.io.File VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = VAR_3 . METHOD_5 ( ) . get ( STRING_2 ) ; assertEquals ( 1 , VAR_4 . size ( ) ) ; assertFalse ( VAR_4 . get ( 0 ) . METHOD_6 ( ) ) ; METHOD_7 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = METHOD_2 ( ) ; java.io.File VAR_2 = TYPE_1 . METHOD_3 ( ) ; TYPE_2 VAR_3 = TYPE_1 . METHOD_4 ( VAR_4 class ) ; VAR_3 . METHOD_5 ( VAR_1 , VAR_2 , false ) ; METHOD_6 ( VAR_2 , VAR_5 , STRING_1 , false ) ; METHOD_6 ( VAR_2 , VAR_6 , STRING_2 , false ) ; METHOD_6 ( VAR_2 , VAR_7 , STRING_3 , false ) ; METHOD_6 ( VAR_2 , VAR_8 , STRING_4 , false ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String name , boolean VAR_1 ) { TYPE_2 VAR_2 = null ; if ( VAR_1 ) { java.util.Map < java.lang.String , TYPE_2 > VAR_3 = VAR_4 . get ( VAR_5 ) ; VAR_2 = VAR_3 . get ( name ) ; } else { java.util.Map < java.lang.String , TYPE_2 > VAR_6 = VAR_7 . get ( VAR_5 ) ; VAR_2 = VAR_6 . get ( name ) ; } if ( VAR_2 instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( VAR_2 ) ) ; } return null ; } 
public void METHOD_1 ( ) { assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) ) ) ; assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) . METHOD_3 ( VAR_1 , STRING_3 ) . METHOD_3 ( VAR_2 , STRING_3 ) ) ) ; assertFalse ( METHOD_2 ( STRING_4 , new TYPE_1 ( STRING_5 ) ) ) ; assertFalse ( METHOD_2 ( STRING_4 , new TYPE_1 ( STRING_5 ) . METHOD_3 ( VAR_1 , STRING_6 ) . METHOD_3 ( VAR_2 , STRING_6 ) ) ) ; } 
private void METHOD_1 ( TYPE_1 request , TYPE_2 VAR_1 , int VAR_2 , int VAR_3 , TYPE_3 VAR_4 ) { TYPE_4 VAR_5 = new TYPE_4 ( VAR_4 ) ; TYPE_5 VAR_6 = VAR_7 ; METHOD_2 ( VAR_6 , VAR_1 , VAR_2 , VAR_8 , VAR_3 , VAR_5 ) ; } 
public static synchronized void METHOD_1 ( TYPE_1 context ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) ) { VAR_1 . METHOD_3 ( true ) ; } VAR_1 = new TYPE_2 ( context ) ; VAR_1 . METHOD_4 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { VAR_1 . METHOD_2 ( ) ; VAR_2 = ( ( TYPE_3 < ? extends TYPE_4 < TYPE_5 > > ) ( VAR_1 . METHOD_1 ( ) ) ) ; java.util.Map < TYPE_6 , TYPE_4 < TYPE_5 > > VAR_3 = ( ( java.util.Map < TYPE_6 , TYPE_4 < TYPE_5 > > ) ( VAR_1 . METHOD_1 ( ) ) ) ; TYPE_7 . METHOD_3 ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( VAR_7 , VAR_8 , null ) ; org.mockito.Mockito.verify ( VAR_5 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_9 ) ) . METHOD_9 ( VAR_6 , VAR_8 , null ) ; } 
public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } java.lang.String VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { java.lang.String VAR_4 = ( VAR_5 ) + VAR_3 ; return VAR_6 . METHOD_4 ( VAR_4 , null ) ; } return null ; } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , float VAR_5 , int VAR_6 ) { TYPE_1 VAR_7 = VAR_8 . METHOD_2 ( VAR_1 ) ; if ( VAR_7 == null ) { return ; } VAR_7 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 pos = ( ( TYPE_2 ) ( METHOD_2 ( VAR_1 ) ) ) ; if ( pos != null ) { return TYPE_1 . METHOD_3 ( VAR_2 , pos , ( ( TYPE_2 ) ( pos . METHOD_4 ( ) ) ) ) ; } return null ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { TYPE_3 element = VAR_1 . METHOD_2 ( ) ; if ( element . METHOD_3 ( VAR_2 , VAR_3 ) ) { context . METHOD_4 ( VAR_4 , element , context . METHOD_5 ( VAR_1 ) , ( STRING_1 + STRING_2 ) , null ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( 2 ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , true , INT_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; TYPE_4 . METHOD_2 ( VAR_3 ) ; VAR_3 . start ( ) ; VAR_2 . METHOD_3 ( 0 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , android.os.Bundle VAR_3 ) { try { if ( VAR_3 != null ) { VAR_3 . METHOD_2 ( false ) ; } return TYPE_2 . METHOD_3 ( ) . METHOD_1 ( VAR_1 , VAR_2 , 0 , VAR_3 , null , null , METHOD_4 ( ) ) ; } catch ( android.os.RemoteException e ) { } return false ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = new TYPE_4 ( VAR_5 , VAR_6 , VAR_7 ) ; TYPE_5 . METHOD_3 ( VAR_8 , ret ) ; } VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) ; } } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 , STRING_3 ) { protected void METHOD_2 ( ) { } } ; VAR_1 . METHOD_3 ( VAR_5 , new TYPE_2 ( STRING_4 ) ) ; return VAR_1 ; } 
public int METHOD_1 ( ) { int VAR_1 = ( ( VAR_2 . METHOD_1 ( ) ) != null ) ? VAR_2 . METHOD_1 ( ) : 1 ; if ( ( VAR_1 == ( - 1 ) ) && ( ( VAR_3 ) != ( VAR_4 ) ) ) { VAR_1 = METHOD_2 ( ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; int VAR_2 = INT_1 ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( 10 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( 100 ) . METHOD_3 ( ) ; TYPE_2 VAR_5 = METHOD_4 ( VAR_1 , VAR_2 ) ; VAR_5 . METHOD_5 ( true ) ; try { VAR_5 . METHOD_6 ( VAR_3 , VAR_4 ) ; fail ( STRING_2 ) ; } catch ( TYPE_3 VAR_6 ) { } catch ( java.lang.Exception e ) { fail ( ( e + STRING_3 ) ) ; } } 
private void println ( java.lang.String format , java.lang.Object ... args ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { if ( ! ( format . METHOD_1 ( STRING_1 ) ) ) { format += STRING_1 ; } VAR_3 . METHOD_2 ( format , args ) ; } } 
public int METHOD_1 ( TYPE_1 < ? super TYPE_2 > c , int VAR_1 ) { if ( c == null ) throw new java.lang.NullPointerException ( ) ; if ( c == ( this ) ) throw new java.lang.IllegalArgumentException ( ) ; int n = 0 ; TYPE_2 e ; while ( ( n < VAR_1 ) && ( ( e = METHOD_2 ( ) ) != null ) ) { c . METHOD_3 ( e ) ; ++ n ; } return n ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) { VAR_5 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; VAR_5 . METHOD_4 ( STRING_1 ) ; assertEquals ( ( STRING_2 + VAR_1 ) , VAR_2 , VAR_5 . format ( VAR_4 ) ) ; VAR_5 . METHOD_4 ( STRING_3 ) ; assertEquals ( ( STRING_4 + VAR_1 ) , VAR_3 , VAR_5 . format ( VAR_4 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 ) { for ( TYPE_5 VAR_8 : VAR_9 ) { TYPE_1 VAR_10 = VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; if ( VAR_10 != null ) { return VAR_10 ; } } return null ; } 
public boolean METHOD_1 ( java.lang.String name , int result ) { if ( METHOD_2 ( ) ) return false ; long VAR_1 = this . key . METHOD_3 ( ) ; this . VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_1 , this . VAR_2 . size ( ) , name , result ) ) ; return true ; } 
public void METHOD_1 ( TYPE_1 context , android.content.Intent VAR_1 ) { java.lang.String action = VAR_1 . METHOD_2 ( ) ; if ( action . equals ( VAR_2 ) ) { METHOD_3 ( VAR_3 , 1 ) ; } else if ( action . equals ( VAR_4 ) ) { METHOD_3 ( VAR_3 , 0 ) ; } else if ( action . equals ( VAR_5 ) ) { METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_3 , VAR_4 , STRING_1 ) ; METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_6 , VAR_1 , VAR_7 ) ; VAR_5 . METHOD_7 ( VAR_6 , VAR_1 , VAR_8 ) ; VAR_5 . METHOD_8 ( STRING_2 , VAR_1 ) ; VAR_5 . METHOD_9 ( STRING_3 , VAR_7 ) ; VAR_5 . METHOD_10 ( STRING_4 , VAR_7 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 ; } if ( ( VAR_4 ) == null ) { return null ; } TYPE_2 VAR_5 = VAR_4 . METHOD_3 ( VAR_1 ) ; if ( VAR_5 != null ) { return VAR_3 . index ( VAR_5 ) ; } return null ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { java.io.File VAR_2 = VAR_3 ; long VAR_4 = TYPE_2 . METHOD_2 ( VAR_2 ) ; java.io.File VAR_5 = new java.io.File ( VAR_6 , STRING_1 ) ; TYPE_3 . METHOD_3 ( VAR_5 ) ; java.io.File VAR_7 = new java.io.File ( VAR_6 , STRING_2 ) ; TYPE_3 . METHOD_3 ( VAR_7 ) ; return new TYPE_1 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_4 ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_7 ) ; } 
public void run ( ) { VAR_1 . METHOD_1 ( this ) ; final int VAR_2 = METHOD_2 ( packageName , true , true , flags ) ; if ( VAR_3 != null ) { try { VAR_3 . METHOD_3 ( packageName , VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_1 ) ; } } } 
private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; for ( TYPE_2 VAR_3 : VAR_1 . METHOD_4 ( ) ) { VAR_2 . METHOD_5 ( TYPE_4 . METHOD_1 ( VAR_3 ) ) ; } return VAR_2 ; } 
private static TYPE_1 [ ] METHOD_1 ( byte [ ] [ ] VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_1 . length ] ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { try { VAR_2 [ i ] = new TYPE_2 ( VAR_1 [ i ] ) ; } catch ( java.io.IOException e ) { return null ; } } return VAR_2 ; } 
static float METHOD_1 ( int VAR_1 , java.lang.String text , int start , int VAR_2 , int VAR_3 , int VAR_4 , int flags , float [ ] VAR_5 , int VAR_6 ) { int count = VAR_2 - start ; char [ ] VAR_7 = TYPE_1 . METHOD_2 ( count ) ; TYPE_2 . METHOD_3 ( text , start , VAR_2 , VAR_7 , 0 ) ; return TYPE_3 . METHOD_1 ( VAR_1 , VAR_7 , 0 , count , VAR_3 , ( VAR_4 - VAR_3 ) , flags , VAR_5 , VAR_6 ) ; } 
private TYPE_1 METHOD_1 ( java.io.File VAR_1 ) throws TYPE_2 { try { return new TYPE_1 ( VAR_1 ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( METHOD_2 ( ) , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_4 ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ; VAR_3 . verify ( VAR_5 ) . METHOD_5 ( VAR_6 ) ; VAR_3 . verify ( VAR_4 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; TYPE_2 . METHOD_7 ( VAR_5 , VAR_10 , VAR_4 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 ) { if ( VAR_1 instanceof TYPE_3 ) { return METHOD_1 ( ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_2 ( ) ) ; } final java.util.List < TYPE_1 > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { return TYPE_4 . METHOD_3 ( VAR_2 ) ; } return METHOD_4 ( VAR_1 ) ; } 
public static void METHOD_1 ( int id , java.lang.String name ) { try { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( id ) ; TYPE_1 . METHOD_4 ( id , VAR_2 , TYPE_1 . METHOD_5 ( ) . METHOD_6 ( name ) ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_7 ( e ) ; } finally { VAR_1 . METHOD_8 ( ) ; } } 
public static < TYPE_1 > TYPE_1 [ ] METHOD_1 ( TYPE_1 [ ] VAR_1 , int VAR_2 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( ) ; } if ( VAR_2 < 0 ) { throw new TYPE_2 ( ) ; } return TYPE_3 . METHOD_2 ( VAR_1 , 0 , VAR_2 ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; s . METHOD_3 ( STRING_1 ) ; s . METHOD_4 ( 0 , 0 ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; } 
public void METHOD_1 ( int VAR_1 , int count , float [ ] d ) { TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; int VAR_3 = ( VAR_4 . METHOD_3 ( ) ) * count ; METHOD_4 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_3 ) ; mRS . METHOD_5 ( METHOD_6 ( ) , VAR_1 , VAR_5 , count , d , VAR_3 ) ; TYPE_1 . METHOD_7 ( VAR_2 ) ; } 
public java.lang.Object METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; if ( ( VAR_2 ) != null ) { VAR_3 = new TYPE_2 < java.lang.Object > ( VAR_2 ) ; VAR_4 = new TYPE_2 < TYPE_3 > ( VAR_5 ) ; } return VAR_1 ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( e.toString ( ) ) ; } } 
public void METHOD_1 ( ) { try { TYPE_1 source = new TYPE_1 ( ) ; source . METHOD_2 ( VAR_1 ) ; source . METHOD_2 ( VAR_1 ) ; source . METHOD_2 ( VAR_2 ) ; TYPE_1 target = new TYPE_1 ( ) ; target . METHOD_2 ( VAR_1 ) ; target . METHOD_2 ( VAR_2 ) ; target . METHOD_2 ( VAR_2 ) ; METHOD_3 ( source , target ) ; } catch ( java.lang.Exception e ) { fail ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertFalse ( STRING_1 , ( 0 == ( VAR_1 . METHOD_2 ( ) ) ) ) ; assertFalse ( STRING_2 , ( 0 > ( VAR_1 . METHOD_2 ( ) ) ) ) ; } 
private void METHOD_1 ( TYPE_1 e , TYPE_2 c , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { java.lang.String VAR_3 = null ; int VAR_4 = 0 ; VAR_4 = c . METHOD_2 ( VAR_5 ) ; if ( VAR_6 ) android.util.Log.d ( TYPE_5 . TAG , ( STRING_1 + VAR_3 ) ) ; e . METHOD_3 ( ( VAR_4 == 1 ? true : false ) , ( ( ( VAR_2 . METHOD_4 ( ) ) & ( VAR_7 ) ) != 0 ) ) ; } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 ) { TYPE_1 d = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return ; } VAR_6 = TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; } 
public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( false ) ; if ( METHOD_3 ( ) ) { boolean ret = METHOD_4 ( new TYPE_2 < TYPE_3 > ( ) { public TYPE_3 call ( ) { return METHOD_1 ( VAR_1 ) ; } } ) ; return ret ; } return VAR_3 . METHOD_5 ( ) . METHOD_1 ( VAR_1 ) ; } 
public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long res = 0 ; long VAR_3 = - arg1 ; long VAR_4 = - VAR_1 ; for ( long i = 0 ; i < 1 ; i ++ ) { res += ( VAR_3 + VAR_4 ) + i ; } return res ; } 
public static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 test , boolean VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = ( ( java.util.List < TYPE_1 > ) ( TYPE_2 . METHOD_2 ( test , VAR_1 ) ) ) ; java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_3 ( ) ; for ( TYPE_1 VAR_4 : VAR_2 ) { VAR_3 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ; } return VAR_3 ; } 
private static void METHOD_1 ( java.lang.Class < ? > c ) throws java.lang.Exception { boolean VAR_1 = Main . METHOD_2 ( c ) ; boolean VAR_2 = Main . METHOD_3 ( c ) ; boolean VAR_3 = Main . METHOD_4 ( c ) ; java.lang.System.out.println ( ( ( ( ( ( ( ( c . getName ( ) ) + STRING_1 ) + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) + VAR_3 ) ) ; } 
void METHOD_1 ( ) { synchronized ( VAR_1 ) { ( VAR_2 ) -- ; if ( ( VAR_2 ) == ( - 1 ) ) { if ( ( fd ) != null ) { try { METHOD_2 ( ) ; } catch ( java.io.IOException e ) { } finally { fd = null ; } } } } } 
public long METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return - 1 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return - 1 ; return service . METHOD_1 ( ) ; } 
public void METHOD_1 ( TYPE_1 obj ) { if ( TYPE_2 . METHOD_2 ( ) ) { if ( obj != null ) { VAR_1 . METHOD_1 ( obj . METHOD_3 ( ) ) ; } else { VAR_1 . METHOD_1 ( null ) ; } return ; } if ( obj != null ) { METHOD_4 ( obj . METHOD_5 ( null ) ) ; } else { METHOD_4 ( 0 ) ; } } 
public void run ( final TYPE_1 VAR_1 ) { com.android.jack.ir.ast.JMethod method = VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_1 . METHOD_4 ( true ) . size ( ) , ( ( ( ( VAR_4 . getName ( method ) ) + STRING_1 ) + ( VAR_4 . getName ( method . METHOD_5 ( ) ) ) ) + STRING_2 ) ) ; } 
public TYPE_1 METHOD_1 ( byte x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( ) ) , x ) ; return this ; } 
public void METHOD_1 ( TYPE_1 from ) throws TYPE_2 { final int VAR_1 = 6 ; if ( from != null ) { METHOD_2 ( STRING_1 , TYPE_3 . METHOD_3 ( from . METHOD_4 ( ) , VAR_1 ) ) ; this . VAR_2 = new TYPE_1 [ ] { from } ; } else { this . VAR_2 = null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; int VAR_1 = 6 ; METHOD_3 ( VAR_1 , false , false ) ; assertNotNull ( VAR_2 ) ; VAR_2 . METHOD_4 ( VAR_3 , TYPE_1 . METHOD_5 ( VAR_4 ) , VAR_5 , TYPE_1 . METHOD_6 ( VAR_6 ) ) ; org.mockito.Mockito.verify ( VAR_7 ) . METHOD_7 ( org.mockito.Matchers.eq ( VAR_8 ) , org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_8 ( VAR_9 class ) , org.mockito.Matchers.eq ( VAR_4 ) , org.mockito.Matchers.eq ( VAR_10 ) ) ; } 
public void METHOD_1 ( ) { assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) ; assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) ; assertTrue ( STRING_3 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_3 ) ) ) ) ; assertTrue ( STRING_4 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_4 ) ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( 2 ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , false , INT_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; TYPE_4 . METHOD_2 ( VAR_3 ) ; VAR_3 . start ( ) ; VAR_2 . METHOD_3 ( 0 ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { final TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; Main . METHOD_2 ( ) ; for ( int t = 0 ; t < ( VAR_1 . length ) ; t ++ ) { VAR_1 [ t ] = new TYPE_1 ( new Main ( ) ) ; VAR_1 [ t ] . start ( ) ; } for ( TYPE_1 t : VAR_1 ) { t . METHOD_3 ( ) ; } java.lang.System.out.println ( STRING_1 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Object data ) { java.lang.String VAR_3 = METHOD_2 ( VAR_2 ) ; TYPE_1 . log ( VAR_4 , STRING_1 , VAR_5 , VAR_3 ) ; if ( TYPE_2 . equals ( VAR_1 ) ) { if ( ( VAR_3 . equals ( STRING_2 ) ) || ( VAR_3 . equals ( STRING_3 ) ) ) { VAR_1 = VAR_6 ; } } METHOD_3 ( VAR_1 , VAR_3 ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . METHOD_1 ( VAR_2 , VAR_3 ) ) && ( TYPE_2 . METHOD_1 ( VAR_4 , VAR_5 ) ) ; } 
public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 0 , 1 , false ) ; TYPE_3 in = t . METHOD_3 ( args . in ) ; args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_7 ( ) ) ) ; } 
public java.lang.String METHOD_1 ( int x , int y ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( ) ; while ( VAR_1 . METHOD_3 ( ) ) { TYPE_2 c = VAR_1 . METHOD_4 ( ) ; METHOD_5 ( c , VAR_3 ) ; if ( VAR_3 . METHOD_6 ( x , y ) ) { return METHOD_7 ( c ) ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 options = TYPE_2 . METHOD_4 ( VAR_1 ) ; options . METHOD_5 ( METHOD_6 ( ) ) ; TYPE_3 . METHOD_7 ( options , VAR_2 , TYPE_2 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) , VAR_3 ) ; TYPE_4 . METHOD_10 ( INT_1 ) ; TYPE_5 . METHOD_11 ( new TYPE_6 ( new TYPE_7 ( VAR_4 . out ) ) ) ; TYPE_5 . METHOD_12 ( new TYPE_6 ( new TYPE_7 ( VAR_5 ) ) ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { if ( ( ( VAR_3 . METHOD_2 ( ) ) == VAR_1 ) && ( ( VAR_3 . METHOD_3 ( ) ) == VAR_2 ) ) { return VAR_3 ; } } return null ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) { METHOD_3 ( ) ; try { TYPE_3 VAR_4 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 == null ) { throw new TYPE_2 ( STRING_1 , VAR_5 ) ; } VAR_2 = new TYPE_1 ( VAR_4 ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; } } return VAR_2 ; } 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = null ; try { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_1 = VAR_2 . METHOD_3 ( METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) ) ; } } catch ( android.os.RemoteException ex ) { } return TYPE_4 . METHOD_6 ( VAR_1 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public static void METHOD_1 ( java.lang.String VAR_1 , byte [ ] data ) { try { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( data ) ; VAR_2 . METHOD_3 ( ) ; } catch ( java.io.IOException e ) { android.util.Log.e ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } } 
private int METHOD_1 ( int x , int y ) { x -= METHOD_2 ( ) ; y -= METHOD_3 ( ) ; x += METHOD_4 ( ) ; y += METHOD_5 ( ) ; TYPE_1 VAR_1 = METHOD_6 ( ) ; if ( VAR_1 == null ) { return - 1 ; } int line = VAR_1 . METHOD_7 ( y ) ; int VAR_2 = VAR_1 . METHOD_8 ( line , x ) ; return VAR_2 ; } 
private void METHOD_1 ( ) { try { VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ; } catch ( TYPE_1 e ) { METHOD_3 ( e.getMessage ( ) ) ; } catch ( java.io.IOException e ) { METHOD_3 ( e.getMessage ( ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; METHOD_2 ( VAR_1 . getName ( ) ) ; VAR_1 = new TYPE_1 ( STRING_2 ) ; METHOD_2 ( VAR_1 . getName ( ) ) ; try { new TYPE_1 ( STRING_3 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { final java.lang.String name = VAR_1 . getName ( ) ; if ( name == null ) { throw new java.lang.NullPointerException ( ) ; } METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; if ( VAR_2 . METHOD_4 ( VAR_1 , this ) ) { METHOD_5 ( VAR_1 , name , ( name + STRING_1 ) ) ; return true ; } else { return false ; } } 
public TYPE_1 METHOD_1 ( java.lang.String [ ] args ) throws TYPE_2 { try { TYPE_3 options = TYPE_4 . METHOD_2 ( args ) ; options . METHOD_3 ( VAR_1 ) ; options . METHOD_4 ( VAR_2 ) ; return new TYPE_5 ( options ) ; } catch ( TYPE_6 e ) { throw new TYPE_2 ( e.getMessage ( ) , e ) ; } catch ( java.io.IOException | TYPE_7 e ) { throw new TYPE_2 ( e.getMessage ( ) , e ) ; } } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , TYPE_1 VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) ; return false ; } TYPE_3 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device , VAR_1 ) ; } 
public boolean METHOD_1 ( TYPE_1 config , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 VAR_3 , TYPE_4 callback ) { if ( VAR_4 ) android.util.Log.v ( VAR_5 . TAG , STRING_1 ) ; TYPE_5 service = METHOD_2 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( config , VAR_1 , VAR_2 , VAR_3 , callback ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { if ( x . METHOD_2 ( ) ) { METHOD_3 ( ) ; } else { java.util.List < TYPE_3 > VAR_2 = METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; if ( ( ( VAR_5 ) & ( VAR_6 ) ) != 0 ) { METHOD_7 ( ) ; } } METHOD_8 ( ) ; } catch ( java.lang.Throwable e ) { throw METHOD_9 ( x , e ) ; } } 
static void METHOD_1 ( int VAR_1 , int x , int y , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return ; } VAR_3 . METHOD_3 ( ) . METHOD_4 ( x , y , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) ; assertTrue ( TYPE_1 . equals ( VAR_4 , VAR_1 . get ( VAR_2 ) ) ) ; assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; METHOD_5 ( VAR_1 . get ( VAR_2 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = new TYPE_3 ( ) ; try { TYPE_4 . METHOD_2 ( options , VAR_1 ) ; } catch ( TYPE_5 . sched e ) { throw new TYPE_2 ( e.getMessage ( ) , e ) ; } catch ( TYPE_6 e ) { throw new TYPE_2 ( e.getMessage ( ) , e ) ; } return new TYPE_7 ( options ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 method , TYPE_4 call ) { java.lang.String VAR_2 = VAR_3 ; if ( ( VAR_2 . equals ( STRING_1 ) ) && ( ( context . METHOD_2 ( ) . METHOD_3 ( ) ) >= 8 ) ) { java.lang.String VAR_4 = java.lang.String.format ( ( STRING_2 + STRING_3 ) , call . name ) ; context . METHOD_4 ( VAR_5 , method , call , context . METHOD_5 ( call ) , VAR_4 , null ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , false , false , this , ( - 1 ) , new TYPE_3 ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; int VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_3 = null ; try { VAR_3 = new TYPE_1 ( VAR_2 ) ; assertTrue ( VAR_3 . METHOD_4 ( ) ) ; } catch ( java.io.IOException e ) { fail ( ( STRING_1 + e ) ) ; } if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( ) ; } } 
public void METHOD_1 ( TYPE_1 e ) { java.util.List < TYPE_2 > data = VAR_1 . METHOD_2 ( ) ; if ( ( data . size ( ) ) == 0 ) { TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ( STRING_1 + STRING_2 ) ) ; return ; } if ( ( data . size ( ) ) == 1 ) { TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ( STRING_3 + STRING_4 ) ) ; return ; } new TYPE_4 ( this ) . start ( ) ; } 
public void METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; return ; } } catch ( TYPE_1 e ) { } METHOD_2 ( ) ; synchronized ( VAR_2 ) { if ( METHOD_3 ( ) ) { if ( ( VAR_3 ) != 0 ) { TYPE_2 . METHOD_4 ( VAR_4 , VAR_3 ) ; } VAR_5 = null ; VAR_6 = null ; VAR_3 = 0 ; } } } 
public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 ) { try { TYPE_2 service = METHOD_2 ( ) ; if ( service != null ) { return service . METHOD_1 ( VAR_1 ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ; } catch ( java.lang.NullPointerException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_2 , e ) ; } return new java.util.ArrayList < TYPE_1 > ( 0 ) ; } 
boolean start ( ) { if ( ( ( VAR_1 ) != null ) && ( ( ( VAR_2 ) == false ) || ( ( METHOD_1 ( ) ) == false ) ) ) { return false ; } VAR_3 = true ; VAR_4 = new TYPE_1 ( this ) ; VAR_4 . start ( ) ; return true ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) ; verify ( VAR_3 ) . METHOD_3 ( METHOD_4 ( byte [ ] . class ) , METHOD_4 ( VAR_4 class ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( VAR_2 , false ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_2 ( true ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_3 ( TYPE_1 . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 ) { TYPE_3 d = TYPE_4 . METHOD_2 ( version , VAR_1 ) . METHOD_3 ( ) ; TYPE_5 r = new TYPE_5 ( d , VAR_2 ) ; VAR_3 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_3 ( ) ) ) { VAR_2 . METHOD_4 ( ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( true ) ; org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_3 , false ) ; VAR_1 . METHOD_2 ( false ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_4 ( TYPE_1 . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; } 
public int METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return VAR_3 ; } final TYPE_2 VAR_4 = METHOD_3 ( subId ) ; if ( VAR_4 != null ) { return VAR_4 . METHOD_1 ( ) ; } else { return VAR_3 ; } } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( new java.lang.Object ( ) ) ; VAR_1 . METHOD_3 ( new java.lang.Object ( ) ) ; VAR_1 . METHOD_3 ( new java.lang.Object ( ) ) ; METHOD_4 ( ) ; } catch ( TYPE_3 VAR_2 ) { } } 
protected final java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 sb = new TYPE_1 ( INT_1 ) ; sb.append ( STRING_1 ) ; sb.append ( VAR_2 ) ; sb.append ( CHAR_1 ) ; sb.append ( VAR_3 ) ; if ( VAR_1 != null ) { sb.append ( CHAR_1 ) ; sb.append ( VAR_1 ) ; } sb.append ( STRING_2 ) ; if ( ( result ) != null ) { sb.append ( result ) ; sb.append ( STRING_3 ) ; } sb.append ( VAR_4 ) ; sb.append ( CHAR_2 ) ; return sb . toString ( ) ; } 
void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 = true ; TYPE_2 VAR_3 = VAR_4 . METHOD_3 ( ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_4 ( ) . get ( VAR_3 ) ; if ( VAR_7 ) android.util.Log.d ( VAR_8 . TAG , ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) + VAR_5 ) ) ; if ( VAR_5 != null ) { METHOD_5 ( VAR_5 ) ; } else { VAR_9 . METHOD_6 ( this ) ; METHOD_7 ( ) ; } } 
public boolean METHOD_1 ( final TYPE_1 call ) { VAR_1 . METHOD_2 ( call ) ; VAR_2 . METHOD_3 ( new java.lang.Runnable ( STRING_1 ) { public void METHOD_4 ( ) { synchronized ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( call ) ) { TYPE_2 . i ( this , STRING_2 , call ) ; call . METHOD_6 ( ) ; } } } } . METHOD_7 ( ) , TYPE_3 . METHOD_8 ( mContext . METHOD_9 ( ) ) ) ; return true ; } 
public void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 ) != null ) { METHOD_3 ( VAR_2 , STRING_2 , VAR_3 , VAR_4 ) ; } if ( ( VAR_5 ) != null ) { METHOD_3 ( VAR_2 , STRING_3 , VAR_5 , VAR_6 ) ; } } 
private TYPE_1 < TYPE_2 < TYPE_3 , TYPE_4 > > METHOD_1 ( final TYPE_3 m , final TYPE_4 c ) { final TYPE_5 VAR_1 = METHOD_2 ( m ) ; final TYPE_1 < TYPE_2 < TYPE_3 , TYPE_4 > > result = new TYPE_6 < TYPE_2 < TYPE_3 , TYPE_4 > > ( ) ; METHOD_3 ( c , VAR_1 , result , null ) ; METHOD_4 ( m , c , VAR_1 , result ) ; return result ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 = VAR_2 ; java.lang.System.out.println ( STRING_1 ) ; try { VAR_3 . run ( ) ; VAR_4 . println ( STRING_2 ) ; } catch ( TYPE_3 VAR_5 ) { java.lang.System.out.println ( STRING_3 ) ; } TYPE_4 VAR_6 = ( ( TYPE_4 ) ( VAR_3 ) ) ; VAR_6 . METHOD_2 ( VAR_6 ) ; java.lang.System.out.println ( STRING_4 ) ; } 
public int METHOD_1 ( java.util.HashMap < ? , ? > VAR_1 , java.util.HashMap < ? , ? > VAR_2 ) { java.lang.Object VAR_3 = VAR_1 . get ( VAR_4 ) ; java.lang.Object VAR_5 = VAR_2 . get ( VAR_4 ) ; if ( ! ( METHOD_2 ( VAR_3 ) ) ) { return METHOD_2 ( VAR_5 ) ? 1 : 0 ; } else if ( ! ( METHOD_2 ( VAR_5 ) ) ) { return - 1 ; } return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_5 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = null ; TYPE_1 match = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( match . METHOD_3 ( ) ) { VAR_2 = match . METHOD_4 ( 1 ) ; } else { android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ; } VAR_5 . METHOD_5 ( VAR_6 , VAR_7 , 0 , VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_5 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_1 . name ) ; VAR_5 . METHOD_5 ( VAR_7 ) ; VAR_5 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_8 ) . METHOD_7 ( ) ) ; VAR_5 . METHOD_8 ( VAR_9 ) ; VAR_5 . METHOD_9 ( ) ; VAR_2 . METHOD_10 ( VAR_3 , ( ( VAR_4 ) + 1 ) ) ; VAR_5 . METHOD_11 ( ) ; } 
protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( VAR_1 , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; } 
public void METHOD_1 ( TYPE_1 server , TYPE_2 VAR_1 ) { TYPE_3 device = null ; if ( server != null ) { try { TYPE_4 VAR_2 = server . METHOD_2 ( ) ; device = new TYPE_3 ( VAR_2 , server , VAR_3 , VAR_4 , VAR_1 ) ; METHOD_3 ( device , VAR_5 , VAR_6 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_7 . TAG , STRING_1 ) ; } } METHOD_3 ( device , VAR_5 , VAR_6 ) ; } 
public void METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) + VAR_1 ) ) ; } if ( ( VAR_4 ) != VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_3 + VAR_1 ) ) ; } VAR_4 = VAR_1 ; METHOD_2 ( ) ; } } 
public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; sb.append ( METHOD_1 ( ) . getName ( ) ) ; sb.append ( CHAR_1 ) ; sb.append ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) ; sb.append ( CHAR_2 ) ; sb.append ( field ) ; sb.append ( CHAR_3 ) ; return sb . toString ( ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return ; } TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_2 [ ] VAR_3 = VAR_2 . METHOD_3 ( VAR_4 ) ; for ( TYPE_2 item : VAR_3 ) { if ( VAR_1 . equals ( item . getName ( ) ) ) { METHOD_4 ( new java.lang.Object [ ] { item } ) ; break ; } } } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.Throwable VAR_2 ) { android.util.Log . i ( VAR_3 , ( STRING_1 + VAR_1 ) ) ; android.util.Log . i ( VAR_3 , STRING_2 ) ; android.util.Log . i ( VAR_3 , STRING_3 , VAR_2 ) ; android.util.Log . i ( VAR_3 , STRING_4 ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { if ( ( VAR_1 ) != null ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( ) ; } super . METHOD_1 ( ) ; } 
private final void METHOD_1 ( ) { if ( ( ( ( ( VAR_1 ) == 0 ) && ( ! ( METHOD_2 ( ) ) ) ) || ( ( VAR_2 ) == ( VAR_3 ) ) ) && ( TYPE_1 . METHOD_3 ( ) ) ) { android.content.Intent VAR_4 = new android.content.Intent ( VAR_5 ) ; VAR_4 . METHOD_4 ( VAR_6 , false ) ; VAR_4 . METHOD_5 ( VAR_7 ) ; mContext . METHOD_6 ( VAR_4 ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer error ) throws java.lang.Exception { android.bluetooth.BluetoothDevice device = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 ) ; return VAR_2 . METHOD_4 ( device , ( ( byte ) ( ( int ) ( error ) ) ) ) ; } 
private void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; long VAR_1 = VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_4 ( ) ; long VAR_5 = ( VAR_2 . METHOD_3 ( ) ) - VAR_1 ; android.util.Log.d ( VAR_6 . TAG , ( ( STRING_1 + VAR_5 ) + STRING_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } if ( ! ( METHOD_4 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_2 ) ; return ; } METHOD_5 ( 0 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( false , false , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_8 ( VAR_3 , VAR_5 ) ; METHOD_9 ( VAR_4 , VAR_5 ) ; } 
static void METHOD_1 ( int [ ] VAR_1 ) { VAR_1 [ 1 ] = 1 ; VAR_1 [ 2 ] = 1 ; VAR_1 [ 3 ] = 1 ; VAR_1 [ 4 ] = 1 ; VAR_1 [ ( - 1 ) ] = 1 ; if ( ( VAR_1 [ 1 ] ) == 1 ) { throw new TYPE_1 ( STRING_1 ) ; } } 
private void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) { final TYPE_1 VAR_3 = VAR_2 ; if ( ( VAR_4 ) || ( VAR_5 ) ) { VAR_1 = VAR_1 . METHOD_2 ( ) ; if ( VAR_4 ) { VAR_1 . METHOD_3 ( VAR_6 ) ; } if ( VAR_5 ) { VAR_1 . METHOD_4 ( VAR_7 ) ; } if ( VAR_1 . METHOD_5 ( ) ) { VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; } } } } 
public TYPE_1 METHOD_1 ( int i , long x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
public static java.lang.String [ ] METHOD_1 ( ) { return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , VAR_1 } ; } 
public boolean METHOD_1 ( TYPE_1 config , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 VAR_3 , TYPE_4 callback ) { if ( VAR_4 ) { android.util.Log.d ( VAR_5 . TAG , STRING_1 ) ; } TYPE_5 service = METHOD_2 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( config , VAR_1 , VAR_2 , VAR_3 , callback ) ; } 
public void log ( final java.lang.String log ) { if ( METHOD_1 ( log , false ) ) { METHOD_2 ( VAR_1 , new java.lang.Runnable ( ) { public void run ( ) { METHOD_3 ( VAR_2 , log ) ; } } ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( STRING_1 , log ) ; } } } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( 0 ) ; assertEquals ( 0 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( ( - 1 ) ) ; assertEquals ( ( - 1 ) , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 location , java.lang.String VAR_3 , java.lang.Object data ) { if ( ( VAR_2 != null ) && ( VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ) ) { return ; } super . METHOD_1 ( VAR_1 , location , VAR_3 , data ) ; } 
public static long METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , long VAR_4 ) throws TYPE_3 { TYPE_2 VAR_5 = new TYPE_2 ( VAR_3 . value ) ; try { return VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; } finally { VAR_3 . value = VAR_5 . value ; } } 
private static java.io.File METHOD_1 ( ) throws java.io.IOException , java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_1 . METHOD_3 ( new TYPE_2 ( ) , TYPE_1 . METHOD_4 ( STRING_3 ) , TYPE_1 . METHOD_5 ( ) , VAR_1 , false ) ; return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 e ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( e ) ; } else { if ( ( VAR_2 ) == ( VAR_3 ) ) { TYPE_2 VAR_4 = TYPE_2 . METHOD_2 ( VAR_5 , VAR_6 , VAR_7 ) ; METHOD_3 ( VAR_4 , true ) ; return ; } } } 
public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_1 [ i ] = new TYPE_1 ( i ) ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } } 
public void run ( ) { synchronized ( this ) { ( VAR_1 ) ++ ; } if ( VAR_2 ) ( VAR_3 ) ++ ; if ( ( ( VAR_4 ) == ( VAR_3 ) ) && ( ( VAR_5 ) != null ) ) VAR_5 . METHOD_1 ( ) ; if ( VAR_6 ) { try { TYPE_1 . METHOD_2 ( INT_1 ) ; } catch ( TYPE_2 e ) { } } synchronized ( VAR_7 ) { VAR_7 . METHOD_3 ( ) ; } } 
static int METHOD_1 ( int VAR_1 ) { if ( VAR_1 > 0 ) { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; return VAR_4 . METHOD_3 ( VAR_3 ) ; } TYPE_2 VAR_3 = new TYPE_2 ( ) ; return VAR_4 . METHOD_3 ( VAR_3 ) ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
public byte [ ] METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , java.lang.String VAR_6 ) { try { TYPE_1 telephony = METHOD_2 ( ) ; if ( telephony != null ) return telephony . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return null ; } 
private void METHOD_1 ( java.io.File VAR_1 ) throws TYPE_1 , TYPE_2 , TYPE_3 { java.io.File [ ] VAR_2 = VAR_1 . METHOD_2 ( new TYPE_4 ( ) { public boolean METHOD_3 ( java.io.File VAR_3 , java.lang.String name ) { return name . METHOD_4 ( VAR_4 ) ; } } ) ; if ( ( VAR_2 != null ) && ( ( VAR_2 . length ) > 0 ) ) { for ( java.io.File VAR_3 : VAR_2 ) { METHOD_5 ( VAR_3 ) ; } } } 
public void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { throw new TYPE_2 ( STRING_1 ) ; } try { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 . METHOD_3 ( ) ) ; } catch ( TYPE_3 e ) { android.util.Log.w ( VAR_5 , STRING_2 ) ; VAR_1 = null ; throw new TYPE_1 ( VAR_6 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) ; throw new TYPE_1 ( VAR_7 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_3 ( ) ) ; assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_4 ( ) ) ; assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_5 ( ) ) ; assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_6 ( ) ) ; assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_7 ( ) ) ; } 
public final TYPE_1 METHOD_1 ( TYPE_2 out ) { if ( ( ( state ) != ( VAR_1 ) ) && ( ( state ) != ( VAR_2 ) ) ) { throw METHOD_2 ( ) ; } TYPE_1 result = METHOD_3 ( out ) ; if ( result == ( VAR_3 ) ) { state = VAR_1 ; } return result ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { java.lang.String v = TYPE_4 . METHOD_2 ( session ) ; assertTrue ( TYPE_5 . METHOD_3 ( v ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 field , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { if ( ( field != null ) && ( VAR_3 . METHOD_2 ( VAR_1 , field ) ) ) { return ; } METHOD_1 ( VAR_1 , location , VAR_2 , data ) ; } 
private void METHOD_1 ( int VAR_1 ) throws java.io.IOException { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_5 . METHOD_4 ( VAR_7 ) ; VAR_5 . METHOD_5 ( ) ; java.lang.String id = java.lang.Integer . toString ( VAR_1 ) ; VAR_5 . METHOD_6 ( id ) ; VAR_5 . METHOD_7 ( id ) ; METHOD_8 ( ) ; VAR_2 . METHOD_9 ( VAR_3 , ( ( VAR_4 ) + 1 ) ) ; VAR_5 . METHOD_10 ( ) ; } 
private static void METHOD_1 ( java.io.File VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return ; } java.io.File [ ] VAR_2 = VAR_1 . METHOD_3 ( ) ; for ( java.io.File VAR_3 : VAR_2 ) { if ( VAR_3 . METHOD_2 ( ) ) { TYPE_1 . METHOD_1 ( VAR_3 ) ; } else { assertTrue ( VAR_3 . METHOD_4 ( ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( ) ) ; try { server . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( INT_1 ) ) ; server . METHOD_6 ( ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( server . METHOD_7 ( STRING_2 ) . METHOD_8 ( ) ) ) ; assertEquals ( INT_1 , VAR_2 . METHOD_9 ( ) ) ; } finally { TYPE_1 . METHOD_2 ( VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 path ) throws TYPE_3 { TYPE_4 VAR_1 = this ; TYPE_5 < java.lang.String > VAR_2 = path . METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.String name ; while ( VAR_2 . METHOD_4 ( ) ) { name = VAR_2 . METHOD_5 ( ) ; if ( VAR_2 . METHOD_4 ( ) ) { VAR_1 = VAR_3 . METHOD_6 ( VAR_1 , name ) ; } else { return VAR_3 . METHOD_1 ( VAR_1 , name ) ; } } throw new TYPE_6 ( ) ; } 
public char METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } int VAR_2 = ( VAR_3 ) + ( VAR_4 ) ; if ( VAR_2 > ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( ) ; } char x = ( ( char ) ( TYPE_3 . METHOD_3 ( METHOD_4 ( VAR_3 ) , ( ! ( VAR_5 ) ) ) ) ) ; VAR_3 = VAR_2 ; return x ; } 
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { TYPE_2 VAR_3 = null ; TYPE_3 VAR_4 ; if ( ( VAR_1 . type ) == null ) { VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 . Object class ) ; } else { VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 . Throwable class ) ; } java.lang.String id = STRING_1 + ( ( VAR_6 ) ++ ) ; VAR_3 = new TYPE_2 ( id , id , VAR_4 , null ) ; VAR_7 . METHOD_3 ( VAR_1 , VAR_3 ) ; } } 
public TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_3 . get ( new TYPE_3 ( VAR_1 ) ) ) ) ; if ( ! ( METHOD_2 ( VAR_2 ) ) ) { return VAR_2 ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertNotNull ( VAR_1 ) ; assertNotNull ( VAR_1 . METHOD_2 ( ) ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) ; METHOD_4 ( VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 ) ; assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) ; METHOD_4 ( VAR_3 ) ; } 
public boolean METHOD_1 ( java.lang.String key , byte [ ] value ) { try { return ( VAR_1 . METHOD_2 ( key , value ) ) == ( VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) ; return false ; } } 
public void METHOD_1 ( ) { java.lang.String [ ] args = new java.lang.String [ ] { STRING_1 , STRING_2 } ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( args ) ; assertEquals ( 1 , VAR_2 . METHOD_3 ( ) . size ( ) ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . error ( ) ) ; } 
public final TYPE_1 METHOD_1 ( long x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
protected void METHOD_1 ( TYPE_1 result ) { if ( METHOD_2 ( ) ) return ; if ( result == null ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_2 , null ) ; } else { int VAR_3 = VAR_4 ; int VAR_5 = result . METHOD_5 ( ) ; switch ( VAR_5 ) { case VAR_6 : VAR_3 = VAR_7 ; break ; case VAR_8 : VAR_3 = VAR_9 ; break ; case VAR_10 : VAR_3 = VAR_11 ; break ; } METHOD_4 ( VAR_3 , result ) ; } } 
public java.util.List < android.bluetooth.BluetoothDevice > METHOD_1 ( ) { java.util.List < android.bluetooth.BluetoothDevice > VAR_1 = new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; synchronized ( this ) { if ( ( ( VAR_2 ) == ( VAR_3 ) ) && ( ( VAR_4 ) != null ) ) { VAR_1 . METHOD_2 ( VAR_4 ) ; } } return VAR_1 ; } 
private void METHOD_1 ( int VAR_1 ) { double s = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 > 0 ) { s = s * 2 ; } else { s = s / 2 ; } VAR_2 . METHOD_2 ( ) . METHOD_4 ( s ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_2 ( ) , false ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; VAR_3 . METHOD_5 ( ) ; verify ( VAR_4 ) . METHOD_6 ( METHOD_7 ( ) ) ; TYPE_3 . METHOD_8 ( VAR_3 . METHOD_9 ( ) ) ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( this ) ; if ( ( VAR_2 ) != null ) VAR_2 . METHOD_3 ( this ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( this ) ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_5 ( this ) ; VAR_4 . METHOD_6 ( this ) ; VAR_4 . METHOD_7 ( this ) ; VAR_4 . METHOD_8 ( this ) ; VAR_4 . METHOD_9 ( this ) ; } } 
static int METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.IllegalArgumentException { if ( STRING_1 . METHOD_2 ( VAR_1 ) ) { return VAR_2 ; } else if ( STRING_2 . METHOD_2 ( VAR_1 ) ) { return VAR_3 ; } else if ( STRING_3 . METHOD_2 ( VAR_1 ) ) { return VAR_4 ; } else { throw new java.lang.IllegalArgumentException ( ( STRING_4 + VAR_1 ) ) ; } } 
public void METHOD_1 ( TYPE_1 context ) { if ( ( VAR_1 ) != null ) { for ( java.util.List < TYPE_2 < java.lang.String , TYPE_3 > > VAR_2 : VAR_1 . values ( ) ) { for ( TYPE_2 < java.lang.String , TYPE_3 > VAR_3 : VAR_2 ) { java.lang.String VAR_4 = VAR_3 . METHOD_2 ( ) ; TYPE_3 location = VAR_3 . METHOD_3 ( ) ; context . METHOD_4 ( VAR_5 , location , VAR_4 , null ) ; } } } super . METHOD_1 ( context ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 options = new TYPE_1 ( ) ; options . METHOD_2 ( TYPE_2 . getName ( ) , TYPE_3 . toString ( ) ) ; TYPE_4 . METHOD_3 ( options , null , null , null , null , VAR_1 , false , false , FLOAT_1 , ( ( TYPE_5 ) ( null ) ) , ( ( TYPE_6 [ ] ) ( null ) ) ) ; } 
private synchronized void METHOD_1 ( byte type , byte id , short VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( ( ( ( ( STRING_1 + type ) + STRING_2 ) + id ) + STRING_3 ) + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = ( VAR_1 > 0 ) ? new java.lang.Integer ( VAR_1 ) : null ; msg.arg1 = type ; VAR_6 = id ; VAR_4 . METHOD_3 ( msg ) ; } 
public int METHOD_1 ( TYPE_1 uri , int VAR_1 , int uid , int VAR_2 ) { METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( ) ; if ( VAR_3 != null ) { uid = VAR_3 . uid ; VAR_1 = VAR_5 ; } uid = TYPE_3 . METHOD_3 ( uid ) ; if ( VAR_1 == ( VAR_6 ) ) { return VAR_7 ; } synchronized ( this ) { return METHOD_4 ( uri , uid , VAR_2 ) ? VAR_7 : VAR_8 ; } } 
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_3 , VAR_4 ) ; METHOD_2 ( VAR_3 , VAR_5 ) ; METHOD_2 ( VAR_3 , VAR_6 ) ; METHOD_2 ( VAR_7 , VAR_8 ) ; METHOD_2 ( VAR_7 , VAR_9 ) ; METHOD_2 ( VAR_10 , VAR_11 ) ; METHOD_2 ( VAR_12 , VAR_13 ) ; METHOD_3 ( STRING_1 , STRING_2 ) ; METHOD_3 ( STRING_3 , STRING_4 ) ; METHOD_3 ( STRING_5 , STRING_6 ) ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return new TYPE_3 ( VAR_1 . METHOD_2 ( ) , VAR_2 ) . METHOD_3 ( ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ) ; } catch ( TYPE_6 e ) { throw new TYPE_5 ( ) ; } catch ( TYPE_7 e ) { throw new TYPE_5 ( ) ; } catch ( TYPE_8 e ) { throw new TYPE_9 ( e ) ; } catch ( TYPE_10 e ) { throw new TYPE_9 ( e ) ; } } 
protected void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : TYPE_1 . values ( ) ) { try { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( null ) ; if ( ( METHOD_3 ( VAR_2 ) ) && ( TYPE_2 . METHOD_4 ( METHOD_5 ( VAR_2 ) ) ) ) { VAR_3 . METHOD_6 ( VAR_1 ) ; } } catch ( TYPE_3 e ) { throw new TYPE_4 ( ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_2 class ) ) ; VAR_3 . METHOD_5 ( METHOD_6 ( STRING_1 , 1 ) . METHOD_7 ( VAR_4 ) . build ( ) ) ; assertEquals ( 0 , VAR_3 . METHOD_8 ( VAR_5 , false , TYPE_3 . METHOD_9 ( ) ) . size ( ) ) ; assertEquals ( 1 , VAR_3 . METHOD_8 ( VAR_5 , true , TYPE_3 . METHOD_9 ( ) ) . size ( ) ) ; } 
private boolean METHOD_1 ( TYPE_1 . File VAR_1 , TYPE_1 . File VAR_2 ) { if ( VAR_1 . getName ( ) . METHOD_2 ( VAR_2 . getName ( ) ) ) { for ( java.lang.String VAR_3 : VAR_4 ) { if ( VAR_1 . getName ( ) . METHOD_3 ( VAR_3 ) ) { return true ; } } } return false ; } 
protected boolean METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; if ( VAR_2 . METHOD_7 ( ) ) { return false ; } VAR_2 . METHOD_8 ( ) ; if ( VAR_3 ) { VAR_2 . METHOD_9 ( null , false ) ; } return true ; } 
public boolean METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { if ( ( VAR_2 ) != null ) { for ( TYPE_3 VAR_3 : VAR_4 ) { METHOD_2 ( VAR_3 ) ; } } return true ; } catch ( java.lang.Throwable e ) { throw METHOD_3 ( x , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { int c = TYPE_1 . METHOD_2 ( ) ; assertTrue ( ( c != ( VAR_1 ) ) ) ; int VAR_2 = TYPE_1 . METHOD_2 ( ) ; assertTrue ( ( c != VAR_2 ) ) ; TYPE_1 . METHOD_3 ( c ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; ++ i ) VAR_2 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( ) ; } catch ( TYPE_3 VAR_4 ) { } } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , int w , int h , java.lang.Object VAR_3 ) { TYPE_1 . METHOD_2 ( VAR_4 , STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , w , h , VAR_3 , METHOD_4 ( VAR_3 , true ) , TYPE_2 . METHOD_5 ( VAR_3 ) ) ; TYPE_1 . METHOD_6 ( VAR_4 ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 0 , INT_1 ) ) ; int VAR_3 = TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( INT_1 ) , 10 ) ; assertEquals ( ( STRING_1 + VAR_1 ) , VAR_2 , VAR_3 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) { assertFalse ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; try { VAR_1 . METHOD_4 ( INT_1 ) ; } catch ( TYPE_2 VAR_2 ) { VAR_2 . METHOD_5 ( ) ; } if ( VAR_1 . METHOD_6 ( ) ) { fail ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) ) ; } } 
private int METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( VAR_2 . METHOD_2 ( VAR_1 [ i ] ) ) return i ; } return VAR_3 ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 , int w , int h , float [ ] data ) { TYPE_1 . METHOD_2 ( VAR_3 , STRING_1 ) ; mRS . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 , w , h ) ; mRS . METHOD_5 ( METHOD_6 ( ) , VAR_1 , VAR_2 , VAR_4 , VAR_5 , w , h , data , ( ( data . length ) * 4 ) ) ; TYPE_1 . METHOD_7 ( VAR_3 ) ; } 
public int METHOD_1 ( TYPE_1 < ? super TYPE_2 > c ) { if ( c == null ) throw new java.lang.NullPointerException ( ) ; if ( c == ( this ) ) throw new java.lang.IllegalArgumentException ( ) ; int n = 0 ; TYPE_2 e ; while ( ( e = METHOD_2 ( ) ) != null ) { c . METHOD_3 ( e ) ; ++ n ; } return n ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) { return ; } if ( VAR_2 ) { if ( ( VAR_4 . METHOD_2 ( ) ) != null ) { VAR_4 . METHOD_2 ( ) . METHOD_3 ( false ) ; } VAR_4 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_5 ( METHOD_6 ( ) ) ; METHOD_7 ( VAR_4 . METHOD_8 ( ) ) ; } VAR_5 . METHOD_9 ( VAR_2 ) ; } 
public void run ( ) { VAR_1 = new TYPE_1 ( mContext ) ; VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; VAR_7 = VAR_1 . METHOD_2 ( ) ; VAR_8 = ( ( TYPE_2 ) ( VAR_7 . METHOD_3 ( ) . METHOD_4 ( VAR_9 ) ) ) ; VAR_10 = VAR_8 . METHOD_5 ( 0 ) ; } 
public void METHOD_1 ( ) { log ( ( ( ( STRING_1 + ( METHOD_2 ( ) . VAR_1 ) ) + STRING_2 ) + ( VAR_2 . size ( ) ) ) ) ; VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( false ) ; VAR_5 = false ; VAR_6 = false ; VAR_7 = false ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String name , TYPE_3 < java.lang.String > VAR_2 ) { try { return VAR_1 . METHOD_2 ( name , VAR_3 < TYPE_4 > METHOD_3 ( ) , VAR_4 ) ; } catch ( java.lang.Throwable e ) { TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_5 , new TYPE_6 ( VAR_2 , e ) ) ; TYPE_5 . METHOD_4 ( ) . METHOD_7 ( ) ; return null ; } } 
static void METHOD_1 ( java.util.Map < java.lang.String , java.util.List < TYPE_1 > > VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , android.content.Intent VAR_5 ) { java.util.List < TYPE_1 > VAR_6 ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_6 = VAR_1 . get ( VAR_2 ) ; } else { VAR_6 = new java.util.ArrayList < TYPE_1 > ( ) ; } VAR_1 . METHOD_3 ( VAR_2 , VAR_6 ) ; VAR_6 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_3 , VAR_4 , VAR_5 ) ) ; } 
java.lang.Object METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 { if ( ( VAR_1 ) != null ) { try { return VAR_1 . METHOD_1 ( ) ; } catch ( TYPE_4 ex ) { throw new TYPE_5 ( ) ; } } else { throw new TYPE_2 ( ) ; } } 
public byte [ ] METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) throws java.io.IOException { boolean VAR_3 = VAR_1 != null ; TYPE_2 result = METHOD_2 ( VAR_3 , VAR_2 ) ; if ( VAR_3 ) { result . METHOD_3 ( VAR_1 ) ; } return result . METHOD_4 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = 0 ; switch ( VAR_1 ) { case VAR_3 : VAR_2 = VAR_4 ; break ; case VAR_5 : VAR_2 = VAR_6 ; break ; case VAR_7 : VAR_2 = VAR_8 ; break ; case VAR_9 : VAR_2 = VAR_10 ; break ; case VAR_11 : VAR_2 = VAR_12 ; break ; } if ( VAR_2 != 0 ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_1 ( VAR_2 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; assertFalse ( VAR_1 . METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( true ) ; assertTrue ( VAR_1 . METHOD_4 ( ) ) ; } 
private java.lang.Object METHOD_1 ( ) { while ( true ) { java.lang.Object VAR_1 = VAR_2 ; if ( VAR_1 != null ) { return VAR_1 ; } synchronized ( this ) { try { METHOD_2 ( ) ; } catch ( TYPE_1 e ) { return null ; } } } } 
private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , TYPE_1 VAR_3 ) throws TYPE_2 { METHOD_2 ( ) . VAR_1 = VAR_1 ; int VAR_4 = - 1 ; VAR_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_2 . length ) == ( VAR_6 ) ) { VAR_4 = VAR_7 ; } VAR_8 . METHOD_3 ( VAR_1 , VAR_4 ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; if ( ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) { return ; } VAR_1 . METHOD_4 ( ( ( VAR_2 ) + ( VAR_3 ) ) ) ; VAR_1 . METHOD_4 ( ( ( VAR_2 ) + ( VAR_4 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } java.lang.String VAR_2 = METHOD_4 ( ) ; METHOD_5 ( VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_6 ( VAR_3 , VAR_2 ) ; assertEquals ( STRING_2 , 1 , VAR_5 ) ; VAR_2 = METHOD_4 ( ) ; METHOD_7 ( VAR_6 , VAR_7 ) ; assertEquals ( STRING_3 , 0 , VAR_8 . METHOD_8 ( ) . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { if ( ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ) throw new java.lang.IllegalArgumentException ( STRING_1 ) ; if ( METHOD_2 ( ) ) throw new TYPE_1 ( STRING_2 ) ; try { METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_1 ) ; } catch ( TYPE_1 VAR_3 ) { if ( ! ( METHOD_5 ( ) ) ) throw VAR_3 ; } } 
public java.lang.Object [ ] METHOD_1 ( ) { int length = c . size ( ) ; java.lang.Object [ ] result = new java.lang.Object [ length ] ; TYPE_1 < ? > VAR_1 = METHOD_2 ( ) ; for ( int i = length ; ( -- i ) >= 0 ; ) { result [ i ] = VAR_1 . METHOD_3 ( ) ; } return result ; } 
public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_2 == null ) { return null ; } if ( ( VAR_3 . METHOD_2 ( ) ) == 0 ) { return new TYPE_1 ( 1 ) ; } if ( VAR_1 == null ) { return null ; } VAR_2 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ! ( VAR_4 . equals ( VAR_5 ) ) ) { return null ; } return VAR_1 . METHOD_1 ( VAR_3 ) ; } 
public java.lang.Object METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) instanceof TYPE_2 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 . METHOD_1 ( ) ) ) ; return new TYPE_4 ( VAR_2 , METHOD_2 ( ) , METHOD_3 ( ) ) ; } throw new TYPE_1 ( ) ; } 
private static java.util.List < ? extends TYPE_1 > METHOD_1 ( java.lang.String ... VAR_1 ) { java.util.ArrayList < TYPE_2 > VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; for ( java.lang.String config : VAR_1 ) { VAR_2 . METHOD_2 ( new TYPE_2 ( config ) ) ; } return VAR_2 ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , boolean VAR_4 , int VAR_5 , boolean VAR_6 ) throws java.io.IOException { TYPE_3 options = new TYPE_3 ( ) ; VAR_7 = VAR_2 ; VAR_8 = VAR_4 ; VAR_9 = VAR_3 ; VAR_10 = VAR_5 ; VAR_11 = VAR_6 ; TYPE_4 VAR_12 = new TYPE_4 ( ) ; METHOD_1 ( ( 4 + ( VAR_6 ? 1 : 0 ) ) , STRING_1 , VAR_1 , VAR_12 , options ) ; } 
public void METHOD_1 ( ) { assertEquals ( VAR_1 . Object class , TYPE_1 . METHOD_2 ( VAR_1 . String class ) ) ; assertEquals ( null , TYPE_1 . METHOD_2 ( VAR_1 . Object class ) ) ; assertEquals ( null , TYPE_1 . METHOD_2 ( int . class ) ) ; assertEquals ( VAR_1 . Object class , TYPE_1 . METHOD_2 ( VAR_1 . Runnable class ) ) ; } 
private static < TYPE_1 , TYPE_2 , TYPE_3 > TYPE_4 < TYPE_1 , TYPE_2 , TYPE_3 > METHOD_1 ( final TYPE_5 < ? super TYPE_2 , TYPE_3 > VAR_1 ) { TYPE_6 . METHOD_2 ( VAR_1 ) ; return new TYPE_4 < TYPE_1 , TYPE_2 , TYPE_3 > ( ) { public TYPE_3 METHOD_3 ( TYPE_1 key , TYPE_2 value ) { return VAR_1 . METHOD_4 ( value ) ; } } ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , INT_2 ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_1 . start , TYPE_2 . METHOD_3 ( VAR_2 ) ) ; assertEquals ( VAR_3 , TYPE_2 . METHOD_4 ( VAR_2 ) ) ; } 
public boolean METHOD_1 ( TYPE_1 x ) { for ( int i = 0 ; i < ( x . METHOD_2 ( ) . size ( ) ) ; ++ i ) { com.android.jack.ir.ast.JDefinedClassOrInterface type = x . METHOD_2 ( ) . get ( i ) ; if ( ! ( type . METHOD_3 ( ) ) ) { METHOD_4 ( type ) ; METHOD_5 ( ) ; METHOD_5 ( ) ; } } return false ; } 
protected void METHOD_1 ( java.lang.String VAR_1 ) { try { device . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_1 e ) { TYPE_2 . log ( VAR_2 , STRING_1 , e ) ; } catch ( TYPE_3 e ) { TYPE_2 . log ( VAR_2 , STRING_1 , e ) ; } catch ( java.io.IOException e ) { TYPE_2 . log ( VAR_2 , STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { METHOD_2 ( ) ; assertTrue ( STRING_1 , METHOD_3 ( ) ) ; java.lang.System.out.println ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ; assertEquals ( STRING_2 , VAR_2 , VAR_3 . METHOD_6 ( ) ) ; assertEquals ( STRING_2 , VAR_2 , VAR_4 . METHOD_6 ( ) ) ; } 
public < TYPE_1 > java.lang.Class < ? extends TYPE_1 > METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { if ( VAR_1 . METHOD_2 ( this ) ) { return ( ( java.lang.Class < ? extends TYPE_1 > ) ( this ) ) ; } java.lang.String VAR_2 = this . getName ( ) ; java.lang.String VAR_3 = VAR_1 . getName ( ) ; throw new TYPE_2 ( ( ( VAR_2 + STRING_1 ) + VAR_3 ) ) ; } 
public boolean METHOD_1 ( java.lang.String VAR_1 , long VAR_2 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return false ; } TYPE_2 VAR_3 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; if ( VAR_3 == null ) { return false ; } return VAR_3 . METHOD_5 ( VAR_2 ) ; } 
public static void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( VAR_1 != null ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_4 , VAR_5 ) ; if ( VAR_2 ) { new TYPE_2 ( ) { public void run ( ) { TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_5 , false ) ; } } . start ( ) ; } } } } 
private static void METHOD_1 ( final int id ) { try { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( id ) ; } catch ( java.lang.Throwable e ) { throw TYPE_1 . METHOD_5 ( e ) ; } finally { VAR_1 . METHOD_6 ( ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_2 info : VAR_2 . values ( ) ) { if ( ( info . METHOD_2 ( ) ) != null ) { VAR_1 . METHOD_3 ( info . METHOD_2 ( ) . METHOD_4 ( ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 item ) { METHOD_2 ( ) ; try { if ( ( item . METHOD_3 ( ) ) > ( METHOD_3 ( ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } } catch ( java.lang.NullPointerException ex ) { throw new java.lang.NullPointerException ( STRING_2 ) ; } VAR_1 . METHOD_1 ( item ) ; } 
private boolean METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , ( TYPE_2 . METHOD_1 ( ) ? STRING_2 : STRING_3 ) ) ; if ( STRING_2 . METHOD_3 ( VAR_1 ) ) { return true ; } else if ( STRING_3 . METHOD_3 ( VAR_1 ) ) { return false ; } else { throw new java.lang.RuntimeException ( STRING_4 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) != null ) { METHOD_2 ( VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ; } VAR_2 = new TYPE_3 ( VAR_4 ) ; TYPE_4 VAR_5 = METHOD_5 ( 1 ) ; VAR_2 . METHOD_6 ( true ) ; TYPE_5 . METHOD_7 ( VAR_5 ) ; METHOD_8 ( VAR_6 ) ; VAR_2 . METHOD_9 ( VAR_1 ) ; VAR_7 . METHOD_10 ( ) ; return VAR_2 . METHOD_4 ( ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) != ( VAR_3 ) ) { return null ; } if ( ( VAR_4 . length ) < 1 ) { return null ; } TYPE_1 result = new TYPE_1 ( ) ; result . type = ( VAR_4 [ 0 ] ) & INT_1 ; return result ; } 
private TYPE_1 METHOD_1 ( int id , TYPE_2 session , TYPE_3 pkg ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , TYPE_4 . METHOD_2 ( ( ( VAR_3 ) + id ) ) , ( ( ( VAR_4 ) | ( VAR_5 ) ) | ( VAR_6 ) ) , pkg , VAR_7 ) ; VAR_1 . METHOD_3 ( VAR_8 ) ; session . METHOD_4 ( VAR_1 ) ; VAR_9 . METHOD_5 ( VAR_10 ) . METHOD_6 ( ) ; return VAR_1 ; } 
private static final TYPE_1 METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_2 == ( VAR_1 . size ( ) ) ) { return null ; } TYPE_1 m = VAR_3 . METHOD_2 ( VAR_1 . get ( VAR_2 ) ) ; if ( m . METHOD_3 ( ) ) { return m ; } return null ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 . METHOD_3 ( false ) . when ( VAR_2 ) . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_3 class ) , org.mockito.Matchers.eq ( VAR_1 . METHOD_6 ( ) ) ) ; android.content.Intent VAR_4 = new android.content.Intent ( VAR_5 , VAR_1 ) ; int result = METHOD_7 ( VAR_4 , true ) ; assertEquals ( VAR_6 , result ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( event , VAR_2 ) ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_4 , VAR_5 , new TYPE_3 ( VAR_6 . x , VAR_6 . y ) , VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; if ( ( VAR_7 ) == ( VAR_8 ) ) { TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) ; } } 
public void METHOD_1 ( TYPE_1 session ) throws TYPE_2 , TYPE_3 , TYPE_4 { for ( TYPE_5 VAR_1 : VAR_2 ) { TYPE_6 VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_4 . log ( VAR_5 , STRING_1 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ; for ( TYPE_7 VAR_6 : VAR_3 . METHOD_5 ( ) ) { METHOD_6 ( VAR_6 , session , STRING_2 ) ; } } } 
protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; VAR_1 . METHOD_2 ( VAR_6 ) ; VAR_1 . METHOD_2 ( VAR_7 ) ; VAR_1 . METHOD_2 ( VAR_8 ) ; VAR_1 . METHOD_2 ( VAR_9 ) ; } 
static void METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 , java.lang.StringBuilder VAR_2 ) { TYPE_2 data = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_3 = new java.util.ArrayList ( data . METHOD_3 ( VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; for ( TYPE_4 VAR_5 : VAR_3 ) { TYPE_5 . METHOD_1 ( VAR_5 , VAR_2 , VAR_6 , null ) ; } } 
public void METHOD_1 ( long offset ) throws java.io.IOException { if ( offset < 0 ) { throw new java.io.IOException ( ( STRING_1 + offset ) ) ; } try { VAR_1 . METHOD_2 ( fd , offset , VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_4 ) { throw VAR_4 . METHOD_4 ( ) ; } } 
public int METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_1 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_1 ; return service . METHOD_1 ( device ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( TYPE_1 . METHOD_2 ( INT_1 ) , 3 ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_2 ) , 2 ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_3 ) , 3 ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_4 ) , 2 ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_5 ) , 2 ) ; assertEquals ( TYPE_1 . METHOD_2 ( 0 ) , 2 ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_6 ) , 2 ) ; } 
public int [ ] METHOD_1 ( int [ ] src , int [ ] VAR_1 ) { return new int [ ] { TYPE_1 . METHOD_2 ( src [ 0 ] , VAR_1 [ 0 ] ) , TYPE_1 . METHOD_2 ( src [ 1 ] , VAR_1 [ 1 ] ) , TYPE_1 . METHOD_2 ( src [ 2 ] , VAR_1 [ 2 ] ) , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; } 
private static void METHOD_1 ( TYPE_1 args , TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws TYPE_3 { int VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_4 ) != null ) && ( VAR_3 != 0 ) ) { throw new TYPE_3 ( ( STRING_1 + STRING_2 ) ) ; } if ( ( VAR_4 ) != null ) { boolean VAR_5 = TYPE_4 . METHOD_3 ( VAR_2 , VAR_2 , STRING_3 , STRING_4 ) ; if ( ! VAR_5 ) { throw new TYPE_3 ( ( STRING_1 + STRING_2 ) ) ; } } } 
static int METHOD_1 ( ) { try { Main . METHOD_2 ( ) ; Main . METHOD_3 ( new int [ 3 ] ) ; } catch ( TYPE_1 e ) { Main . METHOD_2 ( ) ; try { Main . METHOD_4 ( new int [ 3 ] ) ; } catch ( TYPE_1 VAR_1 ) { Main . METHOD_2 ( ) ; return INT_1 ; } } return 0 ; } 
public void METHOD_1 ( TYPE_1 status , TYPE_2 test , java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_3 ) ) ; VAR_2 . METHOD_2 ( METHOD_5 ( VAR_1 ) ) ; } VAR_4 . METHOD_6 ( test ) ; super . METHOD_1 ( VAR_5 , test , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_5 ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; TYPE_3 VAR_5 = VAR_2 . METHOD_3 ( ) ; METHOD_4 ( VAR_5 ) ; METHOD_5 ( VAR_1 , VAR_5 ) ; METHOD_6 ( VAR_1 , VAR_5 ) ; TYPE_4 < TYPE_5 > VAR_6 = METHOD_7 ( VAR_1 , VAR_5 ) ; TYPE_6 . METHOD_8 ( VAR_6 , VAR_1 , VAR_5 ) ; METHOD_9 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_10 ( null ) ; } 
public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( TYPE_2 ) ; METHOD_2 ( VAR_2 ) ; } } ; TYPE_3 . when ( VAR_3 . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_5 ( VAR_4 class ) ) ) . thenReturn ( VAR_1 ) ; METHOD_6 ( TYPE_2 , VAR_2 ) ; assertEquals ( VAR_1 , VAR_5 . METHOD_3 ( TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ; } 
public static void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { TYPE_1 . METHOD_3 ( ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( ) ; VAR_4 . METHOD_1 ( ) ; VAR_5 . METHOD_1 ( ) ; if ( ( VAR_6 ) != null ) VAR_6 . METHOD_1 ( ) ; VAR_2 . METHOD_1 ( ) ; } } finally { VAR_1 . METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_1 ( ) ; synchronized ( this ) { if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_1 ( ) ; VAR_2 = null ; } TYPE_1 . METHOD_3 ( fd ) ; } } 
public void METHOD_1 ( ) { s = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) ; assertNotNull ( s ) ; s . METHOD_2 ( ) ; try { s = new TYPE_1 ( ( ( TYPE_3 ) ( null ) ) ) ; fail ( STRING_2 ) ; } catch ( java.lang.NullPointerException e ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ; } 
protected void METHOD_1 ( java.lang.String uri , java.lang.String action , java.lang.String data , java.lang.String VAR_1 , TYPE_1 < java.lang.String > VAR_2 , java.util.Map < java.lang.String , java.lang.Object > VAR_3 , java.lang.String VAR_4 , int flags ) { java.util.List < java.lang.String > VAR_5 = METHOD_2 ( uri , action , data , VAR_1 , VAR_2 , VAR_3 , VAR_4 , flags ) ; METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_1 , STRING_2 , VAR_5 . METHOD_5 ( VAR_6 ) ) . METHOD_5 ( VAR_6 ) ) ; } 
public void METHOD_1 ( TYPE_1 request , int VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 . METHOD_2 ( VAR_1 ) ; int VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_5 VAR_6 = new TYPE_5 ( VAR_3 ) ; METHOD_1 ( request , VAR_2 , VAR_1 , VAR_4 , VAR_6 ) ; } 
public TYPE_1 METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_1 ( ) ; } } catch ( TYPE_2 e ) { } METHOD_2 ( ) ; android.util.Log.d ( TYPE_3 . TAG , ( STRING_1 + ( VAR_2 ) ) ) ; synchronized ( VAR_3 ) { if ( METHOD_3 ( ) ) { return TYPE_3 . METHOD_4 ( VAR_2 ) ; } else { return null ; } } } 
private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) ; try { while ( ( VAR_2 . METHOD_4 ( ) ) != ( VAR_3 ) ) { } fail ( ) ; } catch ( TYPE_3 expected ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) ) ; TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 is ) throws TYPE_3 { final TYPE_4 VAR_1 = new TYPE_4 ( is ) ; try { final long VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == 0 ) { return null ; } return new TYPE_1 ( VAR_2 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_3 ( e ) ; } finally { VAR_1 . METHOD_4 ( ) ; } } 
public boolean METHOD_1 ( java.lang.String key ) { try { return ( VAR_1 . METHOD_1 ( key , ( - 1 ) ) ) == ( VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) ; return false ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 ; VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_5 VAR_3 = ( ( TYPE_6 ) ( VAR_2 ) ) . METHOD_3 ( ) ; METHOD_4 ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 = new TYPE_7 ( VAR_2 , VAR_4 ) ; } VAR_5 . METHOD_5 ( ) ; VAR_6 . METHOD_6 ( true , VAR_2 ) ; } 
public java.lang.Integer METHOD_1 ( java.lang.Integer VAR_1 , TYPE_1 VAR_2 ) throws android.os.RemoteException , TYPE_2 { synchronized ( VAR_3 ) { TYPE_3 session = VAR_4 . get ( VAR_1 ) ; if ( session == null ) { throw new TYPE_4 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } int VAR_5 = METHOD_2 ( ) ; session . METHOD_3 ( null , TYPE_5 . METHOD_4 ( VAR_2 ) , new TYPE_6 ( VAR_5 ) ) ; return VAR_5 ; } } 
public static java.lang.String [ ] METHOD_1 ( int VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( int i = 0 , VAR_3 = VAR_4 . length ; i < VAR_3 ; i ++ ) { if ( ( VAR_4 [ i ] ) == VAR_1 ) { VAR_2 . METHOD_2 ( VAR_5 [ i ] ) ; } } return VAR_2 . METHOD_3 ( new java.lang.String [ VAR_2 . size ( ) ] ) ; } 
public final TYPE_1 METHOD_1 ( int i , short x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
public boolean METHOD_1 ( java.lang.String VAR_1 , byte [ ] key , int uid ) { try { return ( VAR_2 . METHOD_2 ( VAR_1 , key , uid ) ) == ( VAR_3 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_4 . TAG , STRING_1 , e ) ; return false ; } } 
private void METHOD_1 ( TYPE_1 field , java.lang.Object value , TYPE_2 VAR_1 , java.lang.String source , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_3 entry = VAR_4 . get ( field ) ; if ( entry == null ) { entry = new TYPE_3 ( field . getName ( ) , TYPE_4 . METHOD_2 ( ) , VAR_1 , source , VAR_2 , VAR_3 , true ) ; VAR_4 . METHOD_3 ( field , entry ) ; METHOD_4 ( field ) ; } entry . METHOD_5 ( VAR_1 , value ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { try { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_2 , METHOD_4 ( VAR_1 ) ) ; } catch ( TYPE_2 e ) { TYPE_3 . e ( ( ( STRING_1 + ( e.getMessage ( ) ) ) + STRING_2 ) , e ) ; } catch ( java.lang.Exception e ) { TYPE_3 . e ( STRING_3 , e ) ; } } 
public void METHOD_1 ( ) { when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) ; VAR_2 . METHOD_5 ( false ) ; int VAR_3 = VAR_2 . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( VAR_4 ) ; int VAR_5 = VAR_2 . METHOD_6 ( ) ; assertEquals ( ( VAR_3 * 2 ) , VAR_5 ) ; } 
void METHOD_1 ( int VAR_1 , java.lang.String address , int VAR_2 , int VAR_3 , int VAR_4 ) { METHOD_2 ( VAR_5 , STRING_1 ) ; java.lang.Integer VAR_6 = VAR_7 . METHOD_3 ( VAR_1 , address ) ; if ( VAR_6 == null ) { android.util.Log.d ( VAR_8 . TAG , ( STRING_2 + address ) ) ; return ; } if ( VAR_9 ) android.util.Log.d ( VAR_8 . TAG , ( ( ( STRING_3 + address ) + STRING_4 ) + VAR_6 ) ) ; METHOD_4 ( VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 ) ; } 
public int METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } int VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == 0 ) { return - 1 ; } return TYPE_1 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 call = TYPE_2 . METHOD_2 ( VAR_1 class ) ; TYPE_2 . when ( call . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; TYPE_2 . when ( VAR_3 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( ) ) ) . thenReturn ( call ) ; TYPE_3 . assertTrue ( VAR_4 . METHOD_6 ( ) ) ; org.mockito.Mockito.verify ( call ) . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_4 ( 1 ) ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 1 ) ) . METHOD_8 ( 1 ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 1 ) ) . METHOD_9 ( FLOAT_1 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String text , TYPE_1 VAR_4 , TYPE_1 VAR_5 , boolean VAR_6 ) { VAR_7 . METHOD_2 ( ) . METHOD_3 ( VAR_8 , STRING_1 ) ; METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , text , VAR_4 , VAR_5 , VAR_6 , VAR_9 , false , VAR_10 ) ; } 
synchronized TYPE_1 METHOD_1 ( TYPE_2 call ) { TYPE_3 number = TYPE_3 . METHOD_2 ( VAR_1 , call . METHOD_3 ( ) , null ) ; TYPE_4 VAR_2 = VAR_2 = VAR_3 . get ( call . METHOD_4 ( ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( ) ; METHOD_6 ( ) ; return VAR_2 ; } else { android.util.Log.e ( VAR_4 , ( ( STRING_1 + call ) + STRING_2 ) ) ; return null ; } } 
public java.lang.Object METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; char [ ] VAR_2 = new char [ VAR_3 . length ] ; TYPE_2 . METHOD_2 ( VAR_3 , 0 , VAR_2 , 0 , VAR_3 . length ) ; VAR_4 = VAR_2 ; VAR_5 = null ; return VAR_1 ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( ) ; } } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( ( VAR_1 . METHOD_2 ( ) ) || ( ( ( VAR_1 . METHOD_3 ( ) ) != null ) && ( VAR_1 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ) || ( VAR_2 . METHOD_2 ( ) ) ) || ( ( VAR_3 ) == null ) ; } 
public static int METHOD_1 ( int VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; int VAR_3 = TYPE_1 . METHOD_3 ( VAR_1 ) ; if ( VAR_3 > 0 ) TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; return VAR_3 ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_6 ( e ) ; } finally { VAR_2 . METHOD_7 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertTrue ( ( ( TYPE_2 . METHOD_2 ( STRING_1 ) ) != ( VAR_1 ) ) ) ; try { TYPE_2 . METHOD_2 ( null ) ; TYPE_1 . fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } try { TYPE_2 . METHOD_2 ( STRING_2 ) ; TYPE_2 . METHOD_2 ( STRING_3 ) ; TYPE_1 . fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 , VAR_2 , ( ( ( VAR_5 ) | ( VAR_6 ) ) | ( VAR_7 ) ) , VAR_1 , VAR_8 ) ; VAR_3 . METHOD_2 ( session . METHOD_3 ( ) . METHOD_4 ( VAR_9 ) ) ; VAR_3 . METHOD_5 ( false ) ; session . METHOD_6 ( VAR_3 ) ; return VAR_3 ; } 
public boolean METHOD_1 ( ) { return ( ( ( ( METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_2 ( ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_2 ( ) ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_4 . METHOD_2 ( ) ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_5 . METHOD_2 ( ) ) ) ; } 
private static void METHOD_1 ( ) { VAR_1 . log ( VAR_2 , STRING_1 ) ; try { TYPE_1 . METHOD_2 ( VAR_3 , new TYPE_2 ( VAR_3 ) , ( ( VAR_4 ) | ( VAR_5 ) ) , VAR_6 ) ; } catch ( TYPE_3 e ) { VAR_1 . log ( VAR_7 , e.getMessage ( ) , e ) ; TYPE_4 . METHOD_3 ( ) ; } } 
private static java.lang.String METHOD_1 ( java.lang.Class < ? > VAR_1 ) { java.lang.String VAR_2 = VAR_1 . getName ( ) ; if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { return VAR_2 ; } else if ( VAR_2 . METHOD_3 ( VAR_4 ) ) { return null ; } java.lang.Class < ? > VAR_5 = VAR_1 . METHOD_4 ( ) ; if ( VAR_5 != null ) { return TYPE_1 . METHOD_1 ( VAR_5 ) ; } else { return null ; } } 
public void METHOD_1 ( ) { TYPE_1 t = null ; try { t = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; t . METHOD_2 ( VAR_1 , INT_1 ) ; METHOD_3 ( VAR_1 ) ; t . METHOD_4 ( ) ; } finally { if ( t != null ) t . METHOD_4 ( ) ; } try { new TYPE_1 ( null ) ; fail ( STRING_2 ) ; } catch ( java.lang.NullPointerException e ) { } } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String type ) { if ( VAR_3 ) { TYPE_4 VAR_4 = VAR_5 ; if ( VAR_4 != null ) { TYPE_5 value = TYPE_6 . METHOD_1 ( ( ( TYPE_7 ) ( VAR_4 ) ) ) ; if ( ( value != null ) && ( value . METHOD_2 ( ) ) ) { return value ; } } } return super . METHOD_1 ( VAR_1 , VAR_2 , type ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; if ( VAR_1 == null ) { return ; } METHOD_4 ( VAR_2 class ) ; TYPE_2 . METHOD_5 ( ) ; METHOD_4 ( VAR_3 class ) ; if ( ( ! ( METHOD_6 ( VAR_4 class ) ) ) && ( METHOD_7 ( ) ) ) { METHOD_8 ( new TYPE_3 ( this , VAR_1 . METHOD_9 ( ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) ; VAR_7 . METHOD_6 ( VAR_6 , VAR_8 , null ) ; org.mockito.Mockito.verify ( VAR_3 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_9 ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_10 ) , org.mockito.Matchers.eq ( VAR_8 ) , org.mockito.Matchers . METHOD_9 ( VAR_11 . Bundle class ) , org.mockito.Matchers . METHOD_10 ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String VAR_1 ) throws TYPE_2 { if ( id == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } final int VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , id ) ; if ( VAR_2 == 0 ) { return null ; } TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 , this , id ) ; try { return VAR_4 . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_5 e ) { throw new TYPE_2 ( e ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( ) ; try { assertEquals ( VAR_1 . METHOD_3 ( ) . toString ( ) , STRING_1 ) ; VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( ) ; assertEquals ( VAR_1 . METHOD_3 ( ) . toString ( ) , STRING_2 ) ; } catch ( java.lang.Exception ex ) { fail ( ( STRING_3 + ex ) ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { android.util.Log.v ( VAR_2 . TAG , STRING_1 ) ; VAR_3 = new TYPE_2 ( VAR_4 , VAR_1 , VAR_5 ) ; if ( VAR_6 ) { android.util.Log.d ( VAR_2 . TAG , ( ( STRING_2 + ( VAR_3 . METHOD_2 ( ) ) ) + STRING_3 ) ) ; } } 
private void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { com.android.jack.ir.ast.JMethod VAR_2 ; if ( x . METHOD_2 ( ) ) { VAR_2 = VAR_3 . METHOD_3 ( VAR_4 , TYPE_3 . METHOD_4 ( ) ) ; } else { VAR_2 = VAR_3 . METHOD_3 ( VAR_5 , TYPE_3 . METHOD_4 ( ) ) ; } METHOD_5 ( new TYPE_4 ( VAR_2 , ( ( TYPE_5 ) ( VAR_2 . METHOD_6 ( ) ) ) , VAR_1 ) ) ; } 
boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { return false ; } if ( ( ( VAR_2 ) != null ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { VAR_2 . METHOD_3 ( ) ; } if ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_4 ( ) ) > 0 ) ) { VAR_2 = VAR_1 ; } else { VAR_2 = null ; } return true ; } 
public < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 < TYPE_4 , TYPE_1 > f ) { TYPE_4 VAR_3 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_2 ) ; try { return f . METHOD_3 ( VAR_3 ) ; } catch ( TYPE_6 e ) { throw e ; } catch ( java.lang.Throwable e ) { throw new TYPE_6 ( e ) ; } finally { try { VAR_3 . METHOD_4 ( ) ; } catch ( java.lang.Throwable e ) { } } } 
public void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == ( VAR_2 ) ) { android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_4 . METHOD_2 ( ) ) ) + STRING_2 ) ) ; return ; } android.util.Log.w ( VAR_3 . TAG , STRING_3 ) ; VAR_4 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( ) ; } 
public static int METHOD_1 ( int input ) throws java.lang.Exception { java.lang.Class < ? > c = java.lang.Class . METHOD_2 ( STRING_1 ) ; TYPE_1 m = c . METHOD_3 ( STRING_2 , new java.lang.Class [ ] { int . class } ) ; return ( ( java.lang.Integer ) ( m . invoke ( null , input ) ) ) ; } 
void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { METHOD_2 ( VAR_1 , VAR_2 ) ; } if ( ( VAR_3 ) != null ) { if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { android.util.Slog.w ( com.android.server.pm.PackageManagerService.TAG , ( STRING_1 + ( VAR_3 . METHOD_4 ( ) ) ) ) ; } } } 
public java.lang.Object METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; if ( ( VAR_2 ) != null ) { VAR_3 = new TYPE_2 ( VAR_2 . get ( ) , VAR_4 , VAR_1 ) ; } VAR_5 = null ; return VAR_1 ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( ) ; } } 
public void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) ; METHOD_3 ( VAR_3 ) ; synchronized ( this ) { METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; } } 
void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , boolean VAR_3 , int VAR_4 ) { METHOD_2 ( VAR_5 , VAR_1 , VAR_4 ) ; if ( VAR_2 ) { METHOD_2 ( VAR_6 , VAR_1 , VAR_4 ) ; } if ( VAR_3 ) { METHOD_3 ( VAR_7 , VAR_1 ) ; } else { METHOD_4 ( VAR_7 , VAR_1 ) ; } METHOD_2 ( VAR_8 , VAR_1 , VAR_4 ) ; } 
public static TYPE_1 METHOD_1 ( java.io.File VAR_1 , boolean VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; if ( ( ! VAR_2 ) || ( ! ( TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ) { return VAR_3 ; } return new TYPE_4 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String id ) throws TYPE_2 { if ( id == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } final int VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 , id ) ; if ( VAR_1 == 0 ) { return null ; } TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 , this , id ) ; try { return VAR_3 . METHOD_3 ( ) ; } catch ( TYPE_5 e ) { throw new TYPE_2 ( e ) ; } } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int w , int h , int d , java.lang.Object VAR_4 ) { TYPE_1 . METHOD_2 ( VAR_5 , STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d , VAR_4 , METHOD_4 ( VAR_4 , true ) , TYPE_2 . METHOD_5 ( VAR_4 ) ) ; TYPE_1 . METHOD_6 ( VAR_5 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 method ) { if ( method == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_1 result = VAR_1 . get ( method ) ; if ( result == null ) { result = new TYPE_1 ( method ) ; VAR_1 . METHOD_3 ( method , result ) ; } return result ; } 
private boolean METHOD_1 ( int VAR_1 ) { if ( ( ( ( ( VAR_2 [ ( VAR_1 - 1 ) ] ) == CHAR_1 ) && ( ( VAR_2 [ ( VAR_1 - 2 ) ] ) == CHAR_2 ) ) && ( ( VAR_2 [ ( VAR_1 - 3 ) ] ) == CHAR_3 ) ) && ( ( VAR_2 [ ( VAR_1 - 4 ) ] ) == CHAR_4 ) ) { return true ; } return false ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } METHOD_3 ( ) ; VAR_2 = false ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( this , VAR_4 ) ; } VAR_5 . METHOD_5 ( ) ; METHOD_6 ( VAR_6 ) ; VAR_7 . METHOD_7 ( ) ; if ( VAR_8 ) { VAR_9 . METHOD_8 ( this ) ; VAR_9 = null ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_3 , VAR_1 ) ; if ( VAR_2 . equals ( TYPE_3 ) ) { return VAR_4 ; } else if ( VAR_2 . equals ( TYPE_4 ) ) { return VAR_5 ; } else if ( VAR_2 . equals ( TYPE_5 ) ) { return VAR_6 ; } else { return null ; } } 
private int METHOD_1 ( int n , int VAR_1 , int VAR_2 ) { if ( ( VAR_1 >= VAR_2 ) || ( n < 0 ) ) { return 0 ; } if ( ( VAR_1 + n ) > VAR_2 ) { return VAR_2 - VAR_1 ; } return n ; } 
private void METHOD_1 ( java.io.File VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( java.io.File VAR_2 : VAR_1 . METHOD_3 ( ) ) { if ( VAR_2 . METHOD_4 ( ) ) { METHOD_1 ( VAR_2 ) ; } else { VAR_2 . METHOD_5 ( ) ; } } VAR_1 . METHOD_5 ( ) ; } } 
protected void METHOD_1 ( int VAR_1 , boolean b , java.lang.Object VAR_2 ) throws TYPE_1 { try { METHOD_2 ( VAR_1 , b , VAR_2 ) ; } catch ( TYPE_1 VAR_3 ) { if ( ( ( VAR_4 ) == null ) || ( ! ( VAR_4 . METHOD_3 ( ) ) ) ) throw VAR_3 ; } } 
public synchronized void run ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 ) throws java.lang.Exception { if ( ( VAR_1 . METHOD_1 ( ) ) == ( VAR_2 ) ) { return ; } TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_1 ( ) . METHOD_5 ( ) , VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 field ) { if ( field == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_1 result = VAR_1 . get ( field ) ; if ( result == null ) { result = new TYPE_1 ( field ) ; VAR_1 . METHOD_3 ( field , result ) ; } return result ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 , int w , int h , float [ ] data ) { mRS . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , w , h ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , ( ( data . length ) * 4 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { when ( VAR_1 . METHOD_2 ( eq ( 0 ) , METHOD_3 ( ) ) ) . thenReturn ( true ) ; METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_3 , 0 , VAR_4 ) ; VAR_5 . METHOD_6 ( ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , char value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public TYPE_1 < ? extends TYPE_2 > METHOD_1 ( ) { TYPE_3 VAR_1 = METHOD_2 ( ) ; TYPE_4 VAR_2 = METHOD_3 ( ) ; if ( VAR_2 == null ) return TYPE_5 . METHOD_4 ( ) ; return new TYPE_6 ( METHOD_5 ( ) , VAR_1 , VAR_2 ) . METHOD_1 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , java.lang.Object VAR_4 , TYPE_2 v , java.lang.String VAR_5 ) { java.lang.String [ ] VAR_6 = Main . METHOD_2 ( VAR_7 , VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( ( ( VAR_7 ) == 0 ) && ( ( VAR_8 ) == null ) ) { v . METHOD_3 ( VAR_6 , VAR_5 ) ; } else { TYPE_3 . METHOD_4 ( VAR_6 ) ; for ( java.lang.String VAR_9 : VAR_6 ) { java.lang.System.out.println ( VAR_9 ) ; } } } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; if ( ! ( METHOD_3 ( s ) ) ) { METHOD_4 ( ) ; } else { s . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( ) ; } VAR_1 . METHOD_8 ( ) ; } 
public static void METHOD_1 ( ) { TYPE_1 t = new TYPE_1 ( ) ; try { TYPE_2 VAR_1 = VAR_2 class . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_3 = VAR_2 class . METHOD_2 ( STRING_2 ) ; VAR_1 . invoke ( t ) ; t . METHOD_3 ( ) ; VAR_3 . invoke ( t ) ; } catch ( java.lang.Exception e ) { java.lang.System.out.println ( ( STRING_3 + ( e.toString ( ) ) ) ) ; e . METHOD_4 ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case VAR_3 : TYPE_2 VAR_4 = TYPE_2 . METHOD_2 ( this ) ; VAR_4 . METHOD_3 ( ) ; VAR_5 = true ; TYPE_3 . METHOD_4 ( this , METHOD_5 ( VAR_6 ) , VAR_7 ) . METHOD_6 ( ) ; android.content.Intent in = new android.content.Intent ( this , VAR_8 class ) ; in . METHOD_7 ( VAR_9 ) ; this . METHOD_8 ( in ) ; METHOD_9 ( ) ; break ; case VAR_10 : METHOD_9 ( ) ; break ; } } 
private void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; double VAR_3 = ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) * FLOAT_1 ; VAR_4 . METHOD_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; if ( VAR_1 < 1 ) { VAR_4 . METHOD_6 ( VAR_5 ) ; } else { VAR_4 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ; } } 
private void METHOD_1 ( int id ) { final TYPE_1 p = VAR_1 ; switch ( id ) { case VAR_2 : VAR_3 = VAR_4 ; VAR_5 = METHOD_2 ( VAR_6 ) ; VAR_7 = METHOD_3 ( VAR_2 ) ; VAR_8 = METHOD_2 ( VAR_9 ) ; VAR_10 = this ; VAR_11 = METHOD_2 ( VAR_12 ) ; VAR_13 = this ; METHOD_4 ( ) ; VAR_14 = VAR_15 . METHOD_5 ( VAR_16 ) ; VAR_14 . METHOD_6 ( false ) ; break ; default : break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( TYPE_1 . eq ( STRING_3 ) , TYPE_1 . eq ( STRING_4 ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_2 response = new TYPE_2 ( ) ; VAR_4 = VAR_2 . type ; VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; if ( RIL . RILJ_LOGD ) VAR_3 . METHOD_3 ( VAR_9 , response ) ; if ( ( VAR_10 ) != null ) { VAR_10 . METHOD_4 ( new android.os.AsyncResult ( null , response , null ) ) ; } } 
static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = ( ( VAR_4 ) >= ( VAR_5 ) ) ? VAR_6 : VAR_7 ; return VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_8 , java.lang.String . METHOD_5 ( VAR_2 ) ) . METHOD_4 ( VAR_9 , STRING_1 ) . METHOD_4 ( VAR_10 , VAR_11 ) . build ( ) ; } 
void METHOD_1 ( ) { METHOD_2 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_1 ) ) ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_4 ( ) ; VAR_4 = new TYPE_1 ( ( ( VAR_5 ) | ( VAR_6 ) ) , VAR_7 , VAR_8 ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_9 , false , false ) ; status = VAR_10 ; } 
public int METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + device ) ) ; TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) { return VAR_3 ; } return service . METHOD_1 ( device ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_4 , VAR_5 . METHOD_4 ( ) , VAR_6 , VAR_7 , VAR_8 ) ; final TYPE_3 VAR_9 = METHOD_5 ( VAR_2 . METHOD_6 ( ) , ( - ( VAR_1 . METHOD_7 ( ) ) ) ) ; VAR_2 . METHOD_8 ( VAR_9 ) ; VAR_5 . METHOD_9 ( VAR_2 ) ; } 
private synchronized void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) { return ; } METHOD_2 ( null , VAR_1 ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( ) ; java.util.Set < java.lang.String > VAR_3 = METHOD_4 ( VAR_1 ) ; for ( java.lang.String VAR_4 : VAR_3 ) { METHOD_5 ( VAR_2 , VAR_4 ) ; } METHOD_6 ( ) ; } 
private void METHOD_1 ( TYPE_1 fd , java.lang.String VAR_1 ) throws java.lang.Exception { try { METHOD_2 ( fd , VAR_1 ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 expected ) { assertEquals ( VAR_2 , VAR_3 ) ; } finally { TYPE_3 . METHOD_3 ( fd ) ; } } 
public boolean METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( ) ; } 
private void METHOD_1 ( TYPE_1 s ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + s ) ) ; try { if ( s != null ) { s . METHOD_2 ( ) ; } } catch ( java.io.IOException e ) { if ( VAR_1 ) android.util.Log.e ( VAR_2 . TAG , STRING_2 ) ; } VAR_3 . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) ; return ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( STRING_1 , VAR_3 ) ; TYPE_3 . when ( VAR_4 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_2 ) ; java.lang.String VAR_6 = VAR_7 . METHOD_6 ( ) ; assertEquals ( VAR_6 , STRING_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( mContext ) ; TYPE_3 state ; assertFalse ( VAR_1 . METHOD_2 ( ) ) ; assertFalse ( VAR_1 . METHOD_3 ( ) ) ; state = VAR_1 . METHOD_4 ( ) ; assertNotNull ( state ) ; assertTrue ( VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( true ) ; VAR_1 . METHOD_6 ( state ) ; assertFalse ( VAR_1 . METHOD_2 ( ) ) ; assertTrue ( VAR_1 . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( this , VAR_3 ) ; if ( VAR_2 == null ) { return ; } VAR_4 . METHOD_3 ( ) ; VAR_4 = VAR_2 ; VAR_4 . METHOD_4 ( VAR_5 ) ; METHOD_5 ( ) ; METHOD_6 ( false ) ; VAR_4 . METHOD_7 ( VAR_6 , false ) ; if ( VAR_4 . METHOD_8 ( ) ) { METHOD_9 ( true ) ; } } 
public void METHOD_1 ( int VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { if ( VAR_3 ) { android.util.Log.v ( TYPE_1 . TAG , ( STRING_1 + VAR_1 ) ) ; } return ; } final TYPE_2 VAR_4 = VAR_5 ; if ( VAR_4 == null ) { if ( VAR_3 ) android.util.Log.d ( TYPE_1 . TAG , STRING_2 ) ; return ; } VAR_4 . METHOD_2 ( VAR_6 ) ; android.os.Message msg = VAR_4 . METHOD_3 ( VAR_7 , VAR_1 , 0 ) ; VAR_4 . METHOD_4 ( msg ) ; } 
public boolean METHOD_1 ( java.util.Map < TYPE_1 , TYPE_2 > VAR_1 ) { for ( TYPE_3 < TYPE_1 , TYPE_2 > entry : VAR_1 . METHOD_2 ( ) ) { if ( ( VAR_2 . METHOD_3 ( entry . METHOD_4 ( ) ) ) && ( VAR_3 . METHOD_3 ( entry . METHOD_5 ( ) ) ) ) { return true ; } } return false ; } 
public static java.lang.String METHOD_1 ( char VAR_1 ) { TYPE_1 result = new TYPE_1 ( ) ; java.lang.String VAR_2 = java.lang.Integer . toString ( VAR_1 , 16 ) . METHOD_2 ( ) ; for ( int i = VAR_2 . length ( ) ; i < 4 ; ++ i ) { result . append ( CHAR_1 ) ; } return result + VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Throwable { android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ; TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_2 = METHOD_2 ( ) ; android.util.Log.w ( VAR_1 . TAG , ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; METHOD_3 ( VAR_3 , VAR_4 , true , false ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 result = METHOD_2 ( x , VAR_1 ) ; if ( result == null ) { METHOD_3 ( null ) ; return ; } if ( ( VAR_2 ) != null ) { TYPE_4 VAR_3 = METHOD_4 ( ) . get ( VAR_2 ) ; result = METHOD_5 ( VAR_3 , result ) ; } METHOD_3 ( result ) ; } catch ( java.lang.Throwable e ) { throw METHOD_6 ( x , e ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + VAR_1 ) ) ; VAR_4 = false ; VAR_5 = false ; VAR_6 = VAR_1 ; VAR_6 . METHOD_2 ( VAR_7 ) ; VAR_6 . METHOD_3 ( VAR_8 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 [ ] VAR_1 = METHOD_2 ( VAR_2 class ) ; assertNotNull ( VAR_1 ) ; TYPE_2 < java.lang.Class < ? > , java.lang.Class < ? > > VAR_3 = METHOD_3 ( ) ; assertNotNull ( VAR_3 ) ; VAR_3 . METHOD_4 ( ) ; TYPE_1 [ ] VAR_4 = METHOD_2 ( VAR_2 class ) ; assertNotNull ( VAR_4 ) ; assertTrue ( TYPE_3 . equals ( VAR_1 , VAR_4 ) ) ; } 
private static void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) != null ) { TYPE_1 . METHOD_2 ( ) ; } VAR_3 . log ( VAR_4 , STRING_1 ) ; VAR_2 = new TYPE_2 ( STRING_2 ) ; VAR_2 . METHOD_3 ( new TYPE_3 ( ) { public void run ( ) { TYPE_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( ) ; } } , VAR_5 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( ( VAR_4 ) || ( TYPE_4 . METHOD_2 ( VAR_3 ) ) ) { VAR_4 = true ; return ; } TYPE_5 . METHOD_3 ( VAR_2 , VAR_1 , VAR_5 , VAR_3 , new TYPE_6 ( new java.io.File ( new java.lang.String ( VAR_6 ) ) ) ) ; if ( ( VAR_7 ) != null ) { for ( TYPE_3 VAR_8 : VAR_7 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_8 ) ; } } } 
void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 callback ) { METHOD_2 ( VAR_2 , STRING_1 ) ; if ( VAR_3 ) android.util.Log.d ( VAR_4 . TAG , ( STRING_2 + VAR_1 ) ) ; VAR_5 . METHOD_3 ( VAR_1 , callback ) ; METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String path , java.lang.String name ) { TYPE_3 d = TYPE_4 . METHOD_2 ( VAR_2 , path , name , null , VAR_1 ) . METHOD_3 ( ) ; TYPE_5 r = new TYPE_5 ( d , VAR_3 ) ; VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; } 
private void METHOD_1 ( java.lang.String [ ] VAR_1 ) { assertEquals ( 9 , VAR_1 . length ) ; TYPE_1 . METHOD_2 ( VAR_1 [ 4 ] ) ; TYPE_1 . METHOD_2 ( VAR_1 [ 5 ] ) ; TYPE_1 . METHOD_2 ( VAR_1 [ 6 ] ) ; TYPE_1 . METHOD_2 ( VAR_1 [ 7 ] ) ; TYPE_1 . METHOD_2 ( VAR_1 [ 8 ] ) ; } 
private static long METHOD_1 ( java.io.File VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { throw new TYPE_1 ( ) ; } return TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( 1 ) ) ; } 
public static TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , new TYPE_4 ( TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) ; TYPE_5 . METHOD_4 ( VAR_2 . METHOD_3 ( ) , VAR_4 . METHOD_3 ( ) , VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) , VAR_3 . METHOD_7 ( ) . METHOD_6 ( ) ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Throwable { android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ; TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_2 = METHOD_2 ( ) ; if ( ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ) { METHOD_3 ( INT_1 , INT_2 , true , true ) ; } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } } 
private void METHOD_1 ( boolean VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 ) == null ) { return ; } boolean VAR_4 = METHOD_2 ( ) ; if ( VAR_5 . METHOD_3 ( ) ) { return ; } VAR_5 . METHOD_4 ( METHOD_5 ( ( VAR_4 ? VAR_6 : VAR_7 ) ) ) ; VAR_8 . METHOD_6 ( VAR_1 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { java.io.File VAR_1 = java.io.File . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( ) ; TYPE_1 f = new TYPE_1 ( VAR_1 , true ) ; assertEquals ( 10 , f . METHOD_7 ( ) . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } TYPE_2 name = VAR_1 . getName ( ) ; if ( ( VAR_2 . get ( name ) ) != null ) { throw new java.lang.IllegalArgumentException ( ( STRING_2 + name ) ) ; } VAR_2 . METHOD_3 ( name , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) . equals ( VAR_3 ) ) ) { context . METHOD_4 ( VAR_4 , context . METHOD_5 ( VAR_2 ) , STRING_1 , null ) ; } } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , int count ) { METHOD_2 ( STRING_1 ) ; arg ( STRING_2 , VAR_1 ) ; arg ( STRING_3 , VAR_2 ) ; arg ( STRING_4 , count ) ; METHOD_3 ( ) ; for ( int i = 0 ; i < count ; i ++ ) { METHOD_4 ( VAR_3 , i , ( VAR_2 + count ) ) ; } METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , count ) ; METHOD_7 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . name = name ; VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_4 = METHOD_2 ( VAR_5 ) ; VAR_6 = METHOD_2 ( VAR_7 ) ; VAR_8 = METHOD_2 ( VAR_9 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = 2 ; int VAR_2 = 8 ; TYPE_1 VAR_3 = new TYPE_1 ( 0 ) ; try { VAR_3 . METHOD_2 ( INT_1 ) ; fail ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } try { VAR_3 . METHOD_2 ( ( - 1 ) ) ; fail ( STRING_2 ) ; } catch ( java.lang.IllegalArgumentException e ) { } VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String url , boolean VAR_2 ) { final TYPE_2 VAR_3 = mContext . METHOD_2 ( ) ; if ( VAR_2 && ( ( VAR_4 ) != null ) ) { VAR_4 . METHOD_3 ( false ) ; VAR_4 = null ; } if ( ( VAR_4 ) == null ) { VAR_4 = new TYPE_3 ( this , mContext , VAR_3 , VAR_1 ) ; VAR_4 . METHOD_4 ( url ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { android.content.Intent VAR_3 = new android.content.Intent ( this , METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 , null ) ) ; } 
private TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } ( VAR_4 ) ++ ; if ( ! ( VAR_5 ) ) { METHOD_3 ( ( ( VAR_2 . getName ( ) ) + STRING_1 ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 uri , TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } VAR_2 . METHOD_2 ( ) ; try { if ( ( VAR_1 . METHOD_3 ( ) ) != 0 ) { METHOD_4 ( VAR_3 , METHOD_5 ( uri ) , VAR_1 ) ; } } finally { VAR_2 . METHOD_6 ( ) ; } } 
public static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( null , null , false , null , null , null , VAR_1 , false , false , false , false , false , false , null , null , true , ( - 1 ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ! ( METHOD_2 ( VAR_3 , STRING_1 ) ) ) { throw new TYPE_2 ( STRING_2 ) ; } synchronized ( VAR_4 ) { TYPE_3 VAR_5 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( VAR_5 == null ) { android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) ; return ; } VAR_6 = VAR_2 ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_3 ( ) ; } final TYPE_4 VAR_4 = this . VAR_4 ; if ( ! ( METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != ( VAR_3 ) ) { boolean VAR_4 = true ; for ( int i = 0 , s = VAR_5 . size ( ) ; i < s ; i ++ ) { if ( ( VAR_5 . get ( i ) . METHOD_2 ( ) ) != ( VAR_3 ) ) { VAR_4 = false ; break ; } } if ( VAR_4 ) { VAR_2 = VAR_3 ; } } } 
public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; VAR_6 . METHOD_2 ( ) ; if ( ( VAR_5 ) != null ) { try { VAR_5 . METHOD_1 ( ) ; } catch ( TYPE_1 VAR_7 ) { } } } } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_4 ( VAR_2 ) ; } else if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_5 ( VAR_2 ) ; } else if ( ! ( VAR_4 . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_6 ( VAR_2 ) ; } return new TYPE_1 ( VAR_5 ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } VAR_2 . METHOD_5 ( method ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( false ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( null ) ; try { VAR_2 . METHOD_5 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 e ) { } VAR_1 . METHOD_6 ( ) ; try { VAR_2 . METHOD_5 ( ) ; fail ( STRING_2 ) ; } catch ( TYPE_3 e ) { } } 
public void METHOD_1 ( TYPE_1 VAR_1 , double x , int VAR_2 , final java.lang.String expected ) { VAR_1 . METHOD_2 ( VAR_2 ) ; java.lang.String out = VAR_1 . format ( x ) ; logln ( ( ( ( ( x + STRING_1 ) + VAR_2 ) + STRING_2 ) + out ) ) ; if ( ! ( out . equals ( expected ) ) ) errln ( ( STRING_3 + expected ) ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String text ) { java.lang.String s = VAR_1 . METHOD_2 ( ) ; int start = ( s == null ) ? 0 : s . length ( ) ; VAR_1 . append ( text ) ; TYPE_2 VAR_2 = new TYPE_3 ( ) ; VAR_2 . start = start ; VAR_2 . length = text . length ( ) ; VAR_3 = VAR_4 ; VAR_1 . METHOD_3 ( VAR_2 ) ; } 
private static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 , java.util.List < java.lang.String > args ) { for ( TYPE_1 < java.lang.String , java.lang.String > entry : VAR_1 . METHOD_2 ( ) ) { args . METHOD_3 ( STRING_1 ) ; args . METHOD_3 ( ( ( ( entry . METHOD_4 ( ) ) + STRING_2 ) + ( entry . METHOD_5 ( ) ) ) ) ; } } 
public void METHOD_1 ( byte [ ] VAR_1 , int VAR_2 , int VAR_3 ) throws java.io.IOException { try { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( TYPE_1 VAR_5 ) { VAR_4 . fail ( VAR_5 . METHOD_2 ( ) ) ; throw VAR_5 ; } catch ( java.io.IOException e ) { VAR_4 . fail ( VAR_6 ) ; throw e ; } catch ( java.lang.RuntimeException e ) { VAR_4 . fail ( VAR_6 ) ; throw new TYPE_1 ( VAR_6 ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { assert ( VAR_2 ) != null ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String VAR_4 : VAR_2 . METHOD_2 ( VAR_1 ) ) { if ( ! ( VAR_3 . METHOD_3 ( VAR_4 ) ) ) { VAR_3 . METHOD_4 ( VAR_4 ) ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_4 , CHAR_1 ) ; METHOD_5 ( VAR_6 , VAR_5 ) ; METHOD_5 ( VAR_7 , VAR_5 ) ; } } } 
public int METHOD_1 ( ) { if ( ( VAR_1 ) == ( - 1 ) ) { VAR_1 = INT_1 + ( VAR_2 . METHOD_1 ( ) ) ; if ( ( VAR_3 ) != null ) { VAR_1 = ( INT_1 * ( VAR_1 ) ) + ( VAR_3 . METHOD_1 ( ) ) ; } } return VAR_1 ; } 
public static long METHOD_1 ( java.lang.String name , long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } try { java.lang.Class < ? > c = java.lang.Class . METHOD_2 ( STRING_1 ) ; TYPE_2 m = c . METHOD_3 ( name , long . class ) ; return ( ( TYPE_3 ) ( m . invoke ( null , arg ) ) ) ; } catch ( java.lang.Exception ex ) { throw new TYPE_1 ( ex ) ; } } 
public void METHOD_1 ( TYPE_1 device , TYPE_2 status ) { if ( ! ( device . METHOD_2 ( VAR_1 ) ) ) return ; try { for ( TYPE_3 listener : VAR_2 ) { listener . METHOD_3 ( status ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( TYPE_4 . TAG , STRING_1 , e ) ; } } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; s . METHOD_3 ( 0 , 0 ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; } 
private final synchronized void METHOD_1 ( boolean VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_5 ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_6 ) ; TYPE_1 . METHOD_4 ( VAR_2 , null ) ; if ( VAR_1 ) { VAR_2 = new android.content.Intent ( VAR_7 ) ; mContext . METHOD_5 ( VAR_2 ) ; } } 
public static void METHOD_1 ( java.io.File VAR_1 , boolean VAR_2 ) throws java.io.IOException { if ( VAR_2 && ( ! ( VAR_1 . METHOD_1 ( true ) ) ) ) { VAR_3 . error ( STRING_1 ) ; throw new java.io.IOException ( ( STRING_2 + VAR_1 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 options = new TYPE_1 ( ) ; options . METHOD_2 ( TYPE_2 . getName ( ) , TYPE_3 . toString ( ) ) ; TYPE_4 . METHOD_3 ( options , null , null , VAR_1 , false , false , FLOAT_1 , ( ( TYPE_5 ) ( null ) ) , ( ( TYPE_6 [ ] ) ( null ) ) ) ; } 
private void METHOD_1 ( int index ) { TYPE_1 VAR_1 = VAR_2 . get ( index ) ; if ( VAR_1 != null ) { VAR_3 = VAR_1 ; VAR_4 . METHOD_2 ( true ) ; if ( ! ( VAR_5 ) ) { VAR_5 = true ; VAR_6 . METHOD_3 ( index ) ; VAR_5 = false ; } if ( VAR_1 instanceof TYPE_2 ) { ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_4 ( ) ; } } } 
public boolean METHOD_1 ( int VAR_1 , int flags ) { synchronized ( this ) { METHOD_2 ( VAR_2 , STRING_1 ) ; long VAR_3 = TYPE_1 . METHOD_3 ( ) ; try { return METHOD_4 ( VAR_1 , flags ) ; } finally { TYPE_1 . METHOD_5 ( VAR_3 ) ; } } } 
private void METHOD_1 ( boolean VAR_1 , android.os.Message VAR_2 ) { synchronized ( VAR_3 ) { if ( VAR_4 ) log ( ( STRING_1 + VAR_1 ) ) ; boolean VAR_5 = true ; VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_1 ) { log ( STRING_2 ) ; METHOD_3 ( VAR_6 ) ; } else { VAR_5 = false ; log ( STRING_3 ) ; METHOD_4 ( VAR_7 , VAR_2 ) ; } if ( VAR_5 ) { if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( ) ; } } } } 
private static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , boolean VAR_3 , boolean VAR_4 ) { int index = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( index != ( - 1 ) ) { return index == ( ( VAR_1 . length ( ) ) - ( VAR_2 . length ( ) ) ) ; } return false ; } 
void METHOD_1 ( java.lang.String address ) { android.util.Log . i ( VAR_1 . TAG , ( STRING_1 + address ) ) ; android.bluetooth.BluetoothDevice d = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( address . METHOD_4 ( ) ) ; if ( d == null ) { android.util.Log . METHOD_5 ( VAR_1 . TAG , ( STRING_2 + address ) ) ; } TYPE_2 . METHOD_6 ( ) . METHOD_1 ( d ) ; } 
public void METHOD_1 ( ) { try { int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; android.util.Log . i ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ; if ( VAR_1 > 0 ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; } else { VAR_5 . METHOD_5 ( ) ; TYPE_2 . set ( STRING_2 , STRING_3 ) ; } } catch ( android.os.RemoteException e ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; METHOD_3 ( false ) ; METHOD_4 ( true ) ; METHOD_5 ( VAR_1 , false ) ; METHOD_6 ( false ) ; assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) throws TYPE_4 , TYPE_5 { assert ! ( METHOD_2 ( ) ) ; METHOD_3 ( VAR_1 . METHOD_4 ( null ) , java.lang.String . METHOD_5 ( true ) ) ; METHOD_6 ( VAR_1 ) ; return METHOD_7 ( VAR_1 ) . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( METHOD_11 ( VAR_1 , VAR_2 ) ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this ) { int index = METHOD_2 ( VAR_1 , false ) ; if ( index >= 0 ) { TYPE_2 r = ( ( TYPE_2 ) ( VAR_2 . get ( index ) ) ) ; return r . packageName ; } return null ; } } 
public TYPE_1 METHOD_1 ( ) { int size = ( this . METHOD_2 ( ) ) > > 3 ; int VAR_1 = METHOD_3 ( ) ; return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; } 
public void METHOD_1 ( long session , long VAR_1 , long context , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 , java.util.ArrayList < java.io.File > VAR_3 ) { if ( VAR_1 == null ) { return ; } for ( java.lang.String path : VAR_1 . METHOD_2 ( STRING_1 ) ) { try { TYPE_1 sb = VAR_4 . METHOD_3 ( path ) ; if ( ( ! VAR_2 ) || ( METHOD_4 ( VAR_5 ) ) ) { VAR_3 . METHOD_5 ( new java.io.File ( path ) ) ; } } catch ( TYPE_2 VAR_6 ) { } } } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.lang.String [ ] VAR_3 = VAR_4 ; java.lang.String s = VAR_3 [ VAR_2 ] ; if ( s == null ) { s = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( ) ; VAR_3 [ VAR_2 ] = s ; } return s ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) return false ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; if ( ( VAR_2 ) != ( VAR_3 ) ) return false ; return true ; } 
private static boolean METHOD_1 ( ) { boolean VAR_1 = false ; try { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( STRING_1 ) ) ; if ( VAR_2 != null ) { VAR_1 = ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_4 . TAG , STRING_2 , e ) ; } return VAR_1 ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( VAR_2 ) ; if ( VAR_1 == null ) return null ; TYPE_1 VAR_3 = VAR_1 . METHOD_1 ( VAR_4 ) ; if ( VAR_3 == null ) { METHOD_3 ( STRING_1 ) ; return null ; } return VAR_3 ; } 
public final void METHOD_1 ( ) { assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( STRING_1 , STRING_2 , ( - INT_1 ) ) ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_2 ( STRING_1 , STRING_2 , 1 ) ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( STRING_3 , STRING_4 , ( - INT_2 ) ) ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_2 ( STRING_3 , STRING_4 , 2 ) ) ; assertEquals ( VAR_4 , VAR_2 . METHOD_2 ( STRING_5 , STRING_6 , 3 ) ) ; } 
private void METHOD_1 ( int VAR_1 , int VAR_2 ) { synchronized ( VAR_3 ) { VAR_3 . METHOD_2 ( VAR_2 , VAR_1 ) ; if ( android.util.Log . METHOD_3 ( VAR_4 , VAR_5 ) ) { android.util.Log . i ( VAR_4 , ( STRING_1 + ( METHOD_4 ( ) ) ) ) ; } } } 
static void METHOD_1 ( int VAR_1 , int [ ] VAR_2 , int offset , int VAR_3 , int x , int y , int VAR_4 , int VAR_5 ) { TYPE_1 VAR_6 = VAR_7 . METHOD_2 ( VAR_1 ) ; if ( VAR_6 == null ) { return ; } VAR_6 . METHOD_3 ( ) . METHOD_4 ( x , y , VAR_4 , VAR_5 , VAR_2 , offset , VAR_3 ) ; } 
public int METHOD_1 ( int VAR_1 , TYPE_1 callback ) throws android.os.RemoteException { return METHOD_1 ( VAR_1 , new TYPE_2 ( ) { public void error ( int VAR_2 , java.lang.String VAR_3 ) throws android.os.RemoteException { callback . error ( VAR_2 , VAR_3 ) ; } public void METHOD_2 ( java.util.List < TYPE_3 > VAR_4 ) throws android.os.RemoteException { callback . METHOD_2 ( VAR_4 ) ; } public void METHOD_3 ( ) throws android.os.RemoteException { callback . METHOD_3 ( ) ; } } ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 ; if ( VAR_1 instanceof TYPE_3 ) { VAR_2 = VAR_3 . METHOD_1 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ; } else { assert VAR_1 instanceof TYPE_4 ; VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_2 , ( ( TYPE_4 ) ( VAR_1 ) ) ) ; } return VAR_2 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { assertTrue ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ) ; verify ( VAR_5 , METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( VAR_6 class ) ) ; METHOD_6 ( VAR_1 ) ; VAR_7 . verify ( VAR_8 , METHOD_3 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_5 ( VAR_9 class ) ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; s . METHOD_3 ( STRING_1 ) ; s . METHOD_4 ( 0 , 0 ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( 100 ) , TYPE_2 . METHOD_4 ( 5 ) , TYPE_2 . METHOD_5 ( INT_1 ) ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_6 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 ) ; TYPE_3 . METHOD_7 ( VAR_3 , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 context ) { VAR_1 = TYPE_2 . get ( context . METHOD_2 ( ) ) ; if ( ( ( VAR_1 ) == null ) && ( ! ( VAR_2 ) ) ) { VAR_2 = true ; context . METHOD_3 ( VAR_3 , TYPE_3 . METHOD_4 ( VAR_4 ) , STRING_1 , null ) ; } } 
public boolean METHOD_1 ( TYPE_1 node , TYPE_2 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( ) ; assert VAR_2 != null ; int start = VAR_3 . METHOD_3 ( this , node ) ; if ( start != ( - 1 ) ) { return METHOD_4 ( start , VAR_1 ) ; } return false ; } 
public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( ) ; float [ ] values = event . values ; TYPE_2 VAR_1 = METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( VAR_3 , values [ 0 ] , values [ 1 ] , values [ 2 ] , TYPE_3 . METHOD_6 ( values ) ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_2 VAR_3 , int VAR_4 ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_5 = ( ( TYPE_4 ) ( VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) ) ; METHOD_2 ( VAR_5 ) ; return VAR_5 ; } 
public void METHOD_1 ( ) { assertEquals ( ( - 1 ) , TYPE_1 . METHOD_2 ( new java.util.ArrayList < java.lang.Integer > ( ) , 9 ) ) ; assertEquals ( ( - 1 ) , TYPE_1 . METHOD_2 ( new java.util.ArrayList < java.lang.Integer > ( ) , 9 , new TYPE_2 < java.lang.Integer > ( ) { public int METHOD_3 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 ) { return VAR_1 . METHOD_4 ( VAR_2 ) ; } } ) ) ; } 
private void METHOD_1 ( TYPE_1 item ) { synchronized ( VAR_1 ) { java.util.Map < TYPE_2 , TYPE_3 < java.lang.String , TYPE_1 > > VAR_2 = METHOD_2 ( ) ; TYPE_3 < java.lang.String , TYPE_1 > VAR_3 = METHOD_2 ( item . METHOD_3 ( ) ) ; if ( ! ( VAR_3 . METHOD_4 ( item ) ) ) { VAR_3 . METHOD_5 ( item . getName ( ) , item ) ; } } } 
public boolean METHOD_1 ( TYPE_1 source , TYPE_2 [ ] VAR_1 ) { if ( ( VAR_1 . length ) > 0 ) { VAR_2 . METHOD_2 ( source ) ; } if ( source == null ) { return METHOD_3 ( this , VAR_1 ) ; } else { return METHOD_4 ( this , source , VAR_1 ) ; } } 
protected void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 , TYPE_5 { final byte [ ] VAR_4 ; if ( VAR_2 instanceof TYPE_6 ) { TYPE_6 VAR_5 = ( ( TYPE_6 ) ( VAR_2 ) ) ; VAR_4 = VAR_5 . METHOD_2 ( ) ; } else { VAR_4 = null ; } METHOD_3 ( VAR_1 , key , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ; final int VAR_4 = VAR_3 . size ( ) ; for ( int VAR_5 = 0 ; VAR_5 < VAR_4 ; VAR_5 ++ ) assertEquals ( STRING_1 , VAR_2 . get ( ( ( VAR_4 - VAR_5 ) - 1 ) ) , VAR_3 . get ( VAR_5 ) ) ; } 
public boolean METHOD_1 ( TYPE_1 target ) { if ( target == ( this ) ) { return true ; } if ( ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_2 ( ) ) ) { return VAR_2 . METHOD_1 ( target ) ; } else { if ( ( ! ( VAR_3 . equals ( target . METHOD_3 ( ) ) ) ) || ( ! ( VAR_4 . equals ( target . getName ( ) ) ) ) ) { return false ; } return VAR_2 . METHOD_1 ( target ) ; } } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) < ( VAR_4 ) ) { TYPE_3 . fail ( STRING_1 ) ; } try { return ( ( boolean ) ( VAR_5 class . METHOD_2 ( STRING_2 , VAR_6 class ) . invoke ( VAR_1 , VAR_2 ) ) ) ; } catch ( TYPE_4 | TYPE_5 | TYPE_6 e ) { TYPE_7 . e ( STRING_3 , STRING_4 , e ) ; } return false ; } 
private void METHOD_1 ( android.bluetooth.BluetoothDevice device , java.lang.String VAR_1 ) { TYPE_1 . d ( ( STRING_1 + device ) ) ; VAR_2 . METHOD_2 ( device ) ; VAR_3 . METHOD_3 ( device ) ; VAR_4 . METHOD_4 ( device ) ; VAR_5 . METHOD_5 ( device ) ; VAR_6 . METHOD_6 ( device ) ; VAR_7 . METHOD_7 ( device ) ; VAR_8 . METHOD_8 ( device ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 target = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( target != null ) { TYPE_4 data = TYPE_3 . METHOD_2 ( ) . METHOD_5 ( target ) ; if ( data != null ) { TYPE_1 VAR_2 = data . METHOD_1 ( ) ; return VAR_2 ; } } return null ; } 
public TYPE_1 METHOD_1 ( final int VAR_1 , final java.lang.String VAR_2 , final boolean VAR_3 ) { TYPE_1 VAR_4 ; VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_2 . equals ( STRING_1 ) ) { VAR_6 . METHOD_2 ( new java.lang.Integer ( VAR_1 ) ) ; } return VAR_4 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . d ( this , STRING_1 , VAR_1 ) ; if ( ( ( VAR_2 ) == null ) || ( VAR_2 . equals ( VAR_3 . METHOD_2 ( ) ) ) ) { METHOD_3 ( VAR_3 . METHOD_2 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; } else { VAR_2 . METHOD_6 ( ) ; VAR_4 = VAR_1 ; android.os.Message msg = VAR_5 . METHOD_7 ( VAR_6 ) ; msg.obj = VAR_1 ; VAR_5 . METHOD_8 ( msg , VAR_7 ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { int length = METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( os ) ; VAR_2 . METHOD_3 ( VAR_3 , 0 , length ) ; java.lang.String result = new java.lang.String ( os . METHOD_4 ( ) ) ; assertEquals ( VAR_1 , result ) ; } 
public static int METHOD_1 ( float VAR_1 ) { TYPE_1 . assertTrue ( ( VAR_1 > 0 ) ) ; int VAR_2 = TYPE_2 . METHOD_2 ( 1 , ( ( int ) ( TYPE_3 . METHOD_3 ( ( 1 / VAR_1 ) ) ) ) ) ; return VAR_2 <= 8 ? TYPE_1 . METHOD_4 ( VAR_2 ) : ( ( VAR_2 + 7 ) / 8 ) * 8 ; } 
public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long res = 0 ; long VAR_3 = - arg1 ; for ( long i = 0 ; i < 1 ; i ++ ) { res += ( VAR_3 - VAR_1 ) - i ; } return res ; } 
public void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ; final TYPE_1 [ ] VAR_3 = METHOD_2 ( ) ; if ( VAR_3 == null ) { android.util.Log.w ( VAR_2 . TAG , STRING_2 ) ; return ; } final TYPE_2 VAR_4 = METHOD_3 ( ) ; VAR_5 . METHOD_4 ( new java.lang.Runnable ( ) { public void run ( ) { for ( TYPE_1 VAR_6 : VAR_3 ) { METHOD_5 ( VAR_6 , VAR_4 , null ) ; } } } ) ; } 
public void METHOD_1 ( boolean VAR_1 ) { if ( ( ( ( VAR_2 ) & ( VAR_3 ) ) != 0 ) != VAR_1 ) { VAR_2 = ( ( VAR_2 ) & ( ~ ( VAR_3 ) ) ) | ( VAR_1 ? VAR_3 : 0 ) ; if ( ! VAR_1 ) METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; if ( VAR_1 ) { METHOD_6 ( VAR_4 ) ; } else { METHOD_7 ( VAR_5 ) ; } } } 
protected < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > METHOD_1 ( TYPE_4 < TYPE_5 , TYPE_1 > VAR_1 , TYPE_5 data ) throws java.lang.Exception { TYPE_6 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_7 event = METHOD_4 ( VAR_1 , VAR_2 ) ; try { return VAR_1 . METHOD_5 ( data ) ; } finally { event . METHOD_6 ( ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 context ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { TYPE_3 VAR_3 = context . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ! ( VAR_3 . METHOD_5 ( ) ) ) { return VAR_3 . get ( 0 ) ; } return TYPE_1 . METHOD_6 ( ) ; } else { return context . METHOD_2 ( ) . METHOD_3 ( ) . locale ; } } 
private java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { int size = VAR_2 . size ( ) ; if ( size == 0 ) { return null ; } java.lang.Object value = VAR_1 . METHOD_1 ( VAR_2 . get ( 0 ) ) ; for ( int i = 1 ; i < size ; i ++ ) { if ( ! ( TYPE_2 . METHOD_2 ( value , VAR_1 . METHOD_1 ( VAR_2 . get ( i ) ) ) ) ) { return null ; } } return value ; } 
public void METHOD_1 ( java.io.File output ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( output . METHOD_3 ( ) ) { output . METHOD_4 ( ) ; } } else if ( METHOD_5 ( output ) ) { METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( ( STRING_1 + output ) ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 e ) { int id = VAR_1 . METHOD_2 ( 8 , e . METHOD_3 ( VAR_1 ) ) ; if ( ! ( e . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } return new TYPE_1 ( id , VAR_1 , e ) ; } 
static TYPE_1 METHOD_1 ( ) throws java.io.IOException { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( VAR_1 != null ) { TYPE_1 path = TYPE_3 . get ( VAR_1 ) . METHOD_3 ( ) ; TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( path ) , STRING_1 , path ) ; return path ; } TYPE_1 VAR_3 = TYPE_5 . METHOD_6 ( STRING_2 ) ; TYPE_2 . METHOD_7 ( VAR_2 , VAR_3 . toString ( ) ) ; TYPE_6 . METHOD_8 ( VAR_3 ) ; return VAR_3 ; } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 listener ) throws TYPE_2 { METHOD_2 ( ) ; if ( listener == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } try { TYPE_3 p = METHOD_3 ( VAR_2 , listener ) ; VAR_3 . METHOD_4 ( p ) ; VAR_4 . METHOD_1 ( VAR_1 , p ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_2 , e , VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( true , METHOD_4 ( ) ) ; assertFalse ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; assertTrue ( VAR_5 . METHOD_6 ( ) ) ; assertTrue ( VAR_2 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . run ( ) ; METHOD_3 ( ) . METHOD_4 ( VAR_3 class ) . METHOD_5 ( STRING_1 ) . METHOD_5 ( STRING_2 ) . METHOD_5 ( STRING_3 ) . METHOD_4 ( VAR_4 class ) . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ; } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 node , java.lang.String text , int VAR_1 , int VAR_2 , int VAR_3 ) { java.lang.String VAR_4 = java.lang.String.format ( STRING_1 , text . METHOD_2 ( VAR_2 , VAR_3 ) ) ; TYPE_3 location = context . METHOD_3 ( node , VAR_1 , VAR_3 ) ; context . METHOD_4 ( VAR_5 , node , location , VAR_4 , null ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ; TYPE_1 . when ( VAR_4 . METHOD_2 ( VAR_1 ) ) . thenReturn ( STRING_3 ) ; TYPE_2 . assertTrue ( VAR_5 . METHOD_3 ( VAR_6 , VAR_3 ) ) ; TYPE_1 . when ( VAR_4 . METHOD_2 ( VAR_1 ) ) . thenReturn ( STRING_4 ) ; TYPE_2 . assertFalse ( VAR_5 . METHOD_3 ( VAR_6 , VAR_3 ) ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; TYPE_1 result = new TYPE_1 ( null , VAR_1 , TYPE_3 . METHOD_4 ( ) ) ; VAR_3 = true ; TYPE_1 VAR_4 = VAR_2 . METHOD_5 ( STRING_1 ) ; result . METHOD_6 ( VAR_4 ) ; return result ; } 
public java.lang.String toString ( ) { java.lang.String [ ] values = new java.lang.String [ this . METHOD_1 ( ) ] ; for ( int i = 0 ; i < ( values . length ) ; i ++ ) { values [ i ] = java.lang.String.format ( STRING_1 , i ) ; } return METHOD_2 ( new java.lang.StringBuilder ( ) , null , values ) . toString ( ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { VAR_1 = STRING_1 ; } if ( VAR_2 ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 ) ; } else { VAR_1 = TYPE_1 . METHOD_3 ( VAR_1 , VAR_3 ) ; } return VAR_1 ; } 
public static int METHOD_1 ( java.lang.String name , int arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } try { java.lang.Class < ? > c = java.lang.Class . METHOD_2 ( STRING_1 ) ; TYPE_2 m = c . METHOD_3 ( name , int . class ) ; return ( ( java.lang.Integer ) ( m . invoke ( null , arg ) ) ) ; } catch ( java.lang.Exception ex ) { throw new TYPE_1 ( ex ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int count ) { TYPE_3 sb = new TYPE_3 ( 100 ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < count ; i ++ ) { sb.append ( CHAR_2 ) ; } sb.append ( CHAR_3 ) ; sb.append ( VAR_1 . METHOD_2 ( ) ) ; return TYPE_1 . METHOD_3 ( sb . toString ( ) ) ; } 
private boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { return ( ( ( VAR_4 . get ( VAR_5 ) ) != VAR_1 ) || ( ( VAR_4 . get ( VAR_6 ) ) != VAR_3 ) ) || ( ( VAR_4 . get ( VAR_7 ) ) != VAR_2 ) ; } 
public void METHOD_1 ( ) { java.lang.String [ ] VAR_1 = ( ( java.lang.String [ ] ) ( VAR_2 . METHOD_2 ( ) ) ) ; java.lang.String [ ] f = ( ( java.lang.String [ ] ) ( VAR_3 . METHOD_3 ( ) ) ) ; assertTrue ( STRING_1 , f . equals ( VAR_2 ) ) ; f [ 0 ] = STRING_2 ; assertTrue ( STRING_3 , ( ! ( f . equals ( VAR_1 ) ) ) ) ; } 
public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_3 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_5 ( ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 context , java.lang.String VAR_1 ) throws TYPE_3 { try { TYPE_4 service = VAR_2 . METHOD_1 ( context , STRING_1 ) ; return new TYPE_5 ( VAR_3 . METHOD_1 ( context , VAR_1 ) , 2 , 2 , new TYPE_6 ( service ) , false ) ; } catch ( TYPE_7 e ) { throw new TYPE_3 ( e ) ; } } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_1 result , TYPE_2 VAR_2 , boolean VAR_3 , boolean VAR_4 , boolean VAR_5 , int VAR_6 ) { if ( ( VAR_7 ) == ( VAR_8 ) ) { java.lang.String VAR_9 = VAR_10 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_11 . equals ( VAR_9 ) ) == false ) { METHOD_3 ( VAR_9 , false ) ; } } METHOD_4 ( VAR_1 ) ; return METHOD_1 ( result , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; assertEquals ( 0 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ; int VAR_2 = TYPE_1 . METHOD_2 ( STRING_2 ) ; assertEquals ( 16 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; TYPE_2 . METHOD_4 ( ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 e ) { if ( VAR_2 ) { TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_1 ) ) ; return TYPE_5 . METHOD_1 ( VAR_1 , e ) ; } if ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) { throw new TYPE_6 ( STRING_1 ) ; } int id = VAR_1 . METHOD_4 ( 2 , e . METHOD_5 ( VAR_1 ) ) ; return new TYPE_1 ( id , VAR_1 ) ; } 
void METHOD_1 ( java.lang.String VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 ) ) || ( VAR_1 . METHOD_2 ( VAR_3 ) ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; if ( VAR_1 != null ) { VAR_4 . METHOD_4 ( METHOD_5 ( VAR_1 , true ) ) ; } else { VAR_4 . METHOD_4 ( STRING_1 ) ; } METHOD_6 ( ) ; } 
protected void METHOD_1 ( int VAR_1 , int t , int VAR_2 , int VAR_3 ) { if ( TYPE_1 . METHOD_2 ( mContext ) . METHOD_3 ( ) ) { METHOD_4 ( ) ; } VAR_4 = true ; final TYPE_2 VAR_5 = VAR_6 ; if ( VAR_5 != null ) { VAR_7 = true ; } if ( ( ( VAR_8 ) != null ) && ( ( VAR_9 ) != null ) ) { VAR_9 . METHOD_5 ( this , VAR_1 , t , VAR_2 , VAR_3 ) ; } } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_5 ( method ) ; } 
private void METHOD_1 ( final java.lang.String msg , final java.lang.Throwable t , TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( new java.lang.Runnable ( ) { public void run ( ) { TYPE_2 s = new TYPE_2 ( VAR_3 , STRING_1 , msg , t ) ; TYPE_3 . METHOD_6 ( VAR_2 . METHOD_3 ( ) , STRING_2 , STRING_3 , s ) ; } } ) ; } 
static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , float VAR_3 , float VAR_4 , boolean VAR_5 ) { TYPE_2 VAR_6 = VAR_7 . METHOD_2 ( VAR_1 ) ; if ( VAR_6 == null ) { return ; } VAR_6 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
private static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 class . METHOD_2 ( ) ; java.lang.Class < ? > VAR_3 ; try { VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_3 VAR_4 ) { return null ; } TYPE_1 VAR_5 ; try { VAR_5 = VAR_3 . METHOD_4 ( STRING_2 , VAR_6 . String class ) ; } catch ( TYPE_4 VAR_7 ) { VAR_8 . println ( STRING_3 ) ; return null ; } return VAR_5 ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.io.File out , boolean VAR_2 , java.io.File ... VAR_3 ) throws java.lang.Exception { try { METHOD_2 ( VAR_1 , VAR_3 ) ; if ( VAR_2 ) { VAR_4 . METHOD_3 ( out ) ; } else { VAR_4 . METHOD_4 ( out ) ; } TYPE_1 . METHOD_5 ( VAR_5 ) ; TYPE_1 . METHOD_6 ( VAR_6 ) ; TYPE_2 . run ( VAR_4 ) ; } finally { TYPE_1 . METHOD_5 ( VAR_7 ) ; TYPE_1 . METHOD_6 ( VAR_8 ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , byte [ ] VAR_3 , int VAR_4 ) { if ( VAR_5 ) { android.util.Log.w ( VAR_6 . TAG , STRING_1 ) ; return ; } else { TYPE_2 VAR_7 = VAR_8 . get ( ) ; if ( VAR_7 == null ) { android.util.Log.w ( VAR_6 . TAG , STRING_2 ) ; return ; } VAR_7 . METHOD_1 ( VAR_9 , VAR_10 , VAR_1 , VAR_3 , VAR_2 , VAR_4 ) ; } } 
public boolean METHOD_1 ( TYPE_1 config ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 ) . c ( TYPE_2 . METHOD_4 ( ) ) . METHOD_5 ( ) ; if ( ! ( mContext . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) ) { throw new TYPE_3 ( STRING_2 ) ; } return VAR_3 . METHOD_8 ( VAR_4 , config ) ; } 
private void METHOD_1 ( final java.io.File VAR_1 , final TYPE_1 VAR_2 , int VAR_3 , boolean VAR_4 ) { assertTrue ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; assertTrue ( STRING_2 , VAR_5 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; if ( VAR_4 ) { assertEquals ( STRING_3 , VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) ; } assertEquals ( VAR_3 , VAR_2 . METHOD_5 ( ) ) ; } 
private final void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 ) { METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_1 , VAR_3 ) ; } else { TYPE_2 . METHOD_6 ( VAR_1 , VAR_3 ) ; } this . VAR_4 = VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 class ) . METHOD_3 ( ) . METHOD_4 ( ) ; fail ( ) ; } catch ( TYPE_2 expected ) { assertTrue ( ( ( expected . METHOD_5 ( ) ) instanceof TYPE_3 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) ; assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; METHOD_5 ( VAR_1 ) ; TYPE_1 VAR_5 = TYPE_2 . METHOD_6 ( VAR_6 , 1 ) . METHOD_7 ( ) . METHOD_8 ( ) ; assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) ; METHOD_5 ( VAR_1 ) ; METHOD_9 ( ) ; } 
public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { final TYPE_2 res = METHOD_2 ( ) . METHOD_3 ( ) ; final int VAR_1 = res . METHOD_4 ( ) . VAR_1 ; try { METHOD_5 ( res , VAR_1 ) ; } finally { TYPE_3 . METHOD_6 ( res , VAR_1 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( ) ) ) ; java.lang.String [ ] VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( VAR_3 ) ; VAR_1 . METHOD_6 ( VAR_4 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_8 ( TYPE_3 . METHOD_9 ( ) ) ; } catch ( TYPE_4 e ) { throw new java.lang.RuntimeException ( e ) ; } } 
private static java.lang.Class METHOD_1 ( java.lang.String VAR_1 ) { java.lang.Class VAR_2 = null ; if ( VAR_1 != null ) { try { VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_2 ex ) { try { VAR_2 = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_2 VAR_3 ) { VAR_2 = null ; } } } return VAR_2 ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { switch ( TYPE_3 . METHOD_2 ( VAR_1 ) ) { case VAR_2 : return new TYPE_4 ( this ) ; case VAR_3 : return new TYPE_5 ( this ) ; case VAR_4 : return new TYPE_6 ( this ) ; case VAR_5 : return new TYPE_7 ( this ) ; default : throw new TYPE_2 ( STRING_1 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( VAR_2 class ) ) ) . thenReturn ( METHOD_4 ( VAR_3 , VAR_4 ) ) ; TYPE_2 VAR_5 = METHOD_5 ( VAR_6 , false , true , INT_1 , INT_2 , VAR_7 , VAR_3 , VAR_8 , VAR_9 , VAR_10 , null ) ; VAR_11 . METHOD_6 ( VAR_5 , VAR_12 , VAR_13 ) ; TYPE_3 VAR_14 = METHOD_7 ( VAR_4 ) ; assertEquals ( VAR_14 . METHOD_8 ( VAR_15 ) , java.lang.Integer . METHOD_9 ( VAR_16 ) ) ; } 
public void METHOD_1 ( ) { s = new TYPE_1 ( STRING_1 ) ; try { s . METHOD_2 ( ( ( java.lang.String ) ( null ) ) ) ; fail ( STRING_2 ) ; } catch ( java.lang.NullPointerException e ) { } s = new TYPE_1 ( STRING_1 ) ; s . METHOD_2 ( STRING_3 ) ; assertEquals ( STRING_3 , s . METHOD_3 ( ) . toString ( ) ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , java.io.IOException { TYPE_2 VAR_2 = METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; try { TYPE_4 VAR_4 ; while ( ( VAR_4 = VAR_3 . METHOD_3 ( ) ) != null ) { if ( VAR_1 . equals ( VAR_4 . getName ( ) ) ) { return true ; } } return false ; } finally { VAR_3 . METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) , TYPE_3 . METHOD_2 ( ) , 0 ) ; METHOD_4 ( STRING_1 , 0 , VAR_1 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final int VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; assertTrue ( ( VAR_1 != ( VAR_2 ) ) ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; try { TYPE_1 . METHOD_2 ( STRING_2 ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } TYPE_2 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( 20 , 0 , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , INT_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , true ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( new android.os.AsyncResult ( null , VAR_1 , null ) ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; } } ) ; } 
private static void METHOD_1 ( ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_1 = r . METHOD_3 ( ) ; if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . equals ( VAR_1 ) ) ) ) { VAR_2 = VAR_1 ; VAR_3 = TYPE_3 . METHOD_4 ( VAR_4 ) ; VAR_5 = r . METHOD_5 ( VAR_6 ) ; VAR_7 = r . METHOD_5 ( VAR_8 ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) { boolean VAR_1 = ( in . METHOD_2 ( ) ) != 0 ; int VAR_2 = in . METHOD_2 ( ) ; int VAR_3 = in . METHOD_2 ( ) ; int VAR_4 = in . METHOD_2 ( ) ; boolean VAR_5 = ( in . METHOD_2 ( ) ) != 0 ; return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
private static int METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 < java.lang.String > VAR_3 ) { java.lang.Object [ ] VAR_4 = VAR_3 . METHOD_2 ( ) ; java.lang.Object VAR_5 = TYPE_2 . METHOD_3 ( null , VAR_1 , VAR_2 , VAR_6 , null , VAR_4 , VAR_4 [ 0 ] ) ; for ( int x = 0 ; x < ( VAR_4 . length ) ; x ++ ) { if ( VAR_4 [ x ] . equals ( VAR_5 ) ) { return x ; } } return - 1 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 type ) { assert ( type == ( VAR_2 ) ) || ( type == ( VAR_3 ) ) ; switch ( VAR_1 ) { case VAR_4 : case LT : return TYPE_4 . METHOD_2 ( type ) ; case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : return TYPE_4 . METHOD_3 ( type ) ; default : throw new TYPE_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } } 
private static byte [ ] METHOD_1 ( TYPE_1 context , java.lang.String VAR_1 ) { TYPE_2 VAR_2 = context . METHOD_2 ( ) ; TYPE_3 VAR_3 ; try { VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) ; } catch ( java.io.IOException e ) { android.util.Log.e ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ; return null ; } byte [ ] VAR_5 = TYPE_4 . METHOD_4 ( VAR_3 ) ; return VAR_5 ; } 
static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) { VAR_2 . METHOD_2 ( ) ; return ; } TYPE_2 state = new TYPE_2 ( VAR_1 ) ; TYPE_3 result = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( state , result ) ; result . METHOD_4 ( VAR_2 , VAR_3 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = ( VAR_3 == null ) ? null : TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , VAR_1 , VAR_3 , VAR_4 ) ; METHOD_6 ( VAR_5 ) ; return VAR_5 ; } 
public static TYPE_1 METHOD_1 ( java.util.Map < TYPE_2 , java.util.Map < java.lang.String , TYPE_3 > > VAR_1 , java.util.Map < TYPE_2 , java.util.Map < java.lang.String , TYPE_3 > > VAR_2 , java.lang.String VAR_3 , boolean VAR_4 ) { TYPE_1 VAR_5 = new TYPE_1 ( VAR_1 , VAR_2 ) ; VAR_5 . METHOD_2 ( VAR_3 , VAR_4 ) ; return VAR_5 ; } 
public static void METHOD_1 ( ) throws java.lang.Exception { VAR_1 class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_1 options = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( options . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { synchronized ( this ) { if ( ( tree ) != null ) { VAR_3 . METHOD_2 ( ) ; } this . VAR_1 = VAR_1 ; tree = new TYPE_3 ( VAR_2 ) ; tree . METHOD_3 ( ) ; tree . METHOD_4 ( ) ; VAR_4 = null ; VAR_5 = 1 ; VAR_6 = null ; } METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 = new TYPE_1 ( mContext , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , new byte [ ] [ ] { VAR_3 } , 0 , null , VAR_4 , METHOD_2 ( ) . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Throwable { android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ; TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_2 = METHOD_2 ( ) ; android.util.Log.w ( VAR_1 . TAG , ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; METHOD_3 ( VAR_3 , VAR_4 , false , false ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 project , TYPE_6 VAR_3 , TYPE_7 VAR_4 ) { if ( ( project == null ) || ( ! ( TYPE_8 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) { return TYPE_9 . METHOD_4 ( ) ; } return VAR_5 < TYPE_2 > METHOD_5 ( new TYPE_10 ( project , VAR_1 , VAR_2 , VAR_3 ) ) ; } 
public synchronized void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( method . METHOD_1 ( ) ) ; VAR_2 . METHOD_5 ( method ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { final int VAR_1 = 10 ; TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( null ) ; VAR_2 . METHOD_4 ( false ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( VAR_1 ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_7 ( ) ; METHOD_8 ( VAR_4 ) ; int VAR_5 = VAR_3 . METHOD_9 ( ) ; assertEquals ( VAR_1 , VAR_5 ) ; } finally { VAR_2 . METHOD_10 ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 ) android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_1 + ( VAR_1 . netId ) ) + STRING_2 ) + VAR_2 ) ) ; if ( VAR_2 . METHOD_3 ( VAR_6 ) ) { METHOD_4 ( VAR_1 . netId ) ; } } 
void METHOD_1 ( byte [ ] VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_4 ) android.util.Log.v ( VAR_5 . TAG , STRING_1 ) ; if ( VAR_3 == null ) { android.util.Log.e ( VAR_5 . TAG , STRING_2 ) ; VAR_6 . METHOD_2 ( VAR_1 , VAR_7 , null ) ; return ; } java.util.List < TYPE_3 > VAR_8 = METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 , VAR_2 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 = new TYPE_1 ( STRING_1 , INT_1 ) ; assertEquals ( INT_1 , VAR_1 . length ( ) ) ; VAR_1 = new TYPE_1 ( STRING_1 , INT_2 ) ; assertEquals ( INT_2 , VAR_1 . length ( ) ) ; VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 ) ; assertEquals ( VAR_2 , VAR_1 . length ( ) ) ; VAR_1 = new TYPE_1 ( STRING_1 , VAR_3 ) ; assertEquals ( VAR_3 , VAR_1 . length ( ) ) ; } 
public android.bluetooth.BluetoothDevice METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; TYPE_1 service = METHOD_3 ( VAR_3 ) ; if ( service == null ) return null ; return service . METHOD_2 ( ) ; } 
public void run ( final TYPE_1 device , TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 { VAR_2 = false ; TYPE_5 < TYPE_6 > VAR_3 = METHOD_1 ( ) . METHOD_2 ( ) ; while ( ( VAR_3 . METHOD_3 ( ) ) && ( ! ( VAR_2 ) ) ) { VAR_4 = VAR_3 . METHOD_4 ( ) ; if ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) ) { VAR_4 . run ( device , VAR_1 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; boolean VAR_3 = VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers . METHOD_7 ( int . class ) ) ; assertEquals ( VAR_3 , true ) ; } 
public boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { if ( ( ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , false ) ) && ( ( METHOD_4 ( ) ) != null ) ) && ( ( VAR_2 ) <= ( VAR_3 ) ) ) { return true ; } } if ( ( METHOD_5 ( VAR_4 ) ) && ( TYPE_1 . METHOD_6 ( ) ) ) { return true ; } return false ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.Set < TYPE_3 > VAR_2 , int VAR_3 ) { int VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; int VAR_6 = VAR_7 . METHOD_3 ( ) ; int VAR_8 = VAR_7 . METHOD_4 ( ) ; boolean VAR_9 = VAR_2 . METHOD_5 ( VAR_10 ) ; boolean VAR_11 = VAR_2 . METHOD_5 ( VAR_12 ) ; return new TYPE_1 ( VAR_4 , null , VAR_6 , VAR_8 , VAR_3 , VAR_9 , VAR_11 , null , null ) ; } 
private int [ ] METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { int count = VAR_1 . size ( ) ; int [ ] VAR_2 = new int [ count * 2 ] ; for ( int index = 0 ; index < count ; index ++ ) { TYPE_1 c = VAR_1 . get ( index ) ; VAR_2 [ ( 2 * index ) ] = c . x ; VAR_2 [ ( ( 2 * index ) + 1 ) ] = c . y ; } return VAR_2 ; } 
public java.lang.String [ ] METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 ) != null ) { try { return VAR_2 . METHOD_1 ( VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_3 ( ) ; } } return null ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , int res , TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { return VAR_2 . toString ( ) ; } if ( res != 0 ) { TYPE_3 r = METHOD_2 ( VAR_1 ) ; if ( r != null ) { return r . METHOD_3 ( res ) ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; assertTrue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( false ) ; assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( false ) ; assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 , byte [ ] VAR_2 ) { if ( ( null == VAR_2 ) || ( 0 >= ( VAR_2 . length ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } else if ( ( VAR_3 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_2 ) ; } return METHOD_3 ( VAR_4 , VAR_1 , VAR_2 ) ; } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } int VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == 0 ) { return null ; } return TYPE_1 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { if ( ( VAR_1 . METHOD_3 ( ) ) == 2 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_4 ( ) ) ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_1 . METHOD_5 ( ) ) ) ; VAR_4 = TYPE_4 . METHOD_6 ( VAR_2 , VAR_3 , false ) ; } } } 
public boolean METHOD_1 ( ) { TYPE_1 service = VAR_1 ; if ( ( service == null ) || ( ( METHOD_2 ( ) ) == false ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; return false ; } try { return service . METHOD_3 ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_2 , e ) ; } return false ; } 
public java.lang.Object METHOD_1 ( ) { if ( VAR_1 ) { java.util.List result = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( value ) ) ; for ( TYPE_3 VAR_3 : TYPE_3 . values ( ) ) { if ( VAR_2 . METHOD_3 ( VAR_3 ) ) { result . METHOD_4 ( VAR_2 . get ( VAR_3 ) ) ; } } return result ; } return value ; } 
private java.lang.String METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 ) { java.lang.String VAR_2 = null ; java.lang.String VAR_3 = null ; if ( VAR_1 == null ) { VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ; } else if ( VAR_1 instanceof TYPE_3 ) { TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_1 ) ) ; VAR_2 = VAR_4 . METHOD_3 ( ) ; VAR_3 = VAR_4 . METHOD_4 ( ) ; } synchronized ( this ) { return TYPE_4 . METHOD_5 ( name , VAR_1 , VAR_2 , VAR_3 ) ; } } 
public java.lang.Object get ( int index ) throws TYPE_1 { try { java.lang.Object value = values . get ( index ) ; if ( value == null ) { throw new TYPE_1 ( ( ( STRING_1 + index ) + STRING_2 ) ) ; } return value ; } catch ( TYPE_2 e ) { throw new TYPE_1 ( ( ( ( ( STRING_3 + index ) + STRING_4 ) + ( values . size ( ) ) ) + STRING_5 ) ) ; } } 
protected int METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == 1 ) { return VAR_1 ; } else { final int VAR_3 = TYPE_1 . METHOD_2 ( VAR_4 ) ; if ( ( METHOD_3 ( ) ) == ( VAR_5 ) ) { return VAR_3 + VAR_1 ; } else { int VAR_6 = ( METHOD_4 ( ) ) ? VAR_2 : 0 ; final int VAR_7 = ( VAR_1 + VAR_3 ) + VAR_6 ; return VAR_7 - ( VAR_7 % ( VAR_2 ) ) ; } } } 
public void METHOD_1 ( java.lang.String VAR_1 , java.io.File VAR_2 ) { java.util.List < java.io.File > VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = TYPE_1 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; } VAR_3 . METHOD_4 ( VAR_2 ) ; } 
private static TYPE_1 METHOD_1 ( int VAR_1 ) { try { TYPE_2 key = new TYPE_3 ( VAR_2 , STRING_1 ) ; final TYPE_1 c = TYPE_1 . METHOD_2 ( STRING_2 ) ; c . METHOD_3 ( VAR_1 , key ) ; return c ; } catch ( java.lang.Exception e ) { fail ( ( STRING_3 + ( e.getMessage ( ) ) ) ) ; return null ; } } 
public void METHOD_1 ( java.util.Map < java.lang.Object , java.lang.Object > VAR_1 ) { VAR_2 = new TYPE_1 < byte [ ] > ( VAR_1 . size ( ) ) ; for ( java.lang.Object key : VAR_1 . METHOD_2 ( ) ) { TYPE_2 value = ( ( TYPE_2 ) ( VAR_1 . get ( key ) ) ) ; if ( ! ( METHOD_3 ( value ) ) ) { VAR_2 . METHOD_4 ( ( ( TYPE_3 ) ( key ) ) . METHOD_5 ( ) ) ; } } } 
TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( VAR_2 ) ; } if ( ( VAR_3 ) == 0 ) { return VAR_4 ; } int VAR_5 = TYPE_3 . METHOD_1 ( this . VAR_6 , this . VAR_3 ) ; return new TYPE_4 ( VAR_7 , VAR_5 , VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 h , int VAR_1 , java.lang.Object obj ) { if ( VAR_2 ) { return ; } TYPE_2 r = new TYPE_2 ( h , VAR_1 , obj ) ; VAR_3 . METHOD_2 ( r ) ; if ( ( ( VAR_4 ) == 0 ) && ( ( VAR_5 ) == true ) ) { r . METHOD_3 ( new android.os.AsyncResult ( null , null , null ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ; VAR_3 . verify ( VAR_5 ) . METHOD_5 ( VAR_6 ) ; VAR_3 . verify ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 ) ; VAR_3 . verify ( VAR_5 ) . METHOD_7 ( VAR_6 ) ; VAR_3 . verify ( VAR_4 ) . METHOD_8 ( VAR_6 , VAR_8 , VAR_9 , VAR_10 ) ; TYPE_2 . METHOD_9 ( VAR_5 , VAR_11 , VAR_4 ) ; } 
private boolean METHOD_1 ( int VAR_1 , java.lang.String name , java.lang.String VAR_2 ) { return ( ( TYPE_1 . METHOD_2 ( VAR_1 , ( ( VAR_3 ) | ( VAR_4 ) ) ) ) && ( TYPE_2 . equals ( name ) ) ) && ( TYPE_3 . equals ( VAR_2 ) ) ; } 
public static void METHOD_1 ( java.io.File VAR_1 , TYPE_1 location ) throws TYPE_2 , TYPE_3 { assert VAR_1 != null ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( location ) ; } if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { throw new TYPE_3 ( location ) ; } } 
private boolean METHOD_1 ( TYPE_1 request ) { TYPE_2 VAR_1 = request . METHOD_2 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_3 uri = TYPE_3 . METHOD_4 ( VAR_2 ) ; java.lang.String path = uri . METHOD_5 ( ) ; return path . equals ( VAR_3 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , float value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final float VAR_3 = ( v == null ) ? ( ( float ) ( m . METHOD_2 ( ) ) ) : ( ( float ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public static final int METHOD_1 ( int VAR_1 ) { int VAR_2 = ( ( ( 8 * ( VAR_3 ) ) + ( VAR_4 ) ) + ( VAR_5 ) ) + ( 20 * ( VAR_4 ) ) ; if ( VAR_1 >= ( VAR_6 ) ) { VAR_2 += 2 * ( VAR_4 ) ; } return VAR_2 ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { try { java.lang.Class < ? > c = java.lang.Class . METHOD_2 ( STRING_1 ) ; TYPE_1 m = c . METHOD_3 ( STRING_2 , ( ( java.lang.Class [ ] ) ( null ) ) ) ; m . invoke ( null , ( ( java.lang.Object [ ] ) ( null ) ) ) ; } catch ( TYPE_2 e ) { return ; } throw new TYPE_3 ( STRING_3 ) ; } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , float VAR_5 ) { TYPE_1 VAR_6 = VAR_7 . METHOD_2 ( VAR_1 ) ; if ( VAR_6 == null ) { return ; } VAR_6 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_4 ) + STRING_6 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( VAR_1 , VAR_3 ) ; } 
public static void METHOD_1 ( java.lang.Object VAR_1 , int index , double value ) throws TYPE_1 , java.lang.IllegalArgumentException { if ( VAR_1 instanceof double [ ] ) { ( ( double [ ] ) ( VAR_1 ) ) [ index ] = value ; } else { throw TYPE_2 . METHOD_2 ( VAR_1 ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 context ) { TYPE_1 < TYPE_2 > VAR_2 = on . METHOD_1 ( VAR_1 , context ) ; if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { context . METHOD_3 ( new TYPE_5 ( VAR_3 , VAR_2 ) ) ; } return VAR_2 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 node ) { TYPE_4 pos = ( ( TYPE_4 ) ( METHOD_2 ( node ) ) ) ; if ( pos != null ) { return TYPE_1 . METHOD_3 ( VAR_1 , pos , ( ( TYPE_4 ) ( pos . METHOD_4 ( ) ) ) ) ; } return TYPE_1 . METHOD_3 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( true ) ; try { VAR_1 . METHOD_4 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 e ) { } VAR_2 . METHOD_5 ( ) ; try { VAR_1 . METHOD_4 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 e ) { } } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 , int subId ) { VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , VAR_1 ) ; if ( ! ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_1 , STRING_1 ) ) ) { return null ; } return TYPE_3 . METHOD_5 ( VAR_4 . METHOD_6 ( ) , subId ) . METHOD_7 ( ) ; } 
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; for ( TYPE_2 item : VAR_1 . METHOD_3 ( ) ) { TYPE_3 node = item . METHOD_4 ( ) . METHOD_5 ( ) ; java.lang.String VAR_3 = TYPE_4 . METHOD_6 ( node . METHOD_7 ( ) ) ; if ( VAR_3 != null ) { return VAR_3 ; } } return null ; } 
public boolean METHOD_1 ( TYPE_1 source ) { for ( java.util.ArrayList < TYPE_1 > VAR_1 : VAR_2 . values ( ) ) { for ( TYPE_1 s : VAR_1 ) { if ( s . equals ( source ) ) { return true ; } } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . start ( ) ; try { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_2 . type ( ) ) ; TYPE_3 address = VAR_2 . address ( ) ; TYPE_4 VAR_4 = new TYPE_4 ( ) ; VAR_4 . METHOD_3 ( address , 10 ) ; VAR_4 . METHOD_4 ( ) ; } finally { int VAR_5 = VAR_1 . METHOD_5 ( ) ; assertEquals ( 1 , VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { final TYPE_2 res = METHOD_2 ( ) . METHOD_3 ( ) ; final int VAR_1 = res . METHOD_4 ( ) . VAR_1 ; try { METHOD_5 ( res ) ; } finally { TYPE_3 . METHOD_6 ( res , VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( double x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) , TYPE_4 . of ( ) ) ; TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) ; } 
public boolean METHOD_1 ( java.lang.String name ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( name ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 ; if ( TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) { VAR_4 = TYPE_1 . METHOD_5 ( VAR_5 , VAR_2 ) ; } else { long VAR_6 = VAR_1 . METHOD_6 ( VAR_7 ) ; VAR_4 = TYPE_4 . METHOD_7 ( VAR_6 , VAR_2 ) ; } return VAR_4 . METHOD_8 ( ) . METHOD_9 ( VAR_8 , java.lang.String . METHOD_10 ( VAR_1 . METHOD_4 ( ) ) ) . build ( ) ; } 
public static TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return null ; } TYPE_5 VAR_2 = TYPE_5 . METHOD_3 ( VAR_3 ) ; TYPE_1 VAR_4 = VAR_2 . METHOD_4 ( new TYPE_6 ( VAR_1 ) ) ; return VAR_4 ; } 
public int METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( METHOD_3 ( ) ) == ( VAR_1 ) ) { throw new TYPE_2 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; } 
private TYPE_1 METHOD_1 ( boolean VAR_1 , boolean VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( ) ; try { java.util.Map < java.lang.String , TYPE_1 > VAR_4 = METHOD_3 ( VAR_3 , new TYPE_3 ( ) , VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) ; TYPE_1 VAR_5 = VAR_4 . get ( STRING_2 ) ; if ( VAR_2 ) { TYPE_4 . METHOD_4 ( VAR_5 ) ; } return VAR_5 ; } finally { VAR_3 . METHOD_5 ( ) ; } } 
public void METHOD_1 ( final long VAR_1 ) { if ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) { VAR_2 . METHOD_2 ( ( ( VAR_3 ) + ( ( int ) ( VAR_1 ) ) ) ) ; } else { VAR_2 . METHOD_3 ( new TYPE_1 ( VAR_1 ) ) ; } } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { switch ( VAR_2 ) { case VAR_3 : TYPE_2 VAR_4 = ( ( TYPE_2 ) ( VAR_1 . event ) ) ; if ( VAR_5 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) { android.util.Log.w ( VAR_6 . TAG , ( ( ( STRING_1 + ( VAR_4 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_4 . METHOD_4 ( ) ) ) ) ; return VAR_7 ; } return VAR_8 ; default : return VAR_9 ; } } 
public void append ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; assert VAR_1 . METHOD_1 ( ) . equals ( VAR_2 ) : ( ( ( STRING_1 + ( VAR_1 . METHOD_1 ( ) ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ; VAR_3 . METHOD_2 ( new TYPE_2 ( VAR_1 ) ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 c = new TYPE_1 ( ) ; Main . METHOD_2 ( ) ; Main . METHOD_3 ( c ) ; Main . METHOD_4 ( c ) ; Main . METHOD_5 ( new Main ( ) ) ; Main . METHOD_6 ( ) ; Main . METHOD_7 ( c ) ; } 
public void METHOD_1 ( TYPE_1 listener , int VAR_1 ) { java.lang.String VAR_2 = ( ( VAR_3 ) != null ) ? VAR_3 . METHOD_2 ( ) : STRING_1 ; try { TYPE_2 VAR_4 = ( METHOD_3 ( ) ) != null ; VAR_5 . METHOD_1 ( VAR_2 , listener . callback , VAR_1 , VAR_4 ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ( ( java.lang.Integer ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; int VAR_4 = ( ( java.lang.Integer ) ( VAR_1 . METHOD_2 ( VAR_5 ) ) ) ; VAR_6 = new TYPE_2 ( VAR_4 , VAR_2 ) ; if ( ( METHOD_3 ( ) ) != null ) { METHOD_3 ( ) . METHOD_1 ( this ) ; } return true ; } 
private boolean METHOD_1 ( ) { if ( ( ( address ) != null ) && ( ( address ) instanceof TYPE_1 ) ) { byte [ ] VAR_1 = address . METHOD_2 ( ) ; return ( ( VAR_1 [ 0 ] ) & ( ( byte ) ( INT_1 ) ) ) == ( ( byte ) ( INT_2 ) ) ; } return false ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 , java.lang.String [ ] args ) { if ( ( ( VAR_8 ) != null ) && ( VAR_8 . METHOD_2 ( VAR_3 ) ) ) { return new TYPE_5 ( VAR_1 , VAR_7 , VAR_3 , args ) ; } else { return null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class . getName ( ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( VAR_3 , null ) , 0 ) ; TYPE_4 . METHOD_3 ( VAR_3 . version ) . METHOD_4 ( VAR_4 ) ; TYPE_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( 2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) METHOD_2 ( ) ; if ( VAR_3 ) android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ; VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_6 ) { if ( VAR_2 ) { METHOD_5 ( VAR_7 ) ; } else { METHOD_5 ( VAR_8 ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) { return new TYPE_1 ( ( ( android.bluetooth.BluetoothDevice ) ( in . METHOD_2 ( null ) ) ) , in . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( in . METHOD_5 ( ) ) , in . METHOD_3 ( ) , in . METHOD_5 ( ) , ( ( in . METHOD_3 ( ) ) == 1 ) , ( ( in . METHOD_3 ( ) ) == 1 ) ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.lang.String v = null ; try { v = TYPE_2 . METHOD_2 ( VAR_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } catch ( java.lang.NullPointerException e ) { } if ( v != null ) { try { return TYPE_1 . METHOD_3 ( v ) ; } catch ( TYPE_3 e ) { } } return VAR_2 ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , int offset , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( CHAR_1 ) . append ( VAR_2 ) . append ( CHAR_2 ) ; sb.append ( VAR_3 ) . append ( CHAR_3 ) . append ( CHAR_4 ) ; sb.append ( VAR_4 ) . append ( CHAR_4 ) ; TYPE_2 VAR_5 = new TYPE_2 ( offset , sb . toString ( ) ) ; VAR_1 . addChild ( VAR_5 ) ; } 
private static void METHOD_1 ( java.lang.Object expected , java.lang.String VAR_1 , final java.lang.String VAR_2 ) { java.lang.String source = ( ( ( ( ( ( ( STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) + VAR_1 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ; TYPE_1 . METHOD_2 ( expected , source , VAR_2 ) ; } 
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) throws TYPE_2 { if ( ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( VAR_1 ) ) ) ) { return ; } METHOD_4 ( VAR_1 , VAR_2 ) ; if ( ( METHOD_5 ( ) ) != VAR_2 ) { java.lang.String VAR_3 = VAR_1 . METHOD_6 ( VAR_4 , METHOD_7 ( VAR_1 ) , VAR_2 ) ; throw new TYPE_3 ( VAR_3 ) ; } } 
void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int w , int h , int d , int [ ] data ) { mRS . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , ( ( data . length ) * 4 ) ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) != null ) { METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( VAR_4 ) ) ; } VAR_5 = VAR_1 ; TYPE_3 VAR_6 = VAR_1 . METHOD_5 ( ) ; VAR_6 . METHOD_6 ( VAR_7 , VAR_2 ) ; VAR_8 . METHOD_7 ( true ) ; VAR_9 . METHOD_8 ( true ) ; return true ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; METHOD_4 ( VAR_1 , s ) ; METHOD_5 ( VAR_1 , s ) ; s . METHOD_6 ( true ) ; VAR_1 . METHOD_7 ( ) ; METHOD_8 ( ) ; VAR_1 . METHOD_9 ( ) ; } 
public static void METHOD_1 ( long i , byte [ ] VAR_1 , int offset ) { VAR_1 [ offset ] = ( ( byte ) ( i > > INT_1 ) ) ; VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i > > 16 ) ) ; VAR_1 [ ( offset + 2 ) ] = ( ( byte ) ( i > > 8 ) ) ; VAR_1 [ ( offset + 3 ) ] = ( ( byte ) ( i ) ) ; } 
public TYPE_1 [ ] METHOD_1 ( ) { if ( ! ( TYPE_2 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) ; return new TYPE_1 [ 0 ] ; } TYPE_3 service = METHOD_3 ( ) ; if ( service == null ) return new TYPE_1 [ 0 ] ; return service . METHOD_1 ( ) ; } 
public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 16 , INT_1 , false ) ; TYPE_3 in = t . METHOD_3 ( args . in ) ; args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( args . in ) , TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( int i , short x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 . TAG , null , null , null , null , false ) ; verify ( VAR_3 ) . METHOD_3 ( METHOD_4 ( byte [ ] . class ) , METHOD_4 ( VAR_4 class ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( TYPE_3 . get ( VAR_1 ) . METHOD_3 ( STRING_2 , false ) ) { for ( TYPE_4 VAR_2 : VAR_3 . METHOD_4 ( ) ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } } else { TYPE_2 . i ( STRING_1 , STRING_3 ) ; } } 
private void METHOD_1 ( int userId ) { VAR_1 . METHOD_1 ( userId ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; synchronized ( VAR_4 ) { VAR_5 . METHOD_3 ( ) ; VAR_6 . METHOD_3 ( ) ; for ( TYPE_1 p : VAR_7 ) { METHOD_4 ( p . getName ( ) , false , VAR_8 ) ; } VAR_8 = userId ; METHOD_5 ( ) ; } } 
private static int METHOD_1 ( java.lang.Class < ? > type ) { if ( ! ( type . METHOD_2 ( ) ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_1 + type ) ) ; } if ( TYPE_1 . METHOD_3 ( type ) ) { return 8 ; } else { return 4 ; } } 
public void METHOD_1 ( android.os.Message msg ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( msg.obj ) ) ; switch ( VAR_2 ) { case VAR_3 : METHOD_2 ( VAR_1 ) ; break ; case VAR_4 : METHOD_3 ( VAR_1 ) ; break ; case VAR_5 : METHOD_4 ( VAR_1 ) ; break ; case VAR_6 : VAR_7 . METHOD_5 ( ) ; break ; default : android.util.Log.e ( VAR_8 . TAG , ( STRING_1 + ( VAR_2 ) ) ) ; } } 
public static java.lang.String METHOD_1 ( long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 , long VAR_6 , TYPE_1 . Allocation ... VAR_7 ) { return new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) . METHOD_1 ( ) ; } 
static TYPE_1 METHOD_1 ( android.bluetooth.BluetoothDevice device , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_4 ) { android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + device ) ) ; } TYPE_1 VAR_5 = new TYPE_1 ( device , VAR_1 , VAR_2 , VAR_3 ) ; VAR_5 . start ( ) ; return VAR_5 ; } 
private TYPE_1 METHOD_1 ( java.lang.String packageName , int VAR_1 ) { int VAR_2 = 0 ; TYPE_2 context = mContext ; if ( VAR_1 >= 0 ) { TYPE_3 VAR_3 = METHOD_2 ( packageName , VAR_1 ) ; if ( VAR_3 != null ) { context = VAR_3 . context ; VAR_2 = VAR_1 ; } } if ( VAR_2 != 0 ) { return TYPE_4 . METHOD_1 ( context , VAR_2 ) ; } return null ; } 
public void METHOD_1 ( char c ) { if ( ! ( ( TYPE_1 . METHOD_2 ( c ) ) || ( ( c >= CHAR_1 ) && ( c <= CHAR_2 ) ) ) ) { TYPE_2 . e ( VAR_1 , ( ( STRING_1 + c ) + STRING_2 ) ) ; } else { VAR_2 . METHOD_1 ( c ) ; } } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) && ( ! ( TYPE_3 . METHOD_4 ( element ) ) ) ) { context . METHOD_5 ( VAR_1 , element , context . METHOD_6 ( element ) , STRING_1 , null ) ; } } 
public void METHOD_1 ( TYPE_1 e ) { TYPE_2 project = TYPE_3 . METHOD_2 ( e . METHOD_3 ( ) ) ; if ( project == null ) { project = TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ; } if ( TYPE_5 . METHOD_6 ( project ) ) { TYPE_5 . METHOD_7 ( ) ; } TYPE_6 . METHOD_4 ( ) . METHOD_8 ( project , VAR_1 , TYPE_7 . METHOD_4 ( project ) ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; try { TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class , VAR_7 class } , VAR_1 ) ; VAR_8 . println ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException VAR_9 ) { java.lang.System.out.println ( STRING_2 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 d = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) . METHOD_3 ( ) ; TYPE_4 r = new TYPE_4 ( d , VAR_3 ) ; VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; } 
public int METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return 0 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return 0 ; return service . METHOD_1 ( device ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 result , TYPE_2 VAR_1 ) { assert result instanceof TYPE_3 ; java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_4 VAR_3 = result . METHOD_2 ( ) ; TYPE_5 VAR_4 = TYPE_6 . METHOD_3 ( VAR_3 , ( ( TYPE_3 ) ( result ) ) . METHOD_4 ( ) , VAR_5 , METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( VAR_4 ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; return new TYPE_7 ( VAR_3 , VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 context ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { TYPE_4 . METHOD_4 ( context ) ; TYPE_5 . e ( STRING_1 , STRING_2 ) ; } else { TYPE_6 call = VAR_1 . METHOD_5 ( ) ; if ( call != null ) { call . METHOD_6 ( false , null ) ; } } } 
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( int i = ( VAR_1 . size ( ) ) - 1 ; i >= 0 ; i -- ) { VAR_1 . get ( i ) . run ( ) ; } } TYPE_1 VAR_2 = this . VAR_3 ; if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { synchronized ( this ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_4 ( ) ; VAR_1 = null ; VAR_2 = VAR_3 . METHOD_5 ( ) ; } } } } ) ; METHOD_6 ( ) ; } 
public void run ( ) { try { TYPE_1 value = TYPE_2 . METHOD_1 ( VAR_1 ) ; callback . METHOD_2 ( value ) ; } catch ( TYPE_3 e ) { callback . METHOD_3 ( e . METHOD_4 ( ) ) ; } catch ( java.lang.RuntimeException e ) { callback . METHOD_3 ( e ) ; } catch ( TYPE_4 e ) { callback . METHOD_3 ( e ) ; } } 
private int METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == 1 ) { return VAR_1 ; } else { final int VAR_3 = TYPE_1 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; if ( ( ! ( VAR_5 ) ) || ( ( VAR_6 ) == ( VAR_7 ) ) ) { return VAR_3 + VAR_1 ; } else { final int VAR_8 = ( VAR_1 + VAR_3 ) + ( VAR_2 ) ; return VAR_8 - ( VAR_8 % ( VAR_2 ) ) ; } } } 
private boolean METHOD_1 ( ) { try { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; TYPE_2 VAR_5 = new TYPE_2 ( ( ( short ) ( VAR_6 ) ) , VAR_7 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( VAR_1 , VAR_5 ) ; TYPE_3 . METHOD_5 ( VAR_1 ) ; } catch ( TYPE_4 | TYPE_5 e ) { android.util.Log.e ( VAR_8 . TAG , STRING_1 , e ) ; return false ; } return true ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String info ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( info ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 ) ; TYPE_5 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 , VAR_4 , ( ( ( VAR_5 ) | ( VAR_6 ) ) | ( VAR_7 ) ) , 0 , false ) ; } 
public boolean [ ] METHOD_1 ( ) { final boolean [ ] VAR_1 = TYPE_1 . METHOD_2 ( mContext ) ; if ( ( VAR_1 . length ) >= 9 ) { return VAR_1 ; } final boolean [ ] VAR_2 = new boolean [ 9 ] ; TYPE_2 . METHOD_3 ( VAR_1 , 0 , VAR_2 , 0 , VAR_1 . length ) ; return VAR_2 ; } 
public void METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( STRING_1 , VAR_2 ) ; if ( VAR_1 != null ) { VAR_3 . METHOD_2 ( STRING_2 , VAR_1 . getName ( ) ) ; } VAR_4 . print ( ( ( ( VAR_5 ) + ( VAR_6 . METHOD_3 ( VAR_3 ) ) ) + STRING_3 ) ) ; } 
public void METHOD_1 ( final int VAR_1 , final int VAR_2 ) { VAR_3 . METHOD_2 ( false ) ; if ( METHOD_3 ( ) ) { METHOD_4 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 , VAR_2 ) ; } } ) ; return ; } VAR_4 . METHOD_5 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } 
public static final java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 ; VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String run ( ) { return TYPE_3 . METHOD_3 ( VAR_2 ) ; } } ) ; if ( VAR_1 == null ) { VAR_1 = STRING_1 ; } return VAR_1 ; } 
private void METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) throws java.lang.Exception { for ( TYPE_1 VAR_2 : VAR_1 ) { METHOD_2 ( VAR_2 ) ; } METHOD_3 ( false ) ; java.lang.String VAR_3 = METHOD_4 ( VAR_4 ) ; assertEquals ( STRING_1 , STRING_2 , VAR_3 ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( VAR_1 . equals ( STRING_1 ) ) { VAR_2 = STRING_2 ; } else if ( VAR_1 . equals ( STRING_3 ) ) { VAR_2 = STRING_4 ; } else if ( VAR_1 . equals ( STRING_5 ) ) { VAR_2 = STRING_6 ; } return VAR_2 ; } 
private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 , STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 , STRING_6 ) ; VAR_1 . METHOD_2 ( STRING_7 , STRING_8 ) ; VAR_1 . METHOD_2 ( STRING_9 , STRING_10 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return null ; } final byte [ ] VAR_2 ; try { VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , false ) ; } catch ( java.lang.IllegalArgumentException e ) { return null ; } return new java.lang.String ( VAR_2 , VAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 pos = new TYPE_2 ( 0 ) ; TYPE_3 VAR_2 ; VAR_2 = VAR_1 . METHOD_2 ( STRING_1 , pos ) ; METHOD_3 ( VAR_2 ) ; assertEquals ( STRING_2 , 5 , pos . METHOD_4 ( ) ) ; METHOD_5 ( 8 ) ; TYPE_4 VAR_3 ; } 
private < TYPE_1 > void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < TYPE_1 > VAR_2 , java.util.List < TYPE_1 > VAR_3 , java.util.List < TYPE_1 > VAR_4 ) { TYPE_2 < TYPE_1 > result = new TYPE_2 ( VAR_2 , VAR_1 ) ; assertEquals ( new TYPE_3 ( VAR_3 ) , new TYPE_3 ( VAR_5 ) ) ; assertEquals ( new TYPE_3 ( VAR_4 ) , new TYPE_3 ( VAR_6 ) ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 ) { TYPE_1 < TYPE_2 > VAR_3 = TYPE_1 . METHOD_2 ( VAR_4 class ) ; org.mockito.Mockito.verify ( VAR_1 ) . METHOD_3 ( VAR_3 . METHOD_4 ( ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ; assertEquals ( VAR_6 , VAR_2 ) ; return VAR_3 ; } 
public void METHOD_1 ( boolean state ) { synchronized ( VAR_1 ) { android.util.Log . i ( VAR_2 , ( STRING_1 + state ) ) ; VAR_3 = state ; if ( ! state ) { if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( ) ; } } else { try { METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { } synchronized ( VAR_1 ) { VAR_5 = true ; } } } } 
public static java.lang.String METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } char c = ( ( char ) ( value ) ) ; byte b = ( ( byte ) ( c ) ) ; return ( ( STRING_1 + ( ( int ) ( c ) ) ) + STRING_2 ) + ( ( int ) ( b ) ) ; } 
public static void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == null ) { TYPE_1 . METHOD_2 ( false ) ; } if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_3 ( ) ) ) ) { VAR_2 = TYPE_1 . METHOD_4 ( VAR_1 , true ) ; } } 
protected boolean METHOD_1 ( ) { if ( VAR_1 ) { android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ; } if ( ( VAR_2 ) != null ) { METHOD_2 ( VAR_2 ) ; VAR_2 = null ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( ) ; VAR_3 = null ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_1 ( ) ; VAR_4 = null ; } TYPE_1 . METHOD_3 ( ) ; return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; assertEquals ( INT_1 , VAR_1 . size ( ) ) ; TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 , INT_2 , VAR_3 , INT_3 , INT_4 , INT_5 , INT_6 , INT_7 ) ; TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 , INT_2 , VAR_4 , INT_3 , INT_8 , INT_9 , INT_10 , INT_9 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 n , byte [ ] VAR_1 ) { int VAR_2 = n . METHOD_2 ( ) ; int VAR_3 = ( VAR_1 . length ) * 8 ; TYPE_1 e = new TYPE_1 ( 1 , VAR_1 ) ; if ( VAR_2 < VAR_3 ) { e = e . METHOD_3 ( ( VAR_3 - VAR_2 ) ) ; } return e ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 < java.lang.String , TYPE_4 > VAR_2 = VAR_1 . METHOD_3 ( ) ; java.util.List < TYPE_4 > values = VAR_2 . get ( STRING_1 ) ; assertEquals ( 2 , values . size ( ) ) ; TYPE_4 VAR_3 = values . get ( 1 ) ; TYPE_5 VAR_4 = VAR_3 . METHOD_4 ( ) ; assertTrue ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( STRING_2 ) ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 ) { android.content.Intent VAR_2 ; if ( TYPE_4 . METHOD_2 ( context ) ) { VAR_2 = TYPE_4 . METHOD_3 ( context ) ; } else { VAR_2 = TYPE_5 . METHOD_4 ( context , VAR_3 ) ; } if ( VAR_1 != null ) { VAR_2 . METHOD_5 ( VAR_4 ) ; } VAR_2 . METHOD_6 ( VAR_5 , true ) ; return TYPE_1 . METHOD_7 ( context , 0 , VAR_2 , VAR_6 ) ; } 
static TYPE_1 < java.lang.Integer > METHOD_1 ( int n ) { TYPE_1 < java.lang.Integer > a = new TYPE_1 < java.lang.Integer > ( ) ; assertTrue ( a . METHOD_2 ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) a . METHOD_3 ( i ) ; assertFalse ( a . METHOD_2 ( ) ) ; assertEquals ( n , a . size ( ) ) ; return a ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) != ( VAR_3 ) ) { return null ; } if ( ( VAR_4 . length ) < 2 ) { return null ; } TYPE_1 result = new TYPE_1 ( ) ; result . level = ( VAR_4 [ 0 ] ) & INT_1 ; VAR_5 = ( VAR_4 [ 1 ] ) & INT_1 ; return result ; } 
public static TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , TYPE_2 VAR_4 , int VAR_5 , TYPE_3 VAR_6 , TYPE_4 VAR_7 ) { return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; } 
public boolean METHOD_1 ( java.io.File VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 ) { TYPE_2 VAR_4 = null ; try { VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_4 , VAR_3 ) ; return true ; } catch ( java.io.IOException VAR_5 ) { } finally { TYPE_3 . METHOD_4 ( VAR_4 ) ; } return false ; } 
public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( ( VAR_3 ) / FLOAT_1 ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; } 
public void METHOD_1 ( ) { VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; VAR_3 = ( ( TYPE_1 ) ( METHOD_5 ( VAR_4 ) ) ) ; VAR_5 = METHOD_5 ( VAR_6 ) ; VAR_7 = ( ( TYPE_2 ) ( METHOD_5 ( VAR_8 ) ) ) ; if ( VAR_1 ) { this . METHOD_6 ( VAR_7 ) ; } else { this . METHOD_6 ( VAR_5 ) ; } VAR_9 = new TYPE_3 ( METHOD_2 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 e , int VAR_2 ) { if ( VAR_2 < 1 ) { throw new TYPE_4 ( STRING_1 ) ; } int id = VAR_1 . METHOD_2 ( e . METHOD_3 ( VAR_1 ) , VAR_2 , 0 , 0 , false , false , 0 ) ; TYPE_1 t = new TYPE_1 ( id , VAR_1 ) ; VAR_3 = e ; VAR_4 = VAR_2 ; t . METHOD_4 ( ) ; return t ; } 
private TYPE_1 METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return STRING_1 ; } java.lang.String VAR_1 = context . METHOD_3 ( VAR_2 ) ; return METHOD_4 ( ) ? context . METHOD_3 ( VAR_3 , VAR_1 ) : context . METHOD_3 ( VAR_4 , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( VAR_2 ) ) ^ ( VAR_4 ) ) { METHOD_3 ( ) ; VAR_5 . print ( STRING_1 ) ; VAR_5 . print ( STRING_2 ) ; VAR_2 . METHOD_4 ( VAR_1 , this ) ; VAR_5 . println ( TYPE_3 . METHOD_5 ( VAR_1 . getName ( ) , VAR_2 . METHOD_6 ( ) , VAR_2 . getName ( VAR_1 ) , VAR_2 . METHOD_7 ( VAR_1 ) ) ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.String VAR_5 = VAR_3 . METHOD_4 ( ) ; TYPE_3 VAR_6 = VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ; return TYPE_4 . METHOD_1 ( VAR_1 , VAR_6 , VAR_5 ) ; } else { return null ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
public boolean METHOD_1 ( int id , byte [ ] data ) { android.util.Log.v ( VAR_1 . TAG , ( STRING_1 + id ) ) ; boolean result = false ; if ( ( VAR_2 ) != null ) { try { result = VAR_2 . METHOD_1 ( id , data ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } return result ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 config , TYPE_3 [ ] VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3 = config . METHOD_2 ( VAR_4 , ( ( TYPE_4 ) ( null ) ) ) ; TYPE_5 VAR_5 = new TYPE_5 ( VAR_3 , VAR_2 ) ; TYPE_6 VAR_6 = METHOD_3 ( VAR_1 , config , VAR_5 ) ; for ( TYPE_3 VAR_7 : VAR_2 ) { VAR_6 . METHOD_4 ( new TYPE_7 ( new TYPE_8 ( VAR_7 ) , VAR_6 ) ) ; } } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , java.lang.Object d , int VAR_3 , TYPE_1 VAR_4 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 , VAR_5 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { if ( key . METHOD_2 ( STRING_1 ) ) { VAR_2 = 0 ; } else if ( key . METHOD_2 ( STRING_2 ) ) { VAR_2 = 1 ; } else { return null ; } if ( ( VAR_3 ) == null ) { return null ; } return VAR_4 ; } 
private void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { loge ( STRING_1 ) ; } } catch ( android.os.RemoteException e ) { } } VAR_4 . METHOD_4 ( ) ; METHOD_5 ( false ) ; METHOD_6 ( VAR_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , 2 ) ; assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; METHOD_5 ( VAR_1 ) ; TYPE_1 VAR_5 = TYPE_2 . METHOD_2 ( VAR_6 , 1 ) ; assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; } 
public void run ( ) { try { java.io.File output = java.io.File . METHOD_1 ( STRING_1 , STRING_2 ) ; output . METHOD_2 ( ) ; VAR_1 [ VAR_2 ] = output ; TYPE_1 . METHOD_3 ( ) . METHOD_4 ( input , output , VAR_3 , VAR_4 , false , VAR_5 ) ; } catch ( java.lang.Exception VAR_6 ) { } } 
public void METHOD_1 ( ) { int [ ] VAR_1 = new int [ ] { VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 } ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { try { new TYPE_1 ( ) . METHOD_2 ( VAR_1 [ i ] , STRING_1 ) ; fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) ; } catch ( java.io.IOException e ) { } } } 
private void METHOD_1 ( java.lang.Object pos , TYPE_1 VAR_1 ) { final int i = VAR_2 . METHOD_2 ( pos ) ; if ( ( VAR_3 ) || ( VAR_4 ) ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( i + 1 ) ) + STRING_3 ) + ( VAR_2 . size ( ) ) ) + STRING_4 ) + pos ) + STRING_5 ) ) ; VAR_2 . METHOD_3 ( ( i + 1 ) , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 parent , final TYPE_3 VAR_3 ) { final TYPE_4 state = ( ( TYPE_4 ) ( VAR_4 ) ) ; VAR_2 . METHOD_2 ( STRING_1 , new TYPE_5 ( ) { public void METHOD_3 ( TYPE_2 n ) { state . METHOD_4 ( ) ; state . METHOD_5 ( n ) ; } } ) ; } 
public int METHOD_1 ( java.lang.String VAR_1 , int uid , boolean VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , int VAR_5 , boolean VAR_6 , boolean VAR_7 , java.lang.String VAR_8 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_4 ) ) ) { TYPE_2 . e ( TYPE_1 . TAG , ( STRING_1 + VAR_4 ) ) ; return - 1 ; } return VAR_9 . METHOD_1 ( VAR_1 , uid , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; } 
public static void METHOD_1 ( ) { TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( ( - FLOAT_1 ) ) , - INT_1 ) ; TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( FLOAT_2 ) , 0 ) ; TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( FLOAT_1 ) , INT_2 ) ; TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( VAR_1 ) , INT_3 ) ; TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( VAR_2 ) , INT_4 ) ; TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( VAR_3 ) , - INT_5 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 source ) { java.util.ArrayList < TYPE_2 > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; } VAR_2 . METHOD_1 ( source ) ; } 
static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 , TYPE_1 VAR_4 ) { int VAR_5 ; int VAR_6 ; if ( VAR_3 != null ) { VAR_3 . METHOD_2 ( ) ; VAR_5 = VAR_7 ; } else { VAR_5 = 0 ; } if ( VAR_4 != null ) { VAR_4 . METHOD_2 ( ) ; VAR_6 = VAR_8 ; } else { VAR_6 = 0 ; } TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 , VAR_9 , VAR_10 ) ) ; } 
public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) return ; if ( METHOD_3 ( ) ) { android.util.Log.d ( VAR_1 . TAG , STRING_1 ) ; return ; } final java.lang.String [ ] VAR_2 = new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 } ; METHOD_4 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . d ( VAR_1 , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) ; METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 ) . METHOD_4 ( null ) ; if ( VAR_2 ) { METHOD_5 ( ) ; METHOD_6 ( ) ; } } 
private static boolean METHOD_1 ( TYPE_1 project ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( project ) ; for ( TYPE_3 VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_4 VAR_3 = TYPE_4 . METHOD_2 ( VAR_2 ) ; for ( TYPE_5 VAR_4 : VAR_3 . METHOD_4 ( ) ) { if ( STRING_1 . equals ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) ) ) { return true ; } } } return false ; } 
void METHOD_1 ( java.lang.String path , java.util.HashMap < java.lang.String , java.lang.Integer > VAR_1 ) { try { TYPE_1 request = new TYPE_1 ( path , VAR_2 , 0 , VAR_3 , 0 , 0 ) ; request . METHOD_2 ( VAR_4 ) ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_6 . METHOD_3 ( ) , path , VAR_1 ) ; VAR_5 . METHOD_4 ( request . METHOD_5 ( ) ) ; VAR_5 . METHOD_6 ( ) ; } catch ( java.io.IOException e ) { android.util.Log.w ( VAR_7 . TAG , STRING_1 ) ; } } 
private byte METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { android.util.Log.w ( VAR_2 . TAG , STRING_1 ) ; return VAR_3 ; } switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_4 : case VAR_5 : return VAR_6 ; case VAR_7 : case VAR_8 : case VAR_9 : return VAR_3 ; case VAR_10 : return VAR_11 ; case VAR_12 : case VAR_13 : case VAR_14 : return VAR_15 ; case VAR_16 : case VAR_17 : return VAR_18 ; case VAR_19 : default : return VAR_20 ; } } 
void METHOD_1 ( ) { synchronized ( this ) { long VAR_1 = ( TYPE_1 . METHOD_2 ( ) ) + INT_1 ; if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; if ( ( ( VAR_4 ) == 0 ) || ( VAR_1 < ( VAR_4 ) ) ) { VAR_4 = VAR_1 ; } METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class . getName ( ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( VAR_3 , null ) , 0 ) ; TYPE_4 . METHOD_3 ( VAR_3 . version ) . METHOD_4 ( VAR_4 ) ; TYPE_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( 0 ) ; TYPE_4 . METHOD_3 ( VAR_6 ) . METHOD_4 ( 1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_9 ) + STRING_8 ) ) , VAR_3 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) , TYPE_1 . METHOD_8 ( ) ) ; org.mockito.Mockito.verify ( VAR_5 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_9 ( 1 ) ; org.mockito.Mockito.verify ( VAR_5 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_10 ( FLOAT_1 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { synchronized ( VAR_3 ) { if ( ( VAR_4 ) != null ) { android.util.Log.w ( VAR_5 . TAG , STRING_1 ) ; return false ; } VAR_6 = VAR_2 ; VAR_4 = VAR_1 ; if ( ! ( METHOD_2 ( VAR_7 ) ) ) return false ; METHOD_3 ( ) ; return true ; } } 
protected boolean METHOD_1 ( java.lang.String packageName ) { try { java.lang.String result = device . METHOD_2 ( packageName ) ; if ( result != null ) { TYPE_1 . log ( VAR_1 , ( ( ( STRING_1 + packageName ) + STRING_2 ) + result ) ) ; return false ; } return true ; } catch ( TYPE_2 e ) { TYPE_1 . log ( VAR_1 , ( STRING_3 + packageName ) , e ) ; return false ; } } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( VAR_2 class , method ) ) ) ) { return ; } TYPE_1 request = new TYPE_1 ( method ) ; TYPE_2 VAR_3 = new TYPE_2 ( request ) ; VAR_3 . METHOD_5 ( method ) ; request . METHOD_6 ( ) ; } 
public TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final boolean VAR_2 , final boolean VAR_3 ) { METHOD_2 ( ) ; if ( ( VAR_4 . METHOD_3 ( ) . length ( ) ) != 0 ) { TYPE_1 VAR_5 = new TYPE_1 ( null , VAR_4 . METHOD_4 ( ) ) ; return VAR_5 ; } return null ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , short value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; } 
private synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String packageName = VAR_1 . METHOD_2 ( ) ; TYPE_2 info = new TYPE_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , VAR_2 , VAR_3 , METHOD_4 ( VAR_1 . METHOD_5 ( ) ) , METHOD_6 ( packageName ) , VAR_1 . METHOD_2 ( ) , METHOD_7 ( packageName ) ) ; METHOD_8 ( info ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; if ( ( ( null != ( VAR_2 ) ) && ( ( VAR_2 . METHOD_3 ( ) ) > 0 ) ) && ( ( VAR_3 ) == ( VAR_4 ) ) ) { VAR_1 . METHOD_4 ( 0 , VAR_5 , 0 , VAR_6 ) . METHOD_5 ( VAR_7 ) ; } return true ; } 
private static java.lang.String METHOD_1 ( java.lang.String id ) { if ( id . METHOD_2 ( TYPE_1 ) ) { id = id . METHOD_3 ( TYPE_1 . length ( ) ) ; } else if ( id . METHOD_2 ( TYPE_2 ) ) { id = id . METHOD_3 ( TYPE_2 . length ( ) ) ; } return id ; } 
public int METHOD_1 ( ) { return ( ( name ) + ( TYPE_1 . from ( METHOD_2 ( ) ) . METHOD_3 ( new TYPE_2 < TYPE_3 , java.lang.String > ( ) { public java.lang.String METHOD_4 ( TYPE_3 VAR_1 ) { return METHOD_5 ( VAR_1 ) ; } } ) . toString ( ) ) ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; super . METHOD_1 ( ) ; if ( ( METHOD_3 ( ) ) != null ) { VAR_1 . METHOD_4 ( METHOD_3 ( ) ) ; TYPE_2 . get ( METHOD_3 ( ) ) . METHOD_5 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_6 ( VAR_3 ) ; } } 
public int METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , int version , int VAR_4 ) { if ( ( VAR_5 ) == false ) { throw new java.lang.RuntimeException ( ( ( VAR_6 . TAG ) + STRING_1 ) ) ; } return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( obj == ( this ) ) { return true ; } else if ( obj instanceof TYPE_1 ) { TYPE_1 < ? > VAR_1 = ( ( TYPE_1 < ? > ) ( obj ) ) ; TYPE_2 < java.lang.Object > VAR_2 = ( ( TYPE_2 < java.lang.Object > ) ( this . VAR_2 ) ) ; return ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_2 . METHOD_1 ( this . VAR_4 , VAR_5 ) ) ; } else { return false ; } } 
private static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < ? extends TYPE_2 > VAR_1 , java.util.Set < java.lang.String > VAR_2 , int VAR_3 , java.lang.String ... VAR_4 ) { return TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , TYPE_4 . METHOD_2 ( VAR_4 ) ) ; } 
public TYPE_1 METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 == null ) { return null ; } return VAR_3 . METHOD_4 ( ) ; } 
public synchronized void METHOD_1 ( int netId , int error , int VAR_1 , java.lang.String VAR_2 , int VAR_3 , int uid ) throws android.os.RemoteException { TYPE_1 . METHOD_2 ( STRING_1 , netId , error , VAR_1 ) ; long VAR_4 = TYPE_2 . METHOD_3 ( ) ; METHOD_4 ( VAR_4 , netId ) . METHOD_5 ( error , VAR_1 , VAR_2 ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , uid ) ; } } 
private static void METHOD_1 ( TYPE_1 context , boolean VAR_1 ) { final TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( context , TYPE_3 . METHOD_3 ( ) ) ; if ( VAR_2 != null ) { final int value = ( VAR_1 ) ? VAR_3 : VAR_4 ; TYPE_4 VAR_5 = new TYPE_4 ( new java.lang.Runnable ( ) { public void run ( ) { try { VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_6 , value ) ; } catch ( TYPE_5 e ) { } } } ) ; VAR_5 . start ( ) ; } } 
public static void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) ; } catch ( java.lang.Throwable e ) { throw TYPE_1 . METHOD_5 ( e ) ; } finally { VAR_2 = true ; VAR_1 . METHOD_6 ( ) ; } } 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( new TYPE_4 ( new TYPE_5 ( STRING_1 , 16 ) , new TYPE_5 ( STRING_2 , 16 ) , new TYPE_5 ( STRING_3 , 16 ) ) ) ; return new TYPE_1 ( VAR_1 , VAR_1 . METHOD_3 ( TYPE_6 . METHOD_4 ( STRING_4 ) ) , new TYPE_5 ( STRING_5 , 16 ) , new TYPE_5 ( STRING_6 , 16 ) ) ; } 
public boolean METHOD_1 ( android.os.Message msg ) { if ( ( super . METHOD_1 ( msg ) ) == ( VAR_1 ) ) { return VAR_1 ; } switch ( VAR_2 ) { case VAR_3 : METHOD_2 ( VAR_4 ) ; return VAR_1 ; case VAR_5 : return VAR_1 ; case VAR_6 : METHOD_2 ( VAR_7 , VAR_8 ) ; VAR_9 = false ; return VAR_1 ; case VAR_10 : METHOD_3 ( ) ; return VAR_1 ; case VAR_11 : return VAR_1 ; case VAR_12 : return VAR_1 ; default : return VAR_13 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ; byte [ ] VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 [ ( ( VAR_3 . length ) - 6 ) ] = CHAR_1 ; TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { assert ( METHOD_2 ( ) ) == ( VAR_3 ) ; return new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , a , b , c ) ; } 
public void METHOD_1 ( TYPE_1 callback ) { if ( callback == null ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( callback ) ; if ( VAR_1 == null ) { return ; } TYPE_3 VAR_3 ; try { VAR_3 = VAR_4 . METHOD_3 ( ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_5 . TAG , STRING_2 , e ) ; throw new TYPE_4 ( STRING_3 ) ; } } 
private int METHOD_1 ( int VAR_1 , java.lang.String address ) { TYPE_1 VAR_2 = mContext . METHOD_2 ( VAR_3 , VAR_4 ) ; if ( ! ( VAR_2 . METHOD_3 ( address ) ) ) { return VAR_1 ; } if ( VAR_2 . METHOD_4 ( address , false ) ) { VAR_1 &= ~ ( VAR_5 ) ; } return VAR_1 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 context ) { return new TYPE_1 ( new TYPE_3 ( context ) , new TYPE_4 ( context ) , new TYPE_5 ( context ) , new TYPE_3 ( context ) , new TYPE_4 ( context ) , new TYPE_3 ( context ) , new TYPE_3 ( context ) , new TYPE_3 ( context ) ) ; } 
private void METHOD_1 ( final TYPE_1 device ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( device ) ; if ( VAR_1 == null ) { return ; } TYPE_4 [ ] VAR_2 = TYPE_3 . METHOD_3 ( device ) ; TYPE_5 . METHOD_4 ( ) . METHOD_5 ( device , VAR_2 ) ; if ( ( VAR_3 ) >= 3 ) { TYPE_6 . METHOD_6 ( this , device ) ; METHOD_7 ( device ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 uri , java.lang.String [ ] VAR_1 , java.lang.String VAR_2 , java.lang.String [ ] VAR_3 , java.lang.String VAR_4 ) { if ( ( VAR_5 . size ( ) ) > 0 ) { return METHOD_2 ( VAR_5 . get ( 0 ) ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( ) ) ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ; java.lang.String [ ] VAR_3 = VAR_2 . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( VAR_4 , VAR_3 ) ; METHOD_6 ( VAR_3 , VAR_2 . METHOD_4 ( ) ) ; } 
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ) + STRING_4 ) + ( VAR_4 ) ) + STRING_5 ) + ( VAR_5 ) ) + STRING_6 ) + ( VAR_6 . toString ( ) ) ) + STRING_7 ) + ( VAR_7 ) ) + STRING_8 ) + ( TYPE_1 . toString ( VAR_8 ) ) ) + STRING_9 ; } 
private void METHOD_1 ( int [ ] VAR_1 ) { if ( VAR_2 ) TYPE_1 . log ( ( STRING_1 + ( ( VAR_1 [ 0 ] ) != 0 ? STRING_2 : STRING_3 ) ) ) ; this . VAR_3 . METHOD_2 ( ( ( VAR_1 [ 0 ] ) != 0 ) ) ; TYPE_2 context = this ; if ( ( VAR_1 [ 0 ] ) == 1 ) { TYPE_1 . METHOD_3 ( context , true ) ; } else { TYPE_1 . METHOD_3 ( context , false ) ; } } 
public boolean METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 telephony = METHOD_2 ( ) ; if ( telephony != null ) return telephony . METHOD_1 ( VAR_1 ) ; } catch ( android.os.RemoteException ex ) { TYPE_2 . e ( VAR_2 . TAG , STRING_1 , ex ) ; } catch ( java.lang.NullPointerException ex ) { TYPE_2 . e ( VAR_2 . TAG , STRING_2 , ex ) ; } return false ; } 
synchronized boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , byte error ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + error ) ) ; if ( ! ( METHOD_2 ( device ) ) ) { return false ; } return METHOD_3 ( error ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 c , TYPE_1 VAR_1 ) { if ( c instanceof TYPE_3 ) { VAR_2 -= 5 ; return super . METHOD_1 ( c , VAR_1 ) ; } if ( c instanceof TYPE_4 ) { VAR_1 . x -= 1 ; VAR_3 += 1 ; if ( ! ( METHOD_2 ( ) ) ) { VAR_1 . y -= 1 ; VAR_2 += 1 ; } } return super . METHOD_1 ( c , VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) { TYPE_1 item = VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( ( item == null ) && ( ( VAR_4 ) != null ) ) { TYPE_2 VAR_5 = VAR_4 . get ( VAR_1 ) ; if ( VAR_5 != null ) { return METHOD_1 ( VAR_5 , VAR_2 , VAR_3 ) ; } } return item ; } 
public boolean METHOD_1 ( int VAR_1 , TYPE_1 event ) { if ( VAR_1 == ( VAR_2 ) ) { if ( VAR_3 ) android.util.Log.d ( VAR_4 . TAG , STRING_1 ) ; VAR_5 = new TYPE_2 ( ) ; VAR_5 . METHOD_2 ( VAR_6 , VAR_7 ) ; this . METHOD_3 ( ) . METHOD_4 ( VAR_8 , VAR_5 , null , null ) ; TYPE_3 . METHOD_5 ( this , METHOD_6 ( VAR_9 ) , VAR_10 ) . METHOD_7 ( ) ; METHOD_8 ( ) ; } return true ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int flags ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_1 . METHOD_3 ( VAR_5 ) ; VAR_1 . METHOD_4 ( ( ( TYPE_2 ) ( VAR_6 ) ) , flags ) ; VAR_1 . METHOD_3 ( VAR_7 ) ; VAR_1 . METHOD_5 ( new TYPE_3 ( VAR_8 ) ) ; } 
public static void METHOD_1 ( TYPE_1 context , boolean VAR_1 ) { if ( TYPE_2 . METHOD_2 ( context ) ) { TYPE_2 . METHOD_3 ( context , VAR_2 , VAR_1 ) ; } else { TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 ) . METHOD_7 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 p = new TYPE_2 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_2 ( null , p , 1 , 2 ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_4 ) ) ; assertEquals ( 1 , VAR_3 . index ) ; assertEquals ( 2 , VAR_3 . count ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = null ; if ( VAR_1 instanceof TYPE_2 ) { VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) ; } VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( VAR_2 == null ) { return null ; } return TYPE_3 . METHOD_5 ( VAR_2 ) ; } 
private void METHOD_1 ( ) { if ( ( ( METHOD_2 ( ) ) != null ) && ( TYPE_1 . equals ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ) { VAR_1 = true ; } if ( ! ( TYPE_2 . METHOD_4 ( context , VAR_2 ) ) ) { VAR_1 = false ; } VAR_1 = TYPE_3 . METHOD_5 ( context , METHOD_6 ( ) , METHOD_7 ( ) ) ; } 
public static java.io.File METHOD_1 ( TYPE_1 path ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_4 res = VAR_1 . METHOD_4 ( path ) ; if ( res != null ) { return res . METHOD_5 ( ) . METHOD_6 ( ) ; } return path . METHOD_6 ( ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( METHOD_1 ( ) . equals ( obj . METHOD_1 ( ) ) ) { return TYPE_1 . equals ( VAR_1 , ( ( TYPE_2 ) ( obj ) ) . VAR_1 ) ; } return super . equals ( obj ) ; } 
static void METHOD_1 ( int VAR_1 , int src , int VAR_2 ) { TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 == null ) { return ; } TYPE_2 . METHOD_3 ( VAR_1 , src , VAR_3 . METHOD_4 ( ) ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , boolean value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( java.lang.String name , java.lang.String address ) { if ( ( this . VAR_1 ) == null ) this . VAR_1 = new java.util.ArrayList < TYPE_1 > ( 1 ) ; this . VAR_1 . METHOD_2 ( new TYPE_1 ( name , address , null ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 config ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_1 = METHOD_2 ( config ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 < 0 ) { TYPE_6 . e ( STRING_1 ) ; return false ; } VAR_3 . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_2 , true ) ; return VAR_3 . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 ) { VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , VAR_6 ) ; VAR_4 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( VAR_7 ) ; VAR_5 . METHOD_6 ( VAR_7 , VAR_6 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_1 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_1 == null ) { TYPE_1 . i ( STRING_1 , STRING_2 ) ; return ; } VAR_1 . METHOD_5 ( true ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; VAR_2 . METHOD_8 ( ) ; } 
private void METHOD_1 ( ) { if ( ! ( VAR_1 . get ( VAR_2 . METHOD_2 ( ) ) ) ) { VAR_1 . set ( VAR_2 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; java.util.ArrayList < TYPE_1 > VAR_4 ; VAR_4 = VAR_2 . METHOD_4 ( ) ; VAR_5 = ( VAR_4 . size ( ) ) - 1 ; VAR_6 = VAR_7 ; } } 
private void METHOD_1 ( TYPE_1 x ) { TYPE_2 info = METHOD_2 ( x ) ; try { com.android.jack.ir.ast.JDefinedClassOrInterface type = ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( METHOD_3 ( ) . get ( VAR_1 ) ) ) ; VAR_2 . METHOD_4 ( type ) ; if ( ( VAR_3 ) != null ) { for ( TYPE_1 VAR_4 : VAR_3 ) { METHOD_1 ( VAR_4 ) ; } } } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e , info ) ; } } 
public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = null ; this . METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_3 ( ( STRING_1 + VAR_1 ) ) ; } for ( TYPE_4 m : VAR_1 . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( m . METHOD_5 ( ) ) ; } assert ( VAR_2 ) != null ; return ( ( TYPE_1 ) ( VAR_2 ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 . METHOD_2 ( ) ) { if ( VAR_2 instanceof TYPE_3 ) { TYPE_4 action = ( ( TYPE_3 ) ( VAR_2 ) ) . METHOD_3 ( ) ; if ( action instanceof TYPE_5 ) { ( ( TYPE_5 ) ( action ) ) . METHOD_4 ( VAR_4 ) ; } } } } 
public void METHOD_1 ( ) throws android.os.RemoteException { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_1 ( ) ) ; TYPE_3 info = new TYPE_3 ( VAR_2 , 0 ) ; VAR_3 . METHOD_3 ( info ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( TYPE_4 . eq ( info ) ) ; org.mockito.Mockito.verify ( VAR_1 ) . METHOD_3 ( TYPE_4 . eq ( info ) ) ; } 
public boolean METHOD_1 ( int VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( VAR_1 ) ; } 
public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = 4 ; double x = ( ( double ) ( args . in ) ) ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( ( ( x - FLOAT_1 ) / FLOAT_2 ) ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.String VAR_2 = VAR_3 . METHOD_4 ( ) ; if ( VAR_1 . METHOD_5 ( VAR_4 ) ) { assertTrue ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( VAR_5 ) ) , TYPE_2 . METHOD_6 ( VAR_5 , VAR_2 ) ) ; } else { assertEquals ( STRING_3 , VAR_2 ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 ; switch ( METHOD_2 ( ) . METHOD_3 ( ) ) { case VAR_2 : VAR_1 = STRING_1 ; break ; case VAR_3 : VAR_1 = STRING_2 ; break ; default : throw new TYPE_1 ( STRING_3 ) ; } if ( METHOD_2 ( ) . METHOD_4 ( ) ) { return java.lang.String.format ( STRING_4 , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) ) ; } else { return java.lang.String.format ( STRING_5 , VAR_1 , METHOD_6 ( ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_3 = VAR_4 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_2 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , new TYPE_3 ( ) , VAR_5 ) ; } else { VAR_2 . METHOD_6 ( VAR_3 ) ; } VAR_2 . METHOD_7 ( ) ; VAR_1 . METHOD_8 ( ) ; TYPE_4 . get ( VAR_4 ) . METHOD_9 ( VAR_6 , VAR_4 ) ; METHOD_10 ( true ) ; } 
public void run ( ) { try { synchronized ( VAR_1 ) { VAR_1 . METHOD_1 ( VAR_2 ) ; if ( VAR_3 ) { return ; } } } catch ( TYPE_1 e ) { android.util.Log.w ( VAR_4 . TAG , STRING_1 ) ; METHOD_2 ( ) ; } android.util.Log.e ( VAR_4 . TAG , STRING_2 ) ; VAR_5 . METHOD_3 ( ) ; } 
private void METHOD_1 ( TYPE_1 in ) throws java.io.IOException { TYPE_2 VAR_1 = new TYPE_2 ( ) ; byte [ ] VAR_2 = new byte [ INT_1 ] ; int count ; while ( ( count = in . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ) { VAR_1 . METHOD_3 ( VAR_2 , 0 , count ) ; } in . METHOD_4 ( ) ; this . data = VAR_1 . METHOD_5 ( ) ; this . length = data . length ; this . VAR_3 . METHOD_6 ( this ) ; } 
public void run ( ) { VAR_1 . println ( STRING_1 ) ; VAR_1 . println ( STRING_2 ) ; VAR_2 . METHOD_1 ( VAR_3 ) ; VAR_1 . println ( STRING_3 ) ; VAR_2 . METHOD_2 ( VAR_4 ) ; VAR_1 . println ( STRING_4 ) ; VAR_1 . println ( ( STRING_5 + STRING_6 ) ) ; TYPE_1 . METHOD_3 ( ) ; VAR_1 . println ( ( STRING_5 + STRING_7 ) ) ; VAR_1 . println ( STRING_8 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) throws java.io.IOException { TYPE_1 VAR_2 = super . METHOD_1 ( VAR_1 , listener ) ; VAR_2 . METHOD_2 ( new java.lang.String [ ] { STRING_1 } ) ; assertEquals ( STRING_2 , 0 , VAR_2 . METHOD_3 ( ) . length ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; fail ( STRING_2 ) ; } catch ( java.io.IOException e ) { } TYPE_2 . METHOD_2 ( VAR_2 , null , VAR_3 ) ; java.lang.String VAR_4 = new java.io.File ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_4 ) ; assertEquals ( VAR_4 , VAR_1 . getName ( ) ) ; VAR_1 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } if ( ( ! ( METHOD_4 ( ) ) ) || ( ! ( METHOD_5 ( ) ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_2 ) ; return ; } METHOD_6 ( 0 ) ; METHOD_7 ( VAR_2 ) ; METHOD_8 ( false , false , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_9 ( VAR_3 ) ; METHOD_10 ( VAR_4 ) ; } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , java.lang.Object d , int VAR_6 , TYPE_1 VAR_7 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 , VAR_8 ) ; } 
private void METHOD_1 ( java.lang.Object pos , TYPE_1 VAR_1 ) { final int i = VAR_2 . METHOD_2 ( pos ) ; if ( ( VAR_3 ) || ( VAR_4 ) ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + i ) + STRING_3 ) + ( VAR_2 . size ( ) ) ) + STRING_4 ) + pos ) + STRING_5 ) ) ; VAR_2 . METHOD_3 ( i , VAR_1 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final java.lang.String VAR_3 = ( v == null ) ? ( ( java.lang.String ) ( m . METHOD_2 ( ) ) ) : ( ( java.lang.String ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( VAR_3 . equals ( value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( ) ; TYPE_3 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( true ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_3 < TYPE_4 > of ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 . METHOD_2 ( VAR_2 ) ; if ( ( VAR_4 ) == null ) { VAR_4 = new TYPE_2 ( ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_4 ) ; } if ( ( VAR_5 ) == null ) { VAR_5 = new TYPE_4 ( VAR_2 . METHOD_5 ( ) ) ; if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_6 ( ) . METHOD_7 ( VAR_5 ) ; } } } 
private int METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { int VAR_1 = 0 ; if ( ! ( method . METHOD_2 ( ) ) ) { VAR_1 += 1 ; } for ( TYPE_1 VAR_2 : method . METHOD_3 ( ) ) { if ( ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_4 ( ) ) ) || ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_4 ( ) ) ) ) { VAR_1 += 2 ; } else { VAR_1 += 1 ; } } return VAR_1 ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) { if ( ( VAR_4 ) < ( VAR_5 ) ) { TYPE_3 . fail ( STRING_1 ) ; } try { VAR_6 class . METHOD_2 ( STRING_2 , VAR_7 class , boolean . class ) . invoke ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( TYPE_4 | TYPE_5 | TYPE_6 e ) { TYPE_7 . e ( STRING_3 , STRING_4 , e ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { VAR_3 = false ; VAR_4 = null ; VAR_5 = 0 ; VAR_6 = VAR_1 ; VAR_7 = VAR_2 ; VAR_8 = ( VAR_2 != null ) ? METHOD_2 ( VAR_2 ) : null ; VAR_9 = null ; VAR_10 = null ; VAR_11 = VAR_12 = ( ( VAR_7 ) != null ) ? 0 : TYPE_2 . METHOD_3 ( ) ; VAR_13 = 0 ; VAR_14 = null ; VAR_15 . METHOD_4 ( VAR_16 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_1 parent , java.lang.String VAR_1 , boolean VAR_2 ) { java.lang.String name = VAR_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_4 ( name , VAR_1 , VAR_2 ) ; if ( parent == null ) { parent = new TYPE_1 ( TYPE_3 . METHOD_4 ( STRING_1 , STRING_1 , true ) ) ; } return ( ( TYPE_1 ) ( parent . METHOD_5 ( VAR_3 ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_2 ) != null ; assert ( VAR_3 ) != null ; TYPE_1 VAR_4 = TYPE_3 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , new TYPE_4 ( VAR_4 ) ) ; for ( TYPE_5 VAR_5 : VAR_6 ) { TYPE_6 VAR_7 = VAR_5 . METHOD_1 ( VAR_1 ) ; assert ( ! ( VAR_7 instanceof TYPE_7 ) ) || ( VAR_7 != ( VAR_8 ) ) ; VAR_4 . METHOD_5 ( VAR_7 ) ; } return VAR_4 ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean append ) throws TYPE_3 { assert ! ( METHOD_2 ( ) ) ; assert VAR_2 . METHOD_3 ( VAR_3 ) ; java.io.File path = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; try { return new TYPE_4 ( path , append ) ; } catch ( TYPE_5 e ) { TYPE_6 . METHOD_6 ( path , VAR_1 . METHOD_7 ( ) , VAR_4 ) ; throw new TYPE_7 ( e ) ; } } 
private void METHOD_1 ( android.bluetooth.BluetoothDevice device ) { TYPE_1 VAR_1 = METHOD_2 ( device ) ; android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 , device ) ; VAR_2 . METHOD_3 ( VAR_5 , ( VAR_1 == null ? null : VAR_6 ) ) ; VAR_7 . METHOD_4 ( device , ( VAR_1 == null ? null : VAR_6 ) ) ; VAR_7 . METHOD_5 ( VAR_2 , VAR_8 ) ; VAR_9 . METHOD_6 ( device ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { try { if ( ( VAR_2 ) != null ) { VAR_1 . METHOD_3 ( VAR_2 ) ; } } finally { VAR_1 . METHOD_4 ( ) ; } } TYPE_2 . METHOD_5 ( ) . METHOD_6 ( this ) ; if ( ( VAR_3 ) != null ) { TYPE_3 . METHOD_7 ( ) . METHOD_8 ( VAR_3 ) ; VAR_3 = null ; } super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( ) ; org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_3 ( org.mockito.Matchers . METHOD_5 ( VAR_4 class ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , false ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( STRING_1 ) , TYPE_2 . METHOD_5 ( VAR_3 ) ) ; java.lang.String VAR_4 = TYPE_3 . METHOD_6 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 ) ; TYPE_3 . METHOD_7 ( VAR_4 , VAR_1 ) ; } 
public boolean METHOD_1 ( android.os.Message msg ) { switch ( VAR_1 ) { case VAR_2 : { final int flags = msg.arg1 ; VAR_3 . METHOD_2 ( flags ) ; return true ; } case VAR_4 : { VAR_3 . METHOD_3 ( null ) ; return true ; } case VAR_5 : { VAR_3 . METHOD_4 ( ) ; return true ; } default : { return false ; } } } 
private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , VAR_6 , true ) ; int VAR_7 = METHOD_3 ( ) ; TYPE_2 VAR_8 = TYPE_3 . METHOD_4 ( VAR_9 class ) ; VAR_10 . METHOD_5 ( VAR_7 , VAR_4 , VAR_8 ) ; org.mockito.Mockito.verify ( VAR_11 ) . METHOD_5 ( VAR_7 , VAR_4 , VAR_8 ) ; } 
void METHOD_1 ( ) { android.util.Log.v ( VAR_1 . TAG , STRING_1 ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_2 != null ) { try { VAR_2 . METHOD_3 ( VAR_4 ) ; } catch ( android.os.RemoteException e ) { e . METHOD_4 ( ) ; } } synchronized ( VAR_5 ) { METHOD_5 ( ) ; } VAR_6 = null ; } 
public void METHOD_1 ( int VAR_1 , byte [ ] VAR_2 , int VAR_3 , int VAR_4 ) { if ( VAR_5 ) { android.util.Log.w ( VAR_6 . TAG , STRING_1 ) ; return ; } else { TYPE_1 VAR_7 = VAR_8 . get ( ) ; if ( VAR_7 == null ) { android.util.Log.w ( VAR_6 . TAG , STRING_2 ) ; return ; } VAR_7 . METHOD_1 ( VAR_9 , VAR_10 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } 
private void METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.util.Map < java.lang.String , java.util.Set < java.lang.String > > VAR_2 , java.util.Set < java.lang.String > VAR_3 ) { for ( java.lang.String VAR_4 : VAR_3 ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_4 ) ) ) { VAR_1 . METHOD_3 ( VAR_4 ) ; for ( java.lang.String VAR_5 : METHOD_4 ( VAR_2 , VAR_4 ) ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_5 ) ) ) { VAR_1 . METHOD_3 ( VAR_5 ) ; } } } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_3 ) ; ++ i ) { assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . element ( ) ) ) ) ; VAR_1 . METHOD_3 ( ) ; } try { VAR_1 . element ( ) ; METHOD_4 ( ) ; } catch ( TYPE_3 VAR_4 ) { } } 
private void METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } final android.content.Intent VAR_4 = new android.content.Intent ( VAR_5 ) ; VAR_4 . METHOD_2 ( VAR_6 ) ; if ( VAR_1 ) { VAR_4 . METHOD_3 ( VAR_7 , VAR_8 ) ; } else { VAR_4 . METHOD_3 ( VAR_7 , VAR_9 ) ; } mContext . METHOD_4 ( VAR_4 , VAR_10 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 request ) { try { TYPE_1 id = VAR_1 . METHOD_2 ( VAR_2 , TYPE_3 . METHOD_3 ( ) , VAR_3 ) ; TYPE_4 field = id . METHOD_4 ( ) ; assert field != null ; if ( field . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) { return id ; } } catch ( TYPE_5 e ) { } return METHOD_7 ( VAR_1 , request ) ; } 
public static void METHOD_1 ( java.lang.Object VAR_1 , int index , float value ) throws TYPE_1 , java.lang.IllegalArgumentException { if ( VAR_1 instanceof float [ ] ) { ( ( float [ ] ) ( VAR_1 ) ) [ index ] = value ; } else if ( VAR_1 instanceof double [ ] ) { ( ( double [ ] ) ( VAR_1 ) ) [ index ] = value ; } else { throw TYPE_2 . METHOD_2 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ) ) { return ; } TYPE_3 VAR_1 = TYPE_3 . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) ; assertEquals ( STRING_2 , ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_4 ( ) ) ; TYPE_3 VAR_2 = TYPE_3 . METHOD_5 ( new TYPE_2 ( STRING_1 ) ) ; assertEquals ( STRING_3 , ( ( TYPE_4 ) ( VAR_2 ) ) . METHOD_4 ( ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 b = ( ( TYPE_1 ) ( METHOD_2 ( VAR_1 ) ) ) ; if ( b != null ) { if ( VAR_2 . METHOD_3 ( ) ) { b . METHOD_4 ( VAR_3 ) ; } else { b . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_5 ( null ) ; } } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 { try { VAR_1 . METHOD_2 ( new TYPE_5 ( VAR_2 . METHOD_3 ( ) ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( new TYPE_6 ( VAR_2 . METHOD_4 ( ) , e ) ) ; } } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ! ( VAR_1 ) ) && ( ! ( method . METHOD_1 ( ) ) ) ) && ( ! ( method . METHOD_2 ( ) ) ) ) { if ( TYPE_1 . METHOD_3 ( method ) ) { new TYPE_2 ( method ) . METHOD_4 ( ) ; } else { METHOD_5 ( method ) ; } } } 
public void METHOD_1 ( ) { assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) ; assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) ; assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) ; assertTrue ( STRING_4 , TYPE_1 . METHOD_2 ( CHAR_4 ) ) ; assertTrue ( STRING_5 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_5 ) ) ) ) ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; return equals ( VAR_3 , VAR_2 . type , VAR_4 ) ; } return false ; } TYPE_1 VAR_5 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return equals ( VAR_6 , VAR_5 . type , VAR_7 ) ; } 
private void METHOD_1 ( int netId , int VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( ( ( ( ( STRING_1 + ( java.lang.Integer . toString ( netId ) ) ) + STRING_2 ) + ( java.lang.Integer . toString ( VAR_1 ) ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; } if ( VAR_4 ) { VAR_5 . METHOD_2 ( ) ; VAR_4 = false ; } VAR_5 . METHOD_3 ( netId , VAR_1 ) ; } 
public static final void METHOD_1 ( TYPE_1 msg , byte [ ] data , int offset , int length ) { try { final TYPE_2 output = TYPE_2 . METHOD_2 ( data , offset , length ) ; msg . METHOD_3 ( output ) ; output . METHOD_4 ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( ( STRING_1 + STRING_2 ) ) ; } } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } method . METHOD_7 ( VAR_2 class ) ; TYPE_1 v = new TYPE_1 ( ) ; v . METHOD_5 ( method ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true ) ; METHOD_3 ( false ) ; METHOD_4 ( false ) ; METHOD_5 ( VAR_1 , false ) ; METHOD_6 ( false ) ; assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { TYPE_4 . METHOD_2 ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 1 ) ; fail ( ) ; } 
public int METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; } 
public void METHOD_1 ( ) { synchronized ( this ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; try { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( ) ; } out . METHOD_1 ( ) ; } catch ( java.io.IOException x ) { VAR_3 = true ; } VAR_2 = null ; VAR_4 = null ; out = null ; } } } 
public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 0 , 0 , false ) ; TYPE_3 in = t . METHOD_3 ( args . in ) ; args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( args . in ) , TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) ) ; } 
public static < TYPE_1 extends TYPE_2 < TYPE_1 > > TYPE_3 < TYPE_1 > METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , TYPE_1 [ ] values ) { return new TYPE_3 < TYPE_1 > ( name , VAR_1 , new TYPE_4 < TYPE_1 > ( values ) ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 options ) throws java.io.IOException { TYPE_3 VAR_2 = options . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 class ) ; VAR_1 . println ( ) ; VAR_1 . println ( STRING_1 ) ; VAR_1 . println ( ) ; TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_4 class ) ; } 
final void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 r = VAR_2 . get ( VAR_1 ) ; if ( ( r == null ) || ( ( VAR_3 ) == null ) ) { return ; } if ( VAR_4 ) android.util.Slog.v ( TYPE_3 . TAG , ( STRING_1 + ( VAR_5 . name ) ) ) ; TYPE_3 . METHOD_2 ( VAR_3 , VAR_6 ) ; METHOD_3 ( VAR_7 . METHOD_4 ( VAR_6 ) ) ; } 
public void METHOD_1 ( java.lang.Integer VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( VAR_3 != null ) { VAR_4 . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) , TYPE_1 . METHOD_3 ( VAR_3 ) ) ; } else { VAR_4 . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; } } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , float value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final float VAR_3 = ( v == null ) ? ( ( float ) ( m . METHOD_2 ( ) ) ) : ( ( float ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) { TYPE_2 VAR_5 = METHOD_2 ( ) ; java.lang.String name = null ; TYPE_3 VAR_6 = METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_6 != null ) { name = VAR_6 . METHOD_4 ( ) ; } if ( ( name != null ) && ( VAR_4 != null ) ) { TYPE_1 VAR_7 = METHOD_1 ( VAR_6 , VAR_4 ) ; return VAR_7 ; } return null ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; TYPE_3 < ? > VAR_3 = VAR_1 . METHOD_3 ( ) ; java.lang.String VAR_4 = null ; while ( VAR_3 . METHOD_4 ( ) ) { VAR_4 = ( ( java.lang.String ) ( VAR_3 . METHOD_5 ( ) ) ) ; assertEquals ( STRING_1 , VAR_1 . get ( VAR_4 ) , VAR_2 . METHOD_6 ( VAR_4 ) ) ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) throw new TYPE_2 ( ) ; VAR_1 = ( ( VAR_1 ) - 1 ) & ( ( VAR_3 . length ) - 1 ) ; TYPE_1 result = VAR_3 [ VAR_1 ] ; if ( ( ( VAR_4 ) != ( VAR_2 ) ) || ( result == null ) ) throw new TYPE_3 ( ) ; VAR_5 = VAR_1 ; return result ; } 
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 . values ( ) ) { VAR_1 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( ) ; VAR_3 = null ; } } 
private void METHOD_1 ( int id , boolean VAR_1 ) { int index = VAR_2 . METHOD_2 ( id ) ; if ( index >= 0 ) { TYPE_1 e = VAR_2 . METHOD_3 ( index ) ; VAR_2 . METHOD_4 ( index ) ; VAR_3 . METHOD_5 ( VAR_4 , VAR_1 ) ; METHOD_6 ( e ) ; } } 
protected void METHOD_1 ( final java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 , java.io.IOException { try { if ( ! ( VAR_3 ) ) { TYPE_4 . d ( STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; } } catch ( TYPE_3 e ) { METHOD_3 ( ) ; throw e ; } } 
public void METHOD_1 ( android.renderscript.Allocation a ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; mRS . METHOD_3 ( ) ; if ( ! ( VAR_2 . equals ( a . METHOD_4 ( ) ) ) ) { throw new TYPE_2 ( STRING_2 ) ; } METHOD_5 ( 0 , 0 , VAR_3 , VAR_4 , a , 0 , 0 ) ; TYPE_1 . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 = null ; if ( VAR_1 != null ) { try { VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_4 = VAR_3 . METHOD_3 ( ) ; } catch ( java.lang.IllegalArgumentException e ) { } } VAR_5 = null ; } 
public void METHOD_1 ( TYPE_1 res ) { if ( VAR_1 ) { if ( relaxed ) VAR_2 = new TYPE_2 ( mRS , res , VAR_3 ) ; else VAR_4 = new TYPE_3 ( mRS , res , VAR_5 ) ; } else if ( relaxed ) VAR_6 = new TYPE_4 ( mRS ) ; else VAR_7 = new TYPE_5 ( mRS ) ; METHOD_2 ( ) ; } 
public void METHOD_1 ( TYPE_1 fd ) throws TYPE_2 { try { if ( fd . METHOD_2 ( ) ) { if ( TYPE_3 . METHOD_3 ( fd ) ) { TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ; } if ( TYPE_3 . METHOD_6 ( fd ) ) { METHOD_7 ( fd ) ; } } } catch ( TYPE_2 VAR_1 ) { } os . METHOD_1 ( fd ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 res , java.lang.String path , float VAR_2 ) { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_3 = res . METHOD_3 ( ) ; int VAR_4 = res . METHOD_4 ( ) . VAR_5 ; int VAR_6 = VAR_1 . METHOD_5 ( VAR_3 , path , VAR_2 , VAR_4 ) ; if ( VAR_6 == 0 ) { throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; } TYPE_1 VAR_7 = new TYPE_1 ( VAR_6 , VAR_1 ) ; return VAR_7 ; } 
private void METHOD_1 ( ) { TYPE_1 r = VAR_1 . get ( ) ; if ( r == null ) { return ; } r . METHOD_2 ( this , VAR_2 , null ) ; r . METHOD_3 ( this , VAR_3 , null ) ; r . METHOD_4 ( this , VAR_4 , null ) ; r . METHOD_5 ( this , VAR_5 , null ) ; } 
public static boolean METHOD_1 ( byte [ ] VAR_1 , byte [ ] VAR_2 ) { if ( ( VAR_1 . length ) != ( VAR_2 . length ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ( VAR_1 [ i ] ) != ( VAR_2 [ i ] ) ) { return false ; } } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.io.File VAR_2 = TYPE_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_3 ( ) , VAR_3 , false , false ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; assertTrue ( VAR_4 . METHOD_5 ( VAR_2 , true ) ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return null ; } synchronized ( this ) { try { TYPE_2 res = ( ( TYPE_2 ) ( VAR_1 ) ) ; return VAR_2 . packageName ; } catch ( TYPE_3 e ) { } } return null ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ) { TYPE_2 VAR_5 = TYPE_3 . METHOD_3 ( VAR_3 ) ; long VAR_6 = 0 ; if ( VAR_5 != null ) { VAR_6 = ( ( VAR_5 . METHOD_4 ( ) ) - ( VAR_7 ) ) / INT_1 ; if ( VAR_6 < 0 ) { VAR_6 = 0 ; } } VAR_1 . METHOD_5 ( VAR_6 ) ; } } 
public static java.lang.String toString ( TYPE_1 VAR_1 ) { java.lang.StringBuilder VAR_2 = new java.lang.StringBuilder ( ) ; VAR_2 . append ( STRING_1 ) ; for ( int i = 0 ; i < 5 ; ++ i ) { if ( i > 0 ) { VAR_2 . append ( STRING_2 ) ; } VAR_2 . append ( TYPE_2 . toString ( VAR_1 . s [ i ] ) ) ; } VAR_2 . append ( STRING_3 ) ; return VAR_2 . toString ( ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( new TYPE_4 ( STRING_1 ) , new TYPE_4 ( STRING_2 , 16 ) , new TYPE_4 ( STRING_3 , 16 ) ) ; return new TYPE_1 ( VAR_1 , VAR_1 . METHOD_2 ( TYPE_5 . METHOD_3 ( STRING_4 ) ) , new TYPE_4 ( STRING_5 , 16 ) , TYPE_4 . METHOD_4 ( 1 ) , TYPE_5 . METHOD_3 ( STRING_6 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; if ( ( ( VAR_2 ) & ( VAR_3 ) ) == 0 ) { throw new TYPE_2 ( STRING_2 ) ; } mRS . METHOD_3 ( ) ; mRS . METHOD_4 ( METHOD_5 ( mRS ) ) ; TYPE_1 . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertNotNull ( VAR_1 class . METHOD_2 ( VAR_2 . String class , VAR_3 class , int . class , int . class , VAR_4 class , VAR_5 class ) ) ; assertNotNull ( VAR_1 class . METHOD_2 ( VAR_2 . String class , VAR_3 class , int . class , int . class , VAR_6 class , VAR_4 class , VAR_5 class ) ) ; assertEquals ( VAR_7 , INT_1 ) ; assertEquals ( VAR_8 , 2 ) ; assertEquals ( VAR_9 , FLOAT_1 ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } return new TYPE_3 ( VAR_2 , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) , offset , VAR_3 ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) >= ( VAR_3 ) ) { try { VAR_4 . METHOD_2 ( VAR_5 ) ; } catch ( TYPE_2 ex ) { android.util.Log.e ( TYPE_3 . TAG , STRING_1 ) ; } return true ; } ( VAR_2 ) ++ ; return false ; } 
public void METHOD_1 ( ) throws java.io.IOException { if ( VAR_1 ) { return ; } VAR_1 = true ; try { VAR_2 = VAR_3 . METHOD_2 ( ) ; } catch ( TYPE_1 | TYPE_2 e ) { VAR_2 = null ; } try { METHOD_3 ( ) ; } catch ( java.io.IOException VAR_4 ) { } out . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_2 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_3 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_2 . METHOD_4 ( ( VAR_3 - VAR_2 ) ) ) <= 10 ) ) ; } 
public void METHOD_1 ( ) { assertTrue ( VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( METHOD_4 ( STRING_1 , VAR_2 ) , VAR_2 ) ) ; assertFalse ( VAR_1 . METHOD_2 ( STRING_1 , VAR_4 ) ) ; assertEquals ( VAR_5 , VAR_1 . METHOD_3 ( METHOD_4 ( STRING_1 , VAR_4 ) , VAR_4 ) ) ; assertFalse ( VAR_1 . METHOD_2 ( STRING_1 , VAR_6 ) ) ; assertEquals ( VAR_5 , VAR_1 . METHOD_3 ( METHOD_4 ( STRING_1 , VAR_6 ) , VAR_6 ) ) ; } 
public void run ( ) { VAR_1 . METHOD_1 ( VAR_2 ) ; TYPE_1 . d ( VAR_3 . TAG , ( ( ( ( ( ( ( STRING_1 + ( VAR_2 [ 0 ] ) ) + STRING_2 ) + ( VAR_2 [ 1 ] ) ) + STRING_3 ) + ( VAR_1 . METHOD_2 ( ) ) ) + STRING_4 ) + ( METHOD_3 ( ) ) ) ) ; VAR_1 . METHOD_4 ( ) ; } 
public static void METHOD_1 ( java.io.File [ ] VAR_1 , java.io.File [ ] VAR_2 , java.io.File VAR_3 , boolean VAR_4 , TYPE_1 [ ] VAR_5 ) throws java.lang.Exception { TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , false , FLOAT_1 , ( ( TYPE_3 ) ( null ) ) , VAR_5 ) ; } 
public static void METHOD_1 ( TYPE_1 context , int version ) { if ( TYPE_2 . METHOD_2 ( context ) ) { TYPE_2 . METHOD_3 ( context , VAR_1 , version ) ; } else { TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , version ) . METHOD_7 ( ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.String value ) { TYPE_2 m = TYPE_3 . METHOD_2 ( value ) ; if ( m . METHOD_3 ( ) ) { return new TYPE_1 ( m . METHOD_4 ( 2 ) , m . METHOD_4 ( 1 ) , m . METHOD_4 ( 3 ) ) ; } return null ; } 
private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 , TYPE_2 < TYPE_3 > VAR_4 ) { TYPE_4 VAR_5 ; TYPE_1 VAR_6 ; VAR_5 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; TYPE_2 < TYPE_3 > VAR_7 = VAR_4 . METHOD_3 ( ) ; VAR_7 . METHOD_4 ( VAR_8 ) ; TYPE_6 . METHOD_5 ( VAR_5 , VAR_7 ) ; VAR_6 = TYPE_7 . METHOD_6 ( VAR_5 , true ) ; return VAR_6 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String url ) { if ( ! ( VAR_2 ) ) { return ; } if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( url , ( ( TYPE_3 . METHOD_4 ( ) ) - ( VAR_3 ) ) ) ; } METHOD_5 ( VAR_1 , url ) ; VAR_4 . METHOD_1 ( this ) ; } 
public boolean METHOD_1 ( int start ) { if ( ( start < 0 ) || ( start > ( input . length ( ) ) ) ) { throw new TYPE_1 ( ( ( ( STRING_1 + start ) + STRING_2 ) + ( input . length ( ) ) ) ) ; } synchronized ( this ) { VAR_1 = TYPE_2 . METHOD_2 ( address , start , VAR_2 ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 , STRING_2 , STRING_3 ) ) ) ) ; java.lang.String text = STRING_4 ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( text ) ; VAR_2 . METHOD_4 ( 1 ) ; assertEquals ( 1 , VAR_2 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( new TYPE_5 ( STRING_5 ) ) ; VAR_2 . METHOD_4 ( 1 ) ; assertEquals ( 0 , VAR_2 . METHOD_5 ( ) ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , long start , long VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 , long VAR_6 , int VAR_7 ) { final TYPE_2 entry = VAR_1 . METHOD_2 ( start , VAR_2 , null ) ; assertEquals ( STRING_1 , VAR_3 , VAR_8 ) ; assertEquals ( STRING_2 , VAR_4 , VAR_9 ) ; assertEquals ( STRING_3 , VAR_5 , VAR_10 ) ; assertEquals ( STRING_4 , VAR_6 , VAR_11 ) ; assertEquals ( STRING_5 , VAR_7 , VAR_12 ) ; } 
static int METHOD_1 ( int VAR_1 ) { int VAR_2 = ( VAR_3 ) - ( VAR_4 ) ; int VAR_5 = ( VAR_6 ) - ( VAR_7 ) ; int VAR_8 = ( VAR_5 * ( VAR_1 - ( VAR_4 ) ) ) / VAR_2 ; int VAR_9 = ( VAR_7 ) + VAR_8 ; android.util.Log.d ( VAR_10 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_9 ) ) ; return VAR_9 ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 test , java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.StringBuilder path = new java.lang.StringBuilder ( STRING_1 ) ; path . append ( VAR_2 ) ; path . append ( test . METHOD_2 ( ) . getName ( ) . METHOD_3 ( CHAR_1 , VAR_2 ) ) ; path . append ( VAR_1 ) ; java.lang.String VAR_3 = path . toString ( ) ; TYPE_3 in = VAR_4 class . METHOD_4 ( VAR_3 ) ; assertNotNull ( ( STRING_2 + path ) , in ) ; return TYPE_4 . METHOD_5 ( in ) ; } 
public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , ( ( VAR_1 ) + STRING_10 ) ) ; provider . METHOD_2 ( STRING_11 , STRING_8 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public boolean METHOD_1 ( ) { int n = VAR_1 . length ; if ( n == 0 ) { return true ; } for ( int i = 0 ; i < n ; i ++ ) { if ( ( VAR_1 [ i ] . VAR_2 . length ) != 0 ) { return false ; } } return true ; } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 uri , int userId ) { if ( ( VAR_2 ) == null ) { synchronized ( VAR_3 ) { if ( ( VAR_4 ) == null ) { return ; } } METHOD_2 ( VAR_1 , uri , userId ) ; } else { VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 , uri , userId ) ) ; } } 
public boolean METHOD_1 ( ) { android.util.Log.v ( VAR_1 . TAG , STRING_1 ) ; boolean result = false ; final TYPE_1 service = VAR_2 ; if ( service != null ) { try { result = service . METHOD_1 ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } return result ; } 
public void run ( ) { while ( true ) { java.lang.Runnable r = null ; synchronized ( VAR_1 ) { if ( ( VAR_1 . size ( ) ) == 0 ) { try { VAR_1 . METHOD_1 ( ) ; } catch ( TYPE_1 ex ) { } } if ( ( VAR_1 . size ( ) ) > 0 ) { r = VAR_1 . METHOD_2 ( 0 ) ; } } if ( r != null ) { r . run ( ) ; } } } 
static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return false ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return false ; } return VAR_6 . equals ( VAR_7 ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { assert METHOD_2 ( ) ; java.io.File VAR_2 = METHOD_3 ( ) ; if ( VAR_2 . METHOD_4 ( ) ) { VAR_1 = TYPE_2 . METHOD_5 ( VAR_2 ) ; } else { VAR_3 . METHOD_6 ( this , VAR_4 , ( STRING_1 + ( VAR_4 . METHOD_7 ( ) ) ) ) ; return null ; } } return VAR_1 ; } 
public java.util.Set < java.lang.String > METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) { TYPE_1 < java.lang.String > VAR_2 = new TYPE_1 < java.lang.String > ( ) ; if ( METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( VAR_3 ) ; } VAR_2 . METHOD_4 ( super . METHOD_1 ( VAR_1 ) ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . METHOD_2 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_1 e ) { } VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_2 ) ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_4 ( ) ) ; VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_3 ) ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { boolean result = false ; if ( VAR_1 ) { android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ; } if ( ( ( TYPE_1 . METHOD_2 ( ) ) != null ) && ( TYPE_1 . METHOD_2 ( ) . equals ( device ) ) ) { switch ( VAR_2 ) { case VAR_3 : METHOD_3 ( ( - 1 ) ) ; result = true ; break ; default : break ; } } return result ; } 
public void METHOD_1 ( java.lang.String [ ] VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new TYPE_1 [ ] { new TYPE_2 ( STRING_1 , session . METHOD_2 ( ) , null ) } ; java.util.List < java.lang.String > VAR_3 = session . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_4 = VAR_3 . METHOD_5 ( new java.lang.String [ VAR_3 . size ( ) ] ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_2 t = VAR_1 ; for ( int i = 0 ; i < ( ( VAR_1 . METHOD_2 ( ) ) - 1 ) ; i ++ ) { t = t . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; } return t . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( 0 , VAR_1 ) ; assertEquals ( TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) , VAR_2 . METHOD_5 ( ) ) ; TYPE_2 s = new TYPE_2 ( 0 ) ; assertTrue ( ( STRING_1 + ( s . METHOD_6 ( ) ) ) , ( ( s . METHOD_5 ( ) ) instanceof TYPE_3 ) ) ; s . METHOD_7 ( ) ; } 
private void METHOD_1 ( ) throws java.io.IOException { TYPE_1 in = VAR_1 ; int VAR_2 = in . METHOD_2 ( ) ; long id = METHOD_3 ( ) ; int VAR_3 = in . METHOD_2 ( ) ; java.lang.String name = VAR_4 . get ( METHOD_3 ( ) ) ; VAR_5 . METHOD_4 ( id , name ) ; } 
public boolean METHOD_1 ( ) { boolean result = false ; TYPE_1 VAR_1 ; synchronized ( this ) { VAR_2 = false ; VAR_1 = VAR_3 ; } if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } synchronized ( this ) { VAR_3 = null ; } result = true ; } else { result = METHOD_4 ( ) ; } VAR_4 = - 1 ; VAR_5 = - 1 ; return result ; } 
public final TYPE_1 METHOD_1 ( int i , double x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_2 , VAR_3 ) , new TYPE_3 ( STRING_3 ) ) ; java.lang.Object [ ] VAR_4 = VAR_2 . METHOD_4 ( ) ; for ( int i = 0 ; i < ( VAR_4 . length ) ; i ++ ) { VAR_1 . METHOD_5 ( TYPE_4 . text ( STRING_4 , i ) , TYPE_5 . METHOD_6 ( VAR_4 [ i ] ) ) ; } VAR_1 . METHOD_7 ( ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; s . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; } 
public void METHOD_1 ( TYPE_1 parent ) { VAR_1 = new TYPE_2 ( parent , VAR_2 ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( ) { public void METHOD_3 ( java.lang.Throwable e ) { TYPE_4 . log ( e , null ) ; } } ) ; VAR_1 . METHOD_4 ( TYPE_5 . METHOD_5 ( STRING_1 , STRING_2 ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return ; } VAR_5 [ 0 ] = 1 ; VAR_5 [ 1 ] = VAR_2 ; VAR_5 [ 2 ] = - 0 ; VAR_5 [ 3 ] = VAR_3 ; VAR_5 [ 4 ] = 1 ; VAR_5 [ 5 ] = 0 ; VAR_5 [ 6 ] = 0 ; VAR_5 [ 7 ] = 0 ; VAR_5 [ 8 ] = 1 ; } 
public static void METHOD_1 ( java.io.File VAR_1 , TYPE_1 location ) throws TYPE_2 , TYPE_3 { assert VAR_1 != null ; if ( VAR_1 . METHOD_2 ( ) ) { throw new TYPE_3 ( location ) ; } if ( VAR_1 . METHOD_3 ( ) ) { VAR_2 . log ( VAR_3 , STRING_1 , new java.lang.Object [ ] { location . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) } ) ; } else { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( location ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_2 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; } 
public static int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; assert ( VAR_3 ) >= 0 : ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_1 . METHOD_3 ( ) ) ; return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { return ; } boolean VAR_3 = VAR_4 . METHOD_3 ( ) ; try { assertTrue ( VAR_4 . METHOD_4 ( true ) ) ; METHOD_5 ( VAR_2 ) ; } finally { if ( ! VAR_3 ) { VAR_4 . METHOD_4 ( false ) ; } } } 
static TYPE_1 METHOD_1 ( TYPE_2 node , java.lang.String VAR_1 ) { TYPE_3 type = TYPE_4 . METHOD_2 ( node , null ) ; java.lang.String name = TYPE_4 . getName ( node ) ; if ( name != null ) { if ( type != null ) { return new TYPE_1 ( name , type , VAR_1 , node ) ; } } return null ; } 
public TYPE_1 . File call ( ) throws java.lang.Exception { final TYPE_2 info = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.String path = ( info == null ) ? null : info . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; if ( path != null ) { TYPE_1 . File VAR_3 = new TYPE_1 . File ( path ) ; return VAR_3 . METHOD_6 ( ) ? VAR_3 : null ; } else { return null ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 server , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = STRING_1 ; TYPE_3 VAR_5 = TYPE_1 . METHOD_2 ( VAR_4 , VAR_2 , VAR_6 , VAR_7 ) ; TYPE_3 VAR_8 = TYPE_1 . METHOD_2 ( VAR_4 , VAR_3 , VAR_9 , VAR_10 ) ; return TYPE_1 . METHOD_1 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_6 [ 0 ] , VAR_9 [ 0 ] , VAR_7 [ 0 ] , VAR_10 [ 0 ] , VAR_5 , VAR_8 ) ; } 
private synchronized void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_3 = VAR_1 ; VAR_4 = VAR_2 ; if ( VAR_5 ) android.util.Log.v ( VAR_6 . TAG , ( ( ( ( ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + ( VAR_4 ) ) + STRING_2 ) + VAR_2 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 is = new TYPE_2 ( new byte [ 10 ] ) ; TYPE_3 VAR_1 = new TYPE_3 ( is ) ; VAR_1 . METHOD_2 ( 0 ) ; VAR_1 . METHOD_2 ( ( - 1 ) ) ; VAR_1 . METHOD_2 ( INT_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; assertTrue ( ( ( TYPE_1 . METHOD_2 ( s ) ) != 0 ) ) ; TYPE_1 . METHOD_5 ( s ) ; TYPE_1 . METHOD_6 ( c ) ; TYPE_2 . METHOD_7 ( ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final java.lang.String VAR_3 = ( v == null ) ? ( ( java.lang.String ) ( m . METHOD_2 ( ) ) ) : ( ( java.lang.String ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( VAR_3 . equals ( value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , float [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( null , null ) ; final TYPE_3 VAR_3 ; try { VAR_3 = VAR_1 . METHOD_3 ( VAR_2 ) ; } catch ( java.lang.NullPointerException e ) { return ; } catch ( TYPE_4 e ) { return ; } TYPE_5 VAR_4 = TYPE_5 . METHOD_2 ( STRING_2 ) ; try { VAR_4 . METHOD_4 ( VAR_3 ) ; fail ( STRING_3 ) ; } catch ( TYPE_6 e ) { } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( VAR_2 ) . build ( ) ; final TYPE_3 VAR_3 = new TYPE_3 ( ) ; final int VAR_4 = INT_1 ; VAR_5 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_6 = new TYPE_4 ( VAR_7 ) ; VAR_6 . METHOD_4 ( false ) ; VAR_3 . METHOD_5 ( VAR_6 , false , VAR_4 ) ; VAR_3 . METHOD_6 ( ) ; } 
boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_3 ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_3 = VAR_5 . equals ( VAR_1 ) ; } if ( ( VAR_6 . equals ( VAR_1 ) ) && ( VAR_2 == ( VAR_3 ) ) ) { return false ; } VAR_7 . METHOD_1 ( VAR_1 ) ; VAR_8 . METHOD_1 ( VAR_1 ) ; VAR_6 . set ( VAR_1 ) ; return true ; } 
public static TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { TYPE_2 context = TYPE_3 . METHOD_2 ( ) ; return new TYPE_1 ( TYPE_4 . METHOD_3 ( VAR_1 ) , TYPE_4 . METHOD_4 ( context , VAR_1 ) , TYPE_4 . METHOD_5 ( context , VAR_1 ) , TYPE_4 . METHOD_6 ( VAR_1 , VAR_2 ) , TYPE_4 . METHOD_7 ( VAR_1 ) ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { if ( VAR_1 ) { if ( VAR_2 ) { assertTrue ( STRING_1 , METHOD_2 ( ( ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ) , VAR_5 ) ) ; } assertTrue ( STRING_3 , METHOD_3 ( STRING_4 , VAR_5 ) ) ; METHOD_4 ( ) ; } super . METHOD_1 ( ) ; } 
void METHOD_1 ( java.lang.String name ) throws TYPE_1 { METHOD_2 ( ) ; for ( TYPE_2 VAR_1 : VAR_2 ) { try { TYPE_3 VAR_3 = VAR_1 . METHOD_3 ( name ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; } catch ( TYPE_4 e ) { } catch ( TYPE_5 e ) { } } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Exception e ) { android.util.Log.e ( VAR_2 . TAG , ( ( STRING_1 + ( this . METHOD_2 ( ) . METHOD_3 ( ) ) ) + ( VAR_1 == null ? STRING_2 : STRING_3 + VAR_1 ) ) , e ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { long VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; assertEquals ( 0 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ; long VAR_2 = TYPE_1 . METHOD_2 ( STRING_2 ) ; assertEquals ( 16 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , null , VAR_1 , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; TYPE_2 call = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ; assert call . METHOD_8 ( ) ; assertEquals ( VAR_2 , call . METHOD_9 ( ) ) ; call . METHOD_10 ( VAR_4 . METHOD_11 ( ) ) ; assert call . METHOD_8 ( ) ; assertEquals ( VAR_2 , call . METHOD_9 ( ) ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) == null ) { return VAR_3 ; } } for ( TYPE_2 VAR_4 : VAR_2 . values ( ) ) { assert METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; } assert ( VAR_2 ) != null ; return VAR_2 . values ( ) ; } 
static void METHOD_1 ( byte [ ] input , char [ ] VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( input ) ; TYPE_3 VAR_3 ; VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_3 = VAR_4 . METHOD_1 ( VAR_2 ) ; VAR_3 . METHOD_4 ( ) ; TYPE_4 . METHOD_5 ( STRING_1 , VAR_1 , VAR_3 ) ; } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , byte [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String address , TYPE_1 VAR_1 ) { if ( ( ! ( VAR_1 instanceof TYPE_2 ) ) || ( ( address . METHOD_2 ( CHAR_1 ) ) != ( - 1 ) ) ) { return VAR_1 ; } return VAR_2 . METHOD_3 ( VAR_3 , address ) ; } 
public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 0 , 0 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) , TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_2 ) ; ++ i ) { java.lang.Integer VAR_3 = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; } assertEquals ( VAR_4 , VAR_1 . size ( ) ) ; } 
public void METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 ) { java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_4 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; } VAR_5 . METHOD_4 ( VAR_2 ) ; } 
synchronized void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 ) == null ) { return ; } synchronized ( VAR_4 ) { if ( ( VAR_4 . METHOD_2 ( VAR_1 ) ) == false ) { return ; } } VAR_1 . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_5 , VAR_1 ) ; METHOD_5 ( ) ; } 
protected int METHOD_1 ( ) { int VAR_1 = super . METHOD_1 ( ) ; VAR_1 |= VAR_2 ; if ( ! ( METHOD_2 ( ) ) ) { VAR_1 |= VAR_3 ; if ( ( ( METHOD_3 ( ) ) == ( VAR_4 ) ) || ( ( METHOD_3 ( ) ) == ( VAR_5 ) ) ) { VAR_1 |= VAR_6 ; } } if ( ( ( METHOD_4 ( ) ) & ( VAR_7 ) ) != 0 ) { VAR_1 |= VAR_8 ; } return VAR_1 ; } 
public TYPE_1 run ( ) { java.lang.Class [ ] VAR_1 = new java.lang.Class [ 2 ] ; VAR_1 [ 0 ] = VAR_2 class ; VAR_1 [ 1 ] = VAR_3 ; java.lang.Class VAR_4 = VAR_5 . METHOD_1 ( ) ; while ( true ) { try { VAR_4 . METHOD_2 ( STRING_1 , VAR_1 ) ; return TYPE_1 . FALSE ; } catch ( TYPE_2 e ) { VAR_4 = VAR_4 . METHOD_3 ( ) ; if ( VAR_4 . equals ( VAR_6 class ) ) { return TYPE_1 . TRUE ; } } } } 
private TYPE_1 METHOD_1 ( TYPE_2 expected , TYPE_1 VAR_1 ) { if ( ! ( expected . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( expected ) ) ; return new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_2 , VAR_1 ) ; } else { return VAR_1 ; } } 
public static void METHOD_1 ( java.io.File VAR_1 , TYPE_1 location ) throws TYPE_2 , TYPE_3 { try { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . log ( VAR_3 , STRING_1 , new java.lang.Object [ ] { location . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) } ) ; return ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( location ) ; } throw new TYPE_3 ( location ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String path ) { TYPE_1 VAR_1 = VAR_2 . get ( path ) ; if ( VAR_1 == null ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( path ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_3 ( ) ; } VAR_2 . METHOD_4 ( path , VAR_1 ) ; } return VAR_1 ; } 
public final TYPE_1 METHOD_1 ( int i , float x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_2 VAR_1 = TYPE_2 . METHOD_4 ( 100 ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_4 ( INT_1 ) ; try { VAR_3 . METHOD_5 ( new TYPE_2 [ ] { VAR_1 } , VAR_2 ) ; VAR_4 . METHOD_5 ( new TYPE_2 [ ] { VAR_1 } , VAR_2 ) ; } catch ( TYPE_3 ex ) { } } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int size = VAR_1 . size ( ) ; if ( size == 0 ) { return STRING_1 ; } TYPE_2 sb = new TYPE_2 ( 100 ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_2 ) ; } sb.append ( VAR_1 . METHOD_2 ( i ) . METHOD_1 ( ) ) ; } return sb . toString ( ) ; } 
public java.io.File call ( ) throws java.lang.Exception { final TYPE_1 info = VAR_1 . METHOD_1 ( ) ; java.lang.String path = ( info == null ? null : info . METHOD_2 ( ) ) . METHOD_3 ( VAR_2 ) ; if ( path != null ) { return new java.io.File ( path ) ; } return null ; } 
void METHOD_1 ( final java.lang.String packageName , final int userId ) { if ( VAR_1 ) { TYPE_1 . d ( VAR_2 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + userId ) ) ; } final TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( packageName , userId ) ; if ( METHOD_3 ( packageName , userId , VAR_3 ) ) { VAR_5 . METHOD_4 ( packageName , userId ) ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { final TYPE_2 VAR_3 = new TYPE_2 ( ) ; final TYPE_3 VAR_4 = new TYPE_3 ( VAR_1 . METHOD_2 ( ) ) ; VAR_4 . METHOD_3 ( ( ) - > VAR_3 . METHOD_4 ( ) ) ; if ( ! ( VAR_3 . METHOD_5 ( VAR_2 ) ) ) { fail ( ( ( ( ( STRING_1 + ( getName ( ) ) ) + STRING_2 ) + VAR_2 ) + STRING_3 ) ) ; } } 
protected < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 , TYPE_1 data ) throws java.lang.Exception { TYPE_4 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_5 < TYPE_6 > VAR_4 = VAR_5 . get ( ) ; VAR_4 . METHOD_4 ( new TYPE_6 ( VAR_6 , VAR_2 ) ) ; TYPE_7 event = METHOD_5 ( VAR_1 , VAR_2 ) ; try { VAR_1 . run ( data ) ; } finally { event . METHOD_6 ( ) ; } VAR_4 . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_5 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_7 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_5 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_4 ( ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( ) ) + 2 ) , ( ( VAR_2 . METHOD_4 ( ) ) + 2 ) ) ; TYPE_3 VAR_3 = VAR_1 . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( VAR_2 , 1 , 1 , null ) ; VAR_3 . METHOD_7 ( ) ; VAR_2 = VAR_1 ; VAR_4 . METHOD_8 ( VAR_2 ) ; name = ( name . METHOD_9 ( 0 , name . METHOD_10 ( CHAR_1 ) ) ) + STRING_1 ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , float value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) ; assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; METHOD_5 ( VAR_1 ) ; TYPE_1 VAR_5 = TYPE_2 . METHOD_6 ( VAR_6 , 1 ) . METHOD_7 ( null ) . METHOD_8 ( ) ; assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) ; METHOD_5 ( VAR_1 ) ; METHOD_9 ( ) ; } 
static void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 ) ; ++ i ) { if ( ! ( VAR_2 [ i ] ) ) { VAR_3 . println ( ( ( STRING_1 + i ) + STRING_2 ) ) ; } } } 
public void METHOD_1 ( ) throws java.io.IOException { if ( false ) { java.io.File f = TYPE_1 . METHOD_2 ( INT_1 , ( ( 3 * INT_1 ) * INT_1 ) ) ; TYPE_2 VAR_1 = new TYPE_2 ( f ) ; int VAR_2 = 0 ; for ( TYPE_3 < ? extends TYPE_4 > e = VAR_1 . METHOD_3 ( ) ; e . METHOD_4 ( ) ; ) { TYPE_4 VAR_3 = e . METHOD_5 ( ) ; ++ VAR_2 ; } assertEquals ( INT_1 , VAR_2 ) ; VAR_1 . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_1 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , 1 , STRING_1 ) ; assertEquals ( match , result ) ; } 
public TYPE_1 METHOD_1 ( int i , char x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 ) { TYPE_2 . METHOD_2 ( VAR_1 , VAR_8 , VAR_9 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; } 
public int METHOD_1 ( int VAR_1 ) { try { if ( ( VAR_2 ) != null ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; } } catch ( TYPE_1 e ) { } METHOD_2 ( ) ; android.util.Log.d ( TYPE_2 . TAG , ( STRING_1 + VAR_1 ) ) ; synchronized ( VAR_3 ) { if ( METHOD_3 ( ) ) { return TYPE_2 . METHOD_4 ( VAR_4 , VAR_1 ) ; } else { return - 1 ; } } } 
static void METHOD_1 ( int VAR_1 , char [ ] text , int start , int count , int VAR_2 , int VAR_3 , float x , float y , int flags , int VAR_4 ) { TYPE_1 . METHOD_2 ( VAR_1 , text , start , count , x , y , flags , VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 device , java.io.File VAR_1 ) throws TYPE_2 { java.lang.String [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 . length ) != 1 ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ) ; } VAR_3 = new java.io.File ( VAR_1 , VAR_2 [ 0 ] ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.io.File VAR_2 = TYPE_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_1 , VAR_3 , true ) ; } 
protected TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 e ) { TYPE_1 f = VAR_2 . get ( VAR_1 ) ; if ( f != null ) { return f ; } int id = mRS . METHOD_2 ( METHOD_3 ( mRS ) , VAR_1 ) ; if ( id == 0 ) { throw new TYPE_3 ( STRING_1 ) ; } f = new TYPE_1 ( id , mRS , this , VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 , f ) ; return f ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( event ) ; if ( TYPE_3 . equals ( event . METHOD_4 ( ) ) ) { TYPE_4 . METHOD_5 ( TYPE_5 . METHOD_6 ( ) , true ) ; TYPE_6 . METHOD_5 ( TYPE_5 . METHOD_6 ( ) , true ) ; if ( METHOD_7 ( ) ) { METHOD_8 ( ) ; } } } 
private static void METHOD_1 ( java.util.Set < java.lang.String > expected , java.lang.String [ ] VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_1 . METHOD_2 ( expected , VAR_1 ) ; assertEquals ( STRING_1 , VAR_3 , VAR_2 ) ; assertEquals ( expected . size ( ) , VAR_1 . length ) ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , java.util.List < TYPE_2 > VAR_3 , TYPE_3 VAR_4 , java.util.List VAR_5 , java.lang.String VAR_6 ) { TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } 
private void METHOD_1 ( TYPE_1 locale , TYPE_2 VAR_1 ) { int [ ] VAR_2 = TYPE_3 . METHOD_2 ( locale ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; int i ; for ( i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_3 . METHOD_3 ( VAR_4 , VAR_2 [ i ] ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 context , int subId ) { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( context ) ; java.lang.String packageName ; if ( VAR_1 == null ) { packageName = VAR_2 ; } else { packageName = VAR_1 . METHOD_3 ( ) ; } return TYPE_5 . METHOD_4 ( context , packageName , subId ) ; } 
static short METHOD_1 ( java.lang.String VAR_1 ) { int index = 0 ; if ( VAR_1 == null ) { return 0 ; } while ( ( TYPE_1 [ index ] . VAR_1 ) != null ) { if ( ( TYPE_1 [ index ] . VAR_1 ) == VAR_1 ) { return TYPE_1 [ index ] . VAR_2 ; } else if ( ( TYPE_1 [ index ] . VAR_1 . METHOD_2 ( VAR_1 ) ) > 0 ) { break ; } index ++ ; } return VAR_3 ; } 
private void METHOD_1 ( TYPE_1 < ? > VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = METHOD_2 ( ) ; do { VAR_1 . METHOD_3 ( ) ; if ( VAR_1 == ( VAR_3 ) ) { throw new TYPE_2 ( ) ; } try { VAR_2 . invoke ( VAR_1 ) ; } catch ( java.lang.Throwable t ) { VAR_4 . log ( VAR_5 , STRING_1 , t ) ; } } while ( ( VAR_1 = VAR_6 . METHOD_4 ( ) ) != null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ( - 1 ) , 0 , null , null ) ; VAR_3 . METHOD_5 ( ) ; METHOD_6 ( VAR_4 , ( ( VAR_5 ) | ( VAR_6 ) ) , VAR_7 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( STRING_3 ) ) ; server . METHOD_5 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_6 ( STRING_4 ) . METHOD_7 ( ) ) ) ; VAR_1 . METHOD_8 ( ) ; assertEquals ( INT_1 , VAR_1 . METHOD_9 ( ) ) ; assertEquals ( INT_1 , VAR_1 . METHOD_10 ( STRING_1 , ( - 1 ) ) ) ; } 
public void METHOD_1 ( TYPE_1 out , TYPE_2 VAR_1 , TYPE_3 VAR_2 , boolean VAR_3 ) throws java.io.IOException { boolean VAR_4 = VAR_2 != null ; TYPE_4 result = METHOD_2 ( VAR_4 , VAR_3 , VAR_1 ) ; if ( out != null ) { out . METHOD_3 ( result . METHOD_4 ( ) ) ; } if ( VAR_4 ) { result . METHOD_5 ( VAR_2 ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.Object value ) { if ( value instanceof java.lang.Integer ) { return new TYPE_2 ( ( ( java.lang.Integer ) ( value ) ) , null ) ; } else if ( value instanceof java.lang.String ) { return new TYPE_2 ( 1 , ( ( java.lang.String ) ( value ) ) ) ; } return null ; } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int VAR_2 = INT_1 ; if ( ( ( VAR_3 ) >= INT_2 ) && ( ( VAR_3 ) <= INT_3 ) ) { int VAR_4 = - ( VAR_3 ) ; VAR_2 = VAR_4 + INT_3 ; } return new TYPE_1 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_2 ) ; } 
public static final TYPE_1 METHOD_1 ( short VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return new TYPE_2 ( ) ; case VAR_3 : return new TYPE_3 ( ) ; case VAR_4 : return new TYPE_4 ( ) ; case VAR_5 : return new TYPE_5 ( ) ; case VAR_6 : return new TYPE_6 ( ) ; case VAR_7 : return new TYPE_7 ( ) ; default : throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) ; VAR_3 = null ; } super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; if ( ( VAR_1 ) == ( VAR_2 ) ) { METHOD_4 ( true ) ; } TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 , VAR_5 , VAR_6 ) ; METHOD_5 ( VAR_3 ) ; METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { target . METHOD_2 ( ) ; assertTrue ( target . METHOD_3 ( ) ) ; assertFalse ( target . METHOD_4 ( ) ) ; VAR_1 . METHOD_2 ( ) ; assertFalse ( VAR_1 . METHOD_3 ( ) ) ; try { target . METHOD_5 ( ) ; target . METHOD_6 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_1 e ) { } } 
private void METHOD_1 ( int state , android.bluetooth.BluetoothDevice device ) { switch ( state ) { case VAR_1 : if ( VAR_2 . equals ( device ) ) { METHOD_2 ( VAR_3 , device ) ; METHOD_3 ( VAR_2 , VAR_4 , VAR_5 ) ; VAR_2 = null ; transitionTo ( VAR_6 ) ; } else { android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + device ) ) ; } break ; default : android.util.Log.e ( VAR_7 . TAG , ( ( ( STRING_2 + device ) + STRING_3 ) + state ) ) ; break ; } } 
public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( java.lang.String VAR_1 , TYPE_4 [ ] VAR_2 , TYPE_5 VAR_3 ) throws TYPE_6 , java.io.IOException { if ( VAR_4 ) { java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } return TYPE_7 . METHOD_2 ( VAR_1 , false , VAR_3 , VAR_2 ) ; } 
public int METHOD_1 ( java.lang.Class < ? > VAR_1 , java.lang.Class < ? > VAR_2 ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; if ( VAR_1 == VAR_2 ) { return 0 ; } if ( VAR_1 . METHOD_4 ( VAR_2 ) ) { return 1 ; } if ( VAR_2 . METHOD_4 ( VAR_1 ) ) { return - 1 ; } return VAR_1 . getName ( ) . METHOD_5 ( VAR_2 . getName ( ) ) ; } 
private TYPE_1 METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { java.lang.String VAR_2 = VAR_3 ; TYPE_2 [ ] VAR_4 = METHOD_2 ( VAR_5 , VAR_1 ) ; TYPE_3 VAR_6 = new TYPE_3 ( VAR_2 , VAR_2 , VAR_3 , STRING_1 , null , null , VAR_4 , null , false ) ; return VAR_6 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 call = TYPE_2 . METHOD_2 ( VAR_1 class ) ; TYPE_2 . when ( call . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; TYPE_2 . when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( call ) ; TYPE_3 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; org.mockito.Mockito.verify ( call ) . METHOD_6 ( ) ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 , int w , int h , int [ ] data ) { mRS . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , w , h ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , ( ( data . length ) * 4 ) ) ; } 
public void METHOD_1 ( TYPE_1 key , TYPE_2 value ) { if ( key . METHOD_2 ( STRING_1 ) ) { } else if ( key . METHOD_2 ( STRING_2 ) ) { METHOD_3 ( VAR_1 , value , 0 ) ; } else { METHOD_3 ( TYPE_3 . METHOD_4 ( key ) , value , 0 ) ; } } 
public boolean METHOD_1 ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) { return true ; } if ( ! ( VAR_1 instanceof TYPE_1 ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( ( VAR_5 ) == ( VAR_6 ) ) ) && ( ( VAR_7 ) == ( VAR_8 ) ) ) && ( ( VAR_9 ) == ( VAR_10 ) ) ; } 
public void run ( ) { VAR_1 . METHOD_1 ( VAR_2 ) ; if ( METHOD_2 ( VAR_2 , true ) ) { METHOD_3 ( VAR_3 , VAR_2 ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_4 ( STRING_1 , VAR_2 ) ; } } } 
public void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { METHOD_2 ( ) ; int [ ] subId = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( ( subId == null ) || ( ( subId . length ) == 0 ) ) { return ; } final TYPE_1 VAR_4 = METHOD_4 ( subId [ 0 ] ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_5 ( VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( server . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( STRING_2 , STRING_3 ) ; VAR_1 . METHOD_5 ( STRING_2 , STRING_4 ) ; assertEquals ( STRING_4 , VAR_1 . METHOD_6 ( STRING_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 ) ; assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ; METHOD_4 ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( null , STRING_1 , VAR_3 . TAG , null , null , null , null , false ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( ) , org.mockito.Matchers . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) , org.mockito.Matchers . METHOD_8 ( VAR_5 class ) ) ; } 
void METHOD_1 ( int id ) { TYPE_1 [ ] t = TYPE_2 . values ( ) ; int [ ] VAR_1 = new int [ 1 ] ; VAR_1 [ 0 ] = id ; android.content.Intent VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_2 , true ) ; METHOD_4 ( VAR_2 , 0 ) ; } 
public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) { return ; } if ( ! ( VAR_1 . METHOD_4 ( ) ) ) { return ; } boolean VAR_2 = VAR_1 . METHOD_5 ( ) ; TYPE_2 callback = METHOD_6 ( ) ; assertFalse ( VAR_1 . METHOD_5 ( ) ) ; assertFalse ( VAR_1 . METHOD_7 ( true ) ) ; METHOD_8 ( callback , VAR_2 ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_5 ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 path ) { assert ! ( this . equals ( VAR_1 ) ) ; VAR_2 . METHOD_2 ( 0 , new TYPE_2 ( java.lang.String . METHOD_3 ( VAR_3 ) , VAR_3 ) ) ; VAR_2 . METHOD_4 ( 0 , path . METHOD_5 ( ) ) ; return this ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { METHOD_2 ( VAR_3 , VAR_4 ) ; } else if ( VAR_1 == ( VAR_5 ) ) { METHOD_2 ( VAR_6 , VAR_7 ) ; VAR_8 . METHOD_3 ( ) ; } else if ( VAR_1 == ( VAR_9 ) ) { METHOD_4 ( VAR_10 . METHOD_5 ( ) ) ; METHOD_2 ( VAR_11 , VAR_12 ) ; VAR_13 . METHOD_3 ( ) ; } } 
public static int METHOD_1 ( int VAR_1 , TYPE_1 status , int options ) throws TYPE_2 { TYPE_1 VAR_2 = new TYPE_1 ( status . value ) ; try { return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , options ) ; } finally { status . value = VAR_2 . value ; } } 
private synchronized void METHOD_1 ( TYPE_1 node , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = node . METHOD_2 ( VAR_3 class ) ; if ( VAR_2 == null ) { node . METHOD_3 ( new TYPE_3 ( VAR_1 ) ) ; } else { TYPE_2 VAR_4 = VAR_2 . METHOD_4 ( ) ; if ( VAR_4 != VAR_1 ) { VAR_2 . METHOD_5 ( VAR_5 ) ; } } } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = new TYPE_3 ( ) ; try { VAR_1 . METHOD_3 ( null ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } try { VAR_1 . METHOD_3 ( VAR_2 ) ; } catch ( java.lang.IllegalArgumentException expected ) { } VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_5 ( ) ; } 
public static void METHOD_1 ( java.lang.String [ ] VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 ) ; assertEquals ( VAR_3 , TYPE_2 . METHOD_3 ( VAR_1 ) ) ; if ( ! ( VAR_4 ) ) { java.util.List < java.lang.String > VAR_5 = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String VAR_6 : VAR_1 ) { if ( ! ( TYPE_1 . METHOD_4 ( VAR_6 ) ) ) { VAR_5 . METHOD_5 ( VAR_6 ) ; } } assertEquals ( VAR_7 , VAR_5 ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , null ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; assertEquals ( VAR_1 , VAR_5 . METHOD_5 ( ) ) ; assertEquals ( VAR_3 , VAR_5 . METHOD_6 ( ) ) ; } 
public static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 result = new TYPE_1 ( ) ; java.lang.String VAR_2 = java.lang.Integer . toString ( VAR_1 , 16 ) . METHOD_2 ( ) ; for ( int i = VAR_2 . length ( ) ; i < 4 ; ++ i ) { result . append ( CHAR_1 ) ; } return result + VAR_2 ; } 
public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( TYPE_4 < ? > VAR_1 ) { java.util.Map < TYPE_2 , TYPE_3 > result = TYPE_5 . METHOD_2 ( ) ; for ( java.lang.Object key : VAR_1 ) { if ( ! ( result . METHOD_3 ( key ) ) ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( key ) ) ; result . METHOD_4 ( VAR_2 , METHOD_5 ( key ) ) ; } } return TYPE_1 . METHOD_6 ( result ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( VAR_1 ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( new TYPE_2 [ ] { VAR_3 , VAR_4 } , VAR_5 ) ; VAR_6 = VAR_7 ; VAR_8 = true ; VAR_9 = TYPE_3 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; assertTrue ( VAR_10 ) ; assertTrue ( VAR_11 ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { android.util.Log.v ( VAR_1 . TAG , ( STRING_1 + device ) ) ; boolean result = false ; final TYPE_1 service = VAR_2 ; if ( service != null ) { try { result = service . METHOD_1 ( device ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } return result ; } 
public void METHOD_1 ( android.os.Message result ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( 20 , 0 , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , INT_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , true ) ; } METHOD_2 ( result , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( true ) ; TYPE_1 . METHOD_4 ( new java.lang.IllegalArgumentException ( STRING_1 ) ) . when ( VAR_1 ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_2 class ) ) ; assertFalse ( VAR_3 . METHOD_7 ( new TYPE_2 ( ) , false ) ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_8 ( 2 ) ) . METHOD_9 ( org.mockito.Matchers . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 action = METHOD_3 ( x . action ) ; TYPE_5 VAR_2 = METHOD_3 ( VAR_3 ) ; if ( action == null ) { action = new TYPE_6 ( info ) ; } METHOD_4 ( new TYPE_7 ( info , VAR_2 , action ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null ) { return true ; } TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 ) ) ; TYPE_2 VAR_4 = ( ( TYPE_2 ) ( VAR_2 ) ) ; if ( ( ( VAR_5 ) == ( VAR_6 ) ) && ( ( VAR_7 ) != ( VAR_6 ) ) ) { return true ; } else { return ( VAR_5 . METHOD_2 ( ) ) > ( VAR_7 . METHOD_2 ( ) ) ; } } 
public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new java.util.HashMap < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } java.util.HashMap < java.lang.Integer , TYPE_3 > m = new java.util.HashMap < > ( ) ; m . METHOD_4 ( 1 , FLOAT_1 ) ; try { TYPE_1 . METHOD_2 ( m ) . METHOD_3 ( 1 , FLOAT_1 ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } } 
protected java.lang.String METHOD_1 ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; int VAR_1 = values . size ( ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { sb.append ( STRING_1 ) ; sb.append ( i ) ; sb.append ( STRING_2 ) ; sb.append ( values . get ( i ) . METHOD_2 ( ) ) ; } return sb . toString ( ) ; } 
TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( ( VAR_3 != null ) && ( ( VAR_5 ) != null ) ) { return VAR_2 . get ( VAR_5 ) ; } } return null ; } 
public void METHOD_1 ( ) { int VAR_1 = 100 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { METHOD_2 ( ( ( ( STRING_1 + ( i + 1 ) ) + STRING_2 ) + VAR_1 ) , INT_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; METHOD_3 ( false ) ; METHOD_4 ( false ) ; METHOD_5 ( VAR_1 , true ) ; METHOD_6 ( false ) ; assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ; } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( 1 ) ; VAR_1 . METHOD_2 ( new java.lang.Object ( ) ) ; VAR_1 . METHOD_2 ( new java.lang.Object ( ) ) ; VAR_1 . METHOD_2 ( new java.lang.Object ( ) ) ; METHOD_3 ( ) ; } catch ( TYPE_2 VAR_2 ) { } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 ) { if ( VAR_8 class . METHOD_2 ( VAR_3 ) ) { return new TYPE_5 ( VAR_1 , VAR_7 , VAR_3 ) ; } else { return null ; } } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; java.util.List < TYPE_4 > VAR_2 = METHOD_3 ( info , VAR_3 , VAR_4 ) ; METHOD_4 ( info , x , x . METHOD_5 ( ) , VAR_2 , VAR_1 ) ; } catch ( java.lang.Throwable e ) { throw METHOD_6 ( x , e ) ; } } 
public void METHOD_1 ( ) { android.util.Log . i ( TYPE_1 . TAG , ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . VAR_2 ) ) ) ) ; VAR_3 = VAR_4 ; METHOD_4 ( VAR_5 ) ; METHOD_5 ( VAR_3 , VAR_6 ) ; METHOD_6 ( VAR_7 , VAR_8 ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { boolean result = false ; if ( VAR_1 ) android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ; if ( METHOD_2 ( ) . equals ( device ) ) { switch ( VAR_3 ) { case VAR_4 : METHOD_3 ( ( - 1 ) ) ; result = true ; break ; default : break ; } } return result ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 . METHOD_4 ( ) ) { VAR_2 = VAR_3 . METHOD_5 ( VAR_2 ) ; } TYPE_3 VAR_4 = new TYPE_4 ( VAR_5 , TYPE_5 . METHOD_6 ( VAR_1 ) , TYPE_6 . METHOD_7 ( VAR_2 ) , METHOD_8 ( ) ) ; METHOD_9 ( VAR_4 ) ; return false ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , byte value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , STRING_1 ) ; VAR_1 . METHOD_2 ( 0 ) ; assertEquals ( 0 , VAR_2 . length ( ) ) ; long VAR_3 = ( ( long ) ( VAR_4 ) ) + INT_1 ; VAR_1 . METHOD_2 ( VAR_3 ) ; assertEquals ( VAR_3 , VAR_2 . length ( ) ) ; } 
private void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.d ( TAG , STRING_1 ) ; METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { VAR_3 = new TYPE_1 ( VAR_2 ) ; VAR_3 . start ( ) ; } if ( ( VAR_4 ) != null ) { VAR_5 = new TYPE_1 ( VAR_4 ) ; VAR_5 . start ( ) ; } } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_2 ) ; ++ i ) { assertTrue ( VAR_1 . METHOD_2 ( new java.lang.Integer ( i ) ) ) ; } assertEquals ( 0 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( new java.lang.Integer ( VAR_2 ) ) ; METHOD_4 ( ) ; } catch ( TYPE_2 VAR_3 ) { } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . addFeature ( VAR_2 ) . addFeature ( VAR_3 ) . build ( ) ; TYPE_3 p = TYPE_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( p , 0 ) ; p . METHOD_4 ( 0 ) ; TYPE_1 result = TYPE_4 . METHOD_5 ( p ) ; p . METHOD_6 ( ) ; TYPE_5 . assertEquals ( VAR_1 , result ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; java.util.List < TYPE_2 > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) . get ( VAR_1 ) ; assertNotNull ( VAR_2 ) ; for ( TYPE_2 p : VAR_2 ) { assertTrue ( ( ( STRING_2 + p ) + STRING_3 ) , p . METHOD_3 ( ) ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 project , TYPE_6 VAR_3 , TYPE_7 VAR_4 ) { if ( ! ( TYPE_8 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return TYPE_9 . METHOD_4 ( ) ; } return VAR_5 < TYPE_2 > METHOD_5 ( new TYPE_10 ( project , VAR_1 , VAR_2 , VAR_3 ) ) ; } 
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( ) ; try { VAR_2 . METHOD_4 ( VAR_3 ) ; android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ; } catch ( TYPE_2 e ) { android.util.Log.e ( TYPE_1 . TAG , STRING_2 ) ; } VAR_2 = null ; VAR_4 = 0 ; VAR_5 = null ; VAR_6 = - 1 ; } } if ( ( VAR_7 ) != null ) { VAR_7 . METHOD_5 ( ) ; VAR_7 = null ; } } 
public TYPE_1 METHOD_1 ( TYPE_1 address , TYPE_2 context ) throws java.io.IOException { TYPE_3 listener = new TYPE_3 ( address , VAR_1 , VAR_2 , context ) ; if ( ( VAR_1 ) != null ) { listener . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( listener ) ; } return listener . METHOD_4 ( ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( VAR_2 , STRING_1 ) ; synchronized ( this ) { final int VAR_3 = VAR_4 . METHOD_3 ( ) ; final TYPE_2 VAR_5 = VAR_4 . METHOD_1 ( VAR_3 , VAR_1 ) ; if ( VAR_5 == null ) { return null ; } return VAR_6 ; } } 
private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . d ( this , STRING_1 , VAR_1 ) ; if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { METHOD_3 ( VAR_1 , STRING_2 ) . METHOD_4 ( ) ; METHOD_3 ( VAR_1 , STRING_2 ) . METHOD_5 ( ) ; } else if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { TYPE_1 . w ( this , STRING_3 ) ; } } 
public static void METHOD_1 ( boolean a , java.lang.Integer b ) { if ( a && ( ( b . METHOD_2 ( ) ) == INT_1 ) ) { return ; } java.lang.System.out.println ( ( ( ( STRING_1 + a ) + STRING_2 ) + b ) ) ; } 
public synchronized boolean METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( VAR_2 , STRING_1 ) ; if ( VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) { METHOD_4 ( STRING_2 ) ; return false ; } METHOD_4 ( ( STRING_3 + ( VAR_6 ) ) ) ; VAR_6 = VAR_1 ; android.os.Message m = VAR_7 . METHOD_5 ( VAR_8 ) ; VAR_7 . METHOD_6 ( m ) ; VAR_9 = TYPE_1 . METHOD_7 ( ) ; return true ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , boolean VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device , VAR_1 ) ; } 
static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , float VAR_3 , float VAR_4 , int VAR_5 ) { TYPE_2 VAR_6 = VAR_7 . METHOD_2 ( VAR_1 ) ; if ( VAR_6 == null ) { return ; } VAR_8 . append ( new TYPE_3 . Float ( VAR_9 , VAR_10 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , ( VAR_3 * 2 ) , ( VAR_4 * 2 ) ) , false ) ; } 
public boolean METHOD_1 ( java.lang.Object VAR_1 ) { boolean VAR_2 = false ; final TYPE_1 VAR_3 = this . VAR_3 ; VAR_3 . METHOD_2 ( ) ; try { int i = METHOD_3 ( VAR_1 ) ; if ( i != ( - 1 ) ) { METHOD_4 ( i ) ; VAR_2 = true ; } } finally { VAR_3 . METHOD_5 ( ) ; } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 res ) { if ( VAR_1 ) { if ( relaxed ) VAR_2 = new TYPE_2 ( mRS , res , VAR_3 ) ; else VAR_4 = new TYPE_3 ( mRS , res , VAR_5 ) ; } else if ( relaxed ) VAR_6 = new TYPE_4 ( mRS , res , VAR_7 ) ; else VAR_8 = new TYPE_5 ( mRS , res , VAR_9 ) ; METHOD_2 ( ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = METHOD_2 ( ) ; int VAR_2 = java.lang.Integer . METHOD_3 ( VAR_1 ) ; final TYPE_1 VAR_3 = METHOD_4 ( ) ; if ( VAR_3 == null ) { VAR_4 . println ( STRING_1 ) ; return ; } try { VAR_5 . METHOD_5 ( VAR_2 , VAR_3 ) ; } catch ( android.os.RemoteException e ) { } } 
private static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { java.util.List < java.io.File > VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , path ) ; TYPE_2 sb = new TYPE_2 ( ) ; for ( TYPE_3 < java.io.File > VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; ) { sb.append ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) ; if ( VAR_3 . METHOD_4 ( ) ) { sb.append ( VAR_4 ) ; } } return sb . toString ( ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 = method . METHOD_1 ( ) ; if ( ( ( method . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( ! ( VAR_2 . METHOD_4 ( this . METHOD_5 ( ) , method ) ) ) ) { return ; } session = VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( method ) ; VAR_3 . METHOD_4 ( method ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( STRING_1 , VAR_1 , VAR_3 ) ; TYPE_2 VAR_4 = VAR_5 ; VAR_4 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( new TYPE_3 ( TYPE_4 . METHOD_6 ( ) ) , VAR_7 ) ; METHOD_7 ( STRING_1 , VAR_8 . METHOD_2 ( ) , VAR_3 ) ; assertEquals ( VAR_9 , VAR_10 . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 callback ) { TYPE_2 . METHOD_2 ( mContext ) ; TYPE_3 VAR_1 = VAR_2 . METHOD_3 ( TYPE_4 . METHOD_4 ( ) ) ; if ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) && ( ! ( VAR_2 . METHOD_6 ( VAR_3 , VAR_1 . METHOD_7 ( ) ) ) ) ) { VAR_4 . METHOD_8 ( callback , TYPE_5 . METHOD_9 ( ) ) ; } else if ( VAR_5 ) { android.util.Log.d ( VAR_6 . TAG , STRING_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 TYPE_2 = this . METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( ) ) { return false ; } TYPE_1 TYPE_3 = this . METHOD_4 ( ) ; switch ( this . METHOD_5 ( ) ) { case VAR_1 : case VAR_2 : { return TYPE_3 . METHOD_6 ( TYPE_2 ) . METHOD_7 ( ) ; } default : { return TYPE_3 . METHOD_8 ( TYPE_2 ) . METHOD_7 ( ) ; } } } 
static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 ) { TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_5 VAR_2 = TYPE_1 . METHOD_5 ( ) ; do { VAR_2 . METHOD_6 ( TYPE_6 . METHOD_7 ( context , VAR_1 ) ) ; } while ( VAR_1 . METHOD_8 ( ) ) ; return VAR_2 . build ( ) ; } 
public static void METHOD_1 ( TYPE_1 test , java.lang.Object [ ] VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { assertFalse ( STRING_1 , ( ( VAR_1 . length ) == 0 ) ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( test , ( ( STRING_2 + i ) + STRING_3 ) ) ; VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 [ i ] ) ) , VAR_3 ) ; } } 
public java.lang.String METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , java.lang.String data ) { try { TYPE_1 telephony = METHOD_2 ( ) ; if ( telephony != null ) return telephony . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , data ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } return STRING_1 ; } 
public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { final java.util.Map < java.lang.String , java.lang.Object > VAR_3 = VAR_2 . METHOD_2 ( ) ; for ( java.lang.String key : TYPE_1 . METHOD_3 ( VAR_3 ) ) { java.lang.Object value = VAR_3 . get ( key ) ; android.util.Log.v ( VAR_1 , java.lang.String.format ( STRING_1 , key , TYPE_1 . METHOD_4 ( value ) ) ) ; } } 
private final TYPE_1 METHOD_1 ( TYPE_2 f , java.lang.String name ) throws java.lang.Exception { final TYPE_3 is = TYPE_4 . METHOD_2 ( name ) ; assertNotNull ( ( STRING_1 + name ) , is ) ; try { return ( ( TYPE_1 ) ( f . METHOD_3 ( is ) ) ) ; } finally { try { is . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_1 ) { } } } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String s = STRING_1 + ( STRING_2 + STRING_3 ) ; VAR_1 = false ; try { TYPE_1 . METHOD_2 ( s ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } assertFalse ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { VAR_2 . METHOD_2 ( ) ; for ( TYPE_2 VAR_3 : VAR_4 ) { new TYPE_3 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_3 ( ) ; } VAR_2 . METHOD_4 ( ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 instanceof TYPE_3 ) ) ) { METHOD_3 ( VAR_2 ) ; } TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( ) ; if ( ( VAR_3 != null ) && ( ! ( VAR_3 instanceof TYPE_3 ) ) ) { METHOD_3 ( VAR_3 ) ; } return super . METHOD_1 ( VAR_1 ) ; } 
private void start ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . start ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( ) ; VAR_5 . METHOD_2 ( VAR_4 , null , VAR_3 ) ; METHOD_3 ( VAR_5 . METHOD_4 ( null ) ) ; VAR_6 = new TYPE_5 ( ) ; } 
protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < TYPE_2 < TYPE_1 , TYPE_3 > > VAR_2 ) { if ( VAR_1 != null ) { java.util.List < java.lang.Throwable > VAR_3 = null ; for ( TYPE_1 session : VAR_1 ) { VAR_3 = TYPE_4 . METHOD_2 ( session , VAR_2 , VAR_3 ) ; } if ( VAR_3 != null ) { throw new TYPE_5 ( VAR_3 ) ; } } } 
public TYPE_1 METHOD_1 ( int i , float x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
public TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( METHOD_2 ( ) ) == false ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; return null ; } try { return VAR_1 . METHOD_3 ( this ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_2 , e ) ; } return null ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { if ( ! ( METHOD_1 ( VAR_4 , VAR_1 , ( ( TYPE_4 ) ( VAR_2 ) ) , VAR_3 ) ) ) { if ( ! ( METHOD_1 ( VAR_5 , VAR_1 , ( ( com.android.jack.ir.ast.JMethod ) ( VAR_2 ) ) , VAR_3 ) ) ) { super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } } } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int id , byte [ ] data ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + id ) ) ; TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( device , id , data ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( new byte [ ] { - 2 , - 1 } ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = server . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ; TYPE_3 in = VAR_1 . METHOD_7 ( ) ; assertEquals ( INT_1 , in . METHOD_8 ( ) ) ; assertEquals ( INT_2 , in . METHOD_8 ( ) ) ; assertEquals ( ( - 1 ) , in . METHOD_8 ( ) ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 instanceof TYPE_3 ) { assert ( VAR_2 ) != null : STRING_1 ; return VAR_2 ; } TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( ) ; assert VAR_4 . METHOD_3 ( VAR_3 ) ; TYPE_1 VAR_5 = VAR_4 . get ( VAR_3 ) ; assert TYPE_5 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , ( ( VAR_3 . METHOD_7 ( VAR_6 class ) ) != null ) ) , VAR_5 . METHOD_6 ( ) ) ; return VAR_5 ; } 
public void METHOD_1 ( ) { VAR_1 . set ( 5 , false ) ; assertTrue ( STRING_1 , ( ! ( VAR_1 . get ( 5 ) ) ) ) ; VAR_1 . set ( 5 , true ) ; assertTrue ( STRING_2 , VAR_1 . get ( 5 ) ) ; try { VAR_1 . set ( ( - 5 ) , false ) ; fail ( ) ; } catch ( TYPE_1 expected ) { } } 
public void METHOD_1 ( ) { VAR_1 . println ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; if ( ! ( METHOD_3 ( ) ) ) { VAR_2 . METHOD_4 ( VAR_4 ) ; return ; } byte VAR_5 = VAR_6 ; TYPE_1 VAR_7 = new TYPE_1 ( VAR_8 , VAR_9 , 0 ) ; TYPE_2 VAR_10 = METHOD_5 ( VAR_5 , VAR_7 ) ; METHOD_6 ( VAR_10 ) ; VAR_1 . println ( STRING_2 ) ; } 
public TYPE_1 METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { if ( ( ( VAR_2 [ i ] ) != null ) && ( ( VAR_2 [ i ] . METHOD_2 ( ) ) == false ) ) { return VAR_2 [ i ] ; } } return null ; } 
public java.lang.String METHOD_1 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 , java.lang.Integer VAR_3 , java.lang.String VAR_4 ) { TYPE_1 session ; synchronized ( VAR_5 ) { session = VAR_6 . get ( VAR_2 ) ; } if ( session == null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } byte [ ] VAR_7 = VAR_4 . METHOD_2 ( ) ; return session . METHOD_3 ( VAR_1 , new TYPE_3 ( VAR_3 ) , VAR_7 ) ; } 
public void METHOD_1 ( ) { java.lang.Integer [ ] VAR_1 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_1 [ i ] = i ; TYPE_1 < java.lang.Integer > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; try { new TYPE_3 ( VAR_2 , false , TYPE_2 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) return ; METHOD_3 ( true ) ; METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_4 ( true ) ; METHOD_6 ( ) ; METHOD_4 ( false ) ; METHOD_3 ( false ) ; METHOD_4 ( true ) ; METHOD_7 ( true ) ; METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_4 ( true ) ; METHOD_6 ( ) ; METHOD_4 ( true ) ; } 
synchronized boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int id , byte [ ] data ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + id ) ) ; if ( ! ( METHOD_2 ( device ) ) ) { return false ; } return METHOD_3 ( id , data ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { TYPE_2 . e ( STRING_1 , STRING_2 ) ; return ; } TYPE_3 VAR_3 = VAR_1 . METHOD_3 ( VAR_4 ) ; if ( VAR_3 != null ) { TYPE_4 VAR_5 = VAR_1 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_3 ) ; VAR_5 . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; } METHOD_8 ( false ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 context ) { TYPE_2 c = context . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new java.lang.String [ ] { VAR_2 } , null , null , null ) ; java.lang.String VAR_3 = null ; if ( ( c != null ) && ( c . METHOD_4 ( ) ) ) { VAR_3 = c . METHOD_5 ( 0 ) ; } if ( c != null ) { c . METHOD_6 ( ) ; c = null ; } return VAR_3 ; } 
private void METHOD_1 ( TYPE_1 context ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { TYPE_4 . METHOD_4 ( context ) ; TYPE_5 . e ( STRING_1 , STRING_2 ) ; } else { TYPE_6 call = VAR_1 . METHOD_5 ( ) ; if ( call != null ) { call . METHOD_6 ( ) . METHOD_7 ( ) ; } } } 
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 ) ) throw new TYPE_1 ( ) ; try { java.lang.Class < ? extends TYPE_2 > VAR_3 = ( ( VAR_4 ) == null ) ? TYPE_3 . METHOD_2 ( VAR_5 class , VAR_1 ) : VAR_4 . METHOD_2 ( VAR_1 ) ; METHOD_1 ( VAR_3 ) ; } catch ( TYPE_4 e ) { throw new java.lang.IllegalArgumentException ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 3 ) ; final TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; assertEquals ( 0 , VAR_1 . size ( ) ) ; assertEquals ( 0 , VAR_3 . size ( ) ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 ) { if ( VAR_1 == ( VAR_3 ) ) { boolean VAR_4 = ( ( TYPE_2 ) ( VAR_2 ) ) ; METHOD_2 ( ( STRING_1 + ( java.lang.String . METHOD_3 ( VAR_4 ) ) ) ) ; METHOD_4 ( VAR_4 ) ; TYPE_3 . action ( METHOD_5 ( ) , VAR_5 , VAR_4 ) ; return true ; } return false ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 type ) { switch ( type . METHOD_2 ( ) ) { case VAR_1 : return VAR_2 ; case VAR_3 : return VAR_4 ; case VAR_5 : return VAR_6 ; case VAR_7 : return VAR_8 ; case VAR_9 : case VAR_10 : return VAR_11 ; case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; case VAR_16 : return VAR_17 ; case VAR_18 : return VAR_19 ; } return TYPE_3 . METHOD_3 ( type ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 c ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; for ( TYPE_3 VAR_2 = c . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; ) { VAR_1 . append ( ( ( VAR_2 . METHOD_4 ( ) ) + STRING_1 ) ) ; } return VAR_1 . toString ( ) ; } 
public void METHOD_1 ( TYPE_1 e ) { TYPE_2 p = TYPE_3 . METHOD_2 ( this , e ) . METHOD_3 ( ) ; TYPE_4 VAR_1 = VAR_2 . METHOD_4 ( p ) ; if ( ( VAR_1 == null ) || ( VAR_1 . METHOD_5 ( ) ) ) { return ; } TYPE_5 VAR_3 = VAR_1 . METHOD_6 ( ) ; if ( VAR_3 != null ) { boolean VAR_4 = VAR_5 . METHOD_7 ( VAR_3 ) ; if ( ! VAR_4 ) { METHOD_8 ( ) . METHOD_9 ( ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( STRING_1 ) ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_1 ) ; assertEquals ( match , result ) ; } 
private void METHOD_1 ( int VAR_1 ) { synchronized ( VAR_2 ) { if ( ( VAR_2 . METHOD_2 ( ) ) && ( VAR_3 . METHOD_2 ( ) ) ) { if ( android.util.Log . METHOD_3 ( VAR_4 , VAR_5 ) ) { android.util.Log.v ( VAR_6 . TAG , STRING_1 ) ; } if ( android.util.Log . METHOD_3 ( VAR_4 , VAR_5 ) ) { android.util.Log.v ( VAR_6 . TAG , STRING_2 ) ; } TYPE_1 . METHOD_4 ( METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 ) ; } } } 
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { long VAR_2 = METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 VAR_3 = METHOD_4 ( VAR_2 , STRING_1 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 , STRING_2 ) ; VAR_1 . METHOD_5 ( VAR_3 ) ; VAR_1 . METHOD_5 ( new TYPE_1 ( 0 ) ) ; VAR_1 . METHOD_5 ( new TYPE_1 ( 1 ) ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; } 
public char [ ] METHOD_1 ( int length ) { assert ( VAR_1 ) == ( VAR_2 ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( METHOD_3 ( length ) ) . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) ; char [ ] result = new char [ VAR_3 . length ( ) ] ; VAR_3 . get ( result ) ; return result ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getName ( ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) . METHOD_12 ( VAR_1 . METHOD_13 ( ) ) . METHOD_14 ( VAR_1 . METHOD_15 ( ) ) ; } 
private static void METHOD_1 ( android.content.Intent VAR_1 ) { assert ( VAR_2 ) != null ; int VAR_3 = VAR_1 . METHOD_2 ( VAR_4 , ( - 1 ) ) ; VAR_5 = ( VAR_3 != ( VAR_6 ) ) && ( VAR_3 != ( VAR_7 ) ) ; TYPE_1 . METHOD_3 ( ) ; } 
void METHOD_1 ( ) { if ( ( VAR_1 ) >= ( VAR_2 . length ) ) { VAR_3 . METHOD_2 ( ) ; return ; } java.lang.String VAR_4 = ( ( VAR_5 ) != null ) ? VAR_5 [ VAR_1 ] : null ; VAR_3 . METHOD_3 ( VAR_2 [ VAR_1 ] , VAR_4 ) ; ( VAR_1 ) ++ ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_3 ) ; if ( VAR_2 . METHOD_4 ( VAR_4 , true ) ) { for ( TYPE_2 < ? > item : VAR_5 ) { item . METHOD_5 ( VAR_2 ) ; item . METHOD_6 ( VAR_6 , VAR_7 ) ; VAR_1 . METHOD_7 ( item ) ; } } } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , byte value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public void run ( com.android.jack.ir.ast.JDefinedClassOrInterface type ) throws java.lang.Exception { if ( ( type . METHOD_1 ( ) ) || ( type instanceof TYPE_1 ) ) { return ; } TYPE_2 VAR_1 = new TYPE_2 ( type ) ; TYPE_3 VAR_2 = type . METHOD_2 ( VAR_3 class ) ; if ( VAR_2 != null ) { for ( TYPE_4 f : VAR_2 . METHOD_3 ( ) ) { VAR_1 . append ( new TYPE_5 ( f , VAR_4 ) ) ; } type . METHOD_4 ( VAR_3 class ) ; } VAR_1 . METHOD_5 ( ) ; } 
private TYPE_1 METHOD_1 ( int status ) { TYPE_1 response = new TYPE_2 ( VAR_1 , status , null ) ; java.lang.String VAR_2 = TYPE_3 . METHOD_2 ( status ) ; if ( VAR_2 != null ) { TYPE_4 VAR_3 = new TYPE_4 ( STRING_1 ) ; VAR_3 . append ( VAR_2 ) ; VAR_3 . append ( STRING_2 ) ; VAR_3 . append ( VAR_2 ) ; VAR_3 . append ( STRING_3 ) ; response . METHOD_3 ( METHOD_4 ( VAR_3 . toString ( ) ) ) ; } return response ; } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) throw new java.lang.IllegalArgumentException ( STRING_1 ) ; if ( ( ( VAR_2 ) != null ) && ( VAR_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ) return VAR_2 . METHOD_3 ( ) ; return TYPE_1 . METHOD_4 ( VAR_1 ) ; } 
public final void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( this ) ; for ( java.lang.Object value : METHOD_3 ( ) . values ( ) ) { if ( value instanceof TYPE_2 ) { if ( ! ( VAR_2 ) ) { ( ( TYPE_2 ) ( value ) ) . METHOD_4 ( this ) ; } VAR_1 . METHOD_5 ( ( ( TYPE_2 ) ( value ) ) ) ; } } VAR_2 = true ; } 
public static TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { java.lang.Class < ? > VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_1 result = TYPE_1 . METHOD_3 ( name , VAR_1 , VAR_2 ) ; if ( ( VAR_3 ) == null ) { result . METHOD_4 ( VAR_1 , VAR_2 ) ; } else if ( ! ( VAR_3 . equals ( VAR_1 ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( VAR_3 ) + STRING_1 ) + VAR_1 ) ) ; } return result ; } 
public void run ( ) { try { java.io.File output = java.io.File . METHOD_1 ( STRING_1 , STRING_2 ) ; output . METHOD_2 ( ) ; VAR_1 [ VAR_2 ] = output ; TYPE_1 . METHOD_3 ( ) . METHOD_4 ( input , output , VAR_3 , VAR_4 , false , ( VAR_2 == 0 ? VAR_5 : VAR_6 ) ) ; } catch ( java.lang.Exception VAR_7 ) { } VAR_8 . METHOD_5 ( ) ; } 
public void run ( TYPE_1 session ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . get ( VAR_2 ) ; try { VAR_1 . METHOD_1 ( VAR_3 ) ; } catch ( TYPE_5 e ) { session . METHOD_2 ( ) . METHOD_3 ( VAR_4 , e ) ; throw new TYPE_2 ( e ) ; } if ( TYPE_4 . get ( VAR_5 ) . booleanValue ( ) ) { for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : session . METHOD_4 ( ) ) { type . METHOD_5 ( VAR_6 class ) ; } } } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_2 ( ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( ) ; } } 
private void METHOD_1 ( java.io.File VAR_1 , java.lang.String packageName , java.lang.String VAR_2 ) throws TYPE_1 { if ( packageName != null ) { VAR_3 . info ( STRING_1 , VAR_2 , packageName ) ; device . METHOD_2 ( packageName , VAR_4 ) ; } else { VAR_3 . info ( STRING_2 , VAR_2 , VAR_1 ) ; } } 
private boolean METHOD_1 ( long VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { return true ; } else if ( VAR_1 < ( VAR_3 ) ) { return false ; } else if ( VAR_1 == ( VAR_3 ) ) { return true ; } else { VAR_4 . METHOD_2 ( ( VAR_1 - ( VAR_3 ) ) ) ; VAR_3 = VAR_1 ; return false ; } } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; for ( int i = 0 ; i < ( ( VAR_3 ) - 1 ) ; ++ i ) VAR_2 [ i ] = new java.lang.Integer ( ( i + ( VAR_3 ) ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } } 
static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 VAR_2 , java.lang.String VAR_3 ) { TYPE_2 < TYPE_1 > VAR_4 = ( ( TYPE_2 < TYPE_1 > ) ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ; if ( VAR_4 == null ) { TYPE_5 . i ( STRING_1 , ( STRING_2 + VAR_3 ) ) ; VAR_4 = new TYPE_2 < > ( ) ; VAR_5 = VAR_1 ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_4 , VAR_3 ) . METHOD_5 ( ) ; } return VAR_4 ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , java.lang.String ... VAR_3 ) { java.util.Set < java.lang.String > VAR_4 = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ; java.util.Set < java.lang.String > VAR_5 = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_3 ) ) ; assertEquals ( VAR_4 , VAR_5 ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ; } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) { return null ; } java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) . getName ( VAR_3 ) ; return VAR_2 ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { java.lang.String a = TYPE_4 . METHOD_2 ( session ) ; assertTrue ( TYPE_5 . METHOD_3 ( a ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 type = METHOD_3 ( ) . get ( VAR_2 ) ; TYPE_5 VAR_3 = METHOD_4 ( VAR_4 ) ; METHOD_5 ( new TYPE_6 ( info , type , VAR_3 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_6 ( x , e ) ; } } 
public int [ ] METHOD_1 ( int [ ] src , int [ ] VAR_1 ) { return new int [ ] { VAR_1 [ 0 ] , src [ 1 ] , VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; } 
public TYPE_1 METHOD_1 ( android.bluetooth.BluetoothDevice device , int type , TYPE_2 VAR_1 , int VAR_2 , int VAR_3 ) { if ( ! ( TYPE_3 . METHOD_2 ( VAR_4 ) ) ) { android.util.Log.w ( TYPE_4 . TAG , STRING_1 ) ; return null ; } TYPE_4 service = METHOD_3 ( ) ; if ( service == null ) return null ; return service . METHOD_1 ( device , type , VAR_1 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 session , TYPE_2 VAR_1 ) { final long VAR_2 = TYPE_3 . METHOD_2 ( ) ; synchronized ( VAR_3 ) { TYPE_4 VAR_4 = METHOD_3 ( session , VAR_1 ) ; if ( ( VAR_4 != null ) && ( VAR_4 . METHOD_4 ( ) ) ) { if ( ( ( VAR_5 . flags ) & ( VAR_6 ) ) != 0 ) { METHOD_5 ( ) ; } VAR_7 = true ; METHOD_6 ( ) ; } } TYPE_3 . METHOD_7 ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_1 value ) { if ( key == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } VAR_1 . METHOD_2 ( key ) ; int VAR_2 = key . METHOD_3 ( ) ; if ( ! ( VAR_3 [ VAR_2 ] ) ) { VAR_3 [ VAR_2 ] = true ; ( VAR_4 ) ++ ; } TYPE_1 VAR_5 = ( ( TYPE_1 ) ( values [ VAR_2 ] ) ) ; values [ VAR_2 ] = value ; return VAR_5 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = VAR_2 . METHOD_2 ( ) ; assertTrue ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( new java.io.File ( VAR_1 , STRING_1 ) , new byte [ ] { CHAR_1 } ) ; TYPE_2 VAR_3 = TYPE_1 . METHOD_5 ( VAR_4 , 1 ) ; assertEquals ( VAR_5 , VAR_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ) ; METHOD_8 ( VAR_3 ) ; METHOD_9 ( ) ; } 
private void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = new TYPE_2 ( VAR_2 , VAR_4 ) . METHOD_2 ( VAR_1 ) . build ( ) ; VAR_5 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( 0 ) ; VAR_6 . METHOD_5 ( VAR_3 ) ; METHOD_6 ( VAR_7 ) ; boolean VAR_8 ; try { VAR_8 = VAR_5 . METHOD_7 ( ) ; } catch ( TYPE_3 e ) { VAR_8 = false ; } METHOD_8 ( new TYPE_4 ( VAR_2 , VAR_8 ) ) ; } 
public TYPE_1 get ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_1 ( ) ; TYPE_3 type = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_2 ( ) ; TYPE_1 result = VAR_2 . get ( type ) ; if ( result == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return result ; } 
void METHOD_1 ( final java.lang.String packageName , final int userId ) { if ( VAR_1 ) { TYPE_1 . d ( VAR_2 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + userId ) ) ; } if ( METHOD_2 ( packageName , userId , null ) ) { VAR_3 . METHOD_3 ( packageName , userId ) ; } } 
public void METHOD_1 ( int subId , int slotId , TYPE_1 VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( ( ( ( STRING_1 + subId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) ) ; switch ( VAR_1 ) { case VAR_4 : { TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( VAR_5 ) ; VAR_6 . METHOD_5 ( true , TYPE_2 . METHOD_6 ( ) ) ; break ; } default : METHOD_7 ( ) ; } } 
final boolean METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { return true ; } if ( VAR_1 == 0 ) { return false ; } int VAR_4 = 0 ; if ( ( VAR_5 ) && ( ( VAR_2 ) == ( VAR_6 ) ) ) { VAR_4 |= VAR_7 ; } if ( ( VAR_8 ) && ( ( VAR_2 ) == ( VAR_6 ) ) ) { VAR_4 |= VAR_9 ; } return ( VAR_1 & VAR_4 ) != 0 ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( VAR_3 ) ; } catch ( java.lang.Exception VAR_4 ) { VAR_5 = VAR_6 ; android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ; } METHOD_4 ( false ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_1 . TAG , STRING_1 ) ; return null ; } if ( ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_3 ( ) ) ) { VAR_2 . METHOD_4 ( VAR_1 , ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; return VAR_2 ; } return null ; } 
public void METHOD_1 ( TYPE_1 e ) { TYPE_2 project = TYPE_3 . METHOD_2 ( e . METHOD_3 ( ) ) ; if ( project == null ) { project = TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ; } if ( TYPE_5 . METHOD_6 ( project ) ) { TYPE_5 . METHOD_7 ( ) ; return ; } TYPE_6 . METHOD_4 ( ) . METHOD_8 ( project , VAR_1 , TYPE_7 . METHOD_4 ( project ) ) ; } 
public boolean METHOD_1 ( int VAR_1 , TYPE_1 event ) { if ( ( event . METHOD_2 ( ) ) == ( VAR_2 ) ) { if ( VAR_3 ) android.util.Log.v ( VAR_4 . TAG , STRING_1 ) ; VAR_5 . METHOD_3 ( ) ; return false ; } return super . METHOD_1 ( VAR_1 , event ) ; } 
public TYPE_1 METHOD_1 ( short x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
private static synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_2 ) ) ) { if ( VAR_3 ) { android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + ( VAR_4 ) ) ) ; } VAR_4 = VAR_1 ; } else { if ( VAR_3 ) { if ( ( VAR_4 ) == null ) { android.util.Log.d ( TYPE_1 . TAG , STRING_2 ) ; } else if ( VAR_5 ) { android.util.Log.d ( TYPE_1 . TAG , STRING_3 ) ; } } } } 
public void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { try { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 [ i ] ) ; TYPE_2 p = VAR_2 . METHOD_3 ( ) ; assertNotNull ( ( STRING_1 + ( VAR_1 [ i ] ) ) , p ) ; } catch ( TYPE_3 e ) { fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; final TYPE_2 VAR_2 ; try { VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ; } catch ( TYPE_3 e ) { TYPE_4 . METHOD_3 ( STRING_3 ) ; return ; } assertFalse ( VAR_1 . METHOD_4 ( VAR_2 , INT_1 , INT_2 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = TYPE_2 . METHOD_2 ( ( ( VAR_3 ) == ( VAR_4 ) ? VAR_5 : VAR_6 ) ) ; if ( VAR_7 ) { android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( STRING_1 + ( VAR_2 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_3 ) + ( VAR_2 . METHOD_5 ( ) ) ) ) ; } } 
protected static java.lang.String METHOD_1 ( TYPE_1 value ) { TYPE_2 sb = new TYPE_2 ( 100 ) ; sb.append ( CHAR_1 ) ; if ( value instanceof TYPE_3 ) { sb.append ( STRING_1 ) ; } else { sb.append ( value . METHOD_2 ( ) ) ; sb.append ( CHAR_2 ) ; sb.append ( value . METHOD_3 ( ) ) ; } return sb . toString ( ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String ... VAR_3 ) { TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; assertNotNull ( VAR_4 ) ; java.util.List < ? extends TYPE_3 > VAR_5 = METHOD_4 ( VAR_3 ) ; TYPE_3 match = VAR_4 . METHOD_5 ( VAR_5 ) ; assertEquals ( VAR_2 , VAR_5 . METHOD_6 ( match ) ) ; } 
private void METHOD_1 ( ) { if ( ( ( TYPE_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_3 ( ) ) ) { TYPE_2 state = TYPE_1 . METHOD_4 ( VAR_1 ) ; TYPE_3 target = state . METHOD_5 ( ) ; if ( target != null ) { VAR_2 . METHOD_6 ( target ) ; } VAR_3 . METHOD_6 ( state . METHOD_7 ( ) ) ; VAR_4 . METHOD_8 ( state ) ; VAR_4 . METHOD_9 ( ( ! ( state . METHOD_7 ( ) ) ) ) ; } } 
private boolean METHOD_1 ( ) { byte [ ] VAR_1 = new byte [ VAR_2 ] ; synchronized ( VAR_3 ) { byte [ ] VAR_4 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_4 == null ) || ( ! ( TYPE_1 . equals ( VAR_1 , VAR_4 ) ) ) ) { TYPE_2 . i ( VAR_5 . TAG , STRING_1 ) ; METHOD_3 ( ) ; return false ; } } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( new TYPE_3 ( TYPE_4 . METHOD_4 ( ) ) ) ) ) ; byte [ ] VAR_3 = VAR_2 . METHOD_5 ( STRING_2 ) ; assertTrue ( TYPE_5 . equals ( new byte [ ] { 4 , 2 , INT_1 , 0 } , VAR_3 ) ) ; assertNotNull ( VAR_2 . toString ( ) ) ; } 
public void METHOD_1 ( final TYPE_1 device , final TYPE_2 test , TYPE_3 VAR_1 ) throws TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 { if ( test == null ) { return ; } VAR_2 = false ; VAR_3 = false ; println ( VAR_4 ) ; println ( ( STRING_1 + ( METHOD_2 ( ) ) ) ) ; METHOD_3 ( device ) ; METHOD_4 ( test , VAR_1 ) ; } 
protected void METHOD_1 ( java.io.File VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { try { java.lang.String VAR_2 = TYPE_1 . toString ( VAR_1 , VAR_3 ) ; TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; METHOD_1 ( VAR_4 ) ; } catch ( java.io.IOException e ) { VAR_5 . log ( e , STRING_1 , VAR_1 ) ; } } } 
private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.util.List < TYPE_4 > VAR_2 ) throws java.io.IOException { TYPE_5 < TYPE_2 > VAR_3 = new TYPE_5 < > ( ) ; for ( TYPE_4 path : VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_6 . METHOD_4 ( path ) ) ) ; } return VAR_3 . build ( ) ; } 
static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_2 . set ( VAR_3 ) ; } return VAR_4 . METHOD_3 ( VAR_2 ) ; } 
public boolean METHOD_1 ( android.os.Message msg ) { switch ( VAR_1 ) { case VAR_2 : { final int flags = msg.arg1 ; VAR_3 . METHOD_2 ( flags ) ; return true ; } case VAR_4 : { VAR_3 . METHOD_3 ( ) ; return true ; } case VAR_5 : { VAR_3 . METHOD_4 ( ) ; return true ; } default : { return false ; } } } 
public java.lang.String METHOD_1 ( java.lang.String uri , java.lang.String VAR_1 ) { if ( uri == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_2 ) ; } int VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == 0 ) { return null ; } return TYPE_1 . METHOD_1 ( VAR_2 , uri , VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 text ) { final TYPE_2 VAR_1 = ( ( VAR_2 ) != null ) ? VAR_2 . METHOD_2 ( text , this ) : text ; return new TYPE_3 ( VAR_1 , VAR_3 , ( ( int ) ( TYPE_4 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 , VAR_3 ) ) ) ) , VAR_4 , FLOAT_1 , 0 , true ) ; } 
protected void METHOD_1 ( final java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 , java.io.IOException { TYPE_4 < TYPE_5 > VAR_3 = METHOD_2 ( ) . METHOD_3 ( ) ; while ( ( VAR_3 . METHOD_4 ( ) ) && ( ! ( VAR_4 ) ) ) { VAR_5 = VAR_3 . METHOD_5 ( ) ; VAR_5 . run ( VAR_6 , VAR_1 , VAR_2 ) ; } } 
public static void METHOD_1 ( java.util.Set < java.lang.String > expected , java.lang.String [ ] VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_1 . METHOD_2 ( expected , VAR_1 ) ; assertEquals ( STRING_1 , VAR_3 , VAR_2 ) ; assertEquals ( expected . size ( ) , VAR_1 . length ) ; } 
boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; VAR_3 = VAR_1 ; if ( ! ( VAR_4 ) ) { METHOD_2 ( ) ; if ( VAR_5 ) TYPE_2 . d ( VAR_6 , ( STRING_1 + VAR_1 ) ) ; VAR_7 . METHOD_3 ( this ) ; if ( ( VAR_8 ) != null ) { VAR_2 = VAR_8 . METHOD_4 ( this ) ; } } METHOD_5 ( ) ; return VAR_2 ; } 
public static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , boolean VAR_2 ) { TYPE_3 . METHOD_2 ( TYPE_4 . get ( context ) . METHOD_3 ( ) . METHOD_4 ( context ) ) ; new TYPE_5 ( context , VAR_1 ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) . METHOD_7 ( ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; } if ( VAR_2 == null ) { VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 ) ; } if ( VAR_2 == null ) { VAR_2 = TYPE_6 . METHOD_2 ( VAR_1 ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) , ( STRING_2 + ( ( ( ( STRING_6 + STRING_7 ) + STRING_8 ) + STRING_6 ) + STRING_9 ) ) ) ; } 
private void METHOD_1 ( TYPE_1 context ) { final TYPE_2 VAR_1 = context . METHOD_2 ( ) ; VAR_2 = new TYPE_3 < TYPE_2 > ( VAR_1 ) ; VAR_3 = new TYPE_4 ( ) ; VAR_1 . METHOD_3 ( VAR_4 , true , VAR_3 ) ; METHOD_4 ( VAR_1 ) ; VAR_5 = true ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { if ( ( ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) && ( ! ( TYPE_1 . METHOD_4 ( METHOD_3 ( ) ) ) ) ) { super . METHOD_1 ( ) ; return ; } mContext . METHOD_5 ( VAR_1 ) ; if ( VAR_2 . METHOD_6 ( ) ) { assertTrue ( VAR_2 . METHOD_7 ( false ) ) ; TYPE_2 . METHOD_8 ( VAR_3 ) ; } super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = 1 ; VAR_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ; org.mockito.Mockito.verify ( VAR_3 ) . METHOD_2 ( VAR_4 . METHOD_4 ( ) , org.mockito.Matchers.eq ( ( ( java.lang.Integer ) ( TYPE_1 . METHOD_5 ( VAR_5 , STRING_1 , new java.lang.Class < ? > [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_1 } ) ) ) ) ) ; TYPE_1 . METHOD_6 ( VAR_2 , VAR_4 . METHOD_7 ( ) , VAR_7 ) ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 3 , VAR_2 ) ; android.os.Bundle VAR_3 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ; assertEquals ( 1 , VAR_3 . size ( ) ) ; assertFalse ( VAR_3 . METHOD_5 ( VAR_5 ) ) ; assertTrue ( VAR_3 . METHOD_5 ( VAR_6 ) ) ; assertEquals ( VAR_7 , VAR_3 . METHOD_6 ( VAR_6 ) ) ; } 
public static void METHOD_1 ( TYPE_1 context , int VAR_1 ) { if ( TYPE_2 . METHOD_2 ( context ) ) { TYPE_2 . METHOD_3 ( context , VAR_2 , VAR_1 ) ; } else { TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 ) . METHOD_7 ( ) ; } } 
public java.lang.Object METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = null ; try { VAR_1 = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( ) ; } VAR_1 . m = new TYPE_5 < > ( m ) ; return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 in , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = in . METHOD_2 ( ) . VAR_3 ; if ( VAR_2 . METHOD_3 ( ) ) { TYPE_4 VAR_4 = in . METHOD_4 ( VAR_5 ) ; for ( int i = 0 ; i < ( VAR_2 . size ) ; i ++ ) { METHOD_5 ( in , VAR_4 , VAR_1 ) ; } } } 
public static boolean METHOD_1 ( final java.util.List < TYPE_1 > data , final TYPE_2 input , final int VAR_1 ) throws java.io.IOException { int VAR_2 = input . METHOD_2 ( ) ; boolean VAR_3 = input . METHOD_3 ( VAR_1 ) ; int VAR_4 = input . METHOD_2 ( ) ; byte [ ] VAR_5 = input . METHOD_4 ( VAR_2 , ( VAR_4 - VAR_2 ) ) ; data . METHOD_5 ( new TYPE_1 ( VAR_1 , VAR_5 ) ) ; return VAR_3 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 server ) { java.lang.String VAR_2 = STRING_1 ; TYPE_3 VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_4 , VAR_5 ) ; TYPE_3 VAR_6 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_7 , VAR_8 ) ; return TYPE_1 . METHOD_1 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_4 [ 0 ] , VAR_7 [ 0 ] , VAR_5 [ 0 ] , VAR_8 [ 0 ] , VAR_3 , VAR_6 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_4 = ( ( TYPE_4 ) ( VAR_1 . METHOD_3 ( ) ) ) ; VAR_4 . print ( ( VAR_2 + STRING_1 ) , VAR_3 ) ; VAR_4 . METHOD_4 ( ) ; } 
public java.lang.String toString ( ) { return ( ( ( STRING_1 + ( TYPE_1 . getName ( VAR_1 [ ( ( VAR_2 ) - 1 ) ] . METHOD_1 ( ) . METHOD_2 ( ) ) ) ) + STRING_2 ) + ( data ) ) + STRING_3 ; } 
public int METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 , TYPE_2 < java.util.Map < java.lang.String , java.lang.String > > VAR_2 ) { for ( TYPE_3 < java.lang.String , TYPE_1 > entry : METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ) { VAR_1 . METHOD_4 ( entry . METHOD_5 ( ) , entry . METHOD_6 ( ) ) ; } return 0 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_2 ( INT_1 , STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; assertEquals ( STRING_2 , VAR_2 , TYPE_1 . METHOD_2 ( ) ) ; TYPE_1 . METHOD_3 ( null ) ; assertEquals ( STRING_3 , VAR_1 , TYPE_1 . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( STRING_1 ) , TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . METHOD_6 ( INT_1 ) ) ; java.lang.String VAR_4 = TYPE_3 . METHOD_7 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 ) ; TYPE_3 . METHOD_8 ( VAR_4 , VAR_1 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( ( VAR_3 ) == ( VAR_4 ) ) { java.lang.String VAR_5 = VAR_6 . get ( STRING_1 , VAR_1 ) ; if ( ! ( VAR_5 . equals ( VAR_1 ) ) ) { return VAR_2 ? VAR_5 : METHOD_2 ( VAR_7 , VAR_5 ) ; } } java.lang.String VAR_5 = VAR_6 . get ( STRING_2 , VAR_1 ) ; return VAR_2 ? VAR_5 : METHOD_2 ( VAR_7 , VAR_5 ) ; } 
protected boolean METHOD_1 ( byte [ ] VAR_1 ) throws TYPE_1 { if ( ( key ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } try { int result = TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , 0 , VAR_1 . length , key . METHOD_3 ( ) ) ; return result == 1 ; } catch ( java.lang.Exception ex ) { throw new TYPE_1 ( ex ) ; } finally { METHOD_4 ( ) ; } } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 service , TYPE_4 VAR_2 , TYPE_5 VAR_3 ) { android.util.Log . i ( TYPE_1 . TAG , STRING_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 , service , VAR_2 , VAR_3 ) ; VAR_4 . start ( ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.io.IOException { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; VAR_1 . METHOD_7 ( ) ; METHOD_8 ( STRING_1 , VAR_1 ) ; assertEquals ( INT_1 , VAR_1 . METHOD_9 ( ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( false ) ; int VAR_1 = VAR_2 . METHOD_3 ( ) ; if ( VAR_1 != ( - 1 ) ) { java.lang.String VAR_3 = VAR_2 . METHOD_4 ( VAR_1 ) ; if ( VAR_3 . equals ( VAR_4 ) ) { VAR_2 . METHOD_5 ( 0 ) ; } if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_1 ( ) ; } } } 
boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { int VAR_1 = 0 ; synchronized ( VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_2 . values ( ) ) { switch ( VAR_3 . METHOD_2 ( ) ) { case VAR_4 : case VAR_5 : if ( TYPE_2 . equals ( device , VAR_3 . METHOD_3 ( ) ) ) { return true ; } VAR_1 ++ ; break ; default : break ; } } } return VAR_1 < ( VAR_6 ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_3 ) ) ; METHOD_3 ( METHOD_4 ( info , VAR_2 , true , VAR_1 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ( ( TYPE_1 ) ( null ) ) ) ; METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 ) ; assertEquals ( VAR_2 , VAR_3 ) ; VAR_3 . METHOD_4 ( ) ; assertEquals ( VAR_1 , VAR_3 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_3 > 0 ) { int VAR_4 = VAR_3 * ( VAR_1 . METHOD_5 ( ) ) ; VAR_2 = TYPE_3 . METHOD_6 ( VAR_2 , VAR_4 ) ; } long VAR_5 = TYPE_4 . METHOD_7 ( VAR_2 ) ; return new TYPE_1 ( VAR_6 , VAR_5 ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 ; switch ( VAR_3 ) { case VAR_4 : VAR_2 = VAR_5 ; break ; case VAR_6 : VAR_2 = VAR_7 ; break ; default : throw new TYPE_5 ( STRING_1 ) ; } TYPE_6 VAR_8 = METHOD_3 ( VAR_9 ) ; METHOD_4 ( TYPE_7 . METHOD_5 ( info , VAR_2 , VAR_8 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_6 ( x , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { int subId = INT_1 ; java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( VAR_2 ) ; TYPE_1 . when ( VAR_3 . METHOD_3 ( VAR_2 ) ) . thenReturn ( subId ) ; TYPE_2 VAR_4 = ( ( TYPE_2 ) ( mContext . METHOD_4 ( VAR_5 ) ) ) ; TYPE_1 . when ( VAR_4 . METHOD_5 ( subId ) ) . thenReturn ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_6 . METHOD_5 ( VAR_2 , VAR_7 ) ) ; } 
public void format ( long number , TYPE_1 VAR_1 , int pos , int VAR_2 ) { if ( VAR_2 >= ( VAR_3 ) ) { throw new TYPE_2 ( ( STRING_1 + ( name ) ) ) ; } TYPE_3 VAR_4 = METHOD_1 ( number ) ; VAR_4 . METHOD_2 ( number , VAR_1 , pos , ( ++ VAR_2 ) ) ; } 
public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( null ) ; fail ( STRING_1 ) ; } catch ( java.lang.NullPointerException e ) { } assertEquals ( new TYPE_1 ( VAR_1 ) , TYPE_1 . METHOD_2 ( VAR_1 ) ) ; TYPE_2 locale = new TYPE_2 ( STRING_2 , STRING_3 ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( locale ) ; assertNotNull ( VAR_2 ) ; assertEquals ( TYPE_1 . METHOD_2 ( ) , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( 0 , TYPE_2 . METHOD_2 ( ) ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_3 ( ) ) != 0 ) ) ; assertEquals ( STRING_2 , TYPE_2 . METHOD_2 ( ) , VAR_1 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { android.renderscript.Allocation VAR_1 = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ INPUTSIZE ] ; TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) ; VAR_1 . METHOD_4 ( n ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( INT_3 , 16 ) ; } 
public TYPE_1 METHOD_1 ( int i , byte x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i ) ) , x ) ; return this ; } 
public static TYPE_1 METHOD_1 ( java.io.File VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 { TYPE_4 VAR_2 = new TYPE_5 ( new TYPE_6 ( VAR_1 ) ) ; TYPE_7 VAR_3 = new TYPE_7 ( ) ; TYPE_8 VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) ; return VAR_4 != null ? new TYPE_1 ( VAR_3 , new TYPE_9 ( VAR_1 ) , VAR_4 . METHOD_3 ( ) ) : null ; } 
private static int METHOD_1 ( java.util.List < ? extends TYPE_1 > VAR_1 ) { try { return TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 . get ( 0 ) . METHOD_1 ( ) ) ; } catch ( TYPE_3 ex ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } catch ( java.lang.NullPointerException ex ) { throw new java.lang.NullPointerException ( STRING_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 s = new TYPE_1 ( ) ; for ( int i = 0 ; i <= INT_1 ; ++ i ) { s . METHOD_2 ( i ) ; assertEquals ( i , s . METHOD_3 ( ) ) ; } } 
public static int METHOD_1 ( ) { int x = 0 ; int y = 1 ; while ( ( y ++ ) < 10 ) { if ( y > 1 ) { x = INT_1 ; continue ; } else { x = INT_2 ; continue ; } } return x ; } 
void METHOD_1 ( java.lang.String VAR_1 , java.util.Map < java.lang.String , TYPE_1 > VAR_2 ) throws TYPE_2 { TYPE_3 field = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( field == null ) { throw new java.lang.IllegalArgumentException ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } TYPE_4 VAR_4 = field . METHOD_3 ( VAR_5 class ) ; VAR_6 . METHOD_4 ( field ) ; TYPE_1 VAR_7 = VAR_8 . METHOD_5 ( field ) ; if ( VAR_7 != null ) { VAR_2 . METHOD_6 ( VAR_4 . name ( ) , VAR_7 ) ; } } 
public void METHOD_1 ( int i ) throws java.lang.RuntimeException { if ( ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) { throw new java.lang.RuntimeException ( ) ; } if ( i > ( ( VAR_1 ) - 1 ) ) { return ; } value [ ( i > > > 5 ) ] &= ~ ( VAR_2 [ ( i & INT_1 ) ] ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { TYPE_2 info = VAR_3 . get ( VAR_2 ) ; synchronized ( this ) { if ( VAR_4 ) { android.util.Log.d ( TYPE_3 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; } if ( ! ( VAR_6 ) ) { VAR_6 = true ; new TYPE_4 ( this , info , VAR_7 ) ; return true ; } else { return false ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( false ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( null ) ; METHOD_6 ( VAR_1 . METHOD_7 ( TYPE_2 . METHOD_8 ( INT_1 ) ) ) ; } finally { VAR_1 . METHOD_9 ( ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( true ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( null ) ; VAR_1 . METHOD_5 ( ) ; try { VAR_2 . METHOD_6 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 e ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 ) , new TYPE_3 ( new TYPE_4 ( ) , null ) { } ) ; TYPE_5 VAR_5 = VAR_1 . METHOD_4 ( ) ; TYPE_6 key = ( ( TYPE_6 ) ( VAR_5 . METHOD_5 ( ) ) ) ; assertNotNull ( STRING_2 , key . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 context ) { if ( ( ( VAR_1 ) && ( ( VAR_2 ) == null ) ) && ( METHOD_2 ( context ) ) ) { java.util.List < java.io.File > VAR_3 = context . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ! ( VAR_3 . METHOD_5 ( ) ) ) { TYPE_2 location = TYPE_2 . METHOD_6 ( VAR_3 . get ( 0 ) ) ; context . METHOD_7 ( VAR_4 , location , ( STRING_1 + STRING_2 ) , null ) ; } } } 
public java.lang.String METHOD_1 ( ) { try ( TYPE_1 VAR_1 = VAR_2 . get ( ) ) { TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( false ) ; TYPE_3 VAR_4 = VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; TYPE_4 . METHOD_6 ( VAR_4 , VAR_5 ) ; return VAR_4 . METHOD_7 ( null , VAR_6 ) ; } catch ( TYPE_5 e ) { return null ; } catch ( java.io.IOException e ) { return null ; } } 
public boolean METHOD_1 ( android.os.Message VAR_1 ) { METHOD_2 ( VAR_1 , this ) ; switch ( VAR_2 ) { case VAR_3 : transitionTo ( VAR_4 ) ; break ; case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : case VAR_16 : case VAR_17 : case VAR_18 : case VAR_19 : case VAR_20 : VAR_21 = VAR_22 ; METHOD_3 ( VAR_1 ) ; break ; default : return VAR_23 ; } return VAR_24 ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , STRING_4 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( VAR_4 ) ; } } ) ; } 
public java.lang.String toString ( ) { int VAR_1 = METHOD_1 ( ) ; return ( ( ( ( ( VAR_1 == 0 ? STRING_1 : ( TYPE_1 . toString ( VAR_1 ) ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( METHOD_4 ( ) ) ) ) + STRING_3 ) + ( getName ( ) ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , byte error ) { android.util.Log.v ( VAR_1 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + error ) ) ; boolean result = false ; final TYPE_1 service = VAR_2 ; if ( service != null ) { try { result = service . METHOD_1 ( device , error ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_1 . TAG , STRING_3 ) ; } return result ; } 
TYPE_1 METHOD_1 ( TYPE_2 config , java.util.List < TYPE_3 > VAR_1 ) { TYPE_3 VAR_2 = METHOD_2 ( VAR_1 , config ) ; if ( VAR_2 == null ) { return null ; } int VAR_3 = VAR_2 . level ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_5 , VAR_6 ) ; TYPE_5 VAR_7 = VAR_8 . METHOD_3 ( new TYPE_6 ( VAR_4 ) ) ; if ( VAR_7 != null ) { return METHOD_4 ( VAR_7 . METHOD_5 ( VAR_3 ) , VAR_3 ) ; } return null ; } 
private static void METHOD_1 ( short VAR_1 , int VAR_2 ) { if ( VAR_3 ) { android.util.Log.v ( TYPE_1 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; } if ( VAR_2 == ( VAR_4 ) ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; } else { TYPE_2 . METHOD_2 ( ) . METHOD_4 ( VAR_1 , TYPE_1 . METHOD_5 ( VAR_2 ) ) ; } } 
public final TYPE_1 METHOD_1 ( int i , char x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_4 ( c ) ) ; TYPE_1 . METHOD_5 ( c ) ; TYPE_2 . METHOD_6 ( ) ; } 
private void METHOD_1 ( byte [ ] address , byte VAR_1 , byte [ ] VAR_2 ) { if ( VAR_3 ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Bundle data = new android.os.Bundle ( ) ; android.os.Message msg = VAR_5 . METHOD_2 ( VAR_6 ) ; data . METHOD_3 ( STRING_2 , address ) ; data . METHOD_3 ( STRING_3 , VAR_2 ) ; data . METHOD_4 ( STRING_4 , VAR_1 ) ; msg . METHOD_5 ( data ) ; VAR_5 . METHOD_6 ( msg ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 item ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { for ( TYPE_2 i : VAR_3 . METHOD_4 ( ) ) { if ( i == item ) { return VAR_3 ; } } } return null ; } 
private boolean METHOD_1 ( ) { java.lang.String value = TYPE_1 . METHOD_2 ( mContext . METHOD_3 ( ) , VAR_1 ) ; if ( value == null ) { TYPE_2 d = TYPE_2 . get ( mContext . METHOD_4 ( ) . METHOD_5 ( ) . locale ) ; value = VAR_2 ; } return ( value . METHOD_6 ( CHAR_1 ) ) > ( value . METHOD_6 ( CHAR_2 ) ) ; } 
private synchronized java.lang.String METHOD_1 ( java.lang.String packageName ) { java.lang.String VAR_1 = STRING_1 ; int VAR_2 = METHOD_2 ( packageName ) ; if ( VAR_2 != ( - 1 ) ) { VAR_1 = VAR_3 . get ( VAR_2 ) . VAR_4 ; } if ( VAR_5 ) android.util.Log.d ( VAR_6 . TAG , ( ( ( STRING_2 + packageName ) + STRING_3 ) + VAR_1 ) ) ; return VAR_1 ; } 
static void METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 , java.lang.StringBuilder VAR_2 ) { TYPE_2 data = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_3 = new java.util.ArrayList ( data . METHOD_3 ( VAR_1 ) ) ; TYPE_5 . METHOD_4 ( VAR_3 , VAR_4 ) ; for ( TYPE_4 VAR_5 : VAR_3 ) { TYPE_6 . METHOD_1 ( VAR_5 , VAR_2 , VAR_6 , null ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , VAR_3 ) ; try { if ( VAR_1 != null ) { android.os.Bundle VAR_4 = new android.os.Bundle ( ) ; VAR_4 . METHOD_2 ( VAR_5 , STRING_1 ) ; VAR_4 . METHOD_2 ( STRING_2 , VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 , ( - 1 ) , VAR_4 ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , e ) ; } } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { for ( TYPE_1 VAR_3 : VAR_2 ) { for ( TYPE_2 VAR_4 : VAR_3 . METHOD_2 ( ) ) { if ( VAR_1 . equals ( VAR_4 . METHOD_3 ( ) ) ) { return true ; } } } } return false ; } 
public void METHOD_1 ( int VAR_1 , boolean VAR_2 ) { try { TYPE_1 telephony = METHOD_2 ( ) ; if ( telephony != null ) { telephony . METHOD_1 ( VAR_1 , VAR_2 ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_3 . TAG , STRING_1 , e ) ; } catch ( TYPE_2 e ) { android.util.Log.e ( VAR_3 . TAG , STRING_2 , e ) ; } } 
public static < TYPE_1 extends TYPE_2 < TYPE_1 > > TYPE_3 < TYPE_1 > METHOD_1 ( java.lang.String name , java.lang.String VAR_1 , java.lang.Class < TYPE_1 > type , TYPE_1 [ ] values ) { return new TYPE_3 < TYPE_1 > ( name , VAR_1 , new TYPE_4 < TYPE_1 > ( type , values ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( - 5 ) , ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) , STRING_5 ) ; TYPE_1 . METHOD_2 ( ( - 4 ) , ( STRING_1 + ( STRING_6 + STRING_7 ) ) , STRING_5 ) ; } 
public TYPE_1 METHOD_1 ( ) { int t = ( ( VAR_1 ) - 1 ) & ( ( VAR_2 . length ) - 1 ) ; TYPE_1 result = VAR_2 [ t ] ; if ( result == null ) return null ; VAR_2 [ t ] = null ; VAR_1 = t ; return result ; } 
public void error ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Throwable VAR_3 ) { java.lang.String VAR_4 = METHOD_1 ( VAR_1 , VAR_2 ) ; TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ; if ( VAR_3 != null ) { VAR_6 = true ; } METHOD_2 ( VAR_4 ) ; } 
private static int METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , int VAR_4 ) { if ( VAR_1 && ( VAR_4 == 0 ) ) { return - 1 ; } if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; if ( ! ( VAR_3 . METHOD_5 ( ) . equals ( VAR_2 . METHOD_5 ( ) ) ) ) { VAR_2 . METHOD_6 ( VAR_3 . METHOD_5 ( ) ) ; } } return VAR_4 ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { int VAR_2 = - 1 ; if ( VAR_1 != null ) { try { VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( ) ; } } return new TYPE_1 ( VAR_2 , ( - 1 ) , ( - 1 ) ) ; } 
protected void METHOD_1 ( TYPE_1 context ) { java.util.Set < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( ) ; if ( ! ( METHOD_4 ( context ) ) ) { context . METHOD_5 ( ) ; return ; } java.util.Set < java.lang.String > VAR_3 = VAR_2 . METHOD_2 ( ) ; assert VAR_3 != VAR_1 ; if ( ( VAR_1 . equals ( VAR_3 ) ) == false ) { METHOD_6 ( context ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , float VAR_2 , float VAR_3 , TYPE_2 VAR_4 ) { METHOD_2 ( VAR_1 ) ; int VAR_5 = ( VAR_4 != null ) ? METHOD_3 ( VAR_1 , VAR_4 ) : VAR_6 ; try { final int VAR_7 = ( VAR_4 == null ) ? 0 : VAR_8 ; TYPE_3 . METHOD_4 ( VAR_9 , VAR_10 , VAR_11 , VAR_2 , VAR_3 , VAR_7 ) ; } finally { if ( VAR_5 != ( VAR_6 ) ) TYPE_3 . METHOD_5 ( VAR_9 , VAR_5 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; java.lang.String VAR_3 = TYPE_4 . METHOD_4 ( VAR_1 ) ; TYPE_5 VAR_4 = new TYPE_5 ( new TYPE_6 ( VAR_1 . METHOD_5 ( ) ) , new TYPE_6 ( VAR_3 ) ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_2 , VAR_4 ) ; return VAR_5 ; } 
private int METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { int VAR_1 = ( method . METHOD_2 ( ) ) ? 0 : TYPE_1 . METHOD_3 ( ) ; for ( TYPE_2 VAR_2 : method . METHOD_4 ( ) ) { if ( ( VAR_2 . METHOD_5 ( VAR_3 class ) ) != null ) { continue ; } VAR_1 += TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , ( ( VAR_2 . METHOD_5 ( VAR_4 class ) ) != null ) ) . METHOD_3 ( ) ; } return VAR_1 ; } 
public boolean METHOD_1 ( TYPE_1 id ) { TYPE_2 VAR_1 = id . getName ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; if ( VAR_2 . getName ( ) . METHOD_3 ( ) . equals ( VAR_3 ) ) { this . VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_5 , null ) ; } } return true ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 request ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; java.lang.String VAR_2 = request . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_2 . METHOD_4 ( ) , ( STRING_2 + VAR_2 ) ) ) ; return VAR_1 ; } 
public final boolean equals ( java.lang.Object VAR_1 ) { if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( VAR_3 . equals ( VAR_4 ) ) && ( VAR_5 . equals ( VAR_6 ) ) ; } 
public boolean METHOD_1 ( int start ) { if ( ( start < 0 ) || ( start > ( input . length ( ) ) ) ) { throw new TYPE_1 ( ( ( ( STRING_1 + start ) + STRING_2 ) + ( input . length ( ) ) ) ) ; } synchronized ( this ) { VAR_1 = TYPE_2 . METHOD_2 ( address , input , start , VAR_2 ) ; } return VAR_1 ; } 
public boolean METHOD_1 ( TYPE_1 number ) { java.util.List < java.lang.String > VAR_1 = METHOD_2 ( number . METHOD_3 ( ) ) ; java.lang.String VAR_2 = TYPE_2 . METHOD_4 ( number ) ; for ( java.lang.String VAR_3 : VAR_1 ) { TYPE_3 VAR_4 = TYPE_4 . METHOD_5 ( VAR_3 ) ; if ( VAR_5 . METHOD_6 ( VAR_2 , VAR_4 . METHOD_7 ( ) ) ) { return true ; } } return false ; } 
public int METHOD_1 ( ) throws java.io.IOException { if ( ( in ) == null ) { return - 1 ; } int c = in . METHOD_1 ( ) ; if ( c == ( - 1 ) ) { METHOD_2 ( ) ; return METHOD_1 ( ) ; } return c ; } 
public void METHOD_1 ( ) { final int VAR_1 = VAR_2 . size ( ) ; try { TYPE_1 . METHOD_2 ( null , new java.lang.Object ( ) ) ; fail ( STRING_1 ) ; } catch ( java.lang.NullPointerException e ) { } for ( int VAR_3 = 0 ; VAR_3 < VAR_1 ; VAR_3 ++ ) { assertTrue ( STRING_2 , ( ( VAR_2 . get ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_2 . get ( VAR_3 ) ) ) ) == ( VAR_2 . get ( VAR_3 ) ) ) ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_4 ) { METHOD_3 ( VAR_1 , VAR_2 . METHOD_4 ( VAR_3 ) , VAR_4 , VAR_5 ) ; } if ( VAR_1 instanceof TYPE_5 ) { METHOD_3 ( VAR_1 , VAR_2 . METHOD_4 ( VAR_6 ) , VAR_7 , VAR_8 ) ; } if ( VAR_1 instanceof TYPE_6 ) { METHOD_3 ( VAR_1 , VAR_2 . METHOD_4 ( VAR_9 ) , VAR_7 , VAR_8 ) ; } return super . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( true ) ; TYPE_1 . when ( VAR_1 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_2 class ) ) ) . thenReturn ( false ) ; assertFalse ( VAR_3 . METHOD_6 ( new TYPE_2 ( ) , false ) ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_7 ( 2 ) ) . METHOD_8 ( org.mockito.Matchers . METHOD_9 ( ) ) ; } 
public boolean METHOD_1 ( java.io.File VAR_1 ) { if ( ( ! ( TYPE_1 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , status , true ) ) ) { return ( ( ! ( status . METHOD_5 ( ) ) ) && ( ! ( status . METHOD_6 ( ) ) ) ) && ( status . METHOD_7 ( ) ) ; } else { android.util.Log.w ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; return false ; } } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == false ) { VAR_1 = true ; try { VAR_2 . METHOD_2 ( ) ; } catch ( java.io.IOException e ) { if ( VAR_3 ) android.util.Log.d ( TAG , STRING_1 , e ) ; } } if ( ! ( TYPE_1 . METHOD_3 ( ) . equals ( this ) ) ) { if ( VAR_3 ) android.util.Log.d ( TAG , STRING_2 ) ; METHOD_4 ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_3 ) log ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; if ( ( VAR_1 . METHOD_3 ( ) ) && ( ! ( VAR_2 . METHOD_2 ( ) . equals ( VAR_4 ) ) ) ) { VAR_5 . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_2 ( ) ) ; } } 
private static java.lang.String METHOD_1 ( byte [ ] input ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( input ) ; byte [ ] result = VAR_2 . METHOD_4 ( ) ; return TYPE_1 . METHOD_5 ( result ) ; } else { return STRING_1 ; } } } 
private int METHOD_1 ( byte [ ] VAR_1 , int index ) { if ( index >= ( VAR_1 . length ) ) { TYPE_1 . loge ( STRING_1 ) ; return - 1 ; } VAR_2 = VAR_1 [ index ] ; VAR_3 = new byte [ ( VAR_2 ) & ( VAR_4 ) ] ; if ( VAR_5 ) TYPE_1 . log ( ( STRING_2 + ( VAR_3 . length ) ) ) ; return index + 1 ; } 
void METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( this ) ; } else { TYPE_1 . e ( this , new java.lang.NullPointerException ( ) , STRING_1 , METHOD_2 ( ) ) ; } TYPE_1 . METHOD_3 ( this , VAR_4 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; TYPE_2 p = new TYPE_2 ( INT_1 , INT_2 ) ; VAR_1 . METHOD_2 ( null , p , 1 , 2 ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_4 ) ) ; org.junit.Assert.assertEquals ( 1 , VAR_3 . index ) ; org.junit.Assert.assertEquals ( 2 , VAR_3 . count ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int c = TYPE_1 . METHOD_2 ( ) ; int s = TYPE_1 . METHOD_3 ( c ) ; TYPE_1 . METHOD_4 ( s , TYPE_2 . METHOD_5 ( ) ) ; try { TYPE_1 . METHOD_6 ( s ) ; fail ( ) ; } catch ( TYPE_3 expected ) { } TYPE_1 . METHOD_7 ( s , TYPE_2 . METHOD_8 ( ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_9 ( s ) ; TYPE_1 . METHOD_10 ( c ) ; } 
public boolean METHOD_1 ( java.lang.String VAR_1 ) { try { VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; return ( VAR_2 ) == ( VAR_4 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_5 . TAG , STRING_1 , e ) ; return false ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int size = VAR_1 . size ( ) ; TYPE_1 . List VAR_2 = new TYPE_1 . List ( size ) ; for ( int i = 0 ; i < size ; i ++ ) { VAR_2 . set ( i , TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ) ; } VAR_2 . METHOD_4 ( ) ; return new TYPE_1 ( VAR_2 ) ; } 
public final TYPE_1 METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { return VAR_2 ; } else { if ( ( VAR_3 ) == null ) { TYPE_2 VAR_4 = METHOD_2 ( ) . METHOD_3 ( ) ; VAR_3 = VAR_2 . METHOD_4 ( VAR_4 ) ; } return VAR_3 ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = VAR_1 . METHOD_2 ( VAR_2 ) ; int size = VAR_4 . METHOD_3 ( ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; for ( int j = 0 ; j < size ; j ++ ) { VAR_5 . METHOD_4 ( METHOD_5 ( VAR_1 , VAR_4 . METHOD_3 ( ) , VAR_3 ) ) ; } return VAR_5 ; } 
public void METHOD_1 ( int VAR_1 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { final TYPE_1 VAR_2 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , 0 ) ; TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) , VAR_4 , new java.lang.String [ 0 ] , INT_1 ) ; } } 
public void METHOD_1 ( int VAR_1 , int count , int [ ] d ) { int VAR_2 = ( VAR_3 . METHOD_2 ( ) ) * count ; METHOD_3 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_2 ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ; } 
public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; } 
public void METHOD_1 ( TYPE_1 context ) { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_2 ) ) ) { java.lang.String VAR_3 = ( ( STRING_1 + STRING_2 ) + ( VAR_4 ) ) + STRING_3 ; context . METHOD_2 ( VAR_5 , VAR_1 , VAR_3 , null ) ; } } 
public synchronized void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ) { android.util.Log . i ( VAR_2 , STRING_1 ) ; VAR_3 . METHOD_4 ( ) ; } VAR_3 . METHOD_5 ( this ) ; VAR_4 = true ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_6 ( this , 0 ) ; } if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_7 ( this ) ; } } } 
public java.util.List < android.bluetooth.BluetoothDevice > METHOD_1 ( int [ ] VAR_1 ) { int VAR_2 = - 1 ; android.bluetooth.BluetoothDevice VAR_3 = null ; synchronized ( VAR_4 ) { VAR_2 = METHOD_2 ( ) ; VAR_3 = METHOD_3 ( ) ; } java.util.List < android.bluetooth.BluetoothDevice > VAR_5 = new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; for ( int state : VAR_1 ) { if ( VAR_2 == state ) { if ( VAR_3 != null ) { VAR_5 . METHOD_4 ( VAR_3 ) ; } } } return VAR_5 ; } 
private java.util.Set < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 in ) { java.util.Set < TYPE_1 > VAR_2 = new TYPE_3 < TYPE_1 > ( ) ; for ( int i = in . METHOD_2 ( 0 ) ; i >= 0 ; i = in . METHOD_2 ( ( i + 1 ) ) ) { VAR_2 . METHOD_3 ( VAR_1 . get ( i ) ) ; } return VAR_2 ; } 
public boolean METHOD_1 ( ) { METHOD_2 ( 0 ) ; return ( ( VAR_1 . get ( 0 ) . METHOD_3 ( ) . METHOD_4 ( request . METHOD_5 ( ) ) ) && ( VAR_1 . get ( 0 ) . METHOD_6 ( ) . METHOD_7 ( request . METHOD_5 ( ) ) ) ) && ( VAR_2 . METHOD_8 ( ) ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 node , java.lang.Throwable e ) { TYPE_1 VAR_1 = METHOD_1 ( e ) ; if ( node != null ) { VAR_1 . METHOD_2 ( node . METHOD_3 ( ) . getName ( ) , node . toString ( ) , METHOD_4 ( node ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; assertEquals ( STRING_1 , VAR_1 . format ( INT_1 ) ) ; VAR_1 = TYPE_1 . METHOD_2 ( VAR_3 ) ; assertEquals ( STRING_2 , VAR_1 . format ( INT_1 ) ) ; VAR_1 = TYPE_1 . METHOD_2 ( VAR_4 ) ; assertEquals ( STRING_3 , VAR_1 . format ( INT_1 ) ) ; } 
synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 , int VAR_8 , int VAR_9 , int VAR_10 , int VAR_11 , int VAR_12 , int VAR_13 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . i ( STRING_1 , STRING_2 , VAR_2 . toString ( ) ) ; TYPE_3 VAR_3 = ( ( TYPE_3 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_4 class ) ) ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; if ( VAR_3 . METHOD_5 ( ) ) { TYPE_2 . i ( STRING_3 , STRING_4 ) ; VAR_3 . METHOD_6 ( false ) ; } else { TYPE_2 . i ( STRING_3 , STRING_5 ) ; VAR_3 . METHOD_6 ( true ) ; } } 
private static void METHOD_1 ( java.io.File VAR_1 ) throws TYPE_1 , TYPE_2 { if ( VAR_1 . METHOD_2 ( ) ) { throw new TYPE_1 ( STRING_1 , VAR_1 ) ; } if ( VAR_1 . METHOD_3 ( ) ) { if ( ( VAR_1 . METHOD_4 ( ) ) == false ) { throw new TYPE_1 ( STRING_2 , VAR_1 ) ; } } else { throw new TYPE_2 ( java.lang.String.format ( STRING_3 , VAR_1 ) ) ; } } 
public static void METHOD_1 ( java.lang.String [ ] args ) { boolean VAR_1 = false ; try { new TYPE_1 ( ) . run ( args ) ; VAR_1 = true ; } catch ( java.lang.Exception e ) { if ( e instanceof java.lang.IllegalArgumentException ) { TYPE_1 . METHOD_2 ( ) ; } android.util.Log.e ( TYPE_1 . TAG , STRING_1 , e ) ; VAR_2 . println ( ( STRING_2 + e ) ) ; } TYPE_2 . METHOD_3 ( ( VAR_1 ? 0 : 1 ) ) ; } 
public static void METHOD_1 ( ) { new TYPE_1 < TYPE_2 , TYPE_2 , TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( TYPE_2 ... args ) { TYPE_3 VAR_1 ; try { VAR_1 = TYPE_3 . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_4 e ) { VAR_1 = null ; } synchronized ( VAR_2 ) { VAR_3 = VAR_1 ; } return null ; } } . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) ; METHOD_4 ( VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 ) ; assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) ; METHOD_4 ( VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 parent , TYPE_1 VAR_1 , int VAR_2 ) { if ( parent == ( VAR_3 . METHOD_2 ( ) ) ) { for ( int i = 0 , n = VAR_4 . size ( ) ; i < n ; i ++ ) { int VAR_5 = VAR_4 . get ( i ) ; if ( VAR_5 >= VAR_2 ) { VAR_4 . set ( i , ( VAR_5 - 1 ) ) ; } } assert ! ( VAR_6 . METHOD_3 ( VAR_1 ) ) ; } } 
public int METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( device ) ; } 
public static void METHOD_1 ( int id , int parent ) { if ( id == parent ) { TYPE_1 . error ( STRING_1 ) ; return ; } try { VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( id ) ; TYPE_2 . METHOD_4 ( id , VAR_2 , parent ) ; } catch ( java.lang.Throwable e ) { throw TYPE_3 . METHOD_5 ( e ) ; } finally { VAR_1 . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { java.io.File f = new java.io.File ( VAR_1 ) ; if ( f . METHOD_2 ( ) ) { VAR_2 = true ; is = METHOD_3 ( f ) ; } else { is = new TYPE_1 ( new TYPE_2 ( f ) ) ; long VAR_3 = f . length ( ) ; length = ( VAR_3 <= ( VAR_4 ) ) ? ( ( int ) ( VAR_3 ) ) : VAR_4 ; } VAR_5 = true ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) throws java.lang.IllegalArgumentException { mRS . METHOD_2 ( ) ; if ( ( VAR_2 < 0 ) || ( VAR_2 >= ( VAR_3 ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } int id = ( VAR_1 != null ) ? VAR_1 . METHOD_3 ( mRS ) : 0 ; mRS . METHOD_4 ( METHOD_3 ( mRS ) , VAR_2 , id ) ; } 
public static void METHOD_1 ( final TYPE_1 context , final TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { TYPE_3 . e ( STRING_1 , STRING_2 ) ; return ; } TYPE_4 . METHOD_2 ( ( ) - > { new TYPE_5 ( context . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) ; } ) ; } 
static void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . println ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { java.lang.System.out.println ( STRING_2 ) ; if ( VAR_4 ) java.lang.System.out.println ( ( STRING_3 + VAR_3 ) ) ; } catch ( java.lang.Exception ex ) { VAR_2 . println ( STRING_4 ) ; } } 
private void METHOD_1 ( ) { mRS = TYPE_1 . METHOD_2 ( this ) ; VAR_1 = android.renderscript.Allocation . METHOD_3 ( mRS , VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 = android.renderscript.Allocation . METHOD_3 ( mRS , VAR_6 , VAR_3 , VAR_4 ) ; VAR_7 = new TYPE_2 ( mRS , METHOD_4 ( ) , VAR_8 ) ; VAR_7 . METHOD_5 ( VAR_1 , VAR_5 ) ; VAR_5 . METHOD_6 ( VAR_6 ) ; } 
double METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , TYPE_1 VAR_5 , TYPE_1 VAR_6 , java.lang.String VAR_7 , java.lang.String VAR_8 ) { double VAR_9 = 0 ; if ( ! ( VAR_4 . equals ( VAR_8 ) ) ) { VAR_9 = METHOD_2 ( VAR_2 , VAR_6 ) ; } else if ( ! ( VAR_3 . equals ( VAR_7 ) ) ) { VAR_9 += FLOAT_1 ; } else { } return VAR_9 ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.util.Map < java.lang.String , java.lang.String > VAR_3 ) { try ( TYPE_2 VAR_4 = VAR_1 . METHOD_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , null ) ) { for ( java.lang.String VAR_5 : VAR_4 . METHOD_3 ( ) ) { if ( ! ( VAR_3 . METHOD_4 ( VAR_5 ) ) ) { VAR_3 . METHOD_5 ( VAR_5 , ( ( VAR_2 + CHAR_1 ) + VAR_5 ) ) ; } } } } 
public boolean METHOD_1 ( TYPE_1 field ) { if ( ( ( ( field == ( VAR_1 ) ) || ( field == ( VAR_2 ) ) ) || ( field == ( VAR_3 ) ) ) || ( field == ( VAR_4 ) ) ) { return false ; } return VAR_5 super . METHOD_1 ( field ) ; } 
public void METHOD_1 ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { TYPE_2 session = TYPE_3 . METHOD_3 ( ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 . METHOD_3 ( ) , VAR_5 ) ; for ( TYPE_5 VAR_6 : VAR_3 ) { TYPE_6 VAR_7 = VAR_6 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_7 ) ; VAR_7 . METHOD_6 ( VAR_1 ) ; } } } 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 key , char [ ] VAR_2 , TYPE_2 [ ] VAR_3 ) throws TYPE_3 { if ( ( VAR_2 != null ) && ( ( VAR_2 . length ) > 0 ) ) { throw new TYPE_3 ( STRING_1 ) ; } if ( key instanceof TYPE_4 ) { METHOD_2 ( VAR_1 , ( ( TYPE_4 ) ( key ) ) , VAR_3 ) ; } else { throw new TYPE_3 ( STRING_2 ) ; } } 
private void METHOD_1 ( long VAR_1 , short type , byte [ ] VAR_2 , int VAR_3 , int VAR_4 , byte [ ] VAR_5 , int VAR_6 , int VAR_7 ) throws java.io.IOException { byte [ ] VAR_8 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; byte [ ] VAR_9 = VAR_10 . METHOD_3 ( VAR_1 , type , VAR_5 , VAR_6 , VAR_7 ) ; if ( ! ( TYPE_1 . METHOD_4 ( VAR_8 , VAR_9 ) ) ) { throw new TYPE_2 ( VAR_11 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . d ( this , STRING_1 , VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; synchronized ( VAR_3 ) { VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } VAR_5 . METHOD_5 ( VAR_1 ) ; } 
static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 ) { TYPE_1 d = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 ) ) ; return true ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) ; if ( ( ( VAR_4 ) != null ) && ( ! ( VAR_2 . METHOD_4 ( VAR_5 ) ) ) ) { METHOD_5 ( null ) ; } } } 
public TYPE_1 METHOD_1 ( ) { TYPE_1 pkg = super . METHOD_1 ( ) ; if ( pkg == null ) { try { pkg = TYPE_2 . METHOD_2 ( null , METHOD_3 ( ) , 0 , null , 0 , null , null , null , TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) ; METHOD_8 ( pkg ) ; } catch ( java.lang.Exception e ) { METHOD_9 ( STRING_1 , e.toString ( ) ) ; } } return pkg ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this ) { if ( VAR_2 ) { return ; } TYPE_2 node ; try { node = METHOD_2 ( ) ; node . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( METHOD_4 ( VAR_1 ) , e ) ; } VAR_2 = true ; } VAR_1 . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 ) ; if ( ( VAR_1 ) != null ) { METHOD_2 ( STRING_3 , VAR_1 ) ; } if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { METHOD_2 ( STRING_4 , VAR_2 . toString ( ) ) ; } if ( ! ( VAR_3 . METHOD_3 ( ) ) ) { METHOD_2 ( STRING_5 , VAR_3 . toString ( ) ) ; } METHOD_4 ( FLOAT_1 ) ; TYPE_1 . f VAR_4 ; TYPE_2 VAR_5 ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 device : VAR_2 ) { java.lang.String name = device . METHOD_4 ( ) ; if ( name == null ) { name = device . METHOD_5 ( ) ; } if ( name . equals ( VAR_1 ) ) { return device ; } } return null ; } 
private void METHOD_1 ( int VAR_1 ) { assert VAR_1 <= ( VAR_2 . size ( ) ) ; for ( int VAR_3 = ( VAR_4 ) + 1 ; VAR_3 <= VAR_1 ; VAR_3 ++ ) { ( ( TYPE_1 < ? > . VAR_5 ) ( VAR_2 . get ( VAR_3 ) ) ) . METHOD_2 ( VAR_2 . get ( ( VAR_3 - 1 ) ) . METHOD_3 ( ) ) ; } VAR_4 = VAR_1 ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; java.lang.System.out.println ( STRING_1 ) ; if ( Main . METHOD_3 ( ) ) { java.lang.System.out.println ( STRING_2 ) ; } Main . set ( 0 ) ; Main . set ( 1 ) ; Main . set ( 2 ) ; Main . set ( 4 ) ; Main . set ( 8 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( false ) ; VAR_1 . METHOD_5 ( true ) ; VAR_1 . METHOD_6 ( 0 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_2 , VAR_3 ) ; TYPE_3 VAR_5 = new TYPE_3 ( VAR_2 , VAR_3 ) ; METHOD_7 ( new TYPE_4 ( VAR_1 , VAR_4 , VAR_5 ) ) ; } 
private void METHOD_1 ( ) { long VAR_1 ; long VAR_2 ; VAR_1 = TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; if ( VAR_3 ) { VAR_2 = VAR_1 ; VAR_1 = TYPE_1 . METHOD_2 ( ) ; android.util.Log . i ( VAR_4 . TAG , ( ( STRING_1 + ( VAR_1 - VAR_2 ) ) + STRING_2 ) ) ; } if ( ( VAR_5 ) || ( ( VAR_6 ) == null ) ) { return ; } METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_3 , VAR_4 ) ; VAR_4 . METHOD_6 ( output ) ; for ( int x = 0 ; x < ( VAR_5 ) ; x ++ ) { for ( int y = 0 ; y < ( VAR_5 ) ; y ++ ) { METHOD_7 ( x , y ) ; } } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 . METHOD_1 ( ) , new TYPE_5 < TYPE_6 , TYPE_2 > ( ) { public TYPE_2 METHOD_4 ( TYPE_6 VAR_2 ) { return new TYPE_7 ( VAR_2 ) ; } } ) ) ; } 
public void run ( ) { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { VAR_1 . METHOD_2 ( true ) ; java.lang.String VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( ( ( ( VAR_2 != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) && ( ! ( VAR_2 . METHOD_4 ( STRING_1 ) ) ) ) && ( ! ( result . METHOD_5 ( STRING_1 ) ) ) ) { VAR_1 . append ( STRING_1 ) ; } VAR_1 . append ( result ) ; } } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) { return true ; } else if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( VAR_3 ) == ( VAR_4 ) ) && ( VAR_5 . equals ( VAR_6 ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ! ( METHOD_2 ( VAR_3 , STRING_1 ) ) ) { throw new TYPE_2 ( STRING_2 ) ; } synchronized ( VAR_4 ) { TYPE_3 VAR_5 = METHOD_3 ( VAR_1 ) ; if ( VAR_5 == null ) { android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) ; return ; } VAR_6 = VAR_2 ; } } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + device ) ) ; TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( device ) ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) return true ; if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) return false ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ! ( VAR_3 . equals ( VAR_4 ) ) ) return false ; return true ; } 
private TYPE_1 METHOD_1 ( final int VAR_1 , final TYPE_1 VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( new TYPE_2 ( ) { public boolean METHOD_4 ( int s ) { if ( ! ( VAR_2 . METHOD_5 ( s ) ) ) { METHOD_1 ( s , VAR_2 ) ; } return true ; } } ) ; } return VAR_2 ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 ) { if ( ( VAR_3 ) == null ) return ; if ( METHOD_2 ( ) ) { VAR_4 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 , VAR_2 ) ; } } ) ; return ; } VAR_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String name = TYPE_2 . METHOD_2 ( VAR_1 ) ; int VAR_2 = name . METHOD_3 ( CHAR_1 ) ; if ( ( VAR_2 > 0 ) && ( ! ( name . METHOD_4 ( STRING_1 ) ) ) ) { return ( name . METHOD_5 ( 0 , VAR_2 ) ) + ( name . METHOD_5 ( ( VAR_2 + 1 ) ) ) ; } } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) ; METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) , VAR_3 ) ; VAR_5 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_3 ) ; TYPE_1 VAR_6 = METHOD_7 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_6 ) ; TYPE_2 . assertTrue ( VAR_6 . METHOD_8 ( ) ) ; TYPE_2 . assertTrue ( VAR_6 . METHOD_9 ( ) . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( ) ; org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_4 class ) ) ; assertEquals ( VAR_2 , false ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) { if ( ( VAR_4 ) == null ) { VAR_4 = new TYPE_3 ( VAR_5 . METHOD_2 ( ) ) ; } boolean result = VAR_4 . METHOD_1 ( ( ( TYPE_4 ) ( VAR_1 ) ) , VAR_3 . METHOD_3 ( ) ) ; if ( result && VAR_2 ) { java.lang.Runnable r = new java.lang.Runnable ( ) { public void run ( ) { } } ; result = VAR_3 . METHOD_4 ( r ) ; } return result ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.io.File VAR_2 , java.lang.String name , TYPE_3 action , java.io.File VAR_3 , java.io.File VAR_4 ) { TYPE_1 VAR_5 ; if ( ( VAR_6 ) == ( VAR_7 ) ) { VAR_5 = new TYPE_4 ( run , VAR_1 , VAR_8 , name , VAR_2 , action , VAR_3 ) ; } else { VAR_5 = new TYPE_5 ( VAR_6 . METHOD_2 ( ) , VAR_9 , VAR_1 , VAR_8 , name , VAR_2 , action , VAR_3 , VAR_4 , VAR_10 ) ; } return VAR_5 ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( device ) ; TYPE_3 [ ] VAR_2 = TYPE_2 . METHOD_2 ( device ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( device , VAR_2 ) ; if ( ( VAR_3 ) >= 3 ) { TYPE_5 . METHOD_5 ( this , device ) ; METHOD_6 ( device ) ; } } 
java.lang.String getName ( TYPE_1 type ) { if ( ( VAR_1 ) == null ) { return null ; } java.lang.String name = null ; switch ( type ) { case VAR_2 : name = VAR_1 [ 0 ] ; break ; case VAR_3 : name = VAR_1 [ 1 ] ; break ; } return name ; } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( TYPE_2 . METHOD_2 ( context ) ) ) { TYPE_3 . i ( STRING_1 , STRING_2 ) ; return null ; } TYPE_1 VAR_1 = TYPE_4 . get ( context ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; return VAR_1 ; } 
public final void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( this ) ; if ( ( VAR_2 ) == ( VAR_3 ) ) { for ( java.lang.Object value : METHOD_3 ( ) ) { if ( value instanceof TYPE_2 ) { if ( ! ( VAR_4 ) ) { ( ( TYPE_2 ) ( value ) ) . METHOD_4 ( this ) ; } VAR_1 . METHOD_5 ( this , ( ( TYPE_2 ) ( value ) ) ) ; } } VAR_4 = true ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 number ) { if ( ! ( TYPE_4 . METHOD_2 ( VAR_1 ) ) ) { return TYPE_5 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; } return VAR_2 . METHOD_5 ( ( ) - > { return METHOD_6 ( TYPE_6 . of ( number ) ) . get ( number ) ; } ) ; } 
public void METHOD_1 ( int i ) throws java.lang.RuntimeException { if ( ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) { throw new java.lang.RuntimeException ( ) ; } if ( i > ( ( VAR_1 ) - 1 ) ) { return ; } value [ ( i > > > 5 ) ] |= VAR_2 [ ( i & INT_1 ) ] ; return ; } 
boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( VAR_2 ) ; VAR_4 = VAR_1 ; VAR_5 . METHOD_2 ( VAR_6 ) ; VAR_5 . METHOD_3 ( VAR_6 , 0 ) ; return true ; } return false ; } 
public boolean METHOD_1 ( TYPE_1 v ) { if ( ( VAR_1 . size ( ) ) > 0 ) { boolean result = false ; if ( ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_2 ( v ) ) { VAR_3 . METHOD_3 ( ) ; result = true ; } METHOD_4 ( v , VAR_1 ) ; return result ; } return false ; } 
private static java.lang.String getName ( java.lang.String s ) { int i = TYPE_1 . METHOD_1 ( s , true ) ; java.lang.String name = VAR_1 [ VAR_2 [ i ] [ 1 ] ] ; int VAR_3 = VAR_2 [ i ] [ 2 ] ; boolean VAR_4 = VAR_3 < 0 ; if ( VAR_4 ) VAR_3 = - VAR_3 ; if ( VAR_3 < 0 ) name += STRING_1 ; else name += STRING_2 ; return name ; } 
static synchronized int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } TYPE_1 VAR_5 = new TYPE_1 ( VAR_6 , VAR_2 ) ; if ( ( VAR_7 ) != null ) { VAR_5 . METHOD_3 ( ) ; } else { VAR_8 . METHOD_4 ( VAR_5 ) ; } return VAR_4 . METHOD_5 ( VAR_5 ) ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( this , VAR_2 , null ) ; VAR_1 . METHOD_3 ( this , VAR_3 , null ) ; VAR_1 . METHOD_4 ( this , VAR_4 , null ) ; VAR_1 . METHOD_5 ( this , VAR_5 , null ) ; VAR_1 . METHOD_6 ( this , VAR_6 , null ) ; VAR_1 . METHOD_7 ( this , VAR_7 , null ) ; VAR_1 . METHOD_8 ( this , VAR_8 , null ) ; VAR_1 . METHOD_9 ( this , VAR_9 , null ) ; } 
private void METHOD_1 ( byte [ ] address , int VAR_1 , int VAR_2 ) { TYPE_1 event = new TYPE_1 ( VAR_3 ) ; int VAR_4 = ( VAR_2 == 1 ) ? VAR_5 : VAR_6 ; VAR_7 = new TYPE_2 ( VAR_1 , VAR_4 , VAR_8 ) ; event . device = METHOD_2 ( address ) ; METHOD_3 ( VAR_9 , event ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 VAR_2 = METHOD_2 ( VAR_3 ) ; if ( VAR_2 != null ) { VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; } METHOD_5 ( ) ; } catch ( java.lang.Throwable e ) { throw METHOD_6 ( x , e ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( VAR_2 ) != ( this ) ) { throw new TYPE_3 ( ) ; } final TYPE_4 VAR_3 = this . VAR_3 ; VAR_3 . METHOD_2 ( ) ; boolean VAR_4 = false ; try { VAR_4 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_4 ) { VAR_3 . METHOD_4 ( ) ; } } return VAR_4 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { android.content.Intent i = new android.content.Intent ( this , VAR_3 class ) ; i . METHOD_2 ( VAR_4 , VAR_2 ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 . name , TYPE_4 . METHOD_5 ( VAR_5 ) , i ) ) ; } 
protected static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_1 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 ; } return new TYPE_1 ( TYPE_5 . METHOD_3 ( VAR_1 , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; } 
private void METHOD_1 ( TYPE_1 < TYPE_2 , TYPE_3 > node , TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 ) { TYPE_1 < TYPE_2 , TYPE_3 > parent = node . parent ; node . parent = null ; if ( VAR_1 != null ) { VAR_1 . parent = parent ; } if ( parent != null ) { if ( ( VAR_2 ) == node ) { VAR_2 = VAR_1 ; } else { assert ( VAR_3 ) == node ; VAR_3 = VAR_1 ; } } else { VAR_4 = VAR_1 ; } } 
public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 r ) { long VAR_2 = ( ( VAR_3 ) & ( VAR_4 ) ) | ( ( VAR_5 ) & ( r . METHOD_2 ( ) ) ) ; VAR_2 = VAR_2 | ( VAR_6 ) ; VAR_2 = VAR_2 & ( ~ ( VAR_7 ) ) ; return new TYPE_1 ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { METHOD_2 ( VAR_1 ) ; int VAR_4 = ( VAR_3 != null ) ? METHOD_3 ( VAR_1 , VAR_3 ) : VAR_5 ; try { final int VAR_6 = ( VAR_3 == null ) ? 0 : VAR_7 ; TYPE_4 . METHOD_4 ( VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_6 ) ; } finally { if ( VAR_4 != ( VAR_5 ) ) TYPE_4 . METHOD_5 ( VAR_8 , VAR_4 ) ; } } 
protected boolean METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; VAR_1 = false ; } if ( ( VAR_2 ) != null ) { java.util.List < android.bluetooth.BluetoothDevice > VAR_3 = METHOD_3 ( ) ; for ( android.bluetooth.BluetoothDevice VAR_4 : VAR_3 ) { METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; } VAR_2 . METHOD_5 ( ) ; } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( 5 ) , 1 ) ; TYPE_3 VAR_2 = TYPE_3 . METHOD_4 ( VAR_1 ) ; VAR_1 . METHOD_5 ( ) ; assertTrue ( VAR_1 . METHOD_6 ( ) ) ; assertFalse ( VAR_2 . METHOD_7 ( ) ) ; try { TYPE_3 . METHOD_4 ( VAR_1 ) ; } catch ( TYPE_4 expected ) { } VAR_1 . METHOD_5 ( ) ; } 
private TYPE_1 METHOD_1 ( final java.lang.String packageName ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return packageName ; } protected void METHOD_3 ( ) { } } ; VAR_1 . METHOD_4 ( VAR_5 , new TYPE_2 ( STRING_4 ) ) ; return VAR_1 ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String key = VAR_2 ; for ( java.io.File element : VAR_1 . METHOD_2 ( ) ) { java.lang.String VAR_3 = element . getName ( ) ; if ( ( ! ( VAR_3 . METHOD_3 ( STRING_1 ) ) ) && ( ! ( VAR_3 . METHOD_3 ( STRING_2 ) ) ) ) { return null ; } key += STRING_3 + ( TYPE_2 . METHOD_4 ( element ) ) ; } return key ; } 
public void run ( final TYPE_1 VAR_1 ) { new TYPE_2 ( false ) { public boolean METHOD_1 ( TYPE_3 VAR_2 ) { if ( ( ( VAR_2 . METHOD_2 ( ) ) == 1 ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) == ( VAR_3 ) ) ) { VAR_2 . METHOD_5 ( ) ; } return false ; } public TYPE_1 METHOD_6 ( ) { return VAR_1 ; } } . METHOD_7 ( ) ; } 
public static java.lang.String toString ( TYPE_1 < TYPE_2 > VAR_1 ) { java.lang.StringBuilder VAR_2 = new java.lang.StringBuilder ( ) ; VAR_2 . append ( STRING_1 ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; ++ i ) { if ( i > 0 ) { VAR_2 . append ( STRING_2 ) ; } VAR_2 . append ( TYPE_3 . toString ( VAR_1 . METHOD_1 ( i ) ) ) ; } VAR_2 . append ( STRING_3 ) ; return VAR_2 . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; TYPE_3 . METHOD_3 ( VAR_1 , STRING_1 ) ; TYPE_3 . METHOD_3 ( VAR_1 , STRING_2 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_3 , VAR_3 . METHOD_5 ( STRING_4 ) . get ( ) ) ; org.junit.Assert.assertEquals ( STRING_5 , VAR_3 . METHOD_5 ( STRING_4 ) . get ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int c = TYPE_1 . METHOD_2 ( ) ; int s = TYPE_1 . METHOD_3 ( c ) ; try { TYPE_1 . METHOD_4 ( s ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } TYPE_1 . METHOD_5 ( s ) ; TYPE_1 . METHOD_6 ( c ) ; TYPE_3 . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) ; TYPE_1 result = TYPE_3 . METHOD_5 ( VAR_1 , INT_1 , STRING_1 ) ; assertEquals ( match , result ) ; } 
public static void METHOD_1 ( long [ ] expected , long [ ] VAR_1 ) { assertEquals ( expected . length , VAR_1 . length ) ; for ( int i = 0 ; i < ( expected . length ) ; i ++ ) { TYPE_1 . METHOD_2 ( expected [ i ] , VAR_1 [ i ] ) ; } } 
private void METHOD_1 ( java.io.File source , java.io.File VAR_1 ) { if ( source . equals ( VAR_1 ) ) { TYPE_1 . METHOD_2 ( ) . info ( java.lang.String.format ( STRING_1 , source , source . length ( ) , source . METHOD_3 ( ) ) ) ; } } 
private void METHOD_1 ( ) { if ( VAR_1 ) { android.util.Log.v ( VAR_2 . TAG , STRING_1 ) ; } TYPE_1 . METHOD_2 ( this , VAR_3 , VAR_4 , VAR_5 . get ( ) , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; if ( ( VAR_10 ) != null ) { VAR_10 . METHOD_3 ( ) ; VAR_10 = null ; } METHOD_4 ( ) ; if ( ( VAR_11 ) != null ) { VAR_11 . METHOD_5 ( null ) ; } } 
TYPE_1 METHOD_1 ( boolean VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) == null ) { TYPE_3 VAR_4 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 project = METHOD_3 ( ) ; TYPE_5 VAR_5 = VAR_4 . METHOD_4 ( project ) ; VAR_3 = new TYPE_1 ( VAR_2 , VAR_5 , project , VAR_6 ) ; } else if ( VAR_1 ) { VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ; VAR_3 . METHOD_7 ( ) . METHOD_6 ( ) ; } return VAR_3 ; } 
public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; if ( ! ( VAR_4 ) ) { assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_5 ) ) ) ; } super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , STRING_2 , INT_1 , INT_2 , CHAR_1 , 0 , INT_3 , 6 ) ; METHOD_4 ( VAR_1 , STRING_2 , INT_1 , INT_2 , CHAR_1 , 0 , INT_3 , 6 ) ; METHOD_4 ( VAR_1 , STRING_3 , INT_2 , INT_1 , CHAR_1 , 0 , INT_3 , 6 ) ; METHOD_4 ( VAR_1 , STRING_2 , CHAR_1 , 0 , INT_3 , 6 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 , int VAR_3 , java.util.Set < TYPE_3 > VAR_4 , boolean VAR_5 ) { if ( ! ( METHOD_2 ( ) ) ) { return null ; } if ( ! ( METHOD_3 ( VAR_1 ) ) ) { return null ; } TYPE_4 VAR_6 = METHOD_4 ( ) ; TYPE_5 VAR_7 = VAR_8 . METHOD_5 ( ) ; return METHOD_6 ( VAR_7 , VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final int VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; assertTrue ( ( VAR_1 != ( VAR_2 ) ) ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; try { TYPE_1 . METHOD_2 ( STRING_2 ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( VAR_2 ) ; ++ i ) { TYPE_2 VAR_3 = new TYPE_2 ( i ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; } assertEquals ( VAR_4 , VAR_1 . size ( ) ) ; } 
static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 pkg = VAR_3 . METHOD_2 ( ) ; if ( ( VAR_3 . METHOD_3 ( ) ) == null ) { VAR_1 . print ( TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) ; } if ( pkg != null ) { VAR_1 . println ( ( ( STRING_1 + ( pkg . name ( ) ) ) + STRING_2 ) ) ; } TYPE_5 . METHOD_6 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( com.android.jack.ir.ast.JMethod method , TYPE_2 VAR_1 ) { TYPE_3 options = new TYPE_3 ( ) ; VAR_2 = VAR_3 ; VAR_4 = VAR_5 ; int VAR_6 = METHOD_2 ( method ) ; int VAR_7 ; TYPE_4 VAR_8 ; if ( VAR_9 ) { VAR_8 = TYPE_5 . METHOD_3 ( VAR_1 ) ; } else { VAR_8 = null ; } if ( VAR_10 ) { VAR_7 = VAR_11 ; } else { VAR_7 = VAR_12 ; } return TYPE_6 . METHOD_4 ( VAR_1 , VAR_7 , VAR_8 , VAR_6 , options ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { switch ( VAR_1 ) { case VAR_3 : return TYPE_5 . METHOD_2 ( VAR_2 ) ; case VAR_4 : return new TYPE_6 ( VAR_1 , VAR_2 ) ; case VAR_5 : return new TYPE_7 ( VAR_1 , VAR_2 ) ; case VAR_6 : return new TYPE_8 ( VAR_1 , VAR_2 ) ; default : throw new TYPE_4 ( ( STRING_1 + VAR_1 ) ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 { final short VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_1 ) ; args . METHOD_2 ( STRING_2 , VAR_2 ) ; TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 ) ; TYPE_4 . METHOD_6 ( VAR_3 ) ; } 
public java.lang.String METHOD_1 ( ) { int VAR_1 = count ; int VAR_2 = 0 ; while ( ( VAR_2 < VAR_1 ) && ( ( METHOD_2 ( VAR_2 ) ) <= CHAR_1 ) ) { VAR_2 ++ ; } while ( ( VAR_2 < VAR_1 ) && ( ( METHOD_2 ( ( VAR_1 - 1 ) ) ) <= CHAR_1 ) ) { VAR_1 -- ; } return ( VAR_2 > 0 ) || ( VAR_1 < ( count ) ) ? METHOD_3 ( VAR_2 , VAR_1 ) : this ; } 
public final TYPE_1 METHOD_1 ( int i , long x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
private static java.lang.String METHOD_1 ( TYPE_1 config ) { if ( config == null ) { return null ; } java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) . append ( STRING_1 ) . append ( VAR_1 ) . append ( STRING_2 ) . append ( VAR_2 ) . append ( STRING_3 ) . append ( VAR_3 ) . append ( STRING_4 ) . append ( VAR_4 ) . append ( STRING_5 ) . append ( VAR_5 ) ; return sb . toString ( ) ; } 
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { TYPE_2 VAR_3 = null ; TYPE_3 VAR_4 ; if ( ( VAR_1 . type ) == null ) { VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 . Object class ) ; } else { VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 . type ) ; } java.lang.String id = STRING_1 + ( ( VAR_6 ) ++ ) ; VAR_3 = new TYPE_2 ( id , id , VAR_4 , null ) ; VAR_7 . METHOD_4 ( VAR_1 , VAR_3 ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 source ) { java.util.ArrayList < TYPE_2 > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { for ( TYPE_2 s : VAR_2 ) { if ( s . equals ( source ) ) { return true ; } } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( true ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; TYPE_3 . METHOD_4 ( new java.io.File ( VAR_5 , STRING_1 ) , new java.io.File ( VAR_5 , STRING_2 ) ) ; TYPE_4 VAR_6 = TYPE_2 . METHOD_5 ( VAR_3 , VAR_5 , VAR_4 ) ; assertEquals ( 1 , VAR_7 . size ( ) ) ; assertEquals ( new TYPE_5 ( VAR_8 , STRING_3 , VAR_9 , VAR_10 , VAR_11 ) , VAR_7 . get ( 0 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; TYPE_2 p = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( p , 0 ) ; p . METHOD_4 ( 0 ) ; TYPE_1 VAR_10 = TYPE_3 . METHOD_5 ( p ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_10 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 location , java.lang.String VAR_3 , java.lang.Object data ) { if ( ( VAR_2 != null ) && ( VAR_4 . METHOD_2 ( this , VAR_1 , VAR_2 ) ) ) { return ; } super . METHOD_1 ( VAR_1 , location , VAR_3 , data ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { byte [ ] VAR_1 = new byte [ ] { INT_1 , - INT_2 , INT_3 , 100 , INT_4 , INT_5 , 3 , 0 , 0 , INT_6 , 0 , INT_7 , 0 } ; TYPE_1 in = new TYPE_2 ( new TYPE_3 ( VAR_1 ) ) ; assertEquals ( 1 , in . METHOD_2 ( ) ) ; assertEquals ( 4 , in . METHOD_3 ( 4 ) ) ; assertEquals ( 0 , in . METHOD_2 ( ) ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , android.os.Bundle VAR_3 ) { if ( VAR_1 == null ) throw new java.lang.IllegalArgumentException ( STRING_1 ) ; try { return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } } 
public TYPE_1 METHOD_1 ( android.bluetooth.BluetoothDevice device ) { METHOD_2 ( VAR_1 , STRING_1 ) ; if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( ( STRING_2 + device ) + STRING_3 ) ) ; } if ( device == null ) { device = VAR_4 ; } if ( device == null ) { return null ; } synchronized ( VAR_5 ) { TYPE_2 VAR_6 = VAR_5 . get ( device ) ; if ( VAR_6 != null ) { return VAR_6 . METHOD_1 ( ) ; } return null ; } } 
public static byte [ ] METHOD_1 ( long VAR_1 ) { byte [ ] VAR_2 = new byte [ VAR_3 ] ; int index = VAR_3 ; while ( ( index -- ) > 0 ) { VAR_2 [ index ] = ( ( byte ) ( VAR_1 ) ) ; VAR_1 = VAR_1 > > 8 ; } return VAR_2 ; } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 , boolean VAR_8 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , INT_1 , VAR_9 , VAR_9 , VAR_9 , VAR_9 , VAR_8 ) ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = ( VAR_1 == null ) ? null : VAR_1 . METHOD_2 ( ) ; return ( VAR_3 != null ) && ( VAR_2 . equals ( VAR_3 . METHOD_3 ( ) ) ) ; } 
public int METHOD_1 ( int slotId , java.util.List < TYPE_1 > VAR_1 ) { try { TYPE_2 service = METHOD_2 ( ) ; if ( service != null ) { return service . METHOD_1 ( slotId , VAR_1 ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ; } return - 1 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ; final int VAR_4 = VAR_3 . size ( ) ; for ( int VAR_5 = 0 ; VAR_5 < VAR_4 ; VAR_5 ++ ) assertTrue ( STRING_1 , ( ( VAR_3 . get ( VAR_5 ) ) == ( VAR_2 . get ( ( ( VAR_4 - VAR_5 ) - 1 ) ) ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) { int size = ( this . METHOD_2 ( ) ) > > 1 ; int VAR_1 = METHOD_3 ( ) ; return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; } 
public void METHOD_1 ( java.lang.String server , int VAR_1 ) throws java.io.IOException , TYPE_1 { if ( ( VAR_2 ) != null ) METHOD_2 ( ) ; VAR_2 = METHOD_3 ( server , VAR_1 ) ; try { VAR_3 = new TYPE_2 ( new TYPE_3 ( VAR_2 . METHOD_4 ( ) ) , true , VAR_4 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ( ( VAR_4 ) + STRING_1 ) ) ; } VAR_5 = new TYPE_6 ( VAR_2 . METHOD_5 ( ) ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; METHOD_8 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 , VAR_6 ) ; VAR_1 . METHOD_2 ( VAR_7 , VAR_8 ) ; VAR_1 . METHOD_2 ( VAR_9 , VAR_10 ) ; TYPE_3 VAR_11 = TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ; java.lang.String VAR_12 = VAR_11 . METHOD_6 ( VAR_13 ) ; VAR_1 . METHOD_2 ( VAR_14 , VAR_12 ) ; } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location ; if ( VAR_2 != null ) { location = context . METHOD_2 ( VAR_2 ) ; TYPE_4 VAR_4 = context . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( STRING_1 ) ; location . METHOD_4 ( VAR_4 ) ; } else { location = context . METHOD_2 ( VAR_1 ) ; } context . METHOD_5 ( VAR_5 , VAR_1 . METHOD_6 ( ) , location , VAR_3 , null ) ; } 
private boolean METHOD_1 ( ) throws TYPE_1 , java.io.IOException { byte [ ] request = TYPE_2 . METHOD_2 ( STRING_1 ) ; try { TYPE_2 . METHOD_3 ( VAR_1 , request ) ; TYPE_3 VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 , false ) ; if ( ( VAR_3 ) == false ) { TYPE_4 . e ( STRING_2 , ( STRING_3 + ( VAR_4 ) ) ) ; } return VAR_3 ; } catch ( java.io.IOException e ) { TYPE_4 . e ( STRING_2 , STRING_4 ) ; VAR_1 . METHOD_5 ( ) ; throw e ; } } 
public void METHOD_1 ( TYPE_1 d ) { if ( d != null ) { d . METHOD_2 ( this ) ; int VAR_1 = VAR_2 . METHOD_3 ( ) ; if ( ( VAR_3 ) < VAR_1 ) { VAR_3 = VAR_1 ; METHOD_4 ( ) ; } } VAR_4 = d ; if ( ! ( VAR_5 ) ) { VAR_6 = d ; METHOD_5 ( ) ; } } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_1 VAR_2 ) { if ( VAR_3 ) { android.util.Log.d ( TYPE_2 . TAG , STRING_1 ) ; } if ( VAR_4 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; } METHOD_3 ( ) ; VAR_5 = VAR_6 ; if ( ( VAR_7 ) != null ) { android.os.Message msg = android.os.Message . METHOD_4 ( VAR_7 ) ; VAR_8 = VAR_9 ; msg . METHOD_5 ( ) ; if ( VAR_4 ) { android.util.Log.v ( TYPE_2 . TAG , STRING_2 ) ; } } } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; TYPE_2 VAR_2 = METHOD_2 ( VAR_3 ) ; if ( VAR_2 != null ) { VAR_1 = VAR_2 . METHOD_1 ( VAR_4 ) ; if ( VAR_1 == null ) { METHOD_3 ( STRING_1 ) ; } } return VAR_1 ; } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; if ( ( VAR_2 . METHOD_2 ( ) ) != null ) { TYPE_2 VAR_4 = VAR_2 . METHOD_2 ( ) ; if ( VAR_4 != null ) { TYPE_3 VAR_5 = VAR_4 . METHOD_3 ( ) ; if ( VAR_5 != null ) { TYPE_2 VAR_6 = VAR_5 . METHOD_4 ( VAR_7 , VAR_1 ) ; if ( VAR_6 != null ) { return VAR_6 . METHOD_5 ( ) ; } } } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_1 ) ; return ; } assertTrue ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; boolean VAR_2 = TYPE_2 . METHOD_5 ( VAR_1 ) ; if ( ! VAR_2 ) { TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_2 ) ; return ; } METHOD_6 ( VAR_3 , INT_1 , INT_2 , 4 ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 , java.util.List < java.io.File > VAR_3 ) { if ( VAR_1 == null ) { return ; } for ( java.lang.String path : VAR_1 . METHOD_2 ( STRING_1 ) ) { try { TYPE_1 sb = VAR_4 . METHOD_3 ( path ) ; if ( ( ! VAR_2 ) || ( TYPE_2 . METHOD_4 ( VAR_5 ) ) ) { VAR_3 . METHOD_5 ( new java.io.File ( path ) ) ; } } catch ( TYPE_3 VAR_6 ) { } } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_2 VAR_5 , TYPE_4 callback ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , 0 , callback , new TYPE_5 ( TYPE_6 . METHOD_2 ( ) ) ) ; } 
public void METHOD_1 ( ) { s = new TYPE_1 ( STRING_1 ) ; try { s . METHOD_2 ( null ) ; fail ( STRING_2 ) ; } catch ( java.lang.NullPointerException e ) { } s . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_1 ) ) ; assertEquals ( new TYPE_2 ( STRING_1 , STRING_1 ) , s . locale ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 node ) { TYPE_4 pos = ( ( TYPE_4 ) ( METHOD_2 ( node ) ) ) ; if ( pos != null ) { return TYPE_1 . METHOD_3 ( VAR_1 , pos , ( ( TYPE_4 ) ( pos . METHOD_4 ( ) ) ) ) ; } return null ; } 
public boolean METHOD_1 ( TYPE_1 source , TYPE_2 [ ] VAR_1 ) { final boolean VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , source , VAR_1 ) ; METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { if ( VAR_2 || ( ( VAR_5 . METHOD_4 ( ) ) != ( VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ) ) ) { METHOD_7 ( ) ; } } } ) ; return ! ( METHOD_8 ( ) ) ; } 
public static final TYPE_1 METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { switch ( VAR_1 ) { case VAR_3 : return new TYPE_2 ( ( ( TYPE_2 ) ( VAR_2 ) ) ) ; default : return TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) , VAR_2 ) ; } } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( VAR_3 != null ) { VAR_4 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , TYPE_2 . METHOD_4 ( VAR_2 ) , TYPE_2 . METHOD_4 ( VAR_3 ) ) ; } else { VAR_4 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , TYPE_2 . METHOD_4 ( VAR_2 ) ) ; } } 
private static int METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 , TYPE_2 VAR_4 , int VAR_5 ) { if ( VAR_1 && ( VAR_5 == 0 ) ) { return - 1 ; } if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( VAR_5 ) ; if ( ! VAR_3 ) { VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ; } } return VAR_5 ; } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , int VAR_5 ) { TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( ( VAR_2 - VAR_4 ) , ( VAR_3 - VAR_4 ) , ( VAR_2 + VAR_4 ) , ( VAR_3 + VAR_4 ) ) , VAR_5 ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertFalse ( STRING_1 , ( ( VAR_5 ) == 0 ) ) ; TYPE_2 VAR_6 = VAR_1 . METHOD_2 ( ) ; assertEquals ( VAR_3 , VAR_7 ) ; assertEquals ( STRING_1 , 0 , VAR_8 ) ; METHOD_3 ( VAR_1 ) ; } 
public void METHOD_1 ( android.bluetooth.BluetoothDevice device , TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == false ) { android.util.Log.e ( TYPE_2 . TAG , STRING_1 ) ; return ; } synchronized ( VAR_3 ) { if ( VAR_4 . METHOD_2 ( device , VAR_1 ) ) { return ; } TYPE_3 VAR_5 = new TYPE_3 ( 0 , device , VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; METHOD_4 ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; if ( ! ( VAR_1 . METHOD_5 ( ) ) ) { int VAR_2 = VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ; assertTrue ( STRING_1 , ( ( VAR_2 >= 0 ) && ( VAR_2 <= INT_1 ) ) ) ; int VAR_3 = VAR_1 . METHOD_6 ( ) . METHOD_8 ( ) ; assertTrue ( STRING_2 , ( ( VAR_3 >= 0 ) && ( VAR_3 <= INT_1 ) ) ) ; } } 
void METHOD_1 ( android.os.Message msg ) { if ( ( VAR_1 ) != null ) { android.os.Message VAR_2 = android.os.Message . METHOD_2 ( ) ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; try { VAR_1 . METHOD_3 ( VAR_2 ) ; } catch ( android.os.RemoteException e ) { } } else { } } 
public TYPE_1 METHOD_1 ( TYPE_2 path ) throws TYPE_3 , TYPE_4 , TYPE_5 { TYPE_6 VAR_1 = this ; TYPE_7 < java.lang.String > VAR_2 = path . METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.String name ; while ( VAR_2 . METHOD_4 ( ) ) { name = VAR_2 . METHOD_5 ( ) ; if ( VAR_2 . METHOD_4 ( ) ) { VAR_1 = VAR_3 . METHOD_6 ( VAR_1 , name ) ; } else { return VAR_3 . METHOD_1 ( VAR_1 , name ) ; } } throw new TYPE_8 ( ) ; } 
public void METHOD_1 ( android.os.Message msg ) { METHOD_2 ( ( STRING_1 + ( VAR_1 ) ) ) ; switch ( VAR_1 ) { case VAR_2 : METHOD_2 ( STRING_2 ) ; METHOD_3 ( ( ( TYPE_1 ) ( msg.obj ) ) , msg.arg1 ) ; break ; case VAR_3 : METHOD_2 ( STRING_3 ) ; METHOD_4 ( ( ( TYPE_1 ) ( msg.obj ) ) ) ; break ; case VAR_4 : METHOD_2 ( STRING_4 ) ; METHOD_5 ( ( ( TYPE_1 ) ( msg.obj ) ) ) ; break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( VAR_1 , VAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_1 ) ) ) { throw new TYPE_3 ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_2 . METHOD_5 ( ) ) ) + STRING_3 ) + ( VAR_1 . METHOD_5 ( ) ) ) ) ; } } 
private java.lang.String METHOD_1 ( java.lang.String number , java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( TYPE_1 . METHOD_2 ( number ) ) { return STRING_1 ; } if ( TYPE_2 . METHOD_3 ( number ) ) { return number ; } if ( TYPE_1 . METHOD_2 ( VAR_2 ) ) { VAR_2 = VAR_3 ; } return TYPE_3 . METHOD_4 ( number , VAR_1 , VAR_2 ) ; } 
private void METHOD_1 ( ) { java.lang.String VAR_1 = ( STRING_1 + STRING_2 ) + ( VAR_2 ) ; if ( VAR_3 ) { TYPE_1 . d ( VAR_4 , VAR_1 ) ; } VAR_5 . log ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { METHOD_2 ( VAR_2 ) ; } else { java.lang.String VAR_6 = VAR_7 . METHOD_3 ( ) ; if ( ! ( TYPE_2 . METHOD_4 ( VAR_6 ) ) ) { METHOD_5 ( VAR_6 ) ; } } } 
public void METHOD_1 ( ) throws android.os.RemoteException { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_3 ( VAR_5 , VAR_3 , 0 , 0 , 0 ) ; org.mockito.Mockito.verify ( VAR_6 , TYPE_1 . METHOD_4 ( ) ) . METHOD_3 ( org.mockito.Matchers . METHOD_5 ( ) , org.mockito.Matchers . METHOD_5 ( ) , org.mockito.Matchers . METHOD_5 ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } else { try { TYPE_3 . METHOD_2 ( VAR_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new TYPE_2 ( ( STRING_2 + VAR_1 ) ) ; } } VAR_2 = VAR_1 ; return this ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String action ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { return VAR_2 . get ( VAR_1 ) ; } TYPE_2 . w ( this , STRING_1 , action , VAR_1 ) ; return TYPE_3 . METHOD_3 ( ) ; } 
public int [ ] METHOD_1 ( int [ ] src , int [ ] VAR_1 ) { return new int [ ] { VAR_1 [ 0 ] , VAR_1 [ 1 ] , src [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( 100 ) , TYPE_2 . METHOD_4 ( 5 ) , TYPE_2 . METHOD_5 ( INT_1 ) ) ; java.lang.String VAR_3 = java.lang.String . METHOD_6 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 ) ; TYPE_3 . METHOD_7 ( VAR_3 , VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 a ) { float VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; float VAR_3 = TYPE_2 . METHOD_2 ( VAR_4 ) ; VAR_5 = ( ( VAR_1 * ( VAR_6 ) ) + ( VAR_3 * ( VAR_5 ) ) ) / ( VAR_3 * ( VAR_3 - ( VAR_6 ) ) ) ; VAR_2 /= VAR_4 ; return this ; } 
public TYPE_1 [ ] METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) ; return new TYPE_1 [ 0 ] ; } TYPE_3 service = METHOD_3 ( ) ; if ( service == null ) return new TYPE_1 [ 0 ] ; return service . METHOD_1 ( device ) ; } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( 4 ) . METHOD_2 ( 1 , 3 , 2 ) . METHOD_2 ( 3 , 2 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_6 ( 1 ) . METHOD_7 ( 1 ) ) ; assertEquals ( 2 , VAR_1 . METHOD_6 ( 2 ) . METHOD_7 ( 1 ) ) ; assertEquals ( 3 , VAR_1 . METHOD_6 ( 3 ) . METHOD_7 ( 1 ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { if ( ! ( TYPE_3 . equals ( VAR_1 , VAR_2 ) ) ) { TYPE_4 . w ( this , ( STRING_1 + STRING_2 ) ) ; return ; } if ( ( VAR_3 ) == null ) { TYPE_5 VAR_4 = VAR_5 . METHOD_2 ( info , null , VAR_2 , VAR_6 ) ; METHOD_3 ( VAR_4 , VAR_7 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( VAR_1 ) ) { return ; } TYPE_1 [ ] VAR_2 = new TYPE_1 [ ] { VAR_3 , VAR_4 } ; byte [ ] VAR_5 = new byte [ ] { 1 , 2 , 3 , 4 } ; TYPE_2 result = VAR_6 . METHOD_2 ( VAR_2 , null , VAR_5 ) ; assertEquals ( 0 , result . METHOD_3 ( ) . size ( ) ) ; assertEquals ( 0 , result . METHOD_4 ( ) . size ( ) ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( boolean VAR_1 , java.lang.String ... VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( ) ; try { METHOD_3 ( VAR_4 < java.lang.String > METHOD_4 ( ) , VAR_3 , VAR_2 ) ; return TYPE_3 . METHOD_5 ( VAR_3 , new TYPE_4 ( ) , VAR_1 ) ; } finally { VAR_3 . METHOD_6 ( ) ; } } 
public TYPE_1 [ ] METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) == null ) { java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_4 : VAR_2 ) { if ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_5 ) ) { VAR_3 . METHOD_3 ( VAR_4 ) ; } } VAR_2 = VAR_3 . METHOD_4 ( new TYPE_1 [ VAR_3 . size ( ) ] ) ; } return VAR_2 ; } } 
public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String name , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String [ ] VAR_4 ) { if ( ( ! ( VAR_5 ) ) && ( ! ( VAR_6 . METHOD_2 ( ) ) ) ) { METHOD_3 ( VAR_1 , name , VAR_2 ) ; } return super . METHOD_1 ( VAR_1 , name , VAR_2 , VAR_3 , VAR_4 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { TYPE_3 b = new TYPE_3 ( VAR_1 ) ; b . METHOD_2 ( VAR_3 ) ; b . METHOD_3 ( VAR_3 ) ; b . METHOD_4 ( VAR_4 ) ; b . METHOD_5 ( VAR_4 ) ; VAR_2 = b . METHOD_6 ( ) ; } return VAR_2 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 { assert ( VAR_2 ) != null ; assert ( VAR_3 ) != null ; assert ( VAR_4 ) != null ; TYPE_5 VAR_5 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_6 type = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_5 , VAR_2 , type ) ; for ( TYPE_7 VAR_7 : VAR_8 ) { VAR_6 . METHOD_4 ( VAR_7 . METHOD_1 ( VAR_1 ) ) ; } return VAR_6 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 ) ; } if ( VAR_2 == null ) { VAR_2 = TYPE_6 . METHOD_2 ( VAR_1 ) ; } if ( VAR_2 == null ) { VAR_2 = TYPE_7 . METHOD_2 ( VAR_1 ) ; } } return VAR_2 ; } 
private void METHOD_1 ( TYPE_1 context ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { TYPE_4 . METHOD_4 ( context ) ; TYPE_5 . e ( STRING_1 , STRING_2 ) ; } else { TYPE_6 call = VAR_1 . METHOD_5 ( ) ; if ( call != null ) { call . METHOD_6 ( ) . METHOD_7 ( context ) ; } } } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_2 . get ( 1 ) . METHOD_3 ( ) ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { try { return METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( VAR_1 , VAR_2 ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_4 ( METHOD_6 ( ) , VAR_2 , VAR_1 ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( METHOD_6 ( ) , VAR_2 , VAR_1 ) ; } catch ( TYPE_7 e ) { throw new TYPE_4 ( METHOD_6 ( ) , VAR_2 , VAR_1 ) ; } } 
public final TYPE_1 METHOD_1 ( short x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; if ( ( ! ( VAR_2 . METHOD_4 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) { throw new TYPE_2 ( ( STRING_1 + ( this ) ) , ( STRING_2 + ( this ) ) , STRING_3 ) ; } return VAR_1 ; } 
public static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { android.util.Log . i ( VAR_1 , ( ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ; TYPE_2 log = new TYPE_2 ( STRING_3 , STRING_4 ) ; log . METHOD_3 ( STRING_5 , VAR_2 , VAR_3 , VAR_4 ) ; log . METHOD_3 ( STRING_6 , TYPE_1 . METHOD_4 ( ) , VAR_3 , VAR_4 ) ; try { log . METHOD_5 ( null ) ; } catch ( java.lang.NullPointerException e ) { } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ; if ( ( ( VAR_2 != null ) && ( ! ( VAR_2 instanceof TYPE_3 ) ) ) || ( ( VAR_3 != null ) && ( ! ( VAR_3 instanceof TYPE_3 ) ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } return super . METHOD_1 ( VAR_1 ) ; } 
public static final TYPE_1 METHOD_1 ( TYPE_2 locale ) { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( locale , VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_3 ( ) ; if ( TYPE_5 . equals ( VAR_3 ) ) { return TYPE_5 ; } if ( TYPE_6 . equals ( VAR_3 ) ) { return TYPE_6 ; } if ( TYPE_7 . equals ( VAR_3 ) ) { return TYPE_7 ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final long VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_2 ) ; if ( VAR_1 == 0 ) { return ; } final int VAR_3 = 6 ; java.lang.String VAR_4 = STRING_1 ; TYPE_1 . METHOD_4 ( METHOD_3 ( ) , VAR_5 , VAR_1 , VAR_2 , VAR_3 , VAR_6 , VAR_4 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String type ) { if ( VAR_3 ) { TYPE_4 VAR_4 = VAR_5 ; if ( VAR_4 != null ) { TYPE_1 value = TYPE_5 . METHOD_1 ( ( ( TYPE_6 ) ( VAR_4 ) ) ) ; if ( ( value != null ) && ( value . METHOD_2 ( ) ) ) { return value ; } } } return super . METHOD_1 ( VAR_1 , VAR_2 , type ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 p , float VAR_2 , android.renderscript.Allocation VAR_3 ) { int id = VAR_1 . METHOD_2 ( VAR_4 , false , VAR_3 . METHOD_3 ( VAR_1 ) , 0 , VAR_2 ) ; TYPE_1 VAR_5 = new TYPE_1 ( id , VAR_1 , p , null , null , VAR_2 ) ; return VAR_5 ; } 
public int METHOD_1 ( java.util.Map < ? , ? > VAR_1 , java.util.Map < ? , ? > VAR_2 ) { java.lang.Object VAR_3 = VAR_1 . get ( VAR_4 ) ; java.lang.Object VAR_5 = VAR_2 . get ( VAR_4 ) ; if ( ! ( METHOD_2 ( VAR_3 ) ) ) { return METHOD_2 ( VAR_5 ) ? 1 : 0 ; } else if ( ! ( METHOD_2 ( VAR_5 ) ) ) { return - 1 ; } return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_5 ) ; } 
public static int METHOD_1 ( ) { int a ; int b ; int c ; a = Main . METHOD_2 ( 1 ) ; b = Main . METHOD_2 ( 2 ) ; a += b ; b = Main . METHOD_2 ( 5 ) ; c = Main . METHOD_2 ( 6 ) ; b += c ; c = a + b ; return c ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_2 instanceof TYPE_3 ) && ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ) { VAR_3 . append ( new TYPE_4 ( VAR_1 , new TYPE_5 ( VAR_1 . METHOD_4 ( ) , VAR_2 , VAR_1 ) ) ) ; } } 
public void METHOD_1 ( java.lang.String VAR_1 , int index , int VAR_2 , TYPE_1 VAR_3 , TYPE_1 VAR_4 ) { if ( VAR_5 ) TYPE_2 . d ( VAR_6 . TAG , ( ( ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) + STRING_5 ) + VAR_4 ) ) ; TYPE_3 VAR_7 = ( ( TYPE_3 ) ( VAR_8 . METHOD_2 ( VAR_2 ) ) ) ; VAR_7 . set ( VAR_4 ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_3 ) + STRING_7 ) ; final java.lang.String expected = STRING_8 + ( STRING_9 + STRING_10 ) ; assertEquals ( expected , METHOD_2 ( VAR_1 ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 entry ) { TYPE_2 VAR_2 = VAR_3 . get ( ) ; if ( VAR_2 == null ) { return ; } if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( VAR_4 ) ; } else { TYPE_3 VAR_5 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_5 , entry ) ) ; } } 
void METHOD_1 ( boolean VAR_1 ) { TYPE_1 . v ( this , STRING_1 , VAR_1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_1 = false ; TYPE_1 . v ( this , STRING_2 ) ; } VAR_3 . METHOD_3 ( ( VAR_1 ? VAR_4 : VAR_5 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; } catch ( java.lang.NullPointerException expected ) { } try { TYPE_1 . METHOD_2 ( VAR_1 ) ; } catch ( java.lang.NullPointerException expected ) { } final byte [ ] VAR_2 = new byte [ 20 ] ; long VAR_3 = TYPE_1 . METHOD_3 ( STRING_1 ) ; TYPE_2 VAR_4 = new TYPE_2 ( TYPE_1 . METHOD_4 ( VAR_3 ) ) ; try { TYPE_1 . METHOD_2 ( VAR_4 ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } } 
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) . METHOD_3 ( this ) ; TYPE_1 VAR_2 = METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; TYPE_3 VAR_5 = METHOD_2 ( VAR_6 ) ; VAR_5 . METHOD_6 ( VAR_7 ) ; METHOD_7 ( VAR_5 ) ; } 
public TYPE_1 METHOD_1 ( int i , double x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) ; return this ; } 
private void METHOD_1 ( char expected ) throws java.io.IOException , TYPE_1 { int c = METHOD_2 ( ) ; if ( c != expected ) { METHOD_3 ( ( ( ( ( STRING_1 + expected ) + STRING_2 ) + ( ( char ) ( c ) ) ) + STRING_3 ) ) ; } ( VAR_1 ) ++ ; } 
private static void METHOD_1 ( int VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { try { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( java.lang.NullPointerException VAR_4 ) { throw VAR_4 ; } catch ( java.lang.RuntimeException re ) { throw new java.lang.IllegalArgumentException ( ( ( ( STRING_1 + ( re . getMessage ( ) ) ) + STRING_2 ) + VAR_3 ) ) ; } } 
private static boolean METHOD_1 ( TYPE_1 context , java.lang.String number ) { if ( ( number != null ) && ( number . METHOD_2 ( VAR_1 ) ) ) { TYPE_2 VAR_2 = context . METHOD_3 ( VAR_3 class ) ; boolean VAR_4 = ( ( VAR_5 ) >= ( VAR_6 ) ) && ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_7 ) ) ; boolean VAR_8 = ( VAR_2 . METHOD_5 ( ) ) == ( VAR_9 ) ; return VAR_4 && VAR_8 ; } return false ; } 
public static java.lang.String METHOD_1 ( java.lang.String address ) { if ( TYPE_1 . METHOD_2 ( address ) ) { return address ; } java.lang.String VAR_1 = TYPE_2 . METHOD_3 ( address ) ; if ( VAR_1 != null ) { return VAR_1 ; } if ( TYPE_2 . METHOD_4 ( address ) ) { return address ; } return null ; } 
private TYPE_1 [ ] METHOD_1 ( TYPE_2 target ) { if ( target != null ) { TYPE_1 [ ] VAR_1 = target . METHOD_1 ( ) ; if ( ( ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) && ( ! ( target . METHOD_2 ( ) ) ) ) { VAR_1 = target . METHOD_3 ( ) . METHOD_1 ( ) ; } if ( VAR_1 != null ) { return VAR_1 ; } } return new TYPE_1 [ 0 ] ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.io.File VAR_2 , java.util.Map < java.lang.String , java.lang.String > VAR_3 ) throws TYPE_1 { java.lang.String VAR_4 = ( ( VAR_5 ) + ( VAR_6 ) ) + ( VAR_7 ) ; final java.lang.String VAR_8 = ( VAR_4 + ( VAR_6 ) ) + VAR_1 ; METHOD_2 ( VAR_8 , VAR_2 , VAR_3 ) ; } 
public static java.lang.String METHOD_1 ( ) throws java.io.IOException { synchronized ( VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) ; while ( VAR_2 == null ) { try { VAR_3 . METHOD_3 ( ) ; } catch ( java.io.IOException VAR_4 ) { } VAR_5 . in = new TYPE_1 ( new TYPE_2 ( VAR_6 ) ) ; VAR_2 = VAR_3 . METHOD_2 ( ) ; } return VAR_2 ; } } 
private boolean METHOD_1 ( java.lang.String [ ] VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return false ; } java.util.List VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 . METHOD_4 ( VAR_3 ) ) { android.util.Log.d ( VAR_4 . TAG , STRING_1 ) ; return true ; } for ( java.lang.String VAR_5 : VAR_6 ) { if ( ! ( VAR_2 . METHOD_4 ( VAR_5 ) ) ) { return false ; } } android.util.Log.d ( VAR_4 . TAG , STRING_2 ) ; return true ; } 
public void run ( ) { VAR_1 = STRING_1 ; TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_4 != null ) { VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) ; VAR_4 . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_4 ) ; } } 
private void METHOD_1 ( final java.lang.String number , final TYPE_1 VAR_1 ) { if ( TYPE_2 . get ( this ) . METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( number ) , new TYPE_5 ( ) { public void METHOD_6 ( ) { METHOD_7 ( number , VAR_1 ) ; } } , VAR_2 ) . METHOD_8 ( METHOD_9 ( ) , VAR_3 ) ; } else { METHOD_7 ( number , VAR_1 ) ; } } 
static void METHOD_1 ( int VAR_1 , float [ ] VAR_2 , int VAR_3 , float [ ] src , int VAR_4 , int VAR_5 , boolean VAR_6 ) { TYPE_1 d = VAR_7 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return ; } if ( VAR_6 ) { d . METHOD_3 ( VAR_2 , VAR_3 , src , VAR_4 , VAR_5 ) ; } else { d . METHOD_4 ( VAR_2 , VAR_3 , src , VAR_4 , VAR_5 ) ; } } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_2 . getName ( ) ; java.lang.String VAR_4 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ! ( VAR_4 . METHOD_5 ( ) ) ) { VAR_3 = ( VAR_3 + ( VAR_5 ) ) + VAR_4 ; } return VAR_3 ; } 
public boolean METHOD_1 ( int slotId , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) throws android.os.RemoteException { synchronized ( VAR_5 ) { TYPE_1 VAR_6 = METHOD_2 ( slotId , VAR_1 ) ; if ( VAR_6 != null ) { return VAR_6 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 ) ; } } return false ; } 
public static < TYPE_1 > int METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 < ? super TYPE_1 > VAR_2 ) { TYPE_4 . METHOD_2 ( VAR_2 , STRING_1 ) ; int i = 0 ; while ( VAR_1 . METHOD_3 ( ) ) { TYPE_1 VAR_3 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 . METHOD_5 ( VAR_3 ) ) { return i ; } i ++ ; } return - 1 ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_5 ( VAR_1 , INT_1 , STRING_3 ) ; METHOD_6 ( result ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String ... VAR_3 ) { TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; assertNotNull ( VAR_4 ) ; java.util.List < ? extends TYPE_3 > VAR_5 = TYPE_2 . METHOD_4 ( VAR_3 ) ; TYPE_3 match = VAR_4 . METHOD_5 ( VAR_5 ) ; assertEquals ( VAR_2 , VAR_5 . METHOD_6 ( match ) ) ; } 
private void METHOD_1 ( java.util.Set < java.lang.String > VAR_1 , java.util.Map < java.lang.String , java.util.Set < java.lang.String > > VAR_2 , java.util.Set < java.lang.String > VAR_3 ) { for ( java.lang.String VAR_4 : VAR_3 ) { if ( VAR_1 . METHOD_2 ( VAR_4 ) ) { for ( java.lang.String VAR_5 : METHOD_3 ( VAR_2 , VAR_4 ) ) { VAR_1 . METHOD_2 ( VAR_5 ) ; } } } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 log ) throws TYPE_4 { synchronized ( VAR_2 ) { TYPE_1 VAR_3 ; if ( ( VAR_3 = VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ) != null ) { return VAR_3 ; } VAR_3 = new TYPE_1 ( VAR_1 , log ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) , VAR_3 ) ; return VAR_3 ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = new TYPE_4 ( ) ; VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; TYPE_5 . METHOD_3 ( VAR_9 , ret ) ; } VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) ; } } 
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { long VAR_2 = METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 VAR_3 = METHOD_4 ( VAR_2 , STRING_1 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 , STRING_2 ) ; VAR_1 . METHOD_5 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; boolean VAR_2 = true ; for ( TYPE_2 VAR_3 : VAR_4 ) { if ( ! ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) { if ( VAR_2 ) { VAR_2 = false ; } else { TYPE_2 . METHOD_3 ( sb , VAR_5 ) ; } sb.append ( VAR_3 . METHOD_1 ( VAR_1 ) ) ; } } return sb . toString ( ) ; } 
public void METHOD_1 ( ) { for ( int type = 0 ; type <= 8 ; type ++ ) { try { new TYPE_1 ( ) . METHOD_2 ( type , ( ( java.lang.String ) ( null ) ) ) ; fail ( STRING_1 ) ; } catch ( java.io.IOException VAR_1 ) { } } } 
public TYPE_1 METHOD_1 ( TYPE_2 type ) { if ( type == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_3 VAR_1 = type . METHOD_3 ( ) ; TYPE_1 result = VAR_2 . get ( VAR_1 ) ; if ( result == null ) { result = new TYPE_1 ( type ) ; VAR_2 . METHOD_4 ( VAR_1 , result ) ; } return result ; } 
protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_2 . METHOD_3 ( VAR_1 [ i ] . toString ( ) , STRING_1 ) ; } } 
public TYPE_1 METHOD_1 ( ) { assert ( METHOD_2 ( ) ) != null ; java.lang.String VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 . METHOD_4 ( ) ) { return new TYPE_1 ( ) ; } return TYPE_1 . METHOD_5 ( TYPE_2 . on ( CHAR_1 ) . METHOD_6 ( VAR_1 ) ) ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { METHOD_2 ( TYPE_4 . METHOD_3 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_1 ( ) ; } synchronized ( VAR_2 ) { VAR_2 . METHOD_1 ( ) ; } synchronized ( VAR_3 ) { VAR_3 . METHOD_1 ( ) ; } synchronized ( VAR_4 ) { VAR_4 . METHOD_1 ( ) ; } synchronized ( VAR_5 ) { VAR_5 . METHOD_1 ( ) ; } } 
public void METHOD_1 ( ) { int VAR_1 = INT_1 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { METHOD_2 ( ( ( ( STRING_1 + ( i + 1 ) ) + STRING_2 ) + VAR_1 ) , INT_2 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 , STRING_2 , STRING_3 ) ) ) ) ; java.lang.String text = STRING_4 ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( text ) ; VAR_2 . METHOD_4 ( 1 ) ; assertEquals ( 0 , VAR_2 . METHOD_5 ( ) ) ; } 
private static void METHOD_1 ( ) throws java.lang.Exception { long VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; int size = ( ( int ) ( VAR_1 / INT_1 ) ) ; int VAR_2 = INT_2 ; long VAR_3 = 0 ; for ( int i = 0 ; i < VAR_2 ; ++ i ) { VAR_4 . METHOD_4 ( size ) ; VAR_3 += size ; } while ( VAR_3 > 0 ) { VAR_4 . METHOD_5 ( size ) ; VAR_3 -= size ; } } 
private java.lang.String METHOD_1 ( int status ) { if ( status == ( VAR_1 ) ) { return STRING_1 ; } else if ( status == ( VAR_2 ) ) { return STRING_2 ; } else if ( status == ( VAR_3 ) ) { return STRING_3 ; } else if ( status == ( VAR_4 ) ) { return STRING_4 ; } else { return STRING_5 ; } } 
public void METHOD_1 ( TYPE_1 request , int VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( VAR_1 <= 0 ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } int VAR_4 = METHOD_2 ( VAR_5 ) ; TYPE_4 VAR_6 = new TYPE_4 ( VAR_3 ) ; METHOD_1 ( request , VAR_2 , VAR_1 , VAR_4 , VAR_6 ) ; } 
private boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) == null ) { try { VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 class . METHOD_3 ( VAR_4 ) ) ; return true ; } catch ( TYPE_2 e ) { VAR_5 . error ( e , null ) ; VAR_2 = new java.util.ArrayList < TYPE_3 > ( ) ; } catch ( java.lang.Exception e ) { VAR_5 . error ( null , STRING_1 ) ; VAR_2 = new java.util.ArrayList < TYPE_3 > ( ) ; } } } return false ; } 
private TYPE_1 METHOD_1 ( java.lang.String content ) { try { TYPE_1 VAR_1 = new TYPE_1 ( content ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; return VAR_1 ; } catch ( TYPE_2 e ) { android.util.Log.w ( VAR_2 . TAG , e ) ; } return null ; } 
private void METHOD_1 ( final java.lang.String VAR_1 , final java.lang.Class < ? extends TYPE_1 > type ) { METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public void METHOD_3 ( TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = VAR_2 . METHOD_4 ( VAR_1 , type ) ; } } ) ; } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this ) { int index = METHOD_2 ( VAR_1 , false ) ; if ( index < 0 ) { return VAR_2 ; } TYPE_2 r = ( ( TYPE_2 ) ( VAR_3 . get ( index ) ) ) ; return VAR_4 . METHOD_3 ( r ) ; } } 
public java.lang.String METHOD_1 ( int number ) { byte [ ] VAR_1 = TYPE_1 . METHOD_2 ( 4 ) . METHOD_3 ( number ) . METHOD_4 ( ) ; VAR_1 = TYPE_2 . METHOD_5 ( VAR_1 , 2 , 4 ) ; return TYPE_3 . METHOD_6 ( VAR_1 , ( ( VAR_2 ) | ( VAR_3 ) ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( ) ; int subId = METHOD_3 ( ) ; if ( ! ( TYPE_2 . METHOD_4 ( subId ) ) ) { return ; } TYPE_3 < java.lang.String , TYPE_1 > VAR_3 = new TYPE_3 ( VAR_1 , VAR_2 ) ; METHOD_5 ( VAR_4 , VAR_3 , subId ) ; } 
private java.lang.String METHOD_1 ( int id ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( id , null ) ; if ( VAR_1 == null ) { android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + id ) + STRING_2 ) ) ; return STRING_3 ; } java.lang.String packageName = VAR_1 . METHOD_1 ( ) ; if ( VAR_4 ) android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_4 + id ) + STRING_5 ) + packageName ) ) ; return packageName ; } 
void METHOD_1 ( ) { for ( TYPE_1 t : VAR_1 ) { final TYPE_2 VAR_2 = t . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( ) ; } final TYPE_2 VAR_3 = t . METHOD_4 ( ) ; if ( VAR_3 != null ) { VAR_2 . METHOD_3 ( ) ; } } } 
public void METHOD_1 ( TYPE_1 pw , java.lang.String VAR_1 ) { pw.println ( ( ( ( ( ( ( ( ( ( ( VAR_1 + STRING_1 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) ) ; } 
public TYPE_1 < TYPE_2 , java.lang.Integer > METHOD_1 ( java.lang.String VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , java.io.IOException { if ( VAR_3 ) { java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } TYPE_1 < TYPE_2 , TYPE_5 > result = TYPE_6 . METHOD_2 ( VAR_1 , false , VAR_2 , null ) ; return TYPE_1 . of ( result . METHOD_3 ( ) , result . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; java.io.File VAR_3 = METHOD_3 ( ) ; TYPE_4 VAR_4 = new TYPE_4 ( STRING_1 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_1 , VAR_4 , false ) ; METHOD_7 ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; VAR_1 = 0 ; VAR_2 . size = 1 ; VAR_3 = VAR_4 . METHOD_11 ( ) ; VAR_5 . METHOD_12 ( ) ; VAR_5 . METHOD_13 ( VAR_6 ) ; VAR_5 . METHOD_14 ( VAR_7 ) ; new TYPE_2 ( ) . METHOD_15 ( VAR_4 ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , STRING_1 ) ; java.io.File VAR_2 = new java.io.File ( VAR_1 , VAR_3 ) ; java.io.File VAR_4 = new java.io.File ( VAR_1 , VAR_5 ) ; java.io.File VAR_6 = new java.io.File ( VAR_1 , VAR_7 ) ; TYPE_2 . assertTrue ( VAR_2 . METHOD_4 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_4 ( ) ) ; TYPE_2 . assertTrue ( VAR_6 . METHOD_4 ( ) ) ; } 
private boolean METHOD_1 ( TYPE_1 app ) { if ( ( ( ( ( ( app . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_3 ) ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_4 ) ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_5 ) ) ) { return false ; } return true ; } 
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , STRING_1 ) ; } VAR_1 = null ; VAR_4 . METHOD_2 ( VAR_5 ) ; } VAR_6 . METHOD_3 ( false ) ; VAR_6 . METHOD_4 ( ) ; } 
public void METHOD_1 ( boolean VAR_1 ) { if ( ( ( ( VAR_2 ) & ( VAR_3 ) ) != 0 ) != VAR_1 ) { VAR_2 = ( ( VAR_2 ) & ( ~ ( VAR_3 ) ) ) | ( VAR_1 ? VAR_3 : 0 ) ; if ( ! VAR_1 ) METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { java.lang.String content = STRING_1 ; java.io.File input = TYPE_3 . METHOD_2 ( content ) ; java.io.File output = java.io.File . METHOD_3 ( STRING_2 , STRING_3 ) ; output . METHOD_4 ( ) ; TYPE_4 . METHOD_5 ( ) . METHOD_6 ( input , output , new TYPE_5 ( ) , VAR_1 , false , new TYPE_6 ( new TYPE_7 ( VAR_2 ) ) ) ; TYPE_3 . METHOD_7 ( content , output ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = VAR_2 class . METHOD_2 ( ( STRING_1 + name ) ) ; if ( VAR_1 != null ) { try { return TYPE_3 . METHOD_3 ( VAR_1 ) ; } catch ( java.io.IOException e ) { TYPE_4 . log ( e , STRING_2 , name ) ; } finally { try { VAR_1 . METHOD_4 ( ) ; } catch ( java.io.IOException e ) { } } } return null ; } 
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; java.util.List < TYPE_2 > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) . get ( VAR_1 ) ; for ( TYPE_2 p : VAR_2 ) { assertTrue ( ( ( STRING_2 + p ) + STRING_3 ) , p . METHOD_3 ( ) ) ; } } 
public void METHOD_1 ( int version , int VAR_1 , java.lang.String name , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String [ ] VAR_4 ) { VAR_5 = name ; VAR_6 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_7 ) ; super . METHOD_1 ( TYPE_2 . METHOD_3 ( version , VAR_8 ) , VAR_1 , name , VAR_2 , VAR_3 , VAR_4 ) ; } 
public java.util.List < android.bluetooth.BluetoothDevice > METHOD_1 ( int [ ] VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ; TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; return service . METHOD_1 ( VAR_1 ) ; } 
private void METHOD_1 ( android.os.Message msg , int VAR_1 , int VAR_2 ) { android.os.Message VAR_3 = android.os.Message . METHOD_2 ( ) ; VAR_4 = VAR_1 ; VAR_3 . arg1 = VAR_2 ; try { VAR_5 . METHOD_3 ( VAR_3 ) ; } catch ( android.os.RemoteException e ) { } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , java.lang.Object VAR_4 , TYPE_2 v , java.lang.String VAR_5 ) { Main . METHOD_2 ( ) ; java.lang.String [ ] VAR_6 = Main . METHOD_3 ( 0 , null , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; v . METHOD_4 ( VAR_6 , VAR_5 ) ; } 
TYPE_1 METHOD_1 ( android.bluetooth.BluetoothDevice device , int VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { for ( TYPE_1 VAR_4 : VAR_2 . METHOD_2 ( ) ) { android.util.Log.w ( VAR_5 . TAG , ( ( ( STRING_1 + ( VAR_4 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; if ( ( VAR_4 . METHOD_3 ( ) ) == VAR_1 ) return VAR_4 ; } } return null ; } 
static int METHOD_1 ( ) { TYPE_1 b = new TYPE_1 ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { int d = b . toString ( ) . METHOD_2 ( STRING_1 , 1 ) ; } return b . length ( ) ; } 
private void METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ; java.lang.String VAR_4 = VAR_1 . toString ( ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; if ( VAR_4 . equals ( STRING_1 ) ) { VAR_2 . METHOD_5 ( false ) ; } else { VAR_2 . METHOD_5 ( true ) ; } } 
public void METHOD_1 ( TYPE_1 < ? super TYPE_2 > VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( this ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_1 ( VAR_1 ) ; } } 
static void METHOD_1 ( int VAR_1 , int a , int r , int VAR_2 , int b ) { TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( ( a < < INT_1 ) | ( ( r & INT_2 ) < < 16 ) ) | ( ( VAR_2 & INT_2 ) < < 8 ) ) | ( b & INT_2 ) ) , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 c = TYPE_1 . METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } METHOD_5 ( TYPE_3 . METHOD_2 ( null ) ) ; c . METHOD_6 ( ) ; } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , float VAR_5 ) { TYPE_1 d = VAR_6 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return ; } TYPE_1 . METHOD_3 ( VAR_7 , ( - VAR_4 ) , ( - VAR_5 ) ) ; d . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_2 , VAR_3 ) ) ; d . METHOD_4 ( TYPE_1 . METHOD_6 ( VAR_4 , VAR_5 ) ) ; } 
protected TYPE_1 METHOD_1 ( java.io.File VAR_1 , java.io.File VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { TYPE_4 VAR_4 = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; if ( VAR_4 == null ) { return null ; } return TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 , VAR_3 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { TYPE_2 VAR_3 = VAR_4 [ i ] ; TYPE_2 VAR_5 = VAR_6 [ i ] ; if ( ( ( VAR_3 != null ) && ( VAR_5 != null ) ) && ( ( VAR_3 . METHOD_1 ( VAR_5 ) ) == false ) ) { return false ; } } return true ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . type = in . METHOD_2 ( ) ; VAR_2 = in . METHOD_2 ( ) ; VAR_3 = in . METHOD_2 ( ) ; VAR_4 = in . METHOD_2 ( ) ; VAR_5 = in . METHOD_2 ( ) ; VAR_6 = in . METHOD_3 ( ) ; VAR_7 = in . METHOD_3 ( ) ; VAR_8 = in . METHOD_4 ( ) ; return VAR_1 ; } 
public static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { return false ; } boolean VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ; boolean VAR_4 = VAR_2 == ( VAR_5 ) ; boolean VAR_6 = ( TYPE_3 . METHOD_4 ( VAR_2 ) ) || ( VAR_2 == ( VAR_7 ) ) ; return ( ( ! VAR_3 ) && ( VAR_4 || VAR_6 ) ) && ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; } 
void METHOD_1 ( int type , TYPE_1 VAR_1 ) { android.util.Log.d ( VAR_2 . TAG , ( ( ( STRING_1 + type ) + STRING_2 ) + VAR_1 ) ) ; long VAR_3 = METHOD_2 ( VAR_1 ) ; byte [ ] VAR_4 = TYPE_2 . METHOD_3 ( VAR_5 ) . METHOD_4 ( VAR_3 ) . METHOD_5 ( ) ; if ( type == ( VAR_6 ) ) METHOD_6 ( ) ; VAR_7 . METHOD_7 ( type , VAR_4 ) ; VAR_8 = VAR_3 ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , int value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) { final java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; new TYPE_2 ( ) { public boolean METHOD_2 ( TYPE_1 VAR_3 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; return true ; } public TYPE_3 METHOD_4 ( ) { return VAR_4 this ; } } . METHOD_5 ( VAR_1 ) ; return VAR_2 ; } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = ++ ( VAR_3 ) ; VAR_4 . METHOD_2 ( VAR_2 , VAR_1 ) ; assert ! ( VAR_5 . METHOD_3 ( VAR_1 ) ) ; VAR_5 . METHOD_4 ( VAR_1 ) ; if ( VAR_6 ) { java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_7 . METHOD_5 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( VAR_3 ) ) ; } TYPE_3 . METHOD_4 ( ) . METHOD_5 ( this ) ; TYPE_3 . METHOD_4 ( ) . METHOD_6 ( this ) ; TYPE_3 . METHOD_4 ( ) . METHOD_7 ( this ) ; TYPE_3 . METHOD_4 ( ) . METHOD_8 ( this ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 res , java.lang.String path , float VAR_2 ) { VAR_1 . METHOD_2 ( ) ; int VAR_3 = res . METHOD_3 ( ) . VAR_4 ; int VAR_5 = VAR_1 . METHOD_4 ( path , VAR_2 , VAR_3 ) ; if ( VAR_5 == 0 ) { throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; } TYPE_1 VAR_6 = new TYPE_1 ( VAR_5 , VAR_1 ) ; return VAR_6 ; } 
public int METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return VAR_3 ; } final TYPE_2 VAR_4 = METHOD_3 ( subId ) ; if ( VAR_4 == null ) { return VAR_3 ; } else { return VAR_4 . METHOD_4 ( ) ; } } 
public static void METHOD_1 ( ) { VAR_1 class . METHOD_2 ( ) . METHOD_3 ( true ) ; VAR_2 = new java.io.File [ ] { TYPE_1 . METHOD_4 ( STRING_1 ) } ; VAR_3 = new java.io.File [ ] { TYPE_1 . METHOD_4 ( STRING_2 ) } ; VAR_4 = TYPE_1 . METHOD_5 ( STRING_3 ) ; VAR_5 = new TYPE_2 ( TYPE_1 . METHOD_4 ( STRING_4 ) ) ; } 
private boolean METHOD_1 ( int flags ) { METHOD_2 ( ) ; return ( ( ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_3 ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) && ( ( flags & ( VAR_4 ) ) != 0 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final int VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { final int VAR_2 = TYPE_1 . METHOD_3 ( STRING_1 ) ; TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , null , true ) ; } finally { TYPE_1 . METHOD_5 ( VAR_1 ) ; } } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( method ) ; VAR_2 . METHOD_5 ( method ) ; } 
private static void METHOD_1 ( int VAR_1 , int expected , java.lang.String msg ) { if ( VAR_1 != expected ) { java.lang.System.out.println ( ( ( ( ( msg + STRING_1 ) + VAR_1 ) + STRING_2 ) + expected ) ) ; TYPE_1 . METHOD_2 ( ( - 1 ) ) ; } } 
static TYPE_1 METHOD_1 ( java.lang.String value ) { TYPE_2 m = TYPE_3 . METHOD_2 ( value ) ; if ( m . METHOD_3 ( ) ) { return new TYPE_1 ( m . METHOD_4 ( 2 ) , m . METHOD_4 ( 1 ) , m . METHOD_4 ( 3 ) ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ( ! ( VAR_1 ) ) || ( ! ( METHOD_2 ( 1 ) ) ) ) { return ; } int VAR_2 = METHOD_3 ( ) ; int VAR_3 = METHOD_4 ( VAR_4 , VAR_5 , VAR_6 ) ; METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( VAR_5 , VAR_7 , VAR_3 ) ; METHOD_5 ( VAR_3 ) ; METHOD_6 ( VAR_3 ) ; METHOD_6 ( VAR_2 ) ; } 
protected TYPE_1 METHOD_1 ( java.io.File VAR_1 , java.io.File VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 { TYPE_4 VAR_4 = TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; if ( VAR_4 == null ) { return null ; } return TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 , VAR_3 ) ; } 
public static java.lang.Class METHOD_1 ( Main m , boolean VAR_1 ) { if ( ! ( Main . METHOD_2 ( STRING_1 ) ) ) { return VAR_2 class ; } Main . METHOD_3 ( ) ; if ( VAR_1 ) { Main . METHOD_4 ( STRING_1 ) ; } Main VAR_3 = m . METHOD_5 ( ) ; if ( VAR_1 ) { while ( ! ( Main . METHOD_6 ( STRING_1 ) ) ) { } } return VAR_3 . METHOD_7 ( ) ; } 
static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.util.List < TYPE_4 > VAR_2 ) throws java.io.IOException { TYPE_5 < TYPE_2 > VAR_3 = new TYPE_5 < > ( ) ; for ( TYPE_4 path : VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_6 . METHOD_4 ( path ) ) ) ; } return VAR_3 . build ( ) ; } 
public static void METHOD_1 ( java.io.File VAR_1 ) throws java.io.IOException { java.io.File [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; } for ( java.io.File VAR_3 : VAR_2 ) { if ( VAR_3 . METHOD_3 ( ) ) { TYPE_1 . METHOD_1 ( VAR_3 ) ; } if ( ! ( VAR_3 . METHOD_4 ( ) ) ) { throw new java.io.IOException ( ( STRING_2 + VAR_3 ) ) ; } } } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( ( ( VAR_4 ) != VAR_1 ) || ( ( VAR_5 ) != VAR_2 ) ) || ( ( VAR_6 ) != VAR_3 ) ) { VAR_4 = ( ( VAR_7 ) && ( VAR_1 == ( VAR_8 ) ) ) ? METHOD_2 ( ) : VAR_1 ; VAR_5 = VAR_2 ; VAR_6 = VAR_3 ; METHOD_3 ( ) ; METHOD_4 ( new TYPE_1 ( ) . METHOD_5 ( ) ) ; METHOD_6 ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_3 data = VAR_2 . METHOD_3 ( VAR_1 ) ; if ( data != null ) { TYPE_4 VAR_3 = data . METHOD_4 ( ) ; TYPE_5 VAR_4 = VAR_3 . METHOD_5 ( ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; } } } } 
private int [ ] METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { int [ ] VAR_2 = new int [ 4 ] ; VAR_2 [ 0 ] = METHOD_2 ( VAR_1 ) ; VAR_2 [ 1 ] = METHOD_2 ( VAR_1 ) ; VAR_2 [ 2 ] = METHOD_2 ( VAR_1 ) ; VAR_2 [ 3 ] = METHOD_2 ( VAR_1 ) ; return VAR_2 ; } 
static boolean METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return false ; } TYPE_3 VAR_5 = new TYPE_3 ( VAR_6 ) ; if ( VAR_5 . METHOD_3 ( ) ) { if ( VAR_2 != null ) { VAR_3 . METHOD_4 ( VAR_2 ) ; } return true ; } return false ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 < java.lang.String > METHOD_2 ( ) ) ; TYPE_3 VAR_8 = new TYPE_4 ( VAR_9 ) . METHOD_3 ( VAR_1 ) . build ( ) ; assertTrue ( VAR_8 . METHOD_4 ( ) . METHOD_5 ( ) ) ; assertEquals ( VAR_1 , VAR_8 . METHOD_4 ( ) . get ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; assertTrue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( false ) ; assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_1 . METHOD_3 ( ) ; fail ( STRING_3 ) ; } catch ( TYPE_2 VAR_2 ) { } } 
private TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_2 ( VAR_5 ) ; VAR_2 . METHOD_2 ( VAR_1 . length ) ; for ( byte b : VAR_1 ) { VAR_2 . METHOD_3 ( b ) ; } return VAR_2 ; } 
public boolean METHOD_1 ( java.lang.Object element ) { if ( element instanceof TYPE_1 ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( TYPE_1 ) ( element ) ) . METHOD_2 ( ) ; if ( VAR_1 != null ) { return ( VAR_1 . size ( ) ) > 0 ; } } return false ; } 
public int match ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_3 . METHOD_1 ( ) ) return VAR_4 ; java.util.List < java.lang.String > VAR_5 = TYPE_2 . METHOD_2 ( VAR_1 ) ; int VAR_6 = VAR_7 ; for ( TYPE_3 VAR_8 : VAR_3 ) { int match = VAR_8 . match ( VAR_5 , VAR_2 ) ; if ( match > VAR_6 ) { VAR_6 = match ; if ( VAR_6 == ( VAR_9 ) ) { return VAR_6 ; } } } return VAR_6 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 { assert ( VAR_2 ) != null ; assert ( VAR_3 ) != null ; assert ( VAR_4 ) != null ; TYPE_5 VAR_5 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_6 type = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_5 , VAR_2 , type ) ; for ( TYPE_7 VAR_7 : VAR_8 ) { VAR_6 . METHOD_4 ( VAR_7 . METHOD_1 ( VAR_1 , type ) ) ; } return VAR_6 ; } 
protected void METHOD_1 ( boolean VAR_1 , int VAR_2 , int t , int r , int b ) { if ( ! VAR_1 ) { return ; } int VAR_3 = METHOD_2 ( ) ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { TYPE_1 VAR_4 = METHOD_3 ( i ) ; VAR_4 . METHOD_4 ( 0 , 0 , VAR_4 . METHOD_5 ( ) , VAR_4 . METHOD_6 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; assertEquals ( STRING_1 , METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) ) ; assertEquals ( STRING_2 , VAR_2 , VAR_1 . METHOD_3 ( ) ) ; assertEquals ( STRING_3 , VAR_3 , VAR_1 . METHOD_4 ( ) ) ; assertEquals ( STRING_4 , VAR_5 , VAR_1 . METHOD_5 ( ) ) ; assertEquals ( STRING_5 , VAR_6 , VAR_1 . METHOD_6 ( ) ) ; } 
public final int [ ] METHOD_1 ( ) { int VAR_1 = size ( ) ; int [ ] result = new int [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( METHOD_2 ( i ) ) ) ; if ( VAR_2 == null ) { throw new java.lang.NullPointerException ( ( STRING_1 + i ) ) ; } result [ i ] = VAR_2 . METHOD_3 ( ) ; } TYPE_2 . METHOD_4 ( result ) ; return result ; } 
public static TYPE_1 METHOD_1 ( int VAR_1 ) { try { int VAR_2 ; try { VAR_3 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 ) ; if ( VAR_2 == 0 ) return null ; } finally { VAR_3 . METHOD_5 ( ) ; } return TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ; } catch ( java.lang.Throwable e ) { throw TYPE_3 . METHOD_8 ( e ) ; } } 
protected static TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 result = VAR_1 ; if ( result == null ) { VAR_1 = result = new TYPE_1 ( null , null , null , new TYPE_3 ( ) , new TYPE_4 ( ) ) ; } return ( ( TYPE_1 ) ( result . METHOD_2 ( ) ) ) ; } 
synchronized int METHOD_1 ( int VAR_1 , int x , int y , int VAR_2 , boolean VAR_3 , boolean VAR_4 , int VAR_5 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , x , y , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( ) ; org.mockito.Mockito.verify ( VAR_3 ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( ) ) ; TYPE_2 . METHOD_9 ( VAR_3 ) ; } 
static int METHOD_1 ( int VAR_1 , float VAR_2 , float t , float r , float b , int VAR_3 , int VAR_4 ) { TYPE_1 VAR_5 = VAR_6 . METHOD_2 ( VAR_1 ) ; if ( VAR_5 == null ) { return 0 ; } return VAR_5 . METHOD_3 ( new TYPE_2 ( VAR_2 , t , r , b ) , VAR_3 , VAR_4 ) ; } 
public synchronized void METHOD_1 ( int netId , int VAR_1 , int VAR_2 , int VAR_3 , java.lang.String VAR_4 , java.lang.String [ ] VAR_5 , int VAR_6 , int uid ) throws android.os.RemoteException { TYPE_1 . METHOD_2 ( STRING_1 , netId , VAR_1 , VAR_2 , VAR_3 ) ; long VAR_7 = TYPE_2 . METHOD_3 ( ) ; METHOD_4 ( VAR_7 , netId ) . METHOD_5 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( ( VAR_8 ) != null ) { VAR_8 . METHOD_1 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , uid ) ; } } 
public java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; VAR_1 = STRING_2 ; java.lang.System.out.println ( VAR_1 ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) != 0 ) ) { return ( VAR_1 + ( VAR_2 ) ) + ( VAR_3 ) ; } return VAR_3 ; } 
private android.os.Bundle METHOD_1 ( ) { TYPE_1 b = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; int VAR_2 = b . METHOD_5 ( VAR_3 ) ; java.lang.String VAR_4 = b . METHOD_6 ( VAR_5 ) ; android.os.Bundle VAR_6 = new android.os.Bundle ( ) ; VAR_6 . METHOD_7 ( VAR_7 , VAR_2 ) ; VAR_6 . METHOD_8 ( VAR_8 , VAR_4 ) ; return VAR_6 ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( VAR_4 , VAR_4 , true , true , 2 , 1 ) ) ; VAR_5 = new TYPE_3 . List ( VAR_1 , VAR_6 ) ; VAR_5 . METHOD_3 ( new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 e ) { METHOD_5 ( ) ; } } ) ; METHOD_6 ( VAR_1 ) ; VAR_1 . METHOD_7 ( new int [ ] { INT_1 , INT_2 } ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , java.lang.String ... VAR_3 ) { java.util.Set < java.lang.String > VAR_4 = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ; java.util.Set < java.lang.String > VAR_5 = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_3 ) ) ; assertEquals ( VAR_5 , VAR_4 ) ; assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ; } 
public boolean METHOD_1 ( java.lang.String key , byte [ ] value , int uid ) { try { return ( VAR_1 . METHOD_2 ( key , value , uid ) ) == ( VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) ; return false ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 , int VAR_2 ) { int VAR_3 = ( VAR_1 . METHOD_2 ( ) ) + VAR_2 ; TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( VAR_3 ) ; assert VAR_4 != ( VAR_5 ) ; java.lang.String id = ( ( STRING_1 + VAR_3 ) + STRING_2 ) + ( METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ; TYPE_1 VAR_6 = METHOD_6 ( id , id , METHOD_7 ( VAR_4 . METHOD_5 ( ) ) , null ) ; return VAR_6 ; } 
private TYPE_1 METHOD_1 ( java.util.ArrayList < TYPE_2 > VAR_1 ) { int VAR_2 = VAR_1 . size ( ) ; TYPE_1 result = new TYPE_1 ( VAR_2 ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { result . set ( i , VAR_1 . get ( i ) . METHOD_2 ( ) ) ; } result . METHOD_3 ( ) ; return result ; } 
protected int METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 ) { int VAR_4 ; if ( ( VAR_2 < 0 ) || ( VAR_2 > 11 ) ) { VAR_1 += VAR_2 / 12 ; VAR_2 %= 12 ; } if ( VAR_2 == 12 ) { VAR_4 = 1 ; } else { VAR_4 = VAR_2 + 1 ; } double VAR_5 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , 1 ) ; return ( ( int ) ( VAR_5 ) ) ; } 
private java.io.File METHOD_1 ( ) throws java.io.IOException , java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = TYPE_1 . METHOD_3 ( VAR_3 class ) ; VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( STRING_3 ) ) ; VAR_2 . METHOD_6 ( null , VAR_1 , true ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 s = new TYPE_1 ( ) ; for ( int i = 0 ; i <= INT_1 ; ++ i ) { s . METHOD_2 ( i ) ; assertEquals ( ( i & ( ~ ( VAR_1 ) ) ) , s . METHOD_3 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.Class < ? > VAR_4 , TYPE_3 < java.lang.String > VAR_5 , TYPE_4 VAR_6 , int VAR_7 , boolean VAR_8 ) { if ( VAR_9 class . METHOD_2 ( VAR_4 ) ) { return new TYPE_5 ( VAR_1 , VAR_8 , VAR_4 ) ; } else { return null ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 ) && ( VAR_2 != ( VAR_4 ) ) ) { return VAR_5 ; } if ( ( VAR_6 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( VAR_7 ) ) > 0 ) ) { VAR_2 = VAR_8 ; } if ( ( VAR_6 . METHOD_5 ( ) ) && ( VAR_2 == ( VAR_9 ) ) ) { VAR_2 = VAR_5 ; } return VAR_2 ; } 
public boolean METHOD_1 ( TYPE_1 time ) { long when = time . METHOD_2 ( ) ; int VAR_1 = ( ( int ) ( when / INT_1 ) ) ; int VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 ) ; if ( VAR_2 < 0 ) { VAR_2 = ( ~ VAR_2 ) - 1 ; if ( VAR_2 < 0 ) { return false ; } } return ( VAR_4 [ ( ( VAR_5 [ VAR_2 ] ) & INT_2 ) ] ) == 1 ; } 
protected boolean METHOD_1 ( java.lang.String VAR_1 ) { boolean VAR_2 = ( METHOD_2 ( ) ) && ( ! ( ( METHOD_3 ( ) ) && ( ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ) ) ) ; if ( ( ( ! VAR_2 ) && ( VAR_6 ) ) && ( METHOD_2 ( ) ) ) { log ( ( STRING_1 + ( VAR_3 ) ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 b ) { int VAR_1 = ( ( VAR_2 ) & ( VAR_3 ) ) > > ( VAR_4 ) ; if ( ( VAR_1 == ( VAR_5 ) ) && ( ! ( ( VAR_6 ) instanceof TYPE_3 ) ) ) { VAR_7 = true ; TYPE_4 VAR_8 = VAR_9 ; TYPE_4 VAR_10 = VAR_11 ; boolean VAR_7 = ! ( VAR_8 . equals ( VAR_10 ) ) ; assert VAR_7 ; } } 
public final TYPE_1 METHOD_1 ( TYPE_2 uri ) { if ( ! ( TYPE_3 . equals ( uri . METHOD_2 ( ) ) ) ) { return null ; } java.lang.String VAR_1 = uri . METHOD_3 ( ) ; if ( VAR_1 != null ) { return METHOD_1 ( mContext , uri . METHOD_3 ( ) ) ; } return null ; } 
public synchronized void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 = method . METHOD_1 ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { return ; } TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( VAR_3 class ) ; assert VAR_2 != null ; TYPE_2 VAR_4 = VAR_2 . METHOD_4 ( ) ; assert VAR_4 != null ; TYPE_3 VAR_5 = METHOD_5 ( method ) ; if ( TYPE_4 . METHOD_6 ( method ) ) { VAR_4 . METHOD_7 ( VAR_5 ) ; } else { VAR_4 . METHOD_8 ( VAR_5 ) ; } } 
public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_3 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_5 ( ) ; } } 
private TYPE_1 METHOD_1 ( java.io.File VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; byte [ ] VAR_3 = TYPE_3 . METHOD_2 ( VAR_2 ) ; TYPE_1 in = TYPE_1 . METHOD_3 ( ) ; in . METHOD_4 ( VAR_3 , 0 , VAR_3 . length ) ; in . METHOD_5 ( 0 ) ; VAR_2 . METHOD_6 ( ) ; return in ; } 
static boolean METHOD_1 ( java.util.Map < ? , ? > VAR_1 , java.lang.Object VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_2 instanceof java.util.Map ) { java.util.Map < ? , ? > VAR_3 = ( ( java.util.Map < ? , ? > ) ( VAR_2 ) ) ; return VAR_1 . METHOD_2 ( ) . equals ( VAR_3 . METHOD_2 ( ) ) ; } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 ) ; try { VAR_1 . METHOD_2 ( STRING_2 ) ; } catch ( TYPE_2 expected ) { } try { VAR_1 . METHOD_2 ( STRING_3 ) ; } catch ( TYPE_2 expected ) { } } 
void METHOD_1 ( java.lang.String VAR_1 ) { int VAR_2 = VAR_3 . size ( ) ; while ( VAR_2 > 0 ) { VAR_2 -- ; android.util.Log.v ( VAR_4 . TAG , ( ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_2 ) + ( VAR_3 . get ( VAR_2 ) ) ) ) ; } } 
public java.util.Map < TYPE_1 , java.util.Map < java.lang.String , TYPE_2 > > METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( VAR_2 ) != null ) ) { TYPE_3 project = METHOD_2 ( ) ; project . METHOD_3 ( ) ; VAR_1 = project . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; } return VAR_1 ; } 
public TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; TYPE_1 [ ] ret = new TYPE_1 [ VAR_2 . length ] ; for ( int i = 0 ; i < ( ret . length ) ; ++ i ) { try { ret [ i ] = new TYPE_1 ( VAR_3 , VAR_2 [ i ] . METHOD_3 ( ) ) ; } catch ( java.lang.NullPointerException VAR_4 ) { return null ; } } return ret ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 type ) { switch ( type . METHOD_2 ( ) ) { case VAR_1 : return VAR_2 ; case VAR_3 : return VAR_4 ; case VAR_5 : return VAR_6 ; case VAR_7 : return VAR_8 ; case VAR_9 : return VAR_10 ; case VAR_11 : return VAR_12 ; case VAR_13 : return VAR_14 ; } return TYPE_3 . METHOD_3 ( type ) ; } 
private TYPE_1 METHOD_1 ( boolean VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_3 = VAR_1 ; VAR_4 = new TYPE_3 [ 2 ] ; VAR_4 [ 0 ] = METHOD_2 ( STRING_1 , 1 , 1 ) ; VAR_4 [ 1 ] = METHOD_2 ( STRING_2 , 2 , 2 ) ; return VAR_2 ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_4 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) ) ; if ( VAR_3 != null ) { try { METHOD_1 ( VAR_3 , VAR_2 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( STRING_1 ) ; } } else { throw new TYPE_5 ( STRING_2 ) ; } } 
static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . name = VAR_1 . getName ( ) ; VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_4 = VAR_1 . METHOD_3 ( ) ; VAR_5 = VAR_1 . METHOD_4 ( ) ; VAR_6 = VAR_1 . METHOD_5 ( ) ; VAR_7 = VAR_1 . METHOD_6 ( ) ; VAR_8 = VAR_1 . METHOD_7 ( ) ; VAR_9 = VAR_1 . METHOD_8 ( ) ; VAR_10 = VAR_1 . METHOD_9 ( ) ; return VAR_2 ; } 
protected void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) == null ) { VAR_2 = VAR_3 ; } else { if ( ( VAR_3 ) < ( VAR_2 ) ) { VAR_4 . METHOD_2 ( new TYPE_2 ( VAR_5 , event , VAR_1 ) ) ; } else if ( ( VAR_3 ) > ( VAR_2 ) ) { VAR_2 = VAR_3 ; } } VAR_1 = event ; ( VAR_5 ) ++ ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { try { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } } catch ( java.lang.Exception e ) { } super . METHOD_1 ( ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , float value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public boolean METHOD_1 ( int i ) { if ( ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) { return false ; } return ( ( value [ ( i > > > 5 ) ] ) & ( VAR_2 [ ( i & INT_1 ) ] ) ) != 0 ; } 
public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( subId ) ; if ( VAR_2 != null ) { if ( ! ( TYPE_2 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ) { return null ; } java.lang.String number = TYPE_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; if ( VAR_3 ) log ( ( STRING_2 + number ) ) ; return number ; } else { loge ( ( STRING_3 + subId ) ) ; return null ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 context , int VAR_1 , boolean VAR_2 ) { if ( VAR_1 == ( VAR_3 ) ) { if ( VAR_2 ) { return context . METHOD_2 ( VAR_4 ) ; } else { return context . METHOD_2 ( VAR_5 ) ; } } else { if ( VAR_2 ) { return context . METHOD_2 ( VAR_6 ) ; } else { return context . METHOD_2 ( VAR_7 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; METHOD_3 ( false ) ; METHOD_4 ( false ) ; METHOD_5 ( VAR_1 , false ) ; METHOD_6 ( false ) ; assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 type = METHOD_2 ( ) ; if ( type != null ) { VAR_2 . METHOD_3 ( VAR_3 ) ; TYPE_2 sb = new TYPE_2 ( VAR_4 ) ; sb.append ( VAR_3 . METHOD_4 ( type . METHOD_5 ( ) , VAR_5 ) ) ; VAR_6 = true ; VAR_7 . METHOD_6 ( sb . toString ( ) ) ; VAR_6 = false ; if ( VAR_1 ) { METHOD_7 ( ) ; } } } 
public static byte [ ] METHOD_1 ( java.lang.String s ) throws TYPE_1 { int VAR_1 = ( ( int ) ( TYPE_2 . METHOD_2 ( s , true ) ) ) ; byte [ ] result = new byte [ ( VAR_2 ) + VAR_1 ] ; TYPE_3 . METHOD_3 ( result , 0 , ( ( short ) ( VAR_1 ) ) , VAR_3 ) ; TYPE_2 . METHOD_1 ( result , VAR_4 , s ) ; return result ; } 
public static int METHOD_1 ( TYPE_1 < ? > VAR_1 , java.lang.Object element ) { if ( VAR_1 instanceof TYPE_2 ) { return ( ( TYPE_2 < ? > ) ( VAR_1 ) ) . count ( element ) ; } if ( VAR_1 instanceof java.util.Set ) { return ( ( java.util.Set < ? > ) ( VAR_1 ) ) . METHOD_2 ( element ) ? 1 : 0 ; } return TYPE_3 . METHOD_1 ( VAR_1 . METHOD_3 ( ) , element ) ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object expected , java.lang.Object VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; if ( VAR_1 != null ) VAR_3 = VAR_1 + STRING_2 ; TYPE_1 . fail ( ( ( ( ( ( VAR_3 + STRING_3 ) + expected ) + STRING_4 ) + VAR_2 ) + STRING_5 ) ) ; } 
public void METHOD_1 ( TYPE_1 res ) { VAR_1 = new TYPE_2 ( mRS , res , VAR_2 ) ; VAR_3 = TYPE_3 . METHOD_2 ( mRS , TYPE_4 . METHOD_3 ( mRS ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; } 
public synchronized void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) throw new TYPE_2 ( ) ; if ( valid ) { if ( VAR_1 instanceof TYPE_3 ) ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_1 ( this ) ; else if ( VAR_1 instanceof TYPE_4 ) ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( this ) ; else throw new TYPE_5 ( ) ; valid = false ; } } 
public void METHOD_1 ( ) throws TYPE_1 { final int VAR_1 = INT_1 ; final short VAR_2 = INT_2 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_3 ) ; args . METHOD_2 ( STRING_2 , 0 ) ; args . METHOD_2 ( STRING_3 , VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_2 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; TYPE_4 . METHOD_5 ( VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 source ) { if ( source != null ) { for ( TYPE_3 < TYPE_1 , java.util.ArrayList < TYPE_2 > > entry : VAR_1 . METHOD_2 ( ) ) { if ( entry . METHOD_3 ( ) . METHOD_4 ( source ) ) { return entry . METHOD_5 ( ) ; } } } return null ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , TYPE_4 . METHOD_3 ( VAR_3 ) , new java.lang.Runnable ( ) { public void run ( ) { TYPE_4 . METHOD_3 ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_2 ) ; } } ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( ! ( VAR_1 . equals ( VAR_3 ) ) ) { METHOD_2 ( ( STRING_1 + VAR_1 ) ) ; return false ; } if ( VAR_2 . METHOD_3 ( ) ) { return true ; } } VAR_3 = VAR_1 ; VAR_2 = VAR_4 . METHOD_4 ( VAR_5 , VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; return true ; } 
public java.lang.String toString ( ) { byte [ ] VAR_1 = METHOD_1 ( ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( 2 * ( VAR_1 . length ) ) ) ; for ( byte b : VAR_1 ) { sb.append ( VAR_2 [ ( ( b > > 4 ) & INT_1 ) ] ) . append ( VAR_2 [ ( b & INT_1 ) ] ) ; } return sb . toString ( ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 = VAR_2 . METHOD_2 ( null ) ; android.util.Log . i ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_1 . size ( ) ) ) + STRING_2 ) ) ; return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 listener , int VAR_1 ) { if ( ( mContext ) == null ) return ; try { TYPE_2 VAR_2 = ( METHOD_2 ( ) ) != null ; if ( ( VAR_3 ) == null ) { VAR_3 = VAR_4 ; } VAR_5 . METHOD_3 ( VAR_3 , METHOD_4 ( ) , listener . callback , VAR_1 , VAR_2 ) ; } catch ( android.os.RemoteException ex ) { } catch ( java.lang.NullPointerException ex ) { } } 
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_2 ) { TYPE_1 . v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( ) ) ; VAR_5 = new TYPE_2 ( VAR_4 , TYPE_3 . METHOD_3 ( ) ) ; VAR_5 . METHOD_4 ( ( ! ( VAR_6 ) ) ) ; } 
static int METHOD_1 ( java.util.List < ? > VAR_1 ) { int VAR_2 = 1 ; for ( java.lang.Object VAR_3 : VAR_1 ) { VAR_2 = ( INT_1 * VAR_2 ) + ( VAR_3 == null ? 0 : VAR_3 . METHOD_2 ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { s = new TYPE_1 ( STRING_1 ) ; assertNotNull ( s ) ; s . METHOD_2 ( ) ; try { s = new TYPE_1 ( ( ( java.lang.String ) ( null ) ) ) ; fail ( STRING_2 ) ; } catch ( java.lang.NullPointerException e ) { } } 
void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) { android.util.Log.d ( VAR_4 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; } VAR_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; if ( VAR_1 == ( VAR_6 ) ) { METHOD_4 ( VAR_1 ) ; } } 
public void METHOD_1 ( boolean VAR_1 ) { final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; try { VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_3 ( VAR_3 ) ; } METHOD_4 ( VAR_2 ) ; TYPE_3 t = METHOD_5 ( new TYPE_4 ( VAR_2 ) ) ; METHOD_6 ( VAR_2 , t ) ; t . METHOD_7 ( ) ; assertTrue ( VAR_2 . METHOD_8 ( ) ) ; assertTrue ( VAR_2 . METHOD_9 ( ) ) ; METHOD_10 ( t ) ; METHOD_11 ( VAR_2 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( ) ; android.util.Log.e ( TYPE_3 . TAG , ( STRING_1 + ( VAR_3 ) ) ) ; synchronized ( VAR_4 ) { if ( METHOD_3 ( ) ) { VAR_3 = TYPE_3 . METHOD_4 ( ) ; VAR_5 = VAR_2 ; if ( TYPE_3 . METHOD_5 ( VAR_6 , VAR_3 , VAR_1 ) ) { return true ; } } VAR_5 = null ; return false ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( ( VAR_1 . id ) == ( VAR_3 ) ) { if ( ! ( TYPE_2 . METHOD_2 ( this ) ) ) { TYPE_3 . METHOD_3 ( this , METHOD_4 ( ) . METHOD_5 ( VAR_4 ) , VAR_5 ) . METHOD_6 ( ) ; METHOD_7 ( new android.content.Intent ( VAR_6 ) ) ; return ; } } super . METHOD_1 ( VAR_1 , VAR_2 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 method , int VAR_1 ) { TYPE_4 m = METHOD_2 ( method ) ; if ( m == null ) { return null ; } if ( ( VAR_2 ) != null ) { return VAR_2 . get ( VAR_1 ) ; } return VAR_3 ; } 
private int METHOD_1 ( ) { int VAR_1 = 0 ; try { java.lang.String s = TYPE_1 . METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String run ( ) { return TYPE_3 . METHOD_3 ( STRING_1 ) ; } } ) ; VAR_1 = ( s != null ) ? java.lang.Integer . METHOD_4 ( s ) . METHOD_5 ( ) : 0 ; } catch ( java.lang.Exception e ) { } return VAR_1 > 0 ? VAR_1 : 0 ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( obj == null ) return false ; if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) return false ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; if ( ( VAR_2 ) == null ) { if ( ( VAR_3 ) != null ) return false ; } else if ( ! ( VAR_2 . equals ( VAR_3 ) ) ) return false ; return true ; } 
public TYPE_1 METHOD_1 ( boolean VAR_1 ) { if ( ( ( VAR_2 ) & ( VAR_3 ) ) == ( VAR_3 ) ) { return null ; } if ( ( ( VAR_2 ) & ( VAR_4 ) ) == ( VAR_4 ) ) { METHOD_2 ( VAR_1 ) ; } return VAR_1 ? ( VAR_5 ) == null ? null : VAR_5 . get ( ) : ( VAR_6 ) == null ? null : VAR_6 . get ( ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { TYPE_3 b = new TYPE_3 ( VAR_1 ) ; b . METHOD_2 ( VAR_3 ) ; b . METHOD_3 ( VAR_4 ) ; b . METHOD_4 ( VAR_5 ) ; b . METHOD_5 ( VAR_5 ) ; VAR_2 = b . METHOD_6 ( ) ; } return VAR_2 ; } 
public boolean METHOD_1 ( int start ) { if ( ( start < 0 ) || ( start > ( input . length ( ) ) ) ) { throw new TYPE_1 ( ( ( ( STRING_1 + start ) + STRING_2 ) + ( input . length ( ) ) ) ) ; } VAR_1 = TYPE_2 . METHOD_2 ( address , input , start , VAR_2 ) ; return VAR_1 ; } 
protected void METHOD_1 ( java.io.File VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { java.io.File [ ] VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 != null ) { for ( java.io.File VAR_4 : VAR_3 ) { if ( ( VAR_4 . METHOD_3 ( ) ) && ( ! ( METHOD_4 ( VAR_4 ) ) ) ) { TYPE_3 VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( VAR_5 != null ) { METHOD_6 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) ; } } } } } 
public TYPE_1 METHOD_1 ( java.lang.String name , java.util.List < ? extends TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { synchronized ( VAR_3 ) { for ( TYPE_1 id : VAR_3 ) { if ( id . equals ( name , VAR_1 ) ) { return id ; } } TYPE_1 VAR_4 = new TYPE_1 ( name , VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; return VAR_4 ; } } 
private static java.io.File METHOD_1 ( ) throws TYPE_1 , TYPE_2 , java.io.IOException { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( ) ; java.io.File VAR_2 = TYPE_5 . METHOD_3 ( ) ; TYPE_6 VAR_3 = new TYPE_6 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; return VAR_2 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 e ) { if ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } int id = VAR_1 . METHOD_4 ( 2 , e . METHOD_5 ( VAR_1 ) ) ; return new TYPE_1 ( id , VAR_1 ) ; } 
public static TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 , java.io.IOException , TYPE_5 , TYPE_6 , TYPE_7 { java.lang.String VAR_3 = VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_5 = TYPE_8 . METHOD_4 ( ) . build ( VAR_3 , VAR_2 ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; return VAR_5 ; } 
public int METHOD_1 ( java.lang.String VAR_1 ) { if ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( METHOD_2 ( ) ) == ( VAR_2 ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , VAR_1 ) ; } 
public boolean METHOD_1 ( ) { if ( VAR_1 ) TYPE_1 . log ( STRING_1 ) ; final TYPE_2 service = VAR_2 ; if ( service != null ) { try { service . METHOD_1 ( ) ; return true ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( TYPE_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( TYPE_1 . TAG , STRING_2 ) ; if ( VAR_1 ) TYPE_1 . log ( android.util.Log . METHOD_2 ( new java.lang.Throwable ( ) ) ) ; } return false ; } 
protected long METHOD_1 ( int VAR_1 ) throws TYPE_1 { final long VAR_2 ; if ( VAR_1 == 16 ) { return TYPE_2 . METHOD_2 ( ) ; } else if ( VAR_1 == INT_1 ) { return TYPE_2 . METHOD_3 ( ) ; } else { throw new java.lang.RuntimeException ( ( STRING_1 + VAR_1 ) ) ; } } 
public static void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { if ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) . METHOD_4 ( STRING_1 ) ) ) { java.lang.System.out.println ( STRING_2 ) ; return ; } TYPE_4 . METHOD_5 ( VAR_1 ) ; TYPE_4 . METHOD_6 ( VAR_1 ) ; TYPE_4 . METHOD_7 ( VAR_1 ) ; TYPE_4 . METHOD_8 ( VAR_1 ) ; TYPE_4 . METHOD_9 ( VAR_1 ) ; } finally { TYPE_2 . METHOD_10 ( VAR_1 ) ; } } 
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { synchronized ( VAR_3 ) { VAR_1 = METHOD_2 ( VAR_1 ) ; VAR_2 = METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_4 += VAR_2 . size ( ) ; } METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( TYPE_2 . equals ( VAR_2 , VAR_1 ) ) ) { VAR_2 = VAR_1 ; for ( TYPE_3 VAR_3 : VAR_4 ) { VAR_3 . METHOD_2 ( this ) ; } METHOD_3 ( ) ; METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Throwable { android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ; TYPE_1 < java.lang.Integer , java.lang.Integer > VAR_2 = METHOD_2 ( ) ; if ( ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ) { METHOD_3 ( INT_1 , INT_2 , false , true ) ; } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int index ) { if ( index != ( VAR_3 ) ) { java.lang.String VAR_4 = METHOD_2 ( VAR_1 , VAR_2 , index ) ; if ( VAR_4 != null ) { return VAR_4 ; } } return METHOD_3 ( VAR_1 , VAR_2 , VAR_5 ) ; } 
private void METHOD_1 ( ) { int VAR_1 = VAR_2 ; int VAR_3 = VAR_4 ; VAR_5 . METHOD_2 ( java.lang.Integer . toString ( VAR_1 ) ) ; TYPE_1 . METHOD_3 ( VAR_6 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_7 , VAR_1 ) ; VAR_6 . METHOD_6 ( VAR_3 , this . METHOD_7 ( VAR_8 ) ) ; } 
private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = VAR_1 . METHOD_3 ( ) . size ( ) ; boolean VAR_4 = ( VAR_2 > 1 ) && ( VAR_3 > 1 ) ; assert ( ! VAR_4 ) || ( ! ( ( VAR_1 instanceof TYPE_3 ) || ( VAR_1 instanceof TYPE_4 ) ) ) ; return VAR_4 ; } 
void METHOD_1 ( TYPE_1 app , int VAR_1 , android.os.Bundle VAR_2 ) { if ( ( VAR_3 ) != null ) { try { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , VAR_2 ) ; } catch ( android.os.RemoteException e ) { } } VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; VAR_7 = null ; METHOD_3 ( VAR_8 , ( - 1 ) , false , false , true ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { java.lang.String VAR_1 = element . METHOD_2 ( ) ; java.lang.String VAR_2 = ( TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( 0 ) ) ) + ( VAR_1 . METHOD_5 ( 1 ) ) ; context . METHOD_6 ( VAR_3 , element , context . METHOD_7 ( element ) , java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) , null ) ; } 
public void run ( TYPE_1 action ) { java.util.List < TYPE_2 > VAR_1 = TYPE_3 . METHOD_1 ( VAR_2 , true ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_4 . METHOD_3 ( VAR_1 , null , false , true ) ; } else { TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( ) , STRING_1 , STRING_2 ) ; } } 
public static < TYPE_1 extends TYPE_2 > TYPE_3 < TYPE_1 > METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 , java.lang.String ... args ) throws TYPE_4 { TYPE_5 VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_3 , null , TYPE_6 . METHOD_3 ( args ) ) ; java.util.List < java.lang.String > VAR_4 = VAR_2 . METHOD_4 ( ) ; return new TYPE_3 < TYPE_1 > ( VAR_2 . METHOD_5 ( VAR_1 ) , VAR_4 . METHOD_6 ( new java.lang.String [ 0 ] ) ) ; } 
private static java.util.ArrayList < java.io.File > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) { java.util.ArrayList < java.io.File > result = new java.util.ArrayList < java.io.File > ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , result ) ; TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , result ) ; return result ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_2 = new byte [ 1 ] ; TYPE_4 . METHOD_2 ( s , fd , callback , VAR_2 , 0 , 1 , 0 ) ; assertEquals ( INT_1 , VAR_2 [ 0 ] ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return new TYPE_1 ( ) ; } TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) ) ) ; assert VAR_3 != null ; return METHOD_1 ( VAR_1 , VAR_3 ) . append ( VAR_2 . getName ( ) ) . append ( CHAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = VAR_2 ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . verify ( VAR_5 , METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( VAR_6 class ) ) ; VAR_4 . verify ( VAR_5 , METHOD_3 ( ) ) . METHOD_6 ( METHOD_7 ( ) , METHOD_5 ( VAR_7 class ) ) ; } 
public TYPE_1 METHOD_1 ( byte [ ] data ) throws java.io.IOException , TYPE_2 , TYPE_3 { java.lang.String VAR_1 = TYPE_4 . METHOD_2 ( data ) ; VAR_1 = TYPE_5 . METHOD_3 ( VAR_1 ) ; return METHOD_1 ( VAR_1 , new TYPE_6 ( new TYPE_7 ( VAR_1 ) ) , true ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = METHOD_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_3 ) ; ++ i ) { assertEquals ( new TYPE_3 ( i ) , ( ( TYPE_3 ) ( VAR_1 . METHOD_3 ( ) ) ) ) ; } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( this ) ; if ( ( VAR_5 ) == ( VAR_6 ) ) { VAR_7 . METHOD_7 ( ) ; VAR_8 . METHOD_7 ( ) ; VAR_9 . METHOD_7 ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { VAR_1 . METHOD_2 ( ) ; byte [ ] VAR_2 = ( ( byte [ ] ) ( VAR_1 . METHOD_1 ( ) ) ) ; key = new TYPE_3 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ; final int VAR_3 = TYPE_4 . METHOD_4 ( key . METHOD_5 ( ) ) ; VAR_4 = new TYPE_5 ( TYPE_4 . METHOD_6 ( VAR_3 ) ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final int index ) { METHOD_2 ( INT_1 ) ; TYPE_3 VAR_2 = ( VAR_3 ) / FLOAT_1 ; VAR_4 : TYPE_4 . assertTrue ( VAR_5 . METHOD_3 ( ) , STRING_1 ) ; return VAR_5 . METHOD_4 ( VAR_1 , new TYPE_5 < TYPE_1 > ( ) { public TYPE_1 METHOD_5 ( ) { TYPE_1 VAR_6 = new TYPE_6 ( VAR_1 , index , VAR_5 ) ; ( ( TYPE_6 ) ( VAR_6 ) ) . METHOD_6 ( ) ; return VAR_6 ; } } ) ; } 
public void METHOD_1 ( ) { java.lang.String [ ] [ ] VAR_1 = new java.lang.String [ ] [ ] { null , new java.lang.String [ ] { STRING_1 } , null , new java.lang.String [ ] { STRING_2 } } ; java.lang.String [ ] [ ] VAR_2 = new java.lang.String [ ] [ ] { null , null , null , new java.lang.String [ ] { STRING_2 } } ; METHOD_2 ( VAR_2 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( TYPE_1 . METHOD_2 ( INT_1 ) , STRING_1 ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_2 ) , STRING_2 ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_3 ) , STRING_3 ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_4 ) , STRING_4 ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_5 ) , STRING_5 ) ; assertEquals ( TYPE_1 . METHOD_2 ( 0 ) , null ) ; assertEquals ( TYPE_1 . METHOD_2 ( INT_6 ) , null ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( super . METHOD_1 ( ) ) ) ; VAR_2 = ( ( TYPE_3 ) ( VAR_3 . METHOD_2 ( ) ) ) ; VAR_4 = ( ( TYPE_4 ) ( VAR_5 . METHOD_2 ( ) ) ) ; VAR_6 = false ; return VAR_1 ; } 
static java.lang.String METHOD_1 ( TYPE_1 method , TYPE_1 call , int VAR_1 ) { assert ( call instanceof TYPE_2 ) || ( call instanceof TYPE_3 ) ; TYPE_4 VAR_2 = new TYPE_4 ( null , method , call , VAR_1 ) ; method . METHOD_2 ( VAR_2 ) ; java.lang.String name = VAR_2 . METHOD_3 ( ) ; return name ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; try { java.io.File VAR_2 = new java.io.File ( TYPE_2 . METHOD_2 ( ) , VAR_3 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( VAR_2 ) ) ; } catch ( TYPE_3 e ) { VAR_4 . METHOD_5 ( STRING_1 , e.getMessage ( ) ) ; } } } return VAR_1 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.List < TYPE_3 > VAR_2 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) ) { return null ; } TYPE_1 VAR_3 = new TYPE_1 ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) ; VAR_1 . METHOD_4 ( ) ; return VAR_3 ; } 
protected boolean METHOD_1 ( TYPE_1 VAR_1 , int userId ) { if ( ! ( VAR_2 . METHOD_2 ( userId ) ) ) return true ; TYPE_2 p = VAR_3 ; if ( p != null ) { TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_5 ) ) ; if ( VAR_4 != null ) { return ( VAR_4 . METHOD_3 ( userId ) ) && ( ( ( VAR_6 ) & ( VAR_7 ) ) == 0 ) ; } } return false ; } 
public void METHOD_1 ( java.io.File out , boolean VAR_1 , java.io.File ... VAR_2 ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; super . METHOD_1 ( out , VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_4 ( INT_1 ) ; METHOD_5 ( VAR_2 ) ; super . METHOD_1 ( out , VAR_1 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { return ; } boolean VAR_3 = VAR_4 . METHOD_3 ( ) ; try { if ( VAR_4 . METHOD_4 ( true ) ) { METHOD_5 ( VAR_2 ) ; } } finally { if ( ! VAR_3 ) { VAR_4 . METHOD_4 ( false ) ; } } } 
void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 type = VAR_1 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_2 = VAR_3 . get ( type ) ; if ( VAR_2 == null ) { VAR_2 = new java.util.ArrayList < TYPE_1 > ( 1 ) ; VAR_3 . METHOD_3 ( type , VAR_2 ) ; } VAR_2 . METHOD_4 ( VAR_1 ) ; } 
void METHOD_1 ( int VAR_1 , java.lang.String address ) { METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.Integer VAR_3 = VAR_4 . METHOD_3 ( VAR_1 , address ) ; if ( VAR_3 == null ) { android.util.Log.d ( VAR_5 . TAG , ( STRING_2 + address ) ) ; return ; } if ( VAR_6 ) android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_3 + address ) + STRING_4 ) + VAR_3 ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.io.File VAR_2 , java.lang.String name , TYPE_3 action , java.io.File VAR_3 ) { TYPE_1 VAR_4 ; if ( VAR_5 ) { VAR_4 = new TYPE_4 ( run , VAR_1 , VAR_6 , name , VAR_2 , null , VAR_3 ) ; } else { VAR_4 = new TYPE_5 ( VAR_7 , VAR_1 , VAR_6 , name , VAR_2 , action , VAR_3 ) ; } return VAR_4 ; } 
private static void METHOD_1 ( long VAR_1 , long expected , java.lang.String msg ) { if ( VAR_1 != expected ) { java.lang.System.out.println ( ( ( ( ( msg + STRING_1 ) + VAR_1 ) + STRING_2 ) + expected ) ) ; TYPE_1 . METHOD_2 ( ( - 1 ) ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 info ) { assert ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ; return new TYPE_1 ( info , new TYPE_3 ( info , null , VAR_3 , VAR_2 , TYPE_4 . METHOD_2 ( ) , false ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , VAR_2 ) ; byte [ ] VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; byte [ ] VAR_4 = TYPE_2 . METHOD_3 ( VAR_3 ) ; TYPE_1 VAR_5 = TYPE_2 . METHOD_4 ( VAR_4 ) ; assertEquals ( VAR_1 , VAR_5 ) ; TYPE_3 . METHOD_5 ( VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_1 . METHOD_3 ( VAR_3 class ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( TYPE_3 . getName ( ) , STRING_1 ) ; VAR_2 . METHOD_6 ( VAR_5 ) . METHOD_6 ( VAR_6 ) . METHOD_7 ( VAR_1 , false , VAR_7 ) ; } 
public void METHOD_1 ( ) { assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) . METHOD_3 ( VAR_1 , STRING_3 ) ) ) ; assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_4 ) . METHOD_3 ( VAR_1 , STRING_3 ) ) ) ; assertTrue ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) . METHOD_3 ( VAR_1 , STRING_1 ) ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object ... args ) { java.lang.String msg = java.lang.String.format ( VAR_1 , args ) ; for ( java.lang.String s : msg . METHOD_2 ( STRING_1 ) ) { if ( ( s . METHOD_3 ( ) . length ( ) ) > 0 ) { TYPE_1 . METHOD_4 ( VAR_2 . TAG , s ) ; } } } 
private TYPE_1 METHOD_1 ( byte [ ] data , TYPE_2 VAR_1 , boolean VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( data ) ; return VAR_2 ? ( ( TYPE_1 ) ( new TYPE_4 ( VAR_3 , VAR_1 ) ) ) : ( ( TYPE_1 ) ( new TYPE_5 ( VAR_3 , VAR_1 ) ) ) ; } 
public void METHOD_1 ( boolean VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; try { VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_7 ( ) ; } catch ( android.os.RemoteException e ) { TYPE_1 . e ( VAR_4 . TAG , STRING_1 , e ) ; } finally { VAR_2 . METHOD_5 ( ) . METHOD_8 ( ) ; } } } 
static void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return ; } TYPE_2 VAR_5 = VAR_6 ; TYPE_3 VAR_7 = VAR_5 . METHOD_3 ( ) ; try { VAR_7 . METHOD_4 ( new TYPE_4 ( VAR_2 , true ) ) ; VAR_7 . METHOD_5 ( 0 , 0 , VAR_5 . METHOD_6 ( ) , VAR_5 . METHOD_7 ( ) ) ; } finally { VAR_7 . METHOD_8 ( ) ; } } 
public void verify ( TYPE_1 key ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { if ( key instanceof TYPE_7 ) { TYPE_8 VAR_1 = ( ( TYPE_7 ) ( key ) ) . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; return ; } METHOD_3 ( key , null ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 ) ; if ( ! ( VAR_2 . equals ( VAR_3 . METHOD_3 ( ) ) ) ) { VAR_3 . METHOD_4 ( VAR_2 ) ; } METHOD_5 ( ) ; VAR_4 . METHOD_6 ( ) . METHOD_7 ( true ) ; METHOD_8 ( ) ; } 
TYPE_1 < TYPE_2 > METHOD_1 ( int flags , TYPE_1 < TYPE_2 > VAR_1 ) { return new TYPE_3 < TYPE_2 , TYPE_2 > ( VAR_1 ) { public void METHOD_2 ( TYPE_2 VAR_2 ) { action . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) METHOD_2 ( ) ; if ( VAR_3 ) android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ; VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_5 . METHOD_5 ( ) ) { if ( VAR_2 ) { METHOD_6 ( VAR_6 ) ; } else { METHOD_6 ( VAR_7 ) ; } } VAR_1 . METHOD_7 ( true ) ; } 
public static void METHOD_1 ( java.lang.String [ ] VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( 6 ) ; TYPE_3 callback = new TYPE_4 ( ) ; VAR_2 . METHOD_2 ( VAR_3 , callback ) ; while ( true ) TYPE_5 . METHOD_3 ( INT_1 ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { java.io.File VAR_2 = new java.io.File ( VAR_3 , VAR_4 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_1 = VAR_5 . METHOD_3 ( VAR_2 , false ) ; } else { VAR_5 . METHOD_4 ( this , VAR_3 , ( STRING_1 + ( VAR_3 . METHOD_5 ( ) ) ) ) ; return null ; } } return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 name ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_1 , VAR_2 , name ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_3 ) ; VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertTrue ( ( ( TYPE_1 . METHOD_2 ( STRING_1 ) ) != ( VAR_1 ) ) ) ; try { TYPE_1 . METHOD_2 ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } try { TYPE_1 . METHOD_2 ( STRING_2 ) ; TYPE_1 . METHOD_2 ( STRING_3 ) ; fail ( ) ; } catch ( java.lang.RuntimeException expected ) { } TYPE_2 . METHOD_3 ( ) ; } 
public java.lang.String toString ( ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ( ( VAR_2 . length ( ) ) + 7 ) ) ; if ( ( VAR_2 . METHOD_1 ( CHAR_1 ) ) >= 0 ) { VAR_1 . append ( CHAR_2 ) . append ( VAR_2 ) . append ( CHAR_3 ) ; } else { VAR_1 . append ( VAR_2 ) ; } if ( METHOD_2 ( ) ) { VAR_1 . append ( CHAR_1 ) . append ( VAR_3 ) ; } return VAR_1 . toString ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 ) ; if ( VAR_4 . METHOD_3 ( ) ) { TYPE_4 VAR_5 = new TYPE_4 ( ) ; try { METHOD_4 ( VAR_5 , VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_4 , TYPE_5 . METHOD_6 ( ) ) ; return VAR_5 ; } catch ( java.io.IOException e ) { } } return null ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) { if ( ! ( VAR_3 ) ) return ; TYPE_4 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , VAR_6 class ) ; if ( VAR_4 != null ) { TYPE_5 VAR_7 = TYPE_6 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_8 , VAR_7 ) ; } VAR_9 . METHOD_1 ( VAR_1 , VAR_2 ) ; } 
synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 , int VAR_8 , int VAR_9 , int VAR_10 , int VAR_11 , int VAR_12 , int VAR_13 , float VAR_14 , int VAR_15 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ) ; } 
private boolean METHOD_1 ( int id ) { switch ( id ) { case VAR_1 : METHOD_2 ( ) ; return true ; case VAR_2 : METHOD_3 ( ) ; return true ; case VAR_3 : METHOD_4 ( ) ; return true ; default : return false ; } } 
private void METHOD_1 ( int offset ) { if ( ( VAR_1 [ offset ] ) != ( VAR_2 ) ) { VAR_3 = VAR_1 [ offset ] ; } else if ( ( VAR_3 ) != ( VAR_2 ) ) { VAR_1 [ offset ] = VAR_3 ; if ( ( VAR_3 ) >= 0 ) { VAR_4 [ VAR_3 ] = offset ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) ; server . METHOD_5 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) ; assertEquals ( STRING_4 , VAR_1 . METHOD_8 ( ) ) ; VAR_1 . METHOD_9 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final long VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_2 ) ; if ( VAR_1 == 0 ) { return ; } final int VAR_3 = 6 ; TYPE_1 . METHOD_4 ( METHOD_3 ( ) , VAR_4 , METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( ) ; assert VAR_3 != null ; TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( ) ; if ( VAR_4 == null ) { return false ; } int start = VAR_4 . METHOD_4 ( ) ; return METHOD_5 ( start , VAR_2 ) ; } 
public void METHOD_1 ( int VAR_1 , java.util.ArrayList < TYPE_1 > VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; java.util.ArrayList < TYPE_2 > response = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_4 : VAR_2 ) { response . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_4 ) ) ; } if ( RIL . RILJ_LOGD ) VAR_3 . METHOD_5 ( VAR_5 , response ) ; VAR_6 . METHOD_6 ( new android.os.AsyncResult ( null , response , null ) ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( METHOD_2 ( ) ) != 1 ) { throw new TYPE_1 ( this , STRING_1 ) ; } if ( ( ! ( ( METHOD_3 ( ) ) instanceof TYPE_2 ) ) || ( ! ( ( ( TYPE_2 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ) ) ) ) { throw new TYPE_1 ( this , STRING_2 ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , int VAR_3 , java.lang.String VAR_4 , int VAR_5 ) throws java.io.IOException { TYPE_2 options = new TYPE_2 ( ) ; VAR_6 = VAR_2 ; VAR_7 = VAR_3 ; TYPE_3 VAR_8 = new TYPE_3 ( ) ; METHOD_1 ( VAR_5 , VAR_4 , VAR_1 , VAR_8 , options ) ; } 
private void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { VAR_3 . METHOD_2 ( ) ; TYPE_3 request = new TYPE_3 ( null , null , null , ( - 1 ) , null , VAR_1 , VAR_2 ) ; VAR_4 . METHOD_3 ( request ) ; VAR_5 . METHOD_4 ( request ) ; } 
private static void METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 , boolean VAR_4 , TYPE_1 VAR_5 ) { TYPE_2 VAR_6 = VAR_7 . METHOD_2 ( VAR_1 ) ; if ( VAR_6 == null ) { return ; } TYPE_3 VAR_8 = TYPE_3 . METHOD_2 ( VAR_2 ) ; VAR_6 . METHOD_3 ( ) . METHOD_1 ( VAR_5 , VAR_8 , VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( 0 ) ; org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( ( - 1 ) ) ; org.junit.Assert.assertEquals ( ( - 1 ) , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( ) , VAR_1 , null , VAR_2 , null , VAR_3 , false , true , FLOAT_1 , ( ( TYPE_3 ) ( null ) ) , ( ( TYPE_4 [ ] ) ( null ) ) ) ; } 
protected void METHOD_1 ( ) throws java.io.IOException { if ( ( fd ) != null ) { if ( ( ( fd ) == ( VAR_1 . out ) ) || ( ( fd ) == ( VAR_2 ) ) ) { METHOD_2 ( ) ; } else { VAR_3 . set ( VAR_4 . TRUE ) ; try { METHOD_3 ( ) ; } finally { VAR_3 . set ( VAR_4 . FALSE ) ; } } } } 
public void METHOD_1 ( ) { java.lang.Class < ? > target = VAR_1 class ; java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( target , null , new java.lang.String [ ] { STRING_1 } ) ; TYPE_3 VAR_3 = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 , 0 , VAR_2 ) ; VAR_3 . run ( null ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_3 ( VAR_7 class , ( ( target . getName ( ) ) + STRING_2 ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( VAR_8 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_2 VAR_3 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; VAR_4 = METHOD_5 ( new TYPE_1 ( VAR_1 . METHOD_6 ( ) , VAR_3 , VAR_2 ) , VAR_1 ) ; return false ; } 
private void METHOD_1 ( TYPE_1 context , int VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 == null ) { TYPE_4 . METHOD_4 ( context ) ; TYPE_5 . e ( STRING_1 , STRING_2 ) ; } else { TYPE_6 call = VAR_2 . METHOD_5 ( ) ; if ( call != null ) { call . METHOD_6 ( VAR_1 ) ; TYPE_3 . METHOD_2 ( ) . METHOD_7 ( false , false ) ; } } } 
public static void METHOD_1 ( android.content.Intent VAR_1 ) { if ( ( VAR_2 ) == null ) { return ; } int VAR_3 = VAR_1 . METHOD_2 ( VAR_4 , ( - 1 ) ) ; VAR_5 = ( VAR_3 != ( VAR_6 ) ) && ( VAR_3 != ( VAR_7 ) ) ; TYPE_1 . METHOD_3 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { android.util.Slog.w ( TYPE_3 . TAG , ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) ) ; return VAR_2 != null ? VAR_3 . METHOD_2 ( VAR_1 . netId , VAR_2 ) : VAR_3 . METHOD_3 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String id , boolean VAR_1 ) { TYPE_2 r = VAR_2 . get ( id ) ; TYPE_1 VAR_3 = null ; if ( r != null ) { VAR_3 = METHOD_2 ( r , VAR_1 ) ; if ( VAR_1 ) { VAR_2 . METHOD_3 ( r ) ; } } return VAR_3 ; } 
public void METHOD_1 ( TYPE_1 context , int VAR_1 , int VAR_2 , android.os.Message VAR_3 ) throws TYPE_2 { METHOD_2 ( ) ; try { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_1 , e , VAR_5 ) ; } if ( ! ( TYPE_3 . METHOD_3 ( context , VAR_6 ) ) ) { METHOD_4 ( ( ( VAR_2 == ( VAR_7 ) ) && ( TYPE_3 . METHOD_5 ( context ) ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { VAR_1 . append ( CHAR_1 ) ; } java.lang.String VAR_3 = VAR_1 . toString ( ) ; try { TYPE_2 . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_6 ) ; fail ( STRING_1 ) ; } catch ( TYPE_4 e ) { } } 
private void METHOD_1 ( TYPE_1 expected , java.io.File VAR_1 ) throws java.lang.Exception { byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; byte [ ] VAR_3 = TYPE_3 . METHOD_4 ( expected ) ; TYPE_4 . METHOD_5 ( VAR_3 , VAR_2 ) ; } 
private static void METHOD_1 ( final int id ) { try { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( id ) ; TYPE_1 . METHOD_5 ( id ) ; TYPE_2 . METHOD_6 ( id ) ; } catch ( java.lang.Throwable e ) { throw TYPE_1 . METHOD_7 ( e ) ; } finally { VAR_1 . METHOD_8 ( ) ; } } 
public int METHOD_1 ( long when ) { int VAR_1 = ( ( int ) ( when / INT_1 ) ) ; int VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 ) ; if ( VAR_2 < 0 ) { VAR_2 = ( ~ VAR_2 ) - 1 ; if ( VAR_2 < 0 ) { return VAR_4 ; } } return ( VAR_5 ) + ( ( VAR_6 [ ( ( VAR_7 [ VAR_2 ] ) & INT_2 ) ] ) * INT_1 ) ; } 
private synchronized void METHOD_1 ( byte VAR_1 , byte [ ] data ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( data ) ; android.os.Message msg = VAR_5 . METHOD_3 ( VAR_6 ) ; msg.arg1 = VAR_1 ; msg.obj = VAR_4 ; VAR_5 . METHOD_4 ( msg ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 node ) { if ( ! ( VAR_1 ) ) { return new TYPE_1 ( ) ; } TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_3 parent = METHOD_3 ( ) ; TYPE_1 VAR_3 ; while ( parent != null ) { VAR_3 = parent . METHOD_2 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; parent = parent . METHOD_3 ( ) ; } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 ... VAR_1 ) { assertEquals ( VAR_1 [ 0 ] . x , VAR_1 [ 0 ] . y ) ; assertEquals ( VAR_1 [ 1 ] . x , VAR_1 [ 1 ] . y ) ; METHOD_2 ( VAR_1 [ 2 ] . x , VAR_1 [ 2 ] . y ) ; } 
private static void METHOD_1 ( TYPE_1 entry , long VAR_1 , long VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) { assertEquals ( VAR_1 , VAR_6 ) ; assertEquals ( VAR_2 , VAR_7 ) ; assertEquals ( VAR_3 , VAR_8 ) ; assertEquals ( VAR_4 , VAR_9 ) ; assertEquals ( VAR_5 , VAR_10 ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( boolean VAR_1 , java.lang.String ... VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( ) ; try { METHOD_3 ( VAR_4 < java.lang.String > METHOD_4 ( ) , VAR_3 , VAR_2 , VAR_5 ) ; return METHOD_5 ( VAR_3 , new TYPE_3 ( ) , VAR_1 ) ; } finally { VAR_3 . METHOD_6 ( ) ; } } 
private static java.io.File METHOD_1 ( ) throws TYPE_1 , TYPE_2 , java.io.IOException { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( ) ; java.io.File VAR_2 = TYPE_5 . METHOD_3 ( ) ; TYPE_6 VAR_3 = new TYPE_6 ( VAR_2 , null ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , STRING_4 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) ; VAR_1 . METHOD_7 ( VAR_4 ) ; } } ) ; } 
public void METHOD_1 ( TYPE_1 < ? > parent , TYPE_2 VAR_1 , int VAR_2 , long id ) { if ( ( VAR_3 . METHOD_2 ( ) ) == 1 ) { final TYPE_3 VAR_4 = ( ( TYPE_3 ) ( METHOD_3 ( VAR_5 ) ) ) ; if ( ( VAR_4 == null ) || ( ! ( VAR_4 . METHOD_4 ( ) ) ) ) { VAR_6 . METHOD_5 ( ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { byte [ ] VAR_1 = new byte [ ] { INT_1 , - 100 , 3 , 0 , 0 , 0 , 0 , 1 } ; TYPE_1 in = new TYPE_2 ( new TYPE_3 ( VAR_1 ) ) ; assertEquals ( ( - 1 ) , in . METHOD_2 ( ) ) ; assertEquals ( ( - 1 ) , in . METHOD_2 ( ) ) ; assertEquals ( 0 , in . METHOD_3 ( ) ) ; } 
private void METHOD_1 ( int index ) { TYPE_1 VAR_1 = VAR_2 . get ( index ) ; try { VAR_3 . METHOD_2 ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( TYPE_2 . TAG , ( ( ( STRING_1 + ( VAR_1 . callback ) ) + STRING_2 ) + ( VAR_1 . pkg ) ) ) ; } VAR_2 . METHOD_3 ( index ) ; METHOD_4 ( VAR_4 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { METHOD_5 ( ) ; } } 
public static void METHOD_1 ( TYPE_1 VAR_1 , java.io.File out , java.util.List < TYPE_2 > VAR_2 ) throws java.io.IOException { synchronized ( VAR_3 ) { if ( ( VAR_4 . METHOD_2 ( ) ) || ( ! ( TYPE_3 . METHOD_3 ( ) ) ) ) { return ; } VAR_4 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_5 ( out ) ; VAR_4 . METHOD_6 ( new TYPE_4 ( new TYPE_5 ( out ) ) ) ; TYPE_3 . METHOD_7 ( VAR_2 ) ; } } 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String path ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( path , VAR_2 ) ; java.util.Set < byte [ ] > VAR_3 = VAR_4 ; java.util.Set < java.lang.String > VAR_5 = new TYPE_2 < java.lang.String > ( ) ; for ( byte [ ] value : VAR_3 ) { VAR_5 . METHOD_2 ( new java.lang.String ( TYPE_3 . METHOD_3 ( value ) ) ) ; } return VAR_5 ; } 
public synchronized void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { throw new java.io.IOException ( STRING_1 ) ; } if ( ( - 1 ) == ( VAR_2 ) ) { throw new java.io.IOException ( STRING_2 ) ; } pos = VAR_2 ; } 
void METHOD_1 ( final java.lang.String packageName , final int userId ) { if ( VAR_1 ) { TYPE_1 . d ( VAR_2 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + userId ) ) ; } final TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( packageName , userId ) ; METHOD_3 ( packageName , userId , VAR_3 ) ; VAR_5 . METHOD_4 ( packageName , userId ) ; } 
public byte [ ] METHOD_1 ( byte [ ] VAR_1 ) throws java.io.IOException { try { if ( TYPE_1 . METHOD_2 ( context ) ) { return VAR_2 . METHOD_3 ( VAR_3 , VAR_4 , VAR_1 ) ; } else { return VAR_2 . METHOD_3 ( VAR_4 , VAR_1 ) ; } } catch ( TYPE_2 e ) { throw new TYPE_3 ( VAR_5 ) ; } } 
static void METHOD_1 ( int id ) { try { VAR_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( id ) ; if ( VAR_2 ) { TYPE_1 . METHOD_4 ( id ) ; } else { TYPE_1 . METHOD_5 ( id ) ; } } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_6 ( e ) ; } finally { VAR_1 . METHOD_7 ( ) ; } } 
public void METHOD_1 ( java.lang.String path ) { if ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) { throw new TYPE_1 ( STRING_3 ) ; } METHOD_3 ( VAR_2 , path ) ; } 
public synchronized void METHOD_1 ( int b ) throws java.io.IOException { VAR_1 . METHOD_2 ( ( ( byte ) ( b ) ) ) ; if ( b == CHAR_1 ) { synchronized ( out ) { TYPE_1 . METHOD_3 ( VAR_2 , out ) ; VAR_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , out ) ; VAR_1 . METHOD_5 ( ) ; } } if ( ( VAR_1 . METHOD_6 ( ) ) == 1 ) { METHOD_1 ( CHAR_1 ) ; } } 
public void METHOD_1 ( ) { if ( VAR_1 ) log ( STRING_1 ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_3 , null ) ; VAR_2 . METHOD_2 ( ) . METHOD_5 ( METHOD_4 ( ) , VAR_4 , null ) ; VAR_2 . METHOD_2 ( ) . METHOD_6 ( METHOD_4 ( ) , VAR_5 , null ) ; VAR_6 . METHOD_7 ( this ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String packageName = STRING_1 ; java.lang.String VAR_1 = ( packageName . METHOD_2 ( CHAR_1 , CHAR_2 ) ) + STRING_2 ; java.util.Map < java.lang.String , TYPE_1 > input = TYPE_2 . METHOD_3 ( ) ; input . METHOD_4 ( STRING_3 , new TYPE_1 ( true ) . METHOD_5 ( STRING_4 , true ) ) ; METHOD_6 ( packageName , input ) ; METHOD_7 ( VAR_2 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out , java.lang.String VAR_2 , int size ) { if ( out . METHOD_2 ( ) ) { out . METHOD_3 ( java.lang.String.format ( STRING_1 , ( VAR_2 + STRING_2 ) , java.lang.Integer . METHOD_4 ( size ) ) ) ; } out . METHOD_5 ( size ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 , STRING_3 ) ; assertEquals ( STRING_4 , TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_1 ) ) ; assertEquals ( STRING_5 , TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) ) ; assertEquals ( STRING_6 , TYPE_2 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_1 ) ) ; assertEquals ( STRING_6 , TYPE_2 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_2 ) ) ; } 
public boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == true ) { if ( VAR_1 ) android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ; return true ; } try { return VAR_3 . METHOD_1 ( TYPE_1 . METHOD_3 ( ) ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_2 , e ) ; } return false ; } 
public void METHOD_1 ( ) throws java.io.IOException { assertTrue ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( true ) ; assertTrue ( STRING_2 , VAR_2 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( false ) ; assertFalse ( STRING_3 , VAR_3 . METHOD_2 ( ) ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; VAR_3 . METHOD_4 ( ) ; try { VAR_3 . METHOD_5 ( ) ; } catch ( java.lang.Throwable expected ) { } } 
public static boolean METHOD_1 ( TYPE_1 context , int VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( context ) ; if ( VAR_2 == null ) { return false ; } if ( VAR_1 != ( VAR_3 ) ) { return false ; } return ( context . METHOD_3 ( VAR_4 ) ) == ( VAR_5 ) ; } 
public void METHOD_1 ( TYPE_1 test , java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( test ) ) ) { if ( ( VAR_3 ) != null ) { VAR_3 . info ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_4 ) ) ; } } super . METHOD_1 ( test , VAR_1 ) ; } 
public void METHOD_1 ( ) { assertEquals ( null , TYPE_1 . METHOD_2 ( ) ) ; TYPE_2 VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; try { TYPE_1 . METHOD_3 ( VAR_2 ) ; try { METHOD_4 ( VAR_2 , TYPE_1 . METHOD_2 ( ) ) ; } finally { TYPE_1 . METHOD_3 ( VAR_1 ) ; } } catch ( TYPE_4 VAR_3 ) { assertNotNull ( TYPE_5 . METHOD_5 ( ) ) ; } METHOD_4 ( VAR_1 , TYPE_1 . METHOD_2 ( ) ) ; } 
private void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , TYPE_2 . METHOD_2 ( ) , true ) ; TYPE_3 VAR_2 = new TYPE_3 ( null , VAR_1 , VAR_3 , VAR_4 ) ; VAR_2 . METHOD_3 ( VAR_5 class , VAR_6 ) ; VAR_2 . METHOD_3 ( VAR_7 class , VAR_8 ) ; VAR_2 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( true ) ; } catch ( java.lang.Exception e ) { e . METHOD_6 ( ) ; } } 
private com.android.jack.ir.ast.JMethod METHOD_1 ( TYPE_1 VAR_1 , com.android.jack.ir.ast.JDefinedClassOrInterface VAR_2 ) { com.android.jack.ir.ast.JMethod method = null ; java.lang.String VAR_3 = ( new java.lang.String ( VAR_4 ) ) + ( new java.lang.String ( VAR_1 . METHOD_2 ( ) ) ) ; for ( com.android.jack.ir.ast.JMethod VAR_5 : VAR_2 . METHOD_3 ( ) ) { if ( VAR_3 . equals ( TYPE_2 . METHOD_4 ( ) . getName ( VAR_5 ) ) ) { method = VAR_5 ; break ; } } return method ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 class ) ; java.util.ArrayList < TYPE_1 > VAR_5 = new java.util.ArrayList < > ( ) ; VAR_5 . METHOD_5 ( VAR_3 ) ; TYPE_2 . when ( VAR_1 . METHOD_6 ( ) ) . thenReturn ( VAR_5 ) ; boolean VAR_6 = VAR_7 . METHOD_7 ( VAR_8 ) ; org.mockito.Mockito.verify ( VAR_9 ) . METHOD_8 ( VAR_1 , VAR_3 ) ; assertEquals ( VAR_6 , true ) ; } 
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) return ; android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ; METHOD_3 ( ) ; android.os.Message msg = android.os.Message . METHOD_4 ( VAR_2 , VAR_3 ) ; VAR_4 . METHOD_5 ( ) . METHOD_6 ( msg ) ; try { VAR_5 . METHOD_7 ( ) ; } catch ( TYPE_1 e ) { e . METHOD_8 ( ) ; } org.junit.Assert.assertEquals ( VAR_6 , VAR_4 . METHOD_9 ( ) ) ; } 
private java.io.File METHOD_1 ( ) throws TYPE_1 , java.io.IOException { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; java.io.File VAR_2 = TYPE_4 . METHOD_3 ( ) ; TYPE_5 VAR_3 = new TYPE_5 ( VAR_2 , VAR_4 , false , false ) ; VAR_1 . METHOD_4 ( VAR_3 , false ) ; return VAR_2 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 result ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { ret = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 ) ; TYPE_5 . METHOD_3 ( VAR_7 , ret ) ; } VAR_2 . METHOD_4 ( rr , VAR_1 , ret ) ; } } 
public int METHOD_1 ( final TYPE_1 request , TYPE_1 VAR_1 ) { if ( VAR_2 ) { android.util.Log.v ( VAR_3 . TAG , STRING_1 ) ; } VAR_4 . METHOD_2 ( ) ; try { byte [ ] VAR_5 = ( ( byte [ ] ) ( request . METHOD_3 ( VAR_6 ) ) ) ; if ( ! ( TYPE_2 . equals ( VAR_5 , VAR_7 ) ) ) { return VAR_8 ; } } catch ( java.io.IOException e ) { return VAR_9 ; } VAR_1 . METHOD_4 ( VAR_10 , VAR_7 ) ; return VAR_11 ; } 
public void METHOD_1 ( ) throws java.io.IOException { java.lang.Class VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( STRING_1 ) ; assert VAR_2 != null ; byte [ ] VAR_3 = new byte [ 20 ] ; int length = VAR_2 . METHOD_4 ( VAR_3 ) ; java.lang.String s = new java.lang.String ( VAR_3 , 0 , length ) ; assert STRING_2 . equals ( s ) ; VAR_2 . METHOD_5 ( ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ( STRING_1 + ( this ) ) ) ; METHOD_3 ( ) ; if ( VAR_1 ) { synchronized ( VAR_2 class ) { ( VAR_3 ) -- ; METHOD_2 ( ( STRING_2 + ( VAR_3 ) ) ) ; } } } 
private void METHOD_1 ( ) { TYPE_1 config = METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( ( ( VAR_1 ) == ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) && ( ( VAR_4 ) == null ) ) { METHOD_4 ( ) ; } else if ( ( VAR_4 ) != null ) { METHOD_5 ( ) ; } } 
private void METHOD_1 ( TYPE_1 v ) throws java.io.IOException { if ( ! ( v . METHOD_2 ( ) ) ) { return ; } TYPE_2 VAR_1 = METHOD_3 ( v . METHOD_4 ( ) ) ; if ( VAR_1 == null ) { v . METHOD_5 ( ) ; } else { VAR_2 . METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_7 ( ) ; VAR_2 . METHOD_8 ( VAR_1 . name ) ; VAR_2 . METHOD_9 ( VAR_4 ) ; VAR_2 . METHOD_8 ( VAR_5 ) ; VAR_2 . METHOD_10 ( ) ; } } 
public static boolean METHOD_1 ( TYPE_1 type ) { java.util.List < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( type ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { if ( VAR_2 != ( VAR_3 ) ) { if ( type == ( VAR_4 ) ) { return false ; } return true ; } } return false ; } 
public void METHOD_1 ( ) { synchronized ( this ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; try { VAR_2 . METHOD_1 ( ) ; out . METHOD_1 ( ) ; } catch ( java.io.IOException x ) { VAR_3 = true ; } VAR_2 = null ; VAR_4 = null ; out = null ; } } } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) { return null ; } java.lang.String VAR_2 = METHOD_2 ( null , VAR_1 ) . getName ( VAR_3 ) ; return VAR_2 ; } 
public boolean METHOD_1 ( android.os.Message VAR_1 ) { METHOD_2 ( VAR_1 , this ) ; switch ( VAR_2 ) { case VAR_3 : case VAR_4 : VAR_5 = VAR_6 ; break ; case VAR_7 : case VAR_8 : VAR_5 = VAR_9 ; METHOD_3 ( VAR_1 ) ; break ; case VAR_10 : METHOD_4 ( VAR_11 , VAR_12 ) ; return VAR_13 ; case VAR_14 : VAR_5 = VAR_9 ; METHOD_3 ( VAR_1 ) ; break ; case VAR_15 : VAR_5 = VAR_9 ; METHOD_3 ( VAR_1 ) ; break ; default : return VAR_13 ; } return VAR_16 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; assertNotNull ( VAR_1 ) ; TYPE_2 method = TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; assertNotNull ( VAR_1 . METHOD_4 ( method , 2 , STRING_5 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; if ( ! ( VAR_1 . METHOD_5 ( ) ) ) { int VAR_2 = VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ; assertTrue ( STRING_1 , ( ( VAR_2 >= 0 ) && ( VAR_2 <= INT_1 ) ) ) ; } } 
private final java.lang.String METHOD_1 ( final boolean VAR_1 , final byte [ ] VAR_2 ) { int VAR_3 ; if ( VAR_1 ) { VAR_3 = VAR_4 ; } else { VAR_3 = VAR_5 ; } if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { VAR_3 |= VAR_6 ; } return TYPE_2 . METHOD_3 ( mContext , VAR_3 , VAR_2 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , char value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , boolean VAR_4 ) { try { VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_4 ) VAR_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; } catch ( android.os.RemoteException e ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { byte [ ] VAR_1 = STRING_1 . METHOD_2 ( ) ; TYPE_1 os = new TYPE_1 ( ) ; long VAR_2 = TYPE_2 . METHOD_3 ( os ) ; try { TYPE_2 . METHOD_4 ( VAR_2 , VAR_1 , 0 , VAR_1 . length ) ; assertEquals ( VAR_1 . length , os . size ( ) ) ; assertEquals ( TYPE_3 . toString ( VAR_1 ) , TYPE_3 . toString ( os . METHOD_5 ( ) ) ) ; } finally { TYPE_2 . METHOD_6 ( VAR_2 ) ; } } 
public static void METHOD_1 ( java.io.File [ ] VAR_1 , java.io.File [ ] VAR_2 , java.io.File VAR_3 , boolean VAR_4 , boolean VAR_5 , float VAR_6 , TYPE_1 VAR_7 , TYPE_2 [ ] VAR_8 ) throws java.lang.Exception { TYPE_3 . METHOD_1 ( new TYPE_4 ( ) , VAR_1 , VAR_2 , null , null , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; } 
public TYPE_1 METHOD_1 ( final boolean VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { return null ; } TYPE_2 VAR_3 = null ; for ( TYPE_2 r : VAR_2 . METHOD_3 ( ) ) { if ( ( r . METHOD_4 ( ) ) == VAR_1 ) { if ( ( VAR_3 == null ) || ( ( r . METHOD_5 ( VAR_3 ) ) > 0 ) ) { VAR_3 = r ; } } } return VAR_2 . get ( VAR_3 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , short value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( subId ) ; if ( VAR_2 != null ) { if ( ! ( TYPE_2 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ) { return null ; } return VAR_2 . METHOD_4 ( ) ; } else { loge ( STRING_2 ) ; return null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( 9 , ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) ) , STRING_7 ) ; TYPE_1 . METHOD_2 ( STRING_8 , ( STRING_1 + ( ( ( STRING_9 + STRING_10 ) + STRING_11 ) + STRING_12 ) ) , STRING_13 ) ; } 
public static float METHOD_1 ( float a , float b ) { if ( a != a ) return a ; if ( ( ( a == FLOAT_1 ) && ( b == FLOAT_1 ) ) && ( ( TYPE_1 . METHOD_2 ( b ) ) == ( VAR_1 ) ) ) { return b ; } return a <= b ? a : b ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) ; verify ( VAR_3 , METHOD_5 ( 1 ) ) . METHOD_6 ( METHOD_7 ( ) ) ; verify ( VAR_4 , METHOD_5 ( 1 ) ) . METHOD_8 ( 0 ) ; } 
public TYPE_1 [ ] METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.io.File VAR_2 = METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_2 log = new TYPE_2 ( VAR_3 ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , log ) ; VAR_1 = VAR_4 . METHOD_1 ( ) ; } else { VAR_1 = new TYPE_1 [ 0 ] ; } } return VAR_1 ; } 
< TYPE_1 > TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { try { TYPE_2 VAR_2 = new TYPE_2 ( new TYPE_3 ( METHOD_2 ( VAR_1 ) ) ) ; TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( ) ) ) ; METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_3 . METHOD_5 ( ) ) ; return VAR_3 ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return null ; } } 
static java.lang.String METHOD_1 ( TYPE_1 method , TYPE_1 call ) { assert ( call instanceof TYPE_2 ) || ( call instanceof TYPE_3 ) ; TYPE_4 VAR_1 = new TYPE_4 ( method , call ) ; method . METHOD_2 ( VAR_1 ) ; java.lang.String name = VAR_1 . METHOD_3 ( ) ; return name ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 response ) { VAR_2 . METHOD_2 ( VAR_1 , response ) ; TYPE_2 request = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( request != null ) { VAR_4 = response ; METHOD_4 ( VAR_1 , request ) ; } } 
public final TYPE_1 METHOD_1 ( long id ) { for ( TYPE_2 VAR_1 : VAR_2 . values ( ) ) { TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( id ) ; if ( VAR_3 != null ) { return VAR_3 ; } } return METHOD_3 ( id ) ; } 
public static final void METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 , TYPE_1 VAR_3 ) throws TYPE_2 { if ( VAR_4 ) { TYPE_3 . d ( VAR_5 . TAG , STRING_1 ) ; } TYPE_4 . METHOD_2 ( VAR_6 , STRING_2 ) ; TYPE_5 . METHOD_3 ( ) ; TYPE_5 . METHOD_4 ( ) ; TYPE_6 . METHOD_5 ( ) ; TYPE_5 . METHOD_6 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; java.util.List < TYPE_2 > VAR_2 = TYPE_2 . METHOD_2 ( ) . get ( VAR_1 ) ; assertNotNull ( VAR_2 ) ; for ( TYPE_2 p : VAR_2 ) { assertTrue ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) , p . METHOD_3 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_1 ) ; METHOD_3 ( ) ; assertTrue ( ( ( VAR_3 . METHOD_4 ( ) ) == null ) ) ; org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) . METHOD_2 ( ) ; METHOD_6 ( 4 , false , false ) ; assertEquals ( VAR_1 , VAR_3 . METHOD_4 ( ) ) ; org.mockito.Mockito.verify ( VAR_2 ) . METHOD_2 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ! ( VAR_1 instanceof TYPE_4 ) ) { throw new TYPE_3 ( STRING_1 ) ; } TYPE_4 VAR_3 = ( ( TYPE_4 ) ( VAR_1 ) ) ; VAR_4 = new TYPE_5 ( VAR_3 . METHOD_2 ( ) , VAR_2 , VAR_3 . METHOD_3 ( ) , VAR_5 ) ; VAR_6 . METHOD_4 ( VAR_4 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , boolean value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( ) ; final TYPE_2 config = TYPE_2 . METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 , config , new java.lang.Runnable ( ) { public void run ( ) { config . METHOD_5 ( VAR_1 , true ) ; } } ) ; } 
public static java.lang.String METHOD_1 ( java.util.Map m ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( TYPE_2 VAR_2 = m . METHOD_2 ( ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; ) { java.lang.Object key = VAR_2 . METHOD_5 ( ) ; VAR_1 . append ( ( ( ( key + STRING_1 ) + ( m . get ( key ) ) ) + STRING_2 ) ) ; } return VAR_1 . toString ( ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { for ( int i = 0 ; i < INT_1 ; i ++ ) { if ( METHOD_2 ( ) ) { TYPE_1 . d ( VAR_1 . TAG , STRING_1 ) ; return ; } TYPE_1 . d ( VAR_1 . TAG , STRING_2 ) ; TYPE_2 . METHOD_3 ( INT_2 ) ; } throw new TYPE_3 ( STRING_3 ) ; } 
public void run ( ) { boolean VAR_1 = false ; try { VAR_2 . METHOD_1 ( ) ; } catch ( TYPE_1 e ) { VAR_1 = true ; } catch ( java.lang.IllegalArgumentException e ) { VAR_1 = true ; } assertTrue ( VAR_1 ) ; assertFalse ( VAR_2 . METHOD_2 ( ) ) ; assertFalse ( VAR_2 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) ) ) . thenReturn ( VAR_2 ) ; assertFalse ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; METHOD_6 ( ) ; assertTrue ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; org.mockito.Mockito.verify ( VAR_1 ) . METHOD_2 ( org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( false ) , org.mockito.Matchers.eq ( false ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) { TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 ) ; return ; } METHOD_5 ( VAR_2 , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_6 ( VAR_2 ) ; METHOD_7 ( VAR_2 , VAR_5 ) ; final TYPE_2 VAR_6 = METHOD_6 ( VAR_2 ) ; TYPE_3 . METHOD_8 ( VAR_6 , VAR_4 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String name , TYPE_3 < java.lang.String > VAR_2 ) { try { return VAR_1 . METHOD_2 ( name ) ; } catch ( java.lang.Throwable e ) { TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 , new TYPE_5 ( VAR_2 , e ) ) ; TYPE_4 . METHOD_3 ( ) . METHOD_6 ( ) ; return null ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( TYPE_2 . equals ( VAR_2 , VAR_1 ) ) ) { if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( ) ; } VAR_2 = VAR_1 ; TYPE_3 . d ( this , STRING_1 , VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 device = VAR_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_1 , STRING_1 ) ; assertTrue ( METHOD_5 ( VAR_1 , STRING_1 ) ) ; TYPE_3 . METHOD_6 ( VAR_1 , STRING_1 ) ; assertFalse ( METHOD_5 ( VAR_1 , STRING_1 ) ) ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) , TYPE_5 . METHOD_4 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { return false ; } if ( VAR_1 == ( VAR_3 ) ) { return false ; } if ( ( ( ( VAR_1 == ( VAR_4 ) ) || ( VAR_1 == ( VAR_5 ) ) ) || ( VAR_1 == ( VAR_6 ) ) ) || ( VAR_1 == ( VAR_7 ) ) ) { return false ; } return true ; } 
private boolean METHOD_1 ( int uid ) { final java.lang.String [ ] VAR_1 = mContext . METHOD_2 ( ) . METHOD_3 ( uid ) ; final int userId = TYPE_1 . METHOD_4 ( uid ) ; for ( java.lang.String packageName : VAR_1 ) { if ( ! ( VAR_2 . METHOD_5 ( packageName , uid , userId ) ) ) { return false ; } } return true ; } 
private static void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( VAR_2 > VAR_3 ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_3 ) + STRING_3 ) ) ; } if ( VAR_2 < 0 ) { throw new TYPE_1 ( VAR_2 ) ; } if ( VAR_3 > VAR_1 ) { throw new TYPE_1 ( VAR_3 ) ; } } 
public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { synchronized ( VAR_3 ) { switch ( type ) { case VAR_4 : if ( ( ( VAR_5 ) != ( VAR_6 ) ) && ( ( VAR_5 ) != ( VAR_7 ) ) ) { throw new TYPE_1 ( ( STRING_1 + ( VAR_5 ) ) ) ; } VAR_5 = VAR_8 ; break ; case VAR_9 : VAR_5 = VAR_6 ; break ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 type ) { if ( type == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_1 result = VAR_1 . get ( type ) ; if ( result == null ) { result = new TYPE_1 ( new TYPE_3 ( type ) ) ; VAR_1 . METHOD_3 ( type , result ) ; } return result ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 { super . METHOD_1 ( VAR_1 ) ; if ( ( output ) == null ) { return ; } METHOD_2 ( ) ; if ( VAR_1 == null ) { VAR_2 = new TYPE_3 ( output ) ; } else { VAR_2 = new TYPE_3 ( output , VAR_1 ) ; } } 
protected void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 , TYPE_5 { if ( VAR_2 != null ) { throw new TYPE_4 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) . getName ( ) ) ) ) ; } METHOD_3 ( VAR_1 , key ) ; } 
public void METHOD_1 ( long session , long VAR_1 , long context , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; if ( ! ( VAR_4 ) ) { assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_5 ) ) ) ; } super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_1 ) ; TYPE_3 . get ( VAR_2 ) . METHOD_6 ( VAR_1 ) ; METHOD_7 ( ) ; VAR_3 = METHOD_8 ( ) ; } 
protected static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . size ( ) ; TYPE_2 sb = new TYPE_2 ( ( ( VAR_2 * 5 ) + 2 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( VAR_1 . get ( i ) . METHOD_2 ( ) ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; } 
public static int METHOD_1 ( TYPE_1 provider , int VAR_1 ) { synchronized ( VAR_2 ) { int size = VAR_2 . size ( ) ; if ( ( VAR_1 < 1 ) || ( VAR_1 > size ) ) { VAR_1 = size + 1 ; } VAR_2 . METHOD_2 ( ( VAR_1 - 1 ) , provider ) ; VAR_3 . METHOD_3 ( provider . getName ( ) , provider ) ; TYPE_2 . METHOD_4 ( ) ; return VAR_1 ; } } 
public int METHOD_1 ( java.io.File VAR_1 ) { try { java.lang.Object value = TYPE_1 . METHOD_1 ( new TYPE_2 ( VAR_1 ) ) ; if ( value instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( value ) ) . METHOD_2 ( ) ; } else if ( value instanceof java.lang.String ) { } } catch ( TYPE_3 e ) { } catch ( TYPE_4 e ) { throw new java.lang.RuntimeException ( e ) ; } return 1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( this ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; if ( ( VAR_3 ) != null ) { VAR_1 . METHOD_3 ( VAR_3 ) ; } if ( ( VAR_4 ) != null ) { VAR_1 . METHOD_3 ( VAR_4 ) ; } } VAR_1 . METHOD_4 ( this ) ; } 
private long METHOD_1 ( int subId , boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 ) ; long VAR_5 = VAR_2 . METHOD_4 ( ( ( VAR_6 ) + subId ) , VAR_7 ) ; if ( ( VAR_5 == ( VAR_7 ) ) && VAR_1 ) { VAR_5 = METHOD_5 ( subId ) ; if ( VAR_5 != ( VAR_7 ) ) { METHOD_6 ( VAR_5 , subId ) ; METHOD_7 ( subId ) ; } } return VAR_5 ; } 
public byte [ ] METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_1 ( ) ; } } catch ( TYPE_1 e ) { } METHOD_2 ( ) ; synchronized ( VAR_2 ) { if ( METHOD_3 ( ) ) { if ( TYPE_2 . METHOD_4 ( VAR_3 ) ) { byte [ ] VAR_4 = VAR_5 ; VAR_5 = null ; return VAR_4 ; } else { return null ; } } return null ; } } 
public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , java.util.List < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( STRING_1 , STRING_2 ) ; java.util.List < TYPE_1 > result = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_4 : VAR_2 ) { result . METHOD_3 ( new TYPE_4 ( VAR_1 , VAR_4 , VAR_3 ) ) ; } return TYPE_5 . METHOD_4 ( result ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) instanceof TYPE_2 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; return VAR_2 . METHOD_2 ( ) ; } else { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( VAR_1 ) ) ; return ( ( TYPE_1 ) ( VAR_3 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( null , STRING_1 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( ) , org.mockito.Matchers . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) , org.mockito.Matchers . METHOD_8 ( VAR_5 class ) ) ; } 
protected boolean METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; VAR_1 = false ; } if ( ( VAR_2 ) != null ) { java.util.List < android.bluetooth.BluetoothDevice > VAR_3 = METHOD_3 ( ) ; for ( android.bluetooth.BluetoothDevice VAR_4 : VAR_3 ) { METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; } VAR_2 . METHOD_5 ( ) ; } if ( ( VAR_9 ) != null ) { VAR_9 . METHOD_5 ( ) ; } return true ; } 
static void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } TYPE_2 VAR_6 = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( VAR_6 == null ) { return ; } TYPE_1 VAR_7 = VAR_5 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_6 , VAR_7 ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( method . METHOD_1 ( ) ) || ( method . METHOD_2 ( ) ) ) || ( ! ( VAR_1 . METHOD_3 ( this . METHOD_4 ( ) , method ) ) ) ) { return ; } com.android.jack.ir.ast.JDefinedClassOrInterface VAR_2 = method . METHOD_5 ( ) ; assert VAR_2 != null ; TYPE_1 VAR_3 = new TYPE_1 ( method ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_3 , method ) ; VAR_4 . METHOD_3 ( method ) ; VAR_3 . METHOD_6 ( ) ; } 
public void METHOD_1 ( boolean state ) { synchronized ( VAR_1 ) { android.util.Log . i ( VAR_2 , ( STRING_1 + state ) ) ; VAR_3 = state ; if ( ! state ) { if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( ) ; } } else { METHOD_3 ( ) ; synchronized ( VAR_1 ) { VAR_5 = true ; } } } } 
public void METHOD_1 ( ) throws java.io.IOException { f = java.io.File . METHOD_2 ( STRING_1 , STRING_2 ) ; java.lang.String VAR_1 = f . METHOD_3 ( ) ; VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_1 ( STRING_3 ) ; VAR_2 . METHOD_4 ( ) ; } 
private TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { java.io.File VAR_2 = new java.io.File ( VAR_3 , VAR_4 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_1 = VAR_5 . METHOD_3 ( VAR_2 , false ) ; } else { VAR_5 . METHOD_4 ( this , VAR_3 , ( STRING_1 + ( VAR_3 . METHOD_5 ( ) ) ) ) ; return null ; } } return VAR_1 ; } 
public void METHOD_1 ( java.lang.Runnable r ) { VAR_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; Main . METHOD_4 ( r ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; METHOD_5 ( ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; } 
void METHOD_1 ( long VAR_1 , TYPE_1 ... VAR_2 ) { try { TYPE_2 . METHOD_2 ( VAR_1 ) ; for ( TYPE_1 VAR_3 : VAR_2 ) assertTrue ( VAR_3 . METHOD_3 ( ) ) ; } catch ( TYPE_3 VAR_4 ) { fail ( STRING_1 ) ; } } 
public java.lang.String toString ( ) { if ( ( - 1 ) == ( VAR_1 ) ) { return super . toString ( ) ; } return type . get ( new TYPE_1 ( VAR_2 [ VAR_1 ] , VAR_3 . values [ VAR_1 ] ) ) . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_1 . METHOD_4 ( new TYPE_2 ( ) , STRING_1 . METHOD_5 ( ) ) ; } catch ( TYPE_3 expected ) { } VAR_1 . METHOD_6 ( null , STRING_1 . METHOD_5 ( ) ) ; try { VAR_1 . METHOD_4 ( null , STRING_1 . METHOD_5 ( ) ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } catch ( java.io.IOException expected ) { } } 
private boolean METHOD_1 ( int offset ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; final int line = VAR_1 . METHOD_3 ( offset ) ; final int VAR_3 = VAR_1 . METHOD_4 ( line ) ; final int VAR_4 = ( ( int ) ( VAR_1 . METHOD_5 ( offset ) ) ) ; return METHOD_6 ( ( VAR_4 + ( VAR_2 . METHOD_7 ( ) ) ) , ( VAR_3 + ( VAR_2 . METHOD_8 ( ) ) ) ) ; } 
protected void METHOD_1 ( TYPE_1 state , java.lang.Object arg ) { final TYPE_2 VAR_1 = mContext . METHOD_2 ( VAR_2 ) ; final TYPE_2 VAR_3 = mContext . METHOD_2 ( VAR_4 ) ; state . value = METHOD_3 ( ) . METHOD_4 ( ) ; VAR_5 = mContext . METHOD_5 ( VAR_6 ) ; VAR_7 = new TYPE_3 ( ( state . value ? VAR_1 : VAR_3 ) ) ; VAR_8 = VAR_9 class . getName ( ) ; VAR_10 = VAR_5 ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) throw new TYPE_2 ( ) ; TYPE_1 result = VAR_3 [ VAR_1 ] ; if ( ( ( VAR_4 ) != ( VAR_2 ) ) || ( result == null ) ) throw new TYPE_3 ( ) ; VAR_5 = VAR_1 ; VAR_1 = ( ( VAR_1 ) + 1 ) & ( ( VAR_3 . length ) - 1 ) ; return result ; } 
public java.lang.String METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return STRING_1 ; } java.lang.String VAR_2 = TYPE_1 . METHOD_1 ( this ) ; if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( ( STRING_2 + ( this ) ) , ( STRING_3 + ( this ) ) , STRING_4 ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.io.File VAR_2 = TYPE_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_3 ( ) , null ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_5 ( VAR_2 , true ) ; METHOD_6 ( VAR_1 , VAR_3 , true ) ; } 
public void METHOD_1 ( short id , TYPE_1 status , short VAR_1 ) { if ( VAR_2 ) { android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( STRING_1 + id ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) + STRING_3 ) + VAR_1 ) ) ; } if ( ( status . status ) == ( VAR_3 ) ) { VAR_4 . METHOD_3 ( id , true , VAR_1 ) ; } else { VAR_4 . METHOD_4 ( id , true , status . status ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_8 ( 1 ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_9 ( FLOAT_1 ) ; } 
static void METHOD_1 ( java.lang.Class < ? extends TYPE_1 > VAR_1 , java.lang.StringBuilder VAR_2 ) { java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ; TYPE_5 . METHOD_4 ( VAR_3 , VAR_4 ) ; for ( TYPE_2 VAR_5 : VAR_3 ) { TYPE_6 . METHOD_1 ( VAR_5 , VAR_2 , VAR_6 ) ; } } 
public android.bluetooth.BluetoothDevice METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ; TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) return null ; if ( VAR_1 ) android.util.Log.v ( TYPE_1 . TAG , ( STRING_2 + ( service . METHOD_3 ( ) ) ) ) ; return service . METHOD_3 ( ) ; } 
public void METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_2 listener ) { if ( VAR_2 ) { android.util.Log.w ( VAR_3 . TAG , STRING_1 ) ; return ; } else { TYPE_3 VAR_4 = VAR_5 . get ( ) ; if ( VAR_4 == null ) { android.util.Log.w ( VAR_3 . TAG , STRING_2 ) ; return ; } VAR_4 . METHOD_1 ( VAR_6 , VAR_7 , VAR_1 , listener ) ; } } 
static int METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 , int VAR_4 ) { TYPE_2 VAR_5 = VAR_6 . METHOD_2 ( VAR_1 ) ; if ( VAR_5 == null ) { return 0 ; } return VAR_5 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; } 
public static int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = 0 ; if ( VAR_1 != null ) { switch ( VAR_3 ) { case VAR_4 : VAR_2 = INT_1 * INT_2 ; break ; case VAR_5 : VAR_2 = INT_1 * 10 ; break ; case VAR_6 : default : VAR_2 = INT_1 ; break ; } VAR_2 *= VAR_7 ; } return VAR_2 ; } 
public static < TYPE_1 extends TYPE_2 > double METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . METHOD_2 ( VAR_1 ) ; double VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 ) ; java.util.ArrayList < TYPE_5 > VAR_3 = new java.util.ArrayList < TYPE_5 > ( ) ; for ( TYPE_1 value : VAR_1 ) { double VAR_4 = VAR_2 - ( value . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( TYPE_6 . METHOD_6 ( VAR_4 , 2 ) ) ; } double VAR_5 = TYPE_4 . METHOD_3 ( VAR_3 ) ; return VAR_5 ; } 
public void METHOD_1 ( TYPE_1 field , TYPE_2 value ) { if ( field == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } if ( ( VAR_1 ) != null ) { throw new TYPE_3 ( STRING_2 ) ; } VAR_2 . METHOD_2 ( field ) ; VAR_3 . METHOD_3 ( field , value ) ; } 
public static boolean METHOD_1 ( TYPE_1 context ) { TYPE_2 c = null ; try { c = context . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , null , null , null ) ; boolean VAR_3 = ( c . METHOD_4 ( ) ) > 0 ; TYPE_3 . METHOD_5 ( context , VAR_3 ) ; return VAR_3 ; } finally { if ( c != null ) { c . METHOD_6 ( ) ; } } } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { super . METHOD_1 ( VAR_2 , s , VAR_2 , VAR_1 , fd , callback ) ; VAR_3 [ 0 ] = session ; } 
public void METHOD_1 ( int slotId , int VAR_1 , int VAR_2 , int VAR_3 , android.os.Message VAR_4 ) throws android.os.RemoteException { synchronized ( VAR_5 ) { TYPE_1 VAR_6 = METHOD_2 ( slotId , VAR_1 ) ; if ( VAR_6 != null ) { VAR_6 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 ) ; } } } 
private synchronized void METHOD_1 ( byte VAR_1 , byte VAR_2 , byte [ ] data ) { if ( VAR_3 ) android.util.Log.v ( VAR_4 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; TYPE_1 VAR_5 = TYPE_1 . METHOD_2 ( data ) ; android.os.Message msg = VAR_6 . METHOD_3 ( VAR_7 ) ; msg.arg1 = VAR_1 ; VAR_8 = VAR_2 ; msg.obj = VAR_5 ; VAR_6 . METHOD_4 ( msg ) ; } 
public int METHOD_1 ( int c ) throws TYPE_1 { int s = super . METHOD_1 ( c ) ; if ( ( VAR_1 ) != null ) { TYPE_2 . METHOD_2 ( s , VAR_1 ) ; } if ( ( VAR_2 ) != null ) { TYPE_2 . METHOD_3 ( s , VAR_2 ) ; } if ( VAR_3 ) { TYPE_2 . METHOD_4 ( s ) ; } return s ; } 
private int METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 ; switch ( VAR_1 ) { case 0 : case 1 : case 2 : case 3 : case 4 : case 5 : break ; case 6 : case 7 : case 8 : VAR_2 = VAR_4 ; break ; default : android.util.Log.e ( VAR_5 , STRING_1 ) ; break ; } return VAR_2 ; } 
public void METHOD_1 ( char VAR_1 ) { if ( ( VAR_2 ) != null ) { this . VAR_2 [ 0 ] = VAR_1 ; if ( ( TYPE_1 . METHOD_2 ( VAR_1 , 10 ) ) == 0 ) { for ( int i = 1 ; i < 10 ; i ++ ) { this . VAR_2 [ i ] = ( ( char ) ( VAR_1 + i ) ) ; } } } else { this . VAR_1 = VAR_1 ; } } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) { return false ; } TYPE_1 b = ( ( TYPE_1 ) ( obj ) ) ; return ( VAR_1 ) == ( VAR_2 ) ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 element ) { int size = VAR_2 . size ( ) ; if ( VAR_1 < 0 ) { VAR_1 = size + VAR_1 ; } assert ( VAR_1 >= 0 ) && ( VAR_1 <= size ) ; if ( VAR_1 == size ) { METHOD_2 ( element ) ; } else { VAR_2 . METHOD_3 ( VAR_1 , METHOD_4 ( ) ) ; element . METHOD_5 ( this ) ; } } 
private void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_1 ) { if ( ! ( TYPE_3 . METHOD_2 ( ( ( TYPE_4 ) ( VAR_3 ) ) ) ) ) { VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_3 ) ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 < java.lang.Integer > e = new TYPE_1 < java.lang.Integer > ( 10 ) ; e . METHOD_2 ( 1 ) ; assertEquals ( ( ( long ) ( e . size ( ) ) ) , ( ( long ) ( 1 ) ) ) ; } 
public void METHOD_1 ( int VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_2 ( ) ; VAR_4 = null ; } else { android.util.Log.w ( VAR_3 . TAG , STRING_2 ) ; } VAR_5 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_1 ) ; } 
public void run ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mContext , VAR_2 ) ; byte [ ] data = VAR_1 . METHOD_1 ( ) ; if ( data != null ) { if ( VAR_3 ) { android.util.Log.d ( VAR_4 . TAG , STRING_1 ) ; } METHOD_2 ( data , data . length ) ; } METHOD_3 ( VAR_5 , 0 , null ) ; if ( data == null ) { VAR_6 . METHOD_4 ( VAR_7 , VAR_8 ) ; } VAR_9 . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_6 ( ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_8 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_9 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_10 ( TYPE_1 . METHOD_4 ( ) ) ; } 
public void error ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Throwable VAR_3 ) { java.lang.String VAR_4 = METHOD_1 ( VAR_2 ) ; TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ; if ( VAR_3 != null ) { VAR_6 = true ; } METHOD_2 ( VAR_1 , VAR_4 ) ; } 
private void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { android.util.Log.w ( VAR_2 , STRING_1 ) ; } VAR_1 = false ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( METHOD_3 ( ) . getName ( ) , VAR_4 ) ; } if ( ! ( METHOD_4 ( ) ) ) { android.util.Log.e ( VAR_2 , STRING_2 ) ; } if ( ( VAR_5 ) != null ) { METHOD_5 ( ) . METHOD_6 ( VAR_5 ) ; VAR_5 = null ; } METHOD_7 ( ) ; } 
public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , STRING_4 ) ; provider . METHOD_2 ( ( STRING_5 + ( VAR_2 ) ) , STRING_4 ) ; provider . METHOD_2 ( STRING_6 , ( ( VAR_1 ) + STRING_7 ) ) ; METHOD_3 ( provider , STRING_8 , ( ( VAR_1 ) + STRING_9 ) , ( ( VAR_1 ) + STRING_10 ) ) ; METHOD_4 ( provider , STRING_8 , VAR_3 ) ; } 
private com.android.jack.ir.ast.JDefinedClassOrInterface METHOD_1 ( TYPE_1 session ) throws TYPE_2 , TYPE_3 , java.io.IOException { TYPE_4 type = METHOD_2 ( VAR_1 , session . METHOD_3 ( ) ) ; java.lang.String VAR_2 = TYPE_5 . METHOD_4 ( TYPE_5 . METHOD_5 ( type . METHOD_6 ( ) ) ) ; TYPE_6 VAR_3 = session . METHOD_7 ( ) . METHOD_8 ( VAR_2 ) ; com.android.jack.ir.ast.JDefinedClassOrInterface VAR_4 = type . METHOD_1 ( VAR_3 , this ) ; return VAR_4 ; } 
void METHOD_1 ( int action ) { switch ( action ) { case VAR_1 : METHOD_2 ( VAR_2 ) ; ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_4 . TRUE ) ; break ; case VAR_5 : long VAR_6 = TYPE_2 . METHOD_4 ( VAR_7 , VAR_8 ) ; METHOD_5 ( VAR_2 , VAR_6 ) ; ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_4 . FALSE ) ; break ; default : TYPE_3 . e ( VAR_9 , ( STRING_1 + action ) ) ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , int offset , long value ) { if ( ( value < 0 ) || ( value > INT_1 ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_1 + value ) ) ; } VAR_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) + offset ) , ( ( int ) ( value ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( ( VAR_1 ) == null ) { throw new TYPE_3 ( STRING_1 ) ; } try { return VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 . METHOD_2 ( ) ) ; } catch ( TYPE_4 e ) { android.util.Log.w ( VAR_5 , STRING_2 ) ; VAR_1 = null ; throw new TYPE_2 ( VAR_6 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) ; throw new TYPE_2 ( VAR_7 ) ; } } 
public static void METHOD_1 ( java.io.File VAR_1 , java.lang.String path , java.lang.String content ) throws java.io.IOException { java.util.Map < java.lang.String , java.lang.String > VAR_2 = TYPE_1 . METHOD_2 ( path , content ) ; TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 < java.lang.String > of ( ) ) ; } 
public TYPE_1 format ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , TYPE_3 pos ) { TYPE_4 VAR_3 = METHOD_1 ( ) ; TYPE_4 VAR_4 = VAR_1 . METHOD_1 ( ) ; boolean VAR_5 = VAR_4 . equals ( VAR_3 ) ; if ( ! VAR_5 ) METHOD_2 ( VAR_4 ) ; format ( VAR_1 . METHOD_3 ( ) , VAR_2 , pos ) ; if ( ! VAR_5 ) METHOD_2 ( VAR_3 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; assertTrue ( ( ( TYPE_1 . METHOD_2 ( s ) ) != 0 ) ) ; TYPE_1 . METHOD_5 ( s ) ; TYPE_1 . METHOD_6 ( c ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int type ) { java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( VAR_1 , type ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . METHOD_3 ( ) ) ) ) { return VAR_2 . get ( 0 ) ; } else { TYPE_3 . e ( this , new java.lang.Exception ( ) , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; return new TYPE_1 ( VAR_1 , false , type ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = METHOD_2 ( ) ; java.io.File VAR_2 = TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_4 ( VAR_4 class ) ; VAR_3 . METHOD_5 ( VAR_1 , VAR_2 , false ) ; METHOD_6 ( VAR_2 , VAR_5 , STRING_3 , false ) ; METHOD_6 ( VAR_2 , VAR_6 , STRING_4 , false ) ; METHOD_6 ( VAR_2 , VAR_7 , STRING_5 , false ) ; METHOD_6 ( VAR_2 , VAR_8 , STRING_6 , false ) ; } 
public boolean METHOD_1 ( TYPE_1 config ) { android.util.Log.v ( VAR_1 . TAG , STRING_1 ) ; boolean result = false ; final TYPE_2 service = VAR_2 ; if ( service != null ) { try { result = service . METHOD_1 ( config ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } return result ; } 
public void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; if ( RIL . RILJ_LOGD ) VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( false , null ) ; VAR_2 . METHOD_5 ( VAR_4 , null ) ; VAR_2 . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( INT_1 ) ; VAR_2 . METHOD_8 ( true ) ; } 
private int METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { int VAR_3 = VAR_1 . METHOD_2 ( VAR_4 ) ; if ( VAR_3 != 4 ) { throw new java.io.IOException ( STRING_1 ) ; } TYPE_3 b = TYPE_3 . METHOD_3 ( VAR_4 ) ; return b . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; assertEquals ( 0 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ; int VAR_2 = TYPE_1 . METHOD_2 ( STRING_2 ) ; assertEquals ( 16 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; METHOD_3 ( true ) ; METHOD_4 ( false ) ; METHOD_5 ( VAR_1 , false ) ; METHOD_6 ( false ) ; assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int w , int h , int d , short [ ] data ) { mRS . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , ( ( data . length ) * 2 ) ) ; } 
public static void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; if ( ! ( VAR_2 ) ) { TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) ; VAR_2 = true ; } } finally { VAR_1 . METHOD_5 ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 , java.lang.String VAR_4 ) { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_2 , VAR_4 ) ; } 
private long METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return - INT_1 ; if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) return - INT_1 ; if ( METHOD_3 ( VAR_1 ) ) { return ( ( TYPE_1 . METHOD_4 ( ) ) - ( VAR_3 ) ) + ( VAR_1 . METHOD_2 ( ) ) ; } return - INT_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( false ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( null ) ; METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; } finally { VAR_1 . METHOD_8 ( ) ; } } 
public int METHOD_1 ( java.lang.String uri , java.lang.String VAR_1 ) { if ( uri == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_2 ) ; } int VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == 0 ) { return - 1 ; } return TYPE_1 . METHOD_1 ( VAR_2 , uri , VAR_1 ) ; } 
public void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) ; synchronized ( this ) { METHOD_3 ( VAR_3 , VAR_4 , VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , false , null ) ; assertEquals ( 1 , VAR_1 . size ( ) ) ; assertEquals ( VAR_3 , VAR_1 . get ( 0 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 ) ; ( VAR_3 ) ++ ; if ( ! ( VAR_4 ) ) { METHOD_4 ( ( ( VAR_1 . getName ( ) ) + STRING_1 ) ) ; } } 
protected boolean METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( ) ; VAR_3 = null ; } TYPE_1 . METHOD_3 ( ) ; return true ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; int VAR_2 = ( VAR_3 . METHOD_3 ( ) . size ( ) ) + ( VAR_3 . METHOD_4 ( ) . size ( ) ) ; if ( VAR_4 ) android.util.Log.d ( VAR_5 . TAG , ( STRING_1 + VAR_2 ) ) ; TYPE_2 app = null ; app = VAR_6 . METHOD_5 ( VAR_7 ) ; if ( app != null ) app . METHOD_6 ( ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; } 
private void METHOD_1 ( java.io.File VAR_1 , java.lang.String VAR_2 , java.util.List < java.lang.String > VAR_3 ) { for ( java.io.File VAR_4 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_4 . METHOD_3 ( ) ) { METHOD_1 ( VAR_4 , VAR_2 , VAR_3 ) ; } else { java.lang.String path = VAR_4 . METHOD_4 ( ) ; if ( ( VAR_4 . getName ( ) . METHOD_5 ( VAR_2 ) ) && ( ! ( VAR_3 . METHOD_6 ( path ) ) ) ) { VAR_3 . METHOD_7 ( path ) ; } } } } 
public void run ( ) { VAR_1 . METHOD_1 ( this ) ; final boolean VAR_2 ; synchronized ( VAR_3 ) { VAR_2 = METHOD_2 ( packageName , userId ) ; } METHOD_3 ( packageName , false ) ; if ( VAR_4 != null ) { try { VAR_4 . METHOD_4 ( packageName , VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_1 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( ) . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) . METHOD_3 ( STRING_5 ) . METHOD_4 ( true ) . build ( ) ; METHOD_1 ( VAR_1 , false ) ; if ( VAR_2 ) { METHOD_1 ( VAR_1 , true ) ; } } 
public final TYPE_1 call ( ) { try { TYPE_1 result = METHOD_1 ( ) ; METHOD_2 ( STRING_1 ) ; return result ; } catch ( TYPE_2 VAR_1 ) { METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; } catch ( java.lang.Throwable t ) { METHOD_5 ( t ) ; } return null ; } 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } } ; VAR_2 . METHOD_3 ( VAR_6 , new TYPE_2 ( STRING_3 ) , STRING_4 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { m . METHOD_2 ( ) ; assertFalse ( m . METHOD_3 ( true , null , new TYPE_1 [ 0 ] ) ) ; assertFalse ( m . METHOD_4 ( true ) ) ; assertEquals ( ( STRING_1 + STRING_2 ) , METHOD_5 ( m , true ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 device = VAR_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( VAR_1 , STRING_1 ) ; TYPE_4 . METHOD_5 ( VAR_1 , STRING_2 ) ; device . METHOD_6 ( new TYPE_5 ( ) . METHOD_7 ( STRING_3 ) ) . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 url = new TYPE_2 ( STRING_2 , server . METHOD_5 ( ) , server . METHOD_6 ( ) , STRING_3 ) ; assertEquals ( STRING_1 , METHOD_7 ( url . METHOD_8 ( ) . METHOD_9 ( ) , VAR_1 ) ) ; TYPE_3 request = server . METHOD_10 ( ) ; assertEquals ( STRING_4 , request . METHOD_11 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . get ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; assertEquals ( STRING_3 , VAR_2 [ 1 ] ) ; assertEquals ( STRING_4 , VAR_3 [ 1 ] ) ; assertEquals ( STRING_4 , VAR_4 [ 1 ] ) ; assertEquals ( STRING_5 , VAR_5 [ 1 ] ) ; assertEquals ( STRING_6 , VAR_6 [ 1 ] ) ; assertEquals ( STRING_7 , VAR_7 [ 1 ] ) ; } 
private TYPE_1 METHOD_1 ( java.io.File VAR_1 ) throws TYPE_2 , java.io.IOException { TYPE_3 . i ( VAR_2 , ( STRING_1 + VAR_1 ) ) ; java.io.File VAR_3 = new java.io.File ( VAR_1 , VAR_4 ) ; if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( ( STRING_2 + VAR_3 ) ) ; } byte [ ] VAR_5 = TYPE_4 . METHOD_3 ( VAR_3 , VAR_6 ) ; return TYPE_1 . METHOD_4 ( VAR_5 ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { int status = ( VAR_1 ) ? VAR_2 : VAR_3 ; int subId = METHOD_2 ( ) ; TYPE_1 . d ( VAR_4 , ( ( ( ( STRING_1 + status ) + STRING_2 ) + ( VAR_5 ) ) + subId ) ) ; TYPE_2 VAR_6 = TYPE_3 . METHOD_3 ( mContext ) ; TYPE_4 VAR_7 = VAR_6 . METHOD_4 ( ) ; VAR_7 . METHOD_5 ( ( ( VAR_5 ) + subId ) , status ) ; VAR_7 . METHOD_6 ( ) ; } 
private static double METHOD_1 ( TYPE_1 VAR_1 ) { final long VAR_2 = INT_1 ; final double VAR_3 = ( VAR_1 . METHOD_2 ( VAR_4 ) ) / INT_2 ; return ( VAR_3 / ( ( ( ( double ) ( VAR_2 ) ) / 8 ) / INT_3 ) ) / ( INT_4 * INT_4 ) ; } 
boolean METHOD_1 ( ) { TYPE_1 < java.lang.String > VAR_1 = METHOD_2 ( ) ; java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( VAR_1 . get ( ) ) ; } TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 . size ( ) ) ; for ( java.lang.String VAR_4 : VAR_2 ) { METHOD_5 ( VAR_4 , VAR_3 ) ; } boolean VAR_5 = ( VAR_2 . size ( ) ) > 0 ; return VAR_5 ; } 
private void METHOD_1 ( android.bluetooth.BluetoothDevice device , int VAR_1 , java.lang.String VAR_2 ) { android.content.Intent VAR_3 = new android.content.Intent ( VAR_4 ) ; VAR_3 . METHOD_2 ( VAR_5 , device ) ; VAR_3 . METHOD_2 ( VAR_6 , VAR_1 ) ; if ( VAR_2 != null ) VAR_3 . METHOD_2 ( VAR_7 , VAR_2 ) ; VAR_8 . METHOD_3 ( VAR_3 , VAR_9 ) ; } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 parent ) { parent . METHOD_2 ( new TYPE_3 ( 1 , false ) ) ; TYPE_2 c = new TYPE_2 ( parent , VAR_1 ) ; c . METHOD_2 ( new TYPE_3 ( 1 , false ) ) ; c . METHOD_3 ( new TYPE_4 ( VAR_2 ) ) ; METHOD_4 ( c ) ; METHOD_5 ( c ) ; METHOD_6 ( ) ; return c ; } 
private synchronized TYPE_1 METHOD_1 ( java.lang.String packageName ) { int VAR_1 = - 1 ; for ( TYPE_2 < java.lang.Integer , TYPE_1 > entry : VAR_2 . METHOD_2 ( ) ) { if ( entry . METHOD_3 ( ) . METHOD_4 ( ) . equals ( packageName ) ) { VAR_1 = entry . METHOD_5 ( ) ; break ; } } if ( VAR_1 != ( - 1 ) ) { return VAR_2 . METHOD_6 ( VAR_1 ) ; } return null ; } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { if ( ( VAR_5 ) == null ) { VAR_5 = new TYPE_1 ( VAR_1 , VAR_2 , VAR_4 , VAR_3 ) ; } else { VAR_5 . set ( VAR_1 , VAR_2 , VAR_4 , VAR_3 ) ; } if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } 
public boolean METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 ) { TYPE_3 < TYPE_4 > VAR_3 ; synchronized ( VAR_4 ) { VAR_3 = VAR_5 . get ( VAR_2 ) ; } for ( TYPE_4 VAR_6 : VAR_3 ) { if ( VAR_6 . METHOD_1 ( ) ) { return true ; } } } return false ; } 
public boolean METHOD_1 ( int userId , TYPE_1 service ) throws android.os.RemoteException { TYPE_2 . METHOD_2 ( userId ) ; TYPE_2 . METHOD_3 ( mContext ) ; if ( ! ( METHOD_4 ( userId , service ) ) ) { return false ; } return VAR_1 . METHOD_1 ( service ) ; } 
public void run ( ) { try { METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } catch ( TYPE_2 e ) { METHOD_5 ( e ) ; } catch ( TYPE_3 e ) { METHOD_5 ( e ) ; } catch ( TYPE_4 e ) { METHOD_5 ( e ) ; } catch ( java.io.IOException e ) { METHOD_5 ( e ) ; } } 
public boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } else { TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_3 VAR_3 = VAR_1 . METHOD_4 ( ) ; try { TYPE_4 . METHOD_5 ( VAR_2 , VAR_3 ) ; } catch ( TYPE_5 e ) { TYPE_4 . log ( e , STRING_1 , VAR_2 . METHOD_6 ( ) . toString ( ) ) ; } return true ; } } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_1 ( ) ; try { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 . println ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { java.lang.System.out.println ( STRING_2 ) ; } catch ( TYPE_4 VAR_4 ) { java.lang.System.out.println ( STRING_2 ) ; } } 
public void run ( TYPE_1 session ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_1 ( ) ; TYPE_4 event = VAR_1 . start ( VAR_2 ) ; TYPE_5 VAR_3 = TYPE_6 . get ( VAR_4 ) ; try { VAR_3 . METHOD_2 ( VAR_5 ) ; } catch ( TYPE_7 e ) { session . METHOD_3 ( ) . METHOD_4 ( VAR_6 , e ) ; throw new TYPE_8 ( e ) ; } finally { event . METHOD_5 ( ) ; } } 
public static final TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String provider , final TYPE_2 [ ] VAR_2 , final TYPE_3 [ ] VAR_3 ) { try { TYPE_1 context = TYPE_1 . METHOD_2 ( VAR_1 , provider ) ; context . METHOD_3 ( VAR_2 , VAR_3 , new TYPE_4 ( ) ) ; return context ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_4 ( c ) ) ; TYPE_1 . METHOD_5 ( c ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 , java.lang.String [ ] args ) { if ( new TYPE_5 ( VAR_3 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) { return new TYPE_6 ( VAR_1 , VAR_3 , args ) ; } else { return null ; } } 
public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( ) ; c . METHOD_2 ( STRING_1 ) ; c . METHOD_2 ( STRING_2 ) ; c . METHOD_3 ( new TYPE_2 [ 5 ] ) ; METHOD_4 ( ) ; } catch ( TYPE_3 VAR_1 ) { } } 
private void METHOD_1 ( int flags ) { synchronized ( VAR_1 ) { VAR_2 . METHOD_2 ( ) ; if ( ( VAR_3 . METHOD_3 ( ) ) > ( VAR_4 . METHOD_4 ( ) ) ) { VAR_3 . METHOD_5 ( ) ; } try { METHOD_6 ( flags ) ; } finally { VAR_2 . METHOD_7 ( ) ; } } } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { android.util.Log.w ( VAR_3 . TAG , STRING_1 ) ; return null ; } else { TYPE_2 VAR_4 = VAR_5 . get ( ) ; if ( VAR_4 == null ) { android.util.Log.w ( VAR_3 . TAG , STRING_2 ) ; return null ; } int VAR_6 = ( ( this ) instanceof TYPE_3 ) ? VAR_7 : VAR_8 ; return VAR_4 . METHOD_2 ( VAR_9 , VAR_6 , VAR_10 , VAR_1 , null ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; assertTrue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( false ) ; assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 address , java.lang.String VAR_1 , int flags , int VAR_2 ) { final int length = VAR_3 . METHOD_2 ( ) ; for ( int i = 0 ; i < length ; i ++ ) { try { VAR_3 . METHOD_3 ( i ) . METHOD_4 ( address , VAR_1 , flags , VAR_2 ) ; } catch ( android.os.RemoteException e ) { } catch ( java.lang.RuntimeException e ) { } } VAR_3 . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { int VAR_1 = METHOD_2 ( STRING_1 ) ; s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) , VAR_1 , true ) ; assertTrue ( STRING_2 , ( ( s . METHOD_4 ( ) ) == VAR_1 ) ) ; s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) , VAR_1 , false ) ; } 
public final TYPE_1 METHOD_1 ( double x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { return ( STRING_1 + ( VAR_2 . toString ( ) ) ) + STRING_1 ; } else if ( ( VAR_3 ) != null ) { return ( STRING_1 + ( VAR_3 ) ) + STRING_1 ; } else { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } } 
private boolean METHOD_1 ( int uid ) { try { int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , uid ) ; return VAR_1 == ( VAR_4 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_5 . TAG , ( STRING_1 + e ) ) ; return false ; } } 
public static int METHOD_1 ( java.lang.String name , boolean input ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } try { java.lang.Class < ? > c = java.lang.Class . METHOD_2 ( STRING_1 ) ; TYPE_2 m = c . METHOD_3 ( name , new java.lang.Class [ ] { boolean . class } ) ; return ( ( java.lang.Integer ) ( m . invoke ( null , input ) ) ) ; } catch ( java.lang.Exception ex ) { throw new TYPE_1 ( ex ) ; } } 
public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { METHOD_2 ( ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { assert METHOD_3 ( VAR_2 . METHOD_4 ( ) ) : ( ( ( STRING_1 + ( TYPE_3 . getName ( VAR_2 . METHOD_4 ( ) ) ) ) + STRING_2 ) + ( this . METHOD_4 ( ) . getName ( ) ) ) + STRING_3 ; assert ( VAR_3 ) != null ; VAR_3 . METHOD_5 ( VAR_2 . METHOD_4 ( ) , VAR_2 ) ; } } 
private void METHOD_1 ( java.lang.String [ ] VAR_1 ) { org.junit.Assert.assertEquals ( VAR_1 [ 0 ] , ( ( VAR_2 ) + ( VAR_3 ) ) ) ; org.junit.Assert.assertEquals ( VAR_1 [ 1 ] , STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ) ; TYPE_2 . assertTrue ( VAR_1 [ 3 ] . METHOD_3 ( STRING_4 ) ) ; org.junit.Assert.assertEquals ( VAR_1 . length , 4 ) ; } 
public void METHOD_1 ( TYPE_1 t ) { if ( t instanceof com.android.jack.ir.ast.JDefinedClassOrInterface ) { METHOD_1 ( ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( t ) ) ) ; } else if ( t instanceof TYPE_2 ) { METHOD_1 ( ( ( TYPE_2 ) ( t ) ) . METHOD_2 ( ) ) ; } } 
TYPE_1 METHOD_1 ( android.bluetooth.BluetoothDevice device , TYPE_2 VAR_1 , int VAR_2 , int type ) { for ( TYPE_1 VAR_3 : VAR_4 ) { if ( ( ( ( VAR_3 . METHOD_2 ( ) . equals ( device ) ) && ( ( VAR_3 . METHOD_3 ( ) ) == type ) ) && ( ( VAR_3 . METHOD_4 ( ) ) == VAR_2 ) ) && ( VAR_3 . METHOD_5 ( ) . equals ( VAR_1 ) ) ) { return VAR_3 ; } } return null ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { return ; } byte [ ] VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 ) ; byte [ ] VAR_4 = TYPE_1 . METHOD_2 ( VAR_5 , VAR_1 ) ; int [ ] VAR_6 = TYPE_1 . METHOD_2 ( VAR_7 , VAR_1 ) ; VAR_8 . log ( new TYPE_2 ( VAR_9 , VAR_2 , VAR_4 , VAR_6 ) ) ; TYPE_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_9 ) ) ; VAR_1 = 0 ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_3 ( ) ; TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 , VAR_5 , ( ! ( VAR_4 . METHOD_5 ( ) ) ) , VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) , ( VAR_4 . METHOD_5 ( ) ? null : VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 type = METHOD_3 ( ) . get ( VAR_2 ) ; METHOD_4 ( new TYPE_5 ( info , type , VAR_3 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
static void METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , int VAR_4 ) { TYPE_1 VAR_5 = VAR_6 . METHOD_2 ( VAR_1 ) ; if ( VAR_5 == null ) { return ; } TYPE_1 VAR_7 = VAR_6 . METHOD_2 ( VAR_4 ) ; VAR_5 . offset ( VAR_2 , VAR_3 , VAR_7 ) ; } 
public boolean METHOD_1 ( java.lang.String VAR_1 , byte [ ] key ) { try { return ( VAR_2 . METHOD_2 ( VAR_1 , key , ( - 1 ) ) ) == ( VAR_3 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_4 . TAG , STRING_1 , e ) ; return false ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 v , int VAR_2 , long id ) { java.util.Map VAR_3 = ( ( java.util.Map ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ; android.content.Intent VAR_4 = ( ( android.content.Intent ) ( VAR_3 . get ( STRING_1 ) ) ) ; METHOD_3 ( VAR_4 ) ; } 
private static void METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } TYPE_2 VAR_6 = VAR_5 . METHOD_2 ( VAR_2 ) ; if ( VAR_6 == null ) { return ; } if ( VAR_3 != null ) { VAR_7 . append ( VAR_8 . METHOD_3 ( VAR_3 ) , false ) ; } else { VAR_7 . append ( VAR_8 , false ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 < java.lang.String , TYPE_4 > VAR_2 = VAR_1 . METHOD_3 ( ) ; java.util.List < TYPE_4 > values = VAR_2 . get ( STRING_1 ) ; assertEquals ( 2 , values . size ( ) ) ; TYPE_4 VAR_3 = values . get ( 1 ) ; METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . Allocation in , TYPE_2 . Allocation out ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( this ) ; if ( VAR_2 . METHOD_5 ( ) ) { VAR_2 . METHOD_6 ( in , out ) ; } VAR_2 . METHOD_7 ( ) ; VAR_2 . METHOD_4 ( null ) ; } 
public java.lang.String METHOD_1 ( ) { java.lang.String out = STRING_1 ; byte [ ] VAR_1 = METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { out += java.lang.String.format ( VAR_3 , STRING_2 , VAR_1 [ i ] ) ; } return out ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_4 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) ) ; if ( VAR_3 == null ) { throw new TYPE_4 ( STRING_1 ) ; } try { METHOD_1 ( VAR_3 , VAR_2 ) ; } catch ( TYPE_5 e ) { throw new TYPE_4 ( STRING_2 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 os ) throws java.io.IOException { TYPE_3 VAR_2 = METHOD_2 ( os ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 , new TYPE_5 ( VAR_2 ) ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; } 
protected boolean METHOD_1 ( ) { if ( VAR_1 ) { android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ; } METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( ) ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_1 ( ) ; } if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_1 ( ) ; } return true ; } 
public boolean equals ( java.lang.Object obj ) { if ( ! ( super . equals ( obj ) ) ) return false ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_4 . equals ( VAR_5 ) ) ; } 
private void METHOD_1 ( int VAR_1 , java.lang.String packageName , boolean VAR_2 ) { synchronized ( VAR_3 ) { if ( ( VAR_3 . size ( ) ) > ( VAR_4 ) ) { VAR_3 . METHOD_2 ( ) ; } VAR_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , packageName , VAR_2 , TYPE_2 . METHOD_4 ( ) ) ) ; } int state = ( VAR_2 ) ? VAR_5 : VAR_6 ; TYPE_3 . METHOD_5 ( VAR_7 , TYPE_4 . METHOD_6 ( ) , null , state , VAR_1 , packageName ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 request = new TYPE_1 ( method ) ; TYPE_2 VAR_2 = new TYPE_2 ( request ) ; VAR_2 . METHOD_5 ( method ) ; request . METHOD_7 ( ) ; } 
private void METHOD_1 ( int state , byte [ ] address ) { TYPE_1 event = new TYPE_1 ( VAR_1 ) ; VAR_2 = state ; event . device = METHOD_2 ( address ) ; if ( VAR_3 ) { android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + event ) ) ; } METHOD_3 ( event ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_5 action = METHOD_3 ( x . action ) ; if ( action == null ) { action = new TYPE_6 ( info ) ; } METHOD_4 ( new TYPE_7 ( info , VAR_2 , action ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
public final void METHOD_1 ( TYPE_1 VAR_1 ) { final long VAR_2 = TYPE_2 . METHOD_2 ( ) ; try { synchronized ( this ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_3 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } } } finally { TYPE_2 . METHOD_4 ( VAR_2 ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 [ ] VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; for ( TYPE_1 VAR_3 : VAR_2 ) { if ( ( VAR_3 . METHOD_4 ( VAR_4 ) ) != null ) { return VAR_3 ; } } if ( ( VAR_2 . length ) > 0 ) { return VAR_2 [ 0 ] ; } return null ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( false ) ; try { VAR_1 . METHOD_4 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 e ) { } VAR_2 . METHOD_5 ( ) ; try { VAR_1 . METHOD_4 ( ) ; fail ( STRING_1 ) ; } catch ( TYPE_2 e ) { } } 
public void METHOD_1 ( TYPE_1 VAR_1 , int error ) { if ( VAR_2 ) METHOD_2 ( ) ; if ( VAR_2 ) android.util.Log.d ( VAR_3 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + error ) ) ; if ( VAR_4 ) { METHOD_4 ( error ) ; } VAR_1 . METHOD_5 ( false ) ; } 
private com.android.jack.ir.ast.JDefinedClassOrInterface METHOD_1 ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 ) ) ; while ( ! ( TYPE_2 . METHOD_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) , VAR_2 ) ) ) { VAR_2 = ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( ) ) ) ; } return VAR_2 ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { for ( java.lang.String name : VAR_2 . METHOD_2 ( ) ) { if ( VAR_2 . get ( name ) . METHOD_3 ( ) . equals ( VAR_1 ) ) { return name ; } } return null ; } 
void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; } if ( ( ( VAR_2 ) != null ) && ( ! ( VAR_3 ) ) ) { TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( context , VAR_2 ) , new TYPE_4 ( ) , TYPE_5 . METHOD_6 ( ) ) ; } VAR_3 = true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ; VAR_1 . METHOD_5 ( TYPE_1 . METHOD_7 ( ) ) ; METHOD_8 ( ) ; METHOD_9 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_9 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 context ) { int VAR_1 = callback . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ( VAR_1 != ( VAR_2 ) ) ) ; TYPE_3 . i ( STRING_1 , ( STRING_2 + VAR_1 ) ) ; call . METHOD_4 ( ) . METHOD_5 ( new TYPE_4 ( VAR_1 ) ) ; METHOD_6 ( VAR_3 ) ; listener . METHOD_7 ( false ) ; VAR_4 . METHOD_8 ( VAR_5 ) ; } 
public boolean METHOD_1 ( TYPE_1 item ) { if ( ! ( VAR_1 ) ) { return true ; } switch ( item . METHOD_2 ( ) ) { case VAR_2 : METHOD_3 ( ) ; VAR_1 = false ; METHOD_4 ( VAR_3 ) ; METHOD_3 ( ) ; METHOD_5 ( ) ; return true ; default : break ; } return super . METHOD_1 ( item ) ; } 
public void log ( java.lang.Throwable VAR_1 , java.lang.String format , java.lang.Object ... args ) { if ( VAR_1 != null ) { VAR_1 . METHOD_1 ( ) ; } java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; if ( format != null ) { sb.append ( java.lang.String.format ( format , args ) ) ; } if ( VAR_1 != null ) { sb.append ( VAR_1 . toString ( ) ) ; } VAR_2 . println ( sb ) ; } 
private final void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ; if ( VAR_2 ) { METHOD_3 ( ) ; VAR_3 = TYPE_2 . METHOD_4 ( VAR_1 , VAR_4 , key . METHOD_5 ( ) ) ; } else { VAR_3 = TYPE_2 . METHOD_6 ( VAR_1 , VAR_4 , key . METHOD_5 ( ) ) ; } METHOD_7 ( VAR_3 ) ; this . VAR_5 = VAR_1 ; } 
public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , new java.lang.String [ ] { STRING_2 , STRING_3 } ) ; fail ( STRING_4 ) ; } catch ( TYPE_2 e ) { } try { new TYPE_1 ( STRING_1 , new java.lang.String [ ] { STRING_2 , STRING_5 } ) ; fail ( STRING_4 ) ; } catch ( TYPE_2 e ) { } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; TYPE_2 . METHOD_2 ( FLOAT_1 ) ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; VAR_2 = VAR_3 . get ( TYPE_5 . METHOD_3 ( VAR_1 ) ) ; for ( TYPE_1 VAR_6 : VAR_3 . values ( ) ) { for ( java.lang.String VAR_7 : VAR_6 . METHOD_4 ( ) ) { if ( VAR_1 . equals ( VAR_7 ) ) return VAR_6 ; } } TYPE_2 . METHOD_5 ( FLOAT_2 ) ; } 
public void log ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 ) { switch ( VAR_4 ) { case VAR_5 : VAR_1 . METHOD_1 ( VAR_6 ) ; break ; case VAR_7 : VAR_1 . error ( null , VAR_6 ) ; break ; case VAR_8 : VAR_1 . info ( VAR_6 ) ; break ; default : VAR_1 . error ( null , ( STRING_1 + ( VAR_4 ) ) ) ; } } VAR_9 . log ( VAR_1 ) ; } 
private synchronized int METHOD_1 ( java.lang.String packageName ) { boolean response = false ; int VAR_1 = 0 ; for ( TYPE_1 info : VAR_2 ) { if ( VAR_3 . equals ( packageName ) ) { response = true ; break ; } VAR_1 ++ ; } if ( ! response ) { VAR_1 = - 1 ; } if ( VAR_4 ) android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + VAR_1 ) ) ; return VAR_1 ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; } else if ( ( METHOD_2 ( ) ) == ( VAR_2 ) ) { throw new TYPE_1 ( STRING_4 ) ; } METHOD_3 ( VAR_3 , VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_1 VAR_2 = new TYPE_1 ( ) ; try { TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_5 ) ; VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; } catch ( java.io.IOException e ) { VAR_4 . log ( VAR_5 , ( ( ( STRING_1 + ( TYPE_5 . METHOD_6 ( CHAR_1 ) ) ) + STRING_2 ) + VAR_1 ) , e ) ; throw new TYPE_3 ( VAR_1 . METHOD_7 ( ) ) ; } return VAR_2 ; } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , float [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { java.lang.String name = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 , n = name . length ( ) ; i < n ; i ++ ) { char c = name . METHOD_3 ( i ) ; if ( c == CHAR_1 ) { TYPE_3 location = context . METHOD_4 ( VAR_1 ) ; java.lang.String VAR_2 = STRING_1 ; context . METHOD_5 ( VAR_3 , null , location , VAR_2 , null ) ; break ; } } } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 method , int VAR_2 , java.lang.String type , TYPE_2 VAR_3 ) { if ( VAR_4 ) { TYPE_1 value = TYPE_4 . METHOD_1 ( method , VAR_2 ) ; if ( ( value != null ) && ( value . METHOD_2 ( ) ) ) { return value ; } } return super . METHOD_1 ( VAR_1 , method , VAR_2 , type , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( new TYPE_2 ( 10 ) ) ; VAR_1 . METHOD_2 ( INT_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( 20 ) ; VAR_2 . METHOD_4 ( new TYPE_3 [ 0 ] ) ; VAR_1 . METHOD_5 ( INT_2 , VAR_2 ) ; } 
protected final void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { try { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( VAR_2 , true , VAR_3 ) ; } } catch ( TYPE_2 VAR_4 ) { java.lang.String msg = java.lang.String.format ( VAR_5 , VAR_2 , VAR_1 . toString ( ) ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( ) , msg ) ; } } 
private void METHOD_1 ( int VAR_1 , int VAR_2 , int status ) { synchronized ( VAR_3 ) { for ( TYPE_1 < TYPE_2 > i = VAR_4 . METHOD_2 ( ) ; i . METHOD_3 ( ) ; ) { TYPE_2 VAR_5 = i . METHOD_4 ( ) ; try { VAR_5 . METHOD_5 ( VAR_1 , VAR_2 , status ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_6 , ( ( STRING_1 + STRING_2 ) + ( e.getMessage ( ) ) ) ) ; i . METHOD_6 ( ) ; } } } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_2 ( STRING_1 ) ; try { if ( ! ( VAR_2 . METHOD_3 ( VAR_1 ) ) ) { throw new TYPE_3 ( STRING_2 ) ; } return new TYPE_1 ( mContext , true ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; java.io.File VAR_3 = TYPE_2 . METHOD_3 ( ) ; TYPE_4 VAR_4 = new TYPE_4 ( STRING_1 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_1 , VAR_4 , false ) ; METHOD_7 ( VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 VAR_3 , java.lang.String VAR_4 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_4 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_5 ) ; VAR_6 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; } 
synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 , int VAR_8 , int VAR_9 , int VAR_10 , int VAR_11 , int VAR_12 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ; } 
public void METHOD_1 ( TYPE_1 key , TYPE_2 value ) { if ( key . METHOD_2 ( STRING_1 ) ) { } else if ( key . METHOD_2 ( STRING_2 ) ) { VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , value ) ; } else { if ( ! ( VAR_4 ) ) { VAR_5 . METHOD_4 ( key . toString ( ) , value . METHOD_5 ( ) ) ; } } } 
private static boolean METHOD_1 ( TYPE_1 context , java.io.File VAR_1 ) { TYPE_2 VAR_2 = context . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { for ( TYPE_3 VAR_3 : VAR_2 . METHOD_4 ( ) . values ( ) ) { if ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) { if ( VAR_1 . equals ( VAR_3 . METHOD_7 ( ) . METHOD_8 ( ) ) ) { return true ; } } } } return false ; } 
private void METHOD_1 ( ) throws java.io.IOException { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; VAR_4 . METHOD_5 ( ) ; VAR_4 . METHOD_6 ( ) ; VAR_4 . METHOD_7 ( ) ; VAR_1 . METHOD_8 ( VAR_2 , ( ( VAR_3 ) + 1 ) ) ; VAR_4 . METHOD_9 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_1 ) ; METHOD_3 ( false , false , false ) ; assertTrue ( ( ( VAR_3 . METHOD_4 ( ) ) == null ) ) ; METHOD_5 ( 4 , false , false ) ; assertEquals ( VAR_1 , VAR_3 . METHOD_4 ( ) ) ; } 
public TYPE_1 METHOD_1 ( int subId , int VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( subId ) ; if ( VAR_3 != null ) { if ( ! ( TYPE_3 . METHOD_3 ( mContext , VAR_2 , STRING_1 ) ) ) { return null ; } return VAR_3 . METHOD_1 ( VAR_1 ) ; } else { loge ( ( STRING_2 + subId ) ) ; return null ; } } 
public void METHOD_1 ( TYPE_1 e ) { TYPE_2 VAR_1 = e . METHOD_2 ( ) ; if ( ( ( ( ! ( METHOD_3 ( ) ) ) && ( VAR_1 != null ) ) && ( ( VAR_2 ) <= 0 ) ) && ( ( e . METHOD_4 ( ) . VAR_3 ) > 0 ) ) { METHOD_5 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_1 ) ; return ; } boolean VAR_1 = TYPE_2 . METHOD_4 ( VAR_2 ) ; assertTrue ( STRING_2 , VAR_1 ) ; METHOD_5 ( VAR_3 , INT_1 , INT_2 , 4 ) ; METHOD_5 ( VAR_4 , INT_3 , INT_4 , 2 ) ; } 
public static void METHOD_1 ( ) throws java.lang.Throwable { Main . METHOD_2 ( ) ; Main . METHOD_3 ( ) ; Main . METHOD_4 ( ) ; Main . METHOD_5 ( ) ; Main . METHOD_6 ( ) ; Main . METHOD_7 ( ) ; Main . METHOD_8 ( ) ; Main . METHOD_9 ( ) ; Main . METHOD_10 ( ) ; VAR_1 . println ( STRING_1 ) ; } 
final void METHOD_1 ( int VAR_1 ) { if ( VAR_1 != 0 ) { boolean VAR_2 = ( VAR_1 & ( VAR_3 ) ) != 0 ; if ( VAR_2 ) { TYPE_1 . METHOD_2 ( ) ; if ( VAR_4 ) android.util.Slog.v ( VAR_5 . TAG , STRING_1 ) ; } } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 ) ; VAR_2 . METHOD_2 ( VAR_4 , uri ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_5 ) ; VAR_2 . METHOD_5 ( VAR_6 , VAR_7 ) ; try { METHOD_6 ( VAR_2 ) ; } catch ( TYPE_2 e ) { TYPE_3 . METHOD_7 ( this , VAR_8 , VAR_9 ) . METHOD_8 ( ) ; android.util.Log.e ( VAR_10 . TAG , STRING_2 , e ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.Object element , int VAR_1 ) { if ( element instanceof TYPE_2 ) { if ( ( ( ( TYPE_2 ) ( element ) ) . METHOD_2 ( ) ) == ( VAR_2 ) ) { return VAR_3 ; } else if ( ( ( ( TYPE_2 ) ( element ) ) . METHOD_2 ( ) ) == ( VAR_4 ) ) { return VAR_5 ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } METHOD_4 ( 0 ) ; METHOD_5 ( VAR_2 , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , VAR_3 ) ; METHOD_7 ( VAR_4 , VAR_3 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 , VAR_1 ) ; if ( VAR_5 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) { log ( ( STRING_1 + VAR_1 ) ) ; } } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer type , java.lang.Integer id , java.lang.String VAR_2 ) throws java.lang.Exception { android.bluetooth.BluetoothDevice device = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_1 ) ; byte [ ] VAR_4 = VAR_2 . METHOD_4 ( ) ; return VAR_3 . METHOD_5 ( device , ( ( byte ) ( ( int ) ( type ) ) ) , ( ( byte ) ( ( int ) ( id ) ) ) , VAR_4 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , long VAR_2 , int uid ) { TYPE_1 event = new TYPE_1 ( ) ; VAR_3 = VAR_1 ; VAR_4 = VAR_2 ; event . uid = uid ; VAR_5 . append ( event ) ; TYPE_2 VAR_6 = VAR_7 . get ( VAR_1 ) ; if ( VAR_6 == null ) { VAR_6 = new TYPE_2 ( VAR_1 ) ; VAR_7 . METHOD_2 ( VAR_1 , VAR_6 ) ; } VAR_6 . METHOD_3 ( event ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { TYPE_1 VAR_2 = new TYPE_2 ( ( ( int ) ( FLOAT_1 * INT_1 ) ) , STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; TYPE_3 f = new TYPE_3 ( ) ; if ( ! ( f . METHOD_4 ( ) . equals ( VAR_2 ) ) ) errln ( STRING_2 ) ; } finally { TYPE_1 . METHOD_3 ( VAR_1 ) ; } } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; } if ( ( VAR_2 . METHOD_4 ( 0 ) ) == CHAR_1 ) { VAR_1 = VAR_2 ; } else { VAR_1 = VAR_2 . METHOD_5 ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( ( VAR_1 + ( VAR_3 ) ) ) ) ; VAR_2 . METHOD_3 ( STRING_2 , TYPE_2 . METHOD_4 ( ( VAR_1 + ( 4 * ( VAR_3 ) ) ) ) ) ; TYPE_3 entry = TYPE_4 . METHOD_5 ( response ) ; METHOD_6 ( ( VAR_1 + ( 3 * ( VAR_3 ) ) ) , VAR_4 , VAR_5 ) ; assertEquals ( VAR_6 , VAR_4 ) ; } 
public void METHOD_1 ( int VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( TAG , ( STRING_1 + ( VAR_3 ) ) ) ; VAR_3 = VAR_1 ; if ( ( ( VAR_4 ) != null ) && ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_3 ) ) ) { VAR_4 . METHOD_3 ( VAR_3 ) ; if ( VAR_2 ) android.util.Log.v ( TAG , ( STRING_2 + ( VAR_3 ) ) ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 method , TYPE_3 VAR_2 , int offset , TYPE_4 VAR_3 ) { VAR_4 = METHOD_2 ( offset , VAR_4 ) ; VAR_5 . METHOD_1 ( VAR_1 , method , VAR_2 , VAR_6 , VAR_3 ) ; VAR_6 += VAR_3 . length ( VAR_6 ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { if ( ( ( VAR_2 . METHOD_2 ( CHAR_1 ) ) != ( - 1 ) ) && ( ( ( VAR_3 ) & ( VAR_4 ) ) == 0 ) ) { return ; } if ( TYPE_3 . METHOD_3 ( context , VAR_1 ) ) { METHOD_4 ( context , VAR_1 ) ; } } 
public void METHOD_1 ( int userId , android.os.Bundle VAR_1 , android.os.Bundle VAR_2 ) { if ( ( ! ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) && ( ! ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ) { return ; } final boolean VAR_4 = VAR_1 . METHOD_3 ( VAR_3 ) ; if ( ( ( VAR_5 ) || ( VAR_6 ) ) && VAR_4 ) { try { METHOD_4 ( STRING_1 , true ) ; } catch ( android.os.RemoteException e ) { } } METHOD_5 ( VAR_4 ) ; } 
public java.util.List < java.io.File > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < java.io.File > ( 1 ) ; java.io.File VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_4 ( ) ) ) { VAR_1 . METHOD_5 ( VAR_2 ) ; } } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) { TYPE_1 result = new TYPE_1 ( ) ; VAR_1 = ( ( in . METHOD_2 ( ) ) != 0 ) ? true : false ; VAR_2 = new ArrayList < TYPE_3 > ( ) ; in . METHOD_3 ( VAR_2 , VAR_3 ) ; VAR_4 = new ArrayList < TYPE_4 > ( ) ; in . METHOD_3 ( VAR_4 , VAR_5 ) ; if ( ( in . METHOD_4 ( ) ) != 0 ) { android.util.Log.e ( TYPE_1 . TAG , STRING_1 ) ; } return result ; } 
public int METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 , null ) ; if ( VAR_1 . METHOD_3 ( ) ) { TYPE_1 < TYPE_3 > VAR_3 = VAR_1 . get ( ) . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ; if ( VAR_3 . METHOD_3 ( ) ) { return java.lang.Integer.parseInt ( VAR_3 . get ( ) . METHOD_6 ( ) ) ; } } return METHOD_7 ( ) ; } 
private void set ( final int VAR_1 , final java.lang.Object type ) { VAR_2 = TYPE_1 . METHOD_1 ( VAR_2 , VAR_1 ) ; while ( VAR_1 >= ( VAR_3 . size ( ) ) ) { VAR_3 . METHOD_2 ( VAR_4 ) ; } VAR_3 . set ( VAR_1 , type ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) throws java.io.IOException { if ( ( VAR_1 != null ) && ( VAR_2 != ( VAR_3 ) ) ) { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; } else { VAR_4 . METHOD_2 ( ) ; } } 
public void METHOD_1 ( int slotId , int VAR_1 , int status ) throws android.os.RemoteException { synchronized ( VAR_2 ) { android.util.Log . i ( VAR_3 , ( ( ( ( ( STRING_1 + slotId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + status ) ) ; if ( ( ( VAR_4 ) == slotId ) && ( VAR_1 == ( VAR_5 ) ) ) { VAR_6 = status ; } } if ( ( VAR_7 ) != null ) { VAR_7 . METHOD_2 ( ) ; } } 
private TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_2 data = VAR_2 . METHOD_2 ( ) ; if ( data != null ) { TYPE_3 VAR_3 = data . METHOD_3 ( METHOD_4 ( ) ) ; if ( VAR_3 != null ) { VAR_1 = new TYPE_1 ( STRING_1 , VAR_3 . METHOD_5 ( ) ) ; } } } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 e ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_3 . METHOD_3 ( STRING_3 , new java.lang.Runnable ( ) { public void run ( ) { VAR_3 . METHOD_4 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_5 ( STRING_4 , VAR_4 ) ; } } ) ; } } ) ; } VAR_4 . METHOD_6 ( ) ; VAR_5 = null ; TYPE_3 . METHOD_7 ( ) . METHOD_8 ( ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { TYPE_3 VAR_1 = element . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( VAR_1 != null ) { java.lang.String VAR_4 = VAR_1 . METHOD_3 ( ) ; if ( ( TYPE_4 . METHOD_4 ( VAR_5 , VAR_4 ) ) >= 0 ) { context . METHOD_5 ( VAR_6 , context . METHOD_6 ( VAR_1 ) , STRING_1 , null ) ; } } } 
public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 0 , 0 , false ) ; TYPE_3 in = t . METHOD_3 ( args . in ) ; args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_7 ( ) ) ) ; } 
public static void METHOD_1 ( java.io.File VAR_1 , TYPE_1 location ) throws TYPE_2 , TYPE_3 { assert VAR_1 != null ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( location ) ; } if ( VAR_1 . METHOD_3 ( ) ) { throw new TYPE_3 ( location ) ; } } 
public final TYPE_1 METHOD_1 ( byte x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( ) ) , x ) ; return this ; } 
public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = null ; try { VAR_1 = ( ( TYPE_1 < TYPE_2 , TYPE_3 > ) ( super . METHOD_1 ( ) ) ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ) ; } VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( this ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( STRING_1 , VAR_3 ) ; TYPE_3 . when ( VAR_4 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_2 ) ; java.lang.String VAR_6 = VAR_7 . METHOD_6 ( ) ; assertEquals ( VAR_6 , ( ( VAR_8 ) + ( VAR_3 ) ) ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( name ) ; assertTrue ( java.lang.String.format ( STRING_1 , name ) , VAR_1 . METHOD_3 ( ) ) ; assertTrue ( java.lang.String.format ( STRING_2 , name ) , VAR_1 . METHOD_4 ( ) ) ; return VAR_1 ; } 
public static void METHOD_1 ( java.io.File [ ] VAR_1 , java.io.File [ ] VAR_2 , java.io.File VAR_3 , boolean VAR_4 ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , false , FLOAT_1 , ( ( TYPE_2 ) ( null ) ) , ( ( TYPE_3 [ ] ) ( null ) ) ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < ? > VAR_1 = VAR_2 class . METHOD_2 ( VAR_3 . String class , int . class ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ; VAR_4 . METHOD_7 ( 0 ) . METHOD_8 ( VAR_3 . String class ) . METHOD_9 ( STRING_2 ) ; VAR_4 . METHOD_7 ( 1 ) . METHOD_8 ( int . class ) . METHOD_9 ( STRING_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; try { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( ) ; java.io.File f = new java.io.File ( VAR_2 , VAR_3 ) ; VAR_1 = new TYPE_1 ( f ) ; VAR_4 . METHOD_3 ( VAR_1 , STRING_1 ) ; } catch ( TYPE_3 VAR_5 ) { } catch ( java.io.IOException VAR_5 ) { } finally { if ( VAR_1 != null ) { try { VAR_1 . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_5 ) { } } } } 
private static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_1 . METHOD_2 ( ) ) ) { return VAR_2 ; } else if ( ( VAR_2 == null ) || ( VAR_2 . METHOD_2 ( ) ) ) { return VAR_1 ; } else { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( VAR_1 ) ; VAR_3 . append ( VAR_4 ) ; VAR_3 . append ( VAR_2 ) ; return VAR_3 . toString ( ) ; } } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) ) { return true ; } return ( ( VAR_1 instanceof TYPE_3 ) || ( VAR_1 instanceof TYPE_4 ) ) || ( VAR_1 instanceof TYPE_5 ) ; } 
public TYPE_1 [ ] METHOD_1 ( ) { try { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_2 . METHOD_3 ( ) ; } java.lang.Class < ? > c = java.lang.Class . METHOD_4 ( ( ( getName ( ) ) + STRING_1 ) , true , VAR_1 ) ; return c . METHOD_1 ( ) ; } catch ( java.lang.Exception ex ) { return VAR_2 ; } } 
static < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( final TYPE_3 < TYPE_1 , TYPE_2 > entry ) { TYPE_4 . METHOD_2 ( entry ) ; return new TYPE_5 < TYPE_1 , TYPE_2 > ( ) { public TYPE_1 METHOD_3 ( ) { return entry . METHOD_3 ( ) ; } public TYPE_2 METHOD_4 ( ) { return entry . METHOD_4 ( ) ; } } ; } 
public void METHOD_1 ( ) { when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) ; VAR_2 . METHOD_5 ( false ) ; VAR_2 . METHOD_6 ( VAR_3 ) ; VAR_4 . METHOD_7 ( VAR_5 ) ; VAR_6 . METHOD_8 ( ) ; verify ( VAR_7 ) . METHOD_9 ( ) ; verify ( VAR_7 , METHOD_10 ( ) ) . METHOD_11 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 class . getName ( ) , null ) ; java.util.List < TYPE_1 > VAR_3 = VAR_1 . METHOD_3 ( ) ; java.util.List < java.lang.String > VAR_4 = TYPE_2 . METHOD_4 ( ) ; for ( TYPE_1 VAR_5 : VAR_3 ) { VAR_4 . METHOD_5 ( VAR_5 . getName ( ) ) ; } assertEquals ( TYPE_3 . METHOD_6 ( STRING_1 ) , VAR_4 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 callback ) { TYPE_4 VAR_3 = VAR_4 . get ( ) ; if ( VAR_3 == null ) { android.util.Log.e ( VAR_5 . TAG , STRING_1 ) ; return ; } if ( VAR_6 ) { android.util.Log.e ( VAR_5 . TAG , STRING_2 ) ; return ; } VAR_3 . METHOD_1 ( VAR_7 , ( VAR_1 == null ? TYPE_5 . METHOD_2 ( ) : VAR_1 . METHOD_3 ( ) ) , VAR_2 , callback ) ; } 
private static synchronized TYPE_1 METHOD_1 ( TYPE_2 < java.lang.Class < ? extends TYPE_3 > > VAR_1 ) { TYPE_1 result = VAR_2 . get ( VAR_1 ) ; if ( result == null ) { result = TYPE_1 . of ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 , result ) ; } return result ; } 
public TYPE_1 METHOD_1 ( int type , java.lang.String name ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < java.util.List < ? > > ( ) ; } TYPE_2 < java.lang.Object > entry = new TYPE_2 < java.lang.Object > ( ) ; entry . METHOD_2 ( type ) ; entry . METHOD_2 ( name ) ; VAR_1 . METHOD_2 ( entry ) ; return this ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) return true ; if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) return false ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( METHOD_2 ( ) ) == ( VAR_2 . METHOD_2 ( ) ) ) && ( ( id ) == ( VAR_2 . id ) ) ; } 
public void METHOD_1 ( ) { final int VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; if ( ( VAR_2 . size ( ) ) <= 0 ) { METHOD_5 ( ) ; } final int VAR_3 = METHOD_2 ( ) ; if ( VAR_3 != VAR_1 ) { METHOD_6 ( ) ; } } 
private static TYPE_1 METHOD_1 ( ) throws java.io.IOException { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_1 VAR_3 ; if ( VAR_1 != null ) { VAR_3 = TYPE_3 . get ( VAR_1 ) ; } else { VAR_3 = TYPE_4 . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 . toString ( ) ) ; } TYPE_5 . METHOD_5 ( VAR_3 ) ; return VAR_3 ; } 
public static void METHOD_1 ( java.io.File VAR_1 , TYPE_1 location ) throws TYPE_2 , TYPE_3 { assert VAR_1 != null ; if ( VAR_1 . METHOD_2 ( ) ) { throw new TYPE_3 ( location ) ; } if ( VAR_1 . METHOD_3 ( ) ) { VAR_2 . log ( VAR_3 , STRING_1 , new java.lang.Object [ ] { location . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) } ) ; } else { throw new TYPE_2 ( location ) ; } } 
private static java.lang.Class < ? > METHOD_1 ( java.lang.Class < ? > VAR_1 ) { for ( java.lang.Class < ? > c = VAR_1 ; c != ( VAR_2 . Object class ) ; c = c . METHOD_2 ( ) ) { for ( TYPE_1 method : TYPE_2 . METHOD_3 ( c ) ) { if ( TYPE_3 . METHOD_4 ( method ) ) { return method . METHOD_5 ( ) [ 0 ] ; } } } throw new TYPE_4 ( STRING_1 ) ; } 
public TYPE_1 METHOD_1 ( ) { double a = VAR_1 . METHOD_2 ( ) ; a *= INT_1 ; a -= INT_2 ; a *= ( ( ( FLOAT_1 * INT_3 ) * INT_4 ) * INT_4 ) * INT_5 ; return new TYPE_1 ( ( ( long ) ( a ) ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; if ( VAR_3 . METHOD_3 ( VAR_1 ) ) { TYPE_1 args = TYPE_1 . METHOD_4 ( ) ; args . arg1 = VAR_1 ; VAR_4 = VAR_2 ; VAR_5 . METHOD_5 ( VAR_6 , args ) . METHOD_6 ( ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return new TYPE_1 ( ) ; } TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) ) ) ; assert VAR_3 != null ; return TYPE_3 . METHOD_1 ( VAR_1 , VAR_3 ) . append ( VAR_2 . getName ( ) ) . append ( CHAR_1 ) ; } 
public int METHOD_1 ( byte [ ] out , int VAR_1 ) { if ( ( ( context ) != null ) && ( TYPE_1 . METHOD_2 ( context ) ) ) { METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , INT_1 ) ; METHOD_3 ( VAR_5 , VAR_3 , VAR_4 , INT_2 ) ; } int VAR_6 = VAR_2 . METHOD_1 ( out , VAR_1 ) ; int VAR_7 = VAR_5 . METHOD_1 ( out , ( VAR_1 + VAR_6 ) ) ; return VAR_6 + VAR_7 ; } 
public synchronized void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 = method . METHOD_1 ( ) ; if ( ( ( ( ! ( VAR_1 instanceof TYPE_1 ) ) || ( VAR_1 . METHOD_2 ( ) ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) { return ; } TYPE_2 VAR_2 = new TYPE_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; VAR_2 . METHOD_5 ( method ) ; } 
private static void METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 , java.util.Map < java.lang.String , java.lang.String > VAR_2 , java.lang.String VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_1 , ( STRING_1 + VAR_3 ) , STRING_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 , ( STRING_3 + VAR_3 ) , STRING_2 ) ; VAR_2 . METHOD_3 ( ( STRING_1 + VAR_3 ) , VAR_3 ) ; VAR_2 . METHOD_3 ( ( STRING_3 + VAR_3 ) , VAR_3 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer id , java.lang.String VAR_2 ) throws java.lang.Exception { android.bluetooth.BluetoothDevice device = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_1 ) ; byte [ ] VAR_4 = VAR_2 . METHOD_4 ( ) ; return VAR_3 . METHOD_5 ( device , id , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 0 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; final TYPE_1 VAR_3 = METHOD_4 ( VAR_1 , VAR_2 ) ; METHOD_2 ( 1 ) ; final TYPE_1 VAR_4 = METHOD_4 ( VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_5 ( VAR_3 , VAR_4 ) ; } 
void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String s = METHOD_2 ( VAR_1 , 16 ) ; this . METHOD_3 ( ) ; int VAR_2 = TYPE_1 . METHOD_4 ( this . VAR_3 , s ) ; TYPE_2 . METHOD_5 ( ( VAR_2 > 0 ) ) ; if ( VAR_2 < ( s . length ( ) ) ) { throw METHOD_6 ( VAR_1 ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String ... VAR_3 ) { TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; assertNotNull ( VAR_4 ) ; java.util.List < ? extends TYPE_3 > VAR_5 = METHOD_4 ( VAR_3 ) ; TYPE_3 match = VAR_4 . METHOD_5 ( VAR_5 ) ; java.lang.System.out.println ( match . toString ( ) ) ; assertEquals ( VAR_2 , VAR_5 . METHOD_6 ( match ) ) ; } 
public static java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( TYPE_1 d ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = TYPE_2 . METHOD_1 ( d . METHOD_2 ( ) ) ; for ( TYPE_3 s : d . METHOD_3 ( ) ) { if ( s . METHOD_4 ( ) . equals ( VAR_2 ) ) { VAR_1 . METHOD_5 ( STRING_1 , TYPE_2 . METHOD_6 ( true ) ) ; } } return TYPE_2 . METHOD_1 ( d . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 device = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; if ( METHOD_4 ( ) ) { METHOD_5 ( true ) ; } TYPE_2 . assertFalse ( METHOD_4 ( ) ) ; METHOD_5 ( false ) ; METHOD_6 ( ) ; new TYPE_3 ( device ) . METHOD_7 ( ) ; TYPE_2 . assertTrue ( METHOD_4 ( ) ) ; METHOD_5 ( true ) ; TYPE_2 . assertFalse ( METHOD_4 ( ) ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.List < TYPE_3 > VAR_3 = VAR_1 . METHOD_4 ( ) ; if ( ( ( ( ! ( VAR_3 . METHOD_5 ( ) ) ) && ( ( VAR_3 . size ( ) ) <= 5 ) ) && ( ( VAR_1 . METHOD_6 ( ) . size ( ) ) == 1 ) ) && ( VAR_2 . METHOD_7 ( TYPE_4 . METHOD_8 ( ) ) ) ) { return true ; } return false ; } 
private void METHOD_1 ( android.bluetooth.BluetoothDevice device ) { TYPE_1 VAR_1 = METHOD_2 ( device ) ; android.content.Intent VAR_2 = new android.content.Intent ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 , device ) ; VAR_2 . METHOD_3 ( VAR_5 , ( VAR_1 == null ? null : VAR_6 ) ) ; VAR_7 . METHOD_4 ( device , VAR_6 ) ; VAR_7 . METHOD_5 ( VAR_2 , VAR_8 ) ; VAR_9 . METHOD_6 ( device ) ; } 
static int METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 , int VAR_4 ) { TYPE_2 VAR_5 = VAR_6 . METHOD_2 ( VAR_1 ) ; if ( VAR_5 == null ) { return 0 ; } TYPE_3 VAR_7 = TYPE_3 . METHOD_2 ( VAR_3 ) ; if ( VAR_7 == null ) { return 0 ; } return VAR_5 . METHOD_3 ( VAR_2 , VAR_7 , VAR_4 ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 sb = new TYPE_2 ( 100 ) ; sb.append ( STRING_1 ) ; int VAR_2 = VAR_1 . size ( ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { sb.append ( STRING_2 ) ; sb.append ( VAR_1 . METHOD_2 ( i ) . METHOD_3 ( ) ) ; } return sb . toString ( ) ; } 
private static int METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object [ ] VAR_2 , int index , int VAR_3 ) { if ( VAR_1 == null ) { for ( int i = index ; i < VAR_3 ; i ++ ) if ( ( VAR_2 [ i ] ) == null ) return i ; } else { for ( int i = index ; i < VAR_3 ; i ++ ) if ( VAR_1 . equals ( VAR_2 [ i ] ) ) return i ; } return - 1 ; } 
protected TYPE_1 [ ] METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , TYPE_4 context ) { final TYPE_5 field = VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , false ) ; return new TYPE_1 [ ] { new TYPE_6 ( VAR_2 , field , VAR_1 ) } ; } 
public synchronized void METHOD_1 ( TYPE_1 context , java.lang.Throwable e ) throws TYPE_2 { -- ( VAR_1 ) ; if ( ( VAR_1 ) > 0 ) { return ; } if ( ( ( VAR_2 ) != null ) && ( VAR_3 ) ) { try { TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; com.android.tradefed.log.LogUtil.CLog.i ( STRING_1 , VAR_2 ) ; } catch ( java.io.IOException VAR_4 ) { TYPE_4 . e ( STRING_2 , VAR_2 , VAR_4 ) ; } VAR_2 = null ; } } 
public void METHOD_1 ( TYPE_1 node , TYPE_1 parent , TYPE_2 VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { java.lang.String VAR_3 = VAR_4 . METHOD_2 ( ) ; if ( VAR_3 != null ) { node . METHOD_3 ( STRING_1 , new TYPE_3 ( null , VAR_5 , VAR_3 ) ) ; } else { parent . METHOD_4 ( node ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File project = METHOD_2 ( null , STRING_1 , STRING_2 , STRING_3 ) ; METHOD_3 ( ( STRING_4 + ( ( STRING_5 + STRING_4 ) + STRING_6 ) ) , STRING_7 , VAR_1 , new java.lang.String [ ] { STRING_8 , STRING_9 , STRING_10 , new java.io.File ( project , STRING_11 ) . METHOD_4 ( ) , STRING_12 , STRING_13 , project . METHOD_4 ( ) } ) ; } 
int METHOD_1 ( int offset ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { int VAR_2 = VAR_1 . get ( i ) ; if ( offset <= VAR_2 ) { return i ; } } return - 1 ; } 
static void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { try { VAR_1 . METHOD_2 ( ) ; if ( ! VAR_2 ) { VAR_3 . println ( STRING_1 ) ; } } catch ( TYPE_2 VAR_4 ) { if ( ! VAR_2 ) { java.lang.System.out.println ( STRING_2 ) ; } else { throw VAR_4 ; } } } 
public boolean METHOD_1 ( int VAR_1 , TYPE_1 event ) { switch ( VAR_1 ) { case VAR_2 : if ( METHOD_2 ( ) ) { METHOD_3 ( VAR_3 ) ; } return true ; case VAR_4 : if ( METHOD_4 ( ) ) { METHOD_3 ( VAR_5 ) ; } return true ; case VAR_6 : case VAR_7 : VAR_8 = true ; } return super . METHOD_1 ( VAR_1 , event ) ; } 
private TYPE_1 METHOD_1 ( ) { java.io.File VAR_1 = METHOD_2 ( STRING_1 ) ; if ( VAR_1 != null ) { java.util.List < java.io.File > VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_4 ( null , VAR_2 ) ; assertNotNull ( VAR_3 ) ; return VAR_3 ; } else { fail ( STRING_2 ) ; } return null ; } 
void test ( ) { METHOD_1 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_1 ) ) ) ; java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_3 ) ; if ( ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_4 ( VAR_4 ) ) ) ) { status = VAR_5 ; } else { status = VAR_6 ; } } 
public boolean METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { return VAR_1 . METHOD_1 ( ) ; } } catch ( TYPE_1 e ) { } METHOD_2 ( ) ; synchronized ( VAR_2 ) { if ( ! ( METHOD_3 ( ) ) ) return false ; if ( ( VAR_3 ) == 0 ) { android.util.Log.e ( VAR_4 , STRING_1 ) ; return true ; } VAR_3 = 0 ; return TYPE_2 . METHOD_4 ( VAR_5 , VAR_3 ) ; } } 
public java.lang.String toString ( ) { if ( ! ( METHOD_1 ( ) ) ) return STRING_1 ; TYPE_1 in ; if ( ( ! ( TYPE_2 . METHOD_2 ( ) ) ) && ( ( TYPE_3 . METHOD_3 ( ) ) != null ) ) { in = TYPE_1 . METHOD_4 ( ) ; } else { in = VAR_1 . METHOD_5 ( ) ; } return ( ( ( STRING_2 + in ) + STRING_3 ) + ( VAR_1 . METHOD_6 ( ) ) ) + STRING_4 ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.Set < java.io.File > VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( ) ) { return TYPE_3 . METHOD_4 ( ) ; } java.util.Set < TYPE_2 > VAR_3 = TYPE_4 . METHOD_5 ( ) ; for ( java.io.File VAR_4 : VAR_1 ) { VAR_3 . METHOD_6 ( new TYPE_5 ( VAR_4 ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( ! ( element . METHOD_2 ( VAR_1 , VAR_2 ) ) ) && ( ! ( element . METHOD_2 ( VAR_1 , VAR_3 ) ) ) ) { context . METHOD_3 ( VAR_4 , element , context . METHOD_4 ( element ) , ( STRING_1 + STRING_2 ) , null ) ; } } 
private static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.util.ArrayList < TYPE_2 > VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_4 = VAR_3 . get ( ( ( VAR_3 . size ( ) ) - 1 ) ) ; return ( ( ( VAR_4 . METHOD_3 ( ) ) != null ) || ( ( VAR_4 . METHOD_4 ( ) . size ( ) ) > 0 ) ) && ( ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ) > 1 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.Throwable e , TYPE_3 info ) { TYPE_1 VAR_2 = METHOD_1 ( e ) ; if ( VAR_1 != null ) { TYPE_4 sb = new TYPE_4 ( ) ; VAR_1 . METHOD_2 ( 0 , sb ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) . getName ( ) , sb . toString ( ) , info ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 ) ) ) ; TYPE_1 VAR_3 = VAR_1 . get ( STRING_3 ) ; java.lang.String VAR_4 = VAR_3 . METHOD_3 ( ) ; if ( VAR_4 != null ) { errln ( STRING_4 ) ; } } catch ( java.lang.IllegalArgumentException ex ) { logln ( STRING_5 ) ; } catch ( TYPE_2 ex ) { METHOD_4 ( ( STRING_6 + ( ex . getMessage ( ) ) ) ) ; } } 
public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 level = VAR_1 ; java.lang.String VAR_2 = TYPE_3 . METHOD_2 ( STRING_1 ) ; if ( VAR_2 != null ) { try { level = new TYPE_4 < TYPE_2 > ( VAR_3 class , TYPE_2 . values ( ) ) . METHOD_3 ( new TYPE_5 ( ) , VAR_2 ) ; } catch ( TYPE_6 e ) { throw new TYPE_1 ( e.getMessage ( ) ) ; } } TYPE_7 . METHOD_4 ( level ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( ) ; try { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( ) . METHOD_6 ( ) ; } catch ( java.lang.Exception e ) { e . METHOD_7 ( ) ; } finally { TYPE_1 . METHOD_8 ( ) ; } } 
TYPE_1 METHOD_1 ( TYPE_1 parent , java.lang.String name ) throws TYPE_2 { assert ! ( METHOD_2 ( ) ) ; try { return METHOD_3 ( parent , name ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( METHOD_4 ( parent , name ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.io.File VAR_2 = TYPE_3 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_3 ( ) , VAR_3 , false , false ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; assertTrue ( VAR_4 . METHOD_5 ( VAR_2 , true ) ) ; METHOD_6 ( VAR_1 , VAR_4 , true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; VAR_2 . METHOD_2 ( VAR_3 class . getName ( ) , VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = VAR_2 . METHOD_3 ( ) ; java.util.List < java.lang.String > VAR_5 = TYPE_2 . METHOD_4 ( ) ; for ( TYPE_1 VAR_6 : VAR_4 ) { VAR_5 . METHOD_5 ( VAR_6 . getName ( ) ) ; } assertEquals ( TYPE_3 . METHOD_6 ( VAR_1 ) , VAR_5 ) ; } 
static void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 d = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return ; } TYPE_1 src = VAR_3 . METHOD_2 ( VAR_2 ) ; if ( src == null ) { return ; } TYPE_2 . METHOD_3 ( VAR_4 , 0 , VAR_5 , 0 , VAR_6 ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) ; final java.lang.String expected = STRING_9 + ( STRING_10 + STRING_11 ) ; assertEquals ( expected , METHOD_2 ( VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) { METHOD_3 ( ) ; try { TYPE_3 VAR_4 = VAR_3 . METHOD_1 ( ) ; if ( VAR_4 == null ) { throw new TYPE_2 ( STRING_1 , VAR_5 ) ; } VAR_2 = new TYPE_1 ( VAR_4 ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; } } return VAR_2 ; } 
static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 , float VAR_4 , float VAR_5 , int VAR_6 ) { TYPE_1 VAR_7 = VAR_8 . METHOD_2 ( VAR_1 ) ; if ( VAR_7 == null ) { return false ; } return VAR_7 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } 
public void METHOD_1 ( ) { java.lang.Class < ? > target = VAR_1 class ; java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( target , STRING_1 , VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_4 ( VAR_5 , VAR_6 , VAR_7 , 0 , VAR_2 ) ; VAR_4 . run ( null ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( VAR_8 class , ( ( target . getName ( ) ) + STRING_2 ) ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( VAR_9 ) ; } 
void METHOD_1 ( ) { METHOD_2 ( ) ; for ( TYPE_1 action : VAR_1 ) { if ( ! ( action . METHOD_3 ( ) ) ) { TYPE_2 . i ( VAR_2 . TAG , ( STRING_1 + action ) ) ; action . start ( ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { android.content.Intent i = new android.content.Intent ( this , VAR_3 class ) ; i . METHOD_2 ( VAR_4 , VAR_2 ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 . name , TYPE_4 . METHOD_5 ( VAR_5 ) , i , null ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 is = new TYPE_2 ( new byte [ 10 ] ) ; TYPE_3 VAR_1 = new TYPE_3 ( is ) ; try { VAR_1 . METHOD_2 ( ) ; fail ( STRING_1 ) ; } catch ( java.io.IOException e ) { } } 
TYPE_1 METHOD_1 ( int VAR_1 , TYPE_1 config , TYPE_2 VAR_2 ) { if ( config == null ) { return null ; } if ( ( VAR_2 != null ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { VAR_3 . METHOD_3 ( config ) ; config = VAR_3 ; VAR_2 . METHOD_4 ( VAR_1 , config ) ; } return config ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 class . getName ( ) , null ) ; java.util.List < TYPE_1 > VAR_3 = VAR_1 . METHOD_3 ( ) ; java.util.List < java.lang.String > VAR_4 = TYPE_2 . METHOD_4 ( ) ; for ( TYPE_1 VAR_5 : VAR_3 ) { VAR_4 . METHOD_5 ( VAR_5 . getName ( ) ) ; } assertEquals ( TYPE_3 . METHOD_6 ( STRING_1 , STRING_1 , STRING_2 ) , VAR_4 ) ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] id = TYPE_4 . METHOD_2 ( session ) ; assertNotNull ( id ) ; assertEquals ( INT_1 , id . length ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 d = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } TYPE_1 VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) ; if ( VAR_4 == null ) { return false ; } d . METHOD_3 ( VAR_5 ) ; return true ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 , INT_1 ) ; TYPE_1 VAR_2 = new TYPE_2 ( STRING_2 , INT_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_4 , VAR_1 ) ; try { new TYPE_4 ( VAR_3 ) ; fail ( STRING_3 ) ; } catch ( java.lang.IllegalArgumentException e ) { } TYPE_3 VAR_5 = new TYPE_3 ( VAR_6 , VAR_1 ) ; new TYPE_4 ( VAR_5 ) ; new TYPE_4 ( VAR_7 ) ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
private static java.lang.Class METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 , int VAR_2 , java.util.List < java.lang.Throwable > VAR_3 ) { java.lang.Class result = null ; try { result = TYPE_2 . METHOD_2 ( name , VAR_1 , VAR_2 ) ; } catch ( TYPE_3 e ) { if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( e ) ; } } catch ( TYPE_4 e ) { if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( e ) ; } } return result ; } 
public void METHOD_1 ( final double VAR_1 ) { long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 == INT_1 ) || ( VAR_2 == INT_2 ) ) { VAR_3 . METHOD_3 ( ( ( VAR_4 ) + ( ( int ) ( VAR_1 ) ) ) ) ; } else { VAR_3 . METHOD_4 ( new TYPE_1 ( VAR_1 ) ) ; } } 
public int METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_2 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class . getName ( ) ) ; try { VAR_1 . METHOD_2 ( new TYPE_2 ( null , null ) , 0 ) ; TYPE_3 . fail ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException expected ) { TYPE_4 . METHOD_3 ( expected ) . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 type ) { switch ( type . METHOD_2 ( ) ) { case VAR_1 : return VAR_2 ; case VAR_3 : case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_7 ; case VAR_8 : return VAR_9 ; case VAR_10 : return VAR_11 ; case VAR_12 : return VAR_13 ; } return TYPE_3 . METHOD_3 ( type ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { byte [ ] output = new byte [ INT_1 ] ; TYPE_1 . METHOD_2 ( output ) ; boolean VAR_1 = true ; for ( int i = 0 ; i < ( output . length ) ; i ++ ) { VAR_1 &= ( output [ i ] ) == 0 ; } assertFalse ( ( STRING_1 + STRING_2 ) , VAR_1 ) ; TYPE_2 . METHOD_3 ( ) ; } 
public static android.content.Intent METHOD_1 ( TYPE_1 context ) { if ( ( ( TYPE_2 . METHOD_2 ( ) ) && ( TYPE_2 . METHOD_3 ( context ) ) ) && ( ( VAR_1 ) >= ( VAR_2 ) ) ) { return context . METHOD_4 ( VAR_3 class ) . METHOD_1 ( ) ; } android.content.Intent VAR_4 = new android.content.Intent ( STRING_1 ) ; VAR_4 . METHOD_5 ( context . METHOD_6 ( ) ) ; return VAR_4 ; } 
private int [ ] METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { int [ ] VAR_2 = new int [ 6 ] ; VAR_2 [ 0 ] = METHOD_2 ( VAR_1 ) ; VAR_2 [ 1 ] = METHOD_2 ( VAR_1 ) ; VAR_2 [ 2 ] = METHOD_2 ( VAR_1 ) ; VAR_2 [ 3 ] = METHOD_2 ( VAR_1 ) ; VAR_2 [ 4 ] = METHOD_2 ( VAR_1 ) ; VAR_2 [ 5 ] = METHOD_2 ( VAR_1 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new int [ ] { VAR_2 , VAR_3 } ) ; TYPE_1 VAR_4 = new TYPE_2 ( ) . addFeature ( VAR_5 ) . addFeature ( VAR_6 ) . build ( ) ; TYPE_3 . assertEquals ( VAR_1 , VAR_4 ) ; } 
private void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) || ( ! ( VAR_2 ) ) ) { return ; } if ( ( VAR_3 ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { throw new TYPE_1 ( ( STRING_2 + STRING_3 ) ) ; } VAR_3 = null ; VAR_1 = false ; VAR_2 = false ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( false ) ; TYPE_2 . METHOD_3 ( false ) ; if ( VAR_1 . METHOD_4 ( ) ) { TYPE_3 . METHOD_5 ( false ) ; } VAR_2 = TYPE_1 . METHOD_6 ( new TYPE_4 ( ) { public void METHOD_7 ( TYPE_5 event ) { METHOD_8 ( ) ; } } ) ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; if ( sshd ) { modules.add ( new TYPE_3 ( ) ) ; if ( VAR_1 ) { modules.add ( new TYPE_4 ( ) ) ; } else { modules.add ( new TYPE_5 ( ) ) ; modules.add ( VAR_2 . METHOD_2 ( VAR_3 class ) ) ; } } else { modules.add ( new TYPE_6 ( ) ) ; } return VAR_4 . METHOD_3 ( modules ) ; } 
void METHOD_1 ( java.lang.String token ) { try { VAR_1 . METHOD_1 ( token , changes , VAR_2 ) ; } catch ( TYPE_1 e ) { throw new TYPE_2 ( e . getMessage ( ) , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( STRING_2 , e ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; VAR_2 = VAR_3 ; VAR_2 = VAR_2 . METHOD_2 ( ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { throw new TYPE_4 ( STRING_1 , VAR_2 ) ; } else { VAR_1 . METHOD_4 ( ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ) ; } return VAR_4 ; } 
private void METHOD_1 ( ) throws java.io.IOException { close ( ) ; VAR_1 = repo . METHOD_2 ( ) ; TYPE_1 ref = repo . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; if ( ref == null ) { return ; } try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) { VAR_3 = rw . parseCommit ( ref . METHOD_5 ( ) . METHOD_6 ( ) ) ; notes = TYPE_2 . METHOD_7 ( VAR_1 , VAR_3 ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 p ) { return new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( ) throws java.io.IOException { try { return new TYPE_2 ( METHOD_3 ( p ) , TYPE_4 . METHOD_4 ( p . toString ( ) ) , TYPE_5 . METHOD_5 ( p ) ) ; } catch ( TYPE_6 e ) { return VAR_1 ; } } } ; } 
private void METHOD_1 ( TYPE_1 . Status VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = result . METHOD_2 ( ref ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( message ( VAR_3 ) ) . isEqualTo ( VAR_3 . getStatus ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_3 . getMessage ( ) ) ; } 
protected void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { rsp . METHOD_2 ( STRING_1 ) ; TYPE_3 in = METHOD_3 ( ) ; try { TYPE_4 out = rsp . METHOD_4 ( ) ; try { TYPE_5 . METHOD_5 ( in , out ) ; } finally { out . close ( ) ; } } finally { in . close ( ) ; } } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ; } return false ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { try { com.google.gerrit.reviewdb.client.Change change = getChange ( VAR_1 . getChange ( ) ) ; TYPE_2 event = new TYPE_2 ( change ) ; event . change = METHOD_2 ( change ) ; VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = VAR_1 . METHOD_5 ( ) ; VAR_4 . get ( ) . METHOD_6 ( change , event , db . get ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; } } 
static void METHOD_1 ( TYPE_1 config , java.lang.String VAR_1 ) { config . METHOD_2 ( STRING_1 , null , STRING_2 , VAR_2 ) ; config . METHOD_3 ( STRING_1 , null , STRING_3 , STRING_4 ) ; config . METHOD_3 ( STRING_1 , null , STRING_5 , STRING_6 ) ; config . METHOD_3 ( STRING_1 , null , STRING_7 , VAR_1 ) ; config . METHOD_4 ( STRING_1 , STRING_8 , STRING_9 , true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 ) ; METHOD_3 ( user ) ; VAR_1 . METHOD_4 ( VAR_2 class ) ; VAR_3 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( ) . get ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( STRING_2 , null ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( user ) ; METHOD_5 ( r ) ; assertEquals ( VAR_2 . getName ( ) , r . name ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return java.util.Collections . METHOD_2 ( TYPE_3 . METHOD_3 ( java.util.Collections . METHOD_4 ( VAR_1 . METHOD_1 ( ) ) , new TYPE_4 < TYPE_5 , TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_5 VAR_2 ) { try { return METHOD_5 ( VAR_2 ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , e ) ; } } } ) ) ; } 
public void METHOD_1 ( final TYPE_1 key ) { if ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( key ) ) && ( VAR_2 . METHOD_4 ( ( ( TYPE_2 ) ( key ) ) ) ) ) { VAR_3 . METHOD_5 ( new TYPE_3 ( ) { public void run ( ) { VAR_2 . METHOD_1 ( ( ( TYPE_2 ) ( key ) ) ) ; } } ) ; } VAR_4 . METHOD_1 ( key ) ; } 
public java.lang.String METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) throws java.io.IOException { final org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; try { org.eclipse.jgit.revwalk.RevWalk VAR_3 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; org.eclipse.jgit.revwalk.RevCommit commit = VAR_3 . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( VAR_1 ) ) ; return commit . METHOD_4 ( ) ; } finally { repo . close ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = null ; for ( TYPE_3 w : this ) { if ( w instanceof TYPE_2 ) { final TYPE_2 d = ( ( TYPE_2 ) ( w ) ) ; if ( VAR_2 == null ) { VAR_2 = d ; } if ( ( VAR_3 ) == VAR_1 ) { d . METHOD_1 ( ) ; return ; } } } if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ; } 
protected void run ( ) throws TYPE_1 { try { METHOD_1 ( ) ; final TYPE_2 VAR_1 = factory . create ( in , out ) ; VAR_1 . METHOD_2 ( format ) ; if ( ( query ) != null ) { VAR_1 . METHOD_3 ( query ) ; } else { VAR_1 . run ( ) ; } } catch ( TYPE_3 err ) { throw new TYPE_4 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; } } 
public TYPE_1 < TYPE_2 > apply ( TYPE_3 VAR_1 ) throws TYPE_4 , com.google.gwtorm.server.OrmException { try { TYPE_1 < TYPE_2 > r = TYPE_1 . METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getChange ( ) . getProject ( ) , VAR_3 ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { r . METHOD_5 ( TYPE_5 . METHOD_6 ( INT_1 , VAR_4 ) ) ; } return r ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( e . getMessage ( ) ) ; } } 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , final TYPE_1 value , TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 < TYPE_1 > type = ( ( TYPE_3 < TYPE_1 > ) ( value . METHOD_3 ( ) ) ) ; final TYPE_4 < TYPE_1 > VAR_2 = METHOD_4 ( name , type , VAR_1 ) ; METHOD_5 ( VAR_2 , new TYPE_5 ( ) { public void run ( ) { VAR_2 . set ( value ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin , VAR_2 ) ; METHOD_4 ( admin ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 , VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( admin , VAR_7 , VAR_8 , VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_8 ( VAR_11 ) . METHOD_8 ( VAR_12 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 p = TYPE_3 . get ( VAR_1 ) ; if ( ! ( TYPE_4 . METHOD_2 ( p ) ) ) { throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } java.lang.String VAR_2 = new java.lang.String ( TYPE_4 . METHOD_3 ( p ) , VAR_3 ) ; return new TYPE_1 ( new TYPE_1 . Id ( id , 0 ) , VAR_2 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws TYPE_3 { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_3 , VAR_4 , VAR_2 . getProject ( ) . getName ( ) ) ) ; } } 
void METHOD_1 ( final TYPE_1 . Account result ) { VAR_1 . METHOD_2 ( false ) ; final TYPE_1 . Account me = TYPE_2 . METHOD_3 ( ) ; me . METHOD_4 ( result . METHOD_5 ( ) ) ; me . METHOD_6 ( result . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . display ( me ) ; } } 
protected boolean METHOD_1 ( ) { if ( ( VAR_1 . length ( ) ) == 0 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; return false ; } if ( VAR_3 . isEmpty ( ) ) { VAR_2 . info ( STRING_2 ) ; return false ; } if ( ( ( ( VAR_3 . size ( ) ) == 1 ) && ( ( VAR_4 . size ( ) ) == 1 ) ) && ( VAR_4 . contains ( VAR_5 ) ) ) { return false ; } return true ; } 
protected java.util.List < com.google.gerrit.reviewdb.client.Change > METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { java.lang.String ref = event . getRefName ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey ( event . METHOD_2 ( ) ) ; if ( ref . equals ( VAR_1 ) ) { return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( project ) ) ; } else { return com.google.gerrit.server.query.change.ChangeData . METHOD_3 ( VAR_2 . get ( ) . METHOD_5 ( new TYPE_2 . NameKey ( project , ref ) ) ) ; } } 
public int METHOD_1 ( TYPE_1 a , TYPE_1 b ) { int VAR_1 = TYPE_2 . METHOD_2 ( a . name ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ; if ( VAR_1 != 0 ) { return VAR_1 ; } return TYPE_2 . METHOD_2 ( a . id ) . METHOD_3 ( TYPE_2 . METHOD_2 ( b . name ) ) ; } 
protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 id , java.lang.String ref ) throws java.lang.Exception { TYPE_3 . ProjectConfig cfg = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ; TYPE_1 VAR_3 = TYPE_4 . METHOD_1 ( cfg , VAR_1 , id , ref ) ; METHOD_4 ( project , cfg ) ; return VAR_3 ; } 
public void METHOD_1 ( ) { final TYPE_1 a = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_1 b = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ; final TYPE_1 c = TYPE_2 . METHOD_2 ( STRING_1 , STRING_4 ) ; assertEquals ( STRING_5 , TYPE_3 . METHOD_3 ( a , b ) . toString ( ) ) ; assertEquals ( STRING_6 , TYPE_3 . METHOD_3 ( a , b , c ) . toString ( ) ) ; } 
private static byte [ ] METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { byte [ ] data = new byte [ ( ( int ) ( VAR_2 . METHOD_2 ( ) ) ) ] ; TYPE_3 in = VAR_1 . METHOD_3 ( VAR_2 ) ; try { TYPE_4 . METHOD_4 ( in , data , 0 , data . length ) ; } finally { in . close ( ) ; } return data ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , org.eclipse.jgit.lib.Repository repo , TYPE_2 VAR_3 , com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.ObjectId VAR_4 ) throws java.io.IOException { try ( TYPE_3 VAR_5 = VAR_3 . METHOD_2 ( ) ) { return ( ( TYPE_1 ) ( VAR_2 ) ) . format ( project . get ( ) , TYPE_4 . METHOD_3 ( repo , VAR_4 ) , METHOD_4 ( VAR_1 ) , VAR_5 ) ; } } 
protected void METHOD_1 ( final TYPE_1 result ) { if ( ( ( VAR_1 == null ) && ( ( VAR_2 ) == null ) ) || ( ( VAR_1 != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) ) { display ( result ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return TYPE_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( db . METHOD_5 ( ) . METHOD_6 ( notes . getChangeId ( ) ) , VAR_2 ) ) ; } notes . METHOD_7 ( ) ; java.util.List < TYPE_1 > VAR_3 = TYPE_4 . METHOD_8 ( ) ; VAR_3 . METHOD_9 ( notes . METHOD_10 ( ) . values ( ) ) ; return TYPE_3 . METHOD_3 ( VAR_3 ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) { java.util.List < TYPE_1 > result = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( TYPE_1 c : VAR_1 ) { if ( TYPE_3 . METHOD_2 ( c ) . equals ( psId ) ) { result . add ( c ) ; } } return TYPE_4 . METHOD_3 ( result ) ; } 
private static java.lang.String METHOD_1 ( byte [ ] VAR_1 ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ( ( VAR_1 . length ) * 2 ) ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { byte b = VAR_1 [ i ] ; r . append ( VAR_2 [ ( ( b > > > INT_1 ) & INT_2 ) ] ) ; r . append ( VAR_2 [ ( b & INT_2 ) ] ) ; } return r . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; assertEquals ( VAR_1 class , out . METHOD_4 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( in . METHOD_5 ( 1 ) ) , in . METHOD_5 ( 0 ) ) , out . METHOD_6 ( ) ) ; } 
public java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.Set < TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( ) ; VAR_2 . add ( VAR_3 . create ( STRING_1 , VAR_4 ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_2 , VAR_5 ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_3 , VAR_5 ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_4 , VAR_1 . project ) ) ; VAR_2 . add ( VAR_3 . create ( STRING_5 , VAR_6 ) ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null ) ; java.util.List < TYPE_3 > m = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ; com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( TYPE_5 . of ( STRING_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_2 . METHOD_2 ( ps . getId ( ) . getParentKey ( ) . equals ( cd . getId ( ) ) , STRING_1 , ps . getId ( ) , cd . getId ( ) ) ; return this ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 ) throws java.io.IOException { java.util.List < TYPE_1 > VAR_2 = new TYPE_2 < > ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 , VAR_5 ) ) ; } return VAR_2 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 . ProjectConfig project , java.lang.String VAR_1 , int VAR_2 , int VAR_3 , TYPE_3 group , java.lang.String ref ) { TYPE_1 VAR_4 = TYPE_4 . METHOD_2 ( project , group ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; return TYPE_4 . METHOD_5 ( project , VAR_1 , VAR_4 , ref ) ; } 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema = TYPE_4 . schema ( VAR_2 ) ; int VAR_3 ; if ( ( schema != null ) && ( schema . METHOD_2 ( VAR_4 ) ) ) { VAR_3 = ( VAR_5 . METHOD_3 ( ) ) - INT_1 ; } else { VAR_3 = VAR_5 . METHOD_4 ( ) ; } return METHOD_1 ( schema , branch , VAR_1 , VAR_3 ) ; } 
private void format ( TYPE_1 out ) throws java.io.IOException { out . METHOD_1 ( TYPE_2 . METHOD_2 ( commit ) . METHOD_3 ( VAR_1 ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( out ) ; VAR_2 . METHOD_4 ( repo ) ; VAR_2 . format ( base . METHOD_5 ( ) , commit . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_1 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_1 ) ) ; } 
protected void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = new TYPE_1 ( repo ) ; if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( new TYPE_2 ( repo , VAR_2 , db ) ) ; } VAR_1 . METHOD_4 ( in , out , err ) ; } 
public int METHOD_1 ( TYPE_1 a , TYPE_1 b ) { return new TYPE_2 ( ) . append ( a . METHOD_2 ( ) , b . METHOD_2 ( ) ) . append ( b . METHOD_3 ( ) , a . METHOD_3 ( ) ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > p ; p = METHOD_2 ( STRING_1 ) ; assertEquals ( METHOD_2 ( STRING_2 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) ; p = METHOD_2 ( STRING_4 ) ; assertEquals ( METHOD_2 ( STRING_5 ) , TYPE_2 . METHOD_3 ( p , STRING_3 ) ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { if ( ( METHOD_2 ( ) ) && ( VAR_1 ) ) { VAR_2 . METHOD_3 ( change , ctx . METHOD_4 ( ) . getAccountId ( ) , VAR_3 , VAR_4 , VAR_5 , ctx . METHOD_5 ( ) ) ; } } 
public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ; TYPE_2 . METHOD_2 ( change , STRING_1 , changeId ) ; TYPE_2 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < TYPE_3 > VAR_2 ) { if ( ! ( TYPE_4 . getAccountId ( ) . equals ( VAR_1 . getAccountId ( ) ) ) ) { VAR_2 . METHOD_2 ( new TYPE_5 ( ) ) ; return ; } run ( VAR_2 , new TYPE_6 < TYPE_3 > ( ) { public TYPE_3 run ( TYPE_7 . ReviewDb db ) throws TYPE_8 . OrmException { db . METHOD_3 ( ) . update ( java.util.Collections.singleton ( VAR_1 ) ) ; return VAR_3 ; } } ) ; } 
void METHOD_1 ( TYPE_1 e ) { e . METHOD_2 ( ) ; java.lang.String t = TYPE_2 . METHOD_3 ( psId , VAR_1 . path ( ) , VAR_1 . line ( ) ) ; if ( ! ( TYPE_3 . METHOD_4 ( ) ) ) { TYPE_3 . METHOD_5 ( t ) ; } else { TYPE_3 . display ( t ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; METHOD_4 ( ) . to ( VAR_3 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) ; TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) ; } 
private com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( TYPE_1 rsrc ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet VAR_1 = VAR_2 . get ( ) . patchSets ( ) . METHOD_2 ( rsrc . METHOD_3 ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet VAR_3 ) { VAR_3 . METHOD_4 ( false ) ; return VAR_3 ; } } ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { final java.util.Map < TYPE_1 . Id , TYPE_2 . Id > VAR_1 = new TYPE_3 < TYPE_1 . Id , TYPE_2 . Id > ( ) ; for ( TYPE_2 . Id VAR_2 : approvals ) { VAR_1 . put ( VAR_2 . getParentKey ( ) , VAR_2 ) ; } VAR_3 . METHOD_2 ( change , user . METHOD_3 ( ) , VAR_4 , VAR_1 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 e = new TYPE_1 ( VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_3 ( e ) . METHOD_4 ( VAR_3 ) . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_1 ) , TYPE_3 . METHOD_6 ( VAR_2 ) , TYPE_3 . METHOD_7 ( ) ) ; servlet . METHOD_8 ( VAR_4 , VAR_5 ) ; TYPE_2 . METHOD_9 ( VAR_5 ) . METHOD_10 ( VAR_6 , e . getMessage ( ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 b ) { if ( ( ( ( b . config ) != null ) && ( ( VAR_1 ) != null ) ) && ( ( VAR_2 ) != null ) ) { return new TYPE_1 ( b . view , b . config , VAR_1 , VAR_2 ) ; } return null ; } 
private TYPE_1 . Result METHOD_1 ( TYPE_2 . Result r , java.lang.String VAR_1 ) throws java.io.IOException , TYPE_3 { TYPE_2 VAR_2 = VAR_3 . create ( db , admin . METHOD_2 ( ) , STRING_1 , STRING_2 , VAR_1 , r . getChangeId ( ) ) ; return VAR_2 . to ( git , STRING_3 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( db , cd ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
private static java.lang.String METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String key , final java.lang.String VAR_2 ) { final int n = VAR_1 . METHOD_2 ( ( ( STRING_1 + key ) + STRING_2 ) ) ; return ( ( VAR_1 . METHOD_3 ( 0 , n ) ) + VAR_2 ) + ( VAR_1 . METHOD_3 ( ( ( n + INT_1 ) + ( key . length ( ) ) ) ) ) ; } 
private void METHOD_1 ( TYPE_1 cm ) { int VAR_1 = cm . METHOD_2 ( cm . METHOD_3 ( ) . METHOD_4 ( ) ) ; TYPE_2 VAR_2 = VAR_3 . METHOD_5 ( VAR_1 ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_6 ( ) ; if ( cm . METHOD_7 ( ) ) { } else { METHOD_8 ( VAR_4 , VAR_1 ) ; } } 
private void METHOD_1 ( TYPE_1 ctx ) { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; TYPE_3 . METHOD_4 ( change ) ; ctx . METHOD_1 ( ) ; } } 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; java.lang.String [ ] VAR_3 = VAR_1 . METHOD_2 ( STRING_2 ) ; for ( java.lang.String s : VAR_3 ) { if ( ! ( s . METHOD_3 ( ) . isEmpty ( ) ) ) { VAR_2 . append ( ( ( STRING_3 + s ) + STRING_4 ) ) ; } } return VAR_2 . toString ( ) ; } 
public TYPE_1 . PatchSet METHOD_1 ( ) { if ( ( currentPatchSetId ) != null ) { for ( int i = ( patchSets . size ( ) ) - 1 ; i >= 0 ; i -- ) { final TYPE_1 . PatchSet ps = patchSets . get ( i ) ; if ( ps . getId ( ) . equals ( currentPatchSetId ) ) { return ps ; } } } return null ; } 
private TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , boolean VAR_1 ) throws TYPE_2 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_2 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_1 ) ; } TYPE_1 . Result result = ( VAR_1 ) ? VAR_3 . METHOD_1 ( db , changeId ) : VAR_3 . METHOD_3 ( db , changeId ) ; if ( VAR_4 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_2 ) ; } return result ; } 
protected void run ( ) throws TYPE_1 { try { if ( VAR_1 . METHOD_1 ( ) ) { VAR_2 . METHOD_2 ( STRING_1 ) ; } else { VAR_2 . METHOD_2 ( STRING_2 ) ; } } catch ( TYPE_2 e ) { throw new TYPE_1 ( ( STRING_3 + ( e . getMessage ( ) ) ) ) ; } } 
private boolean add ( TYPE_1 VAR_1 , TYPE_2 w , TYPE_3 type ) throws com.google.gwtorm.server.OrmException { TYPE_4 user = VAR_2 . create ( args . db , w . getAccountId ( ) ) ; try { if ( METHOD_1 ( user , w . METHOD_2 ( ) ) ) { if ( w . METHOD_3 ( type ) ) { VAR_3 . add ( w . getAccountId ( ) ) ; } return true ; } } catch ( TYPE_5 e ) { } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo c = get ( changeId , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( METHOD_2 ( 2 ) ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_3 ( ) ) ) ) . METHOD_4 ( TYPE_3 . of ( METHOD_2 ( 2 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_2 ( 2 ) ) . VAR_4 ) . isEqualTo ( INT_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; if ( TYPE_4 . equals ( info . path ( ) ) ) { VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . append ( info . status ( ) ) ; } VAR_1 . METHOD_6 ( ) ; } 
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx . getChange ( ) ; TYPE_3 update = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ; change . METHOD_3 ( VAR_1 ) ; change . METHOD_4 ( ctx . METHOD_5 ( ) ) ; update . METHOD_3 ( VAR_1 ) ; METHOD_6 ( ctx , update ) ; return true ; } 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; } else { return notes . METHOD_5 ( ) . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( true ) ) ; METHOD_2 ( b , b . append ( false ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = VAR_2 . getName ( ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_3 ( VAR_4 , new TYPE_4 ( ( ( STRING_1 + ( VAR_7 ) ) + STRING_2 ) ) ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( VAR_5 ) ; VAR_2 . METHOD_6 ( false ) ; VAR_1 = true ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 notes = METHOD_3 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey name = notes . METHOD_4 ( ) ; TYPE_2 ctl = METHOD_5 ( notes ) ; ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_6 ( name ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_7 ( ctl , null ) . METHOD_8 ( ) ) . METHOD_9 ( TYPE_4 . METHOD_10 ( ( STRING_1 + name ) ) ) ; } 
private void METHOD_1 ( final TYPE_1 . NameKey branch ) { try { new TYPE_2 ( server , VAR_1 , branch ) . METHOD_2 ( ) ; } catch ( TYPE_3 e ) { VAR_2 . error ( ( ( STRING_1 + branch ) + STRING_2 ) , e ) ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , TYPE_2 VAR_2 , TYPE_3 VAR_3 , java.lang.String path , byte [ ] VAR_4 ) throws TYPE_4 , java.io.IOException { switch ( VAR_1 ) { case VAR_5 : VAR_2 . add ( new TYPE_5 ( path ) ) ; break ; case VAR_6 : case VAR_7 : VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) ; } VAR_2 . METHOD_3 ( ) ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { if ( ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) { return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; } throw new TYPE_3 ( rsrc . METHOD_2 ( ) . getProject ( ) . getName ( ) ) ; } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( ) . METHOD_3 ( this . METHOD_4 ( ) , VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( this . VAR_2 , VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_7 ( ) ) . METHOD_6 ( this . VAR_4 , VAR_5 ) . METHOD_5 ( this . VAR_6 , VAR_7 , TYPE_3 . METHOD_8 ( ) ) . METHOD_5 ( this . psId , VAR_1 . psId , TYPE_3 . METHOD_8 ( ) . METHOD_9 ( ) ) . result ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; if ( VAR_3 . METHOD_2 ( ) ) { org.eclipse.jgit.lib.ObjectId VAR_4 = METHOD_3 ( ) ; if ( VAR_4 != null ) { VAR_2 . METHOD_4 ( VAR_4 ) ; } } VAR_1 . METHOD_2 ( VAR_2 ) ; } 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 s = VAR_1 . METHOD_2 ( ) ; final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( STRING_1 ) ; r . append ( VAR_1 . METHOD_3 ( ) ) ; r . append ( STRING_2 ) ; return r . toString ( ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 , STRING_6 , STRING_7 ) ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { if ( METHOD_2 ( VAR_1 ) ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ; VAR_4 . METHOD_4 ( ) . METHOD_5 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_5 . METHOD_6 ( new TYPE_1 ( VAR_2 ) ) , VAR_6 ) ; VAR_3 . METHOD_3 ( STRING_4 , VAR_1 ) ; } else { VAR_3 . error ( STRING_5 , VAR_1 ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String change = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ; java.lang.String patchSet = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ; java.lang.String path = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ; VAR_1 . METHOD_4 ( new TYPE_3 ( change , patchSet , path ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_7 , VAR_4 ) . to ( VAR_8 , VAR_9 ) . to ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_9 ( VAR_3 ) ; } 
public void run ( ) { VAR_1 . info ( STRING_1 ) ; if ( ( VAR_2 ) != null ) { try { TYPE_1 . delete ( VAR_3 ) ; } catch ( java.io.IOException err ) { VAR_1 . METHOD_1 ( ( STRING_2 + ( VAR_3 ) ) , err ) ; } } VAR_4 . METHOD_2 ( ) ; } 
private void METHOD_1 ( TYPE_1 p ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { METHOD_2 ( p ) ; java.lang.String topic = STRING_1 ; TYPE_3 . Result r = METHOD_3 ( ( STRING_2 + topic ) ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , topic ) ; r = METHOD_3 ( ( STRING_3 + topic ) ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , topic ) ; } 
void METHOD_1 ( final java.lang.String token ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ; try { TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_4 . METHOD_5 ( VAR_2 , VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) ; } catch ( TYPE_5 e ) { throw VAR_3 . reject ( e . getMessage ( ) ) ; } VAR_4 . put ( VAR_1 . METHOD_4 ( ) , VAR_1 . getValue ( ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { com.google.common.truth.Truth.assertThat ( VAR_2 . line ) . isEqualTo ( VAR_1 . line ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . message ) . isEqualTo ( VAR_1 . message ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEqualTo ( VAR_4 ) ; TYPE_3 . METHOD_2 ( VAR_5 , VAR_6 ) ; if ( ( VAR_7 ) == null ) { com.google.common.truth.Truth.assertThat ( VAR_8 ) . isEqualTo ( VAR_9 ) ; } } 
void METHOD_1 ( java.lang.String VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 , org.eclipse.jgit.lib.ObjectId VAR_3 ) { TYPE_1 ref = refs . get ( VAR_1 ) ; if ( ref != null ) { org.eclipse.jgit.lib.ObjectId VAR_4 = ref . get ( ) ; if ( VAR_4 . equals ( VAR_2 ) ) { ref . METHOD_2 ( VAR_4 , VAR_3 ) ; } } } 
private TYPE_1 . Result METHOD_1 ( TYPE_2 git , boolean VAR_1 ) throws java.io.IOException , TYPE_3 { TYPE_4 . METHOD_2 ( git , STRING_1 ) ; java.lang.String file = ( VAR_1 ) ? STRING_2 : ( STRING_3 + ( VAR_2 ) ) + STRING_4 ; TYPE_5 VAR_3 = VAR_4 . create ( db , admin . METHOD_3 ( ) , ( STRING_5 + ( VAR_2 ) ) , file , ( STRING_6 + ( VAR_2 ) ) ) ; ( VAR_2 ) ++ ; return VAR_3 . to ( git , STRING_7 ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( ) ) ; } 
private TYPE_1 METHOD_1 ( ) { java.lang.String type = METHOD_2 ( ) . METHOD_3 ( STRING_1 , null , STRING_2 ) ; if ( type == null ) { return VAR_1 ; } for ( TYPE_1 t : TYPE_2 . values ( ) ) { if ( type . METHOD_4 ( t . name ( ) ) ) { return t ; } } throw new TYPE_3 ( ( STRING_3 + type ) ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; VAR_1 = new TYPE_5 ( ) ; VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 . Id , TYPE_4 . Id > VAR_1 ) { TYPE_1 a = new TYPE_1 ( ) ; a . type = VAR_1 . getKey ( ) . get ( ) ; final TYPE_5 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . getKey ( ) ) ; VAR_4 = VAR_2 . METHOD_3 ( ) . getName ( ) ; a . value = TYPE_6 . toString ( VAR_1 . getValue ( ) . get ( ) ) ; return a ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; } } ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public TYPE_1 METHOD_1 ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { return VAR_2 . METHOD_4 ( db , VAR_3 , project , VAR_4 ) ; } catch ( java.lang.Exception e ) { VAR_5 . error ( ( STRING_1 + project ) , e ) ; return false ; } } 
public static void patch ( java.lang.String token , com.google.gerrit.reviewdb.client.PatchSet.Id base , TYPE_1 . Key id , int VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 . patch ( token , base , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) ; } 
private org.eclipse.jgit.revwalk.RevCommit commit ( TYPE_1 . ProjectConfig cfg ) throws java.io.IOException , TYPE_2 , TYPE_3 { TYPE_4 VAR_1 = new TYPE_4 ( VAR_2 , cfg . getProject ( ) . METHOD_1 ( ) , db ) ; util . METHOD_2 ( INT_1 ) ; util . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( STRING_1 ) ; cfg . commit ( VAR_1 ) ; TYPE_5 ref = db . METHOD_6 ( VAR_3 ) ; return util . METHOD_7 ( ) . parseCommit ( ref . METHOD_8 ( ) ) ; } 
private static TYPE_1 METHOD_1 ( ) { if ( TYPE_2 . METHOD_2 ( ) ) { return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; } else { TYPE_1 r = new TYPE_3 ( null ) ; r . METHOD_4 ( true ) ; return r ; } } 
void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( id . get ( ) , message , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( id ) ) ; METHOD_4 ( ) ; } } ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 req ) throws java.io.IOException { if ( TYPE_3 . METHOD_2 ( req . METHOD_3 ( ) ) . is ( VAR_1 ) ) { java.lang.String VAR_2 = TYPE_4 . toString ( req . METHOD_4 ( ) ) ; TYPE_5 VAR_3 = new TYPE_6 ( ) . METHOD_5 ( VAR_4 class , new TYPE_7 ( ) ) . METHOD_5 ( VAR_5 class , new TYPE_8 ( ) ) . create ( ) ; return VAR_3 . METHOD_6 ( VAR_2 , VAR_4 class ) ; } return null ; } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; if ( VAR_2 . METHOD_6 ( TYPE_3 ) ) { return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; } else { return VAR_2 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ; } 
public static < TYPE_1 > void METHOD_1 ( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . Key < TYPE_5 < TYPE_1 > > key = ( ( TYPE_4 . Key < TYPE_5 < TYPE_1 > > ) ( TYPE_6 . get ( TYPE_7 . METHOD_2 ( VAR_2 class , VAR_1 . METHOD_3 ( ) ) ) ) ) ; binder . bind ( key ) . METHOD_4 ( new TYPE_8 < TYPE_1 > ( VAR_1 ) ) . in ( VAR_3 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( TYPE_3 . METHOD_2 ( getRefName ( ) , VAR_3 . METHOD_3 ( ) ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; } 
public static void METHOD_1 ( int id , java.lang.String msg , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . message ( TYPE_4 . METHOD_2 ( msg ) ) ; TYPE_4 . METHOD_3 ( id , STRING_1 ) . data ( input ) . METHOD_4 ( VAR_1 ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_1 . METHOD_2 ( ) ) { METHOD_4 ( view . METHOD_5 ( ) ) ; } view . METHOD_6 ( VAR_1 . METHOD_2 ( ) ) ; } 
private static boolean METHOD_1 ( TYPE_1 type ) { TYPE_1 t = type . METHOD_2 ( ) ; while ( ! ( VAR_1 class . getName ( ) . equals ( t . METHOD_3 ( ) ) ) ) { if ( ( TYPE_2 . METHOD_4 ( t ) . length ) > 0 ) { return true ; } t = type . METHOD_2 ( ) ; } return false ; } 
public void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { try { METHOD_2 ( req , rsp ) ; } catch ( java.lang.Exception e ) { METHOD_3 ( ) . log ( STRING_1 , e ) ; METHOD_4 ( rsp , null , null ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = TYPE_3 . METHOD_5 ( ) ; while ( VAR_2 . METHOD_6 ( ) ) { VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ; } return VAR_4 ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( new TYPE_1 ( VAR_2 , VAR_3 ) ) ; if ( VAR_4 ) { bind ( VAR_5 . String class ) . METHOD_3 ( VAR_6 class ) . METHOD_2 ( VAR_7 class . getName ( ) ) ; bind ( VAR_8 class ) . METHOD_4 ( VAR_9 class ) ; } } 
public TYPE_1 create ( java.lang.String VAR_1 ) { if ( METHOD_1 ( ) ) { try { VAR_2 . METHOD_2 ( VAR_2 . get ( ) , new TYPE_2 ( VAR_3 ) ) ; VAR_4 = METHOD_3 ( ) ; VAR_5 . info ( STRING_1 ) ; } catch ( java.lang.Exception e ) { VAR_5 . error ( ( STRING_2 + STRING_3 ) , e ) ; } } return VAR_2 . get ( ) . create ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , admin , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_2 ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { VAR_1 = java.util.Collections . METHOD_2 ( ) ; } else if ( ( VAR_2 ) != null ) { return VAR_2 . get ( c . currentPatchSetId ( ) ) ; } else { VAR_1 = TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( db , METHOD_5 ( ) , c . currentPatchSetId ( ) ) ) ; } } return VAR_1 ; } 
public com.google.gerrit.reviewdb.client.Account METHOD_1 ( final java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > r = METHOD_2 ( VAR_1 ) ; return ( r . size ( ) ) == 1 ? VAR_2 . get ( r . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) : null ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 r = METHOD_2 ( ( ( STRING_1 + ( VAR_1 . get ( ) ) ) + STRING_2 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_4 ( r ) ; org.junit.Assert . METHOD_5 ( ( ( VAR_3 . size ( ) ) == 1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ; cfg = new TYPE_3 ( ) ; cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) ; VAR_2 = new TYPE_4 ( VAR_1 , cfg ) ; VAR_2 . METHOD_8 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { switch ( TYPE_2 . get ( ) ) { case VAR_1 : METHOD_2 ( true ) ; METHOD_3 ( true ) ; break ; case VAR_2 : METHOD_2 ( true ) ; METHOD_3 ( false ) ; break ; case VAR_3 : case VAR_4 : default : break ; } return this ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . create ( VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_3 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_4 . of ( db ) ; } } ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_1 . OrmException { if ( cd . METHOD_2 ( user ) ) { return true ; } try { TYPE_2 . Change c = cd . change ( db ) ; if ( ( c != null ) && ( VAR_1 . METHOD_3 ( c , user ) . METHOD_4 ( ) ) ) { cd . METHOD_5 ( user ) ; return true ; } else { return false ; } } catch ( TYPE_3 e ) { return false ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 rsrc ) throws TYPE_4 { java.util.Map < com.google.gerrit.reviewdb.client.Project.NameKey , TYPE_2 > VAR_1 = new TYPE_5 < > ( ) ; for ( TYPE_2 ps : rsrc . METHOD_2 ( ) . METHOD_1 ( ) ) { VAR_1 . put ( ps . getProject ( ) . METHOD_3 ( ) , ps ) ; } VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 . user ( user ) . METHOD_6 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) ) ; return VAR_1 . values ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( ) ; TYPE_2 u = util . user ( VAR_1 , VAR_3 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) { VAR_2 . METHOD_4 ( true ) ; } else if ( ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_5 ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( ) ) ) { VAR_2 . METHOD_4 ( false ) ; } } 
public void METHOD_1 ( ) { final long VAR_1 = INT_1 ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; assertEquals ( ( STRING_1 + VAR_1 ) , VAR_2 . toString ( ) ) ; final TYPE_1 VAR_3 = new TYPE_1 ( 0 ) ; VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) ; assertEquals ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ; org.junit.Assert.assertEquals ( 1 , VAR_2 . size ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( project . get ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , VAR_3 ) ; try { if ( VAR_2 . METHOD_3 ( ) ) { return VAR_2 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . branch = VAR_1 ; VAR_2 = STRING_1 ; in . project = project . get ( ) ; VAR_3 = true ; VAR_4 . METHOD_2 ( VAR_5 class ) ; TYPE_2 . ChangeInfo info = VAR_6 . changes ( ) . create ( in ) . get ( ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { VAR_1 . METHOD_2 ( info . branch ( ) ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_3 . query ( info . METHOD_5 ( ) , info . status ( ) , info . branch ( ) , info . topic ( ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_8 ( STRING_2 , VAR_2 ) . to ( VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_9 ( VAR_10 ) . METHOD_9 ( VAR_11 ) . METHOD_10 ( VAR_12 ) . METHOD_10 ( VAR_3 ) ; } 
private static void codemirror ( final java.lang.String token , final TYPE_1 base , final TYPE_2 . Key id , final TYPE_3 VAR_1 , final int line ) { TYPE_4 . METHOD_1 ( new TYPE_5 ( token ) { public void onSuccess ( ) { TYPE_6 . display ( token , new TYPE_7 ( base , TYPE_1 . patchSet ( id . getParentKey ( ) ) , id . get ( ) , VAR_1 , line ) ) ; } } ) ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( new TYPE_3 ( ) ) ; modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ; modules.add ( new TYPE_5 ( ) ) ; return VAR_1 . METHOD_3 ( modules ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( false ) ; TYPE_2 . get ( ) . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( ) { for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_3 . METHOD_6 ( ) ; } } } ) ; } 
public java.lang.String toString ( ) { if ( METHOD_1 ( ) ) { return ( ( ( ( ( STRING_1 + ( error ) ) + STRING_2 ) + ( VAR_1 ) ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ; } else { return ( ( ( STRING_5 + ( VAR_3 ) ) + STRING_6 ) + ( VAR_4 ) ) + STRING_4 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_3 ( repo ) ) ; java.lang.String key = change . getKey ( ) . get ( ) ; METHOD_4 ( STRING_2 ) ; for ( int i = 0 ; i <= INT_1 ; i ++ ) { java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ; METHOD_4 ( VAR_1 , change ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 n = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ; METHOD_5 ( VAR_1 , n ) ; assertEquals ( ( STRING_4 + ( ( STRING_5 + STRING_6 ) + STRING_7 ) ) , n . METHOD_6 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( METHOD_7 ( ) , getRevision ( ) , METHOD_8 ( ) ) ) ; VAR_1 . METHOD_9 ( TYPE_5 . METHOD_4 ( ) ) ; return java.util.Collections . METHOD_10 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { VAR_1 . add ( METHOD_2 ( VAR_2 , admin , STRING_1 , 1 ) ) ; TYPE_1 VAR_3 = user ( VAR_4 ) ; TYPE_1 VAR_5 = user ( VAR_4 , admin ) ; METHOD_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) ; METHOD_5 ( STRING_3 , VAR_5 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( label . getName ( ) ) ; } org.junit.Assert.assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ; } 
public TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_2 VAR_1 ) { METHOD_2 ( ) ; VAR_2 = VAR_1 ; change = c ; try { METHOD_3 ( ) ; return TYPE_3 . create ( c , VAR_3 ) ; } finally { if ( ( rw ) != null ) { rw . METHOD_4 ( ) ; } if ( ( repo ) != null ) { repo . close ( ) ; } } } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_6 ctl = rsrc . METHOD_1 ( ) ; if ( ! ( ctl . METHOD_2 ( ) ) ) { VAR_1 . user ( user ) . METHOD_3 ( VAR_2 ) ; } VAR_3 . index ( db . get ( ) , rsrc . getChange ( ) ) ; return TYPE_1 . METHOD_4 ( ) ; } 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ; for ( final TYPE_1 p : result ) { r . add ( new TYPE_2 ( p ) ) ; } VAR_1 . METHOD_1 ( req , new TYPE_3 ( r ) ) ; } 
public TYPE_1 get ( java.lang.String VAR_1 ) { try { TYPE_2 VAR_2 = METHOD_1 ( VAR_1 ) ; if ( VAR_2 != null ) { TYPE_1 VAR_3 = new TYPE_1 ( config ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; return VAR_3 ; } else { return null ; } } catch ( java.io.IOException e ) { VAR_4 . error ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , e ) ; return null ; } } 
public TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > VAR_1 = new TYPE_2 < com.google.gerrit.reviewdb.client.PatchSet > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client.PatchSet input ) { try { return METHOD_2 ( ) . METHOD_3 ( input , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return false ; } } } ; return TYPE_3 . METHOD_4 ( patchSets ( ) ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; } 
private boolean METHOD_1 ( final TYPE_1 id ) { if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) { return METHOD_4 ( ) ; } if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) { return true ; } for ( final TYPE_2 t : VAR_1 ) { if ( t . METHOD_5 ( id ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 ) . to ( VAR_2 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_5 ( VAR_12 ) ; } 
private TYPE_1 < TYPE_2 > get ( java.lang.String p , TYPE_3 < TYPE_1 < TYPE_2 > > m ) { TYPE_1 < TYPE_2 > r = m . get ( p ) ; if ( r == null ) { r = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( ) ; } return r ; } 
private static java.lang.String METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_2 VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; if ( VAR_1 != null ) { switch ( VAR_1 ) { case VAR_2 : return STRING_1 ; case VAR_3 : case VAR_4 : return STRING_2 ; case VAR_5 : case VAR_6 : return STRING_3 ; default : return null ; } } } return null ; } 
private void METHOD_1 ( final TYPE_1 id , java.util.List < TYPE_2 > VAR_1 , final java.lang.String VAR_2 ) throws TYPE_3 { final java.lang.String message = ( ( id . name ( ) ) + STRING_1 ) + VAR_2 ; if ( VAR_3 ) { VAR_1 . add ( new TYPE_2 ( message , true ) ) ; throw new TYPE_3 ( STRING_2 , VAR_1 ) ; } else { VAR_1 . add ( new TYPE_2 ( ( STRING_3 + message ) , false ) ) ; } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , CHAR_1 , TYPE_3 . METHOD_3 ( ) ) { public void METHOD_4 ( final TYPE_4 event ) { event . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ) ; } } ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_2 . METHOD_2 ( revision . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; while ( VAR_2 . METHOD_5 ( ) ) { VAR_4 . add ( new TYPE_1 ( VAR_2 ) ) ; } return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = repo . commit ( ) . create ( ) ; org.eclipse.jgit.revwalk.RevCommit master = repo . commit ( ) . METHOD_2 ( VAR_1 ) . create ( ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_3 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_3 ( master ) ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 . getValue ( ) ) ; if ( VAR_3 . equals ( VAR_4 ) ) { VAR_1 . METHOD_2 ( VAR_5 ) ; } else if ( ( query ) == null ) { VAR_1 . run ( ) ; query = VAR_1 ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository repo ) { return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; } 
void METHOD_1 ( TYPE_1 result , java.lang.String VAR_1 , java.lang.String [ ] args ) { final TYPE_2 ctx = VAR_2 . get ( ) ; final java.lang.String VAR_3 = METHOD_2 ( ctx ) ; final long VAR_4 = METHOD_3 ( ctx ) ; final java.lang.String VAR_5 = METHOD_4 ( VAR_1 , args ) ; VAR_6 . METHOD_5 ( new TYPE_3 ( VAR_3 , METHOD_6 ( ctx ) , ( STRING_1 + VAR_5 ) , VAR_4 , TYPE_4 . METHOD_7 ( args ) , result ) ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) { if ( ( VAR_1 . size ( ) ) != 1 ) { throw new TYPE_4 ( STRING_1 ) ; } return new TYPE_5 < TYPE_2 > ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ; repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) ; org.junit.Assert.assertEquals ( ( ( STRING_4 + ( VAR_1 . name ( ) ) ) + STRING_5 ) , METHOD_3 ( STRING_6 , STRING_7 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) throws java.lang.Exception { TYPE_2 result = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_3 . METHOD_6 ( VAR_2 ) , result . METHOD_7 ( ) ) ; } 
public final TYPE_1 < TYPE_2 . Result > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Id id , TYPE_3 VAR_1 ) { return VAR_1 . submit ( new TYPE_4 < TYPE_2 . Result > ( ) { public TYPE_2 . Result METHOD_2 ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_3 ( ) ) { return METHOD_4 ( db , id ) ; } } } ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; } } ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; rpc ( VAR_8 class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( null , new TYPE_2 ( VAR_2 ) , null , null , null ) ; java.util.List < TYPE_3 > m = VAR_1 . METHOD_3 ( repo , c , VAR_3 ) ; com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_1 ) ; } 
void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( changeId . get ( ) , revision ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . get ( new TYPE_3 < TYPE_4 < TYPE_5 > > ( ) { public void onSuccess ( TYPE_4 < TYPE_5 > VAR_2 ) { VAR_2 . METHOD_4 ( STRING_1 ) ; METHOD_5 ( VAR_3 , VAR_2 ) ; } } ) ; } 
public TYPE_1 < TYPE_2 > delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId ( ) . toString ( ) ; try { if ( cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; commit ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( id ) ; commit ( VAR_2 ) ; } return TYPE_3 . METHOD_3 ( null ) ; } catch ( TYPE_4 e ) { throw new java.io.IOException ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) . add ( STRING_1 , STRING_2 ) . message ( STRING_3 ) . create ( ) ; java.lang.String VAR_2 = getChangeId ( VAR_1 ) ; org.eclipse.jgit.revwalk.RevCommit VAR_3 = METHOD_2 ( ) . add ( STRING_4 , STRING_5 ) . message ( STRING_6 ) . create ( ) ; java.lang.String VAR_4 = getChangeId ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_5 , STRING_7 , false ) ; METHOD_4 ( VAR_2 , VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_4 , VAR_2 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( 1 ) , 2 ) ; assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ; final TYPE_1 VAR_2 = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ; VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) ; assertEquals ( VAR_1 , VAR_2 ) ; } 
public com.google.gerrit.reviewdb.client . AccountGroup METHOD_1 ( final TYPE_1 . Id key ) { final TYPE_1 . NameKey name = new TYPE_1 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ; final com.google.gerrit.reviewdb.client . AccountGroup VAR_1 = new com.google.gerrit.reviewdb.client . AccountGroup ( name , key , null ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_2 ) + STRING_5 ) ) , METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ) ; } 
static boolean METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit a , org.eclipse.jgit.revwalk.RevCommit b ) { if ( ( a . METHOD_2 ( ) ) != ( b . METHOD_2 ( ) ) ) { return false ; } for ( int i = 0 ; i < ( a . METHOD_2 ( ) ) ; i ++ ) { if ( ( a . METHOD_3 ( i ) ) != ( b . METHOD_3 ( i ) ) ) { return false ; } } return true ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; if ( VAR_4 . METHOD_4 ( VAR_1 ) ) { VAR_3 . METHOD_5 ( STRING_2 , VAR_4 . METHOD_6 ( VAR_1 ) ) ; } METHOD_7 ( VAR_1 ) ; VAR_3 . close ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_3 = VAR_1 . METHOD_3 ( VAR_4 class ) ; VAR_5 = TYPE_3 . METHOD_4 ( VAR_1 ) ; VAR_6 = TYPE_3 . METHOD_5 ( VAR_1 ) ; VAR_7 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_8 class ) ) ; VAR_9 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_1 , VAR_10 class ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = table . METHOD_2 ( ) ; final int VAR_2 = table . METHOD_3 ( ) ; for ( int row = 0 ; row < VAR_2 ; row ++ ) { if ( ( METHOD_4 ( row ) ) != null ) { table . METHOD_5 ( row , VAR_3 ) ; } } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . add ( VAR_1 ) ; add ( VAR_2 ) ; VAR_1 . METHOD_2 ( ( STRING_1 + ( METHOD_3 ( ) . get ( ) ) ) ) ; display ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { TYPE_1 a = VAR_2 . get ( VAR_1 . getName ( ) ) ; if ( VAR_3 . contains ( a ) ) { VAR_2 . METHOD_1 ( a ) ; } else { a . METHOD_2 ( new java.util.ArrayList < TYPE_2 > ( ) ) ; } } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException { TYPE_1 < com.google.gerrit.reviewdb.client.Change > changes = null ; try { changes = db . changes ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException VAR_1 ) { } METHOD_4 ( changes ) ; db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null ) , new TYPE_6 ( null ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null , VAR_2 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_2 , STRING_3 ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_4 , STRING_5 ) ; assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) ; assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) ; assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) ; assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ; } 
protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( true ) ; VAR_1 = null ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) ; VAR_2 = null ; } for ( TYPE_1 VAR_3 : VAR_4 ) { VAR_3 . METHOD_4 ( ) ; } VAR_4 . METHOD_5 ( ) ; super . METHOD_1 ( ) ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 VAR_1 , org.eclipse.jgit.revwalk.RevCommit edit , com.google.gerrit.reviewdb.client.PatchSet VAR_2 ) throws TYPE_2 , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit VAR_3 = rw . parseCommit ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_2 . getRevision ( ) . get ( ) ) ) ; if ( VAR_3 . METHOD_3 ( ) . equals ( edit . METHOD_3 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return TYPE_3 . METHOD_4 ( rw , VAR_1 , VAR_3 , edit ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_5 VAR_4 = TYPE_6 . get ( VAR_1 ) ; TYPE_7 VAR_5 = VAR_4 . getProject ( ) . METHOD_4 ( ) ; if ( ! ( VAR_2 . METHOD_5 ( VAR_6 [ VAR_5 . METHOD_6 ( ) ] , VAR_7 ) ) ) { return VAR_1 . METHOD_7 ( ) ; } return VAR_8 ; } 
public void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { try { METHOD_2 ( req , rsp ) ; } catch ( java.lang.Exception e ) { METHOD_3 ( ) . log ( STRING_1 , e ) ; METHOD_4 ( rsp , false ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { return VAR_2 . values ( ) ; } else { java.util.ArrayList < TYPE_2 > plugins = new java.util.ArrayList < TYPE_2 > ( VAR_2 . values ( ) ) ; plugins . METHOD_2 ( VAR_3 . values ( ) ) ; return plugins ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 ) ; METHOD_4 ( STRING_5 , VAR_3 ) ; METHOD_4 ( STRING_6 , VAR_4 ) ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 me , TYPE_2 VAR_1 , org.eclipse.jgit.revwalk.RevCommit VAR_2 , org.eclipse.jgit.revwalk.RevCommit base , org.eclipse.jgit.lib.ObjectId VAR_3 ) throws java.io.IOException { TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( base ) ; VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( METHOD_7 ( me ) ) ; VAR_4 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ; return VAR_1 . insert ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ; } 
private void METHOD_1 ( com.google.gerrit.server.query.change.ChangeData change , boolean VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( db , change . change ( ) ) ; if ( VAR_1 ) { com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . isEmpty ( ) ; } else { com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) ) . METHOD_4 ( ) ; } METHOD_5 ( ( ( FLOAT_1 / ( VAR_4 ) ) / ( VAR_5 ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 user ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return VAR_2 ; } java.lang.String id = TYPE_3 . METHOD_3 ( user . METHOD_4 ( ) . METHOD_5 ( ) ) ; if ( id == null ) { return VAR_2 ; } try { return new TYPE_4 ( VAR_3 . get ( id ) ) ; } catch ( TYPE_5 e ) { VAR_4 . METHOD_6 ( java.lang.String.format ( STRING_1 , id ) , e ) ; return VAR_2 ; } } 
public void METHOD_1 ( ) { try { VAR_1 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_1 , e ) ; } try { VAR_3 . close ( true ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_2 , e ) ; } try { VAR_4 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_3 , e ) ; } } 
private void METHOD_1 ( ) { java.lang.String topic = VAR_1 . METHOD_2 ( ) ; TYPE_1 . topic ( change.getId ( ) . get ( ) , topic , METHOD_3 ( ) , new TYPE_2 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { VAR_2 = true ; TYPE_3 . display ( TYPE_4 . METHOD_4 ( change.getId ( ) ) ) ; METHOD_5 ( ) ; } public void METHOD_6 ( final TYPE_5 VAR_3 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_3 ) ; } } ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; int VAR_3 = TYPE_3 . METHOD_4 ( TYPE_2 . METHOD_2 ( VAR_4 ) , VAR_2 ) ; TYPE_4 VAR_5 = TYPE_2 . METHOD_5 ( VAR_3 , VAR_2 ) ; TYPE_5 VAR_6 = TYPE_6 . METHOD_1 ( ) . METHOD_6 ( new TYPE_7 ( VAR_5 , VAR_7 ) ) ; VAR_1 . METHOD_7 ( VAR_6 ) ; VAR_6 . close ( ) ; return TYPE_2 . METHOD_8 ( VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 cm ) { if ( cm . METHOD_2 ( ) ) { TYPE_2 VAR_1 = cm . METHOD_3 ( ) ; cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ; cm . METHOD_4 ( VAR_1 , VAR_4 , VAR_3 . METHOD_6 ( ) ) ; cm . METHOD_7 ( null ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ; com.google.gerrit.reviewdb.client.Change change = TYPE_3 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ; TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) ; return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { if ( ( VAR_1 . get ( ) ) == ( rsrc . METHOD_1 ( ) ) ) { throw new TYPE_6 ( STRING_1 ) ; } return VAR_2 . METHOD_2 ( rsrc . METHOD_1 ( ) ) ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1 . NameKey name ) { try { return VAR_1 . METHOD_1 ( name ) ; } catch ( TYPE_2 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } 
private void METHOD_1 ( TYPE_1 p ) throws java.io.IOException , TYPE_2 { java.lang.String url ; switch ( p ) { case VAR_1 : url = VAR_2 ; break ; case VAR_3 : url = admin . METHOD_2 ( ) ; break ; default : throw new TYPE_3 ( ( STRING_1 + p ) ) ; } git = TYPE_4 . METHOD_3 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String file ) { TYPE_2 < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ; return VAR_2 . isEmpty ( ) ? null : VAR_2 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; install ( TYPE_1 . METHOD_3 ( ) ) ; install ( new TYPE_2 ( ) ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) ; install ( new TYPE_3 ( ) ) ; } 
public final TYPE_1 METHOD_1 ( TYPE_2 key ) { if ( ( ( VAR_1 ) == null ) && ( ( VAR_2 ) != null ) ) { throw new TYPE_3 ( STRING_1 ) ; } else if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) == null ) ) { throw new TYPE_3 ( STRING_2 ) ; } return METHOD_1 ( key , 0 , true , ( ( VAR_1 ) != null ? new TYPE_4 < TYPE_5 > ( ) : null ) ) ; } 
private void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) { java.lang.String VAR_4 = METHOD_2 ( VAR_2 , VAR_3 , line ) ; VAR_1 . append ( ( ( ( ( STRING_1 + line ) + STRING_2 ) + VAR_4 ) + STRING_3 ) ) ; } 
private boolean METHOD_1 ( TYPE_1 commit ) throws java.io.IOException { try ( TYPE_2 VAR_1 = TYPE_1 . METHOD_2 ( rw . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( commit ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_2 : VAR_3 ) { if ( VAR_1 . METHOD_6 ( VAR_1 . parseCommit ( VAR_2 ) , VAR_1 . parseCommit ( commit ) ) ) { return true ; } } } return false ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( project . get ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; try { if ( VAR_2 . METHOD_3 ( ) ) { return VAR_2 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( STRING_2 ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) ; return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_4 ) . METHOD_1 ( ) ) ; } 
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , TYPE_2 > i : METHOD_1 ( ) ) { TYPE_3 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( id ) ; if ( VAR_1 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_1 . get ( ) ) ; } else { i . delete ( id ) ; } } METHOD_5 ( id . get ( ) ) ; TYPE_4 . METHOD_6 ( id ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 git = METHOD_2 ( ) ; TYPE_4 . Result change = METHOD_3 ( git , true ) ; TYPE_4 . Result VAR_1 = METHOD_3 ( git , true ) ; TYPE_4 . Result VAR_2 = METHOD_3 ( git , true ) ; METHOD_3 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_4 ( change ) ; METHOD_5 ( changes , VAR_1 , VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( ) { return TYPE_1 . create ( ) . set ( STRING_1 , false ) . set ( STRING_2 , 0 ) . set ( STRING_3 , FLOAT_1 ) . set ( STRING_4 , true ) . set ( STRING_5 , INT_1 ) . set ( STRING_6 , false ) . set ( STRING_7 , true ) . set ( STRING_8 , true ) . set ( STRING_9 , STRING_10 ) . set ( STRING_11 , TYPE_2 . METHOD_2 ( type ) ) ; } 
protected void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.ObjectId VAR_1 = getRevision ( ) ; if ( VAR_1 == null ) { return ; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( getChange ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ; VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_7 , VAR_8 ) ; METHOD_3 ( VAR_9 , VAR_10 ) ; VAR_11 = VAR_12 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_5 ) ) ; TYPE_6 . Change change = TYPE_7 . get ( VAR_1 ) ; TYPE_8 . NameKey name = change . METHOD_4 ( ) ; if ( ! ( VAR_2 . METHOD_5 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ) { return VAR_1 . METHOD_6 ( ) ; } return VAR_7 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
protected void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , TYPE_1 { final TYPE_2 s = ( ( TYPE_2 ) ( db ) ) ; final TYPE_3 e = new TYPE_3 ( s ) ; METHOD_2 ( db , s , e ) ; METHOD_3 ( db , s , e ) ; METHOD_4 ( db ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 , VAR_5 , VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . to ( VAR_3 ) ; } 
private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { try ( TYPE_3 VAR_2 = new TYPE_4 ( VAR_1 ) ; TYPE_3 in = TYPE_5 . METHOD_2 ( VAR_2 ) ) { return new TYPE_1 ( in ) ; } catch ( java.io.IOException e ) { throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; } catch ( TYPE_7 e ) { throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
public void METHOD_1 ( ) { final java.lang.String name = STRING_1 ; final java.lang.String value = STRING_2 ; final TYPE_1 < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( name , value ) ; org.junit.Assert . METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) ; org.junit.Assert . METHOD_3 ( value , VAR_1 . getValue ( ) ) ; org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; TYPE_4 in = new TYPE_4 ( ) ; VAR_1 = user . email ; TYPE_5 VAR_2 = VAR_3 . changes ( ) . id ( r . getChangeId ( ) ) ; VAR_2 . METHOD_1 ( in ) ; org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_2 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) , VAR_2 . edit ( ) ) , VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_1 class ) ; bind ( new TYPE_1 < java.util.Map < java.lang.String , TYPE_2 > > ( ) { } ) . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) . METHOD_5 ( this . VAR_3 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ) { TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( VAR_5 . get ( ) ) ) ; VAR_6 . set ( VAR_7 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_8 ) ) ; } } 
public static void METHOD_1 ( int id , java.lang.String user , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . METHOD_2 ( user ) ; TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( input , VAR_1 ) ; } 
private java.lang.String url ( TYPE_1 info ) { return info . METHOD_1 ( ) ? TYPE_2 . METHOD_2 ( base , VAR_1 , info . path ( ) ) : ( VAR_2 ) == ( VAR_3 ) ? TYPE_2 . METHOD_3 ( base , VAR_1 , info . path ( ) ) : TYPE_2 . METHOD_4 ( VAR_1 , info . path ( ) ) ; } 
private java.util.Map < TYPE_1 . Key , TYPE_1 . Id > METHOD_1 ( ) throws TYPE_2 . OrmException { final java.util.Map < TYPE_1 . Key , TYPE_1 . Id > r = new TYPE_3 < TYPE_1 . Key , TYPE_1 . Id > ( ) ; for ( TYPE_4 . Change c : db . changes ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { r . put ( c . getKey ( ) , c . getId ( ) ) ; } return r ; } 
private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > in ) { if ( in != null ) { java.util.Collections . METHOD_1 ( TYPE_3 . METHOD_2 ( in ) , new TYPE_4 < TYPE_2 > ( ) { public int METHOD_3 ( TYPE_2 a , TYPE_2 b ) { return a . METHOD_4 ( ) . METHOD_5 ( b . METHOD_4 ( ) ) ; } } ) ; } return in ; } 
private static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( ( VAR_2 . getChange ( ) . getStatus ( ) ) != ( VAR_3 ) ) { return false ; } for ( final TYPE_1 t : TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( ) ) { if ( ! ( VAR_2 . METHOD_4 ( t ) ) ) { return false ; } } return true ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > VAR_2 = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( getName ( ) . equals ( VAR_2 . getName ( ) ) ) && ( METHOD_2 ( ) . equals ( VAR_2 . METHOD_2 ( ) ) ) ; } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . METHOD_3 ( this ) ; db = VAR_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ( ( db ) instanceof TYPE_2 ) ) . METHOD_7 ( ) ; VAR_2 = ( ( TYPE_2 ) ( db ) ) . METHOD_8 ( ) ; VAR_3 = VAR_2 . METHOD_9 ( STRING_1 ) ; VAR_4 = VAR_2 . METHOD_9 ( STRING_2 ) ; VAR_5 = VAR_2 . METHOD_9 ( STRING_3 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( java.lang.String ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( STRING_2 ) ) ; METHOD_2 ( b , b . append ( STRING_3 ) ) ; assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_2 . Project project ) { TYPE_1 result = TYPE_3 . METHOD_2 ( VAR_1 , repo , project ) ; if ( result != ( VAR_2 ) ) { return result ; } result = TYPE_3 . METHOD_2 ( VAR_3 , repo , project ) ; if ( result != ( VAR_2 ) ) { return result ; } result = TYPE_3 . METHOD_2 ( VAR_4 , repo , project ) ; if ( result != ( VAR_2 ) ) { return result ; } return VAR_2 ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; try { TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( STRING_1 ) ; if ( VAR_3 . METHOD_4 ( ) ) { return new TYPE_1 ( VAR_3 . METHOD_5 ( 1 ) ) ; } } finally { VAR_2 . close ( ) ; } return null ; } catch ( TYPE_5 e ) { return null ; } } 
void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( project , branch , null , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) ; } 
protected Project . NameKey METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 , boolean VAR_3 , TYPE_1 VAR_4 ) throws TYPE_2 { TYPE_3 in = new TYPE_3 ( ) ; in . name = name ( VAR_1 ) ; VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null ; VAR_6 = VAR_4 ; VAR_7 = VAR_3 ; VAR_6 = VAR_4 ; return METHOD_1 ( in ) ; } 
public TYPE_1 . Result METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId , TYPE_1 VAR_1 ) throws TYPE_2 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_2 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_1 ) ; } TYPE_1 . Result result = VAR_3 . METHOD_1 ( db , changeId , VAR_1 ) ; if ( VAR_4 . METHOD_2 ( false ) ) { throw new java.io.IOException ( STRING_2 ) ; } return result ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , boolean edit ) { TYPE_1 VAR_5 = METHOD_2 ( VAR_1 ) ; VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) ; VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { java.util.Set < java.lang.String > VAR_1 = TYPE_2 . of ( TYPE_3 . getName ( ) , TYPE_4 . getName ( ) ) ; java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_2 = VAR_3 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( changeId ) ; if ( ( VAR_2 . size ( ) ) != 1 ) { throw new TYPE_5 ( changeId ) ; } return VAR_2 . get ( 0 ) . METHOD_4 ( ) ; } 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 ) { return METHOD_2 ( ) ; } if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { METHOD_4 ( ) ; return METHOD_2 ( ) ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_5 ( METHOD_6 ( ) ) ) { METHOD_1 ( repo ) ; VAR_1 = true ; } catch ( TYPE_2 | java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return METHOD_2 ( ) ; } 
protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . Factory VAR_1 , TYPE_3 rsrc , TYPE_4 input ) throws TYPE_5 , TYPE_6 { return VAR_2 . apply ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; cfg . METHOD_4 ( ) . METHOD_5 ( ) ; cfg . METHOD_4 ( ) . put ( VAR_3 . getName ( ) , VAR_3 ) ; METHOD_6 ( cfg ) ; } 
public com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( db ) ; if ( c == null ) { return null ; } for ( com.google.gerrit.reviewdb.client.PatchSet p : METHOD_2 ( db ) ) { if ( p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) { VAR_1 = p ; return p ; } } } return VAR_1 ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) { VAR_1 = new TYPE_1 ( false , TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) ; } else { VAR_1 = new TYPE_1 ( false ) ; } } } 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { return TYPE_5 . apply ( VAR_1 . METHOD_1 ( s ) . format ( change ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } 
private TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String , java.lang.String > VAR_1 = new TYPE_1 < java.lang.String , java.lang.String > ( ) ; VAR_1 . put ( STRING_1 , VAR_2 class . getName ( ) ) ; VAR_1 . put ( STRING_2 , STRING_3 ) ; VAR_1 . put ( STRING_4 , STRING_5 ) ; return VAR_1 ; } 
public java.lang.String METHOD_1 ( ) { if ( ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } 
protected java.lang.String METHOD_1 ( ) { if ( ( ( change ) != null ) && ( ( METHOD_2 ( ) ) != null ) ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } 
public static void METHOD_1 ( final com.google.gerrit.reviewdb.server.ReviewDb db , final com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { final java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > approvals = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval a : approvals ) { a . METHOD_5 ( change ) ; } db . METHOD_2 ( ) . update ( approvals ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) . METHOD_2 ( VAR_1 class , VAR_2 class ) . METHOD_3 ( VAR_3 . Factory class ) ) ; install ( new TYPE_1 ( ) . METHOD_2 ( VAR_4 class , VAR_5 class ) . METHOD_3 ( VAR_6 . Factory class ) ) ; install ( new TYPE_2 ( VAR_7 ) ) ; if ( ( VAR_8 ) == null ) { install ( new TYPE_3 ( ) ) ; } else { install ( new TYPE_4 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 r ) throws TYPE_3 { try { TYPE_4 VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_2 ( r . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( r . METHOD_5 ( ) ) ; return VAR_1 . apply ( change ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 , VAR_3 ) ; METHOD_4 ( STRING_5 , VAR_4 ) ; METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ; } 
public boolean METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { if ( ( ( VAR_3 ) instanceof TYPE_1 ) && ( VAR_4 . METHOD_2 ( false , true ) ) ) { ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_1 ( ) ; } VAR_5 . METHOD_3 ( this ) ; VAR_5 . METHOD_4 ( ) ; return true ; } else { return false ; } } 
private void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( new TYPE_3 ( ) { public java.lang.String METHOD_5 ( TYPE_4 VAR_3 ) { return VAR_1 ; } public void METHOD_6 ( TYPE_4 VAR_3 , java.lang.String token ) { } } ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws java.io.IOException { byte [ ] VAR_3 = new TYPE_2 ( ) . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( VAR_1 ) , TYPE_3 . name ( ) ) ; return new TYPE_4 ( VAR_3 ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( TYPE_3 . name ( ) ) . METHOD_7 ( VAR_2 ) ; } 
protected void METHOD_1 ( ) { if ( ( db ) != null ) { try { final TYPE_1 ps = METHOD_2 ( ) ; if ( ps != null ) { for ( final TYPE_2 w : METHOD_3 ( ) ) { if ( w . METHOD_4 ( ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } } } catch ( TYPE_3 . OrmException err ) { } } } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
protected void run ( ) throws TYPE_1 { try { TYPE_2 input = TYPE_3 . METHOD_1 ( TYPE_4 . METHOD_2 ( VAR_1 , ObjectId : : getName ) ) ; VAR_2 = VAR_3 ; TYPE_5 r = VAR_4 . apply ( new TYPE_6 ( VAR_5 ) , input ) ; METHOD_3 ( VAR_6 , STRING_1 ) ; METHOD_3 ( VAR_7 , STRING_2 ) ; METHOD_3 ( VAR_8 , STRING_3 ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw METHOD_4 ( e ) ; } } 
public TYPE_1 < java.util.Set < java.lang.String > > apply ( TYPE_2 req ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_5 VAR_1 = req . METHOD_1 ( ) ; TYPE_6 notes = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.Set < java.lang.String > VAR_2 = notes . METHOD_4 ( ) ; if ( VAR_2 == null ) { VAR_2 = java.util.Collections . METHOD_5 ( ) ; } return TYPE_1 . METHOD_6 ( VAR_2 ) ; } 
public java.lang.String METHOD_1 ( final TYPE_1 . NameKey branch ) { final TYPE_2 r = new TYPE_2 ( ) ; TYPE_3 . p ( r , branch . getParentKey ( ) ) ; TYPE_3 . METHOD_2 ( r , branch ) ; TYPE_3 . a ( r , STRING_1 ) ; return ( VAR_1 ) + r ; } 
private static Account . Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Account a = VAR_1 . METHOD_2 ( db , VAR_2 ) ; if ( a == null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } return a . getId ( ) ; } 
private void METHOD_1 ( final java.util.Map < java.lang.String , TYPE_1 > VAR_1 , final java.lang.String name , final java.lang.String value ) { if ( ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) { VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ; } } 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ; TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_1 ( ) . values ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException , TYPE_2 { VAR_1 = new TYPE_3 ( ) ; TYPE_4 insert = METHOD_2 ( VAR_2 , VAR_1 ) ; try { VAR_3 . insert ( VAR_4 ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_1 . OrmException e ) { org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ; } METHOD_6 ( insert , 1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_3 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ; TYPE_2 u = METHOD_2 ( c , VAR_1 ) ; u . METHOD_3 ( c . METHOD_4 ( ) ) ; u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) ; u . commit ( ) ; return c ; } 
private TYPE_1 file ( final java.lang.String name ) throws java.io.IOException { final TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ; try { final TYPE_1 e = new TYPE_1 ( name ) ; e . METHOD_2 ( VAR_3 ) ; e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) ; VAR_1 . METHOD_5 ( ) ; return e ; } finally { VAR_1 . METHOD_6 ( ) ; } } 
protected java.util.List < org.eclipse.jgit.revwalk.RevCommit > METHOD_1 ( ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { rw . METHOD_3 ( rw . parseCommit ( repo . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ) ) ; return TYPE_1 . METHOD_6 ( rw ) ; } finally { rw . METHOD_7 ( ) ; } } finally { repo . close ( ) ; } } 
public void METHOD_1 ( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { if ( id != null ) { VAR_1 = db . METHOD_2 ( ) ; try { revision = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) ; METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; VAR_1 = null ; } } else { revision = null ; METHOD_3 ( ) ; } } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_3 , VAR_1 ) ) ; if ( VAR_2 != null ) { return TYPE_1 . of ( VAR_2 . getAccountId ( ) ) ; } return TYPE_1 . METHOD_4 ( ) ; } finally { db . close ( ) ; } } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { TYPE_4 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) { throw new TYPE_3 ( ) ; } java.lang.String url = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) , size ) ; if ( TYPE_5 . METHOD_4 ( url ) ) { throw new TYPE_3 ( ) ; } else { return TYPE_6 . METHOD_5 ( url ) ; } } 
public TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 t = this ; int VAR_2 = VAR_1 ; while ( ( t . METHOD_2 ( ) ) && ( 0 < VAR_1 ) ) { VAR_1 -- ; t = ( ( TYPE_2 ) ( t ) ) . VAR_3 . METHOD_3 ( ) ; } if ( t . METHOD_2 ( ) ) return ( ( TYPE_2 ) ( t ) ) . VAR_4 ; throw new TYPE_3 ( VAR_2 ) ; } 
public void index ( TYPE_1 VAR_1 ) throws java.io.IOException { for ( TYPE_2 < TYPE_1 , TYPE_3 > i : METHOD_1 ( ) ) { VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_4 < TYPE_3 > VAR_3 = VAR_2 . get ( VAR_1 ) ; if ( VAR_3 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_3 . get ( ) ) ; } else { i . delete ( VAR_1 ) ; } } METHOD_5 ( VAR_1 . get ( ) ) ; TYPE_5 . METHOD_6 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . getValue ( ) ) == null ) ) { throw new TYPE_3 ( STRING_1 ) ; } return TYPE_4 . METHOD_2 ( VAR_2 . METHOD_1 ( VAR_1 . getValue ( ) ) ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = id ; java.util.List < TYPE_8 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( VAR_3 . isEmpty ( ) ) { return TYPE_9 . METHOD_1 ( ) ; } else if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } else { throw new TYPE_10 ( ) ; } } 
private java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , TYPE_1 > METHOD_1 ( final TYPE_2 . Id VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , TYPE_1 > VAR_2 = TYPE_3 . METHOD_2 ( ) ; for ( final TYPE_1 m : db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) { VAR_2 . put ( m . getAccountId ( ) , m ) ; } return VAR_2 ; } 
public static java.lang.String METHOD_1 ( final TYPE_1 req ) { java.lang.String VAR_1 = req . METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( VAR_1 ) ) { return VAR_2 ; } else { return TYPE_3 . is ( CHAR_1 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit c ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 ) ; com.google.gerrit.reviewdb.client.PatchSet ps = METHOD_3 ( c ) ; if ( ps != null ) { try { METHOD_4 ( ps , VAR_1 ) ; return METHOD_5 ( ) . insert ( VAR_4 , VAR_1 . toString ( ) . METHOD_6 ( STRING_1 ) ) ; } catch ( TYPE_2 e ) { throw new java.io.IOException ( e ) ; } } return null ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 < TYPE_4 > VAR_3 = new TYPE_3 < > ( ) ; for ( final TYPE_5 b : VAR_4 ) { if ( b . ref ( ) . contains ( VAR_1 . METHOD_2 ( ) ) ) { VAR_3 . add ( new TYPE_4 ( b ) ) ; } } VAR_2 . METHOD_3 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , final TYPE_1 . Status status ) throws com.google.gwtorm.server.OrmException { return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . getStatus ( ) ) == status ; } } ) ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 = change . currentPatchSetId ( ) ; TYPE_1 ps = new TYPE_1 ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , ( VAR_1 != null ? ( VAR_1 . get ( ) ) + 1 : 1 ) ) ) ; ps . METHOD_2 ( STRING_1 ) ; change . METHOD_3 ( ps ) ; TYPE_2 . METHOD_4 ( change ) ; } 
void METHOD_1 ( java.lang.String a , java.lang.String b , java.lang.String VAR_1 ) throws java.lang.Exception { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ; if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) { org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ; } } 
private static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.eclipse.jgit.lib.ObjectId > VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) { return null ; } return TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < org.eclipse.jgit.lib.ObjectId , java.lang.String > ( ) { public java.lang.String apply ( org.eclipse.jgit.lib.ObjectId id ) { return id . getName ( ) ; } } ) ; } 
void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_3 . METHOD_4 ( ) ) ) + ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) ; VAR_5 . METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 * ( VAR_6 . METHOD_4 ( ) ) ) + ( VAR_6 . METHOD_5 ( ) . METHOD_6 ( ) ) ) , VAR_4 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_1 branch = db . METHOD_2 ( VAR_1 ) ; if ( branch != null ) { VAR_2 = VAR_3 . parseCommit ( branch . METHOD_3 ( ) ) ; base = TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_2 ) ; } if ( ( VAR_2 ) != null ) { VAR_4 = TYPE_2 . METHOD_4 ( db . METHOD_6 ( ) , VAR_2 ) ; } else { VAR_4 = TYPE_2 . METHOD_7 ( ) ; } } 
private boolean equals ( com.google.gerrit.reviewdb.client.PatchSet p , java.lang.String id ) { boolean VAR_1 = ( METHOD_1 ( ) ) == ( VAR_2 ) ; java.lang.String VAR_3 = ( ( p . getRevision ( ) ) != null ) ? p . getRevision ( ) . get ( ) : null ; return ( VAR_1 && ( id . equals ( VAR_3 ) ) ) || ( ( ( ! VAR_1 ) && ( VAR_3 != null ) ) && ( VAR_3 . METHOD_2 ( id ) ) ) ; } 
public void METHOD_1 ( java.lang.String ... VAR_1 ) throws TYPE_1 { try { VAR_2 . apply ( rsrc , TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_1 . add ( STRING_1 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_3 ( input ) ; METHOD_4 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_7 ( ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { TYPE_2 p = new TYPE_2 ( ) ; try ( TYPE_3 VAR_1 = repo . METHOD_2 ( ) ) { p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ; return p ; METHOD_6 ( VAR_2 ) ; } finally { VAR_1 . close ( ) ; METHOD_7 ( VAR_3 ) ; to = VAR_4 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String master = STRING_1 ; org.eclipse.jgit.lib.ObjectId VAR_1 = git . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) ; METHOD_5 ( master , STRING_3 , STRING_4 , STRING_5 ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; METHOD_7 ( VAR_3 , project , STRING_6 ) ; TYPE_1 . Result r = METHOD_5 ( STRING_7 , STRING_8 , STRING_9 , STRING_10 ) ; r . METHOD_8 ( ) ; r . METHOD_9 ( VAR_4 , null , admin ) ; METHOD_10 ( master , STRING_8 ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , TYPE_3 info , TYPE_4 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 , TYPE_5 < com.google.gerrit.reviewdb.client.Account.Id > VAR_3 ) throws com.google.gwtorm.server.OrmException { return METHOD_1 ( db , update , VAR_1 , change , ps . getId ( ) , ps . METHOD_2 ( ) , info . METHOD_3 ( ) . METHOD_4 ( ) , info . METHOD_5 ( ) . METHOD_4 ( ) , VAR_2 , VAR_3 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 user , TYPE_3 revision ) { return new TYPE_1 ( user . METHOD_2 ( ) . METHOD_3 ( null ) , revision . METHOD_4 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; } 
private com.google.gerrit.reviewdb.client.Account METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 , com.google.gwtorm.server.OrmException { try { return VAR_2 . get ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { switch ( VAR_3 ) { case VAR_4 : case VAR_5 : case VAR_6 : if ( ( VAR_7 . METHOD_4 ( VAR_1 ) ) == null ) { return METHOD_5 ( VAR_1 ) ; } break ; default : } throw e ; } } 
public void METHOD_1 ( ) { final int VAR_1 = 2 ; final int VAR_2 = INT_1 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ; METHOD_2 ( p , c . getParentKey ( ) ) ; METHOD_3 ( ( VAR_2 != ( c . METHOD_4 ( ) ) ) ) ; } 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( req , res , null , c ) ; TYPE_4 . METHOD_4 ( null , res , msg ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < byte [ ] > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ; for ( byte [ ] key : VAR_1 ) { byte [ ] VAR_2 = METHOD_2 ( key ) ; if ( VAR_2 != null ) { r . add ( new TYPE_2 ( key , VAR_2 ) ) ; } } return new TYPE_4 < TYPE_2 > ( r ) ; } 
protected void METHOD_1 ( java.lang.String changeId ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_1 . changes ( ) . id ( changeId ) . info ( ) . VAR_2 ) . METHOD_2 ( STRING_1 ) . isEqualTo ( true ) ; TYPE_1 rsrc = METHOD_3 ( changeId ) ; TYPE_2 VAR_3 = VAR_4 . METHOD_4 ( rsrc ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_5 ( ) ) . METHOD_2 ( STRING_2 ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . METHOD_7 ( ) ) . METHOD_2 ( STRING_3 ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( id . get ( ) , revision , METHOD_3 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_4 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) ; } public void METHOD_6 ( TYPE_6 VAR_2 ) { METHOD_7 ( true ) ; super . METHOD_6 ( VAR_2 ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , admin ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( admin ) . to ( VAR_4 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 a , com.google.gerrit.reviewdb.client.Change change ) { VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_3 = change . METHOD_5 ( ) ; VAR_4 = change . getStatus ( ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( new TYPE_3 ( ) ) ) . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_8 ( ) ; VAR_3 = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_1 , VAR_7 , VAR_8 ) ; VAR_3 . METHOD_9 ( ) ; VAR_2 . METHOD_10 ( ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; METHOD_3 ( res , VAR_2 ) ; METHOD_4 ( res ) ; try ( TYPE_3 out = TYPE_4 . METHOD_5 ( req , res ) ) { out . METHOD_6 ( message ) ; } } 
public void METHOD_1 ( final TYPE_1 event ) { final TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) == VAR_1 ) { VAR_3 = null ; METHOD_3 ( ) ; } else if ( ( VAR_4 ) == VAR_1 ) { VAR_3 = null ; VAR_5 = false ; METHOD_4 ( ) ; } } 
private void METHOD_1 ( TYPE_1 ctl , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client . PatchSetApproval a ) { java.lang.String VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ; TYPE_4 user = VAR_3 . create ( a . getAccountId ( ) ) ; TYPE_5 VAR_4 = ctl . METHOD_3 ( user ) . METHOD_4 ( VAR_2 ) ; a . METHOD_5 ( ( ( short ) ( VAR_4 . METHOD_6 ( a . getValue ( ) ) ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) ; TYPE_1 u = user ( ) ; METHOD_4 ( STRING_2 , u . METHOD_5 ( ) ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . METHOD_1 ( null , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_2 ( ) ) ) ; VAR_1 . METHOD_3 ( m , VAR_3 , VAR_4 . get ( 0 ) , VAR_5 . get ( 0 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 , change ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; b . append ( 1 ) ; final TYPE_2 VAR_1 = b . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 , b ) ; METHOD_5 ( ( VAR_1 instanceof TYPE_1 ) ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_6 ( ) ) ; } 
void METHOD_1 ( int VAR_1 ) { VAR_2 = VAR_1 - ( METHOD_2 ( ) . METHOD_3 ( ) ) ; for ( int i = 0 ; i < ( METHOD_2 ( ) . METHOD_4 ( ) ) ; i ++ ) { VAR_3 . get ( i ) . METHOD_1 ( VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < java.lang.String , org.eclipse.jgit.revwalk.RevCommit > VAR_1 = METHOD_2 ( VAR_2 ) ; TYPE_2 input = new TYPE_2 ( ) ; VAR_3 = VAR_2 ; project ( ) . METHOD_1 ( input ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; try { VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ; } catch ( TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } return VAR_1 ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . in ( VAR_2 class ) ; bind ( VAR_7 . Factory class ) . in ( VAR_5 ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; } 
protected java.util.Set < TYPE_1 . Id > METHOD_1 ( ) { final TYPE_2 r ; r = VAR_1 . get ( change . METHOD_2 ( ) . getParentKey ( ) ) ; return r != null ? r . METHOD_3 ( ) : VAR_2 . Collections < TYPE_1 . Id > METHOD_4 ( ) ; } 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( id ) ; try { TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ; } catch ( TYPE_4 | TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_2 , STRING_3 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_4 , STRING_5 , STRING_3 , STRING_6 ) ) ; } 
private boolean METHOD_1 ( final TYPE_1 commit ) { if ( ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ) { return false ; } for ( TYPE_1 VAR_2 : VAR_1 ) { METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 ) == null ) { return false ; } if ( ! ( VAR_4 . currentPatchSetId ( ) . equals ( VAR_3 ) ) ) { return false ; } } return true ; } 
public void set ( TYPE_1 base , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { this . base = base ; this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ; TYPE_2 VAR_5 = util . user ( VAR_3 , VAR_4 ) ; METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { java.lang.String ref = VAR_3 ; if ( ( repo . METHOD_3 ( ) . METHOD_4 ( ref ) ) != null ) { TYPE_1 VAR_4 = repo . METHOD_5 ( ref ) ; VAR_4 . METHOD_6 ( true ) ; com.google.common.truth.Truth . METHOD_7 ( ) . METHOD_8 ( ( STRING_1 + ref ) ) . METHOD_9 ( VAR_4 . delete ( ) ) . isEqualTo ( VAR_5 ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { try { if ( ( VAR_1 == 0 ) && ( ( VAR_2 ) != null ) ) { return METHOD_2 ( key ) ; } else { return METHOD_3 ( key ) ; } } catch ( TYPE_3 | com.google.gwtorm.server.OrmException e ) { java.lang.String msg = STRING_1 ; VAR_3 . METHOD_4 ( ( ( msg + STRING_2 ) + ( TYPE_4 . METHOD_5 ( key . METHOD_6 ( ) ) ) ) , e ) ; return TYPE_1 . METHOD_7 ( msg ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) , VAR_5 ) ; } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; if ( ( view ) != null ) { view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; } } } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { try ( TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ) { TYPE_3 . METHOD_4 ( VAR_3 ) ; } catch ( TYPE_4 e ) { throw METHOD_5 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; } catch ( java.io.IOException err ) { throw new TYPE_5 ( STRING_1 , err ) ; } } 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( repo ) == null ) { this . repo = VAR_1 . METHOD_2 ( project ) ; VAR_2 = true ; VAR_3 = repo . METHOD_3 ( ) ; VAR_4 = new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_4 ( ) ) ; commands = new TYPE_1 ( repo ) ; } } 
public java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , java.lang.String VAR_2 ) { try { java.lang.String VAR_3 = java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) ; byte [ ] VAR_4 = VAR_3 . METHOD_2 ( STRING_2 ) ; java.lang.String VAR_5 = TYPE_1 . METHOD_3 ( VAR_4 ) ; return VAR_6 . METHOD_4 ( VAR_5 ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( e ) ; } } 
private static int METHOD_1 ( TYPE_1 < ? > c ) { java.lang.String n = c . getName ( ) ; n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; while ( n . METHOD_4 ( STRING_1 ) ) n = n . METHOD_2 ( 1 ) ; return TYPE_2 . METHOD_5 ( n ) ; } 
private void METHOD_1 ( final TYPE_1 . ReviewDb c ) throws TYPE_2 . OrmException { final TYPE_1 . Project p ; p = new TYPE_1 . Project ( VAR_1 , VAR_2 ) ; p . METHOD_2 ( STRING_1 ) ; p . METHOD_3 ( false ) ; c . projects ( ) . insert ( java.util.Collections.singleton ( p ) ) ; } 
protected void METHOD_1 ( ) { table = new TYPE_1 ( VAR_1 ) { protected void METHOD_2 ( ) { super . METHOD_2 ( ) ; } public void METHOD_3 ( ) { super . METHOD_3 ( ) ; display ( ) ; } } ; super . METHOD_1 ( ) ; java.lang.String VAR_2 = table . METHOD_4 ( ) ; if ( VAR_2 != null ) { METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; } add ( table ) ; } 
protected static final TYPE_1 METHOD_1 ( java.lang.String path ) throws java.io.IOException { if ( path == null ) { return VAR_1 ; } TYPE_2 in = VAR_2 . ReviewDb class . METHOD_2 ( path ) ; if ( in == null ) { throw new TYPE_3 ( ( ( STRING_1 + path ) + STRING_2 ) ) ; } TYPE_1 VAR_3 ; try { VAR_3 = new TYPE_1 ( path , in ) ; } finally { in . close ( ) ; } return VAR_3 ; } 
protected static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 ... VAR_1 ) { return TYPE_4 . METHOD_2 ( TYPE_5 . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( new TYPE_6 < TYPE_3 , TYPE_2 > ( ) { public TYPE_2 apply ( TYPE_3 in ) { return VAR_2 ; } } ) ; } 
private void METHOD_1 ( TYPE_1 . HttpServletResponse res , TYPE_2 VAR_1 ) throws java.io.IOException { byte [ ] VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; res . METHOD_3 ( VAR_3 ) ; res . METHOD_4 ( STRING_1 ) ; res . METHOD_5 ( STRING_2 ) ; res . METHOD_6 ( VAR_2 . length ) ; TYPE_4 out = res . METHOD_7 ( ) ; try { out . METHOD_8 ( VAR_2 ) ; } finally { out . close ( ) ; } } 
private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSet patchSet ) { TYPE_1 p = new TYPE_1 ( ) ; p . revision = patchSet . getRevision ( ) . get ( ) ; VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ; return p ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 schema = METHOD_2 ( ) ; METHOD_3 ( schema . METHOD_4 ( ) ) ; assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) ; assertEquals ( 2 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final TYPE_2 ctx = VAR_2 . METHOD_2 ( ) ; try { TYPE_3 VAR_3 = new TYPE_4 ( ) . add ( VAR_1 ) ; try { ctx . METHOD_3 ( VAR_3 ) ; return true ; } catch ( TYPE_5 e ) { return false ; } } finally { try { ctx . close ( ) ; } catch ( TYPE_5 e ) { VAR_4 . METHOD_4 ( STRING_1 , e ) ; } } } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.lang.String base ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 . Project > > ( this ) { protected void METHOD_3 ( final java.util.List < TYPE_3 . Project > result ) { projects . display ( result ) ; projects . METHOD_4 ( ) ; } } ) ; } 
protected void METHOD_1 ( TYPE_1 p ) throws java.lang.Exception { java.lang.String url ; switch ( p ) { case VAR_1 : url = VAR_2 ; break ; case VAR_3 : url = admin . METHOD_2 ( server ) ; break ; default : throw new TYPE_2 ( ( STRING_1 + p ) ) ; } METHOD_3 ( TYPE_3 . METHOD_4 ( ( ( url + STRING_2 ) + ( project . get ( ) ) ) ) ) ; } 
public void close ( ) { VAR_1 = null ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( ) ; VAR_2 = null ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_1 ( ) ; VAR_3 = null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . isEqualTo ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ; TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . get ( ) ) . METHOD_7 ( ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 id , java.lang.String ref ) throws java.lang.Exception { TYPE_2 . ProjectConfig cfg = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ; TYPE_3 . METHOD_1 ( cfg , VAR_1 , id , ref ) ; METHOD_4 ( project , cfg ) ; } 
private static TYPE_1 METHOD_1 ( final TYPE_1 c , final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { if ( ! ( c . METHOD_2 ( db ) ) ) { throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ; } return c ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; TYPE_2 . ChangeInfo result = TYPE_3 . METHOD_3 ( query ( r . getChangeId ( ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_4 < ? > ) ( VAR_2 ) ) ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_4 ( ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository VAR_2 , TYPE_2 VAR_3 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 { TYPE_4 VAR_4 = METHOD_2 ( VAR_1 , VAR_3 ) ; TYPE_5 VAR_5 = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) ; METHOD_6 ( db , VAR_2 , VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 { TYPE_2 . Result r = METHOD_2 ( STRING_1 ) ; r . METHOD_3 ( ) ; TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_4 ( ) , VAR_3 , STRING_2 , STRING_3 , r . getChangeId ( ) ) ; r = VAR_1 . to ( git , ( STRING_4 + ( r . getChange ( ) . change ( ) . getId ( ) . get ( ) ) ) ) ; r . METHOD_3 ( ) ; } 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , TYPE_1 > VAR_2 ; try { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_5 ) . METHOD_3 ( ) ; VAR_2 = VAR_3 . METHOD_4 ( VAR_1 ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_2 . METHOD_5 ( ) ; } 
public void run ( ) { try { final TYPE_1 cm = VAR_1 . create ( result . change ) ; cm . METHOD_1 ( VAR_2 . getAccountId ( ) ) ; cm . METHOD_2 ( result . patchSet , result . info ) ; cm . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 = VAR_4 . getId ( ) ; VAR_5 . error ( ( STRING_1 + VAR_3 ) , e ) ; } } 
public TYPE_1 get ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } VAR_2 = METHOD_2 ( VAR_2 ) ; if ( VAR_2 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( VAR_1 ) ; return null ; } return VAR_2 ; } 
private java.lang.String METHOD_1 ( TYPE_1 cfg , java.lang.String VAR_1 ) { java.lang.String VAR_2 = cfg . METHOD_2 ( VAR_3 , null , VAR_4 ) ; if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) { VAR_2 = VAR_5 ; } VAR_2 = VAR_2 . METHOD_4 ( STRING_1 , VAR_1 ) ; return VAR_2 ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . get ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ; TYPE_4 VAR_7 = new TYPE_4 ( account . getId ( ) ) ; VAR_7 . METHOD_5 ( VAR_1 ) ; VAR_7 . METHOD_6 ( account ) ; VAR_7 . commit ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_1 = repo ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; METHOD_4 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_3 , project , STRING_6 ) ; TYPE_1 . Result r = METHOD_4 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ; r . METHOD_7 ( ) ; r . METHOD_8 ( VAR_4 , null , admin ) ; r . METHOD_9 ( TYPE_2 . getMessage ( ) ) ; } 
public static java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String url ) { if ( url != null ) { return TYPE_1 . of ( STRING_1 , VAR_1 , STRING_2 , url ) ; } else { return TYPE_1 . of ( STRING_1 , VAR_1 ) ; } } 
private static < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 r , int VAR_1 , TYPE_3 < TYPE_1 > VAR_2 ) throws java.lang.Exception { r . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( r . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( true ) ; return METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) ; } 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; TYPE_4 VAR_2 = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ; VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; java.util.List < TYPE_2 > result = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_2 > > ( ) { } . METHOD_6 ( ) ) ; org.junit.Assert . METHOD_7 ( result . isEmpty ( ) ) ; } 
private java.util.Map < org.eclipse.jgit.lib.ObjectId , TYPE_1 > METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 < org.eclipse.jgit.lib.ObjectId , TYPE_1 > ( ) ; for ( TYPE_1 r : repo . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . values ( ) ) { if ( TYPE_3 . METHOD_4 ( r . getName ( ) ) ) { VAR_1 . put ( r . METHOD_5 ( ) , r ) ; } } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , TYPE_2 . METHOD_2 ( STRING_3 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; } 
TYPE_1 METHOD_1 ( final TYPE_2 cm ) { if ( ! ( TYPE_3 . METHOD_2 ( ) ) ) { return METHOD_3 ( cm ) ; } return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_6 ( cm ) ; } } } ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 ctl = rsrc . METHOD_1 ( ) ; com.google.gerrit.reviewdb.client.PatchSet ps = VAR_1 . METHOD_2 ( db . get ( ) , rsrc . METHOD_3 ( ) ) ; com.google.gerrit.reviewdb.client.Project.NameKey project = ctl . getProject ( ) . METHOD_4 ( ) ; return VAR_2 . apply ( project , ps . getRevision ( ) . get ( ) ) ; } 
private void METHOD_1 ( TYPE_1 c ) { TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) != null ) , STRING_1 , c ) ; TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( METHOD_5 ( ) . getAccountId ( ) ) , ( STRING_2 + STRING_3 ) , METHOD_5 ( ) . getAccountId ( ) , c ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 != null ) { VAR_1 . close ( ) ; } for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 != VAR_1 ) { VAR_1 . close ( ) ; } } } 
private TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return new TYPE_2 ( ) ; } TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 ) ; switch ( VAR_2 ) { case VAR_4 : return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; default : throw new TYPE_6 ( ( STRING_1 + VAR_2 ) ) ; } } 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( TYPE_1 ctl , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { TYPE_2 id = TYPE_3 . METHOD_2 ( ctl . METHOD_3 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_3 = new com.google.gerrit.reviewdb.client . PatchSetApproval ( new TYPE_4 . Key ( VAR_1 , VAR_2 , id ) , ( ( short ) ( 0 ) ) , TYPE_5 . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( ctl . getChange ( ) ) ; return VAR_3 ; } 
private void set ( java.lang.String branch , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { final TYPE_1 u = VAR_1 . METHOD_1 ( ( ( VAR_2 ) + branch ) ) ; u . METHOD_2 ( true ) ; u . METHOD_3 ( id ) ; switch ( u . update ( ) ) { case VAR_3 : case VAR_4 : case VAR_5 : break ; default : METHOD_4 ( ( ( ( STRING_1 + branch ) + STRING_2 ) + ( u . METHOD_5 ( ) ) ) ) ; } } 
protected TYPE_1 METHOD_1 ( java.lang.String path , java.lang.String VAR_1 , int VAR_2 ) throws java.lang.Exception { TYPE_2 req = TYPE_2 . METHOD_2 ( ) ; req . METHOD_3 ( path ) ; if ( VAR_1 != null ) { req . METHOD_4 ( VAR_1 ) ; } TYPE_1 res = new TYPE_1 ( ) ; servlet . METHOD_5 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) ; return res ; } 
void METHOD_1 ( int VAR_1 ) { java.lang.String path = VAR_2 . get ( VAR_1 ) . path ( ) ; TYPE_1 . METHOD_2 ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_4 ( TYPE_6 VAR_4 ) { } } ) ; } 
private void METHOD_1 ( TYPE_1 w , java.lang.String id ) { java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( id ) ; VAR_1 . append ( STRING_3 ) ; VAR_1 . append ( STRING_4 ) ; VAR_1 . append ( STRING_5 ) ; VAR_1 . append ( STRING_6 ) ; w . METHOD_2 ( ) . METHOD_3 ( STRING_7 , VAR_1 . toString ( ) ) ; } 
private void METHOD_1 ( final TYPE_1 r , final TYPE_2 VAR_1 ) { for ( final TYPE_3 VAR_2 : TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( r . METHOD_4 ( VAR_2 . METHOD_5 ( ) . getId ( ) ) ) { METHOD_6 ( r , VAR_1 , VAR_2 ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) { com.google.gerrit.reviewdb.client.Change change = rsrc . getChange ( ) ; return new TYPE_3 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( ( ( ( ! ( change . METHOD_5 ( ) ) ) && ( ( change . getStatus ( ) ) != ( VAR_1 ) ) ) && ( METHOD_6 ( rsrc ) ) ) ) ; } 
private void METHOD_1 ( TYPE_1 update ) { java.lang.String msg = message . getMessage ( ) ; if ( TYPE_2 . METHOD_2 ( msg ) . METHOD_3 ( ) ) { update . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; return ; } if ( TYPE_3 . METHOD_2 ( msg ) . METHOD_3 ( ) ) { update . METHOD_1 ( VAR_3 ) ; VAR_2 . METHOD_1 ( VAR_3 ) ; } } 
public static void METHOD_1 ( java.lang.String query , int VAR_1 , java.lang.String VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) { TYPE_3 VAR_4 = TYPE_2 . METHOD_2 ( query ) ; if ( VAR_1 > 0 ) { VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) ; } TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ; if ( ! ( TYPE_4 . equals ( VAR_2 ) ) ) { VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) ; } VAR_4 . METHOD_5 ( VAR_3 ) ; } 
private java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_1 n ) { try { return VAR_1 . METHOD_2 ( db . get ( ) , VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) ; return java.util.Collections . METHOD_3 ( ) ; } } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String url , java.lang.String VAR_2 ) { if ( ( url == null ) || ( ! ( url . contains ( VAR_1 ) ) ) ) { return url ; } return url . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc . METHOD_1 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc . METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) ; return VAR_1 . apply ( project , commit . getId ( ) . getName ( ) ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 u = METHOD_2 ( ) ; if ( u instanceof TYPE_3 ) { return TYPE_4 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; } else if ( u instanceof TYPE_5 ) { return VAR_2 ; } throw new TYPE_6 ( ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( VAR_2 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; view . METHOD_3 ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; METHOD_5 ( VAR_4 ) ; TYPE_3 a ; TYPE_4 config ; TYPE_5 to ; TYPE_6 VAR_5 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo . commit ( ) . create ( ) ; repo . METHOD_2 ( 1 ) ; TYPE_1 VAR_1 = repo . METHOD_3 ( STRING_1 , commit ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 1 ) , METHOD_4 ( commit ) ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 ) + 2 ) , METHOD_4 ( VAR_1 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . info ( STRING_1 , VAR_1 ) ; } else if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { METHOD_5 ( VAR_1 ) ; VAR_2 . info ( STRING_2 , VAR_1 ) ; } else { VAR_2 . METHOD_6 ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , TYPE_5 . create ( 0 , 0 , INT_1 , INT_2 ) ) ; } 
private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 args , java.lang.String label , int VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) { return new TYPE_3 ( args , label , VAR_1 , null ) ; } java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( ) ; for ( com.google.gerrit.reviewdb.client.Account.Id a : VAR_2 ) { r . add ( new TYPE_3 ( args , label , VAR_1 , a ) ) ; } return METHOD_2 ( r ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ; int e = VAR_1 . METHOD_4 ( CHAR_1 ) ; TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) ; return TYPE_1 . create ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; } 
private TYPE_1 METHOD_1 ( boolean VAR_1 ) throws java.io.IOException { TYPE_2 r = VAR_2 . get ( ( VAR_1 ? METHOD_2 ( ) : METHOD_3 ( ) ) ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_4 ( ) ) ; return METHOD_5 ( ) . METHOD_6 ( r . METHOD_7 ( ) , VAR_4 class ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( 1 ) ; assertEquals ( STRING_1 , VAR_1 . toString ( ) ) ; final TYPE_1 VAR_2 = new TYPE_1 ( 0 ) ; VAR_2 . METHOD_2 ( VAR_1 . toString ( ) ) ; assertEquals ( VAR_1 , VAR_2 ) ; } 
private java.lang.String METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws java.io.IOException { TYPE_1 out = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( out ) ; VAR_3 . METHOD_2 ( repo ) ; VAR_3 . format ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return out . toString ( ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { java.lang.String name = ( ( info . METHOD_2 ( ) . name ( ) ) != null ) ? info . METHOD_2 ( ) . name ( ) : TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( name ) ; VAR_1 . METHOD_6 ( name ) ; } 
private java.lang.String METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { if ( ( VAR_1 . size ( ) ) <= 0 ) { return STRING_1 ; } java.lang.StringBuilder out = new java.lang.StringBuilder ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( out . length ( ) ) > 0 ) { out . append ( STRING_2 ) ; } out . append ( VAR_2 . getValue ( ) ) ; } return ( STRING_3 + STRING_4 ) + ( out . toString ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_5 ( VAR_3 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( git ) ; submit ( change . getChangeId ( ) ) ; METHOD_3 ( git , false ) ; com.google.common.truth.Truth.assertThat ( METHOD_4 ( ) . METHOD_5 ( 0 ) ) . isEqualTo ( change . METHOD_6 ( ) . METHOD_5 ( 0 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 . Change change , TYPE_3 user ) throws TYPE_4 { final TYPE_5 . NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( change.getId ( ) , e ) ; } } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) ; assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) ; } 
public static void submit ( int id , java.lang.String commit , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 in = TYPE_3 . create ( ) ; in . METHOD_1 ( true ) ; TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . data ( in ) . METHOD_3 ( VAR_1 ) ; } 
public void set ( com.google.gerrit.reviewdb.client.PatchSet.Id base , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , boolean VAR_6 ) { this . base = base ; this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; this . VAR_6 = VAR_6 ; } 
public static void METHOD_1 ( int id , java.lang.String path , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 in = TYPE_3 . create ( ) ; in . METHOD_2 ( path ) ; in . METHOD_3 ( VAR_1 ) ; TYPE_4 . edit ( id ) . METHOD_4 ( in , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_8 ( STRING_1 , VAR_2 ) . METHOD_9 ( VAR_3 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) ; } 
private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 args ) throws TYPE_4 { TYPE_5 user = args . METHOD_2 ( ) ; if ( user . METHOD_3 ( ) ) { return VAR_1 . get ( args . METHOD_2 ( ) . getAccountId ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) ; } return VAR_2 . Collections < TYPE_2 > METHOD_6 ( ) ; } 
private Account . Id METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 . OrmException { final TYPE_3 . Account a = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( a == null ) { throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } return a . getId ( ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { org.junit.Assert.assertEquals ( VAR_1 . ref , VAR_2 . ref ) ; if ( ( VAR_1 . revision ) != null ) { org.junit.Assert.assertEquals ( VAR_1 . revision , VAR_2 . revision ) ; } org.junit.Assert.assertEquals ( VAR_3 , TYPE_2 . METHOD_2 ( VAR_4 ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_3 ( ) ; VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( isEmpty ( ) ) { return ; } try { METHOD_2 ( ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { METHOD_3 ( ) ; } METHOD_4 ( ) ; TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_1 . METHOD_1 ( VAR_3 ) ; } finally { if ( ( VAR_2 ) != null ) { VAR_2 . close ( ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . close ( ) ; } } } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; } 
private static TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . patchSets ( ) ; TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > result = TYPE_4 . METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result . put ( ps . getId ( ) . get ( ) , ps ) ; } return result ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( ) ; if ( VAR_3 . METHOD_2 ( ) ) { TYPE_3 VAR_4 = new TYPE_3 ( ) ; org.eclipse.jgit.lib.ObjectId VAR_5 = METHOD_3 ( VAR_4 ) ; if ( VAR_5 != null ) { if ( VAR_4 . get ( ) ) { VAR_1 . METHOD_4 ( getRefName ( ) ) ; } else { VAR_2 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_2 ) ; } } } } 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { r . append ( STRING_1 ) ; r . append ( METHOD_5 ( ) ) ; r . append ( STRING_2 ) ; } return r . toString ( ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = TYPE_2 . METHOD_1 ( db ) . changes ( ) . get ( changeId ) ; TYPE_3 . METHOD_2 ( change , STRING_1 , changeId ) ; TYPE_3 . METHOD_3 ( change . getProject ( ) . equals ( project ) , ( STRING_2 + STRING_3 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , project , change ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( java.lang.StringBuilder ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_2 ) ) ) ; METHOD_2 ( b , b . append ( new java.lang.StringBuilder ( STRING_3 ) ) ) ; assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } 
void METHOD_1 ( ) { TYPE_1 c = null ; try { c = METHOD_2 ( ) ; TYPE_2 s = VAR_1 . METHOD_3 ( ) ; try { s . METHOD_4 ( STRING_1 ) ; } finally { s . close ( ) ; } VAR_2 = METHOD_5 ( ) ; } catch ( TYPE_3 e ) { VAR_3 . METHOD_6 ( ( STRING_2 + ( url ) ) , e ) ; c = close ( c ) ; } finally { METHOD_7 ( c ) ; } } 
public static void METHOD_1 ( final java.lang.String [ ] VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { VAR_3 . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( 1 ) ; } VAR_4 . METHOD_3 ( ( STRING_2 + VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , TYPE_3 . METHOD_4 ( ) ) ; java.util.Set < java.lang.String > VAR_1 = TYPE_4 . of ( ( STRING_1 + ( VAR_2 ) ) ) ; com.google.common.truth.Truth.assertThat ( TYPE_5 . METHOD_5 ( m ) ) . METHOD_6 ( VAR_1 ) ; } 
boolean add ( final TYPE_1 VAR_1 ) { synchronized ( this ) { if ( ( ! ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) { if ( VAR_4 . isEmpty ( ) ) { TYPE_2 . METHOD_1 ( ) . METHOD_2 ( this ) ; } VAR_4 . add ( VAR_1 ) ; return true ; } else { return false ; } } } 
public void METHOD_1 ( final boolean on ) { VAR_1 = on ; if ( VAR_1 ) { final TYPE_1 p = getValue ( ) . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( p . METHOD_4 ( ) ) ; } else { VAR_2 . METHOD_3 ( false ) ; } METHOD_5 ( update . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( STRING_4 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 , VAR_10 ) . METHOD_5 ( VAR_11 ) . METHOD_6 ( VAR_12 ) . METHOD_6 ( VAR_2 , VAR_3 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_2 , res . getStatus ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 , null , VAR_4 , VAR_5 ) ; com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . user ( ) ) . isEqualTo ( VAR_5 ) ; } 
public void METHOD_1 ( TYPE_1 t ) { try { VAR_1 [ ( ++ ( VAR_2 ) ) ] = t ; } catch ( TYPE_2 e ) { int VAR_3 = VAR_1 . length ; TYPE_1 [ ] VAR_4 = new TYPE_1 [ VAR_3 + INT_1 ] ; TYPE_3 . METHOD_2 ( VAR_1 , 0 , VAR_4 , 0 , VAR_3 ) ; VAR_1 = VAR_4 ; VAR_1 [ VAR_2 ] = t ; } } 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( ) . changes ( ) . get ( id ) ; if ( c != null ) { return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( java.util.Collections . METHOD_2 ( VAR_2 . create ( VAR_1 . get ( ) , c ) ) ) ; } else { return new TYPE_2 < com.google.gerrit.server.query.change.ChangeData > ( VAR_3 . Collections < com.google.gerrit.server.query.change.ChangeData > METHOD_3 ( ) ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ; if ( VAR_2 == null ) { VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ; } TYPE_4 VAR_3 = new TYPE_4 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_5 . getName ( ) ) . METHOD_3 ( ) ) ; return VAR_4 . get ( ) . METHOD_4 ( VAR_3 ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Change change = VAR_1 . change ( VAR_2 ) ; if ( change == null ) { return false ; } final TYPE_1 VAR_3 = VAR_4 . create ( VAR_2 , change . METHOD_2 ( ) ) ; return VAR_3 . METHOD_3 ( ) . contains ( VAR_5 ) ; } 
private TYPE_1 . Result METHOD_1 ( java.lang.String topic ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( topic ) . METHOD_3 ( ) ; return VAR_1 . to ( git , ( STRING_1 + topic ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = VAR_3 . create ( project ) ; try { TYPE_2 r = new TYPE_2 ( ) ; r . METHOD_2 ( VAR_2 ) ; VAR_4 = VAR_1 ; r . commit ( VAR_2 ) ; } finally { VAR_2 . close ( ) ; } } 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { this . rw = walk ; this . VAR_1 = walk . METHOD_2 ( ) ; try { revision = ( id != null ) ? walk . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { walk = null ; VAR_1 = null ; } } 
public void run ( ) { final com.google.gerrit.reviewdb.server.ReviewDb db ; try { db = VAR_1 . METHOD_1 ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { e . METHOD_2 ( ) ; return ; } try { for ( ; ; ) { final TYPE_1 VAR_2 = METHOD_3 ( ) ; if ( VAR_2 == null ) { break ; } METHOD_4 ( db , VAR_2 ) ; synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } } } finally { db . close ( ) ; } } 
private static java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 . ProjectConfig config ) { java.util.Set < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; for ( TYPE_3 VAR_2 : config . METHOD_2 ( ) ) { VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ; } return VAR_1 ; } 
private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ; try { TYPE_5 in = new TYPE_6 ( VAR_2 ) ; try { in = TYPE_7 . METHOD_3 ( in ) ; return new TYPE_1 ( in ) ; } finally { in . close ( ) ; } } catch ( java.io.IOException e ) { throw new TYPE_3 ( e ) ; } catch ( TYPE_8 e ) { throw new TYPE_3 ( e ) ; } } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.List < java.lang.String > add ) throws TYPE_2 { TYPE_3 in = new TYPE_3 ( ) ; in . add = add ; try { return VAR_1 . apply ( account , in ) ; } catch ( TYPE_4 | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( ) { if ( ( ! ( VAR_1 . isEmpty ( ) ) ) && ( ! ( METHOD_2 ( ) ) ) ) { for ( TYPE_1 < java.lang.String , TYPE_2 > VAR_2 : VAR_1 . METHOD_3 ( ) ) { VAR_2 . getValue ( ) . METHOD_4 ( projectName . get ( ) , VAR_2 . getKey ( ) , VAR_3 , VAR_4 ) ; } } } 
public void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) . METHOD_3 ( VAR_5 ) ; TYPE_2 p = new TYPE_2 ( ) ; TYPE_3 . METHOD_4 ( VAR_1 , p ) ; if ( ( p . value ) >= ( VAR_1 . length ) ) { VAR_6 = null ; return ; } VAR_6 = TYPE_4 . METHOD_5 ( METHOD_1 ( VAR_1 , p . value ) ) ; } 
public TYPE_1 . Change update ( TYPE_1 . Change c ) { c . METHOD_1 ( VAR_1 ) ; c . METHOD_2 ( true ) ; if ( ! ( VAR_2 . equals ( c . currentPatchSetId ( ) ) ) ) { try { c . METHOD_3 ( VAR_3 . get ( VAR_2 ) ) ; } catch ( TYPE_2 VAR_4 ) { VAR_5 . error ( ( STRING_1 + VAR_2 ) , VAR_4 ) ; } } TYPE_3 . METHOD_4 ( c ) ; return c ; } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return METHOD_2 ( VAR_1 ) ; } switch ( status . getStatus ( ) ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_3 u : VAR_1 ) { if ( VAR_2 == null ) { VAR_2 = VAR_3 ; } else if ( ( VAR_3 ) != VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; } } return VAR_2 ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) || ( METHOD_4 ( db ) ) ) { return false ; } if ( METHOD_5 ( ) ) { return true ; } return METHOD_6 ( ) . METHOD_1 ( ) ; } 
public synchronized < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > METHOD_1 ( java.lang.String name , TYPE_4 VAR_1 , TYPE_5 < TYPE_1 > VAR_2 , TYPE_5 < TYPE_2 > VAR_3 ) { TYPE_6 . METHOD_2 ( VAR_1 ) ; TYPE_7 m = new TYPE_7 ( this , name , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( name , VAR_1 ) ; VAR_4 . put ( name , m ) ; return m . METHOD_4 ( ) ; } 
private TYPE_1 METHOD_1 ( ) { for ( final TYPE_2 VAR_1 : VAR_2 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { continue ; } TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { continue ; } return VAR_3 ; } return null ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . Change change ) throws TYPE_3 { try { final TYPE_4 . NameKey VAR_1 = change . METHOD_2 ( ) . getParentKey ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) . METHOD_1 ( change ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } 
public void METHOD_1 ( TYPE_1 out ) throws java.io.IOException { out . METHOD_2 ( TYPE_2 . METHOD_3 ( commit ) . METHOD_4 ( VAR_1 ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( out ) ; VAR_2 . METHOD_5 ( repo ) ; VAR_2 . format ( base . METHOD_6 ( ) , commit . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } else if ( ( METHOD_3 ( ) ) && ( ! ( METHOD_4 ( ) ) ) ) { return VAR_2 ; } else if ( VAR_3 . get ( ) ) { return VAR_4 ; } final long VAR_5 = METHOD_5 ( VAR_6 ) ; if ( VAR_5 <= 0 ) { return VAR_7 ; } else if ( 0 < VAR_5 ) { return VAR_8 ; } return VAR_9 ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) ; VAR_2 = TYPE_3 . METHOD_4 ( ) ; if ( TYPE_4 . info ( ) . auth ( ) . METHOD_5 ( ) ) { VAR_3 . METHOD_6 ( VAR_2 ) ; VAR_1 . add ( TYPE_2 . METHOD_7 ( ) , VAR_2 ) ; } VAR_4 = TYPE_3 . METHOD_4 ( ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) , VAR_4 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 change , java.lang.String id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = VAR_1 . get ( ) . patchSets ( ) . get ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change . getChange ( ) . getId ( ) , TYPE_3 . METHOD_2 ( id ) ) ) ; if ( ps != null ) { return java.util.Collections . METHOD_3 ( new TYPE_1 ( change , ps ) ) ; } return java.util.Collections . METHOD_4 ( ) ; } 
private java.util.Set < com.google.gerrit.reviewdb.client.Account > METHOD_1 ( final TYPE_1 VAR_1 , final com.google.gerrit.reviewdb.client.Project.NameKey project , final java.util.Set < TYPE_1 > VAR_2 ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( TYPE_4 . equals ( VAR_1 ) ) { return METHOD_2 ( project , VAR_2 ) ; } else { com.google.gerrit.reviewdb.client . AccountGroup group = VAR_3 . get ( VAR_1 ) ; if ( group != null ) { return METHOD_3 ( group , project , VAR_2 ) ; } else { return java.util.Collections . METHOD_4 ( ) ; } } } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) throws java.lang.Exception { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_5 class ) ; return METHOD_1 ( VAR_1 , VAR_3 . METHOD_3 ( VAR_6 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) , VAR_7 , STRING_1 ) , VAR_2 ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 notes , final com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return TYPE_4 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public TYPE_2 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_3 ( notes . METHOD_4 ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_5 ( VAR_2 , notes , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_5 . METHOD_6 ( e ) ; } } } ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String projectName = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 1 ) ) ; java.lang.String revision = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( 2 ) ) ; java.lang.String path = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( INT_1 ) ) ; VAR_1 . METHOD_4 ( new TYPE_3 ( projectName , revision , path ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( path ) ) ; } 
public TYPE_1 < TYPE_2 > . TYPE_3 METHOD_1 ( TYPE_4 . Key < TYPE_2 > VAR_1 , TYPE_5 < TYPE_2 > VAR_2 ) { TYPE_6 < TYPE_2 > n = new TYPE_6 < TYPE_2 > ( VAR_2 , VAR_3 ) ; if ( ref . METHOD_2 ( VAR_4 , n ) ) { return new TYPE_3 ( VAR_1 , n , VAR_5 ) ; } return null ; } 
void METHOD_1 ( java.lang.String token ) { try { VAR_1 . METHOD_1 ( token , changes ) ; } catch ( TYPE_1 e ) { throw new TYPE_2 ( e . getMessage ( ) , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_1 c : db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . getAccountId ( ) ) ) { VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ; } return VAR_1 ; } 
protected < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_1 , TYPE_2 > core ( final TYPE_4 < TYPE_5 < TYPE_1 , TYPE_2 > > type , final java.lang.String name ) { return core ( TYPE_6 . get ( type , TYPE_7 . METHOD_1 ( name ) ) ) . name ( name ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } 
private com.google.gerrit.reviewdb.client . AccountGroup METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb c , java.lang.String name , TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 == null ) { VAR_1 = TYPE_2 . METHOD_2 ( name , VAR_2 ) ; } return new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_3 . NameKey ( name ) , new TYPE_3 . Id ( c . METHOD_3 ( ) ) , VAR_1 , TYPE_4 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 notes , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 ) throws TYPE_3 , TYPE_4 , TYPE_5 { if ( METHOD_2 ( notes , VAR_1 , VAR_2 . getAccountId ( ) , VAR_2 . getValue ( ) ) ) { return ; } VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; } 
void display ( final TYPE_1 . Account account ) { info . METHOD_1 ( 0 , VAR_1 , account . METHOD_2 ( ) ) ; info . METHOD_1 ( 1 , VAR_1 , account . METHOD_3 ( ) ) ; info . METHOD_1 ( 2 , VAR_1 , account . METHOD_4 ( ) ) ; info . METHOD_1 ( INT_1 , VAR_1 , TYPE_2 . METHOD_5 ( account . METHOD_6 ( ) ) ) ; info . METHOD_1 ( INT_2 , VAR_1 , account . getId ( ) . toString ( ) ) ; } 
public void run ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_1 . METHOD_1 ( ) ) { for ( ; ; ) { final TYPE_1 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == null ) { break ; } METHOD_3 ( db , VAR_2 ) ; synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } } } catch ( com.google.gwtorm.server.OrmException e ) { e . METHOD_4 ( ) ; } } 
public TYPE_1 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( notes . METHOD_2 ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_3 ( VAR_2 , notes , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_2 . METHOD_4 ( e ) ; } } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; } 
protected boolean METHOD_1 ( ) { if ( ( VAR_1 . length ( ) ) == 0 ) { return false ; } if ( VAR_2 . isEmpty ( ) ) { return false ; } if ( ( ( VAR_3 . size ( ) ) == 1 ) && ( VAR_3 . contains ( VAR_4 ) ) ) { return false ; } return true ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 ctx ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.server.ReviewDb db = ctx . METHOD_2 ( ) . get ( ) ; com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( id ) ; VAR_1 . create ( VAR_2 , VAR_3 ) . index ( db , c ) ; return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , TYPE_1 > res = METHOD_2 ( STRING_1 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_3 ( 1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_4 ( STRING_2 ) ; TYPE_1 d = res . get ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { if ( ( info . status ( ) ) == ( VAR_1 ) ) { TYPE_2 < TYPE_3 > VAR_2 = ( info . METHOD_2 ( ) ) ? info . METHOD_3 ( ) : VAR_3 < TYPE_3 > create ( ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; if ( VAR_2 . METHOD_5 ( STRING_2 ) ) { VAR_4 . METHOD_6 ( true ) ; VAR_4 . METHOD_7 ( VAR_2 . get ( STRING_2 ) . METHOD_8 ( ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( label . getName ( ) ) ; } assertEquals ( TYPE_3 . of ( STRING_1 , STRING_2 ) , VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , ( INT_1 < < INT_1 ) ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_4 . close ( ) ; return TYPE_3 . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) . get ( ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) ; } 
private void METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { METHOD_2 ( ) ; TYPE_1 . METHOD_1 ( changeId . get ( ) , path , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( changeId ) ) ; } public void METHOD_4 ( TYPE_6 VAR_2 ) { } } ) ; } 
public synchronized void METHOD_1 ( final TYPE_1 . NameKey branch ) { TYPE_2 e = VAR_1 . get ( branch ) ; if ( e == null ) { e = new TYPE_2 ( branch ) ; VAR_1 . put ( branch , e ) ; } VAR_2 = true ; METHOD_2 ( e ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id ps ) throws java.io.IOException { java.lang.String url = java.lang.String.format ( STRING_1 , ps . getParentKey ( ) . get ( ) , ps . get ( ) ) ; return METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( url ) . METHOD_4 ( ) , VAR_2 class ) . changes ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 . AccountGroup > > ( this ) { protected void METHOD_3 ( final java.util.List < TYPE_3 . AccountGroup > result ) { VAR_1 . display ( result ) ; VAR_1 . METHOD_4 ( ) ; } } ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 ) ; bind ( VAR_3 class ) . in ( VAR_2 ) ; bind ( VAR_4 class ) . to ( VAR_3 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; bind ( VAR_5 class ) ; } 
static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > create ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) throws TYPE_4 { if ( ( TYPE_5 . METHOD_1 ( schema ) ) == ( VAR_2 ) ) { throw new TYPE_4 ( STRING_1 ) ; } java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_3 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Account.Id id : VAR_1 ) { VAR_3 . add ( new TYPE_5 ( id ) ) ; } return TYPE_1 . METHOD_2 ( VAR_3 ) ; } 
private TYPE_1 user ( TYPE_2 . AccountGroup ... VAR_1 ) { TYPE_3 . Factory VAR_2 = new TYPE_3 . Factory ( ) { public TYPE_3 create ( final TYPE_1 VAR_3 , final java.lang.String ref ) { return new TYPE_3 ( VAR_4 , VAR_3 , ref ) ; } } ; return new TYPE_1 ( VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_5 . Collections < TYPE_4 . Id > METHOD_1 ( ) , VAR_2 , new TYPE_5 ( VAR_1 ) , METHOD_2 ( ) ) ; } 
private void METHOD_1 ( ) throws TYPE_1 { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( METHOD_5 ( ) ) ; VAR_1 . append ( STRING_2 ) ; msg . METHOD_6 ( VAR_1 . toString ( ) , STRING_3 ) ; TYPE_2 . METHOD_1 ( msg ) ; } } 
protected void METHOD_1 ( final java.lang.String VAR_1 ) { final java.lang.String VAR_2 = VAR_3 . METHOD_2 ( ) ; if ( VAR_1 . isEmpty ( ) ) { VAR_4 . METHOD_3 ( false ) ; } else { VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_3 ( true ) ; } if ( ( ( VAR_5 ) == null ) || ( ( VAR_5 ) == VAR_2 ) ) { METHOD_5 ( VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , project , change ) . METHOD_3 ( ) ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > refs ) { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 r = refs . get ( TYPE_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) . getAccountId ( ) ) ) ; if ( r != null ) { TYPE_3 s = new TYPE_3 ( VAR_2 , r ) ; refs = new TYPE_4 ( refs ) ; refs . put ( s . getName ( ) , s ) ; } } return refs ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; } } ) ; bind ( VAR_2 class ) ; bind ( VAR_3 class ) . to ( VAR_2 class ) ; bind ( VAR_4 class ) . to ( VAR_5 class ) ; METHOD_2 ( ) . to ( VAR_5 class ) ; } 
private java.lang.String METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 res = METHOD_2 ( path ) ; org.junit.Assert.assertEquals ( VAR_1 , res . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_3 = res . METHOD_4 ( ) ; return new java.lang.String ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) , VAR_4 ) ; } 
void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } else if ( ( VAR_1 ) == null ) { TYPE_2 VAR_2 = METHOD_7 ( ) ; if ( ! ( METHOD_8 ( ) . METHOD_9 ( ) ) ) { METHOD_4 ( ) . METHOD_10 ( VAR_2 ) ; } } else { METHOD_11 ( ) ; } } 
protected void METHOD_1 ( java.lang.String msg , TYPE_1 t ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( t != null ) { VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) ; } else { VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } 
boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( ! ( METHOD_2 ( project ) ) ) { return false ; } java.lang.String [ ] projects = config . METHOD_3 ( ) ; if ( ( projects . length ) < 1 ) { return true ; } return new TYPE_1 ( TYPE_2 . METHOD_4 ( projects ) ) . METHOD_5 ( project ) ; } 
protected TYPE_1 < ? > METHOD_1 ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_4 , project , STRING_1 ) ; METHOD_3 ( VAR_5 , project , STRING_2 ) ; return METHOD_4 ( project ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) throws java.io.IOException { if ( path . isEmpty ( ) ) { return null ; } path = TYPE_3 . METHOD_2 ( path ) ; TYPE_4 . Result result = METHOD_3 ( req , path ) ; if ( result == null ) { return null ; } if ( ( result . METHOD_4 ( ) ) != null ) { return METHOD_5 ( VAR_1 , result , path ) ; } else { return METHOD_6 ( VAR_1 , result , path ) ; } } 
protected TYPE_1 . ChangeInfo getChange ( java.lang.String changeId , TYPE_2 ... VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = ( ( VAR_1 . length ) > 0 ) ? STRING_1 + ( TYPE_3 . on ( STRING_2 ) . METHOD_1 ( VAR_1 ) ) : STRING_3 ; TYPE_4 r = VAR_3 . get ( ( ( STRING_4 + changeId ) + VAR_2 ) ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; return TYPE_5 . METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 . ChangeInfo class ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; try { new TYPE_1 ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_2 , VAR_1 ) ; METHOD_4 ( STRING_3 ) ; } catch ( TYPE_2 e ) { assertEquals ( ( STRING_4 + VAR_1 ) , e . getMessage ( ) ) ; } } 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) throws java.io.IOException { if ( err != null ) { TYPE_5 . METHOD_2 ( req , err ) ; } TYPE_6 . METHOD_3 ( req , res , null , null , c ) ; res . METHOD_4 ( VAR_1 ) ; TYPE_6 . METHOD_5 ( req , res , msg ) ; } 
private void METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.lang.String message ) { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { VAR_2 . METHOD_3 ( ( message + STRING_1 ) ) ; VAR_2 . METHOD_3 ( TYPE_2 . on ( STRING_2 ) . METHOD_4 ( VAR_1 ) ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; } } 
protected void run ( ) throws TYPE_1 { boolean VAR_1 = true ; for ( TYPE_2 rsrc : changes . values ( ) ) { try { index . apply ( rsrc , new TYPE_3 ( ) ) ; } catch ( java.io.IOException | TYPE_4 | com.google.gwtorm.server.OrmException | TYPE_5 e ) { VAR_1 = false ; METHOD_1 ( STRING_1 , java.lang.String.format ( STRING_2 , rsrc . getId ( ) , e . getMessage ( ) ) ) ; } } if ( ! VAR_1 ) { throw METHOD_2 ( STRING_3 ) ; } } 
public void delete ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( schema , id ) ; try { TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ; } catch ( TYPE_4 | TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } 
private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Set < TYPE_1 > VAR_3 ) throws TYPE_2 { TYPE_3 VAR_4 = TYPE_4 . METHOD_2 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 ) ; } 
private void METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , TYPE_1 c , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 r = VAR_3 . put ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) , c ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; } 
public void onSuccess ( TYPE_1 result ) { METHOD_1 ( ( VAR_1 ? 1 : 0 ) ) ; VAR_2 = TYPE_2 . METHOD_2 ( psId , VAR_2 . getKey ( ) . get ( ) , result ) ; VAR_3 . METHOD_3 ( false ) ; VAR_4 . METHOD_4 ( true ) ; VAR_5 . METHOD_4 ( true ) ; VAR_6 . METHOD_4 ( true ) ; METHOD_5 ( ) ; VAR_7 . onSuccess ( VAR_8 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String branch , TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 . METHOD_2 ( ) , VAR_4 ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . append ( STRING_1 , project . get ( ) ) ; VAR_2 . append ( STRING_2 , branch ) ; VAR_2 . append ( VAR_5 , VAR_6 ) ; for ( TYPE_3 VAR_7 : METHOD_4 ( VAR_1 ) ) { VAR_2 . METHOD_5 ( VAR_8 , VAR_7 ) ; } return VAR_2 . toString ( ) ; } 
protected void METHOD_1 ( java.lang.String changeId ) throws java.io.IOException { TYPE_1 . ChangeInfo c = getChange ( changeId , VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value ) . isEqualTo ( 2 ) ; com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) ; } 
protected void METHOD_1 ( ) throws TYPE_1 { super . METHOD_1 ( ) ; METHOD_2 ( ) ; add ( VAR_1 , to ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { METHOD_3 ( TYPE_2 . METHOD_4 ( ) , ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) throws TYPE_7 , TYPE_8 { return VAR_6 . create ( VAR_3 , db , VAR_1 . repo , VAR_1 . rw , VAR_7 , VAR_8 , METHOD_2 ( VAR_1 , VAR_4 ) , VAR_2 , VAR_5 , VAR_9 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) ; METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; bind ( new TYPE_2 < TYPE_3 < TYPE_4 . ReviewDb > > ( ) { } ) . to ( new TYPE_2 < TYPE_5 < TYPE_4 . ReviewDb > > ( ) { } ) . in ( VAR_1 ) ; bind ( new TYPE_2 < TYPE_5 < TYPE_4 . ReviewDb > > ( ) { } ) . METHOD_2 ( VAR_2 class ) . in ( VAR_1 ) ; } 
private void METHOD_1 ( final java.util.Map < java.lang.String , TYPE_1 > VAR_1 , java.lang.String name , java.lang.String value ) { if ( ( ! ( VAR_1 . METHOD_2 ( name ) ) ) || ( VAR_1 . get ( name ) . isEmpty ( ) ) ) { VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 , com.google.gwtorm.server.OrmException { TYPE_1 c = METHOD_2 ( change , user ) ; if ( ! ( c . METHOD_3 ( db . get ( ) ) ) ) { throw new TYPE_3 ( c . getChange ( ) . getId ( ) ) ; } return c ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Account account , java.lang.String VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_1 event = new TYPE_1 ( util . METHOD_4 ( account ) , VAR_1 ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { try { VAR_3 . METHOD_5 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_6 ( TYPE_3 . log , e ) ; } } } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 , TYPE_3 u , TYPE_4 VAR_4 ) { TYPE_5 . METHOD_2 ( u ) ; if ( u instanceof TYPE_6 ) { return VAR_1 . METHOD_3 ( u . METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 , VAR_2 , VAR_3 ) ; } else if ( u instanceof TYPE_7 ) { return VAR_2 ; } throw new TYPE_8 ( ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; } 
private void METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_1 r = VAR_3 . delete ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 . HttpServletResponse VAR_1 = METHOD_2 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_3 ( null , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_3 ) ; VAR_1 = METHOD_2 ( VAR_2 . HttpServletResponse class ) ; METHOD_6 ( new java.io.IOException ( STRING_1 ) ) . METHOD_7 ( VAR_1 ) . METHOD_8 ( VAR_4 ) ; servlet . METHOD_9 ( null , VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_3 < java.lang.String > n = TYPE_3 . not ( p ) ; METHOD_3 ( ( n instanceof TYPE_4 ) ) ; METHOD_4 ( p , n ) ; METHOD_5 ( p , TYPE_3 . not ( n ) ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { display ( result ) ; VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; } } ) ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ; } for ( java.lang.String name : VAR_2 ) { VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) ; VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } for ( TYPE_2 VAR_2 : VAR_3 ) { TYPE_3 args = VAR_2 . args ; if ( VAR_4 . METHOD_2 ( ) . equals ( VAR_4 . METHOD_3 ( ) ) ) { continue ; } com.google.gerrit.reviewdb.client.Account account = VAR_5 . get ( VAR_6 . getAccountId ( ) ) . METHOD_4 ( ) ; VAR_7 . METHOD_5 ( VAR_8 , VAR_4 . METHOD_3 ( ) , VAR_4 . METHOD_2 ( ) , account ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_4 ( repo , commit ) ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 ) ; METHOD_5 ( STRING_9 , change ) ; } 
void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 ; VAR_3 += VAR_1 ; int VAR_4 = ( VAR_3 ) - ( VAR_5 ) ; VAR_6 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) ; VAR_7 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( 1 , VAR_2 ) ; final TYPE_2 VAR_3 = new TYPE_2 ( ( ( TYPE_1 . METHOD_2 ( VAR_4 , VAR_5 ) ) + ( TYPE_1 . METHOD_2 ( INT_1 , VAR_6 ) ) ) ) ; TYPE_3 . METHOD_3 ( new TYPE_4 ( ) { public long METHOD_4 ( ) { return VAR_3 . METHOD_5 ( VAR_1 ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; TYPE_2 . ChangeInfo result = TYPE_3 . METHOD_3 ( VAR_1 . changes ( ) . query ( r . getChangeId ( ) ) . get ( ) ) ; org.junit.Assert . METHOD_4 ( VAR_2 ) ; org.junit.Assert . METHOD_4 ( VAR_3 ) ; org.junit.Assert . METHOD_4 ( VAR_4 ) ; org.junit.Assert . METHOD_4 ( VAR_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + STRING_4 ) + STRING_5 ) + ( VAR_2 ) ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { TYPE_3 < TYPE_1 > r = VAR_1 . apply ( change , null ) ; return r . METHOD_2 ( ) ? null : r . value ( ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
protected TYPE_1 < ? > METHOD_1 ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = METHOD_2 ( name , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_4 , project , STRING_1 ) ; METHOD_3 ( VAR_5 , project , STRING_2 ) ; return METHOD_4 ( project ) ; METHOD_5 ( VAR_6 ) ; VAR_7 : Test = VAR_8 ; TYPE_3 . submit VAR_9 ; on ( projects ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { try { VAR_3 . projects ( ) . name ( VAR_1 . get ( ) ) . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_1 e ) { e . METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( e . getMessage ( ) ) . contains ( VAR_2 ) ; } } 
public void run ( ) { int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ; int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , line , 0 , false ) , METHOD_7 ( ) ) ; METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( final java.lang.String name , final java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_1 = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ; final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( name ) ; account . METHOD_4 ( email ) ; final TYPE_1 s = new TYPE_1 ( account , VAR_2 . Collections < TYPE_3 > METHOD_5 ( ) , VAR_2 . Collections < TYPE_4 > METHOD_5 ( ) ) ; return s ; } 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , TYPE_4 < TYPE_1 > VAR_3 ) { TYPE_5 < TYPE_1 > VAR_4 = METHOD_1 ( name , VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_4 , ( ) - > { VAR_4 . set ( VAR_3 . get ( ) ) ; } ) ; } 
TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final java.util.List < TYPE_4 > VAR_3 ) throws java.io.IOException { VAR_4 = db . METHOD_2 ( ) ; try { return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; } finally { VAR_4 . METHOD_4 ( ) ; } } 
protected synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { final java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . VAR_3 . METHOD_3 ( VAR_4 ) ; synchronized ( VAR_2 ) { VAR_2 . add ( this ) ; } final TYPE_4 VAR_5 = new TYPE_4 ( VAR_1 ) ; if ( METHOD_4 ( ) ) { new TYPE_5 ( VAR_5 , VAR_5 . toString ( ) ) . METHOD_5 ( ) ; } else { VAR_6 = VAR_7 . submit ( VAR_5 ) ; } } 
private static boolean METHOD_1 ( ) { final java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; if ( FLOAT_1 <= ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) { return true ; } else { VAR_2 . METHOD_4 ( STRING_2 ) ; VAR_2 . METHOD_4 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; return false ; } } 
public void delete ( int id ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( id ) ; try { TYPE_3 . METHOD_2 ( VAR_2 . delete ( VAR_1 ) , VAR_3 . delete ( VAR_1 ) ) . get ( ) ; } catch ( TYPE_4 | TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_3 = TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ; VAR_1 . METHOD_5 ( ) ; return VAR_3 ; } 
private TYPE_1 METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( e == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_2 . METHOD_3 ( err ) ; } } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } if ( ( rw ) != null ) { rw . close ( ) ; } if ( ( repo ) != null ) { repo . close ( ) ; } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , config . METHOD_4 ( ) ) ; VAR_2 = VAR_1 ; } return VAR_4 . create ( VAR_1 ) ; } 
Account . Id getAccountId ( ) { com.google.gerrit.reviewdb.client.Account.Id id = get ( 0 ) . VAR_1 ; for ( int i = 1 ; i < ( size ( ) ) ; i ++ ) { TYPE_1 . METHOD_1 ( TYPE_2 . equals ( id , get ( i ) . VAR_1 ) , STRING_1 , id , get ( i ) . VAR_1 ) ; } return id ; } 
public static TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String name ) { TYPE_1 . METHOD_2 ( name ) ; java.util.List < TYPE_2 > values = new java.util.ArrayList < TYPE_2 > ( 2 ) ; values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) ; values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) ; TYPE_1 type = new TYPE_1 ( name , values ) ; type . METHOD_3 ( id ) ; return type ; } 
static TYPE_1 METHOD_1 ( ) { TYPE_1 i = new TYPE_1 ( ) ; i . i = 1 ; VAR_1 = 2 ; i . id = INT_1 ; VAR_2 = INT_2 ; VAR_3 = INT_3 ; VAR_4 = INT_4 ; i . b = true ; VAR_5 = false ; VAR_6 = true ; i . s = STRING_1 ; VAR_7 = STRING_2 ; VAR_8 = null ; i . t = VAR_9 ; VAR_10 = VAR_9 ; return i ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 VAR_5 = user ( VAR_1 , VAR_4 ) ; METHOD_3 ( VAR_5 ) ; METHOD_4 ( VAR_5 ) ; METHOD_5 ( STRING_2 , VAR_5 ) ; METHOD_5 ( STRING_3 , VAR_5 ) ; METHOD_5 ( STRING_4 , VAR_5 ) ; METHOD_3 ( STRING_1 , VAR_5 ) ; METHOD_3 ( STRING_5 , VAR_5 ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { VAR_1 . set ( STRING_1 , VAR_2 ) ; } if ( ( VAR_3 != null ) && ( ! ( VAR_3 . isEmpty ( ) ) ) ) { VAR_4 . METHOD_2 ( STRING_2 , null , STRING_3 , VAR_3 ) ; } } 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; VAR_2 . METHOD_4 ( rsrc ) ; VAR_2 . apply ( account , new TYPE_4 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( final TYPE_1 event ) { if ( ( VAR_1 ) == null ) { TYPE_2 . METHOD_2 ( patchSet . getKey ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( final TYPE_4 result ) { METHOD_3 ( result ) ; } } ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 = VAR_3 ; VAR_4 = VAR_5 ; switch ( type ) { case VAR_6 : case VAR_7 : VAR_8 = VAR_9 ; case VAR_10 : path = VAR_1 . path ; case VAR_11 : revision = VAR_1 . revision ; case VAR_12 : VAR_13 = VAR_14 ; } return this ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.List < TYPE_2 > VAR_2 ) { if ( VAR_2 != null ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } VAR_1 . append ( CHAR_3 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; } else if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ; } else { VAR_3 . METHOD_6 ( java.lang.String.format ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , VAR_1 ) ) ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) { java.lang.String VAR_3 = VAR_4 . getProject ( ) . getName ( ) ; return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; } com.google.gerrit.reviewdb.client.Project project = VAR_4 . getProject ( ) ; if ( project . METHOD_3 ( ) ) { return METHOD_4 ( ) ; } return VAR_5 ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; factory ( VAR_10 . Factory class ) ; factory ( VAR_11 . Factory class ) ; } 
private void METHOD_1 ( final TYPE_1 m ) { m . METHOD_2 ( ) ; m . METHOD_3 ( STRING_1 ) ; m . METHOD_4 ( ) ; m . METHOD_5 ( ) ; m . METHOD_2 ( ) ; m . METHOD_6 ( STRING_2 ) ; m . METHOD_6 ( STRING_3 ) ; m . METHOD_4 ( ) ; m . METHOD_5 ( ) ; } 
private static TYPE_1 not ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) throws TYPE_4 { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > n = p . METHOD_1 ( 0 ) ; if ( n instanceof TYPE_5 ) { return TYPE_6 . METHOD_2 ( ( ( TYPE_5 < com.google.gerrit.server.query.change.ChangeData > ) ( n ) ) ) ; } TYPE_7 VAR_1 = new TYPE_7 ( ) ; VAR_1 . add ( new TYPE_8 ( ) , VAR_2 ) ; VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , n ) , VAR_3 ) ; return VAR_1 ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { switch ( VAR_1 ) { case VAR_2 : return ( ( ! ( METHOD_2 ( ) ) ) && ( ( user . METHOD_3 ( ) ) || ( METHOD_4 ( VAR_3 ) ) ) ) || ( METHOD_5 ( ) ) ; case VAR_4 : return ( ( ! ( METHOD_2 ( ) ) ) && ( METHOD_6 ( java.util.Collections . METHOD_7 ( ) ) ) ) || ( METHOD_5 ( ) ) ; } throw new TYPE_2 ( ( VAR_1 + STRING_1 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( ! ( TYPE_2 . METHOD_3 ( ) ) ) ) { TYPE_2 . METHOD_4 ( true ) ; VAR_2 . METHOD_5 ( false ) ; } else if ( ( ( VAR_1 . METHOD_2 ( ) ) > ( FLOAT_1 * ( VAR_1 . METHOD_6 ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_4 ( false ) ; VAR_2 . METHOD_5 ( true ) ; } } 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; TYPE_5 . METHOD_3 ( req , res , null , c ) ; TYPE_5 . METHOD_4 ( req , res , msg ) ; if ( err != null ) { TYPE_6 . METHOD_5 ( req , err ) ; } } 
private TYPE_1 . Result METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { java.lang.String VAR_3 = STRING_1 ; java.lang.String VAR_4 = STRING_2 ; TYPE_2 VAR_5 = VAR_6 . create ( db , admin . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_1 , VAR_2 ) ; TYPE_2 . Result r = VAR_5 . to ( git , STRING_3 ) ; r . METHOD_3 ( ) ; return r ; } 
private static boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_3 = TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; if ( TYPE_2 . isEmpty ( VAR_3 ) ) { return false ; } boolean VAR_4 = TYPE_3 . contains ( VAR_3 . METHOD_4 ( ) ) ; VAR_5 . METHOD_5 ( ( ( ( ( ( STRING_2 + VAR_2 ) + STRING_3 ) + VAR_3 ) + STRING_4 ) + VAR_4 ) ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin ) ; METHOD_4 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_4 , VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String config = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 ) , new TYPE_4 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . create ( STRING_1 ) ; TYPE_2 ctl = METHOD_2 ( VAR_1 ) ; VAR_3 . create ( ) . METHOD_3 ( db , VAR_1 . getId ( ) ) ; METHOD_4 ( ctl , null , TYPE_3 . METHOD_5 ( ( STRING_2 + ( VAR_1 . getId ( ) ) ) ) ) ; } 
public TYPE_1 . AccountGroup METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_2 . OrmException { final TYPE_1 . ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_3 . NameKey VAR_2 = new TYPE_3 . NameKey ( VAR_1 ) ; final TYPE_1 . AccountGroup group = db . METHOD_3 ( ) . get ( VAR_2 ) ; if ( group != null ) { return group ; } else { return null ; } } finally { db . close ( ) ; } } 
private java.lang.String METHOD_1 ( ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ; TYPE_2 . Result result = VAR_1 . to ( git , STRING_1 ) ; VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 , STRING_2 , STRING_3 , result . getChangeId ( ) ) ; return VAR_1 . to ( git , STRING_1 ) . getChangeId ( ) ; } 
public TYPE_1 . AccountGroup METHOD_1 ( final TYPE_2 . Id key ) { final TYPE_2 . NameKey name = new TYPE_2 . NameKey ( ( STRING_1 + ( key . toString ( ) ) ) ) ; final TYPE_1 . AccountGroup VAR_1 = new TYPE_1 . AccountGroup ( name , key ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; return VAR_1 ; } 
private static void METHOD_1 ( ) { final TYPE_1 me ; me = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) , ( ( TYPE_4 ) ( null ) ) ) ; me . METHOD_5 ( STRING_1 ) ; me . METHOD_6 ( STRING_2 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + STRING_7 ) + STRING_8 ) , n . METHOD_6 ( ) ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { TYPE_2 p = new TYPE_2 ( ) ; try ( TYPE_3 VAR_1 = repo . METHOD_2 ( ) ) { p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ; return p ; } } 
public void onSuccess ( TYPE_1 . ChangeInfo info ) { info . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ; TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_1 ( ) . values ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_1 , diff ) ; VAR_3 . METHOD_5 ( info ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 user ) { if ( user . METHOD_2 ( ) ) { return ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) . toString ( ) ; } if ( user instanceof TYPE_3 ) { return STRING_1 + ( user . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; } return user . toString ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_3 = METHOD_3 ( VAR_2 . getName ( ) ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_1 ( VAR_2 ) ; } else { VAR_4 . add ( VAR_3 ) ; } } } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; try { new TYPE_3 ( VAR_1 ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_4 e ) { assertEquals ( ( STRING_2 + ( VAR_1 . METHOD_6 ( ) ) ) , e . getMessage ( ) ) ; } } finally { VAR_1 . delete ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ; cfg = new TYPE_3 ( ) ; cfg . METHOD_7 ( STRING_2 , null , STRING_3 , STRING_1 ) ; VAR_2 = new TYPE_4 ( VAR_1 , cfg , METHOD_8 ( VAR_3 class ) ) ; VAR_2 . METHOD_9 ( ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; TYPE_1 . METHOD_6 ( true ) ; TYPE_2 . METHOD_7 ( true ) ; } 
protected < TYPE_1 extends TYPE_2 , TYPE_3 extends TYPE_2 > TYPE_4 < TYPE_1 , TYPE_3 > METHOD_1 ( final TYPE_5 < TYPE_6 < TYPE_1 , TYPE_3 > > type , final java.lang.String name ) { return METHOD_1 ( TYPE_7 . get ( type , TYPE_8 . METHOD_2 ( name ) ) ) . name ( name ) ; } 
public void METHOD_1 ( TYPE_1 . NameKey projectName , java.lang.String VAR_1 , java.lang.String msg , java.util.List < TYPE_2 > VAR_2 , TYPE_3 < TYPE_4 > VAR_3 ) { org.eclipse.jgit.lib.ObjectId base = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( VAR_1 ) ; VAR_4 . create ( projectName , base , VAR_2 , msg ) . to ( VAR_3 ) ; } 
protected void METHOD_1 ( int row , int VAR_1 ) { if ( ( VAR_1 == 1 ) || ( VAR_1 == 2 ) ) { if ( ! ( STRING_1 . equals ( table . METHOD_2 ( row , VAR_1 ) ) ) ) { METHOD_3 ( row , VAR_1 ) ; } } } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; if ( ( view ) != null ) { view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ; } } } 
TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3 = new TYPE_2 ( ( ( VAR_4 . METHOD_2 ( ) ) + VAR_1 ) ) ; if ( ! ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) { VAR_3 . METHOD_4 ( STRING_1 , TYPE_4 . toString ( ) ) ; VAR_3 . METHOD_5 ( new TYPE_5 ( VAR_2 , VAR_5 ) ) ; } return VAR_6 . METHOD_6 ( VAR_3 , new TYPE_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; TYPE_1 in = new TYPE_1 ( ) ; in . account = user . email ; VAR_3 = STRING_2 ; in . ref = STRING_3 ; VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 in = new TYPE_1 ( ) ; in . name = VAR_1 ; VAR_2 = true ; VAR_3 . projects ( ) . create ( in ) ; METHOD_2 ( VAR_1 , VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , boolean edit ) { VAR_5 . add ( new TYPE_2 ( VAR_6 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 , edit ) ) ; } 
public void METHOD_1 ( final TYPE_1 req , final TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( new TYPE_4 ( ) { public void run ( ) { TYPE_5 . METHOD_3 ( req . METHOD_4 ( ) , req . METHOD_5 ( ) , new TYPE_6 < TYPE_5 > ( ) { public void onSuccess ( TYPE_5 VAR_2 ) { VAR_1 . METHOD_6 ( req , new TYPE_7 ( TYPE_8 . METHOD_7 ( VAR_2 . values ( ) ) ) ) ; } } ) ; } } ) ; } 
private void METHOD_1 ( final TYPE_1 . ReceiveCommand cmd ) { TYPE_2 ctl = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ; if ( ctl . METHOD_3 ( ) ) { if ( ( TYPE_3 . METHOD_4 ( cmd ) ) && ( ! ( METHOD_5 ( cmd ) ) ) ) { return ; } METHOD_6 ( ctl , cmd ) ; cmd . METHOD_7 ( rp ) ; } else { TYPE_3 . reject ( cmd , STRING_1 ) ; } } 
static TYPE_1 < com.google.gerrit.server.query.change.ChangeData , ? > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String id ) { if ( ( ( id . length ( ) ) == ( VAR_1 ) ) && ( schema . METHOD_2 ( VAR_2 ) ) ) { return VAR_2 ; } return VAR_3 ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > p ) { if ( p instanceof TYPE_4 < ? > ) { return METHOD_2 ( p ) ; } else { return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; } } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData VAR_2 : index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( args , VAR_1 . getId ( ) ) , this ) , 1 ) . METHOD_4 ( ) ) { if ( VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { return true ; } } } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; } 
private TYPE_1 message ( final TYPE_2 . Change c , final java.lang.String VAR_1 ) { final java.lang.String VAR_2 ; try { VAR_2 = TYPE_3 . METHOD_1 ( schema ) ; } catch ( TYPE_4 . OrmException e ) { return null ; } final TYPE_1 m = new TYPE_1 ( new TYPE_1 . Key ( c . getId ( ) , VAR_2 ) , null ) ; m . METHOD_2 ( VAR_1 ) ; return m ; } 
protected java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , org.eclipse.jgit.revwalk.RevWalk VAR_2 ) throws TYPE_2 { try { return METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ; } catch ( java.io.IOException e ) { TYPE_2 VAR_4 = new TYPE_2 ( e . getMessage ( ) ) ; VAR_4 . METHOD_5 ( e ) ; throw VAR_4 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { repo . METHOD_2 ( 2 ) ; TYPE_1 VAR_1 = repo . METHOD_3 ( STRING_1 , repo . commit ( ) . create ( ) ) ; repo . METHOD_2 ( ( - 1 ) ) ; TYPE_1 VAR_2 = repo . METHOD_3 ( STRING_2 , VAR_1 ) ; org.junit.Assert.assertEquals ( ( ( VAR_3 ) + INT_1 ) , METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( VAR_3 ) + 2 ) , METHOD_4 ( VAR_2 ) ) ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = repo . METHOD_2 ( ) ; try { org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ; VAR_1 . METHOD_3 ( ) ; return id ; } finally { VAR_1 . METHOD_4 ( ) ; } } 
public TYPE_1 create ( ) { final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ; for ( final com.google.gerrit.reviewdb.client . AccountGroup a : out . values ( ) ) { r . add ( new TYPE_2 ( a ) ) ; } return new TYPE_1 ( r ) ; } 
private java.util.List < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { for ( TYPE_2 VAR_4 : VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { java.lang.String [ ] VAR_5 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ; VAR_2 . add ( VAR_5 [ 0 ] ) ; } } return VAR_2 ; } 
protected void insert ( final int row , final TYPE_1 VAR_1 ) { table . METHOD_1 ( row ) ; METHOD_2 ( row ) ; final TYPE_2 VAR_2 = table . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_5 ( ) ) ; VAR_2 . METHOD_4 ( row , 1 , TYPE_3 . css ( ) . METHOD_6 ( ) ) ; VAR_2 . METHOD_4 ( row , 2 , TYPE_3 . css ( ) . METHOD_5 ( ) ) ; METHOD_7 ( row , VAR_1 ) ; } 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( ctx . getProject ( ) , psId . getParentKey ( ) ) ; cm . METHOD_1 ( ctx . METHOD_2 ( ) . getAccountId ( ) ) ; cm . METHOD_3 ( patchSet , info ) ; cm . METHOD_4 ( ) ; } catch ( java.lang.Exception e ) { VAR_2 . error ( ( STRING_1 + ( psId ) ) , e ) ; } } 
public void run ( ) { try { METHOD_1 ( ) ; } catch ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( 1 ) ; } catch ( TYPE_3 e ) { if ( VAR_1 . METHOD_3 ( ) . equals ( STRING_1 ) ) METHOD_4 ( e ) ; else VAR_2 . METHOD_5 ( e . toString ( ) ) ; } catch ( java.lang.Exception e ) { METHOD_4 ( e ) ; } METHOD_6 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 cfg , java.lang.String revision ) { TYPE_3 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( cfg . METHOD_4 ( VAR_2 , true ) ) . METHOD_5 ( STRING_1 ) ; for ( java.lang.String name : VAR_3 . METHOD_6 ( ) ) { VAR_1 . METHOD_7 ( name , VAR_3 . METHOD_8 ( name ) ) ; } VAR_1 . METHOD_7 ( STRING_2 ) ; VAR_1 . METHOD_7 ( STRING_3 , revision ) ; return VAR_1 . get ( ) ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 in ) throws TYPE_4 , com.google.gwtorm.server.OrmException { if ( ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , rsrc . getChange ( ) . getId ( ) ) ; return TYPE_1 . METHOD_3 ( ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.util.Set < TYPE_2 > VAR_3 ) throws java.io.IOException { java.lang.String [ ] VAR_4 = VAR_2 . METHOD_2 ( ) ; java.lang.String VAR_5 = TYPE_3 . METHOD_3 ( VAR_4 , STRING_1 ) ; if ( ! ( TYPE_4 . METHOD_4 ( VAR_5 ) ) ) { VAR_6 . METHOD_5 ( VAR_1 , VAR_5 ) ; } } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String topic ) throws TYPE_1 { if ( ( topic == null ) || ( topic . isEmpty ( ) ) ) { topic = STRING_1 + ( TYPE_2 . METHOD_2 ( ) . toString ( ) ) ; VAR_2 . METHOD_3 ( STRING_2 , VAR_1 , topic ) ; VAR_3 . changes ( ) . id ( VAR_1 ) . topic ( topic ) ; } return topic ; } 
java.util.Map < java.lang.String , ? > METHOD_1 ( TYPE_1 req ) throws java.io.IOException { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( req ) . METHOD_3 ( ) ; return TYPE_3 . of ( STRING_1 , VAR_3 , STRING_2 , TYPE_4 . METHOD_4 ( VAR_4 ) , STRING_3 , METHOD_5 ( req , VAR_5 , TYPE_5 . METHOD_6 ( VAR_6 ) ) , STRING_4 , METHOD_5 ( req , VAR_7 , METHOD_7 ( req ) ) ) ; } 
public int METHOD_1 ( TYPE_1 b ) { int VAR_1 = ( TYPE_1 . index ( this ) ) - ( TYPE_1 . index ( b ) ) ; if ( VAR_1 == 0 ) getName ( ) . METHOD_1 ( b . getName ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 VAR_1 = db . METHOD_2 ( ) ; final TYPE_2 VAR_2 = db . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertEquals ( VAR_5 , VAR_6 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 ctl , com.google.gerrit.reviewdb.client.PatchSet in ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ; try ( org.eclipse.jgit.lib.Repository repo = METHOD_3 ( ctl ) ) { TYPE_1 VAR_4 = METHOD_4 ( ctl , VAR_5 . create ( db . get ( ) , ctl ) , in , repo , true ) ; VAR_1 . METHOD_5 ( ) ; return VAR_4 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; METHOD_3 ( ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_4 ) ) , METHOD_2 ( STRING_1 ) ) ; METHOD_3 ( ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ; } 
private int METHOD_1 ( TYPE_1 cfg , java.lang.String name , int VAR_1 ) { try { return cfg . METHOD_1 ( name , VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . error ( java.lang.String.format ( STRING_1 , name , VAR_1 ) ) ; VAR_2 . METHOD_2 ( ( STRING_2 + ( e . getMessage ( ) ) ) , e ) ; return VAR_1 ; } } 
public TYPE_1 add ( final TYPE_2 < TYPE_3 > VAR_1 ) { final TYPE_4 < TYPE_2 < TYPE_3 > > ref = new TYPE_4 < TYPE_2 < TYPE_3 > > ( VAR_1 ) ; VAR_2 . add ( ref ) ; return new TYPE_1 ( ) { public void METHOD_1 ( ) { if ( ref . METHOD_2 ( VAR_1 , null ) ) { VAR_2 . METHOD_1 ( ref ) ; } } } ; } 
private synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; java.lang.String name = VAR_1 . getName ( ) ; VAR_3 . info ( java.lang.String.format ( STRING_1 , name , VAR_1 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; VAR_5 . METHOD_6 ( name ) ; VAR_6 . METHOD_6 ( name ) ; VAR_7 . add ( VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_1 result = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_3 VAR_2 ) throws java.io.IOException { VAR_1 . METHOD_3 ( VAR_2 ) ; } } . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; return result ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { VAR_2 . display ( r . METHOD_3 ( ) ) ; VAR_3 . display ( r . METHOD_4 ( ) ) ; VAR_4 . display ( r . METHOD_5 ( ) ) ; } public void METHOD_6 ( final TYPE_4 VAR_5 ) { TYPE_5 . log ( STRING_1 , VAR_5 ) ; } } ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ( VAR_1 instanceof TYPE_3 ) ) ; METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; final TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ; METHOD_3 ( ( VAR_2 instanceof TYPE_5 ) ) ; METHOD_5 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = ( cd != null ) ? cd . reviewers ( TYPE_2 . of ( db ) ) . values ( ) : VAR_2 . METHOD_4 ( db , change.getId ( ) ) . values ( ) ; TYPE_3 user = ( ( TYPE_3 ) ( METHOD_2 ( ) ) ) ; return VAR_1 . contains ( user . getAccountId ( ) ) ; } return false ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_4 { TYPE_5 VAR_5 = METHOD_2 ( VAR_1 , VAR_3 ) ; TYPE_6 VAR_6 = TYPE_6 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( VAR_4 ) . METHOD_6 ( ) ; METHOD_7 ( db , VAR_2 , VAR_5 , VAR_6 ) ; } 
private void METHOD_1 ( ) { for ( TYPE_1 w = METHOD_2 ( ) ; w != null ; w = w . METHOD_2 ( ) ) { if ( w instanceof TYPE_2 ) { ( ( TYPE_2 ) ( w ) ) . METHOD_1 ( ) ; break ; } } } 
private java.lang.String METHOD_1 ( ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.lib.ObjectId VAR_2 = repo . METHOD_3 ( STRING_1 ) ; org.eclipse.jgit.lib.ObjectId VAR_3 = repo . METHOD_3 ( STRING_2 ) ; return METHOD_4 ( repo , VAR_2 , VAR_3 ) ; } finally { rw . METHOD_5 ( ) ; } } finally { repo . close ( ) ; } } 
public void onSuccess ( TYPE_1 result ) { VAR_1 . METHOD_1 ( ) ; if ( TYPE_2 . METHOD_2 ( ) . auth ( ) . METHOD_3 ( ) ) { VAR_2 = VAR_3 ; if ( ( VAR_4 . METHOD_4 ( ) ) == 0 ) { final com.google.gerrit.reviewdb.client.Account me = TYPE_2 . METHOD_5 ( ) ; me . METHOD_6 ( VAR_3 ) ; METHOD_7 ( me ) ; } else { VAR_5 . METHOD_8 ( true ) ; } METHOD_9 ( ) ; } } 
static int METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = VAR_1 . change ( ) . getProject ( ) ; try { return ( ( VAR_2 . config ) == null ) || ( project == null ) ? VAR_3 : VAR_4 . METHOD_2 ( project , VAR_5 ) . METHOD_3 ( VAR_6 , VAR_3 ) ; } catch ( TYPE_1 e ) { VAR_7 . error ( ( STRING_1 + project ) ) ; return VAR_3 ; } } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( TYPE_2 VAR_1 : VAR_2 . values ( ) ) { if ( METHOD_2 ( change , VAR_1 . user , db ) ) { VAR_3 . METHOD_3 ( event ) ; } } METHOD_4 ( event ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ; bind ( VAR_7 class ) . to ( VAR_8 class ) ; install ( new TYPE_2 ( ) { protected void METHOD_1 ( ) { METHOD_4 ( ) . to ( VAR_9 class ) ; } } ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( cfg , VAR_3 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ; METHOD_6 ( VAR_2 , cfg ) ; } 
public void name ( java.lang.String name ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = name ; try { VAR_1 . apply ( rsrc , in ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( name , e ) ; } catch ( java.lang.Exception e ) { throw TYPE_5 . METHOD_1 ( STRING_1 , e ) ; } } 
public java.lang.String METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String name , final java.lang.String VAR_2 , final boolean VAR_3 ) { final java.lang.String VAR_4 = get ( name ) ; java.lang.String VAR_5 = ui . METHOD_2 ( ( VAR_4 != null ? VAR_4 : VAR_2 ) , STRING_1 , VAR_1 ) ; if ( VAR_3 && ( VAR_5 == VAR_2 ) ) { VAR_5 = null ; } if ( ! ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_5 ) ) ) { set ( name , VAR_5 ) ; } return VAR_5 ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < TYPE_3 . Account > ( ) { public void onSuccess ( final TYPE_3 . Account result ) { display ( result . METHOD_3 ( ) ) ; METHOD_4 ( true ) ; } } ) ; } 
public void METHOD_1 ( ) { org.junit.Assert . METHOD_2 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) ) ) ; org.junit.Assert . METHOD_5 ( ( ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( ) ) == ( TYPE_1 . METHOD_3 ( STRING_1 , STRING_3 ) . METHOD_4 ( ) ) ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( VAR_2 , VAR_1 ) ; TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) , VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { for ( int i = 1 ; i < INT_1 ; i ++ ) { java.lang.String p = STRING_1 + i ; METHOD_2 ( p ) ; TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) ; } return null ; } 
private TYPE_1 . Result METHOD_1 ( java.lang.String ref , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . to ( git , ref ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , STRING_1 ) ; try { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_3 ( VAR_2 . METHOD_5 ( ) ) ; final TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ; METHOD_6 ( VAR_4 ) ; assertEquals ( VAR_1 , VAR_5 ) ; } finally { VAR_2 . delete ( ) ; VAR_1 . delete ( ) ; } } 
TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_1 < TYPE_2 > ( ) { private static final long VAR_1 = INT_1 ; public void METHOD_1 ( TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { try { TYPE_4 VAR_4 = new TYPE_4 ( new TYPE_5 ( VAR_3 ) ) ; try { VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_4 . METHOD_3 ( ) ; } finally { VAR_4 . close ( ) ; } } catch ( java.io.IOException err ) { throw new TYPE_6 ( STRING_1 , err ) ; } } } ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_3 ( repo ) ) ; TYPE_3 query = METHOD_4 ( STRING_2 ) . METHOD_5 ( INT_1 ) ; METHOD_6 ( query , change ) ; METHOD_6 ( query . METHOD_7 ( 1 ) ) ; METHOD_6 ( query . METHOD_7 ( INT_2 ) ) ; METHOD_8 ( query . METHOD_7 ( INT_3 ) ) ; METHOD_6 ( query . METHOD_5 ( INT_3 ) . METHOD_7 ( INT_3 ) ) ; } 
private void METHOD_1 ( TYPE_1 i ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_4 , TYPE_5 { TYPE_6 VAR_1 = new TYPE_6 ( new TYPE_6 . Id ( user . getAccountId ( ) , VAR_2 ) , VAR_3 ) ; VAR_4 . apply ( new TYPE_7 ( user . METHOD_2 ( ) , VAR_1 ) , null ) ; } 
public java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.PatchSet.Id > VAR_1 = new TYPE_1 < > ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . add ( cd . change ( ) . currentPatchSetId ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . delete ( ) ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ; TYPE_3 VAR_4 = VAR_5 . METHOD_9 ( VAR_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . METHOD_10 ( ) . METHOD_11 ( ) ) . METHOD_3 ( ) ; } 
private Account . Id user ( java.lang.String name , java.lang.String email ) { final TYPE_1 s = METHOD_1 ( name , email ) ; TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( s . METHOD_5 ( ) . getId ( ) ) ) ) . METHOD_6 ( TYPE_3 . of ( s ) ) ; return s . METHOD_5 ( ) . getId ( ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 , VAR_4 ) ) ; VAR_2 . METHOD_5 ( STRING_1 ) ; TYPE_4 VAR_5 = new TYPE_4 ( ) ; org.eclipse.jgit.lib.ObjectId VAR_6 = METHOD_6 ( VAR_1 , VAR_5 ) ; if ( VAR_5 . get ( ) ) { return null ; } VAR_2 . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_6 ) ) ; return VAR_2 ; } 
public TYPE_1 format ( TYPE_1 out , TYPE_2 ctl , TYPE_3 VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctl . getChange ( ) . currentPatchSetId ( ) ; return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , VAR_1 , psId , VAR_3 ) ) ; } 
protected TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( ) ; } catch ( TYPE_3 . OrmException e ) { throw new TYPE_2 ( INT_1 , STRING_1 ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( INT_1 , STRING_1 ) ; } } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 { if ( ( VAR_1 ) || ( rsrc . METHOD_1 ( ) ) ) { return VAR_2 . format ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; } throw new TYPE_3 ( rsrc . getName ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( null ) { public TYPE_2 METHOD_2 ( ) { return new TYPE_2 ( ) { public java.util.Set < TYPE_3 > METHOD_3 ( TYPE_4 < TYPE_3 > VAR_1 ) { return null ; } public java.util.Set < TYPE_3 > METHOD_4 ( ) { return null ; } public boolean METHOD_5 ( TYPE_4 < TYPE_3 > VAR_1 ) { return true ; } public boolean contains ( TYPE_3 VAR_2 ) { return true ; } } ; } } ; } 
private static TYPE_1 METHOD_1 ( ) throws TYPE_2 { final TYPE_3 factory = TYPE_3 . METHOD_2 ( ) ; factory . METHOD_3 ( false ) ; factory . METHOD_4 ( false ) ; factory . METHOD_5 ( true ) ; factory . METHOD_6 ( true ) ; final TYPE_1 VAR_1 = factory . METHOD_7 ( ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ; java.lang.String key = change . getKey ( ) . get ( ) ; METHOD_4 ( STRING_2 ) ; for ( int i = 0 ; i <= INT_1 ; i ++ ) { java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ; METHOD_4 ( VAR_1 , change ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; TYPE_2 < TYPE_3 > repo = METHOD_3 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_4 ( repo ) ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_4 ( repo ) ) ; TYPE_1 . METHOD_5 ( 0 , VAR_4 ) ; METHOD_6 ( STRING_2 ) ; METHOD_6 ( STRING_3 , VAR_3 ) ; METHOD_6 ( STRING_4 , VAR_3 ) ; METHOD_6 ( STRING_5 , VAR_3 ) ; METHOD_6 ( STRING_6 , VAR_3 , VAR_2 ) ; } 
public TYPE_1 get ( ) { try { return new TYPE_2 ( server ) ; } catch ( final TYPE_3 VAR_1 ) { return new TYPE_1 ( ) { public void METHOD_1 ( TYPE_4 . Account account , TYPE_5 info ) throws TYPE_3 { throw VAR_1 ; } } ; } } 
public static com.google.gerrit.reviewdb.client.Change . Id METHOD_1 ( java.lang.String ref ) { int VAR_1 = ( ref . METHOD_2 ( TYPE_1 ) ) + ( TYPE_1 . length ( ) ) ; int VAR_2 = TYPE_2 . METHOD_3 ( ref , VAR_1 ) ; java.lang.String id = ref . METHOD_4 ( VAR_1 , VAR_2 ) ; return new com.google.gerrit.reviewdb.client.Change . Id ( TYPE_3 . METHOD_5 ( id ) ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > in ) { java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( in . size ( ) ) ; for ( TYPE_1 m : in ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( TYPE_2 c : VAR_1 . METHOD_3 ( ) ) { r . add ( new TYPE_1 ( c , VAR_2 ) ) ; } } else { r . add ( m ) ; } } return r ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . HttpServletResponse res ) throws java.io.IOException { byte [ ] msg = TYPE_3 . message ( VAR_1 ) ; res . METHOD_2 ( TYPE_4 . METHOD_3 ( ) , STRING_1 ) ; res . METHOD_4 ( msg . length ) ; try { TYPE_5 . METHOD_5 ( res ) ; } finally { TYPE_6 out = res . METHOD_6 ( ) ; try { out . METHOD_7 ( msg ) ; } finally { out . close ( ) ; } } } 
public java.lang.String METHOD_1 ( ) { final java.lang.String s = METHOD_2 ( ) ; if ( ( s == null ) || ( ( s . length ( ) ) == 0 ) ) { return STRING_1 ; } final java.lang.String [ ] VAR_1 = s . METHOD_3 ( STRING_2 ) ; if ( ( VAR_1 . length ) < INT_1 ) { return STRING_1 ; } return VAR_1 [ 2 ] ; } 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id ; try { id = TYPE_2 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_3 VAR_2 ) { return null ; } try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_3 ( ) ; try { return auth ( db . METHOD_4 ( ) . get ( id ) ) ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_5 ( ) . log ( STRING_1 , e ) ; return null ; } } 
public void close ( ) throws java.io.IOException { try { TYPE_1 VAR_1 = METHOD_1 ( ) ; if ( VAR_1 != null ) { while ( ( VAR_1 . METHOD_2 ( ) ) != ( - 1 ) ) ; } } finally { VAR_2 . close ( ) ; } } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( ) ; VAR_2 . add ( new TYPE_3 ( TYPE_4 . METHOD_2 ( ) ) ) ; VAR_3 = new TYPE_5 ( STRING_1 , STRING_1 ) ; VAR_2 . add ( VAR_3 ) ; VAR_1 . add ( VAR_2 ) ; } 
private static java.util.List < com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( TYPE_1 . ChangeInfo info ) { TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_2 ( ) . values ( ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; java.util.List < com.google.gerrit.reviewdb.client.PatchSet > r = new java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchSet > ( VAR_1 . length ( ) ) ; for ( TYPE_3 VAR_2 : TYPE_4 . METHOD_4 ( VAR_1 ) ) { r . add ( TYPE_5 . METHOD_5 ( info , VAR_2 ) ) ; } return r ; } 
public boolean METHOD_1 ( java.io.IOException VAR_1 , int VAR_2 , TYPE_1 VAR_3 ) { if ( ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) || ( VAR_1 instanceof TYPE_2 ) ) { return false ; } METHOD_3 ( VAR_1 . getMessage ( ) ) ; try { TYPE_3 . METHOD_4 ( cfg . METHOD_5 ( ) ) ; } catch ( TYPE_4 e ) { TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) ; return false ; } return true ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) ; for ( java.lang.String VAR_2 : TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) ) { org.junit.Assert.assertEquals ( TYPE_5 . METHOD_4 ( ) . get ( VAR_2 ) . METHOD_6 ( ) , VAR_1 . get ( VAR_2 ) . METHOD_6 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_1 t ) { if ( t . METHOD_2 ( ) ) return new TYPE_2 ( ( ( this . METHOD_3 ( ) ) - ( t . METHOD_3 ( ) ) ) ) ; return new TYPE_3 ( ( ( this . VAR_1 ) - ( t . METHOD_4 ( ) ) ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String query , final int VAR_2 ) { final int n = ( VAR_2 <= 0 ) ? INT_1 : TYPE_3 . METHOD_2 ( VAR_2 , INT_1 ) ; return TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( query ) , n ) ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = TYPE_8 . of ( VAR_1 . METHOD_1 ( ) . toString ( ) ) ; return delete . get ( ) . apply ( VAR_1 , in ) ; } 
public TYPE_1 METHOD_1 ( int index , TYPE_2 VAR_1 ) { int VAR_2 = METHOD_2 ( index , false , VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } return METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( VAR_3 . METHOD_2 ( VAR_4 class ) ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_5 class ) ) ; modules.add ( TYPE_3 . METHOD_3 ( ) ) ; modules.add ( TYPE_4 . METHOD_3 ( ) ) ; return VAR_3 . METHOD_4 ( modules ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) ; TYPE_2 VAR_2 = METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_3 class ) ; TYPE_3 . METHOD_7 ( user , VAR_2 ) ; METHOD_8 ( STRING_2 , admin , user ) ; r . METHOD_9 ( ) ; org.junit.Assert.assertEquals ( VAR_4 , METHOD_10 ( STRING_1 ) ) ; METHOD_8 ( STRING_2 , admin ) ; } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; id = TYPE_2 . METHOD_2 ( VAR_4 ) ; TYPE_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) . METHOD_5 ( ( STRING_1 + ( VAR_4 ) ) ) ; change = new com.google.gerrit.reviewdb.client.Change ( null , id , null , null , TYPE_4 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; TYPE_4 VAR_2 = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ; VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
private static TYPE_1 METHOD_1 ( final java.lang.String token ) { if ( TYPE_2 . METHOD_2 ( ) ) { return new TYPE_3 ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ; } else { TYPE_1 r = new TYPE_3 ( null ) ; r . METHOD_4 ( true ) ; return r ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client . AccountGroup VAR_1 = VAR_2 . get ( new TYPE_1 . NameKey ( STRING_1 ) ) ; METHOD_1 ( ( STRING_2 + ( VAR_1 . METHOD_2 ( ) . get ( ) ) ) , VAR_1 ) ; METHOD_1 ( ( STRING_2 + ( VAR_1 . getName ( ) ) ) , VAR_1 ) ; METHOD_1 ( ( STRING_2 + ( VAR_1 . getId ( ) . get ( ) ) ) , VAR_1 ) ; } 
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id , TYPE_2 > i : METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; TYPE_3 < TYPE_2 > VAR_2 = VAR_1 . get ( id ) ; if ( VAR_2 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_2 . get ( ) ) ; } else { i . delete ( id ) ; } } METHOD_5 ( id . get ( ) ) ; TYPE_4 . METHOD_6 ( id ) ; } 
private static boolean METHOD_1 ( TYPE_1 view , java.lang.String name ) { java.util.List < java.lang.String > values = view . METHOD_2 ( ) . get ( name ) ; return ( ! ( values . isEmpty ( ) ) ) && ( ( values . get ( 0 ) . equals ( STRING_1 ) ) || ( values . get ( 0 ) . equals ( STRING_2 ) ) ) ; } 
private static void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; for ( java.lang.String s : new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 } ) { VAR_1 . METHOD_3 ( s ) ; } TYPE_2 . METHOD_4 ( STRING_8 , VAR_1 ) ; TYPE_2 . METHOD_5 ( STRING_9 , STRING_10 ) ; TYPE_2 . METHOD_5 ( STRING_11 , STRING_12 ) ; TYPE_2 . METHOD_5 ( STRING_13 , STRING_10 ) ; TYPE_2 . METHOD_5 ( STRING_14 , STRING_12 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.Set < TYPE_2 > VAR_2 ) { if ( VAR_2 != null ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } VAR_1 . append ( CHAR_3 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } 
public static void METHOD_1 ( TYPE_1 a , TYPE_2 VAR_1 ) { org.junit.Assert . METHOD_2 ( ( ( VAR_2 . get ( ) ) == ( VAR_3 ) ) ) ; org.junit.Assert.assertEquals ( VAR_4 , VAR_1 . name ) ; org.junit.Assert.assertEquals ( a . email , VAR_1 . email ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String projectName , java.lang.String revision , java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { return METHOD_2 ( revision . METHOD_3 ( STRING_1 , METHOD_4 ( projectName ) ) . METHOD_3 ( STRING_2 , METHOD_4 ( revision ) ) . METHOD_3 ( STRING_3 , METHOD_4 ( VAR_1 ) ) . toString ( ) ) ; } return null ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( STRING_2 + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ; } 
public java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( VAR_2 . get ( VAR_1 ) ) == null ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_2 . put ( VAR_1 , VAR_3 . METHOD_1 ( ) ) ; } return VAR_2 . get ( VAR_1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; display ( result ) ; } } ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { for ( TYPE_3 VAR_3 : VAR_2 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) ; } } VAR_4 . put ( VAR_1 . METHOD_7 ( ) , VAR_1 ) ; } 
private void METHOD_1 ( ) { if ( ( db ) != null ) { try { final TYPE_1 ps = METHOD_2 ( ) ; if ( ps != null ) { for ( final TYPE_2 w : METHOD_3 ( ) ) { if ( w . METHOD_4 ( ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } } } catch ( TYPE_3 . OrmException err ) { } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 , VAR_7 , VAR_4 ) . to ( VAR_8 ) . to ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_10 ( VAR_11 ) . METHOD_9 ( VAR_3 ) ; } 
public java.lang.String METHOD_1 ( final TYPE_1 . NameKey project , final TYPE_2 . PatchSet ps ) { final TYPE_3 r = new TYPE_3 ( ) ; TYPE_4 . p ( r , project ) ; TYPE_4 . METHOD_2 ( r , ps ) ; return ( VAR_1 ) + r ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_10 ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 in = new TYPE_2 ( ) ; VAR_2 = VAR_1 ; VAR_3 = VAR_4 . FALSE ; TYPE_3 r = VAR_5 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ; org.junit.Assert.assertEquals ( VAR_6 , r . METHOD_2 ( ) ) ; r . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , admin , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . METHOD_5 ( VAR_6 , VAR_7 , admin ) . to ( VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 cfg , TYPE_3 VAR_1 , TYPE_4 . Factory VAR_2 , TYPE_5 < TYPE_6 > VAR_3 , TYPE_7 VAR_4 ) throws TYPE_8 { TYPE_1 s = new TYPE_1 ( cfg , null , VAR_1 , VAR_2 , VAR_3 , null , null , null ) ; for ( TYPE_9 view : TYPE_10 . values ( ) ) { s . METHOD_2 ( view , VAR_4 ) ; } return s ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , a . METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) + VAR_2 ) , a . toString ( ) ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet , final TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . line VAR_2 ; TYPE_4 name ; TYPE_5 VAR_3 ; VAR_4 . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ; } 
public java.lang.String METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( 0 , ( ( VAR_2 . METHOD_3 ( STRING_1 ) ) - 1 ) ) ; java.lang.String VAR_3 = VAR_2 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( VAR_4 , VAR_1 , VAR_3 ) ; return VAR_4 ; } 
private boolean METHOD_1 ( final int i ) { final int s = VAR_1 . get ( i ) . METHOD_2 ( ) ; final int e = VAR_1 . get ( ( i - 1 ) ) . METHOD_3 ( ) ; return ( s - e ) <= ( 2 * ( VAR_2 ) ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws TYPE_2 { try { return VAR_2 . get ( VAR_3 . get ( ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getParentKey ( ) , ( ( VAR_1 . get ( ) ) - 1 ) ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e . getMessage ( ) ) ; } } 
public void METHOD_1 ( ) { assert ( VAR_1 ) != null ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_4 ( VAR_4 , VAR_2 . METHOD_5 ( ) ) ; } else { assert ( VAR_5 ) != null ; VAR_5 . METHOD_6 ( ) ; } } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws TYPE_1 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet ps = db . patchSets ( ) . get ( psId ) ; if ( ps == null ) { throw new TYPE_1 ( ) ; } try { return org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ps . getRevision ( ) . get ( ) ) ; } catch ( TYPE_2 e ) { VAR_1 . error ( ( ( STRING_1 + psId ) + STRING_2 ) ) ; throw new TYPE_1 ( ) ; } } 
private static java.lang.String METHOD_1 ( java.lang.String branch , java.lang.String topic ) { if ( ( topic != null ) && ( ! ( topic . isEmpty ( ) ) ) ) { return ( ( branch + STRING_1 ) + topic ) + STRING_2 ; } else { return branch ; } } 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Set < TYPE_1 > VAR_1 ) throws java.io.IOException , TYPE_2 { java.util.Map < TYPE_1 , byte [ ] > VAR_2 = new TYPE_3 < > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . put ( VAR_3 , null ) ; } return TYPE_4 . METHOD_1 ( repo , message , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_2 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ; } 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ; try { METHOD_3 ( db ) ; } finally { db . close ( ) ; } } synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } return null ; } 
public void METHOD_1 ( final int VAR_1 ) { assert ( 0 <= VAR_1 ) && ( VAR_1 <= INT_1 ) ; value = VAR_1 ; VAR_2 . METHOD_2 ( ( ( STRING_1 + ( 2 * VAR_1 ) ) + STRING_2 ) ) ; msg . METHOD_3 ( ( ( ( VAR_3 ) + VAR_1 ) + STRING_3 ) ) ; } 
public static < TYPE_1 > void setOf ( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . Key < com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > > key = ( ( TYPE_4 . Key < com.google.gerrit.extensions.registration.DynamicSet < TYPE_1 > > ) ( TYPE_5 . get ( TYPE_6 . METHOD_1 ( VAR_2 . DynamicSet class , VAR_1 . METHOD_2 ( ) ) ) ) ) ; binder . bind ( key ) . METHOD_3 ( new TYPE_7 < TYPE_1 > ( VAR_1 ) ) . in ( VAR_3 ) ; } 
protected com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 { com.google.gerrit.reviewdb.client.Change c = TYPE_2 . METHOD_1 ( project , VAR_1 . getAccountId ( ) ) ; TYPE_3 u = METHOD_2 ( c , VAR_1 ) ; u . METHOD_3 ( c . METHOD_4 ( ) ) ; u . METHOD_5 ( c . METHOD_6 ( ) . get ( ) ) ; u . commit ( ) ; return c ; } 
public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_2 r = ( ( TYPE_2 ) ( VAR_1 ) ) ; return ( ( ( ( TYPE_3 . equals ( name , r . name ) ) && ( TYPE_3 . equals ( id , r . id ) ) ) && ( TYPE_3 . equals ( type , r . type ) ) ) && ( TYPE_3 . equals ( VAR_2 , VAR_3 ) ) ) && ( TYPE_3 . equals ( VAR_4 , VAR_5 ) ) ; } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_1 = METHOD_3 ( repo , VAR_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( VAR_1 ) ; TYPE_3 VAR_4 = METHOD_3 ( repo , VAR_5 ) ; com.google.gerrit.reviewdb.client.Change VAR_6 = insert ( VAR_4 ) ; METHOD_4 ( STRING_2 , VAR_3 ) ; METHOD_4 ( STRING_3 , VAR_3 ) ; METHOD_4 ( STRING_4 , VAR_3 ) ; METHOD_4 ( STRING_5 , VAR_6 ) ; METHOD_4 ( STRING_6 , VAR_6 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; } if ( ( VAR_2 . METHOD_4 ( event ) ) && ( ( VAR_3 ) > 0 ) ) { TYPE_2 . METHOD_5 ( STRING_1 , VAR_3 ) ; VAR_3 = 0 ; } else if ( ( ( VAR_3 ) % INT_1 ) == 0 ) { TYPE_2 . error ( STRING_2 , VAR_3 ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) , STRING_1 ) ; int e = VAR_1 . METHOD_4 ( CHAR_1 ) ; TYPE_2 . METHOD_2 ( ( e >= 0 ) , STRING_2 , VAR_1 ) ; return new TYPE_1 ( VAR_1 . METHOD_5 ( 0 , e ) , TYPE_4 . METHOD_6 ( VAR_1 . METHOD_5 ( ( e + 1 ) ) , VAR_1 . length ( ) ) ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( STRING_1 ) ; name = new TYPE_1 . NameKey ( STRING_2 ) ; VAR_2 = METHOD_3 ( ) ; VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 . Repository class ) ; VAR_5 = TYPE_2 . METHOD_4 ( VAR_6 class ) ; VAR_7 = TYPE_2 . METHOD_4 ( VAR_8 . Factory class ) ; VAR_9 = TYPE_2 . METHOD_4 ( VAR_10 class ) ; VAR_11 = new java.util.ArrayList < TYPE_3 > ( ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { TYPE_3 VAR_1 = VAR_2 . get ( req . METHOD_2 ( ) ) ; if ( VAR_1 == null ) { rsp . METHOD_3 ( VAR_3 ) ; return ; } switch ( VAR_1 . METHOD_4 ( ) ) { case VAR_4 : METHOD_5 ( VAR_1 , req , rsp ) ; break ; case VAR_5 : METHOD_6 ( VAR_1 , req , rsp ) ; break ; default : rsp . METHOD_3 ( VAR_3 ) ; break ; } } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; VAR_1 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . revision ( r . METHOD_3 ( ) . name ( ) ) . METHOD_1 ( ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Exception error ) { if ( VAR_2 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_4 ( ) . getName ( ) , error ) ) ; } else { VAR_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_4 ( ) . getName ( ) , error . getMessage ( ) ) ; } } 
private boolean METHOD_1 ( ) { if ( ( TYPE_1 . equals ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { if ( ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( VAR_2 . METHOD_5 ( ) ) ) ) { return false ; } } return ( METHOD_6 ( VAR_3 ) ) && ( METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = new TYPE_2 ( TYPE_3 . of ( TYPE_4 . METHOD_3 ( STRING_3 ) ) , VAR_3 ) ; org.junit.Assert.assertEquals ( STRING_4 , VAR_2 . format ( VAR_1 ) ) ; } 
public void run ( ) { try { final TYPE_1 cm = VAR_1 . create ( VAR_2 ) ; cm . METHOD_1 ( VAR_3 . getAccountId ( ) ) ; cm . METHOD_2 ( VAR_4 , result . info ) ; cm . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_5 = VAR_4 . getId ( ) ; VAR_6 . error ( ( STRING_1 + VAR_5 ) , e ) ; } } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != ( this ) ) return VAR_2 . METHOD_1 ( VAR_1 ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return VAR_3 ; if ( ( this ) == VAR_1 ) return VAR_4 ; int VAR_5 = ( this . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; if ( VAR_5 != 0 ) return VAR_5 ; throw new TYPE_3 ( STRING_1 ) ; } 
private static < C extends TYPE_1 > C METHOD_1 ( C c , java.lang.String path , TYPE_2 VAR_1 , int line , java.lang.String message ) { c . path = path ; VAR_2 = VAR_1 ; c . line = ( line != 0 ) ? line : null ; c . message = message ; if ( line != 0 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_4 = 1 ; VAR_5 = 1 ; VAR_6 = 1 ; VAR_7 = INT_1 ; VAR_8 = VAR_3 ; } return c ; } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class , VAR_2 ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_1 class ) ; bind ( VAR_5 class ) . METHOD_3 ( this ) ; bind ( VAR_6 class ) . METHOD_3 ( config . METHOD_4 ( ) ) ; install ( new TYPE_1 ( ) . METHOD_5 ( VAR_7 . Factory class ) ) ; } 
protected void METHOD_1 ( ) { rpc ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; install ( new TYPE_3 ( ) ) ; install ( new TYPE_4 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 rsrc ) { TYPE_2 user = ( ( TYPE_2 ) ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; try { VAR_1 . METHOD_4 ( change , user . METHOD_5 ( ) , rsrc . METHOD_6 ( ) , message . getMessage ( ) , VAR_2 , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3 . METHOD_7 ( STRING_1 , e ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 r = VAR_2 . get ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , new TYPE_3 < java.util.List < TYPE_1 > > ( ) { } . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( STRING_1 ) . getChangeId ( ) ; java.util.Map < java.lang.String , TYPE_1 > VAR_1 = METHOD_3 ( changeId ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { boolean VAR_1 = ( VAR_2 . METHOD_2 ( VAR_3 class ) ) == null ; boolean VAR_4 = ( ( VAR_2 . METHOD_2 ( VAR_5 class ) ) == null ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_2 ( VAR_5 class ) ) == null ) ; METHOD_4 ( config ( VAR_2 ) , VAR_1 , VAR_4 ) ; base . METHOD_1 ( ) ; METHOD_5 ( ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ; if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_3 ( ctx ) ; return ; } if ( c . currentPatchSetId ( ) . equals ( psId ) ) { c . METHOD_4 ( METHOD_5 ( ctx ) ) ; } } 
public TYPE_1 get ( java.lang.String name , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 , TYPE_2 VAR_5 ) throws TYPE_5 { TYPE_6 VAR_6 = VAR_7 . get ( ) ; return new TYPE_1 ( METHOD_1 ( VAR_1 ) , VAR_4 , VAR_2 , VAR_1 , VAR_3 , new TYPE_7 ( METHOD_1 ( VAR_1 ) , VAR_6 , VAR_1 ) , VAR_5 , VAR_6 . METHOD_2 ( ) ) ; } 
private void METHOD_1 ( final TYPE_1 . Change change , final TYPE_2 . Id psId , final TYPE_3 . Id VAR_1 , final TYPE_4 . Id VAR_2 , final TYPE_1 . ReviewDb db , final TYPE_5 VAR_3 ) throws TYPE_6 . OrmException { final TYPE_1 . PatchSetApproval VAR_4 = new TYPE_1 . PatchSetApproval ( new TYPE_7 . Key ( psId , VAR_1 , VAR_2 ) , ( ( short ) ( 0 ) ) ) ; VAR_4 . METHOD_2 ( change ) ; db . METHOD_3 ( ) . insert ( java.util.Collections.singleton ( VAR_4 ) , VAR_3 ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String name = VAR_1 . getName ( ) ; if ( name . METHOD_2 ( STRING_1 ) ) { name = name . METHOD_3 ( 0 , name . METHOD_4 ( CHAR_1 ) ) ; } int VAR_2 = name . METHOD_4 ( CHAR_1 ) ; return 0 < VAR_2 ? name . METHOD_3 ( 0 , VAR_2 ) : name ; } 
public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { com.google.gerrit.reviewdb.client.Account.Id id = METHOD_2 ( ) . METHOD_4 ( ) . getAccountId ( ) ; return id . equals ( getChange ( ) . METHOD_5 ( ) ) ; } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo in = new TYPE_1 . ChangeInfo ( ) ; in . branch = VAR_1 ; VAR_2 = STRING_1 ; in . project = project . get ( ) ; TYPE_1 . ChangeInfo info = VAR_3 . changes ( ) . create ( in ) . get ( ) ; org.junit.Assert.assertEquals ( in . project , info . project ) ; org.junit.Assert.assertEquals ( in . branch , info . branch ) ; org.junit.Assert.assertEquals ( VAR_2 , VAR_4 ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_3 ( final TYPE_3 result ) { } protected void METHOD_4 ( ) { TYPE_4 . METHOD_5 ( VAR_2 , true ) ; } } ) ; } 
protected TYPE_1 . Result METHOD_1 ( TYPE_2 git , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . to ( git , STRING_1 ) ; } 
TYPE_1 METHOD_1 ( final TYPE_2 cm ) { return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_2 ( ) . METHOD_3 ( ) ) { cm . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ; } else { METHOD_5 ( ) . METHOD_6 ( cm , VAR_1 ) . run ( ) ; } } } ; } 
private boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_2 ; } else { final java.lang.StringBuilder msg = new java.lang.StringBuilder ( ) ; msg . append ( STRING_1 ) ; msg . append ( STRING_2 ) ; if ( VAR_2 ) { msg . append ( STRING_3 ) ; } else { msg . append ( STRING_4 ) ; msg . append ( STRING_5 ) ; } msg . append ( STRING_6 ) ; return VAR_1 . METHOD_3 ( msg . toString ( ) , name ) ; } } 
public org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 ) { return TYPE_1 . getRevision ( ) ; } else if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { return null ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_3 ( METHOD_4 ( ) ) ) { TYPE_2 ref = repo . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getRefName ( ) ) ; return ref != null ? ref . METHOD_7 ( ) : null ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 , 1 ) ; TYPE_2 update = METHOD_3 ( c , VAR_1 ) ; update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) ; update . commit ( ) ; org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) ; METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( STRING_2 , VAR_4 . METHOD_5 ( VAR_1 ) ) ; METHOD_6 ( VAR_1 ) ; VAR_3 . close ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 event = new TYPE_1 ( VAR_1 ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey p : VAR_2 . METHOD_2 ( ) ) { long size = VAR_3 . get ( p ) . get ( ) ; event . METHOD_3 ( size , p . get ( ) ) ; } return event ; } 
public static void METHOD_1 ( int id , java.lang.String commit , java.lang.String base , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . create ( ) ; VAR_2 . METHOD_2 ( base ) ; TYPE_4 . METHOD_3 ( id , commit , STRING_1 ) . METHOD_4 ( VAR_2 , VAR_1 ) ; } 
private static java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 req ) { java.util.Set < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.String [ ] values = req . METHOD_3 ( STRING_1 ) ; if ( values != null ) { VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) ; } values = req . METHOD_3 ( STRING_2 ) ; if ( values != null ) { VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( values ) ) ; } return VAR_1 ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( org.eclipse.jgit.lib.ObjectId [ ] VAR_1 , long [ ] VAR_2 , boolean [ ] VAR_3 ) { java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList ( VAR_1 . length ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_4 . add ( new TYPE_1 ( VAR_1 [ i ] . name ( ) , new TYPE_2 ( VAR_2 [ i ] ) , VAR_3 [ i ] ) ) ; } return VAR_4 ; } 
public static boolean METHOD_1 ( final TYPE_1 . Id VAR_1 , final TYPE_2 . NameKey VAR_2 ) { final TYPE_3 e = TYPE_4 . METHOD_2 ( ) . get ( VAR_2 ) ; if ( e == null ) { return false ; } final java.util.Set < TYPE_5 . Id > VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; return TYPE_6 . METHOD_5 ( VAR_3 , e , VAR_4 , ( ( short ) ( 1 ) ) , true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 . getAccountId ( ) , 1 ) ; TYPE_2 update = METHOD_3 ( c , VAR_1 ) ; update . METHOD_4 ( ( STRING_1 + STRING_2 ) ) ; update . commit ( ) ; org.junit.Assert.assertEquals ( STRING_3 , update . getRefName ( ) ) ; METHOD_5 ( ( STRING_4 + ( ( ( ( STRING_5 + STRING_1 ) + STRING_6 ) + STRING_5 ) + STRING_7 ) ) , update . getRevision ( ) ) ; } 
public void run ( ) { try { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ; try { java.lang.String line ; while ( ( line = VAR_1 . METHOD_1 ( ) ) != null ) { VAR_2 . error ( ( STRING_2 + line ) ) ; } } finally { VAR_1 . close ( ) ; } } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_3 , e ) ; } } 
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { METHOD_2 ( ) ; METHOD_3 ( ctx ) ; ctx . METHOD_4 ( new TYPE_4 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_5 ( ) , commit , METHOD_6 ( ) . METHOD_7 ( ) , VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk VAR_1 , TYPE_2 notes , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ) { return METHOD_1 ( db , VAR_1 , notes , patchSet ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_2 . error ( STRING_1 , e ) ; return new TYPE_1 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_3 ) + STRING_1 ) ) ; TYPE_1 input = new TYPE_1 ( ) ; input . ref = STRING_2 ; VAR_4 . METHOD_3 ( VAR_5 class ) ; VAR_4 . METHOD_4 ( STRING_3 ) ; METHOD_5 ( input . ref ) . create ( input ) ; } 
public void submit ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_1 ( ) ; TYPE_4 VAR_1 = VAR_2 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ; VAR_1 . submit ( ) ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_1 ( ) throws TYPE_1 , com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.reviewdb.client.Project > VAR_1 = METHOD_2 ( ) ; final java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > VAR_2 = new java.util.ArrayList < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Project p : VAR_1 ) { VAR_2 . add ( p . METHOD_3 ( ) ) ; } return VAR_2 ; } 
public TYPE_1 METHOD_1 ( ) { final TYPE_1 user = VAR_1 . METHOD_1 ( ) ; if ( user . METHOD_2 ( ) ) { TYPE_2 VAR_2 = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ; VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) ; return VAR_2 ; } return user ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( true ) ; VAR_2 . METHOD_5 ( cd ) ; VAR_2 . METHOD_6 ( id ) ; TYPE_2 . METHOD_7 ( ) ; METHOD_8 ( ) ; } 
public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_3 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) ; } VAR_2 . METHOD_1 ( ) ; VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_5 ) ; VAR_5 = null ; } 
private static void METHOD_1 ( final java.lang.String token , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_1 . Key id , final TYPE_2 VAR_2 , final int line , final boolean edit ) { TYPE_3 . METHOD_2 ( new TYPE_4 ( token ) { public void onSuccess ( ) { TYPE_5 . display ( token , ( edit ? new TYPE_6 ( id , line ) : new TYPE_7 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ) ; } } ) ; } 
private java.util.Map < java.lang.String , java.util.List < TYPE_1 > > METHOD_1 ( TYPE_2 config ) { java.util.Map < java.lang.String , java.util.List < TYPE_1 > > VAR_1 = TYPE_3 . METHOD_2 ( ) ; java.util.Set < java.lang.String > VAR_2 = config . METHOD_3 ( VAR_3 , true ) ; for ( java.lang.String key : VAR_2 ) { if ( key . METHOD_4 ( STRING_1 ) ) { java.lang.String VAR_4 = config . METHOD_5 ( VAR_3 , null , key ) ; VAR_1 . put ( key , METHOD_6 ( VAR_4 ) ) ; } } return VAR_1 ; } 
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) throws TYPE_1 , java.io.IOException , TYPE_2 { final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_3 ( VAR_2 ) ; if ( ! VAR_1 ) { METHOD_4 ( VAR_2 ) ; } } 
public void METHOD_1 ( final com.google.gerrit.reviewdb.client.Project p ) { VAR_1 . METHOD_2 ( ) ; try { TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > n = TYPE_2 . METHOD_3 ( VAR_2 . get ( VAR_3 ) ) ; n . METHOD_1 ( p . METHOD_4 ( ) ) ; VAR_2 . put ( VAR_3 , java.util.Collections . METHOD_5 ( n ) ) ; } catch ( TYPE_3 e ) { VAR_4 . METHOD_6 ( STRING_1 , e ) ; } finally { VAR_1 . METHOD_7 ( ) ; } METHOD_8 ( p ) ; } 
public void METHOD_1 ( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { VAR_1 = db . METHOD_2 ( ) ; try { revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; VAR_1 = null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_5 ( VAR_11 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_3 get = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ; if ( VAR_2 != null ) { get . METHOD_3 ( VAR_2 ) ; } return METHOD_4 ( get ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( ) , new TYPE_8 ( repo . METHOD_2 ( ) ) , new TYPE_9 ( ) ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 r , TYPE_2 VAR_1 , TYPE_2 d ) { VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 cfg = VAR_1 . METHOD_3 ( ) ; if ( ( VAR_2 . isEmpty ( ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) { VAR_2 = TYPE_3 . METHOD_2 ( d ) ; } return r ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit c = rw . parseCommit ( id ) ; rw . METHOD_3 ( c ) ; return c ; } finally { } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet ps ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db . get ( ) , project , ps . getId ( ) . getParentKey ( ) ) ; TYPE_4 ctl = cd . METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( ctl , ps ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . METHOD_2 ( id ) ; index . METHOD_3 ( VAR_1 . get ( id ) ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( ( STRING_1 + VAR_3 ) ) ; } VAR_4 . METHOD_5 ( ) ; } catch ( java.lang.Exception e ) { VAR_5 . METHOD_5 ( ) ; throw e ; } return null ; } 
protected void METHOD_1 ( ) throws java.io.IOException { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = VAR_2 . TRUE ; TYPE_2 r = VAR_3 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , in ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; r . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( type == ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_6 ( ) ; } else { new TYPE_2 ( STRING_1 , type , VAR_1 ) . METHOD_1 ( ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_5 . METHOD_8 ( ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_3 ) ; assertThat ( VAR_5 ) . METHOD_9 ( STRING_1 , VAR_2 ) . METHOD_10 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 , VAR_4 ) . to ( VAR_9 ) . METHOD_11 ( VAR_10 ) ; } 
private void METHOD_1 ( int VAR_1 , TYPE_1 . ChangeInfo c ) { TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( ( ( int ) ( VAR_4 ) ) ) . isEqualTo ( ( - 1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . name ) . isEqualTo ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_5 . get ( 0 ) . value . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_2 ) ) ) ; METHOD_2 ( b , b . append ( new TYPE_2 ( STRING_3 ) ) ) ; assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , final TYPE_4 < TYPE_1 > VAR_3 ) { final TYPE_5 < TYPE_1 > VAR_4 = METHOD_1 ( name , VAR_1 , VAR_2 ) ; METHOD_2 ( VAR_4 , new TYPE_6 ( ) { public void run ( ) { VAR_4 . set ( VAR_3 . get ( ) ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; VAR_1 = VAR_2 ; METHOD_2 ( user ) ; try { project ( ) . METHOD_3 ( input ) ; org.junit.Assert . METHOD_4 ( STRING_1 ) ; } catch ( TYPE_2 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( VAR_2 ) ) ; } METHOD_2 ( admin ) ; METHOD_7 ( VAR_2 ) ; } 
private void walk ( final org.eclipse.jgit.revwalk.RevWalk rw , final TYPE_1 VAR_1 , final org.eclipse.jgit.revwalk.RevCommit VAR_2 , final java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_3 ) throws java.io.IOException , TYPE_2 , TYPE_3 { rw . METHOD_1 ( VAR_1 ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_4 : VAR_3 ) { try { rw . METHOD_2 ( VAR_4 ) ; } catch ( java.io.IOException e ) { } } rw . METHOD_3 ( VAR_2 ) ; org.eclipse.jgit.revwalk.RevCommit c ; while ( ( c = rw . METHOD_4 ( ) ) != null ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; com.google.gerrit.reviewdb.client.PatchSet.Id psId = r . METHOD_3 ( ) ; com.google.gerrit.reviewdb.client.Change . Id id = psId . getParentKey ( ) ; TYPE_2 VAR_1 = METHOD_4 ( psId , user . getId ( ) , TYPE_3 . METHOD_5 ( ) , STRING_1 ) ; METHOD_4 ( psId , null , VAR_1 . METHOD_6 ( ) , STRING_2 ) ; VAR_2 . METHOD_7 ( id ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 account = VAR_2 . METHOD_2 ( VAR_1 ) ; TYPE_3 < TYPE_4 > VAR_3 = account . METHOD_3 ( ) ; for ( TYPE_4 VAR_4 : VAR_3 ) { java.lang.String key = VAR_4 . METHOD_4 ( ) . getKey ( ) . get ( ) ; if ( key . METHOD_5 ( TYPE_5 ) ) { return new TYPE_1 ( key . METHOD_6 ( TYPE_5 . length ( ) ) ) ; } } return null ; } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_6 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_7 . log , e ) ; } } } 
public TYPE_1 < TYPE_2 . NameKey , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_3 < TYPE_2 . NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_4 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd . getId ( ) ) ; } return VAR_1 ; } 
private long METHOD_1 ( TYPE_1 p ) { long VAR_1 = cfg . METHOD_2 ( STRING_1 , STRING_2 , 0 ) ; long VAR_2 = p . METHOD_3 ( ) ; if ( ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ) { return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; } else { return TYPE_2 . METHOD_5 ( VAR_1 , VAR_2 ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 < ? > VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) throws TYPE_3 { TYPE_4 VAR_4 = VAR_1 . git ( ) . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( new TYPE_5 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_2 ) ) ) ; TYPE_6 < TYPE_1 > r = VAR_4 . METHOD_5 ( ) ; return TYPE_7 . METHOD_6 ( r ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ( VAR_1 = ( VAR_2 ) - ( ( TYPE_1 ) ( METHOD_3 ( ) ) ) ) ) ; TYPE_2 . ChangeInfo info = METHOD_4 ( METHOD_5 ( VAR_3 ) ) ; java.lang.String message = VAR_4 . get ( VAR_5 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; } 
public static void METHOD_1 ( final TYPE_1 . Change c ) { long VAR_1 = c . METHOD_2 ( ) . METHOD_3 ( ) ; int id = c . getId ( ) . get ( ) ; c . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_1 , id ) ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( ( VAR_1 ) != null ) { try { VAR_1 . METHOD_2 ( ) . METHOD_3 ( project ) . run ( ) ; } catch ( java.io.IOException e ) { VAR_2 . error ( STRING_1 , e ) ; return false ; } } return true ; } 
private void METHOD_1 ( TYPE_1 p ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { METHOD_2 ( p ) ; TYPE_3 . Result r = METHOD_3 ( STRING_1 ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , null ) ; r = METHOD_3 ( STRING_2 ) ; r . METHOD_4 ( ) ; r . METHOD_5 ( VAR_1 , null ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , java.io.IOException { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_1 = VAR_2 . get ( ctx . METHOD_4 ( ) , commit , psId ) ; ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , METHOD_7 ( ) . METHOD_8 ( ) , VAR_3 ) ) ; } 
void METHOD_1 ( java.lang.String project , java.lang.String ref , TYPE_1 VAR_1 , TYPE_2 status , TYPE_3 . Status VAR_2 ) { TYPE_4 event = new TYPE_4 ( project , ref , TYPE_5 . METHOD_2 ( VAR_1 ) , status , VAR_2 ) ; METHOD_3 ( project , event ) ; } 
private void METHOD_1 ( final int row ) { METHOD_2 ( row ) ; METHOD_3 ( row , 0 , TYPE_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_1 ) ; METHOD_7 ( row , 0 , STRING_1 ) ; } 
private void METHOD_1 ( ) throws TYPE_1 , TYPE_2 . OrmException { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_1 = VAR_2 ; switch ( VAR_3 . METHOD_4 ( ) ) { case VAR_4 : METHOD_5 ( ) ; break ; case VAR_5 : case VAR_6 : case VAR_7 : default : METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; break ; } } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 . METHOD_2 ( ) ) { throw new com.google.gwtorm.server.OrmException ( VAR_2 ) ; } if ( isEmpty ( ) ) { return ; } try ( TYPE_1 VAR_3 = VAR_4 . METHOD_3 ( VAR_5 ) ) { METHOD_4 ( ) ; TYPE_2 . METHOD_1 ( VAR_6 ) ; TYPE_2 . METHOD_1 ( VAR_7 ) ; } finally { close ( ) ; } } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.server.query.change.ChangeData > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . values ( ) ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd ) ; } return VAR_1 ; } 
protected void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } bind ( VAR_1 class ) . to ( VAR_2 class ) ; bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_6 class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String projectName = METHOD_2 ( VAR_1 ) . get ( ) ; java.util.List < TYPE_1 > VAR_2 = new TYPE_2 < > ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . project = projectName ; VAR_2 . add ( VAR_3 ) ; VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_5 = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_5 ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_3 ( ) ; try { VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , new TYPE_4 ( ( ( TYPE_5 . METHOD_5 ( ) ) - ( TYPE_6 . METHOD_6 ( VAR_1 , VAR_7 ) ) ) ) ) ) ; } finally { METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_2 ) ; } } 
protected void METHOD_1 ( final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException , TYPE_3 { rsp . METHOD_2 ( STRING_1 ) ; rsp . METHOD_3 ( STRING_2 ) ; final TYPE_4 out = rsp . METHOD_4 ( ) ; out . METHOD_5 ( STRING_3 ) ; out . METHOD_5 ( STRING_4 ) ; out . METHOD_5 ( STRING_5 ) ; out . METHOD_5 ( STRING_6 ) ; out . METHOD_5 ( STRING_7 ) ; out . close ( ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) ; METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) ; METHOD_5 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_2 ) ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_4 ) . METHOD_4 ( TYPE_1 . change ( STRING_3 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( change , ps ) ) ; try { VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( change ) . get ( ) , VAR_4 , VAR_5 ) ; org.junit.Assert . METHOD_5 ( ) ; } catch ( TYPE_1 e ) { org.junit.Assert.assertEquals ( STRING_1 , e . getMessage ( ) ) ; } } 
protected void METHOD_1 ( ) { try { for ( TYPE_1 w : VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { add ( VAR_2 , w . getAccountId ( ) ) ; } } catch ( TYPE_2 . OrmException err ) { } } 
public static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 in = TYPE_3 . METHOD_2 ( ) ; java.lang.String n = TYPE_4 . METHOD_3 ( VAR_1 ) ; new TYPE_5 ( ( STRING_1 + n ) ) . METHOD_4 ( ) . data ( in ) . put ( VAR_2 ) ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( final org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { TYPE_1 VAR_1 = repo . METHOD_2 ( ) ; try { org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ; VAR_1 . METHOD_3 ( ) ; return id ; } finally { VAR_1 . METHOD_4 ( ) ; } } 
public void onSuccess ( TYPE_1 info ) { VAR_1 = info . METHOD_1 ( ) ; java.lang.String VAR_2 = info . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ! ( STRING_1 . equals ( VAR_2 ) ) ) ) { p . insert ( new TYPE_2 ( VAR_1 ) , 0 ) ; } } 
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , null ) ; return ( VAR_1 != null ) && ( VAR_3 . METHOD_5 ( ) . equals ( VAR_1 . getProject ( ) . METHOD_5 ( ) ) ) ; } 
protected void METHOD_1 ( ) { com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_1 class ) . to ( VAR_2 class ) ; bind ( VAR_3 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_4 ) ) . METHOD_4 ( new TYPE_2 ( STRING_1 , null , VAR_5 , null , false , ( STRING_2 + STRING_3 ) ) ) ; install ( new TYPE_3 ( ) { protected void METHOD_1 ( ) { METHOD_5 ( VAR_6 , VAR_7 . String class , VAR_8 class ) . METHOD_6 ( VAR_9 class ) ; } } ) ; } 
public java.lang.String toString ( ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; b . append ( STRING_1 ) ; if ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) { b . append ( ( ( STRING_2 + ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . get ( ) ) ) + STRING_3 ) ) ; } return b . toString ( ) ; } 
protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } 
private void METHOD_1 ( java.lang.String url , TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 r = VAR_2 . get ( url ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( r . METHOD_6 ( ) , VAR_4 class ) ) ; } 
private void add ( TYPE_1 . ReviewDb db , java.util.List < TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { try { VAR_1 . add ( new TYPE_2 ( VAR_2 . getKey ( ) , TYPE_4 . METHOD_1 ( VAR_2 ) ) ) ; } catch ( TYPE_5 e ) { throw e ; } catch ( TYPE_6 e ) { METHOD_2 ( db , VAR_2 ) ; } } 
private TYPE_1 METHOD_1 ( ) { switch ( TYPE_2 . METHOD_2 ( VAR_1 ) ) { case VAR_2 : return TYPE_3 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; case VAR_4 : return TYPE_5 . METHOD_3 ( TYPE_4 . of ( ) , VAR_3 ) ; default : throw new TYPE_6 ( STRING_1 ) ; } } 
public static void METHOD_1 ( java.lang.String query , int VAR_1 , int VAR_2 , java.util.Set < TYPE_1 > VAR_3 , TYPE_2 < TYPE_3 > VAR_4 ) { TYPE_4 VAR_5 = TYPE_3 . METHOD_2 ( query ) ; if ( VAR_2 > 0 ) { VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ; } TYPE_3 . METHOD_4 ( VAR_5 , VAR_3 ) ; if ( VAR_1 != 0 ) { VAR_5 . METHOD_3 ( STRING_2 , VAR_1 ) ; } VAR_5 . get ( VAR_4 ) ; } 
private boolean METHOD_1 ( ) { try ( org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) ) ) { TYPE_1 ref = git . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; if ( ( ref == null ) || ( ( ref . METHOD_6 ( ) ) == null ) ) { return true ; } return ! ( ref . METHOD_6 ( ) . equals ( config . getRevision ( ) ) ) ; } catch ( java.io.IOException VAR_3 ) { return true ; } } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_2 { TYPE_3 < TYPE_1 > view = TYPE_4 . METHOD_2 ( ) ; TYPE_5 res = new TYPE_5 ( ) ; METHOD_3 ( VAR_1 , view , res ) ; METHOD_4 ( ( STRING_1 + ( res . getStatus ( ) ) ) , ( ( ( res . getStatus ( ) ) < INT_1 ) || ( ( res . getStatus ( ) ) >= INT_2 ) ) ) ; return view . get ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( STRING_1 ) ) ; METHOD_2 ( b , b . METHOD_4 ( ) ) ; assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( ) { TYPE_1 p = new TYPE_1 ( ) ; VAR_1 = VAR_2 ; VAR_3 = true ; VAR_4 = true ; VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; VAR_9 = VAR_10 ; VAR_11 = null ; VAR_12 = VAR_13 ; VAR_14 = VAR_15 ; VAR_16 = VAR_17 ; VAR_18 = false ; VAR_19 = true ; VAR_20 = false ; VAR_21 = VAR_22 ; VAR_23 = true ; VAR_24 = false ; VAR_25 = true ; VAR_26 = false ; VAR_27 = VAR_28 ; return p ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) ) ) ; VAR_2 = TYPE_3 . METHOD_4 ( ) ; if ( TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) ) { VAR_3 . METHOD_7 ( VAR_2 ) ; VAR_1 . add ( TYPE_2 . METHOD_8 ( ) , VAR_2 ) ; } VAR_4 = TYPE_3 . METHOD_4 ( ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; VAR_1 . METHOD_9 ( TYPE_2 . METHOD_10 ( ) , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_2 u = util . user ( VAR_3 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) throws TYPE_3 { try { java.util.List < TYPE_1 > result = new TYPE_4 ( args . rw , VAR_2 , VAR_3 ) . METHOD_1 ( VAR_1 ) ; java.util.Collections . METHOD_1 ( result , VAR_4 ) ; return result ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } for ( TYPE_2 . ReceiveCommand cmd : VAR_1 . METHOD_4 ( ) ) { if ( ( cmd . METHOD_5 ( ) ) == ( VAR_4 ) ) { METHOD_1 ( project , cmd , util . METHOD_6 ( VAR_2 ) ) ; } } } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( change.getId ( ) ) ; org.eclipse.jgit.lib.ObjectId VAR_3 = VAR_1 . METHOD_3 ( repo , VAR_2 ) ; VAR_1 . add ( new TYPE_3 . ReceiveCommand ( VAR_3 , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , VAR_2 ) ) ; } 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change VAR_1 = VAR_2 . get ( ) . changes ( ) . METHOD_2 ( rsrc . getChange ( ) . getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change . getStatus ( ) ) == ( VAR_3 ) ) { change . METHOD_3 ( VAR_4 ) ; TYPE_3 . METHOD_4 ( change ) ; } return change ; } } ) ; return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ; if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return ; } TYPE_7 rsp = new TYPE_7 ( req , ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ; if ( METHOD_3 ( req , rsp ) ) { VAR_3 . METHOD_1 ( req , rsp ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo VAR_1 = new TYPE_1 . ChangeInfo ( ) ; VAR_1 . project = project . get ( ) ; VAR_1 . branch = STRING_1 ; TYPE_2 r = VAR_2 . METHOD_2 ( STRING_2 , VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) ; org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_3 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , admin , VAR_2 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( admin ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . get ( ) . changes ( ) . get ( changeId ) ; if ( c == null ) { throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; } return VAR_1 . create ( c ) ; } 
private java.util.List < com.google.gerrit.reviewdb.client.Change > METHOD_1 ( ) { com.google.gerrit.reviewdb.server.ReviewDb db = null ; try { db = VAR_1 . METHOD_2 ( ) ; return db . changes ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_2 . METHOD_5 ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ; return java.util.Collections . METHOD_6 ( ) ; } finally { if ( db != null ) { db . close ( ) ; } } } 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( change.getId ( ) ) ; cm . METHOD_1 ( change . METHOD_2 ( ) ) ; cm . METHOD_3 ( patchSet , VAR_2 ) ; cm . METHOD_4 ( VAR_3 ) ; cm . METHOD_5 ( reviewers ) ; cm . METHOD_6 ( VAR_4 ) ; cm . METHOD_7 ( ) ; } catch ( java.lang.Exception e ) { VAR_5 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } 
public synchronized void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws java.io.IOException , TYPE_1 { VAR_4 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_2 , VAR_2 ) ; VAR_4 . METHOD_3 ( STRING_1 , VAR_1 , STRING_3 , VAR_3 ) ; VAR_4 . METHOD_4 ( ) ; } 
private java.util.List < ? > METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; try { return TYPE_1 . METHOD_3 ( METHOD_4 ( ) , new TYPE_2 ( TYPE_2 . METHOD_5 ( ) ) , rw , VAR_1 ) ; } finally { rw . METHOD_6 ( ) ; } } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 , TYPE_5 , java.lang.Exception { if ( ( format ) == ( VAR_2 ) ) { TYPE_6 VAR_3 = new TYPE_6 ( ) ; display ( VAR_3 ) ; return TYPE_7 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) ; } format = VAR_4 ; return display ( null ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , com.google.gwtorm.server.OrmException , TYPE_5 { java.util.List < com.google.gerrit.reviewdb.client.Change > changes = METHOD_2 ( id . METHOD_3 ( ) ) ; if ( ( changes . size ( ) ) != 1 ) { throw new TYPE_4 ( id ) ; } TYPE_6 VAR_2 ; try { VAR_2 = VAR_3 . METHOD_4 ( changes . get ( 0 ) ) ; } catch ( TYPE_7 e ) { throw new TYPE_4 ( id ) ; } return new TYPE_1 ( VAR_2 ) ; } 
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( ) { final java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ( ( reviewers . size ( ) ) + ( VAR_2 . size ( ) ) ) ) ; VAR_1 . METHOD_2 ( reviewers ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; return java.util.Collections . METHOD_3 ( VAR_1 ) ; } 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = TYPE_1 . METHOD_2 ( project , VAR_1 ) ; db . changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; TYPE_2 u = VAR_2 . create ( VAR_3 . METHOD_3 ( c , VAR_4 . create ( VAR_1 ) ) ) ; u . METHOD_4 ( c . METHOD_5 ( ) ) ; u . METHOD_6 ( c . METHOD_7 ( ) . get ( ) ) ; u . commit ( ) ; return c ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) ) ; TYPE_2 info = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_3 class ) ; TYPE_3 . METHOD_5 ( admin , info ) ; com.google.gerrit.reviewdb.client.Account account = VAR_4 . get ( admin . getId ( ) ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_5 ) . isEqualTo ( account . METHOD_7 ( ) ) ; } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 0 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ; } } 
public TYPE_1 to ( java.lang.String ref ) throws java.io.IOException , TYPE_2 { TYPE_3 . add ( git , VAR_1 , VAR_2 ) ; changeId = TYPE_3 . METHOD_1 ( git , VAR_3 . METHOD_2 ( ) , VAR_4 ) ; return TYPE_3 . METHOD_3 ( git , ref ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . info ( ( STRING_1 + VAR_1 ) ) ; } else if ( TYPE_2 . METHOD_4 ( VAR_1 ) ) { TYPE_2 . METHOD_5 ( VAR_1 ) ; VAR_2 . info ( ( STRING_2 + VAR_1 ) ) ; } else { VAR_2 . METHOD_6 ( java.lang.String.format ( ( STRING_3 + ( STRING_4 + STRING_5 ) ) , VAR_1 ) ) ; } } 
public void METHOD_1 ( ) { install ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; install ( TYPE_1 . METHOD_3 ( ) ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_3 class ) . to ( VAR_4 class ) ; install ( new TYPE_2 ( ) ) ; factory ( VAR_5 . Factory class ) ; } 
public int METHOD_1 ( TYPE_1 key , TYPE_2 value ) { int size = ( ( ( ( ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ) + INT_1 ) + ( INT_5 * INT_3 ) ) + ( INT_5 * INT_2 ) ) + INT_6 ; for ( TYPE_3 e : value . METHOD_2 ( ) ) { size += e . METHOD_1 ( ) ; } return size ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_3 ( this ) ; VAR_2 = new TYPE_4 ( ) ; VAR_2 . add ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; db = VAR_3 . METHOD_5 ( ) ; VAR_4 . create ( db ) ; VAR_5 = VAR_6 . METHOD_6 ( TYPE_5 . METHOD_7 ( STRING_1 ) ) . getAccountId ( ) ; user = VAR_7 . create ( VAR_5 ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getRefName ( ) ) ) { return METHOD_4 ( VAR_1 . commit ) ; } else { return java.util.Collections . METHOD_5 ( ) ; } } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException , TYPE_1 { java.util.Set < TYPE_2 > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_2 , repo ) ) ; VAR_1 . add ( TYPE_4 . METHOD_2 ( VAR_3 , repo ) ) ; return TYPE_4 . METHOD_1 ( repo , STRING_1 , VAR_1 ) ; } 
void display ( final TYPE_1 result ) { project = result . project ; VAR_1 . METHOD_1 ( project . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_4 , VAR_5 ) ; TYPE_2 . METHOD_3 ( VAR_6 , VAR_7 ) ; TYPE_2 . METHOD_3 ( VAR_8 , VAR_9 ) ; METHOD_4 ( project . METHOD_5 ( ) ) ; METHOD_6 ( project . METHOD_7 ( ) ) ; VAR_10 . METHOD_8 ( false ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final boolean VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ) { final java.lang.String url = METHOD_5 ( ) ; METHOD_6 ( VAR_2 , url , VAR_3 , false ) ; } if ( ( VAR_1 . METHOD_7 ( ) ) == ( VAR_4 ) ) { final java.lang.String url = METHOD_8 ( ) ; METHOD_6 ( VAR_2 , url , VAR_3 , true ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( e == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_2 . METHOD_3 ( err ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 res , java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( TYPE_3 . create ( res ) . METHOD_2 ( ) , true , VAR_2 ) ; if ( VAR_1 != null ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } return VAR_3 ; } 
private static java.lang.String METHOD_1 ( final long VAR_1 , final long VAR_2 ) { if ( ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) { return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( STRING_5 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_6 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_7 ) ) ) + ( VAR_3 ) ) , n . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 p , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; VAR_7 = VAR_1 ; VAR_8 = VAR_9 . METHOD_2 ( ) ; VAR_10 = ++ ( VAR_11 ) ; VAR_12 . METHOD_3 ( VAR_2 ) ; return p ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { TYPE_1 VAR_5 = METHOD_2 ( VAR_1 ) ; VAR_6 . put ( VAR_5 . METHOD_3 ( VAR_3 ) , new TYPE_2 ( METHOD_4 ( VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_2 , 0 , VAR_8 , null ) , VAR_2 , VAR_4 ) ) ; VAR_9 . add ( new TYPE_3 ( METHOD_6 ( VAR_5 ) , ( ( VAR_3 - VAR_4 ) + 1 ) , VAR_3 ) ) ; } 
public int run ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) , new TYPE_4 ( ) , new TYPE_5 ( ) , new TYPE_6 ( ) { protected void METHOD_2 ( ) { bind ( VAR_3 class ) . METHOD_3 ( VAR_4 class ) . in ( VAR_5 ) ; } } ) ; TYPE_7 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 class ) ) ; VAR_1 . METHOD_5 ( VAR_6 class ) . METHOD_6 ( ) ; return METHOD_7 ( ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ; TYPE_1 notes = VAR_2 . create ( c ) . METHOD_2 ( ) ; com.google.gerrit.reviewdb.client . PatchSetApproval a = VAR_3 . METHOD_3 ( db , notes , VAR_1 ) ; org.junit.Assert . METHOD_4 ( a . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( 1 , a . getValue ( ) ) ; org.junit.Assert.assertEquals ( admin . id , a . getAccountId ( ) ) ; } 
public void METHOD_1 ( ) { final java.lang.String name = STRING_1 ; final java.lang.String value = STRING_2 ; final TYPE_1 < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( name , value ) ; METHOD_3 ( name , VAR_1 . METHOD_4 ( ) ) ; METHOD_3 ( value , VAR_1 . getValue ( ) ) ; assertEquals ( 0 , VAR_1 . METHOD_5 ( ) . size ( ) ) ; } 
void add ( ) { java.util.List < java.lang.String > values = new java.util.ArrayList < > ( ) ; for ( TYPE_1 input : VAR_1 ) { java.lang.String VAR_2 = input . getValue ( ) . METHOD_1 ( ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { input . METHOD_2 ( STRING_1 ) ; values . add ( VAR_2 ) ; } } t . insert ( values ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_1 = git . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; METHOD_5 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; METHOD_7 ( VAR_3 , project , STRING_6 ) ; TYPE_1 . Result r = METHOD_5 ( STRING_7 , STRING_8 , STRING_4 , STRING_9 ) ; r . METHOD_8 ( ) ; r . METHOD_9 ( VAR_4 , null , admin ) ; r . METHOD_10 ( TYPE_2 . getMessage ( ) ) ; } 
void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , true ) ; TYPE_1 . METHOD_2 ( VAR_2 , false ) ; TYPE_1 . METHOD_2 ( error , false ) ; VAR_3 . METHOD_2 ( false ) ; VAR_4 . METHOD_3 ( true ) ; VAR_4 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_5 ) ) ; VAR_4 . METHOD_6 ( ) ; } 
public boolean equals ( TYPE_1 VAR_1 ) { if ( ( VAR_1 == null ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; if ( ( ( this . VAR_3 ) != ( VAR_4 ) ) || ( ( this . VAR_5 ) != ( VAR_6 ) ) ) { return false ; } return true ; } 
private static java.util.Set < org.eclipse.jgit.revwalk.RevCommit > METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , TYPE_1 < TYPE_2 > refs ) throws java.io.IOException , TYPE_3 { java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_1 = TYPE_4 . METHOD_2 ( ) ; for ( TYPE_2 r : refs ) { try { VAR_1 . add ( rw . parseCommit ( r . METHOD_3 ( ) ) ) ; } catch ( TYPE_5 VAR_2 ) { } } return VAR_1 ; } 
private com.google.gerrit.server.query.change.ChangeData METHOD_1 ( ) { if ( ( cd ) == null ) { com.google.gerrit.reviewdb.server.ReviewDb VAR_1 = db ( ) ; TYPE_1 . METHOD_2 ( ( VAR_1 != null ) , STRING_1 ) ; cd = VAR_2 . create ( VAR_1 , METHOD_3 ( ) ) ; } return cd ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( r , STRING_2 ) ; METHOD_6 ( r ) . METHOD_7 ( STRING_2 ) ; METHOD_8 ( r , STRING_3 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { if ( VAR_1 . isEmpty ( ) ) { return true ; } else { java.lang.String projectName = name . get ( ) ; for ( java.lang.String VAR_2 : VAR_1 ) { if ( METHOD_2 ( projectName , VAR_2 ) ) { return true ; } } } return false ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 , java.io.IOException { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) { throw new TYPE_2 ( ) ; } } finally { rw . METHOD_3 ( ) ; } } 
private boolean METHOD_1 ( ) { if ( ( VAR_1 . length ( ) ) == 0 ) { return false ; } if ( VAR_2 . isEmpty ( ) ) { return false ; } if ( ( ( VAR_2 . size ( ) ) == 1 ) && ( VAR_2 . contains ( VAR_3 ) ) ) { return false ; } return true ; } 
public void update ( ) throws TYPE_1 { try { schema = VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } finally { if ( ( schema ) != null ) { schema . close ( ) ; schema = null ; } } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , new com.google.gerrit.reviewdb.client.Account.Id ( 2 ) , new TYPE_2 . NameKey ( VAR_2 , STRING_2 ) , TYPE_3 . METHOD_2 ( ) ) ; VAR_1 . set ( VAR_3 , change ) ; VAR_1 . set ( VAR_4 , util . user ( VAR_5 ) . METHOD_3 ( change ) ) ; } 
public void display ( final java.util.List < TYPE_1 > result ) { while ( 1 < ( table . METHOD_1 ( ) ) ) table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) ; for ( TYPE_1 VAR_1 : result ) { final int row = table . METHOD_1 ( ) ; table . METHOD_3 ( row ) ; METHOD_4 ( row ) ; METHOD_5 ( row , VAR_1 ) ; } } 
private < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 , TYPE_4 < TYPE_1 > VAR_3 ) { TYPE_5 < TYPE_1 > VAR_4 = new TYPE_5 < TYPE_1 > ( VAR_5 , VAR_3 ) ; try { if ( ! ( VAR_5 ) ) { TYPE_6 . METHOD_2 ( ) ; } TYPE_7 req = METHOD_3 ( VAR_1 ) ; req . METHOD_4 ( STRING_1 , VAR_6 ) ; req . METHOD_5 ( VAR_2 , VAR_4 ) ; } catch ( TYPE_8 e ) { VAR_4 . METHOD_6 ( null , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 label : METHOD_3 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( label . getName ( ) ) ; } assertEquals ( TYPE_3 . of ( STRING_1 ) , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) ) , out . METHOD_8 ( ) ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_1 d = new TYPE_1 ( ) ; VAR_1 = c . getId ( ) . toString ( ) ; d . id = c . getKey ( ) . toString ( ) ; d . revision = ps . getRevision ( ) . get ( ) ; d . ref = ps . getRefName ( ) ; return d ; } 
private byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) { final long VAR_2 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 b = new TYPE_3 ( ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( b , VAR_1 ) ; final byte [ ] key = b . METHOD_5 ( ) ; return TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_6 ( VAR_2 , key ) ) . METHOD_5 ( ) ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String revision ) throws TYPE_1 , java.io.IOException { org.eclipse.jgit.lib.ObjectId VAR_1 = repo . METHOD_2 ( TYPE_2 . METHOD_3 ( revision , VAR_2 ) ) ; if ( VAR_1 == null ) { throw new TYPE_1 ( ) ; } return VAR_1 ; } 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ; TYPE_1 notes = VAR_2 . create ( c ) . METHOD_2 ( ) ; return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( STRING_3 , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_3 ) + STRING_5 ) , ( ( VAR_4 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_5 ) , STRING_1 , STRING_6 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_2 VAR_4 = util . user ( VAR_1 , VAR_5 ) ; TYPE_2 VAR_6 = util . user ( VAR_1 , VAR_5 , VAR_3 ) ; METHOD_3 ( STRING_2 , VAR_4 . METHOD_4 ( ) ) ; METHOD_5 ( STRING_3 , VAR_6 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; java.util.List < TYPE_1 . ChangeInfo > VAR_1 = VAR_2 . changes ( ) . query ( STRING_1 ) . get ( ) ; org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) ; VAR_1 = VAR_2 . changes ( ) . query ( STRING_2 ) . get ( ) ; org.junit.Assert . METHOD_3 ( VAR_1 . isEmpty ( ) ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , com.google.gerrit.reviewdb.client.PatchSet ps , TYPE_2 < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { ps . METHOD_1 ( VAR_1 ) ; update . METHOD_1 ( VAR_1 ) ; db . patchSets ( ) . update ( java.util.Collections.singleton ( ps ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId . METHOD_2 ( cd . METHOD_3 ( ) . getRevision ( ) . get ( ) ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( cd . change ( ) . getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk rw = TYPE_1 . METHOD_5 ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( id ) ; return ( commit . METHOD_6 ( ) ) > 1 ; } catch ( java.io.IOException e ) { throw new TYPE_2 ( e ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( final java.lang.String name , final java.lang.String value ) throws TYPE_3 { final TYPE_4 VAR_1 = VAR_2 . get ( name ) ; if ( VAR_1 == null ) { throw TYPE_5 . error ( ( ( ( STRING_1 + name ) + STRING_2 ) + value ) ) ; } return VAR_1 . create ( this , value ) ; } 
protected void METHOD_1 ( java.lang.String changeId , int psId ) throws com.google.gwtorm.server.OrmException { TYPE_1 VAR_1 = VAR_2 . create ( db , TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_4 = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( commit . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; if ( VAR_2 ) { METHOD_6 ( ) ; } else { java.lang.String VAR_3 = TYPE_1 . METHOD_7 ( ) ; if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_8 ( STRING_1 ) ) ) { METHOD_9 ( VAR_3 . METHOD_10 ( INT_1 ) ) ; } } METHOD_11 ( ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try { org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ; try { return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; } finally { repo . close ( ) ; } } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( server , user ) ; TYPE_2 VAR_2 = new TYPE_2 ( server , user ) ; TYPE_3 . METHOD_2 ( user ) ; VAR_2 . METHOD_3 ( ) ; METHOD_4 ( TYPE_3 . METHOD_5 ( ( ( ( VAR_2 . METHOD_6 ( ) ) + STRING_1 ) + ( project . get ( ) ) ) ) ) ; VAR_2 . close ( ) ; VAR_3 = VAR_4 . METHOD_7 ( ) ; VAR_5 = new TYPE_1 ( server , VAR_3 ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; METHOD_3 ( req , res , VAR_2 ) ; METHOD_4 ( req , res ) ; TYPE_3 out = res . METHOD_5 ( ) ; out . METHOD_6 ( message ) ; out . close ( ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( new TYPE_3 ( ) { public void run ( ) { boolean s = VAR_1 . METHOD_2 ( ) ; view . METHOD_4 ( VAR_2 ) . METHOD_5 ( STRING_1 , s ) ; view . METHOD_4 ( VAR_3 ) . METHOD_5 ( STRING_1 , s ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; final TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ; p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) ; db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) ; VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 account ) throws TYPE_3 , TYPE_4 { try { return VAR_1 . METHOD_2 ( ) . apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_5 | java.io.IOException e ) { throw new TYPE_4 ( e ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { for ( TYPE_2 p : VAR_1 . METHOD_2 ( ) ) { TYPE_3 VAR_2 = new TYPE_3 ( p . METHOD_3 ( ) , p . getKey ( ) , 0 , null ) ; TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . toString ( ) , p . METHOD_3 ( ) , null ) ; } } 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( ) , new TYPE_7 ( repo . METHOD_2 ( ) ) , new TYPE_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 r = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) ; r . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( name ( STRING_1 ) ) . getChangeId ( ) ; java.util.Map < java.lang.String , TYPE_1 > VAR_1 = METHOD_3 ( changeId ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_5 ( 2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 info = METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_3 ( VAR_3 class ) ; VAR_2 . METHOD_4 ( STRING_2 ) ; VAR_4 . projects ( ) . name ( project . get ( ) ) . METHOD_5 ( info . id ) . get ( true ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 user ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) != null ) { throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; } try { if ( ( change ) != null ) { VAR_1 = VAR_2 . METHOD_3 ( change , user ) ; } else { VAR_1 = VAR_2 . METHOD_3 ( VAR_3 , user ) ; } } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_1 ; } 
public void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String name , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String [ ] VAR_5 ) { this . VAR_6 = TYPE_1 . METHOD_2 ( name ) . METHOD_3 ( ) ; this . VAR_2 = VAR_2 ; this . VAR_5 = VAR_5 ; } 
protected void METHOD_1 ( final int row , final boolean VAR_1 ) { super . METHOD_1 ( row , VAR_1 ) ; if ( ( ! ( VAR_2 ) ) || ( STRING_1 . equals ( VAR_3 . METHOD_2 ( ) ) ) ) { VAR_3 . METHOD_3 ( METHOD_4 ( row ) . getName ( ) ) ; } } 
public boolean METHOD_1 ( ) { if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) { return ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ; } return false ; } 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { this . VAR_1 = walk . METHOD_2 ( ) ; try { revision = ( id != null ) ? new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { VAR_1 = null ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { try { org.eclipse.jgit.lib.Repository repo = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; try { if ( VAR_2 != null ) { TYPE_3 u = repo . METHOD_3 ( VAR_3 ) ; u . METHOD_4 ( VAR_2 ) ; } } finally { repo . close ( ) ; } } catch ( java.io.IOException e ) { VAR_4 . error ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) , VAR_2 ) , e ) ; } } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = METHOD_2 ( VAR_1 ) ; final TYPE_3 VAR_4 = TYPE_4 . METHOD_3 ( VAR_2 ) ; assert VAR_4 != null ; final TYPE_3 VAR_5 = TYPE_5 . METHOD_4 ( VAR_3 ) ; TYPE_5 . METHOD_5 ( VAR_5 , VAR_3 ) ; TYPE_4 . METHOD_6 ( VAR_1 , VAR_4 ) ; TYPE_5 . METHOD_7 ( VAR_5 , VAR_4 ) ; } 
public java.lang.String METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) ; } else { return TYPE_1 . METHOD_2 ( cfg . METHOD_1 ( VAR_2 , VAR_3 , name ) , VAR_1 ) ; } } 
public void METHOD_1 ( TYPE_1 . Key VAR_1 , TYPE_2 VAR_2 , int VAR_3 , TYPE_3 VAR_4 ) { VAR_5 = VAR_1 ; VAR_6 = VAR_2 ; VAR_7 = METHOD_2 ( VAR_3 , VAR_4 ) ; VAR_8 . METHOD_3 ( ) ; VAR_9 = METHOD_4 ( ) ; VAR_8 . add ( VAR_9 ) ; VAR_8 . add ( METHOD_5 ( ) ) ; VAR_10 . METHOD_3 ( ) ; VAR_11 = METHOD_4 ( ) ; VAR_10 . add ( VAR_11 ) ; VAR_10 . add ( METHOD_5 ( ) ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 account , java.util.List < java.lang.String > add , java.util.List < java.lang.String > delete ) throws TYPE_3 , TYPE_4 { TYPE_5 in = new TYPE_5 ( ) ; in . add = add ; in . delete = delete ; try { return VAR_1 . apply ( account , in ) ; } catch ( TYPE_6 | com.google.gwtorm.server.OrmException | java.io.IOException | TYPE_7 e ) { throw new TYPE_4 ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_2 = repo . METHOD_3 ( repo . file ( STRING_2 , VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_3 , METHOD_4 ( VAR_2 ) ) ; } 
protected TYPE_1 < ? > . VAR_1 METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ; TYPE_1 < ? > . VAR_1 b = VAR_3 . METHOD_5 ( STRING_1 ) ; TYPE_2 < java.lang.String > id = TYPE_3 . getChangeId ( VAR_3 , VAR_2 ) ; if ( id . METHOD_6 ( ) ) { b . METHOD_7 ( id . get ( ) . METHOD_8 ( 1 ) ) ; } else { b . METHOD_7 ( ) ; } return b ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String key , java.lang.String [ ] values ) { if ( ( values . length ) > 0 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; for ( java.lang.String VAR_3 : values ) { VAR_2 . add ( new TYPE_3 ( VAR_3 ) ) ; } VAR_1 . add ( key , VAR_2 ) ; } } 
public boolean METHOD_1 ( ) { return ( ( ( ( ( user ) instanceof TYPE_1 ) || ( user . METHOD_2 ( group . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) || ( user . METHOD_5 ( ) . METHOD_6 ( ) ) ) || ( VAR_1 . METHOD_7 ( group . METHOD_3 ( ) ) ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 . METHOD_2 ( ) ) { return ; } if ( ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_2 class ) ) != null ) { if ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) || ( ! ( VAR_3 . get ( ) . METHOD_6 ( ) ) ) ) { VAR_1 . METHOD_7 ( new TYPE_2 ( ) ) ; return ; } } } 
private static java.lang.String url ( com.google.gerrit.reviewdb.client.PatchSet.Id ps , TYPE_1 info ) { return TYPE_2 . METHOD_1 ( null , ps , info . path ( ) , ( ( info . METHOD_2 ( ) ) == ( VAR_1 ) ? VAR_2 : VAR_3 ) , info . line ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = METHOD_2 ( ) ; TYPE_1 update = METHOD_3 ( c , VAR_1 ) ; update . METHOD_4 ( VAR_1 . METHOD_5 ( ) . getId ( ) , VAR_2 ) ; update . commit ( ) ; TYPE_2 notes = METHOD_6 ( c ) ; TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet.Id , TYPE_4 > VAR_3 = notes . METHOD_7 ( ) ; org.junit.Assert.assertEquals ( 0 , VAR_3 . METHOD_8 ( ) . size ( ) ) ; } 
private boolean METHOD_1 ( ) { java.lang.String msg = VAR_1 . getValue ( ) . METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { return ( msg . length ( ) ) > 0 ; } return msg . equals ( ( ( VAR_2 . message ( ) ) != null ? VAR_2 . message ( ) . METHOD_2 ( ) : STRING_1 ) ) ; } 
private java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.util.Set < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > result = new TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > ( ) ; for ( java.lang.String email : VAR_1 ) { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( email ) ; result . METHOD_3 ( VAR_2 ) ; } return result ; } 
private static void METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { java.lang.String token = TYPE_1 . METHOD_2 ( ps ) ; new TYPE_2 ( token ) { public void onSuccess ( ) { TYPE_3 . display ( this . token , METHOD_3 ( ) ) ; } private TYPE_4 METHOD_3 ( ) { return new TYPE_5 ( ps ) ; } } . onSuccess ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 cm = TYPE_3 . METHOD_2 ( VAR_1 ) ; final TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 ) ; VAR_4 = new TYPE_4 ( ) { protected void METHOD_3 ( ) { install ( VAR_5 ) ; install ( cm ) ; install ( VAR_2 ) ; } } ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String n = VAR_1 . getName ( ) ; return ( ( ( n . METHOD_2 ( STRING_1 ) ) || ( n . METHOD_2 ( STRING_2 ) ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( ( n . METHOD_4 ( STRING_3 ) ) >= 0 ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account a ) { TYPE_1 VAR_1 = new TYPE_1 ( a . getId ( ) . get ( ) ) ; VAR_1 . email = a . METHOD_2 ( ) ; VAR_1 . name = a . METHOD_3 ( ) ; VAR_2 = a . METHOD_4 ( ) ; return VAR_1 ; } 
private void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) { VAR_1 . append ( ( STRING_1 + line ) ) ; try { final java.lang.String VAR_4 = VAR_2 . METHOD_2 ( VAR_3 , line ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( VAR_4 ) ; } catch ( TYPE_2 e ) { VAR_1 . append ( STRING_3 ) ; } VAR_1 . append ( STRING_4 ) ; } 
private boolean METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . equals ( VAR_2 . METHOD_2 ( ) ) ; return ! ( ( VAR_1 || ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( 0 >= ( VAR_2 . METHOD_3 ( ) . size ( ) ) ) ) ) || ( ( ( VAR_3 ) == ( VAR_5 ) ) && ( 0 >= ( VAR_2 . METHOD_4 ( ) . size ( ) ) ) ) ) ; } 
public boolean METHOD_1 ( ) { if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) { return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; } return METHOD_4 ( ) . METHOD_9 ( ) ; } 
private boolean METHOD_1 ( TYPE_1 . NameKey VAR_1 , TYPE_2 user ) { final TYPE_3 VAR_2 = VAR_3 . get ( VAR_1 . getParentKey ( ) ) ; if ( VAR_2 == null ) { return false ; } final TYPE_4 VAR_4 = VAR_2 . METHOD_2 ( user ) ; return VAR_4 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_5 ( db ) ) ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . email ( ) ) != null ) { return VAR_1 . email ( ) ; } else if ( ( VAR_1 . name ( ) ) != null ) { return VAR_1 . name ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) != 0 ) { return STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ; } else { return STRING_1 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . name ( VAR_1 ) . create ( ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_2 ) ; } 
public void METHOD_1 ( java.lang.String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; VAR_2 . METHOD_4 ( rsrc ) ; VAR_2 . apply ( account , new TYPE_4 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { return rw . parseCommit ( repo . METHOD_2 ( name ) . METHOD_3 ( ) ) ; } finally { rw . METHOD_4 ( ) ; } } finally { repo . close ( ) ; } } 
public java.lang.String get ( ) { java.lang.String VAR_1 = super . get ( ) ; if ( VAR_1 != null ) { return VAR_1 ; } if ( ( VAR_2 ) != null ) { final TYPE_1 req ; try { req = VAR_2 . get ( ) ; } catch ( TYPE_2 VAR_3 ) { if ( ( VAR_3 . METHOD_1 ( ) ) instanceof TYPE_3 ) { return null ; } else { throw VAR_3 ; } } return TYPE_4 . METHOD_2 ( req ) ; } return null ; } 
public TYPE_1 < ? , java.io.IOException > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) { java.util.List < TYPE_3 < ? > > VAR_2 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change . Id id : VAR_1 ) { VAR_2 . add ( METHOD_1 ( id ) ) ; } return TYPE_4 . METHOD_2 ( VAR_2 ) ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , java.io.IOException { try { VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw new TYPE_5 ( e . getMessage ( ) ) ; } return TYPE_1 . METHOD_6 ( ) ; } 
protected TYPE_1 . Result METHOD_1 ( TYPE_2 git , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String topic ) throws java.io.IOException , TYPE_3 { TYPE_4 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . to ( git , ( STRING_1 + topic ) ) ; } 
static final TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { return new TYPE_1 ( TYPE_4 . METHOD_2 ( VAR_1 . get ( ) . METHOD_3 ( ) , VAR_1 . get ( ) . METHOD_4 ( ) ) , ( ( int ) ( ( VAR_1 . get ( ) . METHOD_4 ( ) ) * ( VAR_1 . get ( ) . METHOD_3 ( ) ) ) ) ) ; } 
public void name ( java.lang.String name ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = name ; try { VAR_1 . apply ( rsrc , in ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( name , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; if ( ! ( VAR_3 ) ) { modules.add ( new TYPE_3 ( ) ) ; } modules.add ( new TYPE_4 ( VAR_4 , VAR_1 . METHOD_2 ( VAR_5 class ) , VAR_1 . METHOD_2 ( VAR_6 class ) ) ) ; if ( ! ( VAR_4 ) ) { modules.add ( new TYPE_5 ( ) ) ; } return VAR_1 . METHOD_3 ( modules ) ; } 
private int METHOD_1 ( TYPE_1 cm , int line , int VAR_1 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { cm . METHOD_2 ( line , VAR_2 , VAR_3 . diff ( ) ) ; } return line + VAR_1 ; } 
private java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; if ( ( VAR_4 ) == null ) { try { VAR_3 . add ( VAR_2 . METHOD_2 ( VAR_5 , VAR_6 ) ) ; } catch ( TYPE_3 e ) { VAR_3 . add ( STRING_1 ) ; } } else { VAR_3 . METHOD_3 ( METHOD_4 ( VAR_4 , VAR_2 , VAR_5 ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( project , METHOD_3 ( ) , message . METHOD_4 ( ) , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { VAR_1 = true ; METHOD_5 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_6 ( result . METHOD_7 ( ) ) ) ; } public void METHOD_8 ( TYPE_6 VAR_2 ) { METHOD_9 ( true ) ; super . METHOD_8 ( VAR_2 ) ; } } ) ; } 
protected TYPE_1 . Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) , VAR_3 ) ; TYPE_2 . Result result = VAR_1 . to ( STRING_1 ) ; result . METHOD_3 ( ) ; return result ; } 
private int METHOD_1 ( final TYPE_1 < TYPE_2 > i , int row , final int VAR_1 ) { while ( i . METHOD_2 ( ) ) { final TYPE_2 c = i . METHOD_3 ( ) ; table . METHOD_4 ( row ) ; table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) ; METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) ) ; row ++ ; } return row ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { TYPE_3 VAR_3 = new TYPE_3 ( new TYPE_4 ( VAR_2 ) ) ; try { VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; } finally { VAR_3 . close ( ) ; } } catch ( java.io.IOException err ) { throw new TYPE_5 ( STRING_1 , err ) ; } } 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId ( ) . toString ( ) ; try { if ( cd . change ( ) . getStatus ( ) . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; commit ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( id ) ; commit ( VAR_2 ) ; } } catch ( com.google.gwtorm.server.OrmException | TYPE_1 e ) { throw new java.io.IOException ( e ) ; } } 
protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ; bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null , null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ; } 
public static void message ( int id , java.lang.String commit , java.lang.String message , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . METHOD_1 ( message ) ; TYPE_4 . METHOD_2 ( id , commit , STRING_1 ) . METHOD_3 ( input , VAR_1 ) ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 , java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , rw , commit ) ) ) { throw new TYPE_2 ( ) ; } } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws TYPE_2 , com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > changes = METHOD_2 ( changeId ) ; if ( changes . isEmpty ( ) ) { throw new TYPE_2 ( changeId ) ; } return create ( db , project , changeId ) ; } 
private int METHOD_1 ( final int VAR_1 ) throws TYPE_1 { int VAR_2 = VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) ; if ( VAR_2 == 0 ) { throw new TYPE_1 ( STRING_1 ) ; } return ( 0 < VAR_1 ) && ( VAR_1 <= VAR_2 ) ? VAR_1 : VAR_2 ; } 
public void run ( ) { int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ; int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , line , false ) , METHOD_7 ( ) ) ; METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . METHOD_3 ( STRING_1 ) ) ; METHOD_2 ( b , b . METHOD_4 ( INT_1 ) ) ; METHOD_2 ( b , b . METHOD_5 ( INT_2 ) ) ; METHOD_2 ( b , b . METHOD_6 ( ) ) ; assertEquals ( STRING_2 , b . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; final java.lang.String name = STRING_2 ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( user ) ; METHOD_5 ( r ) ; assertEquals ( name , r . name ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 ref , TYPE_3 VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { TYPE_1 b = new TYPE_1 ( ) ; b . ref = ref . getName ( ) ; if ( ( ref . METHOD_2 ( ) ) != null ) { b . revision = ref . METHOD_2 ( ) . name ( ) ; } b . METHOD_3 ( ( ( ! ( VAR_2 . contains ( ref . getName ( ) ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) ) ; return b ; } 
public TYPE_1 < TYPE_2 > add ( TYPE_3 . Key < TYPE_2 > key , TYPE_4 < TYPE_2 > VAR_1 ) { TYPE_5 < TYPE_4 < TYPE_2 > > ref = new TYPE_5 < TYPE_4 < TYPE_2 > > ( VAR_1 ) ; VAR_2 . add ( ref ) ; return new TYPE_6 ( ref , key , VAR_1 ) ; } 
public static void METHOD_1 ( ) { VAR_1 = null ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; for ( final TYPE_2 VAR_4 : VAR_5 ) { VAR_4 . METHOD_3 ( ) ; } TYPE_3 . METHOD_4 ( ) ; if ( ( ( VAR_6 ) != null ) && ( VAR_6 . METHOD_5 ( ) ) ) { TYPE_4 . METHOD_6 ( VAR_7 ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ) { return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; } return TYPE_1 . METHOD_3 ( ) ; } 
private static < TYPE_1 > void METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 < TYPE_1 > VAR_2 , TYPE_4 < TYPE_1 > b ) { TYPE_5 n = VAR_2 . METHOD_1 ( b . getKey ( ) , b . METHOD_2 ( ) . get ( ) ) ; if ( n != null ) { VAR_1 . add ( n ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : this . VAR_3 = revision ; break ; default : TYPE_3 . METHOD_2 ( ( revision == null ) , STRING_1 , type ) ; this . VAR_3 = revision ; break ; } return this ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) { return ; } TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 != null ) { for ( TYPE_1 d : VAR_2 ) { if ( d . METHOD_5 ( ) ) { TYPE_2 . METHOD_1 ( d ) ; } else { TYPE_2 . METHOD_6 ( d ) ; } } } TYPE_2 . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws java.io.IOException { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ctx ) ; return ; } ctx . METHOD_2 ( new TYPE_2 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_3 ( patchSet . getRevision ( ) . get ( ) ) , org.eclipse.jgit.lib.ObjectId . METHOD_4 ( ) , patchSet . getRefName ( ) ) ) ; } 
public void METHOD_1 ( final java.lang.StringBuilder VAR_1 , final TYPE_1 VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; VAR_1 . append ( VAR_2 . METHOD_2 ( ) ) ; VAR_1 . append ( CHAR_2 ) ; VAR_1 . append ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . append ( CHAR_2 ) ; VAR_1 . append ( VAR_2 . METHOD_4 ( ) ) ; VAR_1 . append ( CHAR_2 ) ; VAR_1 . append ( VAR_2 . METHOD_5 ( ) ) ; VAR_1 . append ( CHAR_3 ) ; } 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { return TYPE_5 . apply ( VAR_1 . get ( ) . METHOD_1 ( s ) . format ( change ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( final TYPE_1 m , final int VAR_1 ) { m . METHOD_2 ( ) ; m . METHOD_3 ( ) ; m . METHOD_4 ( VAR_2 ) ; m . METHOD_5 ( ) ; m . METHOD_6 ( ) ; m . METHOD_3 ( ) ; m . METHOD_4 ( STRING_1 ) ; m . METHOD_7 ( STRING_2 , INT_1 ) ; m . append ( TYPE_2 . METHOD_8 ( VAR_1 ) ) ; m . METHOD_6 ( ) ; m . METHOD_9 ( ) ; } 
private TYPE_1 < com.google.gerrit.reviewdb.client.Account > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId commit ) throws java.io.IOException , TYPE_2 { rw . METHOD_2 ( ) ; TYPE_3 VAR_2 = new TYPE_3 ( null , VAR_1 ) ; VAR_2 . METHOD_3 ( rw , commit ) ; return VAR_2 . METHOD_4 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( VAR_2 . getChange ( ) ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; return TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) . get ( change.getId ( ) ) ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) throws java.io.IOException { METHOD_2 ( req , res , VAR_3 ) ; res . METHOD_3 ( VAR_4 ) ; TYPE_5 VAR_5 = res . METHOD_4 ( ) ; new TYPE_6 ( ) . METHOD_5 ( VAR_6 ) . METHOD_6 ( ) . METHOD_7 ( ) . create ( ) . METHOD_8 ( VAR_1 , VAR_2 , VAR_5 ) ; VAR_5 . METHOD_9 ( CHAR_1 ) ; VAR_5 . close ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( STRING_2 + ( VAR_2 ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( VAR_3 ) ) + STRING_5 ) , n . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_3 , STRING_4 ) ) , TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_5 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_6 , STRING_7 , STRING_4 , STRING_8 , STRING_9 , STRING_10 , STRING_5 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo VAR_1 = METHOD_2 ( VAR_2 ) ; TYPE_2 r = VAR_3 . METHOD_3 ( STRING_1 , VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) ; org.junit.Assert . METHOD_5 ( r . METHOD_6 ( ) . contains ( STRING_2 ) ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { final TYPE_2 user = VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_3 ( new TYPE_3 ( ) { public TYPE_2 METHOD_2 ( ) { return user ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_4 ( ) { return VAR_4 . get ( ) ; } } ) ; try { return VAR_5 . METHOD_1 ( ) ; } finally { VAR_3 . METHOD_3 ( VAR_2 ) ; } } 
private void METHOD_1 ( final TYPE_1 . Change change , final TYPE_2 event , final TYPE_1 . ReviewDb db ) throws TYPE_3 . OrmException { for ( TYPE_4 VAR_1 : VAR_2 . values ( ) ) { if ( METHOD_2 ( change , VAR_1 . user , db ) ) { VAR_3 . METHOD_3 ( event ) ; } } } 
public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_1 . getKey ( ) . getParentKey ( ) . get ( ) ; java.lang.String VAR_4 = VAR_2 . getKey ( ) . getParentKey ( ) . get ( ) ; return TYPE_2 . METHOD_2 ( ) . METHOD_1 ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) . METHOD_1 ( VAR_3 , VAR_4 ) . METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) . result ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Status status ) { switch ( status ) { case VAR_1 : case VAR_2 : return ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) ) ; case VAR_3 : default : return false ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , int line , int VAR_2 , int VAR_3 , boolean edit ) { VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , ( ( line - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ; } 
public static TYPE_1 change ( java.lang.String project , int id ) { if ( project == null ) { return new TYPE_1 ( STRING_1 ) . id ( java.lang.String . METHOD_1 ( id ) ) ; } else { return new TYPE_1 ( STRING_1 ) . id ( project , id ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; TYPE_2 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; METHOD_4 ( git , false ) ; org.junit.Assert.assertEquals ( change . METHOD_5 ( ) . METHOD_6 ( 0 ) , METHOD_7 ( ) . METHOD_6 ( 0 ) ) ; } 
private java.util.List < java.lang.String > METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit c , boolean VAR_1 , TYPE_1 cfg ) throws java.lang.Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( null , null , null , VAR_2 ) ; java.lang.String VAR_4 = TYPE_3 . METHOD_2 ( cfg ) ; java.util.List < TYPE_4 > m = VAR_3 . METHOD_3 ( repo , c , rw , VAR_4 , VAR_1 ) ; return TYPE_5 . METHOD_4 ( m ) ; } 
private static void METHOD_1 ( final TYPE_1 r , final java.lang.String n , final java.lang.String VAR_1 ) { if ( ( r . length ( ) ) > 0 ) { r . append ( STRING_1 ) ; } r . append ( n ) ; r . append ( STRING_2 ) ; r . append ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; } 
protected void METHOD_1 ( TYPE_1 view ) { final java.lang.String token = view . METHOD_2 ( ) ; if ( ! ( token . equals ( TYPE_2 . METHOD_2 ( ) ) ) ) { TYPE_2 . METHOD_3 ( token , false ) ; if ( ( VAR_1 ) != null ) { TYPE_3 . METHOD_4 ( token ) ; } } if ( view instanceof TYPE_4 ) { VAR_2 = token ; } super . METHOD_1 ( view ) ; view . METHOD_1 ( ) ; } 
private boolean METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_2 ; } else { final java.lang.StringBuilder msg = new java.lang.StringBuilder ( ) ; msg . append ( STRING_1 ) ; msg . append ( STRING_2 ) ; if ( VAR_2 ) { msg . append ( STRING_3 ) ; } else { msg . append ( STRING_4 ) ; msg . append ( STRING_5 ) ; } msg . append ( STRING_6 ) ; return VAR_1 . METHOD_3 ( true , msg . toString ( ) , name ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = null ; if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; } if ( VAR_2 == null ) { VAR_2 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; } return new TYPE_1 ( VAR_2 ) ; } 
public boolean apply ( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String name , TYPE_1 VAR_2 ) throws java.io.IOException , TYPE_2 { com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey ( project . getName ( ) ) ; org.eclipse.jgit.lib.Repository db = VAR_2 . METHOD_1 ( p ) ; TYPE_3 git = new TYPE_3 ( db ) ; git . METHOD_2 ( ) . METHOD_3 ( branch ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; git . close ( ) ; return true ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; table . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( new TYPE_3 < java.util.List < TYPE_4 . ChangeInfo > > ( ) { public void onSuccess ( final java.util.List < TYPE_4 . ChangeInfo > result ) { VAR_1 . display ( result ) ; table . METHOD_5 ( ) ; } } ) ; } 
private TYPE_1 user ( TYPE_2 . ProjectConfig VAR_1 , java.lang.String name , com.google.gerrit.reviewdb.client . AccountGroup ... VAR_2 ) { return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , null , VAR_5 , VAR_6 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) != null ) ) ; VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ; } 
private static boolean METHOD_1 ( final TYPE_1 id , final TYPE_2 < TYPE_3 > VAR_1 ) { if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) { return true ; } if ( id . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) { return true ; } for ( final TYPE_3 t : VAR_1 ) { if ( t . METHOD_4 ( id ) ) { return true ; } } return false ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String projectName ) throws java.io.IOException { java.lang.String n = projectName + ( VAR_2 ) ; TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( n ) . METHOD_4 ( ) , VAR_4 ) ; org.eclipse.jgit.lib.Repository db = TYPE_3 . METHOD_5 ( VAR_3 , false ) ; try { db . create ( true ) ; } finally { db . close ( ) ; } } 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { VAR_2 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 . change ( ) . METHOD_3 ( ) ) ; try { VAR_3 = index . METHOD_4 ( VAR_2 , VAR_4 ) ; } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return METHOD_5 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 cm , int line , final TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { VAR_1 . METHOD_2 ( false ) ; TYPE_1 VAR_3 = cm . METHOD_1 ( line , VAR_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_3 . METHOD_4 ( new TYPE_5 ( ) { public void run ( ) { VAR_1 . METHOD_2 ( true ) ; } } ) ; return VAR_3 ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( java.lang.String name ) throws java.io.IOException { name = TYPE_1 . METHOD_2 ( VAR_1 , name ) ; if ( VAR_2 . METHOD_3 ( name ) ) { return VAR_2 . get ( name ) ; } org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ; VAR_2 . put ( name , repo ) ; return repo ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; if ( ( TYPE_2 . METHOD_2 ( VAR_1 ) ) != null ) { java.lang.String [ ] VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ; for ( java.lang.String VAR_4 : VAR_3 ) { VAR_2 . add ( TYPE_3 . METHOD_4 ( VAR_5 class , VAR_4 . METHOD_5 ( ) ) ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.reviewdb.server.ReviewDb > schema = METHOD_2 ( VAR_1 class ) ; com.google.gerrit.reviewdb.server.ReviewDb db = METHOD_2 ( VAR_2 . ReviewDb class ) ; TYPE_2 . METHOD_3 ( schema . METHOD_4 ( ) ) . METHOD_5 ( db ) . METHOD_6 ( ) ; VAR_3 = new TYPE_3 ( VAR_4 , schema ) ; req = METHOD_2 ( VAR_5 class ) ; rsp = METHOD_2 ( VAR_6 . HttpServletResponse class ) ; TYPE_2 . METHOD_3 ( req . METHOD_7 ( ) ) . METHOD_5 ( TYPE_4 . toString ( ) ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( STRING_2 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_3 ) ) ) ) ) . METHOD_4 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_3 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) . toString ( ) ) . isEqualTo ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { com.google.gerrit.reviewdb.client.Change change = TYPE_3 . getChange ( VAR_1 ) ; com.google.gerrit.reviewdb.client.PatchSet ps = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_3 ) ) ; TYPE_5 VAR_4 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; try { return VAR_4 . get ( change , ps ) ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( e . getMessage ( ) ) ; } } 
private org.eclipse.jgit.revwalk.RevCommit parseCommit ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { if ( id instanceof org.eclipse.jgit.revwalk.RevCommit ) { return ( ( org.eclipse.jgit.revwalk.RevCommit ) ( id ) ) ; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.revwalk.RevCommit commit = walk . parseCommit ( id ) ; walk . METHOD_1 ( commit ) ; return commit ; } finally { walk . METHOD_2 ( ) ; } } 
public void METHOD_1 ( final TYPE_1 event ) { new TYPE_2 ( patchSet . getId ( ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { VAR_1 . update ( result ) ; } public void METHOD_2 ( TYPE_5 VAR_2 ) { b . METHOD_3 ( true ) ; } } ) . METHOD_4 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 project , java.lang.String path , final TYPE_3 VAR_1 , byte [ ] VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 ) { return TYPE_5 . METHOD_2 ( VAR_2 , VAR_1 ) . METHOD_3 ( VAR_3 . toString ( ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( path , VAR_4 ) ) ; } 
public TYPE_1 . Result METHOD_1 ( final TYPE_2 index ) { TYPE_3 VAR_1 = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( 2 ) ; TYPE_6 VAR_3 = TYPE_6 . METHOD_3 ( ) ; java.util.List < com.google.gerrit.reviewdb.client.Account.Id > VAR_4 ; try { VAR_4 = METHOD_4 ( VAR_1 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; } return METHOD_5 ( index , VAR_4 , VAR_1 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try { org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ; try { return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) ) ; } finally { repo . close ( ) ; } } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } 
private java.lang.String METHOD_1 ( final java.lang.String token , final java.lang.String VAR_1 ) { if ( token . METHOD_2 ( STRING_1 ) ) { return TYPE_1 . METHOD_3 ( group . METHOD_4 ( ) , VAR_1 ) ; } else { return TYPE_1 . METHOD_3 ( group . METHOD_5 ( ) , VAR_1 ) ; } } 
private TYPE_1 METHOD_1 ( final TYPE_2 rsrc ) { if ( rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { return true ; } } ; } else { return new TYPE_1 ( ) { public boolean METHOD_5 ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1 = VAR_2 . create ( account ) ; return rsrc . METHOD_2 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; } } ; } } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ; METHOD_2 ( p , c . getParentKey ( ) ) ; METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) != ( c . METHOD_4 ( ) ) ) ) ; } 
public TYPE_1 get ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) throws TYPE_5 { java.lang.String name = METHOD_1 ( VAR_1 ) ; return new TYPE_1 ( name , VAR_4 , VAR_3 . user , VAR_1 , VAR_2 , new TYPE_6 ( name ) , VAR_5 , VAR_6 , METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_7 class , null ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( VAR_2 ) ) { final TYPE_1 VAR_3 = VAR_4 . create ( VAR_2 , p . getAccountId ( ) ) ; if ( VAR_3 . METHOD_2 ( ) . contains ( VAR_5 ) ) { return true ; } } return false ; } 
private void set ( TYPE_1 info ) { VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( info . METHOD_3 ( ) ) ) ; if ( ( info . message ( ) ) != null ) { java.lang.String msg = info . message ( ) . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( msg ) ; message . METHOD_5 ( VAR_3 . apply ( new TYPE_3 ( ) . append ( msg ) . METHOD_6 ( ) ) ) ; } this . VAR_4 = info ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) , METHOD_2 ( STRING_3 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } 
static < TYPE_1 extends TYPE_2 . Key < ? > > boolean METHOD_1 ( final TYPE_1 a , final TYPE_1 b ) { if ( a == b ) { return true ; } if ( ( a == null ) || ( b == null ) ) { return false ; } return a . equals ( b ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_3 args ) { if ( VAR_1 ) { try { return VAR_2 . get ( key , VAR_3 . create ( key , args ) ) ; } catch ( TYPE_4 | TYPE_5 e ) { VAR_4 . METHOD_2 ( ( STRING_1 + key ) , e ) ; return new TYPE_1 ( VAR_5 ) ; } } else { return new TYPE_1 ( VAR_6 ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( ) ; TYPE_1 . HttpServletResponse VAR_1 = METHOD_3 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_4 ( null , VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; METHOD_7 ( ) ; VAR_1 = METHOD_3 ( VAR_2 . HttpServletResponse class ) ; servlet . METHOD_4 ( null , VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; METHOD_7 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , VAR_1 ) ; java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_3 : VAR_1 ) { VAR_2 . add ( ( STRING_1 + VAR_3 ) ) ; } com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_2 ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_3 ) ; java.lang.String VAR_4 = ( STRING_1 + ( VAR_5 ) ) + STRING_2 ; if ( VAR_2 > 0 ) { return ( TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_4 ( ( VAR_2 + 1 ) ) ) + VAR_4 ; } else { return VAR_4 ; } } 
private TYPE_1 METHOD_1 ( final org.eclipse.jgit.lib.ObjectId VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 { if ( ( ( path ) == null ) || ( VAR_1 == null ) ) { return null ; } final org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ; final TYPE_5 VAR_3 = rw . METHOD_2 ( VAR_1 ) ; return TYPE_1 . METHOD_3 ( VAR_2 , path , VAR_3 ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_2 , res . getStatus ( ) ) ; assertEquals ( VAR_1 , res . METHOD_3 ( VAR_3 ) ) ; } 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; TYPE_3 < TYPE_4 > VAR_2 = java.util.Collections . METHOD_3 ( ) ; java.util.Set < TYPE_5 > VAR_3 = TYPE_6 . of ( VAR_4 ) ; return new TYPE_1 ( account , VAR_3 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_1 , STRING_2 , INT_1 ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) , TYPE_1 . METHOD_5 ( VAR_3 . ReviewDb class ) ) ; TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( VAR_1 ) ; VAR_4 . METHOD_9 ( STRING_1 , STRING_2 , INT_1 ) ; TYPE_1 . METHOD_10 ( VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; for ( TYPE_4 VAR_3 : VAR_4 ) { try { TYPE_5 . METHOD_4 ( new TYPE_6 ( VAR_3 . METHOD_5 ( ) ) . METHOD_6 ( ) , STRING_1 , VAR_3 ) ; } catch ( TYPE_7 e ) { throw new TYPE_8 ( e ) ; } VAR_1 . add ( VAR_3 ) ; } return VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ; } 
public static TYPE_1 METHOD_1 ( final org.eclipse.jgit.lib.Repository repo , final TYPE_2 VAR_1 , final boolean VAR_2 ) { TYPE_1 m ; if ( VAR_2 ) { m = TYPE_3 . METHOD_2 ( repo , true ) ; } else { m = TYPE_4 . METHOD_2 ( repo ) ; } m . METHOD_3 ( new TYPE_5 ( ) { protected TYPE_2 METHOD_4 ( ) { return VAR_1 ; } public void METHOD_5 ( ) { } public void METHOD_6 ( ) { } } ) ; return m ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) . METHOD_5 ( ) ; METHOD_6 ( ) ; TYPE_2 . ChangeInfo info = METHOD_7 ( METHOD_8 ( VAR_1 ) ) ; java.lang.String message = VAR_2 . get ( VAR_3 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_9 ( ) . METHOD_10 ( ) ) ) ; } 
public void METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 ) throws java.io.IOException { METHOD_2 ( new TYPE_1 < java.lang.String > ( ) { public java.lang.String METHOD_3 ( ) throws java.lang.Exception { log . METHOD_4 ( STRING_1 , VAR_2 , VAR_1 ) ; client ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; log . METHOD_4 ( STRING_2 , VAR_2 , VAR_1 ) ; return VAR_1 ; } } ) ; } 
public java.lang.String apply ( TYPE_1 rsrc , TYPE_2 input ) { final java.lang.String VAR_1 = ( VAR_2 ) ? STRING_1 : STRING_2 ; return java.lang.String.format ( STRING_3 , VAR_1 , ( TYPE_3 . METHOD_1 ( input . message ) ? TYPE_4 . METHOD_2 ( user . get ( ) . METHOD_3 ( ) , STRING_4 ) : input . message ) , rsrc . getName ( ) ) ; } 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t . METHOD_2 ( ) ) return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; if ( ! ( t . METHOD_3 ( ) ) ) return false ; else return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; } 
public void METHOD_1 ( TYPE_1 rp ) throws TYPE_2 { VAR_1 = rp . METHOD_2 ( ) ; if ( ( VAR_1 ) == null ) { try { VAR_1 = rp . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; } catch ( java.io.IOException e ) { TYPE_2 VAR_3 = new TYPE_2 ( e . getMessage ( ) ) ; VAR_3 . METHOD_6 ( e ) ; throw VAR_3 ; } } rp . METHOD_7 ( VAR_1 , rp . METHOD_8 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 req , TYPE_3 . HttpServletResponse res , java.lang.String VAR_1 , java.util.Map < java.lang.String , ? > VAR_2 ) throws java.io.IOException { req . METHOD_2 ( VAR_3 , true ) ; return VAR_4 . METHOD_3 ( res , VAR_1 , METHOD_4 ( req , res , VAR_2 ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 . Factory class ) . to ( VAR_2 . Factory class ) ; bind ( new TYPE_1 < TYPE_2 < TYPE_3 > > ( ) { } ) . to ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_2 ( VAR_5 class ) ; METHOD_3 ( ) . to ( VAR_6 class ) ; } 
private boolean METHOD_1 ( final TYPE_1 id ) { if ( id . METHOD_2 ( VAR_1 ) ) { return METHOD_3 ( ) ; } if ( id . METHOD_2 ( VAR_2 ) ) { return true ; } if ( id . METHOD_2 ( VAR_3 ) ) { return true ; } if ( id . METHOD_2 ( VAR_4 ) ) { return true ; } for ( final TYPE_2 p : VAR_5 ) { if ( p . METHOD_4 ( id ) ) { return true ; } } return false ; } 
public void METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { METHOD_2 ( VAR_2 ) ; TYPE_4 < TYPE_5 > VAR_3 = METHOD_3 ( VAR_2 ) ; if ( VAR_3 . METHOD_4 ( ) ) { throw new TYPE_3 ( java.lang.String.format ( STRING_1 , VAR_2 . getId ( ) ) ) ; } com.google.gerrit.reviewdb.client.PatchSet VAR_4 = METHOD_5 ( VAR_2 ) ; org.eclipse.jgit.lib.ObjectId VAR_5 = TYPE_6 . METHOD_6 ( VAR_4 ) ; METHOD_7 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , TYPE_7 . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 ) ; METHOD_4 ( VAR_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_2 , VAR_4 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_12 ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { for ( int i = 1 ; i < INT_1 ; i ++ ) { java.lang.String p = STRING_1 + i ; TYPE_2 . METHOD_2 ( VAR_1 , p ) ; TYPE_2 . METHOD_3 ( ( ( ( VAR_1 . METHOD_4 ( ) ) + STRING_2 ) + p ) ) ; } return null ; } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 VAR_1 = METHOD_2 ( ) ; final TYPE_2 VAR_2 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertEquals ( VAR_5 , VAR_6 ) ; assertEquals ( VAR_7 , VAR_8 ) ; assertEquals ( VAR_9 , VAR_10 ) ; assertEquals ( VAR_11 , VAR_12 ) ; } 
public synchronized < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( java.lang.String name , TYPE_3 VAR_1 , TYPE_4 < TYPE_1 > VAR_2 ) { TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_6 < TYPE_1 > m = new TYPE_6 ( this , name , VAR_1 , VAR_2 ) ; METHOD_3 ( name , VAR_1 ) ; VAR_3 . put ( name , m ) ; return m . METHOD_4 ( ) ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { return ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) && ( METHOD_2 ( ) . equals ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) . METHOD_2 ( ) ) ) ; } 
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) throws java.io.IOException , TYPE_1 { final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_3 ( VAR_2 ) ; if ( ! VAR_1 ) { METHOD_4 ( project . METHOD_2 ( ) , VAR_2 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_4 ( repo , commit ) ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 , change ) ; } 
private int METHOD_1 ( final int VAR_1 ) { for ( final TYPE_1 s : VAR_2 ) { boolean VAR_3 = false ; if ( VAR_1 <= ( VAR_4 ) ) { ( VAR_4 ) ++ ; } if ( VAR_1 < ( VAR_5 ) ) { ( VAR_5 ) ++ ; } } return table . METHOD_1 ( VAR_1 ) ; } 
private void METHOD_1 ( final TYPE_1 ctl , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_2 VAR_2 ) throws java.lang.Exception { if ( ! ( VAR_3 . isEmpty ( ) ) ) { VAR_4 . get ( ) . apply ( new TYPE_3 ( new TYPE_4 ( ctl ) , db . patchSets ( ) . get ( VAR_1 ) ) , VAR_2 ) ; } } 
protected void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 user ) throws TYPE_3 { java.lang.String project = VAR_2 . getProject ( ) . getName ( ) ; java.lang.String VAR_3 = ( TYPE_4 . METHOD_2 ( user . METHOD_3 ( ) ) ) ? STRING_1 : user . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( java.lang.String.format ( STRING_2 , VAR_1 , VAR_3 , project ) ) ; throw new TYPE_3 ( VAR_1 , project ) ; } 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_1 c : db . METHOD_3 ( ) . METHOD_4 ( rsrc . METHOD_5 ( ) . getId ( ) , rsrc . METHOD_6 ( ) ) ) { VAR_1 . put ( c . getKey ( ) . get ( ) , c ) ; } return VAR_1 ; } 
protected TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( ( ( change ) != null ) && ( VAR_1 ) ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( change ) ; if ( ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( new TYPE_3 ( repo ) , VAR_3 ) ) ) ) { return METHOD_4 ( repo ) ; } } return super . METHOD_1 ( repo ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; java.lang.String VAR_2 = STRING_1 ; VAR_1 . put ( STRING_2 , VAR_2 ) ; java.lang.String query = VAR_3 . METHOD_2 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( query . contains ( java.lang.String.format ( STRING_3 , VAR_2 ) ) ) ; } 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( TYPE_1 [ ] VAR_1 , TYPE_2 < org.eclipse.jgit.lib.Repository > repo , org.eclipse.jgit.revwalk.RevCommit ... VAR_2 ) throws java.lang.Exception { final TYPE_3 VAR_3 = repo . METHOD_2 ( VAR_1 ) ; org.eclipse.jgit.revwalk.RevCommit c = ( VAR_2 == null ) ? repo . commit ( VAR_3 ) : repo . commit ( VAR_3 , VAR_2 ) ; repo . METHOD_3 ( c ) ; return c ; } 
private void METHOD_1 ( TYPE_1 < TYPE_2 . NameKey > VAR_1 ) { METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = VAR_3 . get ( ) ; try { VAR_2 . METHOD_1 ( db , VAR_1 , VAR_4 , VAR_5 ) ; METHOD_2 ( STRING_2 ) ; } catch ( TYPE_4 e ) { METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) ; } } 
public void METHOD_1 ( final TYPE_1 . Id VAR_1 ) { if ( ( VAR_2 ) != null ) { for ( final TYPE_2 p : VAR_2 ) { p . METHOD_2 ( VAR_1 ) ; if ( p . METHOD_3 ( ) ) { p . METHOD_1 ( ) ; } } } } 
protected void METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 ) ) { TYPE_1 . info ( STRING_1 ) ; bind ( VAR_2 class ) . to ( VAR_3 class ) . in ( VAR_4 ) ; bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( new TYPE_3 ( VAR_1 , VAR_6 ) ) ; install ( new TYPE_4 ( VAR_1 , VAR_6 ) ) ; } } 
private static boolean METHOD_1 ( TYPE_1 type ) { type = type . METHOD_2 ( ) ; while ( ! ( VAR_1 class . getName ( ) . equals ( type . METHOD_3 ( ) ) ) ) { if ( ( TYPE_2 . METHOD_4 ( type ) . length ) > 0 ) { return true ; } type = type . METHOD_2 ( ) ; } return false ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) { return new TYPE_1 ( ( ( STRING_1 + ( VAR_3 . getName ( ) ) ) + STRING_2 ) ) ; } if ( VAR_3 . METHOD_4 ( ) ) { return METHOD_5 ( ) ; } return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( true ) ; METHOD_3 ( ) ; TYPE_1 . Result r = METHOD_4 ( ) ; revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) ; METHOD_6 ( r , ( - 2 ) ) ; r = METHOD_7 ( r . getChangeId ( ) ) ; METHOD_6 ( r , ( - 2 ) ) ; } 
private void METHOD_1 ( TYPE_1 . Result r ) throws java.lang.Exception { revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; revision ( r ) . submit ( ) ; org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( project ) ; try { com.google.common.truth.Truth.assertThat ( repo . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) . isEqualTo ( r . METHOD_7 ( ) ) ; } finally { repo . close ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) ) ) ; assertEquals ( ( ( STRING_1 + ( ( STRING_2 + STRING_5 ) + STRING_6 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) + ( VAR_1 ) ) ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 . Id VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { if ( ( TYPE_4 . METHOD_2 ( getRefName ( ) , VAR_4 . METHOD_3 ( ) ) ) && ( VAR_4 . METHOD_4 ( ) . equals ( VAR_2 ) ) ) { VAR_3 . add ( VAR_4 ) ; } } return VAR_3 ; } 
public static int METHOD_1 ( ) { int VAR_1 = ( VAR_2 . METHOD_2 ( ) ) + ( VAR_3 . METHOD_2 ( ) ) ; if ( VAR_4 . METHOD_3 ( ) ) { VAR_1 += VAR_4 . METHOD_2 ( ) ; } if ( VAR_5 . METHOD_3 ( ) ) { VAR_1 += VAR_5 . METHOD_2 ( ) ; } return VAR_1 ; } 
private java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 set ) { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( set . METHOD_2 ( ) ) ; java.util.Collections . METHOD_1 ( VAR_1 , new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { return VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; } } ) ; return VAR_1 ; } 
private static void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.lang.String > c , TYPE_1 < java.lang.String > p ) { assertEquals ( ( VAR_1 + STRING_1 ) , 1 , p . METHOD_2 ( ) ) ; METHOD_3 ( ( VAR_1 + STRING_1 ) , c , p . METHOD_4 ( 0 ) ) ; } 
private TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return new TYPE_2 ( ) ; } TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 ) ; switch ( VAR_2 ) { case VAR_4 : return ( VAR_5 ) != null ? VAR_5 : new TYPE_5 ( ) ; case VAR_6 : return new TYPE_6 ( ) ; default : throw new TYPE_7 ( ( STRING_1 + VAR_2 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( VAR_3 class ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_4 ( ) ; TYPE_4 VAR_4 = VAR_1 . METHOD_3 ( VAR_3 class ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( VAR_4 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.List < TYPE_2 > VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } if ( VAR_4 != null ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } VAR_1 . append ( CHAR_3 ) ; } 
protected Project . NameKey METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 , boolean VAR_3 ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . name = ( VAR_4 ) + VAR_1 ; VAR_5 = ( VAR_2 != null ) ? VAR_2 . get ( ) : null ; VAR_6 = VAR_3 ; return METHOD_1 ( in ) ; } 
private void METHOD_1 ( java.lang.String changeId ) throws java.io.IOException { TYPE_1 r = VAR_1 . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_2 ( ) . label ( STRING_3 , 2 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final java.lang.String VAR_2 = STRING_2 ; final TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ; assertEquals ( STRING_3 , VAR_3 . toString ( ) ) ; final TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( STRING_4 ) , STRING_4 ) ; VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) ; assertEquals ( VAR_3 , VAR_4 ) ; } 
public PatchSet . Id METHOD_1 ( ) throws TYPE_1 , com.google.gwtorm.server.OrmException , java.io.IOException { try { if ( magicBranch . edit ) { return METHOD_2 ( ) ; } else if ( VAR_1 == ( TYPE_2 . METHOD_3 ( ) ) ) { return METHOD_4 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_5 ( ) ; try { return METHOD_4 ( db ) ; } finally { db . close ( ) ; } } } finally { synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } } } 
protected void METHOD_1 ( java.lang.String changeId , int psId ) throws com.google.gwtorm.server.OrmException { TYPE_1 VAR_1 = VAR_2 . create ( TYPE_2 . METHOD_2 ( VAR_3 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_4 = VAR_5 . METHOD_4 ( db , VAR_1 , new com.google.gerrit.reviewdb.client.PatchSet.Id ( VAR_1 . getChangeId ( ) , psId ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( ) ; } 
private TYPE_1 . ChangeInfo getChange ( TYPE_2 . Result VAR_1 ) throws java.io.IOException { TYPE_3 r = VAR_2 . get ( ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) + STRING_2 ) ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_1 ( ) ) ; return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 . ChangeInfo class ) ; } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; if ( sshd ) { modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; if ( ! ( VAR_3 ) ) { modules.add ( new TYPE_3 ( ) ) ; } if ( VAR_4 ) { modules.add ( new TYPE_4 ( ) ) ; } else { modules.add ( new TYPE_5 ( ) ) ; } } else { modules.add ( new TYPE_6 ( ) ) ; } return VAR_1 . METHOD_3 ( modules ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { TYPE_2 . METHOD_2 ( ( ! ( VAR_1 . METHOD_3 ( ) ) ) , ( STRING_1 + STRING_2 ) ) ; com.google.gerrit.reviewdb.client.Change change = TYPE_1 . METHOD_4 ( db ) . changes ( ) . get ( changeId ) ; TYPE_2 . METHOD_5 ( change , STRING_3 , changeId ) ; return new TYPE_1 ( args , change . getProject ( ) , change ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( admin , VAR_2 ) ; METHOD_4 ( admin ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_6 ( STRING_1 , VAR_1 ) . to ( VAR_5 ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 , admin , VAR_3 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_11 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , java.io.IOException { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_4 in = new TYPE_5 ( new TYPE_2 ( new TYPE_2 ( VAR_1 , STRING_1 ) , STRING_2 ) ) ; try { VAR_2 . METHOD_2 ( in ) ; } finally { in . close ( ) ; } return VAR_2 ; } 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 ) ; try ( TYPE_6 u = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_3 ( ) , VAR_1 . METHOD_2 ( ) , TYPE_7 . METHOD_4 ( ) ) ) { u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ; } return VAR_4 . change ; } 
private static TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { if ( ! ( id . equals ( org.eclipse.jgit.lib.ObjectId . METHOD_2 ( ) ) ) ) { TYPE_2 p = new TYPE_2 ( ) ; p . METHOD_3 ( walk . METHOD_4 ( ) , walk . METHOD_5 ( id ) ) ; return p ; } else { return new TYPE_3 ( ) ; } } 
public TYPE_1 format ( TYPE_1 out , TYPE_2 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_3 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ; TYPE_4 ctl = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ; return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , ctl , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 < com.google.gerrit.server.query.change.ChangeData > p ) throws TYPE_4 { try { TYPE_5 VAR_1 = new TYPE_5 ( ) ; for ( int i = 0 ; i < ( p . METHOD_2 ( ) ) ; i ++ ) { VAR_1 . add ( TYPE_6 . METHOD_3 ( schema , p . METHOD_4 ( i ) ) , VAR_2 ) ; } return VAR_1 ; } catch ( TYPE_5 e ) { throw new TYPE_4 ( ( STRING_1 + p ) , e ) ; } } 
public static void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { final TYPE_1 p = VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) ; VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_1 = VAR_3 . METHOD_2 ( getProject ( ) . METHOD_3 ( ) , METHOD_4 ( ) . METHOD_5 ( ) ) ; VAR_2 = VAR_1 ; } return VAR_4 . create ( VAR_1 ) ; } 
public java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( psId . getParentKey ( ) ) ; if ( c == null ) { return null ; } TYPE_1 notes = VAR_1 . create ( db , c ) ; com.google.gerrit.reviewdb.client.PatchSet ps = VAR_2 . get ( db , notes , psId ) ; return ps != null ? ps . METHOD_2 ( ) : null ; } 
private TYPE_1 METHOD_1 ( byte [ ] VAR_1 , int VAR_2 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { TYPE_7 VAR_3 = new TYPE_7 ( VAR_1 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_8 VAR_5 = TYPE_8 . METHOD_2 ( VAR_6 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_2 , key . get ( ) , VAR_5 ) ; return VAR_4 ; } 
public TYPE_1 apply ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws TYPE_2 , TYPE_3 , java.io.IOException { try { return this . apply ( new TYPE_4 ( VAR_2 . METHOD_1 ( VAR_1 , VAR_3 . get ( ) ) ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( VAR_1 . get ( ) ) ; } } 
private void METHOD_1 ( ) { if ( TYPE_1 . equals ( TYPE_2 . METHOD_2 ( VAR_1 . getValue ( VAR_1 . METHOD_3 ( ) ) ) ) ) { VAR_2 . METHOD_4 ( false ) ; final TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_5 ( VAR_4 . FALSE ) ; TYPE_4 . METHOD_6 ( VAR_2 , VAR_3 ) ; } else { VAR_2 . METHOD_4 ( VAR_1 . METHOD_7 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) throws java.lang.Exception { try { final java.util.List < ? > VAR_2 = VAR_3 . METHOD_2 ( ( ( java.lang.String ) ( VAR_1 ) ) ) ; return ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ? VAR_2 : null ; } catch ( TYPE_2 e ) { return null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 r = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ; r . METHOD_2 ( ) ; final java.lang.String VAR_3 = STRING_3 ; TYPE_2 in = new TYPE_2 ( ) ; VAR_4 = VAR_1 ; r = VAR_2 . put ( ( STRING_2 + VAR_3 ) , in ) ; com.google.gerrit.reviewdb.client.Project project = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_3 ) ) . getProject ( ) ; org.junit.Assert.assertEquals ( VAR_4 , project . METHOD_3 ( ) ) ; } 
public TYPE_1 . Change update ( TYPE_1 . Change change ) { if ( ( ( change . getStatus ( ) ) == ( VAR_1 ) ) && ( change . currentPatchSetId ( ) . equals ( VAR_2 ) ) ) { change . METHOD_1 ( VAR_3 ) ; TYPE_2 . METHOD_2 ( change ) ; return change ; } else { return null ; } } 
private static java.util.List < TYPE_1 > METHOD_1 ( java.lang.String path , TYPE_2 < TYPE_1 > VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ( ) ) ; i ++ ) { VAR_1 . get ( i ) . METHOD_2 ( path ) ; } return TYPE_3 . METHOD_3 ( VAR_1 ) ; } 
private com.google.gerrit.reviewdb.client . AccountGroup METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_1 ) ; if ( VAR_2 == null ) { VAR_2 = VAR_1 . METHOD_2 ( ) . get ( STRING_2 ) ; } TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) . METHOD_3 ( ) ) ; return VAR_4 . get ( VAR_3 ) ; } 
public TYPE_1 < TYPE_2 > get ( ) { TYPE_3 < TYPE_2 > m = new TYPE_3 < TYPE_2 > ( ) ; java.util.List < TYPE_4 < TYPE_2 > > VAR_1 = VAR_2 . METHOD_1 ( type ) ; if ( VAR_1 != null ) { for ( TYPE_4 < TYPE_2 > b : VAR_1 ) { m . put ( STRING_1 , b . getKey ( ) , b . METHOD_2 ( ) . get ( ) ) ; } } return m ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 < TYPE_1 > ( this , new TYPE_3 < TYPE_1 > ( ) { public void onSuccess ( final TYPE_1 result ) { VAR_2 . display ( result , VAR_1 ) ; if ( VAR_3 ) { VAR_3 = false ; METHOD_3 ( ) ; } } } ) ) ; } 
protected TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( change ) ; TYPE_3 refs = ( ( this . refs ) != null ) ? this . refs : new TYPE_4 ( repo ) ; if ( ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_3 ( refs ) ) ) ) { return METHOD_4 ( repo ) ; } } return super . METHOD_1 ( repo ) ; } 
public void METHOD_1 ( java.lang.String path , boolean VAR_1 ) throws TYPE_1 { try { TYPE_2 < TYPE_3 , TYPE_4 > view ; if ( VAR_1 ) { view = VAR_2 ; } else { view = VAR_3 ; } view . apply ( VAR_4 . get ( ) . METHOD_2 ( revision , TYPE_5 . METHOD_3 ( path ) ) , new TYPE_4 ( ) ) ; } catch ( java.lang.Exception e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 group ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( ( TYPE_3 . METHOD_2 ( group ) ) && ( ( ( TYPE_4 ) ( group ) ) . METHOD_3 ( ) ) ) { VAR_2 = true ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) ; } 
public boolean METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 , TYPE_2 . ChangeInfo VAR_2 , TYPE_3 VAR_3 ) { com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( VAR_5 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_6 ) . isEqualTo ( 1 ) ; if ( name . equals ( STRING_1 ) ) { return false ; } if ( name . equals ( STRING_2 ) ) { VAR_1 . label = STRING_3 ; } return true ; } 
void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } else if ( ( VAR_2 ) == null ) { TYPE_2 VAR_3 = METHOD_5 ( ) ; if ( ! ( METHOD_6 ( ) . METHOD_7 ( ) ) ) { VAR_1 . METHOD_8 ( VAR_3 , VAR_4 . METHOD_9 ( ) ) ; } } else { METHOD_10 ( ) ; } } 
boolean METHOD_1 ( ) { java.lang.String [ ] projects = config . METHOD_2 ( ) ; boolean VAR_1 = ( projects . length ) == 1 ; if ( VAR_1 ) { java.lang.String VAR_2 = projects [ 0 ] ; if ( ( TYPE_1 . METHOD_3 ( VAR_2 ) ) != ( VAR_3 ) ) { VAR_1 = false ; } } return VAR_1 ; } 
public < TYPE_1 > void METHOD_1 ( java.lang.String name , TYPE_1 value , TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 < TYPE_1 > type = ( ( TYPE_3 < TYPE_1 > ) ( value . METHOD_3 ( ) ) ) ; TYPE_4 < TYPE_1 > VAR_2 = METHOD_4 ( name , type , VAR_1 ) ; METHOD_5 ( VAR_2 , ( ) - > { VAR_2 . set ( value ) ; } ) ; } 
private java.lang.String METHOD_1 ( final TYPE_1 . Account account ) { if ( account != null ) { java.lang.String result = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ; if ( ( account . METHOD_3 ( ) ) != null ) { result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ; } return result ; } return VAR_1 ; } 
public static void METHOD_1 ( int changeId , java.lang.String message , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ( ( ( VAR_3 ) + changeId ) + STRING_1 ) ) ; TYPE_4 msg = new TYPE_4 ( ) ; msg . METHOD_2 ( message ) ; VAR_2 . METHOD_3 ( msg , VAR_1 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; VAR_2 = VAR_1 ; try { VAR_3 . apply ( rsrc , in ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public static void METHOD_1 ( final TYPE_1 . ReviewDb db , final TYPE_1 . Change change ) throws TYPE_2 . OrmException { final java.util.List < TYPE_1 . PatchSetApproval > approvals = db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) . METHOD_4 ( ) ; for ( TYPE_1 . PatchSetApproval a : approvals ) { a . METHOD_5 ( change ) ; } db . METHOD_2 ( ) . update ( approvals ) ; } 
public void display ( final TYPE_1 VAR_1 ) { METHOD_1 ( ) ; final TYPE_2 . PatchSet VAR_2 = VAR_1 . METHOD_2 ( ) ; currentPatchSetId = VAR_2 . METHOD_3 ( ) ; for ( final TYPE_2 . PatchSet ps : VAR_1 . METHOD_4 ( ) ) { if ( ps == VAR_2 ) { add ( new TYPE_3 ( VAR_3 , VAR_1 , VAR_1 . METHOD_5 ( ) ) ) ; } else { add ( new TYPE_3 ( VAR_3 , VAR_1 , ps ) ) ; } } } 
private boolean METHOD_1 ( TYPE_1 . Id id , TYPE_2 . ReviewDb db ) throws TYPE_3 . OrmException { TYPE_2 . PatchSet ps = db . patchSets ( ) . get ( id ) ; if ( ps == null ) { throw new TYPE_3 . OrmException ( ( ( STRING_1 + id ) + STRING_2 ) ) ; } return ps . METHOD_2 ( ) ; } 
private void METHOD_1 ( TYPE_1 . ChangeInfo info ) { java.lang.String VAR_1 ; if ( info . METHOD_2 ( ) . equals ( info . METHOD_3 ( ) ) ) { VAR_1 = TYPE_2 . METHOD_4 ( ) ; } else { VAR_1 = TYPE_2 . METHOD_5 ( ) ; } VAR_2 . METHOD_6 ( VAR_1 ) ; VAR_3 . METHOD_6 ( TYPE_3 . METHOD_7 ( info . METHOD_3 ( ) ) ) ; METHOD_8 ( ( ( FLOAT_1 - ( VAR_4 ) ) - ( METHOD_9 ( VAR_5 ) ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 group ) { if ( group != null ) { TYPE_1 ref = VAR_1 . get ( group . METHOD_2 ( ) ) ; if ( ref != null ) { return ref ; } VAR_1 . put ( group . METHOD_2 ( ) , group ) ; } return group ; } 
private static void codemirror ( final java.lang.String token , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 , final TYPE_1 . Key id , final TYPE_2 VAR_2 , final int line , final boolean edit ) { TYPE_3 . METHOD_1 ( new TYPE_4 ( token ) { public void onSuccess ( ) { TYPE_5 . display ( token , ( edit ? new TYPE_6 ( VAR_1 , id , line ) : new TYPE_7 ( VAR_1 , id . getParentKey ( ) , id . get ( ) , VAR_2 , line ) ) ) ; } } ) ; } 
protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ; bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ; } 
private synchronized TYPE_1 get ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws TYPE_2 { TYPE_1 repo = VAR_1 . get ( name . get ( ) . METHOD_1 ( ) ) ; if ( repo != null ) { return repo ; } else { throw new TYPE_2 ( name . get ( ) ) ; } } 
public void METHOD_1 ( TYPE_1 p , TYPE_2 < TYPE_3 . PatchSetApproval > VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { p . approvals = new java.util.ArrayList < TYPE_4 > ( VAR_1 . size ( ) ) ; for ( TYPE_3 . PatchSetApproval a : VAR_1 ) { if ( ( a . getValue ( ) ) != 0 ) { VAR_2 . add ( METHOD_2 ( a ) ) ; } } if ( VAR_2 . isEmpty ( ) ) { p . approvals = null ; } } } 
public long METHOD_1 ( TYPE_1 p ) { long VAR_1 = METHOD_2 ( ) ; long VAR_2 = p . METHOD_2 ( ) ; if ( ( VAR_1 > 0 ) && ( VAR_2 > 0 ) ) { return TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; } } 
void METHOD_1 ( final TYPE_1 . NameKey project , final java.lang.String ref , final TYPE_2 VAR_1 ) { synchronized ( VAR_2 ) { TYPE_3 e = VAR_2 . get ( VAR_1 ) ; if ( e == null ) { e = new TYPE_3 ( this , project . get ( ) , VAR_3 , VAR_1 ) ; VAR_4 . METHOD_1 ( e , VAR_5 , VAR_6 ) ; VAR_2 . put ( VAR_1 , e ) ; } e . METHOD_2 ( ref ) ; } } 
TYPE_1 METHOD_1 ( TYPE_2 user , TYPE_3 revision ) { return new TYPE_1 ( user . METHOD_2 ( ) , revision . METHOD_3 ( ) , TYPE_4 . of ( user . getAccountId ( ) ) , null , VAR_1 , VAR_2 , TYPE_5 . of ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { VAR_1 = new TYPE_2 ( ) ; TYPE_3 update = METHOD_2 ( VAR_2 , VAR_1 ) ; try { VAR_3 . update ( VAR_4 ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_4 . OrmException e ) { org.junit.Assert . METHOD_4 ( e . METHOD_5 ( ) , VAR_1 ) ; } METHOD_6 ( update , 1 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project project , java.lang.String VAR_1 , java.lang.String file ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : VAR_4 . get ( ) . METHOD_2 ( project . getName ( ) , VAR_1 , file ) ) { if ( ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . name ) ) ) && ( ! ( TYPE_2 . METHOD_3 ( VAR_3 . url ) ) ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet , final TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . get ( ) . changes ( ) . id ( patchSet . getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet . getRevision ( ) . get ( ) ) . METHOD_2 ( VAR_1 ) ; } 
public boolean METHOD_1 ( ) { return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_6 ) . METHOD_5 ( VAR_7 , VAR_8 ) . METHOD_5 ( VAR_9 ) . METHOD_6 ( VAR_10 , VAR_11 ) . METHOD_6 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_2 . of ( STRING_1 , TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) ) ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_6 , VAR_7 . Collections < java.lang.String , java.util.ArrayList < TYPE_4 > > METHOD_4 ( ) ) ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( final org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { TYPE_1 VAR_1 = repo . METHOD_2 ( ) ; org.eclipse.jgit.lib.ObjectId id = VAR_1 . insert ( VAR_2 , new byte [ ] { } ) ; VAR_1 . METHOD_3 ( ) ; return id ; METHOD_4 ( INT_1 ) ; TYPE_2 . a VAR_3 ; TYPE_3 to ; TYPE_4 revision ; } 
public void METHOD_1 ( final TYPE_1 res , final boolean VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId ( ) ; final TYPE_2 . Key VAR_2 = res . METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { VAR_4 . METHOD_3 ( key ) ; } key = VAR_4 . METHOD_4 ( id ) ; VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 , null ) ; METHOD_6 ( ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_2 > VAR_1 = VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ; for ( TYPE_4 < java.lang.String , TYPE_2 > VAR_3 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_4 = VAR_3 . getValue ( ) ; if ( ( VAR_4 . type ) == null ) { VAR_4 . type = VAR_5 ; } VAR_4 . name = VAR_3 . getKey ( ) ; } return VAR_1 . values ( ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) ; install ( VAR_11 ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == null ) { return null ; } for ( TYPE_2 VAR_3 : VAR_2 ) { if ( VAR_3 . getName ( ) . METHOD_3 ( STRING_1 ) ) { return VAR_3 . getValue ( ) ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c , VAR_2 ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_4 : VAR_1 ) { VAR_3 . add ( ( STRING_1 + VAR_4 ) ) ; } com.google.common.truth.Truth.assertThat ( TYPE_3 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_3 ) ; } 
public TYPE_1 revision ( java.lang.String id ) throws TYPE_2 { try { return VAR_1 . create ( VAR_2 . METHOD_1 ( change , TYPE_3 . METHOD_2 ( id ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
private void METHOD_1 ( final TYPE_1 . ReviewDb db ) throws TYPE_2 . OrmException { VAR_1 . METHOD_2 ( db . METHOD_3 ( ) . METHOD_4 ( changeId ) . METHOD_5 ( ) ) ; for ( final TYPE_3 m : VAR_1 . METHOD_6 ( ) ) { VAR_2 . METHOD_7 ( m . METHOD_8 ( ) ) ; } } 
public void METHOD_1 ( TYPE_1 . Factory VAR_1 , com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_2 user , TYPE_3 < TYPE_4 > VAR_2 , java.lang.String VAR_3 ) throws TYPE_5 , TYPE_6 { METHOD_1 ( VAR_1 , project , user , VAR_2 , VAR_3 , VAR_4 , TYPE_7 . of ( ) ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_2 r = VAR_3 . get ( ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + VAR_2 ) ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_2 ( ) ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_5 class ) ; } 
public TYPE_1 run ( TYPE_2 . ReviewDb db ) throws TYPE_3 . OrmException { TYPE_4 . Id VAR_1 = getAccountId ( ) ; if ( ! ( VAR_2 . getAccountId ( ) . equals ( getAccountId ( ) ) ) ) { throw new TYPE_5 ( ( ( ( ( STRING_1 + ( VAR_2 . getAccountId ( ) ) ) + STRING_2 ) + STRING_3 ) + ( getAccountId ( ) ) ) ) ; } db . METHOD_1 ( ) . METHOD_2 ( java.util.Collections.singleton ( VAR_2 ) ) ; return VAR_3 ; } 
private static TYPE_1 < TYPE_2 > METHOD_1 ( ) { final TYPE_3 p = VAR_1 . METHOD_2 ( ) ; final java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < TYPE_2 > ( 2 ) ; TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_3 ) ; TYPE_4 . METHOD_3 ( VAR_2 , p , VAR_4 ) ; return java.util.Collections . METHOD_4 ( VAR_2 ) ; } 
public Account . Id METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ; return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; com.google.gerrit.extensions.registration.DynamicSet < TYPE_2 > VAR_3 = com.google.gerrit.extensions.registration.DynamicSet . METHOD_3 ( ) ; VAR_3 . add ( VAR_1 ) ; VAR_4 = new TYPE_3 ( null , VAR_3 , null , null , null ) ; } 
public final void onSuccess ( TYPE_1 result ) { if ( METHOD_1 ( ) ) { if ( ( ( result . length ( ) ) == 1 ) && ( TYPE_2 . METHOD_2 ( query ) ) ) { TYPE_3 . ChangeInfo c = result . get ( 0 ) ; com.google.gerrit.reviewdb.client.Change . Id id = c . METHOD_3 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) ; } else { display ( result ) ; this . display ( ) ; } } } 
public void index ( TYPE_1 VAR_1 ) throws java.io.IOException { for ( TYPE_2 < TYPE_1 , TYPE_3 > i : METHOD_1 ( ) ) { TYPE_4 < TYPE_3 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 . METHOD_3 ( ) ) { i . METHOD_4 ( VAR_2 . get ( ) ) ; } else { i . delete ( VAR_1 ) ; } } METHOD_5 ( VAR_1 . get ( ) ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 < TYPE_2 > VAR_1 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) ) ; } 
public java.util.List < TYPE_1 > get ( ) { java.util.Set < java.lang.String > VAR_1 = cfg . METHOD_1 ( VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( java.lang.String name : VAR_1 ) { VAR_3 . add ( TYPE_3 . METHOD_3 ( cfg , name ) ) ; } return TYPE_4 . METHOD_4 ( VAR_3 ) ; } 
java.util.Set < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , java.io.IOException { METHOD_2 ( ) ; if ( VAR_1 ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( VAR_3 ) ) { return TYPE_2 . METHOD_1 ( repo , TYPE_2 . METHOD_4 ( repo ) ) ; } } return TYPE_1 . METHOD_5 ( db . METHOD_6 ( ) . METHOD_1 ( ) . METHOD_7 ( ) ) ; } 
public TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . get ( STRING_1 ) ) == null ) ) { return new TYPE_1 [ 0 ] ; } else { return VAR_1 . get ( STRING_1 ) . METHOD_2 ( new TYPE_1 [ 0 ] ) ; } } 
public void run ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { for ( final TYPE_1 t : TYPE_3 . METHOD_1 ( ) . METHOD_2 ( ) ) { if ( ! ( VAR_2 . METHOD_3 ( t ) ) ) { VAR_2 . METHOD_4 ( VAR_1 , false ) ; return ; } } VAR_2 . METHOD_4 ( VAR_1 , true ) ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( java.lang.String name ) throws java.io.IOException { if ( VAR_1 . METHOD_2 ( name ) ) { return VAR_1 . get ( name ) ; } name = TYPE_1 . METHOD_3 ( VAR_2 , name ) ; org.eclipse.jgit.lib.Repository repo = VAR_3 . METHOD_1 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ; VAR_1 . put ( name , repo ) ; return repo ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 ctx = VAR_2 . METHOD_2 ( VAR_3 , null ) ; final TYPE_2 VAR_4 = VAR_2 . set ( ctx ) ; try { VAR_5 . METHOD_3 ( ) ; } finally { VAR_2 . set ( VAR_4 ) ; } } 
public boolean METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { try { final TYPE_2 . ReviewDb db = schema . METHOD_2 ( ) ; try { final java.util.List < TYPE_3 > VAR_2 = db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; return ! ( VAR_2 . isEmpty ( ) ) ; } finally { db . close ( ) ; } } catch ( TYPE_4 . OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
private static void p ( final TYPE_1 r , final TYPE_2 . NameKey project ) { java.lang.String n = project . get ( ) ; if ( ! ( n . METHOD_1 ( STRING_1 ) ) ) { n += STRING_1 ; } TYPE_3 . METHOD_2 ( r , STRING_2 , n ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . Id VAR_1 ) throws TYPE_3 { final com.google.gerrit.reviewdb.client . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; } 
protected java.util.List < TYPE_1 . ChangeInfo > METHOD_1 ( TYPE_2 query , com.google.gerrit.reviewdb.client.Change ... changes ) throws java.lang.Exception { java.util.List < TYPE_1 . ChangeInfo > result = query . get ( ) ; TYPE_3 < TYPE_4 > VAR_1 = TYPE_5 . METHOD_2 ( result ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . METHOD_3 ( query . METHOD_4 ( ) ) . METHOD_5 ( TYPE_5 . METHOD_2 ( changes ) ) . METHOD_6 ( ) ; return result ; } 
public void METHOD_1 ( ) throws TYPE_1 { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } for ( TYPE_2 VAR_2 : VAR_3 ) { TYPE_3 args = VAR_2 . args ; com.google.gerrit.reviewdb.client.Account account = VAR_4 . get ( VAR_5 . getAccountId ( ) ) . METHOD_2 ( ) ; VAR_6 . METHOD_3 ( VAR_7 , VAR_8 . METHOD_4 ( ) , VAR_8 . METHOD_5 ( ) , account ) ; } } 
private java.lang.String [ ] METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( p ) ; try { TYPE_2 VAR_2 = new TYPE_2 ( repo . METHOD_3 ( ) , STRING_1 ) ; return VAR_2 . METHOD_4 ( new TYPE_3 ( ) { public boolean METHOD_5 ( TYPE_2 VAR_3 , java.lang.String name ) { return name . METHOD_6 ( STRING_2 ) ; } } ) ; } finally { repo . close ( ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 , TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_5 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; } else { return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; synchronized ( this ) { boolean VAR_2 = ! ( VAR_3 . isEmpty ( ) ) ; for ( TYPE_1 p : VAR_3 . values ( ) ) { p . METHOD_1 ( ) ; } VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_3 ( ) ; if ( VAR_2 ) { TYPE_2 . METHOD_4 ( ) ; METHOD_5 ( ) ; } } } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) { TYPE_3 info = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( project , revision , file ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . name = info . name ; VAR_3 = VAR_4 ; VAR_2 . url = info . url ; VAR_5 = VAR_6 ; return VAR_2 ; } 
protected void rpc ( final java.lang.String name , TYPE_1 < ? extends TYPE_2 > VAR_1 ) { final TYPE_3 . Key < TYPE_4 > VAR_2 = TYPE_5 . get ( VAR_3 class , TYPE_6 . create ( ) ) ; final TYPE_7 VAR_4 = new TYPE_7 ( VAR_1 ) ; METHOD_1 ( ( ( VAR_5 ) + name ) ) . METHOD_2 ( VAR_2 ) ; bind ( VAR_2 ) . METHOD_3 ( VAR_4 ) . in ( VAR_6 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( ( name + STRING_2 ) ) . get ( ) . name ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( name , VAR_3 ) ; VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) ; VAR_4 . METHOD_3 ( name , STRING_3 , new java.lang.String [ ] { } ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 VAR_2 , java.lang.String line ) throws TYPE_2 { if ( VAR_1 == null ) { throw METHOD_2 ( STRING_1 , psId . get ( ) ) ; } if ( line . METHOD_3 ( STRING_2 ) ) { METHOD_4 ( psId , VAR_1 , line ) ; } else { METHOD_5 ( psId , VAR_1 , VAR_2 , line ) ; } } 
public void METHOD_1 ( final TYPE_1 res , final boolean VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id id = res . getAccountId ( ) ; final TYPE_2 . Key VAR_2 = res . METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { VAR_4 . METHOD_3 ( key ) ; } key = VAR_4 . METHOD_4 ( id ) ; VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 ) ; METHOD_6 ( ) ; } 
private void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 { try { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( rsrc . METHOD_3 ( ) ) ; try { if ( ! ( repo . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) . isEmpty ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , rsrc . getName ( ) ) ) ; } } finally { repo . close ( ) ; } } catch ( java.io.IOException e ) { throw new TYPE_2 ( e ) ; } } 
private void METHOD_1 ( final boolean VAR_1 ) { try { for ( TYPE_1 . PatchSetApproval VAR_2 : VAR_3 . get ( ) . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { if ( ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ) { continue ; } add ( VAR_4 , VAR_2 . getAccountId ( ) ) ; } } catch ( TYPE_2 . OrmException err ) { } } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_5 { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { throw new TYPE_4 ( ) ; } try { VAR_2 . METHOD_2 ( db . get ( ) , rsrc . getId ( ) ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( TYPE_7 . METHOD_3 ( rsrc . getId ( ) . toString ( ) ) ) ; } return TYPE_1 . METHOD_4 ( ) ; } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; if ( p == null ) { p = TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . getId ( ) ) ; } result . METHOD_6 ( p ) ; TYPE_6 . METHOD_7 ( p ) ; } } ) ; close ( ) ; } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) return VAR_2 ; if ( VAR_3 . equals ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 ) ) return VAR_4 ; return ( VAR_3 . METHOD_3 ( ) ) - ( ( ( TYPE_2 ) ( VAR_1 ) ) . VAR_3 . METHOD_3 ( ) ) ; } 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 ) ; } } 
protected void METHOD_1 ( TYPE_1 view ) { VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.String token = view . METHOD_2 ( ) ; if ( ! ( token . equals ( VAR_1 ) ) ) { TYPE_2 . METHOD_3 ( token , false ) ; TYPE_3 . METHOD_4 ( token ) ; } if ( view instanceof TYPE_4 ) { VAR_2 = token ; } super . METHOD_1 ( view ) ; view . METHOD_1 ( ) ; } 
private void METHOD_1 ( TYPE_1 . NameKey VAR_1 , TYPE_2 event ) { for ( TYPE_3 VAR_2 : VAR_3 . values ( ) ) { if ( METHOD_2 ( VAR_1 , VAR_2 . user ) ) { VAR_4 . METHOD_3 ( event ) ; } } METHOD_4 ( event ) ; } 
public java.util.List METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 t = this ; while ( t . METHOD_2 ( ) ) { VAR_1 . add ( ( ( TYPE_3 ) ( t ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_1 ( ) ) ; t = ( ( TYPE_3 ) ( t ) ) . METHOD_5 ( ) . METHOD_4 ( ) ; } return VAR_1 ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws TYPE_1 { try { METHOD_2 ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . METHOD_3 ( VAR_1 ) ) { METHOD_4 ( cd . change ( ) ) ; } db . close ( ) ; db = null ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { METHOD_5 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_4 ) . to ( VAR_6 , VAR_7 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_11 ( VAR_10 ) . METHOD_11 ( VAR_3 ) ; assertThat ( VAR_5 ) . METHOD_12 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_1 , VAR_3 , STRING_1 ) . METHOD_4 ( ) ; TYPE_2 d = util . user ( VAR_4 , VAR_3 ) ; METHOD_5 ( STRING_2 , d . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; TYPE_1 in = new TYPE_1 ( ) ; in . account = user . email ; VAR_3 = STRING_2 ; VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_4 ( in ) ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; VAR_1 = VAR_2 . METHOD_2 ( c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ; } return VAR_1 ; } 
public static void METHOD_1 ( int id , java.lang.String user , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . METHOD_2 ( user ) ; TYPE_4 . change ( id ) . view ( STRING_1 ) . put ( user , VAR_1 ) ; } 
public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) . toString ( ) ) ; org.junit.Assert.assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_2 , STRING_5 ) . toString ( ) ) ; org.junit.Assert.assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 , STRING_8 ) . toString ( ) ) ; } 
public AccountGroup . Id METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 . OrmException { if ( ! ( user . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , user . METHOD_4 ( ) ) ) ; } final TYPE_4 VAR_1 = VAR_2 . create ( ) ; final TYPE_5 . Id me = user . getAccountId ( ) ; return VAR_1 . METHOD_5 ( VAR_3 , null , false , null , java.util.Collections.singleton ( me ) , null ) ; } 
public static org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String message , java.util.Map < TYPE_1 , byte [ ] > VAR_1 ) throws java.io.IOException , TYPE_2 { try ( TYPE_3 git = new TYPE_3 ( repo ) ) { if ( VAR_1 != null ) { TYPE_4 . METHOD_2 ( git , VAR_1 ) ; } return git . commit ( ) . METHOD_3 ( message ) . METHOD_4 ( ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) . to ( VAR_1 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) ; bind ( VAR_5 class ) ; bind ( VAR_6 class ) ; install ( new TYPE_1 ( ) { protected void METHOD_1 ( ) { METHOD_2 ( ) . to ( VAR_5 class ) ; } } ) ; } 
private static java.lang.String METHOD_1 ( long VAR_1 , long VAR_2 ) { if ( ( VAR_2 - VAR_1 ) < ( ( ( INT_1 * INT_2 ) * INT_2 ) * INT_3 ) ) { return new TYPE_1 ( STRING_1 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } return new TYPE_1 ( STRING_2 ) . format ( new TYPE_2 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = query ( ( STRING_1 + ( VAR_1 . getChangeId ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_3 ( VAR_2 ) . changeId ) ; } 
public void onSuccess ( TYPE_1 VAR_1 ) { diff = VAR_1 ; VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) ; TYPE_3 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_4 ) ; if ( VAR_3 . METHOD_4 ( ) ) { if ( ( VAR_2 . METHOD_5 ( VAR_5 ) ) > 0 ) { VAR_6 . onSuccess ( null ) ; } else { METHOD_6 ( VAR_1 , VAR_6 ) ; } } else { VAR_6 . onSuccess ( null ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 . Id VAR_1 ) { final java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ; for ( final TYPE_3 e : VAR_2 ) { r . add ( e . METHOD_2 ( VAR_1 ) ) ; } return r ; } 
public static void put ( int id , java.lang.String path , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { if ( TYPE_3 . equals ( path ) ) { TYPE_4 . METHOD_1 ( id , VAR_1 , VAR_2 ) ; } else { TYPE_4 . METHOD_2 ( id , path ) . put ( VAR_1 , VAR_2 ) ; } } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ! ( patchSet . METHOD_2 ( ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } patchSet . METHOD_3 ( false ) ; if ( ! ( VAR_1 ) ) { TYPE_4 . METHOD_4 ( change ) ; ctx . METHOD_5 ( ) ; } ctx . METHOD_6 ( ) . patchSets ( ) . update ( java.util.Collections.singleton ( patchSet ) ) ; } 
public void run ( ) { try { final TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( in , STRING_1 ) ) ; java.lang.String line ; while ( ( line = VAR_1 . METHOD_1 ( ) ) != null ) { VAR_2 . error ( ( STRING_2 + line ) ) ; } VAR_1 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_2 ( STRING_3 , e ) ; } } 
private boolean isEmpty ( ) { return ( ( ( ( ( ( ( approvals . isEmpty ( ) ) && ( ( VAR_1 ) == null ) ) && ( VAR_2 . isEmpty ( ) ) ) && ( reviewers . isEmpty ( ) ) ) && ( ( status ) == null ) ) && ( ( VAR_3 ) == null ) ) && ( ( VAR_4 ) == null ) ) && ( ( VAR_5 ) == null ) ; } 
private int METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_3 = VAR_1 . METHOD_1 ( ) ; if ( VAR_3 == ( - 1 ) ) { return VAR_2 . equals ( STRING_1 ) ? INT_1 : INT_2 ; } else { return VAR_3 ; } } 
private TYPE_1 < ? extends TYPE_1 < ? , java.lang.String , TYPE_2 < java.lang.String > > , java.lang.String , TYPE_2 < java.lang.String > > METHOD_1 ( TYPE_3 . Result r ) throws java.lang.Exception { return com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < java.lang.String > ) ( VAR_1 . changes ( ) . id ( r . getChange ( ) . getId ( ) . get ( ) ) . METHOD_2 ( ) ) ) ) ; } 
private static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse rsp , TYPE_3 VAR_1 ) { java.lang.String VAR_2 = ( VAR_1 != null ) ? VAR_1 . METHOD_2 ( ) : STRING_1 ; TYPE_4 c = new TYPE_4 ( VAR_3 , VAR_2 ) ; c . METHOD_3 ( STRING_2 ) ; c . METHOD_4 ( false ) ; c . METHOD_5 ( TYPE_5 . METHOD_6 ( req ) ) ; c . METHOD_7 ( ( VAR_1 != null ? - 1 : 0 ) ) ; rsp . METHOD_8 ( c ) ; } 
public TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 ( java.lang.String query ) throws TYPE_3 { TYPE_4 VAR_1 = null ; TYPE_5 VAR_2 = null ; try { VAR_1 = VAR_3 . METHOD_2 ( ) ; VAR_2 = VAR_1 . METHOD_3 ( ) ; return METHOD_4 ( VAR_2 , query ) ; } catch ( TYPE_6 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } finally { METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { TYPE_3 . METHOD_3 ( VAR_1 ) ; final TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 ) ; org.junit.Assert . METHOD_4 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_4 ) ; } finally { TYPE_3 . delete ( VAR_1 ) ; } } 
TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) { TYPE_5 p = METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { return new TYPE_6 ( VAR_1 , VAR_2 . METHOD_3 ( STRING_1 ) , false ) ; } else { return new TYPE_6 ( VAR_1 , METHOD_4 ( STRING_2 ) , true ) ; } } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ! ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) || ( METHOD_7 ( db ) ) ) { return false ; } if ( METHOD_8 ( ) ) { return true ; } return VAR_1 . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 t = METHOD_2 ( STRING_1 ) ; METHOD_3 ( t ) ; assertEquals ( VAR_1 , t . METHOD_4 ( ) ) ; assertEquals ( 1 , t . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( t . METHOD_7 ( 0 ) , STRING_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( TYPE_2 . METHOD_4 ( ) ) || ( TYPE_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey name = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; VAR_1 . METHOD_7 ( name ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , cfg ) ; VAR_2 . METHOD_8 ( ) ; VAR_2 . METHOD_7 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 < java.lang.String , java.lang.String > config , TYPE_3 req ) { TYPE_4 VAR_1 = TYPE_5 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_1 , config , req ) ; TYPE_6 . METHOD_5 ( VAR_1 , config ) ; return VAR_1 . create ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { java.lang.String changeId = METHOD_2 ( ) ; TYPE_3 . ChangeInfo c = METHOD_3 ( ( STRING_1 + changeId ) ) ; org.junit.Assert . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( 1 , VAR_1 . size ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) ; } 
public boolean METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) throws java.io.IOException { TYPE_1 ref = VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 , changeId ) ) ; if ( ref == null ) { return ! ( VAR_3 . METHOD_4 ( VAR_2 ) ) ; } return ref . METHOD_5 ( ) . equals ( VAR_3 . get ( VAR_2 ) ) ; } 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; VAR_1 . add ( STRING_2 ) ; VAR_1 . add ( STRING_3 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1 . add ( c . getName ( ) ) ; } return VAR_1 ; } 
public java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 db ) throws TYPE_2 { TYPE_3 s = db . METHOD_2 ( ) ; try { TYPE_4 VAR_1 = s . METHOD_3 ( STRING_1 ) ; try { TYPE_5 < java.lang.String > VAR_2 = new TYPE_5 < java.lang.String > ( ) ; while ( VAR_1 . METHOD_4 ( ) ) { VAR_2 . add ( VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; } return VAR_2 ; } finally { VAR_1 . close ( ) ; } } finally { s . close ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 , null , null , null , null ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 , VAR_3 ) ; METHOD_4 ( STRING_5 , VAR_4 ) ; METHOD_4 ( STRING_6 , VAR_4 , VAR_3 ) ; } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , boolean VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( project . get ( ) ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 ) . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_2 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . to ( VAR_3 ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . toString ( ) ; if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) { return VAR_2 . METHOD_4 ( 0 , VAR_2 . METHOD_5 ( CHAR_1 ) ) ; } if ( VAR_3 . METHOD_6 ( VAR_1 ) ) { return VAR_3 . METHOD_7 ( VAR_1 ) ; } return null ; } 
private static void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_1 VAR_2 , java.lang.String path , TYPE_2 diff ) throws java.io.IOException { try { if ( ! ( path . equals ( STRING_1 ) ) ) { diff . METHOD_2 ( TYPE_3 . create ( path ) ) ; } diff . METHOD_3 ( repo ) ; diff . METHOD_4 ( true ) ; diff . format ( VAR_1 , VAR_2 ) ; } finally { diff . METHOD_5 ( ) ; } } 
public void METHOD_1 ( TYPE_1 ctx ) { if ( ( VAR_1 ) == null ) { return ; } METHOD_2 ( ctx . getProject ( ) , VAR_2 , VAR_3 , VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 , VAR_5 , VAR_6 , ctx . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 . getMessage ( ) , VAR_7 , VAR_8 , ctx . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_1 . get ( VAR_1 class , TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ; if ( ( VAR_3 ) == null ) { METHOD_5 ( STRING_2 ) . METHOD_6 ( new TYPE_3 ( VAR_4 , VAR_5 ) ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 ) ; bind ( VAR_3 class ) . in ( VAR_2 ) ; bind ( VAR_4 class ) . to ( VAR_3 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; TYPE_3 . METHOD_2 ( binder ( ) , VAR_5 ) ; METHOD_3 ( VAR_6 , STRING_1 ) . to ( VAR_7 class ) ; get ( VAR_5 ) . to ( VAR_8 class ) ; } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 class ) . in ( VAR_6 ) ; bind ( VAR_7 class ) . METHOD_3 ( VAR_8 class ) . in ( VAR_6 ) ; bind ( VAR_9 . String class ) . METHOD_2 ( VAR_10 class ) . METHOD_3 ( VAR_11 class ) ; } 
private boolean METHOD_1 ( ) { if ( VAR_1 . get ( ) . METHOD_2 ( ) ) { TYPE_1 ctl = VAR_1 . get ( ) . METHOD_3 ( ) ; return ( ctl . METHOD_4 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) || ( ctl . METHOD_5 ( ) ) ; } else { return false ; } } 
protected void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String to ) throws com.google.gwtorm.server.OrmException { final TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ; final TYPE_2 e = new TYPE_2 ( s ) ; try { s . METHOD_1 ( e , VAR_1 , to ) ; } finally { e . close ( ) ; } } 
public TYPE_1 format ( TYPE_1 out , TYPE_2 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_3 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ; TYPE_4 ctl = cd . METHOD_1 ( ) . METHOD_2 ( VAR_1 . user ( ) ) ; return format ( out , VAR_1 , cd , VAR_2 . METHOD_3 ( db . get ( ) , cd . notes ( ) , ctl . METHOD_4 ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 { try { VAR_2 . METHOD_2 ( TYPE_5 ) ; return ; } catch ( TYPE_3 VAR_3 ) { } if ( VAR_4 . METHOD_3 ( VAR_1 , repo , commit ) ) { return ; } throw new TYPE_3 ( java.lang.String.format ( STRING_1 , TYPE_5 . METHOD_4 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , TYPE_5 , java.io.IOException { TYPE_2 p = VAR_2 . METHOD_1 ( VAR_3 , id ) ; for ( TYPE_6 VAR_4 : p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 , p . METHOD_3 ( ) ) ; } } throw new TYPE_4 ( id ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( null ) ; METHOD_5 ( r ) ; assertEquals ( VAR_2 . getName ( ) , r . name ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) != null ) ) { return TYPE_1 . of ( TYPE_2 . of ( VAR_2 . METHOD_2 ( ) . get ( VAR_1 ) ) ) ; } else { return TYPE_1 . METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 err = new TYPE_1 ( name ) ; METHOD_2 ( ) . METHOD_3 ( err ) ; METHOD_4 ( ) ; try { new TYPE_2 ( VAR_1 , VAR_2 , name ) . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_1 VAR_3 ) { METHOD_7 ( err , VAR_3 ) ; } METHOD_8 ( ) ; } 
public TYPE_1 < ? > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Id id , TYPE_2 VAR_1 ) { return VAR_1 . submit ( new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_2 ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_3 ( ) ) { METHOD_4 ( db , id ) ; } return null ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . add ( METHOD_3 ( STRING_1 , null ) ) ; changeId = VAR_1 . get ( 0 ) . getChangeId ( ) ; VAR_1 . add ( METHOD_3 ( STRING_2 , changeId ) ) ; VAR_1 . add ( METHOD_3 ( STRING_3 , changeId ) ) ; } 
private static TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 ( java.util.List < TYPE_2 > plugins ) throws java.io.IOException { TYPE_1 < java.lang.String , TYPE_2 > VAR_1 = TYPE_3 . create ( ) ; for ( TYPE_2 VAR_2 : plugins ) { VAR_1 . put ( TYPE_4 . METHOD_2 ( VAR_2 ) , VAR_2 ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_1 , VAR_4 ) ; assertEquals ( new TYPE_1 ( VAR_1 , STRING_1 ) , VAR_5 ) ; } 
public final java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_3 ( ) ; } else { if ( ( METHOD_2 ( ) . METHOD_4 ( ) ) != ( - 1 ) ) { return TYPE_1 . toString ( METHOD_2 ( ) . METHOD_4 ( ) ) ; } else { return STRING_1 ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_3 ( ) ; TYPE_2 . Result change = METHOD_4 ( git ) ; submit ( change . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_3 ( ) ; org.junit.Assert.assertEquals ( change . METHOD_5 ( ) , VAR_2 . getId ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_6 ( 0 ) ) ; METHOD_7 ( change . getChangeId ( ) , 1 ) ; } 
private static TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; for ( int i = ( VAR_1 . size ( ) ) - 1 ; i >= 0 ; i -- ) { VAR_2 = new TYPE_2 ( VAR_1 . get ( i ) , VAR_2 ) ; } return VAR_2 ; } 
public void METHOD_1 ( final TYPE_1 event ) { final TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event . METHOD_2 ( ) ) ) ; if ( ( VAR_2 ) == VAR_1 ) { METHOD_3 ( ) ; } else if ( ( VAR_3 ) == VAR_1 ) { VAR_4 = false ; METHOD_4 ( ) ; } } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return METHOD_2 ( VAR_1 ) ; } else { switch ( status ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { return VAR_2 . values ( ) ; } else { java.util.List < TYPE_2 > plugins = new java.util.ArrayList ( VAR_2 . values ( ) ) ; plugins . METHOD_2 ( VAR_3 . values ( ) ) ; return plugins ; } } 
public static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) { return ; } TYPE_1 [ ] VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 != null ) { for ( TYPE_1 d : VAR_2 ) { if ( d . METHOD_5 ( ) ) { TYPE_2 . METHOD_1 ( d ) ; } else { TYPE_2 . METHOD_6 ( d ) ; } } } TYPE_2 . METHOD_6 ( VAR_1 ) ; } 
public static void METHOD_1 ( int id , java.lang.String commit , java.lang.String VAR_1 , java.lang.String message , TYPE_1 < TYPE_2 . ChangeInfo > VAR_2 ) { TYPE_3 VAR_3 = TYPE_3 . create ( ) ; VAR_3 . METHOD_2 ( message ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; TYPE_4 . METHOD_4 ( id , commit , STRING_1 ) . METHOD_5 ( VAR_3 , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.util.Map < java.lang.String , TYPE_1 > res = METHOD_5 ( STRING_1 , VAR_1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_6 ( 1 ) ; com.google.common.truth.Truth.assertThat ( res ) . METHOD_7 ( name ) ; TYPE_1 d = res . get ( name ) ; com.google.common.truth.Truth.assertThat ( d . name ) . isEqualTo ( name ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = null ; for ( TYPE_3 w : this ) { if ( w instanceof TYPE_2 ) { final TYPE_2 d = ( ( TYPE_2 ) ( w ) ) ; if ( VAR_2 == null ) { VAR_2 = d ; } if ( ( d . METHOD_2 ( ) ) == VAR_1 ) { d . METHOD_1 ( ) ; return ; } } } if ( VAR_2 != null ) { VAR_2 . METHOD_1 ( ) ; } } 
private < TYPE_1 , TYPE_2 > TYPE_3 < TYPE_2 , TYPE_1 > METHOD_1 ( java.lang.String name , TYPE_4 < TYPE_2 > VAR_1 , long VAR_2 ) { TYPE_5 db = new TYPE_5 ( VAR_3 , name ) . METHOD_2 ( ) ; java.lang.String url = STRING_1 + ( db . METHOD_3 ( ) . toString ( ) ) ; return new TYPE_3 < TYPE_2 , TYPE_1 > ( url , VAR_1 , VAR_2 ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) ) ; return VAR_2 . METHOD_2 ( git , STRING_1 ) . getChangeId ( ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws TYPE_2 , java.io.IOException , TYPE_3 { org.eclipse.jgit.lib.Repository repo ; try { repo = VAR_1 . METHOD_2 ( change . getProject ( ) ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( change . getProject ( ) , e ) ; } try { return new TYPE_1 ( repo , change ) ; } finally { repo . close ( ) ; } } 
private void METHOD_1 ( final boolean VAR_1 ) throws TYPE_1 { if ( ( db ) != null ) { try { for ( TYPE_2 VAR_2 : db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { if ( ( ! VAR_1 ) && ( ( VAR_2 . getValue ( ) ) == 0 ) ) { continue ; } add ( VAR_3 , VAR_2 . getAccountId ( ) ) ; } } catch ( TYPE_3 . OrmException err ) { } } } 
public void METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) { if ( ( METHOD_2 ( VAR_1 ) ) != ( - 1 ) ) { if ( ! ( VAR_1 . equals ( VAR_2 ) ) ) { METHOD_3 ( ) ; TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; VAR_3 . METHOD_4 ( true ) ; VAR_3 . METHOD_5 ( true ) ; VAR_2 = VAR_1 ; } } else { TYPE_2 . display ( TYPE_3 . METHOD_6 ( VAR_1 . getParentKey ( ) ) ) ; } } 
private void METHOD_1 ( ) { final TYPE_1 < TYPE_2 > VAR_1 = new TYPE_1 < TYPE_2 > ( ) { private int VAR_2 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_2 ) ) == ( VAR_3 . size ( ) ) ) { METHOD_2 ( ) ; } } } ; for ( final TYPE_3 p : VAR_3 ) { p . METHOD_3 ( VAR_1 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { TYPE_2 VAR_2 = TYPE_3 . create ( VAR_3 , name , 0 ) ; if ( ! ( VAR_1 . METHOD_2 ( VAR_4 , STRING_1 , VAR_2 ) ) ) { METHOD_3 ( ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + name ) ) ; } } 
public java.lang.String METHOD_1 ( ) { if ( ( value ( ) ) <= ( ( short ) ( 0 ) ) ) { return ( ( label ( ) ) + CHAR_1 ) + ( value ( ) ) ; } else { return ( ( label ( ) ) + STRING_1 ) + ( value ( ) ) ; } } 
public void METHOD_1 ( ) { final java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_1 , STRING_2 , STRING_2 , STRING_3 , STRING_3 , STRING_4 , STRING_4 , STRING_4 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 } ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i += 2 ) { assertEquals ( TYPE_1 . METHOD_2 ( VAR_1 [ i ] ) , VAR_1 [ ( i + 1 ) ] ) ; } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client . AccountGroup group ) throws java.io.IOException { try { METHOD_1 ( TYPE_1 . METHOD_2 ( group ) , METHOD_3 ( group , null ) ) . get ( ) ; } catch ( TYPE_2 | TYPE_3 e ) { throw new java.io.IOException ( e ) ; } } 
private TYPE_1 METHOD_1 ( java.lang.String changeId , java.lang.String VAR_1 , TYPE_2 c ) throws java.io.IOException { TYPE_3 r = VAR_2 . put ( ( ( ( ( STRING_1 + changeId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) , c ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; return METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 group ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_3 . METHOD_1 ( repo , TYPE_2 . METHOD_3 ( db , group . getId ( ) ) ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_4 ( repo , group . METHOD_5 ( ) ) ; TYPE_4 < TYPE_1 > result = VAR_4 . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( result ) . METHOD_7 ( ) ; return result . get ( ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) throws TYPE_3 { try { return new TYPE_4 ( args . rw , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , args . repo ) . METHOD_1 ( VAR_1 ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey n : METHOD_3 ( ) ) { TYPE_3 p = VAR_2 . METHOD_4 ( n ) ; if ( p != null ) { VAR_1 . METHOD_5 ( p . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( new TYPE_2 < java.util.List < TYPE_3 . AccountGroup > > ( this ) { protected void METHOD_4 ( final java.util.List < TYPE_3 . AccountGroup > result ) { VAR_1 . display ( result ) ; VAR_1 . METHOD_5 ( true ) ; } } ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ; if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_3 ( ctx ) ; return ; } if ( c . currentPatchSetId ( ) . equals ( psId ) ) { c . METHOD_4 ( METHOD_5 ( ctx ) ) ; } ctx . METHOD_6 ( ) ; } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( rsrc ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = add ( TYPE_2 . METHOD_2 ( ) , user ) ; TYPE_1 VAR_2 = add ( TYPE_2 . METHOD_3 ( ) , METHOD_4 ( STRING_1 ) ) ; TYPE_3 VAR_3 = VAR_4 . create ( ) . METHOD_5 ( user ) . METHOD_6 ( VAR_5 ) ; METHOD_7 ( VAR_3 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_6 , STRING_2 , ( ( STRING_3 + ( TYPE_4 . METHOD_10 ( VAR_2 . METHOD_9 ( ) ) ) ) + STRING_4 ) , STRING_5 ) ; } 
public synchronized void METHOD_1 ( ) { VAR_1 . info ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; VAR_3 = VAR_4 ; METHOD_3 ( false ) ; VAR_3 = VAR_5 ; if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_1 ( ) ; } } 
public void onSuccess ( TYPE_1 VAR_1 ) { diff = VAR_1 ; if ( VAR_2 . METHOD_1 ( ) ) { VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 . METHOD_3 ( VAR_4 ) ) > 0 ) { VAR_5 . onSuccess ( null ) ; } else { METHOD_4 ( VAR_1 , VAR_5 ) ; } } else { VAR_5 . onSuccess ( null ) ; } } 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 ctx ) { change = new com.google.gerrit.reviewdb.client.Change ( TYPE_2 . METHOD_2 ( commit ) , changeId , ctx . METHOD_3 ( ) . getAccountId ( ) , new TYPE_3 . NameKey ( ctx . getProject ( ) , VAR_1 ) , ctx . METHOD_4 ( ) ) ; change . METHOD_5 ( TYPE_4 . METHOD_6 ( status , VAR_2 ) ) ; change . METHOD_7 ( topic ) ; return change ; } 
public TYPE_1 METHOD_1 ( TYPE_2 group , boolean create ) { METHOD_2 ( ) ; for ( TYPE_1 r : VAR_1 ) { if ( TYPE_3 . METHOD_3 ( r , group ) ) { return r ; } } if ( create ) { TYPE_1 r = new TYPE_1 ( group ) ; VAR_1 . add ( r ) ; return r ; } else { return null ; } } 
protected void METHOD_1 ( ) { if ( ( ( ! ( VAR_1 ) ) && ( ( METHOD_2 ( ) ) != null ) ) && ( STRING_1 . equals ( super . METHOD_3 ( ) ) ) ) { super . METHOD_4 ( METHOD_2 ( ) ) ; VAR_1 = true ; if ( ( METHOD_5 ( ) ) != null ) { METHOD_6 ( METHOD_5 ( ) ) ; } } } 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.util.Set < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change . Id id : VAR_1 ) { r . add ( new TYPE_4 ( schema , id ) ) ; } return r ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( VAR_1 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ; } try ( org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_4 ( VAR_1 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_3 ( ) ; } com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_2 . METHOD_5 ( ) ) ) ) . METHOD_6 ( VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) throws com.google.gwtorm.server.OrmException { if ( VAR_1 == null ) { return VAR_3 ; } if ( VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 ) ; } else { if ( VAR_1 . equals ( STRING_1 ) ) { return VAR_3 ; } else if ( VAR_1 . equals ( STRING_2 ) ) { return VAR_4 ; } else { throw new com.google.gwtorm.server.OrmException ( ( STRING_3 + VAR_1 ) ) ; } } } 
protected void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , new TYPE_7 ( ) , new TYPE_8 ( VAR_1 < TYPE_9 > METHOD_3 ( ) ) , new TYPE_10 ( ) ) ; } 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { t = t . METHOD_2 ( ) ; if ( t . METHOD_3 ( ) ) { ( ( TYPE_3 ) ( t ) ) . bind ( this , VAR_1 ) ; return true ; } return TYPE_4 . METHOD_4 ( this , t ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 { if ( VAR_2 ) { TYPE_5 VAR_3 = new TYPE_5 ( VAR_4 ) ; VAR_3 . METHOD_2 ( false ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; while ( ( VAR_3 . METHOD_4 ( ) ) && ( ! ( METHOD_5 ( ) ) ) ) { METHOD_6 ( VAR_3 ) ; } } } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_1 . ChangeInfo VAR_1 , TYPE_2 VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_3 event = new TYPE_3 ( change , VAR_1 , VAR_2 ) ; for ( TYPE_4 VAR_4 : VAR_3 ) { try { VAR_4 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_5 . log , e ) ; } } } 
private static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 < TYPE_3 > m ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 < java.lang.String > ( m . METHOD_2 ( ) ) ; for ( java.lang.String id : VAR_2 ) { VAR_1 . METHOD_3 ( id ) ; } return VAR_1 ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 r = label ( VAR_1 . METHOD_2 ( ) . get ( ) ) ; if ( ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( r . isEmpty ( ) ) ) { return false ; } return r . contains ( VAR_1 . value ( ) ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . PatchSet patchSet ) { TYPE_1 p = new TYPE_1 ( ) ; p . revision = patchSet . getRevision ( ) . get ( ) ; VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ; p . ref = patchSet . getRefName ( ) ; VAR_2 = METHOD_3 ( patchSet . METHOD_4 ( ) ) ; VAR_3 = ( patchSet . METHOD_5 ( ) . METHOD_6 ( ) ) / INT_1 ; return p ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , com.google.gerrit.server.query.change.ChangeData cd , TYPE_1 < TYPE_2 > VAR_2 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; com.google.gerrit.reviewdb.client.Account.Id VAR_4 = cd . change ( ) . METHOD_4 ( ) ; for ( TYPE_2 cm : VAR_3 ) { if ( VAR_1 . equals ( cm . METHOD_5 ( ) ) ) { return true ; } else if ( VAR_4 . equals ( cm . METHOD_5 ( ) ) ) { return false ; } } return false ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 VAR_2 ) { try { METHOD_1 ( util . METHOD_2 ( change ) , util . METHOD_3 ( change . getProject ( ) , patchSet ) , util . METHOD_4 ( VAR_1 ) , VAR_2 ) ; } catch ( TYPE_2 | TYPE_3 | java.io.IOException | com.google.gwtorm.server.OrmException e ) { VAR_3 . error ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = METHOD_2 ( ) ; TYPE_1 update = METHOD_3 ( c , VAR_1 ) ; TYPE_2 < java.lang.String > VAR_2 = new TYPE_2 < > ( ) ; VAR_2 . add ( STRING_1 ) ; VAR_2 . add ( STRING_2 ) ; update . METHOD_4 ( VAR_2 ) ; update . commit ( ) ; TYPE_3 notes = METHOD_5 ( c ) ; org.junit.Assert.assertEquals ( VAR_2 , notes . METHOD_6 ( ) ) ; } 
public TYPE_1 close ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_1 ( ( ( TYPE_3 . contains ( VAR_1 ) ) && ( ! ( TYPE_4 . equals ( VAR_1 ) ) ) ) , STRING_1 , VAR_1 ) ; METHOD_2 ( ) ; VAR_2 . append ( STRING_2 ) . append ( VAR_1 ) . append ( CHAR_1 ) ; return this ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + STRING_2 ; repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_5 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_7 + STRING_7 ) + STRING_8 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( ( STRING_6 + ( ( STRING_9 + STRING_10 ) + STRING_11 ) ) ) ; } 
public PatchSet . Id METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { try { if ( VAR_1 == ( TYPE_1 . METHOD_2 ( ) ) ) { return METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ; try { return METHOD_3 ( db ) ; } finally { db . close ( ) ; } } } finally { synchronized ( VAR_3 ) { VAR_4 . update ( 1 ) ; } } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_3 VAR_2 = VAR_3 . get ( TYPE_4 . create ( VAR_4 , VAR_1 ) ) ; if ( VAR_2 == null ) { return TYPE_1 . METHOD_2 ( ) ; } return METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; } catch ( java.io.IOException | TYPE_5 e ) { VAR_5 . METHOD_5 ( ( STRING_1 + VAR_1 ) , e ) ; return null ; } } 
private static void METHOD_1 ( TYPE_1 config , TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 . sshd ( config , VAR_1 ) ; TYPE_4 . METHOD_2 ( config , VAR_1 ) ; TYPE_4 . user ( config , VAR_1 ) ; TYPE_4 . auth ( config , VAR_1 ) ; TYPE_4 . METHOD_3 ( config , VAR_1 ) ; TYPE_4 . repo ( config , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_1 . add ( STRING_1 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_3 ( input ) ; org.junit.Assert . METHOD_4 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_5 ( ) . isEqualTo ( METHOD_6 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_7 ( ) ; } 
TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws TYPE_2 , TYPE_3 , java.io.IOException { TYPE_4 VAR_1 = VAR_2 . METHOD_1 ( name ) ; if ( ! ( VAR_1 . getProject ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_3 ( name ) ; } return new TYPE_1 ( VAR_1 , VAR_3 . get ( ) , VAR_4 . METHOD_4 ( name ) , VAR_5 , VAR_6 ) ; } 
public void METHOD_1 ( final boolean on ) { VAR_1 = on ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( getValue ( ) . METHOD_3 ( ) ) ; } else { VAR_2 . METHOD_2 ( false ) ; } METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ; com.google.gerrit.reviewdb.client.PatchSet.Id ps = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_4 ( ps ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . isEmpty ( ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < ? extends TYPE_3 > VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 == null ) { throw new TYPE_5 ( STRING_1 ) ; } bind ( TYPE_6 . key ( VAR_1 , VAR_3 . name ( ) , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) ; } 
void METHOD_1 ( TYPE_1 e ) { e . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 . line ( ) ) ; java.lang.String token = TYPE_3 . METHOD_4 ( psId , VAR_1 . path ( ) ) ; if ( ! ( TYPE_4 . METHOD_5 ( ) ) ) { TYPE_4 . METHOD_6 ( token ) ; } else { TYPE_4 . display ( token ) ; } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_8 , TYPE_9 { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 . getAccountId ( ) ) ; return VAR_4 . create ( VAR_2 . getParentKey ( ) ) . METHOD_1 ( ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { TYPE_2 . Key key = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ; return VAR_4 . get ( key , new TYPE_3 ( key , VAR_5 , project , repo ) ) ; } catch ( TYPE_4 e ) { VAR_6 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) ; return VAR_7 ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_5 ) ; bind ( TYPE_1 . get ( VAR_6 class , TYPE_2 . METHOD_4 ( STRING_1 ) ) ) . METHOD_5 ( VAR_7 class ) . in ( VAR_8 ) ; METHOD_6 ( ) . to ( VAR_7 class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . Result r = METHOD_3 ( ) ; TYPE_2 revision = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ; TYPE_3 in = new TYPE_3 ( ) ; VAR_2 = VAR_3 . toString ( ) ; VAR_4 = true ; in . label ( STRING_1 , INT_1 ) ; VAR_5 . METHOD_5 ( VAR_6 class ) ; VAR_5 . METHOD_6 ( STRING_2 ) ; revision . METHOD_7 ( in ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ; TYPE_2 u = user ( VAR_4 ) ; METHOD_4 ( u ) ; METHOD_5 ( STRING_3 , u ) ; METHOD_5 ( STRING_4 , u ) ; METHOD_5 ( STRING_5 , u ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result VAR_2 = METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_3 = VAR_4 . changes ( ) . query ( STRING_1 ) . get ( ) ; org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) ; } 
public void run ( ) { if ( VAR_1 . METHOD_1 ( ) ) { return ; } TYPE_1 VAR_2 = cm . METHOD_2 ( ) ; int size = ( ( VAR_2 . METHOD_3 ( ) ) - ( VAR_2 . METHOD_4 ( ) ) ) + 1 ; if ( ( cm . METHOD_5 ( ) ) == size ) { return ; } cm . METHOD_6 ( size ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; } 
public void run ( ) { try { final TYPE_1 cm = VAR_1 . create ( id ) ; cm . METHOD_1 ( user . getAccountId ( ) ) ; cm . METHOD_2 ( VAR_2 , result . info ) ; cm . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 = VAR_2 . getId ( ) ; VAR_4 . error ( ( STRING_1 + VAR_3 ) , e ) ; } } 
private void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 ) throws java.io.IOException { METHOD_2 ( res , VAR_1 . type ) ; try ( TYPE_4 VAR_2 = METHOD_3 ( req , res , null ) ; TYPE_5 out = TYPE_6 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) { VAR_1 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . id ) . METHOD_8 ( out ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_7 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 VAR_4 = VAR_5 . get ( ( ( TYPE_6 ) ( VAR_1 ) ) ) ; if ( ! ( VAR_4 . METHOD_2 ( VAR_6 ) ) ) { VAR_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_6 ) ; return ; } else { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; } } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 VAR_1 , java.lang.String VAR_2 , TYPE_3 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_4 event = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_5 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_6 . log , e ) ; } } } 
private TYPE_1 . Result METHOD_1 ( java.lang.String ref , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String changeId ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_4 = VAR_5 . create ( db , admin . METHOD_2 ( ) , VAR_1 , VAR_2 , VAR_3 , changeId ) ; return VAR_4 . to ( git , ref ) ; } 
private java.lang.String METHOD_1 ( final TYPE_1 req ) throws TYPE_2 { java.lang.String VAR_1 = req . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_3 ( TYPE_3 ) ) ) ) { return null ; } else { return new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( TYPE_3 . length ( ) ) ) , TYPE_5 . METHOD_6 ( req ) ) ; } } 
public void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 , com.google.gwtorm.server.OrmException { try { VAR_1 . METHOD_1 ( rsrc ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e . getMessage ( ) ) ; } try { VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) . getProject ( ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e . getMessage ( ) ) ; } } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { TYPE_2 . Result result = TYPE_2 . METHOD_2 ( repo , VAR_1 ) ; org.junit.Assert.assertEquals ( INT_1 , result . METHOD_3 ( ) . getStatus ( ) ) ; return result . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result VAR_2 = METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_3 = query ( STRING_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_3 . size ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 . getChangeId ( ) , VAR_3 . get ( 0 ) . changeId ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , VAR_3 . get ( 1 ) . changeId ) ; } 
private static java.lang.String METHOD_1 ( final java.lang.String token ) { if ( TYPE_1 . METHOD_2 ( STRING_1 , token ) ) { return TYPE_2 . METHOD_3 ( STRING_2 , TYPE_1 . METHOD_4 ( token ) ) ; } if ( TYPE_1 . METHOD_2 ( STRING_3 , token ) ) { return TYPE_2 . METHOD_3 ( STRING_4 , TYPE_1 . METHOD_4 ( token ) ) ; } if ( TYPE_1 . METHOD_2 ( STRING_5 , token ) ) { return TYPE_2 . METHOD_3 ( STRING_6 , TYPE_1 . METHOD_4 ( token ) ) ; } return null ; } 
public void METHOD_1 ( java.lang.String projectName , TYPE_1 VAR_1 , java.lang.String event ) throws TYPE_2 { try ( TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( ) ) { VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ; } } 
private static TYPE_1 METHOD_1 ( final TYPE_2 branch , org.eclipse.jgit.revwalk.RevWalk rw ) throws java.io.IOException , TYPE_3 , TYPE_4 { final TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; final TYPE_5 b = VAR_1 . METHOD_3 ( ) ; b . METHOD_4 ( new byte [ 0 ] , VAR_2 , rw . METHOD_5 ( ) , rw . METHOD_6 ( branch . METHOD_7 ( ) ) ) ; b . METHOD_8 ( ) ; return VAR_1 ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , java.io.IOException { if ( ( VAR_1 ) == null ) { throw new TYPE_5 ( STRING_1 ) ; } try { VAR_2 . METHOD_1 ( rsrc . METHOD_2 ( ) , rsrc . METHOD_3 ( ) , TYPE_6 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; } catch ( TYPE_7 | java.io.IOException e ) { throw new TYPE_5 ( e . getMessage ( ) ) ; } return TYPE_1 . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( METHOD_4 ( STRING_2 ) ) ) + STRING_4 ) , res . METHOD_5 ( ) ) ; } 
public TYPE_1 create ( ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 ) ) { VAR_1 = true ; final com.google.gerrit.reviewdb.server.ReviewDb c = METHOD_1 ( ) ; try { try { VAR_2 . create ( c ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ; } catch ( TYPE_2 e ) { throw new com.google.gwtorm.server.OrmException ( STRING_1 , e ) ; } } finally { c . close ( ) ; } } return this ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo VAR_1 = new TYPE_1 . ChangeInfo ( ) ; VAR_1 . project = project . get ( ) ; TYPE_2 r = VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) ; org.junit.Assert . METHOD_4 ( r . METHOD_5 ( ) . contains ( STRING_2 ) ) ; } 
public boolean METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return true ; } if ( ! ( VAR_2 . METHOD_1 ( ) ) ) { return false ; } com.google.gerrit.reviewdb.client.Project.NameKey r = VAR_2 . METHOD_2 ( ) ; if ( r . get ( ) . METHOD_3 ( VAR_3 ) ) { VAR_1 = r ; return true ; } else { VAR_2 = VAR_4 . Collections < com.google.gerrit.reviewdb.client.Project.NameKey > METHOD_4 ( ) . METHOD_5 ( ) ; return false ; } } 
TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 , int VAR_2 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( VAR_1 . size ( ) ) > VAR_2 ) { return METHOD_2 ( repo , db , branch , VAR_1 ) ; } else { return METHOD_3 ( branch , VAR_1 ) ; } } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = id ; java.util.List < TYPE_8 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } else { throw new TYPE_9 ( ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( STRING_1 ) ; try { TYPE_3 . METHOD_4 ( VAR_1 ) ; TYPE_3 . METHOD_5 ( VAR_2 ) ; final TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 ) ; org.junit.Assert . METHOD_6 ( VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_7 ( ) , VAR_5 ) ; } finally { TYPE_3 . delete ( VAR_2 ) ; TYPE_3 . delete ( VAR_1 ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_2 > VAR_1 = ( ( java.util.Map < java.lang.String , TYPE_2 > ) ( VAR_2 . get ( ) . apply ( new TYPE_3 ( ) ) ) ) ; for ( TYPE_4 < java.lang.String , TYPE_2 > VAR_3 : VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_4 = VAR_3 . getValue ( ) ; VAR_4 . name = VAR_3 . getKey ( ) ; } return VAR_1 . values ( ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . change ( ) ; if ( c == null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 = c . currentPatchSetId ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) . values ( ) ) { if ( ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) && ( ( p . getValue ( ) ) != 0 ) ) { return true ; } } return false ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { java.lang.String s = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; if ( ( s != null ) && ( ! ( s . isEmpty ( ) ) ) ) { try { VAR_3 = TYPE_2 . METHOD_3 ( s ) ; } catch ( TYPE_3 err ) { VAR_3 = INT_1 ; } } METHOD_4 ( new TYPE_4 ( ) { public void run ( ) throws java.lang.Exception { METHOD_5 ( ) ; VAR_4 this . display ( ) ; } } ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) . append ( TYPE_2 . ps ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . commit ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_7 ( ) ) . METHOD_6 ( ) . METHOD_3 ( ) . append ( TYPE_2 . METHOD_8 ( ) ) . METHOD_6 ( ) . METHOD_9 ( ) ; } 
public TYPE_1 . Change update ( TYPE_1 . Change change ) { if ( change . getStatus ( ) . METHOD_1 ( ) ) { if ( ( VAR_1 ) != null ) { change . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? null : VAR_1 ) ) ; } change . METHOD_3 ( VAR_2 ) ; change . METHOD_4 ( result . info ) ; TYPE_2 . METHOD_5 ( change ) ; return change ; } else { return null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( config . METHOD_3 ( ) ) ) { TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( VAR_5 , VAR_6 ) ) ; VAR_7 . set ( VAR_8 . create ( null , TYPE_3 . METHOD_4 ( ) , VAR_4 ) . METHOD_5 ( INT_1 , VAR_9 ) ) ; } } 
public void METHOD_1 ( TYPE_1 req , TYPE_2 rsp , TYPE_3 VAR_1 ) throws java.io.IOException , TYPE_4 { TYPE_5 s = ( user . get ( ) . METHOD_2 ( ) ) ? VAR_2 . get ( ) : null ; TYPE_6 . METHOD_3 ( ( ( TYPE_7 ) ( req ) ) , ( ( TYPE_8 . HttpServletResponse ) ( rsp ) ) , s ) ; VAR_1 . METHOD_1 ( req , rsp ) ; } 
public AccountGroup . Id METHOD_1 ( ) throws TYPE_1 , TYPE_2 , com.google.gwtorm.server.OrmException { final TYPE_3 VAR_1 = VAR_2 . create ( ) ; final com.google.gerrit.reviewdb.client.Account.Id me = user . getAccountId ( ) ; return VAR_1 . METHOD_2 ( VAR_3 , null , VAR_4 , null , java.util.Collections.singleton ( me ) , null ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 ctl , com.google.gerrit.reviewdb.client.PatchSet in ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { VAR_1 = VAR_2 . create ( METHOD_2 ( VAR_3 ) ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_4 . METHOD_3 ( ctl . getProject ( ) . METHOD_4 ( ) ) ) { TYPE_1 VAR_5 = METHOD_5 ( ctl , VAR_6 . create ( db . get ( ) , ctl ) , in , repo ) ; VAR_1 . METHOD_6 ( ) ; return VAR_5 ; } } 
public boolean METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 , ( ( short ) ( 1 ) ) ) ) { return true ; } if ( ( getRefName ( ) . equals ( TYPE_1 . METHOD_3 ( 0 , ( ( TYPE_1 . length ( ) ) - 1 ) ) ) ) && ( METHOD_4 ( ) . METHOD_1 ( ) ) ) { return true ; } return false ; } 
public TYPE_1 < ? > apply ( TYPE_2 project , TYPE_3 input ) throws TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( ( input == null ) || ( ( VAR_1 ) == null ) ) || ( VAR_1 . isEmpty ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } VAR_2 . create ( project ) . refs ( VAR_1 ) . delete ( ) ; return TYPE_1 . METHOD_1 ( ) ; METHOD_2 ( 2 ) ; TYPE_6 VAR_3 ; } 
private void plugins ( TYPE_1 w ) { java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_1 ( ) ; for ( TYPE_3 u : plugins ) { VAR_1 . add ( java.lang.String.format ( STRING_1 , u . METHOD_2 ( ) , u . METHOD_3 ( ) ) ) ; } if ( ! ( VAR_1 . isEmpty ( ) ) ) { w . METHOD_4 ( ( ( VAR_2 ) + STRING_2 ) ) ; METHOD_5 ( VAR_1 , w ) ; w . METHOD_4 ( STRING_3 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( config . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( config . METHOD_5 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( config . METHOD_6 ( ) ) . METHOD_4 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( config . METHOD_7 ( ) ) . METHOD_4 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( config . METHOD_8 ( ) ) . METHOD_4 ( VAR_2 ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String VAR_1 , TYPE_2 ... VAR_2 ) { TYPE_3 < TYPE_2 > VAR_3 = new TYPE_3 < TYPE_2 > ( METHOD_2 ( VAR_1 ) ) ; VAR_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ; return new TYPE_5 < TYPE_2 > ( VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { if ( event instanceof TYPE_2 ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( event ) ) ; VAR_2 . put ( VAR_3 , VAR_4 ) ; } else if ( event instanceof TYPE_3 ) { TYPE_3 e = ( ( TYPE_3 ) ( event ) ) ; TYPE_4 r = VAR_5 ; VAR_6 . put ( ( ( ( r . project ) + STRING_1 ) + ( VAR_7 ) ) , VAR_8 ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { assertEquals ( 0 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) ; assertEquals ( INT_1 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 ) ) ) ) ; assertEquals ( INT_2 , TYPE_1 . METHOD_2 ( TYPE_2 . r ( TYPE_2 . b ( ( INT_3 | INT_4 ) , 1 ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; org.junit.Assert . METHOD_3 ( VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 . METHOD_5 ( STRING_1 ) . METHOD_4 ( ) , VAR_5 ) ; } 
private static java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > in ) { java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > out = new TYPE_2 ( new TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet.Id > ( ) { public int METHOD_2 ( com.google.gerrit.reviewdb.client.PatchSet.Id a , com.google.gerrit.reviewdb.client.PatchSet.Id b ) { return TYPE_4 . METHOD_3 ( a , b ) . result ( ) ; } } ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : in ) { out . put ( ps . getId ( ) , ps ) ; } return out ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( project , VAR_1 , VAR_2 , STRING_1 ) ; org.eclipse.jgit.lib.ObjectId id = repo . branch ( STRING_2 ) . commit ( ) . create ( ) ; TYPE_2 VAR_3 = METHOD_3 ( ) ; org.eclipse.jgit.revwalk.RevWalk rw = repo . METHOD_4 ( ) ; org.junit.Assert . METHOD_5 ( VAR_3 . METHOD_6 ( db , rw , rw . parseCommit ( id ) ) ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; TYPE_3 . METHOD_4 ( change ) ; ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) ; } } 
public static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , boolean VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_2 VAR_2 = new TYPE_2 ( id . get ( ) , VAR_1 ) ; if ( VAR_3 . add ( VAR_2 ) ) { VAR_4 . METHOD_3 ( VAR_2 ) ; } } } 
void METHOD_1 ( int VAR_1 ) { java.lang.String path = VAR_2 . get ( VAR_1 ) . path ( ) ; TYPE_1 . delete ( VAR_3 . getParentKey ( ) . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( VAR_3 . getParentKey ( ) ) ) ; } public void METHOD_3 ( TYPE_6 VAR_4 ) { } } ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_2 c : VAR_1 ) { if ( c . METHOD_2 ( ) ) { r . METHOD_3 ( c . METHOD_4 ( ) ) ; } else { r . add ( c ) ; } } return r ; } 
private static byte [ ] METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { byte [ ] data = new byte [ VAR_2 . METHOD_2 ( ) . get ( ) . METHOD_3 ( ) ] ; TYPE_3 in = VAR_1 . METHOD_4 ( VAR_2 ) ; try { TYPE_4 . METHOD_5 ( in , data , 0 , data . length ) ; } finally { in . close ( ) ; } return data ; } 
public TYPE_1 format ( TYPE_2 user , TYPE_1 out , TYPE_3 VAR_1 , com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_4 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd . change ( ) . currentPatchSetId ( ) ; return format ( user , out , VAR_1 , cd , VAR_2 . METHOD_1 ( db . get ( ) , cd . notes ( ) , VAR_1 . user ( ) , psId , new com.google.gerrit.reviewdb.client.Account.Id ( VAR_3 ) , null , null ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; final TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_1 , VAR_4 ) ; } finally { VAR_1 . delete ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( server , admin ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; METHOD_2 ( VAR_2 . get ( ) ) ; VAR_1 . close ( ) ; TYPE_2 VAR_3 = VAR_4 . projects ( ) . name ( VAR_5 . get ( ) ) . METHOD_3 ( VAR_2 . get ( ) ) . get ( ) ; TYPE_3 . METHOD_4 ( VAR_6 . get ( VAR_2 ) . getProject ( ) , VAR_3 ) ; } 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t . METHOD_2 ( ) ) return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; if ( ! ( t . METHOD_3 ( ) ) ) return false ; return ( this . VAR_2 ) == ( ( ( TYPE_4 ) ( t ) ) . value ( ) ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 class ) ; bind ( VAR_3 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_4 class ) . to ( VAR_5 class ) ; TYPE_1 . METHOD_2 ( binder ( ) , VAR_6 class ) ; TYPE_1 . bind ( binder ( ) , VAR_6 class ) . to ( VAR_7 class ) ; } 
TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 rw , TYPE_6 VAR_4 , TYPE_7 VAR_5 , org.eclipse.jgit.lib.Repository repo , TYPE_8 VAR_6 , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_7 , java.util.Set < TYPE_9 > VAR_8 , TYPE_10 VAR_9 , TYPE_11 VAR_10 , TYPE_12 < TYPE_13 , com.google.gerrit.reviewdb.client.Account.Id > VAR_11 , TYPE_14 VAR_12 , boolean VAR_13 ) ; 
void METHOD_1 ( TYPE_1 e ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( 0 <= VAR_1 ) { java.lang.String n = VAR_2 . getValue ( VAR_1 ) ; VAR_2 . METHOD_3 ( false ) ; TYPE_2 . display ( TYPE_3 . METHOD_4 ( changeId , n ) , new TYPE_4 ( changeId , n ) ) ; } } 
public com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { return null ; } for ( com.google.gerrit.reviewdb.client.PatchSet p : METHOD_2 ( ) ) { if ( p . getId ( ) . equals ( c . currentPatchSetId ( ) ) ) { VAR_1 = p ; return p ; } } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( STRING_1 + ( VAR_2 . get ( ) ) ) + STRING_2 ) , METHOD_2 ( project . get ( ) ) ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } 
protected void METHOD_1 ( ) { rpc ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; rpc ( VAR_4 class ) ; rpc ( VAR_5 class ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; rpc ( VAR_8 class ) ; rpc ( VAR_9 class ) ; install ( new TYPE_1 ( ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; java.lang.String cmd = STRING_1 + VAR_2 ; TYPE_3 VAR_3 = TYPE_4 . METHOD_4 ( ) ; try { TYPE_4 . METHOD_5 ( VAR_1 , cmd , VAR_3 ) ; } catch ( java.io.IOException e ) { VAR_4 . error ( java.lang.String.format ( ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) , VAR_1 , e , cmd , VAR_3 ) , e ) ; } } 
private boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( TYPE_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) { return true ; } try { return VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; } catch ( TYPE_3 e ) { VAR_3 . METHOD_4 ( STRING_1 , e ) ; return true ; } } 
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { c . METHOD_1 ( VAR_1 ) ; c . METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_3 . equals ( c . currentPatchSetId ( ) ) ) ) { try { c . METHOD_3 ( VAR_4 . get ( db , VAR_3 ) ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_4 ( ( STRING_1 + VAR_3 ) , VAR_5 ) ; } } TYPE_2 . METHOD_5 ( c ) ; return c ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } 
private static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) ; if ( VAR_2 . METHOD_6 ( TYPE_3 ) ) { return VAR_2 . METHOD_7 ( TYPE_3 . length ( ) ) ; } else { return VAR_2 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 = this . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 = VAR_2 . METHOD_5 ( 0 , ( ( VAR_2 . length ( ) ) - INT_1 ) ) ; VAR_3 = TYPE_2 . METHOD_6 ( VAR_2 , VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 . ProjectConfig config , TYPE_4 VAR_2 , boolean VAR_3 ) throws TYPE_5 , TYPE_6 , java.io.IOException , TYPE_7 { org.eclipse.jgit.revwalk.RevCommit commit = config . commit ( VAR_2 ) ; VAR_4 . METHOD_2 ( config . getProject ( ) . METHOD_3 ( ) , VAR_5 , base , commit . getId ( ) , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; VAR_6 . METHOD_7 ( config . getProject ( ) ) ; return VAR_7 . create ( projectName ) . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = group ( STRING_1 ) ; VAR_2 = group ( STRING_2 ) ; VAR_3 = group ( STRING_3 ) ; METHOD_2 ( INT_1 ) ; TYPE_1 VAR_4 ; TYPE_2 to ; TYPE_3 revision ; VAR_5 = user ( STRING_4 , STRING_5 , VAR_1 ) ; VAR_6 = user ( STRING_6 , STRING_7 , VAR_2 ) ; VAR_7 = user ( STRING_8 , STRING_9 , VAR_1 , VAR_2 ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) throws TYPE_3 { TYPE_1 < TYPE_2 > VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; if ( ! ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ) { VAR_2 = VAR_2 . METHOD_4 ( new TYPE_5 ( VAR_3 ) ) ; } else if ( ! ( TYPE_4 . METHOD_3 ( VAR_4 ) ) ) { VAR_2 = VAR_2 . METHOD_4 ( new TYPE_6 ( VAR_4 ) ) ; } return VAR_2 ; } 
public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey n , java.lang.String VAR_1 ) { if ( TYPE_1 . equals ( VAR_1 ) ) { return STRING_1 + ( n . toString ( ) ) ; } return ( ( STRING_1 + ( n . toString ( ) ) ) + STRING_2 ) + VAR_1 ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < TYPE_1 > ( values . size ( ) ) ; for ( TYPE_2 VAR_2 : values ) { VAR_1 . add ( TYPE_1 . METHOD_2 ( VAR_2 . getValue ( ) ) ) ; } java.util.Collections . METHOD_3 ( VAR_1 ) ; java.util.Collections . METHOD_4 ( VAR_1 ) ; } return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > projects ) throws TYPE_2 { for ( com.google.gerrit.reviewdb.client.Project.NameKey project : projects ) { try { VAR_1 . METHOD_2 ( project , true ) ; } catch ( TYPE_3 VAR_2 ) { METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . project ( ) ) ) + STRING_2 ) + STRING_3 ) ) ; METHOD_4 ( VAR_2 . project ( ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_2 ( ( STRING_4 + project ) , e ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : case VAR_3 : case VAR_4 : throw new TYPE_3 ( java.lang.String.format ( STRING_1 , type ) ) ; case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : default : this . revision = TYPE_4 . METHOD_2 ( revision ) ; return this ; } } 
public int METHOD_1 ( TYPE_1 key , TYPE_2 value ) { int size = ( INT_1 + ( INT_2 * INT_3 ) ) + ( 2 * INT_4 ) ; for ( java.lang.String p : value . METHOD_2 ( ) ) { size += p . length ( ) ; } size += ( value . METHOD_2 ( ) . size ( ) ) - 1 ; return size ; } 
void METHOD_1 ( final TYPE_1 . Account result ) { final TYPE_1 . Account me = TYPE_2 . METHOD_2 ( ) ; me . METHOD_3 ( result . METHOD_4 ( ) ) ; me . METHOD_5 ( result . METHOD_6 ( ) ) ; me . METHOD_7 ( result . METHOD_8 ( ) ) ; TYPE_2 . METHOD_9 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . display ( me ) ; } } 
private void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 . OrmException { if ( VAR_1 != null ) { for ( TYPE_3 < TYPE_1 > VAR_3 : TYPE_4 . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( VAR_1 ) ) { final byte [ ] VAR_4 = METHOD_4 ( VAR_3 , VAR_1 ) ; if ( ! ( METHOD_5 ( VAR_3 , VAR_2 , VAR_4 ) ) ) { db . delete ( VAR_4 ) ; } } } } } 
Project . NameKey projectName ( org.eclipse.jgit.lib.Repository repo ) { TYPE_1 VAR_1 = repo . METHOD_1 ( ) . METHOD_2 ( ) ; if ( VAR_1 . METHOD_3 ( VAR_2 ) ) { java.lang.String p = VAR_2 . METHOD_4 ( VAR_1 ) . toString ( ) ; java.lang.String n = p . METHOD_5 ( 0 , ( ( p . length ( ) ) - ( STRING_1 . length ( ) ) ) ) ; return new com.google.gerrit.reviewdb.client.Project.NameKey ( n ) ; } else { VAR_3 . METHOD_6 ( ( STRING_2 + VAR_1 ) ) ; return null ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { return VAR_3 . get ( new TYPE_3 . Key ( project , repo , VAR_1 , VAR_2 , VAR_4 ) ) ; } catch ( TYPE_4 e ) { VAR_5 . METHOD_2 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) ; return VAR_6 ; } } 
public void run ( ) { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { int VAR_2 = ( TYPE_1 . METHOD_2 ( ) ) - ( ( TYPE_2 . METHOD_3 ( ) ) + INT_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; } METHOD_5 ( diff ) ; VAR_5 . METHOD_5 ( VAR_6 , VAR_1 . METHOD_6 ( ) ) ; VAR_7 . METHOD_5 ( VAR_1 . METHOD_7 ( ) , diff ) ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { VAR_2 . METHOD_2 ( VAR_3 . get ( 0 ) ) ; METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; VAR_1 = VAR_2 . METHOD_5 ( ) ; VAR_4 = VAR_2 . METHOD_6 ( ) ; METHOD_3 ( ) . METHOD_7 ( VAR_2 ) ; METHOD_3 ( ) . METHOD_8 ( ) . METHOD_9 ( ( ( VAR_1 ) * ( VAR_3 . size ( ) ) ) , VAR_5 ) ; } } 
public void METHOD_1 ( final int row ) { for ( final TYPE_1 s : VAR_1 ) { if ( row < ( VAR_2 ) ) { ( VAR_2 ) -- ; } if ( row < ( VAR_3 ) ) { ( VAR_3 ) -- ; } } super . METHOD_1 ( row ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) throws TYPE_1 { try { for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . METHOD_2 ( VAR_1 ) ) { METHOD_3 ( cd . change ( ) ) ; } } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { METHOD_4 ( STRING_1 , e ) ; } } 
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_4 ) ; try { if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException VAR_5 ) { throw new TYPE_2 ( STRING_2 ) ; } } 
public TYPE_1 format ( TYPE_1 out , TYPE_2 ctl , TYPE_3 VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctl . getChange ( ) . currentPatchSetId ( ) ; return format ( out , ctl , VAR_2 . METHOD_1 ( db . get ( ) , ctl , psId , VAR_3 ) ) ; } 
void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_2 . get ( ) ) ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . add ( VAR_1 ) ; } METHOD_4 ( ) ; } 
public int METHOD_1 ( ) { int VAR_1 = 0 ; if ( ( VAR_2 ) != null ) { for ( TYPE_1 r : VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , r ) ) ; } VAR_1 = VAR_2 . METHOD_4 ( ) . size ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 = null ; } return VAR_1 ; } 
public < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_1 out , java.lang.String path , byte [ ] data ) throws java.io.IOException { TYPE_3 < TYPE_1 > VAR_1 = ( ( TYPE_3 < TYPE_1 > ) ( format ) ) ; VAR_1 . METHOD_1 ( out , path , VAR_2 , new TYPE_4 ( VAR_3 , data ) ) ; } 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c , TYPE_4 err ) throws java.io.IOException { if ( err != null ) { TYPE_5 . METHOD_2 ( req , err ) ; } TYPE_6 . METHOD_3 ( req , res , null , c ) ; res . METHOD_4 ( VAR_1 ) ; TYPE_6 . METHOD_5 ( req , res , msg ) ; } 
private boolean METHOD_1 ( ) { if ( VAR_1 . get ( ) . METHOD_2 ( ) ) { return ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_4 ) ) ) && ( VAR_2 . user ( VAR_1 ) . METHOD_3 ( VAR_5 ) ) ; } else { return false ; } } 
public boolean METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 , TYPE_2 , TYPE_3 { final TYPE_4 ctx = VAR_2 . METHOD_2 ( ) ; try { TYPE_5 schema = VAR_2 . METHOD_3 ( ctx ) ; VAR_2 . METHOD_4 ( schema , ctx , VAR_1 , false ) ; return true ; } catch ( TYPE_6 e ) { return false ; } finally { try { ctx . close ( ) ; } catch ( TYPE_2 e ) { VAR_3 . METHOD_5 ( STRING_1 , e ) ; } } } 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base . METHOD_1 ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_2 ( m , VAR_6 , VAR_7 . get ( 0 ) , VAR_8 . get ( 0 ) , VAR_9 ) ; } 
private void METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey > n = new TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey > ( VAR_3 ) ; n . add ( VAR_1 ) ; VAR_3 = java.util.Collections . METHOD_3 ( n ) ; } finally { VAR_2 . METHOD_4 ( ) ; } } 
static TYPE_1 METHOD_1 ( final TYPE_2 ctx ) throws TYPE_3 { final TYPE_4 VAR_1 = new TYPE_4 ( ) ; final TYPE_5 < TYPE_6 > res ; final TYPE_7 VAR_2 = ctx . METHOD_2 ( STRING_1 ) ; TYPE_8 VAR_3 = VAR_2 . get ( STRING_2 ) ; if ( ( VAR_3 != null ) && ( VAR_3 . contains ( STRING_3 ) ) ) { return new TYPE_9 ( VAR_2 ) ; } return VAR_4 ; } 
public void run ( ) { try { final TYPE_1 cm ; cm = VAR_1 . create ( change ) ; cm . METHOD_1 ( me ) ; cm . METHOD_2 ( ps , info ) ; cm . METHOD_3 ( reviewers ) ; cm . METHOD_4 ( VAR_2 ) ; cm . METHOD_5 ( ) ; } catch ( TYPE_2 e ) { VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ; } 
public TYPE_1 < TYPE_2 . NameKey , com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_3 < TYPE_2 . NameKey , com.google.gerrit.server.query.change.ChangeData > VAR_1 = TYPE_4 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . put ( cd . change ( ) . METHOD_2 ( ) , cd ) ; } return VAR_1 ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final boolean VAR_3 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; final TYPE_2 < ? extends TYPE_1 > VAR_4 = VAR_1 . METHOD_3 ( ) ; for ( final TYPE_1 VAR_5 : VAR_4 ) { final boolean VAR_6 = VAR_4 . METHOD_4 ( ) . equals ( VAR_5 ) ; METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 cfg ) { return TYPE_1 . create ( cfg . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_3 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_4 , 0 ) , cfg . METHOD_2 ( STRING_1 , null , STRING_5 , VAR_1 ) ) ; } 
public static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( INT_1 ) ; for ( final com.google.gerrit.reviewdb.client.Change . Status e : TYPE_3 . values ( ) ) { if ( e . METHOD_2 ( ) ) { r . add ( new TYPE_4 ( e ) ) ; } } return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_1 ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( db , VAR_4 . create ( db , c ) ) . values ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { final TYPE_2 r = VAR_1 . METHOD_2 ( ) ; assert r instanceof TYPE_3 : STRING_1 + r ; final TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ( ( TYPE_3 ) ( r ) ) ) ; if ( VAR_2 == null ) { return null ; } else { return TYPE_4 . METHOD_4 ( VAR_3 , VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; TYPE_2 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; METHOD_4 ( git , false ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( 0 ) ) . isEqualTo ( change . METHOD_7 ( ) . METHOD_6 ( 0 ) ) ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws com.google.gwtorm.server.OrmException { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { return METHOD_1 ( repo , changeId ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } } 
private static TYPE_1 METHOD_1 ( boolean VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_2 ) { return VAR_1 ? TYPE_2 . METHOD_2 ( id . getParentKey ( ) , VAR_2 ) : TYPE_3 . revision ( id ) . view ( STRING_1 ) . id ( VAR_2 ) . view ( STRING_2 ) ; } 
public java.util.List < com.google.gerrit.reviewdb.client.Change > submit ( TYPE_1 rsrc , TYPE_2 VAR_1 , boolean VAR_2 ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { java.lang.String topic = rsrc . getChange ( ) . METHOD_1 ( ) ; if ( ( VAR_3 ) && ( ! ( TYPE_4 . METHOD_2 ( topic ) ) ) ) { return METHOD_3 ( rsrc , VAR_1 , VAR_2 , topic ) ; } else { return TYPE_5 . METHOD_4 ( METHOD_5 ( rsrc , VAR_1 , VAR_2 ) ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 , TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_5 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd ) , user ) ; } return METHOD_5 ( db , new TYPE_1 ( cd ) , user ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final int VAR_2 , final boolean VAR_3 ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; final TYPE_2 < ? extends TYPE_1 > VAR_4 = VAR_1 . METHOD_3 ( ) ; int i = 0 ; for ( final TYPE_1 VAR_5 : VAR_4 ) { final boolean VAR_6 = ( ++ i ) == ( VAR_4 . size ( ) ) ; METHOD_1 ( VAR_5 , ( VAR_2 + 1 ) , VAR_6 ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 VAR_1 = db . METHOD_2 ( ) ; final TYPE_2 VAR_2 = db . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_3 , VAR_4 ) ; assertEquals ( VAR_5 , VAR_6 ) ; assertEquals ( VAR_7 , VAR_8 ) ; assertEquals ( VAR_9 , VAR_10 ) ; assertEquals ( VAR_11 , VAR_12 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ProjectConfig cfg = VAR_1 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; VAR_3 = TYPE_2 . METHOD_4 ( cfg . METHOD_5 ( ) . get ( STRING_1 ) ) ; VAR_3 . METHOD_6 ( false ) ; VAR_3 . METHOD_7 ( false ) ; VAR_3 . METHOD_8 ( false ) ; VAR_3 . METHOD_9 ( false ) ; VAR_3 . METHOD_10 ( false ) ; VAR_3 . METHOD_11 ( ( ( short ) ( - 1 ) ) ) ; METHOD_12 ( cfg ) ; } 
private void METHOD_1 ( java.lang.String error , boolean VAR_1 , java.lang.Exception e ) { if ( VAR_1 ) { this . VAR_1 . update ( 1 ) ; } if ( e != null ) { VAR_2 . METHOD_2 ( error , e ) ; } else { VAR_2 . METHOD_2 ( error ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( error ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 git = METHOD_2 ( false ) ; TYPE_4 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; org.junit.Assert.assertEquals ( change . METHOD_4 ( ) , METHOD_5 ( ) . getId ( ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException , TYPE_3 , TYPE_4 { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_5 b = VAR_2 . METHOD_3 ( ) ; b . METHOD_4 ( new byte [ 0 ] , VAR_3 , VAR_4 , VAR_1 ) ; b . METHOD_5 ( ) ; } return VAR_2 ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 ) { for ( TYPE_2 . ReceiveCommand cmd : VAR_1 . METHOD_2 ( ) ) { if ( ( cmd . METHOD_3 ( ) ) == ( VAR_2 ) ) { METHOD_1 ( project , cmd . getRefName ( ) , cmd . METHOD_4 ( ) , cmd . METHOD_5 ( ) ) ; } } } 
private boolean METHOD_1 ( TYPE_1 . Change change , TYPE_2 user , TYPE_1 . ReviewDb db ) throws TYPE_3 . OrmException { final TYPE_4 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ; if ( VAR_1 == null ) { return false ; } final TYPE_5 VAR_3 = VAR_1 . METHOD_2 ( user ) ; return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; } 
private void METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; try { com.google.common.truth.Truth.assertThat ( repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) . isEqualTo ( VAR_1 ) ; } finally { repo . close ( ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 user ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) != null ) { throw new TYPE_3 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; } try { if ( ( change ) != null ) { VAR_1 = VAR_2 . METHOD_3 ( change , user ) ; } else { VAR_1 = VAR_2 . METHOD_3 ( project , VAR_3 , user ) ; } } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_1 ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . get ( VAR_1 ) ; org.eclipse.jgit.lib.Repository VAR_3 = TYPE_5 . get ( VAR_1 ) ; TYPE_6 VAR_4 = ( ( TYPE_6 ) ( VAR_5 ) ) ; try { return new TYPE_1 ( VAR_6 , VAR_3 , VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_7 ( e . getMessage ( ) ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { java.lang.String b = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ; java.lang.String VAR_2 = java.lang.String . METHOD_2 ( revision . get ( ) ) ; TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 ) ) ; } 
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { return java.util.Collections . METHOD_2 ( ) ; } VAR_1 = new TYPE_1 < > ( ) ; for ( TYPE_2 VAR_2 : VAR_3 . METHOD_3 ( db , notes ) ) { VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; TYPE_2 < TYPE_3 > edit = VAR_3 . METHOD_4 ( change ) ; try { VAR_4 . METHOD_5 ( edit . get ( ) . getChange ( ) . getProject ( ) , edit . get ( ) . getRevision ( ) . get ( ) , VAR_5 ) ; org.junit.Assert . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_4 VAR_6 ) { } } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ) ) { VAR_2 = new TYPE_1 ( args , getChangeId ( ) , VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; } } 
private java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) throws java.lang.Exception { final TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; try { final TYPE_1 VAR_3 = METHOD_3 ( STRING_1 ) ; assertEquals ( 0 , METHOD_4 ( VAR_4 , VAR_3 , VAR_2 . METHOD_5 ( ) ) ) ; return METHOD_6 ( VAR_2 ) ; } finally { VAR_2 . delete ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( STRING_2 , VAR_1 , VAR_2 ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_3 , 1 ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; METHOD_2 ( STRING_3 ) ; METHOD_3 ( ( ( create ( ) ) instanceof TYPE_1 ) ) ; } 
TYPE_1 METHOD_1 ( final TYPE_2 . Key key , final TYPE_1 VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_2 = VAR_1 . getAccountId ( ) ; final boolean VAR_3 = VAR_1 . METHOD_2 ( ) ; final TYPE_3 . Key VAR_4 = VAR_1 . METHOD_3 ( ) ; final java.lang.String VAR_5 = VAR_1 . METHOD_4 ( ) ; return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
public TYPE_1 get ( ) { try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( change . getProject ( ) ) ; org.eclipse.jgit.revwalk.RevWalk VAR_2 = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return VAR_3 . METHOD_2 ( VAR_2 , patchSet ) ; } catch ( java.io.IOException e ) { throw TYPE_2 . METHOD_3 ( e ) ; } } 
public TYPE_1 diff ( java.lang.String base ) throws TYPE_2 { try { return VAR_1 . get ( ) . METHOD_1 ( base ) . apply ( file ) . value ( ) ; } catch ( java.io.IOException | TYPE_3 | com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 { com.google.gerrit.reviewdb.client . AccountGroup group = VAR_1 . METHOD_1 ( ) ; if ( group == null ) { throw new TYPE_3 ( ) ; } try { TYPE_4 c = VAR_2 . METHOD_2 ( group . METHOD_3 ( ) ) ; return VAR_3 . METHOD_4 ( VAR_4 ) . format ( c . METHOD_5 ( ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( ) ; } } 
public void run ( ) { ui . METHOD_1 ( STRING_1 ) ; METHOD_2 ( ) ; if ( ( auth . METHOD_3 ( STRING_2 ) ) == null ) { auth . METHOD_4 ( STRING_2 , TYPE_1 . METHOD_5 ( ) ) ; } if ( ( auth . METHOD_3 ( STRING_3 ) ) == null ) { auth . METHOD_4 ( STRING_3 , TYPE_1 . METHOD_5 ( ) ) ; } METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_2 u = util . user ( VAR_1 , STRING_2 , VAR_3 ) ; TYPE_2 d = util . user ( VAR_1 , STRING_3 , VAR_3 ) ; METHOD_3 ( STRING_4 , u . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) ; METHOD_6 ( STRING_6 , d . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) ; } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . getValue ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; if ( ( view ) != null ) { view . METHOD_5 ( ) . METHOD_6 ( STRING_1 , VAR_1 . name ( ) . METHOD_7 ( ) ) ; } } 
private void METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 > VAR_1 , TYPE_2 rsrc ) { TYPE_3 VAR_2 = rsrc . METHOD_2 ( ) . METHOD_3 ( ) ; for ( java.lang.String name : TYPE_4 . METHOD_4 ( ) ) { if ( ( METHOD_5 ( name ) ) && ( VAR_2 . METHOD_6 ( name ) ) ) { VAR_1 . put ( name , new TYPE_5 ( VAR_2 . METHOD_7 ( name ) ) ) ; } } } 
private static synchronized void METHOD_1 ( byte [ ] VAR_1 , TYPE_1 . ReviewDb db ) throws TYPE_2 . OrmException { if ( ( VAR_2 ) == 0 ) { VAR_3 = db . METHOD_2 ( ) ; VAR_2 = VAR_4 ; } TYPE_3 . METHOD_3 ( VAR_1 , 0 , VAR_3 ) ; TYPE_3 . METHOD_3 ( VAR_1 , INT_1 , ( ( VAR_2 ) -- ) ) ; } 
public TYPE_1 get ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws TYPE_2 { com.google.gerrit.reviewdb.client.Project.NameKey project = change . getProject ( ) ; org.eclipse.jgit.lib.ObjectId a = null ; if ( ( patchSet . getRevision ( ) ) == null ) { throw new TYPE_2 ( ( STRING_1 + ( patchSet . getId ( ) ) ) ) ; } org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId . METHOD_1 ( patchSet . getRevision ( ) . get ( ) ) ; TYPE_3 VAR_1 = VAR_2 ; return get ( new TYPE_4 ( a , b , VAR_1 ) , project ) ; } 
private java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 < java.lang.String , TYPE_1 > ( ) ; if ( ( VAR_2 ) != null ) { for ( final TYPE_1 t : VAR_2 ) { VAR_1 . put ( t . getId ( ) , t ) ; } } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 git = METHOD_2 ( ) ; org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_3 ( ) ; TYPE_2 . Result change = METHOD_4 ( git ) ; submit ( change . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_5 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_6 ( 0 ) ) . isEqualTo ( VAR_1 ) ; METHOD_7 ( change . getChangeId ( ) , 1 ) ; } 
public Account . Id METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { try { com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { TYPE_2 VAR_2 = db . METHOD_3 ( ) . get ( new TYPE_2 . Key ( VAR_1 ) ) ; return VAR_2 != null ? VAR_2 . getAccountId ( ) : null ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > changes = VAR_1 . get ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ; METHOD_4 ( changes ) ; db . METHOD_5 ( ) . delete ( db . METHOD_5 ( ) . METHOD_2 ( project . METHOD_3 ( ) ) ) ; db . METHOD_6 ( ) . delete ( db . METHOD_6 ( ) . METHOD_7 ( project . METHOD_3 ( ) ) ) ; } 
private java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Account account ) { if ( account != null ) { java.lang.String result = ( ( account . METHOD_2 ( ) ) == null ) ? VAR_1 : account . METHOD_2 ( ) ; if ( ( account . METHOD_3 ( ) ) != null ) { result += ( STRING_1 + ( account . METHOD_3 ( ) ) ) + STRING_2 ; } return result ; } return VAR_1 ; } 
public TYPE_1 create ( TYPE_1 . Id id , java.lang.String VAR_1 ) throws TYPE_2 { try { final TYPE_1 key = new TYPE_1 ( id , TYPE_3 . METHOD_1 ( VAR_1 ) ) ; TYPE_3 . METHOD_2 ( key ) ; return key ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( ) ; } catch ( TYPE_5 e ) { throw new TYPE_2 ( ) ; } catch ( TYPE_6 e ) { VAR_2 . error ( STRING_1 , e ) ; throw new TYPE_2 ( ) ; } } 
protected void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( TYPE_2 VAR_1 : VAR_2 ) { if ( METHOD_2 ( change , VAR_1 . METHOD_3 ( ) , db ) ) { VAR_1 . METHOD_4 ( event ) ; } } METHOD_5 ( event ) ; } 
public java.lang.String METHOD_1 ( ) { TYPE_1 user = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( user . METHOD_6 ( ) . contains ( getChange ( ) . getId ( ) ) ) ; METHOD_7 ( VAR_2 , user ) ; return VAR_2 . METHOD_8 ( ) . toString ( ) ; } 
public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 , int n , boolean e ) { TYPE_1 api = TYPE_2 . change ( id ) . view ( STRING_1 ) . METHOD_2 ( STRING_2 , n ) . METHOD_2 ( STRING_3 , e ) ; if ( VAR_1 != null ) { api . METHOD_2 ( STRING_4 , VAR_1 ) ; } return api ; } 
public void METHOD_1 ( final TYPE_1 < java.util.List < TYPE_2 > > VAR_1 ) { try { final TYPE_3 . ReviewDb db = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( ) ; try { VAR_1 . onSuccess ( db . METHOD_1 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; } finally { db . close ( ) ; } } catch ( TYPE_5 . OrmException e ) { VAR_1 . METHOD_6 ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( change , METHOD_3 ( changeId ) ) ) . isEqualTo ( VAR_2 ) ; TYPE_1 < TYPE_2 > edit = VAR_3 . METHOD_4 ( change ) ; METHOD_5 ( FLOAT_1 ) ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; METHOD_6 ( VAR_6 ) ; VAR_7 . METHOD_7 ( VAR_8 class ) ; VAR_7 . METHOD_8 ( STRING_1 ) ; VAR_1 . METHOD_9 ( edit . get ( ) , edit . get ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) ; } 
void METHOD_1 ( ) throws TYPE_1 . OrmException , java.io.IOException { if ( VAR_1 ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( VAR_3 . METHOD_3 ( ) ) ) ) ; VAR_4 . run ( new TYPE_2 ( ) { public void METHOD_4 ( java.lang.String msg ) { VAR_2 . METHOD_2 ( msg ) ; VAR_2 . METHOD_5 ( ) ; } } ) ; } } 
public TYPE_1 . ChangeInfo format ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db . get ( ) , rsrc . METHOD_1 ( ) ) ; return format ( cd , TYPE_3 . of ( rsrc . METHOD_2 ( ) . getId ( ) ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String name ) { TYPE_1 a = new TYPE_1 ( ) ; a . METHOD_2 ( VAR_1 ) ; a . METHOD_3 ( TYPE_2 . METHOD_4 ( name ) ) ; TYPE_3 VAR_2 = a . METHOD_5 ( ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final com.google.gerrit.reviewdb.client . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( VAR_2 , user . get ( ) , group ) ; } 
private void METHOD_1 ( java.lang.StringBuilder out , int VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_3 instanceof TYPE_3 ) { TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_3 ) ) ; out . append ( STRING_1 ) . append ( VAR_5 ) . append ( STRING_2 ) . append ( VAR_6 ) . append ( STRING_3 ) ; } if ( ( VAR_7 ) != null ) { METHOD_2 ( out , VAR_1 , VAR_2 , VAR_3 ) ; } else { METHOD_3 ( out , VAR_1 , VAR_2 , VAR_3 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 rsrc , com.google.gerrit.reviewdb.client.Change . Id id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( ) . changes ( ) . get ( id ) ; if ( c == null ) { return null ; } return rsrc . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_1 ( c ) ; } 
public TYPE_1 . ChangeInfo apply ( TYPE_2 req , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { TYPE_6 VAR_1 = req . METHOD_1 ( ) ; if ( ! ( VAR_1 . METHOD_2 ( VAR_2 . get ( ) ) ) ) { throw new TYPE_7 ( STRING_1 ) ; } com.google.gerrit.reviewdb.client.Change change = METHOD_3 ( VAR_1 , input . message , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; return VAR_3 . create ( VAR_4 ) . format ( change ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = null ; TYPE_3 . NameKey VAR_2 = new TYPE_3 . NameKey ( STRING_1 ) ; TYPE_4 VAR_3 = null ; TYPE_5 . Project project = new TYPE_5 . Project ( ) ; project . METHOD_2 ( VAR_4 . get ( ) ) ; TYPE_1 ps = new TYPE_1 ( VAR_5 , VAR_1 , VAR_2 , VAR_3 , project , VAR_6 ) ; ps . METHOD_3 ( VAR_7 ) ; return ps ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( CHAR_1 ) ) ; METHOD_2 ( b , b . append ( CHAR_2 ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 key = TYPE_2 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_1 = new TYPE_3 ( ) . create ( ) . METHOD_3 ( key ) ; TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( METHOD_6 ( VAR_3 ) , VAR_1 ) ) . METHOD_7 ( new TYPE_5 ( VAR_4 , VAR_5 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_6 . METHOD_8 ( VAR_3 , key ) ) . METHOD_9 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; METHOD_4 ( VAR_1 ) ; assertEquals ( STRING_1 , VAR_1 . getName ( ) ) ; assertEquals ( STRING_2 , VAR_1 . METHOD_5 ( ) ) ; assertEquals ( STRING_3 , VAR_1 . METHOD_6 ( ) ) ; METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ; METHOD_9 ( VAR_1 , 2 , 1 , 0 , ( - 1 ) , ( - 2 ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException , java.lang.Exception , TYPE_1 { java.lang.String changeId = METHOD_2 ( admin ) ; java.util.List < TYPE_2 > reviewers = METHOD_3 ( changeId , STRING_1 , INT_1 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_1 ) ; reviewers = METHOD_3 ( changeId , STRING_1 , INT_2 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , INT_2 ) ; reviewers = METHOD_3 ( changeId , STRING_2 , INT_3 ) ; org.junit.Assert.assertEquals ( reviewers . size ( ) , 1 ) ; } 
private TYPE_1 METHOD_1 ( final java.lang.String name , final java.lang.String email ) { final TYPE_2 . Id VAR_1 = new TYPE_2 . Id ( INT_1 ) ; final TYPE_3 . Account account = new TYPE_3 . Account ( VAR_1 ) ; account . METHOD_2 ( name ) ; account . METHOD_3 ( email ) ; final TYPE_1 s = new TYPE_1 ( account , VAR_2 . Collections < TYPE_4 . Id > METHOD_4 ( ) , VAR_2 . Collections < TYPE_5 > METHOD_4 ( ) ) ; return s ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws com.google.gwtorm.server.OrmException { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; TYPE_3 . METHOD_4 ( change ) ; ctx . METHOD_5 ( ) . changes ( ) . update ( java.util.Collections.singleton ( change ) ) ; } } 
private static boolean METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException , TYPE_2 , TYPE_3 { org.eclipse.jgit.revwalk.RevCommit VAR_3 = walk . parseCommit ( VAR_2 . getId ( ) ) ; if ( ( VAR_3 . METHOD_2 ( ) ) > 0 ) { return TYPE_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) . contains ( VAR_1 . getId ( ) ) ; } else { return VAR_1 == ( VAR_4 ) ; } } 
void display ( TYPE_1 . ChangeInfo info , java.lang.String revision , boolean VAR_1 ) { this . revision = revision ; boolean VAR_2 = TYPE_2 . METHOD_1 ( ) ; TYPE_3 VAR_3 = info . revision ( revision ) ; TYPE_4 commit = VAR_3 . commit ( ) ; changeId = info . METHOD_2 ( ) ; project = info . project ( ) ; VAR_4 = commit . METHOD_3 ( ) ; message = commit . message ( ) ; METHOD_4 ( info , VAR_2 ) ; METHOD_5 ( info , VAR_3 , VAR_1 , VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { VAR_1 . METHOD_2 ( STRING_1 , 2 ) ; java.lang.String VAR_2 = ( ( METHOD_3 ( ) ) + STRING_2 ) + ( METHOD_4 ( ) ) ; VAR_1 . update ( 1 ) ; VAR_3 . METHOD_5 ( METHOD_3 ( ) , VAR_4 , VAR_5 ) ; VAR_1 . update ( 1 ) ; VAR_3 . METHOD_6 ( METHOD_3 ( ) , ( ( VAR_6 ) + STRING_3 ) , VAR_2 ) ; VAR_1 . METHOD_7 ( ) ; } 
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 in ) throws TYPE_4 , com.google.gwtorm.server.OrmException { if ( ( VAR_1 . get ( ) ) != ( rsrc . METHOD_1 ( ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } try { VAR_2 . METHOD_2 ( VAR_1 . get ( ) . getAccountId ( ) , change.getId ( ) ) ; } catch ( TYPE_5 e ) { return TYPE_1 . METHOD_3 ( ) ; } return TYPE_1 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result change = METHOD_3 ( ) ; TYPE_1 . Result VAR_2 = METHOD_3 ( ) ; METHOD_4 ( VAR_2 . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_3 = METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . getId ( ) ) . isEqualTo ( VAR_1 . getId ( ) ) ; } 
void add ( ) { java.util.List < java.lang.String > values = new java.util.ArrayList < > ( ) ; for ( TYPE_1 input : VAR_1 ) { java.lang.String VAR_2 = input . getValue ( ) . METHOD_1 ( ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { input . METHOD_2 ( STRING_1 ) ; values . add ( VAR_2 ) ; } } insert ( values ) ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 . Key key ) throws java.io.IOException { try { TYPE_3 VAR_1 = new TYPE_3 ( key . repo , key . path ) ; try { VAR_1 . METHOD_2 ( null , VAR_2 ) ; return TYPE_2 . METHOD_3 ( VAR_1 ) ; } finally { VAR_1 . METHOD_4 ( ) ; } } finally { key . repo = null ; } } 
public void run ( ) { while ( true ) { if ( VAR_1 ) { break ; } VAR_2 . METHOD_1 ( ) ; VAR_3 . METHOD_1 ( ) ; synchronized ( this ) { try { METHOD_2 ( INT_1 ) ; } catch ( TYPE_1 e ) { VAR_4 . METHOD_3 ( STRING_1 , e ) ; } } } } 
private void METHOD_1 ( TYPE_1 info , boolean r ) { TYPE_2 api = TYPE_3 . revision ( VAR_1 ) . view ( STRING_1 ) . id ( info . path ( ) ) . view ( STRING_2 ) ; if ( r ) { api . put ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ; } else { api . delete ( VAR_2 < TYPE_4 > METHOD_2 ( ) ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 config , java.lang.String VAR_1 , java.lang.String VAR_2 ) { return new TYPE_3 ( ) . METHOD_2 ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) ) ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( config ) . METHOD_8 ( VAR_1 ) . METHOD_9 ( VAR_2 ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) ; } return VAR_1 ; } 
TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 . NameKey VAR_2 , TYPE_4 VAR_3 , TYPE_5 rw , TYPE_6 VAR_4 , TYPE_7 VAR_5 , TYPE_8 VAR_6 , org.eclipse.jgit.lib.Repository repo , TYPE_9 VAR_7 , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > VAR_8 , java.util.Set < TYPE_10 > VAR_9 , TYPE_11 VAR_10 , TYPE_12 VAR_11 , TYPE_13 < TYPE_14 , com.google.gerrit.reviewdb.client.Account.Id > VAR_12 , TYPE_15 VAR_13 , boolean VAR_14 ) ; 
private static TYPE_1 METHOD_1 ( byte [ ] VAR_1 ) { byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( new java.lang.String ( VAR_1 , VAR_3 ) ) ; TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( TYPE_3 . of ( ) , p . METHOD_5 ( ) ) ; return p ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) throws com.google.gwtorm.server.OrmException { java.util.List < TYPE_1 > result = new TYPE_2 < > ( ) ; TYPE_3 VAR_2 = VAR_3 . create ( true ) ; for ( com.google.gerrit.reviewdb.client.Account.Id VAR_4 : VAR_1 ) { result . add ( VAR_2 . get ( VAR_4 ) ) ; } VAR_2 . METHOD_2 ( ) ; return result ; } 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final java.lang.String name = VAR_1 . METHOD_2 ( ) ; final java.lang.String t = METHOD_3 ( ) ; final java.lang.String VAR_3 = METHOD_4 ( ) ; final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( STRING_1 ) ; if ( VAR_1 . METHOD_5 ( ) ) { r . append ( ( STRING_2 + VAR_3 ) ) ; r . append ( STRING_3 ) ; } return r . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; } 
private void METHOD_1 ( final TYPE_1 . ReviewDb db , final TYPE_2 . Id VAR_1 ) throws TYPE_3 { try { if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) ) { throw new TYPE_3 ( new TYPE_4 ( ) ) ; } } catch ( TYPE_5 e ) { throw new TYPE_3 ( new TYPE_4 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , new TYPE_5 ( null ) ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 config , TYPE_3 VAR_1 ) { if ( ( VAR_2 ) != null ) { return VAR_2 ; } int VAR_3 = config . METHOD_2 ( STRING_1 , null , STRING_2 , 0 ) ; if ( VAR_3 <= 0 ) { VAR_3 = config . METHOD_2 ( STRING_3 , null , STRING_4 , 0 ) ; } if ( VAR_3 <= 0 ) { VAR_3 = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) ; } return TYPE_5 . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_3 , STRING_5 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_3 ; int VAR_4 ; VAR_2 = VAR_2 . METHOD_3 ( ) ; if ( ! ( VAR_2 . METHOD_4 ( ) ) ) throw new TYPE_4 ( this , 1 , STRING_1 , VAR_2 ) ; VAR_4 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_4 ) ; return VAR_6 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 } ; java.util.List < TYPE_1 > m = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , true ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_3 ) ; } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; try { new TYPE_1 ( ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( STRING_3 , VAR_1 ) ; METHOD_4 ( STRING_4 ) ; } catch ( TYPE_2 e ) { assertEquals ( ( STRING_5 + VAR_1 ) , e . getMessage ( ) ) ; } } 
private TYPE_1 . Key < TYPE_2 > METHOD_1 ( ) { new TYPE_2 ( ) { private static final long VAR_1 = INT_1 ; VAR_2 ( TYPE_3 VAR_3 ) { } protected void METHOD_2 ( final TYPE_4 req , final TYPE_5 . HttpServletResponse rsp ) throws java.io.IOException { TYPE_6 . METHOD_3 ( req . METHOD_4 ( ) . METHOD_5 ( req . METHOD_6 ( ) . length ( ) ) , req , rsp ) ; METHOD_7 ( VAR_4 ) ; TYPE_7 VAR_5 ; TYPE_8 VAR_6 ; TYPE_9 . to VAR_7 ; } } ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ! ( patchSet . METHOD_2 ( ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } VAR_1 . METHOD_3 ( ctx . METHOD_4 ( ) , ctx . METHOD_5 ( psId ) , patchSet ) ; if ( ! ( VAR_2 ) ) { ctx . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) , new TYPE_6 ( null ) ) ; } 
protected void add ( final TYPE_1 r ) throws TYPE_2 . OrmException { final java.lang.String n = r . METHOD_1 ( ) ; METHOD_2 ( n ) ; if ( ( VAR_1 . put ( n , r ) ) != null ) { throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ; } VAR_2 . add ( n ) ; } 
public TYPE_1 . OrmException METHOD_1 ( final java.lang.String VAR_1 , final java.lang.String VAR_2 , final TYPE_2 err ) { if ( ( ( err . METHOD_2 ( ) ) == null ) && ( ( err . METHOD_3 ( ) ) != null ) ) { err . METHOD_4 ( err . METHOD_3 ( ) ) ; } return new TYPE_1 . OrmException ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , err ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException { final java.lang.String VAR_1 = STRING_1 ; TYPE_2 VAR_2 = VAR_3 . projects ( ) . name ( VAR_1 ) . create ( ) ; TYPE_3 p = VAR_2 . get ( ) ; org.junit.Assert.assertEquals ( VAR_1 , p . name ) ; TYPE_4 VAR_4 = VAR_5 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; org.junit.Assert . METHOD_2 ( VAR_4 ) ; TYPE_5 . METHOD_3 ( VAR_4 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_2 ) ; } 
private static Account . Id METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) throws TYPE_2 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account a = VAR_1 . METHOD_2 ( VAR_2 ) ; if ( a == null ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; } return a . getId ( ) ; } 
private boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ; } for ( java.lang.String name : VAR_2 ) { VAR_5 . info ( java.lang.String.format ( STRING_1 , name ) ) ; VAR_3 . METHOD_4 ( name ) . METHOD_6 ( ) ; } return ! ( VAR_2 . isEmpty ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , boolean edit ) { VAR_4 . add ( new TYPE_2 ( VAR_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) , ( ( VAR_2 - VAR_3 ) + 1 ) , VAR_2 , edit ) ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , org.eclipse.jgit.revwalk.RevCommit commit , TYPE_1 VAR_1 , java.util.List < TYPE_2 > VAR_2 , TYPE_3 info , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers ) throws com.google.gwtorm.server.OrmException { METHOD_1 ( db , change , null , ps , commit , VAR_1 , VAR_2 , info , reviewers ) ; } 
private static byte [ ] METHOD_1 ( final TYPE_1 p ) throws java.io.IOException { final TYPE_2 in = p . METHOD_2 ( ) . METHOD_3 ( p . getName ( ) ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ; try { TYPE_4 . METHOD_4 ( in , VAR_1 ) ; } finally { in . close ( ) ; VAR_1 . close ( ) ; } return VAR_1 . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) ; TYPE_2 u = util . user ( VAR_3 , VAR_4 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { index = new TYPE_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( index ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_4 = new TYPE_4 ( VAR_2 , null , new TYPE_5 ( null , VAR_2 ) ) ; } 
private void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 . get ( ) ) instanceof TYPE_2 ) { } else if ( ! ( VAR_2 ) ) { throw new TYPE_1 ( 1 , STRING_1 ) ; } else if ( ! ( VAR_1 . get ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_1 ( 1 , STRING_2 ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; } TYPE_1 . METHOD_1 ( VAR_3 , VAR_1 , new TYPE_2 < TYPE_3 > ( ) { public void METHOD_3 ( TYPE_4 VAR_4 ) { } public void onSuccess ( TYPE_3 result ) { } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 r = VAR_1 . put ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_4 ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_5 ( ) ) ; } 
protected TYPE_1 . ReviewDb METHOD_1 ( ) throws TYPE_2 { if ( ( db ) == null ) { try { db = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; } catch ( TYPE_3 . OrmException e ) { throw new TYPE_2 ( 1 , STRING_1 , e ) ; } } return db ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_1 ) . METHOD_5 ( true ) ; TYPE_2 u = util . user ( VAR_3 , VAR_5 ) ; METHOD_6 ( STRING_2 , u . METHOD_7 ( STRING_3 ) . METHOD_8 ( ) ) ; } 
public java.lang.String diff ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { TYPE_2 VAR_3 = VAR_4 ; TYPE_3 VAR_5 = VAR_3 . diff ( VAR_6 , VAR_1 , VAR_2 ) ; TYPE_4 VAR_7 = new TYPE_4 ( ) ; TYPE_5 VAR_8 = new TYPE_5 ( VAR_7 ) ; VAR_8 . format ( VAR_5 , VAR_1 , VAR_2 ) ; return VAR_7 . toString ( VAR_9 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey projectName : VAR_3 . METHOD_3 ( ) ) { TYPE_3 e = VAR_3 . get ( projectName ) ; if ( e == null ) { continue ; } if ( VAR_1 . equals ( e . getProject ( ) . METHOD_4 ( VAR_4 ) ) ) { VAR_2 . add ( VAR_5 . format ( e . getProject ( ) ) ) ; } } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_3 ( ) . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( insert ( VAR_4 , VAR_1 ) ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( ) ; TYPE_4 result = client . METHOD_7 ( VAR_2 ) ; if ( ! ( result . METHOD_8 ( ) ) ) { throw new java.io.IOException ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_9 ( ) . getId ( ) , VAR_3 , result . METHOD_10 ( ) ) ) ; } } 
public boolean METHOD_1 ( ) { com.google.gerrit.reviewdb.client.Account.Id VAR_1 = notes . getChange ( ) . METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) { com.google.gerrit.reviewdb.client.Account.Id id = METHOD_3 ( ) . getAccountId ( ) ; return id . equals ( VAR_1 ) ; } return false ; } 
public TYPE_1 change ( TYPE_2 notes ) { com.google.gerrit.reviewdb.client.Change change = notes . getChange ( ) ; TYPE_3 . METHOD_1 ( METHOD_2 ( ) . getProject ( ) . METHOD_3 ( ) . equals ( change . getProject ( ) ) , STRING_1 ) ; return METHOD_2 ( ) . METHOD_4 ( notes ) . METHOD_5 ( ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , java.lang.String path , TYPE_3 VAR_2 , byte [ ] VAR_3 ) throws TYPE_4 , java.io.IOException { final org.eclipse.jgit.lib.ObjectId VAR_4 = ( VAR_1 == ( VAR_5 ) ) ? VAR_2 . insert ( VAR_6 , VAR_3 ) : TYPE_5 . METHOD_2 ( repo , rw , base , path ) ; return new TYPE_1 ( path ) { public void apply ( TYPE_6 VAR_7 ) { VAR_7 . METHOD_3 ( VAR_8 ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; } } ; } 
public void METHOD_1 ( TYPE_1 a , TYPE_2 . Change change ) { VAR_1 = ( change . METHOD_2 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_2 = ( change . METHOD_4 ( ) . METHOD_3 ( ) ) / INT_1 ; VAR_3 = change . METHOD_5 ( ) ; VAR_4 = change . getStatus ( ) . METHOD_6 ( ) ; a . status = change . getStatus ( ) ; } 
private void METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; try { org.junit.Assert.assertEquals ( VAR_1 , repo . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . getName ( ) ) ; } finally { repo . close ( ) ; } } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_4 ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String id ) throws TYPE_3 , java.lang.Exception { final TYPE_4 user = VAR_2 . get ( ) ; if ( user instanceof TYPE_5 ) { throw new TYPE_6 ( STRING_1 ) ; } else if ( ! ( user instanceof TYPE_7 ) ) { throw new TYPE_3 ( id ) ; } return TYPE_8 . METHOD_1 ( id , VAR_3 ) ; } 
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean VAR_1 ) throws java.io.IOException , TYPE_1 { final org.eclipse.jgit.lib.Repository VAR_2 = VAR_3 . METHOD_1 ( project . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_3 ( VAR_2 ) ; if ( ! VAR_1 ) { METHOD_4 ( VAR_2 ) ; } } 
private TYPE_1 < com.google.gerrit.reviewdb.client . PatchSetApproval > approvals ( com.google.gerrit.reviewdb.server.ReviewDb db , final TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { return TYPE_3 . METHOD_1 ( db . METHOD_2 ( ) . METHOD_3 ( rsrc . getChange ( ) . getId ( ) ) , new TYPE_4 < com.google.gerrit.reviewdb.client . PatchSetApproval > ( ) { public boolean apply ( com.google.gerrit.reviewdb.client . PatchSetApproval input ) { return input . getAccountId ( ) . equals ( rsrc . METHOD_4 ( ) . getAccountId ( ) ) ; } } ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 type ) { res . METHOD_2 ( type . METHOD_3 ( ) ) ; res . METHOD_4 ( TYPE_4 . name ( ) ) ; res . METHOD_5 ( VAR_1 , STRING_1 ) ; res . METHOD_5 ( VAR_2 , STRING_2 ) ; METHOD_6 ( req , res ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 r ) { if ( METHOD_4 ( ) ) { display ( r ) ; } } } ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { for ( final TYPE_1 < ? , ? > TYPE_2 : VAR_2 ) { VAR_1 . METHOD_2 ( new TYPE_3 ( ) { public void run ( ) { TYPE_2 . METHOD_1 ( ) ; } } ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( ) { public void run ( ) { TYPE_2 . METHOD_4 ( VAR_3 ) ; } } , INT_1 , VAR_4 ) ; } } } 
public void METHOD_1 ( java.lang.String file , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 ) { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > set = VAR_2 . get ( file ) ; if ( set != null ) { set . METHOD_2 ( VAR_1 ) ; } else { VAR_2 . put ( file , TYPE_1 . METHOD_3 ( VAR_1 ) ) ; } } 
protected void METHOD_1 ( ) throws TYPE_1 { if ( ( db ) != null ) { try { for ( TYPE_2 w : db . METHOD_2 ( ) . METHOD_3 ( change.getId ( ) ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } catch ( TYPE_3 . OrmException err ) { } } } 
public TYPE_1 . Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 ref = repo . METHOD_2 ( VAR_1 ) ; VAR_2 . run ( ) ; org.eclipse.jgit.lib.ObjectId VAR_3 ; if ( ref == null ) { VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) ; VAR_4 = VAR_5 . get ( ) ; } else { VAR_3 = ref . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( rw , VAR_3 ) ; } return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_4 ( METHOD_2 ( ) ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ) && ( ! ( METHOD_7 ( db ) ) ) ; } 
protected void METHOD_1 ( final java.lang.String p ) { TYPE_1 in = VAR_1 class . METHOD_2 ( ) . METHOD_3 ( p ) ; if ( in != null ) { METHOD_4 ( in , ( STRING_1 + p ) ) ; } else { VAR_2 . error ( ( STRING_2 + p ) ) ; } } 
public int length ( ) { int VAR_1 = 0 ; TYPE_1 t = this ; while ( t . METHOD_1 ( ) ) { VAR_1 ++ ; t = ( ( TYPE_2 ) ( t ) ) . METHOD_2 ( ) . METHOD_3 ( ) ; } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . Change change , TYPE_2 . PatchSet patchSet ) { TYPE_3 VAR_2 = VAR_3 . get ( change , patchSet ) ; for ( TYPE_4 patch : VAR_2 . METHOD_2 ( ) ) { if ( ( VAR_4 ) == null ) { VAR_4 = new java.util.ArrayList < TYPE_5 > ( ) ; } TYPE_5 p = new TYPE_5 ( ) ; p . file = patch . METHOD_3 ( ) ; p . type = patch . METHOD_4 ( ) ; VAR_4 . add ( p ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; commit . METHOD_2 ( ( VAR_1 && ( ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) ) ) ) ; VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . ChangeInfo info = METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; java.lang.String message = VAR_2 . get ( VAR_3 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_4 , admin . METHOD_5 ( ) . METHOD_6 ( ) ) ) ; } 
public void topic ( java.lang.String topic ) throws TYPE_1 { TYPE_2 in = new TYPE_2 ( ) ; in . topic = topic ; try { VAR_1 . apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | TYPE_3 e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public boolean METHOD_1 ( com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { try { for ( com.google.gerrit.server.query.change.ChangeData VAR_2 : index . METHOD_2 ( TYPE_1 . METHOD_3 ( new TYPE_2 ( db , VAR_1 . getId ( ) ) , this ) ) . METHOD_4 ( ) ) { if ( VAR_2 . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { return true ; } } } catch ( TYPE_3 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return false ; } 
private TYPE_1 user ( TYPE_2 . ProjectConfig VAR_1 , java.lang.String name , com.google.gerrit.reviewdb.client . AccountGroup ... VAR_2 ) { return new TYPE_1 ( VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_3 . Collections < TYPE_3 > METHOD_1 ( ) , VAR_4 , VAR_5 , null , VAR_6 , VAR_7 , new TYPE_4 ( name , VAR_2 ) , METHOD_2 ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , TYPE_1 . Result > VAR_1 = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; METHOD_3 ( VAR_2 , VAR_3 , STRING_5 , project ) ; TYPE_2 in = METHOD_4 ( VAR_4 ) ; in . branch = STRING_3 ; VAR_5 = VAR_1 . get ( STRING_1 ) . getChangeId ( ) ; METHOD_5 ( in , VAR_6 class , ( STRING_6 + ( VAR_5 ) ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 . Id VAR_2 ) { java.util.List < TYPE_1 > result = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { if ( ( TYPE_4 . METHOD_2 ( change . METHOD_3 ( ) . get ( ) , VAR_3 . METHOD_4 ( ) ) ) && ( VAR_2 . equals ( VAR_3 . METHOD_5 ( ) ) ) ) { result . add ( VAR_3 ) ; } } return result ; } 
void METHOD_1 ( java.lang.String a , java.lang.String b , java.lang.String VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . create ( a ) , TYPE_2 . create ( b ) ) . toString ( ) ; if ( ! ( VAR_2 . equals ( VAR_1 ) ) ) { org.junit.Assert . METHOD_3 ( java.lang.String.format ( STRING_1 , a , b , VAR_2 , VAR_1 ) ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException , TYPE_2 { METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) ; METHOD_4 ( STRING_1 ) ; METHOD_4 ( STRING_2 ) ; java.util.Set < java.lang.String > s = VAR_1 . METHOD_3 ( db ) ; assertEquals ( 1 , s . size ( ) ) ; METHOD_2 ( s . contains ( STRING_3 ) ) ; METHOD_5 ( s . contains ( STRING_4 ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 s ) { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( ( s . METHOD_3 ( ) . METHOD_4 ( ) ? s . METHOD_3 ( ) . get ( ) : TYPE_4 . METHOD_2 ( s . METHOD_5 ( ) . getId ( ) ) ) ) ; return new TYPE_1 ( VAR_1 , TYPE_4 . METHOD_6 ( VAR_1 , s ) ) ; } 
private static boolean METHOD_1 ( ) { if ( VAR_1 ) { return true ; } TYPE_1 ui = null ; if ( TYPE_2 . METHOD_2 ( ) ) { ui = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; } if ( ui == null ) { ui = TYPE_2 . METHOD_6 ( ) . METHOD_5 ( ) ; } return ui == ( VAR_2 ) ; } 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < ? extends TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_1 ) { java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( VAR_1 ) ; java.util.Collections . METHOD_1 ( r , VAR_2 ) ; return r ; } 
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { user = ctx . METHOD_2 ( ) . METHOD_3 ( ) ; notes = ctx . METHOD_4 ( ) ; ps = VAR_1 . get ( ctx . METHOD_5 ( ) , ctx . METHOD_4 ( ) , psId ) ; boolean VAR_2 = false ; VAR_2 |= METHOD_6 ( ctx ) ; VAR_2 |= METHOD_7 ( ctx ) ; VAR_2 |= METHOD_8 ( ctx ) ; if ( VAR_2 ) { ctx . METHOD_9 ( ) ; } return VAR_2 ; } 
private java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 p ) { java.util.List < TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_2 c : p . METHOD_3 ( ) ) { if ( c . METHOD_4 ( ) ) { VAR_1 . add ( VAR_2 . format ( c . getProject ( ) ) ) ; VAR_1 . METHOD_5 ( METHOD_1 ( c ) ) ; } } return VAR_1 ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_2 = null ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_3 = null ; } TYPE_1 . METHOD_6 ( true ) ; TYPE_2 . METHOD_7 ( true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = METHOD_2 ( STRING_2 ) ; com.google.gerrit.reviewdb.client.Change VAR_3 = insert ( METHOD_3 ( VAR_1 ) ) ; com.google.gerrit.reviewdb.client.Change VAR_4 = insert ( METHOD_3 ( VAR_2 ) ) ; METHOD_4 ( STRING_3 ) ; METHOD_4 ( STRING_4 ) ; METHOD_4 ( STRING_5 , VAR_3 ) ; METHOD_4 ( STRING_6 , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 r = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; r . METHOD_3 ( ) ; r . METHOD_4 ( true ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) . METHOD_4 ( true ) ; TYPE_3 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
public static boolean METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet patchSet , TYPE_1 . NameKey VAR_1 , org.eclipse.jgit.lib.Repository git , org.eclipse.jgit.revwalk.RevWalk rw , com.google.gerrit.reviewdb.server.ReviewDb db ) { try { TYPE_2 . METHOD_2 ( patchSet , VAR_1 , git , rw , db ) ; return true ; } catch ( TYPE_3 e ) { return false ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { VAR_2 . METHOD_3 ( java.lang.String.format ( STRING_1 , patchSet . getId ( ) , VAR_1 ) , e ) ; return false ; } } 
private void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { METHOD_2 ( res . METHOD_3 ( ) . close ( ) ) ; METHOD_4 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) ; } else { METHOD_2 ( res . METHOD_3 ( ) . METHOD_5 ( ) ) ; METHOD_4 ( res . METHOD_3 ( ) . close ( ) ) ; } } 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { java.lang.String id = cd . getId ( ) . toString ( ) ; try { if ( cd . getChange ( ) . getStatus ( ) . METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( id ) ; commit ( VAR_1 ) ; } else { VAR_2 . METHOD_2 ( id ) ; commit ( VAR_2 ) ; } } catch ( TYPE_1 e ) { throw new java.io.IOException ( e ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_1 . Factory VAR_1 ) { TYPE_2 . METHOD_2 ( ( ( db ) != null ) , STRING_1 ) ; if ( ( update ) == null ) { update = VAR_1 . create ( db , METHOD_3 ( ) , VAR_2 , VAR_3 ) . METHOD_4 ( repo , rw , VAR_4 ) . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_6 . create ( ) ) ; } return update ; } 
public void onSuccess ( final TYPE_1 result ) { VAR_1 . METHOD_1 ( false ) ; final TYPE_2 . Account me = TYPE_3 . METHOD_2 ( ) ; me . METHOD_3 ( VAR_2 ) ; me . METHOD_4 ( VAR_3 ) ; me . METHOD_5 ( info ) ; TYPE_3 . METHOD_6 ( ) ; VAR_4 . display ( me ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] args = VAR_1 . METHOD_3 ( ) ; for ( int i = 1 ; i < ( args . length ) ; i ++ ) { VAR_2 = ( VAR_2 + STRING_1 ) + ( args [ i ] ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; assertEquals ( ( STRING_4 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_4 ) ) ; assertEquals ( ( STRING_6 + ( STRING_2 + STRING_7 ) ) , METHOD_2 ( STRING_6 ) ) ; assertEquals ( ( STRING_8 + ( STRING_2 + STRING_9 ) ) , METHOD_2 ( STRING_8 ) ) ; assertEquals ( ( STRING_10 + ( STRING_2 + STRING_11 ) ) , METHOD_2 ( STRING_10 ) ) ; } 
private void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) ) { METHOD_2 ( ) ; } else { final TYPE_1 < TYPE_2 > VAR_2 = new TYPE_1 < TYPE_2 > ( ) { private int VAR_3 ; public void onSuccess ( final TYPE_2 result ) { if ( ( ++ ( VAR_3 ) ) == ( VAR_1 . size ( ) ) ) { METHOD_2 ( ) ; } } } ; for ( final TYPE_3 p : VAR_1 ) { p . METHOD_3 ( VAR_2 ) ; } } } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { protected void METHOD_2 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; } } ) ; rpc ( VAR_4 class ) ; rpc ( VAR_5 class ) ; } 
protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . Factory VAR_1 , TYPE_3 rsrc , TYPE_4 input ) throws TYPE_5 , TYPE_6 { return VAR_2 . apply ( VAR_1 , rsrc . METHOD_2 ( ) . METHOD_3 ( ) , rsrc . getChange ( ) , rsrc . getChange ( ) . currentPatchSetId ( ) , null ) ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1 . Change change ) { TYPE_2 . NameKey name = change . getProject ( ) ; try { return VAR_1 . METHOD_1 ( name . get ( ) ) ; } catch ( TYPE_3 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } 
public TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 : TYPE_4 . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ) { VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; } } return VAR_1 ; } 
private int METHOD_1 ( TYPE_1 cm , int line , int VAR_1 ) { for ( int i = 0 ; i < VAR_1 ; i ++ ) { cm . METHOD_2 ( ( line + i ) , VAR_2 , VAR_3 . diff ( ) ) ; } return line + VAR_1 ; } 
public void onSuccess ( TYPE_1 VAR_1 ) { boolean VAR_2 = VAR_1 . METHOD_1 ( STRING_1 ) ; display ( VAR_3 , VAR_4 . METHOD_2 ( ) , ( ( VAR_5 . METHOD_3 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_4 ( ) ) || VAR_2 ) , ( ( VAR_5 . METHOD_5 ( ) ) || VAR_2 ) ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.util.Set < TYPE_2 > VAR_2 ) { VAR_1 . append ( CHAR_1 ) ; boolean VAR_3 = true ; for ( final TYPE_2 VAR_4 : VAR_2 ) { if ( VAR_3 ) { VAR_3 = false ; } else { VAR_1 . append ( CHAR_2 ) ; } if ( VAR_4 != null ) { VAR_5 . METHOD_1 ( VAR_1 , VAR_4 ) ; } else { VAR_1 . append ( VAR_6 ) ; } } VAR_1 . append ( CHAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 ctx ) throws java.lang.Exception { TYPE_2 c = METHOD_2 ( branch ) ; if ( c != null ) { ctx . METHOD_3 ( new TYPE_3 . ReceiveCommand ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ) ; METHOD_5 ( branch , c ) ; } } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 result ) { TYPE_5 p = TYPE_6 . METHOD_3 ( ) ; result . METHOD_4 ( p ) ; TYPE_6 . METHOD_5 ( p ) ; } } ) ; close ( ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_8 ( db ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 schema = METHOD_2 ( ) ; METHOD_3 ( schema . METHOD_4 ( ) ) ; assertEquals ( STRING_1 , schema . METHOD_4 ( ) . METHOD_5 ( ) ) ; assertEquals ( 1 , schema . METHOD_4 ( ) . METHOD_6 ( ) ) ; } 
protected TYPE_1 . Result METHOD_1 ( java.lang.String changeId ) throws java.io.IOException , TYPE_2 { java.util.Collections . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_2 = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ; return VAR_2 . to ( git , STRING_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 1 ) ) , in . METHOD_6 ( 0 ) ) , out . METHOD_7 ( ) ) ; } 
protected void run ( ) throws TYPE_1 { try { TYPE_2 in = new TYPE_2 ( ) ; in . revision = revision ; VAR_1 . projects ( ) . name ( project . getProject ( ) . METHOD_1 ( ) . get ( ) ) . branch ( name ) . create ( in ) ; } catch ( TYPE_3 e ) { throw METHOD_2 ( e ) ; } } 
protected TYPE_1 METHOD_1 ( ) throws java.lang.Exception { final TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 < TYPE_4 . ReviewDb > VAR_2 = VAR_1 . METHOD_3 ( ) ; final TYPE_5 VAR_3 = VAR_1 . METHOD_4 ( ) ; final TYPE_6 config = VAR_1 . METHOD_5 ( ) ; return new TYPE_7 ( VAR_2 , VAR_3 , config ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( e == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_1 . error ( err ) ; } } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( new TYPE_3 ( ) ) ; modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ; if ( ( VAR_5 ) == ( VAR_6 ) ) { modules.add ( new TYPE_5 ( ) ) ; } return VAR_1 . METHOD_3 ( modules ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final short VAR_2 , final short VAR_3 ) { final int n = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( TYPE_2 . METHOD_3 ( VAR_1 . getValue ( i ) ) ) == VAR_3 ) { VAR_1 . METHOD_4 ( i ) ; return ; } } if ( VAR_3 != VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) + STRING_7 ) , n . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) && ( user . METHOD_3 ( ) . METHOD_4 ( ) ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) ; } else { VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) throws com.google.gwtorm.server.OrmException { TYPE_1 msg = TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 . get ( ) . METHOD_5 ( ) . METHOD_6 ( rsrc . getChange ( ) . getId ( ) ) . METHOD_7 ( ) ) , new TYPE_5 < TYPE_1 > ( ) { public boolean apply ( TYPE_1 input ) { return ( input . METHOD_8 ( ) ) == null ; } } ) , null ) ; return msg ; } 
private void METHOD_1 ( final org.eclipse.jgit.lib.Repository VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! ( METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ) ) { throw new TYPE_1 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ) ; } METHOD_6 ( VAR_2 , VAR_3 ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; try { TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_4 ( ) ; return VAR_4 . getValue ( VAR_5 ) ; } finally { VAR_2 . close ( ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; if ( ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) && ( VAR_4 ) ) { TYPE_1 VAR_5 = new TYPE_1 ( VAR_6 ) ; VAR_7 . set ( VAR_8 . create ( null , VAR_5 ) . METHOD_3 ( INT_1 , VAR_9 ) ) ; } } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ) { return false ; } if ( ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_4 ( db , cd ) ) ) ) { return false ; } return METHOD_5 ( ) . METHOD_1 ( ) ; } 
private static TYPE_1 type ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { if ( ( VAR_1 . METHOD_1 ( VAR_2 ) ) != null ) { return VAR_1 . METHOD_1 ( VAR_2 ) ; } for ( TYPE_1 VAR_3 : VAR_1 . METHOD_2 ( ) ) { if ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) { return VAR_3 ; } } return null ; } 
public java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String name ) { java.lang.String [ ] VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , name ) ; if ( VAR_3 != null ) { return VAR_3 ; } return super . METHOD_1 ( VAR_1 , VAR_2 , name ) ; } 
protected void METHOD_1 ( ) { file . set ( id , VAR_1 ) ; file . METHOD_2 ( VAR_2 ) ; file . METHOD_3 ( VAR_2 . isEmpty ( ) ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( false ) ; TYPE_1 . get ( ) . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( ) { VAR_1 . METHOD_6 ( true ) ; } } ) ; } 
private boolean METHOD_1 ( TYPE_1 . Change c ) throws TYPE_2 . OrmException { final TYPE_3 commit = VAR_1 . get ( c . getId ( ) ) ; final TYPE_4 s = ( commit != null ) ? VAR_2 : null ; boolean VAR_3 = false ; if ( ( s != null ) && ( ( ( s . equals ( VAR_4 ) ) || ( s . equals ( VAR_5 ) ) ) || ( s . equals ( VAR_6 ) ) ) ) { VAR_3 = true ; } return VAR_3 ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey name , java.lang.String VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 , org.eclipse.jgit.lib.ObjectId VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( name . get ( ) ) ; if ( VAR_4 != null ) { TYPE_2 VAR_6 = VAR_7 ; if ( VAR_6 != null ) { TYPE_3 VAR_8 = VAR_6 . METHOD_3 ( ) ; if ( VAR_8 != null ) { VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } } } } 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) throws TYPE_4 { final TYPE_5 group = VAR_3 . get ( VAR_2 ) ; if ( group == null ) { throw new TYPE_4 ( VAR_2 ) ; } return new TYPE_1 ( VAR_1 , group ) ; } 
private void status ( int VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( ) ; VAR_3 . append ( VAR_4 ) ; VAR_3 . append ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) ) ; METHOD_1 ( VAR_6 , VAR_3 . toString ( ) ) ; } else if ( METHOD_2 ( VAR_6 ) ) { METHOD_1 ( VAR_6 , null ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; long VAR_2 = ( VAR_1 . METHOD_3 ( ) ) + 1 ; TYPE_2 result = VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 , VAR_1 . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( TYPE_3 . METHOD_7 ( STRING_1 ) , result . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , TYPE_1 { this . VAR_1 = walk . METHOD_2 ( ) ; try { revision = ( id != null ) ? walk . parseCommit ( id ) : null ; METHOD_3 ( ) ; } finally { VAR_1 = null ; } } 
TYPE_1 METHOD_1 ( java.lang.String name ) { try { TYPE_2 p = METHOD_2 ( name ) ; return VAR_1 . get ( p , METHOD_3 ( name , p ) ) ; } catch ( TYPE_3 e ) { VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) ; return null ; } } 
void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; TYPE_1 . METHOD_1 ( ( VAR_1 && ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ) ; TYPE_2 . METHOD_4 ( VAR_4 , VAR_1 ) ; if ( VAR_1 ) { VAR_5 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ; } else { VAR_5 . METHOD_7 ( VAR_6 . METHOD_6 ( ) ) ; } VAR_3 . METHOD_8 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 . NameKey branch ) throws TYPE_3 { final TYPE_4 p = VAR_1 . get ( branch . getParentKey ( ) ) ; if ( p == null ) { throw new TYPE_3 ( branch . getParentKey ( ) ) ; } return p . METHOD_1 ( ) ; } 
private TYPE_1 [ ] METHOD_1 ( TYPE_2 cfg ) { TYPE_1 c = new TYPE_3 ( ) ; c . METHOD_2 ( null ) ; c . METHOD_3 ( cfg . METHOD_4 ( STRING_1 , null , STRING_2 , INT_1 ) ) ; c . METHOD_5 ( false ) ; return new TYPE_1 [ ] { c } ; } 
private void METHOD_1 ( com.google.gerrit.server.query.change.ChangeData change , boolean VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_1 , TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( db , change . change ( ) , user ( admin ) ) ; com.google.common.truth.Truth.assertThat ( submit . METHOD_3 ( VAR_2 ) . isEmpty ( ) ) . isEqualTo ( VAR_1 ) ; } 
public static void METHOD_1 ( ) { VAR_1 = null ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 ) ; for ( final TYPE_2 VAR_4 : VAR_5 ) { VAR_4 . METHOD_3 ( ) ; } TYPE_3 . METHOD_4 ( ) ; if ( ( VAR_6 ) != null ) { VAR_6 . METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = VAR_1 . METHOD_2 ( db , TYPE_1 . of ( user . email , admin . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . METHOD_4 ( user . id ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , TYPE_1 > res = METHOD_2 ( STRING_1 , new TYPE_2 < java.util.Map < java.lang.String , TYPE_1 > > ( ) { } . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( 1 , res . size ( ) ) ; TYPE_1 d = res . get ( STRING_2 ) ; METHOD_4 ( STRING_3 , d ) ; org.junit.Assert.assertEquals ( repo . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) , d . name ) ; } 
protected void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 class ) ; bind ( VAR_2 class ) . METHOD_3 ( VAR_1 ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; bind ( VAR_4 class ) . METHOD_3 ( VAR_3 ) ; VAR_5 = METHOD_2 ( VAR_6 class ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_5 ) ; bind ( VAR_7 class ) . METHOD_3 ( new TYPE_1 ( null , null ) { public boolean METHOD_4 ( TYPE_2 event ) { return true ; } } ) ; } 
private TYPE_1 METHOD_1 ( final java.lang.String email ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { java.util.List < com.google.gerrit.reviewdb.client.Account > VAR_1 = db . METHOD_3 ( ) . METHOD_1 ( email ) . METHOD_4 ( ) ; return ( VAR_1 . size ( ) ) == 1 ? auth ( VAR_1 . get ( 0 ) ) : null ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_5 ( ) . log ( STRING_1 , e ) ; return null ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; if ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) { VAR_1 . append ( info . status ( ) ) ; } VAR_1 . METHOD_5 ( ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.ObjectId VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , java.io.IOException , TYPE_3 { TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 ) ; TYPE_4 out = new TYPE_4 ( VAR_3 ) ; try { git . METHOD_3 ( VAR_1 ) . METHOD_4 ( out ) ; } finally { out . close ( ) ; } return VAR_3 ; } 
private static void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_1 VAR_2 , java.lang.String path , TYPE_2 diff ) throws java.io.IOException { try { if ( ! ( path . isEmpty ( ) ) ) { diff . METHOD_2 ( TYPE_3 . create ( path ) ) ; } diff . METHOD_3 ( repo ) ; diff . METHOD_4 ( true ) ; diff . format ( VAR_1 , VAR_2 ) ; } finally { diff . METHOD_5 ( ) ; } } 
private TYPE_1 . ChangeInfo METHOD_1 ( final TYPE_2 . Change VAR_1 , java.util.Map < TYPE_3 . Id , TYPE_4 . Id > VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 . ChangeInfo VAR_4 ; if ( VAR_2 == null ) { VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 ) ; } else { VAR_4 = new TYPE_1 . ChangeInfo ( VAR_1 , VAR_2 . get ( VAR_1 . getId ( ) ) ) ; } VAR_4 . METHOD_4 ( METHOD_5 ( VAR_1 ) ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.io.IOException { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_5 . format ( null , null , null , null , cfg , VAR_1 ) , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p , boolean VAR_1 ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = ( VAR_1 ) ? VAR_2 . METHOD_2 ( p ) : VAR_2 . METHOD_3 ( p ) ; TYPE_2 VAR_3 = repo . METHOD_4 ( ) ; return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_3 . METHOD_5 ( ) ) , VAR_3 , new TYPE_3 ( ) , true ) ; } 
public void onSuccess ( TYPE_1 info ) { if ( info . METHOD_1 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) , STRING_1 ) ; } if ( info . METHOD_3 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) , STRING_2 ) ; } if ( info . METHOD_4 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) , STRING_3 ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b . isEmpty ( ) ) ; METHOD_3 ( b . METHOD_4 ( ) ) ; assertEquals ( STRING_1 , b . METHOD_5 ( ) ) ; b . append ( STRING_2 ) ; METHOD_2 ( b . METHOD_4 ( ) ) ; assertEquals ( STRING_2 , b . METHOD_5 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 in , TYPE_2 < ? extends TYPE_3 > VAR_1 ) throws java.lang.Exception { { VAR_2 . projects ( ) . create ( in ) ; org.junit.Assert . METHOD_2 ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) ) ; } com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( INT_1 ) ; TYPE_4 VAR_4 ; } 
private final void METHOD_1 ( final TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet > patchSets , final com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSet patchSet : patchSets ) { db . METHOD_2 ( ) . delete ( db . METHOD_2 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) ; db . METHOD_4 ( ) . delete ( db . METHOD_4 ( ) . METHOD_3 ( patchSet . getId ( ) ) ) ; db . patchSets ( ) . delete ( java.util.Collections.singleton ( patchSet ) ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 ... VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_3 ) ; VAR_4 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; VAR_5 . METHOD_6 ( ) ; return VAR_2 ; } 
public java.lang.String toString ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_1 ( user ) ; if ( ( VAR_1 . METHOD_2 ( CHAR_1 ) ) < 0 ) { return ( ( VAR_2 ) + STRING_1 ) + VAR_1 ; } else { return ( ( ( VAR_2 ) + STRING_2 ) + VAR_1 ) + STRING_3 ; } } 
private void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res ) throws java.io.IOException { TYPE_3 VAR_1 = METHOD_2 ( req ) ; res . METHOD_3 ( VAR_2 ) ; res . METHOD_4 ( STRING_1 ) ; res . METHOD_5 ( ( ( int ) ( VAR_1 . length ( ) ) ) ) ; TYPE_4 out = res . METHOD_6 ( ) ; TYPE_5 in = new TYPE_6 ( VAR_1 ) ; try { TYPE_7 . METHOD_7 ( in , out ) ; } finally { in . close ( ) ; } } 
private void METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 req , final TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { final java.lang.StringBuilder url = new java.lang.StringBuilder ( ) ; url . append ( req . METHOD_2 ( ) ) ; url . append ( CHAR_1 ) ; url . append ( CHAR_2 ) ; url . append ( VAR_1 ) ; rsp . METHOD_3 ( url . toString ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( ( ( VAR_2 ) != null ) , STRING_1 ) ; int VAR_3 = ( VAR_2 . isEmpty ( ) ) ? 1 : ( VAR_2 . size ( ) ) + 1 ; TYPE_1 . Id VAR_4 = new TYPE_1 . Id ( VAR_5 , VAR_3 ) ; TYPE_1 key = new TYPE_3 ( ) . create ( VAR_4 , VAR_1 ) ; VAR_2 . add ( TYPE_4 . of ( key ) ) ; return key ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( true ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ; TYPE_1 u = user ( ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_5 ) . METHOD_6 ( ) ) ; METHOD_7 ( STRING_6 , u . METHOD_5 ( STRING_7 ) . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; try ( org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( VAR_2 ) ) { com.google.common.truth.Truth.assertThat ( repo ) . METHOD_5 ( ) ; } com.google.common.truth.Truth.assertThat ( ( ( TYPE_1 < ? > ) ( VAR_1 . METHOD_6 ( ) ) ) ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 ) ; java.lang.String master = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ; METHOD_3 ( STRING_1 ) ; METHOD_5 ( user ) ; TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_3 , STRING_4 , false ) , TYPE_3 . branch ( STRING_2 , master , false ) ) , METHOD_7 ( ) . get ( ) ) ; } 
private void METHOD_1 ( TYPE_1 . Result r , int VAR_1 ) throws java.lang.Exception { TYPE_2 . ChangeInfo c = get ( r . getChangeId ( ) , VAR_2 ) ; TYPE_3 VAR_3 = VAR_4 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( 1 , VAR_5 . size ( ) ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_5 . get ( 0 ) . name ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( 0 ) . value . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( STRING_2 + STRING_3 ) + ( TYPE_2 . METHOD_5 ( STRING_4 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_5 ) ) ) + STRING_6 ) , n . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) { for ( TYPE_3 VAR_3 : VAR_2 ) { if ( ( VAR_4 ) == ( TYPE_4 . METHOD_2 ( VAR_5 ) ) ) { if ( ( VAR_6 ) == null ) { VAR_6 = new java.util.ArrayList < > ( ) ; } VAR_6 . add ( METHOD_3 ( VAR_3 ) ) ; } } } 
public void run ( ) { int VAR_1 = ( TYPE_1 . METHOD_1 ( ) ) - ( ( TYPE_2 . METHOD_2 ( ) ) + INT_1 ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( diff ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; if ( VAR_6 . METHOD_5 ( ) ) { VAR_4 . METHOD_6 ( true ) ; } VAR_7 . METHOD_4 ( VAR_6 . METHOD_7 ( ) , diff ) ; } 
private void METHOD_1 ( TYPE_1 notes , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_3 ... VAR_3 ) throws java.lang.Exception { java.util.List < TYPE_3 > VAR_4 = new java.util.ArrayList ( ( 1 + ( VAR_3 . length ) ) ) ; VAR_4 . add ( VAR_2 ) ; VAR_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_5 . METHOD_4 ( METHOD_5 ( notes ) , VAR_1 ) . METHOD_6 ( ) ) . METHOD_7 ( VAR_4 ) . METHOD_8 ( ) ; } 
private void METHOD_1 ( ) { if ( ( 0 <= ( VAR_1 ) ) && ( ( VAR_1 ) < ( table . METHOD_2 ( ) ) ) ) { final TYPE_1 VAR_2 = METHOD_3 ( VAR_1 ) ; if ( VAR_2 != null ) { METHOD_4 ( VAR_2 ) ; } } } 
public TYPE_1 . Result METHOD_1 ( ) throws java.lang.Exception { TYPE_2 ref = repo . METHOD_2 ( VAR_1 ) ; VAR_2 . run ( ) ; org.eclipse.jgit.lib.ObjectId VAR_3 ; if ( ref == null ) { VAR_3 = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( ) ; VAR_4 = VAR_5 . get ( ) ; } else { VAR_3 = ref . METHOD_4 ( ) ; VAR_4 = METHOD_5 ( VAR_3 ) ; } return METHOD_6 ( repo , rw , VAR_3 , ( ( VAR_4 ) + ( VAR_6 ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ; if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return ; } TYPE_7 rsp = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ; if ( METHOD_3 ( req , rsp ) ) { VAR_3 . METHOD_1 ( req , rsp ) ; } } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = id ; java.util.List < TYPE_1 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } throw new TYPE_8 ( ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 a = new TYPE_1 ( VAR_1 , STRING_2 ) ; assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) ; } 
static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
static com.google.gerrit.server.query.change.ChangeData METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id , int currentPatchSetId ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , null , null , id ) ; VAR_1 = new com.google.gerrit.reviewdb.client.PatchSet ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , currentPatchSetId ) ) ; return cd ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 p = new TYPE_1 ( ) ; p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ; p . METHOD_2 ( STRING_2 , ( STRING_3 + ( ( VAR_2 ) ++ ) ) ) ; db = new TYPE_2 < TYPE_3 > ( new TYPE_4 ( p ) , VAR_3 class ) ; VAR_4 = new java.util.ArrayList < TYPE_3 > ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( ( ( STRING_1 + ( admin . email ) ) + STRING_2 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; TYPE_2 VAR_3 = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_4 class ) ; TYPE_3 . METHOD_6 ( new TYPE_4 ( admin . id ) , VAR_3 ) ; } 
private org.eclipse.jgit.lib.ObjectId METHOD_1 ( ) throws TYPE_1 , TYPE_2 , java.io.IOException { TYPE_3 < TYPE_4 > edit = VAR_1 . METHOD_2 ( change ) ; if ( edit . METHOD_3 ( ) ) { return edit . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; } throw new TYPE_2 ( change.getId ( ) ) ; } 
public TYPE_1 create ( com.google.gerrit.reviewdb.client.Project.NameKey name , org.eclipse.jgit.lib.Repository VAR_1 , TYPE_2 user , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = factory . create ( name , VAR_1 , VAR_2 ) ; VAR_3 . METHOD_1 ( ) . METHOD_2 ( METHOD_3 ( user ) ) ; VAR_3 . METHOD_1 ( ) . METHOD_4 ( VAR_4 ) ; return VAR_3 ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException , TYPE_1 { java.util.Map < TYPE_2 , byte [ ] > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( new TYPE_2 ( repo . METHOD_2 ( ) . METHOD_3 ( ) , STRING_1 ) , null ) ; return TYPE_4 . METHOD_4 ( repo , STRING_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException { db . create ( ) ; final TYPE_2 config = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 , 1 , 2 ) ; METHOD_3 ( VAR_1 , VAR_3 , ( - 1 ) , 1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) , METHOD_2 ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) ) ) ; assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) ) ) ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws TYPE_2 , java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( VAR_2 ) ; if ( ! ( VAR_1 . METHOD_2 ( db . get ( ) , repo , commit ) ) ) { throw new TYPE_2 ( ) ; } } } 
private void METHOD_1 ( java.lang.String msg , TYPE_1 t ) { if ( VAR_1 . METHOD_2 ( ) ) { if ( t != null ) { VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) , t ) ; } else { VAR_1 . error ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + msg ) ) ; } } } 
public TYPE_1 < TYPE_2 > get ( final TYPE_3 < TYPE_4 > VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( ) ; for ( final TYPE_4 key : VAR_1 ) { final TYPE_2 VAR_2 = get ( key ) ; if ( VAR_2 != null ) { r . add ( VAR_2 ) ; } } return new TYPE_5 < TYPE_2 > ( r ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 , final java.lang.String VAR_3 ) { final int n = VAR_1 . METHOD_2 ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( VAR_1 . getValue ( i ) . equals ( VAR_3 ) ) { VAR_1 . METHOD_3 ( i ) ; return ; } } if ( VAR_3 != VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; VAR_1 = new TYPE_5 ( repo . METHOD_2 ( ) , new TYPE_6 ( repo . METHOD_2 ( ) ) . METHOD_3 ( null ) , new TYPE_7 ( false , TYPE_8 . METHOD_4 ( ) . METHOD_5 ( 0 ) ) ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id id ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = VAR_1 . get ( id ) ; if ( c == null ) { c = db . changes ( ) . get ( id ) ; } TYPE_2 notes = VAR_2 . METHOD_2 ( c ) ; TYPE_1 ctx = new TYPE_1 ( VAR_3 . METHOD_3 ( notes , user ) , new TYPE_3 ( db ) ) ; if ( VAR_4 . METHOD_4 ( ) ) { ctx . METHOD_5 ( ) . METHOD_6 ( ) ; } return ctx ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( this , VAR_1 ) ; } TYPE_1 . METHOD_3 ( this ) ; TYPE_2 . METHOD_4 ( new TYPE_3 ( this ) ) ; TYPE_1 . METHOD_5 ( null ) ; METHOD_6 ( ) ; if ( ( VAR_2 ) != null ) { TYPE_4 . set ( VAR_2 ) ; VAR_3 = true ; } else { TYPE_4 . METHOD_7 ( ) ; } } 
public java.util.List < java.lang.String > METHOD_1 ( ) throws TYPE_1 { java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.String [ ] VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_2 != null ) { for ( java.lang.String VAR_3 : VAR_2 ) { java.lang.String VAR_4 = VAR_3 . METHOD_5 ( 0 , ( ( VAR_3 . length ( ) ) - ( TYPE_3 . length ( ) ) ) ) ; VAR_1 . add ( VAR_4 ) ; } } return VAR_1 ; } 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.server.query.change.ChangeData > schema = TYPE_4 . schema ( VAR_2 ) ; if ( schema . METHOD_2 ( VAR_3 ) ) { return query ( TYPE_4 . METHOD_3 ( branch , TYPE_4 . METHOD_4 ( schema , VAR_1 ) ) ) ; } else { return METHOD_1 ( schema , branch , VAR_1 , VAR_4 . METHOD_5 ( ) ) ; } } 
public final void METHOD_1 ( int line ) { int VAR_1 = METHOD_2 ( ) ; if ( ( METHOD_3 ( ( VAR_1 - INT_1 ) ) ) < line ) { METHOD_4 ( ( ( METHOD_5 ( line , STRING_1 ) ) - ( FLOAT_1 * VAR_1 ) ) ) ; } METHOD_6 ( TYPE_1 . create ( line ) ) ; } 
public void update ( ) throws TYPE_1 { try { schema = VAR_1 . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( VAR_2 , rw , VAR_3 . getId ( ) . METHOD_4 ( ) , null ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } finally { if ( ( schema ) != null ) { schema . close ( ) ; schema = null ; } } } 
public static java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Change . Status status ) { if ( status == null ) { return STRING_1 ; } switch ( status ) { case VAR_1 : return TYPE_1 . METHOD_2 ( ) ; case VAR_2 : return TYPE_1 . METHOD_3 ( ) ; case VAR_3 : return TYPE_1 . METHOD_4 ( ) ; case VAR_4 : return TYPE_1 . METHOD_5 ( ) ; case VAR_5 : return TYPE_1 . METHOD_6 ( ) ; default : return status . name ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . HttpServletResponse rsp ) throws java.io.IOException { byte [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; rsp . METHOD_3 ( VAR_3 , INT_1 ) ; rsp . METHOD_4 ( VAR_4 , STRING_1 ) ; rsp . METHOD_4 ( VAR_5 , STRING_2 ) ; rsp . METHOD_5 ( STRING_3 ) ; rsp . METHOD_6 ( VAR_2 . length ) ; final TYPE_3 out = rsp . METHOD_7 ( ) ; try { out . METHOD_8 ( VAR_2 ) ; } finally { out . close ( ) ; } } 
private void METHOD_1 ( final TYPE_1 . Id me , final TYPE_2 . ReviewDb db ) { final TYPE_3 c = server . METHOD_2 ( ) ; final TYPE_2 . Account a = TYPE_4 . METHOD_3 ( ) . get ( me , db ) ; if ( ( a != null ) && ( ( a . METHOD_4 ( ) ) != null ) ) { c . METHOD_5 ( a . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers = VAR_1 . METHOD_2 ( db , java.util.Collections.singleton ( user . email ) , project , change , VAR_2 . METHOD_3 ( ) . id ( VAR_3 . get ( ) ) . get ( ) ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = name ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( VAR_1 . projects ( ) . create ( name ) . get ( ) . name ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( name , VAR_3 ) ; VAR_4 . METHOD_3 ( name , VAR_3 , null , VAR_2 ) ; VAR_4 . METHOD_3 ( name , STRING_2 , new java.lang.String [ ] { } ) ; } 
public void METHOD_1 ( java.lang.String projectName , TYPE_1 VAR_1 , java.lang.String event ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_2 . METHOD_3 ( ) ; try { VAR_4 . METHOD_4 ( ( ( java.lang.String.format ( STRING_1 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) + ( java.lang.String.format ( STRING_2 , projectName , VAR_1 , event ) ) ) ) ; } finally { METHOD_5 ( VAR_4 ) ; METHOD_6 ( VAR_2 ) ; } } 
private boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } if ( METHOD_3 ( ) ) { return true ; } switch ( METHOD_4 ( ) . METHOD_5 ( ) ) { case VAR_1 : return false ; case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : default : return ( ( METHOD_6 ( ) ) && ( ! ( METHOD_7 ( VAR_7 ) ) ) ) || ( VAR_8 . METHOD_8 ( ) ) ; } } 
protected TYPE_1 METHOD_1 ( ) { switch ( status ) { case VAR_1 : return new TYPE_2 ( project , STRING_1 ) ; case VAR_2 : return new TYPE_3 ( project , STRING_1 ) ; case VAR_3 : case VAR_4 : default : return new TYPE_4 ( project , STRING_1 ) ; } } 
static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) , null ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ; if ( VAR_1 == null ) { return false ; } TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( user ) ; return VAR_3 . METHOD_2 ( db , change ) . METHOD_3 ( db ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) throws TYPE_1 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_2 { final org.eclipse.jgit.lib.Repository git ; try { git = VAR_1 . METHOD_2 ( project ) ; } catch ( TYPE_3 e ) { return ; } try { TYPE_4 notes = VAR_2 . create ( db , git ) ; notes . create ( changes , null , STRING_1 , VAR_3 ) ; } finally { git . close ( ) ; } } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( rsrc . getChange ( ) ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( rsrc ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 ) ; try ( TYPE_6 u = VAR_5 . create ( VAR_6 . get ( ) , VAR_1 . getProject ( ) . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) , TYPE_7 . METHOD_4 ( ) ) ) { u . METHOD_5 ( VAR_1 . getId ( ) , VAR_4 ) . METHOD_6 ( ) ; } return VAR_4 . change ; } 
public boolean METHOD_1 ( TYPE_1 notes , TYPE_2 VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 , int value ) throws TYPE_3 , TYPE_4 { if ( METHOD_2 ( notes , VAR_1 , VAR_2 , value ) ) { return true ; } return VAR_3 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; } 
public TYPE_1 create ( TYPE_2 req , org.eclipse.jgit.lib.Repository repo ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_1 = TYPE_6 . METHOD_1 ( req ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_3 ( ) ; } TYPE_1 VAR_2 = new TYPE_1 ( repo ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; if ( ! ( VAR_1 . METHOD_4 ( ) ) ) { VAR_2 . METHOD_5 ( new TYPE_7 ( repo , VAR_1 , db . get ( ) ) ) ; } return VAR_2 ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { if ( VAR_2 > ( cfg . METHOD_2 ( ) ) ) { return false ; } if ( ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) >= ( VAR_4 ) ) { METHOD_5 ( VAR_1 . METHOD_3 ( ) . METHOD_6 ( ) ) ; return true ; } return false ; } 
public void bind ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t . METHOD_1 ( ) ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( t ) ) ; if ( ( VAR_3 ) >= ( this . VAR_4 ) ) { VAR_5 = this ; if ( ( VAR_3 ) < ( VAR_6 ) ) VAR_1 . METHOD_2 ( VAR_2 ) ; return ; } } VAR_7 = t ; if ( ( VAR_4 ) < ( VAR_6 ) ) VAR_1 . METHOD_2 ( this ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 in = new TYPE_1 ( ) ; in . name = VAR_1 ; VAR_2 = true ; VAR_3 . projects ( ) . create ( in ) ; METHOD_2 ( VAR_1 , STRING_2 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = METHOD_4 ( db , cd ) . reviewers ( ) . METHOD_5 ( ) ; return VAR_1 . contains ( METHOD_2 ( ) . getAccountId ( ) ) ; } return false ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } else { VAR_1 . METHOD_2 ( ) ; } VAR_1 . METHOD_3 ( new TYPE_2 ( ) { public void run ( ) { VAR_2 this . METHOD_4 ( ) ; } } , INT_1 , ( ( VAR_3 ) * INT_2 ) ) ; } 
public boolean METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { return false ; } if ( METHOD_3 ( ) ) { return true ; } switch ( METHOD_4 ( ) . METHOD_5 ( ) ) { case VAR_1 : return false ; case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : default : return ( METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) || ( ( METHOD_8 ( ) ) && ( ! ( METHOD_9 ( VAR_7 ) ) ) ) ; } } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { if ( ( rsrc . METHOD_1 ( ) ) || ( METHOD_2 ( rsrc . getChange ( ) ) ) ) { return TYPE_1 . METHOD_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( VAR_2 . get ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) ) ; return TYPE_1 . METHOD_3 ( STRING_1 ) ; } 
private static com.google.gerrit.server.query.change.ChangeData change ( java.lang.String ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_1 . METHOD_1 ( VAR_1 ) ; com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) ) ; cd . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ; return cd ; } 
protected void METHOD_1 ( ) { TYPE_1 cfg = new TYPE_1 ( ) ; cfg . METHOD_2 ( STRING_1 , null , STRING_2 , INT_1 ) ; cfg . METHOD_2 ( STRING_1 , null , STRING_3 , ( ( int ) ( FLOAT_1 ) ) ) ; bind ( VAR_1 class ) . METHOD_3 ( new TYPE_2 ( null , null , null , null , null , null , cfg ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } return VAR_1 . METHOD_2 ( ) . METHOD_3 ( this : : METHOD_4 ) . collect ( TYPE_3 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; TYPE_2 in = new TYPE_2 ( ) ; VAR_1 = user . email ; VAR_2 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_1 ( in ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( METHOD_3 ( r . getChangeId ( ) ) ) ) ) . METHOD_4 ( TYPE_4 . of ( user . id ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + STRING_2 ; repo . branch ( STRING_3 ) . commit ( ) . add ( STRING_4 , VAR_1 ) . create ( ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_5 ) ; org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_7 + STRING_8 ) ) ) ) ; org.junit.Assert . METHOD_3 ( VAR_2 . contains ( ( STRING_6 + ( STRING_9 + STRING_10 ) ) ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 . ReviewDb class ) . METHOD_2 ( VAR_4 class ) ; bind ( VAR_5 class ) . in ( VAR_6 ) ; bind ( VAR_7 class ) ; bind ( VAR_8 . Factory class ) . in ( VAR_6 ) ; bind ( VAR_9 . Factory class ) . in ( VAR_6 ) ; bind ( VAR_10 . Factory class ) . in ( VAR_6 ) ; } 
private com.google.gerrit.reviewdb.client.Change METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , final TYPE_1 VAR_1 ) throws com.google.gwtorm.server.OrmException { return db . changes ( ) . METHOD_2 ( change.getId ( ) , new TYPE_2 < com.google.gerrit.reviewdb.client.Change > ( ) { public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change . getStatus ( ) . METHOD_3 ( ) ) { change . METHOD_4 ( VAR_2 ) ; change . METHOD_5 ( VAR_1 ) ; return change ; } return null ; } } ) ; } 
TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 { final TYPE_4 VAR_1 = METHOD_2 ( ) ; VAR_1 . put ( VAR_2 , VAR_3 ) ; VAR_1 . put ( VAR_4 , VAR_5 ) ; if ( STRING_1 . equals ( VAR_3 ) ) { return METHOD_3 ( VAR_1 ) ; } else { if ( ( VAR_6 ) != null ) { VAR_1 . put ( VAR_7 , VAR_6 ) ; VAR_1 . put ( VAR_8 , VAR_9 ) ; } return new TYPE_5 ( VAR_1 ) ; } } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Id changeId ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . get ( ) . changes ( ) . get ( changeId ) ; if ( c == null ) { throw TYPE_3 . error ( ( ( STRING_1 + changeId ) + STRING_2 ) ) ; } return VAR_1 . create ( db . get ( ) , c ) ; } 
static void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 < ? > VAR_2 , final java.lang.String name ) throws java.io.IOException { final TYPE_3 in = TYPE_4 . METHOD_2 ( VAR_2 , name ) ; if ( in != null ) { TYPE_5 VAR_3 = TYPE_6 . METHOD_3 ( in , INT_1 ) ; TYPE_4 . METHOD_4 ( VAR_1 , VAR_3 ) ; } } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( TYPE_4 p ) { TYPE_5 . METHOD_3 ( p . METHOD_4 ( new TYPE_6 ( ) ) ) ; } } ) ; close ( ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { java.lang.String b = ( ( base ) != null ) ? java.lang.String . METHOD_2 ( base . get ( ) ) : null ; java.lang.String VAR_2 = java.lang.String . METHOD_2 ( revision . get ( ) ) ; TYPE_1 . display ( TYPE_2 . METHOD_3 ( changeId , VAR_2 ) , new TYPE_3 ( changeId , b , VAR_2 , VAR_1 , false ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( ( ( ( ( id ( STRING_2 ) ) + STRING_3 ) + ( id ( STRING_4 ) ) ) + STRING_5 ) , res . METHOD_4 ( ) ) ; } 
public java.lang.String METHOD_1 ( ) { if ( ( getValue ( ) ) < 0 ) { return TYPE_1 . toString ( getValue ( ) ) ; } else if ( ( getValue ( ) ) == 0 ) { return STRING_1 ; } else { return STRING_2 + ( TYPE_1 . toString ( getValue ( ) ) ) ; } } 
public static int METHOD_1 ( TYPE_1 < ? > c ) { java.lang.String n = c . getName ( ) ; n = n . METHOD_2 ( ( ( n . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ; while ( n . METHOD_4 ( STRING_1 ) ) n = n . METHOD_2 ( 1 ) ; return TYPE_2 . METHOD_5 ( n ) ; } 
public static void METHOD_1 ( ) { final TYPE_1 p = VAR_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( p . METHOD_4 ( ) ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_5 ( p . METHOD_6 ( ) ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_5 ( p . METHOD_6 ( ) ) ; } } 
TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final boolean VAR_2 , final TYPE_3 VAR_3 , final java.util.List < TYPE_4 > VAR_4 ) throws java.io.IOException { VAR_5 = db . METHOD_2 ( ) ; try { return METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } finally { VAR_5 . METHOD_4 ( ) ; } } 
private int METHOD_1 ( final TYPE_1 < TYPE_2 > i , int row , final int VAR_1 , boolean VAR_2 ) { while ( i . METHOD_2 ( ) ) { final TYPE_2 c = i . METHOD_3 ( ) ; if ( ( c . METHOD_4 ( ) ) == ( VAR_3 ) ) { METHOD_5 ( row ) ; } else { METHOD_6 ( row ) ; } METHOD_7 ( row , VAR_1 , c , ( ! ( i . METHOD_2 ( ) ) ) , VAR_2 ) ; row ++ ; } return row ; } 
public java.lang.String METHOD_1 ( java.lang.String input ) { java.lang.String VAR_1 = VAR_2 . METHOD_1 ( input , VAR_3 ) ; if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { throw new TYPE_2 ( ( ( ( STRING_1 + ( toString ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; } java.lang.String result = new TYPE_3 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_3 , VAR_1 ) . append ( TYPE_4 . METHOD_5 ( input ) ) . METHOD_6 ( ) . METHOD_7 ( ) ; return result ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws com.google.gwtorm.server.OrmException { int VAR_3 = VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( new TYPE_4 . NameKey ( VAR_2 . getName ( ) ) ) . METHOD_5 ( new TYPE_4 . Id ( VAR_3 ) ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) . METHOD_8 ( TYPE_5 . METHOD_9 ( ) ) . METHOD_10 ( ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( final TYPE_3 < ? extends TYPE_1 < TYPE_2 > > VAR_1 ) { if ( ( VAR_1 . size ( ) ) != 1 ) { throw new TYPE_4 ( STRING_1 ) ; } return new TYPE_5 < TYPE_2 > ( getName ( ) , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ; } 
public java.lang.String apply ( TYPE_1 rsrc ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) { throw new TYPE_2 ( ) ; } java.lang.String url = VAR_1 . METHOD_1 ( rsrc . METHOD_2 ( ) ) ; if ( TYPE_4 . METHOD_3 ( url ) ) { throw new TYPE_2 ( ) ; } else { return url ; } } 
public static void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) { new TYPE_3 ( ( STRING_1 + ( TYPE_4 . METHOD_2 ( VAR_1 ) . METHOD_3 ( STRING_2 , STRING_3 ) ) ) ) . METHOD_4 ( STRING_4 , STRING_5 ) . METHOD_5 ( STRING_6 , VAR_2 ) . METHOD_6 ( STRING_7 ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ; } 
public TYPE_1 < java.util.List < TYPE_2 > > apply ( java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) { java.util.List < TYPE_1 < TYPE_2 > > result = TYPE_3 . METHOD_1 ( changes . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change c : changes ) { result . add ( VAR_1 . submit ( new TYPE_4 ( event , c . METHOD_2 ( ) , c . getId ( ) ) ) ) ; } return TYPE_5 . METHOD_3 ( result ) ; } 
public static void METHOD_1 ( TYPE_1 file , java.lang.String name , TYPE_2 VAR_1 ) throws java.io.IOException { VAR_1 . METHOD_2 ( new TYPE_3 ( name ) ) ; TYPE_4 input = new TYPE_4 ( file ) ; TYPE_5 . METHOD_3 ( input , VAR_1 ) ; input . close ( ) ; VAR_1 . METHOD_4 ( ) ; } 
private void METHOD_1 ( ) { final TYPE_1 . Id me = TYPE_2 . getAccountId ( ) ; final java.util.Set < TYPE_3 . Id > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( me ) ; final TYPE_4 VAR_2 = VAR_3 . get ( change . METHOD_4 ( ) . getParentKey ( ) ) ; METHOD_1 ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; METHOD_1 ( VAR_1 , VAR_3 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo . METHOD_3 ( repo . commit ( ) . message ( STRING_2 ) . add ( STRING_3 , STRING_4 ) . add ( STRING_5 , STRING_6 ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = METHOD_4 ( repo , commit , null , null , null ) . insert ( ) ; METHOD_5 ( STRING_7 ) ; METHOD_5 ( STRING_8 ) ; METHOD_5 ( STRING_9 , change ) ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 ) . METHOD_5 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_6 ( db , VAR_2 . METHOD_3 ( ) ) ) . METHOD_4 ( VAR_6 , VAR_7 ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) ; TYPE_2 r = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_4 , r . METHOD_4 ( ) ) ; r . METHOD_5 ( ) ; } 
public void onSuccess ( TYPE_1 < TYPE_2 > result ) { final java.util.List < TYPE_3 > r = new java.util.ArrayList < TYPE_3 > ( result . length ( ) ) ; for ( final TYPE_2 VAR_1 : TYPE_4 . METHOD_1 ( result ) ) { r . add ( new TYPE_3 ( VAR_1 ) ) ; } VAR_2 . METHOD_2 ( req , new TYPE_5 ( r ) ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 git , TYPE_2 VAR_1 , java.lang.String changeId ) throws java.lang.Exception { TYPE_3 VAR_2 = VAR_3 . create ( db , VAR_1 , VAR_4 , VAR_5 , new java.lang.String ( VAR_6 ) , changeId ) ; return VAR_2 . to ( git , STRING_1 ) . getChangeId ( ) ; } 
public TYPE_1 apply ( TYPE_2 rsrc ) throws java.io.IOException , TYPE_3 { org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_1 ( VAR_2 ) ; try { TYPE_4 p = TYPE_4 . METHOD_2 ( ) ; p . METHOD_3 ( git ) ; return new TYPE_1 ( null , p , git ) ; } finally { git . close ( ) ; } } 
public static void METHOD_1 ( int id , java.lang.String msg , TYPE_1 < TYPE_2 . ChangeInfo > VAR_1 ) { TYPE_3 input = TYPE_3 . create ( ) ; input . message ( TYPE_4 . METHOD_2 ( msg ) ) ; TYPE_4 . METHOD_3 ( id , STRING_1 ) . METHOD_4 ( input , VAR_1 ) ; } 
void display ( java.util.List < java.util.List < java.lang.String > > values ) { for ( int row = 2 ; row < ( table . METHOD_1 ( ) ) ; row ++ ) { table . METHOD_2 ( ( row -- ) ) ; } int row = 2 ; for ( java.util.List < java.lang.String > VAR_1 : values ) { METHOD_3 ( row , VAR_1 ) ; row ++ ; } } 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . Change change = db . changes ( ) . get ( id ) ; if ( change == null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } final TYPE_6 VAR_1 = new TYPE_6 ( db ) ; final TYPE_1 d = new TYPE_1 ( ) ; d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) ; return d ; } 
public boolean METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = null ; TYPE_3 VAR_2 = null ; try { VAR_1 = VAR_3 . METHOD_2 ( ) ; VAR_2 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( null , null , TYPE_4 . METHOD_5 ( ) , null ) ; return VAR_2 . METHOD_6 ( ) ; } finally { METHOD_7 ( VAR_2 ) ; METHOD_8 ( VAR_1 ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_3 . size ( ) ) > 0 ) { java.util.Set < TYPE_3 > VAR_4 = new TYPE_4 < TYPE_3 > ( VAR_2 . METHOD_2 ( ) ) ; for ( TYPE_3 s : VAR_2 . METHOD_2 ( ) ) { if ( VAR_3 . contains ( s . METHOD_3 ( ) ) ) { VAR_4 . METHOD_4 ( s ) ; } } VAR_2 . METHOD_5 ( VAR_4 ) ; } VAR_5 . METHOD_1 ( VAR_1 , VAR_2 ) ; } 
public java.util.List < TYPE_1 > get ( ) throws TYPE_2 , com.google.gwtorm.server.OrmException { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 ) ) ) { return METHOD_2 ( ) ; } if ( VAR_2 ) { return METHOD_3 ( ( ( user ) != null ? VAR_3 . create ( user ) : VAR_4 . get ( ) ) ) ; } if ( ( user ) != null ) { return VAR_5 . get ( ) . apply ( new TYPE_4 ( VAR_3 . create ( user ) ) ) ; } return METHOD_4 ( ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client . AccountGroup > METHOD_1 ( ) { try { com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { return java.util.Collections . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( ) . METHOD_5 ( ) ) ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { VAR_1 . METHOD_6 ( STRING_1 , e ) ; return java.util.Collections . METHOD_7 ( ) ; } } 
TYPE_1 get ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.server.query.change.ChangeData VAR_2 , int VAR_3 ) throws com.google.gwtorm.server.OrmException { java.lang.String branch = VAR_2 . change ( ) . METHOD_1 ( ) . get ( ) ; java.lang.String VAR_4 = TYPE_2 . METHOD_2 ( VAR_2 . getId ( ) . get ( ) , VAR_3 , branch ) ; return get ( VAR_4 , VAR_1 , branch , VAR_2 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) . METHOD_3 ( true ) ; TYPE_1 u = user ( ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( ) ) ; METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_4 ) . METHOD_5 ( ) ) ; METHOD_4 ( STRING_3 , u . METHOD_6 ( STRING_5 ) . METHOD_5 ( ) ) ; METHOD_4 ( STRING_6 , u . METHOD_6 ( STRING_7 ) . METHOD_5 ( ) ) ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( ! ( super . equals ( VAR_1 ) ) ) || ( ! ( VAR_1 instanceof TYPE_2 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . Change change ) throws TYPE_3 { try { final TYPE_4 . NameKey VAR_1 = change . getProject ( ) ; return VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_1 ( change ) ; } catch ( TYPE_5 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } 
private static final boolean METHOD_1 ( ) { final java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String run ( ) { return TYPE_3 . METHOD_3 ( STRING_1 ) ; } } ) ; return ( VAR_1 != null ) && ( ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ) != ( - 1 ) ) ; } 
public void METHOD_1 ( ) { assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) ; assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_2 ) ) ; assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_4 ) ) ; assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( STRING_5 ) ) ; assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) ; assertEquals ( STRING_8 , TYPE_1 . METHOD_2 ( STRING_9 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
private TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 . NameKey branch , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { return query ( TYPE_3 . METHOD_2 ( TYPE_4 . ref ( branch ) , TYPE_4 . project ( branch . getParentKey ( ) ) , TYPE_3 . not ( TYPE_4 . status ( VAR_2 ) ) , TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( TYPE_4 . schema ( VAR_3 ) , VAR_1 ) ) ) ) ; } 
public boolean METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 ) { boolean VAR_2 = ( ( VAR_3 . equals ( VAR_1 ) ) && ( ( token ) != null ) ) && ( ( VAR_4 ) != null ) ; if ( VAR_2 ) { try { VAR_5 = VAR_4 . METHOD_2 ( ) ; } catch ( TYPE_2 e ) { VAR_6 . error ( STRING_1 , e ) ; METHOD_3 ( ) ; VAR_2 = false ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_3 ) ) ) ; METHOD_3 ( p . METHOD_4 ( TYPE_2 . change ( STRING_2 , STRING_4 ) ) ) ; METHOD_5 ( p . METHOD_4 ( TYPE_2 . change ( STRING_5 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 in = new TYPE_1 ( ) ; in . name = VAR_1 ; VAR_2 = true ; VAR_3 = TYPE_2 . METHOD_2 ( INT_1 ) ; VAR_3 . add ( STRING_2 ) ; VAR_3 . add ( STRING_3 ) ; VAR_3 . add ( STRING_4 ) ; VAR_4 . projects ( ) . create ( in ) ; METHOD_3 ( VAR_1 , STRING_2 ) ; METHOD_4 ( VAR_1 , STRING_2 , STRING_3 , STRING_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( ) ; METHOD_2 ( ) ; java.util.List < TYPE_2 . ChangeInfo > VAR_2 = VAR_3 . changes ( ) . query ( ) . METHOD_3 ( 1 ) . get ( ) ; org.junit.Assert.assertEquals ( VAR_1 . getChangeId ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) . changeId ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; METHOD_4 ( VAR_1 , n ) ; assertEquals ( ( ( ( ( ( VAR_2 ) + ( TYPE_2 . METHOD_5 ( STRING_2 ) ) ) + ( TYPE_2 . METHOD_5 ( STRING_3 ) ) ) + ( VAR_3 ) ) + STRING_4 ) , n . METHOD_6 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( cd . METHOD_2 ( ) ) != null ) { return cd . METHOD_2 ( ) ; } com.google.gerrit.reviewdb.client.PatchSet ps = cd . METHOD_3 ( ) ; if ( ps == null ) { return TYPE_2 . of ( ) ; } cd . METHOD_4 ( new TYPE_3 ( cd ) . METHOD_5 ( ps ) . METHOD_6 ( true ) . METHOD_7 ( true ) . METHOD_8 ( ) ) ; return cd . METHOD_2 ( ) ; } 
private void METHOD_1 ( TYPE_1 ctx , TYPE_2 msg ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = ctx . getChange ( ) ; com.google.gerrit.reviewdb.server.ReviewDb db = ctx . METHOD_2 ( ) ; METHOD_3 ( STRING_1 , c . getId ( ) ) ; c . METHOD_4 ( VAR_1 ) ; c . METHOD_5 ( VAR_2 ) ; ctx . METHOD_6 ( ) ; if ( msg != null ) { VAR_3 . METHOD_7 ( db , ctx . METHOD_8 ( msg . METHOD_9 ( ) ) , msg ) ; } } 
public TYPE_1 get ( long VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 , TYPE_4 , TYPE_5 { if ( ! ( METHOD_1 ( ) ) ) { VAR_3 . METHOD_2 ( VAR_4 , ( ( int ) ( TYPE_6 . METHOD_3 ( VAR_1 , VAR_2 ) ) ) ) ; set ( null ) ; } return super . get ( VAR_1 , VAR_2 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { TYPE_2 res = new TYPE_2 ( ) ; METHOD_2 ( VAR_1 , VAR_2 < TYPE_3 > METHOD_3 ( ) , res ) ; assertEquals ( INT_1 , res . getStatus ( ) ) ; return res . METHOD_4 ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( git , true ) ; TYPE_1 . Result VAR_1 = METHOD_2 ( git , true ) ; TYPE_1 . Result VAR_2 = METHOD_2 ( git , true ) ; METHOD_2 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_3 ( change ) ; METHOD_4 ( changes , VAR_1 , VAR_2 ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String name , final TYPE_2 < ? extends TYPE_3 > VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . METHOD_2 ( VAR_4 class ) ; if ( VAR_3 == null ) { throw new TYPE_5 ( STRING_1 ) ; } bind ( TYPE_6 . key ( VAR_1 , name , TYPE_7 . METHOD_3 ( VAR_3 ) ) ) . to ( VAR_2 ) ; } 
protected void METHOD_1 ( TYPE_1 result ) { VAR_1 = new TYPE_2 ( this , base , revision , path , result . METHOD_2 ( ) , METHOD_3 ( ) . METHOD_4 ( ) ) ; METHOD_5 ( result . METHOD_6 ( ) ) ; display ( VAR_2 ) ; VAR_3 . METHOD_7 ( VAR_2 ) ; } 
public TYPE_1 < ? > METHOD_1 ( final com.google.gerrit.reviewdb.client.Change change , TYPE_2 VAR_1 , final TYPE_3 VAR_2 , final TYPE_3 VAR_3 , final org.eclipse.jgit.lib.Repository VAR_4 , final org.eclipse.jgit.lib.Repository VAR_5 ) { return VAR_1 . submit ( new TYPE_4 < TYPE_5 > ( ) { public TYPE_5 METHOD_2 ( ) throws java.lang.Exception { METHOD_3 ( change , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; return null ; } } ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . in ( VAR_2 class ) ; bind ( VAR_7 . Factory class ) . in ( VAR_5 ) ; bind ( VAR_8 . Factory class ) . in ( VAR_5 ) ; factory ( VAR_9 . Factory class ) ; factory ( VAR_10 . Factory class ) ; } 
protected void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String table , java.lang.String VAR_1 , java.lang.String to ) throws com.google.gwtorm.server.OrmException { final TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ; final TYPE_2 e = new TYPE_2 ( s ) ; try { s . METHOD_2 ( e , table , VAR_1 , to ) ; } finally { e . close ( ) ; } } 
protected void run ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; input . ref = VAR_1 ; try { VAR_2 . apply ( new TYPE_2 ( project . METHOD_1 ( ) , project . METHOD_2 ( ) ) , input ) ; } catch ( TYPE_3 e ) { throw METHOD_3 ( e ) ; } } 
public int METHOD_1 ( final int VAR_1 ) { for ( final TYPE_1 s : VAR_2 ) { boolean VAR_3 = false ; if ( VAR_1 <= ( VAR_4 ) ) { ( VAR_4 ) ++ ; } if ( VAR_1 < ( VAR_5 ) ) { ( VAR_5 ) ++ ; } } return super . METHOD_1 ( VAR_1 ) ; } 
public < TYPE_1 extends TYPE_2 > void METHOD_1 ( final TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 req = new TYPE_4 ( VAR_2 , url . toString ( ) ) ; req . METHOD_2 ( STRING_1 , VAR_3 ) ; req . METHOD_3 ( new TYPE_5 < TYPE_1 > ( true , VAR_1 ) ) ; try { TYPE_6 . METHOD_4 ( ) ; req . METHOD_1 ( ) ; } catch ( TYPE_7 e ) { TYPE_6 . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( e ) ; } } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . email ( ) ) != null ) { return VAR_1 . email ( ) ; } else if ( ( VAR_1 . name ( ) ) != null ) { return VAR_1 . name ( ) ; } else { return STRING_1 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_1 = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = METHOD_3 ( repo , null , null , null , null ) . insert ( ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ; } 
public TYPE_1 get ( TYPE_2 VAR_1 ) { final TYPE_3 ref = TYPE_4 . METHOD_1 ( VAR_1 ) ; if ( ref != null ) { return new TYPE_5 ( ) { public java.lang.String getName ( ) { return ref . getName ( ) ; } public TYPE_6 METHOD_2 ( ) { return ref . METHOD_3 ( ) ; } public java.lang.String METHOD_4 ( ) { return null ; } public java.lang.String METHOD_5 ( ) { return null ; } } ; } return null ; } 
private void METHOD_1 ( java.lang.StringBuilder VAR_1 , TYPE_1 VAR_2 , short VAR_3 , int line ) { VAR_1 . append ( ( STRING_1 + line ) ) ; try { final java.lang.String VAR_4 = VAR_2 . METHOD_2 ( VAR_3 , line ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( VAR_4 ) ; } catch ( TYPE_2 e ) { } VAR_1 . append ( STRING_3 ) ; } 
private static void METHOD_1 ( TYPE_1 config , TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 . sshd ( config , VAR_1 ) ; TYPE_4 . METHOD_2 ( config , VAR_1 ) ; TYPE_4 . user ( config , VAR_1 ) ; TYPE_4 . auth ( config , VAR_1 ) ; TYPE_4 . METHOD_3 ( config , VAR_1 ) ; } 
private static void METHOD_1 ( final byte [ ] VAR_1 , final TYPE_1 out ) { final byte [ ] VAR_2 = out . METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) assertEquals ( VAR_1 [ i ] , VAR_2 [ i ] ) ; } 
public java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( psId . getParentKey ( ) ) ; if ( c == null ) { return null ; } TYPE_1 notes = VAR_1 . create ( c ) ; com.google.gerrit.reviewdb.client.PatchSet ps = VAR_2 . get ( db , notes , psId ) ; return ps != null ? ps . METHOD_2 ( ) : null ; } 
public boolean METHOD_1 ( ) { while ( ( ( VAR_1 ) == null ) && ( VAR_2 . METHOD_1 ( ) ) ) { TYPE_1 < TYPE_2 > p = VAR_2 . METHOD_2 ( ) . get ( ) ; if ( p != null ) { try { VAR_1 = p . get ( ) ; } catch ( TYPE_3 e ) { VAR_3 . error ( ( ( STRING_1 + p ) + STRING_2 ) , e ) ; } } } return ( VAR_1 ) != null ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ( getChange ( ) . getStatus ( ) ) == ( VAR_1 ) ) && ( ! ( METHOD_2 ( db , null ) ) ) ) { return false ; } return METHOD_3 ( ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey VAR_2 ; if ( VAR_1 instanceof TYPE_3 ) { VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_3 ( ) ; } else { VAR_2 = TYPE_3 . METHOD_4 ( ) ; } if ( VAR_2 != null ) { METHOD_5 ( true ) ; METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 , VAR_3 ) ) ; } else { METHOD_5 ( false ) ; } super . METHOD_1 ( event ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_4 ) . to ( VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws java.io.IOException , TYPE_4 { TYPE_5 req = ( ( TYPE_5 ) ( VAR_1 ) ) ; if ( ! ( TYPE_6 . METHOD_2 ( req ) ) ) { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; return ; } TYPE_7 rsp = new TYPE_7 ( ( ( TYPE_8 . HttpServletResponse ) ( VAR_2 ) ) ) ; if ( METHOD_3 ( req , rsp ) ) { VAR_3 . METHOD_1 ( req , VAR_2 ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( TYPE_4 . METHOD_6 ( base , revision , path ) ) ; VAR_1 . METHOD_7 ( TYPE_5 . METHOD_4 ( ) ) ; return java.util.Collections . METHOD_8 ( VAR_1 ) ; } 
public TYPE_1 < java.lang.String > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 { try { if ( rsrc . METHOD_1 ( ) ) { throw new TYPE_5 ( STRING_1 ) ; } if ( ! ( METHOD_2 ( rsrc ) ) ) { VAR_1 . METHOD_3 ( rsrc ) ; } return TYPE_1 . METHOD_4 ( STRING_2 ) ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( e . getMessage ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_3 , e ) ; } } 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . AccountGroup group = db . METHOD_1 ( ) . get ( VAR_1 ) ; METHOD_2 ( db , group ) ; group . METHOD_3 ( VAR_2 ) ; db . METHOD_1 ( ) . update ( java.util.Collections.singleton ( group ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; return VAR_4 ; } 
private static void METHOD_1 ( TYPE_1 req ) throws TYPE_2 { if ( ( ! ( STRING_1 . equals ( req . METHOD_2 ( ) ) ) ) && ( ! ( STRING_2 . equals ( req . METHOD_2 ( ) ) ) ) ) { throw new TYPE_2 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) , STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_7 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) ; } 
public TYPE_1 METHOD_1 ( int index , TYPE_2 VAR_1 ) { int VAR_2 = METHOD_2 ( index , false , VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } TYPE_1 VAR_4 = METHOD_3 ( VAR_2 , VAR_1 , null , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; return VAR_4 ; } 
public TYPE_1 METHOD_1 ( TYPE_2 project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { return new TYPE_3 ( ) . METHOD_2 ( new TYPE_4 . Key ( project , repo , VAR_1 , VAR_2 , VAR_3 ) ) ; } catch ( java.io.IOException e ) { VAR_4 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + ( project . getProject ( ) . getName ( ) ) ) , e ) ; return VAR_5 ; } } 
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , java.io.IOException { METHOD_2 ( ctx ) ; VAR_1 = VAR_2 . get ( ctx . METHOD_3 ( ) , commit , patchSet . getId ( ) ) ; change . METHOD_4 ( VAR_1 ) ; if ( ! ( VAR_3 ) ) { return ; } ctx . METHOD_5 ( new TYPE_3 . ReceiveCommand ( org.eclipse.jgit.lib.ObjectId . METHOD_6 ( ) , commit , patchSet . getRefName ( ) ) ) ; } 
void METHOD_1 ( int VAR_1 , int VAR_2 ) { METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) ; if ( VAR_1 < VAR_2 ) { int VAR_3 = VAR_2 - VAR_1 ; METHOD_4 ( VAR_3 ) ; } else if ( VAR_1 > VAR_2 ) { int VAR_4 = VAR_1 - VAR_2 ; METHOD_5 ( VAR_4 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 rsrc , java.lang.String VAR_1 ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 VAR_2 = new TYPE_4 ( ) ; VAR_3 = VAR_1 ; VAR_4 = VAR_5 ; VAR_6 = true ; VAR_7 = VAR_8 ; return VAR_9 . METHOD_2 ( rsrc , VAR_2 ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 type ) { return new TYPE_3 ( VAR_1 , TYPE_4 . METHOD_2 ( type . getName ( ) ) , TYPE_4 . METHOD_2 ( type . getId ( ) ) , TYPE_4 . METHOD_2 ( type . METHOD_3 ( ) ) , new TYPE_5 ( type . METHOD_4 ( ) . getValue ( ) ) , new TYPE_5 ( type . METHOD_5 ( ) . getValue ( ) ) ) ; } 
public void METHOD_1 ( final TYPE_1 event ) { final TYPE_2 VAR_1 = table . METHOD_2 ( event ) ; if ( VAR_1 == null ) { return ; } if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } else if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) { } else if ( ( METHOD_6 ( VAR_1 . METHOD_5 ( ) ) ) != null ) { METHOD_7 ( VAR_1 . METHOD_5 ( ) ) ; } } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res ) throws java.io.IOException { java.lang.String name = METHOD_2 ( TYPE_3 . METHOD_3 ( req ) , TYPE_4 . METHOD_4 ( req ) , req , res ) ; if ( name == null ) { return ; } TYPE_5 out = METHOD_5 ( req , res ) ; out . METHOD_6 ( TYPE_6 . METHOD_7 ( name ) ) ; out . close ( ) ; } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 VAR_1 , TYPE_3 < java.lang.String > VAR_2 , TYPE_3 < java.lang.String > VAR_3 , TYPE_3 < java.lang.String > VAR_4 ) { TYPE_4 e = new TYPE_4 ( change , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( ! ( VAR_5 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } for ( TYPE_5 VAR_6 : VAR_5 ) { VAR_6 . METHOD_4 ( e ) ; } } 
private void METHOD_1 ( TYPE_1 s , java.lang.String changeId , int VAR_1 ) throws java.io.IOException { TYPE_2 r = s . METHOD_2 ( ( ( STRING_1 + changeId ) + STRING_2 ) , new TYPE_3 ( ) . label ( STRING_3 , 2 ) ) ; org.junit.Assert.assertEquals ( VAR_1 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } 
static TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 group = ( ( VAR_3 != null ) && ( ( VAR_3 . METHOD_1 ( ) ) != null ) ) ? VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) : null ; return new TYPE_6 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) , group ) ; } 
private void METHOD_1 ( TYPE_1 cm ) { if ( cm . METHOD_2 ( ) ) { TYPE_2 VAR_1 = cm . METHOD_3 ( ) ; cm . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 . METHOD_5 ( ) ) ; cm . METHOD_6 ( null ) ; } } 
private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 ; if ( ( VAR_2 ) == null ) { VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) ; } else { VAR_1 = VAR_2 ; } return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_4 . create ( VAR_5 , new TYPE_3 < TYPE_2 > ( ) { public TYPE_2 get ( ) { return VAR_1 ; } } , VAR_6 ) ) ; } 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.Set < java.lang.String > VAR_2 = new TYPE_1 < java.lang.String > ( ) ; for ( TYPE_2 VAR_3 : METHOD_2 ( ) ) { TYPE_3 VAR_4 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 != null ) { VAR_2 . add ( VAR_3 . METHOD_4 ( ) ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String config = STRING_1 + ( STRING_2 + STRING_3 ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_4 ) , new TYPE_4 ( new com.google.gerrit.reviewdb.client . AccountGroup ( new TYPE_5 . NameKey ( STRING_5 ) , new TYPE_5 . Id ( 1 ) , new TYPE_6 ( STRING_4 ) ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_6 , STRING_7 ) ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . to ( VAR_8 ) . METHOD_5 ( VAR_4 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_11 ) . METHOD_6 ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out ; out = METHOD_3 ( in ) ; METHOD_4 ( ( ( out instanceof TYPE_2 ) || ( out instanceof TYPE_3 ) ) ) ; VAR_1 . METHOD_5 ( null ) ; out = METHOD_3 ( in ) ; METHOD_4 ( ( out instanceof TYPE_4 ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 > VAR_2 = new TYPE_4 < > ( ) ; for ( TYPE_5 VAR_3 : VAR_4 ) { try { VAR_2 . METHOD_2 ( VAR_3 . METHOD_1 ( VAR_1 ) ) ; } catch ( TYPE_3 e ) { VAR_2 . METHOD_2 ( e . METHOD_3 ( ) ) ; throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; VAR_2 = new TYPE_2 ( ( ( TYPE_3 ) ( VAR_3 . METHOD_6 ( project ) ) ) ) ; VAR_4 = VAR_2 . METHOD_7 ( ) . parseCommit ( VAR_2 . METHOD_8 ( ) . METHOD_9 ( STRING_1 ) . METHOD_10 ( ) ) ; VAR_5 = admin . getId ( ) ; VAR_6 = VAR_7 . get ( ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.lib.Repository repo = METHOD_2 ( ) ) { return METHOD_3 ( repo , db , rw , commit , repo . METHOD_4 ( ) . values ( ) ) ; } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_5 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } 
private java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { try { return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( final TYPE_1 . ReviewDb db , final TYPE_1 . PatchSet ps ) throws TYPE_2 . OrmException { patchSet = ps ; info = db . METHOD_2 ( ) . get ( patchSet . getKey ( ) ) ; VAR_1 = db . METHOD_3 ( ) . METHOD_4 ( patchSet . getKey ( ) ) . METHOD_5 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 cfg , java.lang.String revision , TYPE_3 out ) { return TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) . METHOD_7 ( METHOD_8 ( cfg , revision ) ) . METHOD_9 ( true ) . METHOD_10 ( out ) . get ( ) ; } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_6 event = new TYPE_6 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_7 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_8 . log , e ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; VAR_2 = VAR_4 . METHOD_3 ( ) ; if ( ! ( VAR_2 . METHOD_4 ( ) ) ) return VAR_1 . METHOD_5 ( ) ; VAR_3 = ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_6 ( ) ; VAR_5 = this . VAR_6 ; return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , METHOD_2 ( STRING_1 ) ) ; final TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_1 . add ( file ( STRING_4 ) ) ; METHOD_5 ( VAR_1 . commit ( ) ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_5 ) ) , METHOD_2 ( STRING_1 ) ) ; } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , java.lang.String VAR_2 , TYPE_4 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 , VAR_3 ) ; for ( TYPE_6 VAR_5 : VAR_4 ) { try { VAR_5 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_7 . log , e ) ; } } } 
private double METHOD_1 ( double VAR_1 ) { int line = VAR_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_1 p = VAR_3 . METHOD_1 ( VAR_4 , line ) ; double VAR_5 = VAR_2 . METHOD_3 ( VAR_6 , STRING_1 ) ; double VAR_7 = VAR_8 . METHOD_3 ( VAR_9 , STRING_1 ) ; return TYPE_2 . METHOD_4 ( 0 , ( VAR_7 + ( VAR_1 - VAR_5 ) ) ) ; } 
private int insert ( final java.util.List < TYPE_1 > in , int row ) { for ( TYPE_2 < TYPE_1 > VAR_1 = in . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; ) { final TYPE_1 c = VAR_1 . METHOD_3 ( ) ; table . METHOD_4 ( row ) ; table . METHOD_5 ( ) . METHOD_6 ( row , 0 , VAR_2 ) ; METHOD_7 ( row , VAR_3 , c , ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) ; row ++ ; } return row ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_1 = VAR_2 . get ( change . getProject ( ) ) ; if ( VAR_1 == null ) { return false ; } TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( user ) ; return VAR_3 . METHOD_2 ( change ) . METHOD_3 ( db ) ; } 
public void set ( TYPE_1 VAR_1 ) { set ( ( ( VAR_1 . css ( ) ) != null ? VAR_1 . css ( ) : VAR_2 ) , ( ( VAR_1 . METHOD_1 ( ) ) != null ? VAR_1 . METHOD_1 ( ) : VAR_3 ) , ( ( VAR_1 . METHOD_2 ( ) ) != null ? VAR_1 . METHOD_2 ( ) : VAR_4 ) ) ; } 
public static void METHOD_1 ( final TYPE_1 VAR_1 , int value ) throws java.io.IOException { while ( true ) { if ( ( value & ( ~ INT_1 ) ) == 0 ) { VAR_1 . METHOD_2 ( value ) ; return ; } else { VAR_1 . METHOD_2 ( ( ( value & INT_1 ) | INT_2 ) ) ; value >>>= INT_3 ; } } } 
public static void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String msg , TYPE_3 c ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( req , res , c ) ; TYPE_4 . METHOD_4 ( null , res , msg ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; final java.lang.String name = STRING_2 ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , null ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; final TYPE_2 r = create ( ) . METHOD_4 ( user ) ; METHOD_5 ( r ) ; assertEquals ( ( name + STRING_3 ) , r . name ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , r . email ) ; TYPE_1 . METHOD_7 ( VAR_1 ) ; } 
public void onSuccess ( final TYPE_1 result ) { VAR_1 = result . config ; if ( ( result . account ) != null ) { VAR_2 = result . account ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 ; VAR_5 = VAR_6 ; } if ( ( VAR_7 ) != null ) { VAR_8 = VAR_7 ; METHOD_1 ( INT_1 ) ; TYPE_4 VAR_9 ; diff ( VAR_10 ) ; } METHOD_2 ( ) ; } 
private static long METHOD_1 ( org.eclipse.jgit.lib.Repository repo , TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.String path , TYPE_3 t ) throws java.io.IOException { if ( ! ( TYPE_4 . METHOD_2 ( VAR_2 ) ) ) { return 0 ; } try ( TYPE_5 VAR_3 = TYPE_5 . METHOD_3 ( VAR_1 , path , t ) ) { return VAR_3 != null ? repo . METHOD_4 ( VAR_3 . METHOD_5 ( 0 ) , VAR_4 ) . METHOD_6 ( ) : 0 ; } } 
void METHOD_1 ( int VAR_1 ) { int VAR_2 = VAR_3 ; VAR_3 += VAR_1 ; int VAR_4 = ( VAR_3 ) - ( VAR_5 ) ; VAR_6 . add ( new TYPE_1 ( VAR_2 , ( ( VAR_3 ) - 1 ) , ( - VAR_4 ) ) ) ; VAR_7 . add ( new TYPE_1 ( VAR_5 , VAR_5 , VAR_4 ) ) ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( config . METHOD_2 ( STRING_1 ) . contains ( STRING_2 ) ) { VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , config , STRING_2 ) ) ; } else { VAR_1 = new TYPE_1 ( ) ; } } } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( METHOD_2 ( ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_3 ( ) ; } else { VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ; } } 
public com.google.gerrit.reviewdb.client.Change METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { if ( ( project ) == null ) { notes = VAR_1 . METHOD_2 ( db , VAR_2 ) ; } else { notes = VAR_1 . create ( db , project , VAR_2 ) ; } change = notes . getChange ( ) ; if ( ( change ) == null ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + ( VAR_2 ) ) ) ; } METHOD_3 ( null ) ; return change ; } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class , VAR_2 ) ; METHOD_2 ( VAR_3 class , VAR_4 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; bind ( VAR_5 class ) . to ( VAR_6 class ) . in ( VAR_7 ) ; bind ( VAR_8 class ) . METHOD_5 ( VAR_9 class ) ; bind ( VAR_10 class ) . to ( VAR_11 class ) ; install ( new TYPE_1 ( ) ) ; } 
static TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( java.util.Map < java.lang.String , java.util.Set < java.lang.String > > VAR_1 ) { TYPE_1 < java.lang.String , java.lang.String > result = new TYPE_2 < > ( ) ; for ( java.lang.String key : TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) { result . put ( key , java.lang.String . METHOD_5 ( STRING_1 , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . get ( key ) ) ) ) ; } return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , project , STRING_1 , false , VAR_2 ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( METHOD_5 ( r , user . email ) . VAR_3 ) . isEqualTo ( user . getId ( ) . get ( ) ) ; } 
void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } else if ( ( VAR_1 ) == null ) { METHOD_7 ( ) ; } else { METHOD_8 ( ) ; } } 
public void METHOD_1 ( ) { if ( ( projects ) == null ) { METHOD_2 ( ) ; } TYPE_1 . METHOD_3 ( new TYPE_2 < java.util.List < TYPE_3 . Project > > ( this ) { protected void METHOD_4 ( final java.util.List < TYPE_3 . Project > result ) { projects . display ( result ) ; projects . METHOD_5 ( true ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_1 = METHOD_3 ( repo ) ; insert ( VAR_1 ) ; java.lang.String VAR_2 = VAR_1 . METHOD_4 ( ) . getRevision ( ) . get ( ) ; METHOD_5 ( STRING_2 ) ; for ( int i = 0 ; i <= INT_1 ; i ++ ) { java.lang.String VAR_3 = VAR_2 . METHOD_6 ( 0 , ( INT_2 - i ) ) ; METHOD_5 ( VAR_3 , VAR_1 . getChange ( ) ) ; } } 
private void METHOD_1 ( ) { TYPE_1 cfg = VAR_1 . METHOD_2 ( TYPE_2 . get ( VAR_2 class , VAR_3 class ) ) ; boolean VAR_4 = cfg . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( VAR_5 class ) . METHOD_4 ( ) ) ; int VAR_6 = cfg . METHOD_5 ( STRING_1 , STRING_3 , VAR_7 ) ; if ( VAR_4 && ( ( VAR_8 ) > VAR_6 ) ) { VAR_9 . METHOD_6 ( ( ( STRING_4 + VAR_6 ) + STRING_5 ) ) ; VAR_8 = VAR_6 ; } } 
public boolean METHOD_1 ( ) { if ( getChange ( ) . getStatus ( ) . METHOD_2 ( ) ) { return ( ( ( ( METHOD_3 ( ) ) || ( METHOD_4 ( ) . METHOD_3 ( ) ) ) || ( METHOD_5 ( ) . METHOD_3 ( ) ) ) || ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) || ( METHOD_4 ( ) . METHOD_1 ( ) ) ; } else { return METHOD_4 ( ) . METHOD_9 ( ) ; } } 
private TYPE_1 file ( final java.lang.String name ) throws java.io.IOException { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ; final TYPE_1 e = new TYPE_1 ( name ) ; e . METHOD_2 ( VAR_3 ) ; e . METHOD_3 ( VAR_1 . insert ( VAR_4 , TYPE_3 . METHOD_4 ( name ) ) ) ; VAR_1 . METHOD_5 ( ) ; return e ; METHOD_6 ( INT_1 ) ; TYPE_4 . a VAR_5 ; TYPE_5 to ; TYPE_6 revision ; } 
private void METHOD_1 ( TYPE_1 . ProjectConfig VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 = VAR_3 . create ( VAR_1 . getProject ( ) . METHOD_2 ( ) , user ) ; VAR_1 . commit ( VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_1 . getProject ( ) . METHOD_2 ( ) ) ; } 
private void METHOD_1 ( final TYPE_1 event ) { synchronized ( VAR_1 ) { if ( ! ( VAR_2 . METHOD_1 ( event ) ) ) { VAR_3 = true ; } if ( ( ( VAR_4 ) == null ) && ( ! ( VAR_5 ) ) ) { VAR_4 = VAR_6 . submit ( VAR_7 ) ; } } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_4 ) ; VAR_5 . changes ( ) . id ( VAR_2 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , java.lang.String VAR_2 ) { TYPE_4 e = new TYPE_4 ( change , revision , VAR_1 , VAR_2 ) ; if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } for ( TYPE_5 VAR_4 : VAR_3 ) { VAR_4 . METHOD_4 ( e ) ; } } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( cd . METHOD_2 ( user ) ) { return true ; } try { com.google.gerrit.reviewdb.client.Change c = cd . change ( db ) ; if ( c == null ) { return false ; } TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( c , user ) ; if ( VAR_1 . METHOD_4 ( db . get ( ) ) ) { cd . METHOD_5 ( VAR_1 ) ; return true ; } } catch ( TYPE_2 e ) { } return false ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; install ( new TYPE_2 ( VAR_2 ) ) ; bind ( VAR_3 class ) . to ( VAR_4 class ) ; METHOD_4 ( ) . to ( VAR_4 class ) ; if ( VAR_5 ) { METHOD_4 ( ) . to ( VAR_6 class ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) { final java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( VAR_2 . length ) ; for ( final TYPE_2 e : VAR_2 ) { r . add ( e . METHOD_2 ( VAR_1 ) ) ; } return r ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > p ) { if ( p instanceof TYPE_3 < ? > ) { return TYPE_4 . METHOD_2 ( p ) ; } else { return new TYPE_5 ( new TYPE_6 ( p . METHOD_3 ( ) . getName ( ) , p . getValue ( ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( ) ; TYPE_2 VAR_2 = METHOD_6 ( VAR_3 ) ; METHOD_7 ( VAR_2 , STRING_1 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_8 ( STRING_2 , VAR_2 ) . METHOD_9 ( VAR_6 ) . to ( VAR_7 , VAR_4 ) . to ( VAR_8 ) . METHOD_10 ( VAR_9 ) . METHOD_10 ( VAR_10 ) . METHOD_11 ( VAR_11 ) . METHOD_11 ( VAR_3 ) ; } 
public boolean METHOD_1 ( TYPE_1 t , TYPE_2 VAR_1 ) { if ( t . METHOD_2 ( ) ) return ( ( TYPE_3 ) ( t ) ) . METHOD_1 ( this , VAR_1 ) ; if ( ! ( t . METHOD_3 ( ) ) ) return false ; return VAR_2 . equals ( ( ( TYPE_4 ) ( t ) ) . VAR_2 ) ; } 
public void METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId id , java.lang.String VAR_1 ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rw . parseCommit ( id ) ; rw . METHOD_2 ( commit ) ; this . commit = commit ; VAR_2 = commit . METHOD_3 ( ) ; this . VAR_1 = VAR_1 ; } 
boolean METHOD_1 ( TYPE_1 t ) { if ( ! ( t . METHOD_2 ( ) ) ) return false ; if ( t . equals ( VAR_1 ) ) return true ; return ( ( ( TYPE_2 ) ( t ) ) . name ( ) . length ( ) ) == 1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 ) ; METHOD_3 ( STRING_1 ) ; java.lang.String VAR_1 = METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . name ( ) ; METHOD_5 ( user ) ; TYPE_1 . METHOD_6 ( TYPE_2 . of ( TYPE_3 . branch ( STRING_2 , VAR_1 , false ) ) , METHOD_7 ( ) . get ( ) ) ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id key ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_1 VAR_1 = METHOD_1 ( db , key ) ; java.lang.String user = VAR_1 . METHOD_3 ( ) ; if ( user != null ) { VAR_2 . put ( user , TYPE_2 . of ( VAR_1 . METHOD_4 ( ) . getId ( ) ) ) ; } return VAR_1 ; } finally { db . close ( ) ; } } 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { TYPE_5 u = user . get ( ) ; if ( u . METHOD_1 ( ) ) { ( ( TYPE_6 ) ( u ) ) . METHOD_2 ( ) ; } return VAR_1 . get ( ) . METHOD_3 ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } 
private TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 ; if ( ( VAR_2 ) == null ) { VAR_1 = VAR_3 . get ( ) . METHOD_2 ( ) ; } else { VAR_1 = VAR_2 ; } TYPE_3 VAR_4 = VAR_5 . get ( ) ; if ( VAR_4 instanceof TYPE_4 ) { VAR_4 = null ; } return new TYPE_1 ( VAR_3 . get ( ) , VAR_1 , VAR_6 . METHOD_3 ( VAR_1 , VAR_7 , VAR_4 ) ) ; } 
protected void add ( final TYPE_1 s ) throws TYPE_2 . OrmException { final java.lang.String n = s . METHOD_1 ( ) ; METHOD_2 ( n ) ; if ( ( VAR_1 . put ( n , s ) ) != null ) { throw new TYPE_2 . OrmException ( ( STRING_1 + n ) ) ; } VAR_2 . add ( n ) ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) || ( ! ( TYPE_2 . schema ( VAR_2 ) . METHOD_3 ( VAR_3 ) ) ) ) { return java.util.Collections . METHOD_4 ( ) ; } else { return query ( new TYPE_3 ( VAR_1 ) ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , TYPE_3 p ) { long VAR_1 = p . METHOD_2 ( schema ) ; long VAR_2 = p . METHOD_3 ( schema ) ; return TYPE_4 . METHOD_4 ( p . METHOD_5 ( ) . getName ( ) , ( VAR_1 != ( VAR_3 ) ? VAR_1 : null ) , ( VAR_2 != ( VAR_4 ) ? VAR_2 : null ) , false , false ) ; } 
private void METHOD_1 ( TYPE_1 label , TYPE_2 status ) throws TYPE_3 { if ( ( status . METHOD_2 ( ) ) && ( ( status . METHOD_3 ( ) ) == 1 ) ) { TYPE_2 VAR_1 = status . METHOD_4 ( 0 ) ; if ( TYPE_4 . METHOD_5 ( VAR_1 ) ) { VAR_2 = new com.google.gerrit.reviewdb.client.Account.Id ( ( ( TYPE_5 ) ( VAR_1 . METHOD_4 ( 0 ) ) ) . METHOD_6 ( ) ) ; } else { throw new TYPE_3 ( label ) ; } } } 
TYPE_1 get ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository VAR_3 , com.google.gerrit.server.query.change.ChangeData VAR_4 , int VAR_5 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = VAR_4 . change ( ) . getProject ( ) ; java.lang.String branch = VAR_4 . change ( ) . METHOD_1 ( ) . get ( ) ; java.lang.String VAR_6 = TYPE_4 . METHOD_2 ( VAR_4 . getId ( ) . get ( ) , VAR_5 , branch ) ; return get ( VAR_1 , VAR_2 , VAR_6 , VAR_3 , project , branch , VAR_4 . METHOD_3 ( ) ) ; } 
public boolean METHOD_1 ( ) { return ( ( ( ( ( ( VAR_1 ) >= 0 ) && ( ( VAR_2 ) >= 0 ) ) && ( ( VAR_3 ) >= 0 ) ) && ( ( VAR_4 ) >= 0 ) ) && ( ( VAR_1 ) <= ( VAR_3 ) ) ) && ( ( ( VAR_1 ) != ( VAR_3 ) ) || ( ( VAR_2 ) <= ( VAR_4 ) ) ) ; } 
public TYPE_1 < ? > METHOD_1 ( final int id ) { TYPE_1 < ? > result = null ; for ( final TYPE_2 e : VAR_1 ) { final TYPE_1 < ? > t = e . METHOD_1 ( id ) ; if ( t != null ) { if ( result != null ) { return null ; } else { result = t ; } } } return result ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( new TYPE_2 ( ) { public java.lang.String toString ( ) { return STRING_2 ; } } ) ) ; assertEquals ( STRING_2 , b . METHOD_3 ( ) ) ; } 
private static TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd . METHOD_2 ( ) ; TYPE_1 < TYPE_2 , com.google.gerrit.reviewdb.client.PatchSet > result = TYPE_4 . METHOD_3 ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result . put ( ps . getId ( ) . get ( ) , ps ) ; } return result ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_2 = null ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_3 = null ; } TYPE_1 . METHOD_5 ( true ) ; VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; } 
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx . getChange ( ) ; if ( ( change . getStatus ( ) ) == ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } TYPE_3 update = ctx . METHOD_2 ( change . currentPatchSetId ( ) ) ; change . METHOD_3 ( VAR_2 ) ; change . METHOD_4 ( ctx . METHOD_5 ( ) ) ; update . METHOD_3 ( VAR_2 ) ; METHOD_6 ( ctx , update ) ; return true ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { TYPE_2 p = new TYPE_2 ( ) ; TYPE_3 VAR_1 = repo . METHOD_2 ( ) ; try { p . METHOD_3 ( VAR_1 , new org.eclipse.jgit.revwalk.RevWalk ( repo ) . METHOD_4 ( repo . METHOD_5 ( name ) ) ) ; return p ; } finally { VAR_1 . METHOD_6 ( ) ; } } 
public TYPE_1 create ( TYPE_2 req , org.eclipse.jgit.lib.Repository db ) throws TYPE_3 { final TYPE_4 VAR_1 = ( ( TYPE_4 ) ( req . METHOD_1 ( VAR_2 ) ) ) ; if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_3 ( ) ; } TYPE_5 VAR_3 = factory . create ( VAR_1 , db , TYPE_6 . of ( ) ) ; TYPE_1 rp = VAR_3 . METHOD_4 ( ) ; req . METHOD_5 ( VAR_4 , VAR_3 ) ; return rp ; } 
public TYPE_1 METHOD_1 ( TYPE_2 account , TYPE_3 VAR_1 ) throws TYPE_4 , TYPE_5 { try { return VAR_2 . create ( VAR_3 . METHOD_2 ( account , VAR_1 ) ) ; } catch ( TYPE_6 | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_5 ( e ) ; } } 
void METHOD_1 ( boolean VAR_1 , TYPE_1 < TYPE_2 . ChangeInfo > VAR_2 ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( changeId . get ( ) ) ; TYPE_5 . METHOD_3 ( VAR_3 , TYPE_6 . of ( VAR_4 , VAR_5 , VAR_6 ) ) ; if ( ! VAR_1 ) { VAR_3 . METHOD_4 ( ) ; } VAR_3 . get ( VAR_2 ) ; } 
public static int METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { try { TYPE_2 VAR_3 = TYPE_3 . get ( VAR_1 ) ; TYPE_4 VAR_4 = TYPE_5 . get ( VAR_1 ) ; com.google.gerrit.server.query.change.ChangeData VAR_5 = TYPE_6 . get ( VAR_1 ) ; org.eclipse.jgit.lib.Repository VAR_6 = TYPE_7 . get ( VAR_1 ) ; return new TYPE_8 ( VAR_6 , VAR_5 , VAR_2 ) . METHOD_1 ( VAR_3 , VAR_4 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_7 . error ( STRING_1 , e ) ; return 0 ; } } 
private java.lang.String METHOD_1 ( ) { java.lang.StringBuilder m = new java.lang.StringBuilder ( ) ; m . append ( METHOD_2 ( ) ) ; if ( user . METHOD_3 ( ) ) { TYPE_1 u = user . METHOD_4 ( ) ; if ( u . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) { m . append ( STRING_1 ) . append ( u . METHOD_5 ( ) . METHOD_6 ( ) . get ( ) ) . append ( STRING_2 ) ; } } return m . toString ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 edit , boolean VAR_1 ) { TYPE_1 out = new TYPE_1 ( ) ; out . commit = TYPE_3 . METHOD_2 ( edit . METHOD_3 ( ) ) ; VAR_2 = edit . METHOD_4 ( ) . getRevision ( ) . get ( ) ; VAR_3 = TYPE_3 . METHOD_5 ( edit ) ; if ( VAR_1 ) { VAR_4 = METHOD_6 ( edit ) ; } return out ; } 
private static long METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String value ) { TYPE_2 < com.google.gerrit.server.query.change.ChangeData , ? > VAR_1 = schema . METHOD_2 ( ) . get ( TYPE_3 . getName ( ) ) ; if ( VAR_1 == ( TYPE_4 ) ) { return TYPE_5 . METHOD_1 ( value ) ; } else { return TYPE_6 . METHOD_3 ( value ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 c ) throws TYPE_3 . OrmException , TYPE_4 { java.lang.String url = c . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 d : VAR_1 ) { if ( d . METHOD_4 ( url , c ) ) { return d . METHOD_5 ( c ) ; } } throw new TYPE_3 . OrmException ( ( STRING_1 + url ) ) ; } 
void METHOD_1 ( final java.lang.String token ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ; try { TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) ; TYPE_4 . METHOD_4 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } catch ( TYPE_5 e ) { throw VAR_3 . reject ( e . getMessage ( ) ) ; } VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 . Result r = METHOD_2 ( ) ; TYPE_4 in = new TYPE_4 ( ) ; VAR_1 = user . email ; TYPE_5 VAR_2 = VAR_3 . changes ( ) . id ( ( STRING_1 + ( r . getChangeId ( ) ) ) ) ; VAR_2 . METHOD_1 ( in ) ; org.junit.Assert.assertEquals ( TYPE_6 . of ( user . id ) , TYPE_7 . METHOD_3 ( VAR_2 . get ( ) ) ) ; } 
public void run ( ) { try { TYPE_1 cm = VAR_1 . create ( change ) ; cm . METHOD_1 ( change . METHOD_2 ( ) ) ; cm . METHOD_3 ( patchSet , VAR_2 ) ; cm . METHOD_4 ( reviewers ) ; cm . METHOD_5 ( VAR_3 ) ; cm . METHOD_6 ( ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( TYPE_2 . METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) && ( ( METHOD_3 ( ) ) == ( p . METHOD_3 ( ) ) ) ; } return false ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; final int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( ( 0 <= VAR_1 ? VAR_1 : 0 ) ) ; display ( TYPE_1 . METHOD_4 ( ) ) ; display ( ) ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client.Change c , TYPE_1 ... VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Account.Id > VAR_2 = VAR_3 . METHOD_2 ( db , VAR_4 . create ( c ) ) . values ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_1 ) ) ) ; } 
private org.eclipse.jgit.revwalk.RevCommit METHOD_1 ( ) throws java.io.IOException , TYPE_1 { java.util.Set < TYPE_2 > VAR_1 = new TYPE_3 < > ( ) ; for ( java.lang.String VAR_2 : TYPE_4 . METHOD_2 ( ) ) { VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , VAR_2 ) ) ; } VAR_1 . add ( new TYPE_2 ( repo . METHOD_3 ( ) . METHOD_4 ( ) , STRING_1 ) ) ; return TYPE_5 . METHOD_1 ( repo , STRING_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_5 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.eclipse.jgit.lib.Repository repo ) { return new TYPE_1 ( TYPE_4 . of ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( VAR_1 , VAR_3 ) , new TYPE_7 ( VAR_1 , VAR_4 ) , new TYPE_8 ( VAR_1 ) , new TYPE_9 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) , new TYPE_10 ( VAR_1 , repo , VAR_6 ) , new TYPE_11 ( VAR_7 ) , new TYPE_12 ( VAR_6 ) ) ) ; } 
private boolean METHOD_1 ( TYPE_1 . ProjectConfig config , java.util.Set < java.lang.String > VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { for ( TYPE_4 VAR_3 : VAR_2 . METHOD_2 ( ) ) { for ( TYPE_5 VAR_4 : VAR_3 . METHOD_3 ( ) ) { METHOD_4 ( VAR_4 ) ; } } boolean VAR_5 = ! ( VAR_2 . equals ( config . METHOD_5 ( VAR_2 . getName ( ) ) ) ) ; config . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_6 ( VAR_2 . getName ( ) ) ; return VAR_5 ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; factory ( VAR_10 . Factory class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; java.util.List < TYPE_1 > m = VAR_2 . METHOD_2 ( repo , METHOD_3 ( ) , VAR_1 , false ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( m ) ) . METHOD_5 ( STRING_4 , STRING_5 , STRING_6 ) ; } 
protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { try { return new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } return TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) ) { final TYPE_1 VAR_2 = VAR_3 . create ( VAR_4 , p . getAccountId ( ) ) ; if ( VAR_2 . METHOD_2 ( ) . contains ( VAR_5 ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( VAR_2 ) . METHOD_8 ( STRING_2 ) . METHOD_9 ( ) , TYPE_1 . METHOD_3 ( STRING_3 ) ) ; } 
private void METHOD_1 ( ) throws TYPE_1 { if ( ( ( VAR_1 ) != null ) && ( ( ( VAR_2 ) == null ) || ( ( VAR_2 ) != ( VAR_1 ) ) ) ) { TYPE_2 VAR_3 = VAR_4 . create ( VAR_5 , VAR_1 , rw , db , VAR_6 , VAR_7 , VAR_8 ) ; try { VAR_3 . update ( ) ; } catch ( TYPE_3 e ) { VAR_9 . error ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ; } } } 
public static < TYPE_1 > void METHOD_1 ( TYPE_2 binder , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 . Key < TYPE_5 < TYPE_1 > > key = ( ( TYPE_4 . Key < TYPE_5 < TYPE_1 > > ) ( TYPE_6 . get ( TYPE_7 . METHOD_2 ( VAR_2 class , VAR_1 . METHOD_3 ( ) ) ) ) ) ; binder . bind ( key ) . METHOD_4 ( new TYPE_8 < TYPE_1 > ( VAR_1 , key ) ) . in ( VAR_3 ) ; } 
public static void METHOD_1 ( TYPE_1 < java.lang.String > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( java.lang.String VAR_3 : VAR_1 ) { com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_1 + VAR_3 ) ) . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_6 ( ) ; } com.google.common.truth.Truth . METHOD_2 ( ) . METHOD_3 ( ( STRING_2 + VAR_2 ) ) . METHOD_4 ( ( ( TYPE_1 < ? > ) ( VAR_2 ) ) ) . isEmpty ( ) ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 ui , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , TYPE_3 { for ( TYPE_1 VAR_2 : VAR_1 ) { ui . message ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) ; VAR_2 . METHOD_3 ( db ) ; } TYPE_4 s = ( ( TYPE_4 ) ( db ) ) ; TYPE_5 e = new TYPE_5 ( s ) ; try { s . METHOD_1 ( e ) ; } finally { e . close ( ) ; } } 
public TYPE_1 METHOD_1 ( final java.lang.String name , java.lang.String value ) { if ( ( value != null ) && ( ( value . length ( ) ) > 0 ) ) { final java.lang.String e = METHOD_2 ( name ) ; return METHOD_3 ( name , ( ( e . length ( ) ) > 0 ? ( e + STRING_1 ) + value : e ) ) ; } return this ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , CHAR_1 , TYPE_3 . METHOD_3 ( ) ) { public void METHOD_4 ( final TYPE_4 event ) { event . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( ) ; } } ) ; } } 
public java.util.Set < java.lang.String > METHOD_1 ( ) throws TYPE_1 { try { return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public TYPE_1 . ChangeInfo get ( TYPE_2 < TYPE_3 > s ) throws TYPE_4 { try { TYPE_5 u = user . get ( ) ; if ( u . METHOD_1 ( ) ) { u . METHOD_2 ( ) . METHOD_3 ( ) ; } return VAR_1 . create ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_4 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; TYPE_1 a = new TYPE_1 ( VAR_1 , VAR_2 ) ; assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( STRING_3 , a . METHOD_4 ( VAR_1 ) ) ; assertEquals ( ( ( ( STRING_4 + VAR_1 ) + STRING_5 ) + VAR_2 ) , a . toString ( ) ) ; } 
private com.google.gerrit.reviewdb.client . PatchSetApproval METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db . changes ( ) . get ( VAR_1 . getParentKey ( ) ) ; TYPE_1 notes = VAR_2 . create ( db , c ) . METHOD_2 ( ) ; return VAR_3 . METHOD_1 ( db , notes , VAR_1 ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > VAR_1 = METHOD_4 ( db , cd ) . reviewers ( ) . values ( ) ; TYPE_2 user = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ; return VAR_1 . contains ( user . getAccountId ( ) ) ; } return false ; } 
private void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { walk . METHOD_2 ( walk . parseCommit ( VAR_1 ) ) ; for ( org.eclipse.jgit.revwalk.RevCommit commit : walk ) { walk . METHOD_3 ( commit ) ; METHOD_4 ( commit ) ; } METHOD_5 ( ) ; for ( TYPE_2 < com.google.gerrit.reviewdb.client . PatchSetApproval > VAR_2 : approvals . METHOD_6 ( ) . values ( ) ) { java.util.Collections . METHOD_7 ( ( ( java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > ) ( VAR_2 ) ) , VAR_3 ) ; } } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange ( ) . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( db , cd ) ) ) ) { return false ; } return ( VAR_1 . METHOD_1 ( ) ) && ( METHOD_4 ( ) . getProject ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; if ( ( ! ( name . equals ( VAR_2 . name ) ) ) || ( ( VAR_3 ) != ( VAR_4 ) ) ) { return false ; } return new TYPE_3 < TYPE_4 > ( METHOD_1 ( ) ) . equals ( new TYPE_3 < TYPE_4 > ( VAR_2 . METHOD_1 ( ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . METHOD_3 ( false ) ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( final TYPE_3 result ) { METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( false ) ; VAR_2 . METHOD_3 ( false ) ; display ( result ) ; } } ) ; } 
public java.lang.String format ( ) { if ( ( value ) == ( ( short ) ( 0 ) ) ) { return CHAR_1 + ( name ) ; } else if ( ( value ) == ( ( short ) ( 1 ) ) ) { return name ; } else if ( ( value ) < 0 ) { return ( name ) + ( value ) ; } else { return ( ( name ) + CHAR_2 ) + ( value ) ; } } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String path , TYPE_1 < TYPE_2 > VAR_1 ) { if ( ( id . get ( ) ) != 0 ) { throw new TYPE_3 ( STRING_1 ) ; } TYPE_4 . METHOD_2 ( id . getParentKey ( ) . get ( ) , path ) . view ( STRING_2 ) . get ( VAR_1 ) ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = VAR_1 . change ( ) ; if ( c == null ) { return false ; } com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 = c . currentPatchSetId ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval p : VAR_1 . approvals ( ) ) { if ( ( p . METHOD_2 ( ) . equals ( VAR_2 ) ) && ( ( p . getValue ( ) ) != 0 ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 r = VAR_2 . put ( ( STRING_2 + VAR_1 ) ) ; TYPE_2 VAR_3 = METHOD_2 ( ) . METHOD_3 ( r . METHOD_4 ( ) , VAR_4 class ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . name ) . isEqualTo ( VAR_1 ) ; com.google.gerrit.reviewdb.client . AccountGroup group = VAR_5 . get ( new TYPE_3 . NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( group ) . METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( group , VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_3 ) ; TYPE_2 d = util . user ( VAR_1 , VAR_3 ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ; METHOD_4 ( STRING_5 , d . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) ; } 
private < TYPE_1 extends TYPE_2 < ? > > void METHOD_1 ( final TYPE_3 VAR_1 , final TYPE_1 VAR_2 , final TYPE_1 VAR_3 ) { METHOD_1 ( VAR_1 , VAR_2 . name ( ) , ( VAR_3 != null ? VAR_3 . name ( ) : STRING_1 ) ) ; } 
private < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 < TYPE_1 > VAR_2 ) { TYPE_5 < TYPE_1 > VAR_3 = new TYPE_5 < TYPE_1 > ( VAR_4 , VAR_2 ) ; try { if ( ! ( VAR_4 ) ) { TYPE_6 . METHOD_2 ( ) ; } METHOD_3 ( VAR_1 ) . METHOD_4 ( null , VAR_3 ) ; } catch ( TYPE_7 e ) { VAR_3 . METHOD_5 ( null , e ) ; } } 
private TYPE_1 METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { TYPE_1 result = new TYPE_1 ( ) ; for ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > VAR_1 : schema . METHOD_2 ( cd , VAR_2 ) ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { add ( result , VAR_1 ) ; } } return result ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } } 
private void METHOD_1 ( final TYPE_1 result , final TYPE_2 . Id VAR_1 , final TYPE_3 . Id VAR_2 , final TYPE_4 . ReviewDb db , final TYPE_5 VAR_3 ) throws TYPE_6 . OrmException { METHOD_1 ( result . change , VAR_4 . getId ( ) , VAR_1 , VAR_2 , db , VAR_3 ) ; } 
public void METHOD_1 ( ) { assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( STRING_1 ) ) ; assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( STRING_3 ) ) ; assertEquals ( STRING_4 , TYPE_1 . METHOD_2 ( STRING_5 ) ) ; assertEquals ( STRING_6 , TYPE_1 . METHOD_2 ( STRING_7 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_5 , project ) ; TYPE_1 in = METHOD_4 ( VAR_3 ) ; in . branch = STRING_1 ; METHOD_5 ( in , VAR_4 class , STRING_6 ) ; } 
public void run ( ) { try { final TYPE_1 cm ; cm = VAR_1 . create ( change ) ; cm . METHOD_1 ( me ) ; cm . METHOD_2 ( ps , info ) ; cm . METHOD_3 ( reviewers ) ; cm . METHOD_4 ( VAR_2 ) ; cm . METHOD_5 ( ) ; } catch ( java.lang.Exception e ) { VAR_3 . error ( ( STRING_1 + ( change.getId ( ) ) ) , e ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( VAR_2 new TYPE_2 ( VAR_3 , false ) ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_4 . METHOD_7 ( cd ) ; VAR_4 . METHOD_7 ( cd ) ; METHOD_8 ( ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return new TYPE_1 ( ) { public void run ( ) { ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ; } } ; case VAR_6 : return new TYPE_1 ( ) { public void run ( ) { ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ; } } ; default : return new TYPE_1 ( ) { public void run ( ) { } } ; } } 
public com.google.gerrit.reviewdb.client.PatchSet patch ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . getId ( ) . equals ( psId ) ) ) { return VAR_1 ; } for ( com.google.gerrit.reviewdb.client.PatchSet ps : METHOD_1 ( ) ) { if ( ps . getId ( ) . equals ( psId ) ) { return ps ; } } return null ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] args = VAR_1 . METHOD_3 ( ) ; if ( ( args . length ) > 1 ) { return ( VAR_2 + STRING_1 ) + ( args [ 1 ] ) ; } else { return VAR_2 ; } } 
private TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_1 = new com.google.gerrit.reviewdb.client.Account.Id ( INT_1 ) ; final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( name ) ; account . METHOD_4 ( email ) ; return new TYPE_1 ( new TYPE_3 ( VAR_2 ) , account , java.util.Collections . METHOD_5 ( ) , java.util.Collections . METHOD_5 ( ) , new TYPE_4 < > ( ) ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { TYPE_1 . ValidationResult VAR_1 = METHOD_2 ( storageDomain ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { return VAR_1 ; } TYPE_2 VAR_2 = VAR_3 . METHOD_4 ( ) ; TYPE_2 VAR_4 = storageDomain . METHOD_5 ( ) ; if ( ( ! ( VAR_2 . equals ( VAR_5 ) ) ) || ( ! ( VAR_4 . equals ( VAR_5 ) ) ) ) { return new TYPE_1 . ValidationResult ( VAR_6 ) ; } return VAR_7 ; } 
private void METHOD_1 ( ) { java.lang.Integer VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.Integer VAR_2 = METHOD_2 ( ) . METHOD_4 ( ) ; if ( ( VAR_1 != null ) && ( VAR_2 != null ) ) { METHOD_5 ( ( VAR_1 + VAR_2 ) ) ; } else { METHOD_5 ( null ) ; } } 
public boolean equals ( java.lang.Object obj ) { if ( obj == null ) { return false ; } if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( byte [ ] VAR_1 ) { if ( TYPE_1 . METHOD_2 ( ) ) { try { TYPE_1 . METHOD_3 ( ( STRING_1 + ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ) ; } catch ( TYPE_3 VAR_2 ) { } } final TYPE_4 client = this ; METHOD_5 ( new TYPE_5 < TYPE_6 > ( ) { public TYPE_6 METHOD_6 ( ) throws TYPE_3 { client . METHOD_7 ( ) ; return null ; } } ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) throws TYPE_3 { TYPE_4 VAR_3 = this . client . METHOD_2 ( ) ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , VAR_2 , new TYPE_6 ( VAR_3 ) , TYPE_7 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) ) , this . client ) ; this . VAR_5 . METHOD_6 ( VAR_1 , VAR_4 ) ; } 
private void METHOD_1 ( ) { if ( ( getWindow ( ) . METHOD_2 ( ) ) != null ) { return ; } getWindow ( ) . METHOD_3 ( null ) ; TYPE_1 . METHOD_4 ( this , new java.util.ArrayList < java.lang.Object > ( TYPE_2 . METHOD_5 ( new java.lang.Object [ ] { STRING_1 } ) ) ) . METHOD_6 ( ) ; } 
public TYPE_1 . VdcQueryReturnValue runQuery ( TYPE_1 . VdcQueryType VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_1 ( STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; TYPE_1 . VdcQueryReturnValue returnValue = METHOD_5 ( ) . runQuery ( VAR_1 , VAR_2 ) ; returnValue . METHOD_6 ( TYPE_3 . METHOD_7 ( returnValue . getReturnValue ( ) ) ) ; return returnValue ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null : STRING_1 ; if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) ) ) { VAR_2 = VAR_1 ; METHOD_3 ( ) ; } } 
private TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.lang.String VAR_3 , TYPE_2 . VdcBllMessages VAR_4 ) { boolean VAR_5 = ( VAR_2 != null ) && ( VAR_3 != null ) ; java.lang.String [ ] VAR_6 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; return TYPE_3 . METHOD_3 ( VAR_4 , VAR_6 ) . when ( ( VAR_5 && ( METHOD_4 ( VAR_2 , VAR_3 ) ) ) ) ; } 
protected boolean METHOD_1 ( ) { java.util.Map < TYPE_1 . DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap < > ( ) ; for ( TYPE_2 parameters : TYPE_3 . getParameters ( ) . METHOD_2 ( ) ) { TYPE_1 . DiskImage diskImage = METHOD_3 ( parameters . METHOD_4 ( ) ) ; map . put ( diskImage , diskImage . METHOD_5 ( ) . get ( 0 ) ) ; } return validate ( TYPE_4 . METHOD_1 ( map , TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_3 . METHOD_8 ( ) ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( VAR_2 , null , null ) ; VAR_1 . METHOD_4 ( network . getId ( ) ) ; METHOD_5 ( true , true , false , TYPE_2 . METHOD_6 ( VAR_3 , TYPE_3 . METHOD_7 ( VAR_4 , network . getName ( ) ) ) , network , VAR_1 ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ( METHOD_3 ( ) . METHOD_4 ( ) ? ( METHOD_3 ( ) . getEntity ( ) ) == null ? null : ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) . METHOD_5 ( ) : METHOD_6 ( ) ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( VAR_1 ) ) . thenReturn ( METHOD_4 ( VAR_5 ) ) ; } 
private TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . getId ( ) ; java.lang.String VAR_3 = VAR_1 . getName ( ) ; TYPE_3 . EngineMessage VAR_4 = VAR_5 ; return TYPE_4 . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } 
public void setEntity ( org.ovirt.engine.core.common.businessentities.VDS value ) { if ( ( super . getEntity ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_1 = super . getEntity ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . getId ( ) ; org.ovirt.engine.core.compat.Guid VAR_3 = value . getId ( ) ; if ( VAR_2 . equals ( VAR_3 ) ) { setEntity ( value , false ) ; METHOD_1 ( ) ; return ; } } super . setEntity ( value ) ; } 
private void METHOD_1 ( TYPE_1 . AuditLogType VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . getId ( ) ) ; java.lang.String VAR_4 = ( VAR_2 == null ) ? TYPE_3 . METHOD_4 ( ) . name ( ) : VAR_2 ; VAR_3 . METHOD_5 ( STRING_1 , VAR_4 ) ; TYPE_4 . METHOD_6 ( VAR_3 , VAR_1 , VAR_5 ) ; } 
private TYPE_1 METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( INT_1 , INT_1 , VAR_3 ) ; if ( ! ( TYPE_3 . METHOD_4 ( VAR_2 , STRING_3 , VAR_1 ) ) ) { TYPE_4 . METHOD_5 ( STRING_4 ) ; } return VAR_1 ; } catch ( TYPE_5 VAR_4 ) { TYPE_4 . METHOD_5 ( ( STRING_5 + ( VAR_4 . METHOD_6 ( ) ) ) ) ; return null ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_1 , TYPE_3 > VAR_2 ) { new TYPE_4 ( VAR_2 , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( new TYPE_8 ( ) . METHOD_2 ( ) , new TYPE_9 ( new TYPE_10 ( ) , new TYPE_11 ( ) . METHOD_2 ( ) ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_1 , getModel ( ) ) ; } 
public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { java.util.List < java.lang.String > VAR_3 = command . getReturnValue ( ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( STRING_1 , TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_2 . name ( ) , VAR_3 ) , VAR_3 . METHOD_6 ( VAR_2 . name ( ) ) ) ; return VAR_3 ; } 
public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VM VAR_1 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_2 , VAR_4 ) , TYPE_2 . METHOD_5 ( VAR_3 , VAR_5 ) ) ; } 
protected java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return null ; } switch ( METHOD_2 ( ) . METHOD_3 ( ) ) { case VM : return METHOD_4 ( ) ; case VAR_1 : return METHOD_5 ( ) ; default : log . METHOD_6 ( STRING_1 , METHOD_2 ( ) . METHOD_3 ( ) ) ; return null ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 . DiskImage disk ) { TYPE_1 parameters = new TYPE_1 ( VAR_1 , disk ) ; parameters . METHOD_2 ( METHOD_3 ( ) ) ; parameters . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; parameters . METHOD_6 ( TYPE_3 . getParameters ( ) ) ; parameters . METHOD_7 ( false ) ; return parameters ; } 
public static boolean METHOD_1 ( TYPE_1 storageDomain ) { boolean VAR_1 = ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_3 ) ) ; boolean VAR_4 = TYPE_2 . METHOD_3 ( storageDomain ) ; return VAR_1 && VAR_4 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( VAR_2 class , TYPE_3 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , true ) ; } if ( VAR_1 . METHOD_6 ( ) ) { for ( TYPE_4 VAR_3 : VAR_1 . METHOD_7 ( ) ) { VAR_4 . METHOD_1 ( VAR_3 ) ; } } } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . network VAR_1 = dao . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; dao . METHOD_4 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network VAR_3 = dao . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_5 ( VAR_3 ) ; TYPE_1 . assertEquals ( VAR_1 , VAR_3 ) ; } 
public final java.lang.Object METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) { if ( VAR_1 == null ) { return null ; } TYPE_1 VAR_4 = METHOD_2 ( VAR_1 ) ; java.lang.Object value = null ; if ( VAR_4 != null ) { if ( VAR_3 ) { METHOD_3 ( VAR_4 ) ; } value = VAR_5 . get ( VAR_2 ) ; } return value ; } 
private void METHOD_1 ( java.lang.String ... VAR_1 ) { for ( java.lang.String VAR_2 : VAR_1 ) { if ( TYPE_1 . isEmpty ( METHOD_2 ( VAR_2 , true ) ) ) { throw new TYPE_2 ( java.lang.String . METHOD_3 ( ( ( VAR_3 ) + STRING_1 ) , VAR_2 ) ) ; } } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( vds , new TYPE_2 ( ) ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_7 ( TYPE_3 . any ( ) , TYPE_3 . any ( ) ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ; TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 ) ) ; } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( METHOD_1 ( ) , true ) ; VAR_4 . METHOD_2 ( STRING_1 , VAR_1 ) ; VAR_4 . METHOD_2 ( STRING_2 , VAR_2 ) ; VAR_4 . METHOD_2 ( STRING_3 , VAR_3 ) ; return VAR_4 . toString ( ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; if ( VAR_2 == null ) { METHOD_2 ( VAR_5 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_4 ( ) ) ; } VAR_6 . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( 2 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) ; VAR_1 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_5 . get ( VAR_1 . METHOD_5 ( ) ) ) . thenReturn ( VAR_6 ) ; TYPE_2 . METHOD_6 ( command ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; getModel ( ) . METHOD_4 ( ) . setEntity ( METHOD_5 ( VAR_1 . METHOD_6 ( ) , TYPE_2 . getName ( ) ) ) ; getModel ( ) . METHOD_7 ( ) . setEntity ( METHOD_5 ( VAR_1 . METHOD_6 ( ) , TYPE_3 . getName ( ) ) ) ; METHOD_8 ( ) ; } METHOD_9 ( VAR_1 ) ; } 
public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_1 template ) { TYPE_1 entity = ( template != null ) ? template : new TYPE_1 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) ; TYPE_3 result = null ; switch ( VAR_2 ) { case VAR_3 : result = VAR_4 ; break ; case VAR_5 : result = VAR_6 ; break ; case VAR_7 : default : result = VAR_8 ; break ; } entity . METHOD_2 ( result ) ; return entity ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( java.util.List < TYPE_1 . DiskImage > VAR_1 ) { java.util.List < TYPE_1 . DiskImage > VAR_2 = TYPE_2 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) , VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = TYPE_3 . getInstance ( ) . METHOD_4 ( getParameters ( ) . getStoragePoolId ( ) , VAR_2 , METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( VAR_2 ) ; return storageDomain ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( cmd . getVm ( ) ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( TYPE_2 . any ( VAR_3 . VM class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( cmd ) . getStoragePoolId ( ) ; METHOD_7 ( VAR_5 ) ; METHOD_8 ( ) ; } 
protected TYPE_1 . StorageDomain METHOD_1 ( TYPE_1 . StorageDomain model , TYPE_2 entity ) { if ( TYPE_3 . equals ( entity . METHOD_2 ( ) ) ) { model . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ; } else { model . METHOD_3 ( null ) ; } return super . METHOD_1 ( model , entity ) ; } 
protected boolean METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , boolean VAR_2 , TYPE_1 . DiskImage diskImage , TYPE_2 VAR_3 , org.ovirt.engine.core.common.businessentities.StorageDomain VAR_4 ) { if ( VAR_1 . METHOD_2 ( VAR_4 ) ) { return false ; } return super . METHOD_1 ( VAR_1 , VAR_2 , diskImage , VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 . METHOD_3 ( ) ) . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_1 . getValue ( ) ) ; java.util.List < TYPE_3 > result = dao . METHOD_6 ( VAR_1 . getValue ( ) ) ; TYPE_2 . METHOD_5 ( result ) ; TYPE_2 . METHOD_7 ( result . isEmpty ( ) ) ; } 
private TYPE_1 METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < > ( ) ; VAR_1 . put ( VAR_2 , VAR_3 ) ; VAR_1 . put ( VAR_4 , TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ; return new TYPE_1 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) , VAR_5 , TYPE_4 . getName ( ) , STRING_1 , 0 , VAR_1 , true , true , false , STRING_1 , null , null , null ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 < TYPE_3 > > VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = new java.util.ArrayList < TYPE_3 > ( VAR_1 . METHOD_2 ( ) ) ; java.util.List < TYPE_3 > VAR_4 = VAR_3 ; for ( TYPE_2 < TYPE_3 > VAR_5 : VAR_2 ) { VAR_4 = TYPE_4 . METHOD_3 ( VAR_4 , VAR_5 ) ; } return ! ( VAR_4 . isEmpty ( ) ) ; } 
private TYPE_1 < ? > METHOD_1 ( ) { TYPE_1 < ? > VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class , org.mockito.Mockito . METHOD_3 ( ) . METHOD_4 ( params ) . METHOD_5 ( VAR_3 ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( new TYPE_1 ( ) { public void METHOD_8 ( TYPE_2 VAR_1 , java.lang.Object sender , TYPE_3 args ) { METHOD_2 ( ) ; } } ) ; METHOD_9 ( ) . METHOD_10 ( ) . METHOD_7 ( new TYPE_1 ( ) { public void METHOD_8 ( TYPE_2 VAR_1 , java.lang.Object sender , TYPE_3 args ) { METHOD_11 ( new TYPE_4 ( VAR_2 ) ) ; } } ) ; } 
public TYPE_1 getValue ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : return METHOD_3 ( ) . METHOD_4 ( ) ; case VAR_3 : return METHOD_3 ( ) . METHOD_5 ( ) ; case VAR_4 : return METHOD_3 ( ) . METHOD_6 ( ) ; case VAR_5 : return METHOD_3 ( ) . METHOD_7 ( ) ; case VAR_6 : return METHOD_3 ( ) . METHOD_8 ( ) ; default : return METHOD_3 ( ) . METHOD_6 ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { org.ovirt.engine.core.compat.Guid id = VAR_1 . METHOD_2 ( ) ; if ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( id ) ) { id = org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( id ) ; } TYPE_2 VAR_2 = new TYPE_3 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( STRING_1 , VAR_2 ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) ) ; METHOD_2 ( VAR_5 , VAR_6 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_7 [ 0 ] } , METHOD_4 ( ) , VAR_2 ) ; VAR_8 . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) ; METHOD_4 ( cmd ) ; METHOD_5 ( false , VAR_2 ) ; TYPE_1 . METHOD_6 ( cmd . validate ( ) ) ; cmd . METHOD_7 ( ) ; TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_8 ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( result ) ) ; if ( VAR_1 != null ) { TYPE_1 VAR_2 = new TYPE_1 ( vm . getStoragePoolId ( ) , VAR_3 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_2 , VAR_5 ) ; } else { ( ( TYPE_2 ) ( model ) ) . METHOD_1 ( null ) ; } } 
protected void METHOD_1 ( ) { try { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , METHOD_3 ( ) ) ; if ( VAR_1 . getSucceeded ( ) ) { METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , VAR_3 ) ; TYPE_2 . METHOD_7 ( true ) ; } else { VAR_4 . error ( STRING_1 ) ; METHOD_8 ( VAR_5 ) ; } } catch ( TYPE_3 e ) { VAR_4 . error ( STRING_1 , e ) ; METHOD_8 ( VAR_5 ) ; } } 
private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = METHOD_4 ( ) ; if ( VAR_2 == null ) { return false ; } TYPE_3 < TYPE_1 > VAR_3 = METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; if ( ! ( VAR_3 . METHOD_7 ( VAR_1 ) ) ) { return false ; } return true ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 ) { int VAR_2 = TYPE_1 . instance ( ) . METHOD_2 ( 2 , INT_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( VAR_2 ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . add ( METHOD_3 ( ( STRING_1 + i ) , VAR_1 . getName ( ) , null , null ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . METHOD_6 ( METHOD_7 ( false ) ) ; METHOD_8 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_9 ( VAR_5 ) ; } } 
private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_5 ) ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( ) ; METHOD_7 ( VAR_2 ) ; } 
private int METHOD_1 ( TYPE_1 node , TYPE_2 VAR_1 , java.lang.String resource ) { if ( ( ( node . METHOD_2 ( resource , VAR_2 ) ) != null ) && ( ! ( TYPE_3 . isEmpty ( node . METHOD_2 ( resource , VAR_2 ) . VAR_3 ) ) ) ) { return java.lang.Integer . valueOf ( node . METHOD_2 ( resource , VAR_2 ) . VAR_3 ) ; } return - 1 ; } 
public TYPE_1 add ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_2 class , VAR_1 ) ; TYPE_3 parameters = new TYPE_3 ( ) ; parameters . METHOD_2 ( map ( VAR_1 ) ) ; parameters . METHOD_3 ( METHOD_4 ( VAR_3 ) ) ; parameters . METHOD_5 ( VAR_4 ) ; return METHOD_6 ( VAR_5 , parameters , new TYPE_4 ( VAR_1 . getName ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; parameters . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_6 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; TYPE_2 . METHOD_8 ( command ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . AddVmCommand < TYPE_2 > cmd = METHOD_3 ( METHOD_4 ( 1 , 1 ) ) ; cmd . getParameters ( ) . getVm ( ) . METHOD_5 ( STRING_1 ) ; TYPE_3 . METHOD_6 ( STRING_2 , cmd . METHOD_7 ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 result ) { TYPE_4 VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 , result . METHOD_3 ( ) , VAR_3 . Collections < java.lang.String > METHOD_4 ( ) , VAR_4 . METHOD_5 ( ) ) ; TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; VAR_5 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ; return VAR_5 ; } 
public void METHOD_1 ( ) { try { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; } catch ( TYPE_1 VAR_2 ) { VAR_3 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_2 ) ; VAR_3 . METHOD_7 ( STRING_2 , VAR_2 ) ; } finally { METHOD_8 ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; METHOD_5 ( 0 ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; VAR_1 . METHOD_8 ( ) ; TYPE_1 . VM response = resource . get ( ) ; METHOD_9 ( response , 0 ) ; METHOD_10 ( response ) ; } 
private static void METHOD_1 ( TYPE_1 vm , int VAR_1 ) { for ( int VAR_2 = 1 ; VAR_2 <= VAR_1 ; VAR_2 ++ ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_3 , VAR_4 , TYPE_2 . METHOD_4 ( ) , true , false , null ) ; } } 
protected TYPE_1 . Disk getEntity ( int VAR_1 ) { org.ovirt.engine.core.common.businessentities.DiskImage entity = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; entity . setId ( VAR_2 [ VAR_1 ] ) ; entity . METHOD_1 ( VAR_3 ) ; entity . METHOD_2 ( VAR_4 ) ; entity . METHOD_3 ( VAR_5 ) ; entity . METHOD_4 ( VAR_6 ) ; entity . METHOD_5 ( false ) ; entity . METHOD_6 ( false ) ; entity . METHOD_7 ( false ) ; entity . METHOD_8 ( VAR_7 ) ; return TYPE_2 . METHOD_9 ( entity ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . get ( METHOD_2 ( ) ) ; boolean VAR_2 = ! ( VAR_1 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; VAR_1 . METHOD_7 ( VAR_2 ) ; dao . METHOD_8 ( VAR_1 ) ; dao . get ( METHOD_2 ( ) ) ; TYPE_4 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; } 
private static org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; VAR_2 . METHOD_5 ( 1 ) ; vm . METHOD_6 ( VAR_2 ) ; vm . METHOD_7 ( VAR_1 ) ; vm . METHOD_8 ( false ) ; return vm ; } 
private void METHOD_1 ( ) { boolean VAR_1 = ( VAR_2 ) && ( METHOD_2 ( ) ) ; METHOD_3 ( ) . METHOD_4 ( ( VAR_1 && ( ! ( VAR_3 ) ) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) : null ) ) ; METHOD_3 ( ) . setIsChangable ( ( VAR_1 && ( VAR_3 ) ) ) ; METHOD_6 ( ) . setIsChangable ( VAR_1 ) ; METHOD_7 ( ) . setIsChangable ( VAR_1 ) ; METHOD_8 ( ) . setIsChangable ( VAR_2 ) ; } 
public synchronized void METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { VAR_1 . METHOD_2 ( STRING_1 , storageDomain . getId ( ) ) ; if ( ! ( VAR_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) { VAR_2 . put ( storageDomain . getId ( ) , storageDomain ) ; } METHOD_4 ( storageDomain ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 2 ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_3 , VAR_4 , java.lang.Boolean . FALSE } , true , true ) ) ; TYPE_1 . Disk disk = resource . METHOD_5 ( METHOD_6 ( ) ) ; METHOD_7 ( disk ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_2 ( ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_5 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_6 ( ) ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; cmd . METHOD_10 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( 0 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , true , true ) ; METHOD_8 ( VAR_4 . METHOD_9 ( VAR_3 [ 0 ] . toString ( ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( TYPE_1 item : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { return item ; } } return null ; } } ; TYPE_2 VAR_2 = new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_3 . VDS ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_2 , aQuery ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 ) ; model . METHOD_2 ( model , VAR_3 , VAR_2 , null ) ; METHOD_3 ( ) ; } 
public boolean validate ( boolean VAR_1 ) { boolean VAR_2 ; if ( METHOD_1 ( ) . getEntity ( ) ) { METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; VAR_2 = METHOD_2 ( ) . METHOD_4 ( ) ; } else { VAR_2 = false ; } boolean VAR_3 = ( ! VAR_1 ) || ( VAR_4 . validate ( ) ) ; return VAR_2 && VAR_3 ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . network network = ( ( org.ovirt.engine.core.common.businessentities . network ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; boolean VAR_1 = ( ( METHOD_3 ( ) ) && ( network != null ) ) && ( ! ( network . getId ( ) . equals ( VAR_2 ) ) ) ; METHOD_4 ( ) . setIsChangable ( VAR_1 ) ; METHOD_5 ( ) . setIsChangable ( VAR_1 ) ; METHOD_6 ( ) . setIsChangable ( VAR_1 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( new TYPE_1 ( ( ( TYPE_3 . getStoragePoolId ( ) ) == null ? null : TYPE_3 . getStoragePoolId ( ) . getValue ( ) ) , VAR_1 . StoragePool , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; } 
public void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = ( ( java.util.List < TYPE_2 > ) ( VAR_1 ) ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_2 . get ( 0 ) , VAR_2 . get ( ( ( VAR_2 . size ( ) ) - 1 ) ) ) ; } 
public TYPE_1 METHOD_1 ( final org.ovirt.engine.core.compat.Guid id ) { return METHOD_2 ( new TYPE_2 < TYPE_1 > ( ) { public TYPE_1 METHOD_3 ( ) { TYPE_3 VAR_1 = VAR_2 . METHOD_4 ( id . toString ( ) ) ; TYPE_4 VAR_3 = TYPE_4 . METHOD_5 ( VAR_1 . getStatus ( ) ) ; return TYPE_5 . METHOD_6 ( VAR_3 ) ; } } ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < TYPE_1 > ( ) { public TYPE_1 Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( TYPE_1 ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.util.ArrayList < java.lang.String > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( STRING_1 , ( ( VAR_3 . size ( ) ) == 0 ) ) ; } 
protected void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 . DiskImage disk : METHOD_2 ( ) ) { VAR_1 . add ( TYPE_3 . METHOD_3 ( disk ) ) ; } METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( new TYPE_4 ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_8 ( STRING_2 ) ) . thenReturn ( null ) ; VAR_2 . METHOD_9 ( VAR_3 , VAR_4 ) ; org.mockito.Mockito . METHOD_10 ( VAR_4 ) . METHOD_11 ( VAR_5 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) instanceof TYPE_3 ) ) { return TYPE_4 . METHOD_4 ( new TYPE_1 ( VAR_1 . Disk , ( ( TYPE_3 ) ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) . METHOD_5 ( ) , TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ) ; } return null ; } 
protected TYPE_1 METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate VAR_1 = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; final TYPE_1 VAR_2 = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ; return VAR_2 ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS host = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( host == null ) { host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( host , null , false , null , true ) ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( ) ; } TYPE_1 VAR_2 = new TYPE_3 ( VAR_3 ) . METHOD_2 ( ) . get ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 ; } TYPE_1 VAR_4 = METHOD_3 ( VAR_1 ) ; if ( ( VAR_4 != null ) && ( ! ( METHOD_4 ( VAR_4 . getId ( ) ) ) ) ) { return VAR_4 ; } throw new TYPE_2 ( ( STRING_1 + VAR_1 ) ) ; } 
private boolean METHOD_1 ( java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > VAR_1 ) { if ( ( VAR_1 . get ( java.lang.Boolean . TRUE ) ) != null ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 . get ( java.lang.Boolean . TRUE ) ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return false ; } } } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_2 ( ) ; METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , METHOD_8 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 model = ( ( TYPE_3 ) ( sender ) ) ; java.lang.String VAR_2 = ( ( TYPE_4 ) ( args ) ) . VAR_3 ; if ( STRING_1 . equals ( VAR_2 ) ) { METHOD_2 ( ) . METHOD_3 ( model . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = METHOD_2 ( null , null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_2 = METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( VAR_1 ) ) . thenReturn ( VAR_1 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_6 class ) , TYPE_1 . any ( VAR_7 class ) , TYPE_1 . METHOD_9 ( ) ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { final java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 . isEmpty ( ) ) { return true ; } if ( VAR_2 ) { METHOD_3 ( ) . METHOD_1 ( VAR_1 . getId ( ) ) ; } return METHOD_4 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_2 ( true ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_5 ( ) ; VAR_2 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; VAR_2 . METHOD_3 ( ( ( VAR_6 ) + STRING_2 ) ) ; VAR_7 . METHOD_8 ( VAR_8 ) ; VAR_7 . METHOD_6 ( VAR_5 . METHOD_9 ( ) ) ; } 
private boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) { return false ; } for ( TYPE_1 VAR_2 : VAR_1 ) { for ( TYPE_2 < org.ovirt.engine.core.compat.Guid , TYPE_2 < java.lang.Boolean , java.lang.Integer > > VAR_3 : VAR_2 . METHOD_2 ( ) ) { if ( ( ( VAR_3 . METHOD_3 ( ) ) != null ) && ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return true ; } } } return false ; } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { METHOD_2 ( ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > VAR_1 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { VAR_1 . add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > ( vm ) ) ; } VAR_2 . setItems ( VAR_1 ) ; METHOD_3 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) { return ; } VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( VAR_5 . getModel ( ) , null ) ; } 
public boolean METHOD_1 ( ) { return ( ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_1 ) ) || ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) && ( TYPE_1 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) ) ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , int VAR_2 , int VAR_3 , java.lang.String VAR_4 ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 , ( - VAR_2 ) , ( - VAR_3 ) , 0 , 0 ) ; METHOD_4 ( VAR_1 ) . METHOD_5 ( java.lang.Boolean . TRUE ) ; if ( VAR_5 . METHOD_6 ( ) ) { VAR_5 . METHOD_7 ( STRING_1 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } 
private void METHOD_1 ( ) { TYPE_1 < TYPE_2 < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > > VAR_1 = ( ( METHOD_2 ( ) ) != null ) ? METHOD_2 ( ) : new java.util.ArrayList ( ) ; METHOD_3 ( ) . METHOD_4 ( ( ( ( VAR_1 . size ( ) ) == 1 ) && ( ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( VAR_2 ) ) >= 0 ) ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; if ( ( METHOD_3 ( ) ) == ( VAR_1 ) ) { if ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) { TYPE_1 . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ; } METHOD_9 ( ) ; } TYPE_1 . METHOD_10 ( true ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = ( ( TYPE_3 < TYPE_2 > ) ( event . METHOD_2 ( ) ) ) . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ( ( java.lang.Boolean ) ( VAR_1 . METHOD_5 ( ) . getEntity ( ) ) ) , constants . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) ) { return VAR_2 ; } else { return VAR_3 ; } } 
protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . get ( TYPE_2 . getVm ( ) . getId ( ) ) ; return VAR_1 == null ? true : METHOD_3 ( VAR_2 , java.lang.String . METHOD_4 ( STRING_1 , VAR_1 . getName ( ) ) ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = METHOD_2 ( ) ; return ( ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ; } 
private static TYPE_1 METHOD_1 ( java.util.Map < TYPE_1 , TYPE_2 > VAR_1 ) { if ( VAR_1 != null ) { if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { return VAR_3 ; } if ( VAR_1 . METHOD_2 ( VAR_4 ) ) { return VAR_5 ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) ; METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_3 ( null ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_5 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_5 VAR_6 ) { METHOD_8 ( VAR_6 , VAR_7 , VAR_1 ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( null ) ; final org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . getStoragePoolId ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( TYPE_1 constants ) { this . constants = constants ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( null ) ; TYPE_2 . getModel ( ) . METHOD_5 ( ) . METHOD_6 ( new TYPE_3 < TYPE_4 > ( ) { public void METHOD_7 ( TYPE_5 < ? extends TYPE_4 > VAR_1 , java.lang.Object sender , TYPE_4 args ) { VAR_2 . METHOD_8 ( getModel ( ) . METHOD_9 ( ) . getEntity ( ) ) ; } } ) ; } 
protected boolean validate ( ) { TYPE_1 returnValue = TYPE_2 . METHOD_1 ( VAR_1 , METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; TYPE_3 . getReturnValue ( ) . METHOD_5 ( returnValue . METHOD_6 ( ) ) ; return returnValue . METHOD_7 ( ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { return ( VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_2 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; } return false ; } 
protected java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > METHOD_1 ( ) { java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > VAR_1 = new TYPE_2 < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > ( ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_1 . put ( getEntity ( i ) , new TYPE_1 ( ) ) ; } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( ) { return ( TYPE_2 . getParameters ( ) ) != null ? ! ( TYPE_2 . getParameters ( ) . METHOD_1 ( ) . equals ( TYPE_3 ) ) ? TYPE_2 . getParameters ( ) . METHOD_1 ( ) : super . METHOD_1 ( ) : super . METHOD_1 ( ) ; } 
public void METHOD_1 ( java.util.ArrayList parameters ) { super . METHOD_1 ( parameters ) ; if ( ! ( ( parameters . get ( INT_1 ) ) instanceof java.lang.Boolean ) ) { throw new TYPE_1 ( ) ; } VAR_1 = ( ( java.lang.Boolean ) ( parameters . get ( INT_1 ) ) ) ; if ( ! ( ( parameters . get ( INT_2 ) ) instanceof org.ovirt.engine.core.compat.Guid ) ) { throw new TYPE_1 ( ) ; } VAR_2 = ( ( org.ovirt.engine.core.compat.Guid ) ( parameters . get ( INT_2 ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; METHOD_3 ( false ) ; METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_5 ( ( ( VAR_1 . METHOD_6 ( ) ) == null ) ) ; TYPE_2 . METHOD_5 ( ( ( VAR_1 . METHOD_7 ( ) ) != null ) ) ; VAR_2 . METHOD_8 ( ) ; TYPE_3 . METHOD_9 ( VAR_2 . METHOD_10 ( ) ) ; } 
public synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_2 > list = TYPE_3 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , new TYPE_4 < TYPE_2 > ( ) { public boolean METHOD_7 ( TYPE_2 a ) { return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; } } ) ; for ( TYPE_2 VAR_4 : list ) { VAR_4 . METHOD_9 ( ) ; } } 
private void METHOD_1 ( ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : getParameters ( ) . METHOD_2 ( ) ) { if ( getParameters ( ) . METHOD_3 ( ) ) { METHOD_4 ( image ) ; METHOD_5 ( image , METHOD_6 ( ) . METHOD_7 ( ) ) ; } else { VAR_1 . put ( image . getId ( ) , image ) ; } } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; TYPE_2 params = new TYPE_2 ( VAR_1 , VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , params , aQuery ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; VAR_2 . METHOD_2 ( ( ( java.lang.String ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; final TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . setId ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . get ( VAR_5 ) ) . thenReturn ( null ) ; return VAR_1 ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage , TYPE_1 VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain storage = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; storage . METHOD_3 ( VAR_1 ) ; diskImage . METHOD_4 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_5 ( storage . getId ( ) ) ) ) ; return storage ; } 
public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; } return result ; } 
public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; if ( VAR_2 ) { METHOD_5 ( ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; } catch ( TYPE_1 e ) { if ( ! ( TYPE_2 . METHOD_6 ( ) ) ) { VAR_1 . error ( java.lang.String . METHOD_7 ( STRING_3 , e . METHOD_8 ( ) ) , e ) ; } } } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , java.lang.String VAR_4 , boolean VAR_5 ) { return TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_1 , vmId ) , VAR_6 , VAR_7 , VAR_8 , VAR_2 , VAR_3 , VAR_4 , null , VAR_5 ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { if ( ( storageDomain . METHOD_2 ( ) ) == null ) { return false ; } org.ovirt.engine.core.compat.Guid VAR_1 = storageDomain . getId ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = storageDomain . METHOD_2 ( ) . getValue ( ) ; return ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . get ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) != null ; } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ; VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; if ( ( VAR_1 . size ( ) ) > 0 ) { return true ; } return false ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 storageDomain = new TYPE_1 ( ) ; storageDomain . setId ( VAR_1 ) ; storageDomain . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) ; return storageDomain ; } 
public java.util.List < TYPE_1 > METHOD_1 ( final java.lang.String VAR_1 ) { return TYPE_2 . METHOD_2 ( METHOD_3 ( ) , new TYPE_3 < TYPE_1 > ( ) { public boolean METHOD_4 ( TYPE_1 a ) { return a . METHOD_5 ( ) . equals ( VAR_1 ) ; } } ) ; } 
public void METHOD_1 ( ) { dao . METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 ) ) ; java.util.List < TYPE_2 > VAR_3 = dao . METHOD_3 ( VAR_1 ) ; for ( TYPE_2 VAR_4 : VAR_3 ) { TYPE_3 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , VAR_2 ) ; } TYPE_3 . METHOD_6 ( VAR_3 ) ; TYPE_3 . METHOD_7 ( VAR_3 . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < org.ovirt.engine.core.common.queries.IdQueryParameters > VAR_1 = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_3 . VdcQueryReturnValue returnValue = VAR_1 . METHOD_4 ( ) ; org.ovirt.engine.core.common.businessentities.VM VAR_4 = returnValue . getReturnValue ( ) ; TYPE_4 . METHOD_5 ( STRING_1 , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , null ) ; TYPE_1 VAR_2 = METHOD_2 ( STRING_2 , null ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) , null ) ) ; METHOD_6 ( VAR_5 ) ; TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( VAR_2 , null , null ) ; VAR_1 . METHOD_4 ( network . getId ( ) ) ; METHOD_5 ( true , false , false , TYPE_2 . METHOD_6 ( ) , network , VAR_1 ) ; } 
private void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { METHOD_2 ( 0 ) ; METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , VAR_1 , VAR_2 ) ) ; try { resource . METHOD_5 ( TYPE_1 . getModel ( 0 , false ) ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_6 ) { METHOD_7 ( VAR_6 , VAR_3 ) ; } } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 < java.util.List < java.lang.String > > METHOD_3 ( VAR_3 , vds . METHOD_4 ( ) . getValue ( ) ) , vds . METHOD_5 ( ) . METHOD_6 ( STRING_1 ) ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { METHOD_7 ( vds , VAR_1 ) ; return true ; } return false ; } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , TYPE_1 status ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain i : VAR_1 ) { if ( ( i . METHOD_2 ( ) ) == status ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] VAR_1 = ( ( java.lang.Object [ ] ) ( target ) ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ; TYPE_2 model = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_3 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; model . METHOD_2 ( model , VAR_3 , null ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; } 
protected java.lang.Object runQuery ( TYPE_1 . VdcQueryType VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { METHOD_1 ( VAR_2 , VAR_3 ) ; TYPE_1 . VdcQueryReturnValue result = VAR_4 . RunQuery ( VAR_1 , VAR_2 ) ; return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) { return true ; } if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return vm . equals ( VAR_2 . vm ) ; } 
protected void METHOD_1 ( ) { final int VAR_1 = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ; int VAR_4 = TYPE_1 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , 0 ) ; java.util.List < TYPE_3 > VAR_5 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ( VAR_4 * VAR_1 ) , VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < TYPE_1 . DiskImage > VAR_1 ) { for ( TYPE_1 . DiskImage disk : VAR_1 ) { disk . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) ; } TYPE_3 . METHOD_4 ( storageDomain . METHOD_5 ( ) , VAR_1 . get ( 0 ) ) ; } 
public java.lang.String getValue ( TYPE_1 object ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; int VAR_2 = 0 ; for ( java.lang.String name : object . METHOD_1 ( ) ) { VAR_1 . append ( name ) ; if ( VAR_2 < ( ( object . METHOD_1 ( ) . size ( ) ) - 1 ) ) { VAR_1 . append ( STRING_1 ) ; } } return VAR_1 . toString ( ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat . Version version , java.lang.String VAR_1 , java.lang.String value ) { TYPE_1 VAR_2 = VAR_3 . get ( version ) . get ( VAR_1 ) ; TYPE_1 VAR_4 = VAR_5 . get ( version ) . get ( VAR_1 ) ; return ( ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( value ) . METHOD_3 ( ) ) ) || ( ( VAR_4 != null ) && ( VAR_4 . METHOD_2 ( value ) . METHOD_3 ( ) ) ) ; } 
private void METHOD_1 ( ) { if ( ( getWindow ( ) ) != null ) { return ; } TYPE_1 model = TYPE_2 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) , getEntity ( ) . getStoragePoolId ( ) , getEntity ( ) . METHOD_4 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_5 ( ) ) ) , this ) ; METHOD_6 ( model ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : INT_1 ; } } ; TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ; } 
protected void METHOD_1 ( TYPE_1 model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getName ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) ) ; assertEquals ( VAR_3 [ 0 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model ) ; } 
public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( VAR_1 ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VM class ) ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( vm ) , false , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 2 ) ; METHOD_3 ( 0 , 1 ) ; METHOD_4 ( ) ; METHOD_5 ( 1 ) ; METHOD_6 ( METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_9 ( model ) ; METHOD_10 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_11 ( VAR_3 ) ; } } 
private void METHOD_1 ( ) { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( new java.util.ArrayList < TYPE_3 > ( ) , vmId ) ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( INT_1 ) ; METHOD_3 ( ) ; METHOD_4 ( 2 ) ; METHOD_5 ( 2 ) ; METHOD_6 ( 2 ) ; METHOD_7 ( METHOD_8 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 [ 1 ] } , true , true ) ) ; TYPE_1 nic = resource . METHOD_9 ( METHOD_10 ( false ) ) ; METHOD_11 ( nic ) ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( VAR_3 ) ; VAR_2 . add ( VAR_4 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_6 ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) { VAR_3 = VAR_4 < java.lang.Integer > METHOD_3 ( VAR_1 . METHOD_2 ( ) , VAR_5 ) ; } else { VAR_3 = VAR_1 . METHOD_4 ( ) ; } VAR_6 = VAR_4 < java.lang.Integer > METHOD_3 ( VAR_1 . METHOD_5 ( ) , VAR_5 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object model ) { TYPE_2 < ? extends TYPE_3 > VAR_2 = ( ( TYPE_2 < ? extends TYPE_3 > ) ( VAR_1 . METHOD_2 ( ) [ 0 ] ) ) ; try { VAR_1 . METHOD_3 ( model , TYPE_4 . METHOD_1 ( VAR_2 ) ) ; } catch ( java.lang.Exception e ) { } } 
public void METHOD_1 ( ) { TYPE_1 . assertEquals ( new TYPE_2 ( STRING_1 ) . METHOD_2 ( ) , STRING_2 ) ; TYPE_1 . assertEquals ( new TYPE_2 ( STRING_3 ) . METHOD_2 ( ) , STRING_4 ) ; TYPE_1 . assertEquals ( new TYPE_2 ( STRING_5 ) . METHOD_2 ( ) , STRING_6 ) ; TYPE_1 . assertEquals ( new TYPE_2 ( STRING_7 , STRING_8 , true ) . METHOD_2 ( ) , STRING_9 ) ; TYPE_1 . assertEquals ( new TYPE_2 ( STRING_7 , STRING_10 , false ) . METHOD_2 ( ) , STRING_9 ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 [ ] VAR_1 = new TYPE_2 [ 0 ] ; java.lang.Object [ ] args = new java.lang.Object [ 0 ] ; java.lang.Integer VAR_2 = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ; VAR_5 = METHOD_3 ( ) . METHOD_4 ( this , STRING_1 , VAR_1 , args , VAR_2 , VAR_6 ) ; return this ; } 
private java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : VAR_1 ) { VAR_2 . add ( vds . getName ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 < TYPE_3 > . VAR_1 item = ( ( TYPE_2 < TYPE_3 > . VAR_1 ) ( event . METHOD_2 ( ) ) ) ; this . METHOD_3 ( item . getValue ( ) , true ) ; if ( this . VAR_2 ) { event . METHOD_4 ( ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { TYPE_2 < TYPE_1 > VAR_3 = ( ( VAR_4 ) == null ) ? VAR_5 : TYPE_3 . METHOD_2 ( VAR_4 , VAR_6 ) ; TYPE_4 . METHOD_3 ( VAR_2 , VAR_3 ) ; } return VAR_2 ; } 
public TYPE_1 get ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : VAR_3 . list ( ) . METHOD_1 ( ) ) { if ( VAR_4 . equals ( VAR_2 . getId ( ) ) ) { return VAR_2 ; } VAR_1 . add ( VAR_2 . getId ( ) ) ; } throw new TYPE_2 ( TYPE_3 . status ( VAR_5 ) . METHOD_2 ( ) ) ; } 
protected boolean METHOD_1 ( ) { final TYPE_1 VAR_1 = METHOD_2 ( ) ; return ( ( ( TYPE_2 . METHOD_3 ( ) ) != null ) && ( validate ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( ) ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( TYPE_2 . METHOD_3 ( ) ) ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( ) ; METHOD_3 ( vm . METHOD_4 ( ) , VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; TYPE_3 . METHOD_6 ( validator . METHOD_7 ( vm , VAR_2 ) , TYPE_4 . METHOD_8 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) . METHOD_2 ( ) , aQuery ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 ; if ( VAR_1 instanceof TYPE_2 ) { VAR_2 = ( ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) + STRING_1 ) + ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; } else { VAR_2 = ( ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_5 ( ) ) ; } org.ovirt.engine.ui.frontend.Frontend . METHOD_1 ( VAR_2 ) ; } 
private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( returnValue ) ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( model ) ) ; VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) ; } } , METHOD_4 ( ) ) , getVm ( ) . getId ( ) ) ; } 
protected TYPE_1 . ValidationResult METHOD_1 ( ) { java.lang.Boolean VAR_1 = VAR_2 < java.lang.Boolean > METHOD_2 ( VAR_3 ) ; return ( TYPE_2 . getInstance ( ) . METHOD_3 ( METHOD_4 ( ) ) ) && ( ! VAR_1 ) ? new TYPE_1 . ValidationResult ( VAR_4 ) : VAR_5 ; } 
protected boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) || ( TYPE_1 . METHOD_3 ( ) ) ) { return true ; } return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_5 ( ) ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { try { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) ) ; java.util.List < TYPE_3 > VAR_2 = new java.util.ArrayList < > ( ) ; TYPE_4 . METHOD_3 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , STRING_1 , VAR_1 ) ; TYPE_5 . METHOD_5 ( STRING_2 , VAR_2 . isEmpty ( ) ) ; } catch ( java.lang.Exception e ) { e . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . instance ( ) . METHOD_2 ( INT_1 ) ; org.mockito.Mockito.when ( METHOD_3 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) ; boolean result = TYPE_1 . instance ( ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( result ) . when ( METHOD_6 ( ) ) . METHOD_7 ( ) ; METHOD_6 ( ) . METHOD_8 ( ) ; TYPE_2 . assertEquals ( STRING_1 , result , METHOD_6 ( ) . METHOD_9 ( ) . getReturnValue ( ) ) ; } 
public void METHOD_1 ( TYPE_1 result ) { TYPE_2 returnValue = result . getReturnValue ( ) ; if ( ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) { VAR_1 . METHOD_2 ( ( ( VAR_2 ) == null ? ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . METHOD_3 ( ) ) ) : VAR_2 ) , ( ( TYPE_3 < TYPE_4 > ) ( VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) ; } else { VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; if ( ( getWindow ( ) ) != null ) { return ; } final TYPE_2 VAR_2 = new TYPE_3 ( VAR_1 , this ) ; METHOD_2 ( VAR_2 ) ; VAR_2 . METHOD_3 ( ) . setItems ( TYPE_4 . METHOD_4 ( getEntity ( ) ) ) ; VAR_2 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 type ) { TYPE_3 VAR_1 = type . METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 . List class ) ; VAR_2 . METHOD_5 ( ( ( STRING_1 + ( VAR_2 . METHOD_6 ( ) ) ) + STRING_2 ) ) ; return VAR_2 ; } 
public boolean METHOD_1 ( TYPE_1 < TYPE_2 , ? > column ) { if ( ! ( METHOD_2 ( column ) ) ) { return false ; } boolean VAR_1 = true ; if ( VAR_2 . METHOD_3 ( column ) ) { VAR_1 = VAR_2 . get ( column ) ; } if ( VAR_1 && ( VAR_3 . METHOD_3 ( column ) ) ) { VAR_1 = VAR_3 . get ( column ) ; } VAR_1 = VAR_1 && ( ( METHOD_4 ( column ) ) == null ) ; return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 . VdcActionType VAR_1 , boolean VAR_2 ) { TYPE_1 . VdcActionParametersBase VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) , METHOD_5 ( ) , getParameters ( ) , VAR_4 , VAR_2 ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( vmId ) ; if ( ( vm . METHOD_3 ( ) ) == ( VAR_1 ) ) { TYPE_1 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 , new TYPE_2 ( vmId , VAR_3 ) ) ; } else { VAR_4 . METHOD_6 ( STRING_1 , vm . METHOD_7 ( ) , vm . METHOD_3 ( ) ) ; } } 
public int METHOD_1 ( TYPE_1 . Network VAR_1 , TYPE_1 . Network VAR_2 ) { if ( VAR_1 . getId ( ) . equals ( VAR_2 . getId ( ) ) ) { return 0 ; } else { return VAR_1 . getId ( ) . toString ( ) . METHOD_2 ( VAR_2 . getId ( ) . toString ( ) ) ; } } 
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . VdcQueryReturnValue returnValue = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_3 , VAR_1 . METHOD_6 ( ) ) ) ; return returnValue . getReturnValue ( ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; } 
protected void METHOD_1 ( TYPE_1 ... VAR_1 ) { TYPE_2 VAR_2 = org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( TYPE_3 . any ( VAR_4 class ) , TYPE_3 . any ( VAR_5 class ) , TYPE_3 . any ( VAR_6 class ) , TYPE_3 . METHOD_3 ( ) ) ) ; for ( TYPE_1 command : VAR_1 ) { VAR_2 = VAR_2 . thenReturn ( command ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 resource = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( ) ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; try { resource . get ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
private TYPE_1 METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VDS host , final boolean VAR_1 ) throws TYPE_2 { final TYPE_1 VAR_2 = new TYPE_1 ( host , VAR_1 ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; if ( TYPE_4 . isEmpty ( VAR_3 ) ) { VAR_3 = TYPE_5 . METHOD_4 ( host ) ; } VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_5 ( ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) ; METHOD_4 ( command ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) ; METHOD_9 ( true ) ; METHOD_10 ( true ) ; METHOD_11 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( ) ; vm . METHOD_3 ( 2 ) ; METHOD_4 ( vm . METHOD_5 ( ) , VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_6 ( VAR_1 ) ; TYPE_3 . METHOD_7 ( validator . METHOD_8 ( vm , VAR_2 ) , TYPE_4 . METHOD_9 ( VAR_3 ) ) ; } 
protected void METHOD_1 ( boolean VAR_1 ) { try { TYPE_1 VAR_2 = VAR_3 class . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_4 = org.mockito.Mockito . METHOD_3 ( VAR_5 class ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_4 ) ; } catch ( java.lang.Exception e ) { e . METHOD_6 ( ) ; } } 
boolean METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 , final java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 ) { for ( final TYPE_1 VAR_3 : VAR_1 ) { boolean VAR_4 = false ; for ( final org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_5 : VAR_2 ) { if ( TYPE_2 . equals ( VAR_3 . METHOD_2 ( ) , VAR_5 . METHOD_2 ( ) ) ) { VAR_4 = true ; break ; } } if ( ! VAR_4 ) { VAR_6 . METHOD_3 ( STRING_1 ) ; return false ; } } return true ; } 
static void METHOD_1 ( ) { TYPE_1 . AuditLogType [ ] VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( ( VAR_1 . length ) != ( VAR_2 . size ( ) ) ) { for ( TYPE_1 . AuditLogType value : VAR_1 ) { if ( ! ( VAR_2 . METHOD_3 ( value ) ) ) { VAR_3 . METHOD_4 ( STRING_1 , value . toString ( ) ) ; } } } } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > VAR_1 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_2 ( METHOD_3 ( ) ) ) { VAR_1 . add ( new TYPE_2 ( a . getId ( ) , getEntity ( ) . getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_3 , VAR_1 ) ; } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { add ( METHOD_2 ( VAR_2 . METHOD_3 ( ) , true ) ) ; add ( METHOD_2 ( VAR_2 . METHOD_4 ( ) , true ) ) ; add ( METHOD_2 ( VAR_2 . METHOD_5 ( ) , true ) ) ; } } ; METHOD_6 ( VAR_1 , VAR_3 ) ; } 
public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_2 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 ) ; } } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { if ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) { METHOD_3 ( VAR_1 ) ; } else { METHOD_4 ( ) ; METHOD_5 ( ) ; } } METHOD_4 ( ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) { TYPE_2 . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; } else if ( ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) != null ) { TYPE_3 . METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_7 ( true ) ; } 
private void METHOD_1 ( TYPE_1 constants , TYPE_2 VAR_1 ) { VAR_2 . METHOD_2 ( constants . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( constants . METHOD_4 ( ) ) ; VAR_4 . METHOD_2 ( constants . METHOD_5 ( ) ) ; VAR_5 . METHOD_2 ( constants . METHOD_6 ( ) ) ; VAR_6 . METHOD_7 ( constants . METHOD_8 ( ) ) ; VAR_7 . METHOD_7 ( constants . METHOD_9 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < TYPE_2 > list = ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_4 . METHOD_1 ( list , new TYPE_5 ( ) ) ; VAR_1 . setItems ( list ) ; } 
public synchronized void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; java.util.List < TYPE_1 > list = TYPE_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , new TYPE_3 < TYPE_1 > ( ) { public boolean METHOD_7 ( TYPE_1 a ) { return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; } } ) ; for ( TYPE_1 VAR_4 : list ) { VAR_4 . METHOD_9 ( ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_8 ( cmd . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_4 . name ( ) ) ) ; } 
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , java.util.Map < java.lang.String , java.lang.Object > parameters , java.util.List < java.lang.String > VAR_1 ) { VAR_2 . error ( ( ( STRING_1 + ( getName ( ) ) ) + STRING_2 ) ) ; return hosts ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = STRING_1 ; final java.lang.String value = VAR_3 ; VAR_1 . METHOD_2 ( VAR_2 , value ) ; final java.lang.String VAR_4 = VAR_1 . METHOD_3 ( VAR_2 ) ; TYPE_3 . assertEquals ( value , VAR_4 ) ; final java.util.Map < java.lang.String , java.lang.String > VAR_5 = VAR_1 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ) ; final java.lang.String VAR_6 = VAR_1 . METHOD_3 ( VAR_2 ) ; TYPE_3 . assertEquals ( STRING_2 , VAR_6 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) . METHOD_2 ( ) , aQuery ) ; } 
public void validate ( ) { VAR_1 . METHOD_1 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( 0 , METHOD_2 ( ) . getEntity ( ) ) } ) ; VAR_2 . validate ( ) ; METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) && ( VAR_1 . METHOD_4 ( ) ) ) ) ; } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( VAR_1 ) ; if ( VAR_2 != null ) { TYPE_3 < ? > VAR_3 = TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) . get ( new org.ovirt.engine.core.compat.Guid ( VAR_2 . METHOD_5 ( ) ) ) ; return TYPE_4 . getInstance ( ) . METHOD_6 ( VAR_3 ) ; } return null ; } 
protected TYPE_1 . ValidationResult METHOD_1 ( ) { java.lang.Boolean VAR_1 = VAR_2 < java.lang.Boolean > METHOD_2 ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; if ( VAR_1 || ( ! ( VAR_4 . METHOD_3 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) ) ) ) ) { return VAR_5 ; } else { return new TYPE_1 . ValidationResult ( VAR_6 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_1 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_5 ( ) . get ( VAR_1 . METHOD_6 ( ) ) ; TYPE_2 . METHOD_7 ( VAR_4 ) ; TYPE_2 . assertEquals ( VAR_1 , VAR_4 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; dao . METHOD_3 ( VAR_1 ) ; dao . METHOD_4 ( VAR_3 ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > result = dao . METHOD_5 ( VAR_2 ) ; boolean VAR_4 = false ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : result ) { VAR_4 |= iface . getName ( ) . equals ( VAR_1 . getName ( ) ) ; } TYPE_1 . METHOD_6 ( VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) { return new TYPE_3 ( VAR_2 . AuditLogSeverity class ) ; } else if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) { return new TYPE_4 ( VAR_3 class ) ; } else { return null ; } } 
public TYPE_1 getValue ( TYPE_2 value ) { if ( ( ( value != null ) && ( ( value . METHOD_1 ( ) ) != null ) ) && ( ! ( value . METHOD_1 ( ) . isEmpty ( ) ) ) ) { return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; } return null ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = resource . METHOD_2 ( ) . METHOD_2 ( ) . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( VAR_5 ) ; VAR_1 . METHOD_7 ( VAR_6 ) ; VAR_1 . METHOD_8 ( VAR_7 ) ; } 
protected void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { METHOD_2 ( 2 ) ; METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 [ 0 ] } , VAR_1 , VAR_2 ) ) ; try { VAR_7 . METHOD_5 ( VAR_6 [ 0 ] . toString ( ) ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_8 ) { METHOD_7 ( VAR_8 , VAR_3 ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_3 = METHOD_4 ( STRING_1 ) ; VAR_3 . METHOD_5 ( STRING_2 ) ; TYPE_2 VAR_4 = METHOD_6 ( TYPE_3 . METHOD_7 ( ) , VAR_3 ) ; VAR_4 . METHOD_8 ( ) ; org.mockito.Mockito . METHOD_9 ( VAR_1 ) . METHOD_2 ( TYPE_1 . any ( VAR_5 . Guid class ) ) ; org.mockito.Mockito . METHOD_10 ( VAR_1 ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; VAR_2 . METHOD_2 ( hosts ) ; } 
public void storageDomain ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; final TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; final TYPE_2 VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( VAR_2 , VAR_3 ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( ) ; TYPE_2 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( TYPE_4 VAR_2 , java.lang.Object sender , TYPE_5 args ) { METHOD_6 ( ) ; } } ) ; METHOD_7 ( VAR_1 ) ; VAR_3 . METHOD_8 ( ) ; } 
public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { java.lang.Object returnValue = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; java.util.List < TYPE_2 > VAR_2 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_4 . add ( VAR_3 ) ; VAR_5 . put ( VAR_3 . METHOD_1 ( ) , new TYPE_2 ( VAR_3 ) ) ; } METHOD_2 ( ) ; } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 { TYPE_6 VAR_3 = new TYPE_7 ( VAR_1 ) ; TYPE_1 VAR_4 = TYPE_1 . getInstance ( STRING_1 ) ; VAR_4 . METHOD_2 ( VAR_3 , VAR_2 . METHOD_3 ( ) ) ; return VAR_4 ; } 
protected void METHOD_1 ( ) { if ( ( getModel ( ) . METHOD_2 ( ) ) == null ) { return ; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . METHOD_2 ( ) ; getModel ( ) . METHOD_3 ( ) . METHOD_4 ( getModel ( ) . METHOD_5 ( ) . get ( cluster . METHOD_6 ( ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( args ) ) ; if ( STRING_1 . equals ( VAR_3 ) ) { if ( ( VAR_4 . getModel ( ) . METHOD_2 ( ) ) != null ) { if ( ( METHOD_3 ( ) . getTable ( ) ) != null ) { METHOD_3 ( ) . getTable ( ) . METHOD_4 ( VAR_5 ) ; } } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( VAR_1 ) ) . thenReturn ( VAR_3 ) ; boolean VAR_5 = command . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_5 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , TYPE_2 entity ) { org.ovirt.engine.core.common.businessentities . network network = METHOD_2 ( model ) ; model . METHOD_3 ( ) . setId ( network . getId ( ) . toString ( ) ) ; model . METHOD_3 ( ) . METHOD_4 ( null ) ; return model ; } 
public static java.lang.String METHOD_1 ( java.lang.String source ) throws TYPE_1 { if ( ( source == null ) || ( ( source . METHOD_2 ( ) . length ( ) ) == 0 ) ) { return source ; } else { TYPE_2 VAR_1 = TYPE_2 . getInstance ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ; return new java.lang.String ( VAR_1 . METHOD_6 ( new TYPE_4 ( ) . METHOD_7 ( source ) ) , TYPE_5 . METHOD_8 ( STRING_2 ) ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; TYPE_1 VAR_5 = VAR_1 ; VAR_4 . add ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) ; boolean VAR_7 = command . METHOD_5 ( VAR_1 ) ; TYPE_2 . METHOD_6 ( VAR_7 ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) ; } 
void METHOD_1 ( ) { TYPE_1 . VdcQueryReturnValue returnValue = new TYPE_1 . VdcQueryReturnValue ( ) ; returnValue . METHOD_2 ( true ) ; returnValue . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . RunQuery ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_3 . METHOD_5 ( VAR_4 class ) ) ) . thenReturn ( returnValue ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 . Disk object ) { if ( ( object . METHOD_2 ( ) ) == null ) { return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } else { java.lang.String status = TYPE_4 . getInstance ( ) . METHOD_5 ( object . METHOD_2 ( ) ) ; return TYPE_3 . METHOD_6 ( status ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 [ VAR_4 ] . toString ( ) ) ; METHOD_3 ( METHOD_4 ( ) ) ; METHOD_5 ( STRING_1 , null , false ) ; METHOD_6 ( VAR_1 . get ( ) , VAR_4 ) ; } 
public boolean METHOD_1 ( TYPE_1 model ) { boolean VAR_1 = ( ( model . METHOD_2 ( ) ) instanceof TYPE_2 ) && ( METHOD_3 ( ) ) ; boolean VAR_2 = model . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ; boolean VAR_3 = ( model . METHOD_4 ( ) . METHOD_7 ( ) ) != null ; return ( VAR_1 && VAR_2 ) && VAR_3 ; } 
protected void METHOD_1 ( ) { if ( VAR_1 < java.lang.Boolean > METHOD_2 ( VAR_2 ) ) { VAR_3 . METHOD_3 ( STRING_1 ) ; } if ( METHOD_4 ( ) ) { java.util.List < org.ovirt.engine.core.compat.Guid > VAR_4 = METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( VAR_4 ) ; METHOD_12 ( ) ; if ( ! ( TYPE_1 . METHOD_13 ( VAR_5 . METHOD_14 ( ) ) ) ) { METHOD_15 ( ) ; } METHOD_16 ( ) ; } } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( params . METHOD_2 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( params . METHOD_2 ( ) ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_3 ( STRING_2 , VAR_1 ) ; nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) ; METHOD_6 ( VAR_1 ) ; METHOD_7 ( nic ) ; TYPE_1 VAR_2 = METHOD_8 ( METHOD_9 ( nic ) ) ; METHOD_10 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , false ) ; command = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( VAR_1 , null ) ) ; org.mockito.Mockito.doReturn ( validator ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_5 ( ) ; } 
public static < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > source , TYPE_3 < ? super TYPE_1 > VAR_1 , TYPE_1 VAR_2 ) { for ( TYPE_1 item : source ) { if ( VAR_1 . METHOD_2 ( item ) ) { return item ; } } return VAR_2 ; } 
protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , TYPE_3 . METHOD_2 ( ) ) , VAR_1 , TYPE_4 . getName ( ) , STRING_1 , 0 , null , true , TYPE_3 . getParameters ( ) . METHOD_3 ( ) , TYPE_3 . getParameters ( ) . METHOD_4 ( ) , STRING_1 , null , TYPE_3 . getParameters ( ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.queries.IdQueryParameters params = METHOD_2 ( ) ; org.mockito.Mockito.when ( params . getId ( ) ) . thenReturn ( VAR_1 ) ; TYPE_1 < org.ovirt.engine.core.common.queries.IdQueryParameters > VAR_2 = METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; java.util.List < TYPE_2 . DiskImage > VAR_3 = VAR_2 . METHOD_5 ( ) . getReturnValue ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_3 . size ( ) , 2 ) ; TYPE_3 . assertEquals ( STRING_2 , VAR_3 . get ( 0 ) . METHOD_6 ( ) , VAR_4 ) ; } 
private TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; TYPE_1 user = null ; if ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) { user = TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; } return user ; } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.lang.String VAR_3 ) { TYPE_2 result = METHOD_2 ( VAR_4 , new TYPE_3 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , null , false , true ) ) ; return result . getSucceeded ( ) ? ( ( TYPE_1 ) ( result . getReturnValue ( ) ) ) : null ; } 
public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) ) ; getVm ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_2 , new TYPE_1 ( METHOD_7 ( ) , getVm ( ) . METHOD_4 ( ) ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; } 
public TYPE_1 METHOD_1 ( ) { diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; diskImage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; diskImage . METHOD_4 ( VAR_1 ) ; diskImage . METHOD_5 ( VAR_1 ) ; diskImage . METHOD_6 ( METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( diskImage , getVm ( ) ) ; TYPE_2 . METHOD_9 ( diskImage ) ; return null ; } 
protected void METHOD_1 ( ) { result = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) ; TYPE_1 . METHOD_5 ( ) ; java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( result . METHOD_6 ( ) . length ) ; for ( java.lang.String id : result . METHOD_6 ( ) ) { VAR_1 . add ( new org.ovirt.engine.core.compat.Guid ( id ) ) ; } METHOD_7 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) ; TYPE_1 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_2 . toString ( ) ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > map = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( map . get ( true ) ) ; setItems ( VAR_2 ) ; } 
private java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.String ... VAR_1 ) { java.util.ArrayList < java.lang.String > list = new java.util.ArrayList < > ( VAR_1 . length ) ; for ( java.lang.String e : VAR_1 ) { e = e . METHOD_2 ( ) ; if ( ( e . length ( ) ) > 0 ) { list . add ( e ) ; } } return list ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] VAR_1 = ( ( java.lang.Object [ ] ) ( target ) ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ; VAR_2 . METHOD_2 ( VAR_2 , VAR_3 , ( returnValue == null ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( null , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) , ( ( METHOD_4 ( ) ) + STRING_1 ) ) ; } 
private java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . getSucceeded ( ) ) ) { return null ; } java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > result = ( ( java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > ) ( VAR_1 . getReturnValue ( ) ) ) ; return result ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( command . validate ( ) ) ; TYPE_3 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; org.mockito.Mockito . METHOD_9 ( VAR_2 ) . METHOD_10 ( ) ; org.mockito.Mockito . METHOD_9 ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . Disk ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 id , TYPE_3 type , TYPE_4 VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 , boolean VAR_3 , java.lang.Boolean VAR_4 , java.lang.String VAR_5 , java.util.Map < java.lang.String , java.lang.String > VAR_6 ) { TYPE_1 VAR_7 = TYPE_5 . METHOD_1 ( id , type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; if ( TYPE_6 . METHOD_2 ( VAR_5 ) ) { VAR_7 . METHOD_3 ( VAR_5 ) ; } return VAR_7 ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < TYPE_2 > list = ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; VAR_2 . setItems ( list ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) { return ; } VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , null ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . METHOD_6 ( ) ; METHOD_7 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_8 ( VAR_5 . METHOD_9 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_9 ( ) . getStatus ( ) ) ; } } 
public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { boolean VAR_1 = ( VAR_2 ) && ( ! ( VAR_3 ) ) ; if ( VAR_1 ) { VAR_4 . METHOD_2 ( VAR_5 , STRING_1 ) ; } VAR_6 . METHOD_3 ( VAR_7 , VAR_1 ) ; return null ; } 
public java.lang.Boolean METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( METHOD_4 ( ) , getParameters ( ) . METHOD_5 ( ) ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_2 : METHOD_6 ( ) ) { TYPE_3 . METHOD_7 ( METHOD_8 ( ) , VAR_2 ) ; } return java.lang.Boolean . TRUE ; } 
private void METHOD_1 ( ) { if ( ( context . METHOD_2 ( ) ) == null ) { java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > VAR_1 = METHOD_3 ( ) ; if ( VAR_1 != null ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , null ) ; METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; context . METHOD_6 ( VAR_2 ) ; log . METHOD_7 ( STRING_1 , VAR_2 ) ; } } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( TYPE_4 . getInstance ( ) . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( vm ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_3 ( vm ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( VAR_3 ) . get ( TYPE_2 . any ( VAR_4 class ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_6 ( ) ; } 
private static TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 , TYPE_2 VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; return VAR_4 ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ! VAR_1 ) { addCanDoActionMessage ( VAR_2 ) ; if ( log . METHOD_5 ( ) ) { log . METHOD_6 ( STRING_1 ) ; } } else { VAR_1 = TYPE_1 . METHOD_7 ( ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_1 ) ; VAR_1 . METHOD_6 ( VAR_4 ) ; TYPE_1 VAR_5 = VAR_3 . METHOD_4 ( ) . get ( VAR_1 . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( VAR_5 ) ; TYPE_2 . assertEquals ( VAR_1 , VAR_5 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_4 . VM ) , aQuery ) ; } 
protected void METHOD_1 ( TYPE_1 iface , boolean VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) { org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( iface . METHOD_3 ( ) ) ) . thenReturn ( VAR_1 ) ; TYPE_3 . assertEquals ( VAR_3 , VAR_5 . add ( iface , TYPE_4 . getInstance ( ) , false ) ) ; METHOD_4 ( iface , VAR_2 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( INT_1 , false , VAR_1 , INT_1 , true ) ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( true , VAR_2 ) ) . when ( VAR_3 ) . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ; TYPE_2 . METHOD_5 ( cmd , VAR_5 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS host = context . host ; if ( ( host . METHOD_2 ( ) ) != null ) { TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void METHOD_4 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ; METHOD_5 ( ) ; } } , VAR_2 ) , host . METHOD_2 ( ) ) ; } else { METHOD_5 ( ) ; } } 
protected boolean METHOD_1 ( TYPE_1 status , TYPE_2 . VdcBllMessages VAR_1 ) { boolean returnValue = false ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = TYPE_3 . METHOD_2 ( ) ; if ( VAR_2 != null ) { returnValue = ( VAR_2 . METHOD_3 ( ) ) != status ; if ( ( ! returnValue ) && ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . name ( ) ) ) ) ) { addCanDoActionMessage ( VAR_1 ) ; } } return returnValue ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_2 ( ) ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 ) ) . when ( VAR_1 ) . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( STRING_1 ) . when ( METHOD_2 ( ) ) . METHOD_6 ( VAR_4 ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( VAR_5 ) . METHOD_8 ( TYPE_1 . any ( VAR_6 . Guid class ) ) ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_4 . METHOD_2 ( VAR_2 . METHOD_4 ( ) ) ; VAR_5 . METHOD_2 ( VAR_2 . METHOD_5 ( ) ) ; VAR_6 . METHOD_2 ( VAR_2 . METHOD_5 ( ) ) ; VAR_7 . METHOD_2 ( VAR_2 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 model = ( ( TYPE_2 ) ( VAR_1 . getWindow ( ) ) ) ; model . setEntity ( returnValue ) ; org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_1 , VAR_1 ) ; tempVar . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) ; tempVar . METHOD_3 ( true ) ; tempVar . METHOD_4 ( true ) ; model . METHOD_5 ( ) . add ( tempVar ) ; } 
protected void METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ; METHOD_3 ( ) . setIsChangable ( VAR_1 ) ; METHOD_4 ( ) . setIsChangable ( VAR_1 ) ; METHOD_5 ( ) . setIsChangable ( ( ! VAR_1 ) ) ; METHOD_6 ( ) . setIsChangable ( ( ! VAR_1 ) ) ; if ( VAR_1 ) { METHOD_5 ( ) . setEntity ( true ) ; METHOD_6 ( ) . setEntity ( false ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 . assertEquals ( VAR_1 . METHOD_4 ( ) , STRING_1 ) ; dao . METHOD_5 ( VAR_2 , VAR_3 , STRING_2 ) ; TYPE_1 VAR_4 = dao . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_4 ) ; TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , STRING_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_7 ( VAR_2 ) ; } } 
java.util.List < TYPE_1 < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > > METHOD_1 ( java.util.List < TYPE_1 < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > > VAR_1 ) { return TYPE_2 . METHOD_2 ( new java.util.ArrayList ( TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 < TYPE_1 < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > > ( ) { public boolean METHOD_4 ( TYPE_5 < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > VAR_2 ) { return ( VAR_2 . METHOD_5 ( ) ) != null ; } } ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 VAR_3 = new TYPE_3 ( VAR_4 ) ; METHOD_4 ( VAR_3 ) ; VAR_5 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_4 VAR_6 ) { METHOD_8 ( VAR_6 , VAR_7 , VAR_3 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_4 ( VAR_5 ) ; METHOD_3 ( VAR_4 ) ; VAR_6 . METHOD_4 ( VAR_1 ) ; try { TYPE_2 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_5 VAR_7 ) { METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) ; } finally { VAR_2 . METHOD_8 ( ) ; } } 
private void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { if ( ( METHOD_2 ( ) ) && VAR_2 ) { org.ovirt.engine.core.common.businessentities.VDS VAR_3 = null ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( host . getId ( ) . equals ( VAR_1 ) ) { VAR_3 = host ; } } hosts . METHOD_3 ( VAR_3 ) ; } } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) { METHOD_3 ( ) ; } if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) { METHOD_4 ( ) ; } else if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_3 ) ) { METHOD_5 ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response , java.lang.String VAR_2 ) throws java.lang.Exception { if ( TYPE_3 . METHOD_2 ( VAR_2 ) . METHOD_3 ( STRING_1 ) ) { TYPE_4 . METHOD_4 ( VAR_1 , response , VAR_2 ) ; } else { TYPE_4 . METHOD_5 ( VAR_1 , response , VAR_2 ) ; } } 
public static void METHOD_1 ( TYPE_1 . DiskImage image ) { TYPE_2 . METHOD_1 ( image , image . METHOD_2 ( ) , new TYPE_3 ( image . METHOD_3 ( ) , image . METHOD_4 ( ) . get ( 0 ) , image . METHOD_5 ( ) , image . METHOD_6 ( ) ) ) ; } 
protected int METHOD_1 ( ) { try { return ( getModel ( ) . METHOD_2 ( ) . getEntity ( ) ) != null ? java.lang.Integer . METHOD_3 ( getModel ( ) . METHOD_2 ( ) . getEntity ( ) . toString ( ) ) : 0 ; } catch ( TYPE_1 e ) { return 0 ; } } 
public static java.lang.String METHOD_1 ( java.lang.String user , java.lang.String VAR_1 ) throws TYPE_1 { VAR_2 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_3 = null ; if ( user != null ) { VAR_3 = ( ( VAR_1 + STRING_2 ) + user ) + STRING_3 ; } else { VAR_3 = VAR_1 + STRING_3 ; } return new java.lang.String ( VAR_4 . METHOD_3 ( VAR_3 ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 , TYPE_1 . METHOD_8 ( ) , TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) { VAR_2 = new TYPE_3 ( VAR_3 class ) ; } else if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) { VAR_2 = new TYPE_3 ( VAR_4 class ) ; } else if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) { VAR_2 = new TYPE_3 ( VAR_5 class ) ; } return VAR_2 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; TYPE_1 parameters = new TYPE_1 ( VAR_1 , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , parameters , aQuery ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 ) { boolean VAR_2 = ( ( java.lang.Boolean ) ( TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ; if ( METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_4 ( ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ; METHOD_4 ( ) . setIsChangable ( ( VAR_2 && ( METHOD_8 ( ) ) ) ) ; } } 
private TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; VAR_1 . METHOD_7 ( VAR_7 ) ; VAR_1 . METHOD_8 ( VAR_8 ) ; VAR_1 . METHOD_9 ( VAR_9 ) ; VAR_1 . METHOD_10 ( VAR_10 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = VAR_2 . get ( STRING_1 ) ; VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_6 ( VAR_5 ) ; VAR_6 = dao . get ( new TYPE_2 ( STRING_3 , VAR_3 . METHOD_7 ( ) ) ) ; VAR_7 = new TYPE_3 ( VAR_8 , VAR_3 . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 [ ] VAR_1 ) { if ( TYPE_3 . METHOD_2 ( version , VAR_2 ) ) { version . METHOD_3 ( new TYPE_4 ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { version . METHOD_4 ( ) . METHOD_5 ( ) . add ( VAR_3 . value ( ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; VAR_2 . METHOD_4 ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { java.lang.String VAR_3 = TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; TYPE_4 . assertEquals ( STRING_4 , STRING_3 , VAR_3 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } } 
public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS host , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 , final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 ) ; final TYPE_2 < org.ovirt.engine.core.common.businessentities.network.Network > VAR_4 = METHOD_3 ( VAR_1 , VAR_3 ) ; METHOD_4 ( host , VAR_4 , VAR_1 ) ; METHOD_5 ( host , VAR_3 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) ; TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_1 action : TYPE_1 . METHOD_4 ( ) ) { resource . id = java.lang.Integer . toString ( action . getId ( ) ) ; METHOD_5 ( resource . get ( ) , action ) ; } resource . id = STRING_1 ; } 
protected org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VmTemplate template ) { TYPE_2 VAR_1 = METHOD_2 ( VAR_2 . VmTemplate class , VAR_3 class ) . map ( template , null ) ; org.ovirt.engine.core.common.businessentities.VM vm = METHOD_2 ( VAR_4 class , VAR_2 . VM class ) . map ( model , new org.ovirt.engine.core.common.businessentities.VM ( VAR_1 , new TYPE_3 ( ) , new TYPE_4 ( ) ) ) ; return vm ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) ; METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = METHOD_3 ( null ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_5 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_4 VAR_6 ) { METHOD_8 ( VAR_6 , VAR_7 , VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity = METHOD_2 ( ) ; TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 = ( ( TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ) ( resource . METHOD_3 ( ) ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) , entity ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 model = ( ( TYPE_3 ) ( sender ) ) ; if ( STRING_1 . equals ( ( ( TYPE_4 ) ( args ) ) . VAR_2 ) ) { VAR_3 . METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( model . METHOD_5 ( ) . METHOD_6 ( ) . size ( ) ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; } 
protected TYPE_1 . Disk METHOD_1 ( TYPE_1 . Disk model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) ; model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) ; model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ; model . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ; model . METHOD_7 ( null ) ; return model ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = true ; if ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) != 0 ) { VAR_1 = VAR_2 < java.lang.Boolean > METHOD_4 ( VAR_3 , TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) . getValue ( ) ) ; if ( ! VAR_1 ) { addCanDoActionMessage ( VAR_4 ) ; } } return VAR_1 ; } 
static void METHOD_1 ( TYPE_1 . Disk model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) ) ; assertEquals ( TYPE_2 . toString ( ) , model . getVm ( ) . getId ( ) ) ; METHOD_2 ( model . METHOD_4 ( ) ) ; METHOD_2 ( ( ! ( model . METHOD_5 ( ) ) ) ) ; METHOD_2 ( model . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = METHOD_2 ( ) ; java.lang.Integer VAR_1 = METHOD_3 ( ) . getSelectedItem ( ) ; if ( ( cluster == null ) || ( VAR_1 == null ) ) { return ; } METHOD_1 ( VAR_1 , cluster . METHOD_4 ( ) ) ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( int size ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < size ; ++ i ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_1 . add ( diskImage ) ; } return VAR_1 ; } 
public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 ) ) ; TYPE_2 storage = ( ( TYPE_2 ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ; VAR_3 . METHOD_2 ( storage . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ; } 
protected void METHOD_1 ( ) { result = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) ; TYPE_1 . METHOD_5 ( ) ; TYPE_2 < TYPE_3 , org.ovirt.engine.core.compat.Guid > VAR_1 = TYPE_1 . METHOD_6 ( VAR_2 ) ; VAR_1 . METHOD_7 ( ) . setId ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; METHOD_8 ( VAR_1 ) ; } 
public static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 < TYPE_2 > entity ) { java.util.List < java.lang.String > result = new java.util.ArrayList ( ( entity != null ? entity . size ( ) : 0 ) ) ; if ( entity != null ) { for ( TYPE_2 source : entity ) { TYPE_3 VAR_1 = TYPE_4 . map ( source , null ) ; result . add ( VAR_1 . name ( ) ) ; } } return result ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) ; METHOD_3 ( VAR_1 ) ; setItems ( model . value ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . EngineMessage VAR_1 = VAR_2 ; org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . any ( ) ) ; TYPE_4 . METHOD_5 ( command , VAR_1 ) ; } 
protected java.lang.String METHOD_1 ( TYPE_1 object ) { java.lang.Integer VAR_1 = TYPE_2 . METHOD_2 ( object ) ; if ( ( VAR_1 != null ) && ( VAR_1 >= INT_1 ) ) { return METHOD_3 ( ) . METHOD_4 ( ) ; } if ( ( VAR_1 != null ) && ( VAR_1 < 0 ) ) { return METHOD_3 ( ) . METHOD_5 ( ) ; } return VAR_1 != null ? VAR_1 + STRING_1 : STRING_2 ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . VdcQueryType VAR_2 = VAR_3 ; java.lang.Object result = VAR_4 . runQuery ( VAR_2 , VAR_5 , VAR_1 ) ; TYPE_2 . assertEquals ( result , VAR_6 ) ; org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_4 ( VAR_1 ) ; org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ; org.mockito.Mockito . METHOD_2 ( VAR_7 ) . runQuery ( VAR_2 , VAR_5 ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; if ( VAR_1 != null ) { for ( TYPE_1 iface : VAR_1 ) { TYPE_3 . getInstance ( ) . METHOD_5 ( iface . METHOD_6 ( ) ) ; } } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getEntity ( ) ) ) ; setItems ( VAR_1 . METHOD_2 ( ) ) ; } else { setItems ( null ) ; } METHOD_3 ( ( ( TYPE_1 ) ( getEntity ( ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( STRING_1 ) ; VAR_2 . METHOD_7 ( STRING_2 ) ; VAR_2 . METHOD_8 ( VAR_3 ) ; VAR_4 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ) ; } 
public static void METHOD_1 ( TYPE_1 resource , TYPE_2 model , TYPE_3 entity ) { model . METHOD_2 ( new TYPE_4 ( ) ) ; TYPE_5 VAR_1 = new TYPE_5 ( model ) ; java.util.List < TYPE_6 > VAR_2 = VAR_1 . METHOD_3 ( entity ) ; for ( TYPE_6 VAR_3 : VAR_2 ) { TYPE_7 . METHOD_4 ( resource . METHOD_5 ( ) , VAR_3 , VAR_1 . METHOD_6 ( ) ) ; } model . METHOD_3 ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_2 ) ; } 
public boolean METHOD_1 ( TYPE_1 < ? > args , TYPE_2 VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( args , VAR_3 , new TYPE_3 < TYPE_4 > ( ) { public void METHOD_4 ( TYPE_4 result ) { VAR_4 this . VAR_5 = result ; VAR_4 this . VAR_6 = VAR_3 ; } } , VAR_1 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = METHOD_3 ( true ) ; int i = new TYPE_1 ( ) . METHOD_4 ( VAR_3 . length ) ; VAR_2 . METHOD_5 ( VAR_4 [ i ] ) ; VAR_2 . setId ( VAR_5 ) ; cmd . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( cmd . validate ( ) ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . METHOD_3 ( VAR_2 class ) ; METHOD_2 ( VAR_3 class ) . METHOD_3 ( VAR_2 class ) ; METHOD_2 ( VAR_4 class ) . METHOD_3 ( VAR_2 class ) ; METHOD_2 ( VAR_5 class ) . METHOD_3 ( VAR_2 class ) ; METHOD_2 ( VAR_6 class ) . METHOD_3 ( VAR_2 class ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; java.util.List < java.lang.String > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; TYPE_4 . METHOD_4 ( STRING_2 , VAR_2 . METHOD_5 ( STRING_2 ) ) ; TYPE_4 . METHOD_4 ( STRING_3 , ( ! ( VAR_2 . METHOD_5 ( STRING_3 ) ) ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 , new TYPE_2 ( vm . getId ( ) , VAR_1 . getId ( ) ) , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 result ) { } } , null ) ; } } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( vm == null ) { return ; } TYPE_2 VAR_1 = ( ( TYPE_2 ) ( model ) ) ; VAR_1 . METHOD_2 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId ( ) ) ) ; } } 
public void METHOD_1 ( ) { if ( ( client ) != null ) { try { client . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 ) , null , null , null ) ; } catch ( java.lang.Exception e ) { } try { client . METHOD_4 ( ) ; } catch ( java.lang.Exception e ) { } client = null ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_5 ( ) ; VAR_2 = null ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_3 . VdcQueryReturnValue VAR_2 = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ; TYPE_4 VAR_3 = VAR_2 . getReturnValue ( ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_3 ) ; } } } ) , VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; } 
public void METHOD_1 ( TYPE_1 type ) { this . type = type ; METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; for ( TYPE_1 VAR_2 : type . METHOD_3 ( ) . METHOD_4 ( ) ) { METHOD_2 ( ) . METHOD_5 ( VAR_3 ) ; } VAR_4 . METHOD_6 ( VAR_5 ) ; } 
private void METHOD_1 ( long VAR_1 ) { if ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != VAR_1 ) { TYPE_1 . getParameters ( ) . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , true ) ; } } 
protected void METHOD_1 ( TYPE_1 status ) { org.mockito.Mockito.when ( cmd . METHOD_2 ( ) ) . thenReturn ( cluster ) ; org.mockito.Mockito.doReturn ( vds ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( status ) . when ( vds ) . getStatus ( ) ; METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 . Disk > VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) ) ; VAR_1 . add ( diskImage ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( vmId ) ) . thenReturn ( VAR_1 ) ; } 
protected static int METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; int VAR_3 = 0 ; if ( VAR_2 != null ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_2 ) { if ( ( vm . METHOD_4 ( ) ) && ( TYPE_2 . METHOD_5 ( vm . getId ( ) ) ) ) ++ VAR_3 ; } } return VAR_3 ; } 
private void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; for ( org.ovirt.engine.core.compat . Version item : METHOD_2 ( ) . METHOD_3 ( ) ) { if ( TYPE_1 . METHOD_4 ( item , getEntity ( ) . METHOD_5 ( ) ) ) { METHOD_2 ( ) . setSelectedItem ( item ) ; break ; } } } } 
public TYPE_1 add ( TYPE_2 . Disk disk ) { METHOD_1 ( VAR_1 . Disk class , disk ) ; if ( disk . METHOD_2 ( ) ) { return TYPE_1 . METHOD_3 ( METHOD_4 ( disk ) ) . entity ( METHOD_5 ( METHOD_6 ( disk . getId ( ) ) ) ) . METHOD_7 ( ) ; } else { METHOD_8 ( disk ) ; return METHOD_9 ( VAR_2 , METHOD_10 ( map ( disk ) , disk ) , METHOD_11 ( disk . getName ( ) ) ) ; } } 
public TYPE_1 getValue ( TYPE_2 item ) { java.lang.String VAR_1 = TYPE_3 . METHOD_1 ( ) . get ( VAR_2 . METHOD_2 ( item ) ) ; TYPE_4 resource = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( ( VAR_1 + STRING_1 ) ) ; if ( ! ( resource instanceof TYPE_1 ) ) { resource = TYPE_5 . METHOD_3 ( ) . METHOD_5 ( ) ; } return ( ( TYPE_1 ) ( resource ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_2 , new TYPE_2 ( vm . getId ( ) , VAR_1 . getId ( ) ) , new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { } } , null ) ; } } 
protected java.lang.String METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 ; } if ( ( METHOD_2 ( ) ) == ( VAR_3 ) ) { return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; } if ( ! ( TYPE_2 . METHOD_5 ( TYPE_1 . getVm ( ) . METHOD_6 ( ) , TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ) ) { return VAR_2 ; } return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; } 
protected void METHOD_1 ( int VAR_1 , int VAR_2 ) throws java.lang.Exception { TYPE_1 VAR_3 = new TYPE_1 ( ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { METHOD_2 ( VAR_4 , VAR_5 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 [ VAR_2 ] } , VAR_3 ) ; } } 
private java.lang.String METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) { return METHOD_3 ( ) . METHOD_4 ( ) ; } if ( ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . METHOD_5 ( ) ) ) ) { return METHOD_3 ( ) . METHOD_5 ( ) ; } java.lang.String VAR_1 = METHOD_6 ( VAR_2 ) ; if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return VAR_1 ; } return null ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( TYPE_1 . getVm ( ) ) != null ) { METHOD_2 ( TYPE_1 . getVm ( ) . getStoragePoolId ( ) ) ; METHOD_3 ( ) ; VAR_1 = VAR_2 . METHOD_4 ( TYPE_1 . getVm ( ) ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } } 
private void METHOD_1 ( ) { if ( ( METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) && ( METHOD_4 ( ) . METHOD_3 ( STRING_2 ) ) ) { if ( METHOD_5 ( ) . METHOD_3 ( STRING_3 ) ) { METHOD_6 ( ) ; } else if ( METHOD_5 ( ) . METHOD_3 ( STRING_4 ) ) { METHOD_7 ( ) ; } } } 
protected TYPE_1 . Disk getEntity ( int VAR_1 ) { TYPE_2 . DiskImage entity = new TYPE_2 . DiskImage ( ) ; entity . setId ( VAR_2 [ VAR_1 ] ) ; entity . METHOD_1 ( VAR_3 ) ; entity . METHOD_2 ( VAR_4 ) ; entity . METHOD_3 ( VAR_5 ) ; entity . METHOD_4 ( VAR_6 ) ; entity . METHOD_5 ( false ) ; entity . METHOD_6 ( false ) ; entity . METHOD_7 ( VAR_7 ) ; return TYPE_3 . METHOD_8 ( entity ) ; } 
public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_2 = dao . METHOD_3 ( VAR_3 ) ; TYPE_2 . METHOD_4 ( ( ( VAR_2 . size ( ) ) == 1 ) ) ; TYPE_2 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_4 ) ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_6 ( VAR_5 ) ) ; } 
public static java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities . Disk disk ) throws TYPE_1 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_2 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_3 . METHOD_4 ( VAR_1 , false ) ; } 
private void METHOD_1 ( TYPE_1 < TYPE_2 . ValidationResult > VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network ... VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = new java.util.ArrayList ( VAR_2 . length ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : VAR_2 ) { VAR_3 . add ( METHOD_2 ( STRING_1 , network ) ) ; } TYPE_4 validator = new TYPE_4 ( VAR_3 , VAR_4 ) ; TYPE_5 . METHOD_3 ( validator . METHOD_4 ( ) , VAR_1 ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return ( ( ! ( vds . getId ( ) . equals ( VAR_1 . getId ( ) ) ) ) && ( vds . METHOD_2 ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) ) && ( ( vds . METHOD_3 ( ) ) == ( VAR_2 ) ) ; } 
private void METHOD_1 ( TYPE_1 < TYPE_2 . ValidationResult > VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { TYPE_3 VAR_2 = org.mockito.Mockito . METHOD_2 ( VAR_3 class ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_4 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( vms ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) ; TYPE_5 . METHOD_5 ( validator . METHOD_6 ( ) , VAR_1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( STRING_1 ) ; command . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 2 ) ) . log ( TYPE_1 . any ( VAR_3 class ) , TYPE_1 . any ( VAR_4 . AuditLogType class ) ) ; } 
public TYPE_1 . VdcActionParametersBase getParameters ( TYPE_2 model , TYPE_3 entity ) { TYPE_4 parameters = new TYPE_4 ( ) ; parameters . METHOD_1 ( TYPE_5 . map ( TYPE_6 . METHOD_2 ( model . METHOD_3 ( ) ) ) ) ; parameters . METHOD_4 ( TYPE_5 . map ( TYPE_7 . METHOD_2 ( model . getModel ( ) ) ) ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_5 ( false ) ; return parameters ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; org.mockito.Mockito.when ( METHOD_3 ( ) . getId ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ) . thenReturn ( VAR_1 ) ; METHOD_4 ( ) . METHOD_5 ( ) ; TYPE_1 result = METHOD_4 ( ) . METHOD_6 ( ) . getReturnValue ( ) ; TYPE_2 . METHOD_7 ( result ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( result ) ; dao . METHOD_4 ( result . getId ( ) ) ; result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_5 ( result ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ! ( ( ( TYPE_3 ) ( VAR_2 . getReturnValue ( ) ) ) . METHOD_2 ( ) ) ) { TYPE_4 . METHOD_3 ( false ) ; VAR_3 . METHOD_4 ( STRING_1 , TYPE_4 . getParameters ( ) . METHOD_5 ( ) . name ( ) . METHOD_6 ( ) ) ; throw new TYPE_5 ( VAR_4 ) ; } else { METHOD_7 ( VAR_1 ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) , VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) , true , true , null ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; params = METHOD_2 ( ) ; org.mockito.Mockito.when ( METHOD_3 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.when ( params . METHOD_5 ( ) ) . thenReturn ( VAR_2 ) ; VAR_3 = METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) ; java.util.List < java.lang.String > error = VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ; TYPE_4 . METHOD_4 ( STRING_1 , ( ( error . size ( ) ) == 1 ) ) ; TYPE_4 . assertEquals ( STRING_2 , STRING_3 , error . get ( 0 ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_3 ( STRING_2 , VAR_1 ) ; nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) ; nic . METHOD_6 ( VAR_2 ) ; METHOD_7 ( VAR_1 ) ; METHOD_8 ( nic ) ; nic . METHOD_6 ( VAR_3 ) ; TYPE_1 VAR_4 = METHOD_9 ( METHOD_10 ( nic ) ) ; METHOD_11 ( VAR_4 , VAR_5 , VAR_1 . getName ( ) ) ; } 
private static TYPE_1 . DiskImage METHOD_1 ( int size ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( size ) ; diskImage . METHOD_3 ( size ) ; diskImage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; diskImage . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; diskImage . METHOD_6 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_7 ( VAR_1 ) ) ) ; return diskImage ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; try { resource . get ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , METHOD_3 ( ) ) . addValue ( STRING_2 , obj . getName ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) . addValue ( STRING_4 , obj . getStoragePoolId ( ) ) ; return map ; } 
protected void METHOD_1 ( ) { if ( ( ( TYPE_1 . getStoragePoolId ( ) ) == null ) || ( TYPE_2 . equals ( TYPE_1 . getStoragePoolId ( ) ) ) ) { METHOD_2 ( ( ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) != null ) ? TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . getValue ( ) : VAR_1 ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 parameters ) { switch ( parameters . METHOD_2 ( ) ) { case VAR_1 : case VAR_2 : TYPE_3 < ? > command = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ; command . METHOD_4 ( ) ; return command . METHOD_5 ( ) ; default : return METHOD_6 ( VAR_3 ) ; } } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ; model . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; model . METHOD_4 ( ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( getParameters ( ) . METHOD_2 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; TYPE_3 . assertEquals ( VAR_1 , TYPE_2 . METHOD_2 ( STRING_1 ) ) ; TYPE_3 . assertEquals ( STRING_1 , TYPE_2 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = VAR_2 . METHOD_2 ( new java.util.ArrayList < > ( ) , vm , null , org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) ; TYPE_1 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) ; TYPE_1 . METHOD_4 ( METHOD_7 ( ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) ; } 
protected void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; switch ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) { case VAR_2 : VAR_1 . METHOD_4 ( ) ; break ; case VAR_3 : VAR_1 . METHOD_5 ( ) ; break ; default : break ; } } catch ( java.lang.Exception e ) { VAR_4 . error ( ( STRING_1 + ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) , e ) ; } TYPE_2 . METHOD_6 ( ) . METHOD_7 ( true ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . METHOD_2 ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 2 ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_3 , VAR_4 [ 1 ] , INT_1 } , true , true ) ) ; METHOD_5 ( resource . METHOD_6 ( getModel ( ) ) , 0 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ; int VAR_1 = getModel ( ) . METHOD_3 ( ) . getSelectedItem ( ) ; if ( template != null ) { METHOD_4 ( template . getId ( ) , VAR_1 ) ; } } 
private void METHOD_1 ( ) { if ( ( getParameters ( ) . METHOD_2 ( ) ) != null ) { java.util.List < TYPE_1 . DiskImage > VAR_1 = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , getParameters ( ) . METHOD_2 ( ) ) ; for ( TYPE_1 . DiskImage diskImage : VAR_1 ) { TYPE_3 . METHOD_5 ( ) . METHOD_6 ( diskImage . METHOD_7 ( ) , VAR_2 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( INT_1 , null ) ; TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ; for ( java.lang.String VAR_2 : TYPE_3 . METHOD_4 ( STRING_1 ) ) { TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( VAR_2 ) ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_2 ( ) ) . when ( command ) . METHOD_3 ( parameters . METHOD_4 ( ) . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( STRING_2 , command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_3 . toString ( ) ) ) ; } 
static org.ovirt.engine.core.common.businessentities.VDSGroup METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDSGroup entity , int VAR_1 ) { TYPE_1 . METHOD_2 ( entity . getId ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( entity . METHOD_5 ( ) ) . METHOD_3 ( VAR_3 [ VAR_1 ] ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( entity . METHOD_6 ( ) ) . METHOD_3 ( VAR_4 [ VAR_1 ] ) . METHOD_4 ( ) ; return entity ; } 
private void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . DiskImage > VAR_1 = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . DiskImage > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ; METHOD_4 ( ) . METHOD_5 ( ( ( ( VAR_1 . size ( ) ) > 0 ) && ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_3 ) ) ) ) ; } 
static void METHOD_1 ( TYPE_1 . Disk model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) ) ; METHOD_4 ( model . METHOD_5 ( ) ) ; METHOD_4 ( ( ! ( model . METHOD_6 ( ) ) ) ) ; METHOD_4 ( model . METHOD_7 ( ) ) ; assertEquals ( model . METHOD_8 ( ) . getId ( ) , TYPE_2 . toString ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; java.lang.String name = VAR_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ) ) ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { java.util.HashMap < java.lang.String , java.lang.String > result = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; for ( TYPE_1 VAR_1 : this . VAR_2 ) { java.lang.String status = VAR_1 . METHOD_2 ( STRING_1 ) . toString ( ) ; java.lang.String id = VAR_1 . METHOD_2 ( STRING_2 ) . toString ( ) ; result . put ( id , status ) ; } return result ; } 
public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( TYPE_1 . getInstance ( ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( VAR_4 class ) ) ; VAR_1 . METHOD_8 ( ) ; } 
private void METHOD_1 ( ) { int VAR_1 = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) ; TYPE_1 . METHOD_4 ( ( VAR_1 * INT_1 ) ) ; TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_5 , new TYPE_3 ( TYPE_4 . METHOD_7 ( ) , VAR_6 ) ) ; } 
private java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 < java.lang.String > VAR_1 = METHOD_2 ( vm ) ; java.lang.String VAR_2 ; int i = 0 ; do { i ++ ; VAR_2 = TYPE_2 . METHOD_3 ( vm . getName ( ) , java.lang.Integer . toString ( ( ( vm . METHOD_4 ( ) ) + i ) ) ) ; } while ( VAR_1 . METHOD_5 ( VAR_2 ) ) ; return VAR_2 ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { boolean returnValue = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( returnValue ) { command . METHOD_2 ( ) ; } else { METHOD_3 ( command ) ; } } 
void METHOD_1 ( TYPE_1 VAR_1 ) { org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( VAR_2 ) . getSucceeded ( ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_2 ) . getReturnValue ( ) ; } 
protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_2 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) { TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ; } VAR_1 . METHOD_3 ( VAR_4 . METHOD_4 ( TYPE_3 ) ) ; } } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( vm == null ) { return ; } TYPE_2 VAR_1 = ( ( TYPE_2 ) ( model ) ) ; VAR_1 . METHOD_2 ( vm ) ; VAR_1 . METHOD_3 ( ) ; } } 
public org.ovirt.engine.core.compat.Guid METHOD_1 ( ) { if ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ( VAR_1 ) == ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) . METHOD_1 ( ) ; } return null ; } 
public void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( VAR_2 ) ; TYPE_2 command = new TYPE_2 ( params ) ; java.util.HashMap < java.lang.String , java.lang.Object > VAR_3 = command . METHOD_1 ( ) ; TYPE_3 . METHOD_4 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_3 . get ( STRING_2 ) ) ; TYPE_3 . assertEquals ( STRING_3 , VAR_3 . get ( STRING_4 ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
public static java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_1 . add ( TYPE_1 . METHOD_2 ( i ) ) ; } VAR_1 . add ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . add ( TYPE_1 . METHOD_4 ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; TYPE_3 params = new TYPE_3 ( ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , params , aQuery ) ; } 
void METHOD_1 ( ) { VAR_1 = new TYPE_1 < java.lang.Boolean > ( new TYPE_2 ( VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) ) ; VAR_3 = new TYPE_1 < org.ovirt.engine.core.compat . Version > ( new TYPE_3 < org.ovirt.engine.core.compat . Version > ( ) { public java.lang.String METHOD_4 ( org.ovirt.engine.core.compat . Version object ) { return object . getValue ( ) ; } } ) ; VAR_4 = new TYPE_1 < TYPE_4 > ( new TYPE_5 ( ) ) ; VAR_5 = new TYPE_1 ( new TYPE_6 < TYPE_7 > ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( VAR_1 ) { METHOD_4 ( ) ; } TYPE_2 . METHOD_5 ( getVm ( ) . METHOD_6 ( ) , getParameters ( ) . METHOD_7 ( ) ) ; TYPE_3 . METHOD_8 ( getVm ( ) . getId ( ) ) ; if ( getParameters ( ) . METHOD_7 ( ) ) { getParameters ( ) . METHOD_9 ( getVm ( ) ) ; METHOD_10 ( getVm ( ) . getId ( ) ) ; } return null ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_3 , java.lang.Boolean . FALSE ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_4 ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; java.util.ArrayList < TYPE_1 . VdcQueryType > VAR_1 = new java.util.ArrayList < TYPE_1 . VdcQueryType > ( ) ; VAR_1 . add ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; java.util.ArrayList < TYPE_3 > VAR_5 = new java.util.ArrayList < TYPE_3 > ( TYPE_4 . METHOD_3 ( new TYPE_3 [ ] { VAR_3 } ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , VAR_5 , this , getModel ( ) ) ; } 
public boolean METHOD_1 ( TYPE_1 < ? > VAR_1 , TYPE_1 < ? > VAR_2 ) { for ( TYPE_2 network : ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_2 ( ) ) { if ( TYPE_4 . METHOD_1 ( network , null ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) { VAR_1 = cmd . getParameters ( ) . METHOD_2 ( ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_5 ( ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( true , VAR_1 ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_1 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_4 ( VAR_1 ) ; TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_4 = TYPE_3 . METHOD_5 ( VAR_5 , VAR_6 ) ; TYPE_4 . METHOD_6 ( STRING_1 , VAR_7 . METHOD_7 ( cluster , VAR_4 ) . isEmpty ( ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 . Disk > VAR_1 = ( ( java.util.ArrayList < TYPE_1 . Disk > ) ( returnValue ) ) ; METHOD_1 ( ) . METHOD_2 ( ) ; for ( TYPE_1 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_3 ( ) ) == ( VAR_2 ) ) { continue ; } TYPE_1 . DiskImage diskImage = ( ( TYPE_1 . DiskImage ) ( disk ) ) ; METHOD_1 ( ) . add ( diskImage ) ; } } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_2 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; VAR_3 = new java.util.HashMap < > ( ) ; for ( TYPE_1 cluster : VAR_2 ) { if ( ( cluster . METHOD_1 ( ) ) && ( ( cluster . METHOD_2 ( ) ) != null ) ) { METHOD_3 ( cluster . getStoragePoolId ( ) , cluster . METHOD_2 ( ) ) ; } } } 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) >= 1 ) ) && ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( VAR_1 . METHOD_3 ( STRING_2 ) ) ) { return VAR_1 . METHOD_4 ( 1 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; } return VAR_1 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 . isEmpty ( ) ) && ( ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) ) { METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ; } else { METHOD_3 ( ) . METHOD_4 ( ( ( VAR_3 ) | ( VAR_4 ) ) ) ; } } 
private static boolean METHOD_1 ( TYPE_1 < ? > [ ] VAR_1 , TYPE_1 < ? > [ ] VAR_2 ) { if ( ( VAR_1 . length ) != ( VAR_2 . length ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( ! ( VAR_2 [ i ] . METHOD_2 ( VAR_1 [ i ] ) ) ) { return false ; } } return true ; } 
public void METHOD_1 ( ) { parameters . METHOD_2 ( TYPE_1 ) ; parameters . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ; command . METHOD_7 ( ) ; org.mockito.Mockito . METHOD_8 ( command , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( ) ; } 
public boolean METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; boolean VAR_1 = ( vm != null ) && ( ( ( ( vm . getStatus ( ) ) == ( VAR_2 ) ) || ( ( ( vm . getStatus ( ) ) == ( VAR_3 ) ) | ( ( vm . getStatus ( ) ) == ( VAR_4 ) ) ) ) || ( ( vm . getStatus ( ) ) == ( VAR_5 ) ) ) ; return ( VAR_6 ) && VAR_1 ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 parameters ) throws TYPE_4 { TYPE_1 returnValue = METHOD_2 ( ) . METHOD_3 ( VAR_1 , parameters ) ; if ( ! ( returnValue . getSucceeded ( ) ) ) { throw new TYPE_4 ( returnValue . METHOD_4 ( ) . METHOD_5 ( ) , returnValue . METHOD_4 ( ) . METHOD_6 ( ) ) ; } return returnValue ; } 
public void METHOD_1 ( ) { TYPE_1 dao = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.doReturn ( dao ) . when ( VAR_2 ) . METHOD_3 ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_3 ) ; TYPE_2 . METHOD_5 ( VAR_2 . METHOD_6 ( vm , new java.util.ArrayList < > ( ) , null ) , false , VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 [ ] VAR_1 ) { if ( TYPE_3 . METHOD_2 ( version , VAR_2 ) ) { version . METHOD_3 ( new TYPE_4 ( ) ) ; for ( TYPE_2 type : VAR_1 ) { version . METHOD_4 ( ) . METHOD_4 ( ) . add ( type . value ( ) ) ; } } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) , null ) ) ; METHOD_4 ( ) ; METHOD_5 ( false , VAR_3 , VAR_4 ) ; cmd . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_7 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_3 . any ( VAR_6 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_7 ) ; } 
protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name ) { for ( TYPE_1 . Network entity : METHOD_2 ( VAR_2 . Network class , VAR_3 , new TYPE_2 ( VAR_1 ) ) ) { if ( ( ( id != null ) && ( id . equals ( entity . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( entity . METHOD_3 ( ) ) ) ) ) { return entity ; } } return null ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { if ( ( storageDomain . getStoragePoolId ( ) ) == null ) { return false ; } org.ovirt.engine.core.compat.Guid VAR_1 = storageDomain . getId ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = storageDomain . getStoragePoolId ( ) . getValue ( ) ; return ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) != null ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { VAR_1 = ( ( java.lang.String ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } else { VAR_1 = VAR_2 ; } TYPE_2 VAR_3 = ( ( TYPE_2 ) ( model ) ) ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 ) ; } 
private void METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . getInstance ( ) . METHOD_2 ( METHOD_3 ( ) . getId ( ) ) ; if ( VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_4 ( STRING_1 , METHOD_5 ( ) ) ; TYPE_3 . log ( VAR_2 , VAR_3 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 , false , false , false ) ; METHOD_2 ( 1 , true , true , true ) ; METHOD_3 ( VAR_1 [ 1 ] ) ; METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = METHOD_2 ( ) ; TYPE_1 VAR_3 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 , VAR_1 ) ; VAR_4 . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_3 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_1 ) , true , VAR_4 . METHOD_9 ( ) ) ; } 
private static org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( STRING_1 ) ; vm . METHOD_3 ( VAR_1 ) ; vm . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; vm . METHOD_5 ( STRING_2 ) ; vm . METHOD_6 ( ) . METHOD_7 ( STRING_3 ) ; vm . METHOD_8 ( STRING_4 ) ; vm . METHOD_9 ( INT_1 ) ; vm . METHOD_10 ( false ) ; vm . METHOD_11 ( VAR_2 ) ; TYPE_1 . METHOD_12 ( vm ) ; return vm ; } 
private org.ovirt.engine.core.common.businessentities.VDS METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 , org.ovirt.engine.core.common.businessentities.VDS VAR_2 ) { for ( org.ovirt.engine.core.common.businessentities.VDS VAR_3 : VAR_1 ) { if ( ( ( VAR_3 . METHOD_2 ( ) ) == ( VAR_4 ) ) && ( ! ( VAR_3 . getId ( ) . equals ( VAR_2 . getId ( ) ) ) ) ) { return VAR_3 ; } } return null ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; TYPE_2 VAR_6 = METHOD_4 ( ) ; if ( ( ( VAR_6 . getId ( ) ) == null ) || ( VAR_6 . getId ( ) . isEmpty ( ) ) ) { METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ; } } 
public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_1 template ) { TYPE_1 model = ( template != null ) ? template : new TYPE_1 ( ) ; model . METHOD_1 ( VAR_1 ) ; model . setId ( new TYPE_2 ( VAR_1 . METHOD_2 ( ) , true ) . toString ( ) ) ; return model ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( TYPE_1 status ) { final org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( status , STRING_1 , VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ; cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { if ( ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_3 ( ) ) != null ) ) && ( ( METHOD_4 ( ) ) != null ) ) { VAR_1 = ( METHOD_5 ( ) ) - ( METHOD_6 ( ) ) ; VAR_1 = ( ( VAR_1 ) > 0 ) ? VAR_1 : 0 ; } } 
public final java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = new java.lang.String [ 0 ] ; if ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { java.util.List < java.lang.String > VAR_4 = VAR_3 . get ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = new java.lang.String [ VAR_4 . size ( ) ] ; VAR_2 = VAR_4 . METHOD_4 ( new java.lang.String [ ] { } ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class ) ; java.util.List < java.lang.String > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; TYPE_3 . METHOD_4 ( STRING_2 , ( ( VAR_3 . METHOD_5 ( STRING_2 ) ) || ( VAR_3 . METHOD_5 ( STRING_3 ) ) ) ) ; TYPE_3 . METHOD_4 ( STRING_4 , VAR_3 . METHOD_5 ( STRING_4 ) ) ; } 
private void METHOD_1 ( ) { if ( METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_1 ) ) { VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) ; TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_3 , new TYPE_3 ( TYPE_1 . METHOD_4 ( ) ) , TYPE_4 . METHOD_7 ( TYPE_1 . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito . METHOD_2 ( VAR_1 , org.mockito.Mockito . METHOD_3 ( ) ) . METHOD_4 ( VAR_2 . Frontend class , VAR_3 ) ; org.mockito.Mockito . METHOD_2 ( VAR_4 , org.mockito.Mockito . METHOD_3 ( ) ) . METHOD_4 ( VAR_2 . Frontend class , VAR_3 ) ; TYPE_1 . assertEquals ( STRING_1 , org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( ) , STRING_2 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_4 ( STRING_2 , VAR_1 ) ; METHOD_5 ( nic ) ; TYPE_1 VAR_2 = METHOD_6 ( METHOD_7 ( nic ) ) ; METHOD_8 ( VAR_2 ) ; } 
public static TYPE_1 . DiskImage METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , TYPE_2 VAR_1 ) { TYPE_1 . DiskImage image = new TYPE_1 . DiskImage ( ) ; image . METHOD_2 ( TYPE_3 . METHOD_3 ( vm ) ) ; image . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; image . METHOD_6 ( VAR_2 ) ; image . METHOD_7 ( VAR_3 ) ; return image ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface ) { java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 = VAR_2 . get ( iface . METHOD_2 ( ) ) ; if ( VAR_1 == null ) { VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ; VAR_2 . put ( iface . METHOD_2 ( ) , VAR_1 ) ; } VAR_1 . add ( iface ) ; } 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; if ( ( METHOD_2 ( ) ) != null ) { for ( java.lang.Object item : METHOD_2 ( ) ) { TYPE_3 a = ( ( TYPE_3 ) ( item ) ) ; VAR_1 . add ( a . METHOD_3 ( ) ) ; } } return VAR_1 ; } 
private void METHOD_1 ( ) { cluster = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cluster ) . getId ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cluster ) . getStoragePoolId ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( cluster ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( cluster ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . DiskImage diskImage = METHOD_3 ( VAR_1 , VAR_2 ) ; diskImage . METHOD_4 ( true ) ; METHOD_5 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_1 ) ; TYPE_2 . METHOD_7 ( command . validate ( ) ) ; TYPE_2 . METHOD_8 ( command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_3 . toString ( ) ) ) ; } 
protected org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; vm . METHOD_3 ( INT_1 ) ; vm . setId ( vmId ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_7 ( ) ; METHOD_8 ( vm ) ; return vm ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_3 = null ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . assertEquals ( VAR_2 , VAR_4 . getId ( ) ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 ) ; TYPE_2 VAR_6 = new TYPE_2 ( ) { public void METHOD_3 ( org.ovirt.engine.core.compat.Guid VAR_7 , TYPE_3 < java.lang.String > VAR_8 ) { TYPE_4 . METHOD_4 ( VAR_7 , VAR_8 ) ; } } ; return METHOD_5 ( VAR_1 , VAR_2 , VAR_6 , VAR_9 , METHOD_6 ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( STRING_1 , null ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_2 = METHOD_2 ( STRING_2 , null ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_3 = METHOD_4 ( METHOD_5 ( VAR_1 , VAR_1 , VAR_2 , VAR_2 ) ) ; METHOD_6 ( VAR_3 , VAR_4 , VAR_1 . getName ( ) , VAR_2 . getName ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; try { VAR_1 . METHOD_4 ( ) ; resource . METHOD_5 ( new TYPE_1 ( ) ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_7 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; } } 
static java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.lang.String returnValue = VAR_1 ; if ( VAR_2 != null ) { java.util.Map < java.lang.String , java.lang.String > map = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; returnValue = TYPE_2 . METHOD_1 ( VAR_1 , map ) ; } return returnValue ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; validator = new TYPE_3 ( VAR_1 , VAR_3 , cluster , VAR_4 ) ; TYPE_4 . METHOD_6 ( validator . METHOD_7 ( ) , TYPE_5 . METHOD_8 ( VAR_5 ) ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { if ( ! ( TYPE_1 . METHOD_2 ( pool ) . isEmpty ( ) ) ) { VAR_1 . METHOD_3 ( ( STRING_1 + STRING_2 ) , pool . getName ( ) , pool . getId ( ) ) ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_2 , new TYPE_3 ( pool . getId ( ) , VAR_3 , VAR_4 ) ) ; synchronized ( VAR_5 ) { VAR_5 . METHOD_5 ( pool . getId ( ) ) ; } } } 
public java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters ) { java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > VAR_1 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { VAR_1 . add ( new TYPE_1 ( vds . getId ( ) , METHOD_2 ( vds , parameters ) ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; if ( VAR_1 != null ) { METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( METHOD_3 ( ) , METHOD_7 ( ) ) ) ; } } 
private static org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String network , java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface i : VAR_1 ) { if ( network . equals ( i . METHOD_2 ( ) ) ) { return i ; } } for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface i : VAR_2 ) { if ( network . equals ( i . METHOD_2 ( ) ) ) { return i ; } } return null ; } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_1 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 1 ] } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
protected boolean METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( VAR_1 , VAR_2 ) ) ) ) { return false ; } METHOD_4 ( TYPE_1 . METHOD_5 ( ) . getStoragePoolId ( ) , TYPE_1 . getVm ( ) . METHOD_6 ( ) ) ; return super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; TYPE_1 . StorageDomain model = TYPE_2 . getModel ( 0 ) ; try { VAR_2 . add ( model ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . METHOD_6 ( ) ; METHOD_7 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_8 ( VAR_5 . METHOD_9 ( ) ) ; assertEquals ( VAR_5 . METHOD_9 ( ) . getStatus ( ) , INT_1 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; VAR_1 . METHOD_3 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_4 ( ) ; } } ) ) ; } 
public TYPE_1 . VdcQueryReturnValue RunQuery ( TYPE_1 . VdcQueryType VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_1 ( STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_2 . METHOD_3 ( METHOD_4 ( ) . getId ( ) ) ; return METHOD_5 ( ) . runQuery ( VAR_1 , VAR_2 ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_2 ) ( model ) ) ; java.util.List < TYPE_3 > VAR_3 = ( ( java.util.List < TYPE_3 > ) ( ( ( TYPE_4 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; if ( VAR_3 != null ) { TYPE_5 . METHOD_2 ( VAR_3 , VAR_4 ) ; } METHOD_3 ( true ) ; VAR_2 . setItems ( VAR_3 ) ; METHOD_3 ( false ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) ; boolean VAR_6 = command . METHOD_5 ( VAR_1 ) ; TYPE_2 . METHOD_6 ( VAR_6 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ; TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 , tempVar , aQuery ) ; } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface i : VAR_1 ) { if ( TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) ) ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) ; METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_3 ( null ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_5 . METHOD_5 ( ) ; try { TYPE_4 . METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_5 VAR_6 ) { METHOD_8 ( VAR_6 , VAR_7 , VAR_1 ) ; } } 
public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } } 
public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( false ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_8 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( new TYPE_3 . ValidationResult ( VAR_4 ) ) ; TYPE_4 . METHOD_9 ( command , VAR_5 ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( TYPE_2 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_5 ( ) . METHOD_7 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; TYPE_3 . log ( VAR_3 , VAR_6 ) ; return TYPE_4 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_5 , VAR_7 ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( returnValue ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } } ; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity ( ) ; TYPE_1 . getInstance ( ) . METHOD_6 ( VAR_1 , vds . METHOD_7 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , TYPE_3 . METHOD_2 ( ) ) , VAR_1 , TYPE_4 . getName ( ) , STRING_1 , 0 , null , true , TYPE_3 . getParameters ( ) . METHOD_3 ( ) , TYPE_3 . getParameters ( ) . METHOD_4 ( ) , STRING_1 , null , TYPE_3 . getParameters ( ) . METHOD_5 ( ) , null ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( INT_1 ) ; METHOD_3 ( 0 , 2 ) ; METHOD_4 ( ) ; METHOD_4 ( ) ; METHOD_5 ( 1 ) ; METHOD_6 ( new int [ ] { 0 } ) ; METHOD_7 ( new int [ ] { 0 } ) ; METHOD_8 ( new int [ ] { 0 } ) ; METHOD_9 ( new int [ ] { 0 } ) ; METHOD_10 ( new int [ ] { 0 } ) ; METHOD_5 ( 1 ) ; } 
private TYPE_1 METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_2 ( ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 = METHOD_3 ( VAR_2 ) ; TYPE_2 VAR_3 = METHOD_4 ( network , VAR_1 , null ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_3 . getId ( ) ) ) . thenReturn ( VAR_3 ) ; TYPE_1 validator = new TYPE_3 ( ) . METHOD_5 ( new TYPE_4 ( ) . METHOD_6 ( VAR_3 ) ) . METHOD_7 ( network ) . METHOD_8 ( VAR_1 ) . METHOD_9 ( ) ; return validator ; } 
public static boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( TYPE_1 a : VAR_1 ) { if ( ( ( ( a . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ( a . METHOD_3 ( ) ) != null ) ) && ( ( a . METHOD_3 ( ) ) == ( VAR_3 ) ) ) { return true ; } } return false ; } 
public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_4 = VAR_2 . METHOD_2 ( ) ; if ( ( VAR_3 == null ) || ( VAR_4 == null ) ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_3 . METHOD_3 ( VAR_4 ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; return ! ( VAR_2 . isEmpty ( ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ; } 
public java.util.Map METHOD_1 ( java.lang.String VAR_1 ) { final TYPE_1 host = METHOD_2 ( ) ; java.util.Map VAR_2 = METHOD_3 ( ) ; java.util.List VAR_3 = new java.util.ArrayList ( ) ; TYPE_2 . VM vm = host . METHOD_4 ( ) . get ( VAR_1 ) ; if ( vm != null ) { VAR_3 . add ( METHOD_5 ( vm ) ) ; } VAR_2 . put ( STRING_1 , VAR_3 ) ; TYPE_3 . METHOD_6 ( ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = STRING_1 ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( STRING_2 ) ; METHOD_4 ( disk , TYPE_2 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 . METHOD_7 ( 0 , INT_1 ) ) ) , TYPE_2 . METHOD_8 ( 1 ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; TYPE_2 . METHOD_1 ( VAR_1 , new TYPE_3 ( ) ) ; model . METHOD_2 ( ) . setItems ( VAR_1 ) ; model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) ; model . METHOD_4 ( ) ; METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( command . METHOD_2 ( ) . get ( TYPE_1 . any ( VAR_1 . Guid class ) ) ) . thenReturn ( null ) ; org.mockito.Mockito.when ( command . METHOD_3 ( parameters . METHOD_4 ( ) . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) ; command . METHOD_7 ( ) ; TYPE_3 . METHOD_8 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( null ) ; TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_4 ( ) ; java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_5 ( ) . setItems ( VAR_1 ) ; } } ) ) ; } 
protected void METHOD_1 ( TYPE_1 parameters ) { super . METHOD_2 ( parameters . METHOD_3 ( ) ) ; if ( ( ( METHOD_4 ( ) ) != null ) && ( ( METHOD_4 ( ) . getStoragePoolId ( ) ) != null ) ) { METHOD_5 ( METHOD_4 ( ) . getStoragePoolId ( ) ) ; } } 
public synchronized TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = null ; if ( VAR_2 . METHOD_2 ( id ) ) { return VAR_2 . get ( id ) ; } VAR_1 = ( ( TYPE_1 ) ( METHOD_3 ( VAR_3 class , id ) ) ) ; if ( VAR_1 == null ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( id ) ; } else { VAR_4 . METHOD_4 ( STRING_1 , id ) ; } VAR_2 . put ( id , VAR_1 ) ; return VAR_1 ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_3 ( ) . METHOD_1 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) . setId ( TYPE_4 . METHOD_5 ( VAR_4 , VAR_2 ) ) ; return VAR_3 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_4 = METHOD_6 ( VAR_5 ) ; VAR_4 . METHOD_7 ( VAR_6 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_7 = METHOD_6 ( VAR_8 ) ; VAR_7 . METHOD_7 ( VAR_6 ) ; org.mockito.Mockito.when ( VAR_9 . METHOD_8 ( TYPE_1 . any ( VAR_10 . Guid class ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_11 ) ) ; TYPE_3 . METHOD_9 ( command , VAR_12 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model ) { TYPE_1 VAR_1 = super . METHOD_1 ( model ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( TYPE_3 . name ( ) ) ; VAR_2 . METHOD_4 ( null ) ; VAR_2 . METHOD_5 ( null ) ; return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 , org.ovirt.engine.core.compat.Guid VAR_4 ) { TYPE_2 VAR_5 = ( VAR_2 == null ) ? TYPE_3 . METHOD_2 ( ) : TYPE_3 . METHOD_3 ( VAR_2 ) ; TYPE_4 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) , VAR_5 ) ; TYPE_4 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_3 ) ) ; TYPE_4 . METHOD_4 ( STRING_3 , VAR_1 . METHOD_7 ( ) , TYPE_3 . METHOD_6 ( VAR_4 ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; VAR_1 . METHOD_1 ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; } 
private static TYPE_1 METHOD_1 ( final org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; VAR_1 . setId ( new TYPE_2 ( diskImage . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) ; return VAR_1 ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 2 ) ; VAR_1 . METHOD_3 ( new TYPE_2 < java.lang.Integer , java.lang.String > ( new java.lang.Integer ( 2 ) , TYPE_3 . toString ( ) ) ) ; VAR_1 . METHOD_4 ( 0 ) ; VAR_1 . METHOD_5 ( 0 ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( METHOD_9 ( ) ) ; return TYPE_4 . METHOD_10 ( VAR_1 ) ; } 
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) ; VAR_1 . append ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) ; if ( TYPE_2 . getInstance ( ) . METHOD_6 ( ) ) { VAR_1 . append ( VAR_2 . METHOD_7 ( ) , VAR_2 . METHOD_8 ( ) ) ; } VAR_1 . append ( VAR_2 . METHOD_9 ( ) , VAR_2 . METHOD_10 ( ) ) ; return VAR_1 . toString ( ) ; } 
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , network . METHOD_4 ( ) , network . getName ( ) , network . METHOD_5 ( ) , network . METHOD_6 ( ) , false , null ) ; return nic ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . setId ( STRING_1 ) ; METHOD_4 ( 1 , null ) ; METHOD_5 ( 1 , null ) ; METHOD_6 ( 1 , null ) ; METHOD_7 ( VAR_1 ) ; METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_1 } , true , true ) ; VAR_4 . add ( model ) ; } 
public void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( getModel ( ) . METHOD_3 ( ) ) ; int VAR_2 = METHOD_4 ( ) ; if ( ( VAR_1 == 0 ) || ( VAR_1 == 0 ) ) { return ; } getModel ( ) . METHOD_5 ( ) . setSelectedItem ( ( VAR_2 / VAR_1 ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) ; if ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) { VAR_1 . METHOD_4 ( VAR_2 ) ; } else if ( VAR_3 < java.lang.Boolean > METHOD_5 ( VAR_4 ) ) { VAR_1 . METHOD_4 ( VAR_5 ) ; } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; TYPE_2 . METHOD_8 ( ) . METHOD_9 ( VAR_1 ) ; } 
private java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( TYPE_1 < TYPE_2 . Disk > VAR_1 ) { java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > result = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; for ( TYPE_2 . Disk diskImage : VAR_1 ) { result . put ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( diskImage ) ) . METHOD_2 ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( diskImage ) ) ) ; } return result ; } 
public void METHOD_1 ( ) { METHOD_2 ( 1 , VAR_1 ) ; disk = TYPE_1 . METHOD_3 ( ) ; disk . METHOD_4 ( STRING_1 ) ; validator = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( disk , VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( validator ) . METHOD_6 ( ) ; } 
protected java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > METHOD_1 ( ) { if ( ! ( TYPE_2 . METHOD_2 ( getParameters ( ) . getVm ( ) . METHOD_3 ( ) ) ) ) { return TYPE_3 . METHOD_4 ( getParameters ( ) . getVm ( ) . METHOD_3 ( ) , VAR_1 ) ; } return null ; } 
public void METHOD_1 ( TYPE_1 vm ) { super . METHOD_1 ( vm ) ; VAR_1 . METHOD_2 ( false ) ; VAR_2 . METHOD_2 ( false ) ; VAR_3 . METHOD_2 ( false ) ; VAR_4 . METHOD_2 ( true ) ; VAR_5 . METHOD_2 ( false ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; final TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; final java.lang.String VAR_4 = VAR_1 . METHOD_4 ( ) ; TYPE_3 . assertEquals ( VAR_3 , VAR_4 ) ; } 
protected void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) { java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( TYPE_4 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_3 ) ; VAR_6 . METHOD_5 ( VAR_1 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; for ( TYPE_2 iface : VAR_3 ) { METHOD_7 ( iface , VAR_2 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { VAR_1 . converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; TYPE_1 parameters = new TYPE_1 ( VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , parameters , VAR_1 ) ; } 
public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { java.lang.Object [ ] VAR_3 = ( ( java.lang.Object [ ] ) ( VAR_1 ) ) ; TYPE_1 VAR_4 = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) ; TYPE_2 VAR_5 = ( ( TYPE_2 ) ( VAR_3 [ 1 ] ) ) ; boolean VAR_6 = ( ( VAR_5 . METHOD_2 ( ) ) == ( VAR_7 ) ) && ( VAR_2 == null ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_6 ) ; } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { return new TYPE_1 ( vds . METHOD_2 ( ) , STRING_1 , true ) ; } catch ( TYPE_2 e ) { VAR_1 . error ( STRING_2 , vds . getId ( ) , vds . getName ( ) , vds . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( e ) ) ; VAR_1 . METHOD_4 ( STRING_3 , e ) ; } return null ; } 
private void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = METHOD_2 ( ) ; TYPE_1 . when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ) . thenReturn ( VAR_2 ) ; TYPE_1 . when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_1 . when ( VAR_3 . METHOD_4 ( vmId ) ) . thenReturn ( VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( VAR_2 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_3 ( INT_1 ) ; VAR_3 . METHOD_4 ( 2 ) ; VAR_3 . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( ) ) ; TYPE_5 . METHOD_6 ( VAR_1 . METHOD_7 ( STRING_1 , VAR_3 ) ) ; TYPE_5 . METHOD_6 ( VAR_1 . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( VAR_4 ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ; org.mockito.Mockito.doReturn ( TYPE_3 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; TYPE_4 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_5 . name ( ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_4 . name ( ) ) ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) , VAR_2 , VAR_3 , VAR_4 . Collections < java.lang.String , java.lang.Object > METHOD_4 ( VAR_5 , STRING_1 ) , true , true ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = dao . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; dao . METHOD_4 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network VAR_3 = dao . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_5 ( VAR_3 ) ; TYPE_1 . assertEquals ( VAR_1 , VAR_3 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( VAR_3 . getName ( ) ) ; VAR_4 . setId ( VAR_3 . getId ( ) ) ; VAR_2 . add ( VAR_4 ) ; } return VAR_2 ; } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , vmId ) , VAR_1 , TYPE_3 . getName ( ) , STRING_1 , 0 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true , false , STRING_1 , null , null ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; final TYPE_2 VAR_2 = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; final TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ; TYPE_4 . assertEquals ( VAR_2 , VAR_3 ) ; } 
public TYPE_1 . VdcQueryReturnValue RunQuery ( TYPE_1 . VdcQueryType VAR_1 , TYPE_2 VAR_2 ) { VAR_3 . METHOD_1 ( STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; return METHOD_5 ( ) . RunQuery ( VAR_1 , VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . DiskImage VAR_1 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . getParameters ( ) . METHOD_5 ( ) . equals ( VAR_1 . METHOD_6 ( ) . get ( 0 ) ) ) ; TYPE_2 . METHOD_4 ( ( ( VAR_2 . getParameters ( ) . METHOD_7 ( ) ) == ( VAR_1 . METHOD_8 ( ) ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vds . METHOD_4 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_2 : VAR_1 ) { TYPE_2 . METHOD_5 ( vds . METHOD_4 ( ) , VAR_2 ) ; } return null ; } 
protected TYPE_1 getEntity ( int VAR_1 ) { TYPE_1 entity = new TYPE_1 ( ) ; entity . setId ( VAR_2 [ VAR_1 ] ) ; entity . METHOD_1 ( VAR_3 [ VAR_1 ] ) ; entity . METHOD_2 ( VAR_4 [ VAR_1 ] ) ; entity . METHOD_3 ( new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) ) ; entity . METHOD_6 ( VAR_5 ) ; return entity ; } 
private boolean METHOD_1 ( TYPE_1 model ) { for ( TYPE_2 a : VAR_1 . Linq < TYPE_2 > METHOD_2 ( METHOD_3 ( ) ) ) { if ( ( a . METHOD_4 ( ) ) == ( VAR_2 ) ) { return true ; } } return false ; } 
protected boolean METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , boolean VAR_2 , TYPE_1 . DiskImage diskImage , TYPE_2 VAR_3 , org.ovirt.engine.core.common.businessentities.StorageDomain VAR_4 ) { boolean VAR_5 = METHOD_2 ( diskImage ) ; if ( VAR_5 && ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) { return false ; } return super . METHOD_1 ( VAR_1 , VAR_2 , diskImage , VAR_3 , VAR_4 ) ; } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , TYPE_2 type , TYPE_3 VAR_3 ) { TYPE_4 dao = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( ) ) . thenReturn ( dao ) ; TYPE_1 VAR_6 = METHOD_4 ( VAR_1 , VAR_2 , type , VAR_3 ) ; org.mockito.Mockito.when ( dao . METHOD_5 ( VAR_1 , VAR_2 ) ) . thenReturn ( VAR_6 ) ; return VAR_6 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { final TYPE_1 . VdcQueryReturnValue VAR_1 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ; if ( ! ( VAR_1 . getSucceeded ( ) ) ) { final TYPE_2 VAR_2 = ( ( TYPE_2 ) ( TYPE_3 . getInstance ( ) . METHOD_1 ( VAR_3 class ) ) ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return ; } VAR_4 . onSuccess ( model , returnValue ) ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( org.ovirt.engine.core.common.businessentities.DiskImage disk ) { if ( ! ( disk . METHOD_2 ( ) ) ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( disk . getId ( ) ) ; if ( ! ( vms . isEmpty ( ) ) ) { return vms . get ( 0 ) ; } } return null ; } 
TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( STRING_1 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 , STRING_2 ) ; if ( ( VAR_6 ) != null ) { VAR_1 . METHOD_2 ( VAR_7 , VAR_6 ) ; } return VAR_1 ; } 
private void METHOD_1 ( ) { final org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final TYPE_1 VAR_3 = ( ( TYPE_1 ) ( model ) ) ; VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) ; METHOD_4 ( ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_5 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; final java.lang.String VAR_4 = VAR_1 . METHOD_5 ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ; } 
private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ; iface . METHOD_2 ( TYPE_1 . instance ( ) . METHOD_3 ( INT_1 ) ) ; iface . METHOD_4 ( TYPE_1 . instance ( ) . METHOD_5 ( ) ) ; iface . METHOD_6 ( INT_2 ) ; iface . METHOD_7 ( INT_2 ) ; return iface ; } 
private void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 [ i ] . toString ( ) ) ) . thenReturn ( TYPE_1 . METHOD_2 ( i ) ) ; } } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 != null ) { org.ovirt.engine.core.compat.Guid VAR_2 = METHOD_2 ( ) ; org.ovirt.engine.core.common.businessentities . Network VAR_3 = METHOD_3 ( VAR_2 , null , VAR_1 ) ; if ( VAR_3 != null ) { return VAR_3 . getId ( ) . toString ( ) ; } } return null ; } 
public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = ( - 1 ) * ( java.lang.Boolean . METHOD_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) ) ; if ( VAR_3 != 0 ) { return VAR_3 ; } return VAR_4 . METHOD_1 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) ; VAR_2 . add ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_4 ( domain . getId ( ) ) ; TYPE_2 . METHOD_5 ( validator . METHOD_1 ( domain ) ) ; } 
public static void METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( new TYPE_2 ( ) ) ; TYPE_3 . METHOD_3 ( STRING_1 ) . METHOD_4 ( VAR_2 ) ; } catch ( TYPE_4 | TYPE_5 VAR_3 ) { throw new TYPE_6 ( java.lang.String . METHOD_5 ( STRING_2 , VAR_1 , VAR_3 . METHOD_6 ( ) ) , VAR_3 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( command . validate ( ) ) ; org.mockito.Mockito . METHOD_4 ( validator , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_2 . any ( VAR_1 . Boolean class ) , TYPE_2 . any ( VAR_2 class ) ) ; org.mockito.Mockito . METHOD_4 ( validator , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_7 ( TYPE_2 . any ( VAR_1 . Boolean class ) , TYPE_2 . any ( VAR_3 class ) ) ; } 
public void METHOD_1 ( ) { java.lang.String version = METHOD_2 ( ) . toString ( ) ; TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; VAR_2 = ( ( java.lang.Integer ) ( returnValue ) ) ; VAR_1 . METHOD_4 ( ) ; } } , getModel ( ) . METHOD_5 ( ) ) , version ) ; } 
public void METHOD_1 ( ) { if ( ( getWindow ( ) ) != null ) { return ; } final TYPE_1 VAR_1 = new TYPE_1 ( this , getEntity ( ) ) ; METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( ) . setItems ( TYPE_2 . METHOD_4 ( getEntity ( ) ) ) ; VAR_1 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ; } 
protected void METHOD_1 ( ) { if ( ( getModel ( ) . METHOD_2 ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . METHOD_2 ( ) ; boolean VAR_1 = ( cluster . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) >= 0 ; getModel ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; getModel ( ) . METHOD_7 ( ) . METHOD_6 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) { log . METHOD_2 ( STRING_1 , this . METHOD_3 ( ) . getName ( ) ) ; TYPE_1 . METHOD_4 ( new TYPE_2 < java.lang.Object > ( ) { public java.lang.Object METHOD_5 ( ) { try { TYPE_3 . getInstance ( ) . METHOD_6 ( getReturnValue ( ) . METHOD_7 ( ) ) ; } catch ( java.lang.Exception e ) { log . METHOD_8 ( STRING_2 , VAR_1 this . METHOD_3 ( ) . getName ( ) ) ; } return null ; } } ) ; } 
public boolean validate ( ) { int VAR_1 = ( TYPE_1 . METHOD_1 ( vm . METHOD_2 ( ) ) ) ? TYPE_1 . METHOD_3 ( ) : TYPE_1 . METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( new TYPE_2 [ ] { new TYPE_3 ( ) , new TYPE_4 ( VAR_1 ) , new TYPE_5 ( ) } ) ; return METHOD_5 ( ) . METHOD_7 ( ) ; } 
private TYPE_1 . Disk METHOD_1 ( java.util.List < TYPE_1 . Disk > VAR_1 ) { for ( TYPE_1 . Disk disk : VAR_1 ) { TYPE_2 VAR_2 = disk . METHOD_2 ( getVm ( ) . getId ( ) ) ; if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) ) ) { return disk ; } } return null ; } 
public void METHOD_1 ( ) { TYPE_1 . VM vm = new TYPE_1 . VM ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; vm . METHOD_4 ( VAR_1 ) ; TYPE_3 . METHOD_5 ( ) ; TYPE_1 . VM map = TYPE_4 . map ( vm , null ) ; METHOD_6 ( map . METHOD_7 ( ) . METHOD_8 ( ) ) ; assertEquals ( map . METHOD_7 ( ) . METHOD_8 ( ) , STRING_1 ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( getEntity ( ) . getStoragePoolId ( ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_2 < java.lang.String > ) ( returnValue ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } } ) ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 . Disk METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_3 . Disk , TYPE_3 . Disk > ( VAR_5 , VAR_2 , VAR_4 ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( STRING_1 ) ; vm . METHOD_3 ( VAR_1 ) ; java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; TYPE_1 . METHOD_4 ( VAR_3 . METHOD_5 ( vm , VAR_2 ) ) ; TYPE_1 . METHOD_4 ( VAR_2 . isEmpty ( ) ) ; } 
private void METHOD_1 ( java.lang.String action , java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( action ) ) ; if ( ( action . equals ( STRING_1 ) ) || ( action . equals ( STRING_2 ) ) ) { VAR_2 . METHOD_4 ( VAR_1 ) ; } else { VAR_3 . METHOD_5 ( STRING_3 ) ; throw new TYPE_2 ( ( ( ( ( STRING_4 + action ) + CHAR_1 ) + VAR_1 ) + STRING_5 ) ) ; } } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; TYPE_2 value = new TYPE_2 ( ) ; value . METHOD_3 ( STRING_1 ) ; value . METHOD_4 ( ) . add ( VAR_3 ) ; value . METHOD_5 ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( value ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getSelectedItem ( ) ) ) ; org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_3 = new TYPE_2 ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) , VAR_4 this ) ; METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; } } ; TYPE_3 . METHOD_4 ( VAR_1 , vm . getId ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) ; command . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( command ) ; org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( 0 ) ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) ; } 
public TYPE_1 METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getStoragePoolId ( ) . getValue ( ) ) ; for ( final org.ovirt.engine.core.common.businessentities . network VAR_2 : VAR_1 ) { METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) ; } METHOD_4 ( ) . METHOD_7 ( ) ; return null ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 model = ( ( TYPE_3 ) ( sender ) ) ; java.lang.String VAR_2 = ( ( TYPE_4 ) ( args ) ) . VAR_3 ; if ( STRING_1 . equals ( VAR_2 ) ) { METHOD_2 ( model ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) ; command . METHOD_4 ( VAR_1 . getId ( ) ) ; TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) ; TYPE_1 . METHOD_5 ( ) ; TYPE_2 < TYPE_3 , TYPE_4 > VAR_2 = METHOD_6 ( VAR_3 ) ; VAR_2 . METHOD_7 ( ) . setId ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; METHOD_8 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { try { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) ) ; TYPE_3 < org.ovirt.engine.core.compat.Guid > VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 ) ; TYPE_5 . METHOD_4 ( STRING_1 , VAR_2 ) ; TYPE_5 . METHOD_5 ( STRING_2 , ( ! ( VAR_2 . isEmpty ( ) ) ) ) ; } catch ( java.lang.Exception e ) { e . METHOD_6 ( ) ; } } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ; TYPE_2 VAR_1 = new TYPE_2 ( vds ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_2 ) ) ; } 
protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface map ( TYPE_1 entity , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface template ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface = super . map ( entity , template ) ; if ( entity . METHOD_1 ( ) ) { TYPE_2 . Network VAR_1 = METHOD_2 ( entity . METHOD_3 ( ) ) ; iface . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } return iface ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { java.lang.String VAR_3 = new java.lang.Integer ( VAR_1 . METHOD_2 ( ) ) . toString ( ) ; if ( ( ! ( TYPE_2 . isEmpty ( VAR_3 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ) { VAR_2 . put ( VAR_4 , VAR_3 ) ; } } 
public void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; try { if ( ! ( VAR_4 ) ) { METHOD_5 ( STRING_2 ) ; } for ( java.lang.String VAR_5 : VAR_1 ) { METHOD_6 ( VAR_5 ) ; } } finally { VAR_3 . METHOD_3 ( ) . METHOD_7 ( ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) { VAR_2 = new TYPE_3 ( VAR_3 class ) ; } else if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) { VAR_2 = new TYPE_3 ( VAR_4 class ) ; } else if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) { VAR_2 = new TYPE_3 ( VAR_5 class ) ; } else { } return VAR_2 ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . METHOD_2 ( ) ; java.lang.Integer VAR_1 = getModel ( ) . METHOD_3 ( ) . getSelectedItem ( ) ; if ( ( cluster != null ) && ( VAR_1 != null ) ) { METHOD_1 ( cluster . METHOD_4 ( ) , VAR_1 ) ; } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , METHOD_3 ( ) ) ; METHOD_2 ( VAR_6 , VAR_7 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , METHOD_4 ( ) , VAR_2 ) ; VAR_8 . METHOD_5 ( ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( VAR_2 . METHOD_4 ( ) ) { VAR_3 . put ( VAR_2 . getId ( ) , TYPE_2 . METHOD_5 ( VAR_2 , METHOD_6 ( ) ) ) ; } else { VAR_3 . put ( VAR_2 . getId ( ) , new TYPE_2 ( VAR_2 , METHOD_6 ( ) ) ) ; } } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 } , METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_3 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 , java.lang.String VAR_4 , java.lang.String action , TYPE_2 . VdcActionType VAR_5 , java.lang.String VAR_6 ) { TYPE_3 VAR_7 = getSelectedItem ( ) ; if ( VAR_7 == null ) { return ; } METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_8 . METHOD_3 ( ) , VAR_9 . METHOD_4 ( action ) , VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) , VAR_7 . METHOD_7 ( ) ) ; METHOD_8 ( VAR_5 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( null ) ; TYPE_1 parameters = METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_2 VAR_4 = METHOD_5 ( parameters ) ; METHOD_6 ( VAR_1 , VAR_3 ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 , VAR_1 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; } 
private void METHOD_1 ( ) { for ( TYPE_1 . Disk image : METHOD_2 ( ) ) { VAR_1 . put ( image . getId ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( image ) ) ) ; } TYPE_2 . getParameters ( ) . METHOD_3 ( VAR_1 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_1 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; } 
private static java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , TYPE_1 < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 ) { if ( VAR_1 == null ) { return TYPE_2 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( vm . getId ( ) ) , true , false ) ; } else { return TYPE_2 . METHOD_2 ( VAR_1 , true , false ) ; } } 
public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( INT_1 ) ; getName ( ) . METHOD_3 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( INT_2 ) ; METHOD_4 ( ) . METHOD_3 ( new TYPE_2 [ ] { new TYPE_3 ( ) , VAR_1 } ) ; return ( getName ( ) . METHOD_5 ( ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_3 ( VAR_3 . VDS class ) ) ; TYPE_2 . METHOD_4 ( validator . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_4 ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( java.lang.Boolean ) ( source ) ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . DiskImage disk = METHOD_2 ( ) ; disk . METHOD_3 ( VAR_1 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( disk ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . any ( VAR_5 . Integer class ) , TYPE_2 . any ( VAR_6 . Version class ) ) ) . thenReturn ( new TYPE_3 < > ( VAR_7 ) ) ; METHOD_6 ( false ) ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( TYPE_1 . RunVmCommand < TYPE_2 > VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_3 ( VAR_1 , VAR_3 ) ; org.mockito.Mockito.when ( VAR_3 . get ( command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( vm ) ; TYPE_4 . METHOD_5 ( VAR_4 class ) ; return vm ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; for ( TYPE_1 parameters : VAR_1 . getParameters ( ) . METHOD_3 ( ) ) { METHOD_4 ( parameters ) ; TYPE_2 . METHOD_5 ( parameters . METHOD_6 ( ) , VAR_2 ) ; } TYPE_3 . METHOD_7 ( VAR_1 . METHOD_8 ( ) , true ) ; VAR_1 . METHOD_9 ( null ) ; } 
public float METHOD_1 ( float VAR_1 , boolean VAR_2 ) { if ( VAR_1 <= FLOAT_1 ) { throw new TYPE_1 ( STRING_1 ) ; } float VAR_3 = super . METHOD_1 ( ) ; if ( ! VAR_2 ) { while ( VAR_3 == FLOAT_2 ) { VAR_3 = super . METHOD_1 ( ) ; } } return VAR_3 * VAR_1 ; } 
protected void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . getId ( ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( result ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { if ( ( domain . METHOD_4 ( ) ) == ( VAR_2 ) ) { result . METHOD_5 ( domain ) ; } } TYPE_1 . METHOD_6 ( ) . METHOD_7 ( result ) ; } 
private java.lang.String METHOD_1 ( int length ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; for ( int i = 0 ; i < length ; i ++ ) { int VAR_3 = VAR_1 . METHOD_2 ( TYPE_3 . length ( ) ) ; char VAR_4 = TYPE_3 . METHOD_3 ( VAR_3 ) ; VAR_2 . append ( VAR_4 ) ; } return VAR_2 . toString ( ) ; } 
private void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return ; } TYPE_1 < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) { public void METHOD_6 ( TYPE_3 VAR_2 , java.lang.Object sender , TYPE_4 args ) { METHOD_7 ( ) ; } } ) ; if ( ( VAR_1 . getSelectedItem ( ) ) != null ) { METHOD_7 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_1 ( VAR_2 ) ) ; TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; try { TYPE_3 . METHOD_3 ( new TYPE_4 ( VAR_3 , STRING_1 , VAR_1 . get ( 0 ) ) ) ; } catch ( TYPE_5 VAR_4 ) { return ; } TYPE_6 . METHOD_4 ( STRING_2 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; org.mockito.Mockito . METHOD_3 ( VAR_2 ) . METHOD_4 ( cluster ) ; org.mockito.Mockito . METHOD_3 ( VAR_3 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( VAR_4 ) , TYPE_1 . any ( VAR_5 class ) ) ; TYPE_2 . METHOD_7 ( VAR_1 . getReturnValue ( ) . getSucceeded ( ) ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( STRING_1 ) . when ( METHOD_4 ( ) ) . METHOD_5 ( VAR_4 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_5 ) . METHOD_7 ( TYPE_1 . any ( VAR_6 . Guid class ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) { void METHOD_3 ( ) { } } ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_1 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_6 ( ) ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_6 ( ) ) ; } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { METHOD_1 ( ) ; getModel ( ) . METHOD_2 ( ) . setEntity ( ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; METHOD_3 ( ) ; if ( VAR_2 ) { METHOD_4 ( VAR_3 ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_4 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_4 ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( cmd ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( false ) ; cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) , null ) ) ; METHOD_6 ( VAR_4 ) ; TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( TYPE_1 response ) { TYPE_2 id = response . getId ( ) ; if ( VAR_1 class . METHOD_2 ( id ) ) { this . VAR_2 . METHOD_3 ( response ) ; } TYPE_3 VAR_3 = this . VAR_2 . METHOD_4 ( response . getId ( ) ) ; if ( VAR_3 == null ) { this . log . error ( STRING_1 , response . getId ( ) ) ; return ; } VAR_3 . METHOD_5 ( response ) ; } 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 < ? > VAR_2 , final TYPE_3 VAR_3 ) { return new TYPE_1 ( ) { public TYPE_4 METHOD_2 ( ) { TYPE_4 VAR_4 = ( ( TYPE_4 ) ( VAR_5 . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_1 ) ) ) ; VAR_4 . METHOD_5 ( VAR_7 , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) . METHOD_9 ( ) ) ; return VAR_4 ; } } ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 < TYPE_4 > VAR_2 = model . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 . METHOD_4 ( ) ) { TYPE_4 VAR_3 = model . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 , java.lang.String VAR_4 , java.lang.String action , TYPE_2 . VdcActionType VAR_5 , java.lang.String VAR_6 ) { TYPE_3 VAR_7 = getSelectedItem ( ) ; if ( VAR_7 == null ) { return ; } METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_8 . METHOD_3 ( ) , VAR_9 . METHOD_4 ( action ) , VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) , VAR_7 . METHOD_7 ( ) , null ) ; METHOD_8 ( VAR_5 ) ; } 
private static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , final boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_3 : ( ( TYPE_2 < TYPE_1 > ) ( source ) ) ) { if ( ( ! VAR_1 ) || ( VAR_3 . METHOD_2 ( ) ) ) { VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ; } } return VAR_2 ; } } ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Disk model = new TYPE_1 . Disk ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) ; VAR_2 . add ( VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_2 ( VAR_5 ) ; METHOD_4 ( VAR_4 ) ; VAR_6 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_7 ) { METHOD_8 ( VAR_7 , VAR_8 , VAR_4 ) ; } finally { VAR_2 . METHOD_9 ( ) ; } } 
private < TYPE_1 > TYPE_1 METHOD_1 ( java.lang.Object source , TYPE_2 < TYPE_1 > type , TYPE_3 VAR_1 ) { try { return VAR_1 . METHOD_2 ( source . toString ( ) , type ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( e ) ; } catch ( TYPE_6 e ) { throw new TYPE_5 ( e ) ; } catch ( TYPE_7 e ) { throw new TYPE_5 ( e ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == ( VAR_3 ) ) { return METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } else if ( VAR_2 == ( VAR_4 ) ) { return METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ; } else { VAR_5 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_4 ( ) ) ; } return VAR_6 ; } 
protected void METHOD_1 ( TYPE_1 model ) throws java.lang.Exception { METHOD_2 ( model ) ; assertEquals ( TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) , model . getId ( ) ) ; assertEquals ( TYPE_3 . value ( ) , model . getStatus ( ) . METHOD_4 ( ) ) ; METHOD_5 ( model ) ; } 
public void METHOD_1 ( ) { TYPE_1 . VM vm = new TYPE_1 . VM ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; vm . METHOD_4 ( VAR_1 ) ; TYPE_1 . VM map = TYPE_3 . map ( vm , ( ( TYPE_1 . VM ) ( null ) ) ) ; METHOD_5 ( map . METHOD_6 ( ) . METHOD_7 ( ) ) ; assertEquals ( map . METHOD_6 ( ) . METHOD_7 ( ) , STRING_1 ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; } 
public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( INT_1 ) ; getName ( ) . METHOD_3 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar , new TYPE_4 ( ) } ) ; return getName ( ) . METHOD_4 ( ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 . AuditLogType VAR_1 ) { final java.lang.String VAR_2 = VAR_1 . name ( ) ; try { return VAR_3 . getString ( VAR_2 ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( STRING_1 , VAR_2 , TYPE_2 . METHOD_2 ( ) ) ; return null ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_3 ( STRING_2 , VAR_1 ) ; nic . METHOD_4 ( TYPE_1 . instance ( ) . METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 ) ; METHOD_7 ( nic ) ; TYPE_2 VAR_2 = METHOD_8 ( METHOD_9 ( nic ) ) ; METHOD_10 ( VAR_2 ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == null ) { TYPE_2 VAR_1 = METHOD_3 ( VAR_2 ) ; if ( VAR_1 != null ) { TYPE_1 . getVm ( ) . METHOD_4 ( VAR_1 ) ; } else { TYPE_1 . getVm ( ) . METHOD_4 ( METHOD_3 ( VAR_3 ) ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { if ( ( ( VAR_1 . getId ( ) ) != null ) && ( ! ( VAR_1 . getId ( ) . equals ( STRING_1 ) ) ) ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_3 , new TYPE_2 ( VAR_1 , VAR_2 ) , null , this ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.String url , java.lang.String VAR_1 , java.util.List < TYPE_2 > params ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( VAR_1 + ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ( url + ( VAR_4 ) ) , params ) ) ; return VAR_2 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_4 = ( VAR_2 == null ) ? null : METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_6 ) , TYPE_3 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_3 ) . thenReturn ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VDS ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_2 ( ) ; VAR_2 = new TYPE_1 ( ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; VAR_2 . METHOD_5 ( STRING_2 ) ; VAR_2 . METHOD_6 ( STRING_3 ) ; VAR_2 . METHOD_7 ( true ) ; VAR_2 . METHOD_8 ( STRING_4 ) ; VAR_3 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_5 ) ) ; } 
public boolean METHOD_1 ( java.lang.Integer value , TYPE_1 context ) { final java.util.List < java.lang.String > VAR_1 = VAR_2 < java.util.List < java.lang.String > > METHOD_2 ( VAR_3 ) ; if ( ( value == null ) || ( VAR_1 == null ) ) { return false ; } return VAR_1 . METHOD_3 ( value . toString ( ) ) ; } 
public final void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Object value ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_1 ( ) ; VAR_4 . put ( VAR_5 , VAR_1 ) ; TYPE_1 VAR_6 = VAR_7 . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_6 != null ) { VAR_3 = VAR_6 ; } } VAR_4 . put ( VAR_2 , value ) ; } 
public void METHOD_1 ( TYPE_1 object ) { VAR_1 . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) ; VAR_1 . METHOD_1 ( object . METHOD_3 ( ) ) ; VAR_2 . METHOD_1 ( object ) ; METHOD_4 ( object ) ; METHOD_5 ( object ) ; METHOD_6 ( object ) ; METHOD_7 ( object ) ; VAR_3 . METHOD_8 ( false ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 id = null ; try { id = new TYPE_2 ( name . METHOD_2 ( STRING_1 ) ) ; } catch ( TYPE_3 e ) { return null ; } return new TYPE_1 ( this , id , name ) ; } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 . DiskImage diskImage : vm . METHOD_2 ( ) ) { VAR_1 . add ( TYPE_3 . METHOD_3 ( diskImage ) ) ; } getModel ( ) . METHOD_4 ( VAR_1 ) ; getModel ( ) . METHOD_5 ( ) . METHOD_6 ( true ) ; getModel ( ) . METHOD_5 ( ) . METHOD_7 ( true ) ; METHOD_8 ( ) ; } 
private void METHOD_1 ( boolean VAR_1 , boolean VAR_2 ) { TYPE_1 . DiskImage disk = new TYPE_1 . DiskImage ( ) ; org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; disk . setId ( VAR_3 ) ; disk . METHOD_3 ( VAR_1 ) ; VAR_4 . add ( disk ) ; VAR_5 . add ( METHOD_4 ( VAR_3 , VAR_2 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.util.Map < java.lang.String , java.lang.String > VAR_4 = new java.util.HashMap < > ( ) ; VAR_4 . put ( STRING_1 , VAR_2 ) ; VAR_4 . put ( STRING_2 , VAR_3 ) ; TYPE_2 tempVar = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ; tempVar . METHOD_3 ( true ) ; TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_5 , tempVar , TYPE_5 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( STRING_3 ) ; dao . METHOD_5 ( TYPE_2 . METHOD_6 ( new TYPE_1 [ ] { VAR_2 , VAR_1 } ) ) ; TYPE_3 . assertEquals ( VAR_2 , dao . get ( VAR_2 . getId ( ) ) ) ; TYPE_3 . assertEquals ( VAR_1 , dao . get ( VAR_1 . getId ( ) ) ) ; } 
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_3 . put ( VAR_4 , VAR_4 ) ; } METHOD_2 ( ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { METHOD_3 ( ) . put ( VAR_4 , VAR_5 ) ; } for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_6 . put ( VAR_4 , VAR_7 ) ; } METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( ) { void METHOD_3 ( ) { } } ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_1 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_6 ( ) ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; VAR_2 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_3 , cluster . METHOD_3 ( ) . getValue ( ) ) ) ) ; METHOD_4 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ) ) { return true ; } return false ; } } ; TYPE_1 . METHOD_2 ( aQuery , VAR_1 , 1 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
protected boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return METHOD_3 ( VAR_1 ) ; } if ( ( ( METHOD_2 ( ) . METHOD_4 ( ) ) == null ) || ( ! ( METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) ) ) { return METHOD_3 ( VAR_2 ) ; } return true ; } 
protected void METHOD_1 ( ) { VAR_1 . add ( VAR_2 , vm . METHOD_2 ( ) . toString ( ) ) ; if ( ( vm . METHOD_2 ( ) ) != ( vm . METHOD_3 ( ) ) ) { METHOD_4 ( vm . METHOD_2 ( ) ) ; } else { METHOD_5 ( vm . getId ( ) ) ; } } 
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_3 : VAR_2 ) { if ( TYPE_2 . METHOD_6 ( VAR_1 . getName ( ) , VAR_3 . getName ( ) ) ) { return VAR_3 ; } } throw new TYPE_3 ( VAR_4 ) ; } 
private static void METHOD_1 ( TYPE_1 command ) { final TYPE_2 dao = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; final org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( command . getParameters ( ) . getStoragePoolId ( ) ) ; org.mockito.Mockito.when ( dao . get ( TYPE_3 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( pool ) ; org.mockito.Mockito.doReturn ( dao ) . when ( command ) . METHOD_3 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_3 > VAR_2 = new TYPE_4 < > ( ) ; VAR_2 . add ( VAR_3 ) ; for ( TYPE_5 VAR_4 : VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_2 . add ( VAR_4 . METHOD_4 ( ) ) ; } VAR_1 . METHOD_4 ( ) . setItems ( VAR_2 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_6 ( TYPE_1 . METHOD_7 ( VAR_2 class ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) ; METHOD_9 ( true ) ; METHOD_10 ( true ) ; TYPE_3 . METHOD_11 ( command , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( TYPE_3 . getParameters ( ) ) ; return VAR_2 ; } 
public TYPE_1 getStoragePoolId ( ) { if ( ( super . getStoragePoolId ( ) ) == null ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_2 . getVm ( ) ; if ( vm != null ) { METHOD_1 ( vm . METHOD_2 ( ) ) ; } } return super . getStoragePoolId ( ) ; } 
protected boolean METHOD_1 ( ) { return ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) . isEmpty ( ) ) == false ) && ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) ) == false ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( VAR_2 ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; dao . METHOD_3 ( VAR_1 ) ; TYPE_1 result = dao . get ( new TYPE_2 ( VAR_1 . METHOD_4 ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_5 ( ) . toString ( ) ) ) ) ; TYPE_3 . METHOD_6 ( result ) ; TYPE_3 . assertEquals ( VAR_1 , result ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat . Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( version ) , aQuery ) ; } 
public void METHOD_1 ( TYPE_1 result ) { java.util.List < TYPE_2 . VdcQueryReturnValue > VAR_1 = result . METHOD_2 ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 . get ( 0 ) . getReturnValue ( ) ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_3 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( VAR_1 . get ( 1 ) . getReturnValue ( ) ) ) ; METHOD_3 ( VAR_2 , true , false ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 . METHOD_4 ( ) ) . addValue ( STRING_3 , null ) . addValue ( STRING_4 , null ) . addValue ( STRING_5 , VAR_2 . METHOD_5 ( ) ) . addValue ( STRING_6 , VAR_2 . METHOD_6 ( ) ) ; return VAR_3 ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( ) ; list . add ( new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) . METHOD_4 ( ) . get ( 0 ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) . METHOD_5 ( ) ) ) ; return list ; } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( true ) ; METHOD_7 ( true ) ; METHOD_8 ( true ) ; TYPE_3 . METHOD_9 ( command , VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { org.ovirt.engine.core.compat.Guid VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_3 == null ) { continue ; } for ( TYPE_2 VAR_4 : METHOD_2 ( ) ) { if ( VAR_3 . equals ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { METHOD_5 ( VAR_2 . METHOD_3 ( ) , VAR_4 . METHOD_3 ( ) ) ; break ; } } } } 
protected TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_4 ) ; if ( ( null != VAR_3 ) && ( ! ( TYPE_4 . METHOD_4 ( VAR_3 ) ) ) ) { VAR_3 = TYPE_4 . METHOD_2 ( METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) , VAR_4 ) ; } return VAR_3 ; } 
public void setEntity ( org.ovirt.engine.core.common.businessentities.VDS value ) { if ( ( super . getEntity ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( super . getEntity ( ) ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = value ; org.ovirt.engine.core.compat.Guid VAR_3 = VAR_1 . getId ( ) ; org.ovirt.engine.core.compat.Guid VAR_4 = VAR_2 . getId ( ) ; if ( VAR_3 . equals ( VAR_4 ) ) { setEntity ( value , false ) ; METHOD_1 ( ) ; return ; } } super . setEntity ( value ) ; } 
public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( VAR_2 ) == null ) ) { VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ; if ( ( VAR_2 ) != null ) { VAR_1 = VAR_2 . METHOD_4 ( ) ; } } return VAR_1 ; } 
private void METHOD_1 ( ) { cluster = new TYPE_1 ( ) ; cluster . METHOD_2 ( VAR_1 ) ; cluster . METHOD_3 ( VAR_2 ) ; cluster . METHOD_4 ( VAR_3 ) ; cluster . METHOD_5 ( VAR_4 ) ; cluster . METHOD_6 ( VAR_5 ) ; cluster . METHOD_7 ( VAR_6 ) ; cluster . METHOD_8 ( VAR_7 ) ; cluster . METHOD_9 ( VAR_8 ) ; cluster . METHOD_10 ( VAR_9 ) ; cluster . METHOD_11 ( VAR_10 ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( validate ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ) { return false ; } if ( ! ( validate ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ) { return false ; } return METHOD_6 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) . isEmpty ( ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; for ( TYPE_2 VAR_2 : METHOD_6 ( VAR_1 . METHOD_7 ( ) , STRING_1 , VAR_1 . METHOD_5 ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_8 ( ) . METHOD_4 ( VAR_2 . METHOD_9 ( ) ) ; } } } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { final org.ovirt.engine.core.compat.Guid VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; final org.ovirt.engine.core.compat.Guid VAR_4 = TYPE_2 . METHOD_2 ( VAR_5 , VAR_1 ) ; if ( ( VAR_2 != null ) && ( VAR_4 != null ) ) { return new TYPE_1 ( VAR_2 , VAR_4 ) ; } return null ; } 
public TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 VAR_1 = action . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , STRING_1 ) ; return METHOD_1 ( action , VAR_1 . getName ( ) , ( action . METHOD_4 ( ) ? action . METHOD_5 ( ) : false ) ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 ) { byte [ ] VAR_2 ; try { VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; } catch ( TYPE_1 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } VAR_4 . add ( VAR_5 , VAR_2 ) ; } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) ; TYPE_1 . assertEquals ( result . get ( 0 ) . getId ( ) , VAR_4 . getId ( ) ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String value , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = TYPE_4 . get ( ) . METHOD_2 ( STRING_1 ) ; VAR_3 . METHOD_3 ( value ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; TYPE_3 VAR_4 = TYPE_4 . get ( ) . METHOD_2 ( STRING_2 ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; } 
public static boolean METHOD_1 ( int value , java.util.ArrayList < java.lang.String > VAR_1 ) { boolean VAR_2 = false ; if ( ( value >= 0 ) && ( value <= ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ) { VAR_2 = true ; } else { VAR_1 . add ( TYPE_1 . toString ( ) ) ; VAR_1 . add ( java.lang.String . METHOD_3 ( STRING_1 , VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) ; VAR_2 . add ( VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_2 ( VAR_5 ) ; METHOD_4 ( VAR_6 , VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_7 ) ; try { METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_4 VAR_8 ) { METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ; } finally { VAR_2 . METHOD_9 ( ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_5 ) ; METHOD_9 ( ) . METHOD_10 ( true ) ; METHOD_9 ( ) . METHOD_11 ( ) ; TYPE_1 . METHOD_12 ( METHOD_9 ( ) , true ) ; METHOD_13 ( METHOD_9 ( ) ) ; } 
protected java.util.Map < TYPE_1 , java.lang.Integer > METHOD_1 ( TYPE_2 < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { java.util.Map < org.ovirt.engine.core.common.businessentities.DiskImage , TYPE_1 > VAR_2 = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.DiskImage , TYPE_1 > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage image : VAR_1 ) { TYPE_1 domain = METHOD_2 ( VAR_3 . get ( image . getId ( ) ) ) ; VAR_2 . put ( image , domain ) ; } return TYPE_3 . METHOD_1 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { if ( ( getWindow ( ) ) != null ) { return ; } TYPE_1 model = new TYPE_1 ( this , getEntity ( ) . METHOD_2 ( ) , ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) , getEntity ( ) . METHOD_3 ( ) ) ; METHOD_4 ( model ) ; METHOD_5 ( model ) ; } 
public TYPE_1 . VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , TYPE_2 VAR_1 , boolean VAR_2 ) { if ( ( ( getVm ( ) . METHOD_1 ( ) ) != ( VAR_3 ) ) && ( ! ( VAR_4 . METHOD_2 ( vds , getVm ( ) ) ) ) ) { VAR_1 . append ( STRING_1 ) ; return VAR_5 ; } return null ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( params . getId ( ) ) . thenReturn ( VAR_1 ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; TYPE_1 < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = new TYPE_1 ( VAR_3 , vds ) ; java.util.List < TYPE_1 < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > > VAR_4 = TYPE_2 . METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) . METHOD_8 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_4 , METHOD_7 ( ) . METHOD_9 ( ) . getReturnValue ( ) ) ; } 
public static boolean METHOD_1 ( TYPE_1 < ? > VAR_1 , TYPE_1 < ? > VAR_2 ) { if ( ( VAR_1 == null ) && ( VAR_2 == null ) ) { return true ; } if ( ( ( VAR_1 == null ) || ( VAR_2 == null ) ) || ( ( VAR_1 . size ( ) ) != ( VAR_2 . size ( ) ) ) ) { return false ; } return ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; } 
private boolean METHOD_1 ( java.util.Map < java.lang.String , java.lang.Integer > VAR_1 , java.lang.String VAR_2 ) { boolean returnValue = false ; if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { VAR_1 . put ( VAR_2 , 1 ) ; returnValue = true ; } else if ( METHOD_3 ( ) ) { METHOD_4 ( VAR_1 , VAR_2 ) ; returnValue = true ; } return returnValue ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface = METHOD_2 ( ) ; METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , 0 , TYPE_1 . instance ( ) . METHOD_6 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; } } ; TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ; } 
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_2 ( ) ) ; TYPE_2 . VdcQueryReturnValue VAR_2 = TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_3 , VAR_1 ) ; return VAR_2 . getSucceeded ( ) ? VAR_4 < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) : null ; } 
public void METHOD_1 ( ) { TYPE_1 value = new TYPE_1 ( ) ; value . METHOD_2 ( false ) ; value . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( ) , TYPE_3 . any ( ) ) ) . thenReturn ( value ) ; VAR_2 . METHOD_5 ( ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { boolean VAR_2 = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; METHOD_2 ( ( ! VAR_2 ) ) ; } } ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( cluster . getId ( ) ) , VAR_1 ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( true , vmId ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_4 . METHOD_4 ( vmId ) ; VAR_3 . add ( VAR_4 , VAR_2 ) ; } } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( vmId ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { if ( ( VAR_4 . getId ( ) ) == null ) { VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; } VAR_4 . METHOD_4 ( vmId ) ; VAR_3 . add ( VAR_4 , VAR_2 , false ) ; } } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , vmId ) , VAR_1 , TYPE_3 . getName ( ) , STRING_1 , 0 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true , false , STRING_1 , null , null , null ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds , java.util.List < TYPE_1 > VAR_1 , boolean VAR_2 ) { TYPE_2 returnValue = VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_4 , new TYPE_3 ( vds . getId ( ) , VAR_1 , VAR_2 ) ) ; return returnValue . getSucceeded ( ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( METHOD_2 ( ) ) ; TYPE_1 parameters = METHOD_3 ( ) ; command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 < TYPE_1 > ( parameters ) { public TYPE_3 METHOD_5 ( ) { return VAR_1 ; } } ) ; } 
void METHOD_1 ( ) { VAR_1 . addColumn ( new TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > ( ) { public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > VAR_2 ) { return METHOD_2 ( VAR_2 ) ; } } , VAR_3 . name ( ) ) ; VAR_4 . addColumn ( new TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > ( ) { public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > VAR_2 ) { return METHOD_2 ( VAR_2 ) ; } } , VAR_3 . name ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = METHOD_2 ( ) ; METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; try { VAR_2 . add ( model ) ; TYPE_2 . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , METHOD_8 ( ) ) ; } } 
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( java.lang.Integer ) ( TYPE_2 . getValue ( VAR_2 ) ) ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; if ( ! ( ( VAR_1 . METHOD_5 ( VAR_3 ) ) || ( VAR_1 . equals ( VAR_3 ) ) ) ) { return false ; } else { return true ; } } 
private java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( org.ovirt.engine.core.compat.Guid VAR_3 : VAR_1 ) { for ( TYPE_1 storageDomain : VAR_4 ) { if ( VAR_3 . equals ( storageDomain . getId ( ) ) ) { VAR_2 . add ( storageDomain ) ; break ; } } } return VAR_2 ; } 
public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , boolean VAR_3 ) { TYPE_2 VAR_4 = METHOD_2 ( VAR_2 ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_3 ) ; java.util.List < TYPE_1 > VAR_5 = METHOD_3 ( ) . METHOD_4 ( STRING_3 , METHOD_5 ( ) , VAR_4 ) ; return VAR_5 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) ; VAR_4 . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_5 , org.mockito.Mockito . METHOD_6 ( 0 ) ) . METHOD_7 ( TYPE_1 . any ( VAR_6 class ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
private TYPE_1 . DiskImage METHOD_1 ( ) { TYPE_1 . DiskImage disk = new TYPE_1 . DiskImage ( ) ; disk . setId ( VAR_1 ) ; disk . METHOD_2 ( INT_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( new java.util.ArrayList ( TYPE_2 . METHOD_5 ( VAR_3 ) ) ) ; disk . METHOD_6 ( VAR_4 ) ; disk . METHOD_7 ( TYPE_3 . instance ( ) . METHOD_8 ( INT_2 ) ) ; return disk ; } 
private static java.lang.String METHOD_1 ( java.lang.String source , TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 { java.lang.String result = STRING_1 ; byte [ ] VAR_2 = TYPE_8 . METHOD_2 ( source ) ; TYPE_9 VAR_3 = TYPE_9 . getInstance ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_5 , VAR_1 ) ; byte [ ] VAR_6 = VAR_3 . METHOD_4 ( VAR_2 ) ; result = new java.lang.String ( VAR_6 , STRING_2 ) ; return result ; } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_2 ) ) ; java.util.ArrayList < TYPE_3 > VAR_3 = new java.util.ArrayList ( TYPE_2 . METHOD_2 ( new TYPE_3 ( ) , new TYPE_3 ( ) ) ) ; VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) ; org.mockito.Mockito . METHOD_4 ( VAR_5 , org.mockito.Mockito . METHOD_5 ( 2 ) ) . runQuery ( TYPE_4 . any ( VAR_6 class ) , TYPE_4 . any ( VAR_7 class ) ) ; } 
public static byte [ ] METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . toString ( ) ; java.lang.String [ ] VAR_3 = VAR_2 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_3 == null ) || ( ( VAR_3 . length ) == 0 ) ) { return null ; } TYPE_2 VAR_4 = new TYPE_2 ( ) ; for ( java.lang.String VAR_5 : VAR_3 ) { TYPE_3 . METHOD_3 ( VAR_5 , VAR_4 ) ; } return VAR_4 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_4 ( STRING_2 , VAR_1 ) ; nic . METHOD_5 ( VAR_2 ) ; METHOD_6 ( nic ) ; nic . METHOD_5 ( VAR_3 ) ; TYPE_1 VAR_4 = METHOD_7 ( METHOD_8 ( nic ) ) ; METHOD_9 ( VAR_4 , VAR_1 ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) ) ; java.lang.String VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 ) . toString ( ) . METHOD_5 ( ) ; java.lang.String VAR_3 = vm . METHOD_4 ( ) . toString ( ) . METHOD_5 ( ) ; if ( VAR_3 . equals ( VAR_2 ) ) VAR_4 . add ( VAR_5 , VAR_2 ) ; else VAR_4 . add ( VAR_5 , VAR_3 ) ; } 
private static TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , boolean VAR_1 ) { TYPE_1 VAR_2 = iface . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 VAR_3 = iface . METHOD_2 ( ) . METHOD_4 ( ) ; if ( ! VAR_1 ) { VAR_2 = TYPE_2 . METHOD_5 ( VAR_2 ) ; VAR_3 = TYPE_2 . METHOD_5 ( VAR_3 ) ; } if ( VAR_2 == null ) { return VAR_3 ; } else if ( VAR_3 == null ) { return VAR_2 ; } else { return TYPE_3 . METHOD_6 ( VAR_2 , VAR_3 ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_2 ( ) . getId ( ) , TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) ; TYPE_1 . getReturnValue ( ) . METHOD_10 ( TYPE_1 . METHOD_2 ( ) . getId ( ) ) ; TYPE_1 . METHOD_11 ( true ) ; } 
protected org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; vm . METHOD_3 ( INT_1 ) ; vm . setId ( vmId ) ; vm . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) ; METHOD_7 ( vm ) ; return vm ; } 
private static TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( 0 ) ; VAR_1 . METHOD_7 ( null ) ; VAR_1 . METHOD_8 ( VAR_3 ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( new java.util.ArrayList < TYPE_3 > ( ) , vmId ) , null ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ! ( VAR_1 . METHOD_2 ( ) . equals ( STRING_1 ) ) ) ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_3 , new TYPE_2 ( VAR_1 , VAR_2 ) , null , this ) ; } } 
public void METHOD_1 ( ) { parameters . METHOD_2 ( TYPE_1 ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( TYPE_1 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_5 ( command ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_1 . METHOD_3 ( ) . getEntity ( ) ; METHOD_4 ( VAR_1 ) ; frontend . METHOD_5 ( VAR_2 , VAR_3 ) ; user . METHOD_6 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) . setEntity ( null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = METHOD_2 ( VAR_1 . METHOD_5 ( ) ) ; VAR_4 = dao . get ( VAR_5 ) ; VAR_6 = new TYPE_1 ( ) ; VAR_6 . METHOD_6 ( STRING_1 ) ; VAR_6 . METHOD_7 ( VAR_4 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( STRING_2 ) ; VAR_6 . METHOD_10 ( new TYPE_2 ( ) ) ; } 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; if ( ( METHOD_2 ( ) ) != null ) { for ( TYPE_3 item : METHOD_2 ( ) ) { TYPE_3 a = item ; VAR_1 . add ( a . METHOD_3 ( ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 . Network > ( ) ) ; VAR_4 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_6 ( VAR_5 ) ; } } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : VAR_1 ) { if ( TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) ) ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { return new TYPE_1 ( METHOD_2 ( ) . getEntity ( ) , METHOD_3 ( ) . getEntity ( ) , TYPE_2 . METHOD_4 ( METHOD_5 ( ) . getEntity ( ) , METHOD_6 ( ) . getEntity ( ) ) , METHOD_7 ( ) . getEntity ( ) , VAR_1 , ( ( METHOD_8 ( ) . getSelectedItem ( ) ) != null ? METHOD_8 ( ) . getSelectedItem ( ) . getId ( ) : null ) ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat . Version VAR_1 ) { org.ovirt.engine.core.common.businessentities.VDS vds = METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ; org.ovirt.engine.core.compat . Version VAR_2 = vds . METHOD_4 ( ) ; log . METHOD_5 ( STRING_1 , VAR_2 , VAR_1 ) ; return ( ( VAR_2 . METHOD_6 ( ) ) == ( VAR_1 . METHOD_6 ( ) ) ) && ( ( VAR_2 . METHOD_7 ( ) ) <= ( VAR_1 . METHOD_7 ( ) ) ) ; } 
private void METHOD_1 ( TYPE_1 version ) { version . METHOD_2 ( new TYPE_2 ( ) ) ; if ( TYPE_3 . METHOD_3 ( version , VAR_1 ) ) { METHOD_4 ( version , VAR_2 ) ; } if ( TYPE_3 . METHOD_3 ( version , VAR_3 ) ) { METHOD_4 ( version , VAR_4 , VAR_5 ) ; } if ( TYPE_3 . METHOD_3 ( version , VAR_6 ) ) { METHOD_4 ( version , VAR_7 ) ; } } 
private static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , java.util.ArrayList < java.lang.String > VAR_1 ) { boolean VAR_2 = false ; if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vmId ) . size ( ) ) > 0 ) { VAR_2 = true ; if ( VAR_1 != null ) { VAR_1 . add ( TYPE_1 . toString ( ) ) ; } } return VAR_2 ; } 
public boolean METHOD_1 ( ) { boolean result = false ; switch ( vds . getStatus ( ) ) { case VAR_1 : case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : result = true ; break ; default : break ; } return result ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat . Version VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . setId ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_5 . get ( VAR_2 ) ) . thenReturn ( VAR_3 ) ; return VAR_3 ; } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_7 ( ) , STRING_2 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 . METHOD_8 ( ) , VAR_1 , 1 ) ; TYPE_4 . METHOD_9 ( STRING_3 , VAR_3 . METHOD_10 ( ) ) ; TYPE_4 . METHOD_11 ( STRING_4 , VAR_3 . METHOD_12 ( STRING_5 ) ) ; } 
public boolean METHOD_1 ( TYPE_1 iface , java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . Network > VAR_1 ) { java.lang.String VAR_2 = iface . METHOD_2 ( ) ; return ( VAR_1 . METHOD_3 ( VAR_2 ) ) && ( VAR_1 . get ( VAR_2 ) . METHOD_4 ( ) ) ; } 
protected java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( org.ovirt.engine.core.compat.Guid TYPE_2 : VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( TYPE_2 . toString ( ) ) ; VAR_2 . add ( VAR_4 ) ; } if ( VAR_1 ) { TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_2 ( VAR_6 ) ; VAR_2 . add ( VAR_5 ) ; } return VAR_2 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ( ( ( java.util.List ) ( source ) ) . size ( ) ) > 0 ) ) { return true ; } return false ; } } ; TYPE_1 . METHOD_2 ( aQuery , VAR_1 , 1 ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ; } 
public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_2 . get ( ) ; } else if ( VAR_1 . getName ( ) . equals ( STRING_1 ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) , TYPE_1 . METHOD_3 ( TYPE_2 . valueOf ( 0 ) ) , TYPE_3 . METHOD_4 ( STRING_1 ) ) ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_3 = VAR_1 . METHOD_5 ( VAR_4 ) ; TYPE_4 . assertEquals ( STRING_2 , 1 , VAR_3 . size ( ) ) ; TYPE_4 . assertEquals ( STRING_3 , VAR_3 . get ( 0 ) , VAR_2 ) ; } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < TYPE_1 > list = METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) , VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_3 ( list , new TYPE_3 ( ) ) ; return list ; } return new java.util.ArrayList < TYPE_1 > ( ) ; } 
private boolean METHOD_1 ( ) { return ( ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) || ( ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) == null ) ) || ( METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 type = TYPE_2 . instance ( ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( type ) ; TYPE_3 VAR_1 = org.mockito.Mockito . METHOD_6 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_7 ( VAR_3 , type , VAR_4 , METHOD_4 ( ) . METHOD_8 ( ) ) ) . thenReturn ( VAR_5 ) ; org.mockito.Mockito.when ( METHOD_9 ( ) . METHOD_10 ( ) ) . thenReturn ( VAR_1 ) ; METHOD_11 ( false ) ; } 
protected TYPE_1 . DiskImage METHOD_1 ( ) { if ( ( diskImage ) == null ) { TYPE_1 . Disk disk = METHOD_2 ( ) . get ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; if ( ( disk != null ) && ( ( disk . METHOD_4 ( ) ) == ( VAR_1 ) ) ) { diskImage = ( ( TYPE_1 . DiskImage ) ( disk ) ) ; } } return diskImage ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , INT_1 , INT_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , INT_1 , VAR_3 ) ; assertEquals ( STRING_2 , INT_1 , VAR_4 ) ; assertEquals ( STRING_3 , INT_1 , VAR_5 ) ; assertEquals ( STRING_4 , 0 , VAR_6 ) ; assertEquals ( STRING_5 , 0 , VAR_7 ) ; } 
protected boolean METHOD_1 ( TYPE_1 status ) { boolean returnValue = false ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { returnValue = ( VAR_1 . METHOD_3 ( ) ) == status ; if ( ( ! returnValue ) && ( ! ( TYPE_2 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . toString ( ) ) ) ) ) { addCanDoActionMessage ( TYPE_3 ) ; } } return returnValue ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 . isEmpty ( ) ) ; TYPE_3 VAR_5 = VAR_6 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_3 ) ; VAR_1 = METHOD_7 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_8 ( VAR_1 . isEmpty ( ) ) ; } 
private static java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.lang.String VAR_1 ; if ( TYPE_1 . isEmpty ( vm . METHOD_1 ( ) ) ) { vm . METHOD_2 ( VAR_2 < java.lang.String > METHOD_3 ( VAR_3 ) ) ; } if ( VAR_4 . METHOD_4 ( vm . METHOD_5 ( ) . METHOD_6 ( ) , null ) ) { VAR_1 = TYPE_2 . METHOD_7 ( vm . METHOD_1 ( ) ) ; } else { VAR_1 = vm . METHOD_1 ( ) ; } return VAR_1 ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . getVm ( ) ; TYPE_2 . METHOD_3 ( vm ) ; METHOD_4 ( vm ) ; if ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) { METHOD_6 ( vm ) ; } else { METHOD_7 ( vm ) ; } TYPE_1 . METHOD_8 ( true ) ; } 
protected java.util.List < TYPE_1 . Network > METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity ( VAR_1 . VDS class , VAR_2 , new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( METHOD_3 ( ) ) ) , STRING_1 ) ; return getEntity ( VAR_3 . List class , VAR_4 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vds . METHOD_4 ( ) ) , STRING_2 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > result = new java.util.ArrayList ( VAR_1 ) ; if ( ( ( VAR_2 ) != null ) && ( ( VAR_2 ) instanceof TYPE_2 ) ) { result . METHOD_2 ( ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_1 ( ) ) ; } result . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_4 : : getName ) ) ; return result ; } 
private TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_1 . METHOD_3 ( ) ; org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . getId ( ) ; return TYPE_3 . METHOD_4 ( ( VAR_4 == null ? null : VAR_4 . toString ( ) ) , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) ? VAR_2 : ( ( TYPE_1 ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; TYPE_2 VAR_3 = ( ( METHOD_3 ( ) . getSelectedItem ( ) ) == null ) ? VAR_4 : ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( METHOD_3 ( ) . getSelectedItem ( ) ) ) . METHOD_4 ( ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; METHOD_6 ( VAR_1 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_3 ( TYPE_2 . any ( VAR_4 . VdsNetworkInterface class ) , TYPE_3 . METHOD_5 ( ) ) ; } 
private java.util.List < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 nic : VAR_1 ) { if ( ( ( nic . METHOD_2 ( ) ) && ( nic . METHOD_3 ( ) ) ) && ( nic . METHOD_4 ( ) ) ) { TYPE_2 . Network VAR_3 = METHOD_5 ( nic . METHOD_6 ( ) ) ; VAR_2 . add ( VAR_3 . METHOD_7 ( ) ) ; } } return VAR_2 ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > models ) { for ( TYPE_1 model : models ) { if ( model instanceof TYPE_2 ) { ( ( TYPE_2 ) ( model ) ) . METHOD_2 ( ) . METHOD_3 ( this ) ; } else if ( model instanceof org.ovirt.engine.ui.uicommonweb.models.EntityModel ) { ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( model ) ) . METHOD_4 ( ) . METHOD_3 ( this ) ; } } } 
public TYPE_1 METHOD_1 ( ) { TYPE_1 params = super . METHOD_1 ( ) ; if ( ( METHOD_2 ( ) . getSelectedItem ( ) ) != null ) { params . METHOD_3 ( ( ( java.lang.String ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) ; } return params ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) { return ; } VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_1 ) ; if ( VAR_4 . METHOD_6 ( ) ) { VAR_5 . METHOD_7 ( VAR_4 . getModel ( ) , null ) ; } } 
public TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS , TYPE_2 > METHOD_1 ( ) throws java.lang.Exception { TYPE_2 returnValue ; returnValue = METHOD_2 ( VAR_1 , new TYPE_3 ( VAR_2 . getId ( ) , entity . METHOD_3 ( ) , entity . METHOD_4 ( ) , entity . getName ( ) ) ) ; return new TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS , TYPE_2 > ( VAR_2 , returnValue ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( template == null ) { return ; } METHOD_3 ( template , template . getStoragePoolId ( ) ) ; METHOD_4 ( template . METHOD_5 ( ) ) ; METHOD_6 ( template . METHOD_7 ( ) ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network network ) { java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( network . getId ( ) ) ; for ( TYPE_1 VAR_3 : VAR_2 ) { if ( METHOD_4 ( VAR_1 , VAR_3 , VAR_3 . METHOD_5 ( ) ) ) { return VAR_3 ; } } return null ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( VAR_1 != null ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . setId ( VAR_1 . getValue ( ) ) ; getModel ( ) . METHOD_2 ( ) . setItems ( TYPE_1 . METHOD_3 ( vds ) ) ; } super . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final int VAR_1 = INT_1 ; final int VAR_2 = INT_2 ; org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; METHOD_4 ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_5 = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ; METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( command . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = getSelectedItem ( ) ; if ( ( getWindow ( ) ) != null ) { return ; } final TYPE_2 VAR_2 = new TYPE_3 ( VAR_1 , this , getEntity ( ) ) ; METHOD_2 ( VAR_2 ) ; VAR_2 . METHOD_3 ( ) . setItems ( TYPE_4 . METHOD_4 ( getEntity ( ) ) ) ; VAR_2 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; final org.ovirt.engine.core.common.businessentities.VM vm = null ; final org.ovirt.engine.core.compat.Guid VAR_2 = null ; VAR_1 . METHOD_2 ( vds ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_3 = VAR_1 . METHOD_5 ( ) ; TYPE_2 . assertEquals ( vds , VAR_3 ) ; } 
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_2 ( METHOD_3 ( ) ) ) { if ( ( a . METHOD_4 ( ) ) == ( VAR_3 ) ) { VAR_1 . append ( a . METHOD_5 ( ) ) . append ( STRING_1 ) ; } } return VAR_1 . METHOD_6 ( 0 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . VdcBllMessages VAR_2 ) { java.util.List < java.lang.String > VAR_3 = VAR_1 . validate ( ) ; TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 ) , VAR_3 . METHOD_4 ( VAR_2 . name ( ) ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { if ( VAR_2 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( ) ; } org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( null ) ; METHOD_5 ( ) . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( ) ; VAR_3 . METHOD_8 ( ) ; VAR_4 super . METHOD_9 ( ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . METHOD_2 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_3 ( ) ; TYPE_1 . when ( VAR_1 . get ( org.mockito.Mockito . any ( VAR_2 . Guid class ) ) ) . thenReturn ( vds ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : VAR_2 ) { if ( ( a . METHOD_1 ( ) ) == ( VAR_4 ) ) { VAR_3 . add ( a ) ; } } VAR_1 . METHOD_2 ( VAR_3 ) ; } 
protected boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.ui.uicommonweb.models.EntityModel VAR_2 ) { for ( java.lang.Object object : VAR_3 . METHOD_2 ( ) ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) ; if ( ! ( METHOD_3 ( ( ( template . METHOD_4 ( ) ) + VAR_1 ) , template . METHOD_5 ( ) , VAR_2 ) ) ) { return false ; } } return true ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { java.lang.String VAR_2 = ( ( TYPE_3 ) ( args ) ) . VAR_3 ; java.util.List < TYPE_4 > VAR_4 = VAR_5 . get ( VAR_2 ) ; if ( VAR_4 != null ) { for ( TYPE_4 item : VAR_4 ) { item . METHOD_2 ( ) ; } } } 
private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 status ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; java.lang.String VAR_3 = STRING_1 ; VAR_2 . add ( METHOD_2 ( STRING_2 , VAR_4 , VAR_5 , INT_1 , VAR_3 , METHOD_3 ( 1 ) , status ) ) ; VAR_2 . add ( METHOD_2 ( STRING_3 , VAR_6 , VAR_7 , INT_1 , STRING_4 , METHOD_3 ( 2 ) , status ) ) ; return VAR_2 ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup VAR_1 = TYPE_1 . getVdsGroup ( ) ; if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) ; } if ( VAR_1 . METHOD_4 ( ) ) { METHOD_5 ( ) ; } TYPE_1 . METHOD_6 ( true ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 } , METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] VAR_1 = ( ( java.lang.Object [ ] ) ( target ) ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ; TYPE_2 model = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_3 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; METHOD_2 ( VAR_3 , model ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_4 . VM ) , aQuery ) ; } 
public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) throws java.lang.Exception { TYPE_3 returnValue = METHOD_2 ( VAR_1 , new TYPE_4 ( VAR_2 . getId ( ) , VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_3 . getName ( ) ) ) ; return new TYPE_1 < TYPE_2 , TYPE_3 > ( VAR_3 , returnValue ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 . METHOD_4 ( ) ) . addValue ( STRING_3 , null ) . addValue ( STRING_4 , VAR_2 . METHOD_5 ( ) ) . addValue ( STRING_5 , null ) . addValue ( STRING_6 , null ) ; return VAR_3 ; } 
private void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) { TYPE_2 tempVar = new TYPE_2 ( TYPE_1 . METHOD_2 ( ) . getId ( ) , TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . getValue ( ) ) ; tempVar . METHOD_4 ( true ) ; TYPE_3 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , tempVar ) ; } } 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 entity ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; entity . METHOD_5 ( TYPE_4 . map ( VAR_2 , null ) ) ; } if ( VAR_1 . METHOD_6 ( ) ) { java.lang.String VAR_3 = ( STRING_1 . equals ( VAR_1 . getValue ( ) ) ) ? null : VAR_1 . getValue ( ) ; entity . METHOD_7 ( VAR_3 ) ; } } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) { if ( ! ( TYPE_2 . METHOD_3 ( version ) ) ) { return new TYPE_1 . ValidationResult ( VAR_2 , TYPE_3 . METHOD_4 ( ) ) ; } else if ( METHOD_5 ( ) . METHOD_6 ( ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } } return VAR_4 ; } 
void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . instance ( ) ; if ( VAR_1 != null ) { final TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . get ( ) . METHOD_3 ( new TYPE_4 ( ) { public void METHOD_4 ( ) { VAR_3 . METHOD_5 ( ) ; METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ; } } ) ; user . METHOD_8 ( true ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . add ( VAR_2 ) ; VAR_3 . METHOD_2 ( METHOD_3 ( null ) ) ; METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_6 ) { METHOD_8 ( VAR_6 , VAR_7 , new TYPE_2 ( VAR_8 ) ) ; } finally { VAR_1 . METHOD_9 ( ) ; } } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( ) { public java.lang.String METHOD_2 ( TYPE_2 object ) { return object . toString ( ) ; } } ) ; VAR_2 = new TYPE_1 ( new TYPE_4 < TYPE_5 > ( ) ) ; VAR_3 = new TYPE_1 < java.lang.String > ( new TYPE_3 < java.lang.String > ( ) { protected java.lang.String METHOD_2 ( java.lang.String object ) { return object ; } } ) ; } 
public java.lang.Object METHOD_1 ( ) { TYPE_1 pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 . getId ( ) ) ; pool . METHOD_3 ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_4 ( pool ) ; return null ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { TYPE_1 . METHOD_2 ( ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) , METHOD_8 ( ) . getId ( ) ) ; } TYPE_2 . METHOD_9 ( TYPE_1 . METHOD_7 ( ) , METHOD_8 ( ) ) ; TYPE_1 . METHOD_10 ( true ) ; } 
private boolean METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( VAR_2 . METHOD_5 ( ) . equals ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) . METHOD_5 ( ) ) ) { return true ; } } return false ; } 
protected TYPE_1 . ValidationResult METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( VAR_2 . METHOD_2 ( ) ) == null ) ? vm . METHOD_3 ( ) : VAR_2 . METHOD_2 ( ) ? VAR_3 : VAR_4 ; if ( ! ( TYPE_3 . METHOD_4 ( vm . METHOD_5 ( ) , vm . METHOD_6 ( ) , VAR_1 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_5 ) ; } return VAR_6 ; } 
public static java.lang.String METHOD_1 ( java.lang.String user , java.lang.String VAR_1 ) throws TYPE_1 { VAR_2 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_3 = null ; if ( user != null ) { VAR_3 = ( ( VAR_1 + STRING_2 ) + user ) + STRING_3 ; } else { VAR_3 = VAR_1 + STRING_3 ; } char [ ] VAR_4 = VAR_5 . METHOD_3 ( VAR_3 ) ; return VAR_4 == null ? STRING_4 : new java.lang.String ( VAR_4 ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : VAR_2 ) { if ( ( diskImage . METHOD_2 ( ) ) != VAR_1 ) { return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_3 ( STRING_1 , diskImage . METHOD_2 ( ) . name ( ) ) ) ; } } return VAR_4 ; } 
protected void METHOD_1 ( boolean VAR_1 , boolean VAR_2 ) throws java.lang.Exception { METHOD_1 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_1 } , getEntity ( 0 ) ) ; if ( VAR_2 ) { METHOD_2 ( ) ; } } 
public void METHOD_1 ( ) { char [ ] VAR_1 = new char [ ( VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) + 1 ] ; TYPE_1 . METHOD_3 ( VAR_1 , CHAR_1 ) ; VAR_4 . METHOD_4 ( INT_1 ) ; VAR_4 . METHOD_5 ( new java.lang.String ( VAR_1 ) ) ; dao . METHOD_6 ( VAR_4 ) ; TYPE_2 result = dao . get ( VAR_4 . METHOD_7 ( ) ) ; TYPE_3 . METHOD_8 ( result ) ; TYPE_3 . METHOD_9 ( result . METHOD_10 ( ) . METHOD_11 ( STRING_1 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ; parameters . METHOD_3 ( VAR_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_4 = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.when ( VAR_5 . get ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_6 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_2 . METHOD_6 ( command ) ; } 
public java.lang.Boolean METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( VAR_2 . METHOD_4 ( ) ) ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : METHOD_5 ( ) ) { TYPE_3 . METHOD_6 ( METHOD_7 ( ) , VAR_3 ) ; } return java.lang.Boolean . TRUE ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == null ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_1 . setId ( VAR_2 . METHOD_2 ( ) ) ; } } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : METHOD_3 ( ) . METHOD_4 ( ) ) { try { METHOD_5 ( cluster ) ; } catch ( java.lang.Exception e ) { VAR_1 . METHOD_6 ( STRING_2 , cluster . METHOD_7 ( ) , e ) ; } } } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { METHOD_2 ( false ) ; if ( ( ( METHOD_3 ( ) . getEntity ( ) ) == null ) || ( ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) . METHOD_4 ( ) . length ( ) ) == 0 ) ) { METHOD_5 ( ) . setEntity ( STRING_1 ) ; return ; } METHOD_6 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) ) ; } 
private void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return ; } java.util.ArrayList < TYPE_1 . VdcActionParametersBase > list = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ; for ( java.lang.Object item : METHOD_2 ( ) ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( item ) ) ; list . add ( new TYPE_3 ( VAR_1 . getId ( ) , false , false ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , list ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { if ( VAR_2 == ( VAR_4 ) ) { return ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) + VAR_3 ) >= ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) ; } if ( VAR_2 == ( VAR_5 ) ) { return ( ( VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) + VAR_3 ) >= ( VAR_1 . METHOD_2 ( ) . METHOD_6 ( ) ) ; } return false ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ; dao . METHOD_5 ( VAR_1 ) ; TYPE_1 . assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_6 ( true ) ; dao . METHOD_5 ( VAR_1 ) ; TYPE_1 . assertEquals ( true , VAR_1 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( STRING_1 ) ; org.mockito.Mockito . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( VAR_3 ) ) . thenReturn ( VAR_1 ) ; METHOD_4 ( 1 ) ; METHOD_5 ( METHOD_6 ( ) ) ; java.util.List < TYPE_1 . Network > VAR_4 = METHOD_7 ( ) ; TYPE_2 . METHOD_8 ( VAR_4 , TYPE_3 . METHOD_9 ( Network : : getId ) ) ; METHOD_10 ( VAR_4 ) ; } 
public static TYPE_1 < org.ovirt.engine.core.compat.Guid > METHOD_1 ( TYPE_1 < TYPE_2 . DiskImage > VAR_1 ) { TYPE_1 < org.ovirt.engine.core.compat.Guid > result = new java.util.ArrayList < > ( ) ; if ( VAR_1 != null ) { for ( TYPE_2 . DiskImage diskImage : VAR_1 ) { result . add ( diskImage . METHOD_2 ( ) ) ; } } return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; cluster = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ; VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_3 = new org.ovirt.engine.core.common.businessentities . Network ( ) ; VAR_3 . METHOD_4 ( STRING_3 ) ; VAR_3 . METHOD_5 ( STRING_4 ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 disk , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 ) { java.lang.String VAR_2 = ( VAR_1 . isEmpty ( ) ) ? constants . METHOD_2 ( ) : VAR_1 . get ( 0 ) . METHOD_3 ( ) ; disk . METHOD_4 ( ) . setEntity ( VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 pool ) { org.ovirt.engine.core.compat.Guid VAR_1 = METHOD_2 ( ) . getStoragePoolId ( ) ; if ( pool != null ) { pool . setId ( VAR_1 ) ; } TYPE_2 VAR_2 = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( ) , METHOD_2 ( ) . METHOD_6 ( ) ) ) . thenReturn ( pool ) ; org.mockito.Mockito.when ( METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) . thenReturn ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; METHOD_3 ( VAR_2 [ INT_1 ] , 1 ) ; METHOD_4 ( STRING_1 , null , VAR_3 , true ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( METHOD_7 ( ) ) ; } 
private java.lang.Object METHOD_1 ( boolean VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_1 ) { VAR_3 . METHOD_3 ( METHOD_4 ( VAR_2 ) ) ; } else { VAR_3 . METHOD_3 ( null ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) { final TYPE_1 parameters = METHOD_2 ( ) ; parameters . METHOD_3 ( false ) ; TYPE_2 command = METHOD_4 ( parameters ) ; TYPE_3 < TYPE_4 < TYPE_1 > > validate = TYPE_5 . METHOD_5 ( ) . validate ( parameters , command . METHOD_6 ( ) . METHOD_7 ( new TYPE_6 < ? > [ 0 ] ) ) ; TYPE_7 . METHOD_8 ( validate . isEmpty ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_3 ( false ) ; METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( VAR_1 ) ) ; METHOD_7 ( ) . METHOD_5 ( java.lang.String.valueOf ( VAR_1 . METHOD_8 ( VAR_4 ) ) ) ; METHOD_9 ( ) . METHOD_5 ( java.lang.String.valueOf ( VAR_1 . METHOD_8 ( VAR_5 ) ) ) ; VAR_6 . METHOD_3 ( true ) ; } 
private TYPE_1 METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { TYPE_1 params = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , VAR_1 ) ; params . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; params . METHOD_5 ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) ) ; params . METHOD_7 ( TYPE_2 . getParameters ( ) ) ; return params ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; java.lang.String name = VAR_1 . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_4 , VAR_5 . VM ) ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { final TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; final java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; TYPE_2 . METHOD_2 ( model , VAR_1 , VAR_2 ) ; } 
public void METHOD_1 ( ) { map = new TYPE_1 ( ) ; cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_2 < TYPE_3 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_5 ( ) ; } 
private TYPE_1 . AddVmCommand < TYPE_2 > METHOD_1 ( final int VAR_1 , final int VAR_2 ) { org.ovirt.engine.core.common.businessentities.VM vm = METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . AddVmCommand < TYPE_2 > cmd = METHOD_3 ( vm ) ; TYPE_3 . METHOD_4 ( cmd ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( cmd ) . METHOD_8 ( ) ; return cmd ; } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) ; METHOD_9 ( true ) ; METHOD_10 ( true ) ; TYPE_3 . METHOD_11 ( command ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; VAR_4 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; VAR_5 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) ; METHOD_4 ( ) ; } 
protected void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { org.ovirt.engine.core.common.businessentities.VDSGroup VAR_3 = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( VAR_1 ) ) ; METHOD_2 ( ) . METHOD_3 ( ( ( VAR_3 != null ) && ( ( VAR_3 . METHOD_4 ( ) ) != null ) ) ) ; } 
protected java.util.List < TYPE_1 . Disk > METHOD_1 ( ) { java.util.List < TYPE_1 . Disk > VAR_1 = new java.util.ArrayList ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( VAR_1 , new TYPE_3 ( ) ) ; TYPE_2 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( new TYPE_4 ( ) ) ) ; return VAR_1 ; } 
private static TYPE_1 . DiskImage METHOD_1 ( ) { TYPE_1 . DiskImage i = new TYPE_1 . DiskImage ( ) ; i . METHOD_2 ( ( ( VAR_1 ) + ( VAR_2 ) ) ) ; i . METHOD_3 ( ( ( ( ( VAR_3 ) * INT_1 ) * INT_1 ) * INT_1 ) ) ; i . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; i . METHOD_6 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_7 ( VAR_4 ) ) ) ; return i ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( id ) , aQuery ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . getId ( ) ; org.ovirt.engine.core.compat.Guid VAR_3 = VAR_1 . METHOD_2 ( ) . getValue ( ) ; TYPE_1 params = new TYPE_1 ( VAR_2 , VAR_3 ) ; params . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ; return TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_4 , params ) . getSucceeded ( ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; VAR_1 = TYPE_2 . METHOD_1 ( VAR_1 ) ; model . METHOD_2 ( model , VAR_2 , VAR_1 , null ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.List < java.lang.String > VAR_2 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . equals ( VAR_3 ) ) ) ) { org.ovirt.engine.core.common.businessentities.VDSGroup VAR_4 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; if ( VAR_4 != null ) { VAR_2 . add ( VAR_4 . METHOD_4 ( ) ) ; } } } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , getStoragePoolId ( ) , TYPE_2 . getVdsGroup ( ) . METHOD_3 ( ) , VAR_2 ) ; for ( TYPE_3 iface : VAR_3 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( iface , TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) ; super . METHOD_1 ( ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( METHOD_5 ( ) ) ) ; } 
public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = new java.util.HashMap < > ( ) ; if ( VAR_1 != null ) { for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . put ( VAR_3 . getId ( ) , VAR_3 ) ; } } METHOD_1 ( ) ; } 
private java.lang.Boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) ) ) { return ( TYPE_2 . getVm ( ) . METHOD_4 ( ) ) != null ? TYPE_2 . getVm ( ) . METHOD_4 ( ) : TYPE_2 . getVdsGroup ( ) . METHOD_5 ( ) ; } return null ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_2 . any ( VAR_2 . Guid class ) , TYPE_2 . METHOD_4 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( vm ) ) ; TYPE_4 . METHOD_6 ( validator . METHOD_7 ( vm ) , TYPE_5 . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 , false ) ; METHOD_2 ( 1 , true ) ; METHOD_3 ( VAR_1 [ 1 ] ) ; METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) , 0 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , false ) ; cmd . METHOD_5 ( ) ; TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 . getId ( ) ) . addValue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) . addValue ( STRING_2 , VAR_1 . METHOD_4 ( ) ) . addValue ( STRING_3 , TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) ; TYPE_4 VAR_3 = VAR_1 . METHOD_8 ( ) ; METHOD_9 ( VAR_2 , ( VAR_3 == null ? new TYPE_4 ( ) : VAR_3 ) ) ; return VAR_2 ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > models = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; models . add ( VAR_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; models . add ( VAR_2 ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; models . add ( VAR_3 ) ; TYPE_5 . METHOD_2 ( VAR_4 , models ) ; return models ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) ) ; METHOD_3 ( template ) ; METHOD_4 ( template . METHOD_5 ( ) ) ; METHOD_6 ( template . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { log . METHOD_2 ( STRING_1 , cluster . METHOD_3 ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = METHOD_4 ( ) . METHOD_5 ( cluster . getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = METHOD_6 ( ) . METHOD_7 ( cluster . getId ( ) ) ; if ( VAR_2 == null ) { log . METHOD_2 ( STRING_2 , cluster . METHOD_3 ( ) ) ; return ; } METHOD_8 ( cluster , VAR_2 , VAR_1 ) ; METHOD_9 ( cluster , VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) , VAR_3 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) ; METHOD_5 ( VAR_1 . get ( 0 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( 0 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . TRUE } , true , true ) ; METHOD_8 ( VAR_4 . METHOD_9 ( VAR_3 [ 0 ] . toString ( ) , new TYPE_1 ( ) { { METHOD_10 ( true ) ; } } ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( command == ( METHOD_6 ( ) ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_8 ( command . getName ( ) , STRING_1 ) ) { METHOD_9 ( ) ; } } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_3 < TYPE_2 > ( ) ; if ( ( METHOD_2 ( ) ) != null ) { for ( java.lang.Object item : METHOD_2 ( ) ) { TYPE_4 a = ( ( TYPE_4 ) ( item ) ) ; VAR_1 . add ( a . METHOD_3 ( ) ) ; } } return VAR_1 ; } 
protected org.ovirt.engine.core.common.businessentities.VDS METHOD_1 ( TYPE_1 to ) { org.ovirt.engine.core.common.businessentities.VDS VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_1 . setId ( to . getId ( ) ) ; VAR_1 . METHOD_2 ( to . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( to . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( to . METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( to . METHOD_9 ( ) ) ; VAR_1 . METHOD_10 ( to . METHOD_11 ( ) ) ; VAR_1 . METHOD_12 ( to . METHOD_13 ( ) ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { if ( ( ( VAR_1 . getStatus ( ) ) == ( VAR_2 ) ) && ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) { VAR_4 . METHOD_3 ( VAR_5 , VAR_1 ) ; VAR_6 = true ; VAR_7 = true ; VAR_8 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_5 ( ) ) ; } } 
private void METHOD_1 ( ) { final java.util.HashMap < java.lang.Integer , java.lang.String > VAR_1 = TYPE_1 . getInstance ( ) . get ( VAR_2 class ) . METHOD_2 ( ) ; for ( TYPE_2 < java.lang.Integer , java.lang.String > VAR_3 : VAR_1 . METHOD_3 ( ) ) { final TYPE_3 VAR_4 = TYPE_4 . METHOD_4 ( VAR_3 . getValue ( ) ) ; if ( VAR_4 != null ) { VAR_5 . put ( VAR_3 . METHOD_5 ( ) , VAR_4 ) ; } } } 
protected boolean METHOD_1 ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( object . getEntity ( ) ) ) ; TYPE_2 . Disk disk = VAR_1 . METHOD_2 ( ) ; boolean VAR_2 = disk . METHOD_3 ( ) ; boolean VAR_3 = ( disk . METHOD_4 ( ) ) == ( VAR_4 ) ; return ( ! VAR_2 ) && ( ! VAR_3 ) ; } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_4 = new TYPE_3 ( VAR_2 , VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_2 ( ) ; VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_3 = VAR_2 . get ( STRING_1 ) ; VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_4 ( STRING_2 ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_6 = dao . get ( new TYPE_2 ( STRING_3 , VAR_3 . METHOD_6 ( ) ) ) ; VAR_7 = new TYPE_3 ( VAR_8 , VAR_3 . METHOD_6 ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ) ; java.util.List < java.lang.String > VAR_1 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , false , true , true , null ) ; } 
public java.util.HashMap < java.lang.String , java.lang.Object > METHOD_1 ( ) { java.util.HashMap < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < > ( ) ; VAR_1 . put ( VAR_2 , model . name ( ) ) ; VAR_1 . put ( VAR_3 , action . name ( ) . METHOD_2 ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 event ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_3 . setSelectedItem ( VAR_3 . METHOD_3 ( ) . get ( VAR_1 ) ) ; VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) ; VAR_5 . METHOD_4 ( VAR_3 . METHOD_7 ( ) . METHOD_6 ( ) ) ; METHOD_8 ( ) ; } 
private void METHOD_1 ( ) { if ( TYPE_1 . getInstance ( ) . METHOD_2 ( ) ) { java.util.List < TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) { getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.VDS > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) ; } } } 
public void METHOD_1 ( ) { METHOD_2 ( true , false ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( cmd . METHOD_8 ( ) ) ; } 
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( getEntity ( ) . METHOD_2 ( ) ) != null ) ? getEntity ( ) . METHOD_2 ( ) : getEntity ( ) . METHOD_3 ( ) ; boolean VAR_2 = TYPE_2 . equals ( TYPE_3 . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) , getEntity ( ) . METHOD_6 ( ) ) ) ; return ( VAR_1 == ( VAR_3 ) ) && VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( true ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_6 . METHOD_8 ( vm , diskImage ) . get ( ) ) ; } 
public void METHOD_1 ( ) { parameters = new TYPE_1 ( ) ; parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; parameters . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; command = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( parameters ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , 2 ) ; dao . METHOD_5 ( VAR_3 ) ; java.util.List < TYPE_3 > VAR_4 = dao . METHOD_6 ( VAR_3 ) ; TYPE_2 . METHOD_7 ( VAR_4 . isEmpty ( ) ) ; TYPE_1 VAR_5 = VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_5 . METHOD_3 ( ) . METHOD_4 ( ) , 0 ) ; } 
private void METHOD_1 ( ) { TYPE_1 returnValue = new TYPE_1 ( ) ; returnValue . METHOD_2 ( true ) ; returnValue . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( returnValue ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_7 ( VAR_5 ) ) . thenReturn ( METHOD_8 ( VAR_6 ) ) ; } 
private static boolean METHOD_1 ( java.lang.String type ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = VAR_2 < java.util.Map < java.lang.String , java.lang.String > > METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = VAR_1 . get ( type ) ; if ( VAR_4 != null ) { return java.lang.Boolean . METHOD_3 ( VAR_4 ) ; } return true ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { return ; } VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) ; METHOD_3 ( ) . METHOD_4 ( null ) ; METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( ) . onSuccess ( VAR_4 . getModel ( ) , null ) ; } 
static void METHOD_1 ( TYPE_1 . Disk model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) ) ; METHOD_4 ( model . METHOD_5 ( ) ) ; METHOD_4 ( ( ! ( model . METHOD_6 ( ) ) ) ) ; METHOD_4 ( model . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; try { VAR_2 . add ( model ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public TYPE_1 . VdcActionParametersBase getParameters ( TYPE_2 . Network VAR_1 , TYPE_2 . Network entity ) { TYPE_2 . Network VAR_2 = METHOD_1 ( VAR_3 , VAR_4 . Network class ) . map ( VAR_1 , entity ) ; return new TYPE_3 ( entity . METHOD_2 ( ) . getValue ( ) , VAR_2 ) ; } 
public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 VAR_2 = new TYPE_2 ( VAR_1 ) ; long VAR_3 = TYPE_3 . METHOD_3 ( ) ; if ( VAR_2 . METHOD_4 ( ) ) { METHOD_5 ( ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_3 , VAR_1 , true ) ; METHOD_8 ( VAR_2 . METHOD_9 ( ) . METHOD_10 ( ) , VAR_3 ) ; } else { VAR_4 . METHOD_11 ( STRING_1 , VAR_1 . METHOD_12 ( ) ) ; } } } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; TYPE_2 VAR_3 = ( ( VAR_2 . size ( ) ) > 0 ) ? VAR_2 . get ( 0 ) : null ; VAR_1 . METHOD_1 ( VAR_3 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 [ ] types ) { if ( TYPE_3 . METHOD_2 ( version , VAR_1 ) ) { version . METHOD_3 ( new TYPE_4 ( ) ) ; for ( TYPE_2 type : types ) { version . METHOD_4 ( ) . METHOD_4 ( ) . add ( type . value ( ) ) ; } } } 
private static void METHOD_1 ( java.util.List < TYPE_1 > result ) { TYPE_2 . METHOD_2 ( result ) ; TYPE_2 . METHOD_3 ( result . isEmpty ( ) ) ; for ( TYPE_1 domain : result ) { TYPE_2 . assertEquals ( VAR_1 , domain . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { try { TYPE_1 pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( VAR_2 ) ; if ( ( pool != null ) && ( ( pool . METHOD_4 ( ) ) == ( VAR_3 ) ) ) { TYPE_2 . METHOD_5 ( pool ) ; } } catch ( java.lang.Exception e ) { } } } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) , TYPE_1 . METHOD_9 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 context = METHOD_2 ( ) ; context . METHOD_3 ( map , map . getStatus ( ) ) ; map . METHOD_4 ( status ) ; METHOD_5 ( ) . METHOD_6 ( map . getId ( ) , map . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( ) ) ; VAR_2 = new TYPE_4 ( STRING_1 ) ; VAR_3 = new TYPE_4 ( STRING_1 ) ; VAR_4 = new TYPE_4 ( STRING_2 ) ; VAR_5 = new TYPE_4 ( STRING_2 ) ; VAR_6 = new TYPE_5 ( VAR_7 ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( java.lang.String value ) { TYPE_1 . ValidationResult result = new TYPE_1 . ValidationResult ( ) ; try { new TYPE_2 ( value ) ; } catch ( TYPE_3 e ) { result . METHOD_2 ( false ) ; result . METHOD_3 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } return result ; } 
protected void METHOD_1 ( final TYPE_1 status ) { METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public TYPE_3 METHOD_3 ( ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { TYPE_4 map = METHOD_4 ( domain ) ; TYPE_5 context = METHOD_5 ( ) ; context . METHOD_6 ( map , map . METHOD_7 ( ) ) ; METHOD_8 ( map , status ) ; METHOD_5 ( ) . METHOD_9 ( ) ; } return null ; } } ) ; } 
public TYPE_1 get ( ) { TYPE_1 VAR_1 = METHOD_1 ( VAR_2 , new TYPE_2 ( VAR_3 , true ) ) ; TYPE_3 . VdcQueryReturnValue result = runQuery ( VAR_4 , new TYPE_4 ( VAR_3 ) ) ; if ( ( ( result != null ) && ( result . getSucceeded ( ) ) ) && ( ( result . getReturnValue ( ) ) != null ) ) { VAR_1 . METHOD_2 ( ( ( java.lang.String ) ( result . getReturnValue ( ) ) ) ) ; } return VAR_1 ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ; return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; } 
private org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { return new org.ovirt.engine.core.common.businessentities.DiskImage ( true , new TYPE_1 ( ) , new TYPE_1 ( ) , INT_1 , STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_2 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , INT_1 , VAR_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_2 , new TYPE_1 ( ) , STRING_3 , VAR_3 . VM , null , null , VAR_4 , false ) ; } 
public TYPE_1 add ( TYPE_2 . Network network ) { METHOD_1 ( network , STRING_1 ) ; if ( ! ( network . METHOD_2 ( ) ) ) { network . setId ( METHOD_3 ( network . getName ( ) , VAR_1 ) ) ; } org.ovirt.engine.core.common.businessentities . network entity = map ( network ) ; return METHOD_4 ( VAR_2 , METHOD_5 ( network , entity ) , new TYPE_3 ( network . getName ( ) ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = TYPE_2 . METHOD_3 ( VAR_2 ) ; int VAR_4 = ( VAR_1 . METHOD_4 ( ) ) - VAR_3 ; if ( VAR_4 > 0 ) { int VAR_5 = TYPE_3 . METHOD_5 ( VAR_4 , VAR_6 < java.lang.Integer > getValue ( VAR_7 ) ) ; VAR_8 . METHOD_6 ( STRING_1 , VAR_2 , VAR_4 , VAR_5 ) ; METHOD_7 ( VAR_2 , VAR_5 ) ; } } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( VAR_2 class ) ) { return false ; } boolean VAR_3 = ! ( ( VAR_1 . METHOD_2 ( VAR_4 class ) ) && ( VAR_1 . METHOD_3 ( VAR_4 class ) . value ( ) . METHOD_4 ( STRING_1 ) ) ) ; boolean VAR_5 = ! ( VAR_1 . METHOD_5 ( ) . equals ( VAR_6 class ) ) ; return VAR_3 && VAR_5 ; } 
public TYPE_1 add ( TYPE_2 VAR_1 ) { TYPE_3 entity = TYPE_4 . map ( VAR_1 , null ) ; TYPE_5 VAR_2 = METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) . add ( entity . METHOD_3 ( ) ) ; return METHOD_4 ( VAR_3 , new TYPE_6 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid vmId = METHOD_2 ( ) ; if ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( vmId ) ) { METHOD_4 ( ) . setSelectedItem ( VAR_1 ) ; } else { METHOD_4 ( ) . setSelectedItem ( METHOD_5 ( ) . METHOD_6 ( vmId ) . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( STRING_1 ) ; command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( command . validate ( ) ) ; } 
protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.Boolean VAR_2 = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . toString ( ) ) ) ) ; return ( VAR_2 && ( VAR_1 . METHOD_5 ( ) ) ) && ( ! ( VAR_1 . METHOD_6 ( ) ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , new TYPE_1 . AsyncQuery ( new TYPE_2 ( ) { public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_3 > VAR_3 = ( ( TYPE_4 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; METHOD_2 ( ) . setItems ( VAR_3 ) ; } } ) ) ; } 
protected boolean METHOD_1 ( ) { if ( ( getParameters ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; return ( VAR_2 != null ) && ( VAR_2 . METHOD_6 ( ) ) ; } return false ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String [ ] VAR_2 , int i , java.lang.String VAR_3 , TYPE_1 VAR_4 , TYPE_2 VAR_5 ) { java.lang.String VAR_6 = METHOD_2 ( VAR_3 , VAR_2 [ ( i - INT_1 ) ] ) ; if ( ! ( VAR_4 . METHOD_3 ( VAR_3 ) ) ) { java.lang.String VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 ) ; VAR_4 . METHOD_5 ( VAR_3 , this . VAR_8 . METHOD_6 ( VAR_6 , VAR_1 , VAR_7 ) ) ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( ! ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ) { VAR_2 . setId ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 . getId ( ) ) ) ; } } for ( TYPE_2 VAR_3 : VAR_1 . METHOD_6 ( ) ) { VAR_3 . setId ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 . getId ( ) ) ) ; } } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > VAR_1 = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > ( ) ; VAR_1 . put ( java.lang.Boolean . TRUE , vms ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( VAR_3 ) ) . thenReturn ( VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 . AuditLogType VAR_2 , java.lang.String VAR_3 ) { TYPE_1 VAR_4 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_2 . METHOD_3 ( ) ) ; if ( VAR_4 == null ) { return null ; } VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_4 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_4 . METHOD_7 ( ) , VAR_5 ) ) ; METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_4 ) ; return VAR_4 ; } 
public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( METHOD_4 ( ) ) ; if ( getParameters ( ) . METHOD_5 ( ) ) { vm . METHOD_6 ( VAR_1 ) ; } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( vm . METHOD_9 ( ) ) ; return null ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , org.ovirt.engine.core.common.businessentities.VM vm , boolean VAR_5 , final TYPE_4 VAR_6 ) { final TYPE_1 VAR_7 = new TYPE_1 ( VAR_1 , VAR_3 , vm . getId ( ) , ( VAR_5 ? METHOD_2 ( vm ) : null ) , VAR_4 , VAR_2 , new TYPE_5 ( ) , vm . METHOD_3 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_7 ) ; VAR_6 . METHOD_6 ( VAR_7 ) ; return VAR_7 ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( false ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; } 
private void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( command . getParameters ( ) . getStoragePoolId ( ) ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( pool ) ; } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( returnValue ) ) ; java.util.ArrayList < TYPE_2 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 cluster : VAR_4 ) { if ( ( ( VAR_2 == ( VAR_5 ) ) || ( ( cluster . METHOD_1 ( ) ) == ( VAR_5 ) ) ) || ( ( cluster . METHOD_1 ( ) ) == VAR_2 ) ) { VAR_3 . add ( cluster ) ; } } METHOD_2 ( this , VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true ) ; if ( ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) { TYPE_2 . METHOD_4 ( METHOD_5 ( ) , VAR_2 , VAR_2 , TYPE_1 . METHOD_6 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; java.lang.Object VAR_4 = VAR_3 . METHOD_4 ( VAR_1 , VAR_5 , VAR_6 ) ; return new TYPE_1 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) ; } catch ( TYPE_5 e ) { throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; if ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) { VAR_1 . add ( VAR_2 , STRING_1 ) ; } else { VAR_1 . add ( VAR_2 , STRING_2 ) ; } if ( ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) >= 0 ) { VAR_1 . add ( VAR_3 , new java.lang.Integer ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) . toString ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , null ) ; VAR_4 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
protected void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( model ) ; VAR_2 . METHOD_3 ( java.lang.Integer . toString ( getModel ( ) . METHOD_4 ( ) ) ) ; VAR_3 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_5 ( getModel ( ) . METHOD_6 ( ) ) ) ; VAR_4 . setTitle ( getModel ( ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( VAR_1 ) ) ; METHOD_6 ( cmd ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_3 , VAR_4 , VAR_2 ) ) . when ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; TYPE_3 . METHOD_9 ( cmd . METHOD_10 ( ) ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; java.lang.String VAR_3 = ( ( VAR_2 != null ) && ( ! ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) ) ? VAR_2 . METHOD_4 ( ) : VAR_4 ; return VAR_5 . METHOD_1 ( VAR_1 , getVm ( ) , VAR_3 , TYPE_2 . METHOD_5 ( ) ) ; } 
protected void METHOD_1 ( TYPE_1 . VM vm ) { java.lang.Boolean VAR_1 = getEntity ( VAR_2 . Boolean class , VAR_3 , new TYPE_2 ( new org.ovirt.engine.core.compat.Guid ( vm . getId ( ) ) ) , null , true ) ; if ( ! ( vm . METHOD_2 ( ) ) ) { vm . METHOD_3 ( new TYPE_3 ( ) ) ; } vm . METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; TYPE_2 . METHOD_1 ( aQuery , VAR_1 , null ) ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 ; switch ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) { default : case VAR_2 : VAR_1 = VAR_3 ; break ; case VAR_4 : VAR_1 = VAR_5 ; break ; } java.lang.String VAR_6 = VAR_7 < java.lang.String > METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_6 ) ; } 
private void METHOD_1 ( java.lang.Object sender , TYPE_1 args ) { VAR_1 . METHOD_1 ( ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( VAR_2 != null ) { METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; } } 
private TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . getId ( ) ; java.lang.String VAR_3 = VAR_1 . getName ( ) ; TYPE_3 . EngineMessage VAR_4 = VAR_5 ; return METHOD_2 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } 
static TYPE_1 . Network METHOD_1 ( TYPE_1 . Network entity , boolean VAR_1 , boolean VAR_2 , boolean VAR_3 , int VAR_4 ) { TYPE_2 VAR_5 = new TYPE_2 ( ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_5 . METHOD_3 ( VAR_2 ) ; VAR_5 . METHOD_4 ( VAR_3 ) ; TYPE_3 . METHOD_5 ( entity . METHOD_6 ( ) ) . METHOD_7 ( VAR_5 ) . METHOD_8 ( ) ; return TYPE_4 . METHOD_1 ( entity , VAR_4 ) ; } 
private void METHOD_1 ( ) { java.lang.Integer VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; java.lang.Integer VAR_2 = METHOD_2 ( ) . METHOD_4 ( ) ; if ( ( VAR_1 != null ) && ( VAR_2 != null ) ) { METHOD_5 ( ( VAR_1 + VAR_2 ) ) ; } else { METHOD_5 ( 0 ) ; } } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } final java.util.ArrayList < TYPE_1 > list = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; return METHOD_2 ( list , VAR_1 , VAR_2 ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS VAR_1 ) { return ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) ) ) < VAR_2 ) && ( ( VAR_1 . METHOD_4 ( ) ) >= VAR_3 ) ) && ( ( ( VAR_1 . METHOD_5 ( ) ) == null ) || ( ( ( new TYPE_1 ( ) . METHOD_6 ( ) ) - ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ) < ( TYPE_2 . METHOD_7 ( VAR_4 ) ) ) ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 entity ) { if ( ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { VAR_1 . setId ( VAR_1 . METHOD_3 ( ) . getId ( ) ) ; } else { VAR_1 . setId ( entity . getId ( ) . toString ( ) ) ; } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_6 } , METHOD_3 ( ) , VAR_2 ) ; VAR_7 . METHOD_4 ( ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String version , TYPE_1 VAR_1 ) { java.lang.String returnValue = TYPE_2 . instance ( ) . METHOD_2 ( INT_1 , true ) ; TYPE_3 VAR_2 = TYPE_3 . valueOf ( VAR_1 . name ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 , version , returnValue ) ; return returnValue ; } 
protected boolean METHOD_1 ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; TYPE_3 < TYPE_4 > VAR_2 = TYPE_3 . METHOD_4 ( VAR_3 ) ; java.util.List < TYPE_5 . DiskImage > VAR_4 = TYPE_6 . METHOD_5 ( METHOD_6 ( ) , VAR_5 ) ; VAR_6 = TYPE_7 . METHOD_7 ( VAR_4 , VAR_1 , VAR_2 ) ; return validate ( new TYPE_8 ( VAR_4 ) . METHOD_8 ( VAR_6 , VAR_1 , VAR_7 , VAR_2 ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; org.ovirt.engine.core.compat . Version VAR_1 = vm . METHOD_2 ( ) ; if ( VAR_1 == null ) { METHOD_3 ( false ) ; } else { METHOD_3 ( ( ( java.lang.Boolean ) ( ! ( TYPE_1 . getInstance ( ) . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) , VAR_1 ) . isEmpty ( ) ) ) ) ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 params = new TYPE_1 ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( params ) ; try { VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; } finally { if ( ( user ) != null ) { VAR_1 . METHOD_4 ( VAR_4 . METHOD_5 ( new TYPE_1 ( user . METHOD_6 ( ) ) ) ) ; } VAR_4 . METHOD_7 ( ) ; } } 
protected void METHOD_1 ( java.lang.Object sender , TYPE_1 e ) { super . METHOD_1 ( sender , e ) ; if ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( METHOD_2 ( ) . getEntity ( ) ) ) ; setSelectedItem ( TYPE_3 . METHOD_4 ( VAR_3 . Linq < TYPE_2 > METHOD_5 ( METHOD_6 ( ) ) , new TYPE_4 ( VAR_2 . getId ( ) ) ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { TYPE_3 VAR_2 = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 != null ) { final org.ovirt.engine.core.compat.Guid VAR_4 = VAR_2 . METHOD_3 ( ) ; return VAR_4 == null ? null : VAR_5 . METHOD_4 ( VAR_4 ) ; } } return null ; } 
public void METHOD_1 ( TYPE_1 < java.lang.Boolean > event ) { METHOD_2 ( ) . METHOD_3 ( event . getValue ( ) ) ; METHOD_2 ( ) . METHOD_4 ( ( ( VAR_1 ) && ( event . getValue ( ) ) ) ) ; METHOD_2 ( ) . METHOD_5 ( ( ! ( event . getValue ( ) ) ) ) ; } 
public java.util.List < TYPE_1 . DiskImage > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.lang.Object [ ] args = VAR_1 . METHOD_2 ( ) ; TYPE_1 . DiskImage VAR_2 = ( ( TYPE_1 . DiskImage ) ( args [ 0 ] ) ) ; java.util.List < TYPE_1 . DiskImage > list = METHOD_3 ( VAR_2 . getId ( ) , INT_1 ) ; return list ; } 
public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { vds . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( vds . getId ( ) ) ) ; vds . METHOD_4 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( vds . getId ( ) ) . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_4 = TYPE_5 . map ( VAR_3 , null ) ; assertEquals ( VAR_4 . getStatus ( ) . METHOD_3 ( ) , VAR_2 . value ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( null ) ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VmTemplate VAR_3 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 cluster , org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { org.ovirt.engine.core.compat.Guid VAR_3 = cluster . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_1 , cluster . getId ( ) , VAR_2 ) ; if ( METHOD_4 ( VAR_3 , VAR_1 ) ) { cluster . METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( cluster ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( false ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_1 ) ; VAR_2 . METHOD_8 ( org.ovirt.engine.core.compat.Guid . METHOD_9 ( ) ) ; TYPE_2 . METHOD_10 ( command ) ; } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_1 , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > list = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid VAR_3 : VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ; if ( storageDomain != null ) { list . add ( storageDomain ) ; } } return list ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( 0 , 0 , 0 ) ; METHOD_4 ( 0 ) ; METHOD_5 ( 0 , 0 ) ; METHOD_6 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 1 ] } , METHOD_7 ( VAR_3 [ 1 ] ) ) ; super . METHOD_1 ( ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { java.lang.String VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , VAR_1 . getId ( ) ) , VAR_4 , TYPE_5 . METHOD_5 ( VAR_3 ) , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean . TRUE ; } } ; TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) , aQuery ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( java.lang.String.valueOf ( METHOD_3 ( ) . METHOD_5 ( ) ) ) ; VAR_4 . METHOD_4 ( java.lang.Boolean . toString ( METHOD_3 ( ) . METHOD_6 ( ) ) ) ; VAR_5 . METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_7 ( METHOD_3 ( ) . METHOD_8 ( ) ) ) ; VAR_6 . METHOD_9 ( METHOD_3 ( ) ) ; VAR_7 . setTitle ( METHOD_3 ( ) . METHOD_10 ( ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 view = ( ( TYPE_2 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_2 ( VAR_1 . getId ( ) ) ; org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_2 ( VAR_2 . getId ( ) ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_3 ) ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain . METHOD_2 ( VAR_4 ) ; storageDomain . METHOD_3 ( VAR_1 ) ; storageDomain . METHOD_4 ( VAR_2 ) ; storageDomain . METHOD_5 ( VAR_3 ) ; VAR_5 = org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ; storageDomain . setId ( VAR_5 ) ; TYPE_2 . METHOD_7 ( this ) ; VAR_6 . METHOD_8 ( VAR_7 class , VAR_8 ) ; org.mockito.Mockito.when ( VAR_8 . get ( VAR_5 ) ) . thenReturn ( storageDomain ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer VAR_2 ) { org.ovirt.engine.core.common.businessentities . network VAR_3 = new org.ovirt.engine.core.common.businessentities . network ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_3 , this ) ; VAR_4 . METHOD_4 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) ; VAR_5 . put ( VAR_1 , VAR_4 ) ; return VAR_4 ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = getEntity ( ) ; VAR_2 . setId ( VAR_1 ) ; TYPE_2 < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_3 . add ( VAR_2 ) ; VAR_4 . METHOD_2 ( ) . setItems ( VAR_3 ) ; VAR_4 . METHOD_2 ( ) . setSelectedItem ( VAR_2 ) ; this . METHOD_4 ( null ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.StoragePool entity ) { org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters ( new org.ovirt.engine.core.compat.Guid ( model . getId ( ) ) ) ; model . METHOD_2 ( METHOD_3 ( VAR_1 . List class , VAR_2 class ) . map ( getEntity ( VAR_1 . ArrayList class , VAR_3 , parameters , model . getId ( ) ) , null ) ) ; return model ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > result = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ; java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( result ) ; for ( TYPE_1 domain : VAR_1 ) { if ( ( domain . METHOD_5 ( ) ) == ( VAR_2 ) ) { result . METHOD_6 ( domain ) ; } } TYPE_2 . METHOD_7 ( ) . METHOD_8 ( result ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( ) { public java.lang.String METHOD_2 ( TYPE_2 entity ) { if ( entity == null ) { return VAR_1 . METHOD_3 ( ) ; } return VAR_2 . METHOD_2 ( entity ) ; } } ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( 1 ) ; METHOD_4 ( METHOD_5 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 } , VAR_1 , VAR_2 ) ) ; TYPE_1 model = getModel ( 0 ) ; try { VAR_7 . add ( model ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_8 ) { METHOD_7 ( VAR_8 , VAR_3 ) ; } } 
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ; try { if ( ! ( VAR_4 ) ) { METHOD_5 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; } else { METHOD_6 ( VAR_1 ) ; } } finally { VAR_3 . METHOD_3 ( ) . METHOD_7 ( ) ; } } 
public static TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , TYPE_2 . VdcActionType VAR_1 ) { TYPE_1 . ValidationResult VAR_2 = VAR_3 ; if ( ! ( TYPE_3 . METHOD_2 ( vm ) ) ) { if ( ! ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) { VAR_2 = new TYPE_1 . ValidationResult ( VAR_4 ) ; } } return VAR_2 ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 response , final TYPE_3 VAR_2 ) throws TYPE_4 , TYPE_5 { TYPE_6 VAR_3 = METHOD_2 ( ( ( TYPE_7 ) ( VAR_1 ) ) ) ; VAR_1 . METHOD_3 ( VAR_4 , VAR_3 ) ; VAR_2 . METHOD_1 ( VAR_1 , response ) ; METHOD_4 ( ( ( TYPE_8 ) ( response ) ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) ; } 
private void METHOD_1 ( ) { final TYPE_1 model = ( ( TYPE_1 ) ( getWindow ( ) ) ) ; model . METHOD_2 ( null ) ; METHOD_3 ( model . METHOD_4 ( ) . getSelectedItem ( ) . getId ( ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { model . METHOD_6 ( ) ; METHOD_7 ( null ) ; } } ) ; } 
public void METHOD_1 ( ) { VAR_1 . instance = this ; try { TYPE_1 VAR_2 = new TYPE_2 ( ) ; VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( new TYPE_3 ( this ) , TYPE_4 . METHOD_6 ( VAR_4 ) ) ; } catch ( TYPE_5 VAR_5 ) { log . error ( STRING_1 , VAR_5 . METHOD_7 ( ) ) ; log . METHOD_8 ( STRING_2 , VAR_5 ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = STRING_1 ; final java.lang.String value = VAR_3 ; final java.lang.String VAR_4 = STRING_2 ; final java.lang.String VAR_5 = null ; VAR_1 . METHOD_2 ( VAR_2 , value ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_4 , VAR_5 ) ; final java.lang.String VAR_6 = VAR_1 . METHOD_4 ( VAR_2 ) ; TYPE_3 . assertEquals ( ( ( value + VAR_5 ) + VAR_4 ) , VAR_6 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 action ) { get ( ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . setId ( id ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; if ( ( action != null ) && ( action . METHOD_2 ( ) ) ) { VAR_2 = METHOD_3 ( action . METHOD_4 ( ) ) ; } TYPE_4 parameters = new TYPE_4 ( VAR_1 , VAR_2 ) ; return METHOD_5 ( VAR_4 , parameters ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) ) != null ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) == ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) , TYPE_1 . METHOD_4 ( ) ) ; } throw new TYPE_3 ( STRING_1 ) ; } else { TYPE_1 . METHOD_5 ( false ) ; log . METHOD_6 ( STRING_2 ) ; } } 
public TYPE_1 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > METHOD_1 ( TYPE_6 VAR_1 , TYPE_7 < TYPE_8 > VAR_2 , final TYPE_7 < TYPE_3 < TYPE_4 > > VAR_3 , final TYPE_7 < TYPE_5 > VAR_4 ) { TYPE_9 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > result = new TYPE_9 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > ( VAR_1 , VAR_2 ) ; result . METHOD_2 ( VAR_3 ) ; result . METHOD_3 ( VAR_4 ) ; return result ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = VAR_2 . get ( VAR_3 ) ; TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.String name = VAR_1 . getName ( ) ; TYPE_1 . METHOD_3 ( name . equals ( VAR_4 . METHOD_4 ( VAR_3 , VAR_5 . StoragePool ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( ) , aQuery ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; } 
void METHOD_1 ( TYPE_1 object ) { VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , false , VAR_4 ) ; VAR_5 = new TYPE_3 ( VAR_6 , VAR_4 ) ; VAR_7 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_8 , VAR_9 ) ; METHOD_5 ( VAR_10 ) ; METHOD_5 ( VAR_11 ) ; VAR_12 . METHOD_6 ( VAR_5 ) ; VAR_13 . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.util.List < java.lang.String > VAR_3 ) { if ( VAR_3 == null ) { VAR_3 = TYPE_2 . METHOD_2 ( ) ; } java.lang.String value = java.lang.String . METHOD_3 ( STRING_1 , VAR_3 ) ; put ( VAR_1 , VAR_2 , value ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; command . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( command ) ; org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( 1 ) ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( TYPE_1 . getTable ( ) . METHOD_3 ( new TYPE_2 < TYPE_3 > ( VAR_1 . METHOD_4 ( ) , VAR_2 ) { protected org.ovirt.engine.ui.uicommonweb.UICommand METHOD_5 ( ) { return METHOD_6 ( ) . getModel ( ) . METHOD_7 ( ) ; } } , false ) ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , new TYPE_2 ( VAR_3 , STRING_1 , STRING_2 , INT_1 , INT_2 , STRING_3 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_4 , VAR_3 , true , VAR_5 ) , VAR_6 , VAR_7 ) ; return VAR_2 ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 , org.ovirt.engine.core.compat . Version VAR_3 , java.lang.Boolean VAR_4 ) { boolean VAR_5 = ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_1 ( VAR_2 . getId ( ) , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_5 ) ; } 
private org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( java.lang.String name , org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.core.common.businessentities.VDSGroup VAR_1 = VAR_2 . METHOD_1 ( VAR_3 . VDSGroup class ) ; TYPE_1 . METHOD_2 ( VAR_1 . getId ( ) ) . METHOD_3 ( id ) . METHOD_4 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) . METHOD_3 ( name ) . METHOD_4 ( ) ; return VAR_1 ; } 
public org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) throws TYPE_1 { org.ovirt.engine.core.common.businessentities.VM vm = METHOD_2 ( VAR_1 . VM class , VAR_2 , METHOD_3 ( VAR_3 , id ) , id . toString ( ) ) ; org.ovirt.engine.core.common.businessentities.VM model = new org.ovirt.engine.core.common.businessentities.VM ( ) ; model . setId ( vm . getId ( ) . toString ( ) ) ; return TYPE_2 . METHOD_4 ( METHOD_5 ( ) , model ) ; } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 [ ] VAR_1 ) { if ( TYPE_3 . METHOD_2 ( version , VAR_2 ) ) { version . METHOD_3 ( new TYPE_2 ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { version . METHOD_4 ( ) . METHOD_5 ( ) . add ( VAR_3 . value ( ) ) ; } } } 
public void METHOD_1 ( ) { command . METHOD_2 ( new TYPE_1 ( ) ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 . setId ( METHOD_3 ( ) . getId ( ) ) ; TYPE_2 params = new TYPE_2 ( VAR_1 ) ; METHOD_4 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_2 , params , new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 result ) { TYPE_5 model = ( ( TYPE_5 ) ( result . METHOD_7 ( ) ) ) ; model . METHOD_8 ( ) ; model . METHOD_9 ( ) ; } } , this ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true , getEntity ( 0 ) ) ; VAR_1 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_7 ( VAR_2 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = STRING_1 ; final java.lang.String value = VAR_3 ; final java.lang.String VAR_4 = STRING_2 ; VAR_1 . METHOD_1 ( VAR_2 , value , VAR_4 ) ; final java.lang.String VAR_5 = VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_3 . assertEquals ( value , VAR_5 ) ; } 
public boolean equals ( java.lang.Object obj ) { return ( ( ( obj != null ) && ( obj instanceof TYPE_1 ) ) && ( TYPE_2 . METHOD_1 ( getId ( ) , ( ( TYPE_1 ) ( obj ) ) . getId ( ) ) ) ) && ( super . equals ( obj ) ) ; } 
protected org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . VdcActionType VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 , new TYPE_4 ( VAR_2 , VAR_4 , VAR_5 , VAR_1 . METHOD_2 ( ) , METHOD_3 ( VAR_2 , TYPE_5 . getParameters ( ) ) , VAR_1 . METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) ) ) ; VAR_3 . METHOD_6 ( TYPE_5 . getParameters ( ) . METHOD_7 ( ) ) ; org.ovirt.engine.core.compat.Guid VAR_6 = TYPE_6 . getInstance ( ) . METHOD_8 ( VAR_7 , VAR_3 , false ) ; return VAR_6 ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_2 ( null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_3 ( STRING_1 , null , null , network . getName ( ) ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_4 ( ) ) ; METHOD_5 ( network , iface , null , false ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) { super . METHOD_1 ( VAR_2 . METHOD_4 ( VAR_1 ) ) ; } else { super . METHOD_1 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . add ( STRING_1 ) ; METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; METHOD_5 ( 1 ) ; METHOD_6 ( ) ; VAR_2 . METHOD_7 ( ) ; TYPE_1 nic = resource . get ( ) ; METHOD_8 ( nic . METHOD_9 ( ) ) ; VAR_3 . METHOD_10 ( nic , VAR_4 ) ; } finally { VAR_1 . METHOD_11 ( ) ; } } 
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( VAR_1 . size ( ) ) ; for ( TYPE_1 host : VAR_1 ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . METHOD_2 ( host . getName ( ) ) ; vds . METHOD_3 ( host . getName ( ) ) ; hosts . add ( vds ) ; } return hosts ; } 
public boolean METHOD_1 ( TYPE_1 quota ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( quota . METHOD_3 ( ) , quota . getStoragePoolId ( ) ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . getId ( ) . equals ( quota . getId ( ) ) ) ) ) { METHOD_4 ( VAR_3 ) ; return false ; } return true ; } 
private TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ; TYPE_1 type = null ; try { type = TYPE_1 . valueOf ( VAR_1 ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( ( STRING_1 + VAR_1 ) ) ; } return type ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < > ( ) ; list . add ( new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_1 , TYPE_3 . METHOD_4 ( ) , TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_5 ( ) ) ) ; return list ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( vm != null ) { METHOD_2 ( vm ) ; } } } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; TYPE_3 returnValue = VAR_4 ; if ( ( VAR_3 . METHOD_3 ( ) ) != null ) { org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_5 , new TYPE_4 ( VAR_3 . METHOD_3 ( ) ) ) ; } VAR_2 = null ; VAR_1 . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , vmId ) ; TYPE_2 . assertEquals ( true , VAR_1 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_2 ) ) . thenReturn ( METHOD_4 ( ) ) ; TYPE_3 parameters = METHOD_5 ( ) ; parameters . METHOD_6 ( ) . METHOD_7 ( true ) ; METHOD_8 ( parameters , TYPE_4 . METHOD_9 ( METHOD_10 ( VAR_4 ) ) ) ; TYPE_5 . METHOD_11 ( command , VAR_5 ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 < TYPE_4 < TYPE_5 > > entities = ( ( TYPE_3 < TYPE_4 < TYPE_5 > > ) ( sender ) ) ; TYPE_4 < TYPE_5 > VAR_2 = entities . getSelectedItem ( ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . METHOD_3 ( ) ; org.ovirt.engine.core.compat.Guid VAR_5 = VAR_1 . getId ( ) ; TYPE_3 . METHOD_2 ( VAR_4 ) ; TYPE_3 . METHOD_2 ( VAR_5 ) ; if ( METHOD_4 ( VAR_4 , VAR_2 ) ) { java.util.List < java.lang.String > VAR_6 = VAR_7 . METHOD_5 ( VAR_5 ) ; METHOD_6 ( VAR_4 , VAR_2 , VAR_6 , VAR_3 ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.Boolean VAR_1 ) throws TYPE_2 , TYPE_3 , TYPE_4 { java.lang.String url = this . METHOD_2 ( ) ; TYPE_5 VAR_2 = new TYPE_5 ( ) ; java.util.List < TYPE_6 > VAR_3 = VAR_2 . METHOD_3 ( ) ; TYPE_7 VAR_4 = new TYPE_7 ( url ) ; if ( VAR_1 != null ) { VAR_4 . add ( STRING_1 , VAR_1 , VAR_5 ) ; } url = VAR_4 . METHOD_3 ( ) ; return METHOD_4 ( ) . METHOD_1 ( url , VAR_6 class , VAR_3 ) ; } 
protected void METHOD_1 ( TYPE_1 model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; assertEquals ( VAR_3 [ VAR_1 ] , model . getName ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) ) ; assertEquals ( VAR_4 , model . METHOD_3 ( ) . getName ( ) ) ; METHOD_4 ( model ) ; } 
public static < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > source , TYPE_3 < ? super TYPE_1 > VAR_1 ) { for ( TYPE_1 item : source ) { if ( VAR_1 . METHOD_2 ( item ) ) { return item ; } } return null ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_5 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_6 ( ) . toString ( ) , TYPE_1 . getReturnValue ( ) . METHOD_7 ( ) ) ; } 
private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return METHOD_2 ( ( ( ( iface . getName ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) , false , null , null , VAR_2 , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; } 
private boolean METHOD_1 ( ) { return ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) && ( ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) != null ) ) && ( ! ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) ) ; } 
public boolean METHOD_1 ( TYPE_1 vm ) { if ( ( ( vm . METHOD_2 ( ) ) == null ) || ( vm . METHOD_2 ( ) . isEmpty ( ) ) ) { return false ; } java.lang.String VAR_1 = METHOD_3 ( vm ) ; if ( VAR_1 == null ) { return false ; } try { java.lang.Integer . METHOD_4 ( VAR_1 ) ; return true ; } catch ( TYPE_2 e ) { return false ; } } 
protected boolean METHOD_1 ( TYPE_1 status , TYPE_2 . VdcBllMessages VAR_1 ) { boolean returnValue = false ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = TYPE_3 . METHOD_2 ( ) ; if ( VAR_2 != null ) { returnValue = ( VAR_2 . getStatus ( ) ) != status ; if ( ( ! returnValue ) && ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . name ( ) ) ) ) ) { addCanDoActionMessage ( VAR_1 ) ; } } return returnValue ; } 
public < TYPE_1 > TYPE_1 get ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_2 != null ) && ( ! ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) ) { throw new TYPE_3 ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_1 ) ) ; } TYPE_1 value = get ( VAR_1 ) ; if ( value == null ) { value = VAR_2 ; } return value ; } 
protected void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; log . METHOD_6 ( STRING_1 , VAR_1 ) ; if ( org.ovirt.engine.core.compat.Guid . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) { log . METHOD_6 ( STRING_2 ) ; } else { TYPE_1 . METHOD_9 ( ) ; } TYPE_1 . METHOD_10 ( true ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_2 ( ) ) ; TYPE_2 . VdcQueryReturnValue VAR_2 = METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 ) ; if ( ! ( VAR_2 . getSucceeded ( ) ) ) { return null ; } return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( VAR_2 . getReturnValue ( ) ) ) ; } 
private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > ... VAR_1 ) { TYPE_1 returnValue = new TYPE_1 ( ) ; returnValue . METHOD_2 ( new java.util.Map [ ] { METHOD_3 ( VAR_2 , VAR_1 ) } ) ; returnValue . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( returnValue ) . when ( VAR_3 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = TYPE_1 . METHOD_1 ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) , VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_2 ( list , new TYPE_3 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 from ) { from . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . setId ( from . getId ( ) ) ; from . METHOD_4 ( ) . METHOD_5 ( ) ; from . METHOD_4 ( ) . METHOD_4 ( ) . add ( VAR_2 ) ; return from ; } 
public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( vmId , VAR_1 , METHOD_3 ( ) ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( command . METHOD_7 ( VAR_3 ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , long VAR_2 , boolean VAR_3 ) { TYPE_2 VAR_4 = METHOD_2 ( ) ; VAR_4 . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) . addValue ( STRING_3 , VAR_3 ) ; java.util.List < TYPE_1 > VAR_5 = METHOD_3 ( ) . METHOD_4 ( STRING_4 , METHOD_5 ( ) , VAR_4 ) ; return VAR_5 ; } 
protected void METHOD_1 ( TYPE_1 entity , org.ovirt.engine.core.compat.Guid id ) { if ( ( ( entity . METHOD_2 ( ) ) == null ) || ( ! ( entity . METHOD_2 ( ) . equals ( id ) ) ) ) { return ; } entity . METHOD_3 ( null ) ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > models = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; models . add ( VAR_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; models . add ( VAR_2 ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; models . add ( VAR_3 ) ; TYPE_5 VAR_4 = new TYPE_5 ( ) ; models . add ( VAR_4 ) ; TYPE_6 . METHOD_2 ( VAR_5 , models ) ; return models ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 0 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( TYPE_1 . getModel ( 0 , false ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) , TYPE_2 . METHOD_4 ( ) ) ; } } 
public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult VAR_1 = TYPE_2 . validate ( value ) ; if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { return VAR_1 ; } TYPE_1 . ValidationResult result = new TYPE_1 . ValidationResult ( ) ; if ( value instanceof java.lang.String ) { result . METHOD_2 ( METHOD_3 ( ( ( java.lang.String ) ( value ) ) ) ) ; result . METHOD_4 ( VAR_2 ) ; } return result ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { super . setItems ( VAR_1 ) ; if ( ( getSelectedItem ( ) ) == null ) { setSelectedItem ( ( ( VAR_1 . size ( ) ) > 1 ? VAR_1 . get ( 1 ) : VAR_1 . get ( 0 ) ) ) ; } METHOD_2 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; cmd . getVm ( ) . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( cmd ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 ) { TYPE_3 VAR_5 = new TYPE_3 ( ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_5 ( VAR_3 . getId ( ) ) ; TYPE_4 . METHOD_1 ( VAR_5 ) ; } 
protected void METHOD_1 ( ) { TYPE_1 network = ( ( TYPE_1 ) ( item ) ) ; if ( network . METHOD_2 ( ) ) { item . METHOD_3 ( ) ; } else { TYPE_2 VAR_1 = item . METHOD_4 ( ) . METHOD_5 ( item ) ; final TYPE_3 VAR_2 = VAR_1 . get ( VAR_3 ) . get ( 0 ) ; item . METHOD_4 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) . when ( cmd ) . METHOD_7 ( ) ; TYPE_2 . METHOD_8 ( cmd . validate ( ) ) ; TYPE_2 . METHOD_8 ( cmd . getReturnValue ( ) . METHOD_9 ( ) . isEmpty ( ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 entity ) { if ( ( entity . METHOD_2 ( ) ) != null ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_4 ( ) . setId ( entity . METHOD_2 ( ) . toString ( ) ) ; return VAR_1 ; } else { return null ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_1 . METHOD_2 ( ) . getId ( ) ) ) ) { VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } VAR_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; return null ; } 
public TYPE_1 METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , TYPE_2 . VdcActionParametersBase params ) { VAR_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , params ) ; params . METHOD_4 ( METHOD_5 ( ) . getId ( ) ) ; if ( VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_6 ( true ) ; return VAR_4 ; } return METHOD_7 ( ) . METHOD_8 ( VAR_1 , params ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , METHOD_5 ( ) ) ; java.util.List < TYPE_1 . Network > entities = new java.util.ArrayList < > ( ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , entities ) ; VAR_4 . METHOD_6 ( ) ; try { resource . get ( ) ; METHOD_7 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_8 ( VAR_5 ) ; } } 
protected void METHOD_1 ( TYPE_1 < ? > command ) { if ( ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) || ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { TYPE_2 . METHOD_4 ( command , command . METHOD_5 ( ) , command . METHOD_6 ( ) ) ; } TYPE_3 . METHOD_7 ( command . METHOD_8 ( ) ) ; command . METHOD_9 ( ) ; command . METHOD_10 ( ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < TYPE_1 , java.lang.Integer > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_5 ( VAR_4 , VAR_2 , false ) ) ; TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_6 ( VAR_4 , false ) ) ; org.mockito.Mockito . METHOD_7 ( VAR_1 ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( null ) ; TYPE_1 . getInstance ( ) . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_4 ( ) ; java.util.List < TYPE_2 < ? > > VAR_1 = ( ( java.util.List < TYPE_2 < ? > > ) ( returnValue ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_5 ( ) . setItems ( VAR_1 ) ; } } ) ) ; } 
protected void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( VAR_1 != null ) { METHOD_2 ( ) . setItems ( VAR_1 ) ; METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 ( vds . getStoragePoolId ( ) ) ) ) ; if ( ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) { METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ; } } } 
public void METHOD_1 ( ) { java.lang.String name = STRING_1 ; TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . get ( name ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_2 ( ) . get ( name ) ; TYPE_3 . METHOD_6 ( VAR_3 ) ; TYPE_3 . assertEquals ( VAR_1 , VAR_3 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_3 ( VAR_2 , cluster , VAR_3 ) ; TYPE_4 . METHOD_7 ( validator . METHOD_1 ( ) , TYPE_5 . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . StorageDomain model = new TYPE_1 . StorageDomain ( ) ; METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( model ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) { command . getParameters ( ) . METHOD_2 ( VAR_1 ) ; command . getParameters ( ) . METHOD_3 ( VAR_2 ) ; java.util.HashMap < java.lang.String , java.lang.Object > VAR_3 = command . METHOD_1 ( ) ; TYPE_1 . METHOD_4 ( VAR_3 ) ; TYPE_1 . assertEquals ( STRING_1 , VAR_3 . get ( STRING_2 ) ) ; TYPE_1 . assertEquals ( STRING_3 , VAR_3 . get ( STRING_4 ) ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS host ) { TYPE_1 . VdcQueryReturnValue returnValue = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_3 ( host . getId ( ) ) ) ; java.util.List < TYPE_4 > VAR_2 = returnValue . getReturnValue ( ) ; return TYPE_5 . METHOD_1 ( VAR_2 , host . METHOD_3 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.lang.String VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) ; try { TYPE_1 . getInstance ( ) . METHOD_4 ( VAR_2 ) ; } catch ( java.lang.Exception e ) { VAR_4 . METHOD_5 ( STRING_2 , VAR_2 , e . METHOD_6 ( ) ) ; VAR_4 . METHOD_7 ( STRING_3 , e ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . getVm ( ) . METHOD_2 ( ) ) != null ) { TYPE_3 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_2 . getVm ( ) . METHOD_2 ( ) , VAR_1 ) ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; } } 
private TYPE_1 . AuditLogType METHOD_1 ( boolean VAR_1 ) { boolean VAR_2 = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; if ( VAR_1 ) { if ( VAR_2 ) { return VAR_3 ; } else { return VAR_4 ; } } else { if ( VAR_2 ) { return VAR_5 ; } else { return VAR_6 ; } } } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ; if ( template == null ) { return ; } METHOD_3 ( template ) ; METHOD_4 ( template . METHOD_5 ( ) ) ; METHOD_6 ( template . METHOD_7 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , boolean VAR_2 ) { org.mockito.Mockito . METHOD_2 ( frontend , org.mockito.Mockito . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . METHOD_6 ( VAR_4 . VdcActionParametersBase class ) , VAR_5 . METHOD_7 ( ) , TYPE_2 . METHOD_5 ( false ) , TYPE_2 . METHOD_5 ( VAR_2 ) ) ; java.util.List < TYPE_1 > VAR_6 = VAR_5 . METHOD_8 ( ) ; return VAR_6 ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , java.lang.String VAR_4 ) { TYPE_2 VAR_5 = new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , VAR_1 ) . METHOD_2 ( STRING_3 , VAR_2 ) . METHOD_2 ( STRING_4 , VAR_3 ) . METHOD_2 ( STRING_5 , VAR_4 ) . METHOD_3 ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new TYPE_4 ( this . client , VAR_5 ) . METHOD_4 ( STRING_6 ) . METHOD_5 ( java.lang.Object [ ] . class ) ; return new TYPE_1 ( response ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : VAR_2 ) { network . METHOD_2 ( ) . setId ( new TYPE_4 ( getEntity ( ) . getId ( ) , network . getId ( ) ) ) ; } setItems ( VAR_2 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < TYPE_2 > list = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; VAR_1 . METHOD_1 ( list ) ; VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_3 ( ) . setItems ( METHOD_4 ( VAR_3 ) ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( object . METHOD_2 ( ) . getSelectedItem ( ) ) != null ) { java.lang.String VAR_2 = object . METHOD_2 ( ) . getSelectedItem ( ) . getValue ( ) ; VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; } } 
private void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_1 VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) . get ( VAR_3 . getId ( ) ) ; if ( ( VAR_2 . METHOD_5 ( ) ) == ( VAR_4 ) ) { VAR_1 . METHOD_6 ( true ) ; } } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public TYPE_3 METHOD_3 ( ) { METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) . METHOD_9 ( ) ; return null ; } } ) ; } 
protected void METHOD_1 ( TYPE_1 . DiskImage VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; java.util.List < TYPE_1 . DiskImage > VAR_2 = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . getId ( ) ) ; if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { TYPE_2 . METHOD_8 ( ) . METHOD_3 ( VAR_1 . getId ( ) ) ; } } 
protected static org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , java.util.List < TYPE_1 . DiskImage > VAR_2 ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_3 : VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_3 , VAR_2 ) ; if ( ( ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( ( VAR_3 . getStatus ( ) ) == ( VAR_4 ) ) ) && ( TYPE_2 . METHOD_5 ( VAR_3 , VAR_2 ) ) ) { return VAR_3 ; } } return null ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ; METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ; METHOD_4 ( ) . setIsChangable ( VAR_2 ) ; } 
public void METHOD_1 ( ) { int result = dao . METHOD_2 ( VAR_1 . getId ( ) ) ; TYPE_1 VAR_2 = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . assertEquals ( result , ( ( VAR_1 . METHOD_3 ( ) ) + 1 ) ) ; TYPE_2 . assertEquals ( result , VAR_2 . METHOD_3 ( ) ) ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , true , false , true , true , null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_3 ( VAR_4 ) ; TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) ; TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , java.lang.Integer . valueOf ( INT_1 ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getSelectedItem ( ) ; if ( ( getWindow ( ) ) != null ) { return ; } TYPE_1 . AsyncQuery VAR_1 = new TYPE_1 . AsyncQuery ( ) ; VAR_2 = new TYPE_2 ( ) { public void onSuccess ( java.lang.Object result ) { METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) ; } } ; TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_1 , template . getId ( ) ) ; } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_3 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_4 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; VAR_4 . METHOD_1 ( VAR_3 ) ; TYPE_2 . METHOD_2 ( VAR_4 , new TYPE_3 ( ) ) ; TYPE_4 VAR_5 = ( ( TYPE_4 ) ( VAR_1 ) ) ; VAR_5 . setItems ( VAR_4 ) ; } 
private void METHOD_1 ( ) { for ( org.ovirt.engine.core.compat.Guid VAR_1 : getReturnValue ( ) . METHOD_2 ( ) ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( ) . get ( VAR_1 ) ; if ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) { TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; } } } 
protected TYPE_1 . Disk METHOD_1 ( TYPE_1 . Disk model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ; model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) . value ( ) ) ; model . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ) ; model . METHOD_7 ( new TYPE_4 ( ) ) ; return model ; } 
public TYPE_1 METHOD_1 ( ) { get ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( id ) ; java.lang.String host = TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ; org.ovirt.engine.core.compat.Guid VAR_4 = VAR_5 ; if ( host != null ) { VAR_4 = METHOD_4 ( host ) ; } TYPE_4 parameters = new TYPE_4 ( VAR_1 , VAR_4 ) ; return METHOD_5 ( VAR_6 , parameters ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( true ) . when ( VAR_1 ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_4 ( TYPE_1 . any ( VAR_4 . VM class ) ) ; } 
protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } if ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_2 ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( cmd . METHOD_3 ( ) ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( VAR_2 ) ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; } 
private void METHOD_1 ( ) { if ( ( getVm ( ) . METHOD_2 ( ) ) == null ) { return ; } for ( TYPE_1 VAR_1 : getVm ( ) . METHOD_2 ( ) ) { if ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( getVm ( ) . getId ( ) , VAR_1 . getId ( ) ) ) { TYPE_2 . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ; } else { TYPE_2 . METHOD_3 ( ) . METHOD_6 ( VAR_1 ) ; } } } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { java.util.ArrayList < TYPE_1 > VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ; METHOD_1 ( ) . setItems ( VAR_3 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_3 . METHOD_2 ( VAR_3 ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . add ( VAR_4 , VAR_2 ) ; TYPE_3 VAR_5 = TYPE_4 . METHOD_2 ( VAR_3 ) ; TYPE_5 . assertEquals ( VAR_1 , VAR_5 . METHOD_3 ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_1 ( ) ; java.util.List < TYPE_1 < TYPE_2 > > VAR_1 = ( ( java.util.List < TYPE_1 < TYPE_2 > > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; METHOD_2 ( ) . setSelectedItem ( null ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , METHOD_3 ( VAR_1 ) ) ) ) ; METHOD_4 ( cmd ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cluster ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_4 . toString ( ) ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_2 ( ) ) . when ( cmd ) . METHOD_3 ( ) ; cmd . getParameters ( ) . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( TYPE_2 . METHOD_7 ( TYPE_1 . METHOD_2 ( ) ) ) ; TYPE_3 . METHOD_8 ( cmd ) ; org.mockito.Mockito . METHOD_9 ( VAR_1 ) . METHOD_10 ( TYPE_2 . METHOD_7 ( TYPE_1 . METHOD_2 ( ) ) , TYPE_2 . METHOD_11 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { if ( ( ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) . size ( ) ) == 0 ) { METHOD_2 ( ) ; } else { METHOD_3 ( ) ; } } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( VAR_2 , true ) ; } 
protected java.util.List < TYPE_1 . Disk > METHOD_1 ( ) { java.util.List < TYPE_1 . Disk > VAR_1 = new java.util.ArrayList < TYPE_1 . Disk > ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( VAR_1 , new TYPE_3 ( ) ) ; TYPE_2 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( new TYPE_4 ( ) ) ) ; return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 . getVm ( ) ) ; VAR_3 . METHOD_3 ( ( ( java.util.List ) ( VAR_1 . METHOD_4 ( ) ) ) ) ; VAR_4 . METHOD_3 ( ( ( java.util.List ) ( VAR_1 . METHOD_5 ( ) ) ) ) ; VAR_5 . METHOD_3 ( ( ( java.util.List ) ( VAR_1 . METHOD_6 ( ) ) ) ) ; } 
private java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( params . METHOD_5 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : VAR_2 ) { iface . METHOD_6 ( TYPE_1 . METHOD_7 ( METHOD_8 ( ) , iface ) ) ; } VAR_1 = TYPE_2 . METHOD_9 ( VAR_2 ) ; } return VAR_1 ; } 
private void METHOD_1 ( final TYPE_1 pool ) { pool . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 VAR_1 , java.lang.Object sender , TYPE_4 args ) { java.lang.String VAR_2 = ( ( TYPE_5 ) ( args ) ) . VAR_3 ; if ( STRING_1 . equals ( VAR_2 ) ) { VAR_4 . METHOD_5 ( null ) ; } } } ) ; VAR_4 . METHOD_6 ( true ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface , java.lang.String VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) { VAR_2 . put ( VAR_1 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) ; } if ( METHOD_3 ( iface ) ) { VAR_3 . put ( VAR_1 , iface ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_2 ( STRING_2 ) ) ; boolean result = dao . METHOD_4 ( VAR_1 ) ; TYPE_3 . METHOD_5 ( result ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . assertEquals ( VAR_4 , VAR_3 . METHOD_3 ( ) ) ; TYPE_2 . assertEquals ( VAR_5 , VAR_3 . METHOD_4 ( ) ) ; } 
public TYPE_1 list ( ) { if ( TYPE_2 . METHOD_1 ( getEntity ( VAR_1 . StorageDomain class , VAR_2 , new TYPE_3 ( METHOD_2 ( VAR_3 ) ) , STRING_1 ) ) ) { return METHOD_3 ( METHOD_4 ( ) ) ; } else { return METHOD_5 ( VAR_4 class ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 parameters , java.util.List < TYPE_3 > VAR_2 ) { if ( METHOD_2 ( parameters . getStoragePoolId ( ) ) ) { if ( ! ( TYPE_4 . METHOD_3 ( parameters . METHOD_4 ( ) ) ) ) { VAR_3 . error ( STRING_1 , parameters . METHOD_4 ( ) . getName ( ) ) ; METHOD_5 ( VAR_1 , parameters . METHOD_4 ( ) . getId ( ) , VAR_4 ) ; return false ; } } return true ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 < ? > command , boolean VAR_1 ) { TYPE_1 returnValue = METHOD_2 ( command ) ; if ( returnValue != null ) { return returnValue ; } command . METHOD_3 ( VAR_1 ) ; TYPE_3 . METHOD_4 ( command , command . METHOD_5 ( ) , VAR_1 ) ; command . METHOD_6 ( ) ; returnValue = command . METHOD_7 ( ) ; returnValue . METHOD_8 ( command . getParameters ( ) . METHOD_9 ( ) ) ; returnValue . METHOD_10 ( command . METHOD_11 ( ) ) ; return returnValue ; } 
public static org.ovirt.engine.core.compat.Guid METHOD_1 ( java.lang.String ... args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( java.lang.String VAR_2 : args ) { VAR_1 . append ( VAR_2 ) ; } byte [ ] VAR_3 ; try { VAR_3 = TYPE_2 . getInstance ( VAR_4 ) . METHOD_2 ( VAR_1 . toString ( ) . METHOD_3 ( ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( e ) ; } return new org.ovirt.engine.core.compat.Guid ( VAR_3 , true ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 parameters : TYPE_3 . getParameters ( ) . METHOD_2 ( ) ) { TYPE_4 . DiskImage diskImage = METHOD_3 ( ) . get ( parameters . METHOD_4 ( ) ) ; org.ovirt.engine.core.compat.Guid VAR_2 = ( diskImage == null ) ? VAR_3 : diskImage . getId ( ) ; VAR_1 . add ( new TYPE_1 ( VAR_2 , VAR_4 . Disk , VAR_5 ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 . Network model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( super . equals ( obj ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_1 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) ; METHOD_4 ( command ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) ; METHOD_9 ( false ) ; METHOD_10 ( false ) ; METHOD_11 ( ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) throws TYPE_3 , TYPE_4 { java.util.List < TYPE_2 > VAR_1 = new java.util.ArrayList < TYPE_2 > ( ) ; for ( java.lang.String VAR_2 : VAR_3 ) { TYPE_5 < ? > resource = METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( resource , VAR_2 , new java.util.HashMap < java.lang.String , TYPE_6 > ( ) ) ) ; } return VAR_1 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; VAR_2 . METHOD_1 ( ( ( ( ( java.util.List ) ( VAR_2 . METHOD_2 ( ) ) ) . size ( ) ) == 0 ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : VAR_1 ) { TYPE_2 . METHOD_5 ( cluster . getId ( ) , TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; } TYPE_1 . METHOD_6 ( true ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( VAR_2 , null , null ) ; VAR_1 . METHOD_4 ( network . getId ( ) ) ; METHOD_5 ( false , true , true , TYPE_2 . METHOD_6 ( VAR_3 , TYPE_3 . METHOD_7 ( VAR_4 , network . getName ( ) ) ) , network , VAR_1 ) ; } 
protected org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( false ) ; disk . METHOD_5 ( true ) ; disk . METHOD_6 ( vmId ) ; disk . setId ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; return disk ; } 
public boolean METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; return ( vm != null ) && ( ( ( ( vm . getStatus ( ) ) == ( VAR_1 ) ) || ( ( vm . getStatus ( ) ) == ( VAR_2 ) ) ) || ( ( vm . getStatus ( ) ) == ( VAR_3 ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( vm . getId ( ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( vm . getId ( ) , VAR_5 ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_6 ) . METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( VAR_6 ) ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.String > VAR_2 = null ; if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; } return VAR_2 == null ? new java.util.HashMap < > ( ) : VAR_2 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( METHOD_3 ( VAR_2 ) ) ; VAR_1 . METHOD_4 ( METHOD_3 ( VAR_3 ) ) ; VAR_1 . METHOD_5 ( METHOD_3 ( VAR_4 ) ) ; VAR_1 . METHOD_6 ( METHOD_3 ( VAR_5 ) ) ; VAR_1 . METHOD_7 ( METHOD_3 ( VAR_6 ) ) ; VAR_1 . METHOD_8 ( METHOD_3 ( VAR_7 ) ) ; VAR_1 . METHOD_9 ( METHOD_3 ( VAR_8 ) ) ; VAR_1 . METHOD_10 ( METHOD_3 ( VAR_9 ) ) ; VAR_1 . METHOD_11 ( METHOD_3 ( VAR_10 ) ) ; } 
private void METHOD_1 ( ) { parameters = new TYPE_1 ( ) ; parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( parameters ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; TYPE_2 VAR_2 = new TYPE_3 ( VAR_3 ) ; METHOD_3 ( 1 , VAR_2 ) ; METHOD_4 ( 1 ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_1 ) ; try { METHOD_7 ( ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_4 VAR_6 ) { METHOD_9 ( VAR_6 , VAR_7 , VAR_2 ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { java.lang.Integer VAR_3 = VAR_4 < java.lang.Integer > METHOD_2 ( VAR_5 ) ; TYPE_2 VAR_6 = METHOD_3 ( ) . addValue ( STRING_1 , id ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , VAR_3 . METHOD_4 ( ) ) ; return METHOD_5 ( ) . METHOD_6 ( STRING_5 , VAR_7 . instance , VAR_6 ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . VDS vds = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . get ( this . METHOD_3 ( ) . METHOD_4 ( ) ) ; status = TYPE_3 . METHOD_5 ( ) . METHOD_6 ( TYPE_3 . getParameters ( ) . getStoragePoolId ( ) . toString ( ) , vds . METHOD_7 ( ) , TYPE_3 . getParameters ( ) . getStoragePoolId ( ) . toString ( ) ) ; TYPE_3 . METHOD_8 ( ) ; TYPE_3 . METHOD_9 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 dao = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_2 > ( ) ) . when ( dao ) . METHOD_3 ( TYPE_3 . any ( VAR_2 . Guid class ) ) ; org.mockito.Mockito.doReturn ( dao ) . when ( VAR_3 ) . METHOD_4 ( ) ; TYPE_4 . METHOD_5 ( VAR_3 . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , VAR_4 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_5 ) ; } 
public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) throws java.lang.Exception { TYPE_3 returnValue ; returnValue = METHOD_2 ( VAR_1 , new TYPE_4 ( VAR_2 . METHOD_3 ( ) , entity . METHOD_4 ( ) , entity . METHOD_5 ( ) , entity . getName ( ) , entity . METHOD_6 ( ) , entity . METHOD_7 ( ) , VAR_3 ) ) ; return new TYPE_1 < TYPE_2 , TYPE_3 > ( VAR_2 , returnValue ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( boolean VAR_1 ) { boolean VAR_2 = ( ( VAR_3 . METHOD_2 ( ) ) == null ) && ( ! VAR_1 ) ; boolean VAR_4 = ( VAR_3 . METHOD_3 ( ) ) && ( ( ( VAR_3 . METHOD_4 ( ) ) || ( ( VAR_3 . METHOD_5 ( ) ) != null ) ) || ( ! VAR_2 ) ) ; return TYPE_2 . METHOD_6 ( VAR_5 ) . when ( VAR_4 ) ; } 
public < TYPE_1 > TYPE_2 < ? > METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; java.util.List < TYPE_3 > VAR_3 = VAR_2 . METHOD_2 ( ) ; return new TYPE_4 < TYPE_3 > ( new TYPE_5 < TYPE_3 > ( VAR_3 ) , VAR_4 , VAR_5 , VAR_6 , null ) ; } else { return new TYPE_4 < TYPE_3 > ( METHOD_3 ( ) , VAR_4 , VAR_5 , VAR_6 , null ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) , VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) , true , true , null , false ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ) . thenReturn ( new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_5 , VAR_4 ) ) . thenReturn ( STRING_1 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; } 
protected void METHOD_1 ( TYPE_1 < ? > command ) { if ( ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( command , command . METHOD_4 ( ) , command . METHOD_5 ( ) , new java.lang.Boolean ( VAR_2 . get ( command . METHOD_6 ( ) ) ) ) ; } TYPE_3 . METHOD_7 ( command . METHOD_8 ( ) ) ; command . METHOD_9 ( ) ; } 
protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . setId ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) ; TYPE_3 . when ( VAR_3 . get ( org.mockito.Mockito . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; } 
protected static void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { java.lang.String VAR_3 = TYPE_2 . name ( ) ; java.util.List < java.lang.String > VAR_4 = TYPE_3 . getInstance ( ) . METHOD_2 ( VAR_1 , VAR_3 , VAR_5 , VAR_6 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; } 
public TYPE_1 < TYPE_2 , TYPE_3 > append ( TYPE_4 < TYPE_2 , TYPE_3 > VAR_1 ) { java.util.List < TYPE_4 < TYPE_2 , TYPE_3 > > VAR_2 = new TYPE_1 < TYPE_2 , TYPE_3 > ( METHOD_1 ( 0 , size ( ) ) ) . METHOD_1 ( 0 , size ( ) ) ; TYPE_5 . METHOD_2 ( VAR_2 , VAR_1 ) ; return new TYPE_1 < TYPE_2 , TYPE_3 > ( VAR_2 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( ( ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) . size ( ) ) == 0 ) { METHOD_1 ( ) ; } else { METHOD_2 ( ) ; } } 
private TYPE_1 METHOD_1 ( ) { java.util.List < TYPE_2 . VdcActionParametersBase > parameters = getParameters ( ) ; if ( ( parameters != null ) && ( ( parameters . size ( ) ) != 0 ) ) { TYPE_2 . VdcActionParametersBase VAR_1 = parameters . get ( 0 ) ; if ( ( VAR_1 != null ) && ( VAR_1 instanceof TYPE_1 ) ) { return ( ( TYPE_1 ) ( VAR_1 ) ) ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . setId ( STRING_1 ) ; METHOD_4 ( 1 , null ) ; METHOD_5 ( 1 ) ; METHOD_6 ( 1 , null ) ; METHOD_7 ( VAR_1 ) ; METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_1 } , true , true ) ; VAR_4 . add ( model ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { ( ( TYPE_2 ) ( VAR_3 ) ) . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_3 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public static < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_1 > source , TYPE_3 < ? super TYPE_1 > VAR_1 ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 item : source ) { if ( VAR_1 . METHOD_2 ( item ) ) { list . add ( item ) ; } } return list ; } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : ( ( TYPE_2 < TYPE_1 > ) ( source ) ) ) { if ( ( ! VAR_3 ) || ( VAR_2 . METHOD_2 ( ) ) ) { VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ; } } return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 model ) { if ( ! ( model . METHOD_2 ( ) ) ) { return ; } VAR_1 . METHOD_3 ( model . METHOD_4 ( ) ) ; model . METHOD_4 ( ) . METHOD_5 ( ) . setItems ( model . METHOD_5 ( ) . METHOD_6 ( ) ) ; model . METHOD_4 ( ) . METHOD_7 ( model . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) , null ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . validate ( ) ) ; } 
private void METHOD_1 ( ) { if ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) { if ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) { METHOD_4 ( true ) ; } else { TYPE_1 . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ; TYPE_1 . METHOD_9 ( ) ; } } TYPE_1 . METHOD_10 ( true ) ; } 
private void METHOD_1 ( final org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( false ) ; VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; TYPE_3 . getInstance ( ) . METHOD_7 ( VAR_4 , VAR_3 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_1 ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; model . METHOD_2 ( ) . setItems ( VAR_1 ) ; model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) ; model . METHOD_4 ( ) ; METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; TYPE_3 VAR_2 = METHOD_3 ( ) ; METHOD_4 ( true , VAR_2 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; TYPE_4 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_5 . toString ( ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . validate ( ) ) ) ) { return ; } METHOD_3 ( ) ; getWindow ( ) . METHOD_4 ( null ) ; TYPE_2 . METHOD_5 ( this , new java.util.ArrayList < java.lang.Object > ( TYPE_3 . METHOD_6 ( new java.lang.Object [ ] { STRING_1 } ) ) ) . METHOD_7 ( ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_1 , METHOD_2 ( id ) ) ; return inject ( new TYPE_5 < TYPE_6 , TYPE_7 . VM > ( VAR_5 , VAR_6 , VAR_4 ) ) ; } 
protected TYPE_1 METHOD_1 ( boolean VAR_1 ) { TYPE_1 iface = new TYPE_1 ( ) ; iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; iface . METHOD_3 ( TYPE_2 . instance ( ) . METHOD_4 ( INT_1 ) ) ; iface . METHOD_5 ( VAR_1 ) ; return iface ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . AddVmCommand < TYPE_2 > cmd = METHOD_3 ( 0 , 0 ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( cmd ) . getVdsGroup ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_3 . any ( VAR_2 . Integer class ) , TYPE_3 . any ( VAR_3 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_4 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_5 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_2 . any ( VAR_2 . VDS class ) ) ; VAR_3 . METHOD_4 ( VAR_4 class ) ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_5 . METHOD_3 ( vds ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < java.lang.Integer , java.util.Map < org.ovirt.engine.core.compat . Version , java.lang.Boolean > > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_2 ( VAR_5 ) , VAR_1 ) ; } 
public TYPE_1 . Disk METHOD_1 ( TYPE_2 rs , int VAR_1 ) throws TYPE_3 { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( rs.getString ( STRING_1 ) ) ; disk . METHOD_3 ( rs . METHOD_4 ( STRING_2 ) ) ; disk . setId ( METHOD_5 ( rs , STRING_3 ) ) ; return disk ; } 
public boolean METHOD_1 ( TYPE_1 item ) { if ( ( item . METHOD_2 ( ) ) || ( ! ( METHOD_3 ( ) ) ) ) return false ; if ( ( ( ( ( item . METHOD_4 ( ) ) != null ) && ( VAR_1 . METHOD_5 ( ) ) ) && ( item . METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) && ( item . METHOD_4 ( ) . METHOD_6 ( ) . METHOD_8 ( ) ) ) { return true ; } return false ; } 
private void METHOD_1 ( ) { java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( 1 ) ; VAR_1 . add ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; TYPE_1 returnValue = new TYPE_1 ( ) ; returnValue . METHOD_3 ( VAR_1 ) ; TYPE_2 . when ( VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_3 ) , VAR_4 . Matchers < TYPE_4 > any ( VAR_5 class ) ) ) . thenReturn ( returnValue ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_3 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_3 . setId ( VAR_4 ) ; VAR_3 . METHOD_1 ( STRING_1 ) ; VAR_1 . add ( VAR_3 ) ; VAR_2 . METHOD_2 ( ) . setItems ( VAR_1 ) ; } 
protected boolean METHOD_1 ( ) { java.util.List < TYPE_1 . DiskImage > VAR_1 = TYPE_2 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) , true , false , true ) ; TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 ) ; return validate ( VAR_2 . METHOD_6 ( ) ) ; } 
private java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . getValue ( ) ; java.util.Map < java.lang.String , java.lang.String > VAR_4 = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ; TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) ; return VAR_4 ; } 
public java.lang.String getValue ( TYPE_1 . Disk object ) { java.lang.String value = STRING_1 ; if ( ( object . METHOD_1 ( ) ) == ( VAR_1 ) ) { TYPE_1 . DiskImage diskImage = ( ( TYPE_1 . DiskImage ) ( object ) ) ; java.util.ArrayList < java.lang.String > VAR_2 = diskImage . METHOD_2 ( ) ; if ( VAR_2 != null ) { value = TYPE_2 . METHOD_3 ( STRING_2 , VAR_2 . METHOD_4 ( ) ) ; } } return value ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { org.ovirt.engine.core.compat.Guid id = VAR_1 . getId ( ) ; if ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( id ) ) { id = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; VAR_1 . setId ( id ) ; } METHOD_4 ( ) . METHOD_5 ( STRING_1 , METHOD_6 ( VAR_1 ) ) ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) , new TYPE_5 ( VAR_1 , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . METHOD_2 ( ) ; boolean VAR_1 = ( ( java.lang.Boolean ) ( TYPE_1 . getInstance ( ) . METHOD_3 ( VAR_2 , cluster . METHOD_4 ( ) . getValue ( ) ) ) ) ; getModel ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . get ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . setId ( VAR_2 ) ; VAR_3 . METHOD_2 ( STRING_1 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_4 ( INT_1 ) ; VAR_3 . METHOD_5 ( INT_2 ) ; VAR_3 . METHOD_6 ( INT_3 ) ; TYPE_2 . METHOD_7 ( VAR_1 ) ; TYPE_2 . assertEquals ( VAR_1 , VAR_3 ) ; } 
private boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != ( VAR_1 ) ) { return false ; } org.ovirt.engine.core.compat.Guid VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( METHOD_2 ( ) ) ) . METHOD_4 ( ) ; return ! ( TYPE_1 . equals ( VAR_2 , METHOD_4 ( ) ) ) ; } 
private void METHOD_1 ( java.util.ArrayList < TYPE_1 . Disk > VAR_1 ) { java.util.ArrayList < TYPE_1 . DiskImage > VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 . Linq < TYPE_1 . DiskImage > METHOD_3 ( VAR_1 ) ) ; TYPE_3 . METHOD_4 ( VAR_2 , new TYPE_4 ( ) ) ; METHOD_5 ( ) . setItems ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_2 ( ) ; iface . METHOD_3 ( null ) ; METHOD_4 ( iface , true , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , iface . METHOD_8 ( ) , null ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; final TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_1 . add ( VAR_2 ) ; final TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( null ) ; VAR_1 . add ( VAR_4 ) ; TYPE_2 . METHOD_2 ( VAR_5 ) ; VAR_1 . add ( TYPE_2 ) ; return VAR_1 ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { VAR_3 . METHOD_2 ( STRING_1 , VAR_4 , VAR_2 ) ; synchronized ( VAR_5 ) { if ( VAR_6 . METHOD_3 ( VAR_1 ) ) { for ( org.ovirt.engine.core.compat.Guid VAR_7 : new TYPE_1 < org.ovirt.engine.core.compat.Guid > ( VAR_6 . get ( VAR_1 ) ) ) { METHOD_4 ( VAR_7 , VAR_1 , VAR_2 ) ; } } } } 
private org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; TYPE_1 . when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; return disk ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_2 ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_2 ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_2 ) . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_1 , TYPE_2 . getValue ( ) , TYPE_3 . getValue ( ) ) ; validator = org.mockito.Mockito . METHOD_3 ( new TYPE_4 ( VAR_1 , new java.util.ArrayList < java.lang.String > ( ) ) ) ; METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( false ) ; METHOD_4 ( ) ; command . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_7 ( ) ; TYPE_2 . METHOD_8 ( command . validate ( ) ) ; TYPE_2 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_3 . toString ( ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . DbFacade VAR_1 = METHOD_2 ( ) ; VAR_2 = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_5 ( vmId , METHOD_6 ( ) . METHOD_7 ( ) , METHOD_8 ( ) . METHOD_9 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_10 ( VAR_4 ) ) ; } 
public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages ... VAR_2 ) { command . METHOD_2 ( ) ; for ( TYPE_2 . VdcBllMessages VAR_3 : VAR_2 ) { TYPE_3 . METHOD_3 ( VAR_1 , command , VAR_3 ) ; } return command . getReturnValue ( ) . METHOD_4 ( ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 . VdcActionParametersBase > ( parameters ) ) ; org.mockito.Mockito.when ( VAR_1 . getParameters ( ) ) . thenReturn ( parameters ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_4 ) ) . thenReturn ( null ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 returnValue = new TYPE_1 ( ) ; returnValue . METHOD_2 ( true ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain . setId ( VAR_1 ) ; TYPE_2 < TYPE_3 , java.lang.Object > VAR_2 = new TYPE_2 ( storageDomain . METHOD_3 ( ) , null ) ; returnValue . METHOD_4 ( VAR_2 ) ; return returnValue ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( METHOD_7 ( 0 ) ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_9 ( VAR_2 ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( STRING_1 , ( ! ( VAR_1 . isEmpty ( ) ) ) ) ; TYPE_2 . METHOD_3 ( STRING_2 , ( ( VAR_1 . get ( 0 ) . METHOD_4 ( ) . size ( ) ) == 1 ) ) ; } 
public boolean METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( true ) ; if ( ( METHOD_2 ( ) . METHOD_4 ( ) ) && ( ! ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ) { METHOD_2 ( ) . METHOD_5 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_6 ( ) ) ; METHOD_2 ( ) . METHOD_3 ( false ) ; } return METHOD_2 ( ) . METHOD_7 ( ) ; } 
private void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_3 ( ) ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( METHOD_5 ( ) ) . getId ( ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_1 ) . METHOD_7 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_1 > ( ) ) . when ( VAR_1 ) . METHOD_8 ( VAR_4 ) ; } 
public void METHOD_1 ( ) { quota = METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( VAR_1 ) ) . thenReturn ( quota ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( null , VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_4 , VAR_3 ) ; final org.ovirt.engine.core.compat.Guid VAR_5 = VAR_1 . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_5 ) ; } 
public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > METHOD_4 ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . METHOD_4 ( ) , METHOD_5 ( ) . getValue ( ) , false , true , false , false , true , false , false , true , TYPE_3 . METHOD_6 ( ) ) ; } 
protected boolean validate ( ) { TYPE_1 VAR_1 = METHOD_1 ( ) ; if ( ! ( super . validate ( ) ) ) { return false ; } boolean VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! VAR_2 ) { return METHOD_4 ( VAR_3 ) ; } else if ( ( VAR_1 . METHOD_5 ( ) . size ( ) ) == 1 ) { return METHOD_4 ( VAR_4 ) ; } TYPE_2 VAR_5 = new TYPE_2 ( ) ; return validate ( VAR_5 . METHOD_6 ( VAR_1 ) ) ; } 
protected void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) { TYPE_1 . METHOD_3 ( ) ; if ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ; } METHOD_9 ( ) ; } else { TYPE_1 . METHOD_10 ( ) ; } TYPE_1 . METHOD_11 ( true ) ; } 
protected boolean validate ( ) { if ( ( VAR_1 . METHOD_1 ( ) ) != null ) { return METHOD_2 ( VAR_2 ) ; } if ( ! ( METHOD_3 ( ) ) ) { return METHOD_2 ( VAR_3 ) ; } if ( ! ( TYPE_1 . METHOD_4 ( VAR_4 ) . METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ) ) { return METHOD_2 ( VAR_6 ) ; } return true ; } 
public TYPE_1 < org.ovirt.engine.core.common.businessentities.network.Network > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_1 < org.ovirt.engine.core.common.businessentities.network.Network > VAR_4 = new TYPE_3 < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : VAR_2 ) { if ( ! ( VAR_3 . METHOD_3 ( network . getName ( ) ) ) ) { VAR_4 . add ( network ) ; } } return VAR_4 ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) ; } 
public void METHOD_1 ( long VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = null ; TYPE_3 VAR_3 = null ; try { VAR_2 = VAR_4 . METHOD_2 ( ) ; VAR_3 = VAR_2 . METHOD_3 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ; VAR_3 . METHOD_4 ( 1 , VAR_1 ) ; int VAR_5 = VAR_3 . METHOD_5 ( ) ; if ( VAR_5 != 1 ) { VAR_6 . error ( STRING_4 , VAR_1 ) ; } } finally { TYPE_4 . METHOD_6 ( VAR_3 , VAR_2 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; } } ; TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command . validate ( ) ) ; TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( METHOD_2 ( host ) ) { VAR_2 . add ( host ) ; } } VAR_1 . METHOD_3 ( ) . setItems ( VAR_2 ) ; } 
protected java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , TYPE_1 VAR_2 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain storage : VAR_1 ) { if ( storage . getStoragePoolId ( ) . equals ( VAR_2 ) ) { VAR_3 . add ( storage ) ; } } return VAR_3 ; } 
private boolean METHOD_1 ( ) { boolean result ; switch ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { case VAR_1 : case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : result = true ; break ; default : result = false ; break ; } return result ; } 
private void METHOD_1 ( TYPE_1 version ) { if ( TYPE_2 . METHOD_2 ( version , VAR_1 ) ) { METHOD_3 ( version , TYPE_3 . METHOD_4 ( ) ) ; METHOD_5 ( version , TYPE_4 . METHOD_4 ( ) ) ; METHOD_6 ( version , TYPE_5 . METHOD_4 ( ) ) ; METHOD_7 ( version , TYPE_6 . METHOD_4 ( ) ) ; METHOD_8 ( version , TYPE_6 . METHOD_4 ( ) ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 . VdcQueryReturnValue returnValue = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) ; VAR_2 = returnValue . getReturnValue ( ) ; if ( ( VAR_2 ) == null ) { VAR_2 = TYPE_2 . METHOD_1 ( ) ; } METHOD_2 ( ) ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; } super . METHOD_1 ( ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 command ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ; org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_6 ( null ) ; } 
public static void METHOD_1 ( TYPE_1 nic , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = nic . METHOD_2 ( ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_3 : new java.util.ArrayList < TYPE_2 > ( VAR_2 ) ) { TYPE_3 . METHOD_3 ( VAR_3 , null , VAR_1 ) . METHOD_4 ( ) ; } } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 ) , aQuery ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . assertEquals ( cluster . getStoragePoolId ( ) , VAR_3 . METHOD_3 ( ) ) ; TYPE_2 . assertEquals ( VAR_4 . StoragePool , VAR_3 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . METHOD_2 ( VAR_1 ) ; vds . METHOD_3 ( 1 ) ; TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( vds ) ) ; vds . METHOD_3 ( 0 ) ; TYPE_1 . METHOD_6 ( VAR_2 . METHOD_5 ( vds ) ) ; vds . METHOD_2 ( VAR_3 ) ; TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( vds ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( ) ; if ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) { list . add ( new TYPE_3 ( METHOD_4 ( ) , null , VAR_2 , METHOD_5 ( ) . getValue ( ) , METHOD_6 ( ) ) ) ; } return list ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 model = ( ( TYPE_3 ) ( sender ) ) ; java.util.List < TYPE_4 > VAR_2 = ( ( java.util.List < TYPE_4 > ) ( model . METHOD_2 ( ) ) ) ; METHOD_3 ( VAR_2 ) ; } 
public static java.lang.String METHOD_1 ( java.util.ArrayList < TYPE_1 . Disk > VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } final java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 . Disk disk : VAR_1 ) { VAR_2 . add ( disk . METHOD_2 ( ) ) ; } return TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( ) . get ( iface . getName ( ) ) ; if ( VAR_1 == null ) { return true ; } return ! ( TYPE_1 . equals ( iface . METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ) ; } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( ) , new TYPE_4 < TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( TYPE_5 VAR_2 ) throws TYPE_6 { return null ; } } ) ; VAR_3 = new TYPE_7 ( VAR_4 ) ; VAR_5 = new TYPE_8 < org.ovirt.engine.core.common.businessentities.VDS > ( new TYPE_9 < org.ovirt.engine.core.common.businessentities.VDS > ( ) { public java.lang.String METHOD_3 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return vds . METHOD_4 ( ) ; } } ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_2 ( VAR_1 ) ; METHOD_3 ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_4 ( STRING_1 , network ) ; METHOD_5 ( iface ) ; iface . METHOD_6 ( true ) ; org.ovirt.engine.core.common.businessentities.VDS host = org.mockito.Mockito . METHOD_7 ( VAR_2 . VDS class ) ; TYPE_1 VAR_3 = METHOD_8 ( METHOD_9 ( iface ) , host ) ; METHOD_10 ( VAR_3 , VAR_4 , VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( true ) ; TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) ; TYPE_2 . assertEquals ( STRING_3 , STRING_4 , VAR_1 . METHOD_3 ( STRING_5 ) ) ; TYPE_2 . assertEquals ( STRING_6 , STRING_4 , VAR_1 . METHOD_3 ( null ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 model = ( ( TYPE_1 ) ( getWindow ( ) ) ) ; if ( ( model . METHOD_2 ( ) ) != null ) { return ; } model . METHOD_3 ( ) ; METHOD_4 ( model ) ; new TYPE_2 ( this , model , getEntity ( ) ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) ; METHOD_3 ( VAR_1 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( vds ) . getStatus ( ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( vds ) . getStatus ( ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Disk model = TYPE_2 . getModel ( ) ; model . METHOD_2 ( null ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; try { VAR_2 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
protected TYPE_1 METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , TYPE_3 < ? extends TYPE_2 . VdcActionParametersBase > VAR_2 , java.lang.String [ ] VAR_3 , java.lang.Object [ ] VAR_4 , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_5 , java.util.ArrayList < TYPE_4 > VAR_6 ) { java.lang.String VAR_7 = ( STRING_1 + ( VAR_8 [ 0 ] ) ) + STRING_2 ; return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true , true , null , VAR_5 , VAR_6 , VAR_7 , true ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , new TYPE_2 ( vm . getId ( ) , VAR_3 ) , null , null ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( TYPE_1 . equals ( command . getName ( ) ) ) { METHOD_2 ( ) ; } else if ( ( ( TYPE_2 . equals ( command . getName ( ) ) ) || ( TYPE_3 . equals ( command . getName ( ) ) ) ) || ( TYPE_4 . equals ( command . getName ( ) ) ) ) { METHOD_3 ( ) ; } else { super . METHOD_1 ( command ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 type , TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) != type ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { return TYPE_1 . METHOD_1 ( type , VAR_1 . METHOD_3 ( ) ) ; } return null ; } return VAR_1 ; } 
private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { return false ; } org.ovirt.engine.core.compat.Guid VAR_1 = ( ( TYPE_1 . DiskImage ) ( METHOD_2 ( ) ) ) . METHOD_5 ( ) ; return ! ( TYPE_2 . equals ( VAR_1 , METHOD_5 ( ) ) ) ; } 
private org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { return new org.ovirt.engine.core.common.businessentities.DiskImage ( TYPE_1 . instance ( ) . METHOD_2 ( ) , new TYPE_2 ( ) , new TYPE_2 ( ) , INT_1 , STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , STRING_2 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , INT_1 , VAR_2 , VAR_1 , VAR_3 , new TYPE_2 ( ) , STRING_3 , VAR_4 . VM , null , null , VAR_5 , false ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) . toString ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ; TYPE_2 . METHOD_9 ( true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( true ) ; METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_2 . METHOD_4 ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_1 ) ; METHOD_7 ( ) ; METHOD_8 ( STRING_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { java.lang.String VAR_2 = VAR_3 ; if ( VAR_2 . equals ( STRING_1 ) ) { METHOD_2 ( object ) ; } else if ( VAR_2 . equals ( STRING_2 ) ) { VAR_4 . METHOD_3 ( object . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; VAR_1 . add ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) ; TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( vm , null , VAR_1 ) , true , null ) ; } 
private void METHOD_1 ( java.lang.Object returnValue , int VAR_1 , int VAR_2 , int VAR_3 ) { org.ovirt.engine.core.compat . Version version = ( ( org.ovirt.engine.core.compat . Version ) ( returnValue ) ) ; TYPE_1 . assertEquals ( version . METHOD_2 ( ) , VAR_1 ) ; TYPE_1 . assertEquals ( version . METHOD_3 ( ) , VAR_2 ) ; TYPE_1 . assertEquals ( version . METHOD_4 ( ) , VAR_3 ) ; TYPE_1 . assertEquals ( version . METHOD_5 ( ) , 0 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 class ) ; java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; TYPE_4 . METHOD_4 ( STRING_2 , VAR_3 . METHOD_5 ( STRING_2 ) ) ; TYPE_4 . METHOD_4 ( STRING_3 , VAR_3 . METHOD_5 ( STRING_3 ) ) ; } 
protected void METHOD_1 ( TYPE_1 parameters ) { super . METHOD_2 ( parameters . METHOD_3 ( ) ) ; if ( ( ( METHOD_4 ( ) ) != null ) && ( ( METHOD_4 ( ) . METHOD_5 ( ) ) != null ) ) { METHOD_6 ( METHOD_4 ( ) . METHOD_5 ( ) . getValue ( ) ) ; } } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , true , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; } 
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return METHOD_2 ( ( ( ( iface . getName ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) , false , null , null , VAR_2 , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_3 ) ) . when ( cmd ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_4 ) . get ( VAR_5 ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( true ) ) . when ( VAR_6 ) . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_4 = METHOD_2 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_6 , VAR_7 ) ; METHOD_5 ( VAR_8 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_6 ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( command . validate ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( true ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) ; } 
private java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.util.Map < java.lang.String , java.lang.String > returnValue = new java.util.HashMap < java.lang.String , java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ; TYPE_2 < java.lang.String > VAR_3 = METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 != null ) && ( ( VAR_3 . size ( ) ) > 0 ) ) { TYPE_3 . METHOD_4 ( VAR_2 , VAR_3 , returnValue ) ; } return returnValue ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; if ( source != null ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( source ) ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ) ; while ( VAR_2 . METHOD_2 ( ) ) { list . add ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_2 . METHOD_3 ( ) ) ) ) ; } } return list ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; model . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( model ) ; TYPE_2 entity = VAR_1 . getEntity ( ) ; model . setEntity ( entity ) ; model . METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( false ) ; VAR_2 . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( nic ) ; TYPE_1 VAR_1 = METHOD_4 ( METHOD_5 ( nic ) ) ; METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( VAR_1 . METHOD_8 ( ) . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , null ) . equals ( VAR_1 ) ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null ) . equals ( VAR_2 ) ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_2 , null ) . equals ( VAR_2 ) ) ; } 
private java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : VAR_1 ) { VAR_2 . add ( vds . METHOD_2 ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; try { VAR_2 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , METHOD_8 ( ) ) ; } } 
public boolean METHOD_1 ( TYPE_1 storageDomain ) { java.util.List < TYPE_2 > list = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( storageDomain . METHOD_4 ( ) ) ; for ( TYPE_2 VAR_1 : METHOD_5 ( list , storageDomain . METHOD_4 ( ) , STRING_1 ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; } METHOD_8 ( storageDomain ) ; return true ; } 
public void METHOD_1 ( ) { java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > result = dao . METHOD_2 ( VAR_1 , true ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( STRING_1 , 1 , result . get ( false ) . size ( ) ) ; } 
protected < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_1 model , java.lang.String VAR_1 ) { java.util.List < TYPE_3 > VAR_2 = new java.util.ArrayList < TYPE_3 > ( model . METHOD_2 ( ) ) ; for ( TYPE_3 VAR_3 : model . METHOD_2 ( ) ) { if ( VAR_3 . METHOD_3 ( ) . equals ( VAR_1 ) ) { VAR_2 . METHOD_4 ( VAR_3 ) ; break ; } } model . METHOD_2 ( ) . METHOD_5 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( false ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_8 ( TYPE_2 . any ( ) ) ) . thenReturn ( new TYPE_3 . ValidationResult ( VAR_3 ) ) ; TYPE_4 . METHOD_9 ( command , VAR_4 ) ; } 
private void METHOD_1 ( ) { final TYPE_1 model = ( ( TYPE_1 ) ( getWindow ( ) ) ) ; model . METHOD_2 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_1 , METHOD_4 ( false ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { model . METHOD_6 ( ) ; METHOD_7 ( null ) ; } } , this ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 > VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; this . VAR_1 = VAR_1 ; if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( false ) ; } else { METHOD_4 ( VAR_2 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 parameters = new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_2 ( ) , VAR_1 . getId ( ) ) ; parameters . METHOD_3 ( false ) ; METHOD_4 ( TYPE_4 . getInstance ( ) . METHOD_5 ( VAR_2 , parameters ) . getSucceeded ( ) ) ; TYPE_3 . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 quota = METHOD_2 ( ) ; quota . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_5 ( quota ) ; VAR_1 . METHOD_6 ( ) ; TYPE_2 VAR_2 = VAR_3 . list ( ) ; METHOD_7 ( VAR_2 , 1 ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_8 ( ) . get ( 0 ) ; assertEquals ( INT_1 , VAR_4 . METHOD_9 ( ) . METHOD_10 ( ) ) ; } 
public < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 < TYPE_1 > VAR_2 , final TYPE_3 VAR_3 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_4 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; java.util.List < ? > VAR_5 = ( ( java.util.List < ? > ) ( VAR_4 . get ( VAR_6 ) ) ) ; return VAR_5 != null ? ( ( java.util.List < TYPE_1 > ) ( VAR_5 ) ) : null ; } 
public static org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface i : VAR_1 ) { if ( ( ( i . METHOD_2 ( ) ) != null ) && ( i . METHOD_2 ( ) ) ) { return i ; } } return null ; } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( getParameters ( ) . METHOD_2 ( ) ) ) { METHOD_3 ( VAR_1 , METHOD_4 ( ) ) ; } else { METHOD_3 ( VAR_1 , null ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_2 ) ; } return null ; } 
private void METHOD_1 ( boolean VAR_1 ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( METHOD_2 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) ; METHOD_4 ( VAR_2 , VAR_1 ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) . METHOD_9 ( true ) ; METHOD_8 ( ) . METHOD_10 ( ) ; TYPE_1 . METHOD_11 ( METHOD_8 ( ) , true ) ; TYPE_2 . METHOD_12 ( METHOD_8 ( ) ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 storage ) { if ( ( ( storage . METHOD_2 ( ) ) == null ) || ( ( storage . METHOD_2 ( ) ) < 1 ) ) { return STRING_1 ; } return ( storage . METHOD_2 ( ) ) + STRING_2 ; } 
void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_2 VAR_2 , java.lang.Object sender , TYPE_3 args ) { if ( ! ( METHOD_3 ( VAR_3 . getSelectedItem ( ) , model ) ) ) { METHOD_4 ( ) . METHOD_5 ( model . METHOD_6 ( ) ) ; } else { METHOD_4 ( ) . METHOD_7 ( ) ; } } } ; VAR_3 . METHOD_8 ( ) . METHOD_9 ( VAR_1 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_2 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 . METHOD_5 ( ) ) . addValue ( STRING_3 , VAR_1 . METHOD_6 ( ) ) . addValue ( STRING_4 , VAR_1 . METHOD_7 ( ) ) . addValue ( STRING_5 , VAR_1 . METHOD_8 ( ) ) . addValue ( STRING_6 , VAR_1 . METHOD_9 ( ) ) . addValue ( STRING_7 , TYPE_2 . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) ) ) ; } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { VAR_2 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { VAR_2 . put ( vm . getId ( ) , TYPE_1 . name ( ) ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 , org.ovirt.engine.core.compat.Guid VAR_4 , org.ovirt.engine.core.compat.Guid VAR_5 , org.ovirt.engine.core.compat.Guid VAR_6 ) { if ( METHOD_2 ( VAR_2 , VAR_5 ) ) { TYPE_4 . DiskImage VAR_7 = METHOD_3 ( VAR_3 , VAR_4 , VAR_6 , VAR_1 . getId ( ) ) ; return TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) ) ; } return null ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; if ( VAR_1 != null ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_3 , aQuery ) ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < TYPE_1 > result = new java.util.ArrayList < > ( ) ; if ( VAR_1 != null ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { for ( TYPE_2 VAR_3 : VAR_2 ) { result . add ( TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ) ; } } } return result ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 , java.lang.Integer VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , VAR_4 . VDS ) ; if ( VAR_2 != null ) { VAR_3 . METHOD_2 ( VAR_2 ) ; } org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_5 , VAR_3 , aQuery ) ; } 
private boolean METHOD_1 ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > > VAR_1 ) { for ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > VAR_2 : VAR_1 ) { if ( ( VAR_2 . getEntity ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_3 ) ) { return true ; } } return false ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; TYPE_1 tempVar = new TYPE_1 ( VAR_1 ) ; tempVar . METHOD_4 ( version ) ; METHOD_5 ( tempVar , aQuery ) ; } 
protected void METHOD_1 ( TYPE_1 event ) { super . METHOD_1 ( event ) ; if ( ( ( VAR_1 ) != null ) && ( ( ( event . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( event . METHOD_2 ( ) ) == ( VAR_3 ) ) ) ) { VAR_1 . METHOD_3 ( event . METHOD_4 ( ) ) ; } } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( TYPE_3 ) ( returnValue ) ) ) ; } } ) ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_2 ( ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_5 ( TYPE_1 . any ( VAR_1 class ) , TYPE_1 . METHOD_6 ( ) ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; cmd . METHOD_10 ( ) ; } 
protected void METHOD_1 ( ) { command = METHOD_2 ( ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_8 ( ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 ) . when ( ( ( ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_2 . METHOD_4 ( ) ) ) && ( ( VAR_2 . getStatus ( ) ) != ( VAR_3 ) ) ) && ( ( VAR_2 . getStatus ( ) ) != ( VAR_4 ) ) ) ) ; } 
private void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , TYPE_1 < TYPE_2 . ValidationResult > VAR_3 ) { java.lang.String VAR_4 = STRING_1 ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_5 = METHOD_2 ( VAR_4 , true ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_6 = METHOD_3 ( VAR_4 , VAR_1 ) ; TYPE_3 . METHOD_4 ( VAR_2 , new TYPE_4 ( VAR_5 ) . METHOD_5 ( VAR_6 ) , VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { boolean VAR_2 = ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( ! VAR_2 ) ) ; } 
private void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_2 ( ) ) ; METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ; } else { TYPE_1 . METHOD_7 ( false ) ; log . METHOD_8 ( STRING_1 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . StorageDomain ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , VAR_1 , aQuery ) ; } 
public static java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_3 : VAR_1 ) { VAR_2 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) ; } return VAR_2 ; } else { return TYPE_1 . METHOD_3 ( ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , boolean VAR_2 ) { org.mockito.Mockito . METHOD_2 ( frontend , org.mockito.Mockito . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) , VAR_5 . METHOD_6 ( ) , TYPE_2 . METHOD_5 ( VAR_2 ) ) ; java.util.List < TYPE_1 > VAR_6 = VAR_5 . METHOD_7 ( ) ; return VAR_6 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( STRING_1 , command . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( STRING_2 , command . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; } 
private static void METHOD_1 ( TYPE_1 vm ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_1 , vm . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( vm . METHOD_7 ( ) , vm . METHOD_8 ( ) ) , true , true , null ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( pool ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { boolean returnValue = ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ; if ( returnValue ) { command . METHOD_1 ( ) ; } else { org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , VAR_2 , VAR_3 ) ; } } 
public void METHOD_1 ( final TYPE_1 object ) { super . METHOD_1 ( object ) ; VAR_1 . METHOD_1 ( object . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( true ) ; VAR_3 . METHOD_3 ( false ) ; VAR_1 . METHOD_3 ( true ) ; VAR_4 . METHOD_3 ( false ) ; VAR_5 . METHOD_3 ( false ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; VAR_6 . METHOD_5 ( VAR_8 , INT_1 ) ; METHOD_6 ( ) . METHOD_7 ( INT_2 , INT_2 ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( super . METHOD_1 ( ) ) ) { return false ; } if ( ! ( TYPE_1 . METHOD_2 ( TYPE_2 . getVdsGroup ( ) . METHOD_3 ( ) ) ) ) { METHOD_4 ( VAR_1 ) ; } return true ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( returnValue ) ) ; model . METHOD_2 ( ) . setItems ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( TYPE_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VmTemplate [ ] { template } ) ) ) ; model . METHOD_2 ( ) . setSelectedItem ( template ) ; model . METHOD_2 ( ) . setIsChangable ( false ) ; METHOD_4 ( ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) ) { return false ; } return true ; } 
public < TYPE_1 > TYPE_1 get ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( VAR_2 . METHOD_1 ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) { throw new TYPE_3 ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 . METHOD_1 ( ) , VAR_1 ) ) ; } TYPE_1 value = get ( VAR_1 ) ; if ( value == null ) { value = VAR_2 ; } return value ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 ) { if ( VAR_1 == null ) { VAR_4 . error ( STRING_1 ) ; return false ; } if ( ! ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) ) { return false ; } return true ; } 
protected void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; java.lang.String VAR_2 = VAR_3 < java.lang.String > METHOD_4 ( VAR_4 ) ; TYPE_3 . METHOD_5 ( VAR_1 , new TYPE_4 ( VAR_2 ) ) ; TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { VAR_1 = cmd . getParameters ( ) . METHOD_2 ( ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) return true ; if ( ! ( VAR_1 instanceof TYPE_1 ) ) return false ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( TYPE_2 . equals ( METHOD_1 ( ) , VAR_2 . METHOD_1 ( ) ) ) && ( TYPE_2 . equals ( METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) ) ; } 
public static TYPE_1 . DiskImage METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 . DiskImage image = TYPE_4 . METHOD_2 ( vm , VAR_1 , VAR_2 ) ; image . METHOD_3 ( TYPE_4 . METHOD_4 ( vm . getName ( ) ) ) ; image . METHOD_5 ( VAR_3 ) ; return image ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . METHOD_2 ( VAR_1 . isEmpty ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 . DiskImage VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 . getId ( ) ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( ( ( ! ( VAR_4 . isEmpty ( ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ) ; VAR_2 . METHOD_6 ( getParameters ( ) . METHOD_7 ( ) ) ; return METHOD_8 ( VAR_2 , METHOD_9 ( ) ) ; } 
private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( VAR_1 , vm . getId ( ) ) , VAR_2 , STRING_1 , STRING_2 , 1 , new java.util.HashMap < > ( ) , true , true , true , STRING_3 , new java.util.HashMap < > ( ) , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_4 , true ) ; } 
protected org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM result = null ; TYPE_1 . VdcQueryReturnValue VAR_1 = TYPE_2 . getInstance ( ) . RunQuery ( VAR_2 , new TYPE_3 ( VAR_3 . getId ( ) ) ) ; if ( VAR_1 . getSucceeded ( ) ) { result = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( VAR_1 . getReturnValue ( ) ) ) ; } return result ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 VAR_2 , boolean VAR_3 ) { return TYPE_4 . METHOD_2 ( VAR_1 , VAR_4 , new TYPE_3 ( ) . METHOD_3 ( VAR_5 , VAR_6 ) . METHOD_3 ( VAR_7 , VAR_3 ) . METHOD_3 ( VAR_8 , VAR_2 ) ) ; } 
protected void METHOD_1 ( TYPE_1 model ) { java.lang.String VAR_1 = model . METHOD_2 ( ) . name ; java.lang.String VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; java.lang.String VAR_3 = model . METHOD_4 ( ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( STRING_1 , ( VAR_3 + VAR_2 ) , VAR_4 ) ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = super . METHOD_1 ( ) ; org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ; java.lang.String VAR_2 = ( ( vds != null ) && ( ( vds . METHOD_3 ( ) ) != null ) ) ? vds . METHOD_3 ( ) : STRING_1 ; VAR_1 . put ( TYPE_2 . name ( ) . METHOD_4 ( ) , VAR_2 ) ; } return VAR_1 ; } 
protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . getId ( ) ; org.ovirt.engine.core.compat.Guid VAR_3 = VAR_1 . METHOD_2 ( ) . getValue ( ) ; TYPE_2 params = new TYPE_2 ( VAR_2 , VAR_3 ) ; params . METHOD_3 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) ) ; return TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_4 , params ) . getSucceeded ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 class . METHOD_2 ( STRING_1 ) ; TYPE_2 VAR_3 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; VAR_4 = VAR_3 . METHOD_5 ( VAR_1 ) ; TYPE_4 VAR_5 = TYPE_5 . METHOD_3 ( ) . METHOD_6 ( ) ; VAR_6 = VAR_5 . METHOD_7 ( STRING_2 ) ; VAR_7 = VAR_5 . METHOD_7 ( STRING_3 ) ; VAR_8 = VAR_5 . METHOD_7 ( STRING_4 ) ; } 
public void METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > map = TYPE_1 . METHOD_2 ( list , new TYPE_2 < java.lang.String , java.lang.String > ( ) { public java.lang.String METHOD_3 ( java.lang.String VAR_1 ) { return VAR_1 . METHOD_4 ( 0 , 1 ) ; } } ) ; java.util.Map < java.lang.String , java.lang.String > VAR_2 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) { { put ( STRING_1 , STRING_2 ) ; put ( STRING_3 , STRING_4 ) ; } } ; TYPE_3 . assertEquals ( map , VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.util.Map < java.lang.String , java.lang.String > VAR_4 = new java.util.HashMap < > ( ) ; VAR_4 . put ( STRING_1 , VAR_2 ) ; VAR_4 . put ( STRING_2 , VAR_3 ) ; TYPE_2 tempVar = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ; TYPE_4 . getInstance ( ) . METHOD_3 ( VAR_5 , tempVar , TYPE_5 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ; } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_3 : VAR_1 ) { TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 . getId ( ) ) ; TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) . METHOD_6 ( VAR_3 . getId ( ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.common.businessentities.VM VAR_2 ) { TYPE_2 VAR_3 = VAR_2 . getStatus ( ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_2 ( ) ; if ( ( ( VAR_3 == ( VAR_5 ) ) && ( VAR_4 != ( VAR_5 ) ) ) && ( VAR_4 . METHOD_3 ( ) ) ) { VAR_6 . add ( VAR_1 . getId ( ) ) ; VAR_7 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) ) ; VAR_2 . METHOD_5 ( null ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; } } ; VAR_1 . onSuccess ( aQuery . getModel ( ) , INT_1 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return super . METHOD_1 ( VAR_1 ) . append ( STRING_1 , METHOD_2 ( ) ) . append ( STRING_2 , METHOD_3 ( ) ) . append ( STRING_3 , METHOD_4 ( ) ) . append ( STRING_4 , TYPE_2 . METHOD_5 ( METHOD_6 ( ) , STRING_5 ) ) . append ( STRING_6 , METHOD_7 ( ) ) . append ( STRING_7 , TYPE_2 . METHOD_5 ( METHOD_8 ( ) , STRING_5 ) ) . append ( STRING_8 , METHOD_9 ( ) ) ; } 
protected void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcQueryType > VAR_1 = new java.util.ArrayList < TYPE_1 . VdcQueryType > ( ) ; VAR_1 . add ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; java.util.ArrayList < TYPE_3 > VAR_5 = new java.util.ArrayList < TYPE_3 > ( TYPE_4 . METHOD_3 ( new TYPE_3 [ ] { VAR_3 } ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , VAR_5 , this , getModel ( ) . METHOD_5 ( ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( TYPE_1 ) ( getEntity ( ) ) ) . METHOD_2 ( ) ; setItems ( template . METHOD_3 ( ) ) ; } else { setItems ( null ) ; } } 
public void METHOD_1 ( TYPE_1 < java.lang.String > event ) { super . METHOD_1 ( event ) ; if ( VAR_1 . METHOD_2 ( ) ) { TYPE_2 . get ( ) . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( ) { TYPE_4 VAR_2 = TYPE_5 . METHOD_5 ( STRING_1 ) ; if ( VAR_2 != null ) { TYPE_4 VAR_3 = VAR_2 . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( ) ; VAR_3 . METHOD_8 ( VAR_2 ) ; } } } ) ; } } 
public int METHOD_1 ( TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities.VM > VAR_1 , TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities.VM > VAR_2 ) { int VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; if ( VAR_3 != 0 ) { return VAR_3 ; } return VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ; } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) . setIsChangable ( false ) ; VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } } 
public static TYPE_1 < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( TYPE_1 < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { TYPE_1 < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_2 = new TYPE_2 < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : VAR_1 ) { org.ovirt.engine.core.common.businessentities.DiskImage VAR_3 = org.ovirt.engine.core.common.businessentities.DiskImage . METHOD_2 ( diskImage ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; VAR_2 . add ( VAR_3 ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_2 ( VAR_3 , host , VAR_4 ) ; TYPE_3 . METHOD_4 ( validator . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) ) ; } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_1 ( ) ) ; TYPE_2 . when ( VAR_2 . METHOD_2 ( TYPE_3 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; } 
public TYPE_1 . AuditLogType METHOD_1 ( ) { return TYPE_2 . getSucceeded ( ) ? ( TYPE_2 . METHOD_2 ( ) ) == ( VAR_1 ) ? VAR_2 : TYPE_2 . METHOD_3 ( ) ? VAR_3 : VAR_4 : VAR_5 ? VAR_6 : ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) == ( VAR_7 ) ? VAR_8 : VAR_9 ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; if ( ( getModel ( ) . METHOD_2 ( ) ) && ( ! ( getModel ( ) . METHOD_3 ( ) ) ) ) { VAR_1 = TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; } return VAR_1 ; } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; for ( TYPE_1 domain : VAR_1 ) { if ( ( domain . METHOD_1 ( ) ) == ( VAR_2 ) ) { return domain ; } } } return null ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( ( TYPE_2 . equals ( id , other . id ) ) && ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_2 ) ; dao . METHOD_5 ( TYPE_2 . METHOD_6 ( new TYPE_1 [ ] { VAR_2 , VAR_1 } ) ) ; TYPE_3 . assertEquals ( VAR_2 , dao . get ( VAR_2 . getId ( ) ) ) ; TYPE_3 . assertEquals ( VAR_1 , dao . get ( VAR_1 . getId ( ) ) ) ; } 
private void METHOD_1 ( java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 != null ) { for ( TYPE_2 < org.ovirt.engine.core.compat.Guid , java.lang.String > VAR_3 : VAR_1 . METHOD_2 ( ) ) { VAR_2 . append ( STRING_1 ) . append ( VAR_3 . METHOD_3 ( ) ) . append ( STRING_2 ) . append ( VAR_3 . getValue ( ) ) . append ( CHAR_1 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = TYPE_1 . instance ( ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_1 ) ; java.lang.String VAR_2 = TYPE_1 . instance ( ) . METHOD_6 ( INT_1 ) ; org.mockito.Mockito.when ( TYPE_3 . METHOD_4 ( ) . METHOD_7 ( ) ) . thenReturn ( VAR_2 ) ; TYPE_4 . getInstance ( ) . METHOD_8 ( VAR_2 , TYPE_3 . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; org.mockito.Mockito.when ( command . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_1 . any ( VAR_5 . Integer class ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ; command . METHOD_7 ( ) ; TYPE_3 . METHOD_8 ( command , VAR_6 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 2 ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( new java.lang.Integer ( 2 ) , TYPE_3 . toString ( ) ) ) ; VAR_1 . METHOD_4 ( 0 ) ; VAR_1 . METHOD_5 ( 0 ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( METHOD_9 ( ) ) ; return TYPE_4 . METHOD_10 ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( getWindow ( ) ) ) ; model . METHOD_2 ( ) ; if ( ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) { METHOD_3 ( ) ; if ( model . METHOD_4 ( ) ) { METHOD_5 ( returnValue . METHOD_6 ( ) ) ; METHOD_7 ( ) ; METHOD_8 ( ) . METHOD_9 ( ) ; } } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_1 . any ( VAR_2 . VM class ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_3 ) ) ; TYPE_3 . METHOD_6 ( command , VAR_4 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . AuditLogType VAR_2 ) { int VAR_3 = ( ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_1 . METHOD_3 ( ) ) == 0 ) ) ? INT_1 : VAR_2 . METHOD_4 ( ) ; if ( VAR_3 > 0 ) { VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_3 ) ) ; VAR_1 . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 , VAR_2 ) ) ; } } 
private java.util.List < java.lang.Integer > METHOD_1 ( java.util.List < java.lang.Integer > VAR_1 , java.util.List < java.lang.Integer > VAR_2 ) { java.util.List < java.lang.Integer > VAR_3 = new java.util.ArrayList < java.lang.Integer > ( ) ; int VAR_4 = METHOD_2 ( ) ; for ( java.lang.Integer VAR_5 : VAR_1 ) { for ( java.lang.Integer other : VAR_2 ) { if ( ( VAR_5 * other ) == VAR_4 ) { VAR_3 . add ( VAR_5 ) ; break ; } } } return VAR_3 ; } 
private boolean METHOD_1 ( ) { return ( ( ! ( VAR_1 . METHOD_2 ( ) . equals ( TYPE_1 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ) || ( ! ( VAR_1 . METHOD_4 ( ) . equals ( TYPE_1 . METHOD_4 ( ) ) ) ) ) || ( ( VAR_1 . METHOD_5 ( ) ) != ( TYPE_1 . METHOD_3 ( ) . METHOD_5 ( ) ) ) ; } 
private void METHOD_1 ( ) throws TYPE_1 { java.lang.String action = args . get ( VAR_1 ) ; if ( TYPE_2 . equals ( action ) ) { METHOD_2 ( ) ; } else if ( TYPE_3 . equals ( action ) ) { METHOD_3 ( ) ; } else if ( TYPE_4 . equals ( action ) ) { METHOD_4 ( ) ; } else if ( TYPE_5 . equals ( action ) ) { validate ( ) ; } else if ( TYPE_6 . equals ( action ) ) { METHOD_5 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = new TYPE_1 ( VAR_2 , new TYPE_3 ( ) , null ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito . METHOD_3 ( VAR_5 ) . METHOD_5 ( TYPE_4 . any ( VAR_6 class ) ) ; TYPE_5 . assertEquals ( STRING_1 , VAR_1 , VAR_3 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; org.mockito.Mockito.when ( command . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_1 . any ( VAR_5 . Integer class ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( command , VAR_6 ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 ) { boolean VAR_2 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ; METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ; METHOD_4 ( ) . setIsChangable ( ( VAR_2 && ( METHOD_7 ( ) ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 user ) { if ( user . METHOD_2 ( ) ) { return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } if ( user . METHOD_5 ( ) ) { return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_6 ( ) ) ; } return TYPE_3 . METHOD_3 ( VAR_1 . user ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_2 > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_1 , VAR_5 , VAR_2 , VAR_3 ) , aQuery ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( INT_1 , INT_1 , INT_1 ) ; TYPE_2 . assertEquals ( STRING_1 , INT_1 , VAR_2 ) ; TYPE_2 . assertEquals ( STRING_2 , INT_1 , VAR_3 ) ; TYPE_2 . assertEquals ( STRING_3 , INT_1 , VAR_4 ) ; TYPE_2 . assertEquals ( STRING_4 , 0 , VAR_5 ) ; TYPE_2 . assertEquals ( STRING_5 , 0 , VAR_6 ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( VAR_4 , METHOD_3 ( VAR_1 ) , null , new TYPE_4 ( VAR_5 , VAR_2 ) ) ; try { VAR_3 . get ( ) ; } catch ( TYPE_5 | TYPE_6 e ) { log . error ( STRING_1 , VAR_1 ) ; log . error ( STRING_2 , e ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; TYPE_2 params = new TYPE_2 ( VAR_1 , VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , params , aQuery ) ; } 
public void METHOD_1 ( TYPE_1 context , final TYPE_2 VAR_1 , TYPE_3 object , TYPE_4 event ) { super . METHOD_1 ( context , VAR_1 , object , event ) ; if ( TYPE_5 . equals ( event . METHOD_2 ( ) ) ) { TYPE_6 VAR_2 = METHOD_3 ( object ) ; if ( ! ( STRING_1 . equals ( VAR_2 . METHOD_4 ( ) ) ) ) { VAR_3 . METHOD_5 ( METHOD_3 ( object ) ) ; } } VAR_3 . METHOD_6 ( VAR_1 , event ) ; } 
private java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_2 : METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) ; } return VAR_1 ; } 
public static TYPE_1 map ( TYPE_2 model , TYPE_1 template ) { assert ( model . METHOD_1 ( ) ) || ( model . METHOD_2 ( ) ) ; return template != null ? template : ( model . getId ( ) ) != null ? TYPE_1 . METHOD_3 ( java.lang.Integer . METHOD_4 ( model . getId ( ) ) ) : TYPE_1 . valueOf ( model . getName ( ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_2 ( result ) ; TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_1 . getId ( ) ) , 1 ) ; result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_1 . getId ( ) ) , 0 ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.lang.String VAR_1 = vm . getName ( ) ; int VAR_2 = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ; int VAR_5 = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_6 ) ; int VAR_7 = ( VAR_8 . METHOD_3 ( vm . METHOD_4 ( ) ) ) ? VAR_2 : VAR_5 ; boolean VAR_9 = ( VAR_1 . length ( ) ) <= VAR_7 ; return VAR_9 ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = TYPE_1 . METHOD_3 ( METHOD_4 ( STRING_1 , null ) ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( METHOD_7 ( VAR_1 , VAR_3 ) ) ; METHOD_8 ( VAR_4 , VAR_5 ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , VAR_1 ) ; if ( TYPE_3 . METHOD_4 ( VAR_1 ) ) { try { VAR_2 = TYPE_3 . METHOD_5 ( VAR_1 ) ; } catch ( TYPE_4 e ) { VAR_3 . error ( ( STRING_2 + VAR_1 ) , e ) ; } } else { VAR_3 . error ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 VAR_2 = METHOD_3 ( ) ; long VAR_3 = TYPE_2 . METHOD_4 ( ) ; if ( VAR_2 . METHOD_5 ( ) ) { METHOD_6 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) , VAR_3 ) ; METHOD_9 ( VAR_2 . METHOD_10 ( ) . METHOD_11 ( ) . map ( TYPE_3 : : METHOD_12 ) , VAR_3 ) ; } else { VAR_4 . METHOD_13 ( STRING_1 , VAR_1 . METHOD_14 ( ) ) ; } } } 
public boolean METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_2 = 0 ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; try { for ( java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_1 > VAR_4 : VAR_5 . METHOD_6 ( ) ) { VAR_2 += VAR_4 . size ( ) ; } } finally { VAR_3 . METHOD_4 ( ) . METHOD_7 ( ) ; } return VAR_2 < ( ( VAR_1 * ( VAR_6 < java.lang.Integer > METHOD_8 ( VAR_7 ) ) ) / INT_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_1 ( ) ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , null , VAR_1 , false ) ; METHOD_3 ( VAR_2 [ INT_1 ] , 2 ) ; METHOD_4 ( METHOD_5 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 } , new java.lang.Object [ ] { VAR_2 [ 1 ] , VAR_2 [ INT_1 ] , VAR_2 [ 0 ] } , true , true ) ) ; METHOD_6 ( resource . METHOD_7 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { get ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . setId ( id ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; TYPE_3 parameters = new TYPE_3 ( VAR_1 , VAR_2 ) ; return METHOD_2 ( VAR_4 , parameters ) ; } 
private java.util.List < TYPE_1 . DiskImage > METHOD_1 ( ) { TYPE_1 . DiskImage disk = new TYPE_1 . DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( new java.util.ArrayList ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ; java.util.List < TYPE_1 . DiskImage > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( disk ) ; return VAR_3 ; } 
public void METHOD_1 ( ) { TYPE_1 . assertEquals ( STRING_1 , dao . METHOD_2 ( VAR_1 ) , VAR_2 ) ; TYPE_1 . assertEquals ( STRING_1 , dao . METHOD_2 ( VAR_3 ) , VAR_4 ) ; TYPE_1 . assertEquals ( STRING_1 , dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) , 0 ) ; } 
protected boolean METHOD_1 ( ) { for ( TYPE_1 . DiskImage image : METHOD_2 ( ) ) { if ( ! ( image . METHOD_3 ( ) . METHOD_4 ( VAR_1 . get ( image . getId ( ) ) . METHOD_3 ( ) ) ) ) { METHOD_5 ( VAR_2 ) ; return false ; } } return true ; } 
public java.lang.Boolean getValue ( ) { boolean VAR_1 = ! ( METHOD_1 ( ) ) ; for ( TYPE_1 VAR_2 : METHOD_2 ( ) ) { if ( VAR_1 || ( METHOD_3 ( VAR_2 ) ) ) { if ( ! ( VAR_2 . METHOD_4 ( ) ) ) { return false ; } } } return true ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_2 ) == null ) && ( ! ( TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) . isEmpty ( ) ) ) ) { this . VAR_1 = VAR_1 ; this . VAR_2 = ( TYPE_2 . isEmpty ( VAR_1 ) ) ? VAR_3 . Collections < java.lang.String > METHOD_4 ( ) : TYPE_1 . METHOD_3 ( VAR_1 ) ; } } 
private static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 status , TYPE_2 VAR_2 ) { org.ovirt.engine.core.common.businessentities.VmTemplate VAR_3 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 ) ; if ( VAR_3 != null ) { if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( VAR_3 , VAR_3 . getStatus ( ) ) ; } VAR_3 . METHOD_4 ( status ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_5 ( VAR_3 ) ; } else { VAR_4 . METHOD_6 ( STRING_1 , status ) ; } } 
public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { boolean VAR_1 = VAR_2 . METHOD_2 ( java.lang.Integer . METHOD_3 ( METHOD_4 ( ) . getEntity ( ) . toString ( ) ) ) ; TYPE_1 . ValidationResult VAR_3 = new TYPE_1 . ValidationResult ( ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( TYPE_2 . METHOD_7 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) ) ; return VAR_3 ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( command ) ; TYPE_1 VAR_3 = command . getParameters ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; command . METHOD_5 ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = VAR_4 . get ( command . getParameters ( ) . METHOD_6 ( ) ) ; return vm ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) { METHOD_3 ( ) ; } if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) { METHOD_4 ( ) ; } } 
protected int METHOD_1 ( float VAR_1 , org.ovirt.engine.core.common.businessentities.VDS vds ) { int VAR_2 = TYPE_1 . METHOD_2 ( ( ( ( ( vds . METHOD_3 ( ) ) - 1 ) * ( ( VAR_3 ) - 1 ) ) / ( VAR_1 - 1 ) ) ) ; return ( VAR_3 ) - VAR_2 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { org.ovirt.engine.core.compat . Version VAR_3 = METHOD_3 ( ( ( TYPE_3 ) ( args ) ) . METHOD_4 ( ) ) ; METHOD_5 ( VAR_3 ) ; } else if ( VAR_1 . METHOD_2 ( VAR_4 ) ) { java.lang.String VAR_5 = ( ( TYPE_3 ) ( args ) ) . METHOD_4 ( ) ; TYPE_4 . METHOD_6 ( VAR_5 ) ; } } 
protected void METHOD_1 ( TYPE_1 client , java.lang.String VAR_1 ) { java.lang.Integer VAR_2 = ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) * INT_1 ; client . METHOD_3 ( VAR_2 ) ; client . METHOD_4 ( VAR_2 ) ; client . METHOD_5 ( VAR_1 , VAR_5 ) ; try { client . METHOD_1 ( ) ; } catch ( java.lang.Exception e ) { log . METHOD_6 ( java.lang.String . METHOD_7 ( STRING_1 , VAR_1 , e . METHOD_8 ( ) ) ) ; throw new TYPE_2 ( e ) ; } } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = super . METHOD_1 ( ) ; VAR_1 . put ( TYPE_1 . name ( ) . METHOD_2 ( ) , TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; } return VAR_1 ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = new TYPE_1 ( VAR_1 , METHOD_2 ( ) ) ; return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; } 
private void METHOD_1 ( boolean VAR_1 , java.lang.String name ) { TYPE_1 parameters = METHOD_2 ( ) ; parameters . METHOD_3 ( ) . METHOD_4 ( name ) ; parameters . METHOD_5 ( VAR_1 ) ; TYPE_2 command = METHOD_6 ( parameters ) ; TYPE_3 < TYPE_4 < TYPE_1 > > validate = TYPE_5 . METHOD_7 ( ) . validate ( parameters , command . METHOD_8 ( ) . METHOD_9 ( new TYPE_6 < ? > [ 0 ] ) ) ; TYPE_7 . METHOD_10 ( validate . isEmpty ( ) , VAR_1 ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { return ; } METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( true ) ; METHOD_7 ( ) ; } 
private TYPE_1 . DiskImage METHOD_1 ( ) { TYPE_1 . DiskImage disk = METHOD_2 ( ) ; disk . METHOD_3 ( true ) ; disk . METHOD_4 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( disk ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . any ( VAR_5 . Integer class ) , TYPE_2 . any ( VAR_6 . Version class ) ) ) . thenReturn ( new TYPE_3 < > ( VAR_7 ) ) ; return disk ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_1 = METHOD_1 ( hosts ) ; hosts . add ( 0 , null ) ; VAR_2 . METHOD_2 ( ) . setItems ( hosts ) ; VAR_2 . METHOD_2 ( ) . setSelectedItem ( VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , TYPE_2 . VdcActionParametersBase params , TYPE_3 action ) { try { METHOD_2 ( VAR_1 , params ) ; if ( action != null ) { action . METHOD_3 ( TYPE_4 . METHOD_4 ( TYPE_5 ) ) ; return TYPE_1 . status ( VAR_2 ) . entity ( action ) . METHOD_5 ( ) ; } else { return TYPE_1 . status ( VAR_2 ) . METHOD_5 ( ) ; } } catch ( java.lang.Exception e ) { return METHOD_6 ( VAR_3 class , e , false ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( result ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { METHOD_1 ( ) . setEntity ( VAR_1 ) ; METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ; } else { METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } } 
public TYPE_1 add ( TYPE_2 cluster ) { METHOD_1 ( cluster , METHOD_2 ( ) ) ; METHOD_3 ( VAR_1 class , cluster ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = METHOD_4 ( cluster ) ; return METHOD_5 ( VAR_3 , METHOD_6 ( cluster , VAR_2 ) , new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_4 , VAR_5 . IdQueryParameters class ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = TYPE_2 . METHOD_2 ( model ) ; if ( VAR_3 != null ) { java.lang.String VAR_4 = java.lang.String . METHOD_3 ( STRING_1 , VAR_3 , VAR_2 , VAR_1 ) ; METHOD_4 ( model , VAR_1 , VAR_4 ) ; } return model ; } 
protected boolean METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.lang.String name , org.ovirt.engine.core.compat.Guid VAR_2 , int VAR_3 ) { if ( TYPE_1 . METHOD_2 ( name ) ) { VAR_1 . add ( TYPE_2 . name ( ) ) ; return false ; } if ( ! ( METHOD_3 ( VAR_1 , VAR_3 ) ) ) { return false ; } if ( ! ( METHOD_4 ( VAR_1 ) ) ) { return false ; } return true ; } 
protected void METHOD_1 ( ) { TYPE_1 . getParameters ( ) . METHOD_2 ( new TYPE_2 ( VAR_1 . Disk , TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 = METHOD_4 ( ) ; if ( VAR_2 . isEmpty ( ) ) { log . METHOD_5 ( STRING_1 ) ; TYPE_1 . METHOD_6 ( true ) ; METHOD_7 ( VAR_3 ) ; METHOD_8 ( TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) ; } else { log . error ( STRING_2 , VAR_2 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) ; METHOD_3 ( cmd , VAR_1 ) ; METHOD_4 ( false ) ; TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ; METHOD_4 ( true ) ; TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( false , VAR_1 ) ; cmd . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_4 , cmd . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) ) ; VAR_2 . METHOD_3 ( ) ; VAR_2 . add ( new TYPE_1 ( VAR_1 ) ) ; } 
public void METHOD_1 ( final TYPE_1 object ) { METHOD_2 ( object ) ; object . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) { public void METHOD_6 ( TYPE_3 VAR_1 , java.lang.Object sender , TYPE_4 args ) { TYPE_5 . METHOD_7 ( VAR_2 this , object ) ; METHOD_2 ( object ) ; } } ) ; VAR_3 . METHOD_1 ( object ) ; } 
private static void METHOD_1 ( TYPE_1 model , TYPE_2 < ? extends TYPE_1 > VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( model ) ; java.lang.String VAR_3 = TYPE_4 . METHOD_3 ( model , VAR_1 ) ; if ( VAR_3 != null ) { TYPE_5 VAR_4 = new TYPE_5 ( VAR_3 , VAR_2 . METHOD_4 ( ) ) ; model . METHOD_1 ( VAR_4 . METHOD_5 ( ) ) ; } } 
void METHOD_1 ( TYPE_1 model , TYPE_2 entity ) { java.util.List < TYPE_3 > VAR_1 = METHOD_2 ( entity . METHOD_3 ( ) . getValue ( ) , entity . METHOD_4 ( ) ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { TYPE_4 VAR_2 = new TYPE_4 ( ) ; VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; model . METHOD_7 ( VAR_2 ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_3 = VAR_4 ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_5 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_5 ) ; } 
private static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { java.util.List < java.lang.String > VAR_3 = command . getReturnValue ( ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( STRING_1 , TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_2 . name ( ) , VAR_3 ) , VAR_3 . METHOD_6 ( VAR_2 . name ( ) ) ) ; return VAR_3 ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.HashMap < java.lang.String , java.lang.Object > VAR_3 = new java.util.HashMap < > ( ) ; VAR_3 . put ( STRING_1 , VAR_1 ) ; VAR_3 . put ( STRING_2 , VAR_2 ) ; TYPE_2 VAR_4 = new TYPE_3 ( STRING_3 ) . METHOD_2 ( STRING_4 , VAR_3 ) . METHOD_3 ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new TYPE_4 ( this . client , VAR_4 ) ; return new TYPE_1 ( response ) ; } 
protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , null , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) ; TYPE_1 . METHOD_7 ( ) ; METHOD_8 ( ( VAR_1 . METHOD_9 ( ) ? METHOD_10 ( VAR_1 . METHOD_11 ( ) ) : METHOD_12 ( VAR_1 . METHOD_11 ( ) ) ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 , vm . METHOD_2 ( ) ) ; model . METHOD_3 ( model , TYPE_3 . METHOD_4 ( VAR_3 ) , VAR_2 , vm . METHOD_5 ( ) ) ; METHOD_6 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 event , TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_4 < TYPE_1 > VAR_2 = METHOD_2 ( event , VAR_1 ) ; if ( VAR_2 != null ) { try { return VAR_2 . get ( ) ; } catch ( java.lang.Exception e ) { VAR_3 . METHOD_3 ( STRING_1 , event . getStoragePoolId ( ) , e . METHOD_4 ( ) ) ; } } return null ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain . setId ( VAR_1 ) ; storageDomain . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) ; return storageDomain ; } 
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; for ( java.lang.Object item : METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( item ) ) ; if ( VAR_2 . METHOD_4 ( ) ) { VAR_1 . add ( VAR_2 . getEntity ( ) ) ; } } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) , VAR_2 ) ; VAR_1 . METHOD_3 ( new java.util.ArrayList < TYPE_3 > ( ) ) ; if ( ( getParameters ( ) ) != null ) { for ( TYPE_3 VAR_3 : getParameters ( ) ) { VAR_1 . getParameters ( ) . add ( VAR_3 . METHOD_1 ( ) ) ; } } return VAR_1 ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
public boolean METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; METHOD_4 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; return ( METHOD_2 ( ) . METHOD_5 ( ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { command . getParameters ( ) . METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_1 , false ) ; command . METHOD_7 ( ) ; TYPE_1 . assertEquals ( command . METHOD_8 ( ) . size ( ) , 1 ) ; } 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_2 . DiskImage diskImage : METHOD_2 ( ) ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( diskImage ) ; TYPE_3 storageDomain = new TYPE_3 ( ) ; storageDomain . setSelectedItem ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( storageDomain ) ; VAR_1 . add ( VAR_2 ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ( STRING_1 + ( ( VAR_3 . METHOD_6 ( ) ) % ( VAR_4 ) ) ) ) ; VAR_2 . METHOD_7 ( STRING_2 ) ; VAR_5 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ) ; } 
public TYPE_1 METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getStoragePoolId ( ) . getValue ( ) ) ; for ( final org.ovirt.engine.core.common.businessentities . Network VAR_2 : VAR_1 ) { METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) ; } METHOD_4 ( ) . METHOD_7 ( ) ; return null ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { METHOD_1 ( ) . setSelectedItem ( VAR_1 . get ( 0 ) ) ; } else { org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_2 . setId ( VAR_3 ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ; } } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { if ( ( object . getEntity ( ) ) instanceof TYPE_2 ) { return ( ( TYPE_2 ) ( object . getEntity ( ) ) ) . METHOD_2 ( ) ; } else if ( ( object . getEntity ( ) ) instanceof TYPE_3 . DiskImage ) { return ( ( TYPE_3 . DiskImage ) ( object . getEntity ( ) ) ) . METHOD_3 ( ) ; } return null ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; for ( org.ovirt.engine.ui.uicommonweb.models.EntityModel a : METHOD_2 ( ) ) { if ( a . METHOD_3 ( ) ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( a . getEntity ( ) ) ) ; VAR_1 . append ( VAR_2 . toString ( ) ) ; } } return ! ( VAR_1 . equals ( STRING_1 ) ) ? TYPE_1 . valueOf ( VAR_1 . toString ( ) ) : null ; } 
private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; for ( TYPE_1 a : VAR_2 . Linq < TYPE_1 > METHOD_2 ( METHOD_3 ( ) ) ) { if ( ( a . METHOD_4 ( ) ) == ( VAR_3 ) ) { VAR_1 += ( a . METHOD_5 ( ) ) + STRING_2 ; } } return VAR_1 . METHOD_6 ( 0 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; } 
public void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { try ( TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 . METHOD_2 ( ) ) ) { METHOD_3 ( ) ; for ( java.lang.String VAR_4 : VAR_1 ) { VAR_5 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ; } } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; TYPE_2 params = new TYPE_2 ( VAR_1 , VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , params , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; VAR_1 = METHOD_4 ( VAR_1 , VAR_2 , VAR_3 [ 1 ] . toString ( ) ) ; METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( ) ; try { resource . METHOD_7 ( ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_9 ( VAR_5 . METHOD_10 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_10 ( ) . getStatus ( ) ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_1 instance ) { TYPE_1 obj = new TYPE_1 ( ) ; obj . METHOD_2 ( instance . getStatus ( ) ) ; obj . METHOD_3 ( instance . METHOD_4 ( ) ) ; obj . METHOD_5 ( instance . METHOD_6 ( ) ) ; obj . METHOD_7 ( instance . METHOD_8 ( ) ) ; return obj ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( METHOD_4 ( ) , java.lang.Boolean . FALSE ) ) . thenReturn ( TYPE_1 . METHOD_5 ( vm ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( METHOD_8 ( ) ) . when ( cmd ) . METHOD_8 ( ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { int VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( VAR_1 <= 1 ) { getModel ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } } } ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( command == ( METHOD_6 ( ) ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_8 ( command . getName ( ) , VAR_1 ) ) { METHOD_9 ( ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_2 . setId ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . METHOD_4 ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( getVm ( ) . METHOD_6 ( ) ) ; TYPE_3 . METHOD_7 ( getVm ( ) . getId ( ) ) ; if ( getParameters ( ) . METHOD_8 ( ) ) { getParameters ( ) . METHOD_9 ( getVm ( ) ) ; METHOD_10 ( getVm ( ) . getId ( ) ) ; } return null ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.compat . Version version , TYPE_2 VAR_2 ) { java.util.Map < java.lang.String , java.lang.String > VAR_3 = VAR_4 < java.util.Map > getValue ( VAR_1 , version . getValue ( ) ) ; return java.lang.Boolean . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_2 . name ( ) , VAR_3 . get ( VAR_2 . METHOD_4 ( ) . name ( ) ) ) ) ; } 
private void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = ( ( java.util.List < java.lang.String > ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_3 . add ( null ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) . setItems ( VAR_3 ) ; METHOD_4 ( ) . setIsChangable ( false ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( VAR_3 . get ( i ) . METHOD_2 ( ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { VAR_3 . METHOD_3 ( i ) ; break ; } } METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) . METHOD_6 ( this , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; dao . METHOD_3 ( VAR_1 ) ; java.util.List < TYPE_3 > result = dao . METHOD_4 ( VAR_2 , true ) ; TYPE_4 . assertEquals ( INT_1 , result . size ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_2 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_4 ( ) ) ; VAR_3 = org.mockito.Mockito . METHOD_5 ( new TYPE_3 ( cmd . METHOD_6 ( ) ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_3 ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; } 
private void METHOD_1 ( TYPE_1 . VdcBllMessages VAR_1 , java.lang.String VAR_2 ) { java.util.List < java.lang.String > VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = new java.util.ArrayList < > ( ) ; VAR_4 . put ( VAR_1 , VAR_3 ) ; } VAR_3 . add ( VAR_2 ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = VAR_3 ; TYPE_2 model = new TYPE_2 ( ) ; TYPE_3 . map ( VAR_1 , VAR_4 , model ) ; METHOD_2 ( model . METHOD_3 ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) ; assertEquals ( model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 ) ; assertEquals ( model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) , VAR_2 ) ; } 
private static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > args ) throws TYPE_1 { TYPE_2 log = TYPE_2 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_1 = ( ( java.lang.String ) ( args . get ( STRING_2 ) ) ) ; if ( VAR_1 != null ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_2 . METHOD_3 ( new TYPE_4 ( ) ) ; log . METHOD_4 ( VAR_2 ) ; } TYPE_5 . METHOD_5 ( ( ( TYPE_6 ) ( args . get ( STRING_3 ) ) ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid id , java.util.List < TYPE_1 > VAR_1 ) { VAR_1 . add ( id ) ; TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( STRING_2 , id ) ; org.ovirt.engine.core.common.businessentities.VDSGroup VAR_3 = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( VAR_2 . METHOD_5 ( ) ) ) ; if ( VAR_3 != null ) { VAR_1 . add ( VAR_3 . METHOD_6 ( ) ) ; } } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ! VAR_1 ) { addCanDoActionMessage ( VAR_2 ) ; } } if ( ! VAR_1 ) { TYPE_1 . METHOD_5 ( ) ; } return VAR_1 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ) ; TYPE_1 < TYPE_2 > VAR_1 = ( ( TYPE_1 < TYPE_2 > ) ( returnValue ) ) ; TYPE_1 < TYPE_3 > VAR_2 = new TYPE_4 < > ( ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { if ( VAR_3 . METHOD_2 ( ) ) { VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ; } } METHOD_4 ( VAR_4 , VAR_2 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; TYPE_3 < TYPE_4 > VAR_2 = new TYPE_5 < > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . add ( VAR_3 . METHOD_1 ( ) ) ; } TYPE_6 VAR_4 = TYPE_7 . METHOD_2 ( VAR_2 ) ; TYPE_8 VAR_5 = TYPE_9 . getInstance ( ) ; METHOD_3 ( VAR_5 . METHOD_4 ( VAR_4 ) ) ; } 
protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name ) { for ( TYPE_1 . Network entity : METHOD_2 ( VAR_2 . Network class , VAR_3 , new TYPE_2 ( VAR_1 ) ) ) { if ( ( ( id != null ) && ( id . equals ( entity . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( entity . getName ( ) ) ) ) ) { return entity ; } } return null ; } 
private TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { TYPE_4 < TYPE_5 > VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_1 < java.lang.String > VAR_3 = new TYPE_6 < > ( ) ; for ( TYPE_5 VAR_4 : VAR_2 ) { VAR_3 . add ( VAR_4 . METHOD_3 ( ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { boolean VAR_1 = ( ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) . size ( ) ) > 0 ; if ( ! VAR_1 ) { TYPE_3 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . setIsChangable ( false ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } } 
protected org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { switch ( TYPE_1 . METHOD_2 ( ) ) { case VAR_1 : case VAR_2 : if ( ( VAR_3 ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_4 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; VAR_3 = ( VAR_4 . isEmpty ( ) ) ? null : VAR_4 . get ( 0 ) ; } return VAR_3 ; default : return super . METHOD_1 ( ) ; } } 
protected boolean METHOD_1 ( ) { if ( ! ( super . METHOD_1 ( ) ) ) { return false ; } if ( ( METHOD_2 ( ) . getStatus ( ) ) != ( VAR_1 ) ) { METHOD_3 ( VAR_2 , METHOD_4 ( ) ) ; } for ( TYPE_1 VAR_3 : VAR_4 ) { if ( ( ( VAR_3 . METHOD_5 ( ) ) == null ) || ( ( VAR_3 . METHOD_6 ( ) ) == null ) ) { METHOD_3 ( VAR_5 ) ; } } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command . validate ( ) ) ; TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( null ) ; TYPE_1 . METHOD_3 ( METHOD_4 ( ) . getId ( ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_2 < java.lang.String > ) ( returnValue ) ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } } ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_3 ( ) ; } } ) , VAR_4 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , cluster , VAR_2 ) ) ; org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( VAR_3 class ) ) ; TYPE_3 . METHOD_4 ( validator . METHOD_5 ( TYPE_4 . instance ( ) . METHOD_6 ( VAR_3 class ) ) , TYPE_5 . METHOD_7 ( VAR_4 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; METHOD_7 ( disk ) ; assertEquals ( disk . getId ( ) , TYPE_2 . toString ( ) ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 . Disk > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) , TYPE_2 . getParameters ( ) . METHOD_6 ( ) ) ; if ( TYPE_3 . isEmpty ( VAR_1 ) ) { METHOD_7 ( VAR_1 ) ; return ; } METHOD_7 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 quota = METHOD_2 ( ) ; quota . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_5 ( quota ) ; VAR_1 . METHOD_6 ( ) ; TYPE_2 VAR_2 = VAR_3 . list ( ) ; METHOD_7 ( VAR_2 , 1 ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_8 ( ) . get ( 0 ) ; assertEquals ( VAR_4 . METHOD_9 ( ) . METHOD_10 ( ) , INT_1 ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { return ( ( METHOD_2 ( ) ) == null ) || ( ! ( VAR_1 . getStoragePoolId ( ) . equals ( METHOD_2 ( ) . getStoragePoolId ( ) ) ) ) ? new TYPE_1 . ValidationResult ( VAR_2 ) : VAR_3 ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network network = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_1 = ( network == null ) ? null : network . getId ( ) ; return TYPE_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 . Network , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 = METHOD_2 ( VAR_5 , VAR_6 ) ; VAR_7 . add ( VAR_1 ) ; VAR_7 . add ( VAR_4 ) ; VAR_7 . add ( METHOD_2 ( VAR_8 , VAR_9 ) ) ; VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) ; VAR_13 = METHOD_4 ( ) ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = new java.util.ArrayList ( VAR_1 . size ( ) ) ; for ( TYPE_1 host : VAR_1 ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . METHOD_2 ( host . getName ( ) ) ; vds . METHOD_3 ( host . getName ( ) ) ; hosts . add ( vds ) ; } return hosts ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 . DiskImage VAR_1 , TYPE_3 VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 , org.ovirt.engine.core.compat.Guid VAR_4 ) { if ( TYPE_4 . METHOD_2 ( VAR_2 , VAR_4 ) ) { double VAR_5 = TYPE_4 . METHOD_3 ( VAR_1 , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( VAR_4 ) . METHOD_5 ( ) ) ; return TYPE_4 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , TYPE_5 . valueOf ( VAR_5 ) . METHOD_8 ( ) ) ; } return null ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; if ( ( TYPE_1 . getVm ( ) ) != null ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . getId ( ) ) ; TYPE_2 . METHOD_4 ( TYPE_1 . getVm ( ) ) ; METHOD_5 ( ) ; } else { TYPE_1 . METHOD_6 ( false ) ; log . METHOD_7 ( STRING_1 ) ; } TYPE_1 . METHOD_8 ( true ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , TYPE_1 . METHOD_3 ( VAR_6 [ 1 ] ) } , METHOD_4 ( ) , VAR_2 ) ; VAR_7 . METHOD_5 ( ) ; } 
private void METHOD_1 ( java.lang.Object sender , TYPE_1 args ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( sender ) ) ; for ( java.lang.Object item : METHOD_2 ( ) ) { if ( ( item instanceof TYPE_2 ) && ( item != sender ) ) { TYPE_2 model = ( ( TYPE_2 ) ( item ) ) ; model . METHOD_3 ( ) . setEntity ( VAR_1 . METHOD_3 ( ) . getEntity ( ) ) ; } } } 
public java.util.List < org.ovirt.engine.core.compat.Guid > METHOD_1 ( java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . append ( STRING_1 ) . append ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) . append ( STRING_1 ) ; TYPE_3 VAR_3 = METHOD_3 ( ) . addValue ( STRING_3 , VAR_2 . toString ( ) ) ; return METHOD_4 ( ) . METHOD_5 ( STRING_4 , METHOD_6 ( ) , METHOD_3 ( ) . addValue ( STRING_3 , VAR_2 . toString ( ) ) ) ; } 
public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , org.ovirt.engine.ui.frontend.IAsyncConverter VAR_2 ) { if ( VAR_2 == null ) { return null ; } TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; return VAR_2 . Convert ( VAR_4 . get ( VAR_3 ) , null ) ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_5 ( ) , METHOD_5 ( ) , METHOD_5 ( ) , true , true , true , true , null ) ; } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = this . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) ; java.lang.Object value = VAR_3 . METHOD_4 ( ( ( VAR_4 ) + VAR_1 ) ) ; java.lang.String result = null ; if ( value instanceof java.lang.String ) { result = ( ( java.lang.String ) ( value ) ) ; } else { VAR_5 . error ( STRING_1 ) ; } return result ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; org.mockito.Mockito . METHOD_4 ( VAR_4 ) . METHOD_3 ( VAR_1 , VAR_3 ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( org.mockito.Mockito . any ( ) ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
private org.ovirt.engine.core.common.businessentities.network.Network METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : VAR_2 ) { if ( network . METHOD_5 ( ) . METHOD_6 ( ) ) { VAR_1 = network ; return VAR_1 ; } } } return VAR_1 ; } 
protected boolean METHOD_1 ( ) { super . METHOD_1 ( ) ; addCanDoActionMessage ( VAR_1 ) ; boolean returnValue = ( ( ( ( TYPE_1 . METHOD_2 ( ) ) && ( METHOD_3 ( VAR_2 , VAR_3 ) ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( ( ( TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ) == ( VAR_4 ) ) || ( TYPE_1 . METHOD_8 ( ) ) ) ; return returnValue ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . getStoragePoolId ( ) ) ; if ( ( VAR_1 . size ( ) ) >= ( VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) { METHOD_6 ( ) ; return ; } METHOD_7 ( VAR_1 ) ; TYPE_2 . METHOD_8 ( true ) ; } 
private TYPE_1 . VdcActionParametersBase METHOD_1 ( TYPE_2 params ) { TYPE_3 . VM vm = getEntity ( VAR_1 . VM class , VAR_2 , new TYPE_4 ( VAR_3 ) , STRING_1 ) ; if ( ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) && ( vm . METHOD_4 ( ) ) ) { params . METHOD_5 ( true ) ; } return params ; } 
boolean METHOD_1 ( ) { TYPE_1 parameters = getParameters ( ) ; long VAR_1 = parameters . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; java.lang.Integer VAR_2 = VAR_3 < java.lang.Integer > METHOD_5 ( VAR_4 ) ; boolean VAR_5 = ( ( TYPE_2 . METHOD_6 ( ) ) - VAR_1 ) > VAR_2 ; VAR_6 . METHOD_7 ( STRING_1 , parameters . METHOD_8 ( ) , ( VAR_5 ? STRING_2 : STRING_3 ) , VAR_2 ) ; return VAR_5 ; } 
public void METHOD_1 ( TYPE_1 event ) { if ( ( ( event . METHOD_2 ( ) ) != ( getModel ( ) ) ) || ( ( ( getModel ( ) . METHOD_3 ( ) ) != null ) && ( ( VAR_1 ) == 0 ) ) ) { return ; } if ( ( VAR_1 ) == 0 ) { getModel ( ) . METHOD_4 ( null ) ; } ( VAR_1 ) ++ ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . EngineMessage VAR_1 = VAR_2 ; org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . any ( VAR_4 . StorageDomain class ) ) ; TYPE_4 . METHOD_5 ( command , VAR_1 ) ; } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 , java.util.List < TYPE_2 > VAR_3 , boolean VAR_4 ) { TYPE_3 . METHOD_2 ( VAR_3 ) ; for ( TYPE_2 VAR_5 : VAR_3 ) { METHOD_3 ( VAR_2 ) ; TYPE_4 result = new TYPE_4 ( ) ; result . METHOD_4 ( ( VAR_4 ? true : VAR_1 ) ) ; result . METHOD_5 ( ( VAR_4 ? VAR_1 : false ) ) ; VAR_5 . METHOD_6 ( new TYPE_5 ( VAR_6 , null , TYPE_3 . METHOD_7 ( result ) ) ) ; } } 
public static < TYPE_1 > java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < java.util.ArrayList < TYPE_1 > > VAR_1 ) { java.util.ArrayList < TYPE_1 > result = new java.util.ArrayList < TYPE_1 > ( ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { result . METHOD_2 ( VAR_1 . get ( 0 ) ) ; } for ( java.util.ArrayList < TYPE_1 > list : VAR_1 ) { result . METHOD_3 ( list ) ; } return result ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) ; java.util.List < java.lang.String > error = VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 , STRING_1 , STRING_2 ) ) ; java.lang.String result = STRING_3 ; TYPE_4 . METHOD_4 ( STRING_4 , ( ( error . size ( ) ) == 1 ) ) ; TYPE_4 . assertEquals ( STRING_5 , result , error . get ( 0 ) ) ; } 
protected boolean METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup VAR_1 = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) ) ; return VAR_1 == null ? METHOD_4 ( VAR_2 ) : ( VAR_1 . METHOD_5 ( ) ) != ( TYPE_1 . getVm ( ) . METHOD_6 ( ) ) ? METHOD_4 ( VAR_3 ) : true ; } 
protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . get ( getVm ( ) . getId ( ) ) ; if ( VAR_1 != null ) { addCanDoActionMessage ( VAR_2 ) ; addCanDoActionMessage ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) ; return false ; } return true ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 parameters ) { final TYPE_3 . DbFacade VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 . DbFacade class ) ; final TYPE_4 VAR_3 = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; return org.mockito.Mockito . METHOD_4 ( new TYPE_1 < TYPE_2 > ( parameters ) { protected TYPE_5 METHOD_5 ( org.ovirt.engine.core.compat.Guid VAR_5 ) { return VAR_6 ; } protected TYPE_3 . DbFacade METHOD_6 ( ) { return VAR_1 ; } } ) ; } 
private void METHOD_1 ( int VAR_1 , int VAR_2 ) throws java.lang.Exception { for ( int i = 0 ; i < VAR_1 ; i ++ ) { METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_5 [ VAR_2 ] } , VAR_6 ) ; } } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) . equals ( TYPE_2 . getName ( ) ) ) ) { return true ; } return ( ( VAR_1 . METHOD_3 ( ) ) == null ) && ( METHOD_4 ( ) . get ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { STRING_3 , STRING_4 } , getEntity ( 0 ) ) ; VAR_3 . METHOD_5 ( ) ; METHOD_6 ( resource . METHOD_7 ( STRING_3 , STRING_4 ) , 0 ) ; } 
public void METHOD_1 ( TYPE_1 map ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , map . METHOD_3 ( ) ) . addValue ( STRING_2 , map . METHOD_4 ( ) ) . addValue ( STRING_3 , map . METHOD_5 ( ) ) ; METHOD_6 ( ) . METHOD_7 ( STRING_4 , VAR_1 ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; for ( org.ovirt.engine.core.compat.Guid VAR_3 : VAR_2 ) { METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; METHOD_3 ( VAR_2 , VAR_3 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 [ 1 ] } , METHOD_4 ( 1 ) ) ; METHOD_5 ( STRING_2 ) ; VAR_5 . METHOD_6 ( VAR_1 ) ; METHOD_7 ( METHOD_8 ( ) ) ; } 
private void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { final TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } METHOD_3 ( VAR_1 ) ; if ( ! ( VAR_1 . METHOD_4 ( ) ) ) { VAR_2 . METHOD_5 ( ) ; } METHOD_6 ( ) ; } 
protected void METHOD_1 ( java.util.ArrayList < TYPE_1 . VdcActionParametersBase > parameters , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( ) . getSelectedItem ( ) ) ) ; METHOD_3 ( parameters , VAR_3 , VAR_2 . getId ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_1 . METHOD_4 ( ) ) ) , VAR_4 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { METHOD_2 ( object . METHOD_3 ( ) ) ; if ( METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_2 ) ) { VAR_3 . METHOD_5 ( true ) ; } else if ( METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_4 ) ) { VAR_5 . METHOD_5 ( true ) ; } else { VAR_6 . METHOD_5 ( true ) ; } METHOD_6 ( ) ; } 
public int METHOD_1 ( TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_1 , TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 ) { int VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; if ( VAR_3 != 0 ) { return VAR_3 ; } return VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ; } 
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 entity : TYPE_2 . METHOD_2 ( ) ) { if ( ( ( entity . METHOD_3 ( ) ) & ( TYPE_3 . getValue ( ) ) ) > 0 ) { VAR_1 . add ( entity ) ; } } return VAR_1 ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; TYPE_1 < TYPE_2 > command = org.mockito.Mockito . METHOD_3 ( new TYPE_1 < TYPE_2 > ( VAR_1 , TYPE_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) { protected void METHOD_6 ( ) { } protected void METHOD_7 ( ) { } } ) ; return command ; } 
protected void METHOD_1 ( final TYPE_1 map , final TYPE_2 status ) { METHOD_2 ( new TYPE_3 < TYPE_1 > ( ) { public TYPE_1 METHOD_3 ( ) { TYPE_4 context = METHOD_4 ( ) ; context . METHOD_5 ( map ) ; map . METHOD_6 ( status ) ; METHOD_7 ( ) . METHOD_8 ( map . getId ( ) , map . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_9 ( ) ; return null ; } } ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { return TYPE_1 . METHOD_2 ( VAR_1 . get ( VAR_2 . get ( diskImage . getId ( ) ) . METHOD_3 ( ) . get ( 0 ) ) . METHOD_4 ( ) , diskImage , TYPE_2 . getReturnValue ( ) . METHOD_5 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( map , map . METHOD_4 ( ) ) ; map . METHOD_5 ( VAR_1 ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( map . getId ( ) , map . METHOD_4 ( ) ) ; if ( ( METHOD_8 ( ) . METHOD_9 ( ) ) == ( VAR_2 ) ) { METHOD_10 ( ) ; } METHOD_2 ( ) . METHOD_11 ( ) ; return null ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 value , TYPE_3 VAR_1 ) { if ( value != null ) { VAR_1 . append ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( value ) . METHOD_5 ( ) ) ) ) ; } } 
protected void METHOD_1 ( ) { final org.ovirt.engine.core.compat.Guid VAR_1 = TYPE_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ; TYPE_2 VAR_2 = TYPE_3 . getInstance ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_4 ( ) ; } METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; TYPE_1 . METHOD_7 ( true ) ; } 
private TYPE_1 . Disk METHOD_1 ( org.ovirt.engine.core.compat.Guid id , boolean VAR_1 ) { TYPE_1 . Disk disk = new TYPE_2 ( ) ; disk . setId ( id ) ; TYPE_3 VAR_2 = new TYPE_3 ( new TYPE_4 ( id , null ) ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_2 ) ) ; return disk ; } 
private static boolean METHOD_1 ( TYPE_1 . DiskImage diskImage , java.util.List < TYPE_2 > VAR_1 , TYPE_3 < org.ovirt.engine.core.compat.Guid > VAR_2 , TYPE_4 user ) { for ( TYPE_2 VAR_3 : VAR_1 ) { if ( TYPE_5 . METHOD_2 ( VAR_3 , VAR_2 , user ) ) { VAR_2 . add ( VAR_3 . getId ( ) ) ; diskImage . METHOD_3 ( VAR_3 . getId ( ) ) ; return true ; } } return false ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; model . METHOD_2 ( ) . setEntity ( VAR_1 . METHOD_3 ( ) ) ; model . METHOD_4 ( ) . setEntity ( VAR_1 . METHOD_4 ( ) ) ; model . METHOD_5 ( ) . setEntity ( VAR_1 . METHOD_5 ( ) ) ; } 
protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.Map < java.lang.String , java.lang.Object > parameters = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; parameters . put ( VAR_1 . VM , vm ) ; if ( ( cluster . METHOD_2 ( ) ) != null ) { parameters . METHOD_3 ( cluster . METHOD_2 ( ) ) ; } return parameters ; } 
public double METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { for ( TYPE_1 . Disk disk : METHOD_2 ( ) . METHOD_3 ( ) ) { if ( ( VAR_2 ) == ( disk . METHOD_4 ( ) ) ) { VAR_1 += ( ( ( TYPE_1 . DiskImage ) ( disk ) ) . METHOD_5 ( ) ) / ( TYPE_2 . valueOf ( ( ( INT_1 * INT_1 ) * INT_1 ) ) ) ; } } } return VAR_1 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
private void METHOD_1 ( ) { TYPE_1 model = new TYPE_1 ( this , VAR_1 ) ; model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) ; model . METHOD_3 ( STRING_1 ) ; model . METHOD_4 ( VAR_2 ) ; model . setEntity ( ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) ) ; METHOD_5 ( model ) ; } 
public void METHOD_1 ( ) { TYPE_1 . VM entity = new TYPE_1 . VM ( ) ; entity . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; entity . METHOD_4 ( VAR_2 ) ; TYPE_1 . VM model = TYPE_2 . map ( entity , null ) ; assertEquals ( VAR_2 . toString ( ) , model . METHOD_5 ( ) . getId ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) , TYPE_1 . METHOD_3 ( new TYPE_2 ( 0 ) ) ) ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_3 = VAR_1 . METHOD_4 ( VAR_4 ) ; TYPE_3 . assertEquals ( STRING_1 , 1 , VAR_3 . size ( ) ) ; TYPE_3 . assertEquals ( STRING_2 , VAR_3 . get ( 0 ) , VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { final TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( false ) ; try { VAR_2 . METHOD_4 ( this . VAR_3 , VAR_4 , this ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( STRING_1 ) ; } catch ( TYPE_3 e ) { try { VAR_2 . METHOD_6 ( ) ; } catch ( TYPE_3 VAR_5 ) { } } return VAR_2 ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( null ) ; final TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; final TYPE_3 VAR_4 = VAR_1 . getStoragePoolId ( ) ; TYPE_4 . assertEquals ( VAR_3 , VAR_4 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object result = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_1 ( ( result != null ? ( ( java.util.ArrayList < TYPE_2 > ) ( result ) ) : new java.util.ArrayList < TYPE_2 > ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) ; METHOD_9 ( true ) ; METHOD_10 ( true ) ; TYPE_3 . METHOD_11 ( command ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 resource , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { TYPE_5 . Disk disk = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( disk ) ; METHOD_4 ( disk ) ; return resource . METHOD_5 ( VAR_3 , METHOD_6 ( VAR_1 , new TYPE_6 ( ) . map ( disk , null ) , disk ) , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; METHOD_3 ( 1 ) ; METHOD_4 ( VAR_2 [ 0 ] ) ; METHOD_4 ( VAR_2 [ 1 ] ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( ) ; METHOD_7 ( METHOD_8 ( ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( TYPE_1 item : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { return item ; } } return null ; } } ; TYPE_2 VAR_2 = new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_3 . VDS ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_2 , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = new TYPE_1 ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; model . METHOD_3 ( new TYPE_2 ( ) ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; try { VAR_3 . add ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_4 ) { METHOD_8 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_1 result ) { if ( TYPE_2 . METHOD_2 ( result . METHOD_3 ( ) ) ) { TYPE_3 VAR_1 ; if ( ( result . METHOD_4 ( ) ) != null ) { VAR_1 = new TYPE_3 ( result . METHOD_4 ( ) . METHOD_5 ( ) , result . METHOD_3 ( ) ) ; } else { VAR_1 = new TYPE_3 ( VAR_2 , result . METHOD_3 ( ) ) ; } throw VAR_1 ; } return result ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_2 > > VAR_2 ) { METHOD_2 ( ) . setEntity ( false ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_2 > > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( ) . setEntity ( false ) ; VAR_1 . setItems ( VAR_3 ) ; METHOD_5 ( VAR_3 . isEmpty ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String vmId , TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( vmId , VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_1 model , TYPE_2 entity ) { TYPE_3 VAR_1 = getEntity ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( entity . METHOD_2 ( ) ) , null , true ) ; TYPE_4 VAR_4 = getEntity ( VAR_5 class , VAR_6 , new TYPE_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getName ( ) , entity . METHOD_4 ( ) , true ) , null , true ) ; model = METHOD_5 ( VAR_5 class , VAR_7 class ) . map ( VAR_4 , model ) ; return model ; } 
protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { METHOD_3 ( VAR_1 , VAR_2 ) ; returnValue = false ; } if ( returnValue && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) == ( VAR_3 ) ) ) { METHOD_3 ( VAR_1 , VAR_4 ) ; returnValue = false ; } return returnValue ; } 
public void METHOD_1 ( final TYPE_1 model ) { VAR_1 . METHOD_1 ( model ) ; VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( model . METHOD_4 ( ) . getEntity ( ) ) ) ; model . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 < TYPE_3 > ( ) { public void METHOD_7 ( TYPE_4 < ? extends TYPE_3 > VAR_4 , java.lang.Object sender , TYPE_3 args ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( model . METHOD_4 ( ) . getEntity ( ) ) ) ; } } ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( TYPE_2 . getName ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) && ( TYPE_2 . getName ( ) . equals ( VAR_1 ) ) ) || ( ( TYPE_3 . getName ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) && ( TYPE_4 . getName ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 event ) { METHOD_2 ( ) . METHOD_1 ( context , VAR_1 , TYPE_4 . getValue ( ) , TYPE_4 . METHOD_3 ( ) , event , VAR_2 ) ; if ( ( TYPE_5 . equals ( event . METHOD_4 ( ) ) ) && ( ( VAR_3 ) != null ) ) { VAR_3 . METHOD_5 ( event ) ; } } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( getParameters ( ) . METHOD_2 ( ) , getParameters ( ) . getStoragePoolId ( ) , VAR_2 ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; METHOD_7 ( ) ; return new TYPE_1 ( VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( ) { final int VAR_1 = INT_1 ; final int VAR_2 = INT_2 ; final org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; TYPE_1 < TYPE_2 > cmd = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ; cmd . getVm ( ) . METHOD_4 ( STRING_1 ) ; METHOD_5 ( cmd ) ; TYPE_3 . METHOD_6 ( cmd , VAR_4 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Object source ) { if ( source != null ) { java.util.ArrayList < TYPE_1 > list = METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) , VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_3 ( list , new TYPE_3 ( ) ) ; return list ; } return new java.util.ArrayList < > ( ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ; return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . getVm ( ) . METHOD_2 ( ) , METHOD_7 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 , false ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } ) ) ; METHOD_5 ( resource . METHOD_6 ( new TYPE_1 ( ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; METHOD_3 ( 2 , false , false , false ) ; METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_1 } , true , true ) ) ; METHOD_6 ( resource . METHOD_7 ( ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; if ( VAR_1 != null ) { TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) , VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) , true , true ) ; } } 
private void METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network network : VAR_2 ) { VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) ; } METHOD_3 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_6 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ; TYPE_3 . METHOD_7 ( command , VAR_4 ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; VAR_1 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat . Version version ) { if ( version == null ) { return false ; } java.lang.Boolean VAR_1 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_2 , version . toString ( ) ) ) ) ; return VAR_1 == null ? false : VAR_1 ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . VdcQueryReturnValue VAR_1 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ; if ( VAR_1 . getSucceeded ( ) ) { org.ovirt.engine.core.common.businessentities.VM vm = VAR_1 . getReturnValue ( ) ; METHOD_1 ( TYPE_2 . METHOD_2 ( vm ) ) ; METHOD_3 ( ) ; } else { METHOD_4 ( VAR_2 . METHOD_5 ( METHOD_6 ( ) . getEntity ( ) ) ) ; } METHOD_7 ( ) ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { boolean returnValue = true ; if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . size ( ) ) != 0 ) { returnValue = false ; VAR_2 . add ( TYPE_2 . toString ( ) ) ; } return returnValue ; } 
public TYPE_1 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) throws TYPE_2 , TYPE_3 { try ( final TYPE_4 client = METHOD_2 ( ) ) { METHOD_3 ( client , VAR_1 ) ; METHOD_4 ( client , VAR_2 , VAR_3 ) ; java.lang.String VAR_4 = METHOD_5 ( client ) ; return METHOD_6 ( VAR_4 ) ; } } 
public java.util.ArrayList < java.lang.Integer > METHOD_1 ( ) { java.util.ArrayList < java.lang.Integer > VAR_1 = new java.util.ArrayList < > ( ) ; for ( int VAR_2 : METHOD_2 ( ) ) { if ( METHOD_3 ( VAR_2 ) ) { VAR_1 . add ( VAR_2 ) ; } } return VAR_1 ; } 
protected boolean METHOD_1 ( ) { METHOD_2 ( ) ; return ( ( ( ( ( ( ( ( TYPE_1 . METHOD_3 ( ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( TYPE_1 . METHOD_5 ( ) ) ) && ( METHOD_6 ( METHOD_7 ( ) ) ) ) && ( METHOD_8 ( ) ) ) && ( METHOD_9 ( ) ) ) && ( TYPE_1 . METHOD_10 ( ) ) ) && ( METHOD_11 ( ) ) ) && ( METHOD_12 ( ) ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 . Version VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ( ( ( VAR_1 . METHOD_2 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( ) , true ) ; return VAR_2 . toString ( ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( false , VAR_3 ) ; try { cmd . METHOD_5 ( ) ; } catch ( TYPE_3 e ) { TYPE_4 . assertEquals ( e . METHOD_6 ( ) , VAR_3 ) ; } org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_5 . any ( VAR_5 class ) ) ; } 
public boolean METHOD_1 ( ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ; return ( ( VAR_1 != null ) && ( ! ( STRING_1 . equals ( VAR_1 ) ) ) ) && ( ! ( STRING_2 . METHOD_3 ( VAR_1 ) ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , METHOD_3 ( VAR_1 ) ) ) ) ; METHOD_4 ( cmd ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_4 . toString ( ) ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { disk . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_1 = TYPE_2 . METHOD_3 ( INT_1 ) ; disk . METHOD_4 ( VAR_1 ) ; METHOD_5 ( disk , TYPE_2 . METHOD_6 ( STRING_1 ) , TYPE_2 . METHOD_7 ( VAR_1 . METHOD_8 ( 0 , INT_2 ) ) ) ; } 
private void METHOD_1 ( TYPE_1 status ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain . METHOD_2 ( status ) ; domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . any ( VAR_2 . Guid class ) , TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; command . METHOD_3 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( VAR_2 ) ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_7 ( TYPE_1 . METHOD_6 ( VAR_3 ) , TYPE_1 . any ( VAR_4 . Guid class ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 [ 0 ] , java.lang.Boolean . FALSE } , true , true , false ) ; VAR_1 = METHOD_5 ( VAR_1 , VAR_5 , TYPE_2 . toString ( ) ) ; METHOD_6 ( VAR_1 ) ; VAR_6 . METHOD_7 ( ) ; resource . METHOD_8 ( ) ; } 
private TYPE_1 METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { TYPE_2 VAR_3 = TYPE_3 . getInstance ( ) . get ( VAR_4 class ) ; java.util.List < TYPE_4 < TYPE_5 , TYPE_1 > > VAR_5 = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( ! ( VAR_5 . isEmpty ( ) ) ) { TYPE_4 < TYPE_5 , TYPE_1 > VAR_6 = VAR_5 . get ( 0 ) ; return VAR_6 . METHOD_3 ( ) ; } return VAR_7 ; } 
public long METHOD_1 ( long VAR_1 ) { if ( VAR_1 <= 0 ) { throw new TYPE_1 ( STRING_1 ) ; } long VAR_2 = super . METHOD_1 ( ) ; if ( VAR_2 == ( VAR_3 ) ) { VAR_2 ++ ; } return ( TYPE_2 . METHOD_2 ( VAR_2 ) ) % VAR_1 ; } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 , TYPE_2 status ) { final TYPE_3 VAR_3 = get ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_2 ( status ) ; if ( ( VAR_2 . equals ( VAR_4 ) ) || ( VAR_3 . METHOD_3 ( ) ) ) { TYPE_4 . METHOD_4 ( VAR_5 , new TYPE_5 < java.lang.Object > ( ) { public TYPE_6 METHOD_5 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_3 ) ; return null ; } } ) ; } } } 
private java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : METHOD_2 ( ) . METHOD_3 ( ) ) { VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) ; } return VAR_1 ; } 
protected boolean METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_1 ( TYPE_1 . getVm ( ) , TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_1 . getParameters ( ) , TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) , METHOD_6 ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; TYPE_2 VAR_2 = METHOD_1 ( ) ; VAR_1 . add ( 0 , null ) ; VAR_2 . setItems ( VAR_1 ) ; VAR_2 . setIsChangable ( true ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { METHOD_2 ( aQuery , VAR_1 , VAR_2 , VAR_3 , new TYPE_1 ( ) { protected java.lang.String METHOD_3 ( java.util.ArrayList < java.lang.String > VAR_4 , TYPE_2 VAR_5 ) { return ( VAR_6 ) + ( super . METHOD_3 ( VAR_4 , VAR_5 ) ) ; } protected boolean METHOD_4 ( TYPE_2 VAR_5 ) { return ( VAR_7 ) == ( VAR_5 . METHOD_5 ( ) ) ; } } ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { return new TYPE_1 ( new TYPE_2 ( VAR_1 , vmId ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 0 , null , true , true , false , STRING_1 , null , null ) ; } 
private void METHOD_1 ( TYPE_1 . DiskImage disk ) { TYPE_1 . DiskImage VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; if ( VAR_1 == null ) { log . METHOD_6 ( STRING_1 , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; VAR_1 = TYPE_2 . METHOD_4 ( ) ; } disk . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ; disk . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 result ) { VAR_1 . METHOD_2 ( ) ; boolean VAR_2 = true ; for ( TYPE_2 VAR_3 : result . getReturnValue ( ) ) { VAR_2 = VAR_2 && ( VAR_3 . METHOD_3 ( ) ) ; if ( ! VAR_2 ) { break ; } } if ( VAR_2 ) { METHOD_4 ( ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; } 
private java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . getValue ( ) ; java.util.Map < java.lang.String , java.lang.String > VAR_4 = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ; TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) ; return VAR_4 ; } 
public java.lang.Boolean METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( VAR_2 . METHOD_4 ( ) ) ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : METHOD_5 ( ) ) { TYPE_3 . METHOD_6 ( METHOD_7 ( ) , VAR_3 ) ; } return java.lang.Boolean . TRUE ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( command . METHOD_6 ( ) ) ; } 
public synchronized void METHOD_1 ( TYPE_1 host ) { if ( ! ( VAR_1 . METHOD_2 ( host . getId ( ) ) ) ) { VAR_1 . put ( host . getId ( ) , host ) ; } VAR_2 . METHOD_3 ( STRING_1 , host . getName ( ) ) ; METHOD_4 ( host ) ; } 
protected TYPE_1 < java.lang.Boolean , TYPE_2 > METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid VAR_1 , int type ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_3 . METHOD_2 ( ) . get ( VAR_1 ) ; if ( ! ( TYPE_3 . METHOD_3 ( vds ) ) ) { VAR_2 . error ( STRING_1 , vds . getName ( ) , storageDomain . getName ( ) ) ; TYPE_4 . METHOD_4 ( VAR_3 , null , vds ) ; return new TYPE_1 ( false , null ) ; } return super . METHOD_1 ( storageDomain , VAR_1 , type ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = METHOD_3 ( ) ; vm . METHOD_4 ( INT_1 ) ; METHOD_5 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( INT_1 ) ) . thenReturn ( STRING_1 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_7 ( TYPE_1 . any ( VAR_2 . Integer class ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( TYPE_2 . METHOD_8 ( ) ) ; TYPE_3 . METHOD_9 ( command , VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( VAR_1 . name ( ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( VAR_4 , null ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( VAR_5 , null ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) ; TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_6 class , VAR_3 ) ; } 
protected boolean validate ( ) { TYPE_1 returnValue = TYPE_2 . METHOD_1 ( VAR_1 , METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , true ) ; TYPE_3 . getReturnValue ( ) . METHOD_6 ( returnValue . METHOD_7 ( ) ) ; return returnValue . METHOD_8 ( ) ; } 
protected boolean METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , TYPE_1 . DiskImage diskImage , TYPE_2 VAR_2 , org.ovirt.engine.core.common.businessentities.StorageDomain VAR_3 ) { boolean VAR_4 = METHOD_2 ( diskImage ) ; if ( VAR_4 && ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) { return false ; } return super . METHOD_1 ( VAR_1 , diskImage , VAR_2 , VAR_3 ) ; } 
private void METHOD_1 ( ) { if ( ( getWindow ( ) ) != null ) { return ; } TYPE_1 VAR_1 = getSelectedItem ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_2 . setTitle ( VAR_3 . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( null ) ; METHOD_6 ( VAR_1 ) ; METHOD_7 ( VAR_2 ) ; METHOD_8 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; parameters . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_7 ( ) ; TYPE_2 . METHOD_8 ( command ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 < ? > command , TYPE_3 . VdcActionType VAR_1 ) { TYPE_3 . VdcActionParametersBase params = command . getParameters ( ) ; TYPE_1 VAR_2 ; if ( ( params . METHOD_2 ( ) ) != null ) { VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( ( ( org.ovirt.engine.core.compat.Guid ) ( params . METHOD_2 ( ) ) ) ) ; } else { VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 , command ) ; TYPE_5 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; } return VAR_2 ; } 
public boolean METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( true ) ; METHOD_4 ( ) . METHOD_3 ( true ) ; if ( VAR_1 ) { METHOD_2 ( ) . METHOD_5 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; } else { METHOD_4 ( ) . METHOD_6 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; } return ( METHOD_4 ( ) . METHOD_7 ( ) ) && ( METHOD_2 ( ) . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network network = ( ( org.ovirt.engine.core.common.businessentities . Network ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; boolean VAR_1 = ( ( METHOD_3 ( ) ) && ( network != null ) ) && ( ! ( network . getId ( ) . equals ( VAR_2 ) ) ) ; METHOD_4 ( ) . setIsChangable ( VAR_1 ) ; METHOD_5 ( ) . setIsChangable ( VAR_1 ) ; METHOD_6 ( ) . setIsChangable ( VAR_1 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( org.mockito.Mockito . METHOD_4 ( VAR_3 . VDS class ) ) ) ; TYPE_3 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_4 . METHOD_7 ( VAR_4 ) ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 entity = TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_1 , vm . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( vm . METHOD_7 ( ) ) , true , true ) ; } 
public void METHOD_1 ( final TYPE_1 model ) { VAR_1 . METHOD_1 ( model ) ; VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( model . METHOD_4 ( ) . getEntity ( ) ) ) ; model . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( ) { public void METHOD_7 ( TYPE_3 VAR_4 , java.lang.Object sender , TYPE_4 args ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( model . METHOD_4 ( ) . getEntity ( ) ) ) ; } } ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
private java.lang.String METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) { org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_5 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; if ( VAR_5 . equals ( VAR_3 ) ) { java.lang.String VAR_6 = VAR_4 . METHOD_4 ( ) ; if ( ( VAR_4 . METHOD_5 ( ) ) != null ) { VAR_6 += STRING_1 + ( VAR_4 . METHOD_5 ( ) ) ; } return VAR_6 ; } } return STRING_2 ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . getReturnValue ( ) . METHOD_4 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , true , true , false , false , true , true , METHOD_5 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 event ) { METHOD_2 ( ) . METHOD_1 ( context , VAR_1 , TYPE_4 . getValue ( ) , event , VAR_2 ) ; if ( ( TYPE_5 . equals ( event . METHOD_3 ( ) ) ) && ( ( VAR_3 ) != null ) ) { VAR_3 . METHOD_4 ( event ) ; } } 
private TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( TYPE_3 . METHOD_3 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_4 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . getName ( ) , VAR_2 . getId ( ) , TYPE_3 . getParameters ( ) . METHOD_6 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_7 ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; TYPE_1 VAR_3 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; VAR_3 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; org.mockito.Mockito.when ( command . METHOD_5 ( VAR_1 ) ) . thenReturn ( VAR_3 ) ; boolean VAR_4 = command . METHOD_6 ( VAR_1 , null ) ; TYPE_2 . METHOD_7 ( VAR_4 ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_4 : VAR_3 ) { if ( VAR_1 . equals ( VAR_4 . METHOD_4 ( ) ) ) { return true ; } } return false ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , true , false , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS host = METHOD_2 ( ) ; host . METHOD_3 ( STRING_1 ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( host , VAR_2 ) ) ; TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( host , VAR_3 ) ) ; TYPE_2 . METHOD_7 ( VAR_1 . METHOD_6 ( host , VAR_4 ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; cmd . getVm ( ) . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_8 ( ) ; TYPE_1 . METHOD_9 ( cmd ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { int VAR_3 = 0 ; if ( ( VAR_4 . METHOD_2 ( ) ) != null ) { VAR_3 = ( ( java.util.List < ? > ) ( METHOD_3 ( ) . METHOD_2 ( ) ) ) . size ( ) ; } int VAR_5 = METHOD_4 ( ) ; int VAR_6 = METHOD_5 ( ) ; return TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 , VAR_5 , VAR_6 , VAR_2 ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ; return ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_7 ( ) ) ) ) ; } 
protected int METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { int result = 0 ; for ( org.ovirt.engine.core.common.businessentities.DiskImage VAR_2 : METHOD_2 ( ) ) { if ( ( VAR_2 . METHOD_3 ( ) ) != ( VAR_3 ) ) { if ( VAR_2 . METHOD_4 ( ) . get ( 0 ) . getValue ( ) . equals ( VAR_1 ) ) { result = result + ( ( int ) ( TYPE_1 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) ) ; } } } return result ; } 
public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int result = 1 ; result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( VAR_4 ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) ; return result ; } 
private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( METHOD_2 ( ) ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , params , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { TYPE_4 model = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ; model . METHOD_7 ( ) ; model . METHOD_8 ( ) ; } } , this ) ; } 
private boolean METHOD_1 ( TYPE_1 parameters ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( parameters . METHOD_3 ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = METHOD_4 ( parameters . METHOD_5 ( ) , TYPE_2 . getStoragePoolId ( ) ) ; return ( ( METHOD_6 ( VAR_1 ) ) && ( METHOD_7 ( VAR_2 ) ) ) && ( ( METHOD_8 ( ) ) || ( METHOD_9 ( VAR_2 , VAR_1 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = METHOD_2 ( VAR_1 . METHOD_5 ( ) ) ; VAR_4 = VAR_2 . get ( VAR_5 ) ; VAR_6 = new TYPE_1 ( ) ; VAR_6 . METHOD_6 ( STRING_1 ) ; VAR_6 . METHOD_7 ( VAR_4 . METHOD_8 ( ) ) ; VAR_7 = new TYPE_2 ( ) ; } 
static void METHOD_1 ( TYPE_1 . Disk model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) ) ; METHOD_2 ( ( ! ( model . METHOD_4 ( ) ) ) ) ; METHOD_2 ( model . METHOD_5 ( ) ) ; } 
private void METHOD_1 ( java.lang.Object sender ) { TYPE_1 storageDomain = ( ( TYPE_1 ) ( ( ( TYPE_2 ) ( sender ) ) . getSelectedItem ( ) ) ) ; if ( storageDomain != null ) { for ( TYPE_3 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) . equals ( sender ) ) { METHOD_3 ( storageDomain . getId ( ) , VAR_1 . METHOD_4 ( ) ) ; break ; } } } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { final TYPE_3 VAR_1 = new TYPE_3 ( TYPE_4 . METHOD_2 ( this . host ) , this . VAR_2 ) ; TYPE_5 VAR_3 = TYPE_5 . METHOD_3 ( ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; VAR_3 . METHOD_4 ( false ) ; int VAR_4 = VAR_5 ; TYPE_1 VAR_6 = VAR_3 . METHOD_5 ( this . VAR_7 , VAR_4 , new TYPE_6 < > ( ) ) ; METHOD_6 ( true ) ; METHOD_7 ( ) ; return VAR_6 ; } 
private void METHOD_1 ( TYPE_1 model ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; model . METHOD_5 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; model . METHOD_6 ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_7 ( TYPE_4 VAR_2 , java.lang.Object sender , TYPE_5 args ) { } } ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; try { command . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_1 ) { org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( INT_1 ) ) . log ( TYPE_3 . any ( VAR_3 class ) , TYPE_3 . any ( VAR_4 . AuditLogType class ) ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_4 . METHOD_2 ( VAR_2 ) ; this . VAR_4 . METHOD_3 ( ) ; this . VAR_3 = VAR_3 ; METHOD_4 ( true ) ; METHOD_5 ( false ) ; } 
private TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( TYPE_3 . METHOD_3 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_4 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_6 ( ) , VAR_2 . getId ( ) , TYPE_3 . getParameters ( ) . METHOD_7 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_8 ( ) ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) ; model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) ; model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ; model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) ; model . METHOD_8 ( null ) ; return model ; } 
public void METHOD_1 ( final boolean VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( INT_1 , VAR_2 ) ; METHOD_2 ( ) . METHOD_3 ( ) . METHOD_5 ( INT_1 , VAR_2 ) ; METHOD_2 ( ) . METHOD_3 ( ) . METHOD_6 ( VAR_3 ) ; METHOD_2 ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_4 , STRING_1 ) ; METHOD_8 ( ) ; TYPE_1 . METHOD_9 ( VAR_5 ) ; } } 
private static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { return true ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ; } 
private boolean METHOD_1 ( ) { for ( TYPE_1 nic : TYPE_2 . getVm ( ) . METHOD_2 ( ) ) { if ( ( nic . METHOD_3 ( ) ) == null ) { if ( ! ( TYPE_3 . METHOD_4 ( TYPE_2 . getVm ( ) . METHOD_5 ( ) . getValue ( ) ) ) ) { addCanDoActionMessage ( VAR_1 ) ; return false ; } else { return true ; } } } return true ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; model . METHOD_2 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) ; TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , vm . METHOD_4 ( ) , VAR_3 ) ; } 
protected void METHOD_1 ( TYPE_1 . Disk disk ) { org.ovirt.engine.core.compat.Guid VAR_1 = METHOD_2 ( disk ) ; if ( VAR_1 != null ) { TYPE_1 . StorageDomain storageDomain = METHOD_3 ( VAR_1 ) ; if ( storageDomain != null ) { disk . METHOD_4 ( TYPE_2 . map ( storageDomain . METHOD_5 ( ) ) . value ( ) ) ; } } } 
public void METHOD_1 ( ) { if ( METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) ) { getReturnValue ( ) . METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_6 ( TYPE_1 . getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( METHOD_9 ( ) , METHOD_10 ( ) ) ) ; } TYPE_2 . METHOD_11 ( METHOD_2 ( ) . METHOD_12 ( ) , true ) ; getReturnValue ( ) . METHOD_4 ( true ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( STRING_1 ) ; VAR_4 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; TYPE_1 VAR_5 = VAR_4 . METHOD_5 ( ) . get ( VAR_1 . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( VAR_5 ) ; TYPE_2 . assertEquals ( VAR_1 , VAR_5 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String result = STRING_1 ; if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { if ( VAR_3 . METHOD_3 ( VAR_1 ) ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_4 = VAR_3 . get ( VAR_1 ) ; result = VAR_4 . METHOD_4 ( VAR_2 , VAR_2 ) ; } else { VAR_5 . error ( VAR_6 , VAR_1 ) ; } } return result ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( true ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) ; VAR_1 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 , false , false ) ; METHOD_2 ( 1 , true , true ) ; METHOD_3 ( VAR_1 [ 1 ] ) ; METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) , 0 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 class ) ) ) . METHOD_4 ( new TYPE_2 ( ) ) ; TYPE_3 . METHOD_5 ( command . validate ( ) ) ; } 
private boolean METHOD_1 ( java.util.List < java.lang.String > VAR_1 , boolean VAR_2 ) { boolean returnValue = false ; if ( ( METHOD_2 ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_3 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( METHOD_2 ( ) ) ; VAR_4 . METHOD_4 ( STRING_1 , METHOD_2 ( ) , VAR_3 . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) ) ; returnValue = METHOD_7 ( VAR_1 , VAR_2 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( TYPE_1 . METHOD_8 ( VAR_3 ) ) ) ; } return returnValue ; } 
private TYPE_1 . DiskImage METHOD_1 ( ) { TYPE_1 . DiskImage disk = new TYPE_1 . DiskImage ( ) ; disk . setId ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_2 ) ; disk . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) ; return disk ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( action , new TYPE_1 ( VAR_1 ) , new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 result ) { VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; } } ) ; METHOD_7 ( ) ; } 
protected void METHOD_1 ( ) { java.util.ArrayList < java.lang.String > VAR_1 = new java.util.ArrayList < > ( TYPE_1 . METHOD_2 ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , TYPE_2 . any ( VAR_3 . Version class ) ) ) . thenReturn ( VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 { TYPE_1 VAR_2 = super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) . toString ( ) . METHOD_4 ( VAR_4 ) ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_5 ) . toString ( ) . METHOD_4 ( VAR_4 ) ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_6 ) . toString ( ) . METHOD_4 ( ) ) ; return VAR_2 ; } 
public TYPE_1 . AuditLogType METHOD_1 ( ) { switch ( TYPE_2 . METHOD_2 ( ) ) { case VAR_1 : return TYPE_2 . getSucceeded ( ) ? ( TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) . size ( ) ) > 0 ? VAR_2 : VAR_3 : VAR_4 ; case VAR_5 : return TYPE_2 . getSucceeded ( ) ? VAR_6 : VAR_7 ; default : return VAR_7 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_7 ( ) ) . when ( command ) . METHOD_8 ( ) ; TYPE_3 . METHOD_9 ( command , VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . Disk model = METHOD_2 ( ) ; model . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_5 ( null ) ; METHOD_6 ( METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( ) ; try { VAR_2 . add ( model ) ; METHOD_9 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_10 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( false , VAR_1 ) ; cmd . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 class ) ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_8 ( TYPE_1 . any ( VAR_4 . Guid class ) , TYPE_1 . any ( VAR_4 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_5 , cmd . METHOD_9 ( ) ) ; } 
void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . to ( VAR_2 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . to ( VAR_4 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) . to ( VAR_6 ) ; METHOD_4 ( VAR_7 class , VAR_8 class , VAR_9 class , VAR_10 class , VAR_11 class ) ; } 
public < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 < TYPE_1 > VAR_2 , final TYPE_3 VAR_3 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_4 = METHOD_2 ( VAR_1 , VAR_3 , METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return ( ( java.util.List < TYPE_1 > ) ( VAR_4 . get ( VAR_5 ) ) ) ; } 
private static org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; final org.ovirt.engine.core.common.businessentities.DiskImage VAR_3 = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( TYPE_1 . instance ( ) . METHOD_6 ( ) ) ; return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = METHOD_2 ( null ) ; model . METHOD_3 ( null ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; try { VAR_2 . add ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( new java.util.ArrayList < TYPE_3 > ( ) ) ; VAR_3 . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( validator ) . METHOD_5 ( TYPE_1 . any ( ) ) ; TYPE_4 . METHOD_6 ( validator . METHOD_7 ( VAR_4 ) , TYPE_5 . METHOD_8 ( ) ) ; } 
private boolean METHOD_1 ( final TYPE_1 < ? , ? > VAR_1 ) { final boolean VAR_2 = ( ! ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) || ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 && ( VAR_3 . add ( VAR_1 ) ) ) { VAR_4 . METHOD_4 ( this ) ; if ( METHOD_5 ( VAR_1 ) ) { TYPE_2 . METHOD_6 ( VAR_5 ) ; } } return true ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . get ( VAR_2 class ) ; VAR_3 = VAR_1 . METHOD_2 ( this , STRING_1 , new TYPE_3 [ ] { } , new java.lang.Object [ ] { } , VAR_4 < java.lang.Integer > getValue ( VAR_5 ) , VAR_4 < java.lang.Integer > getValue ( VAR_5 ) , VAR_6 ) ; VAR_7 . METHOD_3 ( STRING_2 ) ; } 
public void METHOD_1 ( java.lang.Exception VAR_1 , java.lang.String VAR_2 , final java.util.Map < java.lang.String , java.lang.Object > globalMap ) throws TYPE_1 { VAR_3 . put ( STRING_1 , TYPE_2 . METHOD_2 ( ) ) ; ( ( java.util.Map ) ( VAR_4 . get ( ) ) ) . put ( STRING_2 , STRING_3 ) ; METHOD_3 ( VAR_1 , VAR_2 , globalMap ) ; } 
protected boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.ui.uicommonweb.models.EntityModel VAR_2 ) { for ( java.lang.Object object : VAR_3 ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( TYPE_1 ) ( object ) ) . METHOD_2 ( ) ; if ( ! ( METHOD_3 ( ( ( template . getName ( ) ) + VAR_1 ) , VAR_2 , METHOD_4 ( null ) ) ) ) { return false ; } } return true ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_3 , STRING_2 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; TYPE_2 VAR_5 = new TYPE_2 ( STRING_3 ) ; VAR_5 . METHOD_3 ( 0 ) ; TYPE_3 . assertEquals ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) ; VAR_1 . METHOD_2 ( VAR_2 , STRING_5 ) ; VAR_1 . METHOD_2 ( VAR_3 , STRING_6 ) ; TYPE_3 . METHOD_5 ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 , false ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( new TYPE_4 ( true , VAR_2 ) ) ; TYPE_5 resource = VAR_4 . METHOD_5 ( VAR_5 class ) ; TYPE_6 response = VAR_3 . METHOD_6 ( METHOD_7 ( null , true , false ) , resource ) ; METHOD_8 ( response ) ; VAR_4 . METHOD_9 ( ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 . parameters = new TYPE_3 ( VAR_1 ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_5 . METHOD_4 ( true ) ; VAR_5 . METHOD_5 ( VAR_7 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; parameters . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_7 ( VAR_1 ) ; TYPE_2 . METHOD_8 ( command ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 class ) ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( INT_1 ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_4 , cmd . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( VAR_2 ) . get ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( true , VAR_4 ) ) . when ( VAR_5 ) . get ( TYPE_1 . any ( VAR_6 . Guid class ) ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { try ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; return METHOD_2 ( VAR_3 , VAR_1 ) ; } catch ( TYPE_4 VAR_4 ) { throw new TYPE_5 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 [ 0 ] , java.lang.Boolean . TRUE } , true , true , false ) ; VAR_1 = METHOD_5 ( VAR_1 , VAR_5 , TYPE_2 . toString ( ) ) ; METHOD_6 ( VAR_1 ) ; VAR_6 . METHOD_7 ( ) ; METHOD_8 ( resource . METHOD_9 ( ) ) ; } 
private static TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , java.lang.String name ) { TYPE_1 returnValue = null ; if ( VAR_1 . METHOD_2 ( name ) ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( ( ( VAR_1 . get ( name ) ) instanceof java.lang.String ) ? VAR_1 . get ( name ) : null ) ) ; returnValue = ( VAR_2 == null ) ? null : TYPE_1 . METHOD_3 ( VAR_2 ) ; } return returnValue ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; cmd . getParameters ( ) . getVm ( ) . METHOD_4 ( VAR_2 ) ; TYPE_1 . METHOD_5 ( cmd . METHOD_6 ( VAR_2 ) ) ; TYPE_2 . METHOD_7 ( STRING_1 , cmd , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( true ) ; METHOD_7 ( true ) ; METHOD_8 ( true ) ; TYPE_3 . METHOD_9 ( command , VAR_2 ) ; } 
protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( ) ) ; setItems ( VAR_1 ) ; } } ) , getEntity ( ) . getId ( ) ) ; } 
private TYPE_1 < org.ovirt.engine.core.common.businessentities.VDSGroup , TYPE_2 > METHOD_1 ( java.lang.String VAR_1 ) { java.util.List < TYPE_1 < org.ovirt.engine.core.common.businessentities.VDSGroup , TYPE_2 > > VAR_2 = ( ( java.util.List < TYPE_1 < org.ovirt.engine.core.common.businessentities.VDSGroup , TYPE_2 > > ) ( METHOD_2 ( ) ) ) ; for ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VDSGroup , TYPE_2 > item : VAR_2 ) { if ( item . METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_1 ) ) { return item ; } } return null ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = new TYPE_1 ( VAR_1 , METHOD_2 ( ) ) ; return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; TYPE_1 result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_1 . getId ( ) , result . getId ( ) ) ; TYPE_2 . assertEquals ( false , result . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( result . METHOD_6 ( ) ) ; } 
private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = METHOD_4 ( ) ; if ( VAR_2 == null ) { return false ; } TYPE_3 < TYPE_1 > VAR_3 = METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; return VAR_3 . METHOD_7 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 value = new TYPE_1 ( ) ; value . METHOD_2 ( false ) ; value . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( TYPE_3 . any ( VAR_4 class ) , TYPE_3 . any ( VAR_5 class ) ) ) . thenReturn ( value ) ; VAR_1 . METHOD_7 ( ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; VAR_2 . METHOD_2 ( ( ( ( ( java.util.List ) ( VAR_2 . METHOD_3 ( ) ) ) . size ( ) ) == 0 ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_1 = ( ( java.util.List < java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; getModel ( ) . METHOD_1 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) ; } 
public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 ) ) ; VAR_3 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) ; } 
public boolean METHOD_1 ( ) { return ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) || ( ( ( METHOD_3 ( ) ) != null ) && ( METHOD_3 ( ) . equals ( VAR_2 ) ) ) ) || ( ( METHOD_4 ( ) . METHOD_2 ( VAR_3 ) ) && ( ( ( METHOD_3 ( ) ) == null ) || ( ! ( METHOD_3 ( ) . equals ( VAR_4 ) ) ) ) ) ; } 
protected boolean METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; return false ; } if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_2 ) ) { addCanDoActionMessage ( VAR_3 ) ; return false ; } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { client . METHOD_2 ( VAR_1 ) ; client . METHOD_3 ( ) ; client . METHOD_4 ( ) ; TYPE_1 VAR_2 = new TYPE_2 ( INT_1 ) ; client . METHOD_5 ( VAR_3 , null , VAR_2 , null ) ; TYPE_3 . assertEquals ( VAR_4 , new java.lang.String ( VAR_2 . METHOD_6 ( ) , STRING_1 ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( STRING_1 ) ; if ( VAR_1 == null ) { return TYPE_2 . METHOD_3 ( ) ; } java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( java.lang.String VAR_3 : VAR_1 . METHOD_4 ( STRING_2 ) ) { if ( TYPE_3 . METHOD_5 ( VAR_3 ) ) { VAR_2 . add ( new TYPE_1 ( VAR_3 ) ) ; } } return VAR_2 ; } 
private void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ; java.lang.String [ ] types = VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_4 ) , ( - 1 ) ) ; for ( java.lang.String VAR_5 : types ) { java.lang.String [ ] VAR_6 = VAR_5 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_7 ) , ( - 1 ) ) ; VAR_8 . put ( VAR_6 [ 0 ] , VAR_6 [ 1 ] ) ; } } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.List < TYPE_1 > VAR_2 = ( ( java.util.List < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_1 ( ) . METHOD_2 ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . METHOD_2 ( false ) ; } } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( true ) ; METHOD_5 ( ) . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( METHOD_5 ( ) , true ) ; TYPE_2 . METHOD_9 ( METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . getStatus ( ) ; TYPE_5 . METHOD_7 ( command . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . get ( VAR_2 . METHOD_2 ( ) ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; dao . METHOD_4 ( VAR_2 ) ; VAR_1 = dao . get ( VAR_2 . METHOD_2 ( ) ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( new java.util.ArrayList < > ( ) ) ; VAR_1 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_7 ( VAR_2 ) ; } } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { return new TYPE_1 ( new TYPE_2 ( VAR_1 , vmId ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 0 , null , true , true , false , STRING_1 , null , null , null ) ; } 
private void METHOD_1 ( TYPE_1 model ) { java.util.ArrayList < TYPE_2 > VAR_1 = ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; if ( ! ( model . METHOD_4 ( ) ) ) { return ; } VAR_2 . METHOD_5 ( model . METHOD_6 ( ) ) ; model . METHOD_6 ( ) . METHOD_2 ( ) . setItems ( model . METHOD_2 ( ) . METHOD_3 ( ) ) ; model . METHOD_6 ( ) . METHOD_7 ( model . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 . Network > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } } 
public TYPE_1 METHOD_1 ( ) { get ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( id ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; TYPE_3 parameters = new TYPE_3 ( VAR_1 , VAR_2 ) ; return METHOD_3 ( VAR_4 , parameters ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds , TYPE_1 VAR_1 ) { try { return TYPE_2 . getInstance ( ) . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( TYPE_3 . METHOD_3 ( ) , vds . getId ( ) , VAR_1 , VAR_2 ) ; } catch ( TYPE_4 e ) { final TYPE_5 result = METHOD_6 ( ) ; result . METHOD_7 ( vds ) ; result . METHOD_8 ( VAR_1 ) ; throw e ; } } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat . Version VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . setId ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_3 ) ; return VAR_3 ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ; model . METHOD_2 ( model , new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_3 ( new TYPE_2 [ ] { VAR_1 } ) ) ) ; model . METHOD_4 ( ) . setIsChangable ( false ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ; org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) ; command . METHOD_10 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) ; TYPE_1 . when ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) ; TYPE_3 . METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_3 ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_2 ( ) . setItems ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ; TYPE_2 . METHOD_4 ( getVm ( ) . METHOD_5 ( ) , METHOD_6 ( ) , VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_1 , METHOD_2 ( id ) ) ; return inject ( new TYPE_5 < TYPE_6 , TYPE_7 > ( VAR_5 , VAR_6 , VAR_4 ) ) ; } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 type , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . setId ( id ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( type ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; return VAR_3 ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) ) { return ; } TYPE_4 VAR_3 = null ; java.lang.String VAR_4 ; VAR_3 = VAR_5 . METHOD_3 ( ) ; VAR_4 = constants . METHOD_4 ( ) ; TYPE_5 VAR_6 = TYPE_6 . METHOD_5 ( TYPE_7 . METHOD_6 ( VAR_3 ) . METHOD_7 ( ) ) ; VAR_2 . append ( VAR_7 . METHOD_8 ( VAR_6 , VAR_4 ) ) ; } 
protected TYPE_1 . StorageDomain map ( TYPE_2 entity , TYPE_1 . StorageDomain template ) { TYPE_1 . StorageDomain model = super . map ( entity , template ) ; if ( ! ( METHOD_1 ( ) ) ) { switch ( entity . METHOD_2 ( ) ) { case VAR_1 : METHOD_3 ( model , entity ) ; break ; case VAR_2 : METHOD_4 ( model , entity ) ; break ; case VAR_3 : case VAR_4 : case VAR_5 : METHOD_5 ( model , entity ) ; break ; } } return model ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = new TYPE_1 ( ) ; METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( model ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
protected boolean METHOD_1 ( TYPE_1 storageDomain ) { return ( ( ( ( METHOD_2 ( storageDomain ) ) && ( METHOD_3 ( storageDomain , TYPE_2 . METHOD_4 ( ) ) ) ) && ( METHOD_5 ( storageDomain ) ) ) && ( ( ( ( storageDomain . METHOD_6 ( ) ) == ( VAR_1 ) ) || ( ( storageDomain . METHOD_6 ( ) ) == ( VAR_2 ) ) ) || ( METHOD_7 ( storageDomain ) ) ) ) && ( METHOD_8 ( storageDomain ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; log . METHOD_3 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_6 ( ) ; log . METHOD_7 ( STRING_2 , TYPE_1 . getParameters ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( 1 ) ; METHOD_6 ( 1 ) ; VAR_1 . METHOD_7 ( ) ; TYPE_1 nic = resource . get ( ) ; TYPE_2 . METHOD_8 ( nic , 1 ) ; METHOD_9 ( nic ) ; } 
private java.lang.String METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 ; } if ( ( METHOD_2 ( ) ) == ( VAR_3 ) ) { return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; } if ( ! ( TYPE_2 . METHOD_5 ( TYPE_1 . getVm ( ) . METHOD_6 ( ) , TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ) ) { return VAR_2 ; } return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( ) ; final boolean VAR_1 = ( VAR_2 . size ( ) ) > 0 ; if ( VAR_1 ) { TYPE_3 . METHOD_6 ( new TYPE_4 < TYPE_5 > ( ) { public TYPE_5 METHOD_7 ( ) { if ( METHOD_8 ( ) ) { METHOD_9 ( true ) ; } return null ; } } ) ; } else { METHOD_10 ( ) ; } } 
public java.lang.String METHOD_1 ( TYPE_1 . Version VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ( ( ( VAR_1 . METHOD_2 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( ) , true ) ; return VAR_2 != null ? VAR_2 . toString ( ) : null ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 . parameters = new TYPE_3 ( VAR_1 , VAR_1 . getId ( ) ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_5 . METHOD_4 ( true ) ; VAR_5 . METHOD_5 ( VAR_7 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_4 , VAR_5 ) ; METHOD_5 ( VAR_6 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_4 ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_7 ) ) . when ( VAR_8 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; TYPE_3 . METHOD_9 ( command , VAR_9 ) ; } 
protected void METHOD_1 ( TYPE_1 . DiskImage VAR_1 ) { TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; java.util.List < TYPE_1 . DiskImage > VAR_2 = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . getId ( ) ) ; if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { METHOD_8 ( ) . METHOD_3 ( VAR_1 . getId ( ) ) ; } } 
public java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_1 > METHOD_1 ( ) { java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > VAR_1 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ; for ( TYPE_1 user : METHOD_2 ( ) ) { VAR_1 . put ( user . METHOD_3 ( ) , user ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_3 ( STRING_2 , VAR_1 ) ; nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) ; nic . METHOD_6 ( VAR_2 ) ; METHOD_7 ( VAR_1 ) ; METHOD_8 ( nic ) ; nic . METHOD_6 ( VAR_3 ) ; TYPE_1 VAR_4 = METHOD_9 ( METHOD_10 ( nic ) ) ; METHOD_11 ( VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; parameters . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; TYPE_2 . METHOD_8 ( command ) ; } 
public TYPE_1 add ( TYPE_2 . Disk disk ) { METHOD_1 ( VAR_1 . Disk class , disk ) ; if ( disk . METHOD_2 ( ) ) { return METHOD_3 ( disk ) ; } else { METHOD_4 ( disk ) ; METHOD_5 ( disk ) ; return METHOD_6 ( VAR_2 , METHOD_7 ( map ( disk ) , disk ) , new TYPE_3 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String ... VAR_1 ) throws TYPE_2 { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_4 = null ; try { VAR_4 = new TYPE_3 ( VAR_2 , STRING_2 ) ; for ( java.lang.String VAR_5 : VAR_1 ) { VAR_4 . METHOD_3 ( VAR_5 ) ; } } finally { if ( VAR_4 != null ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ; } 
public java.lang.String METHOD_1 ( ) { if ( METHOD_2 ( ) ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ; if ( ! ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) ) { VAR_1 = VAR_2 . METHOD_7 ( ) ; } return VAR_2 . METHOD_5 ( ) . get ( VAR_1 ) ; } else { return VAR_2 . METHOD_5 ( ) . get ( VAR_3 ) ; } } 
public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( VAR_2 ) == null ) ) { VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ; if ( ( VAR_2 ) != null ) { VAR_1 = VAR_2 . METHOD_1 ( ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; TYPE_1 result = dao . get ( new TYPE_2 ( VAR_1 . METHOD_3 ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ; TYPE_3 . METHOD_5 ( result ) ; TYPE_3 . assertEquals ( VAR_1 , result ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_8 ( ) ; TYPE_1 . METHOD_9 ( command . METHOD_10 ( ) ) ; TYPE_1 . METHOD_11 ( command . getReturnValue ( ) . METHOD_12 ( ) . METHOD_13 ( TYPE_2 . toString ( ) ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , TYPE_3 < ? extends TYPE_2 . VdcActionParametersBase > VAR_2 , java.lang.String [ ] VAR_3 , java.lang.Object [ ] VAR_4 , boolean VAR_5 , boolean VAR_6 , java.lang.Object VAR_7 , java.lang.String VAR_8 , boolean VAR_9 ) { return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , null , null , VAR_8 , VAR_9 ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( id , other . id ) ) && ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.common.businessentities.VDS vds , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) { TYPE_2 tempVar = new TYPE_2 ( vds . getId ( ) , VAR_1 , VAR_2 ) ; tempVar . METHOD_2 ( true ) ; TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_3 , tempVar , TYPE_4 . METHOD_4 ( ) ) ; } 
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( java.lang.Integer ) ( TYPE_2 . getValue ( VAR_2 ) ) ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; return ( VAR_1 . METHOD_5 ( VAR_3 ) ) || ( VAR_1 . equals ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( new TYPE_1 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( new TYPE_1 ( STRING_2 ) ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . isEmpty ( ) ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_6 ( ) . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_3 , STRING_2 ) ; TYPE_1 VAR_4 = new TYPE_1 ( INT_1 ) ; TYPE_2 VAR_5 = new TYPE_2 ( STRING_3 ) ; VAR_5 . METHOD_3 ( 0 ) ; TYPE_3 . assertEquals ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) ; VAR_1 . METHOD_2 ( VAR_2 , STRING_5 ) ; VAR_1 . METHOD_2 ( VAR_3 , STRING_6 ) ; TYPE_3 . METHOD_5 ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; METHOD_3 ( VAR_1 ) ; TYPE_1 result = METHOD_4 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 class ) , VAR_5 , new TYPE_3 ( ) ) ; if ( result != null ) { TYPE_4 . METHOD_5 ( this , result ) ; } return result ; } 
public void METHOD_1 ( final TYPE_1 object ) { super . METHOD_1 ( object ) ; METHOD_2 ( object ) ; if ( object . METHOD_3 ( ) ) { object . METHOD_4 ( ) . setEntity ( STRING_1 ) ; VAR_1 . METHOD_5 ( false ) ; } } 
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_4 , VAR_3 ) ) . when ( VAR_5 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_6 ) , TYPE_2 . METHOD_7 ( METHOD_8 ( VAR_4 ) ) ) ; METHOD_2 ( VAR_7 , VAR_8 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( false , VAR_3 , VAR_4 ) ; cmd . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_7 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_3 . any ( VAR_6 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_7 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ; if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_1 ( ) ) != ( VAR_2 ) ) ) { model . METHOD_2 ( ) ; } else { model . METHOD_3 ( ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 map = METHOD_2 ( ) ; METHOD_3 ( map , VAR_1 , VAR_2 , TYPE_2 . METHOD_4 ( ) ) ; if ( METHOD_5 ( ) ) { TYPE_3 parameters = new TYPE_3 ( TYPE_2 . getStoragePoolId ( ) ) ; METHOD_6 ( VAR_3 , parameters , null ) ; METHOD_6 ( VAR_4 , METHOD_7 ( ) , TYPE_2 . METHOD_8 ( ) ) ; } if ( TYPE_2 . METHOD_9 ( ) ) { METHOD_10 ( ) ; } TYPE_2 . METHOD_11 ( true ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_3 = TYPE_2 . METHOD_3 ( ) ; VAR_3 . put ( VAR_4 , VAR_1 ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_5 = TYPE_2 . METHOD_4 ( VAR_3 ) ; TYPE_3 . METHOD_5 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_6 ( ) ) ; TYPE_4 . assertEquals ( VAR_2 . METHOD_7 ( ) . get ( 0 ) . METHOD_8 ( ) , new TYPE_5 ( STRING_2 ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 storage = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; if ( ( storage . METHOD_4 ( ) ) == ( VAR_1 ) ) { TYPE_3 VAR_2 = METHOD_5 ( ) ; METHOD_6 ( VAR_2 . getReturnValue ( ) ) ; } else { TYPE_2 . METHOD_7 ( ) . METHOD_8 ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ) ; } } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = true ; if ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_1 = super . METHOD_1 ( ) ; if ( ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_3 ) ) ) { addCanDoActionMessage ( VAR_4 ) ; VAR_1 = false ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; if ( ( getWindow ( ) ) != null ) { return ; } final TYPE_2 VAR_2 = new TYPE_3 ( VAR_1 , this , getEntity ( ) ) ; METHOD_2 ( VAR_2 ) ; VAR_2 . METHOD_3 ( ) . setItems ( TYPE_4 . METHOD_4 ( getEntity ( ) ) ) ; VAR_2 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ; if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( ) ) ) { METHOD_5 ( false ) ; return ; } } METHOD_5 ( true ) ; } 
public void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) { java.util.List < TYPE_1 . VdcActionType > VAR_2 = new java.util.ArrayList < TYPE_1 . VdcActionType > ( VAR_1 . size ( ) ) ; TYPE_3 . METHOD_2 ( VAR_2 , action ) ; METHOD_3 ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_4 ( null ) ; VAR_2 . METHOD_5 ( ) ; try { resource . METHOD_6 ( VAR_1 ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( TYPE_1 . instance ( ) . METHOD_4 ( ) ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_5 ( STRING_2 , VAR_1 ) ; nic . METHOD_3 ( TYPE_1 . instance ( ) . METHOD_4 ( ) ) ; METHOD_6 ( VAR_1 ) ; METHOD_7 ( nic ) ; TYPE_2 VAR_2 = METHOD_8 ( METHOD_9 ( nic ) ) ; METHOD_10 ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) { final int VAR_1 = INT_1 ; final int VAR_2 = INT_2 ; org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; TYPE_1 VAR_5 = METHOD_6 ( VAR_3 , VAR_1 , VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_5 , true ) ; TYPE_2 . METHOD_9 ( command . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 2 ) ; METHOD_3 ( 0 ) ; METHOD_4 ( ) ; METHOD_5 ( METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( ) ; TYPE_1 . VM model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_8 ( model ) ; METHOD_9 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_10 ( VAR_3 ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; cmd . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; METHOD_7 ( true ) ; org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( 1 ) ) . METHOD_10 ( TYPE_1 . METHOD_11 ( ) , TYPE_1 . METHOD_11 ( ) ) ; org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( 0 ) ) . METHOD_12 ( TYPE_1 . METHOD_11 ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( VAR_5 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > list = new java.util.ArrayList < TYPE_2 > ( ) ; for ( TYPE_2 a : ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) { if ( ( a . METHOD_1 ( ) ) == ( VAR_1 ) ) { list . add ( a ) ; } } model . METHOD_2 ( model , list ) ; METHOD_3 ( ) . METHOD_4 ( this , VAR_2 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( VAR_2 ) ; TYPE_2 command = new TYPE_2 ( params , null ) ; java.util.HashMap < java.lang.String , java.lang.Object > VAR_3 = command . METHOD_1 ( ) ; TYPE_3 . METHOD_4 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_3 . get ( STRING_2 ) ) ; TYPE_3 . assertEquals ( STRING_3 , VAR_3 . get ( STRING_4 ) ) ; } 
public TYPE_1 add ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 ) ; METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_3 , new TYPE_3 ( map ( METHOD_4 ( VAR_1 ) ) ) , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( VAR_4 , VAR_5 . IdQueryParameters class ) ) ; } 
public TYPE_1 METHOD_1 ( ) { get ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . setId ( id ) ; java.lang.String host = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; org.ovirt.engine.core.compat.Guid VAR_5 = VAR_6 ; if ( host != null ) { VAR_5 = METHOD_3 ( host ) ; } TYPE_4 parameters = new TYPE_4 ( VAR_1 , VAR_5 ) ; return METHOD_4 ( VAR_7 , parameters ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( id ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 vm = new TYPE_1 ( ) ; vm . setId ( VAR_1 ) ; vm . METHOD_2 ( new TYPE_2 . StorageDomain ( ) ) ; vm . METHOD_3 ( ) . setId ( VAR_2 ) ; vm = TYPE_3 . METHOD_4 ( METHOD_5 ( ) , vm ) ; assertEquals ( VAR_3 , vm . METHOD_6 ( ) ) ; assertEquals ( VAR_4 , vm . METHOD_3 ( ) . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list . add ( new TYPE_2 ( ) ) ; list . add ( new TYPE_3 ( ) ) ; list . add ( new TYPE_4 ( ) ) ; list . add ( new TYPE_5 ( ) ) ; list . add ( new TYPE_6 ( ) ) ; METHOD_2 ( list ) ; METHOD_3 ( list ) ; } 
public void METHOD_1 ( ) { final TYPE_1 parameters = METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ( ( VAR_1 ) > ( VAR_2 . length ( ) ) ) ) ; parameters . METHOD_4 ( true ) ; TYPE_3 command = METHOD_5 ( parameters ) ; TYPE_4 < TYPE_5 < TYPE_1 > > validate = TYPE_6 . METHOD_6 ( ) . validate ( parameters , command . METHOD_7 ( ) . METHOD_8 ( new TYPE_7 < ? > [ 0 ] ) ) ; TYPE_2 . METHOD_9 ( validate . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_4 ( VAR_3 class ) ) ; TYPE_2 . METHOD_5 ( validator . METHOD_1 ( ) , TYPE_3 . METHOD_6 ( ) ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_3 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . METHOD_4 ( ) . getName ( ) ) ) + STRING_2 ) ) ; TYPE_2 . get ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( ) ; } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 1 ] } , METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . equals ( METHOD_5 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( VAR_1 . getId ( ) . equals ( METHOD_6 ( ) . getId ( ) ) ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . equals ( VAR_1 . METHOD_7 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 . METHOD_7 ( ) , STRING_2 ) ; VAR_3 = new TYPE_2 ( VAR_2 . METHOD_8 ( ) , VAR_1 , 1 ) ; TYPE_3 . METHOD_9 ( STRING_3 , VAR_3 . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( resource ) ) ; METHOD_2 ( ) ; METHOD_3 ( INT_1 ) ; METHOD_4 ( INT_1 ) ; METHOD_5 ( INT_1 ) ; METHOD_6 ( INT_2 ) ; METHOD_7 ( METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 , VAR_5 [ 1 ] } ) ) ; METHOD_9 ( VAR_1 . METHOD_10 ( new TYPE_2 ( ) ) ) ; } 
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_3 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ; VAR_3 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_1 . getName ( ) ) ; VAR_3 . METHOD_5 ( true ) ; return VAR_3 ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; vds . METHOD_3 ( STRING_2 ) ; cluster . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( vds ) ; TYPE_1 . METHOD_6 ( vds . getStatus ( ) , VAR_4 ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( ( vm . METHOD_2 ( ) ) || ( ( vm . getStatus ( ) ) == ( VAR_1 ) ) ) || ( METHOD_3 ( vm ) ) ) { return new TYPE_1 . ValidationResult ( VAR_2 ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd , false ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) ; org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . thenReturn ( METHOD_5 ( VAR_4 ) ) ; } 
private void METHOD_1 ( TYPE_1 parameters , java.util.List < TYPE_2 > VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , parameters . METHOD_3 ( ) . getId ( ) ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( INT_1 , 2 , 2 , 2 , 2 ) ; TYPE_2 . assertEquals ( INT_1 , VAR_1 . size ( ) ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic , null ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 TYPE_2 = METHOD_2 ( STRING_1 , VAR_1 , VAR_2 , INT_1 , 0 ) ; org.mockito.Mockito.when ( command . METHOD_3 ( ) ) . thenReturn ( TYPE_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . get ( TYPE_3 . METHOD_4 ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain . METHOD_5 ( VAR_5 ) ; domain . METHOD_6 ( VAR_6 ) ; METHOD_7 ( TYPE_2 . getId ( ) , domain ) ; TYPE_4 . METHOD_8 ( command , VAR_7 ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { java.lang.String VAR_2 = VAR_3 ; if ( STRING_1 . equals ( VAR_2 ) ) { if ( ( VAR_4 . METHOD_2 ( ) ) != null ) { METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( VAR_4 . METHOD_2 ( ) ) ) ) ; } } } 
public void METHOD_1 ( ) { final TYPE_1 command = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( command . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { TYPE_1 VAR_1 = METHOD_2 ( new TYPE_2 ( ) , vds ) ; if ( VAR_2 . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( STRING_1 , METHOD_5 ( ) , VAR_1 ) ; } } finally { if ( vds != null ) { METHOD_6 ( vds . METHOD_7 ( ) ) ; VAR_3 . METHOD_8 ( vds ) ; TYPE_3 . getInstance ( ) . METHOD_9 ( ) . METHOD_10 ( vds . getId ( ) ) ; } } } 
protected void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( this . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_2 . add ( 1 , METHOD_2 ( ) ) ; this . METHOD_2 ( ) . setItems ( VAR_2 ) ; this . METHOD_2 ( ) . setSelectedItem ( METHOD_2 ( ) ) ; } super . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , TYPE_1 VAR_2 , org.ovirt.engine.core.common.businessentities.network.Network network ) { if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( ) ) ) { VAR_1 . put ( VAR_3 , ( network == null ? VAR_4 . Collections < java.lang.String > METHOD_3 ( ) : TYPE_2 . METHOD_4 ( network . getName ( ) ) ) ) ; } } 
protected void METHOD_1 ( int VAR_1 ) throws java.lang.Exception { for ( int i = 0 ; i < VAR_1 ; i ++ ) { METHOD_2 ( VAR_2 , VAR_3 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 [ i ] } , TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_5 ) ) ) ; } } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = new TYPE_1 ( ) ; model . METHOD_2 ( null ) ; model . METHOD_3 ( new TYPE_2 . Network ( ) ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; try { VAR_2 . add ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
private static void METHOD_1 ( TYPE_1 entity , TYPE_2 VAR_1 , java.util.Map < java.lang.String , TYPE_1 > VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_4 < TYPE_3 < TYPE_1 > > get ( VAR_1 , VAR_5 . Collections < TYPE_1 > METHOD_2 ( ) ) ) { if ( ! ( VAR_2 . METHOD_3 ( VAR_6 < java.lang.String > get ( VAR_7 ) ) ) ) { VAR_2 . put ( VAR_3 . get ( VAR_7 ) , VAR_3 ) ; TYPE_4 . METHOD_1 ( VAR_3 , VAR_8 , VAR_2 ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( command , VAR_4 ) ; } 
protected void METHOD_1 ( ) { try { if ( TYPE_1 . METHOD_2 ( ) ) { METHOD_3 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( TYPE_1 . METHOD_5 ( ) ) ) ; if ( ( TYPE_1 . getVm ( ) ) != null ) { TYPE_2 . METHOD_6 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_7 ( ) ; } } TYPE_1 . METHOD_8 ( true ) ; } finally { TYPE_1 . METHOD_9 ( ) ; } } 
private boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , org.ovirt.engine.core.common.businessentities.VDS VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_1 ) { if ( VAR_3 . METHOD_2 ( ) . equals ( VAR_2 . METHOD_3 ( ) ) ) { return true ; } for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_4 : METHOD_4 ( VAR_2 . getId ( ) ) ) { if ( VAR_3 . METHOD_2 ( ) . equals ( VAR_4 . METHOD_5 ( ) ) ) { return true ; } } } return false ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == null ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_1 . METHOD_4 ( VAR_2 . METHOD_2 ( ) ) ; } } } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_2 ( VAR_5 ) , VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat . Version version , java.lang.String VAR_1 ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_2 = new java.util.HashMap < > ( ) ; java.util.HashMap < java.lang.String , java.lang.String > VAR_3 = new java.util.HashMap < > ( ) ; METHOD_2 ( version , VAR_1 , VAR_3 , VAR_2 ) ; return new TYPE_1 ( METHOD_3 ( VAR_3 ) , METHOD_3 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) { validator = new TYPE_1 ( ) ; validator = org.mockito.Mockito . METHOD_2 ( validator ) ; org.mockito.Mockito . METHOD_3 ( validator . METHOD_4 ( org.mockito.Mockito . any ( VAR_1 . VDS class ) ) ) . METHOD_5 ( VAR_2 ) ; org.mockito.Mockito . METHOD_3 ( validator . METHOD_6 ( ) ) . METHOD_5 ( VAR_3 ) ; TYPE_2 . METHOD_7 ( VAR_4 ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.ArrayList < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( INT_1 , null ) ; TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ; for ( java.lang.String VAR_2 : TYPE_3 . METHOD_4 ( STRING_1 ) ) { TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( VAR_2 ) ) ; } } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( disk . getVm ( ) ) == null ) { return ; } boolean VAR_2 = TYPE_3 . equals ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ; org.ovirt.engine.core.compat . Version VAR_3 = disk . getVm ( ) . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( ( ( ( VAR_3 . METHOD_4 ( VAR_5 ) ) >= 0 ) && ( ! VAR_2 ) ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = new org.ovirt.engine.core.common.businessentities . Network ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 < java.lang.String > METHOD_4 ( VAR_3 ) ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getId ( ) ) ; VAR_1 . METHOD_8 ( true ) ; TYPE_1 . METHOD_9 ( ) . METHOD_10 ( VAR_1 ) ; } 
public static java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_4 : : METHOD_7 , ( e ) - > java.lang.String.valueOf ( e . getValue ( ) ) ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) { METHOD_4 ( ) ; } else { super . METHOD_1 ( command ) ; } } 
private void METHOD_1 ( ) { if ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) { METHOD_3 ( ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; TYPE_1 . METHOD_8 ( ) ; } TYPE_1 . METHOD_9 ( true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , false ) , STRING_3 ) ; TYPE_1 . assertEquals ( VAR_1 . METHOD_2 ( STRING_4 , STRING_5 , false ) , STRING_6 ) ; TYPE_1 . assertEquals ( VAR_1 . METHOD_2 ( STRING_2 , STRING_2 , false ) , STRING_7 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_3 ( VAR_5 ) ; METHOD_3 ( 1 , VAR_4 ) ; METHOD_4 ( 1 ) ; VAR_6 . METHOD_5 ( ) ; VAR_7 . METHOD_6 ( VAR_1 ) ; try { METHOD_7 ( ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_4 VAR_8 ) { METHOD_9 ( VAR_8 , VAR_9 , VAR_4 ) ; } finally { VAR_2 . METHOD_10 ( ) ; } } 
public void METHOD_1 ( TYPE_1 < TYPE_2 , ? > column , boolean VAR_1 ) { if ( METHOD_2 ( column ) ) { VAR_2 . put ( column , VAR_1 ) ; java.lang.String VAR_3 = METHOD_3 ( column ) ; java.lang.String VAR_4 = ( VAR_3 != null ) ? VAR_3 : VAR_5 . get ( column ) ; METHOD_4 ( column , VAR_1 ) ; METHOD_5 ( column , null , VAR_1 , VAR_4 , false ) ; } } 
protected TYPE_1 map ( TYPE_2 entity , TYPE_3 template ) { java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_4 > VAR_1 = VAR_2 . METHOD_1 ( ) ; return VAR_2 . map ( entity , ( VAR_1 . METHOD_2 ( entity . METHOD_3 ( ) ) ? VAR_1 . get ( entity . METHOD_3 ( ) ) : null ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( result ) ) ; TYPE_2 VAR_3 = METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_3 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( command == ( METHOD_6 ( ) ) ) { METHOD_7 ( ) ; } else if ( command . getName ( ) . equals ( STRING_2 ) ) { METHOD_8 ( ) ; } } 
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( TYPE_2 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( STRING_1 ) ; VAR_1 . METHOD_5 ( STRING_1 ) ; VAR_1 . METHOD_6 ( STRING_1 ) ; VAR_1 . METHOD_7 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_8 ( TYPE_2 . getParameters ( ) . getVm ( ) . METHOD_9 ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_4 ( VAR_1 [ 0 ] ) ; try { VAR_2 . add ( model ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , final TYPE_4 VAR_4 , TYPE_5 constants ) { VAR_4 . METHOD_2 ( new TYPE_6 ( VAR_1 , constants ) , VAR_5 , VAR_6 , VAR_4 . METHOD_3 ( ) ) ; VAR_4 . METHOD_2 ( new TYPE_7 ( VAR_2 , constants ) , VAR_7 , VAR_6 , VAR_4 . METHOD_3 ( ) ) ; VAR_4 . METHOD_2 ( new TYPE_8 ( VAR_3 , constants ) , VAR_8 , VAR_6 , VAR_4 . METHOD_3 ( ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { int VAR_3 = VAR_4 < java.lang.Integer > METHOD_2 ( VAR_5 ) ; TYPE_2 VAR_6 = METHOD_3 ( ) . addValue ( STRING_1 , id ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , VAR_3 ) ; return METHOD_4 ( ) . METHOD_5 ( STRING_5 , VAR_7 . instance , VAR_6 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( org.ovirt.engine.core.compat . Version version ) { if ( ! ( TYPE_3 . METHOD_2 ( version ) ) ) { return TYPE_4 . METHOD_3 ( ) ; } TYPE_5 < TYPE_2 , java.util.Map < java.lang.String , java.lang.String > > map = VAR_1 . get ( version ) ; if ( map . isEmpty ( ) ) { return TYPE_4 . METHOD_3 ( ) ; } else { return TYPE_4 . METHOD_4 ( map . METHOD_5 ( ) ) ; } } 
public boolean METHOD_1 ( ) { boolean VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( METHOD_3 ( ) . getSelectedItem ( ) ) == ( VAR_3 ) ; boolean VAR_4 = ( METHOD_4 ( ) . getSelectedItem ( ) ) == ( VAR_5 ) ; boolean VAR_6 = ( VAR_7 . METHOD_5 ( METHOD_6 ( ) ) ) <= 0 ; return ( ( VAR_1 && VAR_2 ) && VAR_4 ) && VAR_6 ; } 
public void METHOD_1 ( ) { TYPE_1 . AddVmCommand < TYPE_2 > cmd = METHOD_2 ( METHOD_3 ( 1 , 1 ) ) ; cmd . getParameters ( ) . getVm ( ) . METHOD_4 ( STRING_1 ) ; TYPE_3 . METHOD_5 ( STRING_2 , cmd . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVdsGroup ( ) ) != null ) { METHOD_2 ( ( ( TYPE_1 . getVdsGroup ( ) . METHOD_3 ( ) ) != null ? TYPE_1 . getVdsGroup ( ) . METHOD_3 ( ) . getValue ( ) : VAR_1 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , METHOD_5 ( ) , null ) ; VAR_4 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 0 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , false ) ; org.mockito.Mockito.when ( cluster . METHOD_3 ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( false ) ; validator = new TYPE_1 ( VAR_3 , VAR_4 , cluster , VAR_5 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_2 ( ) ; iface . METHOD_3 ( null ) ; METHOD_4 ( iface , false , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , iface . METHOD_8 ( ) , METHOD_9 ( ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 , boolean VAR_3 , java.lang.String VAR_4 ) { org.mockito.Mockito.when ( VAR_5 . METHOD_2 ( VAR_1 ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_1 ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_4 ( VAR_4 ) ) . thenReturn ( VAR_7 ) ; org.mockito.Mockito.when ( VAR_7 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) . thenReturn ( VAR_8 ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; resource . METHOD_2 ( ) . VAR_1 = VAR_1 ; resource . METHOD_2 ( ) . VAR_2 = VAR_2 ; resource . METHOD_2 ( ) . VAR_3 = VAR_4 ; resource . METHOD_2 ( ) . VAR_5 = VAR_5 ; resource . METHOD_2 ( ) . VAR_6 = VAR_6 ; TYPE_1 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( TYPE_2 . METHOD_3 ( new TYPE_1 . VdcActionParametersBase [ ] { new TYPE_3 ( getEntity ( ) . getId ( ) ) } ) ) , new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 result ) { } } , null ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) ; VAR_2 = VAR_1 . METHOD_2 ( this , STRING_1 , new TYPE_3 [ 0 ] , new java.lang.Object [ 0 ] , VAR_3 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_5 = ( VAR_6 ) - 1 ; VAR_7 = VAR_1 . METHOD_2 ( this , STRING_2 , new TYPE_3 [ 0 ] , new java.lang.Object [ 0 ] , VAR_8 , VAR_8 , VAR_9 ) ; } 
public void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 , final org.ovirt.engine.core.compat.Guid VAR_2 ) { METHOD_2 ( new org.ovirt.engine.ui.uicommonweb.UICommand ( null , this ) . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) . METHOD_4 ( true ) . METHOD_5 ( true ) ) ; METHOD_6 ( VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) ; super . setItems ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_10 ( VAR_2 ) ; } } , VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_2 ( ) ; METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , ( ( iface . METHOD_7 ( ) ) + 1 ) , METHOD_8 ( ) ) ; } 
private java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( ( VAR_2 ) != null ) { VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ; } else { VAR_1 = new java.util.HashMap < > ( ) ; } } return VAR_1 ; } 
private TYPE_1 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > METHOD_1 ( TYPE_2 VAR_1 ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > VAR_2 = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > ( ) ; VAR_2 . setEntity ( VAR_1 . METHOD_2 ( ) ) ; return new TYPE_1 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . StorageDomain storageDomain = new TYPE_1 . StorageDomain ( ) ; storageDomain . setId ( VAR_1 ) ; storageDomain . METHOD_2 ( new TYPE_2 ( ) ) ; storageDomain . METHOD_3 ( ) . setId ( VAR_2 ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( ) , storageDomain ) ; assertEquals ( VAR_3 , storageDomain . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( TYPE_1 . VM model ) { if ( ! ( model . METHOD_2 ( ) ) ) { model . METHOD_3 ( new TYPE_2 ( ) ) ; } model . METHOD_4 ( ) . METHOD_5 ( ( ! ( TYPE_3 . getInstance ( ) . METHOD_6 ( new org.ovirt.engine.core.compat.Guid ( model . getId ( ) ) ) . isEmpty ( ) ) ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_1 = TYPE_1 . METHOD_1 ( ( ( TYPE_2 < TYPE_3 > ) ( returnValue ) ) ) ; VAR_2 = ( ( TYPE_2 < TYPE_3 > ) ( returnValue ) ) ; TYPE_1 . METHOD_2 ( VAR_3 , vmId ) ; } 
public static boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.Network network ) { if ( iface . METHOD_2 ( ) ) { return ( iface . METHOD_3 ( ) ) != null ; } else { return ( network != null ) && ( ( network . METHOD_4 ( ) ) != null ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( ( VAR_2 ) == ( VAR_1 . getStatus ( ) ) ) || ( ( ( VAR_3 ) == ( VAR_1 . getStatus ( ) ) ) && ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_4 ) ) ) ) || ( ( VAR_5 ) == ( VAR_1 . getStatus ( ) ) ) ) { return true ; } return false ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ; } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { if ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) && ( VAR_1 != null ) ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { VAR_2 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { VAR_2 . put ( vm . getId ( ) , TYPE_2 . name ( ) ) ; } } } 
public void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { if ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( vm . getId ( ) ) ) { VAR_1 . add ( vm ) ; } else { org.ovirt.engine.core.common.businessentities.VM VAR_2 = null ; for ( org.ovirt.engine.core.common.businessentities.VM VAR_3 : VAR_1 ) { if ( VAR_3 . getId ( ) . equals ( vm . getId ( ) ) ) { VAR_2 = VAR_3 ; break ; } } VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . add ( vm ) ; } super . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; TYPE_3 VAR_3 = new TYPE_4 ( VAR_4 , VAR_2 , this , true ) ; TYPE_3 VAR_5 = VAR_3 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_4 ( METHOD_6 ( ) ) . METHOD_4 ( METHOD_7 ( ) ) ; VAR_3 . METHOD_8 ( VAR_1 ) ; VAR_3 . METHOD_9 ( ) ; } 
protected void METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VM vm ) { vm . METHOD_2 ( model . METHOD_3 ( ) . getSelectedItem ( ) . getId ( ) ) ; vm . METHOD_4 ( model . METHOD_5 ( ) . METHOD_6 ( ) ) ; vm . METHOD_7 ( model . METHOD_8 ( ) . getSelectedItem ( ) . getId ( ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.lang.String VAR_3 = ( VAR_1 == null ) ? STRING_1 : TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . get ( VAR_1 ) . getName ( ) ; VAR_2 . METHOD_4 ( STRING_2 , VAR_3 ) ; VAR_4 . log ( VAR_2 , VAR_5 ) ; } 
public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new java.lang.String [ ] { VAR_2 } ) ) ; VAR_3 = new TYPE_2 ( null ) ; org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_6 ( ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) . METHOD_3 ( ( ( ( ( ( getEntity ( ) ) != null ) && ( ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_1 ) ) || ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) ) && ( TYPE_1 . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) ) ) ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( ) ) ; VAR_1 . METHOD_4 ( ) . setId ( VAR_2 . toString ( ) ) ; VAR_1 . METHOD_5 ( TYPE_3 . toString ( ) ) ; VAR_1 . METHOD_6 ( new TYPE_4 ( ) ) ; VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) . add ( METHOD_9 ( STRING_2 ) ) ; return VAR_1 ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) { final java.util.List < TYPE_2 > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { VAR_1 . METHOD_5 ( VAR_2 . get ( 0 ) . METHOD_6 ( ) ) ; } else { VAR_1 . METHOD_5 ( TYPE_3 . METHOD_7 ( VAR_1 . METHOD_4 ( ) ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_4 ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; final org.ovirt.engine.core.common.businessentities.VM VAR_2 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; VAR_2 . setId ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . METHOD_4 ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 . VdcBllMessages VAR_1 , java.lang.String VAR_2 ) { java.util.List < java.lang.String > VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_2 < java.lang.String > ( ) ; VAR_4 . put ( VAR_1 , VAR_3 ) ; } VAR_3 . add ( VAR_2 ) ; } 
private void METHOD_1 ( ) { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getWindow ( ) ) ) ; if ( ! ( VAR_1 . validate ( ) ) ) { return ; } if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) || ( ( VAR_1 . METHOD_3 ( ) . getSelectedItem ( ) ) == ( VAR_2 ) ) ) { METHOD_4 ( VAR_1 ) ; } else { METHOD_5 ( VAR_1 , false ) ; } } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , boolean VAR_1 , java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 , iface ) ; TYPE_3 . METHOD_3 ( STRING_1 , VAR_3 ) ; TYPE_3 . assertEquals ( ( ( STRING_2 + ( VAR_1 ? STRING_3 : STRING_4 ) ) + STRING_5 ) , VAR_1 , VAR_3 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_2 ) ; org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_3 ) ; org.ovirt.engine.core.compat.Guid VAR_4 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_4 ) ; TYPE_1 VAR_5 = METHOD_3 ( VAR_3 , VAR_1 ) ; TYPE_1 VAR_6 = METHOD_3 ( VAR_4 , VAR_2 ) ; METHOD_4 ( VAR_5 , VAR_6 ) ; VAR_5 = METHOD_3 ( VAR_3 , VAR_1 ) ; VAR_6 = METHOD_3 ( VAR_3 , VAR_2 ) ; METHOD_4 ( VAR_5 , VAR_6 ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getStoragePoolId ( ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 , VAR_4 , false ) ) . thenReturn ( VAR_2 ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( java.lang.String value ) { TYPE_1 . ValidationResult VAR_1 = TYPE_2 . METHOD_1 ( value ) ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return VAR_1 ; } TYPE_1 . ValidationResult result = new TYPE_1 . ValidationResult ( ) ; if ( value != null ) { result . METHOD_3 ( METHOD_4 ( value ) ) ; result . METHOD_5 ( VAR_2 ) ; } return result ; } 
protected java.lang.Object [ ] METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return new java.lang.Object [ 0 ] ; } else { java.util.ArrayList < java.lang.Object > VAR_1 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StoragePool a : VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_3 ( METHOD_2 ( ) ) ) { VAR_1 . add ( a . getId ( ) ) ; } return VAR_1 . METHOD_4 ( new java.lang.Object [ ] { } ) ; } } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , boolean VAR_3 ) { boolean returnValue = true ; log . METHOD_2 ( STRING_1 ) ; if ( VAR_1 == null ) { returnValue = METHOD_3 ( VAR_2 , VAR_3 ) ; } else { returnValue = METHOD_4 ( VAR_1 , VAR_3 ) ; } log . METHOD_2 ( STRING_2 , returnValue ) ; return returnValue ; } 
protected void METHOD_1 ( ) { org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( ( TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) == null ) && ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . equals ( VAR_1 ) ) ) ) { TYPE_1 . getParameters ( ) . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) ; } return TYPE_1 . getParameters ( ) . METHOD_1 ( ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( false ) ; if ( ( TYPE_1 . getVm ( ) ) != null ) { TYPE_1 . getVm ( ) . METHOD_3 ( VAR_1 ) ; TYPE_1 . getVm ( ) . METHOD_4 ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ; } else { VAR_2 . METHOD_8 ( STRING_1 ) ; } TYPE_1 . METHOD_9 ( true ) ; } 
protected TYPE_1 . DiskImage METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 , org.ovirt.engine.core.compat.Guid VAR_4 ) { if ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) { return ( ( TYPE_1 . DiskImage ) ( METHOD_4 ( VAR_5 , new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) . getReturnValue ( ) ) ) ; } else { return TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } 
private static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.VDS host , java.lang.String VAR_1 ) { final TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( ( ( TYPE_3 . METHOD_3 ( host . METHOD_4 ( ) ) ) || ( VAR_2 . METHOD_5 ( iface . METHOD_6 ( ) , host . METHOD_7 ( ) ) ) ) || ( iface . getName ( ) . equals ( host . METHOD_8 ( ) ) ) ) { iface . METHOD_9 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 . METHOD_3 ( ) ) . getStoragePoolId ( ) ; TYPE_1 . METHOD_4 ( VAR_1 . getValue ( ) ) ; java.util.List < TYPE_2 > result = dao . METHOD_5 ( VAR_1 . getValue ( ) ) ; TYPE_1 . METHOD_4 ( result ) ; TYPE_1 . METHOD_6 ( result . isEmpty ( ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_1 = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_3 ) ) ; METHOD_6 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_4 ) ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = METHOD_2 ( ) ; return ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; } 
private TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS host ) { TYPE_2 validator = new TYPE_2 ( host , TYPE_3 . getParameters ( ) , METHOD_2 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; return validator . validate ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; command . METHOD_5 ( ) ; TYPE_1 . METHOD_6 ( command ) ; org.mockito.Mockito . METHOD_7 ( VAR_3 , org.mockito.Mockito . METHOD_8 ( 1 ) ) . METHOD_9 ( TYPE_2 . any ( VAR_4 . VM class ) ) ; } 
private void METHOD_1 ( final TYPE_1 model , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_3 . METHOD_2 ( model . METHOD_3 ( ) . getSelectedItem ( ) ) ; VAR_1 . METHOD_4 ( true ) ; if ( VAR_2 != null ) { TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . METHOD_5 ( TYPE_5 . METHOD_2 ( model . METHOD_6 ( ) . getSelectedItem ( ) ) ) ; VAR_3 . METHOD_7 ( VAR_2 ) ; VAR_1 . METHOD_8 ( VAR_3 ) ; } } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , VAR_3 ) ; for ( TYPE_1 disk : VAR_1 ) { if ( TYPE_3 . METHOD_4 ( disk . METHOD_5 ( ) ) ) { TYPE_3 VAR_4 = new TYPE_3 ( disk ) ; TYPE_2 . getVm ( ) . METHOD_6 ( VAR_4 ) ; break ; } } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) { return VAR_2 ; } else if ( ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) ) { return VAR_3 ; } else { return VAR_4 ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer . valueOf ( 0 ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 api ) { java.lang.String VAR_1 = METHOD_2 ( VAR_2 . String class , VAR_3 ) ; api . METHOD_3 ( new TYPE_2 ( ) ) ; api . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) ; api . METHOD_4 ( ) . METHOD_6 ( STRING_2 ) ; api . METHOD_4 ( ) . METHOD_7 ( VAR_1 ) ; api . METHOD_4 ( ) . METHOD_8 ( TYPE_3 . METHOD_9 ( METHOD_2 ( VAR_2 . String class , VAR_4 ) ) ) ; return api ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ; TYPE_2 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( STRING_3 ) ) ; TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_3 ( STRING_4 ) . length ) == 0 ) ) ; } 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 < java.lang.String , java.lang.Integer > VAR_2 : VAR_3 . METHOD_2 ( ) ) { if ( TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) . equals ( VAR_1 ) ) { return VAR_2 . getValue ( ) . toString ( ) ; } } VAR_4 . error ( STRING_1 , VAR_1 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_5 ( VAR_1 ) ; TYPE_2 . METHOD_6 ( command ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 . getId ( ) ) ; VAR_2 . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( false ) ; VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( TYPE_3 . getParameters ( ) ) ; return VAR_2 ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( VAR_3 ) ; VAR_1 . METHOD_6 ( STRING_1 ) ; VAR_1 . METHOD_7 ( VAR_4 ) ; return VAR_1 ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) return true ; if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) return false ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( TYPE_2 . equals ( id , VAR_2 . id ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic , java.util.List < TYPE_2 > VAR_2 ) { if ( nic == null ) { nic = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } TYPE_2 VAR_3 = METHOD_4 ( nic , VAR_2 ) ; VAR_1 . METHOD_5 ( METHOD_6 ( VAR_3 ) ) ; VAR_1 . METHOD_7 ( METHOD_8 ( nic . getName ( ) , VAR_3 , VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . setId ( TYPE_2 . any ( VAR_4 . Guid class ) ) ; } 
private java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = new java.util.HashMap < > ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( VAR_4 , ( TYPE_2 . isEmpty ( VAR_1 . METHOD_3 ( ) ) ? STRING_1 : VAR_1 . METHOD_3 ( ) ) ) ; VAR_2 . put ( VAR_5 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ; VAR_2 . put ( VAR_6 , STRING_2 ) ; return VAR_2 ; } 
private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_2 ( TYPE_3 . getVm ( ) . getId ( ) ) , TYPE_4 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ) ; TYPE_3 . METHOD_6 ( null ) ; TYPE_3 . METHOD_7 ( true ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { context . host = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_1 = new TYPE_1 ( ) { public void METHOD_2 ( ) { METHOD_3 ( ) ; } } ; VAR_1 . METHOD_4 ( VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getId ( ) , VAR_3 , VAR_4 , VAR_5 ) ; if ( VAR_2 ) { VAR_1 . METHOD_4 ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; } } 
public static boolean METHOD_1 ( org.ovirt.engine.core.compat . Version VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { if ( TYPE_1 . equals ( VAR_1 , VAR_2 ) ) { return false ; } if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) { return false ; } return ( VAR_2 . METHOD_2 ( VAR_3 ) ) && ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; java.util.List < TYPE_2 > VAR_2 = TYPE_3 . getInstance ( ) . METHOD_1 ( VAR_1 , VAR_3 . METHOD_2 ( ) ) ; model . METHOD_3 ( model , VAR_4 , VAR_2 , VAR_3 . METHOD_4 ( ) ) ; METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_2 ( VAR_1 [ 2 ] ) ) . when ( VAR_2 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_1 [ 2 ] ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_1 [ 2 ] ) ; VAR_4 . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_7 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( 1 ) ) . METHOD_9 ( TYPE_2 . any ( VAR_6 class ) ) ; } 
protected boolean METHOD_1 ( ) { java.util.Map < TYPE_1 . DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap < > ( ) ; for ( TYPE_2 parameters : getParameters ( ) . METHOD_2 ( ) ) { TYPE_1 . DiskImage diskImage = METHOD_3 ( parameters . METHOD_4 ( ) ) ; map . put ( diskImage , diskImage . METHOD_5 ( ) . get ( 0 ) ) ; } return validate ( TYPE_3 . METHOD_1 ( map , TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( ) ) ) ; } 
protected static int METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_3 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; int VAR_4 = 0 ; if ( VAR_3 != null ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_3 ) { if ( ( vm . METHOD_4 ( ) ) && ( TYPE_1 . METHOD_5 ( vm . getId ( ) , VAR_2 ) ) ) ++ VAR_4 ; } } return VAR_4 ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) ) ; METHOD_2 ( VAR_5 , VAR_6 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_7 [ 0 ] } , METHOD_4 ( ) , VAR_2 ) ; VAR_8 . METHOD_5 ( ) ; } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 , TYPE_2 status ) { METHOD_2 ( VAR_1 , VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( METHOD_3 ( VAR_5 , STRING_1 , VAR_6 , status ) ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; } 
public static TYPE_1 . DiskImage METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_1 . DiskImage image = new TYPE_1 . DiskImage ( ) ; image . METHOD_2 ( VAR_2 . METHOD_3 ( vm ) ) ; image . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; image . METHOD_6 ( VAR_4 ) ; image . METHOD_7 ( VAR_5 ) ; image . METHOD_8 ( VAR_3 ) ; return image ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( null , VAR_2 ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) ; TYPE_2 . METHOD_3 ( VAR_3 ) ; TYPE_2 . assertEquals ( true , ( ( VAR_3 . METHOD_4 ( ) ) > 0 ) ) ; TYPE_2 . assertEquals ( new java.lang.Integer ( INT_1 ) , VAR_3 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 . setId ( VAR_2 ) ; dao . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_3 = dao . METHOD_4 ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_5 ( VAR_1 . equals ( VAR_3 ) ) ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.VM > METHOD_1 ( final TYPE_1 VAR_1 , final org.ovirt.engine.core.compat.Guid VAR_2 ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = TYPE_2 . METHOD_3 ( VAR_3 , new TYPE_3 < org.ovirt.engine.core.common.businessentities.VM > ( ) { public boolean METHOD_4 ( org.ovirt.engine.core.common.businessentities.VM VAR_4 ) { return ( ( VAR_4 . METHOD_5 ( ) ) == ( VAR_5 ) ) && ( ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) == false ) ; } } ) ; return vms ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( false ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) ; } 
private TYPE_1 . ValidationResult METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) ) ; TYPE_1 . ValidationResult result ; result = VAR_1 . METHOD_3 ( ) ; if ( ! ( result . METHOD_4 ( ) ) ) { return result ; } result = METHOD_5 ( ) ; if ( ! ( result . METHOD_4 ( ) ) ) { return result ; } result = VAR_1 . METHOD_6 ( VAR_2 ) ; if ( ! ( result . METHOD_4 ( ) ) ) { return result ; } return VAR_3 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ( ( VAR_3 ) + STRING_1 ) ) ) ; TYPE_2 . METHOD_6 ( VAR_1 . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , true ) ; org.mockito.Mockito.when ( cluster . METHOD_3 ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( true ) ; validator = new TYPE_1 ( VAR_3 , VAR_4 , cluster , VAR_5 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_1 ( ) , TYPE_3 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( TYPE_1 . getSucceeded ( ) ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; } else if ( ! ( VAR_2 . isEmpty ( ) ) ) { TYPE_2 . log ( this , METHOD_7 ( VAR_2 ) ) ; } } METHOD_8 ( TYPE_1 . getVm ( ) . getId ( ) ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = METHOD_2 ( ) ; return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; } 
protected void METHOD_1 ( ) { if ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) { METHOD_3 ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; METHOD_5 ( ) . setIsChangable ( false ) ; METHOD_6 ( ) . setIsChangable ( false ) ; METHOD_7 ( ) . setIsChangable ( false ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . toString ( ) ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; TYPE_2 . assertEquals ( VAR_4 , VAR_1 . METHOD_4 ( ) ) ; TYPE_2 . assertEquals ( VAR_5 , VAR_1 . METHOD_5 ( ) ) ; TYPE_2 . assertEquals ( VAR_6 , VAR_1 . getStatus ( ) ) ; TYPE_2 . assertEquals ( VAR_7 , VAR_1 . METHOD_6 ( ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain . setId ( VAR_1 ) ; storageDomain . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) ; } 
public void METHOD_1 ( TYPE_1 < java.lang.Boolean > event ) { METHOD_2 ( ) . METHOD_3 ( event . getValue ( ) ) ; METHOD_2 ( ) . METHOD_4 ( ( ! ( event . getValue ( ) ) ) ) ; METHOD_2 ( ) . METHOD_5 ( ( ( VAR_1 ) && ( ! ( event . getValue ( ) ) ) ) ) ; } 
public void METHOD_1 ( final TYPE_1 object ) { VAR_1 . METHOD_1 ( object ) ; object . METHOD_2 ( ) . METHOD_3 ( true ) ; object . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) { public void METHOD_6 ( TYPE_3 VAR_2 , java.lang.Object sender , TYPE_4 args ) { METHOD_7 ( object ) ; } } ) ; } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.ui.frontend.AsyncQuery VAR_2 ) { VAR_2 . converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < TYPE_1 < java.lang.String > > ( ) { public TYPE_1 < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery VAR_3 ) { TYPE_1 < java.lang.String > VAR_4 = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ; VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) ; return VAR_4 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_5 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , VAR_2 ) ; } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( source ) ) ) { if ( ( template . METHOD_1 ( ) ) == ( VAR_1 ) ) { list . add ( template ) ; } } TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; } return list ; } 
TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { return new TYPE_1 ( METHOD_2 ( ) . getEntity ( ) , METHOD_3 ( ) . getEntity ( ) , METHOD_4 ( ) . getEntity ( ) , METHOD_5 ( ) . getEntity ( ) , VAR_1 , ( ( METHOD_6 ( ) ) != null ? METHOD_6 ( ) . getSelectedItem ( ) . getId ( ) : null ) ) ; } 
protected void METHOD_1 ( ) { java.lang.String VAR_1 = null ; try { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_3 ) { log . error ( STRING_1 , VAR_3 . METHOD_5 ( ) ) ; log . METHOD_6 ( STRING_2 , VAR_3 ) ; } TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ( VAR_1 != null ) ) ; TYPE_2 . METHOD_7 ( ) . METHOD_9 ( true ) ; } 
private void METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_2 , TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . METHOD_6 ( ) ) ; if ( VAR_1 != null ) { TYPE_1 . getVm ( ) . METHOD_7 ( ) . put ( VAR_3 . getId ( ) , VAR_1 ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 response ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 ) ; TYPE_4 returnValue = VAR_2 . METHOD_3 ( VAR_5 , new TYPE_5 ( VAR_1 ) ) ; if ( returnValue . getSucceeded ( ) ) { response . METHOD_4 ( VAR_6 ) ; VAR_7 . METHOD_5 ( STRING_1 , VAR_1 ) ; } else { response . METHOD_4 ( VAR_8 ) ; VAR_7 . METHOD_5 ( STRING_2 , VAR_1 ) ; } } 
public boolean METHOD_1 ( TYPE_1 storageDomain ) { TYPE_2 VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( storageDomain . METHOD_3 ( ) ) ; if ( VAR_1 != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } return true ; } 
public void METHOD_1 ( ) { TYPE_1 . AddVmCommand < TYPE_2 > cmd = METHOD_2 ( 0 , 0 ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( cmd ) . getVdsGroup ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( VAR_2 . Integer class ) , TYPE_3 . any ( VAR_3 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) ; TYPE_5 . METHOD_6 ( STRING_2 , cmd . METHOD_7 ( ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ; model . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; model . METHOD_3 ( ) ; } 
public void METHOD_1 ( TYPE_1 context , org.ovirt.engine.core.common.businessentities.VmTemplate template , TYPE_2 VAR_1 ) { VAR_1 . append ( VAR_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 , STRING_1 , context ) , template . METHOD_4 ( ) ) ) ; java.lang.String VAR_4 = template . METHOD_5 ( ) ; if ( ( VAR_4 != null ) && ( ! ( VAR_4 . isEmpty ( ) ) ) ) { VAR_1 . append ( VAR_2 . METHOD_6 ( VAR_4 ) ) ; } } 
public void METHOD_1 ( final TYPE_1 client ) { client . METHOD_2 ( new TYPE_2 ( INT_1 , 0 , INT_2 ) ) ; client . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( byte [ ] VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( client , VAR_1 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; } } ) ; } 
public static TYPE_1 < java.lang.Object [ ] > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false } , new java.lang.Object [ ] { org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true } } ) ; } 
public void METHOD_1 ( ) { TYPE_1 result = VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; TYPE_2 . METHOD_3 ( result . get ( STRING_2 ) ) ; TYPE_2 . assertEquals ( result . get ( STRING_3 ) . METHOD_4 ( ) , STRING_4 ) ; TYPE_2 . assertEquals ( result . get ( STRING_5 ) . METHOD_4 ( ) , STRING_6 ) ; TYPE_2 . assertEquals ( result . get ( STRING_7 ) . METHOD_4 ( ) , STRING_1 ) ; } 
public final void METHOD_1 ( TYPE_1 VAR_1 ) { try ( TYPE_2 VAR_2 = METHOD_2 ( ) ) { METHOD_3 ( ) ; if ( ! ( VAR_3 . METHOD_4 ( VAR_1 . getId ( ) ) ) ) { throw new TYPE_3 ( VAR_4 ) ; } METHOD_5 ( VAR_1 . getId ( ) ) ; METHOD_6 ( VAR_1 ) ; } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 } , METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.Boolean VAR_2 ) { return METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String METHOD_3 ( ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_1 . getId ( ) . toString ( ) ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; return VAR_4 . METHOD_1 ( VAR_3 ) ; } } ) ; } 
private void METHOD_1 ( ) { final TYPE_1 VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; for ( TYPE_2 VAR_2 : VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; } final TYPE_3 VAR_3 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate VAR_4 : VAR_3 . METHOD_3 ( ) ) { METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; } } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 ) { try { if ( VAR_1 != null ) { TYPE_2 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; } } } catch ( java.lang.Exception e ) { log . error ( STRING_1 , VAR_1 , VAR_2 , e . METHOD_5 ( ) ) ; log . METHOD_6 ( STRING_2 , e ) ; } } 
protected boolean METHOD_1 ( ) { if ( ! ( super . METHOD_1 ( ) ) ) { return false ; } VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 ) == null ) { addCanDoActionMessage ( java.lang.String . METHOD_3 ( STRING_1 , TYPE_1 . getVdsGroup ( ) . METHOD_4 ( ) ) ) ; addCanDoActionMessage ( VAR_2 ) ; return false ; } return true ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) , METHOD_3 ( ) ) ; command = new TYPE_2 < TYPE_1 > ( VAR_1 ) { public TYPE_3 METHOD_4 ( ) { return VAR_2 ; } protected TYPE_4 METHOD_5 ( ) { return VAR_3 ; } protected TYPE_5 METHOD_6 ( ) { return VAR_4 ; } } ; } 
private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; int VAR_2 = ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) ) * INT_1 ; while ( VAR_1 . METHOD_5 ( true ) ) { if ( ( VAR_1 . METHOD_6 ( ) . getStatus ( ) ) == ( VAR_5 ) ) { return true ; } TYPE_3 . METHOD_7 ( VAR_2 ) ; } return false ; } 
public void METHOD_1 ( ) { TYPE_1 . VM entity = new TYPE_1 . VM ( ) ; entity . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = TYPE_2 . METHOD_3 ( ) ; entity . METHOD_4 ( VAR_2 ) ; TYPE_1 . VM model = TYPE_3 . map ( entity , null ) ; assertEquals ( VAR_2 . toString ( ) , model . METHOD_5 ( ) . getId ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( nic ) ; nic . METHOD_4 ( STRING_2 ) ; TYPE_1 VAR_1 = METHOD_5 ( METHOD_6 ( nic ) ) ; METHOD_7 ( VAR_1 , VAR_2 , nic . METHOD_8 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 VAR_4 = TYPE_5 . map ( VAR_3 , null ) ; assertEquals ( VAR_4 . METHOD_3 ( ) , VAR_2 . value ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = METHOD_1 ( hosts ) ; VAR_2 . setItems ( METHOD_2 ( VAR_1 ) ) ; VAR_3 . setItems ( METHOD_2 ( VAR_1 ) ) ; VAR_4 . setItems ( METHOD_2 ( VAR_1 ) ) ; this . hosts . setItems ( VAR_1 ) ; METHOD_3 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_3 = null ; if ( ( VAR_2 != null ) && ( ! ( TYPE_3 . equals ( VAR_2 ) ) ) ) { TYPE_1 VAR_4 = TYPE_4 . METHOD_3 ( ) . get ( VAR_2 ) ; VAR_3 = TYPE_5 . METHOD_4 ( VAR_4 , VAR_1 . METHOD_5 ( ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { this . VAR_1 = VAR_1 ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 VAR_4 , java.lang.Object sender , TYPE_4 args ) { METHOD_5 ( ) ; } } ; METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_3 ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 ) { TYPE_3 VAR_4 = VAR_1 . METHOD_2 ( ) . get ( VAR_3 ) ; if ( ( ( VAR_3 != null ) && ( VAR_4 != null ) ) && ( ( VAR_4 . METHOD_3 ( ) ) != null ) ) { METHOD_4 ( VAR_4 ) ; } } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { super . METHOD_1 ( VAR_1 , sender , args ) ; if ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( sender == ( METHOD_3 ( ) ) ) ) { METHOD_4 ( ) . METHOD_5 ( this , VAR_3 ) ; } else if ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( sender == ( METHOD_6 ( ) ) ) ) { METHOD_7 ( args ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.common.businessentities . Network VAR_2 , org.ovirt.engine.core.common.businessentities . Network VAR_3 ) { METHOD_2 ( VAR_1 , VAR_4 , java.lang.String . METHOD_3 ( STRING_1 , VAR_2 . getName ( ) , ( ( VAR_2 . METHOD_4 ( ) ) == 0 ? STRING_2 : VAR_2 . METHOD_4 ( ) ) , VAR_3 . getName ( ) , VAR_3 . METHOD_4 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( new TYPE_2 . StorageDomain ( ) ) ; VAR_1 . METHOD_3 ( ) . setId ( VAR_3 ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_1 ) ; assertEquals ( VAR_4 , VAR_1 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( result ) ) ; TYPE_2 VAR_3 = METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_3 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 parameters = METHOD_2 ( ) ; parameters . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; org.ovirt.engine.core.common.businessentities.DiskImage VAR_2 = METHOD_5 ( ) ; VAR_2 . METHOD_6 ( org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_4 ) ) . thenReturn ( VAR_2 ) ; METHOD_8 ( parameters ) ; METHOD_9 ( ) ; TYPE_2 . METHOD_10 ( command . METHOD_11 ( ) ) ; command . METHOD_12 ( ) ; TYPE_2 . METHOD_10 ( ( ( VAR_2 . METHOD_13 ( ) ) == null ) ) ; } 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , java.util.ArrayList < TYPE_2 . VdcActionParametersBase > VAR_2 , boolean VAR_3 , boolean VAR_4 ) { VAR_5 . METHOD_2 ( ( ( STRING_1 + ( VAR_2 . size ( ) ) ) + STRING_2 ) ) ; for ( TYPE_2 . VdcActionParametersBase params : VAR_2 ) { params . METHOD_3 ( METHOD_4 ( ) . getId ( ) ) ; } java.util.ArrayList < TYPE_1 > VAR_6 = METHOD_5 ( ) . METHOD_6 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; return VAR_6 ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 = STRING_1 ; java.util.List < java.lang.String > VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_3 . METHOD_3 ( STRING_2 , ( ( VAR_4 . size ( ) ) == 1 ) ) ; } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; return TYPE_1 . METHOD_1 ( list , VAR_1 , VAR_2 ) ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 . Network ) ) ; } } 
private java.util.Map METHOD_1 ( TYPE_1 . VM vm ) { java.util.Map VAR_1 = map ( ) ; VAR_1 . put ( STRING_1 , METHOD_2 ( ) ) ; VAR_1 . put ( STRING_2 , ( STRING_3 + ( METHOD_3 ( vm , STRING_2 , 2 ) ) ) ) ; VAR_1 . put ( STRING_4 , ( STRING_3 + ( METHOD_3 ( vm , STRING_4 , 2 ) ) ) ) ; VAR_1 . put ( STRING_5 , METHOD_3 ( vm , STRING_5 , INT_1 ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( null ) ; TYPE_1 parameters = METHOD_4 ( VAR_1 , VAR_3 ) ; java.lang.String VAR_4 = ( VAR_1 . getName ( ) ) + STRING_1 ; parameters . METHOD_5 ( ) . add ( METHOD_6 ( VAR_4 , INT_1 , STRING_2 ) ) ; METHOD_7 ( VAR_1 , VAR_3 ) ; TYPE_2 VAR_5 = METHOD_8 ( parameters ) ; METHOD_9 ( VAR_5 , VAR_6 , VAR_4 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public java.util.List < java.lang.String > METHOD_1 ( java.util.Map < java.lang.String , java.util.List < TYPE_1 > > VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 < java.lang.String , java.util.List < TYPE_1 > > VAR_3 : VAR_1 . METHOD_2 ( ) ) { java.lang.String VAR_4 = VAR_3 . METHOD_3 ( ) ; java.util.List < TYPE_1 > VAR_5 = VAR_3 . getValue ( ) ; if ( ! ( METHOD_4 ( VAR_5 ) ) ) { VAR_2 . add ( VAR_4 ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; final org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_2 . setId ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . getStoragePoolId ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( returnValue ) ) ; final TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; model . setItems ( list ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_6 ( VAR_4 , java.lang.Boolean . FALSE ) ; VAR_3 . METHOD_6 ( VAR_5 , VAR_6 , java.lang.Boolean . TRUE ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( VAR_7 ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; } 
private void METHOD_1 ( ) { if ( ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) || ( ( VAR_1 ) < ( ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) ) - 1 ) ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ) && ( METHOD_4 ( ) . METHOD_6 ( ) ) ) { ( VAR_1 ) ++ ; TYPE_1 . METHOD_7 ( ) ; } else { TYPE_1 . METHOD_8 ( ) . METHOD_9 ( false ) ; } } 
public TYPE_1 list ( ) { java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.lang.String > > > VAR_1 = getEntity ( VAR_2 . HashMap class , VAR_3 , new TYPE_2 ( METHOD_1 ( VAR_4 ) ) , null ) ; return METHOD_2 ( VAR_1 ) ; } 
public void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_3 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( ) ; } } ) ) ; } 
private java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > VAR_2 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage VAR_3 : ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( getEntity ( VAR_4 . List class , VAR_5 , new TYPE_1 ( VAR_1 ) , STRING_1 ) ) ) ) { VAR_2 . put ( VAR_3 . getId ( ) , VAR_3 ) ; } return VAR_2 ; } 
public static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { try { TYPE_1 . METHOD_2 ( diskImage . METHOD_3 ( ) , diskImage . getId ( ) ) ; TYPE_1 . METHOD_4 ( diskImage ) ; } catch ( TYPE_2 VAR_1 ) { VAR_2 . error ( STRING_1 , VAR_1 ) ; throw new TYPE_3 ( VAR_3 , VAR_1 ) ; } } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( true ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , null ) ; final org.ovirt.engine.core.compat.Guid VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_3 ) ; final org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_5 , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 . assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 , true ) ; VAR_1 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_2 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
static TYPE_1 . Disk getModel ( int VAR_1 ) { TYPE_1 . Disk model = new TYPE_1 . Disk ( ) ; model . METHOD_1 ( TYPE_2 . toString ( ) ) ; model . METHOD_2 ( TYPE_3 . toString ( ) ) ; model . METHOD_3 ( true ) ; model . METHOD_4 ( false ) ; model . METHOD_5 ( false ) ; model . METHOD_6 ( false ) ; model . METHOD_7 ( true ) ; return model ; } 
private void METHOD_1 ( ) { if ( ( getVm ( ) . METHOD_2 ( ) ) != null ) { for ( TYPE_1 VAR_1 : getVm ( ) . METHOD_2 ( ) ) { if ( METHOD_3 ( ) . METHOD_4 ( getVm ( ) . getId ( ) , VAR_1 . getId ( ) ) ) { METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ; } else { METHOD_3 ( ) . METHOD_6 ( VAR_1 ) ; } } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; parameters . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( command , VAR_5 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( false ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) ; VAR_1 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_6 } , METHOD_3 ( ) , VAR_2 ) ; VAR_7 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( command . validate ( ) ) ; TYPE_2 . METHOD_5 ( command . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) ; org.mockito.Mockito . METHOD_8 ( VAR_2 ) . METHOD_3 ( ) ; org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( TYPE_4 . METHOD_11 ( ) ) ; } 
public void METHOD_1 ( ) { final int VAR_1 = INT_1 ; final int VAR_2 = INT_2 ; org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; METHOD_4 ( ) ; TYPE_1 VAR_5 = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_5 , true ) ; TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) ; } 
protected boolean validate ( ) { METHOD_1 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; METHOD_3 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; return ( ( METHOD_1 ( ) . METHOD_6 ( ) ) && ( METHOD_3 ( ) . METHOD_6 ( ) ) ) && ( METHOD_4 ( ) . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_2 < java.lang.Integer > ( new TYPE_3 < java.lang.Integer > ( ) , new TYPE_4 < java.lang.Integer > ( ) { public java.lang.Integer METHOD_2 ( TYPE_5 VAR_3 ) throws TYPE_6 { return VAR_1 . METHOD_3 ( ) . getValue ( ) ; } } ) ; } 
private void METHOD_1 ( final org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( false ) ; VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . getStoragePoolId ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_3 . getInstance ( ) . METHOD_7 ( VAR_5 , VAR_3 , METHOD_8 ( ) ) ; } 
protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( ) ) ; org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( STRING_2 , TYPE_1 . METHOD_3 ( ) ) ; VAR_2 . METHOD_5 ( vds , false ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > result = dao . METHOD_2 ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; for ( TYPE_1 VAR_2 : result ) { TYPE_2 . assertEquals ( VAR_1 . getId ( ) , VAR_2 . METHOD_5 ( ) ) ; } } 
protected boolean METHOD_1 ( ) { if ( ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . getId ( ) ) ) ) ) { return false ; } return true ; } 
public static java.lang.Boolean METHOD_1 ( java.lang.Integer VAR_1 , org.ovirt.engine.core.compat . Version version ) { TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > VAR_2 = new TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > ( VAR_1 , version ) ; if ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) { return TYPE_2 . METHOD_2 ( ) . get ( VAR_2 ) ; } return false ; } 
public TYPE_1 < org.ovirt.engine.core.compat.Guid , TYPE_2 > METHOD_1 ( ) throws java.lang.Exception { TYPE_2 returnValue ; returnValue = METHOD_2 ( VAR_1 , new TYPE_3 ( VAR_2 , entity . METHOD_3 ( ) , entity . METHOD_4 ( ) , entity . getName ( ) , VAR_3 , VAR_4 ) ) ; return new TYPE_1 < org.ovirt.engine.core.compat.Guid , TYPE_2 > ( VAR_2 , returnValue ) ; } 
public java.util.HashMap < java.lang.Integer , TYPE_1 > METHOD_1 ( ) { java.util.HashMap < java.lang.Integer , TYPE_1 > VAR_1 = new java.util.HashMap < > ( ) ; for ( int VAR_2 : METHOD_2 ( ) ) { java.lang.String VAR_3 = METHOD_3 ( VAR_4 . get ( VAR_2 ) , STRING_1 , null ) ; if ( VAR_3 != null ) { VAR_1 . put ( VAR_2 , TYPE_1 . valueOf ( VAR_3 ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( domain ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) ; TYPE_3 . METHOD_7 ( cmd . METHOD_8 ( ) ) ; TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_9 ( ) . isEmpty ( ) ) ; } 
public static < TYPE_1 extends TYPE_2 < ? extends TYPE_3 > > TYPE_4 < TYPE_5 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_4 < TYPE_5 > result = TYPE_6 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { result . METHOD_4 ( TYPE_5 . from ( VAR_2 ) ) ; } return result ; } 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( VAR_1 != null ) & ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( VAR_1 . METHOD_3 ( STRING_2 ) ) ) { return VAR_1 . METHOD_4 ( 1 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { java.lang.Integer VAR_1 = new java.lang.Integer ( INT_1 ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 , new java.lang.Integer ( INT_2 ) ) ) ; TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_1 , new java.lang.Integer ( INT_1 ) ) ) ; TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( null , null ) ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 , null ) ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( null , VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 id ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , new TYPE_4 ( METHOD_3 ( ) , id ) ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_1 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_4 ) ; } 
private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { if ( ( ( java.lang.Boolean ) ( returnValue ) ) ) { METHOD_1 ( VAR_1 , VAR_2 ) ; } else { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_3 . METHOD_5 ( ) ) ; METHOD_3 ( ) . METHOD_6 ( false ) ; } } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( domain , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_3 ( VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 command ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return ( ( ! ( METHOD_2 ( vds ) ) ) && ( ! ( vds . getId ( ) . equals ( VAR_1 . getId ( ) ) ) ) ) && ( vds . METHOD_3 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ; } 
private boolean METHOD_1 ( java.util.List < java.lang.String > VAR_1 , boolean VAR_2 ) { boolean returnValue = false ; if ( ( METHOD_2 ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_3 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( METHOD_2 ( ) ) ; VAR_4 . METHOD_4 ( STRING_1 , METHOD_2 ( ) , VAR_3 . getName ( ) , VAR_3 . METHOD_5 ( ) ) ; returnValue = METHOD_6 ( VAR_1 , VAR_2 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( TYPE_1 . METHOD_7 ( VAR_3 ) ) ) ; } return returnValue ; } 
private java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_2 = null ; if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; for ( TYPE_2 . Disk disk : VAR_1 . METHOD_3 ( ) ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_3 . map ( disk , null ) ) ) ; VAR_2 . add ( diskImage ) ; } } return VAR_2 ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = METHOD_2 ( ) ; if ( ( diskImage != null ) && ( ( diskImage . METHOD_3 ( ) ) != VAR_1 ) ) { diskImage . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( diskImage . METHOD_5 ( ) . getId ( ) , VAR_1 ) ; } } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; VAR_2 . METHOD_2 ( ( ( ( ( java.util.List ) ( VAR_2 . METHOD_3 ( ) ) ) . size ( ) ) == 0 ) ) ; } 
public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = VAR_1 . getName ( ) ; if ( VAR_3 == STRING_1 ) { return VAR_4 . get ( ) ; } else if ( VAR_3 == STRING_2 ) { return VAR_5 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } } 
public TYPE_1 METHOD_1 ( final TYPE_2 rs , final int VAR_1 ) throws TYPE_3 { TYPE_1 entity = new TYPE_1 ( ) ; entity . setId ( METHOD_2 ( rs , STRING_1 ) ) ; entity . METHOD_3 ( rs.getString ( STRING_2 ) ) ; entity . METHOD_4 ( rs . METHOD_5 ( STRING_3 ) ) ; entity . METHOD_6 ( rs.getString ( STRING_4 ) ) ; entity . METHOD_7 ( rs.getString ( STRING_5 ) ) ; entity . METHOD_8 ( new TYPE_4 ( rs . METHOD_9 ( STRING_6 ) ) ) ; return entity ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; } 
void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; int VAR_2 = 0 ; for ( final TYPE_2 VAR_3 : model . METHOD_3 ( ) ) { TYPE_3 VAR_4 = new TYPE_3 ( constants ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_4 . METHOD_6 ( model . METHOD_7 ( ) ) ; VAR_4 . METHOD_8 ( TYPE_4 . METHOD_9 ( VAR_6 , ( STRING_1 + ( VAR_2 ++ ) ) ) ) ; VAR_1 . add ( VAR_4 ) ; } } 
private TYPE_1 METHOD_1 ( java.lang.String url , java.lang.Integer VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( url , VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; VAR_3 . METHOD_5 ( new TYPE_4 ( new TYPE_5 ( METHOD_6 ( url ) , METHOD_7 ( url , VAR_1 ) ) ) , VAR_6 ) ; new TYPE_6 ( VAR_3 , VAR_7 , VAR_8 ) . METHOD_8 ( ) ; return VAR_3 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( result ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { METHOD_1 ( ) . setEntity ( result ) ; METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ; } else { METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_1 VAR_1 = new TYPE_1 ( ( ( java.lang.String ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; METHOD_1 ( VAR_1 , METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . toString ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( result ) ) ; VAR_2 . METHOD_1 ( ) . setItems ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; VAR_2 . METHOD_1 ( ) . setSelectedItem ( VAR_1 ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , TYPE_2 ) ) { METHOD_6 ( ) ; } } 
private static void METHOD_1 ( TYPE_1 . Disk disk ) throws java.lang.Exception { TYPE_1 . Disk VAR_1 = new TYPE_1 . DiskImage ( ) ; TYPE_2 . getInstance ( ) . METHOD_2 ( TYPE_2 . getInstance ( ) . METHOD_3 ( disk ) , VAR_1 ) ; TYPE_3 . assertEquals ( disk , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 object , TYPE_3 VAR_1 ) { if ( VAR_2 . METHOD_2 ( object ) ) { VAR_1 . METHOD_3 ( STRING_1 ) ; TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_3 ) . METHOD_6 ( ) ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; } super . METHOD_1 ( context , object , VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 validator = METHOD_2 ( METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( validator . METHOD_5 ( METHOD_6 ( ) ) . METHOD_7 ( ) ) ; org.mockito.Mockito . METHOD_8 ( VAR_1 ) . METHOD_9 ( TYPE_3 . METHOD_10 ( ) ) ; org.mockito.Mockito . METHOD_8 ( VAR_1 , org.mockito.Mockito . METHOD_11 ( ) ) . METHOD_12 ( TYPE_3 . METHOD_10 ( ) ) ; org.mockito.Mockito . METHOD_8 ( VAR_1 , org.mockito.Mockito . METHOD_11 ( ) ) . METHOD_13 ( TYPE_3 . METHOD_10 ( ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; VAR_1 . METHOD_4 ( INT_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_5 ( ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( VAR_5 , VAR_6 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_5 ) ) . thenReturn ( VAR_1 ) ; } 
protected boolean METHOD_1 ( ) { boolean returnValue = ( ( ( ( ( TYPE_1 . METHOD_2 ( ) ) && ( METHOD_3 ( VAR_1 , VAR_2 ) ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( ( ( TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ) == ( VAR_3 ) ) || ( TYPE_1 . METHOD_8 ( ) ) ) ) && ( ( TYPE_1 . METHOD_9 ( ) ) != null ) ; return returnValue ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = dao . get ( VAR_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_1 ) ; VAR_6 = new TYPE_2 ( ) ; VAR_6 . METHOD_6 ( VAR_7 ) ; } 
private void METHOD_1 ( ) { if ( ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) || ( ( VAR_1 ) < ( ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) ) - 1 ) ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ) && ( METHOD_4 ( ) . METHOD_1 ( ) ) ) { ( VAR_1 ) ++ ; TYPE_1 . METHOD_6 ( ) ; } else { TYPE_1 . METHOD_7 ( ) . METHOD_8 ( false ) ; } } 
private void METHOD_1 ( java.util.List VAR_1 ) { if ( ( VAR_1 == null ) || ( ( VAR_1 . size ( ) ) != 1 ) ) { METHOD_2 ( false ) ; return ; } org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . getSelectedItem ( ) ; if ( ( ( vm == null ) || ( ! ( vm . METHOD_3 ( ) ) ) ) || ( ( vm . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) < 0 ) ) { METHOD_2 ( false ) ; } else { METHOD_2 ( true ) ; } } 
protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 . METHOD_12 ( VAR_1 ) ; } if ( VAR_3 ) { VAR_2 . METHOD_13 ( VAR_4 . METHOD_14 ( ) ) ; } if ( VAR_5 ) { VAR_2 . METHOD_15 ( VAR_4 . METHOD_16 ( ) ) ; } } 
public void METHOD_1 ( ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : TYPE_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , iface ) ; } VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) . get ( 0 ) . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( ( ( VAR_3 . METHOD_6 ( ) . size ( ) ) == 1 ) ) ; } 
public void METHOD_1 ( ) { try { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( true ) ; } } catch ( TYPE_1 VAR_2 ) { log . error ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ; log . METHOD_4 ( STRING_2 , VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; METHOD_5 ( 0 , 1 ) ; METHOD_6 ( ) ; METHOD_7 ( 1 ) ; METHOD_8 ( ) ; VAR_1 . METHOD_9 ( ) ; TYPE_1 response = resource . get ( ) ; METHOD_10 ( response , 0 ) ; METHOD_11 ( response ) ; } 
public static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.util.List < java.lang.String > VAR_4 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_5 : VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { java.lang.String VAR_6 = VAR_5 . getString ( null , VAR_2 ) ; if ( VAR_6 == null ) { VAR_6 = VAR_3 ; } VAR_4 . add ( VAR_6 ) ; } return VAR_4 ; } 
public boolean equals ( java.lang.Object obj ) { return ( ( ( ( obj != null ) && ( obj instanceof TYPE_1 ) ) && ( TYPE_2 . METHOD_1 ( getId ( ) , ( ( TYPE_1 ) ( obj ) ) . getId ( ) ) ) ) && ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , ( ( TYPE_1 ) ( obj ) ) . METHOD_2 ( ) ) ) ) && ( TYPE_2 . METHOD_1 ( getValue ( ) , ( ( TYPE_1 ) ( obj ) ) . getValue ( ) ) ) ; } 
public boolean validate ( ) { METHOD_1 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( INT_1 ) , new TYPE_4 ( ) } ) ; METHOD_3 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( INT_1 ) } ) ; return ( METHOD_1 ( ) . METHOD_4 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ; } 
protected void METHOD_1 ( int VAR_1 , boolean VAR_2 ) throws java.lang.Exception { while ( ( VAR_1 -- ) > 0 ) { METHOD_1 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , ( VAR_2 ? null : getEntity ( 0 ) ) ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) { TYPE_1 pool = VAR_1 . get ( 0 ) ; TYPE_3 . METHOD_1 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } } 
private void METHOD_1 ( ) { VAR_1 . setItems ( TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_3 < TYPE_4 > ( ) { public void METHOD_6 ( TYPE_5 < ? extends TYPE_4 > VAR_2 , java.lang.Object sender , TYPE_4 args ) { METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; } } ) ; VAR_1 . setSelectedItem ( VAR_3 ) ; METHOD_7 ( ) ; } 
public void METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < > ( ) ; java.util.Map < java.lang.String , java.lang.Object > disk = new java.util.HashMap < > ( ) ; VAR_1 . put ( STRING_1 , disk ) ; VAR_1 . put ( STRING_2 , disk ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_2 , true ) ; } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > VAR_2 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; this . VAR_3 . METHOD_1 ( VAR_2 ) ; final java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > result = this . METHOD_2 ( VAR_4 ) ; VAR_5 . onSuccess ( result ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( null , null ) ; final org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ; } 
protected boolean METHOD_1 ( ) { boolean result = true ; if ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . length ( ) ) > ( METHOD_4 ( ) ) ) { result = false ; addCanDoActionMessage ( VAR_1 ) ; } return result ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { TYPE_2 . Disk disk = ( ( TYPE_3 ) ( object . getEntity ( ) ) ) . METHOD_2 ( ) ; if ( disk . METHOD_3 ( ) ) { return TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } return null ; } 
public void METHOD_1 ( ) { if ( TYPE_1 . getInstance ( ) . METHOD_2 ( ) ) { java.util.List < TYPE_2 < org.ovirt.engine.core.common.businessentities.VDSGroup > > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) { getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.VDSGroup > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = METHOD_2 ( null , null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_2 = METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_5 ( VAR_6 , INT_1 ) ; org.mockito.Mockito.when ( VAR_7 . METHOD_6 ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; } 
private void METHOD_1 ( ) { getParameters ( ) . METHOD_2 ( ) . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; for ( TYPE_1 iface : getParameters ( ) . METHOD_2 ( ) . METHOD_4 ( ) ) { iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; iface . METHOD_5 ( TYPE_2 . getInstance ( ) . METHOD_6 ( ) ) ; } } 
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , ( ( VAR_1 + STRING_1 ) + VAR_2 ) , false , null , VAR_2 , VAR_3 , true , null , false , null ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; } } ; TYPE_1 tempVar = new TYPE_1 ( VAR_1 ) ; tempVar . METHOD_3 ( version ) ; TYPE_2 . METHOD_4 ( tempVar , aQuery ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_1 . METHOD_1 ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) ; TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) ; TYPE_4 . getInstance ( ) . METHOD_3 ( VAR_2 , VAR_3 . getId ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . METHOD_4 ( STRING_1 , STRING_2 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_5 ( STRING_3 ) ; VAR_3 . METHOD_6 ( STRING_4 ) ; VAR_3 . METHOD_7 ( STRING_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . Collections < org.ovirt.engine.core.common.businessentities.network.Network > METHOD_3 ( ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( new TYPE_3 ( VAR_2 . Collections < org.ovirt.engine.core.common.businessentities.network.Network > METHOD_3 ( ) ) ) ; TYPE_4 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_1 ) , TYPE_5 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 2 ] } ) ) ; TYPE_1 action = new TYPE_1 ( ) ; action . METHOD_5 ( VAR_3 [ 2 ] ) ; METHOD_6 ( resource . METHOD_7 ( action ) ) ; } 
protected TYPE_1 [ ] METHOD_1 ( java.lang.Object object ) { final int VAR_1 = METHOD_2 ( object ) ; return new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( VAR_1 ) , new TYPE_4 ( ) { protected java.lang.String METHOD_3 ( ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; } } , new TYPE_5 ( VAR_2 ) } ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_2 class ) , TYPE_1 . any ( VAR_3 . ArrayList class ) ) ; VAR_4 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; TYPE_2 . METHOD_7 ( STRING_1 , command . validate ( ) ) ; } 
protected java.lang.String METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( id ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; VAR_1 . METHOD_3 ( ) . setId ( VAR_2 ) ; return TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_1 ) . METHOD_6 ( ) ; } 
private void METHOD_1 ( ) { java.util.List < ? extends TYPE_1 < org.ovirt.engine.core.common.businessentities.StorageDomain > > VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_2 ) , new TYPE_4 ( VAR_3 ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_4 ) . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_5 . StorageDomain class ) , TYPE_5 . METHOD_4 ( VAR_6 . DiskImage class ) ) ; } 
public static < TYPE_1 extends TYPE_2 . VdcActionParametersBase > boolean METHOD_1 ( TYPE_2 . VdcActionType action , TYPE_1 parameters , TYPE_3 VAR_1 ) { return ( TYPE_4 . METHOD_2 ( TYPE_5 . METHOD_3 ( action . name ( ) ) , parameters . METHOD_4 ( ) , VAR_1 . METHOD_4 ( ) ) ) != null ; } 
protected java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > METHOD_1 ( ) { if ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) && ( ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) != null ) ) && ( ! ( TYPE_2 . equals ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) ) ) { return TYPE_3 . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) , TYPE_4 . name ( ) ) ; } return null ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; final org.ovirt.engine.core.common.businessentities.VM VAR_2 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; final java.lang.String VAR_4 = VAR_1 . METHOD_5 ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ) ; VAR_2 . METHOD_3 ( ) . setItems ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) . setSelectedItem ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; VAR_2 . METHOD_5 ( ) ; } 
private void METHOD_1 ( ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) . METHOD_3 ( ) ) { java.lang.String VAR_1 = iface . METHOD_4 ( ) ; if ( ( TYPE_1 . METHOD_5 ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_6 ( VAR_1 ) ) ) ) { VAR_3 . add ( VAR_1 ) ; } } } 
public void METHOD_1 ( ) { parameters . METHOD_2 ( TYPE_1 ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( VAR_1 ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) ; command . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( true , null , VAR_3 ) ; cmd . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( INT_1 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 value , TYPE_4 event , TYPE_5 < TYPE_3 > VAR_2 ) { TYPE_6 VAR_3 = METHOD_2 ( value ) ; if ( VAR_3 == null ) { VAR_3 = METHOD_2 ( value , VAR_1 ) ; } TYPE_7 . METHOD_3 ( event , VAR_1 , VAR_3 ) ; super . METHOD_1 ( context , VAR_1 , value , event , VAR_2 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . VdcQueryReturnValue response = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ; if ( response . getSucceeded ( ) ) { model . METHOD_1 ( ( ( java.util.ArrayList < TYPE_2 > ) ( response . getReturnValue ( ) ) ) , false , VAR_1 ) ; model . METHOD_2 ( STRING_1 ) ; } else { model . METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ; } } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( TYPE_1 status ) { final org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( status , STRING_1 , VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ; cmd . METHOD_5 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? TYPE_1 . METHOD_3 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_4 ( ) ) : VAR_1 ; } } ; METHOD_5 ( new TYPE_2 ( VAR_2 , METHOD_6 ( ) ) , aQuery ) ; } 
protected boolean METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { return METHOD_3 ( VAR_1 ) ; } if ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) == ( VAR_2 ) ) { return METHOD_3 ( VAR_3 ) ; } return true ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) ; return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_4 ( ) , aQuery ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 . DiskImage disk ) { TYPE_1 parameters = new TYPE_1 ( VAR_1 , disk ) ; parameters . METHOD_2 ( VAR_2 ) ; parameters . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; parameters . METHOD_5 ( VAR_3 . getParameters ( ) ) ; parameters . METHOD_6 ( false ) ; return parameters ; } 
public static TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( VAR_1 . METHOD_2 ( STRING_1 ) ) { VAR_2 . METHOD_3 ( TYPE_2 . valueOf ( VAR_1 . get ( STRING_1 ) . toString ( ) ) ) ; } VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 , STRING_2 ) ) ; java.lang.Integer VAR_3 = TYPE_3 . METHOD_6 ( VAR_1 , STRING_3 ) ; if ( VAR_3 != null ) { VAR_2 . METHOD_7 ( VAR_3 ) ; } return VAR_2 ; } 
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { TYPE_2 params = new TYPE_2 ( VAR_2 , null , null ) ; TYPE_3 returnValue = TYPE_4 . getInstance ( ) . METHOD_2 ( VAR_3 , params , TYPE_5 . METHOD_3 ( ) ) ; if ( ! ( returnValue . getSucceeded ( ) ) ) { VAR_4 . METHOD_4 ( STRING_1 , VAR_2 . getName ( ) ) ; } } } 
private void METHOD_1 ( TYPE_1 < TYPE_2 > command ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_1 ) . get ( VAR_2 ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( VAR_1 ) . get ( VAR_3 ) ; } 
public void METHOD_1 ( final TYPE_1 object ) { VAR_1 . METHOD_1 ( object ) ; METHOD_2 ( object ) ; object . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , java.lang.Object sender , TYPE_4 args ) { if ( args instanceof TYPE_5 ) { METHOD_2 ( object ) ; } } } ) ; } 
public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( storageDomain . getId ( ) , INT_1 ) ; TYPE_1 VAR_4 = VAR_3 . METHOD_2 ( VAR_1 . getId ( ) , INT_1 ) ; return VAR_2 . METHOD_3 ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; try { VAR_1 . METHOD_4 ( ) ; resource . METHOD_5 ( new TYPE_1 ( ) ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_7 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
protected static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_4 . DiskImage > VAR_1 ) { java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_2 > VAR_2 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_2 > ( ) ; for ( TYPE_4 . Disk diskImage : VAR_1 ) { VAR_2 . put ( diskImage . getId ( ) , diskImage ) ; } return new TYPE_5 < TYPE_2 > ( VAR_2 . METHOD_2 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) { TYPE_2 tempVar = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) . getId ( ) , VAR_1 , VAR_2 ) ; tempVar . METHOD_3 ( true ) ; TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_3 , tempVar , TYPE_5 . METHOD_5 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 VAR_2 = new TYPE_4 ( ) ; TYPE_5 VAR_3 = null ; try { VAR_3 = new TYPE_6 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; } finally { if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( ) ; } } return new TYPE_7 ( VAR_2 ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 . getVm ( ) . METHOD_2 ( true ) ; TYPE_1 VAR_1 = super . METHOD_1 ( ) ; TYPE_3 VAR_2 = TYPE_2 . getParameters ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; VAR_3 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ; VAR_1 . METHOD_9 ( VAR_3 ) ; VAR_1 . METHOD_10 ( VAR_2 . METHOD_11 ( ) ) ; return VAR_1 ; } 
private java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < VAR_1 ; ++ i ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( java.lang.String.valueOf ( i ) ) ; VAR_3 . METHOD_5 ( VAR_5 ) ; VAR_3 . METHOD_6 ( vmId ) ; VAR_2 . add ( VAR_3 ) ; } return VAR_2 ; } 
public boolean METHOD_1 ( ) { return ( ( ( ( ( ( ( this ) == ( VAR_1 ) ) || ( ( this ) == ( VAR_2 ) ) ) || ( ( this ) == ( VAR_3 ) ) ) || ( ( this ) == ( VAR_4 ) ) ) || ( ( this ) == ( VAR_5 ) ) ) || ( ( this ) == ( VAR_6 ) ) ) || ( ( this ) == ( VAR_7 ) ) ; } 
public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ; if ( ( VAR_1 . METHOD_3 ( ) . length ( ) ) == 0 ) { VAR_4 . METHOD_4 ( ) ; } else { VAR_4 . METHOD_5 ( VAR_5 , VAR_1 ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_4 ( VAR_5 ) ; METHOD_3 ( VAR_4 ) ; VAR_6 . METHOD_4 ( VAR_1 ) ; VAR_7 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_5 VAR_8 ) { METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ; } finally { VAR_2 . METHOD_9 ( ) ; } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getSelectedItem ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getSelectedItem ( ) ) ) ; VAR_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_3 ) ) ) ; METHOD_4 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) ; METHOD_3 ( cmd , VAR_1 ) ; METHOD_4 ( false ) ; TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ; METHOD_4 ( true ) ; METHOD_6 ( VAR_2 ) ; TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 quota = METHOD_2 ( ) ; quota . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_5 ( quota ) ; VAR_1 . METHOD_6 ( ) ; TYPE_2 VAR_2 = VAR_3 . list ( ) ; METHOD_7 ( VAR_2 , 1 ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_8 ( ) . get ( 0 ) ; assertEquals ( VAR_5 , VAR_4 . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; command . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( command . METHOD_5 ( ) ) ; org.mockito.Mockito . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_1 ) . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network network ) { java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( network . getId ( ) ) ; for ( TYPE_1 VAR_3 : VAR_2 ) { if ( VAR_3 . METHOD_4 ( ) ) { if ( METHOD_5 ( VAR_1 , VAR_3 , VAR_4 ) ) { return VAR_3 ; } } else { if ( METHOD_5 ( VAR_1 , VAR_3 , VAR_5 ) ) { return VAR_3 ; } } } return null ; } 
private static void METHOD_1 ( TYPE_1 < TYPE_2 > command , TYPE_3 . VdcBllMessages VAR_1 ) { TYPE_4 . METHOD_2 ( command . METHOD_3 ( ) ) ; TYPE_4 . METHOD_4 ( command . getReturnValue ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 . name ( ) ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_6 ( validator . METHOD_1 ( ) , TYPE_6 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , false ) ; org.mockito.Mockito.when ( cluster . METHOD_3 ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( true ) ; validator = new TYPE_1 ( VAR_3 , VAR_4 , cluster , VAR_5 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( VAR_6 ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 from ) { from . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ; from . METHOD_4 ( new TYPE_3 ( ) ) ; from . METHOD_5 ( ) . setId ( from . getId ( ) ) ; return from ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_1 = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { if ( ! ( VAR_1 . METHOD_3 ( VAR_2 ) ) ) { VAR_1 . add ( VAR_2 ) ; } METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_7 ( VAR_2 ) ; } } 
public org.ovirt.engine.core.compat.Guid METHOD_1 ( java.util.List < TYPE_1 . DiskImage > VAR_1 ) { if ( ( VAR_2 . equals ( VAR_3 ) ) && ( ( TYPE_2 . getVm ( ) ) != null ) ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = TYPE_3 . METHOD_2 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 ) ; if ( storageDomain != null ) { VAR_2 = storageDomain . getId ( ) ; } } return VAR_2 ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ; TYPE_2 VAR_4 = METHOD_5 ( ) ; if ( ( ( VAR_4 . getId ( ) ) == null ) || ( VAR_4 . getId ( ) . isEmpty ( ) ) ) { VAR_4 . setId ( TYPE_3 . METHOD_6 ( ) ) ; } METHOD_7 ( VAR_4 . getId ( ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( true , METHOD_4 ( ) , VAR_2 ) ; TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; } 
protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } if ( ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_2 ) ) || ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_3 ) ) ) { addCanDoActionMessage ( VAR_4 ) ; returnValue = false ; } return returnValue ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 value , TYPE_3 VAR_1 , java.lang.String id ) { if ( value != null ) { VAR_1 . append ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( value ) . METHOD_5 ( ) ) ) ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; org.mockito.Mockito . METHOD_3 ( VAR_2 , org.mockito.Mockito . METHOD_4 ( 0 ) ) . METHOD_5 ( VAR_3 [ 0 ] , null ) ; org.mockito.Mockito . METHOD_3 ( VAR_2 , org.mockito.Mockito . METHOD_4 ( 0 ) ) . METHOD_5 ( VAR_3 [ 1 ] , null ) ; org.mockito.Mockito . METHOD_3 ( VAR_4 , org.mockito.Mockito . METHOD_4 ( 0 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_5 class ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; if ( ( TYPE_1 . getVm ( ) ) != null ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; } else { TYPE_1 . METHOD_7 ( false ) ; log . METHOD_8 ( STRING_1 ) ; } TYPE_1 . METHOD_9 ( true ) ; } 
protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_2 ( new TYPE_3 < java.lang.Integer > ( ) , new TYPE_4 < java.lang.Integer > ( ) { public java.lang.Integer METHOD_2 ( TYPE_5 VAR_3 ) throws TYPE_6 { return VAR_1 . METHOD_3 ( ) . getValue ( ) ; } } ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 VAR_5 = resource . get ( ) ; TYPE_2 . METHOD_6 ( VAR_5 , 1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_4 ) ) . when ( VAR_5 ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( ) ) ; TYPE_3 . METHOD_9 ( command . validate ( ) ) ; TYPE_3 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_4 . name ( ) ) ) ; } 
private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface getModel ( int i ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ; nic . setId ( VAR_1 [ 1 ] ) ; nic . METHOD_1 ( VAR_2 [ i ] ) ; nic . METHOD_2 ( VAR_3 [ i ] ) ; nic . METHOD_3 ( VAR_4 [ i ] ) ; nic . METHOD_4 ( VAR_5 [ i ] ) ; return nic ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) { if ( ( ( response . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( response . METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_3 ) ) ) { VAR_4 = true ; METHOD_5 ( ) . METHOD_6 ( url , params ) ; } else { VAR_5 . METHOD_7 ( VAR_6 . METHOD_8 ( ) ) ; } } 
protected boolean METHOD_1 ( ) { METHOD_2 ( ) ; if ( ! ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) { TYPE_2 VAR_1 = new TYPE_2 ( storageDomain ) ; if ( ! ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) { return false ; } } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 VAR_1 = METHOD_2 ( null ) ; METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( METHOD_7 ( ) ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_9 ( VAR_5 ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( new TYPE_1 . DiskImage ( ) ) . when ( validator ) . METHOD_2 ( TYPE_2 . any ( VAR_1 . Guid class ) ) ; TYPE_3 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_2 ) ) . METHOD_7 ( TYPE_5 . METHOD_8 ( TYPE_4 . METHOD_9 ( TYPE_6 . METHOD_10 ( VAR_3 , VAR_4 ) ) ) ) ) ; } 
protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_1 . getParameters ( ) . getStoragePoolId ( ) . toString ( ) , METHOD_5 ( ) ) ; TYPE_1 . METHOD_6 ( ) ; java.util.Map < java.lang.String , java.lang.String > returnValue = VAR_1 . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( returnValue ) ; METHOD_9 ( returnValue ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { return new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 , METHOD_2 ( VAR_1 , STRING_1 , 1 ) . get ( 0 ) , METHOD_2 ( VAR_1 , STRING_2 , 1 ) . get ( 0 ) , false ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) ; java.util.ArrayList < TYPE_4 > VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) ; model . METHOD_4 ( ) . setItems ( TYPE_2 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 , VAR_3 ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; for ( org.ovirt.engine.core.compat.Guid VAR_2 : VAR_1 . METHOD_5 ( ) ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_6 ( VAR_1 . getId ( ) , VAR_2 ) ; } for ( java.lang.String VAR_3 : VAR_1 . METHOD_7 ( ) ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_8 ( VAR_1 . getId ( ) , VAR_3 ) ; } getReturnValue ( ) . METHOD_9 ( VAR_1 . getId ( ) ) ; return null ; } 
public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 VAR_2 ) { VAR_2 . METHOD_1 ( new TYPE_3 ( ) ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) . METHOD_6 ( type . value ( ) ) ; return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { true , false } , METHOD_5 ( ) ) ; METHOD_6 ( ) ; VAR_3 . METHOD_7 ( ) ; METHOD_8 ( resource . get ( ) , 0 ) ; } 
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } if ( ( METHOD_1 ( ) ) == null ) { METHOD_2 ( VAR_1 ) ; return false ; } if ( METHOD_1 ( ) . METHOD_3 ( ) ) { METHOD_2 ( VAR_2 ) ; return false ; } return true ; } 
protected TYPE_1 . DiskImage METHOD_1 ( ) { TYPE_1 . DiskImage disk = new TYPE_1 . DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( VAR_3 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( VAR_4 ) ; return disk ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 storage = new TYPE_1 ( ) ; storage . setId ( VAR_1 ) ; storage . METHOD_2 ( new TYPE_2 ( ) ) ; storage . METHOD_3 ( ) . setId ( VAR_2 ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( ) , storage ) ; assertEquals ( VAR_3 , storage . METHOD_6 ( ) ) ; assertEquals ( VAR_4 , storage . METHOD_3 ( ) . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ; if ( vds != null ) { vds . METHOD_7 ( TYPE_2 . METHOD_8 ( vds . METHOD_9 ( ) , vds . METHOD_10 ( ) ) ) ; } TYPE_1 . METHOD_11 ( ) . METHOD_12 ( vds ) ; } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) ) ) ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_1 , this ) ; VAR_1 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( true ) ; METHOD_4 ( ) . add ( VAR_1 ) ; org.ovirt.engine.ui.uicommonweb.UICommand VAR_2 = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_2 , this ) ; VAR_2 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( true ) ; METHOD_4 ( ) . add ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . VM vm = new TYPE_1 . VM ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; vm . METHOD_4 ( VAR_1 ) ; TYPE_3 map = TYPE_4 . map ( vm , ( ( TYPE_3 ) ( null ) ) ) ; METHOD_5 ( map . METHOD_6 ( ) ) ; assertEquals ( map . METHOD_6 ( ) , STRING_1 ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 id ) { org.ovirt.engine.core.compat.Guid VAR_1 = new org.ovirt.engine.core.compat.Guid ( id . METHOD_2 ( ) , false ) ; byte [ ] VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; for ( int VAR_4 = 0 ; VAR_4 < ( VAR_2 . length ) ; VAR_4 ++ ) { VAR_3 . append ( ( STRING_1 + ( java.lang.String . METHOD_4 ( STRING_2 , VAR_2 [ VAR_4 ] ) ) ) ) ; } return VAR_3 . toString ( ) ; } 
protected void METHOD_1 ( TYPE_1 parameters ) { super . METHOD_1 ( parameters ) ; METHOD_2 ( parameters . METHOD_3 ( ) ) ; parameters . METHOD_4 ( new TYPE_2 ( VAR_1 . VmTemplate , TYPE_3 . METHOD_5 ( ) ) ) ; VAR_2 = TYPE_3 . getParameters ( ) . METHOD_6 ( ) ; VAR_3 = new java.util.HashMap < > ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) { return ; } VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_5 , parameters , null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_1 , METHOD_2 ( id ) ) ; return inject ( new TYPE_4 < TYPE_5 . Disk , TYPE_5 . Disk > ( VAR_5 , VAR_6 , VAR_4 ) ) ; } 
protected java.lang.String METHOD_1 ( TYPE_1 value ) { if ( value == null ) { return METHOD_2 ( value ) ; } if ( value . METHOD_3 ( ) ) { return STRING_1 ; } else if ( value . METHOD_4 ( ) ) { return STRING_2 ; } return STRING_3 ; } 
protected < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 VAR_2 , final TYPE_4 . Version version ) { return getEntity ( VAR_1 , VAR_3 , new TYPE_5 ( VAR_2 ) { { METHOD_2 ( TYPE_6 . METHOD_3 ( version ) ) ; } } , VAR_2 . toString ( ) ) ; } 
private TYPE_1 METHOD_1 ( java.lang.Object instance , java.lang.String VAR_1 , TYPE_2 < ? > [ ] VAR_2 , java.lang.Object [ ] VAR_3 ) { java.lang.String VAR_4 = METHOD_2 ( instance , VAR_1 ) ; TYPE_1 VAR_5 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_4 , VAR_6 ) . METHOD_5 ( VAR_7 class ) . METHOD_6 ( ) ; METHOD_7 ( VAR_5 . METHOD_8 ( ) , instance , VAR_1 , VAR_2 , VAR_3 ) ; return VAR_5 ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_3 = VAR_4 ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_5 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . assertEquals ( VAR_4 , VAR_5 . getId ( ) ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 . DiskImage disk ) { if ( ! ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( getVm ( ) . getId ( ) , VAR_1 ) ) ) { TYPE_2 . METHOD_2 ( ) . METHOD_4 ( new TYPE_3 ( VAR_1 , VAR_2 , getVm ( ) . getId ( ) , null , VAR_3 , disk . METHOD_5 ( ) , disk . METHOD_6 ( ) , disk . METHOD_7 ( ) ) ) ; } } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.Boolean VAR_1 = ( ( java.lang.Boolean ) ( returnValue ) ) ; if ( ! VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : VAR_2 ) { if ( TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) , VAR_3 . getName ( ) ) ) { VAR_4 . add ( i ) ; } } } VAR_5 . append ( VAR_3 . getName ( ) ) ; VAR_6 . METHOD_1 ( VAR_7 , VAR_4 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ; model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) . value ( ) ) ; model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) . value ( ) ) ; model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) ; model . METHOD_8 ( null ) ; return model ; } 
protected boolean METHOD_1 ( TYPE_1 type , java.util.List < TYPE_2 > VAR_1 ) { return ( VAR_1 != null ) && ( ( VAR_1 . isEmpty ( ) ) || ( TYPE_3 . getInstance ( ) . METHOD_2 ( type ) . METHOD_3 ( TYPE_4 . METHOD_4 ( ) , VAR_1 , TYPE_4 . METHOD_5 ( ) . getId ( ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 quota = METHOD_2 ( ) ; quota . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_5 ( quota ) ; VAR_1 . METHOD_6 ( ) ; TYPE_2 VAR_2 = VAR_3 . list ( ) ; METHOD_7 ( VAR_2 , 1 ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_8 ( ) . get ( 0 ) ; assertEquals ( VAR_4 . METHOD_9 ( ) , VAR_5 ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 parameters = null ; try { parameters = VAR_2 . METHOD_2 ( ) ; parameters . getParameters ( ) . add ( new TYPE_2 ( VAR_1 , null , VAR_3 , VAR_4 , FLOAT_1 ) ) ; } catch ( TYPE_3 e ) { } return VAR_5 . METHOD_3 ( parameters ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { java.util.List < java.lang.String > VAR_4 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 != null ) { VAR_4 . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; } TYPE_2 name = new TYPE_2 ( VAR_4 ) ; TYPE_1 result = new TYPE_1 ( ) ; result . METHOD_4 ( METHOD_5 ( name ) ) ; result . METHOD_6 ( METHOD_7 ( VAR_3 , METHOD_8 ( VAR_1 ) ) ) ; return result ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( ) ; TYPE_2 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( TYPE_4 VAR_2 , java.lang.Object sender , TYPE_5 args ) { METHOD_6 ( ) ; } } ) ; METHOD_7 ( VAR_1 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_1 ( ( ( TYPE_3 ) ( returnValue ) ) ) ; VAR_2 . getName ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( false ) ; VAR_1 . setItems ( new java.util.ArrayList ( TYPE_4 . METHOD_5 ( new TYPE_2 [ ] { VAR_2 } ) ) ) ; } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 , TYPE_2 status ) { METHOD_2 ( VAR_1 , VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( METHOD_4 ( VAR_5 , STRING_1 , VAR_6 , status ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , java.lang.String VAR_4 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_5 , new TYPE_3 ( VAR_1 , VAR_3 , VAR_2 , VAR_4 ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . get ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . getStoragePoolId ( ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( VAR_5 ) ; org.mockito.Mockito . METHOD_4 ( VAR_6 ) ; } 
public void METHOD_1 ( ) { VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( METHOD_4 ( ) , METHOD_5 ( ) , null ) ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_4 ) . METHOD_7 ( TYPE_2 . any ( VAR_5 . VDS class ) , TYPE_2 . any ( VAR_6 class ) , TYPE_2 . any ( VAR_7 . Map class ) ) ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = super . METHOD_1 ( ) ; if ( VAR_1 && ( METHOD_2 ( ) ) ) { VAR_1 = ( validate ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ) && ( validate ( METHOD_3 ( ) . METHOD_5 ( METHOD_6 ( ) ) ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { TYPE_1 vds = VAR_1 . get ( VAR_2 ) ; TYPE_2 . METHOD_2 ( vds ) ; java.lang.String name = vds . getName ( ) ; TYPE_2 . METHOD_3 ( name . equals ( VAR_3 . METHOD_4 ( VAR_2 , VAR_4 . VDS ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_4 . name ( ) , STRING_3 ) ; VAR_1 = VAR_2 . METHOD_6 ( ) ; VAR_3 = VAR_4 . cluster ( VAR_1 ) . METHOD_6 ( ) ; VAR_5 = VAR_6 . host ( VAR_3 ) . METHOD_7 ( ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ) . thenReturn ( null ) ; VAR_3 . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) ; org.mockito.Mockito . METHOD_5 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_5 . VM class ) ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( super . METHOD_1 ( ) ) ) { return false ; } final TYPE_1 validator = new TYPE_1 ( METHOD_2 ( ) ) ; return ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.List < TYPE_2 > VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_1 ) ; if ( VAR_3 == null ) { throw new TYPE_3 ( VAR_5 ) ; } return VAR_6 . METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) ; METHOD_3 ( cmd ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 , VAR_3 ) ) . when ( VAR_4 ) . METHOD_5 ( VAR_2 ) ; TYPE_3 . METHOD_6 ( cmd . validate ( ) ) ; } 
public TYPE_1 . Network METHOD_1 ( TYPE_1 . Network VAR_1 ) { METHOD_2 ( VAR_2 . Network class , VAR_1 ) ; TYPE_1 . Network network = map ( VAR_1 , map ( get ( ) ) ) ; network . METHOD_3 ( ) . METHOD_4 ( network . getId ( ) ) ; network . METHOD_3 ( ) . METHOD_5 ( cluster . METHOD_6 ( ) . getId ( ) ) ; METHOD_7 ( VAR_3 , new TYPE_2 ( network . METHOD_3 ( ) ) ) ; return get ( ) ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( TYPE_1 VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; domain . METHOD_3 ( VAR_1 ) ; disk . METHOD_4 ( new java.util.ArrayList ( TYPE_2 . METHOD_5 ( domain . getId ( ) ) ) ) ; VAR_2 . METHOD_6 ( VAR_3 class , VAR_4 ) ; org.mockito.Mockito.when ( VAR_4 . get ( domain . getId ( ) ) ) . thenReturn ( domain ) ; return domain ; } 
public void METHOD_1 ( ) { for ( TYPE_1 parameters : VAR_1 . getParameters ( ) . METHOD_2 ( ) ) { METHOD_3 ( parameters ) ; } METHOD_4 ( ) ; METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , false ) ; VAR_1 . METHOD_8 ( null ) ; VAR_1 . getReturnValue ( ) . METHOD_9 ( true ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( result ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { METHOD_1 ( ) . setEntity ( ( ( java.lang.String ) ( result ) ) ) ; METHOD_2 ( true ) ; } else { METHOD_1 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ; METHOD_2 ( false ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 1 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
public static void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) { public void METHOD_5 ( TYPE_4 VAR_3 , java.lang.Object sender , TYPE_5 args ) { TYPE_6 . METHOD_6 ( VAR_1 , VAR_2 . getSelectedItem ( ) ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 } , getEntity ( 0 ) ) ; VAR_5 . METHOD_3 ( ) ; TYPE_1 VAR_6 = resource . get ( ) ; METHOD_4 ( VAR_6 ) ; } 
private void METHOD_1 ( ) { super . METHOD_2 ( ) ; org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_1 , this ) ; VAR_1 . setTitle ( VAR_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( true ) ; METHOD_5 ( ) . add ( VAR_1 ) ; METHOD_5 ( ) . add ( METHOD_6 ( ) ) ; if ( ( getVm ( ) ) != null ) { METHOD_7 ( ) ; METHOD_8 ( ) . METHOD_9 ( true ) ; } METHOD_10 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } } ; TYPE_2 params = new TYPE_2 ( id ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( ) , aQuery ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.util.Map < java.lang.String , java.lang.String > VAR_4 = new java.util.HashMap < > ( ) ; VAR_4 . put ( STRING_1 , VAR_2 ) ; VAR_4 . put ( STRING_2 , VAR_3 ) ; TYPE_2 tempVar = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ; METHOD_3 ( VAR_5 , tempVar , TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ) ; } 
private void METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ; VAR_3 . log ( VAR_2 , VAR_4 ) ; } } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = METHOD_2 ( ) ; java.lang.Integer VAR_1 = METHOD_3 ( ) . getSelectedItem ( ) ; if ( ( cluster == null ) || ( VAR_1 == null ) ) { return ; } java.util.List < TYPE_1 < TYPE_2 , TYPE_3 > > VAR_2 = TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_1 , cluster . METHOD_5 ( ) ) ; METHOD_6 ( VAR_2 ) ; } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < TYPE_1 . Disk > list = new java.util.ArrayList < > ( ) ; if ( source != null ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( source ) ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; while ( VAR_2 . METHOD_3 ( ) ) { list . add ( ( ( TYPE_1 . Disk ) ( VAR_2 . METHOD_4 ( ) ) ) ) ; } } return list ; } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > VAR_1 = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ; for ( java.lang.Object a : VAR_2 . METHOD_2 ( ) ) { org.ovirt.engine.core.common.businessentities . Network network = ( ( org.ovirt.engine.core.common.businessentities . Network ) ( a ) ) ; VAR_1 . add ( new TYPE_2 ( network . METHOD_3 ( ) . getValue ( ) , network ) ) ; } org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_3 , VAR_1 ) ; VAR_2 . METHOD_5 ( null ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( storageDomain ) == null ) { return new TYPE_1 . ValidationResult ( VAR_1 ) ; } if ( ( ( storageDomain . METHOD_2 ( ) ) == null ) || ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) ; METHOD_9 ( true ) ; METHOD_10 ( true ) ; TYPE_3 . METHOD_11 ( command , VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 result ) { VAR_1 . METHOD_2 ( ) ; if ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) { VAR_1 . METHOD_3 ( result . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; } else { METHOD_6 ( null ) ; } } 
protected void METHOD_1 ( ) { if ( org.ovirt.engine.core.common.businessentities.VM . METHOD_2 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) ) { METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , new TYPE_3 ( TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) ) ) . getReturnValue ( ) ) ; TYPE_1 . METHOD_9 ( true ) ; } else { METHOD_4 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) ; } } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; TYPE_1 . when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( true ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.doReturn ( vds ) . when ( VAR_1 ) . get ( VAR_5 ) ; } 
protected TYPE_1 METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_3 , METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( METHOD_5 ( ) ) ) ; if ( VAR_2 . getSucceeded ( ) ) { getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( false , VAR_2 ) ; cmd . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ; java.util.Map < java.lang.String , java.lang.Object > result = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; if ( vds != null ) { result = TYPE_2 . METHOD_4 ( vds . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) . METHOD_7 ( result ) ; } 
public void METHOD_1 ( final TYPE_1 model ) { super . METHOD_1 ( model ) ; model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_1 , java.lang.Object sender , TYPE_4 args ) { if ( ( model . METHOD_6 ( ) ) != null ) { METHOD_7 ( model . METHOD_6 ( ) ) ; } } } ) ; } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { java.lang.Object [ ] VAR_3 = ( ( java.lang.Object [ ] ) ( VAR_1 ) ) ; TYPE_1 VAR_4 = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_5 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( VAR_3 [ 1 ] ) ) ; boolean VAR_6 = ( ( VAR_5 . METHOD_1 ( ) ) == ( VAR_7 ) ) && ( VAR_2 == null ) ; VAR_4 . METHOD_2 ( VAR_5 , VAR_6 ) ; } 
protected void METHOD_1 ( ) { command = METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_1 . Version class ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( vmId ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( INT_1 ) ; VAR_2 . METHOD_5 ( INT_2 ) ; VAR_2 . METHOD_6 ( VAR_3 ) ; return VAR_2 ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { VAR_3 . METHOD_2 ( ( ( VAR_2 + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) ) ; if ( ( VAR_1 . METHOD_4 ( ) ) != null ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; TYPE_3 . METHOD_1 ( VAR_3 , new TYPE_4 ( ) ) ; VAR_2 . setItems ( VAR_3 ) ; VAR_2 . METHOD_2 ( ( ( VAR_3 . size ( ) ) == 0 ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( VAR_2 ) != null ) { METHOD_3 ( VAR_2 ) ; } VAR_3 = true ; } } ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_3 . METHOD_3 ( STRING_1 , ( ( VAR_3 . size ( ) ) == 0 ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) ; command . METHOD_3 ( VAR_1 . getId ( ) ) ; TYPE_1 . METHOD_4 ( command . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command , VAR_3 ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) ) != null ) { VAR_1 . METHOD_2 ( TYPE_1 . getVm ( ) . getId ( ) ) ; } METHOD_3 ( ) ; METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( true ) ; } 
private void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { java.util.List < TYPE_2 > VAR_2 = new TYPE_3 < TYPE_2 > ( ) ; VAR_2 . add ( METHOD_4 ( ) ) ; METHOD_2 ( ) . setItems ( VAR_2 ) ; } else { for ( TYPE_2 VAR_3 : VAR_1 ) { VAR_3 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) , METHOD_6 ( ) . getId ( ) ) ; } } } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; for ( TYPE_1 domain : VAR_1 ) { if ( ( domain . METHOD_1 ( ) ) == ( VAR_2 ) ) { return domain ; } } return null ; } 
protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) instanceof org.ovirt.engine.core.common.businessentities.VM ) { VAR_1 = new TYPE_1 ( this ) ; } else if ( ( getEntity ( ) ) instanceof TYPE_2 ) { VAR_1 = new TYPE_3 ( this ) ; } else { throw new TYPE_4 ( ) ; } VAR_1 . METHOD_2 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; org.ovirt.engine.core.compat.Guid VAR_4 = VAR_5 . METHOD_3 ( ) . getStoragePoolId ( ) ; if ( ! ( VAR_4 . equals ( VAR_6 ) ) ) { METHOD_4 ( VAR_1 , VAR_4 ) ; } } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return TYPE_2 . equals ( id , other . id ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( java.lang.String domain : METHOD_2 ( ) ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( domain ) ; TYPE_2 VAR_3 = new TYPE_2 ( domain . METHOD_4 ( ) , true ) ; VAR_2 . setId ( VAR_3 . toString ( ) ) ; VAR_1 . add ( VAR_2 ) ; } return VAR_1 ; } 
public static void METHOD_1 ( java.lang.String url , TYPE_1 resource , java.lang.String VAR_1 , TYPE_2 params ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( ( VAR_1 + ( VAR_3 ) ) ) ; VAR_2 . METHOD_3 ( TYPE_4 . METHOD_4 ( ( ( TYPE_4 . METHOD_4 ( url , VAR_1 ) ) + ( VAR_4 ) ) , params ) ) ; resource . METHOD_5 ( ) . add ( VAR_2 ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } VAR_1 . METHOD_2 ( getName ( ) . getEntity ( ) ) ; org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_3 ( ) . getSelectedItem ( ) ; VAR_1 . METHOD_4 ( ( network != null ? network . METHOD_5 ( ) : null ) ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) . getEntity ( ) ) ; VAR_1 . METHOD_8 ( METHOD_9 ( ) . getSelectedItem ( ) ) ; } 
protected boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.ui.uicommonweb.models.EntityModel VAR_2 ) { for ( java.lang.Object object : VAR_3 . METHOD_2 ( ) ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) ; if ( ! ( METHOD_3 ( ( ( vm . METHOD_4 ( ) ) + VAR_1 ) , vm . METHOD_5 ( ) , VAR_2 ) ) ) { return false ; } } return true ; } 
public TYPE_1 get ( ) { TYPE_2 VAR_1 = TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( id ) ) . METHOD_5 ( ) ) ; TYPE_4 status = VAR_2 ; return TYPE_1 . status ( status ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; } 
public final void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( 1 , VAR_2 ) ; } if ( ( model . METHOD_2 ( ) ) == null ) { model . METHOD_3 ( null ) ; VAR_1 . METHOD_4 ( true ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_5 ( VAR_1 ) ; } if ( METHOD_6 ( ) ) { METHOD_7 ( ) ; } else { METHOD_8 ( ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) ; TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( STRING_1 , TYPE_2 . METHOD_5 ( ( ( TYPE_3 < java.lang.String > ) ( METHOD_2 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) ) , TYPE_4 . METHOD_7 ( STRING_2 , STRING_3 , STRING_4 ) ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 ) { if ( returnValue == null ) { return new java.util.ArrayList < > ( ) ; } java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( TYPE_3 < TYPE_1 > ) ( returnValue ) ) , VAR_3 ) ) ; TYPE_4 . METHOD_4 ( VAR_2 , new TYPE_5 ( ) ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( network . getId ( ) ) ) . thenReturn ( network ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( network . getId ( ) ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_6 ( network . getId ( ) ) ; TYPE_4 . METHOD_7 ( METHOD_8 ( VAR_3 ) . METHOD_9 ( ) , TYPE_5 . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; VAR_1 . METHOD_3 ( ) . setId ( VAR_3 ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_1 ) ; assertEquals ( VAR_4 , VAR_1 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; java.lang.String name = VAR_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 . VmTemplate ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( cmd . METHOD_6 ( ) ) ; org.mockito.Mockito . METHOD_7 ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ; if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) ) { model . METHOD_3 ( ) ; } else { model . METHOD_4 ( ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; TYPE_3 . METHOD_1 ( VAR_2 , new TYPE_4 ( ) ) ; java.util.ArrayList < TYPE_5 . Disk > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_4 : VAR_2 ) { VAR_3 . add ( VAR_4 . METHOD_2 ( ) ) ; } setItems ( VAR_3 ) ; } 
private void METHOD_1 ( int VAR_1 ) { TYPE_1 . when ( VAR_2 . METHOD_2 ( VAR_3 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_4 . Guid class ) , VAR_3 . Matchers < TYPE_2 > any ( VAR_5 class ) ) ) . thenReturn ( METHOD_3 ( VAR_1 ) ) ; } 
private static java.lang.Boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { if ( VAR_1 . METHOD_2 ( name ) ) { if ( ( VAR_1 . METHOD_3 ( name ) ) instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) ( VAR_1 . METHOD_3 ( name ) ) ) ; } return java.lang.Boolean . METHOD_4 ( VAR_1 . METHOD_3 ( name ) . toString ( ) ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 model = METHOD_4 ( null ) ; model . METHOD_5 ( new TYPE_2 ( ) ) ; model . METHOD_6 ( ) . METHOD_7 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_8 ( ) ; try { VAR_2 . add ( model ) ; METHOD_9 ( STRING_1 ) ; } catch ( TYPE_4 VAR_3 ) { METHOD_10 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; } } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = METHOD_2 ( ) ; return TYPE_2 . METHOD_3 ( VAR_2 ) . when ( ( ( VAR_1 != null ) && ( cluster . METHOD_4 ( ) ? ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( cluster . METHOD_5 ( ) ) ) > 0 : false ) ) ) ; } 
public boolean METHOD_1 ( TYPE_1 status ) { if ( ( VAR_1 . size ( ) ) == 0 ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; } } return ! ( VAR_1 . METHOD_5 ( status . getValue ( ) ) ) ; } 
protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , TYPE_3 . METHOD_2 ( ) ) , VAR_1 , TYPE_4 . getName ( ) , STRING_1 , 0 , null , true , TYPE_3 . getParameters ( ) . METHOD_3 ( ) , false , STRING_1 ) ; } 
protected void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : VAR_1 ) { VAR_2 . add ( METHOD_2 ( cluster ) ) ; } METHOD_3 ( ) . setItems ( VAR_2 ) ; if ( VAR_3 ) { VAR_3 = false ; METHOD_4 ( ) ; } } 
public java.lang.String METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( ( ( ( ( ( ( ( METHOD_3 ( ) ? STRING_1 : STRING_2 ) + ( METHOD_4 ( ) ? STRING_3 : STRING_4 ) ) + STRING_5 ) + STRING_6 ) + ( VAR_2 [ VAR_3 ] ) ) + STRING_7 ) + ( ( METHOD_5 ( ) ) / INT_1 ) ) + STRING_8 ) ) ; return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( ( ( METHOD_5 ( ) ) / INT_1 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( VAR_1 ) ) ; METHOD_6 ( cmd ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_3 , VAR_4 , VAR_2 ) ) . when ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; TYPE_3 . METHOD_9 ( cmd . validate ( ) ) ; } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { final TYPE_1 params = new TYPE_1 ( host . getId ( ) , VAR_1 ) ; TYPE_2 . METHOD_2 ( new TYPE_3 ( ) { public void METHOD_3 ( ) { TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_2 , params , TYPE_5 . METHOD_5 ( ) ) ; } } ) ; } } 
private boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { for ( TYPE_1 VAR_4 : VAR_1 ) { if ( ( VAR_4 . METHOD_2 ( ) ) == VAR_2 ) { if ( ( VAR_3 == null ) || ( VAR_3 . equals ( VAR_4 . METHOD_3 ( ) ) ) ) { return true ; } } } return false ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( TYPE_1 . METHOD_2 ( ) ) ; } else { TYPE_1 . METHOD_7 ( false ) ; log . METHOD_8 ( STRING_1 ) ; } } 
protected void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( result ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { if ( ( domain . METHOD_5 ( ) ) == ( VAR_2 ) ) { result . METHOD_6 ( domain ) ; } } TYPE_1 . METHOD_7 ( ) . METHOD_8 ( result ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_3 , aQuery ) ; } 
protected java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( ) ; java.lang.String VAR_2 = TYPE_1 . METHOD_3 ( ( VAR_1 != null ? VAR_1 : STRING_1 ) ) ; java.lang.String VAR_3 = STRING_2 ; if ( ! ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ) { VAR_3 = STRING_3 + ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ; } return ( ( getEntity ( ) . getName ( ) ) + STRING_4 ) + VAR_3 ; } 
private void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; int VAR_2 = 0 ; for ( int VAR_3 = 1 ; VAR_2 < INT_1 ; VAR_3 ++ ) { VAR_2 = VAR_3 * INT_2 ; VAR_1 . add ( java.lang.String.valueOf ( VAR_2 ) ) ; } METHOD_2 ( ) . setItems ( VAR_1 , java.lang.String.valueOf ( INT_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = new TYPE_1 ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; } } 
protected boolean METHOD_1 ( ) { if ( ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; return false ; } return true ; } 
public TYPE_1 getValue ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : return METHOD_3 ( ) . METHOD_4 ( ) ; case VAR_3 : return METHOD_3 ( ) . METHOD_5 ( ) ; case VAR_4 : return METHOD_3 ( ) . METHOD_6 ( ) ; case VAR_5 : return METHOD_3 ( ) . METHOD_7 ( ) ; case VAR_6 : return METHOD_3 ( ) . METHOD_8 ( ) ; default : return METHOD_3 ( ) . METHOD_6 ( ) ; } } 
private static java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( java.lang.String model , int VAR_1 , int VAR_2 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_3 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; VAR_3 . put ( VAR_4 , ( model + VAR_1 ) ) ; VAR_3 . put ( VAR_5 , java.lang.Integer . toString ( VAR_2 ) ) ; return VAR_3 ; } 
public TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 VAR_3 = storageDomain . METHOD_3 ( ) ; if ( ! ( VAR_1 . equals ( VAR_3 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_4 ) ; } return VAR_5 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . METHOD_2 ( VAR_2 , true ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) . size ( ) ) == 2 ) ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_1 . getId ( ) ) ; } 
public static TYPE_1 . ValidationResult METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_2 < VAR_1 ) { return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_2 ( STRING_1 , VAR_1 ) , java.lang.String . METHOD_2 ( STRING_2 , VAR_2 ) ) ; } return VAR_4 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ; final java.util.ArrayList < TYPE_3 . VdcActionParametersBase > VAR_4 = new java.util.ArrayList < > ( ) ; VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ) ; TYPE_4 . METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_5 , VAR_4 ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { if ( TYPE_1 . METHOD_2 ( domain ) ) { VAR_2 . add ( domain ) ; } } METHOD_3 ( ) . setItems ( VAR_2 ) ; if ( VAR_3 ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; final TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . setId ( VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; final TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( ) ; TYPE_4 . assertEquals ( VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) { cmd . METHOD_2 ( VAR_1 ) ; cmd . METHOD_1 ( ) ; TYPE_1 . assertEquals ( VAR_2 , cmd . METHOD_3 ( ) ) ; org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_2 . any ( VAR_4 . VDS class ) , TYPE_2 . any ( VAR_5 class ) ) ; } 
private void METHOD_1 ( TYPE_1 iface ) { if ( ( iface . getId ( ) ) == null ) { iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; } METHOD_3 ( iface ) ; iface . METHOD_4 ( null ) ; iface . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ; } 
protected java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > METHOD_1 ( ) { if ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ! ( TYPE_2 . equals ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) ) ) { return TYPE_3 . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) , TYPE_4 . name ( ) ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ; TYPE_1 VAR_1 = dao . get ( vmId ) ; VAR_1 . METHOD_2 ( TYPE_2 ) ; dao . METHOD_3 ( VAR_1 ) ; VAR_1 = dao . get ( vmId ) ; TYPE_3 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) . getValue ( ) ) == ( TYPE_2 . getValue ( ) ) ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; final TYPE_3 VAR_4 = VAR_1 . METHOD_4 ( ) ; TYPE_4 . assertEquals ( VAR_3 , VAR_4 . getId ( ) ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { java.lang.String value = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( value == null ) { throw new TYPE_3 ( VAR_3 , java.lang.String . METHOD_3 ( VAR_4 , VAR_2 ) ) ; } return TYPE_4 . METHOD_4 ( value , TYPE_5 . name ( ) ) ; } 
public void METHOD_1 ( ) { final int VAR_1 = INT_1 ; final int VAR_2 = INT_2 ; org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; METHOD_4 ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_5 = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ; METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( command . METHOD_8 ( ) ) ; TYPE_1 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_2 . toString ( ) ) ) ; } 
public boolean equals ( java.lang.Object obj ) { boolean returnValue = super . equals ( obj ) ; if ( ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof TYPE_1 ) ) { returnValue = ( ! ( STRING_1 . equals ( METHOD_1 ( ) ) ) ) && ( TYPE_2 . METHOD_2 ( METHOD_1 ( ) , ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) ) ; } return returnValue ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; return ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; } 
private void METHOD_1 ( TYPE_1 model ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) ; if ( ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel VAR_3 = model . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_3 . setEntity ( VAR_1 ) ; VAR_3 . setIsChangable ( false ) ; } METHOD_6 ( model ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; _asyncQuery . METHOD_2 ( this ) ; VAR_1 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String version = ( ( java.lang.String ) ( result ) ) ; METHOD_3 ( ) . METHOD_4 ( version ) ; } } ; TYPE_1 . METHOD_5 ( _asyncQuery ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_2 = new java.util.HashMap < > ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 , vm . getId ( ) ) , VAR_4 , STRING_1 , null , 0 , VAR_2 , true , true , true , null , null , null , null ) ; vm . METHOD_3 ( ) . put ( VAR_1 , VAR_3 ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . METHOD_2 ( ) ; boolean VAR_1 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_3 ( VAR_2 , cluster . METHOD_4 ( ) . getValue ( ) ) ) ) ; getModel ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; } 
protected boolean METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; return validate ( TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_5 ( METHOD_2 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) , TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) ; } 
protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_2 VAR_1 = getEntity ( ) ; if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( id ) ) ) ) { throw new TYPE_4 ( VAR_2 ) ; } return METHOD_5 ( VAR_3 , new TYPE_5 ( VAR_1 . getId ( ) , VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . METHOD_6 ( METHOD_7 ( ) ) ; METHOD_8 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_9 ( VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_3 ) ) . when ( VAR_2 ) . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) ; TYPE_3 . METHOD_10 ( cmd , VAR_4 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( vmId ) , aQuery ) ; } 
protected void METHOD_1 ( java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.String > > VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { for ( TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.String > VAR_3 : VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) , ( ( VAR_3 . METHOD_5 ( ) ) + STRING_1 ) ) ; } } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = new TYPE_1 ( METHOD_2 ( ) ) ; return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( METHOD_5 ( ) ) ) ) ) && ( validate ( validator . METHOD_6 ( METHOD_5 ( ) , METHOD_7 ( ) ) ) ) ; } 
public boolean METHOD_1 ( TYPE_1 value , TYPE_2 context ) { if ( ( ( value . METHOD_2 ( ) ) == null ) || ( STRING_1 . equals ( value . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) { return true ; } TYPE_3 VAR_1 = ( VAR_2 . METHOD_4 ( value . METHOD_5 ( ) ) ) ? VAR_3 : VAR_4 ; return VAR_1 . METHOD_6 ( ) . METHOD_7 ( value . METHOD_2 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { VAR_3 . error ( ( STRING_1 + STRING_2 ) , VAR_1 , TYPE_3 . METHOD_4 ( ) ) ; return null ; } java.lang.String version = VAR_2 . METHOD_5 ( VAR_4 ) ; java.lang.String VAR_5 = VAR_2 . METHOD_5 ( VAR_6 ) ; java.lang.String VAR_7 = VAR_2 . METHOD_5 ( VAR_8 ) ; return new TYPE_1 ( version , VAR_5 , VAR_7 ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network , boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( network . getName ( ) ) ; VAR_2 . METHOD_3 ( network . getId ( ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_2 ) ; parameters . METHOD_4 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_3 , parameters , new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 result ) { VAR_4 . METHOD_7 ( ) . METHOD_8 ( ) ; } } ) ; } 
private void METHOD_1 ( ) { model . METHOD_2 ( ) . METHOD_3 ( new TYPE_1 ( ) { public void METHOD_4 ( TYPE_2 VAR_1 , java.lang.Object sender , TYPE_3 args ) { boolean VAR_2 = model . METHOD_5 ( ) ; VAR_3 super . METHOD_6 ( VAR_2 , true ) ; } } ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( java.lang.String.valueOf ( METHOD_3 ( ) . METHOD_5 ( ) ) ) ; VAR_4 . METHOD_4 ( java.lang.Boolean . toString ( METHOD_3 ( ) . METHOD_6 ( ) ) ) ; VAR_5 . METHOD_4 ( TYPE_2 . METHOD_7 ( METHOD_3 ( ) . METHOD_8 ( ) ) ) ; VAR_6 . METHOD_9 ( METHOD_3 ( ) ) ; } 
private void METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( VAR_3 . METHOD_3 ( VAR_1 ) ) ) { VAR_4 . METHOD_4 ( VAR_5 , VAR_1 ) ; VAR_6 = true ; VAR_7 = true ; VAR_8 . METHOD_5 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_6 ( ) ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_2 ( VAR_3 ) ) ; METHOD_3 ( ) . METHOD_4 ( ) ; java.util.Map < java.lang.String , java.lang.String > VAR_4 = METHOD_3 ( ) . METHOD_5 ( ) . getReturnValue ( ) ; TYPE_3 . METHOD_6 ( VAR_4 ) ; TYPE_3 . assertEquals ( METHOD_7 ( ) , VAR_4 ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( vmId ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( vmId , VAR_5 ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ; TYPE_4 . METHOD_6 ( VAR_6 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_6 ) . METHOD_7 ( ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { VAR_2 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; VAR_3 . put ( VAR_1 . METHOD_2 ( ) , VAR_2 ) ; } VAR_2 . put ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 ) ) ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( TYPE_1 status , java.lang.String name ) { final org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( status , name , VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_6 ( VAR_1 ) ) ; cmd . METHOD_7 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return VAR_1 ; } 
protected boolean METHOD_1 ( ) { return ( ( ( ( getParameters ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( TYPE_1 . getVm ( ) ) != null ) ) && ( ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) || ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) ) && ( ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) != null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = 2 ; METHOD_2 ( VAR_2 , VAR_3 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 } , METHOD_3 ( VAR_1 ) ) ; TYPE_1 VAR_5 = METHOD_4 ( null ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; VAR_7 . METHOD_6 ( ) ; java.util.List < TYPE_2 > VAR_8 = METHOD_7 ( ) ; METHOD_8 ( VAR_8 ) ; assertEquals ( VAR_8 . size ( ) , VAR_1 ) ; } 
public void METHOD_1 ( ) { parameters = new TYPE_1 ( ) ; parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 < TYPE_1 > ( parameters ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_3 ) ; for ( TYPE_1 storageDomain : VAR_1 ) { org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( storageDomain . getId ( ) , VAR_4 ) ) . thenReturn ( storageDomain ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String id , TYPE_2 action ) { getEntity ( id ) ; if ( ( action . METHOD_2 ( ) ) && ( action . METHOD_3 ( ) ) ) { return METHOD_4 ( VAR_1 , new TYPE_3 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( id ) , true ) ) ; } else { return METHOD_1 ( id ) ; } } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > result = dao . METHOD_2 ( STRING_1 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; for ( TYPE_1 vm : result ) { TYPE_2 . assertEquals ( STRING_1 , vm . METHOD_5 ( ) ) ; } } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; TYPE_2 . METHOD_1 ( VAR_1 , new TYPE_3 ( ) ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( value ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 from ) { TYPE_1 to = new TYPE_1 ( ) ; if ( from . METHOD_2 ( ) ) { to . METHOD_3 ( TYPE_3 . METHOD_4 ( from . METHOD_5 ( ) ) ) ; } if ( from . METHOD_6 ( ) ) { to . METHOD_7 ( from . METHOD_8 ( ) ) ; } return to ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { java.util.ArrayList < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : VAR_2 ) { if ( ( VAR_3 . METHOD_2 ( ) ) == ( VAR_4 ) ) { list . add ( VAR_3 ) ; if ( ( VAR_3 . METHOD_3 ( ) ) != null ) { TYPE_2 . METHOD_1 ( VAR_3 , VAR_3 . METHOD_3 ( ) ) ; } } } VAR_1 . METHOD_4 ( list ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 2 ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_3 , VAR_4 , java.lang.Boolean . TRUE } , true , true ) ) ; TYPE_1 . Disk disk = resource . METHOD_5 ( METHOD_6 ( ) ) ; METHOD_7 ( disk ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 . Frontend class ) . METHOD_3 ( VAR_2 class ) ; METHOD_4 ( VAR_3 class ) ; METHOD_2 ( VAR_4 class ) . METHOD_3 ( VAR_2 class ) ; METHOD_2 ( VAR_5 class ) . METHOD_3 ( VAR_2 class ) ; METHOD_2 ( VAR_6 class ) . to ( VAR_7 class ) . METHOD_3 ( VAR_2 class ) ; METHOD_2 ( VAR_8 class ) . METHOD_3 ( VAR_2 class ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( 1 , INT_1 , INT_2 , 2 , 1 ) ; TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic , null ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; if ( ( getModel ( ) . METHOD_2 ( ) ) && ( ! ( getModel ( ) . METHOD_3 ( true ) ) ) ) { VAR_1 = TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; } return VAR_1 ; } 
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( new java.util.ArrayList ( TYPE_2 . METHOD_4 ( TYPE_3 . getParameters ( ) . METHOD_5 ( ) ) ) ) ; TYPE_4 VAR_2 = METHOD_6 ( VAR_1 ) ; return validate ( VAR_2 . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( context ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 VAR_2 , java.lang.Object sender , TYPE_4 args ) { METHOD_5 ( ) ; } } ) ; TYPE_5 VAR_3 = VAR_4 . get ( VAR_5 ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( boolean VAR_1 , boolean VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; TYPE_1 command = new TYPE_1 ( VAR_3 ) ; command . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_4 . AuditLogDirector class ) ) ; return org.mockito.Mockito . METHOD_6 ( command ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 resource = new TYPE_1 ( VAR_1 [ 0 ] . toString ( ) , VAR_2 ) ; VAR_2 . METHOD_2 ( METHOD_3 ( null ) ) ; METHOD_4 ( STRING_1 , null ) ; METHOD_5 ( resource . get ( ) , 0 ) ; } 
private static TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , boolean VAR_2 ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } if ( VAR_2 ) { return ( VAR_1 . size ( ) ) >= 2 ? VAR_1 . get ( 1 ) : VAR_1 . get ( 0 ) ; } return VAR_1 . get ( 0 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { java.util.Map < java.lang.String , java.lang.String > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ! ( VAR_3 . isEmpty ( ) ) ) { VAR_2 . put ( VAR_4 , VAR_3 ) ; } } 
protected TYPE_1 METHOD_1 ( TYPE_1 model ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 class ) . value ( ) ) ; model . METHOD_4 ( VAR_1 ) ; model . METHOD_5 ( ) . METHOD_6 ( TYPE_4 . value ( ) ) ; model . METHOD_7 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ; model . METHOD_7 ( ) . METHOD_7 ( ) . add ( TYPE_5 . name ( ) ) ; return model ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) { return true ; } if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( TYPE_2 . equals ( VAR_2 , VAR_3 ) ) && ( TYPE_2 . equals ( VAR_4 , VAR_5 ) ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.util.Map < java.lang.String , java.lang.String > VAR_4 = new java.util.HashMap < > ( ) ; VAR_4 . put ( STRING_1 , VAR_2 ) ; VAR_4 . put ( STRING_2 , VAR_3 ) ; TYPE_2 tempVar = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ; TYPE_4 . getInstance ( ) . METHOD_3 ( VAR_5 , tempVar , TYPE_5 . METHOD_4 ( ) ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ) ) . thenReturn ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . METHOD_5 ( STRING_1 ) ; vds . METHOD_6 ( TYPE_5 . METHOD_7 ( ) ) ; VAR_3 . add ( vds ) ; } 
public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( TYPE_4 VAR_1 , TYPE_5 < TYPE_6 > VAR_2 , final TYPE_5 < TYPE_2 > VAR_3 , final TYPE_5 < TYPE_3 > VAR_4 ) { TYPE_7 < TYPE_2 , TYPE_3 > result = new TYPE_7 < TYPE_2 , TYPE_3 > ( VAR_1 , VAR_2 ) ; result . METHOD_2 ( VAR_3 ) ; result . METHOD_3 ( VAR_4 ) ; return result ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( false , VAR_1 ) ; try { cmd . METHOD_4 ( ) ; } catch ( TYPE_1 e ) { TYPE_2 . assertEquals ( VAR_1 , e . METHOD_5 ( ) ) ; } org.mockito.Mockito . METHOD_6 ( VAR_2 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_3 class ) ) ; } 
private java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = STRING_1 ; if ( VAR_5 ) { VAR_4 += VAR_2 < java.lang.String > METHOD_2 ( VAR_6 ) ; } if ( VAR_7 ) { VAR_4 += VAR_2 < java.lang.String > METHOD_2 ( VAR_8 ) ; } VAR_1 . METHOD_3 ( VAR_9 , VAR_4 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = VAR_1 . get ( VAR_2 ) ; TYPE_1 . METHOD_2 ( network ) ; java.lang.String name = network . getName ( ) ; TYPE_1 . METHOD_3 ( name . equals ( VAR_3 . METHOD_4 ( VAR_2 , VAR_4 . Network ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.util.List < TYPE_1 > VAR_3 ) { aQuery . METHOD_2 ( true ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , parameters , aQuery ) ; } 
protected void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , TYPE_1 < TYPE_2 . DiskImage > VAR_2 ) { TYPE_3 < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = null ; for ( TYPE_3 < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_4 : METHOD_2 ( VAR_1 , VAR_2 ) ) { VAR_3 = ( VAR_3 == null ) ? VAR_4 . METHOD_3 ( ) : VAR_3 . METHOD_4 ( VAR_4 . METHOD_3 ( ) ) ; } TYPE_4 . METHOD_5 ( VAR_1 , VAR_3 ) ; } 
public void METHOD_1 ( ) { log . METHOD_2 ( STRING_1 , this . METHOD_3 ( ) . getName ( ) ) ; try { if ( METHOD_4 ( ) ) { METHOD_5 ( ) ; } } catch ( TYPE_1 e ) { log . error ( STRING_2 , e ) ; } TYPE_2 . METHOD_6 ( this ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( METHOD_4 ( ) , java.lang.Boolean . FALSE ) ) . thenReturn ( TYPE_1 . METHOD_5 ( vm ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( cmd ) . METHOD_7 ( ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; } 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , java.util.ArrayList < TYPE_2 . VdcActionParametersBase > parameters , boolean VAR_2 , boolean VAR_3 ) { TYPE_1 returnValue = METHOD_2 ( VAR_1 ) ; if ( returnValue != null ) { java.util.ArrayList < TYPE_1 > list = new java.util.ArrayList < > ( ) ; list . add ( returnValue ) ; return list ; } else { return METHOD_3 ( VAR_1 , parameters , false , VAR_2 , VAR_3 , null ) ; } } 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { return METHOD_2 ( new TYPE_3 < TYPE_1 > ( ) { public TYPE_1 METHOD_3 ( ) { TYPE_4 VAR_2 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_3 . METHOD_8 ( VAR_1 . METHOD_9 ( ) . toString ( ) , VAR_2 ) ; return null ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , METHOD_5 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , METHOD_6 ( ) ) ; VAR_4 . METHOD_7 ( ) ; METHOD_8 ( resource . get ( ) , 0 ) ; } 
public void METHOD_1 ( ) { TYPE_1 < TYPE_2 . VdcActionType , TYPE_2 . VdcActionParametersBase > VAR_1 = new TYPE_1 < TYPE_2 . VdcActionType , TYPE_2 . VdcActionParametersBase > ( VAR_2 , new TYPE_2 . VdcActionParametersBase ( ) , null ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito . METHOD_3 ( VAR_5 ) . METHOD_5 ( TYPE_3 . any ( VAR_6 class ) ) ; TYPE_4 . assertEquals ( STRING_1 , VAR_1 , VAR_3 . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 rs , int VAR_1 ) throws TYPE_3 { TYPE_1 entity = VAR_2 . METHOD_1 ( rs , VAR_1 ) ; entity . METHOD_2 ( TYPE_4 . METHOD_3 ( ( ( java.lang.Integer [ ] ) ( rs . METHOD_4 ( STRING_1 ) . METHOD_4 ( ) ) ) ) ) ; return entity ; } 
public TYPE_1 add ( java.lang.String name , java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { TYPE_2 . METHOD_1 ( name ) ; if ( ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) { return this ; } this . VAR_1 . put ( name , VAR_1 ) ; return this ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } } 
protected java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { java.util.Map < java.lang.String , java.lang.String > parameters = new java.util.HashMap < > ( ) ; if ( ( cluster . METHOD_2 ( ) ) != null ) { parameters . METHOD_3 ( cluster . METHOD_2 ( ) ) ; } return parameters ; } 
protected java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 storage : VAR_1 ) { if ( storage . METHOD_2 ( ) . equals ( VAR_2 ) ) { VAR_3 . add ( storage ) ; } } return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; TYPE_2 . METHOD_3 ( command . validate ( ) ) ; TYPE_2 . METHOD_4 ( command . getReturnValue ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_3 . toString ( ) ) ) ; } 
protected < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 ) { TYPE_1 dao = TYPE_4 . get ( VAR_1 ) ; if ( dao instanceof TYPE_5 ) { TYPE_5 VAR_2 = ( ( TYPE_5 ) ( dao ) ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( this ) ; } else { } return dao ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( METHOD_7 ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_4 ( ) ) ; getReturnValue ( ) . METHOD_8 ( true ) ; } 
protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface map ( TYPE_1 entity , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface template ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = super . map ( entity , template ) ; if ( entity . METHOD_1 ( ) ) { TYPE_2 . Network VAR_1 = METHOD_2 ( entity . METHOD_3 ( ) ) ; iface . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } return iface ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . get ( VAR_2 ) ; java.util.Map < java.lang.String , java.lang.String > map = new TYPE_2 < > ( ) ; map . put ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_2 ( map ) ; VAR_1 . METHOD_3 ( STRING_3 ) ; dao . METHOD_4 ( VAR_1 ) ; TYPE_1 result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_3 . METHOD_5 ( result . equals ( VAR_1 ) ) ; } 
protected boolean METHOD_1 ( TYPE_1 status , TYPE_2 . VdcBllMessages VAR_1 ) { boolean returnValue = false ; TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( ) ; if ( VAR_2 != null ) { returnValue = ( VAR_2 . METHOD_3 ( ) ) != status ; if ( ( ! returnValue ) && ( ! ( TYPE_4 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . name ( ) ) ) ) ) { addCanDoActionMessage ( VAR_1 ) ; } } return returnValue ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) ; METHOD_5 ( VAR_1 . get ( 0 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_4 ( VAR_5 ) ; METHOD_3 ( VAR_4 ) ; VAR_6 . METHOD_4 ( VAR_1 ) ; VAR_7 . METHOD_5 ( ) ; try { TYPE_2 . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_5 VAR_8 ) { METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ; } finally { VAR_2 . METHOD_9 ( ) ; } } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . getInstance ( ) . METHOD_2 ( ) ; TYPE_2 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 < TYPE_4 > ( ) { public void METHOD_5 ( TYPE_5 < ? extends TYPE_4 > VAR_2 , java.lang.Object sender , TYPE_4 args ) { VAR_3 . get ( ) . METHOD_6 ( ) ; } } ) ; METHOD_7 ( VAR_1 ) ; METHOD_8 ( ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == false ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( false ) ; VAR_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_3 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . DiskImage entity = METHOD_2 ( ) ; TYPE_2 < TYPE_3 . Disk , TYPE_1 . DiskImage > VAR_1 = ( ( TYPE_2 < TYPE_3 . Disk , TYPE_1 . DiskImage > ) ( ( ( TYPE_4 ) ( resource ) ) . METHOD_3 ( ) ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) , entity ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; } 
private static void METHOD_1 ( TYPE_1 . VdcActionType VAR_1 , TYPE_2 VAR_2 ) { if ( ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) ) != null ) { java.lang.String VAR_3 = org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } } 
public TYPE_1 . Network METHOD_1 ( TYPE_1 . Network VAR_1 ) { METHOD_2 ( VAR_2 . Network class , VAR_1 ) ; TYPE_1 . Network network = map ( VAR_1 , map ( get ( ) ) ) ; network . METHOD_3 ( ) . METHOD_4 ( network . getId ( ) ) ; network . METHOD_3 ( ) . METHOD_5 ( cluster . METHOD_3 ( ) . getId ( ) ) ; METHOD_6 ( VAR_3 , new TYPE_2 ( network . METHOD_3 ( ) ) ) ; return get ( ) ; } 
protected TYPE_1 . VdcActionParametersBase METHOD_1 ( TYPE_1 . VdcActionType VAR_1 , TYPE_1 . VdcActionParametersBase parameters ) { if ( VAR_1 == ( VAR_2 ) ) { return parameters ; } TYPE_1 . VdcActionParametersBase VAR_3 = parameters . METHOD_2 ( ) ; if ( VAR_3 == null ) { java.lang.String VAR_4 = STRING_1 + VAR_1 ; log . error ( VAR_4 ) ; throw new TYPE_2 ( VAR_5 , VAR_4 ) ; } VAR_3 . METHOD_3 ( parameters . METHOD_4 ( ) ) ; return VAR_3 ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 ) { boolean VAR_2 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ; if ( METHOD_4 ( ) . METHOD_5 ( ) ) { METHOD_4 ( ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ; METHOD_4 ( ) . setIsChangable ( ( VAR_2 && ( METHOD_8 ( ) ) ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_5 ( VAR_1 ) ; TYPE_2 . METHOD_6 ( command ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_3 ( VAR_5 ) ; METHOD_3 ( VAR_4 ) ; VAR_6 . METHOD_4 ( VAR_1 ) ; try { METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_5 VAR_7 ) { METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) ; } finally { VAR_2 . METHOD_8 ( ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( 0 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) ; VAR_1 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_4 id = ( ( TYPE_4 ) ( VAR_1 . METHOD_3 ( ) ) ) ; java.lang.String name = VAR_1 . METHOD_2 ( ) ; return new TYPE_1 ( VAR_2 , id , name ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( ( METHOD_2 ( ) . METHOD_3 ( ) . getEntity ( ) ) != null ) && ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . setEntity ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; } else { METHOD_4 ( ) . setIsChangable ( true ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 class ) ; java.util.List < java.lang.String > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; TYPE_3 . METHOD_5 ( STRING_2 , ( ( VAR_3 . METHOD_6 ( STRING_2 ) ) || ( VAR_3 . METHOD_6 ( STRING_3 ) ) ) ) ; TYPE_3 . METHOD_5 ( STRING_4 , VAR_3 . METHOD_6 ( STRING_4 ) ) ; } 
protected void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; if ( VAR_1 <= 0 ) { METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; } else { METHOD_3 ( VAR_3 ) ; METHOD_5 ( METHOD_2 ( ) ) ; } TYPE_1 . METHOD_6 ( true ) ; } 
public void METHOD_1 ( ) { TYPE_1 . VM vm = new TYPE_1 . VM ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; vm . METHOD_3 ( VAR_1 ) ; TYPE_1 . VM map = TYPE_3 . map ( vm , ( ( TYPE_1 . VM ) ( null ) ) ) ; METHOD_4 ( map . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( template == null ) { return ; } METHOD_3 ( template , template . getStoragePoolId ( ) . getValue ( ) ) ; METHOD_4 ( template . METHOD_5 ( ) ) ; METHOD_6 ( template . METHOD_7 ( ) ) ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( final int VAR_1 , final int VAR_2 , final int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 , VAR_3 ) ; org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_9 ( ) ; return vm ; } 
public void METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == ( VAR_3 ) ) { VAR_4 . METHOD_2 ( VAR_2 , 0 ) ; } else if ( VAR_1 == ( VAR_5 ) ) { if ( VAR_2 != null ) { VAR_4 . METHOD_2 ( VAR_2 , 0 ) ; this . VAR_6 = VAR_2 ; } else if ( ( this . VAR_6 ) != null ) { VAR_4 . METHOD_3 ( this . VAR_6 ) ; } } else { super . METHOD_1 ( VAR_1 , VAR_2 ) ; } } 
public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; if ( VAR_2 ) { METHOD_5 ( ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; } catch ( TYPE_1 e ) { if ( ! ( TYPE_2 . METHOD_6 ( ) ) ) { VAR_1 . error ( java.lang.String . METHOD_7 ( STRING_3 , e . METHOD_8 ( ) ) , e ) ; } METHOD_9 ( ) ; } } 
public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( ( ( TYPE_2 < TYPE_1 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; VAR_1 . add ( VAR_2 ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_2 ( ) ; } 
private void METHOD_1 ( ) { int VAR_1 = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ; log . METHOD_3 ( STRING_1 , VAR_1 ) ; TYPE_1 . METHOD_4 ( ( VAR_1 * INT_1 ) ) ; TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_4 , new TYPE_3 ( TYPE_4 . METHOD_7 ( ) , VAR_5 ) ) ; } 
public boolean METHOD_1 ( ) { boolean VAR_1 = ( ( METHOD_2 ( ) . size ( ) ) > 0 ) || ( ( VAR_2 . size ( ) ) > 0 ) ; if ( ! VAR_1 ) { METHOD_3 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } METHOD_5 ( VAR_1 ) ; return ( super . METHOD_1 ( ) ) && ( METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( METHOD_4 ( ) ) == null ) { METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; } METHOD_9 ( getVm ( ) . getId ( ) ) ; METHOD_10 ( true ) ; return null ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ) ; TYPE_2 . assertEquals ( STRING_2 , VAR_4 , VAR_2 . METHOD_5 ( VAR_3 ) ) ; TYPE_2 . assertEquals ( STRING_3 , VAR_4 , VAR_2 . METHOD_5 ( VAR_1 , VAR_3 ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . AuditLogType VAR_2 ) { int VAR_3 = ( VAR_1 . METHOD_2 ( ) ) ? TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , INT_1 ) : VAR_2 . METHOD_5 ( ) ; if ( VAR_3 > 0 ) { VAR_1 . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_3 ) ) ; VAR_1 . METHOD_8 ( TYPE_5 . METHOD_9 ( VAR_1 , VAR_2 ) ) ; } } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_3 . METHOD_2 ( VAR_2 . getId ( ) . toString ( ) ) ; } if ( VAR_3 == null ) { return ; } METHOD_3 ( VAR_3 ) ; } 
private boolean METHOD_1 ( ) { boolean VAR_1 = true ; for ( TYPE_1 VAR_2 : ( ( TYPE_2 < TYPE_1 > ) ( METHOD_2 ( ) ) ) ) { if ( ! ( METHOD_3 ( VAR_2 ) ) ) { VAR_1 = false ; } else { VAR_2 . METHOD_4 ( null ) ; } } if ( ! VAR_1 ) { METHOD_5 ( new TYPE_3 ( STRING_1 ) ) ; } return VAR_1 ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > > VAR_3 = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > > ( ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > VAR_4 = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > ( VAR_1 . get ( i ) ) ; VAR_3 . add ( VAR_4 ) ; } VAR_2 . setItems ( VAR_3 ) ; } 
protected java.util.List < TYPE_1 . VdcActionParametersBase > METHOD_1 ( ) { java.util.List < TYPE_1 . VdcActionParametersBase > VAR_1 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 < TYPE_1 . VdcActionParametersBase > ( ) { public int METHOD_4 ( TYPE_1 . VdcActionParametersBase VAR_2 , TYPE_1 . VdcActionParametersBase VAR_3 ) { return ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) . METHOD_6 ( ( ( TYPE_5 ) ( VAR_3 ) ) . METHOD_5 ( ) ) ; } } ) ; return VAR_1 ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = TYPE_2 . METHOD_1 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) ; model . METHOD_2 ( ) . setItems ( VAR_1 ) ; model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) ; model . METHOD_4 ( ) ; METHOD_5 ( ) ; } 
protected void METHOD_1 ( TYPE_1 . VdcQueryReturnValue returnValue , TYPE_2 < TYPE_3 > VAR_1 ) { for ( TYPE_4 item : ( ( java.util.List < TYPE_4 > ) ( returnValue . getReturnValue ( ) ) ) ) { TYPE_5 a = ( ( TYPE_5 ) ( item ) ) ; if ( ! ( VAR_1 . METHOD_2 ( a . getId ( ) ) ) ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel VAR_2 = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; VAR_2 . setEntity ( new TYPE_6 ( a ) ) ; METHOD_3 ( ) . add ( VAR_2 ) ; } } } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( disk ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( vmId ) ; } 
public void METHOD_1 ( TYPE_1 constants ) { this . constants = constants ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( null ) ; TYPE_2 . getModel ( ) . METHOD_5 ( ) . METHOD_6 ( new TYPE_3 ( ) { public void METHOD_7 ( TYPE_4 VAR_1 , java.lang.Object sender , TYPE_5 args ) { VAR_2 . METHOD_8 ( ( ( TYPE_6 ) ( getModel ( ) . METHOD_9 ( ) . getEntity ( ) ) ) ) ; } } ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . setId ( VAR_1 ) ; vds . METHOD_2 ( INT_1 ) ; TYPE_1 host = TYPE_2 . map ( vds , ( ( TYPE_1 ) ( null ) ) ) ; METHOD_3 ( host . METHOD_4 ( ) ) ; assertEquals ( host . METHOD_4 ( ) , TYPE_3 . valueOf ( INT_2 ) ) ; } 
public void setEntity ( java.lang.Object value ) { cluster = null ; super . setEntity ( value ) ; if ( ( getEntity ( ) ) != null ) { TYPE_1 . getInstance ( ) . METHOD_1 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; METHOD_2 ( ) ; } } ) , ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity ( ) ) ) . METHOD_3 ( ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_3 class ) ; if ( VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) { METHOD_5 ( ) . METHOD_6 ( VAR_2 . get ( VAR_1 . METHOD_4 ( ) ) ) ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { java.lang.String VAR_3 = VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; TYPE_2 . METHOD_4 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 . getId ( ) ) , VAR_5 , TYPE_4 . METHOD_6 ( VAR_3 ) , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true , null ) ; } 
protected void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 [ 0 ] } , VAR_1 , VAR_2 ) ) ; try { VAR_7 . METHOD_5 ( VAR_6 [ 0 ] . toString ( ) ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_8 ) { METHOD_7 ( VAR_8 , VAR_3 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( resource ) ) ; METHOD_2 ( INT_1 ) ; METHOD_3 ( INT_1 ) ; METHOD_4 ( INT_1 ) ; METHOD_5 ( INT_2 ) ; METHOD_6 ( ) ; METHOD_7 ( METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 , VAR_5 [ 1 ] } ) ) ; METHOD_9 ( VAR_1 . METHOD_10 ( new TYPE_2 ( ) ) ) ; } 
public static java.util.ArrayList < org.ovirt.engine.core.compat.Guid > METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_2 = new java.util.ArrayList < > ( ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { for ( java.lang.String VAR_3 : VAR_1 ) { VAR_2 . add ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_3 ) ) ; } } return VAR_2 ; } 
private void METHOD_1 ( ) { TYPE_1 < TYPE_2 < TYPE_3 > , TYPE_4 > VAR_1 = new TYPE_1 < TYPE_2 < TYPE_3 > , TYPE_4 > ( ) { public TYPE_4 getModel ( ) { return METHOD_2 ( ) ; } public void METHOD_3 ( ) { } public void METHOD_4 ( ) { } } ; VAR_2 = new TYPE_5 ( VAR_1 , constants ) ; } 
public void METHOD_1 ( ) { resource . METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( ) ; METHOD_7 ( resource . list ( ) . METHOD_8 ( ) ) ; } 
private void METHOD_1 ( ) throws TYPE_1 { try { if ( ! ( this . VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) ) ) { METHOD_5 ( ) ; throw new TYPE_1 ( STRING_1 ) ; } } catch ( TYPE_2 e ) { METHOD_6 ( STRING_2 ) ; throw new TYPE_3 ( STRING_3 ) ; } } 
private static int METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , int VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_1 ) { if ( TYPE_2 . METHOD_2 ( VAR_3 ) ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( ( ++ VAR_2 ) ) ; } break ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; cmd . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( STRING_1 , cmd , VAR_1 ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; org.mockito.Mockito . METHOD_5 ( cmd , org.mockito.Mockito . METHOD_6 ( 0 ) ) . METHOD_9 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , null ) ; TYPE_1 VAR_2 = METHOD_2 ( STRING_2 , null ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) ) ) ; METHOD_6 ( cmd , VAR_5 ) ; TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ; } 
private static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , TYPE_1 VAR_1 , java.lang.Object VAR_2 , java.lang.Object value , java.util.List < TYPE_2 > VAR_3 ) { return TYPE_3 . METHOD_1 ( vmId , VAR_1 . METHOD_2 ( ) , VAR_1 . type ( ) , VAR_1 . METHOD_3 ( ) , VAR_2 , value , VAR_3 ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : VAR_2 ) { if ( ( a . METHOD_2 ( ) ) == ( VAR_4 ) ) { VAR_3 . add ( a ) ; } } VAR_1 . METHOD_3 ( VAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; vm . METHOD_3 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_4 . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( vm ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( VAR_3 ) ) . thenReturn ( TYPE_4 . METHOD_5 ( vm ) ) ; } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , TYPE_2 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_1 . getName ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 . getId ( ) ) ; VAR_3 . METHOD_5 ( false ) ; TYPE_3 VAR_4 = TYPE_4 . METHOD_6 ( VAR_2 ) ; VAR_3 . METHOD_7 ( ( VAR_4 == null ? null : VAR_4 . getId ( ) ) ) ; return VAR_3 ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( new TYPE_1 ( ) { public void METHOD_8 ( TYPE_2 VAR_1 , java.lang.Object sender , TYPE_3 args ) { METHOD_2 ( ) ; } } ) ; } 
private void METHOD_1 ( TYPE_1 model ) { METHOD_2 ( model . METHOD_3 ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) ; assertEquals ( model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 ) ; } 
static TYPE_1 . VM getModel ( int VAR_1 ) { TYPE_1 . VM model = new TYPE_1 . VM ( ) ; model . METHOD_1 ( VAR_2 [ VAR_1 ] ) ; model . METHOD_2 ( VAR_3 [ VAR_1 ] ) ; model . setId ( VAR_4 [ 0 ] . toString ( ) ) ; model . METHOD_3 ( new TYPE_2 ( ) ) ; model . METHOD_4 ( ) . setId ( VAR_4 [ 2 ] . toString ( ) ) ; return model ; } 
public void METHOD_1 ( ) { TYPE_1 . VdcActionParametersBase params = new TYPE_2 ( ) . METHOD_2 ( METHOD_3 ( ) , VAR_1 . VdcActionParametersBase class ) ; TYPE_3 . METHOD_4 ( params . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( params . METHOD_5 ( ) . METHOD_7 ( ) ) ; TYPE_3 . assertEquals ( params . METHOD_5 ( ) . METHOD_8 ( ) , VAR_2 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; java.lang.String VAR_4 = null ; if ( ( VAR_2 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( ) ) > 1 ) ) { VAR_4 = VAR_2 . METHOD_5 ( 2 ) ; return TYPE_2 . METHOD_1 ( VAR_4 . METHOD_6 ( ) ) ; } return null ; } 
private void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 . VDS class ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . getId ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . getStoragePoolId ( ) ; org.mockito.Mockito.doReturn ( STRING_1 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_5 ( METHOD_6 ( VAR_3 , STRING_2 ) ) ) . when ( VAR_1 ) . METHOD_7 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = TYPE_2 . METHOD_3 ( VAR_2 ) ; int VAR_4 = ( VAR_1 . METHOD_4 ( ) ) - VAR_3 ; if ( VAR_4 > 0 ) { int VAR_5 = TYPE_3 . METHOD_5 ( VAR_4 , VAR_6 < java.lang.Integer > METHOD_6 ( VAR_7 ) ) ; VAR_8 . METHOD_7 ( STRING_1 , VAR_2 , VAR_4 , VAR_5 ) ; METHOD_8 ( VAR_2 , VAR_5 ) ; } } 
private TYPE_1 METHOD_1 ( java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.lang.String > > > VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_3 . HashMap class , VAR_4 class ) . map ( VAR_1 , null ) ; for ( TYPE_2 VAR_5 : VAR_2 . METHOD_3 ( ) ) { METHOD_4 ( VAR_5 ) ; } return VAR_2 ; } 
public boolean equals ( java.lang.Object obj ) { boolean returnValue = super . equals ( obj ) ; if ( ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof TYPE_1 ) ) { returnValue = ( ( ( METHOD_1 ( ) ) != null ) && ( ! ( METHOD_1 ( ) . isEmpty ( ) ) ) ) && ( METHOD_1 ( ) . equals ( ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) ) ; } return returnValue ; } 
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , network . METHOD_4 ( ) , network . getName ( ) , network . METHOD_5 ( ) , network . METHOD_6 ( ) ) ; return nic ; } 
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.StorageDomain object ) { if ( ( object . METHOD_1 ( ) ) == ( VAR_1 ) ) { return TYPE_1 . METHOD_2 ( object . METHOD_3 ( ) ) ; } else { return TYPE_1 . METHOD_2 ( object . getStatus ( ) ) ; } } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_2 . add ( VAR_3 ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_4 ) ) . thenReturn ( VAR_2 ) ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . METHOD_4 ( ) , VAR_1 , true , true , false , false , false , false , true , true , METHOD_5 ( ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 ; if ( VAR_1 instanceof TYPE_2 ) { VAR_2 = ( ( org.ovirt.engine.ui.frontend.Frontend . getConstants ( ) . METHOD_2 ( ) ) + STRING_1 ) + ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ; } else { VAR_2 = ( ( org.ovirt.engine.ui.frontend.Frontend . getConstants ( ) . METHOD_4 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_5 ( ) ) ; } org.ovirt.engine.ui.frontend.Frontend . METHOD_1 ( VAR_2 ) ; } 
protected boolean METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 = TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 . isEmpty ( ) ) { return true ; } for ( org.ovirt.engine.core.compat.Guid VAR_2 : VAR_1 ) { if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( VAR_2 ) ) == null ) { METHOD_5 ( VAR_3 ) ; return false ; } } return true ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; vm . METHOD_3 ( ( ( VAR_2 ) + 1 ) ) ; VAR_3 . METHOD_4 ( VAR_4 , VAR_1 , INT_1 ) ; TYPE_1 . METHOD_5 ( VAR_5 . METHOD_6 ( vm ) , false , VAR_6 ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.lang.String VAR_1 = vm . METHOD_2 ( ) ; int VAR_2 = VAR_3 < java.lang.Integer > METHOD_3 ( VAR_4 ) ; int VAR_5 = VAR_3 < java.lang.Integer > METHOD_3 ( VAR_6 ) ; int VAR_7 = ( vm . METHOD_4 ( ) . METHOD_5 ( ) ) ? VAR_2 : VAR_5 ; boolean VAR_8 = ( VAR_1 . length ( ) ) <= VAR_7 ; return VAR_8 ; } 
private void METHOD_1 ( ) { if ( ( TYPE_1 . getWindow ( ) ) != null ) { return ; } java.util.List < org.ovirt.engine.ui.uicommonweb.UICommand > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( org.ovirt.engine.ui.uicommonweb.UICommand . METHOD_2 ( STRING_1 , this ) ) ; VAR_1 . add ( org.ovirt.engine.ui.uicommonweb.UICommand . METHOD_3 ( STRING_2 , this ) ) ; TYPE_2 model = new TYPE_2 ( new TYPE_3 ( ) , this ) ; METHOD_4 ( model , VAR_2 , METHOD_5 ( ) , VAR_1 ) ; model . METHOD_6 ( null ) ; } 
public void METHOD_1 ( ) { for ( org.ovirt.engine.core.compat.Guid VAR_1 : METHOD_2 ( ) ) { if ( ! ( METHOD_3 ( ) . equals ( VAR_1 ) ) ) { TYPE_1 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 , new TYPE_2 ( VAR_1 ) ) ; } } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { try { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; java.lang.Object VAR_4 = VAR_3 . METHOD_4 ( VAR_1 , node , VAR_5 ) ; if ( VAR_4 != null ) { return new TYPE_1 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) ; } return null ; } catch ( TYPE_5 e ) { throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
static TYPE_1 METHOD_1 ( TYPE_1 entity , int VAR_1 ) { TYPE_2 . METHOD_2 ( entity . getId ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) ; TYPE_2 . METHOD_2 ( entity . getName ( ) ) . METHOD_3 ( VAR_3 [ VAR_1 ] ) . METHOD_4 ( ) ; TYPE_2 . METHOD_2 ( entity . METHOD_5 ( ) ) . METHOD_3 ( VAR_4 [ VAR_1 ] ) . METHOD_4 ( ) ; return entity ; } 
private boolean METHOD_1 ( ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : METHOD_2 ( ) ) { if ( ! ( vm . METHOD_3 ( ) ) ) { TYPE_1 result = METHOD_4 ( VAR_1 , METHOD_5 ( new TYPE_2 ( vm . getId ( ) , VAR_2 . NORMAL ) , TYPE_3 . METHOD_6 ( ) ) , TYPE_3 . METHOD_7 ( ) ) ; if ( ! ( result . getSucceeded ( ) ) ) { return false ; } } } return true ; } 
public boolean METHOD_1 ( ) { boolean VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( METHOD_3 ( ) . getSelectedItem ( ) ) == ( VAR_3 ) ; boolean VAR_4 = ( METHOD_4 ( ) . getSelectedItem ( ) ) == ( VAR_5 ) ; boolean VAR_6 = ( ( METHOD_5 ( ) ) != null ) && ( ( VAR_7 . METHOD_6 ( METHOD_5 ( ) . METHOD_7 ( ) ) ) <= 0 ) ; return ( ( VAR_1 && VAR_2 ) && VAR_4 ) && VAR_6 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . StorageDomain storageDomain = new TYPE_1 . StorageDomain ( ) ; storageDomain . setId ( VAR_1 [ 2 ] . toString ( ) ) ; TYPE_2 cluster = new TYPE_2 ( ) ; cluster . setId ( VAR_1 [ 1 ] . toString ( ) ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( storageDomain , cluster ) ; } 
protected boolean METHOD_1 ( ) { if ( ( ( TYPE_1 . getVdsGroup ( ) ) == null ) && ( TYPE_2 . equals ( super . METHOD_2 ( ) ) ) ) { return METHOD_3 ( VAR_1 ) ; } if ( ! ( TYPE_3 . METHOD_4 ( METHOD_2 ( ) . getValue ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getReturnValue ( ) . METHOD_6 ( ) ) ) ) { return false ; } return super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_3 ( VAR_3 , VAR_4 ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( result . METHOD_5 ( ) . getId ( ) , VAR_5 ) ; dao . METHOD_6 ( result . getId ( ) ) ; TYPE_2 . METHOD_7 ( dao . METHOD_3 ( VAR_3 , VAR_4 ) ) ; TYPE_2 . METHOD_7 ( VAR_1 . get ( VAR_5 ) ) ; } 
public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int result = 1 ; result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( id ) == null ? 0 : id . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) ; return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , null ) ; VAR_4 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; VAR_2 . METHOD_2 ( VAR_3 , INT_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( ) ) . thenReturn ( new TYPE_2 ( ( ( new TYPE_3 ( ) . METHOD_4 ( ) ) - INT_2 ) ) ) ; boolean result = validator . METHOD_5 ( VAR_1 ) ; TYPE_4 . METHOD_6 ( result ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_3 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 . name ( ) ) ) ; } 
protected TYPE_1 METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VM VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; return VAR_2 ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { int VAR_2 = INT_1 ; while ( ( ( VAR_2 > 0 ) && ( ( VAR_3 ) == null ) ) && ( ! ( VAR_4 ) ) ) { VAR_2 -- ; try { TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_5 , new TYPE_2 ( VAR_1 ) ) ; } catch ( java.lang.Exception e ) { } } } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . METHOD_3 ( ) ; METHOD_2 ( VAR_2 class ) . METHOD_3 ( ) ; METHOD_2 ( VAR_3 class ) . METHOD_4 ( VAR_4 class ) ; METHOD_2 ( VAR_5 class ) . METHOD_4 ( VAR_4 class ) ; METHOD_2 ( VAR_6 . ViewDef class ) . to ( VAR_7 class ) ; METHOD_2 ( VAR_8 class ) . METHOD_4 ( VAR_4 class ) ; bindPresenterWidget ( VAR_9 class , VAR_10 . ViewDef class , VAR_11 class ) ; } 
protected boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.ui.uicommonweb.models.EntityModel entity , TYPE_1 [ ] VAR_2 ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel VAR_3 = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; VAR_3 . METHOD_2 ( true ) ; VAR_3 . setEntity ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; if ( ! ( VAR_3 . METHOD_4 ( ) ) ) { entity . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; entity . METHOD_2 ( false ) ; } return VAR_3 . METHOD_4 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; } 
public void METHOD_1 ( ) { quota = METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( VAR_1 ) ) . thenReturn ( quota ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( new TYPE_1 ( ) ) ; VAR_3 . add ( new TYPE_1 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( VAR_4 ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_5 ( TYPE_2 . any ( VAR_5 class ) ) ) . thenReturn ( false ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . get ( METHOD_2 ( ) ) ; int VAR_2 = ( VAR_1 . METHOD_3 ( ) ) + 1 ; TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; VAR_1 . METHOD_7 ( VAR_2 ) ; dao . METHOD_8 ( VAR_1 ) ; dao . get ( METHOD_2 ( ) ) ; TYPE_4 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; } 
protected void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( true ) ; return ; } METHOD_4 ( ) ; if ( ( ( METHOD_5 ( ) ) && ( TYPE_1 . getVm ( ) . METHOD_6 ( ) ) ) && ( TYPE_1 . getSucceeded ( ) ) ) { METHOD_7 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . add ( STRING_1 ) ; METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; METHOD_5 ( 0 , 1 ) ; METHOD_6 ( ) ; METHOD_7 ( 1 ) ; VAR_2 . METHOD_8 ( ) ; TYPE_1 vm = resource . get ( ) ; METHOD_9 ( vm . METHOD_10 ( ) ) ; METHOD_11 ( vm , 0 ) ; } finally { VAR_1 . METHOD_12 ( ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) ) ) . thenReturn ( null ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_2 ( VAR_3 , host , VAR_4 ) ; TYPE_3 . METHOD_4 ( validator . METHOD_1 ( ) , TYPE_4 . METHOD_5 ( ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_5 ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( VAR_5 ) ) . thenReturn ( VAR_2 ) ; TYPE_3 VAR_6 = TYPE_4 . METHOD_5 ( VAR_3 ) ; TYPE_5 . assertEquals ( VAR_1 , VAR_6 . METHOD_6 ( ) ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return VAR_2 ; } return ! ( vm . METHOD_2 ( ) ) ? new TYPE_2 ( VAR_1 ) . METHOD_3 ( ) : VAR_2 ; } 
public void METHOD_1 ( final TYPE_1 model ) { super . METHOD_1 ( model ) ; model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_1 , java.lang.Object sender , TYPE_4 args ) { VAR_2 = model . METHOD_2 ( ) . getEntity ( ) ; } } ) ; } 
public void METHOD_1 ( TYPE_1 event ) { java.util.List VAR_1 = ( ( java.util.List ) ( object . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; java.lang.Object VAR_2 = ( ( VAR_3 . METHOD_4 ( ) ) >= 0 ) ? VAR_1 . get ( VAR_3 . METHOD_4 ( ) ) : null ; object . METHOD_2 ( ) . setSelectedItem ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 2 ) ) ) ; VAR_1 . METHOD_6 ( ) ; try { resource . get ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
public void METHOD_1 ( ) { VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( null ) ; VAR_3 = new TYPE_1 ( ) ; vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; org.mockito.Mockito . METHOD_5 ( validator , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_2 . any ( VAR_2 . Boolean class ) , TYPE_2 . any ( VAR_3 class ) ) ; org.mockito.Mockito . METHOD_5 ( validator , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_8 ( TYPE_2 . any ( VAR_2 . Boolean class ) , TYPE_2 . any ( VAR_4 class ) ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; VAR_1 . add ( METHOD_3 ( STRING_1 , VAR_2 ) ) ; VAR_1 . add ( METHOD_3 ( STRING_2 , VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ; TYPE_3 . assertEquals ( VAR_5 , validator . METHOD_5 ( METHOD_3 ( STRING_3 , VAR_2 ) ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( result ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { METHOD_1 ( ) . setEntity ( result ) ; } } 
private java.util.List < TYPE_1 . DiskImage > METHOD_1 ( ) { java.util.List < TYPE_1 . DiskImage > VAR_1 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid VAR_2 : TYPE_2 . getParameters ( ) . METHOD_1 ( ) ) { VAR_1 . add ( METHOD_2 ( VAR_2 ) ) ; } return VAR_1 ; } 
public static TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < TYPE_2 . DiskImage > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; } 
private static final TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > source , final TYPE_3 type ) { return TYPE_4 . METHOD_2 ( source , new TYPE_5 < TYPE_2 > ( ) { public boolean METHOD_3 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( type ) ; } } ) ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_3 . getId ( ) , METHOD_3 ( ) ) ) ; METHOD_4 ( VAR_1 . getSucceeded ( ) ) ; if ( ! ( getSucceeded ( ) ) ) { METHOD_5 ( VAR_4 , VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; return ; } METHOD_8 ( ) ; METHOD_9 ( ) ; getReturnValue ( ) . METHOD_10 ( VAR_1 ) ; } 
protected void METHOD_1 ( ) { resource = new TYPE_1 ( VAR_1 [ 0 ] . toString ( ) , new TYPE_2 ( ) ) ; resource . METHOD_2 ( VAR_2 ) ; resource . METHOD_3 ( VAR_3 ) ; resource . METHOD_4 ( VAR_4 ) ; resource . METHOD_5 ( VAR_5 ) ; resource . METHOD_6 ( VAR_6 ) ; } 
private void METHOD_1 ( ) { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = new TYPE_1 < TYPE_2 , TYPE_3 > ( ) { public TYPE_3 getModel ( ) { return METHOD_2 ( ) ; } public void METHOD_3 ( ) { } public void METHOD_4 ( ) { } } ; VAR_2 = new TYPE_4 ( VAR_1 , constants ) ; } 
public void METHOD_1 ( java.lang.Integer value ) { if ( ( ( VAR_1 ) == null ) && ( value == null ) ) { return ; } if ( ( ( VAR_1 ) == null ) || ( ! ( VAR_1 . equals ( value ) ) ) ) { VAR_1 = value ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( int VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( STRING_1 ) ; VAR_3 . METHOD_5 ( 1 ) ; vm . METHOD_6 ( VAR_3 ) ; vm . METHOD_7 ( VAR_2 ) ; return vm ; } 
private static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_1 . getStatus ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_1 . getName ( ) , VAR_1 . getId ( ) , VAR_1 . getStatus ( ) . name ( ) , VAR_2 . METHOD_2 ( ) . name ( ) ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_3 VAR_4 = new TYPE_3 ( ) ; TYPE_4 VAR_5 = new TYPE_4 ( ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_5 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_5 ( ) . add ( VAR_5 ) ; TYPE_1 VAR_6 = new TYPE_1 ( ) ; VAR_6 . METHOD_6 ( VAR_4 ) ; return VAR_6 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { validator = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_1 = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_3 , VAR_4 ) ) . thenReturn ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_6 , VAR_4 ) ) . thenReturn ( VAR_7 ) ; TYPE_3 . METHOD_5 ( VAR_1 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network network = METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_1 = ( network == null ) ? null : network . getId ( ) ; return TYPE_2 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 . Network , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; } 
public void METHOD_1 ( TYPE_1 object ) { VAR_1 . METHOD_1 ( object ) ; VAR_2 . METHOD_2 ( object . METHOD_3 ( ) ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; for ( java.lang.String VAR_4 : object . METHOD_4 ( ) ) { java.lang.String VAR_5 = TYPE_3 . METHOD_5 ( VAR_4 ) ; VAR_3 . append ( METHOD_6 ( VAR_5 , VAR_6 ) ) ; } VAR_7 . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; TYPE_2 . METHOD_2 ( VAR_2 , new TYPE_3 ( ) ) ; TYPE_4 VAR_3 = ( ( TYPE_4 ) ( model ) ) ; VAR_3 . setItems ( VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { int VAR_1 = event . METHOD_2 ( ) ; if ( VAR_2 . METHOD_3 ( ) ) { if ( VAR_1 != ( VAR_2 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_4 ( ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_6 ( ) ; } } else { VAR_2 . METHOD_5 ( VAR_1 ) ; } } 
private void METHOD_1 ( ) { if ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) { METHOD_3 ( ) ; } else { TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; TYPE_1 . METHOD_8 ( ) ; } TYPE_1 . METHOD_9 ( true ) ; } 
private boolean METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . Disk > VAR_1 = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . Disk > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . Disk > ( ) ; for ( TYPE_1 . Disk disk : VAR_1 ) { if ( ( METHOD_4 ( disk ) ) || ( ( ! ( METHOD_5 ( ) ) ) && ( disk . METHOD_6 ( ) ) ) ) { return false ; } } return true ; } 
public void METHOD_1 ( ) { log . METHOD_2 ( STRING_1 ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : METHOD_3 ( ) . METHOD_4 ( ) ) { if ( ( TYPE_1 . METHOD_5 ( cluster . METHOD_6 ( ) ) ) && ( cluster . METHOD_7 ( ) ) ) { try { METHOD_8 ( cluster ) ; } catch ( java.lang.Exception e ) { log . METHOD_9 ( STRING_2 , cluster . METHOD_10 ( ) , e ) ; } } } } 
public void setSelectedItem ( java.lang.Integer value ) { if ( ! ( TYPE_1 . METHOD_1 ( value ) ) ) { TYPE_2 VAR_1 = METHOD_2 ( ) . getSelectedItem ( ) ; org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ( VAR_1 == null ) ? null : VAR_1 . METHOD_3 ( ) ; if ( cluster == null ) { return ; } super . setSelectedItem ( TYPE_1 . METHOD_4 ( cluster . METHOD_5 ( ) ) ) ; } else { super . setSelectedItem ( value ) ; } } 
protected java.lang.String METHOD_1 ( TYPE_1 < TYPE_2 , ? > column ) { if ( VAR_1 ) { return ( ( ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + STRING_1 ) + ( METHOD_2 ( ) ) ) + STRING_1 ) + ( METHOD_3 ( METHOD_4 ( column ) ) ) ; } return null ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( java.lang.Boolean . FALSE ) . when ( cmd ) . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( cmd . METHOD_7 ( ) ) ; } 
public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int result = 1 ; result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( id . vmId ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) ; return result ; } 
protected void METHOD_1 ( java.lang.Object sender , TYPE_1 e ) { super . METHOD_1 ( sender , e ) ; if ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) ) { TYPE_2 storage = ( ( TYPE_2 ) ( METHOD_2 ( ) . getEntity ( ) ) ) ; setSelectedItem ( TYPE_3 . METHOD_4 ( VAR_2 . Linq < TYPE_2 > METHOD_5 ( METHOD_6 ( ) ) , new TYPE_4 ( storage . getId ( ) ) ) ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_2 ( VAR_1 ) ; METHOD_3 ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_4 ( STRING_1 , network ) ; METHOD_5 ( iface ) ; iface . METHOD_6 ( METHOD_7 ( ) ) ; TYPE_1 VAR_2 = METHOD_8 ( METHOD_9 ( iface ) ) ; METHOD_10 ( VAR_2 , VAR_3 , VAR_1 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_3 ) ; } 
protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( ( VAR_2 . length ) * 2 ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , ( i % ( VAR_2 . length ) ) ) ; } } 
public TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( ( vm . getStatus ( ) ) == ( VAR_1 ) ) && ( ( vm . METHOD_2 ( ) ) != null ) ) { org.ovirt.engine.core.common.businessentities.VDS vds = METHOD_3 ( ) . get ( new org.ovirt.engine.core.compat.Guid ( vm . METHOD_2 ( ) . toString ( ) ) ) ; if ( ( vds . getStatus ( ) ) != ( VAR_2 ) ) { return new TYPE_1 . ValidationResult ( VAR_3 , TYPE_2 . toString ( ) ) ; } } return VAR_4 ; } 
private void METHOD_1 ( java.lang.Object sender , TYPE_1 e ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ; METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( this ) ; METHOD_6 ( false ) ; if ( ( e . METHOD_7 ( ) ) > INT_1 ) { METHOD_8 ( ) . METHOD_9 ( this , e ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( true ) ; validator = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) ; org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( VAR_4 ) ) ; } 
protected boolean METHOD_1 ( ) { if ( ( ( getParameters ( ) ) == null ) || ( ( getParameters ( ) . METHOD_2 ( ) ) == null ) ) { addCanDoActionMessage ( VAR_1 ) ; return false ; } TYPE_1 quota = METHOD_3 ( ) ; if ( quota == null ) { addCanDoActionMessage ( VAR_1 ) ; return false ; } if ( METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( quota ) ) { addCanDoActionMessage ( VAR_2 ) ; return false ; } return true ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; } } ; TYPE_1 tempVar = new TYPE_1 ( VAR_1 ) ; tempVar . METHOD_3 ( version ) ; TYPE_2 . METHOD_4 ( tempVar , aQuery ) ; } 
private java.lang.String METHOD_1 ( java.lang.Object result ) { if ( ( result == null ) || ( ! ( result instanceof java.lang.Object [ ] ) ) ) { VAR_1 . METHOD_2 ( STRING_1 ) ; } java.lang.Object [ ] VAR_2 = ( ( java.lang.Object [ ] ) ( result ) ) ; if ( ( VAR_2 . length ) != 1 ) { VAR_1 . METHOD_2 ( STRING_2 ) ; } java.lang.String VAR_3 = STRING_3 + ( VAR_2 [ 0 ] . toString ( ) ) ; return VAR_3 ; } 
protected boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , boolean VAR_2 ) { TYPE_2 returnValue = METHOD_2 ( VAR_3 , new TYPE_3 ( TYPE_4 . METHOD_3 ( ) , VAR_1 , VAR_2 ) ) ; if ( ! ( returnValue . getSucceeded ( ) ) ) { VAR_4 . log ( new TYPE_5 ( TYPE_4 . METHOD_3 ( ) ) , VAR_5 ) ; log . error ( STRING_1 , TYPE_4 . METHOD_4 ( ) . getName ( ) ) ; return false ; } return true ; } 
public boolean METHOD_1 ( TYPE_1 quota , java.util.List < java.lang.String > VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( quota . METHOD_4 ( ) ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . getId ( ) . equals ( quota . getId ( ) ) ) ) ) { VAR_1 . add ( TYPE_2 . toString ( ) ) ; return false ; } return true ; } 
private void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_4 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_5 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_3 ( VAR_5 ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_6 , VAR_2 ) ) . when ( VAR_7 ) . METHOD_5 ( VAR_6 ) ; } 
protected void METHOD_1 ( TYPE_1 value , TYPE_2 item , boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; VAR_2 . METHOD_3 ( ) . METHOD_2 ( true ) ; if ( ! VAR_1 ) { VAR_3 . add ( value . METHOD_4 ( ) ) ; } VAR_4 += ( VAR_1 ) ? - 1 : 1 ; METHOD_5 ( ) ; } 
public < TYPE_1 > TYPE_1 get ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( VAR_1 . METHOD_1 ( ) . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) { throw new TYPE_3 ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_1 ) ) ; } TYPE_1 value = get ( VAR_1 ) ; if ( value == null ) { value = VAR_2 ; } return value ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; VAR_1 . getVm ( ) . setId ( VAR_3 ) ; TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ; assertEquals ( VAR_4 , VAR_1 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 model = ( ( TYPE_1 ) ( getWindow ( ) ) ) ; if ( ( model . METHOD_2 ( ) ) != null ) { return ; } model . METHOD_3 ( null ) ; METHOD_4 ( model ) ; new TYPE_2 ( this , model , getEntity ( ) ) . METHOD_5 ( ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { try { this . VAR_2 = new TYPE_3 ( VAR_3 , METHOD_2 ( this . client ) , VAR_1 ) ; this . VAR_2 . METHOD_3 ( ) ; int VAR_4 = VAR_5 ; VAR_6 . METHOD_4 ( ) ; VAR_7 = this . VAR_3 . METHOD_5 ( VAR_8 , ( VAR_4 |= VAR_9 ) , this ) ; } catch ( TYPE_4 | TYPE_5 e ) { VAR_10 . error ( STRING_1 , e ) ; throw new TYPE_2 ( e ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) ; } 
private void METHOD_1 ( java.lang.Object sender , final TYPE_1 e ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ; METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ; METHOD_2 ( ) . METHOD_3 ( ) . METHOD_7 ( this ) ; METHOD_8 ( VAR_1 . System , null ) ; METHOD_9 ( STRING_1 ) ; METHOD_10 ( e . METHOD_11 ( ) . METHOD_12 ( ) ) ; METHOD_13 ( ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_3 , METHOD_4 ( ) . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( METHOD_8 ( ) . METHOD_9 ( ) ) . thenReturn ( VAR_1 ) ; METHOD_10 ( true ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 < TYPE_3 . DiskImage > VAR_1 ) { final java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < TYPE_3 . DiskImage > > VAR_2 = METHOD_2 ( VAR_1 ) ; return METHOD_3 ( new TYPE_4 ( ) { public TYPE_1 . ValidationResult METHOD_4 ( TYPE_5 < org.ovirt.engine.core.compat.Guid , TYPE_6 > VAR_3 ) { org.ovirt.engine.core.compat.Guid VAR_4 = VAR_3 . METHOD_5 ( ) ; java.util.List < TYPE_3 . DiskImage > VAR_5 = VAR_2 . get ( VAR_4 ) ; return METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_5 ) ; } } ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( new TYPE_2 < TYPE_1 , java.lang.Integer > ( VAR_1 , 1 ) ) ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( VAR_3 . get ( i ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { VAR_3 . METHOD_2 ( VAR_1 ) ; break ; } } METHOD_3 ( null , false ) ; METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ; } 
public static TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( long VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 < TYPE_2 , TYPE_3 > result = new TYPE_1 < TYPE_2 , TYPE_3 > ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { long VAR_5 = VAR_1 ; VAR_1 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_1 >= 1 ) { result . METHOD_3 ( VAR_1 ) ; result . METHOD_4 ( VAR_3 ) ; break ; } VAR_1 = VAR_5 ; } return result ; } 
protected java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > VAR_1 = new java.util.HashMap < > ( ) ; VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) ; VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) ; return VAR_1 ; } 
private static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { return new TYPE_1 ( new TYPE_2 ( disk . METHOD_2 ( ) , VAR_1 ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 1 , null , true , true , true , STRING_1 ) ; } 
public void METHOD_1 ( TYPE_1 model , java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 , TYPE_2 VAR_3 ) { if ( ( ( model . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( ( model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_4 . System ) ) ) { METHOD_5 ( model , VAR_1 , VAR_2 , VAR_3 ) ; } else { METHOD_6 ( model , VAR_1 , VAR_2 , VAR_3 ) ; } } 
private void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { VAR_1 . put ( VAR_2 , new TYPE_1 ( ) ) ; METHOD_3 ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( VAR_1 . METHOD_4 ( ) ) ) ; } METHOD_3 ( ) . setSelectedItem ( VAR_2 ) ; } 
public static < TYPE_1 > java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > METHOD_1 ( java.util.ArrayList < TYPE_1 > list ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > VAR_1 = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; if ( list != null ) { for ( java.lang.Object item : list ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel model = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; model . setEntity ( item ) ; VAR_1 . add ( model ) ; } } return VAR_1 ; } 
public void onSuccess ( TYPE_1 result ) { VAR_1 . METHOD_1 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_3 . getModel ( ) , result ) ; if ( ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) ) != null ) { org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( ) ; } } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( 0 ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 0 ] ) ; org.mockito.Mockito.doReturn ( METHOD_2 ( 1 ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 1 ] ) ; org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_1 > ( ) ) . when ( VAR_3 ) . METHOD_4 ( VAR_2 [ 0 ] ) ; org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_1 > ( ) ) . when ( VAR_3 ) . METHOD_4 ( VAR_2 [ 1 ] ) ; } 
private TYPE_1 METHOD_1 ( ) { ( VAR_1 ) ++ ; TYPE_1 quota = new TYPE_1 ( ) ; quota . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; quota . METHOD_3 ( VAR_2 . getId ( ) . getValue ( ) ) ; quota . METHOD_4 ( STRING_1 ) ; quota . METHOD_5 ( STRING_2 ) ; quota . METHOD_6 ( INT_1 ) ; quota . METHOD_7 ( INT_1 ) ; quota . METHOD_8 ( INT_2 ) ; quota . METHOD_9 ( INT_2 ) ; quota . METHOD_10 ( VAR_3 ) ; return quota ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 , VAR_4 , VAR_5 ) ; org.mockito.Mockito . METHOD_4 ( VAR_5 ) . METHOD_3 ( VAR_1 , VAR_4 ) ; org.mockito.Mockito . METHOD_4 ( VAR_4 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( ( ( TYPE_3 ) ( org.mockito.Mockito . any ( ) ) ) ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_7 ( VAR_6 , VAR_7 ) ; } 
protected void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ; java.lang.String [ ] VAR_2 = VAR_1 . METHOD_3 ( new java.lang.String [ VAR_1 . size ( ) ] ) ; VAR_3 = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; TYPE_1 . METHOD_6 ( ) ; java.util.Map < java.lang.String , java.lang.Object > [ ] VAR_4 = VAR_5 ; TYPE_1 . METHOD_7 ( VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_2 ( result ) ; TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 2 ) ; result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 0 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; VAR_2 . put ( VAR_5 , STRING_1 ) ; VAR_2 . put ( VAR_6 , VAR_7 ) ; VAR_2 . put ( VAR_8 , java.lang.String.valueOf ( VAR_1 . METHOD_4 ( ) ) ) ; VAR_2 . put ( VAR_9 , TYPE_2 . toString ( ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( TYPE_1 . getVm ( ) ) != null ) { METHOD_4 ( TYPE_1 . getVm ( ) . METHOD_5 ( ) , TYPE_1 . METHOD_6 ( ) ) ; } METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( true ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { org.ovirt.engine.core.compat.Guid VAR_3 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_3 == null ) { continue ; } for ( TYPE_2 VAR_4 : METHOD_2 ( ) ) { if ( VAR_3 . equals ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { VAR_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; break ; } } } } 
private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( VAR_1 ) == ( VAR_2 ) ) { } else if ( ( VAR_1 ) == ( VAR_3 ) ) { METHOD_3 ( VAR_4 , VAR_5 ) ; } else if ( ( VAR_1 ) == ( VAR_6 ) ) { METHOD_3 ( VAR_5 ) ; } else if ( ( VAR_1 ) == ( VAR_7 ) ) { METHOD_3 ( VAR_8 ) ; } } 
public void METHOD_1 ( TYPE_1 result ) { java.util.List < TYPE_2 . VdcQueryReturnValue > VAR_1 = result . METHOD_2 ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( VAR_1 . get ( 0 ) . getReturnValue ( ) ) ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_2 class ) ; java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( STRING_2 , VAR_3 . METHOD_6 ( STRING_2 ) ) ; TYPE_4 . METHOD_5 ( STRING_3 , VAR_3 . METHOD_6 ( STRING_3 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_3 . assertEquals ( VAR_1 . getName ( ) , VAR_3 ) ; TYPE_3 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; TYPE_3 . METHOD_4 ( VAR_1 . getId ( ) ) ; TYPE_3 . assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_4 ) ; } 
private TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 VAR_1 ) { for ( TYPE_3 < org.ovirt.engine.core.compat.Guid , TYPE_4 > VAR_2 : VAR_3 . METHOD_2 ( ) ) { TYPE_1 . ValidationResult VAR_4 = VAR_1 . METHOD_3 ( METHOD_4 ( VAR_2 ) ) ; if ( ! ( VAR_4 . METHOD_5 ( ) ) ) { return VAR_4 ; } } return VAR_5 ; } 
private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.compat.Guid pool , TYPE_1 type ) { org.ovirt.engine.core.compat.Guid returnValue = VAR_1 ; java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( pool ) ; for ( TYPE_2 domain : VAR_2 ) { if ( ( domain . METHOD_3 ( ) ) == type ) { returnValue = domain . getId ( ) ; break ; } } return returnValue ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_3 = METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_5 = METHOD_3 ( VAR_2 ) ; VAR_5 . METHOD_4 ( VAR_4 ) ; METHOD_5 ( VAR_6 , VAR_7 ) ; METHOD_6 ( VAR_8 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_6 ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_8 ( ) ; TYPE_1 . METHOD_9 ( command . validate ( ) ) ; } 
private java.util.List < org.ovirt.engine.core.compat.Guid > METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_2 ( ) ) ; if ( ( TYPE_1 . METHOD_3 ( ) ) != null ) { VAR_1 . add ( TYPE_1 . METHOD_3 ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { cmd . METHOD_2 ( VAR_1 ) ; METHOD_3 ( true , VAR_2 , true , null ) ; TYPE_1 . METHOD_4 ( cmd . validate ( ) ) ; cmd . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( cmd ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_2 ) , TYPE_2 . METHOD_9 ( ) , TYPE_2 . METHOD_8 ( true ) ) ; org.mockito.Mockito . METHOD_6 ( cmd ) . METHOD_10 ( ) ; TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_11 ( ) ) ; } 
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_1 . METHOD_2 ( ) . isEmpty ( ) ) ) { return false ; } return TYPE_1 . METHOD_3 ( VAR_1 ) ? TYPE_2 . METHOD_4 ( VAR_1 ) : TYPE_2 . METHOD_5 ( VAR_1 ) ; } 
private TYPE_1 . AuditLogType METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( ) . getStatus ( ) ) == ( VAR_1 ) ) { return VAR_2 ; } if ( ( METHOD_3 ( ) ) == null ) { return VAR_3 ; } return VAR_4 ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.String name ) { if ( VAR_1 . METHOD_2 ( name ) ) { return ( ( java.lang.String ) ( ( VAR_1 . METHOD_3 ( name ) ) instanceof java.lang.String ? VAR_1 . METHOD_3 ( name ) : null ) ) ; } return null ; } 
public void METHOD_1 ( java.lang.String pool , java.lang.String user , java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Map < java.lang.String , java.lang.Object > VAR_3 ) throws java.lang.Exception { TYPE_1 VAR_4 = ( ( TYPE_1 ) ( METHOD_2 ( pool , VAR_3 ) . VAR_5 . METHOD_3 ( new TYPE_2 ( user , VAR_1 , VAR_2 ) ) ) ) ; if ( ( VAR_4 . METHOD_4 ( ) ) != ( VAR_6 ) ) { throw new TYPE_3 ( VAR_4 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = getEntity ( ) ; if ( ( VAR_1 != null ) && ( VAR_2 != null ) ) { org.ovirt.engine.core.compat.Guid VAR_3 = VAR_2 . METHOD_4 ( ) ; for ( TYPE_2 VAR_4 : VAR_1 ) { if ( VAR_3 == null ? VAR_4 . METHOD_5 ( ) : VAR_3 . equals ( VAR_4 . getId ( ) ) ) { METHOD_2 ( ) . setSelectedItem ( VAR_4 ) ; break ; } } } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { TYPE_5 VAR_2 = TYPE_6 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 ) ; VAR_2 = METHOD_4 ( VAR_1 , response , VAR_2 , VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == null ) { response . METHOD_5 ( VAR_4 ) ; } else { TYPE_6 . METHOD_6 ( VAR_1 , response , VAR_2 , type ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( false ) ; METHOD_4 ( ) ; command . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_7 ( ) ; TYPE_2 . METHOD_8 ( command . validate ( ) ) ; TYPE_2 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_3 . toString ( ) ) ) ; } 
void METHOD_1 ( ) { org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 = TYPE_1 . getModel ( ) . METHOD_2 ( ) ; TYPE_2 < ? > VAR_2 = METHOD_3 ( VAR_1 ) ; ( ( TYPE_2 < TYPE_3 > ) ( VAR_2 ) ) . METHOD_4 ( TYPE_1 . getModel ( ) . METHOD_5 ( ) ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; } 
public void setEntity ( java.lang.Object value ) { cluster = null ; super . setEntity ( value ) ; if ( ( getEntity ( ) ) != null ) { TYPE_1 . METHOD_1 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; METHOD_2 ( ) ; } } ) , ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity ( ) ) ) . METHOD_3 ( ) ) ; } } 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { return VAR_3 ; } TYPE_3 VAR_4 = new TYPE_3 ( VAR_1 ) ; TYPE_4 VAR_5 = new TYPE_4 ( VAR_4 ) ; java.lang.String VAR_6 = VAR_5 . METHOD_3 ( ) ; try { VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_4 ( ) ; } catch ( java.lang.Exception e ) { } if ( VAR_6 == null ) { return VAR_3 ; } return VAR_6 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ; TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , tempVar , aQuery ) ; } 
protected boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_2 VAR_1 = TYPE_1 . METHOD_3 ( ) ; if ( ! ( validate ( VAR_1 . METHOD_4 ( VAR_2 , VAR_3 , TYPE_1 . METHOD_5 ( ) ) ) ) ) { return false ; } METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getStoragePoolId ( ) , TYPE_1 . getVm ( ) . METHOD_5 ( ) ) ; } return super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( 0 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , true , true ) ; METHOD_8 ( VAR_4 . METHOD_9 ( VAR_3 [ 0 ] . toString ( ) , new TYPE_1 ( ) { { } } ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public TYPE_3 METHOD_3 ( ) { METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) . METHOD_9 ( ) ; return null ; } } ) ; METHOD_10 ( ) ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , true , true , false , false , false , true , true , METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( result . METHOD_4 ( ) . getId ( ) , VAR_3 ) ; dao . METHOD_5 ( result . getId ( ) ) ; TYPE_1 . METHOD_6 ( dao . METHOD_2 ( VAR_1 , VAR_2 ) ) ; TYPE_1 . METHOD_6 ( VAR_4 . get ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = new java.util.HashMap < TYPE_1 , TYPE_2 > ( ) ; VAR_2 = new TYPE_3 < TYPE_1 , TYPE_2 > ( VAR_1 ) ; VAR_3 = new TYPE_1 ( STRING_1 , 0 ) ; VAR_4 = new TYPE_2 ( VAR_5 , VAR_6 ) ; VAR_7 = new TYPE_1 ( STRING_2 , 0 ) ; VAR_8 = new TYPE_2 ( VAR_9 , VAR_10 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( false , VAR_2 ) ; cmd . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < TYPE_3 > VAR_1 = ( ( TYPE_4 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; for ( TYPE_3 VAR_2 : VAR_1 ) { model . METHOD_1 ( ) . setSelectedItem ( VAR_2 . METHOD_2 ( ) . name ( ) . METHOD_3 ( ) ) ; model . METHOD_4 ( ) . setSelectedItem ( VAR_2 . getModel ( ) . name ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . AddVmCommand < TYPE_2 > command = METHOD_2 ( 0 , 0 ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_3 . StorageDomain class ) ) ; TYPE_4 . METHOD_5 ( command . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 , INT_1 ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_3 = METHOD_3 ( VAR_4 , VAR_5 ) ; VAR_3 . METHOD_4 ( INT_2 ) ; METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_3 ) ; } 
private java.util.List < TYPE_1 . Network > METHOD_1 ( java.lang.String VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = getEntity ( VAR_3 . VDSGroup class , VAR_4 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( VAR_1 ) ) , null ) . getStoragePoolId ( ) ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( VAR_2 ) ) ; return METHOD_3 ( VAR_5 , params ) ; } 
protected void METHOD_1 ( ) { getParameters ( ) . METHOD_2 ( new TYPE_1 ( VAR_1 . VM , TYPE_2 . METHOD_3 ( ) ) ) ; if ( ( TYPE_2 . getVm ( ) ) != null ) { METHOD_4 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) ) ; } } 
public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 model , java.util.List < TYPE_1 > template ) { if ( ( model . METHOD_2 ( ) ) != null ) { java.util.List < TYPE_1 > result = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_1 : model . METHOD_2 ( ) ) { try { TYPE_3 source = TYPE_3 . METHOD_3 ( VAR_1 ) ; result . add ( TYPE_4 . map ( source , null ) ) ; } catch ( TYPE_5 VAR_2 ) { } } return result ; } return null ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 vm ) { java.lang.Object [ ] VAR_2 = ( ( java.lang.Object [ ] ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ; if ( VAR_2 != null ) { java.util.ArrayList < java.lang.Object > VAR_4 = new java.util.ArrayList < java.lang.Object > ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; vm . METHOD_4 ( TYPE_4 . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; if ( ( getModel ( ) . METHOD_7 ( ) . getSelectedItem ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel ( ) . METHOD_7 ( ) . getSelectedItem ( ) ; METHOD_8 ( template . METHOD_9 ( ) , template . METHOD_10 ( ) ) ; } METHOD_11 ( ) ; METHOD_12 ( ) ; METHOD_13 ( ) ; METHOD_14 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( true ) ; TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_4 . METHOD_4 ( STRING_1 , ( ( VAR_4 . METHOD_5 ( cluster , VAR_1 ) . size ( ) ) == 2 ) ) ; TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) . equals ( VAR_4 . METHOD_5 ( cluster , VAR_1 ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . VdcActionParametersBase VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 . VdcActionParametersBase class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ; TYPE_3 < TYPE_1 . VdcActionParametersBase > command = org.mockito.Mockito . METHOD_6 ( new TYPE_4 ( VAR_1 ) ) ; command . METHOD_7 ( ) ; command . METHOD_8 ( ) ; org.mockito.Mockito . METHOD_9 ( command ) . METHOD_10 ( ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { if ( ( storage . METHOD_2 ( ) . METHOD_3 ( ) ) && ( ! ( storage . METHOD_2 ( ) . equals ( VAR_1 ) ) ) ) { TYPE_1 VAR_2 = storage . METHOD_4 ( ) ; return ( VAR_2 . METHOD_5 ( ) ) && ( METHOD_6 ( storage ) ) ; } return false ; } 
public TYPE_1 . AuditLogType METHOD_1 ( ) { switch ( TYPE_2 . METHOD_2 ( ) ) { case VAR_1 : if ( ! ( getParameters ( ) . METHOD_3 ( ) ) ) { return VAR_2 ; } if ( ( METHOD_4 ( ) ) && ( TYPE_2 . getSucceeded ( ) ) ) { return VAR_3 ; } break ; case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_2 ; } return VAR_7 ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( super . equals ( obj ) ) ) { return false ; } if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > VAR_3 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; TYPE_3 . METHOD_2 ( VAR_3 , new TYPE_4 ( ) ) ; VAR_2 . setItems ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) ; METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_4 ) { METHOD_8 ( VAR_4 , VAR_5 , new TYPE_2 ( VAR_6 ) ) ; } } 
protected void METHOD_1 ( ) { METHOD_2 ( null ) ; if ( ( getVm ( ) ) != null ) { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( getVm ( ) ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( ) ) ; METHOD_9 ( ) . METHOD_7 ( METHOD_8 ( ) ) ; METHOD_10 ( ) . METHOD_7 ( METHOD_8 ( ) ) ; METHOD_11 ( true ) ; } else { METHOD_2 ( getParameters ( ) . getVm ( ) ) ; getReturnValue ( ) . METHOD_12 ( false ) ; } } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , false , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { if ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) { METHOD_4 ( VAR_1 ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) ) ; super . METHOD_1 ( ) ; } } } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.String [ ] VAR_1 ) { java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 < java.lang.String > METHOD_4 ( VAR_4 , vds . METHOD_5 ( ) . getValue ( ) ) . METHOD_6 ( STRING_1 ) ) , VAR_1 ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { METHOD_7 ( vds , VAR_2 ) ; return true ; } return false ; } 
public void METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { model . METHOD_2 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_1 = new TYPE_3 ( METHOD_3 ( model . getId ( ) ) ) ; java.util.List < TYPE_4 > VAR_2 = VAR_1 . METHOD_4 ( entity ) ; for ( TYPE_4 VAR_3 : VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_4 , VAR_3 , VAR_1 . METHOD_6 ( ) ) ; } model . METHOD_4 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; host . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; final TYPE_1 VAR_1 = new TYPE_1 ( ) ; host . METHOD_3 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( TYPE_3 . any ( ) ) ) . thenReturn ( VAR_6 ) ; } 
public boolean METHOD_1 ( TYPE_1 a ) { return ( ( ( ( a . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( a . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( a . METHOD_3 ( ) ) != null ) ) && ( ( a . METHOD_3 ( ) ) == ( VAR_3 ) ) ; } 
private < TYPE_1 extends TYPE_2 > org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.common.businessentities.VM vm , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { java.util.List < TYPE_3 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > VAR_2 = VAR_1 . METHOD_2 ( new TYPE_4 ( ) , hosts , vm , null ) ; VAR_2 . METHOD_3 ( TYPE_5 . METHOD_4 ( TYPE_6 : : METHOD_5 ) ) ; return VAR_2 . get ( 0 ) . METHOD_6 ( ) ; } 
protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) . getValue ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_5 ( ) , VAR_1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 , VAR_1 , true ) ; VAR_2 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , VAR_2 . METHOD_3 ( VAR_3 , VAR_1 , false ) ) ; METHOD_6 ( ) ; } 
private void METHOD_1 ( TYPE_1 constants ) { VAR_1 . METHOD_2 ( constants . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( constants . METHOD_5 ( ) ) ; VAR_3 . METHOD_4 ( constants . METHOD_6 ( ) ) ; VAR_4 . METHOD_4 ( constants . METHOD_7 ( ) ) ; VAR_5 . METHOD_2 ( constants . METHOD_8 ( ) ) ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final java.util.List < java.lang.String > VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.util.List < java.lang.String > VAR_4 : TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) { VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , TYPE_4 . METHOD_5 ( VAR_4 , VAR_5 ) ) ) ; } return VAR_3 ; } 
private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , TYPE_2 VAR_2 ) { command . getParameters ( ) . METHOD_2 ( VAR_2 ) ; TYPE_3 VAR_3 = org.mockito.Mockito . METHOD_3 ( VAR_4 class ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( TYPE_4 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; } 
private java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > map = new java.util.HashMap < > ( ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . getId ( ) , map , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( ) ) ; } return map ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; if ( VAR_2 == null ) { METHOD_2 ( VAR_5 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_4 ( ) ) ; } VAR_6 . METHOD_5 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_2 ( VAR_1 , VAR_3 ) , aQuery ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 < TYPE_1 > cmd = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_2 = new java.util.ArrayList < TYPE_4 > ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_2 . add ( VAR_3 ) ; java.util.List < TYPE_4 > VAR_5 = cmd . METHOD_4 ( VAR_2 ) ; TYPE_5 . METHOD_5 ( ( ! ( VAR_5 . isEmpty ( ) ) ) ) ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 , final java.util.List < TYPE_2 . VdcActionParametersBase > VAR_3 ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_4 , VAR_3 , new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { TYPE_5 VAR_5 = new TYPE_5 ( ) { public void METHOD_4 ( ) { METHOD_5 ( VAR_1 , VAR_2 ) ; } } ; VAR_5 . METHOD_6 ( INT_1 ) ; } } , this ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , new TYPE_3 ( VAR_3 . METHOD_3 ( ) ) ) ; if ( VAR_1 . getSucceeded ( ) ) { VAR_4 = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_4 > ) ( VAR_1 . getReturnValue ( ) ) ) ; METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } } 
void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( new TYPE_2 < TYPE_3 > ( ) ) ; VAR_2 = new TYPE_1 ( new TYPE_4 ( ) ) ; VAR_3 = new TYPE_1 < TYPE_5 > ( new TYPE_2 < TYPE_5 > ( ) ) ; VAR_4 = new TYPE_1 ( new TYPE_4 ( ) ) ; VAR_5 = new TYPE_1 ( new TYPE_6 < TYPE_7 > ( ) ) ; VAR_6 = new TYPE_1 ( new TYPE_6 < TYPE_8 > ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = VAR_2 . get ( VAR_4 ) ; VAR_5 = dao . get ( VAR_3 . getId ( ) ) ; VAR_6 = new TYPE_1 ( VAR_7 , VAR_8 , 1 ) ; } 
public void METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; try { if ( ! ( VAR_3 ) ) { METHOD_4 ( STRING_1 ) ; } for ( java.lang.String VAR_4 : VAR_1 ) { METHOD_5 ( VAR_4 ) ; } } finally { VAR_2 . METHOD_2 ( ) . METHOD_6 ( ) ; } } 
public void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 parameters = new TYPE_1 ( false , VAR_2 ) ; parameters . METHOD_2 ( VAR_1 ) ; TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_3 , parameters , TYPE_3 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; java.util.List < TYPE_2 > VAR_3 = ( VAR_1 != null ) ? new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_3 ( VAR_1 ) ) : new java.util.ArrayList < TYPE_2 > ( ) ; this . METHOD_4 ( VAR_3 ) ; } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { METHOD_1 ( ) . setItems ( ( ( java.util.List < TYPE_1 > ) ( VAR_2 ) ) ) ; VAR_3 . METHOD_2 ( METHOD_1 ( ) , METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( true ) ; METHOD_6 ( ) ; } 
private void METHOD_1 ( ) { TYPE_1 returnValue = new TYPE_1 ( ) ; returnValue . METHOD_2 ( true ) ; returnValue . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 ) , TYPE_3 . any ( VAR_3 class ) ) ) . thenReturn ( returnValue ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; } } ; TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; java.lang.Boolean VAR_2 = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . toString ( ) ) ) ) ; return ( VAR_2 && ( VAR_1 . METHOD_5 ( ) ) ) && ( ! ( VAR_1 . METHOD_6 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ; TYPE_3 entity = getEntity ( VAR_2 , true ) ; return METHOD_2 ( VAR_1 , entity , map ( entity ) , VAR_2 , VAR_5 , new TYPE_4 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_2 ) { org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , TYPE_2 . any ( VAR_4 class ) , TYPE_2 . any ( VAR_5 class ) ) ; } else { org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , TYPE_2 . any ( VAR_4 class ) ) ; } } 
protected boolean METHOD_1 ( ) { if ( ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . getVm ( ) . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . getId ( ) ) ) ) ) { return false ; } return true ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ; } 
protected void METHOD_1 ( ) { java.lang.String version = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( version ) ; java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.lang.String > > map = VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( map ) ; TYPE_1 . METHOD_4 ( ) . METHOD_6 ( ( ( map . size ( ) ) > 0 ) ) ; } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > VAR_1 = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ; for ( TYPE_2 a : VAR_2 . Linq < TYPE_2 > METHOD_2 ( METHOD_3 ( ) ) ) { VAR_1 . add ( new TYPE_3 ( a . getId ( ) , getEntity ( ) . getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_3 , VAR_1 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( METHOD_2 ( ) , ( ( java.lang.Integer ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) , VAR_1 ) ; if ( ! ( ( ( ( TYPE_2 ) ( model ) ) . METHOD_3 ( ) ) instanceof TYPE_3 ) ) { METHOD_1 ( METHOD_4 ( ) , ( ( java.lang.Integer ) ( METHOD_2 ( ) . getEntity ( ) ) ) , 1 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , params , aQuery ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( result ) ; dao . METHOD_4 ( result . getId ( ) ) ; result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_5 ( result ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_4 . METHOD_3 ( ) . getId ( ) , TYPE_4 . getParameters ( ) . METHOD_4 ( ) ) , TYPE_4 . METHOD_3 ( ) . METHOD_5 ( ) , TYPE_4 . METHOD_3 ( ) . METHOD_6 ( ) ) ; TYPE_4 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface = METHOD_2 ( ) ; METHOD_3 ( iface , true , METHOD_4 ( iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , iface . METHOD_8 ( ) ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( VAR_3 . getName ( ) ) ; VAR_4 . setId ( VAR_3 . getId ( ) ) ; VAR_2 . add ( VAR_4 ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) ; METHOD_3 ( cmd , false ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; } 
protected void METHOD_1 ( TYPE_1 cmd , boolean VAR_1 , TYPE_2 VAR_2 ) { org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; if ( ! VAR_1 ) { VAR_4 . METHOD_5 ( new TYPE_4 ( VAR_2 , STRING_1 ) ) ; } org.mockito.Mockito.when ( VAR_5 . METHOD_6 ( TYPE_5 . any ( VAR_6 class ) , TYPE_5 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_4 ) ; } 
private org.ovirt.engine.core.common.businessentities.VDS METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( INT_1 ) ; VAR_2 . METHOD_4 ( STRING_2 ) ; VAR_2 . METHOD_5 ( STRING_3 ) ; VAR_2 . METHOD_6 ( STRING_4 ) ; VAR_2 . METHOD_7 ( new org.ovirt.engine.core.compat . Version ( STRING_5 ) ) ; VAR_2 . METHOD_8 ( org.ovirt.engine.core.compat.Guid . METHOD_9 ( ) ) ; VAR_2 . setId ( VAR_1 ) ; return VAR_2 ; } 
public void METHOD_1 ( long VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = null ; TYPE_3 VAR_3 = null ; try { VAR_2 = VAR_4 . METHOD_2 ( ) ; VAR_3 = VAR_2 . METHOD_3 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) ; VAR_3 . METHOD_4 ( 1 , VAR_1 ) ; int VAR_5 = VAR_3 . METHOD_5 ( ) ; if ( VAR_5 != 1 ) { VAR_6 . error ( STRING_5 , VAR_1 ) ; } } finally { TYPE_4 . METHOD_6 ( VAR_3 , VAR_2 ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { boolean returnValue = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( returnValue ) { command . METHOD_1 ( ) ; } else { METHOD_2 ( command ) ; } } 
public void METHOD_1 ( ) { command . getParameters ( ) . METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_1 ) ; command . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( ( ( command . METHOD_9 ( ) . size ( ) ) == 1 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( true ) ; TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( STRING_1 , STRING_2 ) ) ; TYPE_2 . METHOD_4 ( STRING_3 , VAR_1 . METHOD_3 ( STRING_4 , STRING_2 ) ) ; TYPE_2 . METHOD_4 ( STRING_5 , VAR_1 . METHOD_3 ( STRING_1 , STRING_6 ) ) ; TYPE_2 . METHOD_4 ( STRING_7 , VAR_1 . METHOD_3 ( STRING_1 , null ) ) ; TYPE_2 . METHOD_4 ( STRING_8 , VAR_1 . METHOD_3 ( null , STRING_2 ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 type ) { TYPE_3 VAR_1 = type . METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_1 , true ) ; VAR_2 . METHOD_4 ( VAR_3 . List class ) ; VAR_2 . METHOD_5 ( ( ( STRING_1 + ( VAR_2 . METHOD_6 ( ) ) ) + STRING_2 ) ) ; return VAR_2 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = METHOD_1 ( ) ; VAR_1 . setItems ( hosts ) ; VAR_1 . METHOD_2 ( true ) ; METHOD_3 ( true ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_3 ( ) : true ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain . setId ( VAR_1 ) ; storageDomain . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) ; } 
public void METHOD_1 ( TYPE_1 result ) { getWindow ( ) . METHOD_2 ( ) ; TYPE_2 returnValue = result . getReturnValue ( ) ; if ( ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) { METHOD_3 ( null ) ; METHOD_4 ( ) ; METHOD_5 ( returnValue ) ; } else { METHOD_6 ( ) ; } super . METHOD_1 ( result ) ; } 
static java.lang.String METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.lang.String returnValue = VAR_1 ; if ( VAR_2 != null ) { java.util.Map < java.lang.String , java.lang.String > map = TYPE_2 . METHOD_2 ( VAR_2 ) ; returnValue = TYPE_2 . METHOD_1 ( VAR_1 , map ) ; } return returnValue ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_2 . Disk , VAR_3 ) ) ; } return VAR_1 ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_3 ) ) ; org.ovirt.engine.core.compat.Guid VAR_4 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . Network VAR_5 = VAR_2 . METHOD_3 ( VAR_4 , null , VAR_1 ) ; if ( VAR_5 != null ) { return VAR_5 . getId ( ) . toString ( ) ; } return null ; } 
private void METHOD_1 ( TYPE_1 parameters , org.ovirt.engine.core.common.businessentities.VM VAR_1 ) { if ( TYPE_2 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) { TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_1 , ( parameters . METHOD_5 ( ) ? VAR_2 : VAR_3 ) ) ; } } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . METHOD_4 ( ( ( result . size ( ) ) == 1 ) ) ; TYPE_1 . assertEquals ( result . get ( 0 ) . getId ( ) , VAR_2 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , vds . getId ( ) , vds . METHOD_3 ( ) ) ; TYPE_1 params = new TYPE_1 ( vds . getId ( ) , VAR_2 ) ; params . METHOD_4 ( VAR_3 ) ; TYPE_2 . getInstance ( ) . METHOD_5 ( VAR_4 , params , TYPE_3 . METHOD_6 ( ) ) ; METHOD_7 ( vds ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; cluster = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ; VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_3 = STRING_3 ; VAR_4 = new org.ovirt.engine.core.common.businessentities . network ( ) ; VAR_4 . METHOD_4 ( STRING_4 ) ; VAR_4 . METHOD_5 ( STRING_5 ) ; VAR_4 . METHOD_6 ( VAR_2 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_2 . Disk , VAR_3 ) ) ; VAR_1 . add ( new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_2 . Disk , VAR_4 ) ) ; } return VAR_1 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , VAR_1 , aQuery ) ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ; METHOD_2 ( VAR_2 , getParameters ( ) . METHOD_4 ( ) ) ; METHOD_2 ( VAR_3 , getParameters ( ) . METHOD_5 ( ) ) ; METHOD_2 ( VAR_4 , getParameters ( ) . METHOD_6 ( ) ) ; METHOD_2 ( VAR_5 , TYPE_1 . name ( ) ) ; return super . METHOD_1 ( ) ; } 
private java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.String ... VAR_1 ) { java.util.ArrayList < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( VAR_1 . length ) ; for ( java.lang.String e : VAR_1 ) { list . add ( e . METHOD_2 ( ) ) ; } return list ; } 
public void METHOD_1 ( ) { validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , cluster , VAR_2 ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( VAR_3 class ) ) ; TYPE_3 . METHOD_4 ( validator . METHOD_1 ( TYPE_4 . instance ( ) . METHOD_5 ( VAR_3 class ) ) , TYPE_5 . METHOD_6 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS host = context . host ; if ( ( host . getStoragePoolId ( ) ) != null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) , host . getStoragePoolId ( ) ) ; } else { METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; java.util.List < TYPE_1 . DiskImage > VAR_1 = TYPE_2 . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_3 . ValidationResult ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_6 ( VAR_1 ) ; TYPE_4 . METHOD_7 ( cmd , VAR_4 ) ; org.mockito.Mockito . METHOD_8 ( VAR_3 ) . METHOD_6 ( VAR_1 ) ; } 
public synchronized void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; if ( ( METHOD_2 ( ) ) && ( VAR_1 ) ) { VAR_2 . METHOD_4 ( STRING_1 , VAR_3 < java.lang.Integer > METHOD_5 ( VAR_4 ) ) ; VAR_1 = false ; } if ( ( VAR_5 . size ( ) ) > 0 ) { METHOD_6 ( ) ; } } } 
public static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { for ( int i = 0 ; i < VAR_2 ; i ++ ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 . getId ( ) ) , VAR_3 , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( VAR_1 ) , true , false ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { final java.util.Map < java.lang.Integer , TYPE_1 > VAR_1 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; if ( ( VAR_1 . get ( VAR_2 ) ) == null ) { throw new TYPE_3 ( STRING_1 ) ; } VAR_3 = TYPE_4 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_3 ( ) ; cmd . getParameters ( ) . getVm ( ) . METHOD_4 ( VAR_1 ) ; cluster . METHOD_5 ( VAR_1 ) ; cluster . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { java.lang.String VAR_2 = METHOD_2 ( VAR_1 ) ; if ( null == VAR_2 ) { VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } TYPE_1 VAR_3 = TYPE_3 . METHOD_5 ( VAR_2 , true ) ; return VAR_3 ; } 
private static java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { java.util.Map < java.lang.String , java.lang.String > returnValue = new java.util.HashMap < java.lang.String , java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ; TYPE_2 < java.lang.String > VAR_3 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 != null ) && ( ( VAR_3 . size ( ) ) > 0 ) ) { TYPE_4 . METHOD_4 ( VAR_2 , VAR_3 , returnValue ) ; } return returnValue ; } 
private TYPE_1 . AddVmCommand < TYPE_2 > METHOD_1 ( final int VAR_1 , final int VAR_2 , final int VAR_3 ) { org.ovirt.engine.core.common.businessentities.VM vm = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 . AddVmCommand < TYPE_2 > cmd = METHOD_3 ( vm ) ; TYPE_3 . METHOD_4 ( cmd ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) ; return cmd ; } 
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 i : VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( i . METHOD_3 ( ) ) ) ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) ; TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 , VAR_3 ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 nic = new TYPE_1 ( ) ; nic . setId ( VAR_1 ) ; nic . METHOD_2 ( new TYPE_2 ( ) ) ; nic . getVm ( ) . setId ( VAR_2 ) ; TYPE_3 . METHOD_3 ( METHOD_4 ( ) , nic ) ; assertEquals ( VAR_3 , nic . METHOD_5 ( ) ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) { return true ; } if ( ! ( VAR_1 . METHOD_5 ( TYPE_2 . getVm ( ) . METHOD_6 ( ) . METHOD_7 ( ) , METHOD_8 ( ) ) ) ) { METHOD_9 ( STRING_1 , TYPE_2 . getVdsGroup ( ) . METHOD_10 ( ) ) ; return METHOD_11 ( VAR_2 ) ; } return true ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = resource . METHOD_2 ( ) . METHOD_2 ( ) . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( VAR_5 ) ; VAR_1 . METHOD_7 ( VAR_6 ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { if ( VAR_1 != null ) { java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_4 : VAR_3 ) { if ( VAR_1 . equals ( VAR_4 . METHOD_4 ( ) ) ) { return true ; } } } return false ; } 
void METHOD_1 ( ) { TYPE_1 . VdcQueryReturnValue returnValue = new TYPE_1 . VdcQueryReturnValue ( ) ; returnValue . METHOD_2 ( true ) ; returnValue . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . runQuery ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_3 . METHOD_5 ( VAR_4 class ) ) ) . thenReturn ( returnValue ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; if ( ( ( cluster != null ) && ( cluster . METHOD_1 ( ) ) ) && ( ! ( cluster . METHOD_2 ( ) ) ) ) { model . METHOD_3 ( ) . METHOD_4 ( true ) ; } model . METHOD_5 ( ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( VAR_2 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; TYPE_2 . METHOD_1 ( METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) , VAR_2 , VAR_2 . METHOD_8 ( ) , true , VAR_1 , VAR_3 , VAR_4 , TYPE_3 . getParameters ( ) . METHOD_9 ( ) , TYPE_3 . getParameters ( ) . METHOD_10 ( ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 map = VAR_1 . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( map ) ; TYPE_3 . METHOD_3 ( ) . METHOD_5 ( ( ( map . METHOD_6 ( ) . size ( ) ) > 0 ) ) ; } 
private TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_1 . METHOD_3 ( ) ; org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . getId ( ) ; return METHOD_4 ( VAR_4 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 parameters = null ; try { parameters = VAR_2 . METHOD_2 ( ) ; parameters . getParameters ( ) . add ( new TYPE_2 ( VAR_1 , null , VAR_3 , VAR_4 , 1 , 1 ) ) ; } catch ( TYPE_3 e ) { } return VAR_5 . METHOD_3 ( parameters ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( getVdsGroup ( ) , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_3 ) ; } 
protected static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_4 . DiskImage > VAR_1 ) { java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_2 > VAR_2 = new java.util.HashMap < > ( ) ; for ( TYPE_4 . Disk diskImage : VAR_1 ) { VAR_2 . put ( diskImage . getId ( ) , diskImage ) ; } return new TYPE_5 ( VAR_2 . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] VAR_1 = ( ( java.lang.Object [ ] ) ( target ) ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ; VAR_3 = ( ( java.lang.Integer ) ( returnValue ) ) ; VAR_2 . METHOD_2 ( ) ; } 
public static void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 pool : VAR_1 ) { if ( ( pool . METHOD_4 ( ) ) == ( VAR_2 ) ) { TYPE_2 . METHOD_5 ( pool . getId ( ) , VAR_3 ) ; } } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) ; final boolean VAR_1 = ( VAR_2 . size ( ) ) > 0 ; if ( VAR_1 ) { TYPE_3 . METHOD_5 ( new TYPE_4 < TYPE_5 > ( ) { public TYPE_5 METHOD_6 ( ) { if ( METHOD_7 ( ) ) { TYPE_6 . METHOD_8 ( METHOD_9 ( ) ) ; METHOD_10 ( true ) ; } return null ; } } ) ; } else { METHOD_11 ( ) ; } } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( VAR_2 ) != null ) { METHOD_2 ( VAR_2 ) ; } VAR_3 = true ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( STRING_1 , VAR_2 . StoragePool ) , aQuery ) ; } 
private void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_5 ) ; VAR_1 . add ( VAR_2 ) ; VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_6 ) ; VAR_2 . METHOD_3 ( VAR_7 ) ; VAR_2 . METHOD_4 ( VAR_5 ) ; VAR_1 . add ( VAR_2 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ! ( ( java.lang.Boolean ) ( model . METHOD_6 ( ) . getEntity ( ) ) ) ) ) ; } 
public TYPE_1 getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_2 > VAR_1 ) { if ( ( VAR_1 . getEntity ( ) . METHOD_1 ( ) ) == ( VAR_2 ) ) { return VAR_3 . METHOD_2 ( ) ; } else if ( ( VAR_1 . getEntity ( ) . METHOD_1 ( ) ) == ( VAR_4 ) ) { return VAR_3 . METHOD_3 ( ) ; } else if ( ( VAR_1 . getEntity ( ) . METHOD_1 ( ) ) == ( VAR_5 ) ) { return VAR_3 . METHOD_4 ( ) ; } return null ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_3 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_4 = TYPE_4 . map ( VAR_3 , null ) ; assertEquals ( VAR_4 . getStatus ( ) . METHOD_3 ( ) , VAR_2 . value ( ) ) ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_1 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) { { METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; } } ; } 
protected boolean METHOD_1 ( final TYPE_1 ... VAR_1 ) { boolean VAR_2 = false ; TYPE_1 status = METHOD_2 ( ) ; if ( status != null ) { VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) . METHOD_4 ( status ) ; } if ( ! VAR_2 ) { if ( status . METHOD_5 ( ) ) { return METHOD_6 ( VAR_3 ) ; } METHOD_7 ( ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = 2 ; METHOD_2 ( VAR_2 , VAR_3 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 } , METHOD_3 ( VAR_1 ) ) ; TYPE_1 VAR_5 = METHOD_4 ( null ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; VAR_7 . METHOD_6 ( ) ; java.util.List < TYPE_2 > VAR_8 = METHOD_7 ( ) ; METHOD_8 ( VAR_8 ) ; assertEquals ( VAR_1 , VAR_8 . size ( ) ) ; } 
public static boolean METHOD_1 ( TYPE_1 iface , org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . Network > VAR_2 = TYPE_2 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) ; java.lang.String VAR_3 = iface . METHOD_5 ( ) ; return ( VAR_2 . METHOD_6 ( VAR_3 ) ) && ( VAR_2 . get ( VAR_3 ) . METHOD_7 ( ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > entity , TYPE_1 template ) { TYPE_1 result = ( template == null ) ? new TYPE_1 ( ) : template ; if ( entity != null ) { for ( TYPE_3 source : entity ) { TYPE_4 VAR_1 = TYPE_5 . map ( source , null ) ; result . METHOD_2 ( ) . add ( VAR_1 . name ( ) ) ; } } return result ; } 
public TYPE_1 < ? > METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_3 ( domain , name , VAR_1 ) ) ; TYPE_4 VAR_5 = ( ( TYPE_4 ) ( VAR_2 . getReturnValue ( ) ) ) ; return new TYPE_5 ( VAR_5 ) ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = false ; try { VAR_2 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; VAR_1 = TYPE_1 . METHOD_4 ( ) . getSucceeded ( ) ; } catch ( TYPE_2 VAR_3 ) { VAR_2 . error ( STRING_2 , VAR_3 ) ; } finally { METHOD_5 ( ) ; } return VAR_1 ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( ) . add ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = METHOD_2 ( VAR_1 . METHOD_5 ( ) ) ; VAR_4 = METHOD_2 ( VAR_1 . METHOD_6 ( ) ) ; VAR_5 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_6 = new TYPE_1 ( ) ; VAR_6 . METHOD_7 ( STRING_2 ) ; VAR_6 . METHOD_8 ( STRING_3 ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; if ( ( TYPE_1 . METHOD_3 ( ) ) == null ) { TYPE_1 . METHOD_4 ( false ) ; log . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ; TYPE_1 . getReturnValue ( ) . METHOD_8 ( false ) ; return ; } VAR_1 = METHOD_9 ( ) ; TYPE_1 . getReturnValue ( ) . METHOD_8 ( ( ( VAR_1 ) == ( VAR_2 ) ) ) ; } 
private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 , TYPE_1 < ? > VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return false ; } switch ( VAR_3 . METHOD_3 ( ) ) { case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : VAR_2 . METHOD_4 ( VAR_9 ) ; return true ; case VAR_10 : VAR_2 . METHOD_4 ( VAR_11 ) ; return true ; } return true ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : INT_1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_3 : VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_5 ( VAR_3 . getId ( ) ) ; } } 
protected void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == 0 ) { METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; } else { METHOD_3 ( VAR_3 ) ; METHOD_5 ( METHOD_2 ( ) ) ; } TYPE_1 . METHOD_6 ( true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 , getEntity ( 0 ) ) ; METHOD_3 ( 1 ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 . StorageDomain model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_7 ( model ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_9 ( VAR_3 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( true ) ; TYPE_2 . assertEquals ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( STRING_1 ) ) ; TYPE_2 . METHOD_3 ( STRING_3 , VAR_1 . METHOD_2 ( STRING_4 ) ) ; TYPE_2 . METHOD_3 ( STRING_5 , VAR_1 . METHOD_2 ( null ) ) ; } 
protected void METHOD_1 ( int VAR_1 , boolean VAR_2 , org.ovirt.engine.core.common.businessentities.VDS entity ) throws java.lang.Exception { while ( ( VAR_1 -- ) > 0 ) { METHOD_1 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , ( VAR_2 ? null : entity ) ) ; } if ( ! VAR_2 ) { METHOD_2 ( ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , true ) ; TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , true ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; METHOD_5 ( false , VAR_2 . METHOD_6 ( ) , 1 , VAR_1 ) ; METHOD_5 ( true , VAR_2 . METHOD_6 ( ) , 2 , 1 , VAR_1 ) ; METHOD_7 ( new java.util.ArrayList < TYPE_1 > ( TYPE_2 . METHOD_8 ( VAR_2 , VAR_3 ) ) , 1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , null ) ; VAR_4 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { response . METHOD_2 ( STRING_1 ) ; TYPE_5 VAR_2 = response . METHOD_3 ( ) ; java.lang.String VAR_3 = VAR_4 < java.lang.String > METHOD_4 ( VAR_5 ) ; if ( TYPE_6 . isEmpty ( VAR_3 ) ) { METHOD_5 ( VAR_2 , STRING_2 ) ; } else { response . METHOD_6 ( VAR_3 ) ; } } 
private void METHOD_1 ( TYPE_1 list ) { METHOD_2 ( list . METHOD_3 ( ) ) ; METHOD_2 ( list . METHOD_3 ( ) . METHOD_4 ( ) ) ; METHOD_2 ( list . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) ) ; assertEquals ( list . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_5 ( ) , VAR_1 ) ; assertEquals ( list . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_6 ( ) , VAR_2 ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( ) ; if ( METHOD_3 ( ) ) { java.lang.String VAR_1 = METHOD_4 ( ) . METHOD_5 ( this , STRING_1 , new TYPE_1 [ 0 ] , new java.lang.Object [ 0 ] , 0 , VAR_2 ) ; VAR_3 . put ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) , VAR_1 ) ; } } 
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { if ( ( ( object . METHOD_1 ( ) ) == ( VAR_1 ) ) || ( ( object . METHOD_1 ( ) ) == ( VAR_2 ) ) ) return STRING_1 ; else return VAR_3 . METHOD_2 ( METHOD_3 ( object ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String name ) throws TYPE_2 { VAR_1 . METHOD_2 ( STRING_1 , name ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( name ) ; java.util.List < TYPE_1 > VAR_3 ; if ( ( VAR_2 . size ( ) ) == 1 ) { VAR_3 = VAR_2 ; } else { VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_2 ) ; TYPE_3 . METHOD_4 ( VAR_3 , VAR_4 ) ; } VAR_1 . METHOD_2 ( STRING_2 , VAR_3 ) ; return VAR_3 ; } 
public boolean METHOD_1 ( TYPE_1 . VDS VAR_1 , TYPE_1 . VDS VAR_2 , TYPE_1 . VM vm ) { return ( ( VAR_1 . METHOD_2 ( ) ) - ( VAR_1 . METHOD_3 ( ) ) ) < ( ( VAR_2 . METHOD_2 ( ) ) - ( VAR_2 . METHOD_3 ( ) ) ) ; } 
public java.util.HashMap < java.lang.Integer , java.lang.String > METHOD_1 ( ) { java.util.HashMap < java.lang.Integer , java.lang.String > VAR_1 = new java.util.HashMap < > ( ) ; for ( int VAR_2 : METHOD_2 ( ) ) { java.lang.String name = METHOD_3 ( VAR_3 . get ( VAR_2 ) , STRING_1 , null ) ; if ( name != null ) { VAR_1 . put ( VAR_2 , name ) ; } } return VAR_1 ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { VAR_1 . METHOD_2 ( STRING_1 , cluster . METHOD_3 ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = METHOD_4 ( ) . METHOD_5 ( cluster . getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_3 = METHOD_6 ( ) . METHOD_7 ( cluster . getId ( ) ) ; if ( VAR_3 == null ) { VAR_1 . METHOD_2 ( STRING_2 , cluster . METHOD_3 ( ) ) ; return ; } METHOD_8 ( cluster , VAR_3 , VAR_2 ) ; METHOD_9 ( cluster , VAR_3 , VAR_2 ) ; } 
public static < TYPE_1 extends org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { if ( VAR_1 != null ) { java.util.Map < java.lang.String , TYPE_1 > map = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( TYPE_1 e : VAR_1 ) { map . put ( e . METHOD_2 ( ) , e ) ; } return map ; } else { return TYPE_3 . METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 . assertEquals ( STRING_1 , VAR_4 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_6 ( STRING_2 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; } 
private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_3 = TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 ) ; TYPE_2 VAR_4 = METHOD_5 ( VAR_3 ) ; return ( ( validate ( VAR_4 . METHOD_6 ( ) ) ) && ( validate ( VAR_4 . METHOD_7 ( ) ) ) ) && ( validate ( VAR_4 . METHOD_8 ( VAR_1 , VAR_2 ) ) ) ; } 
private static java.util.List < org.ovirt.engine.core.compat.Guid > METHOD_1 ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VM > vms , boolean VAR_1 , boolean VAR_2 ) { final java.util.List < org.ovirt.engine.core.compat.Guid > result = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { if ( VAR_1 ) { result . add ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) ; } if ( VAR_2 ) { result . add ( vm . METHOD_2 ( ) . METHOD_4 ( ) ) ; } } return result ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network VAR_1 = METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.common.businessentities.network.Network VAR_2 = METHOD_2 ( STRING_2 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = METHOD_4 ( STRING_3 , VAR_1 ) ; METHOD_5 ( nic ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_3 = METHOD_6 ( nic . getName ( ) , INT_1 , VAR_2 . getName ( ) ) ; VAR_3 . METHOD_7 ( null ) ; TYPE_1 VAR_4 = METHOD_8 ( METHOD_9 ( nic , VAR_3 ) ) ; METHOD_10 ( VAR_4 , VAR_5 , nic . getName ( ) ) ; } 
protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) ; TYPE_1 . METHOD_5 ( ) ; TYPE_2 domain = TYPE_1 . METHOD_6 ( VAR_2 ) ; domain . setId ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; METHOD_7 ( domain ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 , new TYPE_1 ( vm . getId ( ) ) ) ) ; setItems ( METHOD_4 ( ) . METHOD_5 ( ) ) ; } 
public static java.lang.String METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 , java.lang.String VAR_2 ) { if ( VAR_1 == null ) { return STRING_1 ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; TYPE_2 < java.lang.String > VAR_4 = VAR_1 . METHOD_2 ( ) ; while ( VAR_4 . METHOD_3 ( ) ) { VAR_3 . append ( VAR_4 . METHOD_4 ( ) ) ; if ( ! ( VAR_4 . METHOD_3 ( ) ) ) { break ; } VAR_3 . append ( VAR_2 ) ; } return VAR_3 . toString ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { TYPE_4 VAR_2 = new TYPE_5 ( VAR_3 ) . METHOD_2 ( ) ; this . VAR_4 = new TYPE_6 ( VAR_2 ) ; this . VAR_5 = new TYPE_7 ( VAR_2 , this . VAR_4 ) ; TYPE_8 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_6 < TYPE_1 > get ( VAR_7 ) . < java.lang.String > get ( VAR_8 ) ) ; } 
protected void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; if ( ( VAR_2 . METHOD_4 ( ) ) == 0 ) { TYPE_1 . get ( ) . METHOD_5 ( new TYPE_2 ( ) { public void METHOD_6 ( ) { VAR_2 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( 0 ) ; } } ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_4 ( VAR_5 ) ; METHOD_3 ( VAR_4 ) ; VAR_6 . METHOD_4 ( VAR_1 ) ; try { METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_5 VAR_7 ) { METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) ; } finally { VAR_2 . METHOD_8 ( ) ; } } 
private java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , java.util.ArrayList < TYPE_2 . VdcActionParametersBase > parameters , boolean VAR_2 , boolean VAR_3 , boolean VAR_4 , TYPE_3 VAR_5 ) { TYPE_4 VAR_6 = VAR_7 . METHOD_2 ( VAR_1 , parameters , VAR_2 , VAR_5 ) ; VAR_6 . METHOD_3 ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_4 ) ; return VAR_6 . METHOD_5 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ( ( TYPE_2 ) ( VAR_2 ) ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( final TYPE_4 result ) { VAR_3 . METHOD_3 ( null ) ; VAR_4 . onSuccess ( result ) ; } public void METHOD_4 ( final TYPE_5 VAR_5 ) { VAR_3 . METHOD_3 ( null ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; } } ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 , TYPE_2 . getParameters ( ) . METHOD_6 ( ) . get ( 0 ) , new TYPE_3 ( TYPE_2 . METHOD_7 ( ) ) ) ; METHOD_8 ( VAR_2 . getSucceeded ( ) ) ; } else { super . METHOD_1 ( ) ; } } 
private void METHOD_1 ( TYPE_1 command ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( VAR_3 ) . METHOD_6 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , METHOD_4 ( VAR_1 , 2 ) , 0 , INT_1 , false ) ) ; METHOD_5 ( cmd ) ; METHOD_6 ( cmd ) ; TYPE_1 . METHOD_7 ( cmd . validate ( ) ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( ( obj == null ) || ( ( obj . METHOD_1 ( ) ) != ( this . METHOD_1 ( ) ) ) ) return false ; TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
protected void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ; java.lang.String [ ] VAR_2 = VAR_1 . METHOD_3 ( new java.lang.String [ VAR_1 . size ( ) ] ) ; VAR_3 = TYPE_1 . METHOD_4 ( ) . list ( TYPE_2 . toString ( ) , VAR_2 ) ; TYPE_1 . METHOD_5 ( ) ; TYPE_3 [ ] VAR_4 = VAR_5 ; METHOD_6 ( VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 entity = new TYPE_1 ( ) ; entity . METHOD_2 ( VAR_1 ) ; entity . METHOD_3 ( VAR_2 ) ; entity . setId ( VAR_3 ) ; TYPE_2 model = TYPE_3 . map ( entity , null ) ; TYPE_4 . METHOD_4 ( model ) ; TYPE_4 . assertEquals ( model . METHOD_5 ( ) , VAR_4 ) ; TYPE_4 . assertEquals ( model . getModel ( ) , VAR_5 ) ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , new TYPE_5 ( VAR_1 , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_5 = VAR_6 . METHOD_4 ( VAR_7 ) ; TYPE_2 . assertEquals ( STRING_1 , 2 , VAR_5 . size ( ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( VAR_4 ) ) ; } 
protected void METHOD_1 ( TYPE_1 model , int VAR_1 ) { METHOD_2 ( model ) ; assertEquals ( model . getId ( ) , java.lang.String.valueOf ( VAR_2 [ VAR_1 ] ) ) ; assertEquals ( model . METHOD_3 ( ) , TYPE_2 . value ( ) ) ; assertEquals ( model . METHOD_4 ( ) , VAR_3 [ VAR_1 ] ) ; assertEquals ( model . METHOD_5 ( ) , VAR_4 [ VAR_1 ] ) ; assertEquals ( model . METHOD_6 ( ) , VAR_5 [ VAR_1 ] ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( command . validate ( ) ) ; TYPE_2 . METHOD_5 ( command . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , VAR_1 ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 1 , null , true , true , true , STRING_1 , null , disk . METHOD_2 ( ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } else { TYPE_1 . METHOD_4 ( false ) ; } TYPE_1 . METHOD_5 ( ) . getTable ( ) . METHOD_6 ( ) ; TYPE_1 . METHOD_5 ( ) . getTable ( ) . METHOD_7 ( VAR_1 ) ; } 
public static void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( ! ( VAR_2 . METHOD_4 ( VAR_1 . getId ( ) ) ) ) { VAR_2 . put ( VAR_1 . getId ( ) , new TYPE_2 ( VAR_1 . getId ( ) ) ) ; } } } 
protected void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( VAR_1 != null ) { METHOD_2 ( ) . setItems ( VAR_1 ) ; METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < > ( vds . getStoragePoolId ( ) ) ) ) ; if ( ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) { METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ; } } } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { if ( ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) { VAR_1 . add ( VAR_2 ) ; } } return VAR_1 ; } return new TYPE_1 ( ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; } } ; VAR_1 . onSuccess ( aQuery . getModel ( ) , INT_1 ) ; } 
private void METHOD_1 ( ) { if ( TYPE_1 . getInstance ( ) . METHOD_2 ( ) ) { java.util.List < TYPE_2 < org.ovirt.engine.core.common.businessentities.StorageDomain > > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) { getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.StorageDomain > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) ; } } } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { try { TYPE_2 . METHOD_2 ( VAR_2 , new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_3 ( ) { METHOD_4 ( VAR_3 , METHOD_5 ( VAR_1 ) ) ; return null ; } } ) ; } catch ( TYPE_5 e ) { METHOD_6 ( e ) ; } } 
public void METHOD_1 ( ) { for ( TYPE_1 action : TYPE_1 . METHOD_2 ( ) ) { TYPE_2 VAR_1 = TYPE_3 . map ( action , null ) ; TYPE_4 . METHOD_3 ( VAR_1 ) ; TYPE_4 . assertEquals ( VAR_1 . name ( ) . METHOD_4 ( ) , action . name ( ) . METHOD_4 ( ) ) ; } } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > result ) { TYPE_1 . METHOD_2 ( result ) ; TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : result ) { TYPE_1 . assertEquals ( VAR_1 , iface . METHOD_4 ( ) ) ; } } 
private void METHOD_1 ( ) { if ( TYPE_1 . isEmpty ( TYPE_2 . METHOD_2 ( ) ) ) { TYPE_3 VAR_1 = METHOD_3 ( ) . get ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ; if ( VAR_1 != null ) { METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; } } METHOD_7 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) ) ; } 
public void METHOD_1 ( ) { parameters = new TYPE_1 ( ) ; parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 < TYPE_1 > ( parameters , null ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; } 
private static int METHOD_1 ( ) { int VAR_1 = 0 ; java.lang.String VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 ) . toString ( ) . METHOD_3 ( STRING_1 , STRING_2 ) ; java.lang.String [ ] VAR_4 = VAR_2 . METHOD_4 ( STRING_3 ) ; for ( java.lang.String VAR_5 : VAR_4 ) { VAR_5 = VAR_5 . METHOD_5 ( ) ; if ( ( java.lang.Integer . valueOf ( VAR_5 ) ) > VAR_1 ) { VAR_1 = java.lang.Integer . valueOf ( VAR_5 ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_2 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 parameters ) { TYPE_1 validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters ) ) ; parameters . METHOD_3 ( true ) ; java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_1 = new java.util.ArrayList ( TYPE_3 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ) ; for ( TYPE_4 . DiskImage image : parameters . getVm ( ) . METHOD_6 ( ) ) { image . METHOD_7 ( VAR_1 ) ; } org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_8 ( TYPE_5 . METHOD_9 ( ) ) ; return validator ; } 
protected boolean METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = getReturnValue ( ) . METHOD_2 ( ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_1 > VAR_2 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ; if ( ! ( METHOD_3 ( VAR_1 , VAR_2 ) ) ) { return METHOD_4 ( ) ; } if ( getParameters ( ) . METHOD_5 ( ) ) { METHOD_6 ( ) ; } if ( ! ( METHOD_7 ( VAR_1 , VAR_2 ) ) ) { return METHOD_4 ( ) ; } return true ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_2 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , new TYPE_3 ( ) ) ; TYPE_4 VAR_4 = ( ( TYPE_4 ) ( model ) ) ; VAR_4 . setItems ( VAR_3 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . VdcQueryReturnValue response = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ; if ( response . getSucceeded ( ) ) { java.util.List < TYPE_2 > VAR_1 = ( ( java.util.ArrayList < TYPE_2 > ) ( response . getReturnValue ( ) ) ) ; METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; } else { VAR_2 . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . setId ( VAR_1 . getValue ( ) ) ; getModel ( ) . METHOD_2 ( ) . setItems ( TYPE_2 . METHOD_3 ( vds ) ) ; } super . METHOD_1 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( false , VAR_2 ) ; cmd . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 . Guid class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( 1 , ( - INT_1 ) , ( - INT_2 ) , INT_2 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , 0 , VAR_3 ) ; assertEquals ( STRING_2 , INT_3 , VAR_4 ) ; assertEquals ( STRING_3 , INT_4 , VAR_5 ) ; assertEquals ( STRING_4 , INT_2 , VAR_6 ) ; assertEquals ( STRING_5 , 0 , VAR_7 ) ; } 
protected void METHOD_1 ( TYPE_1 status , TYPE_2 context ) { if ( ( ( TYPE_3 . METHOD_2 ( ) ) != null ) && ( ( TYPE_3 . METHOD_2 ( ) . getStoragePoolId ( ) ) != null ) ) { TYPE_4 map = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( context != null ) { context . METHOD_4 ( map ) ; } TYPE_3 . METHOD_2 ( ) . METHOD_5 ( status ) ; METHOD_6 ( ) . METHOD_7 ( map . getId ( ) , status ) ; } } 
public TYPE_1 add ( TYPE_2 . VM vm ) { TYPE_3 VAR_1 = getEntity ( ) ; VAR_1 . METHOD_1 ( ) . add ( TYPE_4 . METHOD_2 ( vm . getId ( ) ) ) ; return METHOD_3 ( VAR_2 , new TYPE_5 ( VAR_1 . getId ( ) , VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito . METHOD_2 ( VAR_1 , org.mockito.Mockito . METHOD_3 ( ) ) . METHOD_4 ( VAR_2 . Frontend class , VAR_3 ) ; org.mockito.Mockito . METHOD_2 ( VAR_4 , org.mockito.Mockito . METHOD_3 ( ) ) . METHOD_4 ( VAR_2 . Frontend class , VAR_3 ) ; TYPE_1 . assertEquals ( STRING_1 , org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( ) , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , 0 , VAR_5 . size ( ) ) ; TYPE_1 . assertEquals ( STRING_4 , 0 , VAR_6 . size ( ) ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( storageDomain . getId ( ) ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( VAR_2 . METHOD_3 ( ) . equals ( VAR_3 . METHOD_3 ( ) ) ) { return true ; } } return false ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 . AuditLogType VAR_2 , java.lang.String VAR_3 , TYPE_3 . AuditLogSeverity VAR_4 ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_1 . METHOD_1 ( VAR_2 , VAR_4 , VAR_3 ) ; } final java.lang.String VAR_5 = TYPE_4 . METHOD_3 ( VAR_2 ) ; if ( VAR_5 == null ) { return null ; } else { java.lang.String VAR_6 = METHOD_4 ( VAR_5 , VAR_1 ) ; return VAR_1 . METHOD_1 ( VAR_2 , VAR_4 , VAR_6 ) ; } } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; vm . METHOD_3 ( VAR_1 ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( vm ) . when ( cmd ) . getVm ( ) ; } 
protected TYPE_1 . VdcActionType METHOD_1 ( ) { try { if ( ( VAR_1 ) == null ) { java.lang.String name = METHOD_2 ( ) . getName ( ) ; name = name . METHOD_3 ( 0 , ( ( name . length ( ) ) - INT_1 ) ) ; name = name . METHOD_3 ( ( ( name . METHOD_4 ( CHAR_1 ) ) + 1 ) ) ; VAR_1 = TYPE_2 . valueOf ( name ) ; } return VAR_1 ; } catch ( java.lang.Exception e ) { return VAR_2 ; } } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 ) { log . error ( STRING_1 , METHOD_2 ( ) ) ; super . METHOD_1 ( VAR_1 , VAR_2 ) ; METHOD_3 ( ) . getParameters ( ) . METHOD_4 ( false ) ; METHOD_5 ( VAR_1 ) ; } 
public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_3 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_4 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; VAR_4 . METHOD_2 ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_4 , new TYPE_3 ( ) ) ; TYPE_4 VAR_5 = ( ( TYPE_4 ) ( VAR_1 ) ) ; VAR_5 . setItems ( VAR_4 ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.String > > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( new TYPE_1 ( VAR_2 , VAR_3 ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_4 ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_3 ( ) ) . when ( VAR_5 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_6 ) . METHOD_5 ( TYPE_3 . any ( ) ) ; VAR_7 . METHOD_6 ( VAR_8 class , VAR_9 ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; TYPE_2 event = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) . METHOD_4 ( event . METHOD_5 ( ) ) ; VAR_4 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) . METHOD_6 ( event . METHOD_7 ( ) ) ) ; VAR_5 . METHOD_3 ( ) . METHOD_4 ( event . METHOD_8 ( ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; vms . add ( vm ) ; java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > VAR_1 = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > ( ) ; VAR_1 . put ( java.lang.Boolean . TRUE , vms ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( VAR_3 ) ) . thenReturn ( VAR_1 ) ; } 
public static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { VAR_1 = VAR_1 . METHOD_2 ( CHAR_1 , CHAR_2 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.lang.String VAR_3 = ( ( VAR_2 . METHOD_3 ( INT_1 ) ) + INT_2 ) + STRING_1 ; java.lang.String VAR_4 = ( ( ( VAR_5 ) + VAR_3 ) + STRING_2 ) + VAR_1 ; return VAR_4 ; } 
protected void METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.compat.Guid VAR_1 , java.util.List < TYPE_2 > VAR_2 ) { if ( VAR_1 == null ) { METHOD_2 ( ) . setSelectedItem ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; } else { model . METHOD_2 ( ) . setSelectedItem ( TYPE_3 . METHOD_3 ( VAR_2 , new TYPE_4 ( ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_1 ) ) ) ) ) ; } } 
private void METHOD_1 ( TYPE_1 constants ) { VAR_1 . METHOD_2 ( constants . METHOD_3 ( ) ) ; VAR_2 . METHOD_2 ( constants . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( constants . METHOD_6 ( ) ) ; VAR_4 . METHOD_2 ( constants . METHOD_7 ( ) ) ; VAR_5 . METHOD_2 ( constants . METHOD_8 ( ) ) ; VAR_6 . METHOD_2 ( constants . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 . EngineMessage class , VAR_3 class ) ; try ( TYPE_3 VAR_4 = new TYPE_4 ( VAR_5 ) ) { VAR_1 . METHOD_2 ( VAR_4 ) ; } catch ( TYPE_5 VAR_6 ) { TYPE_6 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_5 . METHOD_4 ( ) ) ) + STRING_2 ) + ( VAR_6 . METHOD_5 ( ) ) ) ) ; } } 
public static boolean METHOD_1 ( TYPE_1 user ) { java.util.List < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( user . getId ( ) , TYPE_4 . METHOD_4 ( user . METHOD_5 ( ) , STRING_1 ) ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { VAR_2 . METHOD_6 ( STRING_2 , VAR_1 . get ( 0 ) . METHOD_7 ( ) ) ; return true ; } return false ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . VdcQueryReturnValue VAR_1 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ; if ( VAR_1 . getSucceeded ( ) ) { org.ovirt.engine.core.common.businessentities.VM vm = VAR_1 . getReturnValue ( ) ; METHOD_1 ( TYPE_2 . METHOD_2 ( vm ) ) ; } else { METHOD_3 ( VAR_2 . METHOD_4 ( METHOD_5 ( ) . getEntity ( ) ) ) ; } METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; TYPE_1 VAR_1 = METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 [ 1 ] } , true , true , false ) ; VAR_1 = METHOD_4 ( VAR_1 , VAR_5 , VAR_4 [ 0 ] . toString ( ) ) ; METHOD_5 ( VAR_1 ) ; VAR_6 . METHOD_6 ( ) ; METHOD_7 ( resource . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.List < TYPE_2 > VAR_2 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; java.util.List < TYPE_2 > VAR_3 = new java.util.ArrayList < TYPE_2 > ( ) ; for ( TYPE_2 a : VAR_2 ) { if ( ( a . METHOD_2 ( ) ) == ( VAR_4 ) ) { VAR_3 . add ( a ) ; } } VAR_1 . METHOD_3 ( VAR_3 ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( STRING_1 , STRING_2 ) ; METHOD_5 ( new int [ ] { 0 , 0 } ) ; METHOD_6 ( new int [ ] { 0 , 0 } ) ; TYPE_1 . METHOD_7 ( new int [ ] { 0 , 0 } ) ; METHOD_8 ( 0 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( TYPE_1 . METHOD_3 ( ) ) ; org.mockito.Mockito.doReturn ( java.lang.Boolean . TRUE ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( storageDomain ) ) ; org.mockito.Mockito.doReturn ( java.lang.Boolean . TRUE ) . when ( METHOD_4 ( ) ) . METHOD_7 ( TYPE_2 . METHOD_6 ( storageDomain ) ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network , TYPE_2 VAR_1 ) { METHOD_2 ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_3 ( STRING_1 , network ) ; iface . METHOD_4 ( true ) ; METHOD_5 ( iface ) ; iface . METHOD_6 ( VAR_1 ) ; return METHOD_7 ( METHOD_8 ( iface ) , VAR_2 ) ; } 
public void METHOD_1 ( ) { VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( 0 ) ; VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( 2 , INT_1 , INT_2 ) ) ; VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( INT_3 , INT_4 , INT_5 ) ) ; VAR_1 . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ; dao . METHOD_8 ( VAR_1 ) ; TYPE_3 VAR_3 = dao . get ( VAR_2 ) ; TYPE_4 . METHOD_9 ( VAR_3 ) ; TYPE_4 . assertEquals ( VAR_1 , VAR_3 ) ; } 
protected void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( model ) ; VAR_2 . METHOD_3 ( java.lang.Integer . toString ( getModel ( ) . METHOD_4 ( ) ) ) ; VAR_3 . METHOD_3 ( java.lang.Boolean . toString ( getModel ( ) . METHOD_5 ( ) ) ) ; VAR_4 . METHOD_3 ( java.lang.Boolean . toString ( getModel ( ) . METHOD_6 ( ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
protected void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { TYPE_2 < TYPE_1 > VAR_2 = org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( TYPE_3 . any ( VAR_4 class ) , TYPE_3 . any ( VAR_5 class ) ) ) ; for ( TYPE_1 result : VAR_1 ) { VAR_2 = VAR_2 . thenReturn ( result ) ; } } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : VAR_1 ) { if ( ( i . METHOD_2 ( ) ) == null ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( cluster . getStoragePoolId ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_2 ( VAR_1 . Guid class ) ) ; org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_2 ( VAR_3 . StoragePool class ) ) ; validator = new TYPE_2 ( VAR_4 , VAR_2 , cluster , VAR_5 ) ; TYPE_3 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) ) ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( final java.lang.String name , final java.lang.String VAR_1 ) { final java.lang.String VAR_2 = ( ( java.lang.String ) ( METHOD_2 ( VAR_3 . String , name , VAR_1 ) ) ) ; if ( VAR_2 != null ) { return new TYPE_1 ( ) . METHOD_3 ( VAR_2 , VAR_4 . HashMap class ) ; } else { return null ; } } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new TYPE_2 ( STRING_1 , VAR_3 , STRING_1 , TYPE_3 . getValue ( ) , TYPE_4 . getValue ( ) ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_5 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) { return ; } VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_5 , VAR_6 , null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) ; VAR_7 . METHOD_4 ( VAR_4 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_5 , context ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = new java.util.HashMap < > ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . toString ( ) ) ; VAR_2 . put ( VAR_4 , TYPE_2 . METHOD_2 ( TYPE_3 . getParameters ( ) . METHOD_3 ( ) ) ) ; return METHOD_4 ( VAR_2 ) ; } 
public void onSuccess ( java.lang.Object VAR_1 ) { java.lang.Object returnValue = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; java.util.List < TYPE_2 > VAR_2 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_4 . add ( VAR_3 ) ; VAR_5 . put ( VAR_3 . METHOD_1 ( ) , new TYPE_2 ( VAR_3 ) ) ; } METHOD_2 ( ) ; } 
private void METHOD_1 ( ) { TYPE_1 model = ( ( TYPE_1 ) ( getWindow ( ) ) ) ; if ( ( model . METHOD_2 ( ) ) != null ) { return ; } if ( ! ( model . validate ( ) ) ) { return ; } model . METHOD_3 ( null ) ; METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; if ( ( getWindow ( ) ) != null ) { return ; } final TYPE_2 VAR_2 = new TYPE_3 ( VAR_1 . METHOD_2 ( ) , this ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 model , TYPE_2 type , java.lang.String VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) ; assertEquals ( VAR_1 , model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; assertEquals ( type . value ( ) , model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; command = org.mockito.Mockito . METHOD_3 ( new TYPE_2 . RunVmCommand < TYPE_1 > ( VAR_1 ) ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( command ) . METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; TYPE_2 VAR_3 = TYPE_3 . map ( VAR_1 , null ) ; assertEquals ( VAR_1 . METHOD_4 ( ) . name ( ) . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) ) ; assertEquals ( VAR_1 . METHOD_7 ( ) , VAR_3 . METHOD_7 ( ) ) ; } 
protected void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( this . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) , METHOD_6 ( ) , TYPE_3 . METHOD_7 ( METHOD_6 ( ) , METHOD_8 ( VAR_3 ) ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < TYPE_2 > list = new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_2 ( new TYPE_2 [ ] { ( ( TYPE_2 ) ( result ) ) } ) ) ; TYPE_4 VAR_2 = ( ( TYPE_4 ) ( VAR_1 . getWindow ( ) ) ) ; VAR_2 . METHOD_3 ( ) . setItems ( list ) ; VAR_2 . METHOD_3 ( ) . setSelectedItem ( TYPE_5 . METHOD_4 ( list ) ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; cluster = new TYPE_2 ( ) ; cluster . METHOD_3 ( STRING_1 ) ; cluster . METHOD_4 ( ) . add ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( cluster ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) ; cmd . getVm ( ) . METHOD_5 ( VAR_4 ) ; java.util.List < TYPE_2 . DiskImage > VAR_5 = METHOD_6 ( 2 ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( cmd ) . METHOD_7 ( ) ; TYPE_3 . METHOD_8 ( cmd ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( ) ) ; TYPE_2 VAR_1 = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( METHOD_5 ( ) . getStoragePoolId ( ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) . thenReturn ( VAR_1 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_3 , METHOD_6 ( ) . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_4 ( ) ; command . METHOD_5 ( ) ; TYPE_1 . METHOD_6 ( command . METHOD_7 ( ) ) ; TYPE_1 . METHOD_8 ( command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_2 . toString ( ) ) ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Disk disk ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( disk . getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( vm . getId ( ) . equals ( TYPE_1 . METHOD_4 ( ) ) ) { return true ; } } return false ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 ) { java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > > VAR_2 = METHOD_2 ( VAR_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_3 = new TYPE_1 < > ( ) ; for ( TYPE_2 < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > > VAR_4 : VAR_2 . METHOD_3 ( ) ) { VAR_3 . add ( METHOD_4 ( VAR_4 . getValue ( ) ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 model = ( ( TYPE_3 ) ( sender ) ) ; java.lang.String VAR_2 = ( ( TYPE_4 ) ( args ) ) . VAR_3 ; if ( STRING_1 . equals ( VAR_2 ) ) { VAR_4 . METHOD_2 ( VAR_5 , model . METHOD_3 ( ) ) ; } else if ( STRING_2 . equals ( VAR_2 ) ) { VAR_6 . METHOD_4 ( model . METHOD_5 ( ) ) ; } } 
void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( ) { public java.lang.String METHOD_2 ( TYPE_2 version ) { return version . METHOD_3 ( ) ; } } ) ; VAR_2 = new TYPE_4 ( STRING_1 ) ; VAR_3 = new TYPE_4 ( STRING_1 ) ; VAR_4 = new TYPE_5 ( ) ; VAR_5 = new TYPE_6 ( VAR_6 ) ; VAR_7 = new TYPE_6 ( VAR_6 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; } } ; VAR_1 . METHOD_3 ( aQuery . getModel ( ) , INT_1 ) ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 . VdcActionType VAR_2 , TYPE_3 VAR_3 , TYPE_4 context ) { TYPE_2 . VdcActionParametersBase parameters = VAR_3 . METHOD_2 ( ) ; TYPE_5 < ? > command = TYPE_6 . getInstance ( ) . METHOD_3 ( VAR_2 , parameters ) ; command . METHOD_4 ( new TYPE_7 ( context ) ) ; return command . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 , METHOD_3 ( ) ) ; METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] . toString ( ) } , METHOD_4 ( ) ) ; METHOD_5 ( METHOD_6 ( ) ) ; VAR_4 . METHOD_7 ( ) ; METHOD_8 ( resource . get ( ) ) ; } 
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( TYPE_2 map : METHOD_2 ( ) ) { VAR_1 . append ( STRING_1 ) ; VAR_1 . append ( map . METHOD_3 ( ) ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( map . METHOD_4 ( ) . name ( ) ) ; VAR_1 . append ( STRING_3 ) ; } return VAR_1 . toString ( ) ; } 
public java.lang.String METHOD_1 ( ) { if ( ( ! ( getModel ( ) . METHOD_2 ( ) ) ) && ( ( getModel ( ) . getEntity ( ) ) != null ) ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 ) ; java.lang.String VAR_3 = ( VAR_1 != null ) ? VAR_1 . METHOD_4 ( ) . toString ( 2 ) : STRING_1 ; return VAR_4 . METHOD_5 ( VAR_3 ) ; } else { return this . METHOD_6 ( ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( result ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { METHOD_1 ( ) . setEntity ( result ) ; METHOD_2 ( true ) ; } else { METHOD_1 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ; METHOD_2 ( false ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( returnValue ) ) ; model . METHOD_2 ( ) . setItems ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( TYPE_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VmTemplate [ ] { template } ) ) ) ; model . METHOD_2 ( ) . setSelectedItem ( template ) ; model . METHOD_2 ( ) . setIsChangable ( false ) ; } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < java.lang.String > list = new java.util.ArrayList < > ( ) ; if ( source != null ) { java.lang.String [ ] VAR_1 = ( ( java.lang.String ) ( source ) ) . METHOD_2 ( STRING_1 , ( - 1 ) ) ; for ( java.lang.String item : VAR_1 ) { list . add ( item ) ; } } return list ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 2 , false ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } ) ) ; TYPE_1 response = resource . METHOD_5 ( new TYPE_2 ( ) ) ; METHOD_6 ( response ) ; METHOD_7 ( ( ( TYPE_2 ) ( response . getEntity ( ) ) ) . getVm ( ) , 0 ) ; } 
private void METHOD_1 ( ) { if ( ( ( getEntity ( ) ) == null ) || ( ( getEntity ( ) . METHOD_2 ( ) ) == true ) ) { METHOD_3 ( ) . METHOD_4 ( false ) ; } else { METHOD_3 ( ) . METHOD_4 ( true ) ; } } 
public org.ovirt.engine.core.common.businessentities.VDS get ( TYPE_1 id , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { return METHOD_1 ( ) . METHOD_2 ( STRING_1 , VAR_3 . instance , METHOD_3 ( ) . addValue ( STRING_2 , id ) . addValue ( STRING_3 , VAR_1 ) . addValue ( STRING_4 , VAR_2 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( vmId , VAR_1 ) ; cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd , VAR_3 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 . Disk > VAR_2 = ( ( java.util.ArrayList < TYPE_2 . Disk > ) ( returnValue ) ) ; METHOD_1 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( ) . add ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( STRING_1 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( this . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_2 ) . METHOD_7 ( ) . METHOD_8 ( ) ) ; VAR_3 . METHOD_9 ( VAR_1 , VAR_4 ) ; org.mockito.Mockito . METHOD_10 ( VAR_4 ) . METHOD_11 ( TYPE_4 . METHOD_12 ( STRING_3 ) , TYPE_4 . METHOD_13 ( ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 ) { boolean VAR_2 = METHOD_2 ( ) . getEntity ( ) ; if ( VAR_2 ) { return ; } boolean VAR_3 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . getValue ( ) ) ) ) ; METHOD_5 ( ) . setEntity ( VAR_3 ) ; METHOD_6 ( ( ! VAR_3 ? TYPE_2 . METHOD_7 ( ) : STRING_1 ) ) ; } 
protected void METHOD_1 ( ) { java.util.Map < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; if ( ! ( VAR_1 . METHOD_6 ( ) . isEmpty ( ) ) ) { METHOD_7 ( VAR_1 . METHOD_6 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) ; } TYPE_1 . METHOD_10 ( ) . METHOD_11 ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 , TYPE_3 { this . VAR_3 = new TYPE_4 ( VAR_4 ) . METHOD_2 ( ) ; this . VAR_5 = new TYPE_5 ( VAR_3 ) ; this . VAR_6 = new TYPE_6 ( VAR_3 , this . VAR_5 ) ; TYPE_7 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , VAR_7 < TYPE_1 > get ( VAR_8 ) . < java.lang.String > get ( VAR_9 ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getModel ( ) . METHOD_1 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) ; getModel ( ) . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? TYPE_1 . METHOD_3 ( ) : VAR_1 . get ( 0 ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { java.lang.String VAR_3 = java.lang.String.valueOf ( VAR_1 . METHOD_2 ( ) ) ; if ( ( ! ( TYPE_2 . isEmpty ( VAR_3 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ) { VAR_2 . put ( VAR_4 , VAR_3 ) ; } } 
private void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_3 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_5 ( null ) ; if ( ! ( getEntity ( ) . METHOD_6 ( ) ) ) { METHOD_7 ( ) ; } else { METHOD_8 ( ) ; } } } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; TYPE_1 . assertEquals ( result . size ( ) , 1 ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . instance ( ) . METHOD_2 ( INT_1 ) ; org.mockito.Mockito.when ( METHOD_3 ( ) . getName ( ) ) . thenReturn ( VAR_1 ) ; boolean result = TYPE_1 . instance ( ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( result ) . when ( METHOD_5 ( ) ) . METHOD_6 ( ) ; METHOD_5 ( ) . METHOD_7 ( ) ; TYPE_2 . assertEquals ( STRING_1 , result , METHOD_5 ( ) . METHOD_8 ( ) . getReturnValue ( ) ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_1 , METHOD_4 ( ) , new TYPE_1 ( ) { public void METHOD_5 ( TYPE_2 result ) { METHOD_6 ( ) ; VAR_2 . METHOD_7 ( VAR_3 ) ; } } , this ) ; } 
private void METHOD_1 ( ) { final boolean VAR_1 = ( ( getModel ( ) . METHOD_2 ( ) ) != null ) && ( getModel ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; } 
private static void METHOD_1 ( TYPE_1 . AuditLogSeverity VAR_1 , java.lang.String VAR_2 ) { switch ( VAR_1 ) { case NORMAL : VAR_3 . METHOD_2 ( VAR_2 ) ; break ; case ERROR : VAR_3 . error ( VAR_2 ) ; break ; case VAR_4 : case VAR_5 : default : VAR_3 . METHOD_3 ( VAR_2 ) ; break ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.Integer VAR_1 , org.ovirt.engine.core.compat . Version version ) { TYPE_3 < java.lang.String > VAR_2 = METHOD_2 ( ) . get ( new TYPE_4 < java.lang.Integer , org.ovirt.engine.core.compat . Version > ( VAR_1 , version ) ) ; if ( VAR_2 == null ) { return TYPE_5 . METHOD_3 ( ) ; } TYPE_1 < TYPE_2 > VAR_3 = new TYPE_6 < TYPE_2 > ( ) ; for ( java.lang.String VAR_4 : VAR_2 ) { VAR_3 . add ( TYPE_2 . valueOf ( VAR_4 ) ) ; } return VAR_3 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( ( ( TYPE_2 < TYPE_1 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; VAR_1 . add ( VAR_2 ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_2 ( ) ; } 
public java.util.List < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > source ) { if ( source != null ) { java.util.ArrayList < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : source ) { if ( METHOD_2 ( VAR_2 ) ) { VAR_1 . add ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; } } TYPE_2 . METHOD_4 ( VAR_1 , new TYPE_3 ( ) ) ; return VAR_1 ; } return new java.util.ArrayList < > ( ) ; } 
private static TYPE_1 METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , boolean VAR_3 , boolean VAR_4 ) { if ( VAR_2 == null ) { return TYPE_2 . METHOD_2 ( VAR_1 , VAR_4 ) ; } TYPE_1 VAR_5 = TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( VAR_2 , VAR_3 ) ) ; return VAR_5 != null ? VAR_5 : TYPE_2 . METHOD_2 ( VAR_1 , VAR_4 ) ; } 
protected < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_1 command , TYPE_3 status ) { org.mockito.Mockito.when ( command . METHOD_2 ( ) ) . thenReturn ( cluster ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( status ) . when ( vds ) . getStatus ( ) ; METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) ; } 
protected boolean METHOD_1 ( ) { java.util.Map < TYPE_1 . DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap < > ( ) ; for ( TYPE_1 . DiskImage diskImage : TYPE_2 . getVm ( ) . METHOD_2 ( ) ) { map . put ( diskImage , TYPE_2 . METHOD_3 ( ) ) ; } return validate ( TYPE_3 . METHOD_1 ( map , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) ) ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_3 class ) , TYPE_1 . METHOD_4 ( VAR_4 class ) ) ) . METHOD_5 ( new TYPE_2 ( ) { protected TYPE_3 METHOD_3 ( TYPE_3 model , TYPE_4 entity ) { model . METHOD_6 ( VAR_5 ) ; model . METHOD_7 ( VAR_6 ) ; return model ; } } ) . METHOD_8 ( ) ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , getStoragePoolId ( ) , TYPE_2 . getVdsGroup ( ) . METHOD_3 ( ) , VAR_2 ) ; for ( TYPE_3 iface : VAR_3 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( iface , TYPE_2 . METHOD_6 ( ) . getId ( ) ) ; } VAR_1 . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; super . METHOD_1 ( ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) { return true ; } if ( ! ( VAR_1 . METHOD_5 ( TYPE_2 . getVm ( ) . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_2 . getVdsGroup ( ) . METHOD_8 ( ) ) ) ) { METHOD_9 ( STRING_1 , TYPE_2 . getVdsGroup ( ) . METHOD_10 ( ) ) ; return METHOD_11 ( VAR_2 ) ; } return true ; } 
public TYPE_1 get ( TYPE_2 id , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { TYPE_3 VAR_3 = METHOD_1 ( ) . addValue ( STRING_1 , id ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_4 , VAR_4 . instance , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { TYPE_3 resource = ( ( TYPE_3 ) ( this . resource ) ) ; resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_4 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } } 
private void METHOD_1 ( final TYPE_1 response , final TYPE_2 VAR_1 , final TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = new TYPE_4 ( VAR_4 , VAR_2 . toString ( ) ) ; VAR_3 . METHOD_2 ( VAR_5 ) ; VAR_3 . METHOD_3 ( VAR_6 ) ; VAR_3 . METHOD_4 ( true ) ; response . METHOD_5 ( VAR_3 ) ; } 
private void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ; METHOD_2 ( new TYPE_1 ( ) , VAR_1 ) ; for ( org.ovirt.engine.core.compat.Guid VAR_2 : VAR_1 ) { TYPE_2 tempVar = new TYPE_2 ( VAR_2 , VAR_3 ) ; tempVar . METHOD_3 ( true ) ; tempVar . METHOD_4 ( TYPE_3 . METHOD_5 ( ) . getId ( ) ) ; tempVar . METHOD_6 ( VAR_4 ) ; TYPE_3 . METHOD_7 ( ) . METHOD_8 ( VAR_5 , tempVar , TYPE_4 . METHOD_9 ( ) ) ; } } 
public TYPE_1 add ( TYPE_2 . Network network ) { METHOD_1 ( network , METHOD_2 ( ) ) ; org.ovirt.engine.core.common.businessentities . network entity = map ( network ) ; TYPE_3 params = METHOD_3 ( network , entity ) ; return METHOD_4 ( VAR_1 , params , new TYPE_4 ( network . getName ( ) , params . getStoragePoolId ( ) . toString ( ) ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( command . METHOD_2 ( parameters . METHOD_3 ( ) . METHOD_4 ( ) ) ) . thenReturn ( TYPE_1 . METHOD_5 ( ) ) ; command . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; } 
protected void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities . Network a : VAR_1 ) { java.lang.String VAR_2 = ( a == null ) ? null : a . METHOD_2 ( ) ; if ( TYPE_1 . METHOD_3 ( VAR_2 , METHOD_4 ( ) . METHOD_5 ( ) ) ) { METHOD_6 ( ) . setSelectedItem ( a ) ; return ; } } if ( ( METHOD_4 ( ) . METHOD_5 ( ) ) == null ) { METHOD_6 ( ) . setSelectedItem ( null ) ; } } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > list = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ; for ( java.lang.Object item : TYPE_2 . METHOD_2 ( ) ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ; list . add ( new TYPE_3 ( vds . getId ( ) , VAR_1 ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , list , new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 result ) { } } , null ) ; } 
public static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VmTemplate template , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 , boolean VAR_3 ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_4 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( template . getStoragePoolId ( ) . getValue ( ) ) ; TYPE_1 . METHOD_1 ( template , VAR_4 , VAR_1 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . StoragePool ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; } 
private void METHOD_1 ( ) { final java.util.List < java.lang.String > VAR_1 = ( ( java.util.List < java.lang.String > ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ; final java.util.ArrayList < java.lang.String > VAR_3 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_3 . add ( null ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) . setItems ( VAR_3 ) ; METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_3 < TYPE_2 > ( VAR_1 , null , VAR_3 ) { protected void METHOD_2 ( ) { METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 ) ; } } ; VAR_2 . METHOD_6 ( true ) ; VAR_2 . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( VAR_2 ) ; return VAR_2 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; storageDomain . METHOD_3 ( VAR_1 ) ; storageDomain . METHOD_4 ( VAR_2 ) ; VAR_3 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_3 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_3 . METHOD_5 ( TYPE_1 . get ( 0 ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_6 ( storageDomain . getId ( ) ) ) . thenReturn ( TYPE_2 . METHOD_7 ( ) ) ; METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_3 = VAR_2 . get ( STRING_1 ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_4 ( STRING_2 ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; VAR_6 = dao . get ( new TYPE_3 ( STRING_3 , VAR_3 . METHOD_6 ( ) ) ) ; VAR_7 = new TYPE_4 ( VAR_8 , VAR_3 . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { TYPE_2 map = METHOD_2 ( domain ) ; TYPE_3 context = METHOD_3 ( ) ; context . METHOD_4 ( map , map . METHOD_5 ( ) ) ; METHOD_6 ( map , status ) ; METHOD_3 ( ) . METHOD_7 ( ) ; } return null ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( ( ( VAR_1 ) == ( VAR_2 ) ) && ( TYPE_2 . equals ( METHOD_1 ( ) , other . METHOD_1 ( ) ) ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; TYPE_1 result = new TYPE_1 ( ) ; result . METHOD_5 ( VAR_5 ) ; result . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 ) ) ; return result ; } 
protected void METHOD_1 ( TYPE_1 < ? > VAR_1 , TYPE_1 < ? > VAR_2 , TYPE_2 VAR_3 , java.lang.Object ... params ) { assert VAR_1 instanceof TYPE_3 ; assert VAR_2 == null ; TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_1 ) ) ; VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; TYPE_4 . METHOD_4 ( VAR_4 , VAR_3 ) ; TYPE_4 . METHOD_5 ( VAR_4 , VAR_3 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) ) ) ; METHOD_3 ( cmd , VAR_1 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( vds ) . getStatus ( ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( vds ) . getStatus ( ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { resource . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_5 ( 1 ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( TYPE_2 . toString ( ) , VAR_2 . getId ( ) ) ; METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ VAR_4 ] } , getEntity ( VAR_5 ) ) ; TYPE_1 model = TYPE_2 . getModel ( 0 ) ; model . METHOD_3 ( ) . METHOD_4 ( ) . setId ( null ) ; model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 [ VAR_4 ] ) ; METHOD_6 ( model , 0 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 , java.lang.String VAR_2 ) { if ( context == null ) { return null ; } TYPE_1 VAR_3 = null ; if ( context . METHOD_2 ( ) ) { TYPE_1 VAR_4 = context . METHOD_3 ( ) ; if ( VAR_4 != null ) { VAR_3 = TYPE_4 . METHOD_4 ( VAR_4 , VAR_1 , VAR_2 ) ; } } return VAR_3 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( command . METHOD_2 ( parameters . METHOD_3 ( ) . METHOD_4 ( ) ) ) . thenReturn ( TYPE_1 . METHOD_5 ( ) ) ; org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_6 ( ) ) . when ( command ) . METHOD_7 ( ) ; parameters . METHOD_3 ( ) . METHOD_8 ( VAR_1 ) ; TYPE_3 . METHOD_9 ( command . METHOD_10 ( ) ) ; TYPE_4 . METHOD_11 ( STRING_1 , command , VAR_2 ) ; } 
public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VM VAR_1 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) , TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_2 , VAR_4 ) , TYPE_3 . METHOD_5 ( VAR_3 , VAR_5 ) ) ) ; TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) , TYPE_2 . METHOD_6 ( 2 ) ) ; } 
protected java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > VAR_1 = new java.util.HashMap < > ( ) ; VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( STRING_1 ) ; command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( command . METHOD_6 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String value ) { final char VAR_3 = CHAR_1 ; final char VAR_4 = CHAR_2 ; if ( ( VAR_1 . length ( ) ) > 0 ) { VAR_1 . append ( VAR_3 ) ; } VAR_1 . append ( VAR_2 ) . append ( VAR_4 ) . append ( value ) ; } 
public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { if ( ( VAR_1 ) != null ) { VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ; } else if ( VAR_4 ) { VAR_2 . METHOD_2 ( VAR_3 , TYPE_1 . METHOD_3 ( ) ) ; } else { VAR_2 . METHOD_4 ( ) ; } return null ; } 
public void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; } } ) ) ; } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface i : VAR_1 ) { if ( ( i . METHOD_2 ( ) ) == null ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
public boolean METHOD_1 ( final org.ovirt.engine.core.compat.Guid VAR_1 ) { return METHOD_2 ( new TYPE_1 < java.lang.Boolean > ( ) { public java.lang.Boolean METHOD_3 ( ) { try { VAR_2 . METHOD_1 ( VAR_1 . toString ( ) ) ; return true ; } catch ( TYPE_2 VAR_3 ) { if ( ( VAR_3 . getStatus ( ) ) == ( VAR_4 ) ) { return false ; } throw VAR_3 ; } } } ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 vm ) { TYPE_1 VAR_1 = null ; if ( ( vm . METHOD_2 ( ) ) && ( vm . METHOD_3 ( ) . METHOD_4 ( ) ) ) { VAR_1 = METHOD_5 ( VAR_2 class , VAR_3 class ) . map ( vm . METHOD_3 ( ) . METHOD_1 ( ) . get ( 0 ) , new TYPE_1 ( ) ) ; } return VAR_1 ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) . setEntity ( ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != 0 ) ) ; METHOD_4 ( ) . setEntity ( ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != 0 ? java.lang.String.valueOf ( METHOD_3 ( ) . METHOD_4 ( ) ) : null ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = VAR_2 ; METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; command . getParameters ( ) . METHOD_3 ( VAR_1 ) ; command . METHOD_3 ( VAR_1 ) ; METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( command , VAR_3 ) ; } 
private boolean METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) . size ( ) ; return ( ( METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . getId ( ) ) . size ( ) ) > VAR_1 ) || ( ( METHOD_6 ( ) . METHOD_7 ( TYPE_1 . METHOD_5 ( ) . getId ( ) ) . size ( ) ) > VAR_1 ) ; } 
private void METHOD_1 ( ) throws TYPE_1 { for ( TYPE_2 VAR_1 : TYPE_3 . getInstance ( ) . METHOD_2 ( VAR_2 ) ) { METHOD_3 ( new TYPE_4 ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) . < TYPE_7 > get ( VAR_3 ) . METHOD_6 ( VAR_4 ) ) ) ) ) ; } } 
protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) . getValue ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { METHOD_3 ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 ) ) ) ; } } ) , METHOD_4 ( ) . getId ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 class , VAR_2 ) ; METHOD_3 ( ) ; VAR_3 = new java.util.ArrayList < > ( ) ; VAR_4 = STRING_1 ; VAR_5 = STRING_2 ; VAR_6 = new TYPE_2 ( vm , VAR_3 , version , VAR_4 , VAR_5 ) ; } 
protected boolean METHOD_1 ( TYPE_1 storageDomain ) { if ( ( ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) != ( storageDomain . METHOD_5 ( ) ) ) ) { addCanDoActionMessage ( VAR_3 ) ; return false ; } return true ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . getName ( ) ) . thenReturn ( METHOD_2 ( ) ) ; org.mockito.Mockito.when ( host . getName ( ) ) . thenReturn ( METHOD_2 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_5 ( VAR_3 . VDS class ) ) ; TYPE_2 . METHOD_6 ( validator . METHOD_7 ( ) , TYPE_3 . METHOD_8 ( VAR_4 ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . METHOD_2 ( ) . setItems ( VAR_2 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 from ) { while ( ( from . METHOD_2 ( ) ) == 0 ) { from . METHOD_3 ( TYPE_2 . METHOD_4 ( INT_1 ) ) ; } from . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 class ) . value ( ) ) ; from . METHOD_7 ( ) . METHOD_8 ( INT_2 ) ; from . METHOD_9 ( ) . METHOD_10 ( new TYPE_3 ( ) ) ; return from ; } 
private void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 = TYPE_1 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) , true , false ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage image : VAR_1 ) { image . METHOD_5 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_6 ( TYPE_3 . getParameters ( ) . METHOD_7 ( ) ) ) ) ; image . METHOD_8 ( TYPE_3 . getParameters ( ) . getStoragePoolId ( ) ) ; } METHOD_9 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; METHOD_3 ( VAR_2 , VAR_3 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 [ 1 ] } , METHOD_4 ( 1 ) ) ; METHOD_5 ( STRING_2 , null , VAR_5 ) ; VAR_6 . METHOD_6 ( VAR_1 ) ; METHOD_7 ( METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 , STRING_2 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; } 
private void METHOD_1 ( ) { for ( TYPE_1 . VdcActionParametersBase VAR_1 : TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_1 ) ) ; org.ovirt.engine.core.compat.Guid VAR_3 = VAR_2 . METHOD_3 ( ) ; org.ovirt.engine.core.compat.Guid VAR_4 = VAR_2 . METHOD_4 ( ) ; METHOD_5 ( VAR_3 , VAR_4 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( 1 ) ; METHOD_6 ( 1 ) ; METHOD_7 ( 1 ) ; METHOD_8 ( 1 ) ; VAR_1 . METHOD_9 ( ) ; TYPE_1 nic = resource . get ( ) ; TYPE_2 . METHOD_10 ( nic , 1 ) ; METHOD_11 ( nic ) ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( ! VAR_1 ) { addCanDoActionMessage ( VAR_2 ) ; } else { VAR_1 = TYPE_1 . METHOD_5 ( ) ; } } if ( ! VAR_1 ) { TYPE_1 . METHOD_6 ( ) ; } return VAR_1 ; } 
public void METHOD_1 ( final TYPE_1 < java.lang.String > model ) { VAR_1 . METHOD_1 ( model ) ; model . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 VAR_2 , java.lang.Object sender , TYPE_4 args ) { TYPE_5 . METHOD_5 ( VAR_3 this , model ) ; } } ) ; } 
protected boolean validate ( ) { if ( ! ( TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) ) { TYPE_2 VAR_1 = new TYPE_2 ( TYPE_1 . METHOD_2 ( ) ) ; if ( ( ! ( validate ( VAR_1 . METHOD_3 ( ) ) ) ) || ( ! ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) ) { return false ; } } return true ; } 
public TYPE_1 METHOD_1 ( TYPE_2 model ) { if ( ( ( java.lang.Boolean ) ( model . METHOD_2 ( ) . getEntity ( ) ) ) || ( ( java.lang.Boolean ) ( model . METHOD_3 ( ) . getEntity ( ) ) ) ) { return METHOD_4 ( model . METHOD_5 ( ) , ( ( java.lang.String ) ( model . METHOD_6 ( ) . getEntity ( ) ) ) ) ; } else { return null ; } } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) . toString ( ) ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) . name ( ) ) ; METHOD_7 ( VAR_1 . METHOD_8 ( ) . name ( ) ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 ; TYPE_2 quota = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; VAR_2 = new TYPE_1 ( ) ; if ( quota != null ) { VAR_2 . setId ( quota . getStoragePoolId ( ) ) ; VAR_2 . METHOD_4 ( quota . METHOD_5 ( ) ) ; } else { VAR_2 . setId ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; } return VAR_2 ; } 
public static org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ; entity . setId ( VAR_1 ) ; entity . METHOD_2 ( VAR_2 ) ; entity . METHOD_3 ( VAR_3 ) ; entity . METHOD_4 ( VAR_4 ) ; entity . METHOD_5 ( VAR_5 ) ; return TYPE_1 . METHOD_6 ( entity , VAR_1 ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 . DiskImage image = new TYPE_1 . DiskImage ( ) ; image . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; METHOD_4 ( ) . METHOD_5 ( ) . put ( image . getId ( ) , image ) ; } 
protected TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_3 . getParameters ( ) . METHOD_3 ( ) ) ; if ( ( VAR_2 == null ) || ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) ) { return new TYPE_4 ( VAR_1 ) ; } return super . METHOD_1 ( VAR_1 ) ; } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > list , TYPE_1 VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : list ) { if ( ( template . getId ( ) . equals ( VAR_3 ) ) || ( template . METHOD_2 ( ) . equals ( VAR_1 ) ) ) { VAR_2 . add ( template ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( command . METHOD_2 ( ) . get ( TYPE_1 . any ( VAR_1 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 VAR_2 = command . METHOD_3 ( ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_3 ( VAR_2 , VAR_2 . getId ( ) ) ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_3 class ) ) ; TYPE_4 . METHOD_6 ( command ) ; } 
public TYPE_1 [ ] METHOD_1 ( ) { try { TYPE_2 VAR_1 = TYPE_2 . getInstance ( STRING_1 ) ; VAR_1 . METHOD_2 ( this . VAR_2 , this . VAR_3 . METHOD_3 ( ) ) ; TYPE_3 VAR_4 = TYPE_3 . getInstance ( TYPE_3 . METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; return VAR_4 . METHOD_6 ( ) ; } catch ( TYPE_4 | TYPE_5 | TYPE_6 | TYPE_7 VAR_5 ) { throw new TYPE_8 ( VAR_5 ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . getSelectedItem ( ) ; if ( VAR_1 == null ) { return ; } TYPE_3 params = new TYPE_3 ( VAR_1 . METHOD_2 ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , params , new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 result ) { VAR_3 this . METHOD_5 ( ) ; } } ) ; } 
protected void METHOD_1 ( ) { if ( ! ( TYPE_1 . isEmpty ( vm . METHOD_2 ( ) ) ) ) { VAR_1 . add ( VAR_2 , vm . METHOD_2 ( ) ) ; } if ( ! ( TYPE_1 . isEmpty ( vm . METHOD_3 ( ) ) ) ) { VAR_1 . add ( VAR_3 , vm . METHOD_3 ( ) ) ; if ( ! ( TYPE_1 . isEmpty ( vm . METHOD_4 ( ) ) ) ) { VAR_1 . add ( VAR_4 , vm . METHOD_4 ( ) ) ; } } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 { TYPE_1 result = new TYPE_1 ( new TYPE_5 ( ) ) ; result . METHOD_2 ( TYPE_6 . METHOD_3 ( VAR_1 ) ) ; result . METHOD_4 ( TYPE_6 . METHOD_5 ( result , VAR_1 ) ) ; result . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_1 ) ) ; TYPE_6 . METHOD_8 ( result , VAR_1 ) ; TYPE_7 . METHOD_9 ( result . METHOD_10 ( ) , VAR_1 ) ; return result ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 . METHOD_3 ( ) ) . getStoragePoolId ( ) ; TYPE_2 . METHOD_4 ( VAR_1 . getValue ( ) ) ; java.util.List < TYPE_3 > result = dao . METHOD_5 ( VAR_1 . getValue ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . METHOD_6 ( result . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , true , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( true ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 , TYPE_2 VAR_2 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 . METHOD_2 ( ) ) ; TYPE_1 VAR_5 = new TYPE_1 ( VAR_3 ) ; return VAR_5 ; } catch ( TYPE_3 VAR_6 ) { throw new TYPE_4 ( VAR_6 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ; if ( VAR_2 ) { return ; } boolean VAR_3 = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . getValue ( ) ) ) ) ; METHOD_5 ( ) . setEntity ( VAR_3 ) ; METHOD_6 ( ( ! VAR_3 ? TYPE_3 . METHOD_7 ( ) : STRING_1 ) ) ; } 
private TYPE_1 METHOD_1 ( ) { switch ( ( ( TYPE_2 ) ( item ) ) . getStatus ( ) ) { case VAR_1 : return VAR_2 . METHOD_2 ( ) ; case VAR_3 : return VAR_2 . METHOD_3 ( ) ; case VAR_4 : return VAR_2 . METHOD_4 ( ) ; default : return VAR_2 . METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > result = dao . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; TYPE_2 . assertEquals ( result . get ( 0 ) . getId ( ) , VAR_4 . getId ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_2 ( ) ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) . METHOD_6 ( ) ; TYPE_1 . VdcQueryReturnValue returnValue = ( ( TYPE_1 . VdcQueryReturnValue ) ( METHOD_5 ( ) . getReturnValue ( ) ) ) ; TYPE_2 . assertEquals ( TYPE_3 . toString ( ) , returnValue . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > VAR_1 = METHOD_2 ( ) . getSelectedItem ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . getEntity ( ) ) != ( VAR_2 ) ) ) { METHOD_3 ( ) . setSelectedItem ( 1 ) ; METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( true ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 cluster = new TYPE_1 ( ) ; cluster . setId ( VAR_1 ) ; cluster . METHOD_2 ( new TYPE_2 ( ) ) ; cluster . METHOD_3 ( ) . setId ( VAR_2 ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( ) , cluster ) ; assertEquals ( VAR_3 , cluster . METHOD_6 ( ) ) ; assertEquals ( VAR_4 , cluster . METHOD_3 ( ) . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( boolean VAR_1 ) { VAR_2 = new TYPE_1 ( ) ; VAR_2 . setId ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( false ) ; VAR_3 . error ( STRING_1 , METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , false ) ; cmd . METHOD_5 ( ) ; TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ; } 
public synchronized boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid id , TYPE_1 . VdcActionType type ) { boolean VAR_1 = false ; if ( ( VAR_2 ) != null ) { for ( TYPE_2 VAR_3 : VAR_2 . METHOD_2 ( ) ) { if ( ( METHOD_3 ( id , VAR_3 ) ) && ( type . equals ( VAR_3 . getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) { VAR_1 = true ; break ; } } } return VAR_1 ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ; TYPE_2 result = new TYPE_2 ( ) ; if ( vds != null ) { result = TYPE_3 . METHOD_4 ( vds . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) . METHOD_7 ( result ) ; } 
public void METHOD_1 ( java.util.ArrayList parameters ) { super . METHOD_1 ( parameters ) ; if ( ! ( ( parameters . get ( INT_1 ) ) instanceof java.lang.Boolean ) ) { throw new TYPE_1 ( ) ; } VAR_1 = ( ( java.lang.Boolean ) ( parameters . get ( INT_1 ) ) ) ; if ( ! ( ( parameters . get ( INT_2 ) ) instanceof TYPE_2 . Guid ) ) { throw new TYPE_1 ( ) ; } VAR_2 = ( ( TYPE_2 . Guid ) ( parameters . get ( INT_2 ) ) ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( VAR_1 ) . when ( ( ( ( ( cluster . METHOD_3 ( ) ) > INT_1 ) || ( ( cluster . METHOD_3 ( ) ) <= 0 ) ) && ( ! ( ( cluster . METHOD_4 ( ) ) || ( cluster . METHOD_5 ( ) ) ) ) ) ) ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 status , java.lang.Object VAR_3 ) { TYPE_3 VAR_4 = null ; if ( ( VAR_4 = VAR_5 . get ( VAR_1 ) ) != null ) { return VAR_4 . METHOD_2 ( status , VAR_2 , VAR_3 ) ; } return true ; } 
protected void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( model ) ; VAR_2 . METHOD_3 ( java.lang.Integer . toString ( getModel ( ) . METHOD_4 ( ) ) ) ; VAR_3 . METHOD_3 ( TYPE_2 . METHOD_5 ( getModel ( ) . METHOD_6 ( ) ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , VAR_2 ) , null ) ) ; METHOD_4 ( ) ; METHOD_5 ( true , null , VAR_3 ) ; cmd . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( 2 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) ; } 
protected void METHOD_1 ( TYPE_1 model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; assertEquals ( VAR_3 [ VAR_1 ] , model . getName ( ) ) ; assertEquals ( TYPE_2 . name ( ) . METHOD_2 ( ) , model . METHOD_3 ( ) ) ; assertEquals ( VAR_4 . toString ( ) , model . METHOD_4 ( ) . getId ( ) ) ; METHOD_5 ( model ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , TYPE_2 VAR_3 , boolean VAR_4 ) { java.util.List < TYPE_1 > VAR_5 = null ; if ( ! ( METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) ) { return null ; } VAR_5 = METHOD_3 ( VAR_1 , VAR_2 ) ; return VAR_5 ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( storageDomain , command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( new TYPE_2 < java.lang.Boolean , TYPE_3 > ( true , null ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( storageDomain , command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( true ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( storageDomain ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; } if ( ( VAR_2 ) == null ) { VAR_2 = TYPE_1 . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 < TYPE_3 < ? > > VAR_1 = METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ; if ( ( event . METHOD_4 ( ) ) != null ) { event . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } METHOD_8 ( VAR_3 , event . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( final java.lang.String name , final java.lang.String value , final java.lang.String VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; final java.lang.String VAR_2 = name . METHOD_3 ( ) ; java.lang.String VAR_3 = value ; METHOD_4 ( ) ; if ( VAR_4 . METHOD_5 ( VAR_2 ) ) { VAR_3 = java.lang.String . METHOD_6 ( STRING_2 , VAR_4 . get ( VAR_2 ) , VAR_1 , value ) ; } VAR_4 . put ( name . METHOD_3 ( ) , VAR_3 ) ; } 
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters , java.util.List < java.lang.String > VAR_1 ) { if ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) { for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( host . getId ( ) . equals ( vm . METHOD_3 ( ) ) ) { return TYPE_1 . METHOD_4 ( host ) ; } } } return hosts ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 ) ; if ( VAR_2 == null ) { VAR_4 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) ; VAR_2 = VAR_5 ; } return VAR_2 ; } catch ( java.lang.Exception e ) { return VAR_5 ; } } 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) { return METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String METHOD_3 ( ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . toString ( ) ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; return VAR_4 . METHOD_1 ( VAR_3 ) ; } } ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS VAR_1 ) { return ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) ) ) < VAR_2 ) && ( ( VAR_1 . METHOD_4 ( ) ) >= VAR_3 ) ) && ( ( ( VAR_1 . METHOD_5 ( ) ) == null ) || ( ( ( METHOD_6 ( ) . METHOD_6 ( ) ) - ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ) < ( TYPE_1 . METHOD_7 ( VAR_4 ) ) ) ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( name , other . name ) ) && ( TYPE_2 . equals ( value , other . value ) ) ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) . getSelectedItem ( ) ) ; METHOD_3 ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( VAR_1 . METHOD_4 ( ) ) ) ; METHOD_3 ( ) . setSelectedItem ( TYPE_1 . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } boolean VAR_1 = METHOD_4 ( ) ; if ( ( ( ( METHOD_5 ( ) ) && ( VAR_2 ) ) && VAR_1 ) && ( METHOD_6 ( ) ) ) { METHOD_2 ( ) . METHOD_7 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_8 ( ) ) ; METHOD_2 ( ) . METHOD_9 ( false ) ; METHOD_10 ( ) ; } } 
public boolean METHOD_1 ( TYPE_1 < ? > args , TYPE_2 VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( args , VAR_3 , new TYPE_3 < java.lang.Boolean > ( ) { public void METHOD_4 ( java.lang.Boolean result ) { VAR_4 this . VAR_5 = result ; VAR_4 this . VAR_6 = VAR_3 ; } } , VAR_1 ) ; } 
public static org.ovirt.engine.core.common.businessentities . network METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > VAR_1 , java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . network VAR_2 : VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , name ) ) { return VAR_2 ; } } return null ; } 
public java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { return METHOD_2 ( new TYPE_2 < java.lang.String > ( ) { public java.lang.String METHOD_3 ( ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; VAR_2 . METHOD_8 ( ( ( int ) ( VAR_1 . METHOD_9 ( ) ) ) ) ; VAR_2 . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) ; return VAR_3 . METHOD_12 ( VAR_2 ) ; } } ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( null , METHOD_3 ( ) , VAR_1 ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.Object returnValue ) { if ( returnValue instanceof java.util.ArrayList ) { return ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; } if ( returnValue instanceof TYPE_1 ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( ( ( TYPE_1 ) ( returnValue ) ) ) ; return VAR_1 ; } throw new TYPE_2 ( ( STRING_1 + ( returnValue . METHOD_2 ( ) . getName ( ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) ; TYPE_1 VAR_4 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_3 ( VAR_4 ) ; TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , VAR_5 ) ; TYPE_2 . assertEquals ( true , VAR_4 . METHOD_5 ( ) . equals ( INT_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( STRING_2 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; client . METHOD_3 ( STRING_3 , VAR_2 , VAR_3 , VAR_4 ) ; TYPE_4 . assertEquals ( VAR_1 , new java.lang.String ( VAR_4 . METHOD_4 ( ) , STRING_2 ) ) ; TYPE_4 . assertEquals ( 0 , VAR_3 . size ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_4 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( METHOD_4 ( ) , METHOD_5 ( ) , null ) ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_4 ) . METHOD_7 ( TYPE_2 . any ( VAR_5 . VDS class ) , TYPE_2 . any ( VAR_6 class ) , TYPE_2 . any ( ) ) ; } 
protected static java.lang.String METHOD_1 ( byte VAR_1 , byte VAR_2 , byte VAR_3 , int VAR_4 ) { TYPE_1 result = new TYPE_1 ( ) ; int VAR_5 = ( ( ( VAR_1 & INT_1 ) < < INT_2 ) | ( ( VAR_2 & INT_1 ) < < INT_3 ) ) | ( VAR_3 & INT_1 ) ; while ( ( VAR_4 -- ) > 0 ) { result . append ( VAR_6 [ ( VAR_5 & INT_4 ) ] ) ; VAR_5 = VAR_5 > > INT_5 ; } return result . toString ( ) ; } 
public static int METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.Map < java.lang.String , java.lang.Integer > VAR_1 = TYPE_1 . METHOD_2 ( vm . METHOD_3 ( ) ) ; return ( ( ( VAR_1 . METHOD_4 ( VAR_2 , 0 ) ) + ( VAR_1 . METHOD_4 ( VAR_3 , 0 ) ) ) + INT_1 ) / INT_2 ; } 
private static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 < TYPE_1 > type , TYPE_3 < ? > ... VAR_1 ) { TYPE_2 < TYPE_1 > VAR_2 = TYPE_4 . METHOD_2 ( type , VAR_1 ) ; if ( VAR_2 == null ) { VAR_3 . METHOD_3 ( VAR_4 , type . getName ( ) , TYPE_5 . toString ( VAR_1 ) ) ; throw new TYPE_6 ( TYPE_7 . METHOD_4 ( VAR_5 , type ) ) ; } return VAR_2 ; } 
protected java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( TYPE_1 . isEmpty ( VAR_1 ) ) { return VAR_1 ; } java.lang.String VAR_3 = new TYPE_2 ( VAR_1 ) . getName ( ) ; return java.lang.String . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; } 
private void METHOD_1 ( ) { VAR_1 = new java.util.ArrayList < java.lang.Integer > ( VAR_2 . METHOD_2 ( ) ) ; TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < java.lang.Integer > ( ) { public int METHOD_4 ( java.lang.Integer VAR_3 , java.lang.Integer VAR_4 ) { return VAR_2 . get ( VAR_3 ) . METHOD_5 ( VAR_2 . get ( VAR_4 ) ) ; } } ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.util.Map < java.lang.String , java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( VAR_3 . size ( ) ) > 0 ) { VAR_2 . add ( VAR_4 , VAR_3 ) ; } } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; org.ovirt.engine.core.common.businessentities.VDSGroup value = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; value . METHOD_3 ( STRING_1 ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( value ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( value ) ; return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 < TYPE_2 , ? > column , boolean VAR_1 ) { if ( METHOD_2 ( column ) ) { VAR_2 . put ( column , VAR_1 ) ; java.lang.String VAR_3 = ( ( METHOD_3 ( column ) ) != null ) ? METHOD_3 ( column ) : VAR_4 . get ( column ) ; METHOD_4 ( column , VAR_1 ) ; METHOD_5 ( column , null , VAR_1 , VAR_3 , false ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; final TYPE_2 . EngineMessage VAR_2 = VAR_3 ; TYPE_3 . ValidationResult VAR_4 = new TYPE_3 . ValidationResult ( VAR_2 , TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 . getName ( ) ) ) ; METHOD_4 ( VAR_1 , VAR_5 , VAR_4 , VAR_4 , VAR_5 ) ; } 
public static void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = new TYPE_3 ( VAR_1 ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; try { VAR_3 . METHOD_2 ( VAR_2 ) ; } catch ( java.lang.Exception VAR_4 ) { TYPE_5 . METHOD_3 ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_4 . METHOD_4 ( ) ) ) ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; final TYPE_1 VAR_1 = METHOD_3 ( ) . get ( VAR_2 ) ; TYPE_2 . METHOD_5 ( VAR_1 ) ; final TYPE_1 VAR_3 = METHOD_3 ( ) . get ( VAR_4 ) ; TYPE_2 . METHOD_6 ( VAR_3 ) ; METHOD_2 ( ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . add ( VAR_1 ) ; if ( VAR_2 . isEmpty ( ) ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; TYPE_2 . log ( VAR_4 , VAR_5 ) ; return false ; } return true ; } 
public void METHOD_1 ( ) { TYPE_1 storageDomain = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; TYPE_2 . METHOD_3 ( storageDomain ) ; java.lang.String name = storageDomain . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( name . equals ( VAR_1 . METHOD_6 ( VAR_2 , VAR_3 ) ) ) ; } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > result ) { TYPE_1 . METHOD_2 ( result ) ; TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup VAR_1 : result ) { TYPE_1 . assertEquals ( VAR_2 . getId ( ) , VAR_1 . METHOD_4 ( ) ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_1 , TYPE_3 > VAR_2 ) { new TYPE_4 ( VAR_2 , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( new TYPE_8 ( ) . METHOD_2 ( ) , new TYPE_9 ( new TYPE_10 ( ) , new TYPE_11 ( ) ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_1 , getModel ( ) ) ; } 
protected org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM result = null ; TYPE_1 . VdcQueryReturnValue VAR_1 = TYPE_2 . getInstance ( ) . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_3 . getId ( ) ) ) ; if ( VAR_1 . getSucceeded ( ) ) { result = VAR_1 . getReturnValue ( ) ; } return result ; } 
public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { try { synchronized ( VAR_2 . instance ) { VAR_3 . METHOD_2 ( STRING_1 ) ; VAR_1 = true ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( host . METHOD_5 ( ) ) { METHOD_1 ( host ) ; } } VAR_3 . METHOD_2 ( STRING_2 ) ; } } finally { VAR_1 = false ; } } } 
private static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , java.util.ArrayList < java.lang.String > VAR_1 ) { if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vmId ) . size ( ) ) > 0 ) { VAR_1 . add ( TYPE_1 . toString ( ) ) ; return true ; } return false ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) { TYPE_2 tempVar = new TYPE_2 ( METHOD_2 ( ) . getId ( ) , VAR_1 , VAR_2 ) ; tempVar . METHOD_3 ( true ) ; TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_3 , tempVar , TYPE_4 . METHOD_5 ( ) ) ; } 
private static void METHOD_1 ( TYPE_1 result ) { if ( ! ( result . METHOD_2 ( ) ) ) { VAR_1 . error ( result . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( result . METHOD_3 ( ) ) ; TYPE_2 . METHOD_5 ( result . METHOD_6 ( ) ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) ) ; if ( ( VAR_1 ) == ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { METHOD_5 ( ) ; METHOD_6 ( ) ; } else { METHOD_7 ( ) ; } } 
private static boolean METHOD_1 ( TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; if ( ! ( TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) ) ) ) { return false ; } TYPE_4 target = VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ; return STRING_1 . equals ( target . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_2 : VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( VAR_2 . getName ( ) ) ) ) { VAR_1 . add ( VAR_2 ) ; } } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 event ) { if ( user . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( user . METHOD_5 ( ) , user . METHOD_6 ( ) . toString ( ) ) ) ; } else { VAR_1 . METHOD_3 ( STRING_2 , null ) ; } } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { try ( TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 , VAR_1 ) ; } catch ( TYPE_4 VAR_4 ) { throw new TYPE_5 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return VAR_1 . isEmpty ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( ( STRING_1 + name ) , VAR_3 . StorageDomain ) , aQuery ) ; } 
public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { final boolean VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; final boolean VAR_4 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_3 == VAR_4 ) { return VAR_5 . METHOD_1 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) ) ; } else { return VAR_3 ? - 1 : 1 ; } } 
public static void METHOD_1 ( TYPE_1 < java.lang.String , java.lang.String > VAR_1 ) { VAR_1 . put ( STRING_1 , TYPE_2 . toString ( ( ( VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) * INT_1 ) ) ) ; VAR_1 . put ( STRING_2 , TYPE_2 . toString ( ( ( VAR_2 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) * INT_1 ) ) ) ; } 
protected boolean METHOD_1 ( ) { boolean result = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; result = false ; } else if ( ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_2 ) ) || ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_3 ) ) ) { addCanDoActionMessage ( VAR_4 ) ; result = false ; } return result ; } 
public java.lang.String getValue ( TYPE_1 object ) { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( object . METHOD_2 ( ) ) ; java.util.ArrayList < java.lang.String > VAR_3 = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : VAR_2 . METHOD_3 ( ) ) { VAR_3 . add ( network . getName ( ) ) ; } ( ( TYPE_3 ) ( METHOD_4 ( ) ) ) . METHOD_5 ( VAR_3 ) ; return VAR_3 . isEmpty ( ) ? STRING_1 : VAR_3 . get ( 0 ) ; } 
private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : VAR_1 ) { if ( ( cluster . getStoragePoolId ( ) ) != null ) { if ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( cluster . getId ( ) , vm . METHOD_3 ( ) . getValue ( ) ) ) { return true ; } } } return false ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { METHOD_4 ( ( ( java.lang.String ) ( returnValue ) ) ) ; } } ) ) ; METHOD_5 ( ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] VAR_1 = ( ( java.lang.Object [ ] ) ( target ) ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ; java.util.List < TYPE_3 > VAR_4 = ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ; VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; } 
private void METHOD_1 ( ) { if ( ( getWindow ( ) ) != null ) { return ; } java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( java.lang.Object item : METHOD_2 ( ) ) { TYPE_2 < TYPE_1 , org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 = ( ( TYPE_2 < TYPE_1 , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( item ) ) ; VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ; } TYPE_3 model = new TYPE_3 ( this , VAR_1 , true ) ; METHOD_4 ( model ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { TYPE_1 VAR_7 = new TYPE_1 ( ) ; VAR_7 . METHOD_2 ( id ) ; VAR_7 . METHOD_3 ( VAR_1 ) ; VAR_7 . METHOD_4 ( VAR_2 ) ; VAR_7 . METHOD_5 ( VAR_5 ) ; VAR_7 . METHOD_6 ( VAR_6 ) ; VAR_7 . METHOD_7 ( VAR_3 ) ; VAR_7 . METHOD_8 ( VAR_4 ) ; dao . METHOD_9 ( VAR_7 ) ; return VAR_7 ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.when ( command . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 ) { TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; if ( ! ( VAR_3 < java.lang.Boolean > METHOD_4 ( VAR_4 ) ) ) { TYPE_1 . getInstance ( ) . METHOD_5 ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) . METHOD_3 ( ) ) ; } } } 
public void METHOD_1 ( ) { validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) ; org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( ) ) ; TYPE_3 . METHOD_4 ( validator . METHOD_5 ( TYPE_4 . instance ( ) . METHOD_6 ( VAR_4 class ) ) , TYPE_5 . METHOD_7 ( VAR_5 ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) == null ) ? null : TYPE_2 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ; return TYPE_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 . Network , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 , java.lang.String VAR_2 ) { if ( context == null ) { return null ; } TYPE_1 VAR_3 = null ; if ( ( context != null ) && ( context . METHOD_2 ( ) ) ) { TYPE_1 VAR_4 = context . METHOD_3 ( ) ; if ( VAR_4 != null ) { VAR_3 = TYPE_4 . METHOD_4 ( VAR_4 , VAR_1 , VAR_2 ) ; } } return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface = METHOD_2 ( ) ; METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , ( ( iface . METHOD_6 ( ) ) + 1 ) , iface . METHOD_7 ( ) ) ; } 
public boolean METHOD_1 ( TYPE_1 storageDomain ) { int VAR_1 = METHOD_2 ( storageDomain ) ; if ( VAR_1 > 0 ) { java.util.List < TYPE_2 > list = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( storageDomain . METHOD_5 ( ) ) ; for ( TYPE_2 VAR_2 : METHOD_6 ( list , storageDomain . METHOD_5 ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ; } } return true ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , VAR_2 ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( true , null , VAR_3 ) ; cmd . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( 2 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) ; } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > result = dao . METHOD_2 ( VAR_1 . getId ( ) ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup VAR_2 : result ) { TYPE_1 . assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.String > VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_3 = VAR_2 . get ( VAR_4 ) ; if ( TYPE_2 . isEmpty ( VAR_3 ) ) { return new TYPE_1 ( ) . error ( ) . METHOD_3 ( VAR_5 , STRING_1 ) ; } for ( TYPE_3 VAR_6 : VAR_7 ) { VAR_6 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_8 ) ) ; } return null ; } 
protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; super . METHOD_2 ( VAR_1 , new TYPE_1 ( vm . METHOD_3 ( ) ) ) ; } 
public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult VAR_1 = TYPE_2 . validate ( value ) ; if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { return VAR_1 ; } TYPE_1 . ValidationResult result = new TYPE_1 . ValidationResult ( ) ; if ( ( value != null ) && ( value instanceof java.lang.String ) ) { result . METHOD_2 ( METHOD_3 ( ( ( java.lang.String ) ( value ) ) ) ) ; result . METHOD_4 ( VAR_2 ) ; } return result ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) throws TYPE_4 { final TYPE_5 VAR_2 = new TYPE_5 ( VAR_1 ) ; this . VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; try { this . METHOD_3 ( ) . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; } finally { METHOD_7 ( VAR_1 , VAR_2 ) ; } return VAR_2 ; } 
private void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > VAR_1 = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ; for ( java.lang.Object VAR_2 : METHOD_2 ( ) ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( VAR_2 ) ) ; VAR_1 . add ( new TYPE_2 ( template . getId ( ) , getEntity ( ) . getId ( ) , pool . getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_3 , VAR_1 ) ; METHOD_4 ( ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( ) . get ( iface . getName ( ) ) ; return ( VAR_1 == null ) || ( ! ( iface . METHOD_3 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( true , VAR_1 ) ; TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_2 = TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_6 ) . METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( VAR_7 . METHOD_6 ( cluster , VAR_2 ) . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network VAR_1 = METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( false ) ; org.ovirt.engine.core.common.businessentities.network.Network VAR_2 = METHOD_2 ( STRING_2 ) ; VAR_2 . METHOD_4 ( INT_1 ) ; METHOD_5 ( VAR_1 , VAR_2 ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = METHOD_6 ( STRING_3 , VAR_1 ) ; METHOD_7 ( nic ) ; TYPE_1 VAR_3 = METHOD_8 ( METHOD_9 ( nic , METHOD_10 ( nic . getName ( ) , VAR_2 . METHOD_11 ( ) , VAR_2 . getName ( ) ) ) ) ; METHOD_12 ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; final TYPE_1 model = TYPE_2 . getModel ( 0 ) ; model . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 [ 2 ] ) ) ; model . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ; try { METHOD_7 ( resource . METHOD_8 ( model ) , 0 ) ; METHOD_9 ( STRING_1 ) ; } catch ( TYPE_4 VAR_3 ) { METHOD_10 ( VAR_3 , VAR_4 ) ; } } 
public boolean METHOD_1 ( java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof java.util.ArrayList ) ) { return false ; } java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ) ( VAR_1 ) ) ; return ( ( VAR_2 != null ) && ( ( VAR_2 . size ( ) ) == ( VAR_3 . size ( ) ) ) ) && ( VAR_3 . METHOD_2 ( VAR_2 ) ) ; } 
protected boolean validate ( TYPE_1 . ValidationResult VAR_1 , java.util.List < java.lang.String > VAR_2 ) { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { VAR_2 . add ( VAR_1 . METHOD_2 ( ) . name ( ) ) ; if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { for ( java.lang.String VAR_3 : VAR_1 . METHOD_3 ( ) ) { VAR_2 . add ( VAR_3 ) ; } } } return VAR_1 . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = ( ( TYPE_2 ) ( dao ) ) . METHOD_2 ( true , false , STRING_1 ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; TYPE_3 . assertEquals ( 1 , VAR_1 . size ( ) ) ; TYPE_3 . assertEquals ( VAR_2 , VAR_1 . get ( 0 ) . getId ( ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 == null ) { java.util.List < TYPE_2 > VAR_2 = new TYPE_3 < TYPE_2 > ( ) ; VAR_2 . add ( METHOD_4 ( ) ) ; METHOD_2 ( ) . setItems ( VAR_2 ) ; } else { for ( TYPE_2 VAR_3 : VAR_1 ) { VAR_3 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) , false , METHOD_6 ( ) . getId ( ) , null ) ; } } } 
public TYPE_1 METHOD_1 ( java.lang.String name ) throws TYPE_2 { if ( name == null ) { throw new TYPE_2 ( java.lang.String . METHOD_2 ( STRING_1 ) ) ; } TYPE_3 VAR_1 = VAR_2 . get ( name ) ; if ( VAR_1 == null ) { throw new TYPE_2 ( java.lang.String . METHOD_2 ( STRING_2 , name ) ) ; } return VAR_3 ; } 
public void setEntity ( java.lang.Object value ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( value ) ) ; VAR_1 = ( ( ( vds == null ) || ( ( getEntity ( ) ) == null ) ) || ( ! ( vds . getId ( ) . equals ( getEntity ( ) . getId ( ) ) ) ) ) || ( ! ( vds . METHOD_1 ( ) . equals ( getEntity ( ) . METHOD_1 ( ) ) ) ) ; super . setEntity ( value ) ; } 
public TYPE_1 add ( TYPE_2 . Network network ) { METHOD_1 ( network , METHOD_2 ( ) ) ; METHOD_3 ( VAR_1 . Network class , network ) ; TYPE_2 . Network entity = map ( network ) ; TYPE_3 params = METHOD_4 ( network , entity ) ; return METHOD_5 ( VAR_2 , params , new TYPE_4 ( network . getName ( ) , params . getStoragePoolId ( ) . toString ( ) ) ) ; } 
public void METHOD_1 ( final TYPE_1 model ) { VAR_1 . METHOD_1 ( model ) ; VAR_2 . METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( ) ; model . getName ( ) . METHOD_6 ( ) . METHOD_7 ( new TYPE_2 ( ) { public void METHOD_8 ( TYPE_3 VAR_4 , java.lang.Object sender , TYPE_4 args ) { TYPE_5 . METHOD_9 ( VAR_5 this , model ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { resource . METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , getEntity ( 0 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 VAR_5 = resource . list ( ) ; METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; assertEquals ( VAR_5 . METHOD_7 ( ) . size ( ) , INT_1 ) ; } 
private boolean METHOD_1 ( TYPE_1 parameters , java.util.List < TYPE_2 > VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , parameters . METHOD_3 ( ) . getId ( ) ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; return true ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; METHOD_3 ( ) ; if ( ( ( TYPE_1 . getVm ( ) ) != null ) && ( ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) == ( VAR_1 ) ) ) { METHOD_5 ( null ) ; super . METHOD_1 ( ) ; } else { METHOD_6 ( METHOD_7 ( ) . getId ( ) ) ; VAR_2 = true ; TYPE_1 . METHOD_8 ( false ) ; TYPE_1 . log ( ) ; } } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_3 , VAR_1 ) ; if ( VAR_2 . isEmpty ( ) ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; TYPE_2 . log ( VAR_4 , VAR_5 ) ; return false ; } return true ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; java.util.Map < java.lang.String , java.lang.Object > VAR_3 = new java.util.HashMap ( ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; dao . METHOD_2 ( VAR_4 , VAR_3 ) ; java.lang.String result = dao . get ( VAR_4 , VAR_1 ) ; TYPE_1 . assertEquals ( result , VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; java.lang.String VAR_6 = dao . get ( VAR_4 , VAR_1 ) ; TYPE_1 . METHOD_4 ( VAR_6 ) ; } 
protected org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . VdcActionType VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 , new TYPE_4 ( VAR_2 , VAR_4 , VAR_5 , VAR_1 . METHOD_2 ( ) , TYPE_5 . getParameters ( ) , VAR_1 . METHOD_3 ( ) , TYPE_5 . METHOD_4 ( ) ) ) ; VAR_3 . METHOD_5 ( TYPE_5 . getParameters ( ) . METHOD_6 ( ) ) ; org.ovirt.engine.core.compat.Guid VAR_6 = TYPE_6 . getInstance ( ) . METHOD_7 ( VAR_7 , VAR_3 , false ) ; return VAR_6 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = new TYPE_1 ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 = new TYPE_1 < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_3 = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ; VAR_3 . METHOD_2 ( STRING_1 ) ; VAR_2 . add ( VAR_3 ) ; METHOD_3 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_6 , VAR_1 } , VAR_2 ) ; } 
public void setEntity ( java.lang.Object value ) { super . setEntity ( value ) ; if ( METHOD_1 ( ) . METHOD_2 ( ) ) { METHOD_3 ( ( ( java.lang.Boolean ) ( value ) ) ) ; if ( ! ( ( java.lang.Boolean ) ( value ) ) ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } } } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > VAR_3 = VAR_2 . METHOD_1 ( ) ; while ( VAR_3 . METHOD_2 ( ) ) { if ( ( VAR_3 . METHOD_3 ( ) . getStatus ( ) ) != ( VAR_4 ) ) { VAR_3 . METHOD_4 ( ) ; } } VAR_1 . METHOD_5 ( VAR_2 ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( super . equals ( obj ) ) ) { return false ; } if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; if ( ( METHOD_1 ( ) ) != ( other . METHOD_1 ( ) ) ) { return false ; } return true ; } 
void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ( ( command . METHOD_4 ( ) ) && ( command . METHOD_5 ( ) ) ) ) ; METHOD_2 ( ) . METHOD_6 ( command . METHOD_7 ( ) ) ; METHOD_2 ( ) . METHOD_8 ( command . METHOD_9 ( ) ) ; METHOD_2 ( ) . setTitle ( command . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { try { int length = 0 ; this . VAR_3 = METHOD_2 ( VAR_1 ) ; this . VAR_4 = METHOD_2 ( VAR_1 ) ; this . VAR_5 = METHOD_3 ( VAR_1 ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( e ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . get ( VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( TYPE_3 . equals ( VAR_1 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( VAR_3 ) ; VAR_1 . METHOD_6 ( STRING_1 ) ; dao . METHOD_7 ( VAR_1 ) ; TYPE_1 result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_2 ( result ) ; TYPE_2 . assertEquals ( VAR_1 , result ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; java.util.List < TYPE_1 . DiskImage > VAR_1 = TYPE_2 . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( VAR_1 ) ; TYPE_3 . METHOD_7 ( cmd ) ; org.mockito.Mockito . METHOD_8 ( VAR_3 ) . METHOD_6 ( VAR_1 ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_2 ( ) . get ( METHOD_3 ( ) . getId ( ) ) ) ; return ( ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ) && ( validate ( validator . METHOD_8 ( ) ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . getId ( ) ) == null ) { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_1 . setId ( VAR_2 . getId ( ) ) ; } } } 
public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int result = 1 ; result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( source ) == null ? 0 : source . METHOD_1 ( ) ) ; return result ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { boolean VAR_3 = ( ! ( METHOD_2 ( ) . isEmpty ( ) ) ) || ( VAR_2 . METHOD_3 ( ) ) ; return new TYPE_3 ( ) . METHOD_4 ( VAR_1 , getParameters ( ) . METHOD_5 ( ) , ( VAR_3 ? VAR_4 : VAR_5 ) , getParameters ( ) . METHOD_6 ( ) , TYPE_4 . getVm ( ) , true , VAR_2 . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 2 ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( 2 , TYPE_3 . toString ( ) ) ) ; VAR_1 . METHOD_4 ( 0 ) ; VAR_1 . METHOD_5 ( 0 ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( METHOD_9 ( ) ) ; return TYPE_4 . METHOD_10 ( VAR_1 ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { return false ; } TYPE_2 < TYPE_3 > validator = METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; return ( ( super . METHOD_1 ( ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; TYPE_2 VAR_2 = new TYPE_3 ( VAR_3 ) ; METHOD_3 ( 1 , VAR_2 ) ; VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_1 ) ; try { METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_4 VAR_6 ) { METHOD_8 ( VAR_6 , VAR_7 , VAR_2 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_3 ) ) ) ; dao . METHOD_7 ( VAR_4 , VAR_5 , VAR_3 ) ; VAR_1 = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) ; TYPE_2 . assertEquals ( STRING_2 , VAR_1 . METHOD_4 ( ) , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_4 [ 0 ] , VAR_4 [ 1 ] , java.lang.Boolean . FALSE } , true , true , false ) ; VAR_1 = METHOD_4 ( VAR_1 , VAR_5 , VAR_4 [ 1 ] . toString ( ) ) ; METHOD_5 ( VAR_1 ) ; VAR_6 . METHOD_6 ( ) ; METHOD_7 ( resource . METHOD_8 ( ) ) ; } 
public java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , java.util.Map < java.lang.String , java.lang.Object > parameters ) { java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > VAR_1 = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { VAR_1 . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId ( ) , vds . METHOD_2 ( ) ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( java.lang.String name , java.lang.String value ) { TYPE_1 VAR_1 = new TYPE_1 ( name , value ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; java.util.List < TYPE_1 > VAR_3 = VAR_4 . get ( name ) ; if ( VAR_3 == null ) { VAR_4 . put ( name , new TYPE_2 < TYPE_1 > ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; } else { VAR_3 . add ( VAR_1 ) ; } } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_4 class ) ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_7 ( ) ; } 
TYPE_1 < org.ovirt.engine.core.common.businessentities.VM , TYPE_2 > METHOD_1 ( ) { TYPE_1 < org.ovirt.engine.core.common.businessentities.VM , TYPE_2 > VAR_1 = METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ; VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_8 ( VAR_3 ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito . METHOD_2 ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( STRING_1 ) , TYPE_1 . METHOD_5 ( new TYPE_2 [ ] { } ) , TYPE_1 . METHOD_5 ( new java.lang.Object [ ] { } ) , TYPE_1 . METHOD_5 ( INT_1 ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_5 ( VAR_2 ) ) ; } 
public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_3 ( ) : VAR_3 . METHOD_4 ( ) ) ) ; VAR_4 . METHOD_5 ( ( VAR_1 ? VAR_5 . METHOD_6 ( ) : VAR_5 . METHOD_7 ( ) ) ) ; VAR_4 . METHOD_8 ( ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 result ; if ( VAR_1 ) { result = new TYPE_1 ( VAR_2 , VAR_3 ) ; } else { result = new TYPE_1 ( VAR_4 . ERROR , VAR_5 ) ; } org.mockito.Mockito.doReturn ( result ) . when ( VAR_6 ) . METHOD_2 ( TYPE_2 . any ( VAR_7 class ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( false ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 ) ; VAR_3 . METHOD_8 ( org.ovirt.engine.core.compat.Guid . METHOD_9 ( ) ) ; TYPE_2 . METHOD_10 ( command ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; VAR_2 . setItems ( ( ( TYPE_2 ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { disk . METHOD_2 ( STRING_1 ) ; disk . METHOD_3 ( STRING_2 ) ; METHOD_4 ( disk , TYPE_1 . METHOD_5 ( STRING_1 ) , TYPE_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( STRING_2 ) ) , TYPE_1 . METHOD_8 ( 2 ) ) ; TYPE_1 . METHOD_9 ( disk ) ; } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String value = VAR_2 . METHOD_1 ( VAR_1 ) ; if ( value == null ) { java.lang.String VAR_3 = ( STRING_1 + VAR_1 ) + STRING_2 ; VAR_4 . error ( VAR_3 ) ; throw new TYPE_1 ( VAR_3 ) ; } return VAR_2 . METHOD_1 ( VAR_1 ) ; } 
protected < TYPE_1 > void METHOD_1 ( TYPE_2 context , TYPE_3 value , TYPE_4 VAR_1 , TYPE_5 < TYPE_3 , TYPE_1 > VAR_2 ) { TYPE_6 < TYPE_1 > VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; VAR_3 . METHOD_1 ( context , VAR_2 . getValue ( value ) , VAR_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { if ( ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) || ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { return VAR_3 ; } else { TYPE_3 VAR_4 = TYPE_4 . METHOD_4 ( VAR_1 ) ; if ( VAR_4 == null ) { return TYPE_4 . METHOD_5 ( VAR_2 ) ; } else { return TYPE_4 . METHOD_6 ( VAR_4 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( new int [ ] { 0 , 0 , 0 } ) ; METHOD_4 ( new int [ ] { 0 } ) ; METHOD_5 ( new java.lang.Integer [ ] { 0 , 0 } ) ; METHOD_6 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 1 ] } , METHOD_7 ( VAR_3 [ 1 ] ) ) ; super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return ; } boolean VAR_2 = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ; METHOD_5 ( VAR_2 ) ; boolean VAR_4 = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_3 ( VAR_5 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ; METHOD_6 ( VAR_4 ) ; } 
protected boolean METHOD_1 ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; TYPE_3 < TYPE_4 > VAR_2 = TYPE_3 . METHOD_4 ( VAR_3 ) ; java.util.List < TYPE_5 . DiskImage > VAR_4 = TYPE_6 . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , true , false , false ) ; VAR_5 = TYPE_6 . METHOD_7 ( VAR_4 , VAR_1 , VAR_2 ) ; return validate ( new TYPE_7 ( VAR_4 ) . METHOD_8 ( VAR_5 , VAR_1 , VAR_6 , VAR_2 ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) , null ) ) ; METHOD_4 ( ) ; METHOD_5 ( true , null , VAR_3 ) ; cmd . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( INT_1 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) ; } 
public TYPE_1 . VdcActionParametersBase METHOD_1 ( TYPE_1 . VdcActionType VAR_1 , TYPE_1 . VdcActionParametersBase parameters ) { TYPE_1 . VdcActionParametersBase VAR_2 = parameters . METHOD_2 ( ) ; if ( ( VAR_1 == ( VAR_3 ) ) || ( VAR_2 == null ) ) { return parameters ; } VAR_2 . METHOD_3 ( parameters . METHOD_4 ( ) ) ; return VAR_2 ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > map = ( ( java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; VAR_3 . add ( map . get ( true ) ) ; VAR_2 . setItems ( VAR_3 ) ; } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 . METHOD_2 ( this . VAR_2 ) ) { return ( this . VAR_3 ) + VAR_1 ; } return ( ( ( this . VAR_3 ) + ( VAR_4 ) ) + ( this . VAR_2 ) ) + VAR_1 ; } 
void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_3 ( VAR_5 ) ; METHOD_3 ( VAR_6 , VAR_4 ) ; VAR_7 . METHOD_4 ( VAR_1 ) ; try { METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_5 VAR_8 ) { METHOD_7 ( VAR_8 , VAR_9 , VAR_4 ) ; } finally { VAR_2 . METHOD_8 ( ) ; } } 
public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; } finally { if ( ( user ) != null ) { VAR_1 . METHOD_3 ( VAR_4 . METHOD_4 ( new TYPE_1 ( user . METHOD_5 ( ) ) ) ) ; } VAR_4 . METHOD_6 ( ) ; } } 
protected java.lang.Object METHOD_1 ( java.lang.Object entity ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( entity ) ) ; TYPE_2 storageDomain = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) . getSelectedItem ( ) ) ) ; return ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( ) . toString ( ) ) + ( storageDomain . getId ( ) . toString ( ) ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = diskImage . METHOD_3 ( ) . get ( 0 ) ; TYPE_1 validator = METHOD_4 ( VAR_2 , TYPE_2 . getStoragePoolId ( ) . getValue ( ) ) ; return validate ( validator . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) == ( - 1 ) ) ) ; TYPE_1 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) == 1 ) ) ; TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) ) == 0 ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( result ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { METHOD_2 ( ) . setEntity ( result ) ; METHOD_3 ( true ) ; } else { METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; METHOD_3 ( false ) ; } } 
private void METHOD_1 ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 , TYPE_1 < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { org.ovirt.engine.core.common.businessentities.network.Network network = VAR_2 . get ( VAR_4 . METHOD_2 ( ) ) ; TYPE_4 VAR_5 = VAR_3 . get ( network . METHOD_3 ( ) ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = METHOD_4 ( VAR_1 , VAR_2 , VAR_4 ) ; if ( nic != null ) { TYPE_5 VAR_6 = METHOD_5 ( network , VAR_5 , nic ) . METHOD_6 ( ) ; VAR_4 . METHOD_7 ( VAR_6 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , null ) ; TYPE_1 VAR_2 = METHOD_2 ( STRING_2 , null ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) , null ) ) ; METHOD_6 ( cmd , VAR_5 ) ; TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ; METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ; METHOD_8 ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) ) ; METHOD_9 ( TYPE_1 . getParameters ( ) . METHOD_10 ( ) ) ; } 
private void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { METHOD_2 ( VAR_4 ) ; METHOD_3 ( METHOD_4 ( VAR_5 , VAR_6 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 } , VAR_1 , VAR_2 ) ) ; TYPE_1 . Network model = getModel ( 0 ) ; try { ( ( TYPE_2 ) ( VAR_7 ) ) . add ( model ) ; METHOD_5 ( STRING_2 ) ; } catch ( TYPE_3 VAR_8 ) { METHOD_6 ( VAR_8 , VAR_3 ) ; } } 
private org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( org.ovirt.engine.core.compat . Version VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_3 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_3 . setId ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_5 . get ( VAR_2 ) ) . thenReturn ( VAR_3 ) ; return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . StorageDomain storageDomain = new TYPE_1 . StorageDomain ( ) ; storageDomain . setId ( VAR_1 ) ; storageDomain . METHOD_2 ( new TYPE_2 ( ) ) ; storageDomain . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ; TYPE_3 . METHOD_5 ( METHOD_6 ( ) , storageDomain ) ; assertEquals ( VAR_2 , storageDomain . METHOD_7 ( ) ) ; METHOD_8 ( storageDomain . METHOD_3 ( ) . METHOD_7 ( ) ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String url , int VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( url , VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; VAR_3 . METHOD_5 ( new TYPE_4 ( new TYPE_5 ( METHOD_6 ( url ) , METHOD_7 ( url , VAR_1 ) ) ) , VAR_6 ) ; new TYPE_6 ( VAR_3 , VAR_7 , VAR_8 ) . METHOD_8 ( ) ; return VAR_3 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
protected java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > METHOD_1 ( ) { return getParameters ( ) . METHOD_2 ( ) ? TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) . toString ( ) , TYPE_4 . METHOD_5 ( VAR_1 . VM , METHOD_6 ( ) ) ) : null ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( null , VAR_1 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_1 . get ( 0 ) , STRING_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; METHOD_3 ( ) ; if ( ( ( TYPE_1 . getVm ( ) ) != null ) && ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) == ( VAR_1 ) ) ) { METHOD_4 ( null ) ; super . METHOD_1 ( ) ; } else { TYPE_1 . METHOD_5 ( ) ; VAR_2 = true ; } } 
protected boolean METHOD_1 ( final TYPE_1 ... VAR_1 ) { boolean VAR_2 = false ; TYPE_1 status = METHOD_2 ( ) ; if ( status != null ) { VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) . METHOD_4 ( METHOD_2 ( ) ) ; } if ( ! VAR_2 ) { if ( status == ( VAR_3 ) ) { return METHOD_5 ( VAR_4 ) ; } METHOD_6 ( ) ; } return VAR_2 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . AuditLogType VAR_2 , java.lang.String VAR_3 ) { TYPE_2 . AuditLogSeverity VAR_4 = VAR_2 . METHOD_2 ( ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( VAR_5 == null ) { VAR_6 . METHOD_4 ( STRING_1 ) ; } else { TYPE_4 . METHOD_5 ( VAR_1 , VAR_5 ) ; TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) ; METHOD_9 ( VAR_4 , TYPE_4 . METHOD_10 ( VAR_3 , VAR_5 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_3 ( VAR_5 ) ; METHOD_3 ( VAR_4 ) ; VAR_6 . METHOD_4 ( VAR_1 ) ; VAR_7 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_4 VAR_8 ) { METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ; } finally { VAR_2 . METHOD_9 ( ) ; } } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_1 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; } METHOD_7 ( TYPE_1 . METHOD_8 ( ) . getId ( ) ) ; } 
public boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { java.lang.String VAR_1 = METHOD_3 ( ) ; if ( ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , this , this . METHOD_6 ( ) , VAR_2 ) ) == null ) { return true ; } return false ; } return true ; } 
TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; return ( VAR_1 != null ) && ( ( VAR_1 . METHOD_4 ( ) ) != null ) ? VAR_1 . METHOD_4 ( ) : new java.util.ArrayList < TYPE_2 > ( ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) ) { return true ; } return false ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) ; VAR_2 . getParameters ( ) . METHOD_5 ( VAR_1 ) ; VAR_2 . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( ) ; org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_10 ( 1 ) ) . METHOD_4 ( VAR_1 ) ; } 
void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( ) { public java.lang.String METHOD_2 ( TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { return VAR_2 . METHOD_3 ( ) ; } return null ; } } ) ; VAR_3 = new TYPE_4 ( ) ; VAR_4 = new TYPE_5 < TYPE_2 > ( VAR_1 , VAR_3 ) ; } 
protected void METHOD_1 ( TYPE_1 model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; assertEquals ( VAR_3 [ VAR_1 ] . toString ( ) . METHOD_2 ( ) , model . METHOD_3 ( ) ) ; METHOD_4 ( model ) ; } 
private TYPE_1 METHOD_1 ( ) { for ( TYPE_1 VAR_1 : getVm ( ) . METHOD_2 ( ) ) { if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) return VAR_1 ; } VAR_3 . METHOD_4 ( STRING_1 , METHOD_5 ( ) ) ; return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 . Network > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . METHOD_6 ( TYPE_2 . getModel ( 0 ) ) ; METHOD_7 ( STRING_2 ) ; } catch ( TYPE_3 VAR_5 ) { METHOD_8 ( VAR_5 ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_3 = null ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; } 
private TYPE_1 < TYPE_2 . DiskImage > METHOD_1 ( ) { TYPE_1 < TYPE_2 . DiskImage > VAR_1 = new TYPE_3 < > ( ) ; for ( org.ovirt.engine.core.compat.Guid VAR_2 : TYPE_4 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_2 . DiskImage diskImage = new TYPE_2 . DiskImage ( ) ; diskImage . METHOD_4 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_5 . METHOD_5 ( VAR_2 ) ) ) ; VAR_1 . add ( diskImage ) ; } return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 < TYPE_2 . DiskImage > value ) { java.util.ArrayList < TYPE_2 . DiskImage > VAR_1 = ( value != null ) ? VAR_2 . Linq < TYPE_2 . DiskImage > METHOD_2 ( value ) : new java.util.ArrayList < TYPE_2 . DiskImage > ( ) ; TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( ) ) ; super . setItems ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( diskImage . METHOD_4 ( ) , VAR_1 ) ; METHOD_2 ( ) . METHOD_5 ( ) ; diskImage . METHOD_6 ( VAR_2 ) ; TYPE_2 . METHOD_7 ( diskImage . METHOD_8 ( ) , VAR_2 ) ; return null ; } 
public void METHOD_1 ( ) { TYPE_1 result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_2 ( result ) ; TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 1 ) ; result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 0 ) ; } 
private boolean METHOD_1 ( ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . METHOD_2 ( ) ) != ( VAR_2 ) ) { TYPE_1 VAR_3 = METHOD_3 ( ) . get ( new TYPE_2 ( disk . getId ( ) , vm . getId ( ) ) ) ; if ( VAR_3 . METHOD_4 ( ) ) { addCanDoActionMessage ( VAR_4 ) ; return false ; } } } return true ; } 
private void METHOD_1 ( ) { java.lang.String VAR_1 ; int VAR_2 = INT_1 ; for ( int i = - 2 ; i > ( - INT_2 ) ; i -- ) { VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( i ) . METHOD_4 ( ) . toString ( ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; VAR_4 . put ( VAR_1 , VAR_1 ) ; VAR_2 ++ ; } } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ! ( obj instanceof TYPE_1 ) ) { return false ; } TYPE_2 other = ( ( TYPE_2 ) ( obj ) ) ; return ( ( super . equals ( obj ) ) && ( TYPE_3 . equals ( VAR_1 , VAR_2 ) ) ) && ( TYPE_3 . equals ( VAR_3 , VAR_4 ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . add ( VAR_2 ) ; VAR_3 . METHOD_2 ( METHOD_3 ( null ) ) ; METHOD_4 ( VAR_4 ) ; try { METHOD_5 ( ) ; TYPE_1 . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 , VAR_6 , new TYPE_3 ( VAR_7 ) ) ; } finally { VAR_1 . METHOD_8 ( ) ; } } 
public static boolean METHOD_1 ( TYPE_1 disk , org.ovirt.engine.core.common.businessentities.VM vm ) { if ( disk == null ) { VAR_1 . METHOD_2 ( STRING_1 ) ; return false ; } java.lang.String VAR_2 = STRING_2 ; int VAR_3 = 1 ; if ( vm != null ) { VAR_2 = vm . METHOD_3 ( ) ; VAR_3 = ( vm . METHOD_4 ( ) ) + 1 ; } disk . METHOD_1 ( TYPE_2 . METHOD_5 ( disk , VAR_2 , VAR_3 ) ) ; return true ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( METHOD_2 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( cmd . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . add ( STRING_1 ) ; METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( 1 ) ; METHOD_6 ( 1 ) ; VAR_2 . METHOD_7 ( ) ; TYPE_1 nic = resource . get ( ) ; METHOD_8 ( nic . METHOD_9 ( ) ) ; METHOD_10 ( nic , 1 ) ; METHOD_11 ( nic ) ; } finally { VAR_1 . METHOD_12 ( ) ; } } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid vmId , java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > VAR_2 ) { TYPE_1 VAR_3 = TYPE_2 . get ( VAR_4 class ) ; VAR_3 . METHOD_2 ( VAR_1 , vmId , new TYPE_3 < java.lang.String > ( VAR_2 . METHOD_3 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; TYPE_1 image = new TYPE_1 ( ) ; image . METHOD_3 ( VAR_2 ) ; image . METHOD_4 ( VAR_3 ) ; TYPE_2 params = new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , image ) ; METHOD_5 ( VAR_1 , params ) ; TYPE_3 . METHOD_6 ( command . METHOD_7 ( ) ) ; TYPE_3 . METHOD_8 ( command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( STRING_1 ) ) ; } 
public void METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < > ( ) ; VAR_1 . put ( VAR_2 , VAR_3 ) ; VAR_1 . put ( VAR_4 , VAR_3 ) ; VAR_1 . put ( VAR_5 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_6 , vm . METHOD_3 ( ) . toString ( ) ) ; VAR_1 . put ( VAR_7 , vm . getId ( ) . toString ( ) ) ; VAR_8 . add ( VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_3 ) ) ; TYPE_1 . METHOD_2 ( STRING_4 , VAR_1 . METHOD_3 ( STRING_2 ) . METHOD_7 ( ) . equals ( STRING_5 ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; org.mockito.Mockito . METHOD_5 ( VAR_1 , org.mockito.Mockito . METHOD_6 ( VAR_2 ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; org.mockito.Mockito . METHOD_5 ( VAR_1 , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( TYPE_2 . METHOD_8 ( ) ) ; } 
protected < TYPE_1 > TYPE_2 METHOD_1 ( TYPE_3 result , TYPE_4 < TYPE_1 , TYPE_2 > VAR_1 ) { try { return VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( result . METHOD_3 ( ) ) ) ) ; } catch ( java.lang.Exception e ) { return TYPE_5 . METHOD_4 ( e , false ) ; } } 
protected boolean METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { return METHOD_3 ( VAR_2 ) ; } if ( ! ( METHOD_4 ( ) ) ) { return METHOD_3 ( VAR_3 ) ; } if ( ! ( TYPE_1 . METHOD_5 ( VAR_4 ) . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ) ) { return METHOD_3 ( VAR_6 ) ; } return true ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( java.lang.Boolean ) ( source ) ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( INT_1 ) ; TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( STRING_1 ) ; TYPE_4 VAR_5 = VAR_4 . METHOD_3 ( VAR_1 , true ) ; TYPE_5 . METHOD_4 ( ( STRING_2 + VAR_1 ) , VAR_5 . METHOD_5 ( ) ) ; java.lang.String VAR_6 = VAR_3 . METHOD_6 ( VAR_5 , true ) ; TYPE_5 . assertEquals ( VAR_2 , VAR_6 ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) { VAR_2 = new TYPE_3 ( VAR_3 class ) ; } else if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) { VAR_2 = new TYPE_3 ( VAR_4 class ) ; } else { } return VAR_2 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_2 ) { domain . setId ( domain . getStoragePoolId ( ) ) ; } TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) ; setItems ( VAR_2 ) ; METHOD_2 ( ( ( METHOD_3 ( ) . size ( ) ) == 0 ) ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , METHOD_4 ( VAR_3 ) , VAR_2 ) ; VAR_8 . METHOD_5 ( ) ; } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < TYPE_1 > list = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; return METHOD_2 ( list , VAR_1 , VAR_2 ) ; } return new java.util.ArrayList < TYPE_1 > ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : STRING_1 ; } } ; TYPE_1 parameters = new TYPE_1 ( VAR_1 ) ; parameters . METHOD_2 ( VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , parameters , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_1 ) ; resource . METHOD_6 ( METHOD_7 ( ) ) ; VAR_4 . METHOD_8 ( ) ; resource . get ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false ) ; TYPE_1 host = new TYPE_1 ( ) ; host . METHOD_3 ( new TYPE_2 ( ) ) ; host . METHOD_4 ( ) . setId ( STRING_1 ) ; VAR_1 . METHOD_5 ( ) ; resource . METHOD_6 ( host ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_5 ( VAR_4 , VAR_2 ) ) ; org.mockito.Mockito . METHOD_6 ( VAR_1 ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( ) ; METHOD_3 ( VAR_4 , VAR_5 . METHOD_4 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , VAR_3 , VAR_2 ) ; VAR_8 . METHOD_5 ( ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; if ( ( getWindow ( ) ) != null ) { return ; } TYPE_1 model = TYPE_2 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) , getEntity ( ) . METHOD_4 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_5 ( ) ) ) , this ) ; METHOD_6 ( model ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.Boolean VAR_1 = ( ( java.lang.Boolean ) ( returnValue ) ) ; if ( ! VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface i : VAR_2 ) { if ( TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) , VAR_3 . getName ( ) ) ) { VAR_4 . add ( i ) ; } } } VAR_5 . append ( VAR_3 . getName ( ) ) ; VAR_6 . METHOD_1 ( VAR_7 , VAR_4 ) ; } 
private boolean METHOD_1 ( boolean VAR_1 ) { return ( ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . size ( ) ) > 0 ) ) && ( METHOD_3 ( VAR_1 ) ) ) && ( ( METHOD_4 ( ) ) || ( ( METHOD_5 ( ) ) && ( METHOD_6 ( ) ) ) ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 id , TYPE_3 VAR_1 , TYPE_4 type , java.util.Map < java.lang.String , java.lang.Object > VAR_2 , boolean VAR_3 , java.lang.Boolean VAR_4 ) { return TYPE_5 . METHOD_1 ( id , VAR_1 , type , VAR_2 , VAR_3 , VAR_4 , STRING_1 , null , false ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) , TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) ) ; } 
public void METHOD_1 ( ) { double VAR_1 = INT_1 * ( TYPE_1 . METHOD_2 ( INT_2 , INT_3 ) ) ; int VAR_2 = TYPE_2 . METHOD_3 ( ( ( long ) ( VAR_1 ) ) , VAR_3 , VAR_4 ) . METHOD_4 ( ) ; TYPE_3 . assertEquals ( VAR_2 , INT_1 ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) . get ( getParameters ( ) . METHOD_3 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 , VAR_1 . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_6 ( getParameters ( ) . METHOD_3 ( ) , VAR_2 ) ; METHOD_4 ( ) . METHOD_7 ( ) ; return null ; } 
protected java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = ( ( METHOD_2 ( ) ) == null ) ? STRING_1 : METHOD_2 ( ) ; java.lang.String VAR_2 = ( ( TYPE_1 . getVdsGroup ( ) ) == null ) ? STRING_1 : TYPE_1 . getVdsGroup ( ) . getName ( ) ; return ( VAR_1 + STRING_2 ) + VAR_2 ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . AuditLogType VAR_2 ) { int VAR_3 = ( VAR_1 . METHOD_2 ( ) ) ? TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , INT_1 ) : VAR_2 . METHOD_5 ( ) ; if ( VAR_3 > 0 ) { VAR_1 . METHOD_6 ( ( ( TYPE_4 . METHOD_7 ( ) ) + ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ) ) ; VAR_1 . METHOD_9 ( TYPE_6 . METHOD_10 ( VAR_1 , VAR_2 ) ) ; } } 
protected void METHOD_1 ( ) { org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 rs , int VAR_1 ) throws TYPE_3 { TYPE_1 entity = new TYPE_1 ( ) ; entity . setId ( METHOD_2 ( rs , STRING_1 ) ) ; entity . METHOD_3 ( rs.getString ( STRING_2 ) ) ; entity . METHOD_4 ( rs.getString ( STRING_3 ) ) ; entity . METHOD_5 ( rs.getString ( STRING_4 ) ) ; entity . METHOD_6 ( ( ( rs.getString ( STRING_5 ) ) != null ? TYPE_4 . METHOD_7 ( rs.getString ( STRING_5 ) . METHOD_8 ( STRING_6 ) ) : null ) ) ; return entity ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; model . METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( ) { public void METHOD_5 ( TYPE_2 VAR_1 , java.lang.Object sender , TYPE_3 args ) { METHOD_6 ( ) ; } } ) ; METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { command . getParameters ( ) . METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , null , VAR_1 ) ; command . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( ( ( command . METHOD_8 ( ) . size ( ) ) == 1 ) ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { return true ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ( STRING_1 + ( VAR_1 [ 2 ] ) ) , VAR_2 . StorageDomain , METHOD_3 ( 2 ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_1 . StorageDomain storageDomain = new TYPE_1 . StorageDomain ( ) ; storageDomain . METHOD_5 ( VAR_1 [ 2 ] ) ; TYPE_2 cluster = new TYPE_2 ( ) ; cluster . setId ( VAR_4 [ 1 ] . toString ( ) ) ; METHOD_6 ( storageDomain , cluster ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_5 = new TYPE_2 ( ) ; VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ; VAR_5 . METHOD_3 ( STRING_2 , VAR_4 ) ; VAR_5 . METHOD_3 ( STRING_3 , VAR_3 ) ; TYPE_3 . log ( VAR_5 , VAR_6 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { return validate ( new TYPE_2 < TYPE_1 . ValidationResult > ( ) { public TYPE_1 . ValidationResult METHOD_2 ( ) { for ( TYPE_3 disk : VAR_1 ) { TYPE_4 . Disk VAR_2 = METHOD_3 ( ) . get ( disk . getId ( ) ) ; if ( VAR_2 != null ) { return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_4 ( STRING_1 , VAR_2 . METHOD_5 ( ) ) ) ; } } return VAR_4 ; } } ) ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_4 ; if ( VAR_3 == null ) { VAR_4 = VAR_5 . METHOD_1 ( STRING_1 , VAR_2 ) ; } else { VAR_4 = VAR_5 . METHOD_1 ( VAR_3 , VAR_2 ) ; } TYPE_1 VAR_6 = new TYPE_1 ( VAR_1 , VAR_2 , VAR_4 ) ; return VAR_6 ; } catch ( TYPE_2 VAR_7 ) { throw new TYPE_3 ( VAR_7 ) ; } } 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( java.lang.Object item : METHOD_2 ( ) . METHOD_3 ( ) ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( item ) ) ; if ( VAR_2 . METHOD_4 ( ) ) { VAR_1 . add ( VAR_2 ) ; } } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( getParameters ( ) . METHOD_2 ( ) , METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_3 , false , VAR_1 ) ; METHOD_5 ( ) . METHOD_6 ( METHOD_7 ( ) . getId ( ) , METHOD_7 ( ) . METHOD_8 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_4 : METHOD_9 ( ) ) { TYPE_3 . METHOD_10 ( METHOD_11 ( ) , VAR_4 ) ; } return null ; } 
public void METHOD_1 ( ) { VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( VAR_1 ) ) . thenReturn ( METHOD_6 ( VAR_6 ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( TYPE_1 item : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { return item ; } } return null ; } } ; TYPE_2 VAR_2 = new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_3 . VDS ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_2 , aQuery ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 type , java.lang.String VAR_2 , java.lang.String VAR_3 ) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; TYPE_1 VAR_4 = METHOD_3 ( id , VAR_1 , type ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { true , false } , METHOD_5 ( ) ) ; METHOD_6 ( 1 ) ; VAR_3 . METHOD_7 ( ) ; METHOD_8 ( resource . get ( ) , 0 ) ; } 
protected void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { METHOD_2 ( VAR_4 ) ; METHOD_3 ( 2 , false , false , false ) ; METHOD_4 ( METHOD_5 ( VAR_5 , VAR_6 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 } , VAR_1 , VAR_2 ) ) ; try { resource . METHOD_6 ( ) ; METHOD_7 ( STRING_2 ) ; } catch ( TYPE_1 VAR_7 ) { METHOD_8 ( VAR_7 , VAR_3 ) ; } } 
private static void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 , org.ovirt.engine.core.common.businessentities . Network network , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 . size ( ) ) != 1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( vds . getId ( ) ) ; VAR_2 . METHOD_3 ( STRING_1 , network . getName ( ) ) ; VAR_2 . METHOD_3 ( STRING_2 , TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) , STRING_3 ) ) ; TYPE_4 . log ( VAR_2 , VAR_3 ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ) ; TYPE_4 . ValidationResult VAR_3 = validator . METHOD_4 ( ) ; TYPE_5 . METHOD_5 ( VAR_3 , TYPE_6 . METHOD_6 ( VAR_4 ) ) ; } 
protected void METHOD_1 ( ) { try { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( TYPE_2 . getVm ( ) . METHOD_5 ( ) ) ; } catch ( TYPE_3 e ) { TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; throw e ; } TYPE_2 . METHOD_8 ( true ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( METHOD_5 ( ) ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( METHOD_5 ( ) . METHOD_7 ( ) . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) ; TYPE_2 . METHOD_8 ( METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
public static void METHOD_1 ( TYPE_1 . DiskImage diskImage , org.ovirt.engine.core.compat.Guid vmId ) { try { TYPE_2 . METHOD_2 ( vmId , diskImage . getId ( ) ) ; TYPE_2 . METHOD_3 ( diskImage ) ; } catch ( TYPE_3 VAR_1 ) { VAR_2 . error ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( STRING_2 , VAR_1 ) ; throw new TYPE_4 ( VAR_3 , VAR_1 ) ; } } 
public static void METHOD_1 ( TYPE_1 . DiskImage image , boolean VAR_1 , TYPE_2 VAR_2 , org.ovirt.engine.core.compat.Guid vmId ) { try { TYPE_3 . METHOD_2 ( image , VAR_1 , VAR_2 ) ; TYPE_3 . METHOD_3 ( image , vmId ) ; } catch ( TYPE_4 VAR_3 ) { VAR_4 . error ( STRING_1 , VAR_3 . METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( STRING_2 , VAR_3 ) ; throw new TYPE_5 ( VAR_5 , VAR_3 ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; if ( ( VAR_1 == null ) || ( ( VAR_1 . size ( ) ) != 1 ) ) { return ; } org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = VAR_1 . get ( 0 ) ; METHOD_1 ( VAR_2 ) ; VAR_3 . onSuccess ( model , returnValue ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? TYPE_1 . METHOD_2 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) ) : VAR_1 ; } } ; TYPE_2 . METHOD_4 ( new TYPE_3 ( VAR_2 , TYPE_2 . METHOD_5 ( ) ) , aQuery ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( version . getValue ( ) ) . thenReturn ( VAR_1 ) ; validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( nic , version ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = TYPE_1 . METHOD_3 ( METHOD_4 ( STRING_1 , null ) ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( METHOD_7 ( VAR_1 , VAR_3 ) ) ; METHOD_8 ( VAR_4 , VAR_5 , VAR_1 . getName ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; if ( TYPE_2 . equals ( VAR_1 ) ) { VAR_2 = new TYPE_3 ( VAR_3 class ) ; } else if ( TYPE_4 . equals ( VAR_1 ) ) { VAR_2 = new TYPE_3 ( VAR_4 class ) ; } else if ( TYPE_5 . equals ( VAR_1 ) ) { VAR_2 = new TYPE_6 ( ) ; } else { } return VAR_2 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_2 ) ( model ) ) ; java.util.List < TYPE_3 > VAR_3 = ( ( TYPE_4 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; if ( VAR_3 != null ) { TYPE_5 . METHOD_1 ( VAR_3 , VAR_4 ) ; } METHOD_2 ( true ) ; VAR_2 . setItems ( VAR_3 ) ; METHOD_2 ( false ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; java.util.List < TYPE_3 > VAR_2 = TYPE_4 . METHOD_4 ( new TYPE_3 ( ) , new TYPE_3 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_2 ) ; cmd . METHOD_5 ( ) . METHOD_6 ( true ) ; TYPE_5 . METHOD_7 ( cmd , VAR_4 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_6 class ) ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getWindow ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { final TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; final java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; TYPE_3 . METHOD_1 ( model , VAR_1 , VAR_2 ) ; } } ) , entity . getId ( ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = ( ( org.ovirt.engine.core.compat.Guid ) ( TYPE_1 . METHOD_2 ( ) ) ) ; METHOD_3 ( true ) ; TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( ( VAR_2 == null ) || ( ( VAR_2 . getStatus ( ) ) != ( VAR_4 ) ) ) { return ; } VAR_2 . METHOD_4 ( VAR_5 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; TYPE_1 . METHOD_6 ( true ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( VAR_3 ) ; TYPE_2 . METHOD_2 ( VAR_1 ) ; java.lang.String name = VAR_1 . getName ( ) ; TYPE_2 . METHOD_3 ( name . equals ( VAR_4 . METHOD_4 ( VAR_5 , VAR_6 . VM ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_4 ) ) . when ( VAR_5 ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ; TYPE_3 . METHOD_8 ( command . validate ( ) ) ; TYPE_3 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_4 . name ( ) ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ) . METHOD_2 ( ) ; METHOD_3 ( ( ( TYPE_1 < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; METHOD_1 ( ) . METHOD_4 ( ) ; } 
protected void METHOD_1 ( TYPE_1 model ) { java.lang.String VAR_1 = model . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; org.ovirt.engine.ui.uicommonweb.UICommand VAR_2 = model . METHOD_5 ( ) ; if ( VAR_2 != null ) { boolean VAR_3 = ( ( model . METHOD_6 ( ) . METHOD_7 ( ) ) && ( VAR_1 != null ) ) && ( ( TYPE_3 . METHOD_8 ( VAR_1 ) ) != null ) ; VAR_2 . METHOD_9 ( VAR_3 ) ; METHOD_10 ( ( VAR_3 ? VAR_2 : null ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = new TYPE_1 ( ) ; model . METHOD_2 ( null ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; try { VAR_2 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
private void METHOD_1 ( java.lang.String id ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; resource . id = id ; VAR_2 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_1 VAR_3 ) { METHOD_6 ( VAR_3 ) ; } resource . id = STRING_2 ; } 
public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , boolean VAR_3 ) { TYPE_2 VAR_4 = METHOD_2 ( ) ; VAR_4 . addValue ( STRING_1 , VAR_1 ) ; VAR_4 . addValue ( STRING_2 , VAR_2 ) ; VAR_4 . addValue ( STRING_3 , VAR_3 ) ; java.util.List < TYPE_1 > VAR_5 = METHOD_3 ( ) . METHOD_4 ( STRING_4 , METHOD_5 ( ) , VAR_4 ) ; return VAR_5 ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; org.ovirt.engine.core.common.businessentities.VDSGroup VAR_2 = TYPE_1 . getVdsGroup ( ) ; VAR_1 . put ( VAR_3 , ( VAR_2 == null ? null : VAR_2 . METHOD_2 ( ) ) ) ; } return VAR_1 ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . equals ( METHOD_5 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( VAR_1 . getId ( ) . equals ( METHOD_6 ( ) . getId ( ) ) ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . equals ( VAR_1 . METHOD_7 ( ) ) ) ; } 
private void METHOD_1 ( TYPE_1 status ) { TYPE_2 domain = new TYPE_2 ( ) ; domain . METHOD_2 ( status ) ; domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( VAR_2 . Guid class ) , TYPE_3 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) ; } 
public void setItems ( TYPE_1 value ) { if ( ( VAR_1 ) != value ) { if ( ( VAR_1 ) != null ) { for ( TYPE_2 VAR_2 : ( ( TYPE_1 < TYPE_2 > ) ( VAR_1 ) ) ) { VAR_2 . METHOD_1 ( ) ; } } METHOD_2 ( value , VAR_1 ) ; VAR_1 = value ; METHOD_3 ( ) . METHOD_4 ( this , VAR_3 ) ; METHOD_5 ( new TYPE_3 ( STRING_1 ) ) ; } } 
private java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ! ( TYPE_1 . isEmpty ( vm . METHOD_2 ( ) ) ) ) { return vm . METHOD_2 ( ) ; } if ( VAR_1 . METHOD_3 ( vm . METHOD_4 ( ) ) ) { return VAR_2 < java.lang.String > METHOD_5 ( VAR_3 ) ; } else { return STRING_1 ; } } 
protected void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) . getEntity ( ) ) ) { METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; METHOD_3 ( ) . METHOD_6 ( false ) ; METHOD_3 ( ) . setEntity ( false ) ; return ; } METHOD_3 ( ) . METHOD_6 ( METHOD_7 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_1 , METHOD_2 ( id ) ) ; return inject ( new TYPE_5 < TYPE_6 , org.ovirt.engine.core.common.businessentities.VDS > ( VAR_5 , VAR_6 , VAR_4 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_2 . assertEquals ( VAR_1 . METHOD_4 ( ) , STRING_1 ) ; dao . METHOD_5 ( VAR_2 , VAR_3 , VAR_4 , STRING_2 ) ; TYPE_1 VAR_5 = dao . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; TYPE_2 . METHOD_3 ( VAR_5 ) ; TYPE_2 . assertEquals ( VAR_5 . METHOD_4 ( ) , STRING_2 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid id , TYPE_1 VAR_1 ) { return ( ( ( VAR_1 instanceof TYPE_2 ) && ( id . equals ( VAR_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_3 ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { if ( TYPE_1 . METHOD_1 ( domain ) ) { VAR_2 . add ( domain ) ; } } if ( METHOD_2 ( ) . METHOD_3 ( ) ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 < TYPE_2 > command = METHOD_2 ( METHOD_3 ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 . Guid class , VAR_2 . StorageDomain class ) ) ; org.mockito.Mockito.when ( command . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_3 . DiskImage class ) ) ) . thenReturn ( new TYPE_4 . ValidationResult ( VAR_4 ) ) ; TYPE_5 . METHOD_9 ( command , VAR_5 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.lang.Boolean ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; final TYPE_1 model = METHOD_3 ( null ) ; model . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; model . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_2 [ 2 ] ) ) ; try { VAR_3 . add ( model ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_3 VAR_4 ) { METHOD_9 ( VAR_4 , VAR_5 ) ; } } 
public void METHOD_1 ( TYPE_1 result ) { TYPE_2 returnValue = result . getReturnValue ( ) ; if ( ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) { VAR_1 . METHOD_2 ( ( ( VAR_2 ) == null ? ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . METHOD_3 ( ) ) ) : VAR_2 ) , VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) ) ; } else { VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ; } } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . assertEquals ( cluster . getStoragePoolId ( ) , VAR_3 . METHOD_3 ( ) ) ; TYPE_2 . assertEquals ( VAR_4 . StoragePool , VAR_3 . METHOD_4 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getStoragePoolId ( ) . getValue ( ) ) ; for ( final org.ovirt.engine.core.common.businessentities.network.Network VAR_2 : VAR_1 ) { METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) ; } METHOD_4 ( ) . METHOD_7 ( ) ; return null ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_3 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( cmd . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) ; METHOD_7 ( TYPE_3 . METHOD_8 ( ) ) ; TYPE_4 . METHOD_9 ( cmd , VAR_2 ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; TYPE_1 . when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; } 
public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . METHOD_2 ( VAR_1 . isEmpty ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_3 class , VAR_4 ) ; org.mockito.Mockito.doReturn ( org.mockito.Mockito . METHOD_4 ( VAR_5 class ) ) . when ( cmd ) . METHOD_5 ( ) ; validator = org.mockito.Mockito . METHOD_6 ( new TYPE_2 ( cmd . getParameters ( ) ) ) ; org.mockito.Mockito.doReturn ( validator ) . when ( cmd ) . METHOD_7 ( ) ; METHOD_8 ( ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( validator ) . METHOD_9 ( ) ; cmd . METHOD_10 ( ) ; } 
public boolean METHOD_1 ( java.lang.String sql ) { sql = METHOD_2 ( sql ) ; if ( ( sql . length ( ) ) > 0 ) { sql = sql . METHOD_3 ( STRING_1 , STRING_2 ) ; for ( java.lang.String VAR_1 : VAR_2 ) { if ( sql . METHOD_4 ( VAR_1 ) ) { return true ; } } } return false ; } 
protected boolean METHOD_1 ( TYPE_1 status ) { boolean returnValue = false ; TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; if ( VAR_1 != null ) { returnValue = ( VAR_1 . METHOD_3 ( ) ) == status ; if ( ( ! returnValue ) && ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_4 . toString ( ) ) ) ) ) { addCanDoActionMessage ( TYPE_4 ) ; } } return returnValue ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > models = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( true ) ; models . add ( VAR_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; models . add ( VAR_2 ) ; TYPE_4 . METHOD_3 ( VAR_3 , models ) ; return models ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 context , java.lang.String VAR_1 , java.lang.String value ) { TYPE_1 VAR_2 = null ; for ( TYPE_1 VAR_3 : TYPE_3 . METHOD_2 ( context ) . METHOD_3 ( VAR_4 class . getName ( ) ) ) { if ( value . equals ( VAR_3 . METHOD_4 ( ) . < TYPE_4 > get ( VAR_5 ) . METHOD_5 ( VAR_1 ) ) ) { VAR_2 = VAR_3 ; break ; } } return VAR_2 ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; if ( result != null ) { model . METHOD_2 ( ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) ) ; } else { METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } model . METHOD_5 ( ) . METHOD_6 ( ) ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < > ( ) ; VAR_1 . put ( TYPE_1 . name ( ) . METHOD_2 ( ) , ( ( TYPE_2 . METHOD_3 ( ) ) == null ? STRING_1 : TYPE_2 . METHOD_3 ( ) ) ) ; VAR_1 . put ( TYPE_3 . name ( ) . METHOD_2 ( ) , TYPE_2 . METHOD_4 ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { validator = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_1 = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_3 , VAR_4 ) ) . thenReturn ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_6 , VAR_4 ) ) . thenReturn ( VAR_7 ) ; TYPE_3 . METHOD_4 ( VAR_1 ) ; } 
private static java.lang.Boolean METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , java.lang.String name ) { if ( VAR_1 . METHOD_2 ( name ) ) { if ( ( VAR_1 . get ( name ) ) instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) ( VAR_1 . get ( name ) ) ) ; } return java.lang.Boolean . METHOD_3 ( VAR_1 . get ( name ) . toString ( ) ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ; assertEquals ( INT_1 , VAR_2 . METHOD_8 ( ) . getStatus ( ) ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_6 ( VAR_4 , java.lang.Boolean . FALSE ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( VAR_5 ) ; } 
private TYPE_1 METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = TYPE_2 . list ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ; TYPE_1 result = null ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) == 1 ) ) { result = new TYPE_1 ( VAR_1 . get ( 0 ) ) ; } return result ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) , VAR_3 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; TYPE_2 . assertEquals ( VAR_4 , VAR_1 . getStatus ( ) ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; dao . METHOD_6 ( VAR_1 ) ; VAR_1 = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) , VAR_3 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; TYPE_2 . assertEquals ( VAR_5 , VAR_1 . getStatus ( ) ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; if ( ( VAR_1 ) != ( VAR_2 ) ) return false ; return true ; } 
protected void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate VAR_2 : VAR_1 ) { TYPE_2 . METHOD_6 ( VAR_2 ) ; } TYPE_1 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; } 
static TYPE_1 getModel ( int VAR_1 ) { TYPE_1 model = new TYPE_1 ( ) ; model . setId ( java.lang.String.valueOf ( VAR_2 [ VAR_1 ] ) ) ; model . METHOD_1 ( TYPE_2 . value ( ) ) ; model . METHOD_2 ( VAR_3 [ VAR_1 ] ) ; model . METHOD_3 ( VAR_4 [ VAR_1 ] ) ; model . METHOD_4 ( VAR_5 [ VAR_1 ] ) ; model . METHOD_5 ( INT_1 ) ; return model ; } 
public TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid id , java.lang.String name ) { for ( TYPE_1 . Network entity : METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ) { if ( ( ( id != null ) && ( id . equals ( entity . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( entity . METHOD_4 ( ) ) ) ) ) { return entity ; } } return null ; } 
private boolean METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VM > list = METHOD_2 ( ) ; if ( list == null ) { return false ; } for ( org.ovirt.engine.core.common.businessentities.VM vm : list ) { if ( VAR_1 . METHOD_3 ( vm ) . METHOD_4 ( ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; cmd . getVm ( ) . METHOD_3 ( STRING_1 ) ; METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_5 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_5 ) ) . thenReturn ( new TYPE_2 ( ) ) ; TYPE_3 . METHOD_6 ( cmd , VAR_6 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ; java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; TYPE_1 VAR_4 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ; VAR_3 . add ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_1 ) ) . thenReturn ( VAR_3 ) ; boolean VAR_6 = command . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_6 ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 event , TYPE_4 < TYPE_2 > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , boolean VAR_3 ) { TYPE_1 < TYPE_2 > VAR_4 = new TYPE_1 < TYPE_2 > ( VAR_1 ) ; TYPE_5 < TYPE_3 , TYPE_1 < TYPE_2 > > VAR_5 = new TYPE_5 < TYPE_3 , TYPE_1 < TYPE_2 > > ( event , VAR_4 ) ; if ( VAR_3 ) { METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_5 ) ; } else { METHOD_2 ( VAR_2 ) . add ( VAR_5 ) ; } return VAR_4 ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_1 = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) && ( ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) ) { METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ; } } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_3 ( ) ; } } ) , VAR_4 . getName ( ) ) ; } 
public boolean METHOD_1 ( ) { if ( ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( METHOD_2 ( ) ) == ( VAR_2 ) ) ) { return true ; } boolean VAR_3 = true ; for ( TYPE_1 VAR_4 : METHOD_3 ( ) ) { VAR_4 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) } ) ; VAR_3 &= VAR_4 . METHOD_4 ( ) . METHOD_6 ( ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_4 ( model ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 ) ; } } 
private void METHOD_1 ( TYPE_1 . Disk model , TYPE_1 . Disk entity ) { model . METHOD_2 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_1 = new TYPE_3 ( METHOD_3 ( model . getId ( ) ) ) ; java.util.List < TYPE_4 > VAR_2 = VAR_1 . METHOD_4 ( entity ) ; for ( TYPE_4 VAR_3 : VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_4 , VAR_3 , VAR_1 . METHOD_6 ( ) ) ; } model . METHOD_4 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { try { returnValue = TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_2 VAR_3 ) { VAR_4 . error ( STRING_1 , VAR_3 ) ; } finally { VAR_5 . METHOD_3 ( ) ; } } 
public TYPE_1 getValue ( TYPE_2 item ) { java.lang.String VAR_1 = TYPE_3 . METHOD_1 ( ) . get ( VAR_2 . METHOD_2 ( item ) ) ; TYPE_4 resource = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( ( VAR_1 + STRING_1 ) ) ; if ( ( resource == null ) || ( ! ( resource instanceof TYPE_1 ) ) ) { resource = TYPE_5 . METHOD_3 ( ) . METHOD_5 ( ) ; } return ( ( TYPE_1 ) ( resource ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; VAR_1 . METHOD_3 ( null ) ; final org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; final TYPE_2 VAR_4 = VAR_1 . getStoragePoolId ( ) ; TYPE_3 . assertEquals ( VAR_3 , VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_3 { return VAR_3 . METHOD_3 ( id ) ; } } ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_1 , METHOD_4 ( id ) ) ; return inject ( new TYPE_5 < TYPE_6 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( VAR_5 , VAR_2 , VAR_4 ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) ; model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) ; model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ; model . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ; model . METHOD_7 ( null ) ; return model ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_1 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_1 . any ( VAR_2 class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_8 ( ) ) ; } 
protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) { VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } return ( ( VAR_2 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 rs , int VAR_1 ) throws TYPE_3 { TYPE_1 entity = new TYPE_1 ( ) ; entity . setId ( METHOD_2 ( rs , STRING_1 ) ) ; entity . METHOD_3 ( rs.getString ( STRING_2 ) ) ; entity . METHOD_4 ( rs.getString ( STRING_3 ) ) ; entity . METHOD_5 ( rs.getString ( STRING_4 ) ) ; entity . METHOD_6 ( TYPE_4 . METHOD_7 ( rs.getString ( STRING_5 ) . METHOD_8 ( STRING_6 ) ) ) ; return entity ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = METHOD_2 ( METHOD_3 ( ) ) ; return ( ( super . METHOD_1 ( ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params , null ) ) ; cmd . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_8 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_9 ( ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( STRING_1 ) ) ; METHOD_2 ( VAR_2 , TYPE_1 . METHOD_3 ( STRING_2 ) ) ; METHOD_2 ( VAR_3 , TYPE_1 . METHOD_3 ( STRING_3 ) ) ; METHOD_2 ( VAR_4 , TYPE_1 . METHOD_3 ( STRING_4 ) ) ; METHOD_2 ( VAR_5 , TYPE_1 . METHOD_3 ( STRING_5 ) ) ; METHOD_2 ( VAR_6 , TYPE_1 . METHOD_3 ( STRING_6 ) ) ; METHOD_2 ( VAR_7 , STRING_7 ) ; } 
private static org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; diskImage . METHOD_4 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_5 ( new org.ovirt.engine.core.compat.Guid ( ) ) ) ) ; return diskImage ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_2 = METHOD_4 ( VAR_3 , VAR_1 . getName ( ) ) ; VAR_2 . METHOD_5 ( VAR_4 ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_5 = METHOD_6 ( VAR_2 . getName ( ) ) ; METHOD_7 ( VAR_2 , VAR_5 ) ; VAR_2 . METHOD_5 ( VAR_6 ) ; TYPE_1 VAR_7 = METHOD_8 ( METHOD_9 ( VAR_2 , VAR_5 ) ) ; METHOD_10 ( VAR_7 , VAR_1 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . add ( TYPE_1 . METHOD_3 ( 1 , VAR_2 ) ) ; METHOD_4 ( ) ; command . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_1 ) , TYPE_2 . any ( VAR_4 . Guid class ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_1 . METHOD_1 ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) ; TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) ; TYPE_4 . METHOD_3 ( VAR_2 , VAR_3 . getId ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) ) ) . thenReturn ( VAR_2 ) ; TYPE_4 < java.lang.String , java.lang.String > VAR_4 = VAR_5 . METHOD_8 ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ; TYPE_2 . METHOD_9 ( VAR_4 , VAR_1 . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) ; } 
public boolean METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 = METHOD_2 ( ) ; final org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = METHOD_3 ( ) . getSelectedItem ( ) ; if ( ( VAR_1 . isEmpty ( ) ) || ( VAR_2 == null ) ) { return false ; } return ( METHOD_4 ( VAR_1 ) ) && ( METHOD_5 ( VAR_1 . get ( 0 ) . METHOD_6 ( ) , VAR_2 ) ) ; } 
public static boolean METHOD_1 ( java.lang.Boolean VAR_1 , TYPE_1 VAR_2 , org.ovirt.engine.core.compat . Version VAR_3 ) { return ( ( VAR_1 == null ) && ( VAR_4 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_3 ) ) ) && ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_5 ) ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; } if ( ( VAR_2 ) == null ) { TYPE_2 VAR_3 = TYPE_1 . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_2 = new TYPE_3 ( VAR_3 ) ; } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_2 VAR_1 = METHOD_3 ( ) ; if ( ( VAR_1 != null ) && ( VAR_1 . getSucceeded ( ) ) ) { METHOD_4 ( ) ; METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; TYPE_1 . METHOD_7 ( true ) ; } } } 
private void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = null ; TYPE_3 rs = null ; try { VAR_1 = VAR_2 . METHOD_2 ( ) ; rs = VAR_1 . METHOD_3 ( STRING_1 ) ; rs . METHOD_4 ( ) ; } finally { if ( rs != null ) { rs . METHOD_5 ( ) ; } if ( VAR_1 != null ) { VAR_1 . METHOD_5 ( ) ; } } } 
protected boolean validate ( ) { METHOD_1 ( ) . validate ( ) ; METHOD_2 ( ) . validate ( ) ; METHOD_3 ( ( ( METHOD_1 ( ) . METHOD_4 ( ) ) && ( METHOD_2 ( ) . METHOD_4 ( ) ) ) ) ; return METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ( STRING_1 + ( VAR_1 [ 1 ] ) ) , VAR_2 , METHOD_3 ( 1 ) ) ; TYPE_1 . StorageDomain storageDomain = new TYPE_1 . StorageDomain ( ) ; storageDomain . setId ( VAR_3 [ 2 ] . toString ( ) ) ; TYPE_2 cluster = new TYPE_2 ( ) ; cluster . METHOD_4 ( VAR_1 [ 1 ] ) ; METHOD_5 ( VAR_4 ) ; METHOD_6 ( storageDomain , cluster ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_5 = METHOD_2 ( VAR_2 , STRING_2 , VAR_6 ) ; org.mockito.Mockito.when ( VAR_7 . METHOD_4 ( TYPE_1 . any ( VAR_8 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_5 , VAR_1 ) ) ; cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; TYPE_3 . assertEquals ( VAR_5 , cmd . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > parameters = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid VAR_1 : VAR_2 . METHOD_2 ( VAR_3 ) ) { parameters . add ( new TYPE_2 ( VAR_1 ) ) ; } VAR_4 . METHOD_3 ( VAR_5 , parameters ) ; VAR_6 . METHOD_4 ( ) ; } 
private TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; return ( VAR_2 . size ( ) ) == 2 ? new TYPE_1 ( VAR_2 . get ( 0 ) , VAR_2 . get ( 1 ) ) : null ; } 
protected org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { org.ovirt.engine.core.common.businessentities.DiskImage image = TYPE_1 . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ; if ( image != null ) { VAR_1 = image ; } else { image = TYPE_1 . METHOD_2 ( ) . METHOD_4 ( METHOD_3 ( ) ) ; if ( image != null ) { VAR_1 = image ; } } } return VAR_1 ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { if ( ( ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) != ( storageDomain . METHOD_5 ( ) ) ) ) { addCanDoActionMessage ( VAR_3 ) ; return false ; } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . add ( STRING_1 ) ; METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( 1 ) ; METHOD_6 ( 1 ) ; VAR_2 . METHOD_7 ( ) ; TYPE_1 nic = resource . get ( ) ; METHOD_8 ( nic . METHOD_9 ( ) ) ; TYPE_2 . METHOD_10 ( nic , 1 ) ; METHOD_11 ( nic ) ; } finally { VAR_1 . METHOD_12 ( ) ; } } 
protected java.lang.Object METHOD_1 ( TYPE_1 . VdcQueryType VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_1 . VdcQueryReturnValue result = VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ; return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( new TYPE_4 < TYPE_2 > ( ) { TYPE_5 VAR_1 = new TYPE_5 ( ) ; public int METHOD_2 ( TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { return VAR_1 . METHOD_2 ( VAR_2 . getEntity ( ) . METHOD_3 ( ) , VAR_3 . getEntity ( ) . METHOD_3 ( ) ) ; } } ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 < TYPE_4 > VAR_2 = getModel ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 . METHOD_4 ( ) ) { TYPE_4 VAR_3 = getModel ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( ( VAR_2 . size ( ) ) == 1 ) { for ( TYPE_2 VAR_3 : METHOD_5 ( VAR_1 . METHOD_6 ( ) , STRING_1 , VAR_1 . METHOD_7 ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_8 ( ) . METHOD_9 ( VAR_3 . METHOD_10 ( ) ) ; } } } 
private boolean METHOD_1 ( TYPE_1 nic , TYPE_2 VAR_1 , boolean VAR_2 ) { TYPE_3 parameters = new TYPE_3 ( nic , VAR_1 , VAR_2 ) ; parameters . METHOD_2 ( TYPE_4 . getParameters ( ) . METHOD_3 ( ) ) ; TYPE_5 returnValue = METHOD_4 ( VAR_3 , parameters , TYPE_4 . METHOD_5 ( ) ) ; if ( ! ( returnValue . getSucceeded ( ) ) ) { METHOD_6 ( returnValue ) ; } return returnValue . getSucceeded ( ) ; } 
private void METHOD_1 ( ) { parameters = new TYPE_1 ( ) ; parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; parameters . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; command = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( parameters ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_7 ( ) ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) . METHOD_8 ( ) ) ; VAR_2 . METHOD_9 ( VAR_1 ) ; TYPE_2 . METHOD_10 ( true ) ; } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { java.lang.Object [ ] VAR_3 = ( ( java.lang.Object [ ] ) ( VAR_1 ) ) ; TYPE_1 VAR_4 = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) ; TYPE_2 VAR_5 = ( ( TYPE_2 ) ( VAR_3 [ 1 ] ) ) ; boolean VAR_6 = ( ( VAR_5 . METHOD_1 ( ) ) == ( VAR_7 ) ) && ( VAR_2 == null ) ; VAR_4 . METHOD_2 ( VAR_5 , VAR_6 ) ; } 
protected void METHOD_1 ( ) { TYPE_1 returnValue = METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) , METHOD_5 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) ) , METHOD_6 ( TYPE_3 . getParameters ( ) . METHOD_7 ( ) ) ) ) ; TYPE_3 . METHOD_8 ( ) . METHOD_9 ( returnValue . getReturnValue ( ) ) ; } 
protected org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { TYPE_1 . VM entity = org.mockito.Mockito . METHOD_2 ( VAR_1 . VM class ) ; org.mockito.Mockito.when ( entity . getId ( ) ) . thenReturn ( VAR_2 [ 0 ] ) ; org.mockito.Mockito.when ( entity . METHOD_3 ( ) ) . thenReturn ( new TYPE_2 ( ) ) ; org.mockito.Mockito.when ( entity . METHOD_4 ( ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) ; return entity ; } 
protected org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { org.ovirt.engine.core.common.businessentities.DiskImage image = METHOD_2 ( ) . get ( METHOD_3 ( ) ) ; if ( image != null ) { VAR_1 = image ; } else { image = METHOD_2 ( ) . METHOD_4 ( METHOD_3 ( ) ) ; if ( image != null ) { image . METHOD_5 ( METHOD_6 ( ) ) ; VAR_1 = image ; } } } return VAR_1 ; } 
private java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > list = ( ( VAR_1 ) == null ) ? new TYPE_1 < java.lang.String > ( ) : new TYPE_1 < > ( VAR_1 ) ; list . METHOD_2 ( METHOD_3 ( ) ) ; if ( ( list . size ( ) ) > 0 ) { list . add ( 0 , VAR_2 ) ; } else { list . add ( VAR_3 ) ; } return list ; } 
protected boolean METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; METHOD_4 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; METHOD_5 ( ) . METHOD_6 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; return ( ( METHOD_2 ( ) . METHOD_7 ( ) ) && ( METHOD_4 ( ) . METHOD_7 ( ) ) ) && ( METHOD_5 ( ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , false ) ; command = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( VAR_1 ) ) ; org.mockito.Mockito.doReturn ( validator ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : VAR_1 ) { VAR_2 . add ( METHOD_2 ( cluster ) ) ; } METHOD_3 ( ) . setItems ( VAR_2 ) ; if ( VAR_3 ) { VAR_3 = false ; METHOD_4 ( ) ; } } 
protected TYPE_1 METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , TYPE_3 < ? extends TYPE_2 . VdcActionParametersBase > VAR_2 , java.lang.String [ ] VAR_3 , java.lang.Object [ ] VAR_4 , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_5 , java.util.ArrayList < TYPE_4 > VAR_6 ) { java.lang.String VAR_7 = ( VAR_8 ) + STRING_1 ; return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true , true , null , VAR_5 , VAR_6 , VAR_7 , true ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ; } 
public static boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface , java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface i : VAR_1 ) { if ( ( ( i . METHOD_2 ( ) ) != null ) && ( TYPE_1 . METHOD_3 ( i . getName ( ) , iface . getName ( ) ) ) ) { return true ; } } return false ; } 
public < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { int VAR_2 = super . METHOD_2 ( VAR_1 . size ( ) ) ; TYPE_3 < TYPE_1 > VAR_3 = VAR_1 . METHOD_3 ( ) ; for ( int i = 0 ; i < VAR_2 ; ++ i ) { VAR_3 . METHOD_4 ( ) ; } return VAR_3 . METHOD_4 ( ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) , VAR_1 ) ) { log . METHOD_4 ( STRING_1 , vm . getId ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( vm . getId ( ) ) ; VAR_2 . METHOD_5 ( VAR_3 ) ; TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_4 , VAR_2 , new TYPE_3 ( TYPE_4 . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( ) ) ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) ; cmd . getVm ( ) . METHOD_4 ( VAR_4 ) ; TYPE_2 . METHOD_5 ( cmd , VAR_5 ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; TYPE_1 domain = new TYPE_1 ( ) ; domain . METHOD_4 ( VAR_2 ) ; TYPE_4 . METHOD_5 ( VAR_5 , VAR_6 ) ; return domain ; } 
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } TYPE_1 VAR_1 = new TYPE_1 ( ) ; return validate ( VAR_1 . METHOD_1 ( getParameters ( ) . METHOD_2 ( ) , METHOD_3 ( ) , getParameters ( ) . METHOD_4 ( ) , false ) ) ; } 
public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 ) { if ( TYPE_4 . METHOD_2 ( VAR_1 . getName ( ) , STRING_1 ) ) { return VAR_2 . get ( ) ; } return super . METHOD_1 ( source , VAR_1 ) ; } 
private void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( METHOD_2 ( ) ) ) { VAR_1 = true ; METHOD_3 ( ) . setSelectedItem ( null ) ; for ( TYPE_1 a : METHOD_3 ( ) . METHOD_4 ( ) ) { if ( TYPE_2 . METHOD_5 ( a . METHOD_6 ( ) , getEntity ( ) . METHOD_7 ( ) ) ) { METHOD_3 ( ) . setSelectedItem ( a ) ; break ; } } } } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ; if ( vm == null ) { return ; } METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId ( ) ) ) ; } } 
private void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; } else { java.util.Map < java.lang.String , java.lang.String > VAR_1 = TYPE_1 . METHOD_5 ( STRING_1 , TYPE_2 . METHOD_6 ( ) ) ; METHOD_7 ( VAR_2 , VAR_1 ) ; } } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < java.lang.Integer > VAR_1 = new java.util.ArrayList < > ( ) ; if ( source != null ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( source ) ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_2 ( ) ; while ( VAR_3 . METHOD_3 ( ) ) { VAR_1 . add ( java.lang.Integer . METHOD_4 ( VAR_3 . METHOD_5 ( ) . toString ( ) ) ) ; } } return VAR_1 ; } 
private void METHOD_1 ( ) { TYPE_1 model = new TYPE_1 ( this , VAR_1 , false ) ; model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) ; model . METHOD_3 ( STRING_1 ) ; model . METHOD_4 ( VAR_2 ) ; model . setEntity ( ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) ) ; METHOD_5 ( model ) ; } 
public TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; final org.ovirt.engine.core.common.businessentities.VDSGroup VAR_3 = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_4 ) ) . thenReturn ( VAR_3 ) ; return VAR_1 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; VAR_2 . METHOD_1 ( ) . setItems ( VAR_1 ) ; if ( VAR_2 instanceof TYPE_1 ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_3 = METHOD_2 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 ) ; VAR_2 . METHOD_1 ( ) . setSelectedItem ( VAR_3 ) ; } else { VAR_2 . METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; } } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 < TYPE_2 . ValidationResult > VAR_2 ) { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_3 ( null ) ; VAR_3 . METHOD_4 ( network . getId ( ) ) ; METHOD_1 ( VAR_1 , VAR_2 , network , VAR_3 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 id ) { java.lang.String name = null ; try { name = new java.lang.String ( id . METHOD_2 ( ) , STRING_1 ) ; } catch ( TYPE_3 e ) { return null ; } return new TYPE_1 ( this , id , name ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( null , VAR_2 ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 2 ) ) ; TYPE_2 . METHOD_3 ( VAR_3 ) ; } 
protected boolean METHOD_1 ( ) { if ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == ( VAR_1 ) ) { return true ; } return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_4 ( ) ) ) ; } 
public void METHOD_1 ( ) { boolean VAR_1 = ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) == ( VAR_2 ) ; boolean VAR_3 = ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) == ( VAR_4 ) ; getModel ( ) . METHOD_3 ( ) . setEntity ( ( VAR_1 || VAR_3 ? null : getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) . getValue ( ) ) ) ; } 
protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 < java.lang.String , TYPE_2 > ( ) ; VAR_1 . addColumn ( new TYPE_3 < java.lang.String > ( ) { public java.lang.String getValue ( java.lang.String object ) { return object ; } } , constants . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . add ( VAR_1 ) ; VAR_4 . add ( VAR_3 , constants . METHOD_6 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
private java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . Network > METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 , int VAR_3 , java.lang.Integer VAR_4 ) { org.ovirt.engine.core.common.businessentities . Network network = new org.ovirt.engine.core.common.businessentities . Network ( ) ; network . METHOD_2 ( VAR_2 ) ; network . METHOD_3 ( VAR_3 ) ; network . METHOD_4 ( VAR_4 ) ; return TYPE_1 . METHOD_5 ( VAR_1 , network ) ; } 
public void METHOD_1 ( java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 parameters = new TYPE_1 ( false , VAR_2 ) ; parameters . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( VAR_1 ) ) ; VAR_3 . METHOD_3 ( VAR_4 , parameters , TYPE_2 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_4 ( ) ; TYPE_1 . when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_5 ( command . METHOD_6 ( ) ) ; TYPE_2 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_3 . toString ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 parameters ) { switch ( parameters . METHOD_2 ( ) ) { case VAR_1 : case VAR_2 : case VAR_3 : { TYPE_3 < ? > command = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ; return command . METHOD_4 ( ) ; } default : { return TYPE_5 . METHOD_5 ( ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( VAR_1 ) ; resource . METHOD_6 ( METHOD_7 ( ) ) ; METHOD_8 ( true , true ) ; VAR_3 . METHOD_9 ( ) ; resource . get ( ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 = METHOD_1 ( ) . METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( VAR_1 , ( VAR_2 != null ? VAR_2 : new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) ) ; METHOD_5 ( ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; VAR_1 . METHOD_1 ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; } 
public java.lang.String METHOD_1 ( long VAR_1 ) { java.lang.String VAR_2 = null ; for ( TYPE_1 VAR_3 : VAR_4 . METHOD_2 ( ) ) { if ( ( VAR_5 . get ( VAR_6 ) ) == VAR_1 ) { VAR_2 = ( ( java.lang.String ) ( VAR_5 . get ( VAR_7 ) ) ) ; break ; } } return VAR_2 ; } 
private static void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result ) { TYPE_1 . METHOD_2 ( result ) ; TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : result ) { TYPE_1 . assertEquals ( VAR_1 , domain . METHOD_4 ( ) ) ; } } 
protected void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( model . METHOD_2 ( ) ) ) { METHOD_3 ( model ) ; METHOD_4 ( ) . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( model . getModel ( ) ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) , model . getModel ( ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . getInstance ( ) . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . get ( TYPE_4 . getParameters ( ) . getVm ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ; VAR_1 . METHOD_9 ( VAR_2 . METHOD_10 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { try { TYPE_2 client = new TYPE_2 ( ) ; client . METHOD_2 ( VAR_1 ) ; java.lang.Object result = client . METHOD_3 ( VAR_2 , VAR_3 ) ; return METHOD_4 ( result ) ; } catch ( TYPE_3 e ) { VAR_4 . error ( ( STRING_1 + e ) ) ; return null ; } } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( returnValue ) ; } } ) , id ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) ) != null ) ) ; TYPE_2 . METHOD_4 ( ( ( VAR_1 . METHOD_6 ( ) ) == null ) ) ; org.mockito.Mockito . METHOD_7 ( VAR_3 ) . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_3 . METHOD_10 ( ( ( VAR_4 . getValue ( ) . size ( ) ) == 0 ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { if ( model . equals ( METHOD_2 ( ) ) ) { this . setItems ( ( ( java.util.List < TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities.VM > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; } } 
public java.lang.String METHOD_1 ( java.lang.String type , java.lang.String name ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_1 ( type , name ) ; TYPE_2 VAR_3 = new TYPE_2 ( METHOD_1 ( ) , true ) ; VAR_3 . METHOD_2 ( STRING_1 , VAR_2 ) ; return VAR_3 . toString ( ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) , TYPE_2 . METHOD_4 ( ) ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( ! ( METHOD_1 ( ) . getSelectedItem ( ) . getId ( ) . equals ( cluster . getId ( ) ) ) ) { return ; } if ( ( ( java.lang.Boolean ) ( returnValue ) ) ) { METHOD_2 ( ) . METHOD_3 ( true ) ; METHOD_4 ( null ) ; } else { METHOD_2 ( ) . METHOD_3 ( false ) ; METHOD_4 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { java.lang.String VAR_2 = VAR_3 ; if ( VAR_2 . equals ( STRING_1 ) ) { METHOD_2 ( object ) ; } else if ( VAR_2 . equals ( STRING_2 ) ) { METHOD_3 ( object ) ; } } 
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 type : TYPE_1 . METHOD_2 ( ) ) { if ( type . METHOD_3 ( ) ) { VAR_1 . add ( type ) ; } } return VAR_1 ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 . getId ( ) . equals ( VAR_3 ) ) { java.lang.Integer VAR_4 = TYPE_3 . METHOD_2 ( VAR_2 ) ; if ( VAR_4 != null ) { METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ; } } else { METHOD_3 ( VAR_1 . METHOD_5 ( ) ) ; } } 
public TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 cluster , TYPE_3 VAR_1 ) { TYPE_4 source = VAR_1 . METHOD_2 ( ) ; boolean VAR_2 = ( ( cluster != null ) && ( METHOD_3 ( cluster . METHOD_4 ( ) ) ) ) && ( cluster . METHOD_5 ( ) . METHOD_6 ( source ) ) ; if ( ! VAR_2 ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 VAR_2 = METHOD_3 ( ) ; TYPE_3 VAR_3 = new TYPE_4 ( VAR_4 , VAR_2 , this , true ) ; VAR_3 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_4 ( METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) ; VAR_3 . METHOD_8 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; try { command . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_1 ) { org.mockito.Mockito . METHOD_4 ( VAR_2 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; return ; } TYPE_3 . METHOD_7 ( ) ; } 
protected TYPE_1 . Disk METHOD_1 ( TYPE_1 . Disk model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ; model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) . value ( ) ) ; model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) . value ( ) ) ; model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) ; model . METHOD_8 ( null ) ; return model ; } 
private static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface , java.lang.Object [ ] VAR_1 ) { vds . METHOD_2 ( ) . add ( iface ) ; if ( VAR_1 != null ) { for ( java.lang.Object name : VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_2 : vds . METHOD_2 ( ) ) { if ( VAR_2 . getName ( ) . equals ( name . toString ( ) ) ) { VAR_2 . METHOD_3 ( iface . getName ( ) ) ; break ; } } } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . setId ( TYPE_4 . toString ( ) ) ; VAR_1 . METHOD_3 ( ) . METHOD_3 ( ) . add ( VAR_2 ) ; TYPE_5 VAR_3 = VAR_4 ; TYPE_6 . assertEquals ( VAR_3 , TYPE_7 . map ( VAR_1 , null ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) { try { TYPE_3 . getInstance ( ) . METHOD_2 ( response . METHOD_3 ( ) ) ; VAR_2 = TYPE_3 . getInstance ( ) . METHOD_4 ( ) ; VAR_3 = TYPE_3 . getInstance ( ) . METHOD_5 ( ) ; VAR_4 = TYPE_3 . getInstance ( ) . METHOD_6 ( ) ; } catch ( TYPE_4 e ) { } finally { METHOD_7 ( ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { command = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_1 ) ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( TYPE_4 . METHOD_4 ( ) ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , TYPE_1 . METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( ) ; try { resource . get ( ) ; METHOD_7 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_8 ( VAR_5 ) ; } } 
private boolean METHOD_1 ( ) { if ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != null ) ) { return METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_1 . getReturnValue ( ) . METHOD_6 ( ) ) ; } return true ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; command = org.mockito.Mockito . METHOD_3 ( new TYPE_2 . RunVmCommand < TYPE_1 > ( VAR_1 ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; if ( ( ( cluster != null ) && ( cluster . METHOD_2 ( ) ) ) && ( ! ( cluster . METHOD_3 ( ) ) ) ) { model . METHOD_4 ( ) . METHOD_5 ( true ) ; } model . METHOD_6 ( ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) . getName ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; model . METHOD_1 ( model , VAR_1 , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) . METHOD_5 ( this , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) ; METHOD_9 ( false ) ; METHOD_10 ( false ) ; TYPE_3 . METHOD_11 ( command ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( METHOD_1 ( host ) ) { VAR_2 . add ( host ) ; } } VAR_1 . METHOD_2 ( ) . setItems ( VAR_2 ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ; VAR_3 . add ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_2 ) ) ; VAR_3 . add ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_3 ) ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_2 ) ; } 
private static void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 . size ( ) ) != 1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( vds . getId ( ) ) ; VAR_2 . METHOD_3 ( STRING_1 , network . getName ( ) ) ; VAR_2 . METHOD_3 ( STRING_2 , TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) , STRING_3 ) ) ; TYPE_4 . log ( VAR_2 , VAR_3 ) ; } } 
public TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = null ; if ( ( ( ! ( getModel ( ) . METHOD_2 ( ) ) ) && ( getModel ( ) . METHOD_3 ( ) ) ) && ( ! ( getModel ( ) . METHOD_4 ( ) ) ) ) { VAR_1 = VAR_2 . METHOD_5 ( ) ; } else { VAR_1 = this . METHOD_6 ( ) ; } return TYPE_2 . METHOD_7 ( VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . add ( VAR_2 , java.lang.Boolean . toString ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ) ; if ( ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) >= 0 ) { VAR_1 . add ( VAR_3 , TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; } return VAR_1 ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS VAR_1 ) { return ( ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) ) ) >= VAR_2 ) && ( ( VAR_1 . METHOD_4 ( ) ) != null ) ) && ( ( ( new TYPE_1 ( ) . METHOD_5 ( ) ) - ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ) >= ( TYPE_2 . METHOD_6 ( VAR_3 ) ) ) ) && ( ( VAR_1 . METHOD_7 ( ) ) > 0 ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) ) ; } 
public static java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.DiskImage image ) { java.lang.String VAR_1 = STRING_1 ; if ( ( image . METHOD_2 ( ) ) != null ) { VAR_1 += image . METHOD_2 ( ) . getValue ( ) . toString ( ) ; } else { VAR_1 += VAR_2 ; } VAR_1 += STRING_2 + ( image . METHOD_3 ( ) . toString ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; TYPE_1 host = new TYPE_1 ( ) ; host . METHOD_3 ( new TYPE_2 ( ) ) ; host . METHOD_4 ( ) . setId ( STRING_1 ) ; VAR_1 . METHOD_5 ( ) ; resource . METHOD_6 ( host ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { return ; } if ( ( METHOD_2 ( ) . getEntity ( ) ) == true ) { METHOD_3 ( ) . METHOD_4 ( true ) ; } if ( ( METHOD_2 ( ) . getEntity ( ) ) == false ) { METHOD_3 ( ) . METHOD_4 ( false ) ; } } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( TYPE_1 . equals ( host . getStatus ( ) ) ) { VAR_1 . add ( host ) ; } } METHOD_1 ( ) . setItems ( VAR_1 ) ; if ( VAR_1 . isEmpty ( ) ) { METHOD_2 ( false ) ; } } 
public java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_1 < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > > VAR_1 , java.util.ArrayList < TYPE_2 . DiskImage > VAR_2 ) { java.lang.String VAR_3 = METHOD_2 ( vm , VAR_2 ) ; VAR_1 . put ( vm . getId ( ) , new TYPE_1 ( VAR_3 , vm . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . map ( TYPE_3 : : getId ) . METHOD_6 ( TYPE_4 . METHOD_7 ( ) ) ) ) ; return VAR_3 ; } 
private void METHOD_1 ( boolean VAR_1 ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( METHOD_2 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) ; METHOD_4 ( VAR_2 , VAR_1 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_4 ) ; METHOD_7 ( VAR_5 ) ; METHOD_8 ( ) . METHOD_9 ( true ) ; METHOD_8 ( ) . METHOD_10 ( ) ; TYPE_1 . METHOD_11 ( METHOD_8 ( ) , true ) ; METHOD_12 ( METHOD_8 ( ) ) ; } 
protected java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > METHOD_1 ( ) { if ( ! ( TYPE_2 . METHOD_2 ( getParameters ( ) . getVm ( ) . getName ( ) ) ) ) { return TYPE_3 . METHOD_3 ( getParameters ( ) . getVm ( ) . getName ( ) , TYPE_4 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; } return null ; } 
public void METHOD_1 ( ) { log . METHOD_2 ( STRING_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = METHOD_3 ( ) . METHOD_4 ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : VAR_1 ) { if ( cluster . METHOD_5 ( ) ) { try { METHOD_6 ( cluster ) ; } catch ( java.lang.Exception e ) { log . METHOD_7 ( STRING_2 , cluster . METHOD_8 ( ) , e ) ; } } } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { if ( TYPE_2 . equals ( VAR_1 ) ) { VAR_3 . error ( VAR_2 ) ; } else if ( TYPE_3 . equals ( VAR_1 ) ) { VAR_3 . METHOD_2 ( VAR_2 ) ; } else if ( TYPE_4 . equals ( VAR_1 ) ) { VAR_3 . METHOD_3 ( VAR_2 ) ; } else { VAR_3 . METHOD_4 ( VAR_2 ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( true , false ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; METHOD_7 ( true ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . get ( VAR_2 . getId ( ) ) ; dao . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_3 = dao . get ( VAR_2 . getId ( ) ) ; TYPE_2 . METHOD_3 ( TYPE_3 . equals ( VAR_1 . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) ) ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 context = METHOD_2 ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { for ( TYPE_3 map : METHOD_3 ( domain ) ) { context . METHOD_4 ( map , map . getStatus ( ) ) ; METHOD_5 ( map , status ) ; } } METHOD_2 ( ) . METHOD_6 ( ) ; return null ; } 
private void METHOD_1 ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM VAR_2 : VAR_1 . METHOD_2 ( ) ) { if ( ! ( VAR_3 . METHOD_3 ( VAR_2 . getId ( ) ) ) ) { VAR_4 . add ( new TYPE_1 < org.ovirt.engine.core.common.businessentities.VM , TYPE_2 > ( VAR_2 , null ) ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . setId ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( VAR_2 ) ; final TYPE_2 VAR_3 = org.mockito.Mockito . METHOD_4 ( VAR_4 class ) ; TYPE_3 command = org.mockito.Mockito . METHOD_5 ( new TYPE_3 ( params , null ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( command . validate ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.VM vm , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = vm . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; TYPE_2 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_4 , new TYPE_3 ( VAR_1 , VAR_3 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 from ) { TYPE_1 to = new TYPE_1 ( ) ; if ( from . METHOD_2 ( ) ) { to . METHOD_3 ( from . METHOD_4 ( ) ) ; } if ( from . METHOD_5 ( ) ) { to . METHOD_6 ( from . getValue ( ) ) ; } return to ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . get ( ) ; TYPE_1 . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_7 ( VAR_2 ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 quota ) { boolean VAR_1 = false ; if ( quota instanceof TYPE_3 ) { VAR_1 = METHOD_2 ( ( ( TYPE_3 ) ( quota ) ) ) ; } else if ( quota instanceof TYPE_4 ) { VAR_1 = METHOD_2 ( ( ( TYPE_4 ) ( quota ) ) ) ; } if ( VAR_1 ) { return TYPE_5 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; } return null ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.util.List < java.lang.String > VAR_3 ) { TYPE_1 . METHOD_2 ( VAR_3 ) ; TYPE_2 VAR_4 = TYPE_3 . getInstance ( ) ; TYPE_4 VAR_5 = VAR_4 . METHOD_3 ( VAR_1 ) ; TYPE_4 VAR_6 = VAR_4 . METHOD_3 ( VAR_2 ) ; for ( java.lang.String VAR_7 : VAR_3 ) { VAR_5 . METHOD_4 ( VAR_7 ) ; VAR_6 . METHOD_5 ( VAR_7 ) ; } } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( ) . setEntity ( VAR_2 . METHOD_3 ( ) ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( super . METHOD_1 ( ) ) ) { return false ; } final TYPE_1 validator = new TYPE_1 ( METHOD_2 ( ) ) ; return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; } 
protected void METHOD_1 ( TYPE_1 value , TYPE_2 widget , boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ( ! VAR_1 ) && ( value . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) ; VAR_3 . METHOD_2 ( ( ( ! VAR_1 ) && ( value . METHOD_5 ( ) . METHOD_4 ( ) ) ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( true ) ; validator = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; } } ; TYPE_1 params = new TYPE_1 ( VAR_1 ) ; params . METHOD_2 ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_3 ( ) { METHOD_4 ( ) . METHOD_5 ( getVm ( ) . METHOD_6 ( ) , getVm ( ) . METHOD_7 ( ) ) ; METHOD_8 ( getVm ( ) . METHOD_6 ( ) ) ; METHOD_4 ( ) . METHOD_9 ( ) ; return null ; } } ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 event = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_2 . getParameters ( ) . getId ( ) ) ; if ( event == null ) { return METHOD_3 ( VAR_1 ) ; } if ( TYPE_3 . METHOD_4 ( event . METHOD_5 ( ) ) ) { return METHOD_3 ( VAR_2 ) ; } if ( ( event . METHOD_6 ( ) ) == ( VAR_3 ) ) { return METHOD_3 ( VAR_4 ) ; } return true ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) { TYPE_1 pool = VAR_1 . get ( 0 ) ; TYPE_3 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } } 
void METHOD_1 ( TYPE_1 constants ) { this . VAR_1 = new TYPE_2 < java.lang.Integer > ( constants ) ; this . VAR_2 = new TYPE_2 < java.lang.Integer > ( constants ) ; this . VAR_3 = new TYPE_2 < java.lang.Integer > ( constants ) ; this . VAR_4 = new TYPE_2 < TYPE_3 > ( constants ) ; this . VAR_5 = new TYPE_2 < TYPE_3 > ( constants ) ; this . VAR_6 = new TYPE_2 < TYPE_3 > ( constants ) ; this . VAR_7 = new TYPE_2 < TYPE_4 > ( constants ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( super . METHOD_1 ( ) ) ) { return false ; } VAR_1 = METHOD_2 ( ) . get ( METHOD_3 ( ) ) ; return ( ( validate ( new TYPE_1 ( VAR_1 ) . METHOD_4 ( ) ) ) && ( validate ( new TYPE_1 ( METHOD_5 ( ) ) . METHOD_6 ( ) ) ) ) && ( validate ( TYPE_2 . METHOD_7 ( VAR_1 , METHOD_5 ( ) ) ) ) ; } 
private org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; return disk ; } 
protected void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( model . METHOD_2 ( ) ) ) { METHOD_3 ( model ) ; METHOD_4 ( ) . METHOD_5 ( ) ; VAR_1 . METHOD_6 ( model . getModel ( ) , model . METHOD_7 ( ) ) ; TYPE_1 . METHOD_8 ( METHOD_9 ( ) , model . getModel ( ) ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( final int VAR_1 , final int VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 ) { org.ovirt.engine.core.common.businessentities.VM vm = METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( vm ) ; TYPE_1 < TYPE_2 > cmd = METHOD_4 ( vm , VAR_3 ) ; TYPE_3 . METHOD_5 ( cmd ) ; return cmd ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { if ( returnValue != null ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; METHOD_1 ( ) . METHOD_2 ( VAR_1 ) ; METHOD_1 ( ) . METHOD_3 ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) ; METHOD_4 ( ) ; } METHOD_5 ( ) ; } 
public static org.ovirt.engine.core.common.businessentities.VDSGroup map ( TYPE_1 pool , org.ovirt.engine.core.common.businessentities.VDSGroup template ) { org.ovirt.engine.core.common.businessentities.VDSGroup entity = ( template != null ) ? template : new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; if ( ( pool . METHOD_1 ( ) ) != null ) { entity . METHOD_2 ( pool . METHOD_1 ( ) ) ; } return entity ; } 
private void METHOD_1 ( TYPE_1 . EngineMessage VAR_1 , TYPE_2 < java.lang.String > VAR_2 ) { TYPE_3 . ValidationResult VAR_3 = ( VAR_2 . isEmpty ( ) ) ? VAR_4 : new TYPE_3 . ValidationResult ( VAR_1 , VAR_2 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_2 ( TYPE_4 . any ( ) ) ) . thenReturn ( VAR_3 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new TYPE_2 < TYPE_1 > ( ) ; for ( java.lang.Object item : VAR_2 ) { TYPE_3 VAR_3 = ( ( TYPE_3 ) ( item ) ) ; if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { VAR_1 . add ( VAR_3 . METHOD_3 ( ) ) ; } } return VAR_1 ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , TYPE_2 entity ) { org.ovirt.engine.core.common.businessentities . Network network = METHOD_2 ( model ) ; model . METHOD_3 ( ) . setId ( network . getId ( ) . toString ( ) ) ; model . METHOD_3 ( ) . METHOD_4 ( null ) ; return model ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( runQuery ( VAR_1 , response , VAR_2 ) ) { response . METHOD_3 ( VAR_4 ) ; VAR_5 . METHOD_4 ( STRING_1 , VAR_2 ) ; } else { response . METHOD_3 ( VAR_6 ) ; VAR_5 . METHOD_4 ( STRING_2 , VAR_2 ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 dao = TYPE_2 . METHOD_2 ( ) ; TYPE_3 VAR_1 = TYPE_2 . getParameters ( ) . METHOD_3 ( ) ; TYPE_3 VAR_2 = dao . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; if ( VAR_2 == null ) { dao . METHOD_7 ( VAR_1 ) ; } else { dao . METHOD_8 ( VAR_2 ) ; } METHOD_9 ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_10 ( true ) ; } 
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_3 : VAR_1 ) { try { if ( ! ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) { vms . add ( VAR_2 . METHOD_3 ( VAR_3 ) ) ; } } catch ( TYPE_2 VAR_4 ) { METHOD_4 ( VAR_4 . getName ( ) , VAR_4 . METHOD_5 ( ) ) ; } } return vms ; } 
public TYPE_1 METHOD_1 ( TYPE_2 parameters ) { switch ( parameters . METHOD_2 ( ) ) { case VAR_1 : case VAR_2 : case VAR_3 : TYPE_3 < ? > command = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ; return command . METHOD_4 ( ) ; default : return METHOD_5 ( VAR_4 ) ; } } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { TYPE_1 VAR_1 = null ; try { VAR_1 = new TYPE_1 ( vds . METHOD_2 ( ) , STRING_1 , true ) ; } catch ( TYPE_2 e ) { VAR_2 . METHOD_3 ( STRING_2 , vds . getId ( ) , vds . METHOD_4 ( ) , vds . METHOD_2 ( ) , TYPE_3 . METHOD_5 ( e ) ) ; } return VAR_1 ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; cluster = new TYPE_2 ( ) ; cluster . METHOD_3 ( STRING_1 ) ; cluster . METHOD_4 ( ) . add ( VAR_3 ) ; cluster . METHOD_5 ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( cluster ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( STRING_2 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; TYPE_3 VAR_4 = new TYPE_3 ( ) ; client . METHOD_3 ( STRING_3 , VAR_2 , VAR_3 , VAR_4 ) ; TYPE_4 . assertEquals ( VAR_1 , new java.lang.String ( VAR_3 . METHOD_4 ( ) , STRING_2 ) ) ; TYPE_4 . assertEquals ( 0 , VAR_4 . size ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . setId ( TYPE_2 . any ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) { public TYPE_3 . Disk METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_3 . Disk , TYPE_3 . Disk > ( VAR_5 , VAR_2 , VAR_4 ) ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( ) ; METHOD_3 ( VAR_4 , VAR_5 . METHOD_4 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , VAR_3 , VAR_2 ) ; VAR_8 . METHOD_5 ( ) ; } 
private boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 < TYPE_3 > > VAR_1 = VAR_2 . validate ( getParameters ( ) ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { returnValue . METHOD_2 ( VAR_1 . toString ( ) ) ; return false ; } return true ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_1 , TYPE_3 > VAR_2 ) { new TYPE_4 ( VAR_2 , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( new TYPE_8 ( ) , new TYPE_9 ( new TYPE_10 ( ) , new TYPE_11 ( ) . METHOD_2 ( ) ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_1 , getModel ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
private boolean METHOD_1 ( ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_1 . VM ) ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : METHOD_3 ( ) ) { if ( ( vm . METHOD_4 ( ) ) != ( VAR_2 ) ) { TYPE_1 VAR_3 = METHOD_5 ( ) . get ( new TYPE_2 ( disk . getId ( ) , vm . getId ( ) ) ) ; if ( VAR_3 . METHOD_6 ( ) ) { addCanDoActionMessage ( VAR_4 ) ; return false ; } } } } return true ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) ) ) ; METHOD_3 ( cmd , VAR_1 ) ; METHOD_4 ( false ) ; TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ; METHOD_4 ( true ) ; METHOD_6 ( VAR_2 ) ; TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ; } 
public final boolean METHOD_1 ( java.lang.Object source , java.lang.Object VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.ArrayList < java.lang.String > VAR_3 = TYPE_2 . METHOD_2 ( source , VAR_1 ) ; for ( java.lang.String VAR_4 : VAR_2 ) { if ( VAR_3 . METHOD_3 ( VAR_4 ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) { java.lang.Object [ ] VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 [ 1 ] = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; TYPE_1 . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 command , TYPE_3 VAR_2 , TYPE_4 . VdcActionType VAR_3 ) { TYPE_5 VAR_4 = new TYPE_5 ( VAR_2 , METHOD_2 ( VAR_1 , command , VAR_2 , VAR_3 ) ) ; VAR_4 . METHOD_3 ( command . getParameters ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( command . METHOD_6 ( ) , VAR_4 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; final java.lang.String VAR_4 = VAR_1 . METHOD_4 ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) { for ( TYPE_1 type : TYPE_1 . METHOD_2 ( ) ) { TYPE_2 model = TYPE_3 . map ( type , null ) ; TYPE_4 . METHOD_3 ( model ) ; TYPE_4 . assertEquals ( model . name ( ) . METHOD_4 ( ) , type . name ( ) . METHOD_4 ( ) ) ; } } 
protected TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ! ( METHOD_2 ( ) . equals ( VAR_2 ) ) ) ) { TYPE_2 VAR_3 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( METHOD_2 ( ) ) ; TYPE_3 VAR_4 = TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; VAR_1 = VAR_4 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; VAR_2 . METHOD_2 ( VAR_3 , INT_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( ) ) . thenReturn ( new TYPE_2 ( new TYPE_3 ( ) ) ) ; boolean result = validator . METHOD_4 ( VAR_1 ) ; TYPE_4 . assertEquals ( 1 , VAR_1 . size ( ) ) ; TYPE_4 . assertEquals ( STRING_1 , VAR_1 . get ( 0 ) ) ; TYPE_4 . METHOD_5 ( result ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . VdcActionType VAR_2 , TYPE_3 VAR_3 ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( VAR_2 , VAR_4 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_3 } ) ) ; TYPE_4 action = new TYPE_4 ( ) ; action . METHOD_4 ( VAR_1 . value ( ) ) ; METHOD_5 ( resource . METHOD_6 ( action ) ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String source , TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { java.lang.String result = null ; byte [ ] VAR_2 = source . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; TYPE_4 VAR_3 = TYPE_4 . getInstance ( VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_5 , VAR_1 . METHOD_5 ( ) ) ; byte [ ] VAR_6 = VAR_3 . METHOD_6 ( VAR_2 ) ; result = TYPE_5 . METHOD_7 ( VAR_6 ) ; return result ; } 
private boolean METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . DiskImage > VAR_1 = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . DiskImage > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ; for ( TYPE_1 . DiskImage disk : VAR_1 ) { if ( ( ( disk . METHOD_4 ( ) ) != ( VAR_3 ) ) || ( ( disk . METHOD_5 ( ) ) != ( VAR_4 ) ) ) { return false ; } } return true ; } 
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 ) { java.util.ArrayList < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( TYPE_3 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) ; list . METHOD_4 ( VAR_3 ) ; if ( TYPE_4 . METHOD_5 ( VAR_1 ) ) { list . METHOD_4 ( VAR_4 ) ; if ( ( VAR_1 == ( VAR_5 ) ) && VAR_2 ) { list . add ( VAR_3 ) ; } } return list ; } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; java.lang.String VAR_3 = ( ( VAR_2 != null ) && ( ! ( getParameters ( ) . METHOD_3 ( ) ) ) ) ? VAR_2 . METHOD_4 ( ) : VAR_4 ; return VAR_5 . METHOD_1 ( VAR_1 , getVm ( ) , VAR_3 , TYPE_2 . METHOD_5 ( ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Object returnValue ) { if ( returnValue == null ) { return new java.util.ArrayList < > ( ) ; } java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( TYPE_3 < TYPE_1 > ) ( returnValue ) ) , VAR_2 ) ) ; TYPE_4 . METHOD_4 ( VAR_1 , new TYPE_5 ( ) ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ; METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; METHOD_4 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; METHOD_3 ( ) . setEntity ( ( VAR_1 ? STRING_1 : null ) ) ; METHOD_4 ( ) . setEntity ( ( VAR_1 ? STRING_1 : null ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( false ) ; TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) ; TYPE_1 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_2 . toString ( ) ) ) ; } 
public java.lang.String getValue ( TYPE_1 object ) { if ( ( object . METHOD_1 ( ) ) == ( VAR_1 ) ) { return TYPE_2 . METHOD_2 ( object . METHOD_3 ( ) ) ; } else { return TYPE_2 . METHOD_2 ( object . METHOD_4 ( ) ) ; } } 
protected TYPE_1 METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , TYPE_3 < ? extends TYPE_2 . VdcActionParametersBase > VAR_2 , java.lang.String [ ] VAR_3 , java.lang.Object [ ] VAR_4 , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_5 , java.util.ArrayList < TYPE_4 > VAR_6 ) { java.lang.String VAR_7 = ( ( ( STRING_1 + ( VAR_8 ) ) + STRING_2 ) + ( VAR_9 ) ) + STRING_3 ; return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true , true , null , VAR_5 , VAR_6 , VAR_7 , true ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) . equals ( vm . METHOD_3 ( ) ) ) && ( TYPE_1 . METHOD_4 ( VAR_1 , vm ) ) ) && ( TYPE_1 . METHOD_5 ( VAR_1 , vm ) ) ; } 
private boolean METHOD_1 ( ) { return TYPE_1 . equals ( ( ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( ( TYPE_2 . getVm ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) ) ; } 
private static java.util.List < java.lang.String > METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 ) { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface i : VAR_2 ) { if ( VAR_1 . getName ( ) . equals ( i . METHOD_2 ( ) ) ) { VAR_3 . add ( i . getName ( ) ) ; } } return VAR_3 ; } 
public static TYPE_1 map ( TYPE_2 entity , TYPE_1 template ) { if ( template == null ) { template = new TYPE_1 ( ) ; } TYPE_3 VAR_1 = TYPE_4 . map ( entity . METHOD_1 ( ) , null ) ; template . METHOD_2 ( ( VAR_1 == null ? STRING_1 : VAR_1 . value ( ) ) ) ; template . METHOD_3 ( entity . METHOD_4 ( ) ) ; return template ; } 
public static synchronized java.lang.String [ ] METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { return TYPE_2 . METHOD_2 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 } : TYPE_2 . METHOD_3 ( storageDomain ) ? new java.lang.String [ ] { STRING_6 , STRING_4 , STRING_5 } : TYPE_2 . METHOD_4 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_6 , STRING_3 , STRING_4 } : new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_6 , STRING_5 } ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , false ) ; VAR_2 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_1 VAR_3 ) { METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; assertEquals ( VAR_3 . METHOD_7 ( ) . getStatus ( ) , INT_1 ) ; } } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Disk model = TYPE_2 . getModel ( 0 ) ; model . METHOD_2 ( null ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; try { VAR_2 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
private void METHOD_1 ( ) { if ( METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_1 ) ) { VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) ; METHOD_6 ( VAR_3 , new TYPE_2 ( TYPE_1 . METHOD_4 ( ) ) , TYPE_3 . METHOD_7 ( TYPE_1 . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) ; } } 
public TYPE_1 getStoragePoolId ( ) { if ( ( VAR_1 ) == null ) { if ( ( VAR_2 ) != null ) { VAR_1 = VAR_2 . getId ( ) ; } else if ( ( METHOD_1 ( ) ) != null ) { VAR_1 = METHOD_1 ( ) . METHOD_2 ( ) ; } } return VAR_1 ; } 
protected void METHOD_1 ( org.ovirt.engine.core.common.businessentities.DiskImage VAR_1 , TYPE_1 . VdcActionParametersBase parameters , TYPE_2 result ) { TYPE_3 . getParameters ( ) . METHOD_2 ( ) . add ( parameters ) ; if ( ! ( result . getSucceeded ( ) ) ) { throw new TYPE_4 ( VAR_2 ) ; } else { TYPE_5 . METHOD_3 ( VAR_1 ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( result . METHOD_6 ( ) ) ; VAR_3 . add ( VAR_1 ) ; } } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.VDSGroup VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; java.lang.String [ ] VAR_3 = ( ( vds . METHOD_3 ( ) ) != null ) ? vds . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) : new java.lang.String [ ] { STRING_2 } ; if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { return METHOD_5 ( vds , VAR_3 ) ; } else { return TYPE_1 . METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_2 ) ; } } 
protected TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( VAR_5 ) ; VAR_2 . setId ( VAR_6 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , VAR_3 . Collections < TYPE_3 > METHOD_3 ( ) ) ) ) ; METHOD_4 ( cmd , VAR_4 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { disk . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_1 = STRING_2 ; disk . METHOD_3 ( VAR_1 ) ; METHOD_4 ( disk , TYPE_2 . METHOD_5 ( TYPE_2 . METHOD_6 ( STRING_1 ) ) , TYPE_2 . METHOD_7 ( TYPE_2 . METHOD_6 ( VAR_1 . METHOD_8 ( 0 , INT_1 ) ) ) , TYPE_2 . METHOD_9 ( INT_2 ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { java.lang.String VAR_2 = VAR_3 ; if ( VAR_4 . METHOD_2 ( VAR_2 ) ) { METHOD_3 ( source , VAR_5 , false , VAR_2 ) ; } else if ( VAR_6 . METHOD_2 ( VAR_2 ) ) { METHOD_3 ( source , VAR_7 , true , VAR_2 ) ; } } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , true , true , true , null ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) ; METHOD_2 ( VAR_3 class ) . to ( VAR_4 class ) ; METHOD_2 ( VAR_5 class ) . to ( VAR_6 class ) ; METHOD_2 ( VAR_7 class ) . to ( VAR_8 class ) ; METHOD_2 ( VAR_9 class ) . to ( VAR_10 class ) ; METHOD_2 ( VAR_11 class ) . to ( VAR_12 class ) ; } 
public void log ( TYPE_1 VAR_1 , TYPE_2 . AuditLogType VAR_2 , java.lang.String VAR_3 ) { if ( ! ( VAR_2 . METHOD_1 ( ) ) ) { return ; } TYPE_3 VAR_4 = new TYPE_3 ( VAR_1 , VAR_2 ) ; VAR_4 . METHOD_2 ( ) ; if ( VAR_4 . METHOD_3 ( ) ) { METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , METHOD_3 ( ) . METHOD_4 ( ) ) ; java.lang.Integer VAR_2 = VAR_3 < java.lang.Integer > getValue ( VAR_4 ) ; if ( VAR_2 > 0 ) { TYPE_1 . getInstance ( ) . METHOD_5 ( this , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_2 , VAR_2 , VAR_5 ) ; VAR_1 . METHOD_2 ( STRING_3 , METHOD_3 ( ) . METHOD_4 ( ) ) ; } } 
private boolean METHOD_1 ( TYPE_1 storageDomain ) { if ( storageDomain == null ) { return false ; } boolean VAR_1 = ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_3 ) ) ; boolean VAR_4 = storageDomain . METHOD_3 ( ) . METHOD_4 ( ) ; return VAR_4 ? true : VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_3 . METHOD_4 ( VAR_1 , VAR_4 ) ; for ( TYPE_1 . Disk diskImage : VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) { TYPE_2 . assertEquals ( ( ( TYPE_1 . DiskImage ) ( diskImage ) ) . METHOD_6 ( ) , VAR_5 ) ; } } 
private static java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , TYPE_1 < ? extends org.ovirt.engine.core.common.businessentities . Disk > VAR_1 ) { if ( VAR_1 == null ) { return TYPE_2 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( vm . getId ( ) ) , true , false ) ; } return TYPE_2 . METHOD_2 ( VAR_1 , true , false ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( 2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; VAR_3 . METHOD_6 ( ) ; try { resource . get ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_8 ( VAR_4 ) ; } } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( VAR_1 != null ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; METHOD_2 ( ) . METHOD_4 ( METHOD_2 ( ) . getId ( TYPE_1 . METHOD_5 ( ) , VAR_2 ) , VAR_1 ) ; } TYPE_1 . METHOD_6 ( false ) ; } 
private void METHOD_1 ( ) { TYPE_1 returnValue = new TYPE_1 ( ) ; returnValue . METHOD_2 ( true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( org.mockito.Mockito . METHOD_4 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) ) . thenReturn ( returnValue ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) ; METHOD_7 ( ) ; METHOD_8 ( true ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . AuditLogType VAR_2 , java.lang.String VAR_3 ) { TYPE_2 . AuditLogSeverity VAR_4 = VAR_2 . METHOD_2 ( ) ; TYPE_3 VAR_5 = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; if ( VAR_5 == null ) { VAR_6 . METHOD_4 ( STRING_1 ) ; } else { METHOD_5 ( VAR_1 , VAR_5 ) ; TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) ; METHOD_9 ( VAR_4 , METHOD_10 ( VAR_3 , VAR_5 ) ) ; } } 
public void METHOD_1 ( ) { cmd . getParameters ( ) . METHOD_2 ( VAR_1 ) ; cmd . getParameters ( ) . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; cmd . getParameters ( ) . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; cmd . METHOD_3 ( cmd . getParameters ( ) . METHOD_6 ( ) ) ; cmd . METHOD_7 ( cmd . getParameters ( ) . METHOD_8 ( ) ) ; METHOD_9 ( cmd ) ; TYPE_1 . METHOD_10 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( result ) ) ; if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; } else { METHOD_3 ( new java.util.ArrayList < TYPE_2 > ( ) ) ; } METHOD_4 ( ) ; } 
private void METHOD_1 ( ) { final org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final TYPE_1 VAR_3 = ( ( TYPE_1 ) ( model ) ) ; VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) ; METHOD_4 ( ) ; } } ; TYPE_2 . METHOD_5 ( VAR_1 ) ; } 
private boolean METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 . METHOD_2 ( ) ) ) { if ( ! ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_2 ) ) . METHOD_3 ( ) . equals ( TYPE_1 . METHOD_3 ( ) ) ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; vm . METHOD_3 ( ( ( VAR_2 ) + 1 ) ) ; vm . METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) ; TYPE_1 . METHOD_6 ( VAR_4 . METHOD_7 ( vm ) , false , VAR_5 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 host = new TYPE_3 ( ) ; host . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( host ) ; TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_3 ( map ( VAR_1 , null ) ) ; return params ; } 
private TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_5 ( ) . isEmpty ( ) ) ) ) ; return METHOD_6 ( VAR_3 , TYPE_3 . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } } ) ) ; } 
protected void METHOD_1 ( ) { final java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . getId ( ) , VAR_2 ) ; java.util.List < java.lang.String > result = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { result . add ( VAR_3 . METHOD_4 ( ) ) ; } TYPE_2 . METHOD_5 ( ) . METHOD_6 ( result ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; VAR_6 = new TYPE_1 ( ) ; VAR_6 . METHOD_4 ( STRING_1 ) ; VAR_6 . METHOD_5 ( STRING_2 ) ; VAR_6 . METHOD_6 ( VAR_7 ) ; VAR_8 = dao . METHOD_7 ( new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ) ; VAR_9 = new TYPE_2 ( VAR_10 , VAR_2 . METHOD_8 ( ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 rs , TYPE_3 < ? > entity ) throws TYPE_4 { switch ( entity . METHOD_2 ( ) ) { case VAR_1 : TYPE_5 VAR_2 = new TYPE_5 ( ) ; VAR_2 . METHOD_3 ( rs.getString ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( TYPE_6 . valueOf ( rs.getString ( STRING_2 ) ) ) ; return VAR_2 ; default : return null ; } } 
public TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 < TYPE_3 . DiskImage > VAR_1 , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.compat.Guid > VAR_2 ) { if ( ( ! ( params . METHOD_2 ( ) ) ) && ( ! ( params . METHOD_3 ( ) ) ) ) { return new TYPE_4 ( VAR_1 ) . METHOD_4 ( VAR_2 ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , METHOD_5 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { TYPE_1 . toString ( ) } , getEntity ( 0 ) ) ; VAR_3 . METHOD_6 ( ) ; TYPE_2 model = resource . get ( ) ; assertEquals ( VAR_4 [ 0 ] . toString ( ) , model . getId ( ) ) ; METHOD_7 ( model ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . EngineMessage VAR_1 = VAR_2 ; TYPE_2 . ValidationResult VAR_3 = new TYPE_2 . ValidationResult ( VAR_1 , TYPE_3 . METHOD_2 ( VAR_1 , STRING_1 ) , TYPE_3 . METHOD_3 ( VAR_4 , STRING_2 ) ) ; TYPE_4 VAR_5 = METHOD_4 ( ) ; VAR_5 . METHOD_5 ( TYPE_5 . METHOD_6 ( STRING_1 , STRING_3 ) ) ; METHOD_7 ( VAR_5 , VAR_6 , VAR_6 , VAR_3 , VAR_3 ) ; } 
private java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > map = null ; if ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( TYPE_2 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ) { map = new java.util.HashMap < > ( ) ; if ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_6 ( ) ) { map . put ( VAR_1 , METHOD_7 ( ) ) ; } } return map ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > source = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_2 , STRING_5 ) ) ; TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_5 , STRING_2 ) ) ; } 
public void METHOD_1 ( ) { host . METHOD_2 ( VAR_1 ) ; final TYPE_1 VAR_2 = org.mockito.Mockito . METHOD_3 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_5 ) , TYPE_2 . any ( VAR_6 class ) , TYPE_2 . any ( VAR_7 class ) ) ) . thenReturn ( METHOD_7 ( false ) ) ; METHOD_8 ( VAR_2 , VAR_8 ) ; } 
private void METHOD_1 ( TYPE_1 < java.lang.String > VAR_1 , java.util.List < java.lang.Object > VAR_2 ) { TYPE_2 < java.lang.String > VAR_3 = VAR_1 . METHOD_2 ( ) ; while ( VAR_3 . METHOD_3 ( ) ) { java.lang.String VAR_4 = VAR_3 . METHOD_4 ( ) ; for ( int i = VAR_5 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { TYPE_3 . METHOD_5 ( VAR_4 . METHOD_6 ( METHOD_7 ( i ) ) ) ; } } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( null ) ; final org.ovirt.engine.core.compat.Guid VAR_2 = null ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_3 = VAR_1 . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( VAR_3 ) ; } 
public org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( ) { if ( ( ( ( VAR_1 ) == null ) && ( ( getStoragePoolId ( ) ) != null ) ) && ( ! ( TYPE_1 . equals ( getStoragePoolId ( ) ) ) ) ) { VAR_1 = METHOD_2 ( ) . get ( getStoragePoolId ( ) . getValue ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( args instanceof TYPE_3 ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( args ) ) ; if ( STRING_1 . equals ( VAR_3 ) ) { ( ( TYPE_4 . ViewDef ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ( ( TYPE_5 ) ( model . METHOD_4 ( ) . getSelectedItem ( ) ) ) . METHOD_5 ( ) ) ; } } } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( TYPE_1 . RunVmCommand < TYPE_2 > VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( vm ) ; return vm ; } 
public org.ovirt.engine.core.compat.Guid METHOD_1 ( java.util.List < TYPE_1 . DiskImage > VAR_1 ) { if ( ( VAR_2 . equals ( VAR_3 ) ) && ( ( TYPE_2 . getVm ( ) ) != null ) ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = TYPE_3 . getInstance ( ) . METHOD_2 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_3 ( ) ) ; if ( storageDomain != null ) { VAR_2 = storageDomain . getId ( ) ; } } return VAR_2 ; } 
public TYPE_1 getValue ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : return METHOD_3 ( ) . METHOD_4 ( ) ; case VAR_3 : return METHOD_3 ( ) . METHOD_5 ( ) ; case VAR_4 : case VAR_5 : case VAR_6 : return METHOD_3 ( ) . METHOD_6 ( ) ; case VAR_7 : return METHOD_3 ( ) . METHOD_7 ( ) ; default : break ; } return null ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_2 ( STRING_2 , VAR_1 ) ; METHOD_3 ( nic ) ; nic . METHOD_4 ( null ) ; TYPE_1 VAR_2 = METHOD_5 ( METHOD_6 ( nic ) ) ; METHOD_7 ( VAR_2 ) ; METHOD_8 ( VAR_2 ) ; METHOD_9 ( VAR_2 ) ; METHOD_10 ( VAR_2 , VAR_1 ) ; METHOD_11 ( VAR_2 ) ; } 
private TYPE_1 . ValidationResult METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VDS vds , TYPE_2 VAR_1 , boolean VAR_2 ) { VAR_1 . append ( STRING_1 ) . append ( vds . METHOD_2 ( ) ) . append ( STRING_2 ) . append ( vds . getId ( ) ) . append ( STRING_2 ) ; for ( TYPE_3 validator : this . VAR_3 ) { TYPE_4 . VdcBllMessages result = validator . validate ( vds , VAR_1 , VAR_2 ) ; if ( result != null ) { return new TYPE_1 . ValidationResult ( result ) ; } } return VAR_4 ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_4 . getParameters ( ) . METHOD_3 ( ) . getId ( ) , TYPE_4 . getParameters ( ) . METHOD_4 ( ) ) , TYPE_4 . getParameters ( ) . METHOD_3 ( ) . METHOD_5 ( ) ) ; TYPE_4 . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; } 
protected void METHOD_1 ( ) { int VAR_1 = ( ( METHOD_2 ( ) ) != null ) ? METHOD_2 ( ) . size ( ) : 0 ; METHOD_3 ( ) . METHOD_4 ( ( VAR_1 == 1 ) ) ; METHOD_5 ( ) . METHOD_4 ( ( VAR_1 > 0 ) ) ; } 
public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( true ) ; dao . METHOD_5 ( VAR_1 ) ; TYPE_1 result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_6 ( result ) ; TYPE_2 . assertEquals ( VAR_1 . getId ( ) , result . getId ( ) ) ; TYPE_2 . assertEquals ( true , result . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( result . METHOD_9 ( ) ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface ) { if ( VAR_1 . METHOD_2 ( iface . getName ( ) ) ) { METHOD_3 ( VAR_2 , iface . getName ( ) ) ; return false ; } VAR_1 . add ( iface . getName ( ) ) ; return true ; } 
public TYPE_1 METHOD_1 ( TYPE_2 rs , int VAR_1 ) throws TYPE_3 { TYPE_1 entity = new TYPE_1 ( ) ; entity . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( rs.getString ( STRING_1 ) ) ) ; entity . METHOD_4 ( TYPE_4 . METHOD_3 ( rs.getString ( STRING_2 ) ) ) ; entity . METHOD_5 ( TYPE_5 . METHOD_6 ( rs . METHOD_7 ( STRING_3 ) ) ) ; entity . METHOD_8 ( TYPE_6 . METHOD_6 ( rs . METHOD_7 ( STRING_4 ) ) ) ; return entity ; } 
protected void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ( ( TYPE_2 < TYPE_1 > ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ; VAR_2 . add ( 1 , VAR_3 ) ; METHOD_2 ( ) . setItems ( VAR_2 ) ; METHOD_2 ( ) . setSelectedItem ( VAR_3 ) ; } super . METHOD_1 ( VAR_1 ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( ( ( vds . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( vds . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( vds . METHOD_2 ( ) ) != ( VAR_3 ) ) ) { METHOD_3 ( VAR_4 , new TYPE_1 ( vds . getId ( ) , VAR_1 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = METHOD_6 ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_7 ( model ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_9 ( VAR_3 ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( nic ) ; java.lang.String VAR_1 = STRING_2 ; TYPE_1 VAR_2 = METHOD_4 ( METHOD_5 ( nic , METHOD_6 ( nic . getName ( ) , INT_1 , VAR_1 ) ) ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_1 ) ; } 
private org.ovirt.engine.core.common.businessentities.VDS METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new TYPE_2 < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : VAR_1 ) { VAR_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ; } org.ovirt.engine.core.common.businessentities.VDS vds = VAR_1 . get ( 0 ) ; vds . METHOD_4 ( VAR_2 ) ; return vds ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; java.lang.String name = VAR_1 . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ) ) ; } 
private java.util.List < TYPE_1 . Network > METHOD_1 ( java.lang.String VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = getEntity ( VAR_3 class , VAR_4 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( VAR_1 ) ) , null ) . getStoragePoolId ( ) ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ; return METHOD_3 ( VAR_5 , params ) ; } 
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_2 ( ) ) ; TYPE_2 . VdcQueryReturnValue VAR_2 = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 ) ; return VAR_2 . getSucceeded ( ) ? VAR_4 < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) : null ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) throws TYPE_2 { TYPE_1 VAR_4 = VAR_1 . METHOD_2 ( ) ; if ( VAR_4 == null ) { throw new TYPE_2 ( ( STRING_1 + VAR_4 ) ) ; } VAR_4 . METHOD_3 ( ) ; try ( TYPE_3 VAR_5 = new TYPE_4 ( VAR_1 ) ) { VAR_5 . METHOD_4 ( VAR_2 . METHOD_5 ( STRING_2 ) ) ; VAR_1 . METHOD_6 ( VAR_3 ) ; } } 
public void METHOD_1 ( ) { if ( ! ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ) ) org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) . METHOD_5 ( this ) ; if ( ! ( org.ovirt.engine.ui.frontend.Frontend . METHOD_6 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ) ) org.ovirt.engine.ui.frontend.Frontend . METHOD_6 ( ) . METHOD_5 ( this ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; TYPE_3 . METHOD_6 ( validator . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( VAR_6 ) ) ; } 
public void METHOD_1 ( ) { try { command . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_1 ) { org.mockito.Mockito . METHOD_3 ( VAR_2 ) . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; return ; } TYPE_3 . METHOD_6 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; TYPE_1 tempVar = new TYPE_1 ( VAR_1 ) ; tempVar . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( tempVar , aQuery ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( TYPE_2 . METHOD_2 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ) . thenReturn ( new java.util.ArrayList ( VAR_2 ) ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 context = METHOD_2 ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { for ( TYPE_3 map : METHOD_3 ( domain ) ) { context . METHOD_4 ( map , map . METHOD_5 ( ) ) ; METHOD_6 ( map , status ) ; } } METHOD_2 ( ) . METHOD_7 ( ) ; return null ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; log . METHOD_3 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_6 ( ) ; log . error ( STRING_2 , TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( cluster . getStoragePoolId ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_2 ( VAR_1 . Guid class ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = org.mockito.Mockito . METHOD_2 ( VAR_3 . StoragePool class ) ; org.mockito.Mockito.when ( VAR_4 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_2 ) ; validator = new TYPE_2 ( VAR_5 , VAR_4 , cluster , VAR_6 ) ; TYPE_3 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 model = ( ( TYPE_1 ) ( getWindow ( ) ) ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( model . getSelectedItem ( ) ) ) ; org.ovirt.engine.core.common.businessentities.VDS host = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( model . METHOD_2 ( ) . getSelectedItem ( ) ) ) ; java.util.ArrayList < java.lang.String > VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 . isEmpty ( ) ) { METHOD_4 ( ) ; } else { METHOD_5 ( VAR_2 ) ; } } 
private TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . getId ( ) ; java.lang.String VAR_3 = VAR_1 . getName ( ) ; TYPE_3 . EngineMessage VAR_4 = VAR_5 ; return VAR_6 . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_7 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { boolean VAR_1 = false ; java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; for ( TYPE_1 VAR_3 : VAR_2 ) { if ( ( VAR_3 . METHOD_1 ( ) ) == ( VAR_4 ) ) { VAR_1 = true ; break ; } } VAR_5 . METHOD_2 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == ( VAR_3 ) ) { METHOD_3 ( VAR_1 ) ; } else if ( VAR_2 == ( VAR_4 ) ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } else { VAR_5 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_5 ( ) ) ; } return VAR_2 ; } 
public TYPE_1 list ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( TYPE_2 . StorageDomain entity : METHOD_1 ( VAR_2 . StorageDomain class , VAR_3 , new TYPE_3 ( VAR_4 ) ) ) { VAR_1 . METHOD_2 ( ) . add ( METHOD_3 ( map ( entity ) , METHOD_4 ( entity ) ) ) ; } return VAR_1 ; } 
protected boolean METHOD_1 ( ) { boolean result = true ; if ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . length ( ) ) > ( VAR_1 < java.lang.Integer > METHOD_4 ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; result = false ; } return result ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( vm != null ) { VAR_1 . METHOD_2 ( vm ) ; } } } 
public TYPE_1 list ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( TYPE_2 . Version VAR_2 : METHOD_1 ( ) ) { VAR_1 . METHOD_2 ( ) . add ( METHOD_3 ( VAR_2 ) ) ; } VAR_1 . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { java.lang.Object VAR_1 = model . getModel ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = ( VAR_1 instanceof TYPE_1 ) ? ( ( TYPE_1 ) ( VAR_1 ) ) : null ; if ( VAR_3 . METHOD_3 ( ) . getValue ( ) ) { VAR_2 . METHOD_4 ( VAR_4 ) ; } else { VAR_2 . METHOD_4 ( VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( false ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_8 ( ) ) . when ( command ) . METHOD_9 ( ) ; TYPE_3 . METHOD_10 ( command ) ; } 
public java.lang.Boolean METHOD_1 ( java.lang.Integer VAR_1 , org.ovirt.engine.core.compat . Version version ) { TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > VAR_2 = new TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > ( VAR_1 , version ) ; if ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) { return METHOD_2 ( ) . get ( VAR_2 ) ; } return false ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . getName ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_1 . getId ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) ; VAR_6 = new TYPE_1 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_7 . METHOD_3 ( ) ) . thenReturn ( VAR_8 ) ; TYPE_2 . METHOD_4 ( VAR_7 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , params , aQuery ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; VAR_2 . put ( VAR_5 , STRING_1 ) ; VAR_2 . put ( VAR_6 , VAR_7 ) ; VAR_2 . put ( VAR_8 , TYPE_2 . toString ( ) ) ; VAR_2 . put ( VAR_9 , TYPE_3 . toString ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; java.lang.String [ ] VAR_2 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; TYPE_2 result = VAR_1 . METHOD_2 ( VAR_2 , STRING_4 ) ; int VAR_3 = result . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_3 , INT_1 ) ; java.lang.String [ ] VAR_4 = result . METHOD_4 ( ) ; for ( java.lang.String VAR_5 : VAR_4 ) { VAR_6 . METHOD_5 ( VAR_5 ) ; } } 
public org.ovirt.engine.core.compat.Guid METHOD_1 ( ) { if ( ( ( ( VAR_1 ) != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; } 
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 status ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , status . getValue ( ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 } , VAR_1 , VAR_2 ) ) ; try { resource . METHOD_5 ( TYPE_1 . getModel ( 0 ) ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_7 ) { METHOD_7 ( VAR_7 , VAR_3 ) ; } } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { java.util.ArrayList < TYPE_3 > VAR_2 = getModel ( ) . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) { VAR_3 . METHOD_3 ( VAR_2 . get ( 0 ) , true ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) ; METHOD_4 ( cmd ) ; METHOD_5 ( true , null ) ; TYPE_1 . METHOD_6 ( cmd . validate ( ) ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_8 ( ) ; org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_9 ( VAR_2 ) ; org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_10 ( VAR_2 ) ; TYPE_1 . assertEquals ( cmd . METHOD_11 ( ) , VAR_3 ) ; } 
public boolean METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( java.lang.Integer ) ( TYPE_2 . getValue ( VAR_3 ) ) ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; if ( ! ( ( VAR_2 . METHOD_5 ( VAR_4 ) ) || ( VAR_2 . equals ( VAR_4 ) ) ) ) { VAR_1 . add ( TYPE_3 . name ( ) ) ; return false ; } else { return true ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_2 . METHOD_2 ( ) ) { return VAR_3 ; } else if ( VAR_2 . METHOD_3 ( ) ) { switch ( VAR_1 ) { case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_3 ; default : return VAR_7 ; } } else { return VAR_7 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 2 ) ; METHOD_3 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { true , false } , METHOD_4 ( ) ) ; METHOD_5 ( METHOD_6 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_3 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , true , true ) ) ; METHOD_7 ( resource . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( null ) ; VAR_1 . METHOD_5 ( ) ; try { TYPE_1 VAR_2 = METHOD_6 ( VAR_3 ) ; resource . METHOD_7 ( VAR_2 ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_9 ( VAR_4 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , VAR_3 [ 1 ] } ) ) ; TYPE_1 action = new TYPE_1 ( ) ; action . METHOD_5 ( TYPE_2 . value ( ) ) ; METHOD_6 ( resource . METHOD_7 ( action ) ) ; } 
protected void METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.network.Network a : VAR_1 ) { java.lang.String VAR_2 = ( a == null ) ? null : a . METHOD_2 ( ) ; if ( TYPE_1 . METHOD_3 ( VAR_2 , METHOD_4 ( ) . METHOD_5 ( ) ) ) { METHOD_6 ( ) . setSelectedItem ( a ) ; return ; } } if ( ( METHOD_4 ( ) . METHOD_5 ( ) ) == null ) { METHOD_6 ( ) . setSelectedItem ( null ) ; } } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( 1 , INT_1 , INT_2 , 2 , 1 ) ; TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic ) ) ) ; } 
public static boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 status , java.lang.Object VAR_3 ) { TYPE_2 type = null ; if ( ( type = VAR_4 . get ( VAR_1 ) ) != null ) { return TYPE_3 . METHOD_1 ( type , VAR_2 , status , VAR_3 ) ; } else { throw new TYPE_4 ( java.lang.String . METHOD_2 ( STRING_1 , type ) ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( true , 0 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) ; VAR_1 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = model . METHOD_1 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) ; model . METHOD_2 ( ) . setItems ( VAR_1 ) ; model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) ; model . METHOD_4 ( ) ; METHOD_5 ( ) ; } 
public java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { return ( ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) . getName ( ) ) + STRING_1 ) + ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , TYPE_1 VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; java.lang.String VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( METHOD_3 ( VAR_3 ) ) { java.util.Map < java.lang.String , java.lang.Object > VAR_4 = VAR_1 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( ( VAR_2 + STRING_2 ) , TYPE_3 . METHOD_6 ( VAR_3 ) , vmId , VAR_4 ) ; } else { VAR_5 . METHOD_5 ( VAR_2 , TYPE_3 . METHOD_6 ( VAR_3 ) , vmId ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; VAR_3 . METHOD_5 ( STRING_3 ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; VAR_3 . METHOD_7 ( false ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) { try { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; java.lang.Object VAR_5 = VAR_4 . METHOD_5 ( VAR_1 , VAR_6 , VAR_7 ) ; return new TYPE_1 ( ( ( TYPE_5 ) ( VAR_5 ) ) ) ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
public void METHOD_1 ( ) { cmd . getParameters ( ) . METHOD_2 ( VAR_1 ) ; cmd . getParameters ( ) . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; cmd . METHOD_3 ( cmd . getParameters ( ) . METHOD_5 ( ) ) ; METHOD_6 ( cmd ) ; TYPE_1 . METHOD_7 ( cmd . validate ( ) ) ; } 
private java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = new java.util.HashMap < > ( ) ; VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) ; VAR_2 . put ( VAR_4 , ( TYPE_2 . isEmpty ( VAR_1 . METHOD_3 ( ) ) ? STRING_1 : VAR_1 . METHOD_3 ( ) ) ) ; VAR_2 . put ( VAR_5 , VAR_1 . METHOD_4 ( ) ) ; VAR_2 . put ( VAR_6 , STRING_2 ) ; return VAR_2 ; } 
private TYPE_1 METHOD_1 ( TYPE_2 nic ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . list ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( TYPE_3 . equals ( VAR_2 . METHOD_6 ( ) ) ) && ( nic . getId ( ) . toString ( ) . equals ( VAR_2 . METHOD_7 ( ) ) ) ) { return VAR_2 ; } } return null ; } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { METHOD_2 ( ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_1 . METHOD_3 ( vms , new TYPE_2 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { VAR_1 . add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( vm ) ) ; } VAR_2 . setItems ( VAR_1 ) ; METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network network = new TYPE_1 . Network ( ) ; network . setId ( VAR_1 ) ; network . METHOD_2 ( new TYPE_2 ( ) ) ; network . METHOD_3 ( ) . setId ( VAR_2 ) ; TYPE_3 . METHOD_4 ( METHOD_5 ( ) , network ) ; assertEquals ( VAR_3 , network . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( METHOD_3 ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_6 ( getParameters ( ) . METHOD_4 ( ) ) ; getReturnValue ( ) . METHOD_7 ( true ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_5 . METHOD_3 ( ) ) ) . thenReturn ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_6 . METHOD_3 ( ) ) ) . thenReturn ( VAR_6 ) ; TYPE_3 . METHOD_4 ( validator . METHOD_5 ( VAR_1 . getId ( ) ) , TYPE_4 . METHOD_6 ( VAR_7 ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , null ) ; METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_5 = dao . METHOD_3 ( false ) ; TYPE_1 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_6 ) ) ; TYPE_1 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_7 ) ) ; TYPE_1 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_1 ) ) ; TYPE_1 . METHOD_6 ( VAR_5 . METHOD_5 ( VAR_8 ) ) ; } 
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } if ( METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) { return METHOD_4 ( VAR_1 ) ; } TYPE_1 VAR_2 = new TYPE_1 ( ) ; return validate ( VAR_2 . METHOD_5 ( getParameters ( ) . METHOD_6 ( ) , METHOD_1 ( ) , getParameters ( ) . METHOD_7 ( ) , true ) ) ; } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 storageDomain : VAR_1 ) { if ( ( storageDomain . METHOD_1 ( ) ) == ( VAR_3 ) ) { VAR_2 . add ( storageDomain ) ; } } return VAR_2 ; } return new java.util.ArrayList < TYPE_1 > ( ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , true ) ; TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , true ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; METHOD_5 ( false , VAR_2 . METHOD_6 ( ) , 1 , VAR_1 ) ; METHOD_5 ( true , VAR_2 . METHOD_6 ( ) , 2 , 1 , VAR_1 ) ; METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_2 , VAR_3 ) , 1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; VAR_3 = VAR_2 . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_4 = dao . get ( new TYPE_1 ( VAR_5 , VAR_3 . getId ( ) ) ) ; VAR_6 = new TYPE_2 ( VAR_7 , VAR_3 . getId ( ) , VAR_8 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( VAR_2 == null ) { VAR_2 = new java.util.HashMap < > ( ) ; VAR_3 . put ( VAR_1 . METHOD_2 ( ) , VAR_2 ) ; } VAR_2 . put ( VAR_1 . METHOD_3 ( ) , TYPE_2 . getValue ( VAR_1 ) ) ; } 
public static java.lang.String METHOD_1 ( java.lang.String source ) throws TYPE_1 { if ( ( source == null ) || ( ( source . METHOD_2 ( ) . length ( ) ) == 0 ) ) { return STRING_1 ; } else { TYPE_2 VAR_1 = TYPE_2 . getInstance ( STRING_2 ) ; VAR_1 . METHOD_3 ( VAR_2 , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ; return new java.lang.String ( VAR_1 . METHOD_6 ( new TYPE_4 ( ) . METHOD_7 ( source ) ) , TYPE_5 . METHOD_8 ( STRING_3 ) ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_3 ( ) , aQuery ) ; } 
public void METHOD_1 ( ) { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . METHOD_8 ( ) ) ; } 
private java.util.List < TYPE_1 . DiskImage > METHOD_1 ( int VAR_1 ) { java.util.List < TYPE_1 . DiskImage > VAR_2 = new java.util.ArrayList < > ( VAR_1 ) ; for ( int VAR_3 = 0 ; VAR_3 < VAR_1 ; VAR_3 ++ ) { TYPE_1 . DiskImage image = METHOD_2 ( VAR_4 ) ; VAR_2 . add ( image ) ; } org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_4 ( ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { if ( ( getWindow ( ) ) != null ) { return ; } TYPE_1 VAR_1 = new TYPE_1 ( this ) ; VAR_1 . setEntity ( ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > ) ( getSelectedItem ( ) ) ) . METHOD_2 ( ) ) ; METHOD_3 ( VAR_1 ) ; } 
private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.common.businessentities . Network network ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_2 ( VAR_1 , network . METHOD_3 ( ) , network . getName ( ) ) ; nic . METHOD_4 ( network . METHOD_5 ( ) ) ; nic . METHOD_6 ( network . METHOD_7 ( ) ) ; return nic ; } 
public TYPE_1 list ( ) { if ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ) { return METHOD_3 ( METHOD_4 ( VAR_2 , new TYPE_3 ( VAR_3 , METHOD_5 ( VAR_3 ) ) ) ) ; } else { return METHOD_3 ( METHOD_4 ( VAR_4 , new TYPE_4 ( this . VAR_3 ) ) ) ; } } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 < org.ovirt.engine.core.common.businessentities.VDSGroup > ( VAR_2 , METHOD_2 ( ) , METHOD_3 ( ) , VAR_3 , VAR_4 ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_5 = new TYPE_2 < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) { public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDSGroup object ) { return object . getName ( ) ; } } ; VAR_1 . addColumn ( VAR_5 , VAR_6 . METHOD_4 ( ) ) ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , false , true , true , true , true , true , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { ( ( TYPE_2 ) ( model ) ) . setItems ( ( ( TYPE_3 ) ( returnValue ) ) ) ; } } ) , METHOD_3 ( ) ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( ( vm . METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; } 
protected static java.lang.String METHOD_1 ( TYPE_1 . AuditLogType VAR_1 ) { final java.lang.String VAR_2 = VAR_1 . name ( ) ; try { return VAR_3 . getString ( VAR_2 ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( STRING_1 , VAR_2 , TYPE_2 . METHOD_2 ( ) ) ; return null ; } } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.lang.String VAR_3 ) { TYPE_2 result = METHOD_2 ( VAR_4 , new TYPE_3 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , null , false ) ) ; return result . getSucceeded ( ) ? ( ( TYPE_1 ) ( result . getReturnValue ( ) ) ) : null ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) throws TYPE_4 { final TYPE_5 VAR_2 = new TYPE_5 ( VAR_1 ) ; this . VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; this . METHOD_3 ( ) . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; METHOD_7 ( VAR_1 , VAR_2 ) ; return VAR_2 ; } 
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( STRING_1 + ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) ; TYPE_1 . getInstance ( ) . METHOD_5 ( this , STRING_2 , new TYPE_2 < ? > [ ] { } , new java.lang.Object [ ] { } , VAR_2 < java.lang.String > METHOD_6 ( VAR_3 ) ) ; VAR_1 . METHOD_2 ( ( STRING_3 + ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; TYPE_2 . getInstance ( ) . METHOD_4 ( this , VAR_4 , new TYPE_3 [ ] { } , new java.lang.Object [ ] { } , 0 , VAR_5 < java.lang.Integer > METHOD_5 ( VAR_6 ) , VAR_7 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; } 
public void METHOD_1 ( ) { if ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; java.lang.Integer VAR_4 = VAR_1 < java.lang.Integer > getValue ( VAR_5 ) ; TYPE_1 . get ( VAR_6 class ) . METHOD_3 ( this , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_4 , VAR_4 , VAR_7 ) ; VAR_3 . METHOD_2 ( STRING_3 ) ; } } 
private static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid vmId , TYPE_2 type , java.lang.String VAR_2 , boolean VAR_3 ) { return new TYPE_1 ( new TYPE_3 ( VAR_1 , vmId ) , type , VAR_2 , STRING_1 , 0 , TYPE_4 . METHOD_2 ( ) , VAR_3 , true , false , STRING_1 , TYPE_4 . METHOD_2 ( ) , null , null ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { switch ( METHOD_2 ( ) . METHOD_3 ( ) ) { case VAR_2 : return null ; case VAR_3 : VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) ; break ; case VAR_4 : VAR_1 = METHOD_6 ( ) . METHOD_7 ( ) ; break ; default : VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) ; VAR_1 . METHOD_8 ( METHOD_6 ( ) . METHOD_7 ( ) ) ; break ; } } return VAR_1 ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { final TYPE_1 VAR_1 = ( ( TYPE_1 ) ( result ) ) ; VAR_2 . METHOD_2 ( ) . setItems ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; VAR_2 . METHOD_2 ( ) . setSelectedItem ( VAR_1 ) ; } 
private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 , TYPE_1 < ? > VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 != null ) { switch ( VAR_3 . METHOD_3 ( ) ) { case VAR_4 : case VAR_5 : return false ; case VAR_6 : case VAR_7 : case VAR_8 : VAR_2 . METHOD_4 ( VAR_9 ) ; return true ; case VAR_10 : VAR_2 . METHOD_4 ( VAR_11 ) ; return true ; } } return false ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { final java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; if ( VAR_3 . isEmpty ( ) ) { return true ; } if ( VAR_2 ) { METHOD_3 ( ) . METHOD_1 ( VAR_1 . getId ( ) ) ; } return METHOD_4 ( VAR_3 , METHOD_5 ( ) , false ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ! ( METHOD_2 ( ) ) ) { VAR_1 = false ; getModel ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( ) ) ; } METHOD_5 ( false ) ; getModel ( ) . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; org.mockito.Mockito.when ( METHOD_3 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_4 ) ; METHOD_5 ( ) . METHOD_6 ( ) ; java.lang.String result = ( ( java.lang.String ) ( METHOD_5 ( ) . METHOD_7 ( ) . getReturnValue ( ) ) ) ; TYPE_1 . METHOD_8 ( ( STRING_1 + result ) , result . equals ( VAR_3 ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 params ) { TYPE_4 < TYPE_1 > VAR_2 = TYPE_5 . METHOD_2 ( VAR_3 , params , TYPE_6 . METHOD_3 ( ) ) ; try { return VAR_2 . get ( ) ; } catch ( TYPE_7 | TYPE_8 e ) { e . METHOD_4 ( ) ; log . error ( STRING_1 ) ; } return null ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 < java.lang.Boolean > METHOD_3 ( VAR_2 , STRING_1 ) ) ; TYPE_1 . METHOD_4 ( VAR_1 < java.lang.Boolean > METHOD_3 ( VAR_2 , STRING_2 ) ) ; TYPE_1 . METHOD_4 ( VAR_1 < java.lang.Boolean > METHOD_3 ( VAR_2 , STRING_3 ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , vds . getId ( ) , vds . METHOD_3 ( ) ) ; TYPE_1 params = new TYPE_1 ( vds . getId ( ) , VAR_2 ) ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_3 , params , TYPE_3 . METHOD_5 ( ) ) ; METHOD_6 ( vds ) ; } 
public static org.ovirt.engine.core.common.businessentities.StorageDomain map ( TYPE_1 model , TYPE_2 . StorageDomain template ) { TYPE_2 . StorageDomain entity = ( template != null ) ? template : new TYPE_2 . StorageDomain ( ) ; entity . METHOD_1 ( model . getId ( ) ) ; if ( model . METHOD_2 ( ) ) { TYPE_3 VAR_1 = TYPE_3 . METHOD_3 ( model . METHOD_4 ( ) ) ; if ( VAR_1 != null ) { entity . METHOD_5 ( TYPE_4 . map ( VAR_1 , null ) ) ; } } return entity ; } 
public TYPE_1 < TYPE_2 , org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_3 > > METHOD_1 ( final TYPE_4 VAR_1 , final TYPE_5 < TYPE_6 > VAR_2 , final TYPE_5 < TYPE_2 > VAR_3 , final TYPE_5 < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_3 > > VAR_4 ) { TYPE_1 < TYPE_2 , org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_3 > > result = new TYPE_1 < TYPE_2 , org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_3 > > ( VAR_1 , VAR_2 ) ; result . METHOD_2 ( VAR_3 ) ; result . METHOD_3 ( VAR_4 ) ; return result ; } 
private TYPE_1 METHOD_1 ( final TYPE_2 < ? > command , final TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = command . METHOD_2 ( ) ; TYPE_1 result = TYPE_5 . METHOD_3 ( VAR_3 . log ) . METHOD_4 ( command , ( VAR_1 != null ? VAR_1 . METHOD_5 ( ) : null ) ) ; METHOD_6 ( command , result ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_7 ( result ) ; } return result ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 ; if ( ( ( ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_4 ) ) ) { VAR_2 = VAR_3 ; } else if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_5 ) ) { VAR_2 = VAR_4 ; } else { VAR_2 = VAR_5 ; } return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 < TYPE_2 , java.lang.Integer > VAR_1 = new TYPE_1 < TYPE_2 , java.lang.Integer > ( ) { protected java.lang.String METHOD_2 ( ) { return STRING_1 ; } } ; VAR_1 . setItems ( TYPE_3 . METHOD_3 ( 1 , 2 , INT_1 ) ) ; VAR_1 . setSelectedItem ( 2 ) ; VAR_1 . setItems ( TYPE_3 . METHOD_3 ( 1 , 2 ) ) ; TYPE_4 . assertEquals ( ( ( java.lang.Integer ) ( 2 ) ) , VAR_1 . getSelectedItem ( ) ) ; } 
protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 ) { TYPE_2 VAR_4 = null ; if ( VAR_2 != null ) { VAR_4 = TYPE_3 . METHOD_2 ( ) . get ( VAR_2 ) ; if ( VAR_4 != null ) { if ( ( ( VAR_4 . METHOD_3 ( ) ) == ( VAR_5 ) ) || ( ( VAR_4 . METHOD_3 ( ) ) == ( VAR_6 ) ) ) { VAR_1 . add ( new TYPE_1 ( VAR_3 , VAR_7 , VAR_8 ) ) ; } } } } 
public void METHOD_1 ( TYPE_1 result ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ; TYPE_3 VAR_2 = result . getReturnValue ( ) ; org.ovirt.engine.core.compat.Guid Guid = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( Guid ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . add ( STRING_1 ) ; METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; METHOD_5 ( 0 ) ; METHOD_6 ( ) ; VAR_2 . METHOD_7 ( ) ; TYPE_1 . VM vm = resource . get ( ) ; METHOD_8 ( vm . METHOD_9 ( ) ) ; METHOD_10 ( vm , 0 ) ; } finally { VAR_1 . METHOD_11 ( ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( VAR_1 == ( TYPE_1 . VM ) ) ? true : false ; TYPE_2 tempVar = new TYPE_2 ( ) ; tempVar . METHOD_3 ( METHOD_4 ( ) ) ; tempVar . METHOD_5 ( VAR_1 ) ; tempVar . METHOD_6 ( VAR_2 ) ; tempVar . METHOD_7 ( TYPE_3 . METHOD_8 ( ) ) ; tempVar . METHOD_9 ( METHOD_10 ( ) ) ; super . METHOD_1 ( VAR_3 , tempVar ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( ( METHOD_2 ( ) . getEntity ( ) ) != null ) && ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) { METHOD_3 ( ) . setIsChangable ( true ) ; METHOD_4 ( ) . setIsChangable ( true ) ; } else { METHOD_3 ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; } } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( returnValue ) ) ; if ( ! VAR_1 ) { model . METHOD_1 ( ) . METHOD_2 ( ) ; model . getName ( ) . METHOD_1 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ; model . getName ( ) . METHOD_4 ( false ) ; model . METHOD_4 ( false ) ; model . METHOD_5 ( ) ; } else { METHOD_6 ( vm ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 2 ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , true , true ) ) ; METHOD_5 ( VAR_4 . METHOD_6 ( VAR_3 [ 0 ] . toString ( ) ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = null ; final org.ovirt.engine.core.compat.Guid VAR_2 = null ; VAR_1 . METHOD_2 ( vds ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_3 = VAR_1 . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( VAR_3 ) ; } 
private java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . getValue ( ) ; java.util.Map < java.lang.String , java.lang.String > VAR_4 = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ; TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) ; return VAR_4 ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VM entity ) { TYPE_2 < java.lang.String > VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_1 , model ) ; if ( VAR_1 . METHOD_4 ( STRING_1 ) ) { METHOD_5 ( model , entity ) ; } TYPE_4 . METHOD_6 ( this , model ) ; TYPE_4 . METHOD_7 ( this , model ) ; TYPE_5 . METHOD_8 ( model , this ) ; return model ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . add ( STRING_1 ) ) ; TYPE_1 . METHOD_2 ( VAR_1 . add ( STRING_2 ) ) ; TYPE_1 . METHOD_3 ( METHOD_4 ( ) , new java.lang.String [ ] { STRING_1 , STRING_2 } ) ; TYPE_1 . assertEquals ( VAR_1 . METHOD_5 ( ) , 0 ) ; TYPE_1 . assertEquals ( VAR_1 . size ( ) , 2 ) ; TYPE_1 . METHOD_6 ( VAR_1 . isEmpty ( ) ) ; TYPE_1 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : STRING_1 ; } } ; TYPE_1 parameters = new TYPE_1 ( VAR_1 ) ; parameters . METHOD_2 ( VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , parameters , aQuery ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 < TYPE_3 > VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_4 ) ; for ( TYPE_3 VAR_5 : VAR_2 ) { VAR_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , VAR_5 . METHOD_5 ( ) ) ; } if ( VAR_3 . METHOD_6 ( ) ) { return VAR_3 ; } else { throw new TYPE_5 ( VAR_6 ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( INT_1 ) ; disk . METHOD_3 ( VAR_1 ) ; disk . METHOD_4 ( STRING_1 ) ; METHOD_5 ( disk , TYPE_2 . METHOD_6 ( VAR_1 . METHOD_7 ( 0 , VAR_2 ) ) ) ; } 
private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( VAR_1 , vm . getId ( ) ) , VAR_2 , STRING_1 , STRING_2 , 1 , new java.util.HashMap < > ( ) , true , true , true , STRING_3 , new java.util.HashMap < > ( ) , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_4 ) ; } 
protected void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) { org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; if ( ! VAR_1 ) { VAR_4 . METHOD_5 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) ; } org.mockito.Mockito.when ( VAR_5 . METHOD_6 ( TYPE_4 . any ( VAR_6 class ) , TYPE_4 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_4 ) ; } 
public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int result = 1 ; result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( id ) == null ? 0 : id . METHOD_1 ( ) ) ; return result ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { super . METHOD_1 ( VAR_1 , sender , args ) ; if ( METHOD_2 ( ) . equals ( sender ) ) { METHOD_3 ( ) ; } else if ( METHOD_4 ( ) . equals ( sender ) ) { METHOD_5 ( ) ; } else if ( METHOD_6 ( ) . equals ( sender ) ) { METHOD_7 ( ) ; } else if ( METHOD_8 ( ) . equals ( sender ) ) { METHOD_9 ( ) ; } } 
private void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_4 ( ) . METHOD_5 ( ( ( VAR_1 . size ( ) ) == 1 ) ) ; } 
public static TYPE_1 < TYPE_2 > METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 < TYPE_3 > VAR_2 ) { java.util.List < TYPE_2 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 VAR_4 : VAR_2 ) { VAR_3 . add ( TYPE_4 . METHOD_2 ( VAR_1 , VAR_4 ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , null ) ; VAR_1 . METHOD_3 ( false ) ; cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) , null ) ) ; METHOD_6 ( cmd , VAR_4 ) ; TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ; } 
public static TYPE_1 . DiskImage METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 . DiskImage image = new TYPE_1 . DiskImage ( ) ; image . METHOD_2 ( VAR_2 ) ; image . METHOD_3 ( VAR_3 ) ; image . METHOD_4 ( VAR_4 ) ; image . METHOD_5 ( VAR_5 ) ; image . METHOD_6 ( VAR_1 ) ; return image ; } 
public boolean METHOD_1 ( TYPE_1 source ) { if ( ( ( source . METHOD_2 ( ) ) == null ) || ( ( source . METHOD_3 ( ) ) == null ) ) { return false ; } return ( source . METHOD_2 ( ) . getId ( ) . equals ( VAR_1 ) ) && ( source . METHOD_3 ( ) . getId ( ) . equals ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; org.mockito.Mockito.when ( cmd . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) ; TYPE_3 . METHOD_8 ( cmd , VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 . getId ( ) ) . addValue ( STRING_3 , VAR_2 . getId ( ) ) . addValue ( STRING_4 , VAR_2 . METHOD_5 ( ) ) . addValue ( STRING_5 , VAR_2 . METHOD_6 ( ) ) . addValue ( STRING_6 , TYPE_2 . METHOD_7 ( VAR_2 . getStatus ( ) ) ) ) ; } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_1 , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.compat.Guid VAR_3 : VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ; if ( storageDomain != null ) { list . add ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ) ; } } return list ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , false ) ; cmd . METHOD_5 ( ) ; TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ; } 
public int METHOD_1 ( TYPE_1 type , TYPE_2 VAR_1 ) { int VAR_2 = 0 ; for ( TYPE_3 e : VAR_3 ) { if ( ( ( e . METHOD_2 ( ) ) == type ) && ( ( e . METHOD_3 ( ) ) == VAR_1 ) ) { VAR_2 ++ ; } } return VAR_2 ; } 
public boolean METHOD_1 ( TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > event ) { TYPE_2 VAR_1 = event . METHOD_2 ( ) ; if ( ! ( STRING_1 . equals ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) { return false ; } TYPE_3 target = VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ; return STRING_2 . equals ( target . METHOD_7 ( ) . METHOD_4 ( ) ) ; } 
protected org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( TYPE_1 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_3 = VAR_1 . METHOD_3 ( ) ; org.ovirt.engine.core.compat.Guid vmId = VAR_1 . METHOD_4 ( ) ; org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage . METHOD_5 ( vmId ) ; diskImage . setId ( VAR_2 ) ; diskImage . METHOD_6 ( VAR_3 ) ; return diskImage ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) ; if ( ( ( METHOD_4 ( ) ) != null ) && ( ! ( METHOD_4 ( ) . getId ( ) . equals ( VAR_1 ) ) ) ) { org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( METHOD_4 ( ) . getId ( ) ) ; METHOD_6 ( null ) ; } } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = model . getVm ( ) ; if ( vm == null ) { return ; } boolean VAR_1 = TYPE_1 . METHOD_2 ( vm ) ; VAR_2 . METHOD_3 ( ( VAR_1 && ( vm . METHOD_4 ( ) ) ) ) ; if ( ! ( VAR_2 . METHOD_5 ( ) ) ) { model . METHOD_6 ( ) . setEntity ( false ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } } ; TYPE_2 params = new TYPE_2 ( id ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; } 
private static java.util.List < org.ovirt.engine.core.compat.Guid > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ; for ( TYPE_1 storageDomain : VAR_1 ) { VAR_2 . add ( storageDomain . getId ( ) ) ; } return VAR_2 ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > models = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; models . add ( VAR_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; models . add ( VAR_2 ) ; TYPE_4 . METHOD_2 ( VAR_3 , models ) ; return models ; } 
protected boolean METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , false ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 ) ; return ( validate ( VAR_2 . METHOD_6 ( ) ) ) && ( TYPE_1 . METHOD_7 ( TYPE_2 . getReturnValue ( ) . METHOD_8 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , true , true , true , VAR_1 ) ) ; } 
protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity ( ) ) ) ; super . METHOD_1 ( VAR_1 , new TYPE_1 ( template . getId ( ) ) ) ; } 
private boolean METHOD_1 ( ) { return ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) || ( ! ( TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getVm ( ) . getStatus ( ) ) ) ) ) || ( ! ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) , TYPE_1 . getParameters ( ) ) ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; for ( org.ovirt.engine.ui.uicommonweb.models.EntityModel a : METHOD_2 ( ) ) { if ( a . METHOD_3 ( ) ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( a . getEntity ( ) ) ) ; VAR_1 += VAR_2 . toString ( ) ; } } return TYPE_1 . valueOf ( VAR_1 ) ; } 
public static java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . Network > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . Network > VAR_2 = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities . Network > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { VAR_2 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) ; } return VAR_2 ; } else { return TYPE_1 . METHOD_3 ( ) ; } } 
protected void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; if ( VAR_1 <= 0 ) { METHOD_3 ( VAR_2 ) ; METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( true ) ; } else { METHOD_3 ( VAR_3 ) ; TYPE_1 . METHOD_5 ( METHOD_6 ( METHOD_2 ( ) ) ) ; } } 
private void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . DiskImage > VAR_1 = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . DiskImage > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ; METHOD_4 ( ) . METHOD_5 ( ( ( ( VAR_1 . size ( ) ) > 0 ) && ( METHOD_6 ( VAR_1 ) ) ) ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.Integer > VAR_3 = METHOD_3 ( VAR_4 . METHOD_4 ( cluster , hosts , VAR_5 , null ) ) ; TYPE_2 . assertEquals ( ( ( java.lang.Integer ) ( 1 ) ) , VAR_3 . get ( VAR_1 . getId ( ) ) ) ; TYPE_2 . assertEquals ( ( ( java.lang.Integer ) ( 1 ) ) , VAR_3 . get ( VAR_2 . getId ( ) ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd , false ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) , TYPE_2 . any ( VAR_5 . IdQueryParameters class ) ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_2 ) . getReturnValue ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( command , VAR_4 ) ; } 
public final TYPE_1 getValue ( TYPE_2 object ) { java.lang.Integer VAR_1 = METHOD_1 ( object ) ; int VAR_2 = ( VAR_1 != null ) ? VAR_1 : 0 ; java.lang.String VAR_3 = METHOD_2 ( object ) ; java.lang.String VAR_4 = ( VAR_2 < INT_1 ) ? STRING_1 : VAR_2 < INT_2 ? STRING_2 : STRING_3 ; return TYPE_3 . instance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 ) ; } 
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; return TYPE_1 . METHOD_1 ( list , VAR_1 , VAR_2 ) ; } 
public TYPE_1 add ( TYPE_2 event ) { METHOD_1 ( event , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; METHOD_2 ( VAR_1 class , event ) ; return METHOD_3 ( VAR_2 , new TYPE_3 ( map ( event ) ) , new TYPE_4 < TYPE_5 > ( VAR_3 , VAR_4 class ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) != ( VAR_2 ) ) { return ; } boolean VAR_3 = ( ( java.lang.Boolean ) ( TYPE_1 . getInstance ( ) . METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . getValue ( ) ) ) ) ; METHOD_5 ( ) . setEntity ( VAR_3 ) ; METHOD_6 ( ( ! VAR_3 ? VAR_5 . METHOD_7 ( ) : STRING_1 ) ) ; METHOD_8 ( ) . setEntity ( ( ! VAR_3 ) ) ; } 
public TYPE_1 . AuditLogType METHOD_1 ( ) { switch ( TYPE_2 . METHOD_2 ( ) ) { case VAR_1 : if ( ! ( getParameters ( ) . METHOD_3 ( ) ) ) { return VAR_2 ; } if ( ( ( getParameters ( ) . METHOD_4 ( ) ) == 0 ) && ( TYPE_2 . getSucceeded ( ) ) ) { return VAR_3 ; } break ; case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_2 ; } return VAR_7 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.ArrayList < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( INT_1 , null ) ; TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ; for ( java.lang.String model : TYPE_3 . METHOD_4 ( STRING_1 ) ) { TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( model . METHOD_6 ( ) ) ) ; } } 
private void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( true ) ; METHOD_2 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) ; METHOD_5 ( ) . METHOD_3 ( true ) ; METHOD_5 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 from ) { from . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; VAR_2 . setId ( from . getId ( ) ) ; from . METHOD_4 ( ) ; from . METHOD_5 ( ) . add ( VAR_2 ) ; return from ; } 
protected boolean validate ( ) { super . validate ( ) ; getName ( ) . METHOD_1 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( ) } ) ; METHOD_2 ( ( ( METHOD_3 ( ) ) && ( getName ( ) . METHOD_3 ( ) ) ) ) ; return METHOD_3 ( ) ; } 
protected void METHOD_1 ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < TYPE_1 . DiskImage > > VAR_1 = VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; super . METHOD_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_2 . METHOD_4 ( VAR_1 , VAR_3 ) ; } 
public void onSuccess ( java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = METHOD_1 ( ) ; VAR_1 . setItems ( hosts ) ; VAR_1 . METHOD_2 ( true ) ; METHOD_3 ( true ) ; METHOD_4 ( ) . METHOD_2 ( true ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) { METHOD_3 ( ) ; } if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) { METHOD_4 ( ) ; } if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_3 ) ) { METHOD_5 ( ) ; } if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_4 ) ) { METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 0 , true ) ; VAR_1 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_2 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 . Network > ( ) , null ) ; VAR_4 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { return ( ( ! ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( vm . METHOD_4 ( ) ) ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( vm . METHOD_5 ( ) ) ) ) ; } 
private void METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.util.List < java.lang.String > VAR_2 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { addCanDoActionMessage ( VAR_3 ) ; TYPE_1 . getReturnValue ( ) . METHOD_2 ( ) . add ( java.lang.String . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( VAR_2 , STRING_2 ) ) ) ; TYPE_1 . getReturnValue ( ) . METHOD_2 ( ) . add ( java.lang.String . METHOD_3 ( STRING_3 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_2 ) ) ) ; } } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( ) ; TYPE_2 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 < TYPE_4 > ( ) { public void METHOD_5 ( TYPE_5 < ? extends TYPE_4 > VAR_2 , java.lang.Object sender , TYPE_4 args ) { METHOD_6 ( ) ; } } ) ; METHOD_7 ( VAR_1 ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { org.ovirt.engine.core.compat.Guid VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { log . error ( STRING_1 , VAR_2 , VAR_1 , METHOD_3 ( ) ) ; return ; } TYPE_2 . DiskImage VAR_4 = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ; VAR_4 . METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_3 = VAR_2 . get ( STRING_1 ) ; VAR_4 = dao . get ( new TYPE_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) ) ; VAR_5 = new TYPE_4 ( VAR_6 , VAR_3 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( cmd . METHOD_7 ( ) ) ; org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( VAR_3 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_10 ( ) ) . METHOD_11 ( TYPE_1 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( null ) ; METHOD_3 ( ) ; if ( ( getVm ( ) ) != null ) { TYPE_1 . METHOD_4 ( getVm ( ) . getId ( ) ) ; METHOD_5 ( ) ; } else { METHOD_6 ( false ) ; VAR_1 . METHOD_7 ( STRING_1 ) ; } METHOD_8 ( true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; VAR_3 = METHOD_3 ( true ) ; VAR_4 = METHOD_3 ( true ) ; VAR_5 = METHOD_3 ( false ) ; VAR_5 . METHOD_4 ( VAR_2 ) ; VAR_5 . METHOD_5 ( false ) ; VAR_6 = METHOD_3 ( false ) ; VAR_6 . METHOD_4 ( VAR_2 ) ; VAR_6 . METHOD_5 ( false ) ; METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; try { VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) ; } catch ( TYPE_3 e ) { e . METHOD_2 ( ) ; } TYPE_4 . METHOD_3 ( VAR_1 ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; } 
protected void METHOD_1 ( TYPE_1 . Network model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) ) ; assertEquals ( model . METHOD_4 ( ) , true ) ; METHOD_2 ( model . METHOD_5 ( ) ) ; METHOD_6 ( model . METHOD_7 ( ) . METHOD_7 ( ) ) ; METHOD_2 ( model . METHOD_7 ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_2 . name ( ) ) ) ; METHOD_2 ( model . METHOD_9 ( ) ) ; assertEquals ( model . METHOD_10 ( ) , true ) ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = null ; java.lang.String VAR_3 = VAR_1 . METHOD_2 ( VAR_4 ) ; if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_3 ( TYPE_2 ) ) ) { VAR_2 = VAR_3 . METHOD_4 ( STRING_1 . length ( ) ) . METHOD_5 ( ) ; } return VAR_2 ; } 
private void METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( pool ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . get ( VAR_5 , VAR_6 . String class ) , VAR_1 . get ( VAR_7 , VAR_6 . Integer class , VAR_8 ) ) ) . METHOD_2 ( VAR_9 , VAR_10 ) . METHOD_2 ( VAR_11 , VAR_12 ) ; } 
public void METHOD_1 ( final TYPE_1 < TYPE_2 . VdcActionType , TYPE_3 > VAR_1 , final TYPE_4 VAR_2 ) { if ( METHOD_2 ( VAR_2 ) ) { return ; } VAR_3 . log ( VAR_4 , ( STRING_1 + VAR_2 ) , VAR_2 ) ; METHOD_3 ( ) . METHOD_4 ( null ) ; METHOD_5 ( VAR_2 ) ; METHOD_6 ( ) ; if ( VAR_5 . METHOD_7 ( ) ) { METHOD_8 ( null ) ; VAR_5 . METHOD_9 ( ) . onSuccess ( VAR_5 . getModel ( ) , null ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 < org.ovirt.engine.core.compat.Guid , TYPE_1 > VAR_1 ) { if ( ( VAR_1 . getValue ( ) ) == null ) { VAR_1 . METHOD_2 ( new TYPE_1 ( METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ) ) ; } return VAR_1 . getValue ( ) ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_2 ( VAR_6 ) ; TYPE_1 < TYPE_2 > command = org.mockito.Mockito . METHOD_3 ( new TYPE_1 < TYPE_2 > ( VAR_1 , TYPE_3 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) { protected void METHOD_6 ( ) { } protected void METHOD_7 ( ) { } } ) ; return command ; } 
private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( VAR_1 ) ; command = new TYPE_2 ( params ) ; command . METHOD_3 ( VAR_2 ) ; command = org.mockito.Mockito . METHOD_4 ( command ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_5 ( TYPE_3 . any ( VAR_4 . VDS class ) , TYPE_3 . any ( VAR_5 class ) ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_6 ( ) ; command . METHOD_7 ( VAR_7 ) ; } 
public java.lang.String METHOD_1 ( java.lang.Object [ ] VAR_1 ) { java.lang.Object entity = VAR_1 [ 0 ] ; org.ovirt.engine.core.compat.Guid VAR_2 = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_1 [ 1 ] ) ) ; if ( TYPE_1 . METHOD_2 ( entity ) . equals ( VAR_2 ) ) { return STRING_1 ; } java.lang.String VAR_3 = ( ( java.lang.String ) ( VAR_1 [ 2 ] ) ) ; return VAR_3 ; } 
private void METHOD_1 ( ) { final java.util.Map < java.lang.Integer , java.lang.String > VAR_1 = TYPE_1 . getInstance ( ) . get ( VAR_2 class ) . METHOD_2 ( ) ; for ( TYPE_2 < java.lang.Integer , java.lang.String > VAR_3 : VAR_1 . METHOD_3 ( ) ) { final TYPE_3 VAR_4 = TYPE_4 . METHOD_4 ( VAR_3 . getValue ( ) ) ; if ( VAR_4 != null ) { VAR_5 . put ( VAR_3 . METHOD_5 ( ) , VAR_4 ) ; } } } 
public static org.ovirt.engine.core.common.businessentities.network.Network METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return null ; } org.ovirt.engine.core.common.businessentities.network.Network VAR_2 = null ; if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( VAR_1 . METHOD_2 ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; TYPE_1 VAR_2 = TYPE_2 . getModel ( 2 ) ; VAR_2 . METHOD_5 ( ) . METHOD_6 ( null ) ; try { VAR_3 . add ( VAR_2 ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 e ) { METHOD_8 ( e . METHOD_9 ( ) ) ; assertEquals ( INT_1 , e . METHOD_9 ( ) . getStatus ( ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { java.util.List < TYPE_2 > VAR_3 = VAR_2 . METHOD_2 ( ) ; if ( VAR_3 == null ) { VAR_4 . METHOD_3 ( ( STRING_1 + STRING_2 ) , VAR_2 . getName ( ) ) ; return ; } METHOD_4 ( VAR_1 , VAR_3 ) ; METHOD_5 ( VAR_1 , VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( METHOD_5 ( ) ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( METHOD_5 ( ) . METHOD_7 ( ) . get ( VAR_1 . METHOD_8 ( ) ) ) . thenReturn ( VAR_1 ) ; TYPE_2 . METHOD_9 ( METHOD_5 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; VAR_3 = ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; VAR_2 . METHOD_2 ( VAR_4 ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 domain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ; if ( ( domain != null ) && ( ( domain . METHOD_5 ( ) ) == ( VAR_1 ) ) ) { return true ; } return false ; } 
private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( char VAR_3 : TYPE_2 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( ( VAR_4 . METHOD_4 ( VAR_3 ) ) != ( - 1 ) ) { VAR_2 . append ( VAR_3 ) ; } } VAR_1 = VAR_2 . toString ( ) ; } return VAR_1 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( ) , aQuery ) ; } 
protected boolean METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 . getId ( ) ) ; boolean VAR_3 = false ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : VAR_1 ) { if ( cluster . getId ( ) . equals ( TYPE_1 . METHOD_4 ( VAR_4 ) ) ) { VAR_3 = true ; break ; } } return VAR_3 ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , java.lang.String VAR_3 , TYPE_1 VAR_4 ) { TYPE_2 tempVar = new TYPE_2 ( ) ; tempVar . METHOD_2 ( VAR_1 ) ; tempVar . METHOD_3 ( VAR_2 ) ; TYPE_2 VAR_5 = new TYPE_2 ( ) ; VAR_5 . METHOD_2 ( VAR_3 ) ; VAR_5 . METHOD_3 ( VAR_4 ) ; java.util.ArrayList < TYPE_2 > VAR_6 = new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_4 ( new TYPE_2 [ ] { tempVar , VAR_5 } ) ) ; METHOD_5 ( ) . add ( VAR_6 ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( false ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( ( VAR_1 ? true : false ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( org.mockito.Mockito . METHOD_4 ( VAR_5 ) , TYPE_2 . any ( VAR_6 class ) ) ) . thenReturn ( VAR_2 ) . thenReturn ( VAR_3 ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = METHOD_2 ( ) ; org.ovirt.engine.core.common.businessentities . Network VAR_3 = METHOD_3 ( VAR_2 , null , VAR_1 ) ; if ( VAR_3 != null ) { return VAR_3 . getId ( ) . toString ( ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; } 
public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { int VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; if ( VAR_3 != 0 ) { return VAR_3 ; } return VAR_1 . METHOD_4 ( ) . getName ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) . getName ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 template = new TYPE_1 ( ) ; template . setId ( VAR_1 ) ; template . METHOD_2 ( new TYPE_2 . StorageDomain ( ) ) ; template . METHOD_3 ( ) . setId ( VAR_2 ) ; template = TYPE_3 . METHOD_4 ( METHOD_5 ( ) , template ) ; assertEquals ( VAR_3 , template . METHOD_6 ( ) ) ; assertEquals ( VAR_4 , template . METHOD_3 ( ) . METHOD_6 ( ) ) ; } 
public static boolean METHOD_1 ( final org.ovirt.engine.core.compat . Version VAR_1 ) { boolean result = true ; if ( ( VAR_1 == null ) || ( ! ( VAR_2 < TYPE_1 < org.ovirt.engine.core.compat . Version > > METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_1 ) ) ) ) { result = false ; } return result ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( METHOD_2 ( host ) ) { VAR_2 . add ( host ) ; } } VAR_1 . METHOD_3 ( ) . setItems ( VAR_2 ) ; METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { if ( ( getWindow ( ) ) != null ) { return ; } final TYPE_1 VAR_1 = new TYPE_1 ( this ) ; METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( ) . setItems ( TYPE_2 . METHOD_4 ( getEntity ( ) ) ) ; VAR_1 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 1 ) ) ; TYPE_2 . METHOD_4 ( VAR_1 . isEmpty ( ) ) ; dao . METHOD_5 ( VAR_2 , VAR_3 ) ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_4 . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) , null ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( command . validate ( ) ) ; } 
public static TYPE_1 map ( TYPE_2 VAR_1 , TYPE_1 template ) { TYPE_1 result = null ; if ( VAR_1 != null ) { switch ( VAR_1 ) { case VAR_2 : result = VAR_3 ; break ; case VAR_4 : result = VAR_5 ; break ; case VAR_6 : default : result = VAR_7 ; break ; } } return result ; } 
private void METHOD_1 ( TYPE_1 . VdcActionType action , TYPE_1 . VdcActionParametersBase VAR_1 ) { if ( ( METHOD_2 ( ) ) == null ) { return ; } final TYPE_2 model = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ; model . METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_1 ( action , VAR_1 , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 result ) { model . METHOD_5 ( ) ; METHOD_6 ( null ) ; } } ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( ) { public void METHOD_5 ( TYPE_2 VAR_1 , java.lang.Object sender , TYPE_3 args ) { METHOD_6 ( ) . METHOD_7 ( ( ( ( METHOD_2 ( ) . METHOD_8 ( ) ) != null ) && ( ! ( METHOD_2 ( ) . METHOD_8 ( ) . isEmpty ( ) ) ) ) ) ; } } ) ; } 
public void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 class , VAR_2 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( TYPE_2 . METHOD_4 ( ) ) ; METHOD_5 ( ) ; VAR_3 = new java.util.ArrayList < > ( ) ; VAR_4 = STRING_1 ; VAR_5 = STRING_2 ; VAR_6 = new TYPE_3 ( vm , VAR_3 , version , VAR_4 , VAR_5 ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( java.lang.String value ) { TYPE_1 . ValidationResult result = new TYPE_1 . ValidationResult ( ) ; if ( ( value != null ) && ( ( value . length ( ) ) > ( METHOD_2 ( ) ) ) ) { result . METHOD_3 ( false ) ; result . METHOD_4 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( METHOD_2 ( ) ) ) ; } return result ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( false ) ; VAR_2 = org.mockito.Mockito . METHOD_5 ( new TYPE_1 ( VAR_1 , vds , org.mockito.Mockito . METHOD_6 ( VAR_3 class ) , VAR_4 , VAR_5 , VAR_6 ) ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = new TYPE_1 . ValidationResult ( ) ; result . METHOD_2 ( false ) ; result . METHOD_3 ( ) . METHOD_4 ( ) ; result . METHOD_3 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) ; return result ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( VAR_2 . METHOD_2 ( ) ) != null ) && ( ( VAR_2 . METHOD_3 ( ) ) != null ) ) { VAR_1 . METHOD_4 ( STRING_1 , java.lang.String . METHOD_5 ( STRING_2 , new TYPE_2 ( 0 ) . METHOD_6 ( java.lang.String . METHOD_5 ( STRING_3 , VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) . METHOD_7 ( VAR_3 ) ) ) . toString ( ) ) ; } } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; } 
protected boolean METHOD_1 ( ) { if ( ! ( super . METHOD_1 ( ) ) ) { return false ; } if ( ( getParameters ( ) . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; return false ; } java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = METHOD_3 ( getParameters ( ) . METHOD_2 ( ) ) ; if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { addCanDoActionMessage ( VAR_3 ) ; return false ; } return true ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) < 0 ) ) ; TYPE_1 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) > 0 ) ) ; TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) ) == 0 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , VAR_2 . METHOD_6 ( ) ) ) . thenReturn ( VAR_2 ) ; TYPE_4 < java.lang.String , java.lang.String > VAR_4 = VAR_5 . METHOD_7 ( VAR_2 . METHOD_8 ( ) , VAR_1 ) ; TYPE_2 . METHOD_9 ( VAR_4 , VAR_1 . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { try { this . VAR_2 = new TYPE_3 ( VAR_3 , METHOD_2 ( false ) , VAR_1 ) ; this . VAR_2 . METHOD_3 ( ) ; int VAR_4 = VAR_5 ; VAR_6 . METHOD_4 ( ) ; VAR_7 = this . VAR_3 . METHOD_5 ( VAR_8 , ( VAR_4 |= VAR_9 ) , this ) ; } catch ( TYPE_4 | TYPE_5 e ) { VAR_10 . error ( STRING_1 , e ) ; throw new TYPE_2 ( e ) ; } } 
public static < TYPE_1 extends TYPE_2 < ? extends TYPE_3 . VdcActionParametersBase > > TYPE_1 METHOD_1 ( TYPE_1 instance ) { TYPE_4 type = VAR_1 . METHOD_2 ( instance . METHOD_3 ( ) ) ; TYPE_5 VAR_2 = VAR_1 . METHOD_4 ( type ) ; VAR_2 . inject ( instance , VAR_1 . METHOD_5 ( null ) ) ; VAR_2 . METHOD_6 ( instance ) ; return instance ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_3 ( VAR_4 ) ; TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) ; TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , new java.lang.Integer ( INT_1 ) ) ; } 
public static < TYPE_1 extends TYPE_2 > TYPE_3 < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.util.List < TYPE_1 > VAR_2 ) { java.util.List < java.lang.Object > VAR_3 = new java.util.ArrayList < > ( VAR_2 . size ( ) ) ; for ( TYPE_2 VAR_4 : VAR_2 ) { VAR_3 . add ( VAR_4 . getName ( ) ) ; } return TYPE_4 . METHOD_2 ( VAR_1 , VAR_3 ) ; } 
public void METHOD_1 ( final java.util.List < TYPE_1 . VdcActionType > VAR_1 , final java.util.List < TYPE_1 . VdcActionParametersBase > parameters , final java.util.List < TYPE_2 > VAR_2 , final TYPE_2 VAR_3 , final java.lang.Object VAR_4 ) { METHOD_1 ( VAR_1 , parameters , VAR_2 , VAR_3 , VAR_4 , false , null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( true ) ; TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) ; TYPE_1 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_2 . toString ( ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 ) != null ) { try { VAR_2 . METHOD_1 ( ) ; VAR_2 = null ; } catch ( TYPE_2 e ) { VAR_1 . METHOD_3 ( STRING_2 , e ) ; } } } 
private java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( VAR_2 ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_2 ( ( STRING_1 + i ) , null ) ; if ( VAR_1 != null ) { nic = METHOD_3 ( nic , VAR_1 ) ; } VAR_3 . add ( nic ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 , TYPE_3 { java.lang.String VAR_1 = STRING_1 ; TYPE_4 . doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_4 ) ) . thenReturn ( null ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_5 ) ; org.mockito.Mockito . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_1 ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( getParameters ( ) . METHOD_2 ( ) ) ; return ( ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_6 ( ) ) ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ! ( VAR_3 < java.lang.Boolean > METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) { return new TYPE_1 . ValidationResult ( VAR_5 ) ; } return VAR_6 ; } 
protected void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { METHOD_2 ( VAR_4 , VAR_5 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 [ 1 ] } , METHOD_3 ( VAR_6 [ 1 ] ) ) ; METHOD_4 ( new int [ ] { 0 } ) ; METHOD_5 ( new int [ ] { 0 } ) ; super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
protected TYPE_1 . StorageDomain METHOD_1 ( TYPE_1 . StorageDomain model , TYPE_1 . StorageDomain entity ) { if ( TYPE_2 . equals ( entity . METHOD_2 ( ) ) ) { model . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ; } else { model . METHOD_3 ( null ) ; } return super . METHOD_1 ( model , entity ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 returnValue = TYPE_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , true ) ; TYPE_3 . getReturnValue ( ) . METHOD_7 ( returnValue . METHOD_8 ( ) ) ; return returnValue . METHOD_9 ( ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface [ ] VAR_3 = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface [ ( VAR_2 . size ( ) ) + 1 ] ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_3 [ ( ( VAR_3 . length ) - 1 ) ] = VAR_1 ; METHOD_3 ( VAR_3 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( vm == null ) { return ; } TYPE_2 VAR_1 = ( ( TYPE_2 ) ( model ) ) ; VAR_1 . METHOD_1 ( vm ) ; VAR_1 . METHOD_2 ( ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 . Disk object ) { if ( ( object . METHOD_2 ( ) ) != null ) { java.lang.String VAR_1 = TYPE_3 . METHOD_3 ( STRING_1 ) . METHOD_4 ( object . METHOD_2 ( ) ) ; return TYPE_4 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_1 ) ) ; } return null ; } 
protected boolean METHOD_1 ( ) { METHOD_2 ( ) ; java.util.ArrayList < TYPE_1 . DiskImage > VAR_1 = new java.util.ArrayList ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_2 . METHOD_7 ( ) . getStoragePoolId ( ) , VAR_1 ) ; TYPE_2 . METHOD_3 ( ) . METHOD_8 ( VAR_1 ) ; if ( ( TYPE_2 . METHOD_9 ( ) ) && ( ! ( METHOD_10 ( VAR_2 , VAR_3 ) ) ) ) { return false ; } return super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > VAR_1 = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ; for ( java.lang.Object a : VAR_2 . METHOD_2 ( ) ) { org.ovirt.engine.core.common.businessentities.network.Network network = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( a ) ) ; VAR_1 . add ( new TYPE_2 ( network . METHOD_3 ( ) . getValue ( ) , network ) ) ; } org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_3 , VAR_1 ) ; VAR_2 . METHOD_5 ( null ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; } 
private TYPE_1 < TYPE_2 < TYPE_3 , TYPE_4 < TYPE_5 > > > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 < TYPE_2 < TYPE_3 , TYPE_4 < TYPE_5 > > > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_6 < TYPE_2 < TYPE_3 , TYPE_4 < TYPE_5 > > > ( ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; TYPE_2 . assertEquals ( 1 , result . size ( ) ) ; TYPE_2 . assertEquals ( new TYPE_1 ( VAR_2 , VAR_1 ) , result . get ( 0 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 [ 0 ] , true ) ; VAR_2 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_1 VAR_3 ) { METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( ) ; list . add ( new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_1 , TYPE_3 . METHOD_4 ( ) . getValue ( ) , TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_5 ( ) ) ) ; return list ; } 
private void METHOD_1 ( int VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( VAR_3 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_4 . Guid class ) , VAR_3 . Matchers < TYPE_1 > any ( VAR_5 class ) ) ) . thenReturn ( METHOD_3 ( VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 model ) { if ( ( model . METHOD_2 ( ) . getEntity ( ) ) || ( model . METHOD_3 ( ) . getEntity ( ) ) ) { return METHOD_4 ( model . METHOD_5 ( ) , model . METHOD_6 ( ) . getEntity ( ) ) ; } else { return null ; } } 
private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 class , VAR_4 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_1 ) ; TYPE_2 . assertEquals ( validator . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) . get ( ) , VAR_1 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; java.util.List < java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( vds , null , VAR_1 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_1 . get ( 0 ) , STRING_1 ) ; } 
private static java.util.ArrayList < org.ovirt.engine.core.compat.Guid > METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.compat.Guid > VAR_2 = new java.util.ArrayList < > ( ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { for ( java.lang.String VAR_3 : VAR_1 ) { VAR_2 . add ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_3 ) ) ; } } return VAR_2 ; } 
public static java.lang.String METHOD_1 ( java.util.List < java.lang.String > VAR_1 , java.lang.String ... VAR_2 ) { TYPE_1 . METHOD_2 ( VAR_2 ) ; for ( java.lang.String VAR_3 : VAR_1 ) { int VAR_4 = TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( VAR_4 >= 0 ) { return VAR_2 [ VAR_4 ] ; } } return null ; } 
public TYPE_1 . VdcActionParametersBase METHOD_1 ( final TYPE_2 VAR_1 ) { final TYPE_3 params = new TYPE_3 ( VAR_1 . getId ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; params . METHOD_4 ( true ) ; return params ; } 
public TYPE_1 METHOD_1 ( final org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_2 > VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_2 ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) ; cmd . getVm ( ) . METHOD_4 ( VAR_4 ) ; TYPE_2 . METHOD_5 ( cmd ) ; } 
public static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VmTemplate template , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 , boolean VAR_3 ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_4 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( template . METHOD_4 ( ) . getValue ( ) ) ; TYPE_1 . METHOD_1 ( template , VAR_4 , VAR_1 , VAR_2 , VAR_3 ) ; } 
public boolean METHOD_1 ( TYPE_1 item ) { if ( ( item . METHOD_2 ( ) ) || ( ! ( METHOD_3 ( ) ) ) ) return false ; if ( ( ( METHOD_3 ( ) ) && ( item . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) && ( item . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_7 ( ) ) ) { return true ; } return false ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_2 VAR_3 = METHOD_2 ( ) ; VAR_3 . addValue ( STRING_1 , VAR_1 ) ; VAR_3 . addValue ( STRING_2 , VAR_2 ) ; TYPE_1 VAR_4 = METHOD_3 ( ) . METHOD_4 ( STRING_3 , METHOD_5 ( ) , VAR_3 ) ; return VAR_4 ; } 
public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final java.lang.String VAR_2 , final java.lang.String id , final boolean VAR_3 , final boolean VAR_4 ) { TYPE_3 < TYPE_1 > VAR_5 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_5 . METHOD_3 ( id ) , VAR_3 , VAR_4 ) ; if ( ( VAR_5 . size ( ) ) == 0 ) { return null ; } return new java.util.ArrayList < TYPE_1 > ( VAR_5 ) . get ( 0 ) ; } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > parameters = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ; for ( TYPE_2 VAR_1 : VAR_2 . METHOD_2 ( ) ) { TYPE_3 < TYPE_2 > VAR_3 = new TYPE_3 < TYPE_2 > ( ) ; VAR_3 . METHOD_3 ( VAR_1 . getId ( ) ) ; parameters . add ( VAR_3 ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( METHOD_5 ( ) , parameters ) ; METHOD_6 ( ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( ) ) ; TYPE_3 < TYPE_4 < java.lang.String > > VAR_2 = new TYPE_3 < TYPE_4 < java.lang.String > > ( ) ; for ( java.lang.String VAR_3 : VAR_1 ) { TYPE_4 < java.lang.String > VAR_4 = new TYPE_4 < java.lang.String > ( ) ; VAR_4 . setItems ( VAR_5 ) ; VAR_4 . setSelectedItem ( VAR_3 ) ; VAR_2 . add ( VAR_4 ) ; } setItems ( VAR_2 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( vm == null ) { return ; } TYPE_2 VAR_1 = ( ( TYPE_2 ) ( model ) ) ; VAR_1 . METHOD_1 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId ( ) ) ) ; } } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) ) ; return ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( TYPE_2 . getParameters ( ) . METHOD_8 ( ) ) ) ) ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_2 : VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( VAR_2 . getName ( ) ) ) ) { VAR_1 . add ( VAR_2 ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . getVm ( ) . METHOD_2 ( VAR_1 ) ; TYPE_1 . getVm ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( null ) ; org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < TYPE_1 > VAR_3 = ( ( java.util.List < TYPE_1 > ) ( result ) ) ; METHOD_3 ( ) . setItems ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_1 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; TYPE_1 parameters = new TYPE_1 ( VAR_1 , STRING_1 , STRING_1 , false ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , parameters , aQuery ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; java.util.List < TYPE_2 < org.ovirt.engine.core.common.businessentities.VM , TYPE_3 > > VAR_4 = TYPE_4 . METHOD_3 ( new TYPE_2 ( vm , VAR_5 ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) ; METHOD_9 ( false ) ; METHOD_10 ( false ) ; TYPE_3 . METHOD_11 ( command ) ; } 
protected TYPE_1 < java.lang.Boolean , TYPE_2 > METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid VAR_1 , int type ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_3 . METHOD_2 ( ) . get ( VAR_1 ) ; if ( ! ( TYPE_3 . METHOD_3 ( vds ) ) ) { VAR_2 . error ( STRING_1 , vds . getName ( ) , storageDomain . getName ( ) ) ; METHOD_4 ( VAR_3 , null , vds ) ; return new TYPE_1 ( false , null ) ; } return super . METHOD_1 ( storageDomain , VAR_1 , type ) ; } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; VAR_1 . add ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) ; TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , VAR_1 ) , true , null ) ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . setId ( vmId ) ; vm . METHOD_2 ( VAR_1 ) ; vm . METHOD_3 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( vmId ) ) . thenReturn ( vm ) ; return vm ; } 
protected < TYPE_1 > TYPE_1 getEntity ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 . VdcQueryType VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 , boolean VAR_5 ) { try { return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { return METHOD_2 ( VAR_1 , e , VAR_5 ) ; } } 
public void METHOD_1 ( ) { if ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; TYPE_1 . get ( VAR_4 class ) . METHOD_3 ( this , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_1 < java.lang.Integer > getValue ( VAR_5 ) , VAR_1 < java.lang.Integer > getValue ( VAR_5 ) , VAR_6 ) ; VAR_3 . METHOD_2 ( STRING_3 ) ; } } 
private void METHOD_1 ( TYPE_1 . Disk disk , TYPE_2 . VdcActionType VAR_1 ) { TYPE_3 VAR_2 = disk . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , new TYPE_4 ( new TYPE_3 ( disk . getId ( ) , TYPE_5 . getParameters ( ) . METHOD_4 ( ) ) , VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( ( ( ( VAR_1 . METHOD_2 ( CHAR_1 ) ) != ( - 1 ) ) || ( ( VAR_1 . METHOD_2 ( CHAR_2 ) ) != ( - 1 ) ) ) || ( ( VAR_1 . METHOD_2 ( CHAR_3 ) ) != ( - 1 ) ) ) || false ) { throw new TYPE_1 ( STRING_1 ) ; } } 
private java.lang.String METHOD_1 ( TYPE_1 client ) { try { TYPE_2 VAR_1 = new TYPE_3 ( INT_1 ) ; client . METHOD_2 ( VAR_2 < java.lang.String > METHOD_3 ( VAR_3 ) , null , VAR_1 , null ) ; return new java.lang.String ( VAR_1 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( STRING_1 ) ) ; } catch ( java.lang.Exception e ) { log . METHOD_6 ( STRING_2 , e ) ; return null ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { VAR_1 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } else { VAR_1 = VAR_2 ; } TYPE_2 VAR_3 = ( ( TYPE_2 ) ( model ) ) ; VAR_3 . METHOD_1 ( ) . METHOD_2 ( VAR_3 , VAR_4 ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getSelectedItem ( ) ) ) ; if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) ; } } ; TYPE_1 . METHOD_3 ( VAR_1 , template . getId ( ) ) ; } 
public boolean METHOD_1 ( TYPE_1 . VDS VAR_1 , TYPE_1 . VDS VAR_2 , TYPE_1 . VM vm ) { boolean returnValue = false ; boolean VAR_3 = ( VAR_1 . METHOD_2 ( ) ) == 0 ; boolean VAR_4 = ( VAR_2 . METHOD_2 ( ) ) == 0 ; if ( VAR_3 ) { if ( ! VAR_4 ) { returnValue = true ; } } else if ( ! VAR_4 ) { return super . METHOD_1 ( VAR_1 , VAR_2 , vm ) ; } return returnValue ; } 
public static TYPE_1 METHOD_1 ( TYPE_1 result ) { if ( TYPE_2 . METHOD_2 ( result . METHOD_3 ( ) ) ) { throw new TYPE_3 ( ( ( result . METHOD_4 ( ) ) != null ? result . METHOD_4 ( ) . METHOD_5 ( ) : VAR_1 ) , result . METHOD_3 ( ) ) ; } return result ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 . StorageDomain storageDomain = get ( ) ; if ( storageDomain . METHOD_2 ( ) . METHOD_3 ( ) . equals ( TYPE_3 . value ( ) ) ) { TYPE_4 params = new TYPE_4 ( VAR_1 ) ; params . METHOD_4 ( true ) ; return METHOD_5 ( VAR_2 , params ) ; } else { TYPE_5 params = new TYPE_5 ( VAR_1 , VAR_3 ) ; return METHOD_5 ( VAR_4 , params ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; final TYPE_2 cluster = new TYPE_2 ( ) ; cluster . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_4 ( STRING_2 , STRING_3 , STRING_4 ) ; VAR_4 . METHOD_5 ( VAR_5 , VAR_2 , VAR_3 ) ; TYPE_4 . assertEquals ( STRING_2 , TYPE_5 . METHOD_6 ( VAR_1 , ( ) - > cluster ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( returnValue ) ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( model ) ) ; VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) ; } } , METHOD_4 ( ) ) , getVm ( ) . getId ( ) ) ; } 
private void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; for ( java.lang.Object a : METHOD_2 ( ) . METHOD_3 ( ) ) { org.ovirt.engine.core.compat . Version item = ( ( org.ovirt.engine.core.compat . Version ) ( a ) ) ; if ( TYPE_1 . METHOD_4 ( item , getEntity ( ) . METHOD_5 ( ) ) ) { METHOD_2 ( ) . setSelectedItem ( item ) ; break ; } } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , null ) ; VAR_1 . METHOD_3 ( false ) ; cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) , null ) ) ; METHOD_6 ( VAR_4 ) ; TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ; } 
public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { boolean VAR_1 = VAR_2 . METHOD_1 ( java.lang.Integer . METHOD_2 ( METHOD_3 ( ) . getEntity ( ) . toString ( ) ) ) ; TYPE_1 . ValidationResult VAR_3 = new TYPE_1 . ValidationResult ( ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_3 . METHOD_5 ( TYPE_2 . METHOD_6 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) ; return VAR_3 ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 pool = ( ( TYPE_2 ) ( returnValue ) ) ; boolean VAR_2 = ( pool . METHOD_2 ( ) ) == ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; } 
protected boolean METHOD_1 ( ) { return ( ( ( ( validate ( METHOD_2 ( METHOD_3 ( ) ) ) ) && ( validate ( METHOD_4 ( ) ) ) ) && ( validate ( METHOD_5 ( METHOD_3 ( ) ) ) ) ) && ( validate ( METHOD_6 ( METHOD_3 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_3 ( ) ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat . Version version ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( false ) ; VAR_1 . METHOD_5 ( version ) ; VAR_1 . METHOD_6 ( true ) ; METHOD_7 ( version ) ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( java.util.List < TYPE_1 . DiskImage > VAR_1 ) { java.util.List < TYPE_1 . DiskImage > VAR_2 = TYPE_2 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) , VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = TYPE_3 . getInstance ( ) . METHOD_4 ( TYPE_4 . getParameters ( ) . getStoragePoolId ( ) , VAR_2 , METHOD_5 ( ) , getVm ( ) ) ; VAR_1 . METHOD_6 ( VAR_2 ) ; return storageDomain ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_3 . VdcQueryReturnValue VAR_2 = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ; TYPE_4 VAR_3 = VAR_2 . getReturnValue ( ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_3 ) ; } } } ) , VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) , METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( client ) . when ( VAR_1 ) . METHOD_2 ( ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( VAR_1 ) . METHOD_4 ( client , VAR_2 , VAR_3 , VAR_4 ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( client ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_1 ) . METHOD_6 ( client ) ; org.mockito.Mockito . METHOD_7 ( VAR_7 class ) . when ( VAR_1 ) . METHOD_8 ( client ) ; } 
protected void METHOD_1 ( ) { TYPE_1 constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) ; METHOD_2 ( ) . METHOD_3 ( constants . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_5 ( false ) ; METHOD_6 ( ) . METHOD_3 ( constants . METHOD_7 ( ) ) ; METHOD_6 ( ) . METHOD_5 ( false ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , java.lang.String VAR_4 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_5 = VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; TYPE_1 VAR_7 = new TYPE_1 ( VAR_5 ) ; return VAR_7 ; } catch ( TYPE_2 VAR_8 ) { throw new TYPE_3 ( VAR_8 ) ; } } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 . METHOD_4 ( result ) ; TYPE_1 . METHOD_5 ( result . isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : result ) { TYPE_1 . assertEquals ( VAR_1 . METHOD_3 ( ) , vds . METHOD_3 ( ) ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.lang.Integer VAR_1 = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_3 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_5 . instance , VAR_4 ) ; } 
protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 ) ; if ( METHOD_3 ( ) ) { VAR_1 . METHOD_4 ( VAR_3 ) ; } return TYPE_4 . METHOD_5 ( ) . METHOD_6 ( TYPE_4 . METHOD_7 ( ) . getId ( ) , VAR_1 ) ; } 
private void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 > METHOD_4 ( METHOD_2 ( ) . METHOD_3 ( ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_5 ( ( ( ( getSelectedItem ( ) ) != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) ) ; } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String VAR_2 = null ; TYPE_1 VAR_3 = METHOD_2 ( ) ; try { VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; VAR_2 = VAR_3 . METHOD_5 ( ) ; } catch ( TYPE_2 e ) { log . METHOD_6 ( STRING_1 , VAR_1 , TYPE_3 . METHOD_7 ( e ) ) ; } finally { VAR_3 . METHOD_8 ( ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 . Disk model = METHOD_2 ( ) ; model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_4 ( ) . get ( 0 ) . setId ( null ) ; METHOD_5 ( METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( ) ; try { VAR_2 . add ( model ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_9 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : METHOD_2 ( ) ) { TYPE_1 VAR_2 = METHOD_3 ( image . METHOD_4 ( ) ) ; if ( VAR_2 . getSucceeded ( ) ) { METHOD_5 ( ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; } else { throw new TYPE_2 ( VAR_2 . METHOD_8 ( ) . METHOD_9 ( ) , STRING_1 ) ; } } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; METHOD_3 ( ) . setIsChangable ( false ) ; METHOD_3 ( ) . setEntity ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( true ) ; METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( TYPE_3 . METHOD_6 ( VAR_2 ) ) ) ) ; } } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_3 ( vm ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_1 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; TYPE_1 < TYPE_2 > cmd = new TYPE_1 ( VAR_1 , null ) ; cmd . METHOD_3 ( vm ) ; cmd . METHOD_7 ( vm . getId ( ) ) ; return cmd ; } 
protected TYPE_1 METHOD_1 ( ) { final TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . get ( VAR_3 ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.VM ( ) ) ; org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . METHOD_3 ( new TYPE_2 ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VM VAR_1 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; VAR_1 . METHOD_2 ( VAR_2 . getId ( ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( ) ) . thenReturn ( TYPE_1 . METHOD_4 ( VAR_4 ) ) ; VAR_5 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( 1 ) ) . METHOD_7 ( TYPE_2 . any ( VAR_7 . VM class ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( this , id ) ; java.util.List < TYPE_5 > entities = METHOD_3 ( VAR_2 class , VAR_3 , new TYPE_6 ( VAR_1 ) ) ; if ( ( entities . size ( ) ) == 0 ) { return null ; } return METHOD_4 ( VAR_4 , new TYPE_7 ( VAR_1 , entities . get ( 0 ) . METHOD_5 ( ) ) ) ; } 
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = this . METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ( ( ( ( STRING_1 + ( VAR_1 . METHOD_5 ( ) ) ) + STRING_2 ) + ( VAR_2 . getId ( ) ) ) + STRING_3 ) ) ; return VAR_2 . getId ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ; parameters . METHOD_3 ( VAR_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_4 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; org.mockito.Mockito.when ( VAR_5 . get ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_6 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_2 . METHOD_6 ( command ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; model . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; } } ) ; TYPE_2 . METHOD_4 ( VAR_1 , getEntity ( ) . getStoragePoolId ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getStoragePoolId ( ) , VAR_2 ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( VAR_3 ) ; METHOD_8 ( ) ; return new TYPE_1 ( VAR_4 , VAR_5 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_1 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) , VAR_2 . StoragePool , VAR_3 ) ) ; VAR_1 . add ( new TYPE_1 ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) , VAR_2 . VDS , VAR_3 ) ) ; return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . getReturnValue ( ) ; boolean VAR_3 = false ; if ( ( VAR_2 != null ) && ( VAR_2 . getSucceeded ( ) ) ) { VAR_3 = true ; } METHOD_2 ( ( VAR_3 ? ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_3 ( ) ) ) : null ) , VAR_3 ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( true , vmId ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { if ( ( VAR_4 . getId ( ) ) == null ) { VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; } VAR_4 . METHOD_4 ( vmId ) ; VAR_3 . add ( VAR_4 , VAR_2 , false ) ; } } 
protected TYPE_1 . Disk METHOD_1 ( TYPE_1 . Disk model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) ; model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) ; model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ; model . METHOD_6 ( new TYPE_3 ( ) ) ; return model ; } 
public TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , new TYPE_3 ( null , METHOD_3 ( ) , name ) ) ; TYPE_4 VAR_4 = ( ( TYPE_4 ) ( VAR_1 . getReturnValue ( ) ) ) ; if ( VAR_4 == null ) { return null ; } return METHOD_4 ( VAR_4 ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { TYPE_1 VAR_1 = vds . METHOD_2 ( ) ; return ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) || ( ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) && ( ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ) ) ; } 
private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( TYPE_2 . name ( ) ) . append ( java.lang.String . METHOD_2 ( STRING_1 , TYPE_3 . METHOD_3 ( ) ) ) . toString ( ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 storageDomain = METHOD_3 ( VAR_1 ) ; storageDomain . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_3 ) ; METHOD_6 ( VAR_4 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_3 ) ; TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) ; TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) ; } 
protected void METHOD_1 ( TYPE_1 model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; assertEquals ( VAR_3 [ VAR_1 ] . METHOD_2 ( ) , model . METHOD_3 ( ) ) ; assertEquals ( VAR_4 [ VAR_1 ] , model . getName ( ) ) ; METHOD_4 ( model . METHOD_5 ( ) ) ; METHOD_6 ( model ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate VAR_1 = VAR_2 . get ( VAR_3 ) ; TYPE_1 . METHOD_2 ( VAR_1 ) ; java.lang.String name = VAR_1 . getName ( ) ; TYPE_1 . METHOD_3 ( name . equals ( VAR_4 . METHOD_4 ( VAR_3 , VAR_5 . VmTemplate ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 < org.ovirt.engine.core.common.businessentities.StorageDomain > > VAR_1 = TYPE_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 ) - > VAR_2 . equals ( VAR_3 ) ) , TYPE_1 . METHOD_3 ( ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 ) - > VAR_2 . equals ( VAR_4 ) ) . METHOD_4 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_5 ) . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ; } 
protected void METHOD_1 ( TYPE_1 status ) { if ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != status ) { TYPE_3 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 , new TYPE_4 ( TYPE_2 . METHOD_2 ( ) . getId ( ) , status ) ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 . VdcQueryReturnValue VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . VdcQueryReturnValue class ) ; TYPE_3 . METHOD_3 ( VAR_3 . runQuery ( TYPE_3 . METHOD_4 ( VAR_4 ) , METHOD_5 ( ) ) ) . METHOD_6 ( VAR_1 ) ; TYPE_3 . METHOD_3 ( VAR_1 . getSucceeded ( ) ) . METHOD_6 ( true ) . METHOD_7 ( ) ; TYPE_3 . METHOD_3 ( VAR_1 . getReturnValue ( ) ) . METHOD_6 ( METHOD_8 ( ) ) . METHOD_7 ( ) ; TYPE_2 . METHOD_9 ( ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.Boolean VAR_1 = java.lang.Boolean . TRUE ; TYPE_1 VAR_2 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; if ( VAR_2 != null ) { METHOD_1 ( VAR_2 ) ; VAR_1 = VAR_2 . METHOD_2 ( ) ; ( ( TYPE_3 ) ( model ) ) . METHOD_3 ( ) . setEntity ( VAR_2 . METHOD_4 ( ) ) ; } ( ( TYPE_3 ) ( model ) ) . METHOD_5 ( ) . setEntity ( VAR_1 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . METHOD_2 ( true ) ; java.util.List < java.lang.String > VAR_1 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_3 ( vds , null , VAR_1 ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( STRING_1 ) ) ; TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( STRING_2 ) ) ; } 
protected void METHOD_1 ( ) { final TYPE_1 returnValue = METHOD_2 ( VAR_1 , TYPE_2 . getParameters ( ) ) ; METHOD_3 ( returnValue . getSucceeded ( ) ) ; if ( returnValue . getSucceeded ( ) ) { if ( TYPE_3 . METHOD_4 ( METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ) ) { METHOD_8 ( ) ; } } else { METHOD_9 ( returnValue ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , true , true ) ) ; METHOD_5 ( VAR_4 . METHOD_6 ( VAR_3 [ 0 ] . toString ( ) ) ) ; } 
private void METHOD_1 ( TYPE_1 command ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_3 status = VAR_1 . getStatus ( ) ; TYPE_4 VAR_2 = null ; java.lang.String VAR_3 ; switch ( status ) { case VAR_4 : VAR_3 = VAR_5 . METHOD_2 ( ) ; break ; case VAR_6 : VAR_3 = VAR_5 . METHOD_3 ( ) ; break ; case VAR_7 : VAR_3 = VAR_5 . METHOD_4 ( ) ; break ; default : VAR_3 = VAR_5 . METHOD_3 ( ) ; } return TYPE_5 . METHOD_5 ( VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_3 ( VAR_5 ) ; METHOD_3 ( 1 , VAR_4 ) ; VAR_6 . METHOD_4 ( ) ; VAR_7 . METHOD_5 ( VAR_1 ) ; try { METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_4 VAR_8 ) { METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ; } finally { VAR_2 . METHOD_9 ( ) ; } } 
protected void METHOD_1 ( ) { METHOD_2 ( null ) ; TYPE_1 . getInstance ( ) . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_4 ( ) . setItems ( ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } } ) , vm . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_2 . setId ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( true ) ) . thenReturn ( VAR_2 ) ; if ( VAR_1 ) { org.ovirt.engine.core.common.businessentities.VDS VAR_5 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_5 . setId ( VAR_6 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( true , VAR_3 ) ) . thenReturn ( VAR_5 ) ; } } 
private java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list , boolean VAR_1 , boolean VAR_2 ) { final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : list ) { if ( ( VAR_1 && ( cluster . METHOD_2 ( ) ) ) || ( VAR_2 && ( cluster . METHOD_3 ( ) ) ) ) { VAR_3 . add ( cluster ) ; } } TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 ( ) ) ; return VAR_3 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( null ) ; parameters . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_1 . METHOD_5 ( ) ) ) . thenReturn ( VAR_5 ) ; TYPE_2 . METHOD_6 ( command ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . METHOD_4 ( ) , METHOD_5 ( ) . getValue ( ) , false , false , false , false , true , false , false , true , TYPE_3 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 ) ; try { long VAR_3 = TYPE_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_4 < java.lang.Integer > METHOD_7 ( VAR_5 ) ) ) ; VAR_3 = TYPE_1 . METHOD_3 ( VAR_4 < java.lang.Integer > METHOD_7 ( VAR_6 ) , VAR_3 ) ; METHOD_8 ( VAR_1 ) . METHOD_9 ( VAR_3 , VAR_7 ) ; } catch ( TYPE_4 e ) { } } 
private TYPE_1 METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , TYPE_2 . VdcActionParametersBase VAR_2 ) { try { TYPE_3 VAR_3 = new TYPE_3 ( 1 ) ; TYPE_4 < TYPE_5 > . TYPE_6 VAR_4 = new TYPE_6 ( VAR_3 , VAR_1 , VAR_2 ) ; TYPE_7 . METHOD_2 ( VAR_4 ) ; try { VAR_3 . METHOD_3 ( ) ; } catch ( TYPE_8 e ) { } return VAR_4 . getReturnValue ( ) ; } catch ( TYPE_9 VAR_5 ) { VAR_6 . error ( STRING_1 , VAR_5 ) ; return null ; } } 
protected void METHOD_1 ( boolean VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { METHOD_2 ( VAR_4 , VAR_5 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 [ 1 ] } , METHOD_3 ( VAR_6 [ 1 ] ) ) ; METHOD_4 ( 0 ) ; METHOD_5 ( 0 ) ; super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( ( TYPE_3 ) ( item ) ) . getStatus ( ) ; if ( VAR_1 == ( VAR_2 ) ) { return VAR_3 . METHOD_2 ( ) ; } else if ( VAR_1 == ( VAR_4 ) ) { return VAR_3 . METHOD_3 ( ) ; } else { return VAR_3 . METHOD_4 ( ) ; } } 
private static void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws TYPE_1 { TYPE_2 VAR_3 = new TYPE_3 ( VAR_1 ) ; TYPE_4 VAR_4 = new TYPE_5 ( VAR_2 ) ; byte [ ] VAR_5 = new byte [ INT_1 ] ; int VAR_6 ; while ( ( VAR_6 = VAR_3 . METHOD_2 ( VAR_5 ) ) > 0 ) { VAR_4 . METHOD_3 ( VAR_5 , 0 , VAR_6 ) ; } VAR_3 . METHOD_4 ( ) ; VAR_4 . METHOD_4 ( ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; return ( validate ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . getId ( ) ) ) ) && ( validate ( TYPE_2 . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_5 ) ) ; TYPE_2 . assertEquals ( TYPE_3 . getValue ( ) , VAR_1 . get ( VAR_5 ) ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_6 ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_1 . get ( VAR_6 ) ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic ) { org.ovirt.engine.core.common.businessentities . Network VAR_2 = new org.ovirt.engine.core.common.businessentities . Network ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( nic . METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( nic . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( nic . METHOD_8 ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , this ) ; VAR_4 . put ( VAR_1 , VAR_3 ) ; return VAR_3 ; } 
public void METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( true , VAR_1 ) ; TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_2 = TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 ) ; java.util.List < TYPE_4 > VAR_5 = METHOD_4 ( VAR_1 , VAR_6 ) ; for ( TYPE_4 VAR_7 : VAR_5 ) { VAR_7 . METHOD_5 ( STRING_1 ) ; } org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_8 ) . METHOD_6 ( VAR_1 ) ; TYPE_5 . METHOD_7 ( VAR_9 . METHOD_8 ( cluster , VAR_2 ) . isEmpty ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { pool = VAR_1 . get ( 0 ) ; METHOD_1 ( pool . getId ( ) , getEntity ( ) . getId ( ) ) ; } } 
private void METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = VAR_1 . METHOD_2 ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { if ( ( ! ( vm . METHOD_3 ( ) ) ) && ( ( vm . METHOD_4 ( ) ) != null ) ) { TYPE_1 . METHOD_5 ( vm . METHOD_4 ( ) , vm . getId ( ) , VAR_2 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( INT_1 , null ) ; TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ; for ( java.lang.String model : TYPE_3 . METHOD_4 ( STRING_1 ) ) { TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( model . METHOD_6 ( ) ) ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( TYPE_2 . METHOD_7 ( STRING_1 ) ) ; command . METHOD_8 ( ) ; TYPE_3 . METHOD_9 ( command , VAR_5 ) ; } 
protected void METHOD_1 ( TYPE_1 iface , boolean VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) { org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( iface . METHOD_3 ( ) ) ) . thenReturn ( VAR_1 ) ; TYPE_3 . assertEquals ( VAR_3 , VAR_5 . add ( iface , TYPE_4 . getInstance ( ) ) ) ; METHOD_4 ( iface , VAR_2 ) ; } 
public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int result = 1 ; result = ( VAR_1 * result ) + ( ( VAR_2 ) * VAR_1 ) ; result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) ; result = ( VAR_1 * result ) + ( ( VAR_4 ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) ; return result ; } 
public TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { final java.util.List < java.lang.String > VAR_1 = VAR_2 < java.util.List < java.lang.String > > METHOD_2 ( VAR_3 ) ; java.lang.String VAR_4 = TYPE_2 . getInstance ( ) . get ( VAR_5 class ) . METHOD_3 ( ) . get ( vm . METHOD_4 ( ) ) ; for ( java.lang.String VAR_6 : VAR_1 ) { if ( VAR_6 . METHOD_5 ( VAR_4 ) ) { return new TYPE_1 . ValidationResult ( VAR_7 ) ; } } return VAR_8 ; } 
public static void METHOD_1 ( TYPE_1 disk , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( disk ) ; TYPE_2 . METHOD_4 ( new TYPE_3 ( disk . getId ( ) , vmId ) , VAR_1 , VAR_2 , null , true , false , null ) ; } 
public TYPE_1 add ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 ) ; METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = METHOD_4 ( VAR_3 class , VAR_4 class ) . map ( VAR_1 , null ) ; VAR_2 . METHOD_5 ( METHOD_6 ( VAR_5 . get ( ) . getId ( ) ) ) ; METHOD_7 ( VAR_1 , VAR_2 ) ; return METHOD_8 ( VAR_6 , new TYPE_4 ( VAR_2 ) , new TYPE_5 ( VAR_7 , VAR_8 . IdQueryParameters class ) , true ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > list = new java.util.ArrayList < TYPE_2 > ( ) ; for ( TYPE_2 a : ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) { if ( ( a . METHOD_1 ( ) ) == ( VAR_1 ) ) { list . add ( a ) ; } } model . METHOD_2 ( model , list ) ; } 
private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , boolean VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 entity = ( ( TYPE_1 ) ( METHOD_3 ( ) . getEntity ( ) ) ) ; if ( entity == null ) return ; VAR_3 . METHOD_4 ( entity . METHOD_5 ( ) ) ; VAR_4 . METHOD_4 ( entity . METHOD_6 ( ) ) ; VAR_5 . METHOD_4 ( entity . METHOD_7 ( ) ) ; VAR_6 . METHOD_4 ( entity . METHOD_8 ( ) ) ; VAR_7 . METHOD_9 ( METHOD_3 ( ) ) ; } 
public java.util.ArrayList < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_4 = VAR_3 . get ( VAR_1 ) ; for ( TYPE_1 < java.lang.String , java.lang.String > VAR_5 : VAR_4 . METHOD_3 ( ) ) { VAR_2 . add ( VAR_5 . METHOD_4 ( ) ) ; } } else { VAR_6 . METHOD_5 ( VAR_7 , VAR_1 ) ; } return VAR_2 ; } 
public static TYPE_1 valueOf ( TYPE_2 VAR_1 ) { for ( TYPE_1 VAR_2 : TYPE_1 . METHOD_1 ( ) ) { if ( VAR_2 . METHOD_2 ( ) . equals ( VAR_1 ) ) { return VAR_2 ; } } throw new TYPE_3 ( ( ( ( ( STRING_1 + ( VAR_1 . name ( ) ) ) + STRING_2 ) + ( VAR_3 class . getName ( ) ) ) + STRING_3 ) ) ; } 
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; METHOD_2 ( ) . METHOD_3 ( new TYPE_2 [ ] { VAR_1 } ) ; getValue ( ) . METHOD_3 ( new TYPE_2 [ ] { VAR_1 } ) ; return ( METHOD_2 ( ) . METHOD_4 ( ) ) && ( getValue ( ) . METHOD_4 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; } } ; TYPE_1 params = new TYPE_1 ( VAR_1 ) ; params . METHOD_2 ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; } 
public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > parameters = new TYPE_1 < TYPE_2 > ( ) ; parameters . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , parameters , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = VAR_3 . getReturnValue ( ) ; boolean VAR_5 = false ; if ( ( VAR_4 != null ) && ( VAR_4 . getSucceeded ( ) ) ) { VAR_5 = true ; } METHOD_5 ( VAR_5 ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( null ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( METHOD_7 ( VAR_2 ) ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_1 VAR_3 ) { METHOD_9 ( VAR_3 ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( VAR_1 , TYPE_2 . METHOD_2 ( ) , METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , TYPE_2 . getParameters ( ) . METHOD_8 ( ) . METHOD_9 ( ) , false ) ; if ( ( TYPE_2 . METHOD_10 ( ) ) != null ) { METHOD_11 ( ) ; } } 
private void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 class ) ) ) . thenReturn ( METHOD_4 ( VAR_3 , VAR_4 ) ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_3 , VAR_4 ) ) . when ( VAR_5 ) . METHOD_7 ( TYPE_1 . any ( VAR_6 . Guid class ) , TYPE_1 . any ( VAR_2 class ) ) ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( command . validate ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = METHOD_1 ( ) ; VAR_1 . setItems ( hosts ) ; VAR_1 . METHOD_2 ( true ) ; METHOD_3 ( true ) ; METHOD_4 ( ) . METHOD_2 ( true ) ; } 
public boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return METHOD_2 ( new TYPE_2 < java.lang.Boolean > ( ) { public java.lang.Boolean METHOD_3 ( ) { try { VAR_2 . METHOD_1 ( VAR_1 . METHOD_4 ( ) . toString ( ) ) ; return true ; } catch ( TYPE_3 VAR_3 ) { if ( ( VAR_3 . getStatus ( ) ) == ( VAR_4 ) ) { return false ; } throw VAR_3 ; } } } ) ; } 
public static java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( TYPE_1 < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > result = null ; if ( VAR_1 != null ) { result = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : VAR_1 ) { result . put ( diskImage . METHOD_2 ( ) , diskImage ) ; } } return result ; } 
public static void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , int VAR_1 ) { for ( int VAR_2 = 1 ; VAR_2 <= VAR_1 ; VAR_2 ++ ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vmId ) , VAR_3 , VAR_4 , VAR_5 , true , false ) ; } } 
public TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 model , TYPE_1 entity ) { return new TYPE_5 ( VAR_5 , map ( VAR_1 , entity ) ) ; } } ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( true , false ) ; TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_4 ) . METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_5 ) ; } 
public TYPE_1 getValue ( TYPE_2 value ) { setTitle ( value . METHOD_1 ( ) ) ; if ( ( ( value . METHOD_1 ( ) ) != null ) && ( ( value . METHOD_1 ( ) ) != STRING_1 ) ) { return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; } return null ; } 
public void METHOD_1 ( ) { TYPE_1 . Disk model = METHOD_2 ( ) ; model . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . setId ( null ) ; METHOD_5 ( METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( ) ; try { VAR_2 . add ( model ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_9 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , null ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( STRING_1 ) } ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; TYPE_2 . METHOD_1 ( vms , new TYPE_3 ( ) ) ; setItems ( vms ) ; METHOD_2 ( ( ( vms . size ( ) ) == 0 ) ) ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > models = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; models . add ( VAR_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) ; models . add ( VAR_2 ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; models . add ( VAR_3 ) ; for ( TYPE_1 model : models ) { model . METHOD_2 ( VAR_4 ) ; } return models ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; METHOD_4 ( ) . setIsChangable ( false ) ; } 
private static java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( TYPE_1 model ) { return model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ( VAR_1 ) - > VAR_1 . METHOD_6 ( ) ? VAR_1 . METHOD_7 ( ) . getName ( ) : null , ( VAR_1 ) - > VAR_1 . METHOD_8 ( ) ? TYPE_3 . map ( VAR_1 . METHOD_9 ( ) , null ) : null ) ) ; } 
public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { org.ovirt.engine.core.compat.Guid VAR_2 = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_1 . METHOD_2 ( ) [ 0 ] ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = new TYPE_3 < > ( ) ; for ( TYPE_4 < java.util.List < TYPE_5 > , org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_4 : VAR_5 . METHOD_3 ( ) ) { VAR_3 . add ( VAR_4 . METHOD_4 ( ) ) ; } return VAR_3 ; } 
private boolean METHOD_1 ( ) { boolean VAR_1 = false ; TYPE_1 action = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; VAR_2 = METHOD_3 ( VAR_3 , false ) ; if ( ( VAR_4 ) != null ) { java.lang.String VAR_5 = VAR_4 . METHOD_4 ( ) ; if ( ( ( action == ( VAR_6 ) ) && ( VAR_5 . equals ( STRING_1 ) ) ) || ( ( action == ( VAR_7 ) ) && ( VAR_5 . equals ( STRING_2 ) ) ) ) VAR_1 = true ; } return VAR_1 ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 < ? > resource , java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 node = new TYPE_3 ( ) . name ( resource . METHOD_2 ( ) ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( TYPE_4 . METHOD_6 ( resource ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( resource ) ) . METHOD_9 ( ) ; if ( ! ( VAR_3 . METHOD_10 ( resource ) ) ) { VAR_3 . put ( resource , node ) ; } return node ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = STRING_1 ; if ( VAR_1 == ( VAR_3 ) ) { VAR_2 = VAR_4 . METHOD_2 ( ) ; } else if ( VAR_1 == ( VAR_5 ) ) { VAR_2 = VAR_4 . METHOD_3 ( ) ; } return VAR_2 ; } 
protected void METHOD_1 ( ) { if ( org.ovirt.engine.core.common.businessentities.VM . METHOD_2 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) ) { METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , new TYPE_3 ( TYPE_1 . METHOD_7 ( ) , TYPE_1 . getVm ( ) . getId ( ) , VAR_2 ) ) . getReturnValue ( ) ) ; TYPE_1 . METHOD_8 ( true ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . add ( STRING_1 ) ; METHOD_2 ( METHOD_3 ( null ) ) ; METHOD_4 ( 1 ) ; METHOD_5 ( 1 ) ; METHOD_6 ( INT_1 ) ; METHOD_7 ( STRING_2 ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_8 ( ) ; METHOD_9 ( VAR_2 . get ( 0 ) . METHOD_10 ( ) ) ; METHOD_11 ( VAR_2 ) ; } finally { VAR_1 . METHOD_12 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . VM vm = new TYPE_1 . VM ( ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; vm . METHOD_4 ( VAR_1 ) ; TYPE_1 . VM map = TYPE_3 . map ( vm , null ) ; METHOD_5 ( map . METHOD_6 ( ) . METHOD_7 ( ) ) ; assertEquals ( map . METHOD_6 ( ) . METHOD_7 ( ) , STRING_1 ) ; } 
protected TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > METHOD_1 ( ) { TYPE_2 params = new TYPE_2 ( METHOD_2 ( VAR_1 ) , VAR_1 ) ; params . METHOD_3 ( true ) ; java.util.Map < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_3 > VAR_2 = getEntity ( VAR_3 . HashMap class , VAR_4 , params , ( STRING_1 + ( VAR_1 . toString ( ) ) ) ) ; return VAR_2 . METHOD_4 ( ) ; } 
public void METHOD_1 ( TYPE_1 result ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ; VAR_2 = true ; TYPE_3 VAR_3 = result . getReturnValue ( ) ; VAR_4 . METHOD_3 ( ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( ) ) ) ) ; VAR_5 . METHOD_5 ( ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( ) ) ) ) ; } 
protected java.lang.Object METHOD_1 ( TYPE_1 result , TYPE_2 VAR_1 , TYPE_3 < ? extends TYPE_4 > VAR_2 ) { try { return VAR_1 . METHOD_2 ( ( ( org.ovirt.engine.core.compat.Guid ) ( result . METHOD_3 ( ) ) ) ) ; } catch ( java.lang.Exception e ) { e . METHOD_4 ( ) ; return null ; } } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_2 = hosts ; VAR_1 . METHOD_2 ( ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } ) ) ; } 
public void METHOD_1 ( ) { for ( TYPE_1 model : TYPE_1 . METHOD_2 ( ) ) { TYPE_2 VAR_1 = TYPE_3 . map ( model , null ) ; TYPE_4 . METHOD_3 ( VAR_1 ) ; TYPE_4 . assertEquals ( VAR_1 . name ( ) . METHOD_4 ( ) , model . name ( ) . METHOD_4 ( ) ) ; } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 1 ] } , METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_8 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_9 ( STRING_1 ) ) ; METHOD_10 ( true ) ; } 
private TYPE_1 METHOD_1 ( ) { if ( ( this . VAR_1 ) == null ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; inject ( VAR_2 ) ; TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( STRING_1 ) ; this . VAR_1 = ( ( TYPE_1 ) ( VAR_1 ) ) ; } return this . VAR_1 ; } 
public TYPE_1 add ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 , STRING_1 ) ; METHOD_2 ( VAR_2 class , VAR_1 ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { METHOD_1 ( VAR_1 , STRING_2 ) ; } org.ovirt.engine.core.common.businessentities.StoragePool entity = map ( VAR_1 ) ; return METHOD_4 ( VAR_3 , new TYPE_3 ( entity ) , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( VAR_4 , VAR_5 . IdQueryParameters class ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_5 ( ) . get ( VAR_1 . getName ( ) ) ; TYPE_3 . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( VAR_1 , VAR_3 ) ; } 
protected void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ; return ; } TYPE_2 < TYPE_3 > VAR_2 = METHOD_4 ( ) ; VAR_2 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) ) ; VAR_2 . METHOD_5 ( METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ) ; METHOD_6 ( ) . setItems ( new java.util.ArrayList < TYPE_3 > ( VAR_2 ) ) ; METHOD_10 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
private void METHOD_1 ( TYPE_1 < TYPE_2 . Disk > VAR_1 ) { for ( TYPE_2 . Disk disk : VAR_1 ) { if ( disk instanceof TYPE_3 ) { continue ; } TYPE_2 . DiskImage diskImage = VAR_2 . DiskImage class . METHOD_2 ( disk ) ; TYPE_4 . METHOD_3 ( STRING_1 , diskImage . METHOD_4 ( ) ) ; } } 
private java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 . DiskImage > METHOD_1 ( TYPE_2 < TYPE_3 . Disk > VAR_1 ) { java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 . DiskImage > result = new java.util.HashMap < > ( ) ; for ( TYPE_3 . Disk diskImage : VAR_1 ) { result . put ( ( ( TYPE_1 . DiskImage ) ( diskImage ) ) . getId ( ) , ( ( TYPE_1 . DiskImage ) ( diskImage ) ) ) ; } return result ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 model ) { if ( ( ( model . METHOD_2 ( ) ) == null ) || ( ( model . METHOD_2 ( ) . METHOD_3 ( ) ) == null ) ) { return false ; } java.lang.String version = model . METHOD_2 ( ) . METHOD_3 ( ) . getValue ( ) ; return ( ( java.lang.Boolean ) ( TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_1 , version ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( VAR_1 , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { METHOD_3 ( ) . setEntity ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; METHOD_4 ( ) ; } } ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_5 class ) ) ; VAR_2 . METHOD_6 ( VAR_6 , VAR_7 ) ; org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_8 , VAR_1 ) ; org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_9 , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) . get ( VAR_1 . getName ( ) ) ; TYPE_2 . METHOD_4 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( final int VAR_1 , final int VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 ) { org.ovirt.engine.core.common.businessentities.VM vm = METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( vm ) ; TYPE_1 < TYPE_2 > cmd = METHOD_4 ( vm , VAR_3 ) ; TYPE_3 . METHOD_5 ( cmd ) ; return cmd ; } 
protected java.lang.String METHOD_1 ( TYPE_1 < TYPE_2 , ? > column ) { if ( VAR_1 ) { return ( ( ( ( VAR_2 ) + STRING_1 ) + ( METHOD_2 ( ) ) ) + STRING_1 ) + ( METHOD_3 ( METHOD_4 ( column ) ) ) ; } return null ; } 
public static TYPE_1 map ( TYPE_2 entity , TYPE_1 template ) { TYPE_1 model = ( template == null ) ? new TYPE_1 ( ) : template ; model . METHOD_1 ( new TYPE_3 ( ) ) ; if ( entity == ( VAR_1 ) ) { TYPE_4 VAR_2 = new TYPE_4 ( ) ; VAR_2 . setId ( TYPE_5 . toString ( ) ) ; model . METHOD_2 ( ) . METHOD_2 ( ) . add ( VAR_2 ) ; } return model ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_2 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) ; } } ) ) ; } 
private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.common.businessentities . Network network ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , network . METHOD_4 ( ) , network . getName ( ) , network . METHOD_5 ( ) ) ; return nic ; } 
public java.util.ArrayList < java.lang.Integer > METHOD_1 ( ) { java.util.ArrayList < java.lang.Integer > VAR_1 = new java.util.ArrayList < java.lang.Integer > ( ) ; for ( int VAR_2 : METHOD_2 ( ) ) { java.lang.String VAR_3 = METHOD_3 ( VAR_4 . get ( VAR_2 ) , STRING_1 , null ) ; if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( STRING_2 ) ) ) { VAR_1 . add ( VAR_2 ) ; } } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 , java.lang.String VAR_4 ) { TYPE_1 VAR_5 = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_6 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , TYPE_3 . METHOD_5 ( VAR_3 ) ) . addValue ( STRING_5 , VAR_4 ) . addValue ( STRING_6 , false ) ) ; return VAR_5 ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { return new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_1 ) , VAR_2 , STRING_1 , STRING_2 , 2 , new java.util.HashMap < > ( ) , true , false , false , STRING_3 , TYPE_3 . METHOD_3 ( STRING_4 , STRING_5 ) , null , null ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . DbFacade class ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( METHOD_4 ( ) ) . thenReturn ( METHOD_5 ( ) ) . thenReturn ( METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_5 ( ) ; TYPE_3 . assertEquals ( VAR_3 , VAR_4 . getId ( ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid vmId = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ; status = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( vmId . toString ( ) ) ; TYPE_1 . METHOD_5 ( ) ; TYPE_2 . getInstance ( ) . METHOD_6 ( vmId ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String value ) { if ( METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( value ) ; } else { VAR_4 . METHOD_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; throw new TYPE_1 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = new TYPE_3 < TYPE_2 > ( ) ; VAR_1 . add ( new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 ) ) ; VAR_1 . add ( new TYPE_2 ( VAR_5 , VAR_6 , VAR_4 ) ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { final org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; command = METHOD_3 ( 0 , 0 , VAR_1 ) ; METHOD_4 ( command ) ; METHOD_5 ( command ) ; VAR_2 = org.mockito.Mockito . METHOD_6 ( VAR_3 class ) ; VAR_4 = org.mockito.Mockito . METHOD_6 ( VAR_5 class ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { java.lang.String VAR_2 = ( ( TYPE_3 ) ( args ) ) . VAR_3 ; if ( STRING_1 . equals ( VAR_2 ) ) { VAR_4 . setTitle ( ( model . METHOD_2 ( ) . METHOD_3 ( ) ? VAR_5 . METHOD_4 ( ) : VAR_5 . METHOD_5 ( ) ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Disk model = new TYPE_1 . Disk ( ) ; METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( model ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; TYPE_1 VAR_1 = METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 [ 1 ] } , true , true , false ) ; VAR_1 = METHOD_4 ( VAR_1 , VAR_5 , TYPE_2 . toString ( ) ) ; METHOD_5 ( VAR_1 ) ; VAR_6 . METHOD_6 ( ) ; METHOD_7 ( resource . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = null ; final java.lang.String value = VAR_3 ; final java.lang.String VAR_4 = STRING_1 ; VAR_1 . METHOD_2 ( VAR_2 , value , VAR_4 ) ; final java.lang.String VAR_5 = VAR_1 . METHOD_3 ( VAR_2 ) ; TYPE_3 . assertEquals ( value , VAR_5 ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 < ? > VAR_1 = ( ( TYPE_2 . METHOD_2 ( ) . getTable ( ) ) != null ) ? TYPE_2 . METHOD_2 ( ) . getTable ( ) . METHOD_3 ( ) : null ; if ( VAR_1 != null ) { METHOD_4 ( VAR_1 . METHOD_5 ( new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 event ) { METHOD_7 ( ) ; } } ) ) ; } } 
private static boolean METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , TYPE_1 VAR_2 , org.ovirt.engine.core.compat . Version version , org.ovirt.engine.core.common.businessentities.network.Network network ) { if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( ) ) ) { if ( TYPE_2 . METHOD_3 ( version ) ) { VAR_1 . put ( VAR_3 , ( network == null ? VAR_4 . Collections < java.lang.String > METHOD_4 ( ) : TYPE_3 . METHOD_5 ( network . getName ( ) ) ) ) ; } else { return false ; } } return true ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_3 < TYPE_2 , TYPE_4 > ( ) { protected TYPE_4 METHOD_6 ( TYPE_2 entity ) { return entity . getStatus ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; } 
public final void METHOD_1 ( TYPE_1 status , java.lang.String VAR_1 ) { java.util.ArrayList < java.lang.String > VAR_2 = null ; if ( ! ( ( VAR_2 = VAR_3 . get ( status ) ) != null ) ) { VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_3 . put ( status , VAR_2 ) ; } if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; } } 
public TYPE_1 add ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 , STRING_1 ) ; if ( METHOD_2 ( VAR_1 ) ) { VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . setId ( METHOD_5 ( VAR_1 ) ) ; } return METHOD_6 ( VAR_2 , new TYPE_3 ( map ( VAR_1 ) ) , new TYPE_4 ( VAR_1 . getName ( ) ) ) ; } 
public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_1 ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storage = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ; VAR_3 . METHOD_2 ( storage . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ; } 
protected java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { TYPE_1 user = new TYPE_1 ( ) ; user . setId ( VAR_3 [ i ] ) ; user . METHOD_2 ( VAR_2 [ i ] ) ; user . METHOD_3 ( VAR_2 [ i ] ) ; VAR_1 . add ( user ) ; } return VAR_1 ; } 
protected void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) != ( VAR_2 ) ) { METHOD_4 ( METHOD_5 ( ) , VAR_3 ) ; VAR_4 . log ( this , VAR_5 ) ; } else { METHOD_6 ( ) ; } TYPE_1 . METHOD_7 ( true ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; } 
private java.lang.String METHOD_1 ( ) { if ( VAR_1 ) { return VAR_2 ; } if ( ( VAR_3 ) == null ) { boolean VAR_4 = TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . METHOD_4 ( ) ) ; VAR_3 = ( VAR_4 && ( TYPE_1 . METHOD_5 ( TYPE_2 . getVm ( ) . METHOD_4 ( ) ) ) ) ? METHOD_6 ( ) . METHOD_7 ( ) : VAR_2 ; } return VAR_3 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , java.lang.Integer value , int VAR_3 , java.lang.String VAR_4 ) { if ( value != null ) { java.lang.String VAR_5 = value + STRING_1 ; java.lang.String VAR_6 = VAR_3 + STRING_1 ; VAR_2 . METHOD_2 ( ( value < ( VAR_7 ) ? STRING_2 : VAR_5 ) ) ; VAR_2 . METHOD_3 ( VAR_4 ) ; VAR_1 . METHOD_4 ( VAR_6 ) ; VAR_1 . METHOD_5 ( ( value != 0 ) ) ; VAR_1 . setTitle ( VAR_5 ) ; } } 
protected void METHOD_1 ( ) { java.lang.String VAR_1 = METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; org.ovirt.engine.core.common.businessentities.VM result = null ; if ( VAR_1 != null ) { result = METHOD_6 ( VAR_1 ) ; METHOD_7 ( result ) ; } else { result = METHOD_8 ( ) ; } TYPE_2 . METHOD_9 ( result , result . METHOD_10 ( ) ) ; TYPE_1 . METHOD_11 ( ) . METHOD_12 ( result ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( VAR_3 . get ( i ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { VAR_3 . METHOD_2 ( i ) ; break ; } } METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ; } 
protected TYPE_1 [ ] METHOD_1 ( ) { final int VAR_1 = METHOD_2 ( ) ; return new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( VAR_1 ) , new TYPE_4 ( ) { protected java.lang.String METHOD_3 ( ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; } } , new TYPE_5 ( VAR_2 ) } ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = true ; if ( ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) && ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_4 ( ) ) ) { addCanDoActionMessage ( VAR_2 ) ; VAR_1 = false ; } return VAR_1 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { for ( TYPE_1 VAR_1 : ( ( TYPE_2 < TYPE_1 > ) ( returnValue ) ) ) { VAR_2 . add ( METHOD_1 ( VAR_1 . getName ( ) , VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ) ; } setItems ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( VAR_1 ) ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_2 , VAR_4 , VAR_3 ) ) . when ( VAR_5 ) . METHOD_7 ( VAR_2 ) ; METHOD_8 ( cmd ) ; TYPE_3 . METHOD_9 ( cmd . validate ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) { try { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_4 = VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; java.lang.Object VAR_5 = VAR_4 . METHOD_5 ( VAR_1 , node , VAR_6 ) ; if ( VAR_5 != null ) { return new TYPE_1 ( ( ( TYPE_5 ) ( VAR_5 ) ) ) ; } return null ; } catch ( TYPE_6 e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . add ( STRING_1 ) ; METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; VAR_2 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; METHOD_6 ( disk . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( disk , 1 ) ; METHOD_9 ( disk ) ; } finally { VAR_1 . METHOD_10 ( ) ; } } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_1 , TYPE_2 . getValue ( ) , TYPE_3 . getValue ( ) ) ; validator = org.mockito.Mockito . METHOD_3 ( new TYPE_4 ( VAR_1 , new java.util.ArrayList < java.lang.String > ( ) ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_4 . METHOD_4 ( ) . getId ( ) ) ) . thenReturn ( VAR_4 . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; } 
public TYPE_1 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > METHOD_1 ( TYPE_6 VAR_1 , TYPE_7 < TYPE_8 > VAR_2 , final TYPE_7 < TYPE_3 < TYPE_4 > > VAR_3 , final TYPE_7 < TYPE_5 > VAR_4 , final TYPE_7 < TYPE_9 > VAR_5 ) { TYPE_10 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > result = new TYPE_10 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > ( VAR_1 , VAR_2 ) ; result . METHOD_2 ( VAR_3 ) ; result . METHOD_3 ( VAR_4 ) ; return result ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; java.lang.Object [ ] VAR_2 = null ; java.util.Map < java.lang.String , java.lang.Object > VAR_3 = TYPE_2 . METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_4 . assertEquals ( null , VAR_1 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 result ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ; TYPE_3 VAR_2 = result . getReturnValue ( ) ; VAR_3 . METHOD_3 ( ( ( java.lang.String ) ( VAR_2 . METHOD_4 ( ) ) ) ) ; VAR_4 . METHOD_5 ( ( ( java.lang.String ) ( VAR_2 . METHOD_4 ( ) ) ) ) ; } 
protected void METHOD_1 ( TYPE_1 node , TYPE_2 iface ) { super . METHOD_1 ( node , iface ) ; iface . METHOD_2 ( node . METHOD_3 ( VAR_1 , VAR_2 ) . VAR_3 ) ; iface . METHOD_4 ( ( ( node . METHOD_3 ( STRING_1 , VAR_2 ) ) != null ? node . METHOD_3 ( STRING_1 , VAR_2 ) . VAR_3 : STRING_2 ) ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : VAR_3 . METHOD_2 ( ) ) { java.lang.String name = TYPE_1 . METHOD_3 ( iface . getName ( ) ) ; if ( name == null ) { continue ; } else if ( ( name . equals ( VAR_1 ) ) && ( VAR_2 . equals ( iface . METHOD_4 ( ) ) ) ) { return true ; } } return false ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; TYPE_1 parameters = new TYPE_1 ( VAR_1 , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , parameters , aQuery ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; VAR_2 . add ( VAR_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; VAR_3 . setItems ( VAR_4 ) ; return VAR_3 ; } 
private static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list , boolean VAR_1 , boolean VAR_2 ) { final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : list ) { if ( ( VAR_1 && ( cluster . METHOD_2 ( ) ) ) || ( VAR_2 && ( cluster . METHOD_3 ( ) ) ) ) { VAR_3 . add ( cluster ) ; } } TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 ( ) ) ; return VAR_3 ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) ; TYPE_1 VAR_3 = org.mockito.Mockito . METHOD_3 ( VAR_4 class ) ; org.mockito.Mockito.when ( VAR_3 . getSucceeded ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . any ( VAR_5 . VdcActionType class ) , TYPE_2 . any ( VAR_6 class ) ) ) . thenReturn ( VAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 . Disk disk , TYPE_2 VAR_1 , TYPE_3 . ValidationResult VAR_2 ) { TYPE_4 VAR_3 = org.mockito.Mockito . METHOD_2 ( new TYPE_4 ( disk , VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_3 ( disk , VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_4 ( TYPE_5 . any ( VAR_5 . Guid class ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_2 ( ) ; VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_3 = dao . get ( VAR_4 ) ; VAR_5 = dao . get ( VAR_6 ) ; VAR_7 = new TYPE_1 ( ) ; VAR_7 . METHOD_4 ( STRING_1 ) ; VAR_7 . METHOD_5 ( STRING_2 ) ; VAR_7 . METHOD_6 ( VAR_8 ) ; VAR_9 = new TYPE_2 ( VAR_10 , VAR_4 ) ; } 
public java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters ) { VAR_1 . error ( STRING_1 , METHOD_2 ( ) . getName ( ) ) ; java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { VAR_2 . add ( new TYPE_1 ( vds . getId ( ) , 1 ) ) ; } return VAR_2 ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( TYPE_1 status , java.lang.String name ) { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = METHOD_2 ( status , name , VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( domain ) ) ; cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return domain ; } 
protected void METHOD_1 ( ) { if ( METHOD_2 ( ) . getEntity ( ) ) { METHOD_3 ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; METHOD_5 ( ) . setIsChangable ( false ) ; METHOD_6 ( ) . setIsChangable ( false ) ; METHOD_7 ( ) . setIsChangable ( false ) ; METHOD_8 ( ) . setIsChangable ( false ) ; } super . METHOD_1 ( ) ; } 
private static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_2 ( VAR_5 ) , VAR_1 ) ; } 
void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . to ( VAR_2 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . to ( VAR_4 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) . to ( VAR_6 ) ; METHOD_4 ( VAR_7 class , VAR_8 class , VAR_9 class , VAR_10 class ) ; METHOD_5 ( VAR_11 class ) . METHOD_6 ( VAR_12 class ) ; METHOD_5 ( VAR_13 class ) . METHOD_6 ( VAR_12 class ) ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = super . METHOD_1 ( ) ; VAR_1 . put ( TYPE_1 . name ( ) . METHOD_2 ( ) , ( ( METHOD_3 ( ) ) == null ? STRING_1 : METHOD_3 ( ) ) ) ; VAR_1 . put ( TYPE_2 . name ( ) . METHOD_2 ( ) , METHOD_4 ( ) ) ; } return VAR_1 ; } 
public static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , java.lang.String VAR_2 , final java.lang.String id , final boolean VAR_3 , final boolean VAR_4 ) { TYPE_3 < TYPE_1 > VAR_5 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_5 . METHOD_3 ( id ) , VAR_3 , VAR_4 ) ; if ( ( VAR_5 . size ( ) ) == 0 ) { return null ; } return new java.util.ArrayList < TYPE_1 > ( VAR_5 ) . get ( 0 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 vm = new TYPE_1 ( ) ; vm . METHOD_2 ( STRING_1 ) ; vm . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; vm . METHOD_5 ( new TYPE_3 ( ) ) ; TYPE_4 . METHOD_6 ( vm , STRING_2 , STRING_3 , STRING_4 ) ; } 
protected java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , TYPE_1 VAR_2 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain storage : VAR_1 ) { if ( storage . METHOD_2 ( ) . equals ( VAR_2 ) ) { VAR_3 . add ( storage ) ; } } return VAR_3 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( true , 2 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) ; VAR_1 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_3 ( VAR_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , true , VAR_5 ) ; org.mockito.Mockito . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_2 , VAR_5 ) ; org.mockito.Mockito . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_3 , VAR_5 ) ; TYPE_1 VAR_7 = org.mockito.Mockito . METHOD_5 ( VAR_8 , VAR_9 ) ; VAR_7 . METHOD_3 ( VAR_8 ) . METHOD_6 ( VAR_4 ) ; VAR_7 . METHOD_3 ( VAR_9 ) . METHOD_7 ( VAR_4 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 parameters = new TYPE_3 ( VAR_1 , TYPE_4 . getParameters ( ) . METHOD_2 ( ) , TYPE_4 . getParameters ( ) . METHOD_3 ( ) ) ; parameters . METHOD_4 ( TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ; parameters . METHOD_6 ( true ) ; return TYPE_5 . getInstance ( ) . METHOD_7 ( VAR_2 , parameters , TYPE_6 . METHOD_8 ( TYPE_4 . METHOD_9 ( ) ) ) ; } 
private TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { java.util.List < TYPE_3 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { VAR_2 . add ( METHOD_2 ( VAR_3 , vmId ) ) ; } TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , vmId ) ; VAR_4 . METHOD_3 ( VAR_5 ) ; return VAR_4 ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = STRING_1 ; final java.lang.String value = null ; final java.lang.String VAR_3 = STRING_2 ; final java.lang.String VAR_4 = STRING_3 ; VAR_1 . METHOD_2 ( VAR_2 , value ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; final java.lang.String VAR_5 = VAR_1 . METHOD_4 ( VAR_2 ) ; TYPE_3 . assertEquals ( ( ( value + VAR_4 ) + VAR_3 ) , VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 type ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( type ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_4 class ) ; VAR_3 . METHOD_3 ( VAR_5 class ) ; VAR_3 . METHOD_4 ( STRING_1 , VAR_1 . METHOD_5 ( ) ) ; VAR_3 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( ) ) ; VAR_3 . METHOD_4 ( STRING_3 ) ; VAR_3 . METHOD_4 ( ) ; } 
public java.util.ArrayList < java.lang.Integer > METHOD_1 ( ) { java.util.ArrayList < java.lang.Integer > VAR_1 = new java.util.ArrayList < > ( ) ; for ( int VAR_2 : METHOD_2 ( ) ) { java.lang.String VAR_3 = METHOD_3 ( VAR_4 . get ( VAR_2 ) , STRING_1 , null ) ; if ( STRING_2 . METHOD_4 ( VAR_3 ) ) { VAR_1 . add ( VAR_2 ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_2 = METHOD_2 ( VAR_3 , VAR_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_4 = METHOD_3 ( VAR_2 . getName ( ) ) ; METHOD_4 ( VAR_2 , VAR_4 ) ; VAR_2 . METHOD_5 ( null ) ; TYPE_1 parameters = METHOD_6 ( VAR_2 , VAR_4 ) ; TYPE_2 VAR_5 = METHOD_7 ( parameters ) ; METHOD_8 ( VAR_5 ) ; METHOD_9 ( VAR_5 ) ; METHOD_10 ( VAR_5 ) ; METHOD_11 ( VAR_5 , VAR_1 ) ; METHOD_12 ( VAR_5 ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; java.lang.String VAR_3 = ( ( java.lang.String ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( new java.lang.Object [ ] { VAR_1 } ) ; TYPE_4 VAR_4 = VAR_5 . METHOD_6 ( VAR_6 , new TYPE_5 ( null , METHOD_4 ( ) , VAR_2 ) ) ; java.util.List < TYPE_6 > VAR_7 = ( ( java.util.List < TYPE_6 > ) ( VAR_4 . getReturnValue ( ) ) ) ; return METHOD_7 ( VAR_7 ) ; } 
private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.lang.Boolean VAR_1 , java.lang.String VAR_2 , java.lang.Integer VAR_3 , java.lang.String VAR_4 , boolean VAR_5 ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ; iface . setId ( id ) ; iface . METHOD_2 ( name ) ; iface . METHOD_3 ( VAR_1 ) ; iface . METHOD_4 ( VAR_2 ) ; iface . METHOD_5 ( VAR_3 ) ; iface . METHOD_6 ( VAR_4 ) ; iface . METHOD_7 ( VAR_5 ) ; return iface ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , false ) ; cmd . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) ; TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_3 ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_4 ) ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; VAR_1 . METHOD_7 ( STRING_1 ) ; VAR_1 . METHOD_8 ( VAR_7 ) ; VAR_1 . METHOD_9 ( VAR_8 ) ; dao . METHOD_10 ( VAR_1 ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; VAR_1 . METHOD_7 ( VAR_7 ) ; VAR_1 . METHOD_8 ( VAR_8 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 id , TYPE_3 type , TYPE_4 VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 , boolean VAR_3 , boolean VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { TYPE_1 VAR_7 = TYPE_5 . METHOD_1 ( id , type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; if ( TYPE_6 . METHOD_2 ( VAR_5 ) ) { VAR_7 . METHOD_3 ( VAR_5 ) ; } return VAR_7 ; } 
private boolean METHOD_1 ( ) { return ( TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) . getId ( ) , VAR_1 , TYPE_1 . METHOD_4 ( ) , VAR_2 . VM ) ) ) ; } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 ... VAR_1 ) { if ( TYPE_3 . METHOD_2 ( version , VAR_2 ) ) { version . METHOD_3 ( new TYPE_4 ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { version . METHOD_4 ( ) . METHOD_4 ( ) . add ( VAR_3 . value ( ) ) ; } } } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_4 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_4 ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( cmd ) . METHOD_8 ( ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_4 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_5 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_6 ( ) . getSelectedItem ( ) ) ) ) ) ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = true ; if ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) { org.ovirt.engine.core.compat . Version version = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_1 = VAR_2 < java.lang.Boolean > METHOD_6 ( VAR_3 , version . getValue ( ) ) ; if ( ! VAR_1 ) { addCanDoActionMessage ( VAR_4 ) ; } } return VAR_1 ; } 
private void METHOD_1 ( ) { METHOD_2 ( null ) ; org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < TYPE_1 > VAR_3 = ( ( java.util.List < TYPE_1 > ) ( result ) ) ; METHOD_3 ( ) . setItems ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } } ; TYPE_2 . METHOD_6 ( VAR_1 ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ) , aQuery ) ; } 
protected void METHOD_1 ( ) { for ( TYPE_1 . VdcActionParametersBase VAR_1 : getParameters ( ) . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) ; } } 
protected TYPE_1 . VdcActionParametersBase METHOD_1 ( TYPE_1 . VdcActionType VAR_1 , TYPE_1 . VdcActionParametersBase parameters ) { TYPE_1 . VdcActionType VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_1 . VdcActionParametersBase VAR_3 = METHOD_3 ( ) ; if ( ( VAR_2 == ( VAR_4 ) ) || ( VAR_3 == null ) ) { return parameters ; } VAR_3 . METHOD_4 ( parameters . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; return VAR_3 ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) ) ; java.lang.String VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 ) . toString ( ) . METHOD_5 ( ) ; java.lang.String VAR_3 = vm . METHOD_6 ( ) . toString ( ) . METHOD_5 ( ) ; if ( VAR_3 . equals ( VAR_2 ) ) VAR_4 . add ( VAR_5 , VAR_2 ) ; else VAR_4 . add ( VAR_5 , VAR_3 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . StorageDomain ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; } 
protected void METHOD_1 ( TYPE_1 parameters ) { super . METHOD_2 ( parameters . METHOD_3 ( ) ) ; if ( ( ( METHOD_4 ( ) ) != null ) && ( ( METHOD_4 ( ) . getStoragePoolId ( ) ) != null ) ) { METHOD_5 ( METHOD_4 ( ) . getStoragePoolId ( ) . getValue ( ) ) ; } } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; if ( ( getVm ( ) ) != null ) { TYPE_2 . METHOD_3 ( getVm ( ) ) ; } else { TYPE_1 . METHOD_4 ( false ) ; VAR_1 . METHOD_5 ( STRING_1 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; switch ( VAR_1 . METHOD_3 ( ) ) { case NORMAL : VAR_3 . METHOD_4 ( VAR_2 ) ; break ; case ERROR : VAR_3 . error ( VAR_2 ) ; break ; case VAR_4 : case VAR_5 : default : VAR_3 . METHOD_5 ( VAR_2 ) ; break ; } } 
private static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , org.ovirt.engine.core.common.businessentities.VDS host , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface ) { TYPE_1 VAR_2 = ( TYPE_2 . METHOD_2 ( host . METHOD_3 ( ) ) ) ? new TYPE_3 ( VAR_1 , iface , host ) : new TYPE_4 ( VAR_1 , iface , host ) ; VAR_2 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_5 = METHOD_2 ( VAR_2 , STRING_2 , VAR_6 ) ; org.mockito.Mockito.when ( VAR_7 . METHOD_4 ( TYPE_1 . any ( VAR_8 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 , VAR_5 ) ) ; cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; TYPE_3 . assertEquals ( VAR_5 , cmd . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_3 ( STRING_2 , VAR_1 ) ; nic . METHOD_4 ( TYPE_1 . instance ( ) . METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 ) ; METHOD_7 ( nic ) ; TYPE_2 VAR_2 = METHOD_8 ( METHOD_9 ( nic ) ) ; METHOD_10 ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_4 = METHOD_2 ( VAR_5 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( VAR_7 , VAR_8 ) ; METHOD_6 ( VAR_9 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_7 ) ; TYPE_1 . METHOD_8 ( command , VAR_10 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.List < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_4 : VAR_2 ) { VAR_3 . add ( VAR_4 . getName ( ) ) ; } VAR_3 . add ( VAR_5 . METHOD_1 ( ) ) ; VAR_1 . METHOD_2 ( ) . setItems ( VAR_3 ) ; } 
public void setItems ( TYPE_1 value ) { java.util.ArrayList < TYPE_2 . Disk > VAR_1 = ( value != null ) ? VAR_2 . Linq < TYPE_2 . Disk > METHOD_1 ( value ) : new java.util.ArrayList < TYPE_2 . Disk > ( ) ; TYPE_3 . METHOD_2 ( VAR_1 , new TYPE_4 ( ) ) ; super . setItems ( VAR_1 ) ; METHOD_3 ( ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 id , boolean VAR_1 , boolean VAR_2 ) { return TYPE_3 . METHOD_2 ( id , VAR_3 , ( VAR_2 ? VAR_4 : VAR_5 ) , VAR_6 . Collections < java.lang.String , java.lang.Object > METHOD_3 ( ) , VAR_1 , false , null ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; METHOD_4 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 , org.ovirt.engine.core.compat.Guid VAR_4 , org.ovirt.engine.core.compat.Guid VAR_5 , org.ovirt.engine.core.compat.Guid VAR_6 ) { if ( TYPE_4 . METHOD_2 ( VAR_2 , VAR_5 ) ) { TYPE_5 . DiskImage VAR_7 = TYPE_4 . METHOD_3 ( VAR_3 , VAR_4 , VAR_6 , VAR_1 . getId ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface = METHOD_2 ( ) ; METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_2 ) ; } TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_5 ( STRING_1 ) ; VAR_3 . METHOD_6 ( STRING_2 ) ; VAR_3 . METHOD_7 ( false ) ; VAR_2 . METHOD_3 ( ) . add ( VAR_3 ) ; } 
public void METHOD_1 ( ) { java.lang.Integer VAR_1 = INT_1 ; TYPE_1 VAR_2 = dao . get ( VAR_3 ) ; TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_1 ) ; METHOD_1 ( VAR_3 , VAR_1 ) ; VAR_2 = dao . get ( VAR_3 ) ; TYPE_2 . assertEquals ( STRING_2 , VAR_2 . METHOD_3 ( ) , VAR_1 ) ; } 
private static java.lang.String METHOD_1 ( java.util.ArrayList < TYPE_1 . Disk > VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } final java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 . Disk disk : VAR_1 ) { VAR_2 . add ( disk . METHOD_2 ( ) ) ; } return TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_1 . METHOD_3 ( ) ) ) . thenReturn ( null ) ; parameters . METHOD_4 ( VAR_1 ) ; TYPE_2 . METHOD_5 ( command , VAR_5 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . METHOD_2 ( VAR_2 ) ; vds . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( vds ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 = new java.util.ArrayList < > ( ) ; if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { VAR_1 . add ( TYPE_1 . METHOD_2 ( ) ) ; } return VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , vm , VAR_1 , TYPE_2 . METHOD_5 ( ) , new java.util.ArrayList < > ( ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) ) ; java.util.List < TYPE_3 . DiskImage > VAR_1 = TYPE_4 . METHOD_3 ( TYPE_2 . getVm ( ) . METHOD_4 ( ) . METHOD_5 ( ) , true , false ) ; if ( ! ( VAR_1 . isEmpty ( ) ) ) { for ( TYPE_3 . DiskImage diskImage : VAR_1 ) { VAR_2 . add ( diskImage . METHOD_6 ( ) ) ; } METHOD_7 ( STRING_1 , TYPE_5 . METHOD_8 ( VAR_2 , STRING_2 ) ) ; } } 
protected boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 > . TYPE_3 validator = new TYPE_3 ( VAR_1 , METHOD_2 ( ) , TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ; return ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ; } 
private double METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.VM vm , int VAR_1 ) { int VAR_2 = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ; int VAR_5 = ( ( vds . METHOD_3 ( ) ) == ( VAR_6 ) ) ? 0 : VAR_3 < java.lang.Integer > METHOD_2 ( VAR_7 ) ; double VAR_8 = vds . METHOD_4 ( ) ; double VAR_9 = vds . METHOD_5 ( ) ; return ( VAR_8 / VAR_2 ) + ( ( ( VAR_9 + ( vm . METHOD_6 ( ) ) ) + VAR_5 ) / VAR_1 ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . getId ( ) , VAR_2 ) ; java.util.List < java.lang.String > result = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { result . add ( VAR_3 . METHOD_4 ( ) ) ; } TYPE_2 . METHOD_5 ( ) . METHOD_6 ( result ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; for ( TYPE_2 VAR_1 : METHOD_5 ( ) ) { TYPE_3 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , TYPE_1 . METHOD_4 ( ) ) ; } TYPE_1 . METHOD_8 ( true ) ; } 
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_5 = METHOD_3 ( VAR_3 ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.network.Network > VAR_6 = new TYPE_2 ( VAR_7 . METHOD_4 ( VAR_8 . get ( VAR_2 ) . METHOD_5 ( ) ) ) ; for ( TYPE_1 VAR_9 : VAR_1 ) { METHOD_1 ( VAR_5 , VAR_6 , VAR_9 ) ; } } 
private static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , TYPE_1 VAR_3 , java.lang.Integer VAR_4 , TYPE_1 VAR_5 ) { java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_2 > VAR_6 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_2 > ( ) ; TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 network ) { java.util.List < TYPE_1 > result = new java.util.ArrayList < > ( ) ; TYPE_3 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . list ( ) . METHOD_4 ( ) ; for ( TYPE_4 VAR_2 : VAR_1 . METHOD_5 ( ) ) { if ( network . METHOD_6 ( ) . equals ( VAR_2 . METHOD_7 ( ) ) ) { result . add ( map ( VAR_2 , network ) ) ; } } return result ; } 
protected boolean METHOD_1 ( ) { return ( ( ( ( ( ( ( ( ( ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ) && ( METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( METHOD_6 ( ) ) ) && ( METHOD_7 ( ) ) ) && ( METHOD_8 ( ) ) ) && ( METHOD_9 ( ) ) ) && ( METHOD_10 ( ) ) ) && ( METHOD_11 ( ) ) ) && ( METHOD_12 ( ) ) ) && ( METHOD_13 ( ) ) ; } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; VAR_3 . put ( VAR_2 , org.ovirt.engine.core.common.businessentities.DiskImage . METHOD_3 ( disk ) ) ; disk . setId ( VAR_2 ) ; disk . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; for ( int i = 0 ; i < ( ( VAR_1 . size ( ) ) - 1 ) ; i ++ ) { VAR_1 . get ( i ) . setId ( disk . getId ( ) ) ; } } 
protected void METHOD_1 ( TYPE_1 model , int VAR_1 ) { METHOD_2 ( model ) ; assertEquals ( model . getId ( ) , java.lang.String.valueOf ( VAR_2 [ VAR_1 ] ) ) ; assertEquals ( model . METHOD_3 ( ) , VAR_3 ) ; assertEquals ( model . METHOD_4 ( ) , VAR_4 [ VAR_1 ] ) ; assertEquals ( model . METHOD_5 ( ) , VAR_5 [ VAR_1 ] ) ; assertEquals ( model . METHOD_6 ( ) , VAR_6 [ VAR_1 ] ) ; } 
void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . to ( VAR_2 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . to ( VAR_4 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) . to ( VAR_6 ) ; METHOD_2 ( ) . METHOD_3 ( VAR_7 class ) . to ( VAR_8 ) ; METHOD_4 ( VAR_9 class , VAR_10 class , VAR_11 class , VAR_12 class , VAR_13 class ) ; METHOD_5 ( VAR_14 class ) . METHOD_6 ( VAR_15 class ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; java.lang.String name = VAR_1 . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 . StoragePool ) ) ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVdsGroup ( ) ) != null ) { METHOD_2 ( ( ( TYPE_1 . getVdsGroup ( ) . getStoragePoolId ( ) ) != null ? TYPE_1 . getVdsGroup ( ) . getStoragePoolId ( ) . getValue ( ) : VAR_1 ) ) ; } } 
private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_2 . Disk > VAR_1 = ( ( java.util.ArrayList < TYPE_2 . Disk > ) ( returnValue ) ) ; METHOD_3 ( VAR_1 ) ; } } ) , getVm ( ) . getId ( ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < > ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( STRING_3 ) ; VAR_1 . add ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; VAR_1 . add ( VAR_4 ) ; return VAR_1 ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) { TYPE_1 . assertEquals ( java.lang.String . METHOD_2 ( STRING_1 , VAR_1 , VAR_2 , ( VAR_3 == ( - 1 ) ? STRING_2 : VAR_3 == 1 ? STRING_3 : STRING_4 ) ) , java.lang.Integer . METHOD_3 ( VAR_3 ) , java.lang.Integer . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_1 , VAR_2 ) ) ) ; } 
static void METHOD_1 ( TYPE_1 model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; assertEquals ( VAR_3 [ VAR_1 ] , model . getName ( ) ) ; assertEquals ( VAR_4 [ VAR_1 ] , model . METHOD_2 ( ) ) ; assertEquals ( VAR_5 [ VAR_1 ] . value ( ) , model . getStatus ( ) . METHOD_3 ( ) ) ; } 
public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { boolean result = false ; if ( ( VAR_1 != null ) && ( VAR_2 != null ) ) { result = ( VAR_3 . METHOD_2 ( VAR_1 ) ) ? VAR_3 . METHOD_2 ( VAR_2 ) : VAR_4 . METHOD_2 ( VAR_2 ) ; } return result ; } 
public void METHOD_1 ( ) { java.lang.Object [ ] VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 [ 1 ] = new java.util.HashMap < > ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; TYPE_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_1 , VAR_2 ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String value , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = TYPE_4 . get ( ) . METHOD_2 ( STRING_1 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; TYPE_3 VAR_4 = TYPE_4 . get ( ) . METHOD_2 ( STRING_2 ) ; VAR_4 . METHOD_5 ( value ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; } 
protected TYPE_1 . Disk METHOD_1 ( TYPE_1 . Disk model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) ; model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) ; model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ; model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) ; model . METHOD_8 ( null ) ; return model ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) ; METHOD_3 ( cmd , VAR_1 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( vds ) . getStatus ( ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( vds ) . getStatus ( ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( null ) ; METHOD_3 ( STRING_1 ) ; final TYPE_1 parameters = new TYPE_1 ( ) ; parameters . METHOD_4 ( METHOD_5 ( ) . METHOD_6 ( ) . getId ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_7 ( VAR_1 , parameters , new TYPE_2 ( ) { public void METHOD_8 ( TYPE_3 result ) { METHOD_9 ( result ) ; } } , this ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_2 params = new TYPE_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) . getId ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_6 ( ) ) ; return METHOD_7 ( VAR_3 , params ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; java.util.List < java.lang.String > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; TYPE_4 . METHOD_5 ( STRING_2 , VAR_2 . METHOD_6 ( STRING_2 ) ) ; TYPE_4 . METHOD_7 ( STRING_3 , VAR_2 . METHOD_6 ( STRING_3 ) ) ; } 
private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return METHOD_2 ( ( ( ( iface . getName ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) , false , null , null , VAR_2 , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; } 
private void METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network network : VAR_2 ) { VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) ; } METHOD_3 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 0 , null ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ; assertEquals ( INT_1 , VAR_2 . METHOD_9 ( ) . getStatus ( ) ) ; } } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.lang.String VAR_1 ; if ( ( vm . METHOD_2 ( ) ) == null ) { TYPE_2 VAR_2 = TYPE_2 . from ( vm . METHOD_3 ( ) , vm . METHOD_4 ( ) , vm . METHOD_5 ( ) ) ; VAR_1 = VAR_2 . METHOD_1 ( ) ; } else { VAR_1 = METHOD_6 ( vm . METHOD_3 ( ) ) ; } return TYPE_3 . METHOD_7 ( VAR_1 ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . getReturnValue ( ) . METHOD_2 ( false ) ; if ( ( TYPE_1 . METHOD_3 ( ) ) != null ) { TYPE_2 VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; if ( VAR_1 != null ) { TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_1 . getId ( ) , VAR_2 ) ; } } TYPE_1 . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; final org.ovirt.engine.core.compat.Guid VAR_3 = VAR_4 ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_5 = VAR_1 . METHOD_5 ( ) ; TYPE_3 . assertEquals ( VAR_4 , VAR_5 . getId ( ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) ; METHOD_2 ( VAR_3 class ) . to ( VAR_4 class ) ; METHOD_2 ( VAR_5 class ) . to ( VAR_6 class ) ; METHOD_2 ( VAR_7 class ) . to ( VAR_8 class ) ; METHOD_2 ( VAR_9 class ) . to ( VAR_10 class ) ; METHOD_2 ( VAR_11 class ) . to ( VAR_12 class ) ; METHOD_2 ( VAR_13 class ) . to ( VAR_14 class ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; VAR_1 . setItems ( ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; } 
private TYPE_1 [ ] METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_4 = VAR_2 [ 0 ] ; VAR_2 [ 0 ] = VAR_2 [ 1 ] ; VAR_2 [ 1 ] = VAR_4 ; VAR_2 [ 0 ] . METHOD_3 ( true ) ; METHOD_4 ( VAR_2 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . METHOD_8 ( ) ) ; } 
protected boolean validate ( TYPE_1 . ValidationResult VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { VAR_2 . add ( VAR_1 . METHOD_2 ( ) . name ( ) ) ; if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { for ( java.lang.String VAR_3 : VAR_1 . METHOD_3 ( ) ) { VAR_2 . add ( VAR_3 ) ; } } } return VAR_1 . METHOD_1 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 = new java.util.ArrayList < > ( ) ; if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { VAR_1 . add ( TYPE_1 . METHOD_2 ( ) ) ; } return VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , vm , VAR_1 , VAR_3 . Collections < org.ovirt.engine.core.compat.Guid > METHOD_5 ( ) , vm . METHOD_6 ( ) , new java.util.ArrayList < > ( ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 , boolean VAR_4 , org.ovirt.engine.core.compat.Guid VAR_5 , java.util.Map < java.lang.String , java.lang.String > VAR_6 ) { TYPE_2 . METHOD_2 ( VAR_1 , VAR_7 , false ) ; TYPE_3 tempVar = new TYPE_3 ( VAR_1 , VAR_2 , VAR_6 ) ; tempVar . METHOD_3 ( VAR_4 ) ; tempVar . METHOD_4 ( VAR_5 ) ; tempVar . METHOD_5 ( VAR_3 ) ; TYPE_4 . getInstance ( ) . METHOD_6 ( VAR_8 , tempVar , TYPE_2 . METHOD_7 ( ) ) ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( final int VAR_1 , final int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_9 ( ) ; return vm ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; TYPE_3 . METHOD_6 ( validator . METHOD_1 ( ) , TYPE_4 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_2 ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; } else if ( TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_3 ) ) { METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( true ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; TYPE_2 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_3 . toString ( ) ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , STRING_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( model ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_2 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = dao . get ( TYPE_1 . toString ( ) ) ; VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_3 ( STRING_2 ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; } 
public void METHOD_1 ( TYPE_1 status , boolean VAR_1 ) { this . VAR_2 = status ; if ( VAR_1 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) ; try { TYPE_4 . METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) ; } finally { TYPE_3 . METHOD_6 ( VAR_3 ) ; } } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( 1 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( VAR_3 , true ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_7 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( false ) ; TYPE_3 user = org.mockito.Mockito . METHOD_8 ( VAR_5 class ) ; VAR_6 . METHOD_9 ( VAR_7 , user ) ; VAR_6 . METHOD_10 ( VAR_7 , VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 model = ( ( TYPE_3 ) ( sender ) ) ; java.lang.String VAR_2 = VAR_3 ; if ( ( STRING_1 . equals ( VAR_2 ) ) || ( STRING_2 . equals ( VAR_2 ) ) ) { METHOD_2 ( model ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) ; org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) ; TYPE_3 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_4 . METHOD_9 ( ) ) ; } 
private boolean METHOD_1 ( TYPE_1 . VdcQueryReturnValue returnValue , TYPE_2 model ) { model . METHOD_2 ( null ) ; if ( ! ( returnValue . getSucceeded ( ) ) ) { model . METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( returnValue . METHOD_5 ( ) ) ) ; METHOD_6 ( ) . setEntity ( false ) ; return true ; } return false ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 1 ] } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
private java.lang.String METHOD_1 ( ) { switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) { return STRING_1 ; } else { return STRING_2 ; } case VAR_4 : return STRING_3 ; case VAR_5 : return STRING_4 ; case VAR_6 : return STRING_5 ; } throw new TYPE_1 ( ( STRING_6 + ( VAR_1 . toString ( ) ) ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 ) ) ; METHOD_4 ( cmd ) ; cmd . METHOD_1 ( ) ; TYPE_1 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . any ( VAR_4 . VDS class ) , TYPE_2 . any ( VAR_5 class ) ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { boolean VAR_3 = true ; if ( VAR_1 != null ) { try { TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 , VAR_5 < java.lang.String > METHOD_2 ( VAR_6 ) , true ) ; if ( ! ( TYPE_2 . METHOD_3 ( VAR_1 , VAR_4 ) ) ) { VAR_3 = false ; } } catch ( TYPE_3 e ) { VAR_7 . METHOD_4 ( STRING_1 , VAR_2 , TYPE_4 . METHOD_5 ( e ) ) ; } } return VAR_3 ; } 
static < TYPE_1 extends TYPE_2 < org.ovirt.engine.core.compat.Guid > & TYPE_3 > TYPE_4 . ValidationResult METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.lang.String VAR_3 , TYPE_5 . EngineMessage VAR_4 , TYPE_6 < TYPE_1 > map ) { boolean VAR_5 = ( VAR_2 != null ) && ( VAR_3 != null ) ; java.lang.String [ ] VAR_6 = TYPE_7 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; return TYPE_8 . METHOD_3 ( VAR_4 , VAR_6 ) . when ( ( VAR_5 && ( TYPE_7 . METHOD_4 ( VAR_2 , VAR_3 , map ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 } ) ) ; METHOD_4 ( resource . METHOD_5 ( new TYPE_1 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 parameters = METHOD_2 ( ) ; parameters . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_5 ( ) ) ; METHOD_6 ( parameters ) ; METHOD_7 ( ) ; TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) ; TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_2 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_4 ( STRING_5 ) ; VAR_5 . METHOD_5 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; } 
private TYPE_1 . Network METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) { for ( TYPE_1 . Network VAR_2 : VAR_3 . METHOD_3 ( ) ) { if ( VAR_2 . METHOD_4 ( ) . equals ( VAR_1 ) ) return VAR_2 ; } } return null ; } 
protected void METHOD_1 ( ) { if ( ( ( TYPE_1 . getStoragePoolId ( ) ) == null ) || ( TYPE_2 . equals ( TYPE_1 . getStoragePoolId ( ) ) ) ) { METHOD_2 ( ( ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . METHOD_3 ( ) . getStoragePoolId ( ) ) != null ) ? TYPE_1 . METHOD_3 ( ) . getStoragePoolId ( ) . getValue ( ) : VAR_1 ) ) ; } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao . METHOD_2 ( VAR_1 , true ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_5 ( ) . METHOD_6 ( ) , VAR_3 ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface , java.lang.String VAR_1 ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_2 = METHOD_2 ( ) . get ( iface . getName ( ) ) ; return ( VAR_2 == null ) || ( ! ( VAR_1 . equals ( VAR_2 . METHOD_3 ( ) ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( false , VAR_1 ) ; cmd . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 class ) ) ; TYPE_2 . assertEquals ( VAR_4 , cmd . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , params ) ; if ( ( VAR_1 == null ) || ( ! ( VAR_1 . getSucceeded ( ) ) ) ) { VAR_3 . METHOD_3 ( STRING_1 , params . METHOD_4 ( ) ) ; } else if ( VAR_1 . getSucceeded ( ) ) { VAR_3 . METHOD_5 ( STRING_2 , params . METHOD_4 ( ) ) ; } } catch ( TYPE_3 VAR_4 ) { VAR_3 . error ( STRING_3 , VAR_4 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 0 ) ; METHOD_2 ( 0 ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , VAR_4 } , true , true ) ) ; METHOD_5 ( resource . METHOD_6 ( TYPE_1 . getModel ( 0 , false ) ) , 0 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; long VAR_2 = TYPE_2 . METHOD_3 ( ) ; VAR_2 -= INT_1 ; final TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; final java.lang.String VAR_4 = STRING_1 ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( ) ; final boolean result = VAR_1 . METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( result ) ; } 
public boolean METHOD_1 ( TYPE_1 iface , java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > VAR_1 ) { java.lang.String VAR_2 = iface . METHOD_2 ( ) ; return ( VAR_2 == null ) || ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) && ( VAR_1 . get ( VAR_2 ) . METHOD_4 ( ) ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( ) ) ; if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_3 ( ) ) ; } VAR_2 = true ; METHOD_6 ( null ) ; } 
protected void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; if ( ! VAR_1 ) { VAR_3 . METHOD_4 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) ; } org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_4 . any ( VAR_5 class ) , TYPE_4 . any ( VAR_6 class ) ) ) . thenReturn ( VAR_3 ) ; } 
public void METHOD_1 ( ) { validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( ) ) ; TYPE_3 . METHOD_4 ( validator . METHOD_1 ( TYPE_4 . instance ( ) . METHOD_5 ( VAR_4 class ) ) , TYPE_5 . METHOD_6 ( ) ) ; } 
public TYPE_1 . VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , TYPE_2 VAR_1 , boolean VAR_2 ) { if ( ( ! ( vds . METHOD_1 ( ) . equals ( getVm ( ) . METHOD_2 ( ) ) ) ) || ( ( vds . METHOD_3 ( ) ) != ( VAR_3 ) ) ) { VAR_1 . append ( STRING_1 ) ; return VAR_4 ; } return null ; } 
private void METHOD_1 ( ) { java.util.List VAR_1 = ( ( ( METHOD_2 ( ) ) != null ) && ( ( getSelectedItem ( ) ) != null ) ) ? METHOD_2 ( ) : new java.util.ArrayList ( ) ; METHOD_3 ( ) . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 1 ) ) ; METHOD_5 ( ) . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 1 ) ) ; METHOD_6 ( ) . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 1 ) ) ; } 
protected void METHOD_1 ( ) { frontend . METHOD_2 ( VAR_1 ) ; frontend . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; frontend . METHOD_5 ( ) . METHOD_4 ( new TYPE_1 ( ) { public void METHOD_6 ( TYPE_2 VAR_3 , java.lang.Object sender , TYPE_3 args ) { user . METHOD_7 ( ) ; } } ) ; frontend . METHOD_8 ( METHOD_9 ( ) ) ; TYPE_4 . getInstance ( ) . METHOD_10 ( new TYPE_5 ( TYPE_6 . METHOD_11 ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) ; VAR_1 . METHOD_2 ( this , STRING_1 , new TYPE_3 [ ] { } , new java.lang.Object [ ] { } , VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) , VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) , VAR_4 ) ; VAR_5 . METHOD_4 ( STRING_2 ) ; } 
public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_5 ) ; TYPE_3 . log ( VAR_3 , VAR_6 ) ; return TYPE_4 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_5 , VAR_7 , false ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; if ( ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( METHOD_4 ( ) ) ) { super . METHOD_1 ( ) ; } else { TYPE_1 . METHOD_5 ( false ) ; VAR_1 . METHOD_6 ( STRING_1 , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( VAR_1 . getId ( ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( STRING_1 , command . validate ( ) ) ; METHOD_8 ( VAR_5 ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( STRING_1 , STRING_2 , VAR_3 , STRING_1 , TYPE_2 . getValue ( ) , TYPE_3 . getValue ( ) ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_4 . METHOD_4 ( ) ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( this . VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { return this . VAR_2 . get ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ; } throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } 
private void METHOD_1 ( final TYPE_1 < ? > command , final TYPE_2 result ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( command . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( result ) ; if ( ! ( result . METHOD_5 ( ) ) ) { VAR_1 . METHOD_6 ( VAR_3 ) ; } else if ( TYPE_4 . equals ( VAR_1 . METHOD_7 ( ) ) ) { VAR_1 . METHOD_6 ( ( result . getSucceeded ( ) ? VAR_4 : VAR_5 ) ) ; } VAR_2 . METHOD_8 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( null ) ; METHOD_4 ( ) . METHOD_5 ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( METHOD_4 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) ) ; TYPE_2 . assertEquals ( STRING_1 , 2 , result . size ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getVm ( ) ) ; VAR_4 . METHOD_5 ( ) ; METHOD_6 ( resource . list ( ) ) ; } 
private void METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 { java.lang.String VAR_2 ; if ( VAR_1 != null ) { VAR_2 = ( VAR_1 instanceof java.lang.Boolean ) ? ( ( java.lang.Boolean ) ( VAR_1 ) ) . toString ( ) : java.lang.Boolean . toString ( true ) ; } else { VAR_2 = java.lang.Boolean . toString ( false ) ; } METHOD_2 ( VAR_2 ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) , TYPE_2 . getParameters ( ) . METHOD_7 ( ) ) ; TYPE_2 . METHOD_8 ( ) . METHOD_9 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( VAR_3 ) . get ( VAR_4 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( true ) ) . when ( VAR_5 ) . get ( TYPE_1 . any ( VAR_6 . Guid class ) ) ; } 
public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_1 template ) { TYPE_1 model = ( template != null ) ? template : new TYPE_1 ( ) ; model . METHOD_1 ( VAR_1 ) ; model . setId ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , true ) . toString ( ) ) ; return model ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } } 
private boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( ( ( VAR_3 . size ( ) ) + ( VAR_4 . size ( ) ) ) > ( VAR_5 < java.lang.Integer > METHOD_2 ( VAR_6 ) ) ) { throw new TYPE_2 ( ) ; } VAR_4 . METHOD_3 ( VAR_3 ) ; return true ; } 
private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ; VAR_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_2 ) ) ; VAR_3 . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) ) ; return VAR_3 ; } 
private void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage image : VAR_2 ) { VAR_1 . add ( image . METHOD_2 ( ) ) ; } TYPE_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_1 ) ; } 
protected void METHOD_1 ( ) { if ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; TYPE_1 . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( ) { if ( VAR_4 . METHOD_5 ( ) ) { METHOD_6 ( ) ; } } } ) ; } else { VAR_4 . METHOD_7 ( ) ; VAR_3 . METHOD_2 ( STRING_2 ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) ; METHOD_4 ( cmd ) ; METHOD_5 ( false , VAR_2 ) ; TYPE_1 . METHOD_6 ( cmd . METHOD_7 ( ) ) ; cmd . METHOD_8 ( ) ; TYPE_1 . assertEquals ( cmd . METHOD_9 ( ) , VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( 1 , ( - INT_1 ) , ( - INT_2 ) , INT_2 ) ; TYPE_2 . assertEquals ( STRING_1 , 0 , VAR_2 ) ; TYPE_2 . assertEquals ( STRING_2 , INT_3 , VAR_3 ) ; TYPE_2 . assertEquals ( STRING_3 , INT_4 , VAR_4 ) ; TYPE_2 . assertEquals ( STRING_4 , INT_2 , VAR_5 ) ; TYPE_2 . assertEquals ( STRING_5 , 0 , VAR_6 ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( ) , null , true ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . getInstance ( ) . METHOD_9 ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( INT_1 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) { org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; if ( ! VAR_1 ) { VAR_4 . METHOD_4 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) ; } org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_6 ) , TYPE_4 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_4 ) ; } 
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > METHOD_1 ( java.util.List < java.lang.String > VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = new java.util.ArrayList < > ( ) ; for ( java.lang.String VAR_2 : VAR_1 ) { try { if ( ! ( VAR_3 . METHOD_2 ( VAR_2 ) ) ) { vms . add ( VAR_3 . METHOD_3 ( VAR_2 ) ) ; } } catch ( TYPE_1 VAR_4 ) { METHOD_4 ( VAR_4 . getName ( ) , VAR_4 . METHOD_5 ( ) ) ; } } return vms ; } 
public static synchronized java.lang.String [ ] METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { return TYPE_2 . METHOD_2 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 } : TYPE_2 . METHOD_3 ( storageDomain ) ? new java.lang.String [ ] { STRING_5 , STRING_4 } : TYPE_2 . METHOD_4 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_5 , STRING_3 , STRING_6 } : new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_5 , STRING_4 } ; } 
public void METHOD_1 ( TYPE_1 result ) { java.util.List < TYPE_2 . VdcQueryReturnValue > VAR_1 = result . METHOD_2 ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 . get ( 0 ) . getReturnValue ( ) ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_3 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( VAR_1 . get ( 1 ) . getReturnValue ( ) ) ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . add ( TYPE_1 . METHOD_3 ( 1 , VAR_2 ) ) ; METHOD_4 ( ) ; command . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_4 ) ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 ) . METHOD_9 ( TYPE_2 . METHOD_8 ( VAR_1 ) , TYPE_2 . any ( VAR_5 . Guid class ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.common.businessentities.VM VAR_2 ) { TYPE_2 VAR_3 = VAR_2 . getStatus ( ) ; if ( ( VAR_3 == ( VAR_4 ) ) && ( org.ovirt.engine.core.common.businessentities.VM . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) { VAR_5 . add ( VAR_1 . getId ( ) ) ; VAR_6 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) ) ; VAR_2 . METHOD_5 ( null ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( METHOD_4 ( 2 , false ) ) ) ; METHOD_5 ( cmd ) ; org.mockito.Mockito.doReturn ( getVdsGroup ( false ) ) . when ( VAR_1 ) . get ( org.mockito.Mockito . any ( VAR_2 . Guid class ) ) ; org.mockito.Mockito.doReturn ( getVdsGroup ( false ) ) . when ( VAR_1 ) . METHOD_6 ( org.mockito.Mockito . any ( VAR_2 . Guid class ) ) ; TYPE_1 . METHOD_7 ( cmd , VAR_3 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VmTemplate template , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 , boolean VAR_3 ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_4 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( template . getStoragePoolId ( ) ) ; TYPE_1 . METHOD_1 ( template , VAR_4 , VAR_1 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; dao . METHOD_3 ( VAR_1 ) ; dao . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { boolean VAR_1 = METHOD_2 ( vm ) ; if ( ( ( vm . METHOD_3 ( ) ) || ( ( vm . getStatus ( ) ) == ( VAR_2 ) ) ) || VAR_1 ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_8 ( ) ; command . METHOD_9 ( ) ; TYPE_2 . METHOD_10 ( command ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( VAR_2 ) ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; TYPE_3 returnValue = VAR_4 ; if ( ( returnValue == null ) || ( ! ( returnValue . getSucceeded ( ) ) ) ) { VAR_2 = null ; VAR_1 . METHOD_3 ( ) ; } else { METHOD_4 ( ) ; } } 
private void METHOD_1 ( TYPE_1 model ) { if ( ( VAR_1 ) == null ) { return ; } TYPE_2 VAR_2 = model . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . METHOD_4 ( ) ; if ( VAR_2 == null ) { return ; } VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; VAR_2 . METHOD_7 ( ) . METHOD_6 ( VAR_1 ) ; VAR_2 . METHOD_8 ( ) . METHOD_6 ( VAR_1 ) ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , java.util.ArrayList < java.lang.String > VAR_3 , java.lang.String VAR_4 ) { boolean result = TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_4 ) ; if ( ! result ) { VAR_3 . add ( TYPE_3 . toString ( ) ) ; VAR_3 . add ( java.lang.String . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) ) ) ; VAR_3 . add ( java.lang.String . METHOD_2 ( STRING_2 , TYPE_2 . METHOD_4 ( VAR_1 , VAR_4 ) ) ) ; } return result ; } 
protected java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 type ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : VAR_1 ) { TYPE_3 status = VAR_3 . METHOD_2 ( ) ; if ( ( ( VAR_3 . METHOD_3 ( ) ) == type ) && ( ( ( VAR_4 ) == status ) || ( ( VAR_5 ) == status ) ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; resource . METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , false , true , STRING_2 ) ) ; try { resource . METHOD_5 ( TYPE_1 . getModel ( 0 ) ) ; METHOD_6 ( STRING_3 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , INT_1 ) ; } } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_5 ( VAR_5 ) ; org.mockito.Mockito.doReturn ( vds ) . when ( VAR_1 ) . get ( VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = null ; try { VAR_2 = TYPE_3 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_4 VAR_3 ) { throw new TYPE_2 ( ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) + STRING_2 ) , VAR_3 ) ; } java.lang.Boolean VAR_4 = VAR_2 . METHOD_3 ( VAR_5 ) ; if ( ( VAR_4 != null ) && ( ! ( VAR_4 . METHOD_4 ( ) ) ) ) { return ; } METHOD_5 ( VAR_2 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , boolean VAR_5 , boolean VAR_6 , boolean VAR_7 ) { this . VAR_1 = VAR_1 ; this . VAR_7 = VAR_7 ; METHOD_2 ( ) . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) . getTable ( ) . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( ) { public void METHOD_6 ( TYPE_3 event ) { VAR_1 . METHOD_7 ( METHOD_8 ( ) ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; } } ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) { METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; try { resource . METHOD_7 ( ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_9 ( VAR_2 . METHOD_10 ( ) ) ; assertEquals ( INT_1 , VAR_2 . METHOD_10 ( ) . getStatus ( ) ) ; } } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { if ( ( VAR_4 . getSelectedItem ( ) ) == null ) { VAR_2 . METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( VAR_4 . getSelectedItem ( ) ) ) ) ; } } return VAR_2 ; } 
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_4 . METHOD_2 ( VAR_2 . METHOD_6 ( ) ) ; VAR_5 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_7 ( VAR_2 . METHOD_9 ( ) ) ; } 
public static void METHOD_1 ( TYPE_1 disk , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( disk ) ; TYPE_2 . METHOD_4 ( new TYPE_3 ( disk . getId ( ) , vmId ) , VAR_1 , VAR_2 , null , true , false ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 from ) { TYPE_1 to = new TYPE_1 ( ) ; if ( from . METHOD_2 ( ) ) { to . METHOD_3 ( from . METHOD_4 ( ) ) ; } if ( from . METHOD_5 ( ) ) { to . METHOD_6 ( TYPE_3 . METHOD_7 ( from . METHOD_8 ( ) ) ) ; } return to ; } 
public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( STRING_1 ) ; dao . METHOD_4 ( VAR_1 ) ; TYPE_1 result = dao . get ( VAR_1 . getId ( ) , TYPE_2 . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( result . equals ( VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { if ( ( storage . getSelectedItem ( ) ) == null ) { VAR_2 . METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( storage . getSelectedItem ( ) ) ) ) ; } } return VAR_2 ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) . addValue ( STRING_2 , VAR_1 . METHOD_4 ( ) ) . addValue ( STRING_3 , VAR_1 . METHOD_5 ( ) ) . addValue ( STRING_4 , VAR_1 . METHOD_6 ( ) ) . addValue ( STRING_5 , VAR_1 . METHOD_7 ( ) ) . addValue ( STRING_6 , VAR_1 . METHOD_8 ( ) ) . addValue ( STRING_7 , VAR_1 . METHOD_9 ( ) ) ; } 
protected int METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return ( vds . METHOD_2 ( ) ) == ( VAR_1 ) ? 0 : ( ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) ) * ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_4 ) ) ) / ( vds . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( null ) ; METHOD_4 ( ) . METHOD_5 ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > result = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( METHOD_4 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) ) ; TYPE_2 . assertEquals ( STRING_1 , 2 , result . size ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = new TYPE_1 ( ) ; VAR_2 . setId ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_2 . METHOD_5 ( VAR_5 ) ; VAR_2 . METHOD_6 ( FLOAT_1 ) ; VAR_2 . METHOD_7 ( FLOAT_1 ) ; VAR_2 . METHOD_8 ( FLOAT_1 ) ; VAR_2 . METHOD_9 ( FLOAT_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_2 ( ) ; METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , ( ( iface . METHOD_6 ( ) ) + 1 ) , iface . METHOD_7 ( ) , METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ; TYPE_1 . METHOD_3 ( VAR_1 ) ; java.lang.String name = VAR_1 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 . StoragePool ) ) ) ; } 
private static java.lang.String [ ] METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.lang.String VAR_3 ) { return new java.lang.String [ ] { java.lang.String . METHOD_2 ( STRING_1 , VAR_1 ) , java.lang.String . METHOD_2 ( STRING_2 , VAR_2 ) , java.lang.String . METHOD_2 ( STRING_3 , VAR_3 ) } ; } 
public TYPE_1 list ( ) { TYPE_1 VAR_1 ; if ( METHOD_1 ( ) ) { VAR_1 = METHOD_2 ( METHOD_3 ( VAR_2 , METHOD_4 ( ) ) ) ; } else { VAR_1 = METHOD_2 ( METHOD_3 ( VAR_3 . Network ) ) ; } for ( TYPE_2 . Network network : VAR_1 . METHOD_5 ( ) ) { network . METHOD_6 ( null ) ; } return VAR_1 ; } 
public static TYPE_1 < TYPE_2 > METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 < TYPE_3 > VAR_2 ) { java.util.List < TYPE_2 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 user : VAR_2 ) { VAR_3 . add ( TYPE_4 . METHOD_2 ( VAR_1 , user ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( cmd . METHOD_6 ( ) ) ; org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( VAR_3 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( TYPE_1 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 result ) { if ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) { return ; } TYPE_2 VAR_1 = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ; TYPE_3 VAR_2 = result . getReturnValue ( ) ; org.ovirt.engine.core.compat.Guid Guid = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_3 ( ) ) ) ; VAR_1 . METHOD_4 ( Guid ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) , VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) , VAR_4 . METHOD_6 ( ) ) ; this . VAR_5 = VAR_1 ; METHOD_7 ( VAR_1 ) ; return VAR_1 ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . get ( METHOD_3 ( ) . getId ( ) ) ; VAR_2 . METHOD_4 ( METHOD_3 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( VAR_2 ) ; } 
public < TYPE_1 extends java.lang.Object > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . METHOD_4 ( ) ; return ( ( TYPE_1 ) ( VAR_3 . METHOD_5 ( VAR_2 , VAR_1 , VAR_3 . METHOD_6 ( VAR_2 ) ) ) ) ; } 
private void METHOD_1 ( ) { boolean VAR_1 = ( ! ( METHOD_2 ( ) ) ) && ( ( ( METHOD_3 ( ) ) == null ) || ( ( TYPE_1 . METHOD_4 ( METHOD_3 ( ) ) ) == 0 ) ) ; METHOD_5 ( VAR_1 ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters ) ) ; org.mockito.Mockito.when ( VAR_1 . getParameters ( ) ) . thenReturn ( parameters ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_4 ) ) . thenReturn ( null ) ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ; TYPE_2 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( STRING_2 ) ) ; TYPE_2 . METHOD_4 ( STRING_3 , VAR_1 . METHOD_5 ( STRING_3 ) ) ; TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_3 ( STRING_4 ) . length ) == 0 ) ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ; VAR_3 . add ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_2 ) ; } 
protected void METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_1 = METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = VAR_1 . METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_10 ( ) ) ; TYPE_1 . METHOD_11 ( ) . METHOD_12 ( VAR_2 ) ; } 
protected TYPE_1 METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = new TYPE_2 < > ( ) ; VAR_1 . put ( STRING_1 , STRING_2 ) ; return new TYPE_1 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_2 ) , VAR_3 , STRING_3 , STRING_4 , 2 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , false , false , STRING_5 , VAR_1 , null ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_1 = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_3 ( ) . setItems ( VAR_1 ) ; METHOD_3 ( ) . setSelectedItem ( null ) ; } 
public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) ; if ( ( TYPE_1 . getVm ( ) ) != null ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . getId ( ) ) ; TYPE_2 . METHOD_4 ( TYPE_1 . getVm ( ) ) ; } else { TYPE_1 . METHOD_5 ( false ) ; log . METHOD_6 ( STRING_1 ) ; } TYPE_1 . METHOD_7 ( true ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer . valueOf ( 0 ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
private java.util.List < TYPE_1 . Network > METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 VAR_2 = getEntity ( VAR_3 . VDSGroup class , VAR_4 , new TYPE_3 ( METHOD_2 ( VAR_1 ) ) , null ) . getStoragePoolId ( ) ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( VAR_2 ) ) ; return METHOD_3 ( VAR_5 , params ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_4 = METHOD_2 ( VAR_5 ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_6 ) ; METHOD_5 ( VAR_7 , VAR_8 ) ; METHOD_6 ( VAR_9 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_7 ) ; TYPE_1 . METHOD_8 ( command , VAR_10 ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , boolean VAR_3 ) { if ( VAR_4 < java.lang.Boolean > METHOD_2 ( VAR_5 ) ) { VAR_6 . METHOD_3 ( STRING_1 ) ; } boolean returnValue = true ; if ( VAR_1 == null ) { returnValue = METHOD_4 ( VAR_2 , VAR_3 ) ; } else { returnValue = METHOD_5 ( VAR_1 , VAR_3 ) ; } if ( VAR_4 < java.lang.Boolean > METHOD_2 ( VAR_5 ) ) { VAR_6 . METHOD_3 ( STRING_2 , returnValue ) ; } return returnValue ; } 
protected TYPE_1 getName ( TYPE_2 item ) { TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . append ( super . getName ( item ) ) ; VAR_1 . METHOD_1 ( STRING_1 ) ; VAR_1 . METHOD_1 ( item . METHOD_2 ( ) ) ; VAR_1 . METHOD_1 ( STRING_2 ) ; return VAR_1 . METHOD_3 ( ) ; } 
protected TYPE_1 add ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 ) ; TYPE_3 parameters = new TYPE_3 ( ) ; TYPE_2 map = map ( VAR_1 ) ; parameters . METHOD_2 ( map ) ; return METHOD_3 ( VAR_2 , parameters , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_2 . METHOD_2 ( ) ; return ( ( ( ( VAR_3 != null ) && ( ( VAR_3 . getStatus ( ) ) != ( VAR_4 ) ) ) && ( ( VAR_3 . METHOD_3 ( ) ) != null ) ) && ( VAR_1 != null ) ) && ( ! ( TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_3 ( ) ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( METHOD_5 ( ) . getStoragePoolId ( ) , VAR_3 ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( METHOD_6 ( ) . METHOD_7 ( ) ) . thenReturn ( VAR_1 ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_4 , METHOD_8 ( ) . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; cluster = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ; VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_3 = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; VAR_3 . METHOD_4 ( STRING_3 ) ; VAR_3 . METHOD_5 ( STRING_4 ) ; VAR_3 . METHOD_6 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_3 ( VAR_1 . Version class ) ) ; validator = org.mockito.Mockito . METHOD_4 ( new TYPE_1 ( VAR_2 , cluster , VAR_3 ) ) ; org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_5 ( TYPE_2 . any ( VAR_4 class ) ) ; TYPE_3 . METHOD_6 ( validator . METHOD_7 ( TYPE_4 . instance ( ) . METHOD_8 ( VAR_4 class ) ) , TYPE_5 . METHOD_9 ( VAR_5 ) ) ; } 
public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; TYPE_1 result = dao . get ( VAR_1 . getId ( ) , TYPE_2 . METHOD_3 ( ) ) ; TYPE_3 . METHOD_4 ( result . equals ( VAR_1 ) ) ; dao . METHOD_5 ( VAR_1 . getId ( ) ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( ) . get ( iface . getName ( ) ) ; if ( VAR_1 == null ) { return true ; } return ( ( ! ( TYPE_1 . equals ( iface . METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ) ) || ( ( iface . METHOD_4 ( ) ) != ( VAR_1 . METHOD_4 ( ) ) ) ) || ( METHOD_5 ( iface , VAR_1 ) ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getStoragePoolId ( ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 , VAR_4 ) ) . thenReturn ( VAR_2 ) ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( this ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < TYPE_1 > ( 1 ) ; for ( TYPE_1 VAR_2 : TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) { TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 instanceof TYPE_4 ) { VAR_1 . add ( 0 , VAR_2 ) ; } } } } } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) < 0 ) ) ; TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_1 ) ) == 0 ) ) ; TYPE_1 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) > 0 ) ) ; } 
public TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < > ( ) ; VAR_1 . METHOD_2 ( ) ; for ( TYPE_3 < java.lang.String > VAR_2 : METHOD_3 ( ) ) { VAR_1 . add ( VAR_2 . getSelectedItem ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( java.lang.Boolean . FALSE ) . when ( cmd ) . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) { final int VAR_1 = INT_1 ; final int VAR_2 = 0 ; final TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; TYPE_2 . METHOD_5 ( VAR_3 . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_2 = ( ( java.util.List < java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) ; } } ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 < TYPE_2 > . TYPE_3 VAR_1 = new TYPE_3 ( ) ; java.util.ArrayList < TYPE_4 . VdcActionParametersBase > parameters = VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , METHOD_4 ( ) ) ; if ( ! ( parameters . isEmpty ( ) ) ) { TYPE_5 . METHOD_5 ( parameters ) ; TYPE_1 . METHOD_6 ( ) . METHOD_7 ( VAR_2 , parameters ) ; } } 
protected void METHOD_1 ( boolean VAR_1 ) { if ( VAR_1 ) { org.ovirt.engine.ui.uicommonweb.UICommand VAR_2 = new org.ovirt.engine.ui.uicommonweb.UICommand ( VAR_3 , this ) ; VAR_2 . setTitle ( VAR_4 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) . add ( VAR_2 ) ; } else { METHOD_4 ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > ( VAR_5 ) ) ; } METHOD_5 ( ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( TYPE_2 . METHOD_2 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( new java.util.ArrayList ( VAR_2 ) ) ; } 
private void METHOD_1 ( final java.util.List < TYPE_1 > VAR_1 ) { TYPE_2 . METHOD_2 ( new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_3 ( ) { for ( TYPE_1 VAR_2 : VAR_1 ) { METHOD_4 ( VAR_2 , METHOD_5 ( ) . METHOD_6 ( ) , METHOD_5 ( ) . METHOD_7 ( ) ) ; } return null ; } } ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 1 ] ) ; METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) , TYPE_1 . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { METHOD_2 ( ) ; if ( this . VAR_1 . get ( ) ) { return ; } METHOD_3 ( ) ; if ( this . VAR_1 . get ( ) ) { return ; } METHOD_4 ( ) ; } 
protected void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_2 VAR_1 = METHOD_3 ( ) ; if ( ( VAR_1 != null ) && ( VAR_1 . getSucceeded ( ) ) ) { TYPE_3 . METHOD_4 ( new TYPE_4 < TYPE_5 > ( ) { public TYPE_5 METHOD_5 ( ) { METHOD_6 ( ) ; METHOD_7 ( VAR_2 , METHOD_8 ( ) ) ; METHOD_9 ( VAR_2 ) ; METHOD_10 ( true ) ; return null ; } } ) ; } } } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = METHOD_2 ( ) . getSelectedItem ( ) ; boolean VAR_2 = ( getVm ( ) ) != null ; if ( VAR_1 == null ) { return ; } METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ( VAR_2 ? getVm ( ) . METHOD_6 ( ) : null ) ) ; if ( ( METHOD_7 ( ) . getEntity ( ) ) == ( VAR_3 ) ) { METHOD_8 ( VAR_1 ) ; } else { METHOD_9 ( VAR_1 ) ; } } 
public void METHOD_1 ( java.lang.String value ) { java.lang.String [ ] VAR_1 = value . METHOD_2 ( STRING_1 ) ; java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( java.lang.String item : VAR_1 ) { list . add ( item ) ; } METHOD_3 ( ) . setItems ( list ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; java.lang.String VAR_4 = VAR_3 . METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { } return VAR_4 ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 ) { if ( ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) ) { return true ; } return false ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat . Version version ) { VAR_1 = METHOD_2 ( VAR_2 , VAR_3 , version ) ; VAR_4 = METHOD_2 ( VAR_5 , VAR_6 , version ) ; VAR_7 . add ( VAR_1 ) ; VAR_7 . add ( VAR_4 ) ; VAR_7 . add ( METHOD_2 ( VAR_8 , VAR_9 , version ) ) ; VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) ; VAR_13 = METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 < ? extends TYPE_3 > VAR_1 = new TYPE_4 < TYPE_3 > ( TYPE_5 . METHOD_2 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( ) ) . thenReturn ( new TYPE_6 [ ] { VAR_3 } ) ; VAR_4 . METHOD_5 ( VAR_5 , new java.util.ArrayList < TYPE_3 > ( ) , STRING_1 , STRING_2 ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ( ( METHOD_4 ( ) . getSelectedItem ( ) . METHOD_5 ( ) ) && ( ( VAR_1 . METHOD_6 ( METHOD_7 ( ) . getSelectedItem ( ) . METHOD_8 ( ) ) ) >= 0 ) ) ) ; } 
public static org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ; entity . setId ( VAR_1 ) ; entity . METHOD_2 ( VAR_2 ) ; entity . METHOD_3 ( VAR_3 ) ; entity . METHOD_4 ( true ) ; entity . METHOD_5 ( VAR_4 ) ; return TYPE_1 . METHOD_6 ( entity , VAR_1 ) ; } 
void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( VAR_3 ) ) ) { if ( ( VAR_2 . METHOD_4 ( ) ) == null ) { VAR_4 . METHOD_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; return ; } VAR_2 . METHOD_6 ( ) ; VAR_4 . METHOD_7 ( ( ( STRING_1 + VAR_1 ) + STRING_3 ) ) ; METHOD_8 ( VAR_1 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ) , aQuery ) ; } 
private void METHOD_1 ( int VAR_1 , int VAR_2 ) throws java.lang.Exception { for ( int i = 0 ; i < VAR_1 ; i ++ ) { METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_5 [ VAR_2 ] } , true ) ; } } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; java.util.List < java.lang.String > VAR_2 = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ; METHOD_3 ( model , VAR_2 ) ; } } ) , VAR_1 ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; VAR_3 . add ( TYPE_2 . METHOD_2 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( VAR_3 ) ) ; } 
public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = VAR_2 < java.lang.String > getValue ( VAR_3 ) ; if ( ( VAR_1 . METHOD_2 ( ) . length ( ) ) == 0 ) { VAR_4 . METHOD_3 ( ) ; } else { VAR_4 . METHOD_4 ( VAR_5 , VAR_1 ) ; } return null ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.List < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_4 : VAR_2 ) { VAR_3 . add ( VAR_4 . getName ( ) ) ; } VAR_1 . METHOD_1 ( ) . setItems ( VAR_3 ) ; } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { TYPE_1 VAR_1 = null ; try { VAR_1 = new TYPE_1 ( vds . METHOD_2 ( ) , STRING_1 , true ) ; } catch ( TYPE_2 e ) { VAR_2 . METHOD_3 ( STRING_2 , vds . getId ( ) , vds . getName ( ) , vds . METHOD_2 ( ) , TYPE_3 . METHOD_4 ( e ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network network = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; TYPE_1 . METHOD_3 ( network ) ; java.lang.String name = network . getName ( ) ; TYPE_1 . METHOD_4 ( name . equals ( VAR_1 . METHOD_5 ( VAR_2 , VAR_3 . Network ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ; VAR_2 . getWindow ( ) . METHOD_3 ( ) ; TYPE_3 VAR_3 = VAR_1 . getReturnValue ( ) ; boolean VAR_4 = VAR_3 . getSucceeded ( ) ; if ( ( VAR_3 != null ) && VAR_4 ) { VAR_2 . METHOD_4 ( ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; } 
public static TYPE_1 < java.lang.Object [ ] > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { STRING_1 , false , false } , new java.lang.Object [ ] { STRING_2 , true , false } , new java.lang.Object [ ] { STRING_3 , true , true } } ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; parameters . METHOD_3 ( VAR_1 ) ; parameters . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( VAR_1 ) ; TYPE_2 . METHOD_6 ( command , VAR_4 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( INT_1 ) ; TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( STRING_1 ) ; TYPE_4 VAR_5 = VAR_4 . METHOD_3 ( VAR_1 , true ) ; TYPE_5 . METHOD_4 ( ( STRING_2 + VAR_1 ) , VAR_5 . METHOD_5 ( ) ) ; java.lang.String VAR_6 = VAR_3 . METHOD_6 ( VAR_5 , true ) ; VAR_7 . METHOD_7 ( VAR_6 ) ; TYPE_5 . assertEquals ( VAR_2 , VAR_6 ) ; } 
private void METHOD_1 ( TYPE_1 model , TYPE_2 . VM entity , TYPE_3 ui ) { model . METHOD_2 ( new TYPE_4 ( ) ) ; TYPE_5 VAR_1 = new TYPE_5 ( METHOD_3 ( model . getId ( ) ) ) ; java.util.List < TYPE_6 > VAR_2 = VAR_1 . METHOD_4 ( entity ) ; for ( TYPE_6 VAR_3 : VAR_2 ) { TYPE_7 . METHOD_5 ( ui , VAR_3 , VAR_1 . METHOD_6 ( ) ) ; } model . METHOD_4 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_2 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < > ( ( ( TYPE_3 < java.lang.String > ) ( returnValue ) ) ) ; java.lang.String VAR_2 = METHOD_1 ( ) . getSelectedItem ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ; METHOD_2 ( ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_1 class ) , TYPE_1 . any ( VAR_2 . ArrayList class ) ) ; VAR_3 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ ( ( VAR_6 . length ) - 1 ) ] } , METHOD_3 ( ) , VAR_2 ) ; VAR_7 . METHOD_4 ( ) ; } 
public static void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 = TYPE_1 . METHOD_3 ( ) ; VAR_3 = new TYPE_2 . DbFacade ( ) ; VAR_3 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( VAR_3 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ) ; TYPE_4 . METHOD_9 ( TYPE_1 . METHOD_10 ( ) , VAR_2 ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity , TYPE_1 VAR_1 ) { TYPE_2 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > TYPE_3 = ( ( TYPE_2 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > ) ( VAR_1 . METHOD_2 ( ) . getSelectedItem ( ) ) ) ; java.lang.String VAR_2 = TYPE_3 . METHOD_3 ( ) ; entity . METHOD_1 ( ( ( java.lang.String ) ( STRING_1 . equals ( VAR_2 ) ? TYPE_3 . getValue ( ) . getEntity ( ) : VAR_2 ) ) ) ; } 
private java.lang.String METHOD_1 ( java.lang.Object obj ) { if ( obj instanceof org.ovirt.engine.core.common.businessentities.VM ) { return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . getName ( ) ; } if ( obj instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( obj ) ) . METHOD_2 ( ) ; } throw new TYPE_2 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( vmId , VAR_1 , METHOD_3 ( ) ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) ; TYPE_2 . METHOD_6 ( command . METHOD_7 ( VAR_3 ) ) ; } 
private void METHOD_1 ( ) { for ( TYPE_1 type : TYPE_1 . METHOD_2 ( ) ) { TYPE_2 VAR_1 = TYPE_3 . getParameters ( ) . METHOD_3 ( ) . get ( type ) ; if ( VAR_1 == null ) { continue ; } VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( ) . METHOD_7 ( VAR_2 , new TYPE_4 ( VAR_1 ) ) ; } } 
private static void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > result ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = null ; for ( org.ovirt.engine.core.common.businessentities . Network network : result ) { if ( ( VAR_1 != null ) && ( ( network . getName ( ) . METHOD_2 ( VAR_1 . getName ( ) ) ) < 0 ) ) { TYPE_1 . METHOD_3 ( java.lang.String . METHOD_4 ( STRING_1 , VAR_1 . getName ( ) , network . getName ( ) ) ) ; } VAR_1 = network ; } } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities . Disk disk ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . getId ( ) , TYPE_3 . getId ( ) , disk . getId ( ) , VAR_2 . Disk ) ; TYPE_4 . METHOD_3 ( VAR_1 ) ; } 
private java.util.List < TYPE_1 . DiskImage > METHOD_1 ( ) { java.util.List < TYPE_1 . Disk > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; java.util.List < TYPE_1 . DiskImage > VAR_2 = new java.util.ArrayList ( METHOD_5 ( VAR_1 ) ) ; VAR_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 , true ) ) ; return VAR_2 ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( action , new TYPE_1 ( VAR_1 ) , new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 result ) { if ( ( ( result . getReturnValue ( ) ) == null ) || ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) ) { return ; } VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; METHOD_7 ( ) ; } } ) ; } 
protected boolean METHOD_1 ( TYPE_1 . ValidationResult item ) { java.util.List < java.lang.String > VAR_1 = item . METHOD_2 ( ) ; final java.util.List < java.lang.String > VAR_2 = ( VAR_1 == null ) ? VAR_3 . Collections < java.lang.String > METHOD_3 ( ) : VAR_1 ; return ( ( VAR_4 . length ) == ( VAR_2 . size ( ) ) ) && ( VAR_2 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) ; } 
private static org.ovirt.engine.core.common.businessentities.DiskImage METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; diskImage . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_4 ( new org.ovirt.engine.core.compat.Guid ( ) ) ) ) ; return diskImage ; } 
public static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 ) { try { if ( VAR_1 != null ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getValue ( ) ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_4 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( ) . METHOD_5 ( VAR_3 ) ; } } } catch ( java.lang.Exception e ) { VAR_4 . METHOD_6 ( STRING_1 , VAR_1 , VAR_2 , e ) ; } } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( command . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , java.lang.String VAR_4 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_5 , new TYPE_3 ( VAR_1 , VAR_3 , VAR_2 , VAR_4 ) , aQuery ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = VAR_2 . getModel ( ) ; if ( ( event . METHOD_2 ( ) ) == VAR_1 ) { VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ; } else { VAR_1 . METHOD_5 ( ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : VAR_2 ) { if ( cluster . METHOD_5 ( ) ) { try { METHOD_6 ( cluster ) ; } catch ( java.lang.Exception e ) { VAR_1 . METHOD_7 ( STRING_2 , cluster . METHOD_8 ( ) , e ) ; } } } } 
private void METHOD_1 ( TYPE_1 < TYPE_2 > command ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . get ( VAR_2 ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_1 ) . get ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( VAR_1 ) . get ( VAR_4 ) ; } 
public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { synchronized ( VAR_2 ) { if ( ! ( VAR_1 ) ) { java.util.List < TYPE_1 > VAR_3 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 VAR_4 : VAR_3 ) { VAR_5 . put ( VAR_4 . getId ( ) , VAR_4 ) ; } VAR_1 = true ; } } } } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String VAR_1 = METHOD_1 ( ) . getSelectedItem ( ) ; METHOD_1 ( ) . setItems ( ( ( TYPE_1 < java.lang.String > ) ( returnValue ) ) ) ; METHOD_1 ( ) . setSelectedItem ( VAR_1 ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( true ) ; boolean VAR_2 = ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) && ( ( TYPE_2 . METHOD_5 ( ) . get ( TYPE_2 . METHOD_6 ( ) ) . METHOD_7 ( ) ) == ( VAR_3 ) ) ; TYPE_3 . METHOD_8 ( VAR_1 , VAR_2 ) ; } 
public double METHOD_1 ( double VAR_1 , boolean VAR_2 ) { if ( VAR_1 <= FLOAT_1 ) { throw new TYPE_1 ( STRING_1 ) ; } double VAR_3 = super . METHOD_1 ( ) ; if ( ! VAR_2 ) { while ( VAR_3 == FLOAT_2 ) { VAR_3 = super . METHOD_1 ( ) ; } } return VAR_3 * VAR_1 ; } 
private void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( TYPE_2 . isEmpty ( VAR_1 ) ) { return ; } if ( ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ) == 1 ) { METHOD_6 ( VAR_1 , TYPE_1 . METHOD_7 ( ) , true ) ; } TYPE_1 . METHOD_4 ( ) . METHOD_1 ( TYPE_1 . METHOD_8 ( ) ) ; } 
private static TYPE_1 < java.lang.String , java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String url = VAR_1 . METHOD_2 ( ) ; java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( TYPE_3 . METHOD_3 ( url . METHOD_4 ( STRING_1 ) ) ) ; VAR_2 . METHOD_5 ( 0 ) ; return TYPE_4 . METHOD_6 ( VAR_2 ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; model . METHOD_1 ( model , VAR_1 , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , vm . METHOD_2 ( ) . getValue ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( vm . getId ( ) ) ; } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_1 ( java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > list = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid VAR_3 : VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ; if ( storageDomain != null ) { list . add ( storageDomain ) ; } } return list ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) , VAR_2 ) ; if ( ( getParameters ( ) ) != null ) { VAR_1 . METHOD_3 ( new java.util.ArrayList < TYPE_3 > ( ) ) ; for ( TYPE_3 VAR_3 : getParameters ( ) ) { VAR_1 . getParameters ( ) . add ( VAR_3 . METHOD_1 ( ) ) ; } } return VAR_1 ; } 
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS i : VAR_1 ) { if ( i . METHOD_2 ( ) ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
protected java.lang.Object METHOD_1 ( TYPE_1 . VdcQueryType VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_1 . VdcQueryReturnValue result = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; } 
protected void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) ) ) { try { TYPE_3 VAR_1 = METHOD_4 ( VAR_2 , new TYPE_4 ( METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) ) ) ; if ( VAR_1 != null ) { VAR_3 = ( ( java.lang.Integer ) ( VAR_1 . getReturnValue ( ) ) ) ; } } catch ( TYPE_5 e ) { VAR_4 = e . METHOD_7 ( ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 result = dao . get ( VAR_1 ) ; TYPE_2 . METHOD_2 ( result ) ; TYPE_2 . assertEquals ( VAR_1 , result . getId ( ) ) ; TYPE_2 . assertEquals ( false , result . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( result . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { table . METHOD_2 ( false ) ; } VAR_2 . METHOD_3 ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 returnValue = METHOD_2 ( VAR_2 , new TYPE_3 ( VAR_1 ) , METHOD_3 ( VAR_1 ) ) ; if ( ! ( returnValue . getSucceeded ( ) ) ) { log . METHOD_4 ( STRING_1 , VAR_1 . getName ( ) ) ; } } 
public static TYPE_1 < java.lang.Object [ ] > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { false , TYPE_3 . METHOD_3 ( ) } , new java.lang.Object [ ] { false , TYPE_3 . METHOD_4 ( VAR_1 ) } , new java.lang.Object [ ] { true , TYPE_3 . METHOD_4 ( VAR_2 ) } , new java.lang.Object [ ] { true , TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 ) } } ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 . Guid class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_1 map = new TYPE_1 ( ) ; map . METHOD_2 ( VAR_1 ) ; map . METHOD_3 ( VAR_2 ) ; VAR_3 . add ( map ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( VAR_1 ) ) . thenReturn ( VAR_3 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , TYPE_1 . toString ( ) } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_2 image = resource . get ( ) ; TYPE_3 . METHOD_6 ( image , 1 ) ; METHOD_7 ( image ) ; } 
protected void METHOD_1 ( ) { METHOD_1 ( getVm ( ) . getId ( ) , TYPE_1 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) , false , false ) ) ; METHOD_5 ( getVm ( ) . getId ( ) ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 ) { TYPE_1 parameters = new TYPE_1 ( ) ; parameters . METHOD_2 ( ) . add ( VAR_1 ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : VAR_2 ) { parameters . METHOD_2 ( ) . add ( METHOD_3 ( iface , VAR_1 . getName ( ) ) ) ; } return parameters ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 . METHOD_5 ( ) ) . addValue ( STRING_3 , VAR_1 . METHOD_6 ( ) ) . addValue ( STRING_4 , TYPE_2 . METHOD_7 ( VAR_1 . getStatus ( ) ) ) . addValue ( STRING_5 , VAR_1 . METHOD_8 ( ) ) . addValue ( STRING_6 , VAR_1 . METHOD_9 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 . METHOD_9 ( ) ) ; assertEquals ( INT_1 , VAR_2 . METHOD_9 ( ) . getStatus ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( 1 ) ; METHOD_6 ( 1 ) ; VAR_1 . METHOD_7 ( ) ; TYPE_1 nic = resource . get ( ) ; METHOD_8 ( nic , 1 ) ; METHOD_9 ( nic ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 class ) , VAR_5 , new TYPE_3 ( ) ) ; if ( VAR_2 != null ) { TYPE_4 . METHOD_3 ( this , VAR_2 ) ; } return VAR_2 ; } 
protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid VAR_2 : TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) { if ( VAR_2 == null ) { continue ; } VAR_1 . add ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ; } } return VAR_1 ; } 
public TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_2 ) { if ( ( VAR_2 . isEmpty ( ) ) || ( vm . METHOD_2 ( ) ) ) { return VAR_3 ; } return new TYPE_2 ( VAR_1 ) . METHOD_3 ( ) ; } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 . Disk > VAR_1 = new java.util.ArrayList < TYPE_1 . Disk > ( ) ; TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) ) ; VAR_1 . add ( diskImage ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( vmId ) ) . thenReturn ( VAR_1 ) ; } 
private java.util.List < java.lang.String > METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) . METHOD_3 ( vds . getId ( ) ) ) { if ( ( iface . METHOD_4 ( ) ) != null ) { VAR_1 . add ( iface . METHOD_4 ( ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; if ( ( VAR_1 . size ( ) ) != 0 ) { model . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; model . METHOD_2 ( ) . setIsChangable ( false ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; cmd . getVm ( ) . METHOD_4 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) ; java.util.List < TYPE_1 . DiskImage > VAR_4 = METHOD_6 ( INT_1 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_7 ( VAR_4 ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_6 ) ) ; TYPE_3 . METHOD_8 ( cmd , VAR_7 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , TYPE_2 < ? extends TYPE_3 > VAR_1 , java.lang.String ... VAR_2 ) { model = METHOD_2 ( model ) ; model = TYPE_4 . METHOD_1 ( TYPE_5 . METHOD_3 ( ) , model , VAR_1 ) ; model = METHOD_4 ( model , VAR_1 , VAR_2 ) ; return model ; } 
public java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { return ( ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) . METHOD_3 ( ) ) + STRING_1 ) + ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_4 ( ) . METHOD_3 ( ) ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; if ( ( VAR_1 ) != null ) { VAR_2 . METHOD_12 ( VAR_1 ) ; } if ( VAR_3 ) { VAR_2 . METHOD_13 ( VAR_4 . METHOD_14 ( ) ) ; } } 
public void METHOD_1 ( ) { java.util.ArrayList < java.lang.Object > VAR_1 = new java.util.ArrayList < java.lang.Object > ( ) ; java.util.ArrayList < TYPE_1 > VAR_2 = VAR_3 . Linq < TYPE_1 > METHOD_2 ( getModel ( ) . METHOD_3 ( ) ) ; for ( TYPE_1 model : VAR_2 ) { if ( ( ( TYPE_2 ) ( model ) ) . METHOD_4 ( ) ) { VAR_1 . add ( model ) ; } } getModel ( ) . METHOD_5 ( ) . setItems ( VAR_1 ) ; } 
public void METHOD_1 ( ) { vm . METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( 1 , TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_5 ( 1 ) ) ) ) ) ; vm . METHOD_6 ( VAR_1 ) ; METHOD_7 ( TYPE_3 . METHOD_8 ( vm , vm . METHOD_9 ( ) ) . METHOD_10 ( ) ) ; } 
public TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS , TYPE_2 > METHOD_1 ( ) throws java.lang.Exception { TYPE_2 returnValue = METHOD_2 ( METHOD_3 ( ) , new TYPE_3 ( VAR_1 . getId ( ) , entity . METHOD_4 ( ) , entity . METHOD_5 ( ) , entity . getName ( ) ) ) ; return new TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS , TYPE_2 > ( VAR_1 , returnValue ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) ; } 
void METHOD_1 ( ) { VAR_1 = new TYPE_1 < java.lang.Object > ( new TYPE_2 < java.lang.Object > ( ) { public java.lang.String METHOD_2 ( java.lang.Object object ) { TYPE_3 version = ( ( TYPE_3 ) ( object ) ) ; return version . METHOD_3 ( ) ; } } ) ; VAR_2 = new TYPE_4 ( STRING_1 ) ; VAR_3 = new TYPE_4 ( STRING_1 ) ; VAR_4 = new TYPE_5 ( true , true ) ; } 
TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , VAR_4 ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_5 ) ; java.lang.String VAR_6 = STRING_2 ; if ( VAR_1 != null ) { VAR_6 += STRING_3 ; VAR_2 . METHOD_2 ( VAR_7 , VAR_1 ) ; } VAR_2 . METHOD_2 ( STRING_4 , VAR_6 ) ; java.lang.String VAR_8 = METHOD_3 ( ) ; if ( VAR_8 != null ) { VAR_2 . METHOD_2 ( VAR_9 , VAR_8 ) ; } return VAR_2 ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; vm . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( command , VAR_2 ) ; TYPE_2 . when ( VAR_2 . get ( command . getParameters ( ) . METHOD_6 ( ) ) ) . thenReturn ( vm ) ; return vm ; } 
public static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.DiskImage image , boolean VAR_1 , TYPE_1 VAR_2 ) { try { TYPE_2 . METHOD_2 ( image , VAR_1 , VAR_2 ) ; TYPE_2 . METHOD_3 ( image , image . METHOD_4 ( ) ) ; } catch ( TYPE_3 VAR_3 ) { VAR_4 . error ( STRING_1 , VAR_3 ) ; throw new TYPE_4 ( VAR_5 , VAR_3 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 < TYPE_1 > cmd = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_2 = new java.util.ArrayList < TYPE_4 > ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; VAR_2 . add ( VAR_3 ) ; java.util.List < TYPE_4 > VAR_5 = cmd . METHOD_4 ( VAR_2 ) ; TYPE_5 . METHOD_5 ( VAR_5 . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) { cmd . METHOD_2 ( VAR_1 ) ; METHOD_3 ( true , VAR_2 , false , null ) ; TYPE_1 . METHOD_4 ( cmd . validate ( ) ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( cmd ) . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_2 ) , TYPE_2 . METHOD_8 ( ) , TYPE_2 . METHOD_7 ( false ) ) ; org.mockito.Mockito . METHOD_5 ( cmd ) . METHOD_9 ( ) ; TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Disk disk = new TYPE_1 . Disk ( ) ; disk . setId ( VAR_1 ) ; disk . METHOD_2 ( new TYPE_2 ( ) ) ; disk . getVm ( ) . setId ( VAR_2 ) ; TYPE_3 . METHOD_3 ( METHOD_4 ( ) , disk ) ; assertEquals ( VAR_3 , disk . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_8 ( VAR_1 ) ; TYPE_2 . METHOD_9 ( command , VAR_4 ) ; } 
private void METHOD_1 ( ) { TYPE_1 . VdcQueryReturnValue returnValue = TYPE_2 . METHOD_2 ( VAR_1 . VdcQueryReturnValue class ) ; TYPE_2 . when ( VAR_2 . METHOD_3 ( TYPE_3 . any ( VAR_1 . VdcQueryType class ) , TYPE_3 . any ( VAR_3 class ) ) ) . thenReturn ( returnValue ) ; TYPE_2 . when ( returnValue . getReturnValue ( ) ) . thenReturn ( TYPE_4 . METHOD_4 ( ) ) ; } 
private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { org.ovirt.engine.core.compat.Guid VAR_3 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 == null ) || ( TYPE_2 . equals ( VAR_3 ) ) ) { VAR_3 = METHOD_3 ( VAR_1 ) ; } VAR_2 = VAR_3 ; } return VAR_2 ; } 
protected void METHOD_1 ( ) { resource = new TYPE_1 ( VAR_1 [ 0 ] . toString ( ) , new TYPE_2 ( ) ) ; resource . METHOD_2 ( VAR_2 ) ; resource . METHOD_3 ( VAR_3 ) ; resource . METHOD_4 ( VAR_4 ) ; resource . METHOD_5 ( VAR_5 ) ; resource . METHOD_6 ( VAR_6 ) ; resource . METHOD_7 ( VAR_7 ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) { METHOD_3 ( ) ; } if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) { METHOD_4 ( ) ; } if ( TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_3 ) ) { METHOD_5 ( ) ; } } 
private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { if ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) . METHOD_3 ( STRING_1 ) ) { return new TYPE_3 ( ) ; } else { throw new TYPE_4 ( ( STRING_2 + ( VAR_2 class ) ) ) ; } } 
private < TYPE_1 extends TYPE_2 < org.ovirt.engine.core.compat.Guid > & TYPE_3 > TYPE_4 . ValidationResult METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.lang.String VAR_3 , TYPE_5 . EngineMessage VAR_4 , TYPE_6 < TYPE_1 > map ) { boolean VAR_5 = ( VAR_2 != null ) && ( VAR_3 != null ) ; java.lang.String [ ] VAR_6 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; return TYPE_7 . METHOD_3 ( VAR_4 , VAR_6 ) . when ( ( VAR_5 && ( METHOD_4 ( VAR_2 , VAR_3 , map ) ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; command . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( command ) ; org.mockito.Mockito . METHOD_6 ( VAR_1 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_2 . any ( VAR_2 . VM class ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) ; VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . setId ( VAR_3 ) ; vds . METHOD_4 ( VAR_2 ) ; cmd . METHOD_5 ( vds ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 cluster ) { if ( cluster . getId ( ) . equals ( this . cluster . getId ( ) ) ) { TYPE_1 VAR_1 = new TYPE_1 ( cluster ) ; VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( ( ! ( ( java.lang.Boolean ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) ) ; VAR_1 . METHOD_5 ( false ) ; return VAR_1 ; } else { return super . METHOD_1 ( cluster ) ; } } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != null ) { VAR_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; } else { VAR_2 . METHOD_5 ( new java.util.ArrayList < java.lang.String > ( ) ) ; } } 
public static void METHOD_1 ( TYPE_1 log , java.lang.String id , java.lang.Object obj , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( obj ) ; if ( ( VAR_2 != null ) && ( TYPE_4 . METHOD_3 ( log , VAR_2 . METHOD_4 ( ) ) ) ) { TYPE_4 . log ( log , VAR_2 . METHOD_4 ( ) , VAR_3 , TYPE_4 . METHOD_5 ( log , VAR_2 , obj ) , TYPE_5 . METHOD_6 ( VAR_1 ) , id ) ; log . error ( STRING_1 , VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = dao . get ( VAR_2 [ 0 ] ) ; METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { TYPE_1 result = dao . get ( VAR_1 . METHOD_4 ( ) ) ; TYPE_3 . assertEquals ( VAR_1 , result ) ; } } , INT_1 ) ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 type ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; if ( VAR_1 != null ) { for ( TYPE_1 item : VAR_1 ) { if ( ( item . METHOD_2 ( ) . METHOD_3 ( ) ) == type ) { VAR_2 . add ( item ) ; } } } return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( true ) ; METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , 1 , true , false , false , true , true ) ; METHOD_5 ( TYPE_2 . METHOD_4 ( VAR_1 ) , TYPE_2 . METHOD_4 ( VAR_1 . getName ( ) ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) ; setItems ( VAR_2 ) ; METHOD_2 ( ( ( VAR_2 . size ( ) ) == 0 ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = new java.util.HashMap < > ( ) ; if ( VAR_1 != null ) { for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_2 . put ( VAR_3 . getId ( ) , VAR_3 ) ; } } METHOD_1 ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 action ) throws TYPE_2 , TYPE_3 , TYPE_4 { java.lang.String url = ( ( this . VAR_1 . METHOD_2 ( ) ) + ( VAR_2 ) ) + STRING_1 ; java.util.List < TYPE_5 > VAR_3 = new TYPE_6 ( ) . METHOD_3 ( ) ; url = new TYPE_7 ( url ) . METHOD_3 ( ) ; return METHOD_4 ( ) . action ( url , action , VAR_4 class , VAR_4 class , VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; if ( getModel ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( VAR_1 == ( VAR_2 ) ) ) ; } super . METHOD_1 ( VAR_1 ) ; METHOD_5 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; TYPE_3 params = new TYPE_3 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; } 
protected void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( TYPE_1 . getVm ( ) ) ; java.util.List < java.lang.String > VAR_2 = METHOD_3 ( ) ; boolean VAR_3 = METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; if ( ! VAR_3 ) { log . error ( STRING_1 ) ; METHOD_6 ( VAR_4 ) ; } else { TYPE_1 . METHOD_7 ( true ) ; } } catch ( TYPE_2 e ) { log . error ( STRING_1 ) ; METHOD_6 ( VAR_4 ) ; } } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { org.ovirt.engine.core.compat.Guid VAR_1 = METHOD_2 ( ) . getStoragePoolId ( ) ; if ( pool != null ) { pool . setId ( VAR_1 ) ; } TYPE_1 VAR_2 = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( ) , METHOD_2 ( ) . METHOD_6 ( ) ) ) . thenReturn ( pool ) ; org.mockito.Mockito.when ( METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) . thenReturn ( VAR_2 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( true ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_4 ( ) ; command . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_1 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . log ( TYPE_1 . any ( VAR_2 class ) , TYPE_1 . any ( VAR_3 . AuditLogType class ) ) ; } 
public void METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 , VAR_1 , VAR_4 ) ; if ( ( VAR_5 ) > 0 ) { VAR_6 = METHOD_6 ( ) ; } for ( int i = 0 ; i < ( ( VAR_2 . METHOD_7 ( ) ) - 1 ) ; i ++ ) { VAR_7 . add ( VAR_2 . METHOD_8 ( i ) . METHOD_9 ( ) ) ; } METHOD_10 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_3 ( STRING_2 , null ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( nic ) ; nic . METHOD_6 ( VAR_1 . getName ( ) ) ; TYPE_1 VAR_2 = METHOD_7 ( METHOD_8 ( nic ) ) ; METHOD_9 ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( VAR_3 ) ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_1 = new java.util.HashMap < > ( ) ; if ( ( METHOD_2 ( ) ) != null ) { VAR_1 . put ( STRING_1 , METHOD_2 ( ) . METHOD_3 ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( byte [ ] VAR_1 ) throws TYPE_1 { METHOD_2 ( ) ; METHOD_3 ( new TYPE_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , this . METHOD_5 ( ) ) . METHOD_4 ( VAR_3 , METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_4 ( STRING_2 , VAR_1 ) ; nic . METHOD_5 ( VAR_2 ) ; nic . METHOD_6 ( TYPE_1 . instance ( ) . METHOD_7 ( INT_1 ) ) ; METHOD_8 ( nic ) ; nic . METHOD_6 ( TYPE_1 . instance ( ) . METHOD_7 ( INT_1 ) ) ; TYPE_2 VAR_3 = METHOD_9 ( METHOD_10 ( nic ) ) ; METHOD_11 ( VAR_3 , VAR_1 ) ; } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 . VdcActionParametersBase > VAR_1 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; if ( VAR_1 != null ) { for ( TYPE_1 . VdcActionParametersBase VAR_2 : VAR_1 ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = METHOD_3 ( ( ( TYPE_3 ) ( VAR_2 ) ) ) ; if ( diskImage != null ) { TYPE_4 . METHOD_4 ( diskImage , TYPE_2 . METHOD_5 ( ) ) ; } } } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { final int VAR_1 = INT_1 ; final int VAR_2 = INT_2 ; org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; METHOD_4 ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_5 = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ; METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( command . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_2 ( ) ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) . METHOD_6 ( ) ; TYPE_1 . VdcQueryReturnValue returnValue = ( ( TYPE_1 . VdcQueryReturnValue ) ( METHOD_5 ( ) . getReturnValue ( ) ) ) ; TYPE_2 . assertEquals ( TYPE_3 , returnValue . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = METHOD_2 ( null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_3 ( STRING_1 , null , null , network . getName ( ) ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_4 ( ) ) ; METHOD_5 ( network , iface , null , VAR_3 ) ; } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { if ( ( domain . METHOD_2 ( ) ) == ( VAR_2 ) ) { return domain ; } } return null ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 id , TYPE_3 type , TYPE_4 VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 , boolean VAR_3 , boolean VAR_4 , java.lang.String VAR_5 , java.util.Map < java.lang.String , java.lang.String > VAR_6 ) { TYPE_1 VAR_7 = TYPE_5 . METHOD_1 ( id , type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; if ( TYPE_6 . METHOD_2 ( VAR_5 ) ) { VAR_7 . METHOD_3 ( VAR_5 ) ; } return VAR_7 ; } 
public void METHOD_1 ( ) { java.lang.Object [ ] VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 [ 1 ] = null ; java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; TYPE_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_1 , VAR_2 ) ; } 
protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) . getValue ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 model , TYPE_4 VAR_2 , TYPE_5 event , TYPE_6 < TYPE_3 > VAR_3 ) { super . METHOD_1 ( context , VAR_1 , model , VAR_2 , event , VAR_3 ) ; if ( ! ( TYPE_7 . equals ( event . METHOD_2 ( ) ) ) ) { return ; } METHOD_3 ( model ) ; } 
public boolean METHOD_1 ( final org.ovirt.engine.core.compat.Guid id ) { return METHOD_2 ( new TYPE_1 < java.lang.Boolean > ( ) { public java.lang.Boolean METHOD_3 ( ) { try { TYPE_2 VAR_1 = VAR_2 . METHOD_4 ( id . toString ( ) ) ; return VAR_1 != null ; } catch ( TYPE_3 VAR_3 ) { if ( ( VAR_3 . getStatus ( ) ) == ( VAR_4 ) ) { return false ; } throw VAR_3 ; } } } ) ; } 
protected void METHOD_1 ( ) { if ( ( ( TYPE_1 . getVm ( ) ) != null ) && ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) == ( VAR_1 ) ) ) { try { TYPE_2 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_3 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . METHOD_6 ( ) ) ) ; } catch ( TYPE_4 e ) { VAR_3 = e . METHOD_7 ( ) ; } } } 
protected boolean METHOD_1 ( ) { if ( ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . getVm ( ) . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) ) { return false ; } return true ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_1 ( ) ) . when ( command ) . METHOD_3 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_4 ) . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , VAR_2 ) ; if ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) && ( VAR_1 . METHOD_4 ( ) ) ) { TYPE_3 returnValue = VAR_1 . METHOD_5 ( ) ; VAR_3 = returnValue . getSucceeded ( ) ; VAR_4 = ( ( TYPE_4 ) ( returnValue . getReturnValue ( ) ) ) ; VAR_5 = true ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ) , aQuery ) ; } 
private org.ovirt.engine.core.compat.Guid METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == null ) ? METHOD_3 ( ) : TYPE_1 . getParameters ( ) . METHOD_2 ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , VAR_3 ) ; if ( VAR_2 . isEmpty ( ) ) { METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ; throw new TYPE_2 ( ) ; } return VAR_2 . get ( 0 ) . getId ( ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_1 . toString ( ) } , TYPE_2 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_2 ( VAR_3 , VAR_4 , host , false , VAR_5 ) ; TYPE_3 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_4 . METHOD_7 ( VAR_6 ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < > ( ( ( TYPE_3 < java.lang.String > ) ( returnValue ) ) ) ; VAR_1 . add ( STRING_1 ) ; java.lang.String VAR_2 = getModel ( ) . METHOD_1 ( ) . getSelectedItem ( ) ; getModel ( ) . METHOD_1 ( ) . setItems ( VAR_1 ) ; getModel ( ) . METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; TYPE_1 VAR_1 = METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 , new TYPE_2 ( VAR_5 . Disk , VAR_6 ) } , true , true , false ) ; METHOD_2 ( VAR_1 ) ; VAR_7 . METHOD_6 ( ) ; METHOD_7 ( resource . METHOD_8 ( ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 model , org.ovirt.engine.core.common.businessentities.VDSGroup VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_1 VAR_3 : model . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) { VAR_2 = VAR_3 ; break ; } } return VAR_2 ; } 
protected boolean METHOD_1 ( TYPE_1 storageDomain ) { if ( ( storageDomain . METHOD_2 ( ) ) == null ) { return false ; } org.ovirt.engine.core.compat.Guid VAR_1 = storageDomain . getId ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = storageDomain . METHOD_2 ( ) . getValue ( ) ; return ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . get ( new TYPE_3 ( VAR_1 , VAR_2 ) ) ) != null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; VAR_2 . METHOD_4 ( ) ; java.lang.String VAR_3 = TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; TYPE_4 . assertEquals ( STRING_4 , STRING_3 , VAR_3 ) ; } 
