public void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new TYPE_1 ( this ) ; METHOD_2 ( VAR_2 ) ; VAR_3 = new TYPE_2 ( ) ; VAR_4 = new java.lang.Runnable ( ) { public void run ( ) { METHOD_3 ( ) ; VAR_3 . METHOD_4 ( this , VAR_5 ) ; } } ; VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ; } 
public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 locale ) { if ( VAR_1 . METHOD_2 ( ) ) { return STRING_1 ; } java.lang.String result = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , locale . METHOD_4 ( ) ) ; if ( result == null ) { result = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) . METHOD_4 ( ) ) ; } return result ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return ; TYPE_1 . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) { assertTrue ( VAR_1 . METHOD_4 ( ) ) ; return ; } assertEquals ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; assertFalse ( VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_1 ( ) ; METHOD_5 ( ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_1 ) { int size = VAR_1 . length ( ) ; if ( ( count ) != size ) { return false ; } return METHOD_2 ( 0 , new java.lang.String ( 0 , size , VAR_1 . METHOD_3 ( ) ) , 0 , size ) ; } } 
public void METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; new TYPE_3 ( mContext ) ; org.mockito.Mockito.verify ( mContext ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( VAR_3 class ) , VAR_1 . METHOD_5 ( ) ) ; assertEquals ( 2 , VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; assertEquals ( VAR_4 , VAR_1 . METHOD_6 ( ) . METHOD_8 ( 0 ) ) ; assertEquals ( VAR_5 , VAR_1 . METHOD_6 ( ) . METHOD_8 ( 1 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; } 
public void METHOD_1 ( java.lang.String [ ] VAR_1 , java.lang.String VAR_2 ) { VAR_3 = VAR_2 ; TYPE_1 < java.lang.String > VAR_4 = new TYPE_1 < java.lang.String > ( ) ; VAR_4 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; VAR_4 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) ; VAR_6 = VAR_4 . METHOD_5 ( new java.lang.String [ VAR_4 . size ( ) ] ) ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return ; TYPE_1 . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) { assertFalse ( VAR_1 . METHOD_4 ( ) ) ; return ; } assertEquals ( VAR_4 , VAR_1 . METHOD_3 ( ) ) ; assertTrue ( VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_1 ( ) ; METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 p = new TYPE_2 ( ) ; TYPE_3 s = new TYPE_3 ( p , STRING_1 , STRING_2 , STRING_3 , null , null ) ; java.lang.Object VAR_1 = s . METHOD_2 ( null ) ; assertTrue ( STRING_4 , ( VAR_1 instanceof TYPE_4 ) ) ; try { VAR_1 = s . METHOD_2 ( new java.lang.Object ( ) ) ; fail ( STRING_5 ) ; } catch ( TYPE_5 e ) { } } 
public void METHOD_1 ( TYPE_1 b ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; mRS . METHOD_3 ( ) ; METHOD_4 ( b ) ; METHOD_5 ( b ) ; mRS . METHOD_6 ( METHOD_7 ( mRS ) , b ) ; TYPE_2 . METHOD_8 ( VAR_1 ) ; } 
public java.util.List < android.bluetooth.BluetoothDevice > METHOD_1 ( int [ ] VAR_1 ) { android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + ( TYPE_1 . toString ( VAR_1 ) ) ) ) ; final TYPE_2 service = VAR_3 ; if ( service != null ) { try { return service . METHOD_1 ( VAR_1 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_2 . TAG , STRING_2 ) ; } return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; } 
private boolean METHOD_1 ( java.io.File VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { java.lang.String [ ] VAR_2 = VAR_1 . METHOD_3 ( ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { boolean VAR_3 = METHOD_1 ( new java.io.File ( VAR_1 , VAR_2 [ i ] ) ) ; if ( ! VAR_3 ) { return false ; } } } return VAR_1 . METHOD_4 ( ) ; } 
public java.lang.String getName ( com.android.jack.ir.ast.JMethod method ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( CHAR_1 ) ; for ( TYPE_1 p : method . METHOD_1 ( ) ) { if ( ( p . METHOD_2 ( VAR_1 class ) ) != null ) { continue ; } sb.append ( getName ( p . METHOD_3 ( ) ) ) ; } sb.append ( CHAR_2 ) ; sb.append ( getName ( method . METHOD_3 ( ) ) ) ; return sb . toString ( ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 call ) { mContext = TYPE_3 . METHOD_2 ( context ) ; if ( call != null ) { VAR_1 = call ; if ( ! ( call . METHOD_3 ( ) ) ) { METHOD_4 ( call , true , ( ( call . METHOD_5 ( ) ) == ( VAR_2 ) ) ) ; } else { METHOD_6 ( null , true , true ) ; } } } 
public static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_3 ) ; return TYPE_3 . METHOD_5 ( VAR_2 , new TYPE_4 < TYPE_2 , java.lang.String > ( ) { public java.lang.String METHOD_6 ( TYPE_2 VAR_4 ) { return VAR_4 . METHOD_7 ( ) ; } } ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { VAR_3 . METHOD_2 ( this , VAR_1 , VAR_2 ) ; synchronized ( VAR_4 ) { if ( ! ( VAR_5 ) ) { try { VAR_4 . METHOD_3 ( ) ; } catch ( TYPE_3 e ) { TYPE_4 . d ( STRING_1 ) ; } } VAR_6 . METHOD_4 ( ) ; if ( VAR_4 . METHOD_5 ( ) ) { return ; } else { VAR_4 . METHOD_6 ( false ) ; } } } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; } 
private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; } 
public final void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 , TYPE_5 { VAR_4 = false ; TYPE_6 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_3 ( VAR_1 , key , VAR_2 , VAR_3 ) ; } else { METHOD_4 ( VAR_6 , VAR_1 , key , VAR_2 , null , VAR_3 ) ; } VAR_4 = true ; this . VAR_1 = VAR_1 ; } 
byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } } 
static TYPE_1 METHOD_1 ( TYPE_2 node ) { TYPE_3 type = TYPE_4 . METHOD_2 ( node ) ; java.lang.String name = TYPE_4 . getName ( node ) ; if ( ( type != null ) && ( name != null ) ) { return new TYPE_1 ( name , type , node ) ; } return null ; } 
private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; } 
public static boolean METHOD_1 ( final TYPE_1 project ) { java.io.File VAR_1 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_1 != null ) { try { return ( TYPE_2 . METHOD_3 ( project , VAR_1 ) ) != null ; } catch ( java.lang.Exception e ) { TYPE_3 . log ( e , null ) ; } } return false ; } 
public void METHOD_1 ( TYPE_1 e ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( null , STRING_1 ) ; if ( VAR_1 != null ) { TYPE_3 VAR_3 = VAR_1 . METHOD_3 ( ) ; TYPE_4 VAR_4 = TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_5 . METHOD_3 ( ) . METHOD_5 ( ) ) ; METHOD_6 ( VAR_4 . toString ( ) , VAR_3 , ( - 1 ) ) ; METHOD_7 ( ) ; VAR_6 = true ; } } 
public boolean METHOD_1 ( ) throws TYPE_1 { if ( ( TYPE_2 . METHOD_2 ( ) ) <= INT_1 ) { return device . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( ) ; } else { return device . METHOD_3 ( new TYPE_3 ( ) . text ( STRING_1 ) ) . METHOD_5 ( ) ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( ) ; } VAR_1 = ( VAR_2 ) ++ ; return type . get ( new TYPE_3 < TYPE_4 , TYPE_5 > ( ( ( TYPE_4 ) ( VAR_3 [ VAR_1 ] ) ) , ( ( TYPE_5 ) ( VAR_4 . values [ VAR_1 ] ) ) , VAR_4 ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String name , java.util.List < ? extends TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { try { return METHOD_2 ( name , VAR_1 , VAR_2 ) ; } catch ( TYPE_4 e ) { TYPE_1 id = METHOD_3 ( name , VAR_1 , VAR_2 ) ; if ( id == null ) { id = new TYPE_1 ( name , VAR_1 , VAR_2 ) ; VAR_3 . METHOD_4 ( id ) ; } return id ; } } 
public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( VAR_1 , VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( ) { final TYPE_2 VAR_1 = this . VAR_1 ; VAR_1 . METHOD_2 ( ) ; TYPE_1 result ; try { result = ( ( size ) > 0 ) ? ( ( TYPE_1 ) ( VAR_2 [ 0 ] ) ) : null ; } finally { VAR_1 . METHOD_3 ( ) ; } return result ; } 
public static int METHOD_1 ( int uid , int VAR_1 , int [ ] VAR_2 , int VAR_3 , int [ ] [ ] VAR_4 , long VAR_5 , long VAR_6 ) { TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ) ; int VAR_7 = TYPE_3 . METHOD_5 ( uid , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; if ( VAR_7 == 0 ) { TYPE_4 . METHOD_6 ( true , VAR_3 ) ; } TYPE_2 . METHOD_7 ( ) ; return VAR_7 ; } 
public java.lang.String METHOD_1 ( java.lang.Object element , int VAR_1 ) { if ( element instanceof TYPE_1 ) { if ( VAR_1 == 0 ) { return ( ( TYPE_1 ) ( element ) ) . METHOD_2 ( ) ; } else { return ( ( TYPE_1 ) ( element ) ) . METHOD_3 ( ) ; } } TYPE_2 VAR_2 = ( ( TYPE_2 ) ( element ) ) ; switch ( VAR_1 ) { case 0 : return VAR_2 . METHOD_4 ( ) ; case 1 : return VAR_2 . METHOD_5 ( ) ; } return null ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 . length ( ) ) == 0 ) { return true ; } TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) ; return ( VAR_2 != null ) && ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; } 
public void run ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( true ) ; if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return ; } ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( new TYPE_3 ( ) { public void METHOD_3 ( ) { assert ( VAR_2 ) != null ; VAR_2 . METHOD_4 ( ) ; super . METHOD_3 ( ) ; } } ) ; VAR_3 = ( state != null ) && ( state . METHOD_5 ( VAR_4 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out ) throws TYPE_3 { TYPE_4 os = null ; try { try { os = new TYPE_5 ( out . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( os ) ; } finally { if ( os != null ) { os . METHOD_4 ( ) ; } } } catch ( java.io.IOException e ) { throw new TYPE_3 ( e ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ( ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) || ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) || ( VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) || ( VAR_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) { return false ; } return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( INT_1 , STRING_1 ) ; java.io.File f = TYPE_1 . METHOD_3 ( ) ; TYPE_2 out = TYPE_1 . METHOD_4 ( f ) ; out . METHOD_5 ( new TYPE_3 ( VAR_1 ) ) ; out . METHOD_6 ( ) ; out . METHOD_7 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( f ) ; assertNotNull ( VAR_2 . METHOD_8 ( VAR_1 ) ) ; VAR_2 . METHOD_7 ( ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( METHOD_2 ( ) ) { for ( TYPE_1 VAR_2 : VAR_3 ) { if ( VAR_2 . METHOD_3 ( ) . equals ( VAR_1 ) ) { return VAR_2 ; } } } return METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { super . METHOD_1 ( VAR_1 ) ; TYPE_3 VAR_2 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_3 ( VAR_2 , VAR_5 , VAR_4 ) ; METHOD_3 ( VAR_2 , VAR_6 , VAR_4 ) ; METHOD_3 ( VAR_2 , VAR_7 , VAR_8 ) ; METHOD_3 ( VAR_2 , VAR_9 , VAR_4 ) ; METHOD_3 ( VAR_2 , VAR_10 , VAR_4 ) ; } 
synchronized void METHOD_1 ( int VAR_1 ) throws TYPE_1 { if ( ( VAR_2 ) == null ) { return ; } if ( ( TYPE_2 . METHOD_2 ( ) ) == false ) { return ; } if ( ( VAR_3 ) != null ) { TYPE_3 . d ( STRING_1 , ( STRING_2 + VAR_1 ) ) ; VAR_4 = VAR_1 ; METHOD_3 ( ) ; } else { VAR_4 = VAR_1 ; } } 
private boolean METHOD_1 ( long VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { return true ; } else if ( VAR_1 < ( VAR_3 ) ) { return false ; } else if ( VAR_1 == ( VAR_3 ) ) { return true ; } else { if ( ( VAR_3 ) != 0 ) { VAR_4 . METHOD_2 ( ( VAR_1 - ( VAR_3 ) ) ) ; } VAR_3 = VAR_1 ; return false ; } } 
protected final void METHOD_1 ( ) throws java.lang.Throwable { try { if ( ( VAR_1 ) != null ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; } if ( ( VAR_2 ) != null ) { synchronized ( VAR_2 ) { transitionTo ( VAR_3 ) ; } } } finally { super . METHOD_1 ( ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 context , TYPE_4 call , int VAR_2 ) { TYPE_5 arg = TYPE_3 . METHOD_2 ( call , VAR_2 ) ; if ( arg == null ) { return null ; } return new TYPE_6 ( context , VAR_1 ) . METHOD_3 ( arg ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 , java.lang.String [ ] args ) { for ( TYPE_5 VAR_8 : VAR_9 ) { TYPE_1 VAR_10 = VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , args ) ; if ( VAR_10 != null ) { return VAR_10 ; } } return null ; } 
private TYPE_1 METHOD_1 ( TYPE_1 request ) { TYPE_2 in = METHOD_2 ( request ) ; int VAR_1 = in . METHOD_3 ( ) ; int flags = in . METHOD_3 ( ) ; if ( false ) { android.util.Log.v ( STRING_1 , ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) + flags ) ) ; } try { TYPE_3 . METHOD_4 ( VAR_1 , flags ) ; return null ; } catch ( java.lang.RuntimeException re ) { return METHOD_5 ( 1 , re . getMessage ( ) ) ; } } 
public static void METHOD_1 ( java.lang.String [ ] args ) { VAR_1 = new char [ INT_1 * INT_2 ] [ ] ; if ( ! ( Main . METHOD_2 ( VAR_1 ) ) ) { java.lang.System.out.println ( STRING_1 ) ; } if ( ! ( Main . METHOD_3 ( ) ) ) { java.lang.System.out.println ( STRING_2 ) ; } TYPE_1 . METHOD_4 ( ) ; } 
private void METHOD_1 ( ) { int VAR_1 = VAR_2 . METHOD_2 ( ) ; int VAR_3 = VAR_2 . METHOD_3 ( ) ; int VAR_4 = VAR_2 . METHOD_4 ( ) ; int VAR_5 = VAR_3 * ( VAR_6 ) ; char [ ] VAR_7 = new char [ VAR_5 ] ; TYPE_1 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , 0 , VAR_7 , 0 , VAR_4 ) ; VAR_2 = TYPE_2 . METHOD_7 ( VAR_7 , 0 , VAR_5 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; } 
public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) ; } } 
protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; } 
private void METHOD_1 ( ) { TYPE_1 < TYPE_2 > result ; do { try { result = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_4 e ) { METHOD_3 ( e ) ; return ; } } while ( result . METHOD_4 ( ) ) ; if ( ( result . METHOD_5 ( ) ) == ( VAR_3 ) ) { METHOD_6 ( ) ; } else { METHOD_3 ( new TYPE_4 ( result . METHOD_5 ( ) ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 , int VAR_2 ) { TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; assert VAR_3 != ( VAR_4 ) ; TYPE_1 v ; java.lang.String id = METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) ) ; java.lang.String VAR_5 = id ; TYPE_4 VAR_6 = METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ; v = METHOD_6 ( VAR_2 , id , VAR_5 , VAR_6 , null , VAR_7 ) ; return v ; } 
private static java.lang.Class METHOD_1 ( java.lang.String name , TYPE_1 VAR_1 , long VAR_2 , java.util.List < java.lang.Throwable > VAR_3 ) { java.lang.Class result = null ; try { result = TYPE_2 . METHOD_2 ( name , VAR_1 , VAR_2 ) ; } catch ( TYPE_3 e ) { if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( e ) ; } } catch ( TYPE_4 e ) { if ( VAR_3 != null ) { VAR_3 . METHOD_3 ( e ) ; } } return result ; } 
private void METHOD_1 ( int VAR_1 ) throws java.io.IOException { VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; VAR_5 . METHOD_3 ( VAR_6 ) ; VAR_5 . METHOD_4 ( VAR_7 ) ; VAR_5 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( java.lang.Integer . toString ( VAR_1 ) ) ; VAR_2 . METHOD_7 ( VAR_3 , ( ( VAR_4 ) + 1 ) ) ; VAR_5 . METHOD_8 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) { for ( TYPE_3 d : VAR_2 ) { boolean VAR_3 = METHOD_2 ( VAR_1 , d ) ; if ( ! VAR_3 ) { java.lang.String VAR_4 = ( d . METHOD_3 ( ) ) ? d . METHOD_4 ( ) : d . METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , ( STRING_1 + VAR_4 ) ) ; continue ; } METHOD_8 ( VAR_1 , d ) ; } METHOD_9 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 en = VAR_1 ; boolean [ ] VAR_2 = new boolean [ 1 ] ; TYPE_2 VAR_3 = TYPE_2 . METHOD_2 ( STRING_1 ) ; if ( ! ( METHOD_3 ( ) ) ) { assertEquals ( STRING_2 , STRING_3 , VAR_3 . getName ( en , VAR_4 , VAR_2 ) ) ; assertEquals ( STRING_4 , STRING_5 , VAR_3 . getName ( en , VAR_5 , VAR_2 ) ) ; } } 
private java.lang.String METHOD_1 ( float ... VAR_1 ) throws java.lang.Throwable { TYPE_1 . METHOD_2 ( INT_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( METHOD_3 ( ) , VAR_3 , VAR_4 ) ; TYPE_3 VAR_5 = TYPE_3 . METHOD_4 ( VAR_2 , 100 ) ; VAR_5 . METHOD_5 ( new TYPE_4 ( VAR_1 , new float [ ] { FLOAT_1 , FLOAT_1 , FLOAT_1 } ) ) ; VAR_5 . METHOD_6 ( METHOD_7 ( ) ) ; return null ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; } 
public void run ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( true ) ; if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return ; } ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( new TYPE_3 ( ) { public void METHOD_3 ( ) { assert ( VAR_2 ) != null ; VAR_2 . METHOD_4 ( ) ; super . METHOD_3 ( ) ; } } ) ; VAR_3 = state . METHOD_5 ( VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { if ( ( ( VAR_1 == null ) || ( ( VAR_1 . length ) < 1 ) ) || ( ( VAR_1 [ 0 ] ) == null ) ) { return ; } java.lang.String VAR_2 = VAR_1 [ 0 ] . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_1 . get ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; assertEquals ( STRING_3 , VAR_2 [ 1 ] ) ; assertEquals ( STRING_4 , VAR_3 [ 1 ] ) ; assertEquals ( STRING_5 , VAR_4 [ 1 ] ) ; assertEquals ( STRING_6 , VAR_5 [ 1 ] ) ; assertEquals ( STRING_7 , VAR_6 [ 1 ] ) ; assertEquals ( STRING_5 , VAR_7 [ 1 ] ) ; } 
void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 value , int VAR_2 ) { TYPE_3 < TYPE_1 , TYPE_2 > VAR_3 = VAR_4 ; if ( ( VAR_3 != ( VAR_5 ) ) && ( METHOD_2 ( VAR_3 ) ) ) { METHOD_3 ( VAR_3 . key ) ; } super . METHOD_1 ( VAR_1 , key , value , VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( ) { assert ( METHOD_2 ( ) ) != null : this ; java.lang.String VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_1 . METHOD_4 ( ) ) { return new TYPE_1 ( ) ; } return TYPE_1 . METHOD_5 ( TYPE_2 . on ( CHAR_1 ) . METHOD_6 ( VAR_1 ) ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; if ( VAR_1 != null ) { sb.append ( VAR_1 ) ; } if ( VAR_2 != null ) { if ( ( sb . length ( ) ) > 0 ) { sb.append ( STRING_1 ) ; } sb.append ( VAR_2 ) ; } return sb . toString ( ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < java.io.File > VAR_1 = METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 . size ( ) ) ; for ( java.io.File VAR_3 : VAR_1 ) { VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 , true , true ) ) ; } return VAR_2 ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( VAR_1 ) { android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ; } TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) { return false ; } return ( ( service . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( service . METHOD_4 ( ) . equals ( device ) ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( ! ( obj instanceof TYPE_1 ) ) return false ; TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; return VAR_2 . equals ( VAR_3 ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } } 
public TYPE_1 METHOD_1 ( int VAR_1 ) { if ( VAR_1 > 0 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_4 ) { if ( VAR_2 == null ) { java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_5 . METHOD_2 ( ) ) ) + STRING_2 ) + VAR_1 ) ) ; } } assert VAR_2 != null ; return VAR_2 ; } return null ; } 
private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws TYPE_3 , TYPE_4 { if ( ( VAR_1 . METHOD_2 ( ) . equals ( VAR_3 ) ) && ( STRING_1 . equals ( VAR_1 . METHOD_3 ( STRING_2 ) ) ) ) { return TYPE_5 . METHOD_4 ( VAR_2 ) ; } else { throw new TYPE_3 ( ( ( STRING_3 + VAR_2 ) + STRING_4 ) ) ; } } 
public boolean equals ( java.lang.Object obj ) { if ( ( obj != null ) && ( obj instanceof TYPE_1 ) ) { TYPE_1 < ? > VAR_1 = ( ( TYPE_1 < ? > ) ( obj ) ) ; if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { return TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { android.content.Intent VAR_3 = new android.content.Intent ( this , METHOD_2 ( ) ) ; VAR_3 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 ) ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = ( ( VAR_1 ) && ( ( METHOD_2 ( ) ) > 1 ) ) && ( METHOD_3 ( STRING_1 ) ) ; if ( VAR_1 ) { VAR_2 = METHOD_4 ( ) ; METHOD_5 ( VAR_3 ) ; METHOD_6 ( ( ( ( VAR_4 ) + STRING_2 ) + ( VAR_5 ) ) , VAR_2 ) ; METHOD_7 ( VAR_2 ) ; } } 
public void METHOD_1 ( TYPE_1 context , android.content.Intent VAR_1 ) { android.util.Log.v ( VAR_2 . TAG , STRING_1 ) ; java.lang.String action = VAR_1 . METHOD_2 ( ) ; if ( action . equals ( VAR_3 ) ) { android.bluetooth.BluetoothDevice device = VAR_1 . METHOD_3 ( VAR_4 ) ; if ( ( METHOD_4 ( device ) ) >= ( VAR_5 ) ) { METHOD_5 ( device ) ; } } else if ( action . equals ( VAR_6 ) ) { android.bluetooth.BluetoothDevice device = VAR_1 . METHOD_3 ( VAR_4 ) ; METHOD_6 ( device ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 s = new TYPE_1 ( STRING_1 , 0 , false ) ; s . METHOD_2 ( ) ; try { s . METHOD_2 ( ) ; fail ( STRING_2 ) ; } catch ( TYPE_2 VAR_1 ) { } s . METHOD_3 ( ) ; try { s . METHOD_3 ( ) ; fail ( STRING_2 ) ; } catch ( TYPE_2 VAR_1 ) { } } 
static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; } 
protected java.util.List < java.lang.String > METHOD_1 ( android.os.Bundle args ) { java.lang.String VAR_1 = args . METHOD_2 ( VAR_2 ) ; java.util.List < java.lang.String > VAR_3 ; if ( VAR_1 == null ) { VAR_3 = null ; } else { VAR_3 = TYPE_1 . METHOD_3 ( VAR_1 ) ; } return VAR_3 ; } 
protected void METHOD_1 ( TYPE_1 context , android.content.Intent VAR_1 ) { try { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( context ) ; } catch ( java.lang.IllegalArgumentException e ) { TYPE_2 . e ( VAR_2 . TAG , STRING_1 , e ) ; } catch ( java.io.IOException e ) { TYPE_2 . e ( VAR_2 . TAG , STRING_2 , e ) ; } catch ( TYPE_3 e ) { TYPE_2 . e ( VAR_2 . TAG , STRING_2 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 [ ] VAR_1 = new TYPE_1 [ 0 ] ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 request = new TYPE_4 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_5 ( ) . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_2 ) . build ( ) ; TYPE_6 result = METHOD_6 ( VAR_4 , request ) ; org.junit.Assert.assertEquals ( request . METHOD_7 ( ) , result . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException , TYPE_1 { java.io.File f = new java.io.File ( VAR_2 , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; logln ( ( STRING_3 + ( f . METHOD_2 ( ) ) ) ) ; TYPE_2 . METHOD_3 ( f , VAR_3 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( ( ( ( this ) == ( VAR_2 ) ) && ( VAR_1 != ( VAR_2 ) ) ) || ( ( ( this ) != ( VAR_2 ) ) && ( VAR_1 == ( VAR_2 ) ) ) ) { throw new TYPE_2 ( ( ( ( this ) + STRING_1 ) + VAR_1 ) ) ; } return ( METHOD_2 ( ) ) > ( VAR_1 . METHOD_2 ( ) ) ; } 
public void run ( ) { for ( TYPE_1 VAR_1 : VAR_2 . get ( action . METHOD_1 ( ) ) ) { if ( VAR_1 instanceof TYPE_2 ) { TYPE_3 c = ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) ; if ( c != null ) { VAR_3 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) , action , null , ( ! VAR_4 ) ) ; } } } } 
public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( fd , VAR_1 , args ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) ) ; VAR_2 . METHOD_6 ( TYPE_3 . getName ( ) , STRING_1 ) ; session = TYPE_2 . METHOD_7 ( VAR_2 ) ; TYPE_4 . assertNotNull ( session ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; } 
public java.io.File METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 VAR_3 ) { for ( TYPE_2 target : VAR_3 . METHOD_2 ( ) ) { if ( ( target . METHOD_3 ( ) ) && ( target . METHOD_4 ( ) . equals ( VAR_4 ) ) ) { return new java.io.File ( target . METHOD_5 ( ) ) ; } } java.io.File VAR_5 = new java.io.File ( VAR_1 , VAR_6 ) ; java.io.File VAR_7 = new java.io.File ( VAR_5 , java.lang.String.format ( STRING_1 , METHOD_4 ( ) . METHOD_6 ( ) ) ) ; return VAR_7 ; } 
private java.lang.String format ( double number , TYPE_1 VAR_1 ) { TYPE_2 result = new TYPE_2 ( ) ; if ( ( METHOD_1 ( ) ) != ( VAR_2 ) ) { number = new TYPE_3 ( TYPE_4 . toString ( number ) ) . METHOD_2 ( METHOD_3 ( ) , VAR_3 ) . METHOD_4 ( ) ; } VAR_1 . format ( number , result , 0 , 0 ) ; METHOD_5 ( result , VAR_1 ) ; return result . toString ( ) ; } 
public static java.lang.String METHOD_1 ( java.lang.Object VAR_1 ) { if ( ( VAR_1 == null ) || ( VAR_2 ) ) { return java.lang.String . METHOD_2 ( VAR_1 ) ; } if ( VAR_1 instanceof TYPE_1 ) { return TYPE_2 . METHOD_3 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; } return ( STRING_1 + ( TYPE_2 . METHOD_4 ( java.lang.String . METHOD_2 ( VAR_1 ) . METHOD_5 ( ) ) ) ) + STRING_2 ; } 
public void METHOD_1 ( TYPE_1 device , TYPE_2 VAR_1 , java.lang.Throwable e ) throws TYPE_3 { if ( ! ( VAR_2 . equals ( VAR_3 ) ) ) { device . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) ) ; } if ( ( VAR_4 ) != null ) { TYPE_4 . METHOD_3 ( VAR_4 ) ; device . METHOD_2 ( ( STRING_2 + ( VAR_5 ) ) ) ; } device . METHOD_2 ( STRING_3 ) ; } 
void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; } 
public java.util.List < java.io.File > METHOD_1 ( ) { java.util.List < java.io.File > VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; if ( ( VAR_3 ) != ( VAR_4 ) ) { VAR_1 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ; } if ( METHOD_5 ( ) ) { for ( TYPE_2 VAR_6 : VAR_7 ) { VAR_1 . METHOD_3 ( VAR_6 . METHOD_4 ( ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 , FLOAT_1 , STRING_1 ) ; VAR_1 . METHOD_4 ( 3 ) ; METHOD_3 ( VAR_1 , FLOAT_1 , STRING_2 ) ; VAR_1 . METHOD_5 ( 3 ) ; METHOD_3 ( VAR_1 , FLOAT_1 , STRING_2 ) ; VAR_1 . METHOD_4 ( ( - 1 ) ) ; METHOD_3 ( VAR_1 , FLOAT_1 , STRING_3 ) ; VAR_1 . METHOD_5 ( ( - 1 ) ) ; METHOD_3 ( VAR_1 , FLOAT_1 , STRING_1 ) ; } 
public synchronized void METHOD_1 ( ) { final long VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { final java.lang.String VAR_2 = VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; final boolean VAR_6 = ( VAR_3 . METHOD_4 ( VAR_7 , 0 , VAR_5 ) ) != 0 ; METHOD_5 ( VAR_2 , VAR_6 ) ; } finally { TYPE_1 . METHOD_6 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; } 
static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 a = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( a == null ) { return false ; } TYPE_1 b = VAR_3 . METHOD_2 ( VAR_2 ) ; if ( b == null ) { return false ; } for ( int i = 0 ; i < ( VAR_4 ) ; i ++ ) { if ( ( VAR_5 [ i ] ) != ( VAR_6 [ i ] ) ) { return false ; } } return true ; } 
protected int METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; int VAR_3 = VAR_4 . METHOD_2 ( VAR_5 ) ; if ( VAR_3 != 0 ) { return VAR_3 ; } TYPE_3 VAR_6 = VAR_7 . getName ( ) ; TYPE_3 VAR_8 = VAR_9 . getName ( ) ; return VAR_6 . METHOD_2 ( VAR_8 ) ; } 
protected final int METHOD_1 ( int VAR_1 ) { int VAR_2 = ( VAR_1 + 7 ) / 8 ; byte [ ] b = new byte [ VAR_2 ] ; int VAR_3 = 0 ; METHOD_2 ( b ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) VAR_3 = ( VAR_3 < < 8 ) + ( ( b [ i ] ) & INT_1 ) ; return VAR_3 > > > ( ( VAR_2 * 8 ) - VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( ) { int h = VAR_1 ; TYPE_1 result = VAR_2 [ h ] ; if ( result == null ) return null ; VAR_2 [ h ] = null ; VAR_1 = ( h + 1 ) & ( ( VAR_2 . length ) - 1 ) ; return result ; } 
public void METHOD_1 ( TYPE_1 context , android.content.Intent VAR_1 ) { java.lang.String action = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 ) log ( ( STRING_1 + action ) ) ; if ( action . equals ( VAR_3 ) ) { if ( ( VAR_4 ) == ( VAR_5 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { METHOD_5 ( new android.content.Intent ( VAR_6 ) ) ; } METHOD_6 ( ) ; } } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { boolean result = false ; if ( VAR_1 ) android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ; if ( ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . equals ( device ) ) ) { switch ( VAR_2 ) { case VAR_3 : METHOD_3 ( ( - 1 ) ) ; result = true ; break ; default : break ; } } return result ; } 
public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; } 
static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_1 == null ) || ( VAR_2 == null ) ) return VAR_1 == VAR_2 ; return ( ( VAR_3 . equals ( VAR_4 ) ) && ( TYPE_2 . equals ( VAR_5 , VAR_6 ) ) ) && ( ( VAR_7 ) == ( VAR_8 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 , new java.lang.Class < ? > [ ] { VAR_2 , VAR_3 class , VAR_4 class } , new java.lang.Object [ ] { VAR_5 , METHOD_3 ( ) , null } ) ; TYPE_2 . assertTrue ( VAR_1 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) ; METHOD_6 ( VAR_7 , 10 , VAR_8 ) ; TYPE_2 . assertFalse ( VAR_1 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) ; } 
public static void METHOD_1 ( java.io.File VAR_1 , java.io.File VAR_2 ) throws java.lang.Exception { java.lang.String [ ] args = new java.lang.String [ ] { STRING_1 , VAR_2 . METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) , STRING_2 } ; TYPE_1 options = TYPE_2 . METHOD_3 ( args ) ; new TYPE_3 ( options , STRING_3 ) . METHOD_4 ( options . METHOD_5 ( ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , null , null ) ; METHOD_4 ( ) ; boolean VAR_3 = VAR_4 . METHOD_5 ( VAR_5 ) ; if ( ( ( TYPE_1 . METHOD_6 ( VAR_6 ) ) == false ) && ( ( VAR_4 . METHOD_5 ( VAR_6 ) ) != null ) ) { VAR_3 = true ; } if ( VAR_3 ) { METHOD_7 ( ) ; } VAR_5 . METHOD_8 ( ) ; VAR_7 = null ; METHOD_9 ( VAR_8 ) ; } 
private void METHOD_1 ( ) { VAR_1 = ( VAR_2 ) & ( METHOD_2 ( ) ) ; TYPE_1 VAR_3 = METHOD_3 ( ) ; if ( ( ( VAR_1 ) & ( VAR_3 . METHOD_4 ( ) ) ) == 0 ) { METHOD_5 ( METHOD_6 ( false ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_1 ) ; errln ( ( STRING_2 + ( STRING_3 + STRING_4 ) ) ) ; } catch ( java.lang.Exception e ) { } VAR_1 = ( ( TYPE_1 ) ( VAR_1 . METHOD_5 ( ) ) ) ; } 
public int METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int version , int VAR_5 , int VAR_6 ) { if ( ( VAR_7 ) == false ) { throw new java.lang.RuntimeException ( ( ( VAR_8 . TAG ) + STRING_1 ) ) ; } return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , version , VAR_5 , VAR_6 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; int VAR_3 = 0 ; for ( TYPE_1 VAR_4 : VAR_5 ) { if ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) > VAR_3 ) { VAR_3 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ; } } VAR_6 . METHOD_6 ( VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } 
public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; } 
public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 method , TYPE_3 VAR_2 , int offset , TYPE_4 VAR_3 ) { VAR_4 = METHOD_2 ( offset , VAR_4 ) ; METHOD_3 ( offset , VAR_5 ) ; VAR_6 . METHOD_1 ( VAR_1 , method , VAR_2 , VAR_7 , VAR_3 ) ; VAR_7 += VAR_3 . length ( VAR_7 ) ; } 
public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this ) { if ( VAR_2 ) { return ; } TYPE_2 node ; try { node = METHOD_2 ( ) ; node . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( METHOD_4 ( VAR_1 ) , e ) ; } VAR_2 = true ; } } 
protected void METHOD_1 ( TYPE_1 key , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , TYPE_5 { if ( ( VAR_1 != null ) && ( ! ( ( VAR_1 instanceof TYPE_6 ) || ( VAR_1 instanceof TYPE_7 ) ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } METHOD_2 ( key , VAR_1 ) ; } 
public synchronized void run ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 ) throws java.lang.Exception { if ( ( VAR_1 . METHOD_1 ( ) ) || ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) { return ; } TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_2 ( ) . METHOD_6 ( ) , VAR_1 ) ; } 
public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; } 
public void run ( ) { try { VAR_1 = TYPE_1 . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ) ; VAR_2 = new TYPE_2 ( ) ; METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( ) ; } catch ( TYPE_3 e ) { e . METHOD_6 ( ) ; fail ( STRING_1 ) ; } finally { METHOD_7 ( ) ; VAR_2 = null ; VAR_1 = null ; } } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
private static void METHOD_1 ( int VAR_1 , int status ) { if ( VAR_2 ) { android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + status ) ) ; } VAR_4 . METHOD_2 ( VAR_1 , ( status == ( VAR_5 ) ? VAR_6 : VAR_7 ) , false ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 , true ) ; for ( TYPE_2 node : VAR_2 ) { if ( ( node . METHOD_4 ( ) ) == false ) VAR_3 . METHOD_3 ( node , true ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 out ) throws TYPE_3 { TYPE_4 os = null ; try { try { os = new TYPE_5 ( out . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( os ) ; } finally { if ( os != null ) { os . METHOD_4 ( ) ; } } } catch ( java.io.IOException e ) { throw new TYPE_3 ( e ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_2 ) { TYPE_3 . d ( VAR_3 , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; TYPE_3 . d ( VAR_3 , this . toString ( ) ) ; } TYPE_4 VAR_4 = VAR_1 . METHOD_2 ( ) ; VAR_4 . METHOD_1 ( ) ; if ( VAR_2 ) { TYPE_3 . d ( VAR_3 , ( ( STRING_3 + VAR_1 ) + STRING_2 ) ) ; TYPE_3 . d ( VAR_3 , this . toString ( ) ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; } 
private void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) || ( TYPE_2 . METHOD_3 ( STRING_1 , false ) ) ) { TYPE_3 . METHOD_4 ( VAR_1 ) . METHOD_5 ( METHOD_6 ( ) , STRING_2 ) ; } else { android.os.Bundle VAR_2 = METHOD_7 ( ) . METHOD_8 ( ) ; VAR_2 . METHOD_9 ( VAR_3 , VAR_4 ) ; android.content.Intent VAR_5 = new android.content.Intent ( this , VAR_6 class ) . METHOD_10 ( VAR_7 , VAR_2 ) ; METHOD_11 ( VAR_5 , VAR_8 ) ; } } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } } 
public static java.lang.String METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; case VAR_4 : return STRING_3 ; case VAR_5 : return STRING_4 ; case VAR_6 : return STRING_5 ; case VAR_7 : return STRING_6 ; case VAR_8 : return STRING_7 ; case VAR_9 : return STRING_8 ; case VAR_10 : return STRING_9 ; case VAR_11 : return STRING_10 ; case VAR_12 : return STRING_11 ; case VAR_13 : return STRING_12 ; default : return java.lang.Integer . toString ( VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; try { key . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_1 expected ) { } key . METHOD_4 ( ) ; try { key . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_1 expected ) { } } 
private static void METHOD_1 ( TYPE_1 x , java.lang.String VAR_1 ) { try { java.io.File VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_3 out = new TYPE_4 ( VAR_2 ) ; out . METHOD_5 ( x . METHOD_6 ( ) ) ; out . METHOD_7 ( ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 [ ] VAR_1 = new TYPE_1 [ 0 ] ; TYPE_2 request = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_4 ( ) . METHOD_4 ( VAR_2 ) ) . build ( ) ; TYPE_5 result = METHOD_5 ( request ) ; TYPE_6 . METHOD_6 ( result . METHOD_7 ( ) ) ; } 
private TYPE_1 METHOD_1 ( java.lang.Object VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == VAR_1 ) { return VAR_2 ; } for ( TYPE_1 VAR_3 : VAR_2 . METHOD_3 ( ) ) { TYPE_1 v = METHOD_1 ( VAR_1 , VAR_3 ) ; if ( v != null ) { return v ; } } return null ; } 
public void METHOD_1 ( ) throws android.os.RemoteException { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , 0 , 0 , 0 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) ) ; } 
static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; } 
private void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { boolean VAR_3 = ( ( VAR_4 ) == null ) ? true : ! ( VAR_4 . get ( VAR_1 ) ) ; TYPE_1 VAR_5 ; if ( VAR_3 ) { VAR_5 = VAR_2 . METHOD_2 ( VAR_6 ) ; if ( ! ( VAR_7 ) ) { VAR_6 += VAR_5 . METHOD_3 ( ) ; } VAR_7 = false ; } else { VAR_5 = VAR_2 ; } result . METHOD_4 ( VAR_1 , VAR_5 ) ; } 
public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; } 
static byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; try { TYPE_2 os = new TYPE_2 ( VAR_2 ) ; os . METHOD_2 ( VAR_1 ) ; os . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.w ( VAR_3 . TAG , ( ( ( STRING_1 + e ) + STRING_2 ) + VAR_1 ) ) ; } finally { return VAR_2 . METHOD_4 ( ) ; } } 
public void METHOD_1 ( TYPE_1 v ) { if ( TYPE_2 . METHOD_2 ( ) ) { VAR_1 . METHOD_1 ( new TYPE_1 ( v . METHOD_3 ( ) ) ) ; return ; } for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_4 ( VAR_2 [ i ] ) ; } } 
private void METHOD_1 ( java.lang.String provider ) throws java.lang.Exception { METHOD_1 ( provider , ( ( byte ) ( 1 ) ) , TYPE_1 . METHOD_2 ( STRING_1 ) , TYPE_1 . METHOD_3 ( STRING_1 ) ) ; METHOD_1 ( provider , ( ( byte ) ( 2 ) ) , TYPE_1 . METHOD_3 ( STRING_1 ) , TYPE_1 . METHOD_2 ( STRING_1 ) ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( VAR_2 class ) ; TYPE_1 result = null ; for ( TYPE_1 VAR_3 : VAR_1 . METHOD_3 ( ) ) { TYPE_3 VAR_4 = VAR_1 . METHOD_4 ( VAR_3 ) ; if ( VAR_4 . METHOD_5 ( VAR_5 ) ) { TYPE_4 . i ( STRING_1 , ( VAR_3 + STRING_2 ) ) ; if ( result != null ) { return null ; } result = VAR_3 ; } } return result ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return new TYPE_1 ( ) ; } TYPE_2 VAR_3 = VAR_2 . METHOD_2 ( ) ; assert VAR_3 != null ; return TYPE_3 . METHOD_1 ( VAR_1 , VAR_3 ) . append ( VAR_2 . getName ( ) ) . append ( CHAR_1 ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { for ( TYPE_2 VAR_4 : VAR_2 . METHOD_2 ( ) ) { if ( VAR_1 . equals ( VAR_4 . METHOD_3 ( ) ) ) { return true ; } } } return false ; } 
public int METHOD_1 ( TYPE_1 target ) throws java.io.IOException { if ( ( VAR_1 ) == 1 ) { target . append ( CHAR_1 ) ; target . append ( CHAR_2 ) ; target . append ( CHAR_3 ) ; ( VAR_1 ) ++ ; return 3 ; } else if ( ( VAR_1 ) == 2 ) { target . append ( CHAR_4 ) ; ( VAR_1 ) ++ ; return 1 ; } else { throw new java.io.IOException ( ) ; } } 
protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; android.content.Intent VAR_2 = METHOD_2 ( ) ; METHOD_3 ( VAR_2 ) ; final TYPE_1 VAR_3 = ( ( TYPE_1 ) ( METHOD_4 ( VAR_4 ) ) ) ; final TYPE_2 VAR_5 = new TYPE_2 ( VAR_3 . METHOD_5 ( ) ) ; new TYPE_3 ( this , VAR_5 ) . METHOD_6 ( METHOD_2 ( ) , METHOD_7 ( ) , true ) ; METHOD_8 ( ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { TYPE_3 VAR_1 = element . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( VAR_1 != null ) { java.lang.String VAR_4 = VAR_1 . METHOD_3 ( ) ; if ( ( TYPE_4 . METHOD_4 ( VAR_5 , VAR_4 ) ) >= 0 ) { context . METHOD_5 ( VAR_6 , element , context . METHOD_6 ( VAR_1 ) , STRING_1 , null ) ; } } } 
private static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 class . METHOD_2 ( ) ; java.lang.Class VAR_3 ; try { VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_3 VAR_4 ) { return null ; } TYPE_1 VAR_5 ; try { VAR_5 = VAR_3 . METHOD_4 ( STRING_2 , new java.lang.Class [ ] { VAR_6 . String class } ) ; } catch ( TYPE_4 VAR_7 ) { VAR_8 . println ( STRING_3 ) ; return null ; } return VAR_5 ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; int VAR_2 = ( VAR_1 . METHOD_3 ( new TYPE_2 ( time ) ) ) ? VAR_1 . METHOD_4 ( ) : 0 ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; VAR_4 [ VAR_5 ] = VAR_2 ; VAR_4 [ VAR_6 ] = VAR_3 ; METHOD_6 ( time , VAR_3 ) ; for ( int i = 0 ; i < ( VAR_7 ) ; i ++ ) { VAR_8 [ i ] = true ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; fail ( STRING_2 ) ; } catch ( java.io.IOException e ) { } TYPE_2 . METHOD_2 ( VAR_2 , null , VAR_3 ) ; java.lang.String VAR_4 = new java.io.File ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_4 ) ; VAR_1 . METHOD_4 ( ) ; } 
public void METHOD_1 ( android.os.Message msg ) { switch ( VAR_1 ) { case VAR_2 : VAR_3 . METHOD_2 ( mContext , VAR_4 , VAR_5 , 0 ) ; METHOD_3 ( true ) ; break ; default : METHOD_4 ( ( STRING_1 + ( VAR_1 ) ) ) ; break ; } } 
public void METHOD_1 ( int session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; } 
private int METHOD_1 ( TYPE_1 pkg , boolean VAR_1 , boolean VAR_2 , boolean VAR_3 ) { TYPE_2 < java.lang.String > VAR_4 ; boolean VAR_5 = false ; if ( VAR_3 && ( ( ( VAR_6 ) != null ) || ( ( VAR_7 ) != null ) ) ) { VAR_4 = new TYPE_2 < java.lang.String > ( ) ; VAR_4 . METHOD_2 ( pkg . packageName ) ; } else { VAR_4 = null ; } return METHOD_1 ( pkg , VAR_1 , VAR_2 , VAR_4 ) ; } 
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { java.lang.Class < ? > VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 == null ) { throw new TYPE_2 ( ) ; } try { return VAR_1 . METHOD_2 ( STRING_1 ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( e ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
public < TYPE_1 extends TYPE_2 > boolean METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { assert METHOD_2 ( VAR_1 ) : ( ( ( STRING_1 + ( TYPE_3 . getName ( VAR_1 ) ) ) + STRING_2 ) + ( this . METHOD_3 ( ) . getName ( ) ) ) + STRING_3 ; synchronized ( VAR_2 ) { if ( ( VAR_3 ) == null ) { return false ; } } return VAR_3 . METHOD_4 ( VAR_1 ) ; } 
private void METHOD_1 ( java.io.File VAR_1 ) throws java.io.IOException { TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_2 != null ) { for ( TYPE_3 VAR_3 : VAR_4 ) { VAR_3 . METHOD_3 ( VAR_2 ) ; } java.lang.String VAR_5 = TYPE_4 . METHOD_4 ( VAR_2 ) ; TYPE_5 . METHOD_5 ( VAR_5 , VAR_1 , VAR_6 ) ; } } 
public final void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 , TYPE_5 { VAR_4 = false ; TYPE_6 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_3 ( VAR_1 , key , VAR_2 , VAR_3 ) ; } else { METHOD_4 ( VAR_6 , VAR_1 , key , null , VAR_2 , VAR_3 ) ; } VAR_4 = true ; this . VAR_1 = VAR_1 ; } 
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) return ; android.bluetooth.BluetoothDevice device = METHOD_3 ( STRING_1 ) ; TYPE_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . get ( device ) ) ; TYPE_1 . assertTrue ( VAR_1 . METHOD_6 ( device ) ) ; java.util.Map < android.bluetooth.BluetoothDevice , TYPE_2 > VAR_2 = VAR_1 . METHOD_5 ( ) ; org.junit.Assert.assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_1 . assertNotNull ( VAR_2 . get ( device ) ) ; } 
public int METHOD_1 ( ) { final int VAR_1 = INT_1 ; int result = 1 ; result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) ; for ( TYPE_1 VAR_3 : VAR_2 ) { result += VAR_3 . METHOD_1 ( ) ; } return result ; } 
public void METHOD_1 ( ) { s = new TYPE_1 ( new TYPE_2 ( ) ) ; assertNotNull ( s ) ; s . METHOD_2 ( ) ; try { s = new TYPE_1 ( ( ( TYPE_3 ) ( null ) ) ) ; fail ( STRING_1 ) ; } catch ( java.lang.NullPointerException e ) { } } 
private static boolean METHOD_1 ( byte [ ] result , byte [ ] VAR_1 ) { if ( ( ( ( ( result [ 0 ] ) != ( VAR_1 [ 0 ] ) ) || ( ( result [ 1 ] ) != ( VAR_1 [ 1 ] ) ) ) || ( ( result [ 2 ] ) != ( VAR_1 [ 2 ] ) ) ) || ( ( result [ 3 ] ) != ( VAR_1 [ 3 ] ) ) ) { return false ; } return true ; } 
protected void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) ; } if ( ( VAR_2 ) != null ) { METHOD_3 ( VAR_2 ) ; } if ( ( ( VAR_2 ) != null ) && ( VAR_3 ) ) { METHOD_3 ( VAR_2 ) ; } if ( ( VAR_4 ) != null ) { METHOD_3 ( VAR_4 ) ; } super . METHOD_1 ( ) ; VAR_5 = false ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new java.lang.Runnable ( STRING_1 ) { public void METHOD_3 ( ) { synchronized ( VAR_2 ) { if ( ( VAR_3 ) == 0 ) { TYPE_1 . METHOD_4 ( this , STRING_2 ) ; } else if ( ( -- ( VAR_3 ) ) == 0 ) { VAR_4 . METHOD_5 ( false ) ; } } } } . METHOD_6 ( ) ) ; } 
static void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_1 . size ( ) ) == 0 ) { return ; } java.util.ArrayList < java.lang.Runnable > VAR_2 = new java.util.ArrayList < java.lang.Runnable > ( VAR_1 ) ; for ( int i = 0 ; i < ( VAR_2 . size ( ) ) ; i ++ ) { VAR_2 . get ( i ) . run ( ) ; } } } 
private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 is = METHOD_2 ( ) ; try { assertEquals ( CHAR_1 , METHOD_3 ( is ) ) ; try { assertEquals ( CHAR_2 , METHOD_4 ( is ) ) ; fail ( STRING_1 ) ; } catch ( java.io.IOException e ) { assertEquals ( STRING_2 , e.getMessage ( ) ) ; } } finally { is . METHOD_5 ( ) ; } } 
static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 != null ) { byte [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = VAR_1 . METHOD_3 ( ) ; int length = VAR_1 . METHOD_4 ( ) ; if ( length != 0 ) { try { return TYPE_3 . METHOD_5 ( VAR_2 , VAR_3 , length ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( VAR_4 ) ; } } else { return VAR_5 ; } } else { return VAR_5 ; } } 
TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; } 
public void METHOD_1 ( java.io.File VAR_1 ) { new TYPE_1 ( log ) . args ( STRING_1 , STRING_2 , java.lang.Integer . toString ( VAR_2 ) , VAR_3 , STRING_3 , STRING_4 , STRING_5 , VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( ) . METHOD_4 ( ) ; } 
void test ( ) { java.util.List < java.lang.String > result = new java.util.ArrayList ( TYPE_1 . METHOD_1 ( ) . VAR_1 ) ; if ( ( result . size ( ) ) == 0 ) { status = VAR_2 ; } else { METHOD_2 ( ) ; status = VAR_3 ; METHOD_3 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_4 ) ) ) ; } METHOD_4 ( ) ; } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , java.lang.Object d , int VAR_5 , TYPE_1 VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 , VAR_7 ) ; } 
public void METHOD_1 ( TYPE_1 event ) { if ( VAR_1 ) { android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + ( java.lang.String . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) ) ) ) + STRING_3 ) + ( VAR_5 ) ) ) ; } VAR_6 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , METHOD_5 ( VAR_7 ) ) ; } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 , int VAR_2 ) { assert ( METHOD_2 ( ) ) == ( VAR_3 ) ; return new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , a , b , c , d ) ; } 
public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; } 
private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; } 
private void METHOD_1 ( TYPE_1 call ) { TYPE_2 . d ( this , STRING_1 , call ) ; if ( ! ( VAR_1 . METHOD_2 ( call ) ) ) { VAR_1 . METHOD_3 ( call ) ; } if ( TYPE_3 . equals ( VAR_2 , call . METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } } 
public TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 type , TYPE_3 config ) { java.util.List < TYPE_4 > VAR_1 = TYPE_5 . METHOD_2 ( type ) ; for ( TYPE_4 t : VAR_1 ) { if ( t == ( VAR_2 ) ) { continue ; } TYPE_1 match = METHOD_1 ( name , type , config ) ; if ( match != null ) { return match ; } } return null ; } 
public synchronized void METHOD_1 ( ) { if ( VAR_1 ) { return ; } VAR_1 = true ; if ( ( ( path ) == null ) || ( path . METHOD_2 ( ) ) ) { return ; } try { VAR_2 = new TYPE_1 ( path . METHOD_3 ( ) ) ; } catch ( java.io.IOException VAR_3 ) { TYPE_2 . METHOD_4 ( ( STRING_1 + ( path ) ) , VAR_3 ) ; VAR_2 = null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) ; assertFalse ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; assertTrue ( VAR_1 . METHOD_8 ( VAR_2 ) ) ; assertTrue ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
private synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String packageName = VAR_1 . METHOD_2 ( ) ; METHOD_3 ( packageName ) ; TYPE_2 info = new TYPE_2 ( TYPE_1 . METHOD_4 ( VAR_1 ) , VAR_2 , VAR_3 , METHOD_5 ( VAR_1 . METHOD_6 ( ) ) , METHOD_7 ( packageName ) , METHOD_8 ( packageName ) ) ; METHOD_9 ( info ) ; } 
public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } } 
public void set ( TYPE_1 config , boolean VAR_1 ) { if ( config != null ) { for ( int i = 0 ; i < ( VAR_2 ) ; i ++ ) { TYPE_2 VAR_3 = VAR_4 [ i ] ; if ( ( ( VAR_1 == false ) || ( VAR_3 == null ) ) || ( ( VAR_3 . METHOD_1 ( ) ) == false ) ) { VAR_5 [ i ] = VAR_3 ; } } } } 
public void event ( TYPE_1 VAR_1 , java.lang.String event , java.lang.String format , java.lang.Object ... args ) { java.lang.String msg ; try { msg = ( ( args == null ) || ( ( args . length ) == 0 ) ) ? format : java.lang.String.format ( VAR_2 , format , args ) ; } catch ( TYPE_2 VAR_3 ) { TYPE_3 . e ( STRING_1 , VAR_3 , STRING_2 , format , args . length ) ; msg = format + STRING_3 ; } event ( VAR_1 , event , msg ) ; } 
private void METHOD_1 ( TYPE_1 expected ) { TYPE_2 < TYPE_3 > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; org.mockito.Mockito.verify ( VAR_3 , TYPE_4 . METHOD_3 ( ) ) . log ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 VAR_4 = METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; if ( ! ( METHOD_7 ( expected , VAR_4 ) ) ) { assertEquals ( expected , VAR_4 ) ; } } 
private synchronized void METHOD_1 ( byte [ ] address , int state ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + ( TYPE_1 . toString ( address ) ) ) + STRING_2 ) + state ) ) ; android.os.Message msg = VAR_3 . METHOD_2 ( VAR_4 ) ; msg.obj = address ; msg.arg1 = state ; VAR_3 . METHOD_3 ( msg ) ; } 
public static final java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; final int VAR_2 = VAR_1 . METHOD_2 ( ) ; for ( int i = 1 ; i <= VAR_2 ; i ++ ) { java.lang.String s = VAR_1 . METHOD_3 ( i ) ; VAR_3 . println ( ( ( ( STRING_1 + i ) + STRING_2 ) + s ) ) ; if ( s != null ) { b . append ( s ) ; } } return b . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } 
public java.lang.String METHOD_1 ( java.lang.String path ) { if ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_2 , path ) ; } 
static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; } 
public java.lang.Integer METHOD_1 ( java.lang.Integer VAR_1 , TYPE_1 VAR_2 ) throws android.os.RemoteException , TYPE_2 { synchronized ( VAR_3 ) { TYPE_3 session = VAR_4 . get ( VAR_1 ) ; if ( session == null ) { throw new TYPE_4 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } int VAR_5 = METHOD_2 ( ) ; session . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_2 ) , new TYPE_6 ( VAR_5 ) ) ; return VAR_5 ; } } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } } 
public static int METHOD_1 ( ) { int x = 0 ; int y = 1 ; while ( ( y ++ ) < 10 ) { if ( y > 1 ) { x = INT_1 ; } else { x = INT_2 ; } } return x ; } 
private long METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , int VAR_7 ) { TYPE_2 VAR_8 = new TYPE_3 ( VAR_1 ) ; VAR_8 . METHOD_2 ( ) ; VAR_8 . set ( VAR_2 , ( VAR_3 - 1 ) , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; return VAR_8 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { final int VAR_1 = 10 ; TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( ) ; try { TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( null ) ; VAR_2 . METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_1 ) ; TYPE_3 VAR_4 = VAR_2 . METHOD_7 ( ) ; METHOD_8 ( VAR_4 ) ; int VAR_5 = VAR_3 . METHOD_9 ( ) ; assertEquals ( VAR_1 , VAR_5 ) ; } finally { VAR_2 . METHOD_10 ( ) ; } } 
public void METHOD_1 ( ) { if ( VAR_1 ) { TYPE_1 . d ( VAR_2 , STRING_1 ) ; TYPE_1 . d ( VAR_2 , this . toString ( ) ) ; } if ( METHOD_2 ( ) ) METHOD_3 ( ) . METHOD_1 ( ) ; if ( VAR_1 ) { TYPE_1 . d ( VAR_2 , STRING_2 ) ; TYPE_1 . d ( VAR_2 , this . toString ( ) ) ; } } 
private static void METHOD_1 ( TYPE_1 entry , java.lang.String VAR_1 , int uid , int set , int VAR_2 , int VAR_3 , int VAR_4 ) { assertEquals ( VAR_1 , VAR_5 ) ; assertEquals ( uid , entry . uid ) ; assertEquals ( set , entry . set ) ; assertEquals ( VAR_2 , VAR_6 ) ; assertEquals ( VAR_3 , VAR_7 ) ; assertEquals ( VAR_4 , VAR_8 ) ; } 
public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } } 
private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; } 
public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; } 
public boolean METHOD_1 ( TYPE_1 context ) { if ( ! ( TYPE_2 . METHOD_2 ( ) ) ) { TYPE_3 . i ( STRING_1 , STRING_2 ) ; return false ; } TYPE_4 provider = new TYPE_4 ( context ) ; if ( ! ( provider . METHOD_3 ( ) ) ) { TYPE_3 . i ( STRING_1 , STRING_3 ) ; return false ; } return true ; } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 ) { for ( TYPE_2 node : VAR_1 ) { if ( node instanceof TYPE_3 ) { node . METHOD_2 ( this ) ; } else { METHOD_3 ( node ) ; } } while ( ! ( VAR_2 . METHOD_4 ( ) ) ) { TYPE_2 node = VAR_2 . METHOD_5 ( ) ; if ( VAR_3 . METHOD_6 ( node . METHOD_7 ( ) ) ) { node . METHOD_2 ( this ) ; } } } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_3 = ( VAR_4 ) ++ ; if ( VAR_5 ) { android.util.Log.v ( VAR_6 . TAG , ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ; } METHOD_3 ( VAR_2 ) ; VAR_7 . METHOD_4 ( VAR_2 ) ; } } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( VAR_1 == ( this ) ) { return true ; } if ( ( ( ( VAR_1 instanceof TYPE_1 ) && ( METHOD_1 ( ) ) ) && ( ( ( TYPE_1 < ? > ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) && ( ( METHOD_2 ( ) ) != ( VAR_1 . METHOD_2 ( ) ) ) ) { return false ; } return TYPE_2 . METHOD_3 ( this , VAR_1 ) ; } 
public int METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( VAR_1 < ( VAR_3 ) ) { int i = TYPE_1 . METHOD_2 ( VAR_2 , ( ( count ) - 1 ) ) ; for ( ; i >= 0 ; i -- ) { if ( ( METHOD_3 ( i ) ) == VAR_1 ) { return i ; } } return - 1 ; } else { return METHOD_4 ( VAR_1 , VAR_2 ) ; } } 
private static TYPE_1 METHOD_1 ( java.io.File VAR_1 ) { java.io.File VAR_2 = new java.io.File ( VAR_1 , VAR_3 ) ; if ( ! ( VAR_2 . METHOD_2 ( ) ) ) { if ( ! ( VAR_2 . METHOD_3 ( ) ) ) { android.util.Log . METHOD_4 ( TYPE_2 . TAG , ( STRING_1 + VAR_2 ) ) ; return null ; } } return new TYPE_1 ( new java.io.File ( VAR_2 , VAR_4 ) ) ; } 
public static boolean METHOD_1 ( TYPE_1 call , TYPE_2 VAR_1 ) { if ( ( ! ( call . METHOD_2 ( ) . METHOD_3 ( ) ) ) || ( ! ( ( call . METHOD_4 ( ) ) instanceof TYPE_3 ) ) ) { return false ; } assert ( call . METHOD_5 ( ) ) == ( VAR_2 ) ; assert ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) == ( VAR_3 ) ; return call . METHOD_8 ( ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . set ( new java.lang.Object ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; for ( boolean VAR_2 : new boolean [ ] { true , false } ) { VAR_1 . METHOD_3 ( true ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; VAR_1 . METHOD_7 ( ) ; server . METHOD_7 ( ) ; } 
public void run ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( ) ; assertEquals ( VAR_3 , VAR_1 . status ) ; assertEquals ( VAR_4 , VAR_5 . packageName ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_2 ( TYPE_2 . eq ( VAR_7 ) ) ; VAR_8 . METHOD_3 ( ) ; } 
public static byte [ ] METHOD_1 ( java.io.File VAR_1 ) throws java.io.IOException { byte [ ] VAR_2 = new byte [ INT_1 ] ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; try ( TYPE_2 VAR_4 = new TYPE_2 ( VAR_1 ) ) { int count ; while ( ( count = VAR_4 . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ) { VAR_3 . METHOD_3 ( VAR_2 , 0 , count ) ; } } return VAR_3 . METHOD_4 ( ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : if ( ( VAR_3 ) == null ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; } return VAR_3 ; case VAR_4 : if ( ( VAR_5 ) == null ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; } return VAR_5 ; default : assert false : STRING_1 ; } return TYPE_1 . METHOD_1 ( ) ; } 
boolean start ( ) { if ( ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) && ( ( ! ( VAR_3 ) ) || ( ! ( METHOD_1 ( ) ) ) ) ) { return false ; } VAR_4 = true ; VAR_5 = new TYPE_1 ( this ) ; VAR_5 . start ( ) ; return true ; } 
public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_2 = new byte [ 1 ] ; TYPE_4 . METHOD_2 ( s , fd , callback , VAR_2 , 0 , 1 , 0 ) ; assertEquals ( INT_1 , VAR_2 [ 0 ] ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( int VAR_1 , byte [ ] VAR_2 ) { if ( ( null == VAR_2 ) || ( 0 >= ( VAR_2 . length ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } else if ( ( METHOD_2 ( ) ) == ( VAR_3 ) ) { throw new TYPE_2 ( STRING_2 ) ; } return METHOD_3 ( VAR_4 , VAR_1 , VAR_2 ) ; } 
public static TYPE_1 METHOD_1 ( boolean VAR_1 ) throws TYPE_2 { TYPE_1 fd ; try { fd = VAR_2 . METHOD_1 ( VAR_3 , ( VAR_1 ? VAR_4 : VAR_5 ) , 0 ) ; if ( ! VAR_1 ) { VAR_2 . METHOD_2 ( fd , VAR_6 , VAR_7 , 1 ) ; } return fd ; } catch ( TYPE_3 VAR_8 ) { throw VAR_8 . METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , STRING_1 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; assertEquals ( VAR_4 , VAR_1 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } } 
public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } } 
public void METHOD_1 ( int VAR_1 , java.lang.String address , int VAR_2 , int VAR_3 , int VAR_4 , byte [ ] value ) { TYPE_1 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( VAR_1 , address , VAR_2 , VAR_3 , VAR_4 , value ) ; } 
public void run ( int i ) { TYPE_1 VAR_1 = VAR_2 . get ( i ) ; int j = 0 ; try ( TYPE_2 VAR_3 = VAR_4 . METHOD_1 ( TYPE_3 . METHOD_2 ( VAR_1 , 0 , ( ( VAR_5 * VAR_6 ) / 2 ) ) , null , null , null , null ) ) { while ( VAR_3 . METHOD_3 ( ) ) { ++ j ; } } } 
private void METHOD_1 ( ) throws java.io.IOException { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { throw new TYPE_2 ( ( ( TYPE_1 . METHOD_3 ( VAR_2 ) ? STRING_1 : STRING_2 ) + STRING_3 ) ) ; } VAR_3 . METHOD_4 ( VAR_1 , VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; VAR_5 . METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; VAR_3 . METHOD_9 ( VAR_1 , VAR_7 ) ; VAR_5 . METHOD_10 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
private boolean run ( ) throws java.io.IOException { TYPE_1 run = new TYPE_1 ( this ) ; if ( ( VAR_1 . length ) > 0 ) { VAR_2 . METHOD_1 ( ( STRING_1 + ( TYPE_2 . METHOD_2 ( STRING_2 , VAR_1 ) ) ) ) ; } return VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { for ( int i = 0 ; i <= 100 ; ++ i ) { Main . METHOD_2 ( VAR_1 ) ; if ( ( i % 10 ) == 0 ) { TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_3 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_4 ( ) ; } 
public void METHOD_1 ( int key ) { int i = TYPE_1 . METHOD_2 ( VAR_1 , 0 , VAR_2 , key ) ; if ( i >= 0 ) { if ( ( VAR_3 [ i ] ) != ( VAR_4 ) ) { VAR_3 [ i ] = VAR_4 ; VAR_5 = true ; } } } 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; } 
public final void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( this ) ; if ( ( VAR_2 ) == ( VAR_3 ) ) { for ( java.lang.Object value : METHOD_3 ( ) ) { if ( value instanceof TYPE_2 ) { if ( ! ( VAR_4 ) ) { ( ( TYPE_2 ) ( value ) ) . METHOD_4 ( this ) ; } VAR_1 . METHOD_5 ( ( ( TYPE_2 ) ( value ) ) ) ; } } VAR_4 = true ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) throws java.io.IOException { if ( ! ( TYPE_1 . METHOD_2 ( args ) ) ) { TYPE_1 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ( - 1 ) ) ; } long start = TYPE_2 . METHOD_5 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( false ) ; VAR_1 . METHOD_6 ( ) ; long VAR_2 = TYPE_2 . METHOD_5 ( ) ; java.lang.System.out.println ( ( STRING_1 + ( ( VAR_2 - start ) / INT_1 ) ) ) ; } 
private boolean METHOD_1 ( java.lang.String path ) { try { VAR_1 = TYPE_1 . METHOD_2 ( path ) ; } catch ( TYPE_2 VAR_2 ) { return false ; } try { METHOD_3 ( ) ; return true ; } catch ( java.lang.Exception ex ) { try { VAR_1 . METHOD_4 ( ) ; } catch ( TYPE_2 VAR_3 ) { } TYPE_3 . METHOD_5 ( ( ( STRING_1 + path ) + STRING_2 ) , ex ) ; return false ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( ( ( ( VAR_3 ) == null ) || ( VAR_1 == null ) ) || ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_1 . METHOD_2 ( ) ) ) ) { android.util.Slog.w ( VAR_5 . TAG , ( STRING_1 + VAR_1 ) ) ; } VAR_6 . METHOD_3 ( VAR_7 ) ; } } 
public static int METHOD_1 ( int uid , int VAR_1 , int [ ] VAR_2 , boolean VAR_3 , int [ ] [ ] VAR_4 ) { int VAR_5 = ( VAR_3 ) ? VAR_6 : 0 ; return TYPE_1 . METHOD_2 ( uid , VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { VAR_4 = VAR_1 ; final TYPE_3 VAR_5 = VAR_2 . METHOD_2 ( ) ; TYPE_4 target = new TYPE_4 ( VAR_3 ) ; try { METHOD_3 ( target ) ; } catch ( java.lang.Exception e ) { throw new TYPE_5 ( e ) ; } VAR_5 . METHOD_4 ( new java.lang.Runnable ( ) { public void run ( ) { invoke ( VAR_6 , STRING_1 ) ; } } ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_2 ) { if ( ( ( ( VAR_4 ) == false ) || ( ( VAR_3 . METHOD_2 ( ) ) == false ) ) && ( ( VAR_3 . METHOD_3 ( ) ) == false ) ) { VAR_1 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; } } } 
static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; } 
public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; } 
public int METHOD_1 ( int c ) throws TYPE_1 { int s = super . METHOD_1 ( c ) ; TYPE_2 . METHOD_2 ( s , TYPE_3 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( s , ( ( VAR_1 ) | ( VAR_2 ) ) ) ; return s ; } 
private void METHOD_1 ( final TYPE_1 device , final java.lang.String name ) throws TYPE_2 , TYPE_3 , TYPE_4 , java.io.IOException { device . METHOD_2 ( ( STRING_1 + name ) , new TYPE_5 ( ) { public boolean METHOD_3 ( ) { return false ; } public void METHOD_4 ( java.lang.String [ ] VAR_1 ) { for ( java.lang.String line : VAR_1 ) { if ( ! ( line . METHOD_5 ( ) ) ) { device . METHOD_6 ( name , line ) ; } } } } ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 type ) { try { switch ( type ) { case VAR_2 : VAR_3 . METHOD_1 ( VAR_1 ) ; break ; case VAR_4 : VAR_3 . METHOD_2 ( VAR_1 ) ; break ; case VAR_5 : VAR_3 . METHOD_3 ( VAR_1 ) ; break ; } } catch ( java.io.IOException e ) { TYPE_2 . log ( VAR_6 , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + type ) , e ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_2 . METHOD_6 ( ) ) ; if ( ( VAR_1 . METHOD_7 ( ) ) == ( VAR_4 ) ) { final TYPE_3 config = new TYPE_3 ( ) ; VAR_1 . METHOD_8 ( config ) ; METHOD_9 ( config ) ; } } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } new TYPE_1 ( ) . METHOD_5 ( method ) ; } 
public void METHOD_1 ( ) { TYPE_1 < java.lang.Object > VAR_1 = new TYPE_1 < java.lang.Object > ( ) ; java.lang.Object a = new java.lang.Object ( ) ; TYPE_2 . assertTrue ( VAR_1 . METHOD_2 ( a ) ) ; TYPE_2 . assertFalse ( VAR_1 . METHOD_2 ( a ) ) ; java.lang.Object b = new java.lang.Object ( ) ; TYPE_2 . assertTrue ( VAR_1 . METHOD_2 ( b ) ) ; TYPE_2 . assertFalse ( VAR_1 . METHOD_2 ( null ) ) ; } 
public java.lang.String METHOD_1 ( ) { for ( int n = 0 ; n < ( VAR_1 . length ( ) ) ; n ++ ) { if ( ( VAR_1 . METHOD_2 ( n ) ) != 0 ) { return VAR_1 ; } } return STRING_1 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } } 
public final TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < ? super TYPE_2 > action ) { TYPE_4 . METHOD_2 ( action ) ; return new TYPE_5 < TYPE_2 , TYPE_2 > ( this , VAR_1 , 0 ) { TYPE_6 < TYPE_2 > METHOD_3 ( int flags , TYPE_6 < TYPE_2 > VAR_2 ) { return new TYPE_7 < TYPE_2 , TYPE_2 > ( VAR_2 ) { public void METHOD_4 ( TYPE_2 VAR_3 ) { action . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; } } ; } } ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_1 . METHOD_2 ( ) ; int VAR_3 = TYPE_2 . METHOD_3 ( VAR_2 ) ; TYPE_3 VAR_4 = this . VAR_4 ; int VAR_5 = ( METHOD_4 ( VAR_1 , VAR_4 ) ) ? VAR_6 : VAR_7 ; if ( VAR_3 < VAR_5 ) { VAR_8 = TYPE_2 . METHOD_5 ( VAR_2 , TYPE_2 . METHOD_6 ( VAR_5 ) ) ; } } 
public TYPE_1 METHOD_1 ( ) { mRS . METHOD_2 ( ) ; int id = mRS . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; TYPE_1 VAR_10 = new TYPE_1 ( id , mRS ) ; VAR_11 = VAR_12 ; VAR_13 = VAR_5 ; VAR_14 = VAR_1 ; VAR_15 = VAR_2 ; VAR_16 = VAR_3 ; VAR_17 = VAR_4 ; VAR_18 = VAR_19 ; VAR_20 = VAR_21 ; VAR_22 = VAR_6 ; return VAR_10 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
public void METHOD_1 ( TYPE_1 device , TYPE_2 VAR_1 ) throws TYPE_3 , TYPE_4 , TYPE_5 { for ( TYPE_6 < java.lang.String , java.lang.String > entry : TYPE_7 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( entry . METHOD_4 ( ) , TYPE_8 . METHOD_5 ( STRING_1 , device . METHOD_6 ( entry . METHOD_7 ( ) ) ) ) ; } device . METHOD_8 ( STRING_2 ) ; device . METHOD_8 ( STRING_3 ) ; } 
public void run ( ) { if ( ( VAR_1 ) == 0 ) VAR_2 = TYPE_1 . METHOD_1 ( ) ; VAR_3 = ( TYPE_1 . METHOD_1 ( ) ) - ( ( VAR_2 ) + ( 100 * ( VAR_1 ) ) ) ; ( VAR_1 ) ++ ; if ( ( VAR_1 ) == 2 ) { try { TYPE_2 . METHOD_2 ( INT_1 ) ; } catch ( TYPE_3 e ) { } } } 
public int METHOD_1 ( ) { int VAR_1 = 1 ; VAR_1 = ( VAR_1 * INT_1 ) + ( ( int ) ( VAR_2 ) ) ; VAR_1 = ( VAR_1 * INT_2 ) + ( ( int ) ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_2 ( ) ) ) ; return VAR_1 ; } 
static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; } 
public TYPE_1 METHOD_1 ( long x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
public boolean METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( true ) ) ) return false ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( ! ( METHOD_3 ( VAR_2 ) ) ) { if ( VAR_3 ) log ( VAR_2 . METHOD_4 ( ) ) ; return false ; } for ( TYPE_2 VAR_4 : VAR_5 . values ( ) ) { if ( METHOD_5 ( VAR_4 ) ) { return true ; } } return false ; } 
public int METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return - 1 ; } synchronized ( VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , 0 , false ) ; if ( VAR_3 == null ) { return - 1 ; } return VAR_3 . userId ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 ; VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( STRING_1 ) ) ; assertEquals ( CHAR_1 , VAR_1 . METHOD_3 ( ) ) ; assertEquals ( CHAR_2 , VAR_1 . METHOD_4 ( ) ) ; VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( STRING_2 ) ) ; assertEquals ( CHAR_3 , VAR_1 . METHOD_3 ( ) ) ; assertEquals ( CHAR_4 , VAR_1 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) ; assertFalse ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; TYPE_2 app = new TYPE_2 ( ) ; app . uid = VAR_2 ; app . packageName = VAR_3 ; assertTrue ( VAR_1 . METHOD_8 ( app ) ) ; assertTrue ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
public synchronized void METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) { VAR_1 = 0 ; } if ( VAR_1 != ( VAR_2 ) ) { VAR_2 = VAR_1 ; METHOD_2 ( ) ; if ( ( VAR_3 ) > VAR_1 ) { VAR_3 = VAR_1 ; METHOD_3 ( VAR_4 , VAR_3 , false ) ; } } } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException , TYPE_2 { long VAR_1 = VAR_2 . METHOD_2 ( ) ; byte [ ] VAR_3 = VAR_4 . METHOD_3 ( ) ; byte [ ] VAR_5 = VAR_6 . METHOD_3 ( ) ; long VAR_7 = ( VAR_2 . METHOD_2 ( ) ) - VAR_1 ; android.util.Log.d ( VAR_8 . TAG , ( ( STRING_1 + VAR_7 ) + STRING_2 ) ) ; return TYPE_1 . METHOD_4 ( VAR_3 , VAR_5 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String device , java.lang.String project , java.lang.String VAR_2 ) { java.lang.String packageName ; int pos = VAR_1 . METHOD_2 ( STRING_1 ) ; if ( pos != ( - 1 ) ) { packageName = VAR_1 . METHOD_3 ( 0 , pos ) ; } else { packageName = STRING_2 ; } return METHOD_4 ( packageName , device , project , VAR_2 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Throwable VAR_3 ) { java.lang.String VAR_4 = METHOD_2 ( VAR_2 ) ; TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ; if ( VAR_3 != null ) { VAR_6 = true ; } METHOD_3 ( VAR_1 , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( ) ; assertEquals ( STRING_1 , ( - 1 ) , VAR_1 . METHOD_2 ( ) ) ; int VAR_2 = INT_1 ; VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , VAR_2 ) ; assertEquals ( STRING_2 , VAR_2 , VAR_1 . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; assertEquals ( STRING_3 , VAR_2 , TYPE_1 . METHOD_2 ( VAR_1 ) ) ; VAR_1 = STRING_4 ; VAR_2 = STRING_5 ; assertEquals ( STRING_3 , VAR_2 , TYPE_1 . METHOD_2 ( VAR_1 ) ) ; } 
public boolean METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( context ) ) ) { return false ; } return ( ( ( ( ( ! ( METHOD_3 ( ) ) ) && ( ! ( METHOD_4 ( ) ) ) ) && ( ! ( METHOD_5 ( ) ) ) ) && ( ! ( METHOD_6 ( ) ) ) ) && ( ! ( METHOD_7 ( ) ) ) ) && ( ! ( METHOD_8 ( ) ) ) ; } 
public static TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; java.lang.String VAR_2 = VAR_1 . get ( VAR_3 , STRING_1 ) ; TYPE_1 < java.lang.String > VAR_4 = new TYPE_4 < java.lang.String > ( ) ; if ( VAR_2 . METHOD_3 ( ) ) { return VAR_4 ; } TYPE_5 VAR_5 = TYPE_5 . on ( VAR_6 ) . METHOD_4 ( ) ; for ( java.lang.String VAR_7 : VAR_5 . METHOD_5 ( VAR_2 ) ) { VAR_4 . METHOD_6 ( VAR_7 ) ; } return VAR_4 ; } 
private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( entry ) - > entry . getName ( ) . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( TYPE_4 . METHOD_6 ( TYPE_2 : : getName ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( TYPE_1 ) ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; byte b ; while ( ( b = VAR_1 . get ( VAR_2 ) ) != 0 ) { ++ VAR_2 ; sb.append ( ( ( char ) ( b ) ) ) ; } return sb . toString ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 listener = new TYPE_1 ( 0 ) ; TYPE_2 < TYPE_3 > VAR_1 = METHOD_2 ( listener , VAR_2 ) ; TYPE_2 < TYPE_3 > VAR_3 = METHOD_2 ( listener , VAR_4 ) ; TYPE_3 VAR_5 = VAR_1 . get ( VAR_6 , VAR_7 ) ; TYPE_3 server = VAR_3 . get ( VAR_6 , VAR_7 ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_3 ) ) ) { android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) ; return false ; } TYPE_3 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_4 ( device , VAR_1 , VAR_2 ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { android.content.Intent VAR_4 = new android.content.Intent ( VAR_5 ) ; byte [ ] [ ] VAR_6 = new byte [ 2 ] [ ] ; VAR_6 [ 0 ] = VAR_7 ; VAR_6 [ 1 ] = VAR_8 ; VAR_4 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 ) ) ; VAR_1 . METHOD_4 ( VAR_4 , VAR_9 , VAR_10 , VAR_11 , null , null , VAR_12 , null , null ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 , java.lang.String [ ] args ) { if ( VAR_8 . METHOD_2 ( VAR_3 ) ) { return new TYPE_5 ( VAR_1 , VAR_7 , VAR_3 , args ) ; } else { return null ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { java.io.File VAR_2 = new java.io.File ( VAR_3 , VAR_4 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 , false ) ; } else { VAR_5 . METHOD_4 ( this , VAR_3 , ( STRING_1 + ( VAR_3 . METHOD_5 ( ) ) ) ) ; return null ; } } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 context ) { VAR_1 = TYPE_2 . get ( context . METHOD_2 ( ) ) ; if ( ! ( VAR_2 ) ) { VAR_2 = true ; context . METHOD_3 ( VAR_3 , TYPE_3 . METHOD_4 ( VAR_4 ) , STRING_1 , null ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_2 ) ; ++ i ) { java.lang.Integer VAR_3 = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; } assertEquals ( 0 , VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_2 ( new java.lang.Integer ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( TYPE_2 VAR_4 ) { } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { long VAR_2 = ( TYPE_2 . METHOD_2 ( ) ) - ( VAR_3 ) ; boolean VAR_4 = VAR_2 < ( TYPE_3 . METHOD_3 ( ) ) ; boolean VAR_5 = VAR_1 == ( VAR_6 ) ; int VAR_7 = TYPE_4 . METHOD_4 ( VAR_4 , VAR_5 ) ; VAR_8 . log ( new TYPE_4 ( VAR_9 , VAR_7 ) ) ; } 
private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; } 
public void METHOD_1 ( TYPE_1 context , android.content.Intent VAR_1 ) { java.lang.String [ ] VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( VAR_2 != null ) { for ( java.lang.String pkg : VAR_2 ) { synchronized ( this ) { if ( METHOD_3 ( pkg , ( - 1 ) , false , false , false ) ) { METHOD_4 ( VAR_4 ) ; return ; } } } } } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) ; java.lang.String key = ( ( VAR_2 . METHOD_3 ( ) ) + STRING_1 ) + VAR_3 ; TYPE_1 VAR_4 = TYPE_4 . get ( key ) ; if ( VAR_4 == null ) { try { VAR_4 = TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ; } catch ( TYPE_5 e ) { VAR_4 = new TYPE_1 ( VAR_5 , null ) ; } TYPE_4 . METHOD_5 ( key , VAR_4 ) ; } return VAR_4 ; } 
private TYPE_1 [ ] METHOD_1 ( ) { try { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( new TYPE_3 ( TYPE_4 . METHOD_4 ( ) ) ) ) ) ; TYPE_1 [ ] VAR_3 = new TYPE_1 [ ] { VAR_2 } ; return VAR_3 ; } catch ( java.lang.Exception ex ) { fail ( ( STRING_2 + ex ) ) ; } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( false , METHOD_4 ( ) ) ; assertTrue ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; assertFalse ( VAR_5 . METHOD_6 ( ) ) ; assertFalse ( VAR_2 . METHOD_6 ( ) ) ; VAR_3 . METHOD_7 ( VAR_4 ) ; VAR_6 . METHOD_8 ( ) ; assertTrue ( VAR_5 . METHOD_6 ( ) ) ; assertTrue ( VAR_2 . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( byte [ ] data , int offset , int length ) { if ( ! ( METHOD_2 ( ) ) ) { java.lang.String s = null ; try { s = new java.lang.String ( data , offset , length , STRING_1 ) ; } catch ( TYPE_1 e ) { s = new java.lang.String ( data , offset , length ) ; } VAR_1 . append ( s ) ; } } 
public void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { java.lang.String VAR_3 = ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ; VAR_4 . METHOD_2 ( ( ) - > TYPE_1 . METHOD_3 ( VAR_5 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { s = new TYPE_1 ( STRING_1 ) ; try { s . METHOD_2 ( ( ( VAR_1 ) - 1 ) ) ; fail ( STRING_2 ) ; } catch ( java.lang.IllegalArgumentException e ) { } try { s . METHOD_2 ( ( ( VAR_2 ) + 1 ) ) ; fail ( STRING_2 ) ; } catch ( java.lang.IllegalArgumentException e ) { } s . METHOD_2 ( 11 ) ; assertEquals ( 11 , s . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 a = METHOD_2 ( STRING_1 ) ; TYPE_1 b = METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_1 = new TYPE_2 ( a , b , VAR_2 ) . METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( a , VAR_1 , VAR_2 ) ; try { VAR_3 . METHOD_3 ( ) ; fail ( ) ; } catch ( TYPE_3 expected ) { assertEquals ( STRING_3 , expected . getMessage ( ) ) ; } } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } } 
boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; } 
public static java.lang.Integer METHOD_1 ( java.lang.String VAR_1 , java.lang.Integer VAR_2 ) { java.lang.String v = null ; try { v = TYPE_1 . METHOD_2 ( VAR_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } catch ( java.lang.NullPointerException e ) { } if ( v != null ) { try { return java.lang.Integer . METHOD_3 ( v ) ; } catch ( TYPE_2 e ) { } } return VAR_2 ; } 
static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = ( ( VAR_4 ) >= ( VAR_5 ) ) ? TYPE_2 : VAR_6 ; return VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_7 , java.lang.String . METHOD_5 ( VAR_2 ) ) . METHOD_4 ( VAR_8 , STRING_1 ) . METHOD_4 ( VAR_9 , VAR_10 ) . build ( ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_2 VAR_5 , int VAR_6 , int VAR_7 , TYPE_4 callback ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , callback , new TYPE_5 ( TYPE_6 . METHOD_2 ( ) ) ) ; } 
protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { if ( METHOD_2 ( VAR_1 ) ) { return true ; } if ( VAR_2 == null ) { return false ; } return METHOD_1 ( TYPE_1 . METHOD_3 ( VAR_1 ) , VAR_2 , 0 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( this ) ) { VAR_1 . METHOD_3 ( VAR_2 ) ; for ( TYPE_2 VAR_3 : VAR_4 ) { if ( VAR_3 == null ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } VAR_1 . METHOD_3 ( VAR_3 ) ; } } VAR_1 . METHOD_4 ( this ) ; } 
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 VAR_1 = METHOD_2 ( event . METHOD_3 ( ) ) ; if ( VAR_1 != null ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( VAR_3 . METHOD_4 ( ) ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; } } } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) throws java.io.IOException { TYPE_1 VAR_4 = ( VAR_1 . METHOD_2 ( ) ) ? TYPE_1 . METHOD_3 ( ) : VAR_1 ; if ( ( VAR_5 ) && ( METHOD_4 ( ) ) ) { METHOD_5 ( VAR_1 , VAR_2 , 0 ) ; } else { TYPE_2 . METHOD_1 ( fd , VAR_4 , VAR_2 , VAR_3 ) ; } super . address = VAR_4 ; super . VAR_6 = VAR_2 ; } 
private java.lang.String METHOD_1 ( TYPE_1 VAR_1 , int res , TYPE_2 VAR_2 ) { if ( VAR_2 != null ) { return VAR_2 . toString ( ) ; } TYPE_3 r = METHOD_2 ( VAR_1 ) ; if ( r != null ) { return r . METHOD_3 ( res ) ; } return null ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 = method . METHOD_1 ( ) ; if ( ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_3 = new TYPE_1 ( method ) ; VAR_3 . METHOD_5 ( method ) ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { VAR_3 = true ; VAR_4 . METHOD_3 ( VAR_5 , METHOD_4 ( VAR_6 , new TYPE_1 ( ) ) ) ; ( VAR_7 ) ++ ; VAR_4 . METHOD_3 ( VAR_8 , METHOD_4 ( VAR_6 , new TYPE_2 ( ) ) ) ; ( VAR_7 ) ++ ; } } 
private int METHOD_1 ( java.lang.String path , java.lang.String VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) { int VAR_4 ; try { VAR_4 = TYPE_1 . METHOD_2 ( path , VAR_1 , VAR_2 , VAR_3 ) ; } catch ( java.io.IOException VAR_5 ) { android.util.Slog.w ( VAR_6 . TAG , ( STRING_1 + path ) , VAR_5 ) ; return VAR_7 ; } return METHOD_3 ( VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) { TYPE_3 address = null ; int VAR_1 = 0 ; if ( ( in . METHOD_2 ( ) ) == 1 ) { try { address = TYPE_3 . METHOD_3 ( in . METHOD_4 ( ) ) ; VAR_1 = in . METHOD_5 ( ) ; } catch ( TYPE_4 e ) { } } return new TYPE_1 ( address , VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; } 
public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) . toString ( ) , VAR_2 ) ) ) ; if ( VAR_1 == null ) { errln ( STRING_2 ) ; } } catch ( TYPE_3 ex ) { METHOD_4 ( ( STRING_3 + ( ex . getMessage ( ) ) ) ) ; } } 
static java.lang.String METHOD_1 ( char [ ] [ ] name ) { TYPE_1 result = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( name . length ) ; ++ i ) { if ( i > 0 ) { result . append ( CHAR_1 ) ; } result . append ( name [ i ] ) ; } return result . toString ( ) ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( VAR_1 == ( this ) ) return true ; if ( ! ( VAR_1 instanceof TYPE_1 ) ) return false ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return ( ( this . VAR_3 ) == ( VAR_4 ) ) && ( TYPE_2 . equals ( this . entry . METHOD_1 ( ) , VAR_5 . METHOD_1 ( ) ) ) ; } 
public byte [ ] METHOD_1 ( ) throws java.io.IOException { if ( ( ( VAR_1 . equals ( VAR_2 ) ) || ( VAR_1 . equals ( VAR_3 ) ) ) || ( VAR_1 . equals ( VAR_4 ) ) ) { if ( ( content ) == null ) return null ; else return content . METHOD_2 ( ) ; } throw new java.io.IOException ( ( STRING_1 + ( VAR_1 ) ) ) ; } 
public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; } 
private TYPE_1 < ? > METHOD_1 ( ) { long VAR_1 = VAR_2 . get ( ) ; METHOD_2 ( VAR_3 ) ; if ( ( METHOD_3 ( ) ) && ( ( VAR_2 . get ( ) ) == VAR_1 ) ) { TYPE_1 < ? > VAR_4 = VAR_5 ; METHOD_2 ( VAR_6 ) ; if ( ( METHOD_3 ( ) ) && ( ( VAR_2 . get ( ) ) == VAR_1 ) ) { return VAR_4 ; } } return null ; } 
public void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.d ( VAR_2 . TAG , ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) ) ; if ( METHOD_2 ( VAR_3 ) ) { TYPE_1 VAR_4 = new TYPE_1 ( VAR_3 , false ) ; VAR_5 = true ; METHOD_3 ( VAR_4 ) ; } else { TYPE_2 VAR_4 = new TYPE_2 ( VAR_3 ) ; VAR_5 = true ; METHOD_4 ( VAR_4 ) ; } } 
public final TYPE_1 METHOD_1 ( float x ) { if ( VAR_1 ) { throw new TYPE_2 ( ) ; } if ( ! ( VAR_2 ) ) { throw new TYPE_3 ( STRING_1 ) ; } METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) ; return this ; } 
public void METHOD_1 ( android.os.Message msg ) { switch ( VAR_1 ) { case VAR_2 : if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_2 ( ) ; } break ; case VAR_4 : METHOD_3 ( ) ; VAR_5 . METHOD_4 ( ) ; break ; case VAR_6 : METHOD_5 ( ) ; break ; } } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; } 
public void METHOD_1 ( TYPE_1 context , android.content.Intent VAR_1 ) { java.lang.String [ ] VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( VAR_2 != null ) { for ( java.lang.String pkg : VAR_2 ) { if ( METHOD_3 ( pkg , ( - 1 ) , false , false , false ) ) { METHOD_4 ( VAR_4 ) ; return ; } } } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { assert ( VAR_3 ) != null ; try { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_4 e ) { } catch ( TYPE_5 e ) { throw new TYPE_3 ( e ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_1 != null ) { VAR_3 . METHOD_3 ( VAR_1 . length ( ) ) ; VAR_4 = VAR_1 ; } if ( VAR_2 && ( ! ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ) { METHOD_5 ( ) ; } } 
static void METHOD_1 ( TYPE_1 m , TYPE_2 v , int value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device , VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( ( VAR_3 ) <= 0 ) { return VAR_4 ; } VAR_5 = ( ( VAR_6 ) & ( VAR_7 ) ) == ( VAR_7 ) ; VAR_6 &= ~ ( VAR_7 ) ; long VAR_8 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; TYPE_4 . METHOD_4 ( VAR_9 , STRING_1 ) ; TYPE_1 VAR_10 = VAR_1 . METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( VAR_9 ) ; METHOD_7 ( VAR_8 ) ; return VAR_10 ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . d ( VAR_1 , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) ; if ( ( ! ( VAR_2 ) ) && ( ! ( VAR_4 . METHOD_2 ( VAR_3 ) ) ) ) { METHOD_3 ( VAR_5 , false ) ; } METHOD_4 ( ) ; if ( ( VAR_6 ) != null ) { METHOD_5 ( VAR_6 ) ; } } 
void METHOD_1 ( java.util.Map VAR_1 , java.util.Map VAR_2 ) { if ( VAR_1 . equals ( VAR_2 ) ) return ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; java.util.Set VAR_4 = VAR_1 . METHOD_2 ( ) ; java.util.Set VAR_5 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( STRING_1 , VAR_4 , VAR_5 , VAR_3 , 20 ) ; METHOD_3 ( STRING_2 , VAR_5 , VAR_4 , VAR_3 , 20 ) ; errln ( VAR_3 . toString ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_2 ( ) . length ) > 0 ) ) ; for ( TYPE_2 target : VAR_1 . METHOD_2 ( ) ) { TYPE_3 status = new TYPE_4 ( target ) . run ( new TYPE_5 ( ) ) ; if ( ( status . METHOD_3 ( ) ) != ( VAR_2 ) ) { fail ( STRING_2 ) ; } } } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = new TYPE_1 ( os ) ; VAR_1 . METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( ) ; fail ( STRING_1 ) ; } catch ( java.io.IOException e ) { } VAR_1 = new TYPE_1 ( os ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( INT_1 , STRING_1 ) ; java.io.File f = METHOD_3 ( ) ; TYPE_2 out = TYPE_1 . METHOD_4 ( f ) ; out . METHOD_5 ( new TYPE_3 ( VAR_1 ) ) ; out . METHOD_6 ( ) ; out . METHOD_7 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( f ) ; assertNotNull ( VAR_2 . METHOD_8 ( VAR_1 ) ) ; VAR_2 . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . VAR_3 ) ) ) . thenReturn ( true ) ; TYPE_3 result = VAR_4 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_2 ) , null , null , false , true , null ) ; TYPE_5 . METHOD_7 ( result ) ; TYPE_1 . METHOD_8 ( VAR_5 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 entry , boolean VAR_2 ) { METHOD_2 ( entry , VAR_2 , false ) ; if ( ( entry . name ) != null ) { TYPE_2 . d ( VAR_3 . TAG , ( STRING_1 + entry ) ) ; } if ( ( VAR_4 ) != null ) { TYPE_3 . METHOD_3 ( mContext , VAR_4 ) ; } } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , android.util.Log . METHOD_3 ( new java.lang.Throwable ( ) ) ) ; } } else { android.util.Log.e ( VAR_2 . TAG , STRING_1 ) ; } } 
public void METHOD_1 ( TYPE_1 callback ) { synchronized ( VAR_1 ) { VAR_2 . METHOD_2 ( callback ) ; if ( ( ( VAR_3 ) == null ) || ( VAR_3 . METHOD_3 ( ) ) ) { return ; } try { for ( TYPE_2 i : VAR_3 ) { callback . METHOD_4 ( i . slotId , VAR_4 ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_5 , STRING_1 ) ; } } } 
private static TYPE_1 METHOD_1 ( TYPE_2 info , TYPE_3 VAR_1 , com.android.jack.ir.ast.JDefinedClassOrInterface VAR_2 , com.android.jack.ir.ast.JMethod VAR_3 ) { TYPE_4 VAR_4 = VAR_3 . METHOD_2 ( ) ; assert ( ( VAR_4 . METHOD_3 ( ) ) == ( VAR_5 ) ) || ( VAR_1 != null ) ; TYPE_1 call = new TYPE_1 ( info , VAR_1 , VAR_2 , VAR_4 , VAR_3 . METHOD_4 ( ) , VAR_4 . METHOD_5 ( ) ) ; call . METHOD_6 ( new TYPE_5 ( VAR_3 ) ) ; return call ; } 
protected boolean METHOD_1 ( java.lang.String path ) { try { java.lang.String result = device . METHOD_1 ( path , true ) ; if ( result != null ) { TYPE_1 . log ( VAR_1 , ( STRING_1 + result ) ) ; return false ; } return true ; } catch ( TYPE_2 e ) { TYPE_1 . log ( VAR_1 , ( STRING_2 + path ) , e ) ; return false ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } int VAR_2 = this . METHOD_2 ( ) ; int VAR_3 = this . METHOD_3 ( ) ; assert VAR_2 <= VAR_3 ; int VAR_4 = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ; int size = VAR_4 > > 3 ; return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; } 
protected int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = super . METHOD_1 ( VAR_1 ) ; if ( VAR_2 != 0 ) { return VAR_2 ; } TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 ) ) ; TYPE_3 VAR_4 = METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_3 VAR_5 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_4 . METHOD_4 ( VAR_5 ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 callback ) { METHOD_2 ( VAR_2 , STRING_1 ) ; if ( VAR_3 ) android.util.Log.d ( VAR_4 . TAG , ( STRING_2 + VAR_1 ) ) ; VAR_5 . METHOD_3 ( VAR_1 , callback , this ) ; METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ; } 
private static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { return ( STRING_1 + ( VAR_2 . toString ( ) ) ) + STRING_1 ; } else if ( ( VAR_3 ) != null ) { return ( STRING_1 + ( VAR_3 ) ) + STRING_1 ; } else { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } } 
private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; if ( VAR_2 != null ) { TYPE_5 VAR_6 = TYPE_4 . METHOD_3 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ; if ( VAR_6 == null ) { java.lang.String VAR_11 = java.lang.String.format ( STRING_1 , VAR_1 . name ) ; context . METHOD_4 ( VAR_12 , context . METHOD_5 ( VAR_2 , VAR_1 ) , VAR_11 , null ) ; } } } 
public java.lang.Object METHOD_1 ( ) { try { TYPE_1 < TYPE_2 , TYPE_3 > m = ( ( TYPE_1 < TYPE_2 , TYPE_3 > ) ( super . METHOD_1 ( ) ) ) ; VAR_1 = null ; VAR_2 = VAR_3 . METHOD_1 ( ) ; return m ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 config = new TYPE_1 ( ) ; config . METHOD_2 ( STRING_1 ) ; config . METHOD_3 ( STRING_2 ) ; config . METHOD_4 ( INT_1 ) ; TYPE_2 VAR_1 = new TYPE_2 ( null , config ) ; TYPE_2 VAR_2 = new TYPE_2 ( null , config ) ; TYPE_3 . assertFalse ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int flags ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( ) . toString ( ) ) ; VAR_1 . METHOD_2 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) ) ; VAR_1 . METHOD_3 ( METHOD_10 ( ) ) ; VAR_1 . METHOD_3 ( METHOD_11 ( ) ) ; VAR_1 . METHOD_12 ( VAR_5 , 0 ) ; } 
private TYPE_1 METHOD_1 ( int VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { android.util.Log.e ( VAR_3 . TAG , STRING_1 ) ; return null ; } TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { android.util.Log.e ( VAR_3 . TAG , ( STRING_2 + VAR_1 ) ) ; } return VAR_4 ; } 
private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { db . create ( ) ; TYPE_2 . ProjectConfig c = new TYPE_2 . ProjectConfig ( VAR_1 ) ; org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_2 ( VAR_1 ) ; try { c . METHOD_3 ( repo ) ; return new TYPE_1 ( TYPE_3 . METHOD_4 ( c . METHOD_5 ( ) . values ( ) ) ) ; } finally { repo . close ( ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , com.google.gwtorm.server.OrmException { TYPE_5 user = VAR_1 . METHOD_2 ( ) ; try { user . METHOD_3 ( ) ; TYPE_6 change = changes . METHOD_1 ( VAR_2 , id ) ; if ( user . METHOD_4 ( ) . contains ( change . getChange ( ) . getId ( ) ) ) { return new TYPE_7 ( user , change ) ; } throw new TYPE_4 ( id ) ; } finally { user . METHOD_5 ( ) ; } } 
private java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( METHOD_2 ( ) ) ; r . append ( STRING_1 ) ; return r . toString ( ) ; } return null ; } 
public synchronized void METHOD_1 ( TYPE_1 config ) throws TYPE_2 { super . METHOD_1 ( config ) ; java.lang.String path = config . METHOD_2 ( ) . METHOD_3 ( ) ; base = ( TYPE_3 . METHOD_4 ( path ) ) + STRING_1 ; for ( TYPE_4 VAR_1 : VAR_2 ) { TYPE_5 VAR_3 = METHOD_5 ( VAR_1 ) ; if ( VAR_3 != null ) { plugins . put ( VAR_1 . getName ( ) , VAR_3 ) ; } } VAR_2 = null ; } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws TYPE_3 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = change . getProject ( ) ; try { return VAR_2 . METHOD_1 ( VAR_1 , user ) . METHOD_1 ( change ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( change.getId ( ) , e ) ; } } 
public java.lang.String toString ( ) { final java.lang.String VAR_1 = getValue ( ) ; if ( TYPE_1 . METHOD_1 ( VAR_1 ) ) { return ( ( METHOD_2 ( ) ) + STRING_1 ) + VAR_1 ; } else { return ( ( ( METHOD_2 ( ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ; } } 
private < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 r , TYPE_3 < TYPE_1 > VAR_1 ) throws java.lang.Exception { r . METHOD_2 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( r . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( true ) ; return METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 ) ; } 
java.util.List < TYPE_1 > METHOD_1 ( ) { if ( VAR_1 ) { return METHOD_2 ( ) ; } java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_3 ( ) ; for ( TYPE_3 s : METHOD_4 ( ) ) { VAR_2 . METHOD_5 ( s . METHOD_2 ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) != null ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_2 = new TYPE_2 ( new TYPE_3 . Factory ( ) . METHOD_2 ( ) ) ; for ( TYPE_4 < ? , ? > p : VAR_3 . values ( ) ) { p . bind ( VAR_2 . METHOD_3 ( p . getName ( ) ) ) ; } } } 
private void METHOD_1 ( ) throws TYPE_1 { TYPE_2 ctl = VAR_1 . get ( ) . METHOD_2 ( ) ; if ( ! ( ctl . METHOD_3 ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) ) ) ) { throw new TYPE_1 ( java.lang.String.format ( STRING_2 , VAR_1 . get ( ) . METHOD_4 ( ) , new TYPE_3 ( ) . METHOD_5 ( ) ) ) ; } } 
public TYPE_1 run ( TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . AccountGroup group = db . METHOD_1 ( ) . get ( VAR_1 ) ; METHOD_2 ( db , group ) ; final TYPE_1 d = new TYPE_1 ( ) ; final boolean VAR_2 = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( group . getId ( ) ) ; d . METHOD_5 ( db , new TYPE_6 ( db ) , group , VAR_2 ) ; return d ; } 
protected TYPE_1 . Result METHOD_1 ( java.lang.String changeId , java.lang.String ref ) throws java.io.IOException , TYPE_2 { java.util.Collections . METHOD_2 ( VAR_1 ) ; TYPE_3 VAR_2 = VAR_3 . create ( db , admin . METHOD_3 ( ) , VAR_4 , VAR_5 , new java.lang.String ( TYPE_4 . METHOD_4 ( VAR_1 ) ) , changeId ) ; return VAR_2 . to ( git , ref ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change change = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; java.lang.String key = change . getKey ( ) . get ( ) ; METHOD_4 ( STRING_2 ) ; for ( int i = 0 ; i <= INT_1 ; i ++ ) { java.lang.String VAR_1 = key . METHOD_5 ( 0 , ( INT_2 - i ) ) ; METHOD_4 ( VAR_1 , change ) ; } } 
public final int METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 { final java.lang.String n = VAR_1 . METHOD_2 ( 0 ) ; final TYPE_3 . AccountGroup group = VAR_2 . get ( new TYPE_4 . NameKey ( n ) ) ; if ( group == null ) { throw new TYPE_2 ( VAR_3 , ( ( STRING_1 + n ) + STRING_2 ) ) ; } VAR_4 . METHOD_3 ( group . getId ( ) ) ; return 1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . METHOD_3 ( ) . url ( ) ) . isEqualTo ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . METHOD_3 ( ) . url ( ) ) . isEqualTo ( VAR_6 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . METHOD_5 ( VAR_6 , VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_6 ( VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } 
private void METHOD_1 ( ) { try { METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_1 e ) { TYPE_2 [ ] VAR_1 = TYPE_3 . METHOD_4 ( e . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) . METHOD_5 ( ) [ 1 ] ) ; java.lang.String VAR_2 = TYPE_5 . toString ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_7 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( STRING_3 ) ; } } 
void display ( final java.util.List < TYPE_1 . Branch > result ) { VAR_1 = false ; while ( 1 < ( table . METHOD_1 ( ) ) ) table . METHOD_2 ( ( ( table . METHOD_1 ( ) ) - 1 ) ) ; for ( final TYPE_1 . Branch VAR_2 : result ) { final int row = table . METHOD_1 ( ) ; table . METHOD_3 ( row ) ; METHOD_4 ( row ) ; METHOD_5 ( row , VAR_2 ) ; } } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) { public void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; } } ) ; install ( new TYPE_2 ( VAR_2 ) ) ; if ( ( ( VAR_3 ) == null ) && ( ( base ) == null ) ) { install ( new TYPE_3 ( ) ) ; } else { install ( new TYPE_4 ( ) ) ; } } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 project ) { for ( TYPE_2 p : project . METHOD_2 ( ) ) { TYPE_3 cfg = VAR_2 . METHOD_3 ( p , VAR_3 ) ; if ( cfg . METHOD_4 ( VAR_4 ) . contains ( VAR_1 ) ) { return new TYPE_4 ( cfg ) . METHOD_1 ( VAR_1 ) ; } } return new TYPE_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) . METHOD_1 ( VAR_1 ) ; } 
void METHOD_1 ( java.lang.String message ) { TYPE_1 . METHOD_2 ( project , branch , message , base , new TYPE_2 < TYPE_3 . ChangeInfo > ( ) { public void onSuccess ( TYPE_3 . ChangeInfo result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( result . METHOD_4 ( ) ) ) ; METHOD_5 ( ) ; } } ) ; } 
TYPE_1 METHOD_1 ( java.lang.String name ) { try { TYPE_2 p = METHOD_2 ( name ) ; return VAR_1 . get ( p , METHOD_3 ( p ) ) ; } catch ( TYPE_3 e ) { VAR_2 . METHOD_4 ( java.lang.String.format ( STRING_1 , name ) , e ) ; return null ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String ... VAR_2 ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; TYPE_2 < java.lang.String > VAR_4 = VAR_5 . get ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_2 ( ) . METHOD_6 ( ) ; while ( VAR_4 . METHOD_7 ( ) ) { VAR_3 . add ( VAR_4 . METHOD_5 ( ) ) ; } org.junit.Assert.assertEquals ( VAR_3 , TYPE_3 . METHOD_8 ( VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 VAR_2 = factory . create ( user . id ) ; VAR_3 . METHOD_3 ( new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 event ) { if ( event instanceof TYPE_5 ) { TYPE_5 VAR_4 = ( ( TYPE_5 ) ( event ) ) ; VAR_1 . put ( VAR_5 , VAR_6 ) ; } } } , VAR_2 ) ; project = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { throw new TYPE_5 ( STRING_1 ) ; } return new TYPE_1 ( VAR_1 , id . get ( ) ) ; } 
static boolean METHOD_1 ( final int VAR_1 ) { switch ( VAR_1 ) { case CHAR_1 : case CHAR_2 : case CHAR_3 : case CHAR_4 : case CHAR_5 : case CHAR_6 : case CHAR_7 : return false ; default : if ( ( ( ( CHAR_8 <= VAR_1 ) && ( VAR_1 <= CHAR_9 ) ) || ( ( CHAR_10 <= VAR_1 ) && ( VAR_1 <= CHAR_11 ) ) ) || ( ( CHAR_12 <= VAR_1 ) && ( VAR_1 <= CHAR_13 ) ) ) { return false ; } else { return true ; } } } 
protected void METHOD_1 ( java.lang.String changeId ) throws java.io.IOException { TYPE_1 . ChangeInfo c = getChange ( changeId , VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 . get ( 0 ) . value . METHOD_3 ( ) ) . isEqualTo ( 2 ) ; com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( VAR_4 . get ( 0 ) . VAR_5 ) ) . isEqualTo ( admin . getId ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( in . METHOD_6 ( 0 ) , INT_1 ) , in . METHOD_6 ( 1 ) ) , out . METHOD_7 ( ) ) ; } 
public AccountGroup . Id METHOD_1 ( ) throws TYPE_1 , TYPE_2 . OrmException { final TYPE_3 VAR_1 = VAR_2 . create ( ) ; final TYPE_4 . Id me = user . getAccountId ( ) ; return VAR_1 . METHOD_2 ( VAR_3 , null , null , me ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . create ( ( VAR_1 + STRING_2 ) ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_3 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , TYPE_2 VAR_2 , TYPE_3 VAR_3 , java.lang.String path , byte [ ] VAR_4 ) throws TYPE_4 , java.io.IOException { switch ( VAR_1 ) { case VAR_5 : VAR_2 . add ( new TYPE_5 ( path ) ) ; break ; case VAR_6 : case VAR_7 : VAR_2 . add ( TYPE_6 . METHOD_2 ( VAR_1 , repo , rw , base , path , VAR_3 , VAR_4 ) ) ; break ; } VAR_2 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 , VAR_1 . changeId , VAR_4 , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_4 ( STRING_1 , VAR_1 ) . to ( VAR_7 ) . METHOD_5 ( VAR_8 , VAR_9 ) . METHOD_5 ( VAR_10 ) . METHOD_6 ( VAR_3 , VAR_11 ) . METHOD_6 ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gwtorm.server.OrmException { TYPE_2 VAR_1 = VAR_2 . create ( cd ) . METHOD_2 ( patchSet ) . METHOD_1 ( ) ; if ( ( VAR_1 . status ) != ( VAR_3 ) ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; } return VAR_1 . type ; } 
public void METHOD_1 ( ) throws java.lang.Exception { assertEquals ( ( ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) + ( VAR_1 ) ) + ( VAR_2 ) ) , METHOD_2 ( ( ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_1 ) ) + ( VAR_2 ) ) + STRING_2 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) ) ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { try { METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_1 e ) { TYPE_2 [ ] VAR_1 = TYPE_3 . METHOD_4 ( e . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) . METHOD_5 ( ) [ 1 ] ) ; java.lang.String VAR_2 = TYPE_5 . toString ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . METHOD_7 ( STRING_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . contains ( STRING_3 ) ; } } 
private static java.lang.String METHOD_1 ( final TYPE_1 me ) { if ( me == null ) { return STRING_1 ; } try { final TYPE_2 VAR_1 = new TYPE_2 ( me ) ; try { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; java.lang.String VAR_4 = VAR_3 . getValue ( VAR_5 ) ; return VAR_4 != null ? VAR_4 : STRING_1 ; } finally { VAR_1 . close ( ) ; } } catch ( java.io.IOException e ) { return STRING_1 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { final TYPE_1 VAR_1 = repo . METHOD_2 ( STRING_1 ) ; repo . branch ( STRING_2 ) . commit ( ) . edit ( new TYPE_2 ( STRING_3 ) { public void apply ( TYPE_3 VAR_2 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; } } ) . create ( ) ; java.lang.String VAR_4 = METHOD_5 ( STRING_4 , STRING_5 ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_4 ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 < java.util.List < TYPE_3 > > ( ) { public void onSuccess ( final java.util.List < TYPE_3 > result ) { VAR_1 . display ( result ) ; } } ) ; } 
public void put ( final TYPE_1 key , TYPE_2 VAR_1 ) { final TYPE_3 < TYPE_2 > VAR_2 = new TYPE_3 < > ( VAR_1 ) ; VAR_3 = TYPE_4 . METHOD_1 ( ) ; VAR_4 . put ( key , VAR_2 ) ; VAR_5 . METHOD_2 ( new TYPE_5 ( ) { public void run ( ) { VAR_6 . put ( key , VAR_2 ) ; } } ) ; } 
public void onSuccess ( TYPE_1 info ) { if ( info . METHOD_1 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_3 . Factory ( ) ) ; } if ( info . METHOD_3 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_1 , new TYPE_4 . Factory ( ) ) ; } if ( info . METHOD_4 ( ) ) { TYPE_2 . get ( ) . METHOD_2 ( VAR_2 , new TYPE_5 . Factory ( ) ) ; } } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) throws java.io.IOException { METHOD_2 ( res , VAR_3 ) ; res . METHOD_3 ( VAR_4 ) ; try ( TYPE_5 VAR_5 = TYPE_6 . METHOD_4 ( req , res ) ) { METHOD_5 ( req ) . create ( ) . METHOD_6 ( VAR_1 , VAR_2 , VAR_5 ) ; VAR_5 . METHOD_7 ( CHAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ; METHOD_3 ( VAR_1 , VAR_2 , STRING_2 ) ; METHOD_4 ( user ) ; METHOD_5 ( ( ( VAR_3 ) + STRING_3 ) , ( ( VAR_3 ) + STRING_4 ) , ( ( VAR_4 ) + STRING_3 ) , ( ( VAR_4 ) + STRING_4 ) , STRING_2 , STRING_5 , STRING_6 ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } else if ( ( METHOD_3 ( ) ) && ( ! ( METHOD_4 ( ) ) ) ) { return VAR_2 ; } else if ( VAR_3 . get ( ) ) { return VAR_4 ; } final long VAR_5 = METHOD_5 ( VAR_6 ) ; if ( VAR_5 <= 0 ) { return VAR_7 ; } else { return VAR_8 ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) { try { TYPE_2 . Key key = new TYPE_2 . Key ( VAR_1 , VAR_2 , VAR_3 ) ; return new TYPE_3 ( key , VAR_4 , project , repo ) . METHOD_2 ( ) ; } catch ( java.io.IOException e ) { VAR_5 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . name ( ) ) ) + STRING_2 ) + project ) , e ) ; return VAR_6 ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey VAR_1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 . get ( ) ) ; TYPE_2 r = METHOD_3 ( STRING_2 ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_4 ( ) ) ; java.util.Map < java.lang.String , TYPE_3 > result = TYPE_4 . METHOD_5 ( r ) ; TYPE_5 . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_4 , VAR_1 , project ) , result . values ( ) ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ( ! ( METHOD_2 ( ) . METHOD_3 ( ) ) ) || ( METHOD_4 ( db ) ) ) || ( ! ( METHOD_5 ( VAR_1 . METHOD_6 ( db , notes ) , db ) ) ) ) { return false ; } if ( METHOD_7 ( ) ) { return true ; } return METHOD_2 ( ) . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 . Collections < java.lang.String , java.util.ArrayList < TYPE_2 > > METHOD_3 ( ) ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , TYPE_3 . of ( STRING_1 , TYPE_4 . METHOD_4 ( VAR_5 , VAR_6 ) ) ) ; } 
public void METHOD_1 ( final TYPE_1 res , final boolean VAR_1 ) { final TYPE_2 . Id id = res . getAccountId ( ) ; final TYPE_3 . Key VAR_2 = res . METHOD_2 ( ) ; if ( ( VAR_3 ) != null ) { VAR_4 . METHOD_3 ( key ) ; key = null ; VAR_3 = null ; } key = VAR_4 . METHOD_4 ( id ) ; VAR_3 = VAR_4 . METHOD_5 ( key , id , VAR_1 , VAR_2 ) ; METHOD_6 ( ) ; } 
public void run ( ) { try { VAR_1 . get ( ) ; } catch ( TYPE_1 e ) { METHOD_1 ( project , e ) ; } catch ( TYPE_2 e ) { VAR_2 . set ( false ) ; } catch ( TYPE_3 e ) { METHOD_2 ( project , e ) ; } catch ( TYPE_4 e ) { METHOD_2 ( project , e ) ; } finally { VAR_3 . update ( 1 ) ; } } 
public void METHOD_1 ( TYPE_1 event ) { event . METHOD_2 ( ) ; event . METHOD_3 ( ) ; METHOD_4 ( ) ; if ( TYPE_2 . METHOD_5 ( ) ) { TYPE_3 VAR_1 = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ; VAR_1 . METHOD_8 ( VAR_2 ) ; TYPE_4 . METHOD_9 ( VAR_1 , new TYPE_5 < TYPE_6 > ( ) { public void METHOD_10 ( TYPE_7 VAR_3 ) { } public void onSuccess ( TYPE_6 result ) { } } ) ; } } 
private java.util.Set < TYPE_1 > METHOD_1 ( TYPE_2 . ChangeInfo change ) { java.util.Set < TYPE_1 > result = new TYPE_3 < TYPE_1 > ( change . METHOD_2 ( ) . length ( ) ) ; for ( int i = 0 ; i < ( change . METHOD_2 ( ) . length ( ) ) ; i ++ ) { result . add ( change . METHOD_2 ( ) . get ( i ) . METHOD_3 ( ) ) ; } return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 = METHOD_2 ( VAR_2 , STRING_1 , 1 ) ; com.google.gerrit.reviewdb.client . PatchSetApproval VAR_3 = METHOD_2 ( VAR_2 , STRING_2 , 1 ) ; org.junit.Assert.assertEquals ( TYPE_1 . create ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 ) ) , VAR_4 . METHOD_4 ( change , TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 ) ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > r ) throws TYPE_3 { if ( ( r . METHOD_2 ( ) . METHOD_3 ( ) ) == 0 ) { return TYPE_4 . METHOD_4 ( r . METHOD_5 ( ) . getName ( ) , TYPE_5 . METHOD_6 ( r . METHOD_7 ( ) ) , VAR_1 , true , true ) ; } throw new TYPE_3 ( ( STRING_1 + r ) ) ; } 
public void METHOD_1 ( ) { final java.lang.String name = STRING_1 ; final TYPE_1 e = TYPE_1 . METHOD_2 ( name ) ; METHOD_3 ( e . METHOD_4 ( ) ) ; assertEquals ( name , e . METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 , e . METHOD_7 ( ) ) ; METHOD_6 ( VAR_2 , e . METHOD_8 ( ) ) ; METHOD_9 ( e . METHOD_10 ( ) . isEmpty ( ) ) ; } 
public java.util.List < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.util.List < java.lang.String > VAR_1 ) throws com.google.gwtorm.server.OrmException { int n = ( VAR_2 . METHOD_2 ( ) ) - 1 ; TYPE_1 . METHOD_3 ( ( ( VAR_1 . size ( ) ) <= n ) , STRING_1 , n ) ; return query ( TYPE_2 . METHOD_4 ( TYPE_3 . project ( project ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_3 . schema ( VAR_3 ) , VAR_1 ) ) ) ) ; } 
private java.util.List < java.lang.String > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { java.util.List < java.lang.String > r = TYPE_1 . METHOD_2 ( ) ; for ( TYPE_2 w : db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 , psId ) ) { r . add ( w . getKey ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } return r ; } 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 args , java.util.Set < com.google.gerrit.reviewdb.client.Change . Id > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change . Id id : VAR_1 ) { r . add ( new TYPE_4 ( args , id ) ) ; } return r ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; java.util.Set < java.lang.String > VAR_1 = TYPE_1 . METHOD_3 ( new java.lang.String [ ] { STRING_1 , STRING_2 } ) ; java.util.List < TYPE_2 > m = TYPE_3 . METHOD_4 ( repo , c , VAR_1 ) ; org.junit.Assert.assertEquals ( 0 , m . size ( ) ) ; } 
public boolean METHOD_1 ( ) { return ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; bind ( VAR_3 class ) . to ( VAR_4 class ) ; factory ( VAR_5 . Factory class ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , TYPE_5 , java.io.IOException { TYPE_2 p = VAR_2 . METHOD_1 ( VAR_3 , id ) ; for ( TYPE_6 VAR_4 : p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 , p . METHOD_2 ( ) ) ; } } throw new TYPE_4 ( id ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = METHOD_2 ( ) ; java.util.List < TYPE_1 > m = TYPE_2 . METHOD_3 ( repo , c ) ; java.util.Set < java.lang.String > VAR_1 = TYPE_3 . of ( STRING_1 , STRING_2 ) ; com.google.common.truth.Truth.assertThat ( TYPE_4 . METHOD_4 ( m ) ) . METHOD_5 ( VAR_1 ) ; } 
private TYPE_1 message ( TYPE_2 ctx , com.google.gerrit.reviewdb.client.PatchSet.Id psId , java.lang.String VAR_1 ) { TYPE_3 . METHOD_1 ( psId ) ; java.lang.String VAR_2 ; try { VAR_2 = TYPE_4 . METHOD_2 ( ctx . METHOD_3 ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return null ; } TYPE_1 m = new TYPE_1 ( new TYPE_1 . Key ( psId . getParentKey ( ) , VAR_2 ) , ctx . METHOD_4 ( ) . getAccountId ( ) , ctx . METHOD_5 ( ) , psId ) ; m . METHOD_6 ( VAR_1 ) ; return m ; } 
protected synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) || ( ( METHOD_3 ( ) ) && ( VAR_3 . get ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_6 ( ) ; } else { VAR_4 = VAR_5 . submit ( VAR_2 ) ; } } 
protected void METHOD_1 ( TYPE_1 commit ) throws java.io.IOException , TYPE_2 { if ( ( ( commit . getMessage ( ) ) == null ) || ( STRING_1 . equals ( commit . getMessage ( ) ) ) ) { commit . METHOD_2 ( STRING_2 ) ; } METHOD_3 ( VAR_1 , cfg ) ; } 
public TYPE_1 [ ] METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . get ( STRING_1 ) ) == null ) ) { return new TYPE_1 [ 0 ] ; } return VAR_1 . get ( STRING_1 ) . METHOD_2 ( new TYPE_1 [ 0 ] ) ; } 
void METHOD_1 ( TYPE_1 e ) { TYPE_2 . topic ( psId . getParentKey ( ) . get ( ) , input . getValue ( ) . METHOD_2 ( ) , new TYPE_3 < java.lang.String > ( ) { public void onSuccess ( java.lang.String result ) { TYPE_4 . display ( TYPE_5 . METHOD_3 ( psId ) ) ; } } ) ; METHOD_4 ( null ) ; } 
static java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 . length ( ) ) <= ( VAR_2 ) ) { return VAR_1 ; } else { int VAR_3 = VAR_1 . METHOD_2 ( CHAR_1 ) ; return VAR_3 >= 0 ? STRING_1 + ( VAR_1 . METHOD_3 ( VAR_3 ) ) : VAR_1 ; } } 
protected TYPE_1 METHOD_1 ( org.eclipse.jgit.revwalk.RevWalk rw , TYPE_2 VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( STRING_1 ) ; try { org.eclipse.jgit.lib.ObjectId VAR_4 = METHOD_3 ( rw , VAR_1 , VAR_2 ) ; if ( VAR_4 == null ) { return null ; } VAR_3 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_4 ) ) ; } catch ( TYPE_4 e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } return VAR_3 ; } 
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { TYPE_1 id = TYPE_2 . METHOD_1 ( cd ) ; try { TYPE_3 . METHOD_2 ( VAR_1 . delete ( id ) , VAR_2 . delete ( id ) ) . get ( ) ; } catch ( TYPE_4 e ) { throw new java.io.IOException ( e ) ; } catch ( TYPE_5 e ) { throw new java.io.IOException ( e ) ; } } 
public void close ( ) throws TYPE_1 . OrmException { VAR_1 . METHOD_1 ( ) ; try { if ( ( log ) != null ) { try { log . close ( ) ; } catch ( java.io.IOException err ) { throw new TYPE_1 . OrmException ( STRING_1 , err ) ; } finally { log = null ; } } } finally { VAR_1 . METHOD_2 ( ) ; } } 
public TYPE_1 < TYPE_2 > apply ( TYPE_3 VAR_1 , TYPE_4 input ) throws TYPE_5 , TYPE_6 , TYPE_7 , TYPE_8 , TYPE_9 , java.io.IOException { if ( VAR_1 . METHOD_1 ( ) ) { TYPE_10 in = new TYPE_10 ( ) ; VAR_2 = ( input != null ) ? VAR_3 : null ; return VAR_4 . get ( ) . apply ( VAR_1 , in ) ; } throw new TYPE_7 ( ) ; } 
public TYPE_1 get ( ) { if ( ! ( VAR_1 ) ) { synchronized ( VAR_2 ) { if ( ( ! ( VAR_2 . METHOD_1 ( ) ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_2 . METHOD_3 ( ) , getName ( ) ) ) ; } VAR_1 = true ; } } return VAR_2 ; } 
protected void METHOD_1 ( final TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( ( METHOD_2 ( ) ) && ( user . get ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . METHOD_5 ( ) ; } else { VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) throws java.io.IOException { TYPE_3 VAR_3 = TYPE_3 . METHOD_2 ( ( ( ( url ) + STRING_1 ) + VAR_1 ) ) ; if ( VAR_2 != null ) { VAR_3 . METHOD_3 ( new TYPE_4 ( STRING_2 , STRING_3 ) ) ; VAR_3 . METHOD_4 ( new TYPE_5 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) , TYPE_7 . name ( ) ) ) ; } return METHOD_7 ( VAR_3 ) ; } 
public static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > ( INT_1 ) ; for ( final com.google.gerrit.reviewdb.client.Change . Status e : TYPE_3 . values ( ) ) { if ( e . METHOD_2 ( ) ) { r . add ( new TYPE_4 ( VAR_1 , e ) ) ; } } return ( r . size ( ) ) == 1 ? r . get ( 0 ) : METHOD_3 ( r ) ; } 
private TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( admin ) ; VAR_3 . changes ( ) . id ( VAR_1 . changeId ) . revision ( STRING_1 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; VAR_3 . changes ( ) . id ( VAR_1 . changeId ) . revision ( STRING_1 ) . submit ( ) ; VAR_4 . METHOD_6 ( ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_4 ( input ) ; METHOD_5 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_6 ( ) . isEqualTo ( METHOD_7 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_8 ( ) ; } 
private TYPE_1 METHOD_1 ( ) { com.google.gerrit.reviewdb.client.PatchSet.Id id = ( VAR_1 . METHOD_2 ( ) ) ? VAR_2 . METHOD_3 ( ) : VAR_1 . METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( new TYPE_3 ( ) . METHOD_4 ( TYPE_4 . edit ( ) ) , ( STRING_1 + ( TYPE_5 . METHOD_5 ( id , path ) ) ) ) ; VAR_3 . METHOD_6 ( TYPE_6 . edit ( ) ) ; return VAR_3 ; } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData VAR_1 ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSet p : VAR_1 . METHOD_2 ( ) ) { if ( ( ( p . getRevision ( ) ) != null ) && ( ( p . getRevision ( ) . get ( ) ) != null ) ) { final org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId . METHOD_3 ( p . getRevision ( ) . get ( ) ) ; if ( ( VAR_2 . METHOD_4 ( id ) ) == 0 ) { return true ; } } } return false ; } 
private static java.lang.String METHOD_1 ( TYPE_1 < TYPE_2 < ? , ? > > e ) { if ( STRING_1 . equals ( e . METHOD_2 ( ) ) ) { return e . METHOD_3 ( ) ; } else { return java.lang.String.format ( STRING_2 , e . METHOD_2 ( ) , e . METHOD_3 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit VAR_1 = METHOD_2 ( ) ; TYPE_1 . Result change = METHOD_3 ( git ) ; submit ( change . getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit VAR_2 = METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . getId ( ) ) . isEqualTo ( change . METHOD_4 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_5 ( 0 ) ) . isEqualTo ( VAR_1 ) ; METHOD_6 ( change . getChangeId ( ) , 1 ) ; } 
public static com.google.gerrit.reviewdb.client.Change METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 user ) { com.google.gerrit.reviewdb.client.Change . Id changeId = new com.google.gerrit.reviewdb.client.Change . Id ( 1 ) ; com.google.gerrit.reviewdb.client.Change c = new com.google.gerrit.reviewdb.client.Change ( new com.google.gerrit.reviewdb.client.Change . Key ( STRING_1 ) , changeId , user . METHOD_2 ( ) . getId ( ) , new TYPE_2 . NameKey ( project , STRING_2 ) , TYPE_3 . METHOD_3 ( ) ) ; TYPE_4 . METHOD_4 ( c ) ; return c ; } 
private static java.lang.String METHOD_1 ( TYPE_1 user ) { if ( user . METHOD_2 ( ) ) { return ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) . toString ( ) ; } if ( user instanceof TYPE_3 ) { return STRING_1 + ( ( ( TYPE_3 ) ( user ) ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . toString ( ) ) ; } return user . toString ( ) ; } 
public TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in , TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_4 index = VAR_2 . METHOD_2 ( ) ; TYPE_5 VAR_3 = new TYPE_5 ( ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in , index , VAR_1 , VAR_3 ) ; if ( ( in == out ) || ( out instanceof TYPE_6 ) ) { return new TYPE_7 ( index , out , VAR_1 ) ; } else if ( out == null ) { return in ; } else { return out ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return VAR_1 . id ( VAR_2 . get ( ) . apply ( change , in ) . VAR_3 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
private PatchSet . Id METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) throws TYPE_1 { java.lang.String VAR_1 = METHOD_2 ( commit , VAR_2 ) ; int s = VAR_1 . METHOD_3 ( CHAR_1 ) ; java.lang.String VAR_3 = ( s < 0 ) ? VAR_1 : VAR_1 . METHOD_4 ( 0 , s ) ; TYPE_2 psId = TYPE_3 . METHOD_5 ( VAR_3 ) ; if ( psId == null ) { throw METHOD_6 ( VAR_2 , VAR_3 ) ; } return new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , psId ) ; } 
public static TYPE_1 create ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return new TYPE_2 ( TYPE_1 . METHOD_1 ( VAR_1 , STRING_1 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_2 , STRING_2 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_3 , STRING_3 , VAR_5 ) , TYPE_1 . METHOD_1 ( VAR_4 , STRING_4 , VAR_6 ) ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) throws TYPE_3 { final TYPE_4 . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( user . get ( ) , group ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { java.util.Map < java.lang.String , TYPE_3 > VAR_2 = new TYPE_4 < > ( ) ; METHOD_2 ( VAR_2 ) ; VAR_2 . put ( STRING_1 , VAR_1 ) ; TYPE_5 VAR_3 = VAR_4 . METHOD_3 ( STRING_2 , VAR_2 ) ; TYPE_1 result = VAR_5 . METHOD_4 ( VAR_3 , VAR_6 class ) ; return result ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) throws TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { try { return METHOD_1 ( VAR_1 . METHOD_2 ( change , user . get ( ) ) ) ; } catch ( TYPE_4 e ) { throw new java.io.IOException ( e ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 a = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_1 b = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ; final TYPE_3 < java.lang.String > n = TYPE_3 . METHOD_3 ( a , b ) ; assertEquals ( 2 , n . METHOD_4 ( ) ) ; METHOD_5 ( a , n . METHOD_6 ( 0 ) ) ; METHOD_5 ( b , n . METHOD_6 ( 1 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_2 , STRING_3 ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_4 , STRING_5 ) ; org.junit.Assert.assertEquals ( STRING_6 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( STRING_7 , VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( ( ( TYPE_2 ) ( null ) ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . append ( new TYPE_3 ( STRING_2 ) ) ) ; METHOD_2 ( b , b . append ( new TYPE_1 ( ) . append ( STRING_3 ) ) ) ; assertEquals ( STRING_4 , b . METHOD_3 ( ) ) ; } 
private java.lang.String METHOD_1 ( final TYPE_1 . Change change ) { if ( ( change != null ) && ( ( VAR_1 . get ( ) ) != null ) ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( VAR_1 . get ( ) ) ; r . append ( change . getChangeId ( ) ) ; return r . toString ( ) ; } return null ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 . METHOD_4 ( ) ) { return new TYPE_1 ( VAR_2 . group ( 1 ) , STRING_2 , VAR_1 ) ; } else { throw new TYPE_4 ( ( STRING_3 + VAR_1 ) ) ; } } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res , int VAR_1 , java.lang.String message ) throws java.io.IOException { res . METHOD_2 ( VAR_1 ) ; METHOD_3 ( req , res , VAR_2 ) ; METHOD_4 ( res ) ; try ( TYPE_3 out = TYPE_4 . METHOD_5 ( req , res ) ) { out . METHOD_6 ( message ) ; } } 
private java.util.List < com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_1 n ) { try { return VAR_1 . METHOD_2 ( db . get ( ) , n . notes , VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_3 . error ( ( STRING_1 + ( VAR_2 ) ) , e ) ; return java.util.Collections . METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 a = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_1 b = TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) ; final TYPE_3 n = TYPE_3 . METHOD_3 ( a , b ) ; assertEquals ( 2 , n . METHOD_4 ( ) ) ; METHOD_5 ( a , n . METHOD_6 ( 0 ) ) ; METHOD_5 ( b , n . METHOD_6 ( 1 ) ) ; } 
private void METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 , VAR_1 ) ; TYPE_3 VAR_5 = VAR_6 . get ( ) ; VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_5 ) ; VAR_2 . METHOD_2 ( ) . METHOD_4 ( VAR_5 ) ; TYPE_4 VAR_7 = new TYPE_4 ( null , account . getId ( ) ) ; VAR_7 . METHOD_5 ( VAR_1 ) ; VAR_7 . METHOD_6 ( account ) ; VAR_7 . commit ( VAR_2 ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = TYPE_8 . of ( id ) ; java.util.List < TYPE_1 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } throw new TYPE_9 ( ) ; } 
TYPE_1 METHOD_1 ( ) { TYPE_2 factory = new TYPE_2 ( ) ; factory . METHOD_2 ( new TYPE_3 ( url ) . METHOD_3 ( true ) . METHOD_4 ( ( ! ( VAR_1 ) ) ) . METHOD_5 ( INT_1 , VAR_2 ) . METHOD_1 ( ) ) ; return ( ( TYPE_1 ) ( factory . METHOD_6 ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ; METHOD_7 ( ) ; assertEquals ( STRING_5 , STRING_4 , VAR_1 . METHOD_8 ( ) . METHOD_9 ( ) ) ; } 
private TYPE_1 METHOD_1 ( final TYPE_1 VAR_1 ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( new TYPE_3 ( ) ) ; if ( VAR_2 ) { modules.add ( new TYPE_4 ( ) ) ; } else { modules.add ( new TYPE_5 ( ) ) ; modules.add ( new TYPE_6 ( ) ) ; } return VAR_1 . METHOD_2 ( modules ) ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit ) { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return METHOD_2 ( repo , db , rw , commit , repo . METHOD_3 ( ) . values ( ) ) ; } catch ( java.io.IOException e ) { java.lang.String msg = java.lang.String.format ( STRING_1 , commit . name ( ) , getProject ( ) . METHOD_4 ( ) ) ; VAR_1 . error ( msg , e ) ; return false ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 < TYPE_4 > VAR_3 = new TYPE_3 < TYPE_4 > ( ) ; for ( final TYPE_5 b : VAR_4 ) { if ( ( b . ref ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) >= 0 ) { VAR_3 . add ( new TYPE_4 ( b ) ) ; } } VAR_2 . METHOD_4 ( VAR_1 , new TYPE_6 ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( INT_1 ) ) ; METHOD_2 ( b , b . append ( 2 ) ) ; METHOD_2 ( b , b . append ( ( - INT_2 ) ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } 
public java.lang.String format ( java.lang.String projectName , TYPE_1 cfg , java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = new TYPE_3 ( ) ; if ( ! ( cfg . METHOD_1 ( VAR_3 , false ) ) ) { VAR_2 . METHOD_2 ( ) ; } VAR_2 . METHOD_3 ( METHOD_4 ( projectName ) ) ; byte [ ] b = VAR_2 . METHOD_5 ( VAR_1 , TYPE_4 . name ( ) ) ; return new java.lang.String ( b , TYPE_4 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) { return new TYPE_1 ( db , repo , rp . METHOD_3 ( ) ) ; } else { return new TYPE_1 ( project . METHOD_4 ( ) ) ; } } 
public void delete ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 update , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException { METHOD_1 ( ps . getId ( ) , update ) ; TYPE_2 . METHOD_2 ( ps . METHOD_3 ( ) , STRING_1 , ps . getId ( ) ) ; update . METHOD_4 ( VAR_1 ) ; if ( ( TYPE_3 . of ( update . getChange ( ) ) ) == ( VAR_2 ) ) { db . patchSets ( ) . delete ( java.util.Collections.singleton ( ps ) ) ; } } 
public void onSuccess ( TYPE_1 < TYPE_2 > m ) { VAR_1 . set ( base , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , VAR_2 . METHOD_1 ( ) ) , VAR_3 , VAR_4 , VAR_5 , ( ( edit ) != null ) ) ; VAR_1 . METHOD_2 ( m , VAR_6 , ( VAR_7 != null ? VAR_7 . get ( 0 ) : null ) , ( VAR_8 != null ? VAR_8 . get ( 0 ) : null ) ) ; } 
protected void METHOD_1 ( TYPE_1 id , TYPE_2 < java.lang.String > VAR_1 ) throws java.lang.Exception { TYPE_3 . ProjectConfig cfg = VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ; for ( java.lang.String VAR_4 : VAR_1 ) { TYPE_4 . METHOD_4 ( cfg , VAR_4 , id ) ; TYPE_4 . METHOD_4 ( cfg , VAR_4 , id ) ; } METHOD_5 ( VAR_3 , cfg ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_3 ) + STRING_1 ) ) ; TYPE_1 input = new TYPE_1 ( ) ; input . ref = STRING_2 ; input . message = STRING_3 ; VAR_4 . METHOD_3 ( VAR_5 class ) ; VAR_4 . METHOD_4 ( ( ( STRING_4 + ( VAR_3 ) ) + STRING_5 ) ) ; METHOD_5 ( input . ref ) . create ( input ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; rpc ( VAR_4 class ) ; rpc ( VAR_5 class ) ; rpc ( VAR_6 class ) ; rpc ( VAR_7 class ) ; rpc ( VAR_8 class ) ; rpc ( VAR_9 class ) ; rpc ( VAR_10 class ) ; rpc ( VAR_11 class ) ; rpc ( VAR_12 class ) ; } 
public static void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , TYPE_1 < TYPE_2 > VAR_3 ) { new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , VAR_1 ) . METHOD_2 ( STRING_3 , VAR_2 ) . METHOD_3 ( STRING_4 , STRING_5 ) . METHOD_4 ( STRING_6 ) . METHOD_5 ( ) . get ( TYPE_4 . METHOD_6 ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_4 ( STRING_3 , u . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ; } 
private java.lang.String METHOD_1 ( final byte [ ] b ) { final java.lang.StringBuilder VAR_1 = new java.lang.StringBuilder ( ) ; for ( int i = 0 ; i < ( b . length ) ; i ++ ) { final int u = ( ( b [ i ] ) > > INT_1 ) & INT_2 ; final int VAR_2 = ( b [ i ] ) & INT_2 ; VAR_1 . append ( VAR_3 [ u ] ) ; VAR_1 . append ( VAR_3 [ VAR_2 ] ) ; } return VAR_1 . toString ( ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String name ) { java.util.List < java.lang.String > values = TYPE_1 . METHOD_2 ( ) . get ( name ) ; if ( values == null ) { return null ; } else { return values . get ( ( ( values . size ( ) ) - 1 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String changeId = METHOD_2 ( ) . getChangeId ( ) ; TYPE_1 . ChangeInfo c = get ( changeId ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) . METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) . METHOD_4 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . message ) . isEqualTo ( STRING_1 ) ; } 
private static void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_1 . get ( STRING_1 ) ; final java.lang.String VAR_2 = TYPE_2 . METHOD_2 ( ) ; final TYPE_3 VAR_3 = new TYPE_3 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; VAR_1 . add ( VAR_3 ) ; final TYPE_5 VAR_4 = new TYPE_5 ( TYPE_6 . METHOD_5 ( ) ) ; VAR_4 . METHOD_4 ( STRING_3 ) ; VAR_1 . add ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = new TYPE_2 ( new TYPE_3 ( STRING_1 ) ) ; repo = new TYPE_4 < TYPE_1 > ( r ) ; servlet = new TYPE_5 ( new TYPE_6 ( repo . METHOD_2 ( ) ) , VAR_1 , VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( int index , TYPE_2 VAR_1 ) { int VAR_2 = METHOD_2 ( index , VAR_3 ) ; if ( VAR_2 < 0 ) { return null ; } TYPE_1 VAR_4 = METHOD_3 ( VAR_2 , VAR_1 , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) , null ) ; return VAR_4 ; } 
protected void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { org.eclipse.jgit.lib.ObjectId VAR_1 = getRevision ( ) ; if ( VAR_1 == null ) { return ; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 ) ; try ( TYPE_2 VAR_3 = new TYPE_2 ( getChangeId ( ) , walk , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ) { VAR_3 . METHOD_2 ( ) ; METHOD_3 ( VAR_7 , VAR_8 ) ; METHOD_3 ( VAR_9 , VAR_10 ) ; VAR_11 = VAR_12 ; } finally { walk . METHOD_4 ( ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 user , com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gwtorm.server.OrmException { TYPE_3 VAR_1 = VAR_2 . create ( user , cd ) . METHOD_2 ( patchSet ) . METHOD_1 ( ) ; if ( ( VAR_1 . status ) != ( VAR_3 ) ) { throw new com.google.gwtorm.server.OrmException ( ( STRING_1 + VAR_1 ) ) ; } return VAR_1 . type ; } 
private java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( final TYPE_3 . Id VAR_1 ) throws com.google.gwtorm.server.OrmException { final java.util.Map < TYPE_1 , TYPE_2 > VAR_2 = TYPE_4 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_3 : db . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) { VAR_2 . put ( VAR_3 . METHOD_5 ( ) , VAR_3 ) ; } return VAR_2 ; } 
static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) ) ; } 
private java.util.Map < com.google.gerrit.reviewdb.client.Change . Key , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( TYPE_1 . NameKey branch ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.Change . Key , com.google.gerrit.reviewdb.client.Change . Id > r = new TYPE_2 < > ( ) ; for ( com.google.gerrit.reviewdb.client.Change c : db . changes ( ) . METHOD_2 ( branch ) ) { r . put ( c . getKey ( ) , c . getId ( ) ) ; } return r ; } 
public java.util.Map < TYPE_1 , java.util.Set < TYPE_2 > > METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) throws java.io.IOException , TYPE_3 { try ( org.eclipse.jgit.lib.Repository git = VAR_2 . METHOD_2 ( VAR_3 ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_1 ) ) { VAR_4 . METHOD_3 ( git ) ; return VAR_4 . METHOD_1 ( ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) . to ( VAR_1 class ) ; bind ( VAR_3 class ) . to ( VAR_1 class ) ; bind ( VAR_4 class ) . to ( VAR_1 class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_1 class ) ; METHOD_2 ( ) . to ( VAR_1 class ) ; } 
protected org.eclipse.jgit.lib.ObjectId METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ( revision ) == null ) { return null ; } TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ; if ( VAR_2 != null ) { return VAR_2 . METHOD_1 ( 0 ) ; } return null ; } 
public TYPE_1 . PatchSet METHOD_1 ( ) { if ( ( currentPatchSetId ) != null ) { for ( int i = ( patchSets . size ( ) ) - 1 ; i >= 0 ; i -- ) { final TYPE_1 . PatchSet ps = patchSets . get ( i ) ; if ( ps . getKey ( ) . equals ( currentPatchSetId ) ) { return ps ; } } } return null ; } 
public void METHOD_1 ( ) { assertEquals ( STRING_1 , TYPE_1 . METHOD_2 ( new TYPE_2 ( INT_1 ) ) ) ; assertEquals ( STRING_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_2 , INT_1 ) ) ) ; assertEquals ( STRING_3 , TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_3 , INT_1 ) ) ) ; } 
private TYPE_1 < TYPE_2 > [ ] METHOD_1 ( final TYPE_3 r ) throws TYPE_4 , TYPE_5 { final TYPE_1 < TYPE_2 > [ ] p = new TYPE_1 [ r . METHOD_2 ( ) ] ; for ( int i = 0 ; i < ( p . length ) ; i ++ ) { p [ i ] = METHOD_3 ( r . METHOD_4 ( i ) ) ; } return p ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } try { METHOD_1 ( util . METHOD_4 ( change ) , util . METHOD_5 ( change . getProject ( ) , patchSet ) , util . METHOD_6 ( VAR_1 ) , VAR_2 , VAR_3 ) ; } catch ( TYPE_3 | TYPE_4 | java.io.IOException | com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; } } 
public void run ( ) { synchronized ( VAR_1 ) { for ( final TYPE_1 < TYPE_2 > i = VAR_1 . METHOD_1 ( ) ; i . METHOD_2 ( ) ; ) { try { i . METHOD_3 ( ) . run ( ) ; } catch ( TYPE_3 err ) { VAR_2 . error ( STRING_1 , err ) ; } i . METHOD_4 ( ) ; } } } 
public void METHOD_1 ( TYPE_1 ctx ) throws java.lang.Exception { TYPE_2 c = METHOD_2 ( branch , null ) ; ctx . METHOD_3 ( new TYPE_3 . ReceiveCommand ( c . METHOD_4 ( 0 ) , c , branch . get ( ) ) ) ; METHOD_5 ( branch , c ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 input = new TYPE_1 ( ) ; java.util.List < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 = VAR_1 ; try { project ( ) . METHOD_4 ( input ) ; org.junit.Assert . METHOD_5 ( STRING_2 ) ; } catch ( TYPE_3 e ) { com.google.common.truth.Truth.assertThat ( e ) . METHOD_6 ( ) . isEqualTo ( METHOD_7 ( TYPE_4 . of ( STRING_1 ) ) ) ; } METHOD_8 ( ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { TYPE_2 < TYPE_3 > api = VAR_2 . get ( VAR_3 class , STRING_1 ) ; return TYPE_4 . METHOD_2 ( api . METHOD_3 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) , VAR_4 ) . VAR_5 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 . NameKey projectName ) { try { final org.eclipse.jgit.lib.Repository r = VAR_1 . METHOD_2 ( projectName . get ( ) ) ; try { return r . METHOD_3 ( VAR_2 ) ; } finally { r . close ( ) ; } } catch ( java.io.IOException VAR_3 ) { return null ; } } 
public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 . Key key ) throws java.io.IOException { try ( TYPE_3 VAR_1 = new TYPE_3 ( key . repo , key . path ) ) { VAR_1 . METHOD_2 ( null , VAR_2 ) ; return TYPE_2 . METHOD_3 ( VAR_1 ) ; } finally { key . repo = null ; } } 
public boolean equals ( final TYPE_1 VAR_1 ) { if ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) { final TYPE_2 < ? > p = ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ; return ( METHOD_2 ( ) . equals ( p . METHOD_2 ( ) ) ) && ( getValue ( ) . equals ( p . getValue ( ) ) ) ; } return false ; } 
private void METHOD_1 ( int VAR_1 ) { if ( VAR_1 < ( ( VAR_2 ) - 1 ) ) { VAR_3 . info ( STRING_1 ) ; try { TYPE_1 . METHOD_2 ( VAR_4 ) ; } catch ( TYPE_2 VAR_5 ) { return ; } } else { VAR_3 . error ( ( ( STRING_2 + ( VAR_2 ) ) + STRING_3 ) ) ; METHOD_3 ( false ) ; } } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 { TYPE_3 cm = VAR_1 . create ( ctx . getProject ( ) , change.getId ( ) ) ; cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) ; cm . METHOD_4 ( patchSet , VAR_2 ) ; cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) ; cm . METHOD_9 ( ) ; } 
private void METHOD_1 ( final TYPE_1 . Change change ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( METHOD_2 ( VAR_2 ) ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( true ) ; VAR_1 . METHOD_5 ( new TYPE_3 ( ) { public void METHOD_6 ( ) { METHOD_7 ( change ) ; } } ) ; METHOD_8 ( VAR_4 ) . METHOD_9 ( true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( true ) ; METHOD_3 ( ) ; TYPE_1 . Result r = METHOD_4 ( ) ; revision ( r ) . METHOD_5 ( TYPE_2 . reject ( ) ) ; r = METHOD_6 ( r . getChangeId ( ) ) ; METHOD_7 ( r , ( - 2 ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String name , boolean create ) { for ( TYPE_1 p : METHOD_2 ( ) ) { if ( p . getName ( ) . METHOD_3 ( name ) ) { return p ; } } if ( create ) { TYPE_1 p = new TYPE_1 ( name ) ; VAR_1 . add ( p ) ; return p ; } else { return null ; } } 
public static java.lang.String METHOD_1 ( TYPE_1 req , java.lang.String VAR_1 ) { if ( TYPE_2 . equals ( VAR_1 ) ) { java.lang.String user = TYPE_3 . METHOD_2 ( req . METHOD_1 ( ) ) ; if ( user != null ) { return user ; } java.lang.String auth = req . METHOD_3 ( TYPE_2 ) ; return TYPE_4 . METHOD_4 ( auth ) ; } else { return TYPE_3 . METHOD_2 ( req . METHOD_3 ( VAR_1 ) ) ; } } 
public boolean METHOD_1 ( final com.google.gerrit.server.query.change.ChangeData cd ) throws TYPE_1 . OrmException { if ( cd . METHOD_2 ( user ) ) { return true ; } try { TYPE_2 . Change c = cd . change ( db ) ; if ( ( c != null ) && ( VAR_1 . METHOD_3 ( c ) . METHOD_4 ( user ) . METHOD_5 ( ) ) ) { cd . METHOD_6 ( user ) ; return true ; } else { return false ; } } catch ( TYPE_3 e ) { return false ; } } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , TYPE_2 . NameKey > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , TYPE_2 . NameKey > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . change ( ) . METHOD_2 ( ) ) ; } return VAR_1 ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 w ) { final TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 class ) ; if ( VAR_2 != null ) { w . METHOD_3 ( ) ; w . METHOD_3 ( ( ( STRING_1 + ( METHOD_4 ( ) ) ) + STRING_2 ) ) ; w . METHOD_5 ( ) ; w . METHOD_3 ( ( ( STRING_3 + ( VAR_2 . value ( ) ) ) + STRING_4 ) ) ; w . METHOD_6 ( ) ; w . METHOD_3 ( STRING_5 ) ; } } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { org.junit.Assert.assertEquals ( VAR_1 . line , VAR_2 . line ) ; org.junit.Assert.assertEquals ( VAR_1 . message , VAR_2 . message ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_4 ) ; if ( ( VAR_5 ) == null ) { org.junit.Assert.assertEquals ( VAR_6 , VAR_7 ) ; } } 
protected byte [ ] METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ( revision ) == null ) { return new byte [ ] { } ; } TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ; if ( VAR_2 != null ) { TYPE_2 VAR_4 = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_5 ) ; return VAR_4 . METHOD_6 ( VAR_6 ) ; } else { return new byte [ ] { } ; } } 
public synchronized void METHOD_1 ( int VAR_1 ) { int VAR_2 = - 1 ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( ( VAR_3 . get ( i ) . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ) { VAR_2 = i ; break ; } } if ( VAR_2 >= 0 ) { VAR_3 . METHOD_4 ( VAR_2 ) ; } } 
public void onSuccess ( final TYPE_1 result ) { if ( METHOD_1 ( ) ) { METHOD_2 ( 1 ) ; } VAR_1 = result ; VAR_2 . METHOD_3 ( false ) ; VAR_3 . METHOD_4 ( true ) ; VAR_4 . METHOD_4 ( true ) ; VAR_5 . METHOD_4 ( true ) ; METHOD_5 ( ) ; VAR_6 . onSuccess ( VAR_7 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_2 notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { return TYPE_3 . METHOD_3 ( db . METHOD_4 ( ) . METHOD_1 ( notes . getChangeId ( ) ) ) ; } else { return TYPE_3 . METHOD_3 ( notes . METHOD_5 ( ) . METHOD_6 ( ) . values ( ) ) ; } } 
public static TYPE_1 revision ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { int VAR_1 = id . getParentKey ( ) . get ( ) ; java.lang.String revision = TYPE_2 . get ( id ) ; if ( revision != null ) { return TYPE_3 . revision ( VAR_1 , revision ) ; } return TYPE_3 . change ( VAR_1 ) . view ( STRING_1 ) . id ( id . get ( ) ) ; } 
private void METHOD_1 ( TYPE_1 c ) { TYPE_2 . METHOD_2 ( ( ( c . METHOD_3 ( ) ) != null ) ) ; TYPE_2 . METHOD_2 ( ( ( c . getStatus ( ) ) == ( VAR_1 ) ) , ( STRING_1 + STRING_2 ) ) ; TYPE_2 . METHOD_2 ( c . METHOD_4 ( ) . equals ( METHOD_5 ( ) . getAccountId ( ) ) , ( STRING_3 + STRING_4 ) , METHOD_5 ( ) . getAccountId ( ) , c ) ; } 
protected byte [ ] METHOD_1 ( java.lang.String VAR_1 ) throws java.io.IOException { if ( ( revision ) == null ) { return new byte [ ] { } ; } TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , revision . METHOD_3 ( ) ) ; if ( VAR_2 != null ) { TYPE_2 VAR_4 = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( 0 ) , VAR_5 ) ; return VAR_4 . METHOD_6 ( VAR_6 ) ; } return new byte [ ] { } ; } 
public static TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 . METHOD_2 ( name ) ; java.util.List < TYPE_2 > values = new java.util.ArrayList < TYPE_2 > ( 2 ) ; values . add ( new TYPE_2 ( ( ( short ) ( 0 ) ) , STRING_1 ) ) ; values . add ( new TYPE_2 ( ( ( short ) ( 1 ) ) , STRING_2 ) ) ; TYPE_1 type = new TYPE_1 ( name , values ) ; return type ; } 
private java.lang.String METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) ; if ( VAR_2 == null ) { return null ; } return METHOD_2 ( projectName , VAR_1 , VAR_4 . create ( VAR_2 ) . METHOD_3 ( ) ) ; } 
public void run ( ) throws java.lang.Exception { METHOD_1 ( VAR_1 ) ; if ( ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ! ( VAR_1 . METHOD_3 ( ) . isEmpty ( ) ) ) ) { throw new TYPE_1 ( 1 , STRING_1 ) ; } final TYPE_2 VAR_2 = METHOD_4 ( out ) ; try { VAR_1 . display ( VAR_2 ) ; } finally { VAR_2 . METHOD_5 ( ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( java.lang.String err , java.lang.Exception e ) { if ( VAR_1 ) { if ( err == null ) { VAR_2 . error ( err ) ; } else { VAR_2 . error ( err , e ) ; } return TYPE_2 . METHOD_2 ( ) ; } else { return TYPE_2 . METHOD_3 ( err ) ; } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 == ( TYPE_3 . METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ; try { METHOD_3 ( db ) ; } finally { db . close ( ) ; } } synchronized ( VAR_3 ) { VAR_3 . update ( 1 ) ; } return null ; } 
static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Change change ) { return new TYPE_2 ( change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_6 . of ( ) , TYPE_6 . of ( ) ) ; } 
private TYPE_1 METHOD_1 ( final TYPE_2 . HttpServletResponse rsp , final java.lang.String VAR_1 ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { TYPE_3 . Key key = new TYPE_3 . Key ( VAR_2 , VAR_1 ) ; return auth ( db . METHOD_3 ( ) . get ( key ) ) ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_4 ( ) . log ( STRING_1 , e ) ; return null ; } } 
private void METHOD_1 ( ) { approvals = TYPE_1 . of ( ) ; reviewers = TYPE_2 . of ( ) ; VAR_1 = TYPE_3 . of ( ) ; VAR_2 = TYPE_1 . of ( ) ; VAR_3 = TYPE_1 . of ( ) ; VAR_4 = TYPE_1 . of ( ) ; } 
private void METHOD_1 ( ) { final java.util.Set < TYPE_1 . Id > VAR_1 = user . METHOD_2 ( ) ; final TYPE_2 VAR_2 = VAR_3 . get ( change . METHOD_3 ( ) . getParentKey ( ) ) ; METHOD_1 ( VAR_1 , VAR_2 . METHOD_4 ( ) ) ; METHOD_1 ( VAR_1 , VAR_3 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) { VAR_3 . METHOD_2 ( 0 , 0 , new TYPE_2 ( VAR_1 , INT_1 ) ) ; VAR_3 . METHOD_3 ( 0 , 1 , VAR_2 ) ; VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_1 , VAR_1 . email ( ) ) ; VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_1 . name ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 . OrmException , TYPE_2 { METHOD_2 ( VAR_1 . METHOD_3 ( db ) . isEmpty ( ) ) ; METHOD_4 ( STRING_1 ) ; METHOD_4 ( STRING_2 ) ; java.util.Set < java.lang.String > s = VAR_1 . METHOD_3 ( db ) ; assertEquals ( 1 , s . size ( ) ) ; METHOD_5 ( s . contains ( STRING_3 ) ) ; METHOD_2 ( s . contains ( STRING_4 ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , int row , int VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { METHOD_2 ( row ) ; } else if ( ( VAR_2 == ( VAR_4 ) ) || ( VAR_2 == ( VAR_5 ) ) ) { } else if ( ( METHOD_3 ( row ) ) != null ) { METHOD_4 ( row ) ; } } 
void set ( TYPE_1 . ChangeInfo info ) { this . changeId = info . METHOD_1 ( ) ; this . VAR_1 = ( info . METHOD_2 ( ) ) && ( info . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ) ; METHOD_5 ( info . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( changeId ) ; VAR_3 . METHOD_8 ( VAR_1 ) ; if ( ! ( VAR_1 ) ) { VAR_4 . METHOD_9 ( null ) ; } } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; } else { return VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) . METHOD_4 ( VAR_3 ) ; } } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( revision . get ( ) ) > 0 ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) ; VAR_1 . METHOD_5 ( METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( TYPE_4 . METHOD_4 ( ) ) ; return java.util.Collections . METHOD_8 ( VAR_1 ) ; } else { return java.util.Collections . METHOD_9 ( ) ; } } 
public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( final TYPE_3 < ? extends TYPE_2 < TYPE_1 > > VAR_1 ) { if ( ( VAR_1 . size ( ) ) == 1 ) { return TYPE_4 . METHOD_2 ( VAR_1 ) ; } return new TYPE_5 < TYPE_1 > ( VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . create ( TYPE_3 . of ( db ) , VAR_1 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_2 ; } public TYPE_4 < com.google.gerrit.reviewdb.server.ReviewDb > METHOD_3 ( ) { return TYPE_3 . of ( db ) ; } } ; } 
public java.util.Set < java.lang.String > METHOD_1 ( ) throws TYPE_1 { try { return TYPE_2 . METHOD_2 ( ( ( TYPE_3 < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_3 ( true ) . apply ( revision ) . value ( ) ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } 
public static void query ( TYPE_1 < TYPE_2 < TYPE_3 > > VAR_1 , java.lang.String ... VAR_2 ) { assert ( VAR_2 . length ) >= 2 ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_4 ) ; for ( java.lang.String VAR_5 : VAR_2 ) { VAR_3 . METHOD_1 ( STRING_1 , TYPE_5 . METHOD_2 ( VAR_5 ) ) ; } TYPE_3 . METHOD_3 ( VAR_3 , VAR_6 ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_1 > in ) { java.util.ArrayList < TYPE_1 > r = new java.util.ArrayList < TYPE_1 > ( in . size ( ) ) ; for ( TYPE_1 m : in ) { if ( m . METHOD_2 ( ) ) { r . METHOD_3 ( m . METHOD_4 ( ) ) ; } else { r . add ( m ) ; } } return r ; } 
public void run ( ) { TYPE_1 VAR_1 = cm . METHOD_1 ( ) . METHOD_2 ( ) ; int line = ( cm . METHOD_3 ( VAR_1 ) ) + 1 ; TYPE_2 . METHOD_4 ( line ) ; java.lang.String token = TYPE_3 . METHOD_5 ( revision , path ) ; if ( ! ( TYPE_4 . METHOD_6 ( ) ) ) { TYPE_4 . METHOD_7 ( token ) ; } else { TYPE_4 . display ( token ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; VAR_2 . METHOD_4 ( VAR_3 , null , VAR_4 , VAR_5 ) ; com.google.common.truth.Truth.assertThat ( METHOD_2 ( ) . http ( ) . METHOD_3 ( ) ) . isEqualTo ( VAR_5 ) ; } 
java.lang.String METHOD_1 ( final java.lang.String s ) { if ( ( s == null ) || ( ( s . length ( ) ) < INT_1 ) ) { return null ; } return ( ( s . METHOD_2 ( 0 , INT_2 ) ) + STRING_1 ) + ( s . METHOD_2 ( ( ( s . length ( ) ) - INT_3 ) ) ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( ) ; } super . METHOD_1 ( ) ; VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) ; TYPE_1 . METHOD_5 ( VAR_4 , new TYPE_2 < TYPE_3 > ( this ) { protected void METHOD_6 ( final TYPE_3 result ) { display ( result ) ; } } ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 a = new TYPE_1 ( VAR_1 , STRING_2 ) ; org.junit.Assert.assertEquals ( VAR_1 , a . METHOD_2 ( ) . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) , a . METHOD_4 ( VAR_1 ) ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { TYPE_2 < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change . Id > VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_2 . values ( ) ) { VAR_1 . put ( cd . change ( ) . getProject ( ) , cd . getId ( ) ) ; } return VAR_1 ; } 
private void METHOD_1 ( java.lang.String changeId , TYPE_1 VAR_1 ) throws java.lang.Exception { switch ( VAR_1 ) { case VAR_2 : METHOD_2 ( changeId ) ; return ; case VAR_3 : METHOD_3 ( changeId ) ; return ; case VAR_4 : METHOD_4 ( changeId ) ; return ; case VAR_5 : METHOD_5 ( changeId ) ; return ; case VAR_6 : METHOD_6 ( changeId ) ; return ; default : org.junit.Assert . METHOD_7 ( ( STRING_1 + VAR_1 ) ) ; } } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return ; } TYPE_2 change = VAR_2 . get ( ) ; try { METHOD_3 ( VAR_3 ) ; METHOD_4 ( change ) ; } catch ( TYPE_3 | com.google.gwtorm.server.OrmException | TYPE_4 | java.io.IOException e ) { VAR_4 . error ( STRING_1 , e ) ; throw new TYPE_5 ( e ) ; } } 
protected void METHOD_1 ( ) { install ( new TYPE_1 ( ) ) ; METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_1 class ) ; if ( VAR_2 . METHOD_4 ( ) ) { METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_3 class ) ; } else { METHOD_2 ( STRING_1 ) . METHOD_3 ( VAR_4 class ) ; } METHOD_5 ( STRING_1 ) . METHOD_6 ( VAR_5 class ) ; } 
void close ( ) { try { VAR_1 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_1 ( STRING_1 , e ) ; } try { VAR_3 . close ( true ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_1 ( STRING_2 , e ) ; } try { VAR_4 . close ( ) ; } catch ( java.io.IOException e ) { VAR_2 . METHOD_1 ( STRING_3 , e ) ; } } 
private boolean METHOD_1 ( final int i ) { final TYPE_1 s = VAR_1 . get ( i ) ; final TYPE_1 e = VAR_1 . get ( ( i - 1 ) ) ; return ( ( s . METHOD_2 ( ) ) - ( e . METHOD_3 ( ) ) ) <= ( 2 * ( VAR_2 ) ) ; } 
private static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { if ( ( VAR_2 . getChange ( ) . getStatus ( ) ) != ( VAR_3 ) ) { return false ; } for ( final TYPE_1 t : TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( ! ( VAR_2 . METHOD_4 ( t ) ) ) { return false ; } } return true ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . append ( INT_1 ) ) ; METHOD_2 ( b , b . append ( INT_2 ) ) ; assertEquals ( STRING_1 , b . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 err ) { TYPE_2 . METHOD_2 ( true , VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( err ) ) { new TYPE_3 ( err . getMessage ( ) ) . METHOD_4 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_5 ( id ) ) ; } else { super . METHOD_1 ( err ) ; } } 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { VAR_1 . METHOD_1 ( ) ; final java.util.ArrayList < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ; for ( final TYPE_1 p : result ) { r . add ( new TYPE_2 ( p ) ) ; VAR_1 . put ( p . getName ( ) , p . METHOD_2 ( ) ) ; } VAR_2 . METHOD_3 ( req , new TYPE_3 ( r ) ) ; } 
private void METHOD_1 ( ) { for ( java.lang.String name : ( ( java.util.List < java.lang.String > ) ( VAR_1 . get ( ) . METHOD_2 ( VAR_2 ) . apply ( new TYPE_1 ( ) ) ) ) ) { VAR_3 . METHOD_3 ( name ) ; VAR_3 . METHOD_3 ( CHAR_1 ) ; } VAR_3 . METHOD_4 ( ) ; } 
private static void METHOD_1 ( final java.lang.String name , final java.lang.String value , final TYPE_1 r ) { assertEquals ( VAR_1 , r . METHOD_2 ( ) ) ; assertEquals ( name , r . METHOD_3 ( ) ) ; assertEquals ( 1 , r . METHOD_4 ( ) ) ; final TYPE_1 c = r . METHOD_5 ( 0 ) ; assertEquals ( VAR_2 , c . METHOD_2 ( ) ) ; assertEquals ( value , c . METHOD_3 ( ) ) ; assertEquals ( 0 , c . METHOD_4 ( ) ) ; } 
private static boolean METHOD_1 ( ) { final java.lang.String [ ] VAR_1 = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ; java.lang.String value = TYPE_1 . METHOD_2 ( STRING_4 ) ; return ( value != null ) && ( TYPE_2 . METHOD_3 ( VAR_1 ) . contains ( value . METHOD_4 ( ) ) ) ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 VAR_1 ) { if ( ( req . METHOD_2 ( ) . length ( ) ) >= ( TYPE_3 . info ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) { METHOD_5 ( req , VAR_1 ) ; } else { java.util.List < TYPE_4 > VAR_2 = java.util.Collections . METHOD_6 ( ) ; VAR_1 . METHOD_7 ( req , new TYPE_5 ( VAR_2 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String name = repo . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_1 res = METHOD_5 ( STRING_1 ) ; org.junit.Assert.assertEquals ( ( name + STRING_2 ) , new java.lang.String ( res . METHOD_6 ( ) , VAR_1 ) ) ; } 
public TYPE_1 METHOD_1 ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( VAR_1 == ( TYPE_2 . METHOD_2 ( ) ) ) { METHOD_3 ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = VAR_2 . METHOD_4 ( ) ; try { METHOD_3 ( db ) ; } finally { db . close ( ) ; } } return null ; } 
protected java.lang.String METHOD_1 ( ) { java.lang.StringBuilder m = new java.lang.StringBuilder ( VAR_1 ) ; java.lang.String [ ] VAR_2 = METHOD_2 ( ) ; if ( VAR_2 != null ) { m . append ( TYPE_1 . on ( STRING_1 ) . METHOD_3 ( VAR_2 ) ) ; } return m . toString ( ) ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository VAR_1 , org.eclipse.jgit.revwalk.RevCommit VAR_2 , TYPE_1 VAR_3 ) throws TYPE_2 , java.io.IOException { TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 . METHOD_2 ( ) ) ; VAR_4 . METHOD_3 ( VAR_3 ) ; org.eclipse.jgit.lib.ObjectId VAR_5 = VAR_4 . METHOD_4 ( VAR_1 ) ; if ( org.eclipse.jgit.lib.ObjectId . equals ( VAR_5 , VAR_2 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } return VAR_5 ; } 
public void METHOD_1 ( ) { final TYPE_1 b = new TYPE_1 ( ) ; METHOD_2 ( b , b . METHOD_3 ( ) ) ; METHOD_2 ( b , b . METHOD_4 ( STRING_1 ) ) ; METHOD_2 ( b , b . METHOD_5 ( STRING_2 ) ) ; METHOD_2 ( b , b . append ( STRING_3 ) ) ; METHOD_2 ( b , b . METHOD_6 ( ) ) ; assertEquals ( STRING_4 , b . METHOD_7 ( ) ) ; } 
protected void run ( ) throws TYPE_1 { if ( ( ( VAR_1 ) == null ) || ( VAR_1 . isEmpty ( ) ) ) { VAR_2 . METHOD_1 ( true ) ; } else { try { VAR_2 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_2 e ) { throw METHOD_3 ( e . getMessage ( ) ) ; } catch ( TYPE_3 e ) { throw METHOD_3 ( e . getMessage ( ) ) ; } } } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , int i ) { if ( ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) , VAR_2 ) ) && ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_4 ( i ) , VAR_3 ) ) ) { ( VAR_4 ) ++ ; return true ; } else { return false ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > schema , TYPE_4 cfg , TYPE_5 VAR_1 ) throws java.io.IOException { if ( TYPE_6 . METHOD_2 ( cfg ) ) { return new TYPE_7 ( ) ; } TYPE_8 VAR_2 = TYPE_9 . METHOD_3 ( VAR_1 , ( ( VAR_3 ) + STRING_1 ) , schema ) ; return TYPE_10 . METHOD_4 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 n = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) , new TYPE_3 ( STRING_4 , STRING_5 ) ) ) ; METHOD_5 ( VAR_1 , n ) ; assertEquals ( ( STRING_6 + ( ( STRING_7 + STRING_8 ) + STRING_9 ) ) , n . METHOD_6 ( ) ) ; } 
private void METHOD_1 ( final TYPE_1 . ReviewDb c ) throws TYPE_2 . OrmException { final TYPE_1 . Project VAR_1 ; VAR_1 = new TYPE_1 . Project ( new TYPE_3 . NameKey ( STRING_1 ) , VAR_2 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( false ) ; c . projects ( ) . insert ( java.util.Collections.singleton ( VAR_1 ) ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String token ) { if ( token == null ) { token = STRING_1 ; } else if ( token . METHOD_2 ( STRING_2 ) ) { token = token . METHOD_3 ( 1 ) ; } return TYPE_1 . METHOD_4 ( ( STRING_3 + token ) ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_2 . get ( ) ; VAR_3 = true ; } try { TYPE_1 VAR_4 = VAR_1 . METHOD_2 ( project ) ; TYPE_2 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_6 ) ) ; return VAR_4 ; } catch ( TYPE_3 e ) { throw new java.io.IOException ( e ) ; } } 
public void METHOD_1 ( ) { if ( ( info ) == null ) { METHOD_2 ( ) ; } super . METHOD_1 ( ) ; display ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_3 ) ) ; TYPE_2 . METHOD_6 ( new TYPE_3 < TYPE_4 . Account > ( this ) { protected void METHOD_7 ( final TYPE_4 . Account result ) { display ( result ) ; } } ) ; } 
public boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) . METHOD_2 ( ) ) ) || ( METHOD_4 ( ) . METHOD_2 ( ) ) ) || ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( METHOD_3 ( ) . METHOD_1 ( ) ) ) && ( ! ( METHOD_8 ( db ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 != null ) { VAR_1 . close ( ) ; } for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 != VAR_1 ) { VAR_3 . close ( ) ; } } } 
private TYPE_1 METHOD_1 ( java.lang.String name , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 { java.lang.String VAR_3 = VAR_1 . METHOD_2 ( ) . toString ( ) ; if ( TYPE_5 . METHOD_3 ( VAR_3 ) ) { return METHOD_4 ( name , VAR_1 , VAR_2 ) ; } else if ( VAR_4 . METHOD_5 ( VAR_1 ) ) { return METHOD_6 ( VAR_1 , VAR_2 ) ; } else { throw new TYPE_4 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ) ; } } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 ; try { VAR_1 = TYPE_2 . METHOD_2 ( ) ; } catch ( java.io.IOException e ) { if ( ( e instanceof TYPE_3 ) && ( TYPE_4 . equals ( e . getMessage ( ) ) ) ) { return null ; } else { TYPE_5 VAR_2 = new TYPE_5 ( STRING_1 ) ; VAR_2 . METHOD_3 ( e ) ; throw VAR_2 ; } } return VAR_1 ; } 
public TYPE_1 < TYPE_2 > get ( ) { TYPE_3 < TYPE_2 > m = new TYPE_3 < TYPE_2 > ( ) ; java.util.List < TYPE_4 < TYPE_2 > > VAR_1 = VAR_2 . METHOD_1 ( type ) ; if ( VAR_1 != null ) { for ( TYPE_4 < TYPE_2 > b : VAR_1 ) { if ( ( b . getKey ( ) . METHOD_2 ( ) ) != null ) { m . put ( STRING_1 , b . getKey ( ) , b . METHOD_3 ( ) ) ; } } } return m ; } 
protected void METHOD_1 ( TYPE_1 req , TYPE_2 . HttpServletResponse res ) throws java.io.IOException , TYPE_3 { if ( ( VAR_1 ) == null ) { TYPE_4 . METHOD_2 ( res ) ; res . METHOD_3 ( VAR_2 ) ; return ; } VAR_1 . METHOD_4 ( req , res , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_2 ) . to ( VAR_4 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_10 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 . METHOD_2 ( ) ) { return VAR_2 . METHOD_3 ( getRefName ( ) ) ; } else { return new TYPE_1 ( VAR_2 , getRefName ( ) , VAR_4 ) ; } } 
private java.lang.String METHOD_1 ( ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; b . append ( ( ( STRING_1 + ( config . size ( ) ) ) + STRING_2 ) ) ; for ( TYPE_1 c : config ) { b . append ( STRING_3 ) ; b . append ( c . toString ( ) ) ; b . append ( STRING_4 ) ; } b . append ( STRING_5 ) ; return b . toString ( ) ; } 
public void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { if ( ( VAR_2 . contains ( VAR_3 ) ) || ( VAR_2 . contains ( VAR_4 ) ) ) { commands . add ( VAR_5 new TYPE_1 ( ) ) ; if ( ( ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( TYPE_3 . METHOD_4 ( ) ) ) { commands . add ( VAR_5 new TYPE_4 ( METHOD_5 ( ) ) ) ; } } } } 
private < TYPE_1 > boolean METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 , VAR_1 . METHOD_3 ( ) ) ; if ( VAR_3 != null ) { return VAR_1 . METHOD_4 ( VAR_3 ) ; } else { VAR_5 . error ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( VAR_1 . METHOD_3 ( ) . getName ( ) ) ) ) ; return false ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( util . METHOD_3 ( ) , VAR_1 , VAR_2 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , STRING_2 ) ; TYPE_1 . METHOD_2 ( VAR_3 , VAR_5 , VAR_4 , STRING_3 ) ; TYPE_2 u = util . user ( VAR_3 ) ; METHOD_4 ( STRING_4 , ( ( u . METHOD_5 ( ) ) == ( VAR_6 ) ) ) ; METHOD_4 ( STRING_5 , u . METHOD_6 ( STRING_6 ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 VAR_2 = VAR_3 . set ( VAR_4 ) ; java.lang.String message ; try { message = VAR_5 . get ( ) . getMessage ( ) ; } finally { VAR_3 . set ( VAR_2 ) ; } err . METHOD_2 ( TYPE_3 . METHOD_3 ( message . toString ( ) ) ) ; err . METHOD_4 ( ) ; in . close ( ) ; out . close ( ) ; err . close ( ) ; VAR_6 . METHOD_5 ( INT_1 ) ; } 
private static TYPE_1 < com.google.gerrit.server.query.change.ChangeData > METHOD_1 ( TYPE_2 args , java.lang.String label ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > r = TYPE_3 . METHOD_2 ( ( 2 * ( VAR_1 ) ) ) ; for ( int i = 1 ; i <= ( VAR_1 ) ; i ++ ) { r . add ( TYPE_4 . METHOD_3 ( args , label , i ) ) ; r . add ( TYPE_4 . METHOD_3 ( args , label , ( - i ) ) ) ; } return not ( METHOD_4 ( r ) ) ; } 
public final void METHOD_1 ( TYPE_1 p ) { VAR_1 = METHOD_2 ( ) ; VAR_2 = METHOD_3 ( ) ; VAR_3 = METHOD_4 ( ) ; VAR_4 = METHOD_5 ( ) ; VAR_5 = METHOD_6 ( ) ; VAR_6 = METHOD_7 ( ) ; VAR_7 = METHOD_8 ( ) ; VAR_8 = METHOD_9 ( ) ; VAR_9 = METHOD_10 ( ) ; VAR_10 = METHOD_11 ( ) ; VAR_11 = METHOD_12 ( ) ; VAR_12 = METHOD_13 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_3 ( query ( STRING_1 ) ) . changeId ) . isEqualTo ( r . getChangeId ( ) ) ; METHOD_4 ( user ) ; com.google.common.truth.Truth.assertThat ( query ( STRING_1 ) . isEmpty ( ) ) . METHOD_5 ( ) ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey name ) { try { return VAR_1 . METHOD_1 ( name ) ; } catch ( TYPE_1 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } 
public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM VAR_1 , org.ovirt.engine.core.common.businessentities.VM VAR_2 ) { java.lang.String VAR_3 = ( ( VAR_1 . METHOD_2 ( ) ) == null ) ? STRING_1 : VAR_1 . METHOD_2 ( ) ; java.lang.String VAR_4 = ( ( VAR_2 . METHOD_2 ( ) ) == null ) ? STRING_1 : VAR_2 . METHOD_2 ( ) ; return VAR_3 . METHOD_3 ( VAR_4 ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.common.businessentities.DiskImage VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( METHOD_2 ( ) . METHOD_6 ( ) ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_8 ( ) . get ( METHOD_2 ( ) . METHOD_9 ( ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) ; TYPE_2 . METHOD_8 ( ) . METHOD_12 ( VAR_2 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 ) , aQuery ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( false , VAR_2 ) ; cmd . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 . Guid class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( METHOD_3 ( ) . getId ( ) , METHOD_4 ( ) ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . getReturnValue ( ) ; METHOD_6 ( null , ( ( VAR_3 != null ) && ( VAR_3 . getSucceeded ( ) ) ) ) ; } } , null ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.common.businessentities.DiskImage VAR_1 ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_2 = METHOD_6 ( ) . METHOD_7 ( VAR_1 . getId ( ) ) ; if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { METHOD_8 ( ) . METHOD_3 ( VAR_1 . getId ( ) ) ; } } 
public boolean METHOD_1 ( final org.ovirt.engine.core.compat.Guid id ) { return METHOD_2 ( new TYPE_1 < java.lang.Boolean > ( ) { public java.lang.Boolean METHOD_3 ( ) { try { TYPE_2 VAR_1 = VAR_2 . METHOD_4 ( id . toString ( ) ) ; return VAR_1 != null ; } catch ( TYPE_3 VAR_3 ) { if ( ( VAR_3 . getStatus ( ) ) == ( VAR_4 ) ) { VAR_5 . METHOD_5 ( STRING_1 ) ; return false ; } else { VAR_5 . error ( STRING_2 ) ; throw VAR_3 ; } } } } ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < TYPE_1 . DiskImage > VAR_1 ) { for ( TYPE_1 . DiskImage disk : VAR_1 ) { disk . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) ; } METHOD_4 ( storageDomain . METHOD_5 ( ) , VAR_1 . get ( 0 ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 action ) { get ( ) ; TYPE_3 VAR_1 = new TYPE_3 ( ) ; VAR_1 . METHOD_2 ( id ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; if ( ( action != null ) && ( action . METHOD_3 ( ) ) ) { VAR_2 = METHOD_4 ( action . METHOD_5 ( ) ) ; } TYPE_4 parameters = new TYPE_4 ( VAR_1 , VAR_2 ) ; return METHOD_6 ( VAR_4 , parameters ) ; } 
protected void METHOD_1 ( ) { if ( ! ( getParameters ( ) . METHOD_2 ( ) ) ) { METHOD_3 ( null ) ; } METHOD_4 ( ) ; if ( ( getVm ( ) ) != null ) { TYPE_1 . METHOD_5 ( getVm ( ) . getId ( ) ) ; METHOD_6 ( ) ; } else { METHOD_7 ( false ) ; VAR_1 . METHOD_8 ( STRING_1 ) ; } METHOD_9 ( true ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; dao . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 > VAR_6 = dao . METHOD_3 ( VAR_2 ) ; TYPE_2 . METHOD_4 ( VAR_6 ) ; TYPE_2 . METHOD_5 ( ( ( VAR_6 . size ( ) ) == 1 ) ) ; TYPE_1 VAR_7 = VAR_6 . get ( 0 ) ; TYPE_2 . assertEquals ( VAR_1 , VAR_7 ) ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , true , true , false , false , false , false , true , true , METHOD_4 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 model ) { switch ( ( ( TYPE_2 ) ( model ) ) . METHOD_2 ( ) ) { case VAR_2 : VAR_1 . METHOD_3 ( VAR_3 ) ; break ; case ERROR : VAR_1 . METHOD_3 ( VAR_4 ) ; break ; case NORMAL : VAR_1 . METHOD_3 ( VAR_5 ) ; break ; case VAR_6 : VAR_1 . METHOD_3 ( VAR_3 ) ; break ; default : VAR_1 . METHOD_3 ( VAR_7 ) ; break ; } } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 ) throws TYPE_1 , TYPE_2 { try ( final TYPE_3 client = METHOD_2 ( ) ) { METHOD_3 ( client , VAR_1 ) ; METHOD_4 ( client , VAR_2 , VAR_3 ) ; java.lang.String VAR_5 = METHOD_5 ( client ) ; return METHOD_6 ( METHOD_7 ( VAR_5 ) ) ; } } 
private java.lang.Boolean METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) ) ) { if ( ( TYPE_2 . getVm ( ) . METHOD_1 ( ) ) != null ) { return TYPE_2 . getVm ( ) . METHOD_1 ( ) ; } if ( ( TYPE_2 . METHOD_4 ( ) . METHOD_1 ( ) ) != null ) { return TYPE_2 . METHOD_4 ( ) . METHOD_1 ( ) ; } return TYPE_3 . getValue ( VAR_1 ) ; } return null ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( false , true ) ; TYPE_3 < java.lang.String > VAR_2 = new TYPE_3 < java.lang.String > ( ) { public java.lang.String getValue ( java.lang.String VAR_3 ) { return VAR_3 ; } } ; VAR_1 . addColumn ( VAR_2 , VAR_4 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 , true ) ; VAR_1 . METHOD_5 ( new TYPE_4 ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; validator = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( VAR_1 ) ) ; domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain . METHOD_5 ( VAR_2 ) ; domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( STRING_2 ) ) ; domain . METHOD_7 ( VAR_3 ) ; domain . METHOD_8 ( VAR_4 ) ; } 
protected void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . getStoragePoolId ( ) ) ; if ( ( VAR_1 . size ( ) ) >= ( VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) { METHOD_5 ( ) ; return ; } METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( true ) ; } 
private TYPE_1 . VdcActionParametersBase METHOD_1 ( TYPE_1 . VdcActionType VAR_1 ) { TYPE_1 . VdcActionParametersBase VAR_2 = METHOD_2 ( VAR_1 , getParameters ( ) ) ; if ( ( ( VAR_2 . METHOD_3 ( ) ) == null ) && ( ( TYPE_2 . METHOD_4 ( ) ) != null ) ) { VAR_2 . METHOD_5 ( TYPE_2 . METHOD_4 ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; try { VAR_1 . METHOD_4 ( ) ; ( ( TYPE_1 ) ( resource ) ) . METHOD_5 ( new TYPE_2 ( ) ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_3 VAR_2 ) { METHOD_7 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = VAR_2 . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) , vm , null , org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) ; TYPE_1 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) ; TYPE_1 . METHOD_4 ( METHOD_7 ( ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) ; } 
protected java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 VAR_4 = METHOD_2 ( VAR_2 ) ; if ( VAR_4 != null ) { for ( TYPE_1 storageDomain : VAR_1 ) { if ( ! ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_4 . METHOD_3 ( ) ) ) . METHOD_4 ( ) . METHOD_5 ( storageDomain . getId ( ) ) ) ) { VAR_3 . add ( storageDomain ) ; } } } return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . add ( STRING_1 ) ; METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( 1 ) ; METHOD_6 ( 1 ) ; METHOD_7 ( 1 ) ; METHOD_8 ( 1 ) ; VAR_2 . METHOD_9 ( ) ; TYPE_1 nic = resource . get ( ) ; METHOD_10 ( nic . METHOD_11 ( ) ) ; TYPE_2 . METHOD_12 ( nic , 1 ) ; METHOD_13 ( nic ) ; } finally { VAR_1 . METHOD_14 ( ) ; } } 
protected boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) == ( VAR_3 ) ) { return super . METHOD_1 ( VAR_1 , VAR_2 ) ; } else { return METHOD_3 ( VAR_4 ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . METHOD_2 ( VAR_3 ) ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; final boolean VAR_5 = VAR_6 . METHOD_4 ( VAR_7 , VAR_8 ) ; TYPE_2 . assertEquals ( VAR_1 , VAR_5 ) ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 type ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == type ) ) { return true ; } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . VM model = new TYPE_1 . VM ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 . List , new TYPE_2 ( VAR_3 . METHOD_4 ( ) ) ) ; if ( VAR_1 . getSucceeded ( ) ) { VAR_4 = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_3 > ) ( VAR_1 . getReturnValue ( ) ) ) ; METHOD_5 ( ) ; } else { METHOD_6 ( ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { if ( ! ( VAR_1 . getId ( ) . equals ( VAR_3 . getId ( ) ) ) ) { return true ; } } return false ; } 
public boolean METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ; METHOD_4 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( ) } ) ; return ( METHOD_2 ( ) . METHOD_5 ( ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ; } 
public static org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( int VAR_1 ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ; entity . setId ( VAR_2 [ VAR_1 ] ) ; entity . METHOD_2 ( VAR_3 [ VAR_1 ] ) ; entity . METHOD_3 ( VAR_4 ) ; entity . METHOD_4 ( VAR_5 ) ; entity = TYPE_1 . METHOD_5 ( entity , VAR_2 [ VAR_1 ] ) ; entity . METHOD_6 ( ) . METHOD_7 ( VAR_6 ) ; entity . METHOD_8 ( VAR_7 ) ; return entity ; } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( vm . getId ( ) , VAR_3 , TYPE_2 . getName ( ) ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { java.util.Map VAR_5 = new java.util.HashMap ( ) ; VAR_5 . put ( VAR_6 , VAR_4 . METHOD_3 ( ) . getValue ( ) ) ; VAR_5 . put ( VAR_7 , VAR_4 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_5 , VAR_4 , null ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { boolean VAR_3 = false ; try { java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_3 = METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_4 , VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_4 ) ; } finally { VAR_2 . METHOD_6 ( ) ; VAR_5 . METHOD_7 ( STRING_1 , VAR_1 . METHOD_4 ( ) , ( VAR_3 ? STRING_2 : STRING_3 ) , VAR_1 . METHOD_3 ( ) ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_1 ( ( ( METHOD_2 ( ) ) == null ? null : METHOD_2 ( ) . getValue ( ) ) , VAR_2 , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; return VAR_1 ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; command = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_7 ( ) ; return command ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) { log . error ( STRING_2 , this , VAR_1 . METHOD_2 ( ) ) ; log . METHOD_4 ( STRING_3 , VAR_1 ) ; } } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = true ; java.util.List < java.lang.String > VAR_2 = getReturnValue ( ) . METHOD_2 ( ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_1 > VAR_3 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ; VAR_1 = METHOD_3 ( VAR_3 ) ; if ( VAR_1 && ( getParameters ( ) . METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } return VAR_1 && ( METHOD_6 ( VAR_2 , VAR_3 ) ) ; } 
private java.lang.String METHOD_1 ( java.lang.Object obj ) { if ( obj instanceof org.ovirt.engine.core.common.businessentities.VM ) { return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . getName ( ) ; } if ( obj instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( obj ) ) . getName ( ) ; } throw new TYPE_2 ( ) ; } 
protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; setItems ( VAR_1 ) ; } } ) , getEntity ( ) . getId ( ) ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; METHOD_3 ( null ) ; METHOD_4 ( null ) ; org.mockito.Mockito.when ( VAR_1 . get ( command . getParameters ( ) . METHOD_5 ( ) ) ) . thenReturn ( null ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = METHOD_2 ( ) ; METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; try { VAR_2 . add ( model ) ; TYPE_2 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , METHOD_9 ( ) ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( METHOD_4 ( ) . getSelectedItem ( ) . getId ( ) , VAR_2 . getId ( ) ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ; } } ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { assert ( this . VAR_2 ) != null ; VAR_1 . METHOD_2 ( this . VAR_2 ) ; if ( this . VAR_2 . METHOD_3 ( ) ) { return ; } this . VAR_2 . METHOD_4 ( ) ; this . VAR_3 . METHOD_5 ( this , VAR_1 , this . VAR_2 . METHOD_6 ( ) ) ; this . VAR_2 = null ; this . VAR_4 . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { resource . METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , getEntity ( 0 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 VAR_5 = resource . list ( ) ; METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_7 ( ) . size ( ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_2 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_3 , new TYPE_3 ( ) ) ; TYPE_4 VAR_4 = ( ( TYPE_4 ) ( model ) ) ; VAR_4 . setItems ( VAR_3 ) ; } 
private void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { java.util.ArrayList < java.lang.String > VAR_3 = new java.util.ArrayList < > ( ) ; VAR_3 . add ( VAR_2 . name ( ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( 1 , null ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( 2 , null ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) ; TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_5 class , VAR_4 ) ; } 
public TYPE_1 map ( TYPE_2 entity ) { TYPE_1 VAR_1 = new TYPE_1 ( ) . addValue ( STRING_1 , entity . getId ( ) ) . addValue ( STRING_2 , entity . METHOD_1 ( ) ) . addValue ( STRING_3 , entity . METHOD_2 ( ) ) . addValue ( STRING_4 , entity . METHOD_3 ( ) ) . addValue ( STRING_5 , TYPE_3 . METHOD_4 ( entity . getStatus ( ) ) ) . addValue ( STRING_6 , entity . METHOD_5 ( ) ) ; return VAR_1 ; } 
private void METHOD_1 ( TYPE_1 . VdcActionParametersBase params ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) { params . METHOD_1 ( VAR_1 . get ( 0 ) ) ; } } 
public void METHOD_1 ( org.ovirt.engine.core.compat . Version VAR_1 , boolean VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 , org.ovirt.engine.core.compat.Guid VAR_4 ) { this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; VAR_5 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_6 , VAR_1 . toString ( ) ) ) ) ; METHOD_3 ( ) . setIsChangable ( METHOD_4 ( ) ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_4 ) ; } 
private static java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . network > METHOD_1 ( ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . network > map = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities . network > ( ) ; org.ovirt.engine.core.common.businessentities . network VAR_1 = new org.ovirt.engine.core.common.businessentities . network ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; map . put ( STRING_1 , VAR_1 ) ; return map ; } 
private void METHOD_1 ( ) { if ( TYPE_1 . getInstance ( ) . METHOD_2 ( ) ) { java.util.List < TYPE_2 < org.ovirt.engine.core.common.businessentities.StoragePool > > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) { getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.StoragePool > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) ; } } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( METHOD_4 ( ) . getEntity ( ) ) ) ; VAR_1 . METHOD_5 ( TYPE_2 . METHOD_3 ( METHOD_6 ( ) . getEntity ( ) ) ) ; VAR_1 . METHOD_7 ( TYPE_2 . METHOD_3 ( METHOD_8 ( ) . getEntity ( ) ) ) ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( ) { final TYPE_1 entity = new TYPE_1 ( ) ; entity . setId ( VAR_1 ) ; return new java.util.ArrayList < TYPE_1 > ( ) { private static final long VAR_2 = INT_1 ; { add ( entity ) ; } } ; } 
public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.network.Network network = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( getSelectedItem ( ) ) ) ; if ( ( getWindow ( ) ) != null ) { return ; } final TYPE_1 VAR_1 = new TYPE_2 ( network , this ) ; METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( ) . setItems ( TYPE_3 . METHOD_4 ( getEntity ( ) ) ) ; VAR_1 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) ; VAR_2 . add ( VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_2 ( VAR_5 ) ; METHOD_4 ( VAR_4 ) ; try { METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_4 VAR_6 ) { METHOD_7 ( VAR_6 , VAR_7 , VAR_4 ) ; } finally { VAR_2 . METHOD_8 ( ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( METHOD_4 ( ) . getSelectedItem ( ) . getId ( ) , VAR_2 . getId ( ) ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ; } } ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 model = resource . get ( ) ; assertEquals ( VAR_2 [ 0 ] , model . getId ( ) ) ; METHOD_7 ( model ) ; } 
private void METHOD_1 ( final org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( false ) ; VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . getStoragePoolId ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; METHOD_7 ( VAR_5 , VAR_3 , METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 model = new TYPE_1 ( ) ; model . METHOD_2 ( VAR_1 ) ; model . METHOD_3 ( VAR_2 ) ; model . setId ( TYPE_2 . toString ( ) ) ; TYPE_3 entity = TYPE_4 . map ( model , null ) ; TYPE_5 . METHOD_4 ( entity ) ; TYPE_5 . assertEquals ( entity . METHOD_5 ( ) , VAR_3 ) ; TYPE_5 . assertEquals ( entity . getModel ( ) , VAR_4 ) ; } 
public void METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < > ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_2 , false ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup VAR_1 = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; VAR_2 . add ( VAR_1 ) ; TYPE_1 . when ( VAR_3 . METHOD_2 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . Disk model = METHOD_2 ( ) ; model . METHOD_3 ( ) . METHOD_4 ( null ) ; METHOD_5 ( METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( ) ; try { VAR_2 . add ( model ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_9 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , METHOD_5 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { TYPE_1 . toString ( ) } , null ) ; VAR_3 . METHOD_6 ( ) ; try { resource . get ( ) ; METHOD_7 ( STRING_2 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_8 ( VAR_4 ) ; } } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; model . METHOD_1 ( model , TYPE_2 . METHOD_2 ( VAR_2 ) , VAR_1 , vm . METHOD_3 ( ) . getValue ( ) ) ; METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; TYPE_3 VAR_2 = METHOD_3 ( ) ; VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( METHOD_6 ( 0 , VAR_3 ) ) ) ; METHOD_7 ( true , VAR_2 ) ; TYPE_5 . METHOD_8 ( cmd . validate ( ) ) ; TYPE_5 . METHOD_9 ( cmd . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_6 . toString ( ) ) ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 validator = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . get ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ) ; return ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_1 template ) { if ( VAR_1 == null ) { if ( template == null ) { throw new TYPE_2 ( STRING_1 ) ; } else { return TYPE_3 . METHOD_1 ( template , null ) ; } } else { return TYPE_3 . METHOD_2 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; cmd . getVm ( ) . METHOD_4 ( VAR_1 ) ; METHOD_5 ( 2 ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_7 ( TYPE_1 . METHOD_8 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_5 ) ) ; TYPE_3 . METHOD_9 ( cmd , VAR_6 ) ; } 
private void METHOD_1 ( ) { TYPE_1 returnValue = new TYPE_1 ( ) ; returnValue . METHOD_2 ( true ) ; returnValue . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( returnValue ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) ; } 
private java.util.List < java.lang.Object > METHOD_1 ( ) { java.util.List < java.lang.Object > VAR_1 = new java.util.ArrayList < java.lang.Object > ( ( ( VAR_2 ) * 2 ) ) ; for ( int i = 0 ; i < ( ( VAR_2 ) * 2 ) ; i ++ ) { VAR_1 . add ( METHOD_2 ( i ) ) ; } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , new TYPE_2 ( ) ) ; } catch ( java.lang.Exception e ) { VAR_4 . METHOD_5 ( STRING_1 , VAR_2 . getId ( ) , VAR_2 . METHOD_6 ( ) , e ) ; } return null ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( true ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_3 , aQuery ) ; } 
public java.lang.Object METHOD_1 ( java.lang.Object obj , java.lang.Object VAR_1 ) { java.lang.Object returnValue = null ; try { returnValue = VAR_2 . METHOD_2 ( ) . METHOD_3 ( obj ) ; } catch ( java.lang.Exception e ) { VAR_3 . METHOD_4 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_5 ( ) ) ) + STRING_2 ) + ( obj . METHOD_6 ( ) . getName ( ) ) ) ) ; } return returnValue == null ? VAR_1 : returnValue ; } 
protected java.util.Map < java.lang.String , TYPE_1 < java.lang.String , java.lang.String > > METHOD_1 ( ) { if ( ! ( TYPE_2 . METHOD_2 ( TYPE_3 . getParameters ( ) . getVm ( ) . METHOD_3 ( ) ) ) ) { return TYPE_4 . METHOD_4 ( TYPE_3 . getParameters ( ) . getVm ( ) . METHOD_3 ( ) , VAR_1 ) ; } return null ; } 
private void METHOD_1 ( ) { TYPE_1 . getParameters ( ) . METHOD_2 ( new TYPE_2 ( ) ) ; boolean VAR_1 = ( METHOD_3 ( METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ; if ( ! VAR_1 ) { TYPE_1 . getVm ( ) . METHOD_6 ( 0 ) ; TYPE_1 . getVm ( ) . METHOD_7 ( 0 ) ; throw new TYPE_3 ( VAR_2 ) ; } TYPE_4 . METHOD_8 ( TYPE_1 . METHOD_9 ( ) , true ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; return ( ( ( super . METHOD_1 ( ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_6 ( ) ) ) ; } 
private static void METHOD_1 ( TYPE_1 command ) { final TYPE_2 dao = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; final TYPE_3 pool = new TYPE_3 ( ) ; pool . setId ( command . getParameters ( ) . getStoragePoolId ( ) ) ; org.mockito.Mockito.when ( dao . get ( TYPE_4 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( pool ) ; org.mockito.Mockito.doReturn ( dao ) . when ( command ) . METHOD_3 ( ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( nic . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( nic . METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( nic . METHOD_7 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_8 ( nic . METHOD_9 ( ) ) ; VAR_2 . METHOD_10 ( TYPE_3 . METHOD_11 ( VAR_1 ) ) ; return VAR_2 ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . network network = ( ( org.ovirt.engine.core.common.businessentities . network ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; boolean VAR_1 = ( ( METHOD_3 ( ) ) && ( network != null ) ) && ( ! ( network . getId ( ) . equals ( VAR_2 ) ) ) ; METHOD_4 ( ) . setIsChangable ( VAR_1 ) ; METHOD_5 ( ) . setIsChangable ( VAR_1 ) ; } 
public static TYPE_1 map ( TYPE_1 entity , TYPE_1 template ) { TYPE_1 model = ( template != null ) ? template : new TYPE_1 ( ) ; model . setId ( entity . METHOD_1 ( ) . toString ( ) ) ; model . METHOD_2 ( entity . METHOD_3 ( ) ) ; model . METHOD_4 ( entity . METHOD_5 ( ) ) ; return model ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.when ( command . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) ; } 
protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) ) ; VAR_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_6 ( ) ) ; getModel ( ) . setItems ( VAR_1 ) ; } 
private void METHOD_1 ( ) { if ( ( getWindow ( ) ) != null ) { return ; } TYPE_1 model = TYPE_2 . METHOD_2 ( getEntity ( ) , getEntity ( ) . getStoragePoolId ( ) , cluster . METHOD_3 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_4 ( ) ) ) , ( ( TYPE_3 ) ( getSelectedItem ( ) ) ) , this ) ; METHOD_5 ( model ) ; } 
protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.Map < java.lang.String , java.lang.Object > parameters = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; if ( vm != null ) { parameters . put ( VAR_1 . VM , vm ) ; } if ( ( cluster . METHOD_2 ( ) ) != null ) { parameters . METHOD_3 ( cluster . METHOD_2 ( ) ) ; } return parameters ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( VAR_2 class , VAR_1 . METHOD_4 ( ) , true ) ; } if ( VAR_1 . METHOD_5 ( ) ) { TYPE_2 . METHOD_3 ( VAR_3 class , VAR_1 . METHOD_6 ( ) , true ) ; } if ( VAR_1 . METHOD_7 ( ) ) { TYPE_2 . METHOD_3 ( VAR_4 class , VAR_1 . METHOD_8 ( ) , true ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 . METHOD_3 ( STRING_2 , VAR_1 ) ; TYPE_2 . assertEquals ( STRING_3 , ( - 1 ) , VAR_2 ) ; VAR_1 = TYPE_1 . METHOD_2 ( STRING_4 ) ; TYPE_2 . METHOD_4 ( STRING_5 , VAR_1 ) ; } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , TYPE_2 VAR_1 ) { TYPE_1 model = new TYPE_1 ( ) ; model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) ; model . METHOD_3 ( STRING_1 ) ; model . METHOD_4 ( vm ) ; model . METHOD_5 ( new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_2 , VAR_1 ) . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_6 ( ) ) . METHOD_7 ( true ) ) ; model . METHOD_8 ( ) ; return model ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , false ) ; TYPE_1 VAR_3 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; VAR_2 . METHOD_4 ( ) ; TYPE_2 VAR_4 = VAR_2 . METHOD_5 ( ) ; METHOD_6 ( false , VAR_4 , 1 , VAR_1 ) ; METHOD_7 ( 1 , VAR_1 ) ; METHOD_8 ( TYPE_3 . METHOD_9 ( VAR_2 ) , 1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; } 
protected boolean METHOD_1 ( ) { if ( ! ( super . METHOD_1 ( ) ) ) { return false ; } if ( ( METHOD_2 ( ) . getStatus ( ) ) == ( VAR_1 ) ) { METHOD_3 ( VAR_2 , METHOD_2 ( ) . METHOD_4 ( ) ) ; } return true ; } 
public boolean METHOD_1 ( ) { if ( VAR_1 ) { return ! ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) ) ) ; } else { return ! ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) ) ; } } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > list = new java.util.ArrayList < > ( ) ; if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( source ) ) ) { if ( ( template . getStatus ( ) ) == ( VAR_1 ) ) { list . add ( template ) ; } } TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; } return list ; } 
private TYPE_1 METHOD_1 ( TYPE_2 action , java.lang.String VAR_1 ) { action . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 ) ) ; action . METHOD_4 ( new TYPE_5 ( ) ) ; action . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; return TYPE_1 . METHOD_7 ( ) . entity ( action ) . METHOD_8 ( ) ; } 
public TYPE_1 . VdcActionParametersBase METHOD_1 ( final org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 ) { final TYPE_2 params = new TYPE_2 ( VAR_1 . getId ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; params . METHOD_4 ( true ) ; return params ; } 
void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } } 
public void METHOD_1 ( TYPE_1 map ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , map . METHOD_3 ( ) ) . addValue ( STRING_2 , map . METHOD_4 ( ) ) . addValue ( STRING_3 , map . METHOD_5 ( ) ) . addValue ( STRING_4 , map . METHOD_6 ( ) ) ; METHOD_7 ( ) . METHOD_8 ( STRING_5 , VAR_1 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } java.util.Map < java.lang.String , java.lang.Object > VAR_3 = TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) ; TYPE_3 . METHOD_5 ( VAR_3 ) . isEmpty ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_5 = TYPE_2 . METHOD_6 ( VAR_6 , VAR_2 , VAR_4 ) ; TYPE_3 . METHOD_5 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_8 ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 ) { if ( ( METHOD_2 ( ) ) < VAR_1 ) { throw new TYPE_2 ( VAR_2 ) ; } final java.util.List < TYPE_1 > result = new java.util.ArrayList < > ( VAR_1 ) ; int VAR_3 = VAR_1 ; while ( VAR_3 > 0 ) { final TYPE_3 VAR_4 = METHOD_3 ( ) ; final java.util.List < TYPE_1 > VAR_5 = VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_3 -= VAR_5 . size ( ) ; result . METHOD_5 ( VAR_5 ) ; } return result ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS host = context . host ; if ( ( host . METHOD_2 ( ) ) != null ) { TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; METHOD_4 ( ) ; } } , VAR_2 ) , host . METHOD_2 ( ) ) ; } else { METHOD_4 ( ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; int VAR_2 = 0 ; int VAR_3 = 0 ; for ( TYPE_1 VAR_4 : VAR_1 ) { if ( ( VAR_4 . getStatus ( ) ) == ( VAR_5 ) ) { VAR_2 ++ ; } else { VAR_3 ++ ; } } METHOD_1 ( VAR_1 . size ( ) ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( STRING_1 ) . when ( VAR_1 ) . METHOD_2 ( ) ; VAR_2 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , new TYPE_2 ( ) ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( VAR_5 . List class ) ) ; } 
private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { org.ovirt.engine.core.compat.Guid VAR_1 = METHOD_2 ( ) . getStoragePoolId ( ) ; if ( pool != null ) { pool . setId ( VAR_1 ) ; } TYPE_1 VAR_2 = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 , METHOD_4 ( ) . getId ( ) , METHOD_2 ( ) . METHOD_5 ( ) ) ) . thenReturn ( pool ) ; org.mockito.Mockito.when ( METHOD_6 ( ) . METHOD_7 ( ) ) . thenReturn ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ) ; TYPE_1 . METHOD_2 ( ( ( VAR_3 . METHOD_6 ( ) . size ( ) ) == 2 ) ) ; TYPE_2 . METHOD_3 ( ) . METHOD_7 ( ) ; TYPE_1 . METHOD_2 ( VAR_3 . METHOD_6 ( ) . isEmpty ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; } 
protected java.lang.Object runQuery ( TYPE_1 . VdcQueryType VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { METHOD_1 ( VAR_2 , VAR_3 ) ; TYPE_1 . VdcQueryReturnValue result = VAR_4 . runQuery ( VAR_1 , VAR_2 ) ; return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; } 
static TYPE_1 . Disk getModel ( int VAR_1 ) { TYPE_1 . Disk model = new TYPE_1 . Disk ( ) ; model . METHOD_1 ( ( INT_1 * INT_2 ) ) ; model . METHOD_2 ( TYPE_2 . value ( ) ) ; model . METHOD_3 ( TYPE_3 . value ( ) ) ; model . METHOD_4 ( true ) ; model . METHOD_5 ( false ) ; model . METHOD_6 ( false ) ; model . METHOD_7 ( false ) ; model . METHOD_8 ( true ) ; return model ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_1 == null ) { return ; } TYPE_4 status = TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_6 VAR_3 = METHOD_3 ( status ) ; java.lang.String VAR_4 = METHOD_4 ( status ) ; TYPE_7 VAR_5 = TYPE_8 . METHOD_5 ( TYPE_9 . METHOD_6 ( VAR_3 ) . METHOD_7 ( ) ) ; VAR_2 . append ( VAR_6 . METHOD_8 ( VAR_5 , VAR_4 ) ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( ( getParameters ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) { return METHOD_4 ( ) . METHOD_5 ( ) ; } return METHOD_4 ( ) . METHOD_6 ( ) ; } return METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { if ( ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_3 ( ) ) != null ) ) && ( ( METHOD_4 ( ) ) != null ) ) { VAR_1 = ( ( ( METHOD_5 ( ) ) * ( METHOD_3 ( ) ) ) / FLOAT_1 ) - ( ( METHOD_2 ( ) ) + ( METHOD_4 ( ) ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 parameters = new TYPE_1 ( METHOD_2 ( 2 , true ) , true ) ; TYPE_2 command = new TYPE_2 ( parameters ) ; cmd = org.mockito.Mockito . METHOD_3 ( command ) ; METHOD_4 ( cmd ) ; TYPE_3 . METHOD_5 ( cmd , VAR_1 ) ; } 
public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = null ; try { VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_3 VAR_4 ) { VAR_5 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 . METHOD_3 ( VAR_6 ) ) ; } finally { try { if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) ; } } catch ( TYPE_3 VAR_4 ) { VAR_5 . error ( STRING_2 , VAR_4 ) ; } } return this ; } 
public void METHOD_1 ( ) { TYPE_1 . assertEquals ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( STRING_1 ) ) ; TYPE_1 . METHOD_3 ( STRING_3 , VAR_1 . METHOD_2 ( STRING_4 ) ) ; TYPE_1 . METHOD_3 ( STRING_5 , VAR_1 . METHOD_2 ( null ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; return VAR_1 . isEmpty ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( ( STRING_1 + name ) , VAR_3 . StorageDomain ) , aQuery ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; final org.ovirt.engine.core.compat.Guid VAR_4 = VAR_1 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_4 ) ; final org.ovirt.engine.core.compat.Guid VAR_5 = VAR_1 . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_5 ) ; } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; for ( TYPE_2 < org.ovirt.engine.core.compat.Guid , TYPE_3 < TYPE_4 . VdcActionType , TYPE_4 . VdcActionParametersBase > > VAR_1 : VAR_2 . METHOD_3 ( ) ) { TYPE_5 < ? > command = TYPE_6 . METHOD_4 ( log ) . METHOD_5 ( VAR_1 . getValue ( ) . METHOD_6 ( ) , VAR_1 . getValue ( ) . METHOD_7 ( ) ) ; command . METHOD_8 ( ) ; VAR_3 . put ( VAR_1 . METHOD_9 ( ) , command ) ; } return null ; } 
public void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; cmd = org.mockito.Mockito . METHOD_3 ( new TYPE_2 < TYPE_1 > ( params ) { protected void METHOD_4 ( ) { } protected void METHOD_5 ( ) { } protected void METHOD_6 ( ) { } protected void METHOD_7 ( TYPE_3 parameters ) { } } ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_8 ( ) ; TYPE_4 . getInstance ( ) . METHOD_9 ( VAR_2 class , VAR_3 ) ; } 
public static TYPE_1 map ( TYPE_2 action , TYPE_1 VAR_1 ) { switch ( action ) { case VAR_2 : return VAR_3 ; case VAR_4 : return VAR_5 ; case VAR_6 : return VAR_7 ; case VAR_8 : return VAR_9 ; case VAR_10 : return VAR_11 ; default : return null ; } } 
private void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { return ; } if ( ! ( validate ( ) ) ) { return ; } METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_1 , getParameters ( ) , new TYPE_2 ( ) { public void METHOD_6 ( TYPE_3 result ) { METHOD_7 ( ) ; METHOD_8 ( ) ; } } , this ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ; return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . getVm ( ) . METHOD_2 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_7 ( ) ) ) ; } 
private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; } 
private java.lang.String METHOD_1 ( java.lang.Object obj ) { if ( obj instanceof org.ovirt.engine.core.common.businessentities.VM ) { return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . METHOD_2 ( ) ; } if ( obj instanceof TYPE_1 ) { return ( ( TYPE_1 ) ( obj ) ) . METHOD_3 ( ) ; } throw new TYPE_2 ( ) ; } 
private org.ovirt.engine.core.compat.Guid METHOD_1 ( boolean VAR_1 , boolean VAR_2 ) { TYPE_1 . DiskImage disk = new TYPE_1 . DiskImage ( ) ; org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; disk . setId ( VAR_3 ) ; disk . METHOD_3 ( VAR_1 ) ; VAR_4 . add ( disk ) ; VAR_5 . add ( METHOD_4 ( VAR_3 , VAR_2 ) ) ; return VAR_3 ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; METHOD_1 ( ( ( ( ( java.util.List ) ( METHOD_2 ( ) ) ) . size ( ) ) == 0 ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; } } 
protected boolean validate ( ) { if ( ( TYPE_1 . getVm ( ) ) == null ) { return METHOD_1 ( VAR_1 ) ; } if ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_2 ) ) { return TYPE_1 . METHOD_2 ( ) ; } if ( ! ( TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) ) ) { return METHOD_1 ( VAR_3 ) ; } return true ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . getStatus ( ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( vds ) . getStatus ( ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_1 . getName ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_6 ( false ) ; dao . METHOD_7 ( VAR_1 ) ; TYPE_1 result = dao . get ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_8 ( result ) ; TYPE_2 . assertEquals ( VAR_1 , result ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 < TYPE_3 > > VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = new java.util.ArrayList < TYPE_3 > ( VAR_1 . METHOD_2 ( ) ) ; java.util.List < TYPE_3 > VAR_4 = VAR_3 ; for ( TYPE_2 < TYPE_3 > VAR_5 : VAR_2 ) { VAR_4 = TYPE_4 . METHOD_3 ( VAR_4 , VAR_5 ) ; } if ( ( VAR_4 . size ( ) ) > 0 ) { return true ; } return false ; } 
private java.lang.String METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( VAR_1 == null ) { return null ; } return VAR_1 . METHOD_2 ( ) . map ( TYPE_2 : : METHOD_3 ) . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( STRING_1 ) ) ; } 
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getSelectedItem ( ) ) ) ) ; METHOD_3 ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( VAR_1 . METHOD_4 ( ) ) ) ; METHOD_3 ( ) . setSelectedItem ( TYPE_1 . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ) ; } 
private void METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network network : VAR_2 ) { VAR_3 . put ( network . METHOD_2 ( ) , new TYPE_2 ( network ) ) ; VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) ; } METHOD_3 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } } 
private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , boolean VAR_2 ) { org.mockito.Mockito . METHOD_2 ( frontend , org.mockito.Mockito . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . METHOD_6 ( VAR_4 class ) , VAR_5 . METHOD_7 ( ) , TYPE_2 . METHOD_5 ( false ) , TYPE_2 . METHOD_5 ( VAR_2 ) ) ; return VAR_5 . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( ) ; java.lang.String VAR_1 = VAR_2 . METHOD_3 ( vm , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; final org.ovirt.engine.core.common.businessentities.VM VAR_3 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; VAR_2 . METHOD_5 ( VAR_1 , VAR_3 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) , new java.util.ArrayList < TYPE_3 > ( ) ) ; METHOD_6 ( vm , VAR_3 , vm . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; java.lang.String VAR_3 = STRING_1 ; TYPE_1 . METHOD_3 ( VAR_1 , VAR_3 ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; dao . METHOD_4 ( VAR_2 . getId ( ) , VAR_3 , false ) ; TYPE_1 . assertEquals ( VAR_3 , dao . get ( VAR_2 . getId ( ) ) . METHOD_2 ( ) ) ; } 
private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( ) . METHOD_4 ( new TYPE_1 ( ) { public void METHOD_6 ( TYPE_2 VAR_3 , java.lang.Object sender , TYPE_3 args ) { user . METHOD_7 ( ) ; } } ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_8 ( METHOD_9 ( ) ) ; TYPE_4 . getInstance ( ) . METHOD_10 ( new TYPE_5 ( TYPE_6 . METHOD_11 ( ) ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 . VM , VAR_1 ) ) ; VAR_2 . METHOD_5 ( VAR_2 ) ; VAR_2 . METHOD_6 ( VAR_4 ) ; TYPE_4 returnValue = METHOD_7 ( VAR_4 , VAR_2 ) ; if ( returnValue . getSucceeded ( ) ) { METHOD_8 ( returnValue . METHOD_9 ( ) ) ; } } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) return true ; if ( obj == null ) return false ; if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) return false ; TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; if ( ( length ) != ( other . length ) ) return false ; if ( ( VAR_1 ) != ( VAR_2 ) ) return false ; return true ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
java.lang.String METHOD_1 ( final TYPE_1 VAR_1 , final java.lang.String VAR_2 ) { java.lang.String result = null ; java.lang.String VAR_3 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) , ( VAR_2 == null ? STRING_1 : VAR_2 ) ) . toString ( ) ; if ( ( VAR_2 != null ) && ( TYPE_3 . METHOD_5 ( VAR_3 ) ) ) { result = VAR_3 ; } else { VAR_4 . error ( ( ( STRING_2 + VAR_3 ) + STRING_3 ) ) ; } return result ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , null ) ; VAR_1 . METHOD_3 ( false ) ; cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) ) ) ; METHOD_6 ( cmd , VAR_4 ) ; TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { disk . METHOD_2 ( STRING_1 ) ; disk . METHOD_3 ( STRING_2 ) ; METHOD_4 ( disk , TYPE_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( STRING_1 ) ) , TYPE_1 . METHOD_7 ( TYPE_1 . METHOD_6 ( STRING_2 ) ) , TYPE_1 . METHOD_8 ( INT_1 ) ) ; TYPE_1 . METHOD_9 ( disk ) ; } 
public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; } 
public void METHOD_1 ( ) throws TYPE_1 { java.lang.String action = args . get ( VAR_1 ) ; if ( TYPE_2 . equals ( action ) ) { METHOD_2 ( ) ; } else if ( TYPE_3 . equals ( action ) ) { METHOD_3 ( ) ; } else if ( TYPE_4 . equals ( action ) ) { METHOD_4 ( ) ; } else if ( TYPE_5 . equals ( action ) ) { validate ( ) ; } else if ( TYPE_6 . equals ( action ) ) { METHOD_5 ( ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; } 
public static boolean METHOD_1 ( TYPE_1 < TYPE_2 . DiskImage > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { for ( TYPE_2 . DiskImage image : VAR_1 ) { TYPE_2 . DiskImage VAR_3 = TYPE_3 . METHOD_2 ( VAR_2 , image ) ; if ( VAR_3 == null ) { return false ; } } return true ; } 
private void METHOD_1 ( ) { METHOD_2 ( ) ; java.lang.Boolean VAR_1 = ( ! ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_3 ( ) . getEntity ( ) ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; METHOD_8 ( ) ; METHOD_9 ( ) . METHOD_7 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; } 
void METHOD_1 ( final TYPE_1 < ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel > VAR_1 ) { VAR_1 . getModel ( ) . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 VAR_2 , java.lang.Object sender , TYPE_4 args ) { TYPE_5 VAR_3 = ( ( TYPE_5 ) ( args ) ) ; if ( STRING_1 . equals ( VAR_4 ) ) { boolean VAR_5 = VAR_1 . getModel ( ) . METHOD_5 ( ) ; METHOD_6 ( VAR_5 ) ; } } } ) ; } 
protected static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { boolean returnValue = true ; java.util.ArrayList < java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > ( ) ; if ( TYPE_1 . METHOD_2 ( vmId , VAR_1 ) ) { returnValue = false ; } if ( returnValue ) { if ( ! ( TYPE_1 . METHOD_3 ( vmId , VAR_1 ) ) ) { returnValue = false ; } } return returnValue ; } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( getParameters ( ) . METHOD_4 ( ) ) ; METHOD_5 ( getParameters ( ) . METHOD_4 ( ) ) ; METHOD_6 ( true ) ; METHOD_7 ( METHOD_8 ( ) ) ; METHOD_9 ( ) . METHOD_10 ( ) ; return null ; } 
public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 parameters ) { final TYPE_1 < TYPE_2 > command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters ) ) ; org.mockito.Mockito.when ( command . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( ) ) . thenReturn ( VAR_4 ) ; command . METHOD_7 ( ) ; return command ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; } 
protected java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > METHOD_1 ( boolean VAR_1 ) { java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > VAR_2 = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > ( ) ; if ( VAR_1 ) { return VAR_2 ; } for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_2 . put ( getEntity ( i ) , new TYPE_1 ( ) ) ; } return VAR_2 ; } 
private void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_3 ( ) ; VAR_4 = org.mockito.Mockito . METHOD_2 ( VAR_5 class ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_3 ) . METHOD_4 ( ) ; VAR_6 = org.mockito.Mockito . METHOD_2 ( VAR_7 class ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_3 ) . METHOD_5 ( ) ; org.mockito.Mockito.when ( VAR_6 . get ( VAR_8 ) ) . thenReturn ( VAR_9 ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 model = ( ( TYPE_1 ) ( getWindow ( ) ) ) ; if ( ! ( model . validate ( ) ) ) { return ; } TYPE_2 . VdcActionParametersBase VAR_1 = new TYPE_2 . VdcActionParametersBase ( ) ; TYPE_3 tempVar = new TYPE_3 ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getSelectedItem ( ) ) ) . getId ( ) ) ; tempVar . METHOD_2 ( true ) ; VAR_1 = tempVar ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 , VAR_1 ) ; METHOD_4 ( ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( TYPE_3 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 < java.lang.String > METHOD_7 ( VAR_2 ) ) ) ; TYPE_4 . METHOD_2 ( TYPE_1 . METHOD_8 ( ) ) ; TYPE_5 VAR_3 = VAR_4 ; TYPE_6 . getInstance ( ) . METHOD_9 ( VAR_5 class , VAR_3 ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_10 ( VAR_3 . METHOD_11 ( ) ) ; } 
public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { if ( ( VAR_1 ) || ( ! ( VAR_2 ) ) ) { VAR_3 . METHOD_2 ( ) ; } else { java.lang.String [ ] VAR_4 = ( ( java.lang.String [ ] ) ( VAR_3 . METHOD_3 ( VAR_5 ) ) ) ; VAR_6 . METHOD_4 ( VAR_7 , STRING_1 ) ; for ( java.lang.String VAR_8 : VAR_4 ) { VAR_6 . METHOD_4 ( VAR_7 , VAR_8 ) ; } } return null ; } 
protected void METHOD_1 ( ) { TYPE_1 . getParameters ( ) . METHOD_2 ( ) . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ; METHOD_6 ( ) ; TYPE_1 . getReturnValue ( ) . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) ; TYPE_1 . METHOD_8 ( true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_3 ) ) . when ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . METHOD_6 ( ) ) ; org.mockito.Mockito . METHOD_7 ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 response , final TYPE_3 VAR_2 ) throws TYPE_4 , TYPE_5 { TYPE_6 VAR_3 = METHOD_2 ( ( ( TYPE_7 ) ( VAR_1 ) ) ) ; VAR_1 . METHOD_3 ( VAR_4 , VAR_3 ) ; METHOD_4 ( ( ( TYPE_8 ) ( response ) ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) ; VAR_2 . METHOD_1 ( VAR_1 , response ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 . getId ( ) , VAR_1 . getName ( ) , STRING_4 ) ; TYPE_4 . METHOD_4 ( METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_3 ) , TYPE_5 . METHOD_7 ( ) ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface , java.lang.Object [ ] VAR_1 ) { vds . METHOD_2 ( ) . add ( iface ) ; if ( VAR_1 != null ) { for ( java.lang.Object name : VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_2 : vds . METHOD_2 ( ) ) { if ( VAR_2 . getName ( ) . equals ( name . toString ( ) ) ) { VAR_2 . METHOD_3 ( iface . getName ( ) ) ; } } } } } 
protected boolean METHOD_1 ( ) { if ( ( ! ( super . METHOD_1 ( ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ) { return false ; } VAR_1 = TYPE_1 . METHOD_3 ( ) . get ( TYPE_1 . METHOD_4 ( ) . getId ( ) ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; return METHOD_7 ( ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 parameters = new TYPE_1 ( TYPE_2 . getVm ( ) . getId ( ) , VAR_1 ) ; parameters . METHOD_2 ( false ) ; parameters . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; parameters . METHOD_5 ( TYPE_2 . getParameters ( ) ) ; parameters . METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_7 ( ) ) ; parameters . METHOD_8 ( VAR_2 ) ; return parameters ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; TYPE_2 VAR_3 = ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_4 = new java.util.ArrayList < > ( ) ; TYPE_4 VAR_5 = VAR_3 . METHOD_1 ( ) ; while ( VAR_5 . METHOD_2 ( ) ) { VAR_4 . add ( ( ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) ( VAR_5 . METHOD_3 ( ) ) ) ) ; } VAR_2 . METHOD_4 ( VAR_4 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; for ( java.lang.String VAR_3 : TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_4 = VAR_2 . get ( VAR_3 ) ; VAR_4 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ; } } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( TYPE_1 model ) { if ( METHOD_2 ( ) ) { return getEntity ( VAR_1 . VM class , VAR_2 , new TYPE_2 ( METHOD_3 ( model . getId ( ) ) ) , model . getId ( ) ) ; } return getEntity ( VAR_1 . VM class , VAR_3 . VM , ( STRING_1 + ( model . getName ( ) ) ) ) ; } 
private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String name , java.lang.String value ) { VAR_1 . METHOD_2 ( VAR_3 , STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_3 , STRING_2 ) ; VAR_1 . METHOD_2 ( VAR_4 , VAR_2 ) ; VAR_1 . METHOD_3 ( name , value ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_4 ( ) ; } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 < TYPE_2 > ( ) ) ; VAR_2 = new TYPE_4 ( VAR_3 ) ; VAR_4 = new TYPE_4 ( VAR_3 ) ; VAR_5 = new TYPE_5 < org.ovirt.engine.core.common.businessentities.VDS > ( new TYPE_6 < org.ovirt.engine.core.common.businessentities.VDS > ( ) { public java.lang.String METHOD_2 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return vds . METHOD_3 ( ) ; } } ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 . Disk > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( new TYPE_1 . DiskImage ( ) ) ; TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , VAR_1 , null ) , true , null ) ; } 
public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; } 
private void METHOD_1 ( ) { java.lang.String [ ] VAR_1 = this . METHOD_2 ( ) ; this . VAR_2 = new java.util.ArrayList < > ( ) ; for ( java.lang.String id : VAR_1 ) { if ( ! ( TYPE_1 . equals ( id ) ) ) { VAR_2 . add ( id ) ; } } } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ) ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( TYPE_3 < TYPE_1 > ) ( returnValue ) ) ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_4 ( ) . setItems ( VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , boolean VAR_2 , boolean VAR_3 , boolean VAR_4 ) { TYPE_1 action = null ; if ( VAR_2 ) { action = VAR_5 ; } else if ( VAR_3 ) { action = VAR_6 ; } else if ( VAR_4 ) { action = VAR_7 ; } return action ; } 
protected void METHOD_1 ( ) { boolean VAR_1 = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . add ( VAR_3 , java.lang.Boolean . toString ( VAR_1 ) ) ; int VAR_4 = TYPE_1 . getParameters ( ) . METHOD_3 ( ) . getValue ( ) ; VAR_5 = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 , VAR_2 ) ; TYPE_1 . METHOD_6 ( ) ; METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_6 ) ) ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; } 
public TYPE_1 . ValidationResult METHOD_1 ( ) { TYPE_1 . ValidationResult VAR_1 = METHOD_2 ( vm ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { return VAR_1 ; } VAR_1 = METHOD_4 ( vm , METHOD_5 ( ) , METHOD_6 ( ) ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { return VAR_1 ; } VAR_1 = METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( ) ) ; if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { return VAR_1 ; } return VAR_2 ; } 
public TYPE_1 . ValidationResult METHOD_1 ( java.lang.String value ) { TYPE_1 . ValidationResult result = new TYPE_1 . ValidationResult ( ) ; if ( ( value == null ) || ( TYPE_2 . METHOD_2 ( value ) ) ) { result . METHOD_3 ( false ) ; result . METHOD_4 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) ; } return result ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_1 returnValue ; if ( VAR_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) { returnValue = VAR_1 . get ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ; } else { VAR_1 . put ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) , new TYPE_1 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) ; returnValue = VAR_1 . get ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ; } return returnValue ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; } 
protected void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_1 ) ) { TYPE_1 . METHOD_4 ( new java.util.ArrayList < TYPE_2 > ( ) ) ; } else { VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . getParameters ( ) . getStoragePoolId ( ) ) ; METHOD_4 ( TYPE_3 . getInstance ( ) . METHOD_6 ( VAR_3 , new TYPE_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) . getReturnValue ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; } 
private void METHOD_1 ( ) { if ( ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) { return ; } if ( TYPE_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) { VAR_2 . METHOD_6 ( METHOD_7 ( ) ) ; } else { VAR_2 . METHOD_6 ( null ) ; } VAR_2 . METHOD_8 ( ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { final java.util.List < TYPE_2 > VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) ; final java.util.List < TYPE_2 > VAR_3 = ( ( java.util.List < TYPE_2 > ) ( VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) ; for ( final TYPE_2 VAR_4 : VAR_3 ) { { TYPE_2 user = METHOD_4 ( VAR_4 , METHOD_3 ( ) . METHOD_5 ( ) ) ; VAR_2 . add ( user ) ; } } METHOD_6 ( VAR_2 ) ; METHOD_7 ( true ) ; } 
private void METHOD_1 ( java.lang.Object sender , TYPE_1 args ) { if ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) == true ) { METHOD_3 ( ) . setEntity ( true ) ; METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( true ) ; } } 
public java.util.Map METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { try { log . METHOD_2 ( STRING_1 , new java.lang.Object [ ] { VAR_2 , VAR_1 } ) ; final TYPE_1 VAR_3 = METHOD_3 ( VAR_2 ) ; final TYPE_2 . StorageDomain storageDomain = VAR_3 . METHOD_4 ( ) . get ( VAR_1 ) ; storageDomain . METHOD_5 ( VAR_4 ) ; METHOD_6 ( storageDomain ) ; return METHOD_7 ( ) ; } catch ( java.lang.Exception e ) { throw error ( e ) ; } } 
public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; } 
void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , TYPE_6 VAR_6 , TYPE_7 VAR_7 , TYPE_8 VAR_8 , TYPE_9 VAR_9 , TYPE_10 VAR_10 , TYPE_11 constants ) { VAR_11 . add ( new TYPE_12 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , constants ) ) ; } 
protected void METHOD_1 ( ) { frontend . METHOD_2 ( VAR_1 ) ; frontend . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; frontend . METHOD_5 ( ) . METHOD_4 ( new TYPE_1 ( ) { public void METHOD_6 ( TYPE_2 VAR_3 , java.lang.Object sender , TYPE_3 args ) { user . METHOD_7 ( ) ; } } ) ; frontend . METHOD_8 ( METHOD_9 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 , false , false , false ) ; METHOD_2 ( 1 , true , true , true ) ; METHOD_3 ( VAR_1 [ 1 ] ) ; METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) , 0 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; try { TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 , STRING_1 , null ) ; TYPE_4 . METHOD_3 ( VAR_3 ) ; } catch ( java.lang.Exception e ) { return ; } TYPE_5 . METHOD_4 ( STRING_2 ) ; } 
private java.lang.Integer METHOD_1 ( java.lang.Object entity ) { if ( entity instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( entity ) ) ; } if ( ! ( entity instanceof java.lang.String ) ) { return null ; } java.lang.String VAR_1 = ( ( java.lang.String ) ( entity ) ) ; try { return new java.lang.Integer ( VAR_1 ) ; } catch ( java.lang.Exception e ) { return null ; } } 
public java.util.ArrayList < java.lang.Integer > METHOD_1 ( ) { java.util.ArrayList < java.lang.Integer > VAR_1 = new java.util.ArrayList < > ( ) ; for ( int VAR_2 : METHOD_2 ( ) ) { if ( METHOD_3 ( VAR_2 ) . METHOD_4 ( STRING_1 ) ) { VAR_1 . add ( VAR_2 ) ; } } return VAR_1 ; } 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 . VdcActionType VAR_1 , java.util.ArrayList < TYPE_2 . VdcActionParametersBase > parameters , boolean VAR_2 , boolean VAR_3 ) { TYPE_1 returnValue = METHOD_2 ( VAR_1 ) ; if ( returnValue != null ) { java.util.ArrayList < TYPE_1 > list = new java.util.ArrayList < TYPE_1 > ( ) ; list . add ( returnValue ) ; return list ; } else { return METHOD_3 ( VAR_1 , parameters , false , VAR_2 , VAR_3 ) ; } } 
private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 > . TYPE_3 validator = new TYPE_3 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) , TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ; return ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , STRING_2 ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_3 = VAR_2 . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_3 . METHOD_6 ( ) , VAR_4 ) ; TYPE_2 . assertEquals ( 1 , VAR_3 . METHOD_7 ( ) . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_3 . METHOD_7 ( ) . get ( 0 ) . METHOD_8 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( final int VAR_1 , final int VAR_2 , final int VAR_3 , org.ovirt.engine.core.compat.Guid VAR_4 ) { org.ovirt.engine.core.common.businessentities.VM vm = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; METHOD_3 ( vm ) ; TYPE_1 < TYPE_2 > cmd = METHOD_4 ( vm , VAR_4 ) ; TYPE_3 . METHOD_5 ( cmd ) ; return cmd ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; TYPE_2 result = VAR_2 . METHOD_5 ( VAR_3 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_4 ) . METHOD_7 ( org.mockito.Mockito . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; TYPE_4 . METHOD_9 ( result . getSucceeded ( ) ) ; TYPE_4 . assertEquals ( result . METHOD_10 ( ) , VAR_1 ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( null ) ; TYPE_1 . getInstance ( ) . METHOD_3 ( METHOD_4 ( ) . getId ( ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String VAR_1 = METHOD_5 ( ) . getSelectedItem ( ) ; METHOD_5 ( ) . setItems ( ( ( TYPE_2 < java.lang.String > ) ( returnValue ) ) ) ; METHOD_5 ( ) . setSelectedItem ( VAR_1 ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; } } ) ) ; } 
private static void METHOD_1 ( TYPE_1 . AuditLogType VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_2 ( STRING_1 , VAR_2 ) ; VAR_4 . METHOD_2 ( STRING_2 , VAR_3 ) ; new TYPE_3 . AuditLogDirector ( ) . log ( VAR_4 , VAR_1 ) ; } 
private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; } else { java.util.Map < java.lang.String , java.lang.String > VAR_1 = TYPE_1 . METHOD_5 ( STRING_1 , TYPE_2 . METHOD_6 ( ) ) ; METHOD_7 ( VAR_2 , VAR_1 ) ; return false ; } return true ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( 1 ) ; java.util.List < TYPE_2 . Disk > VAR_3 = new java.util.ArrayList ( TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) , METHOD_4 ( ) . getId ( ) ) ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( VAR_5 , METHOD_6 ( ) . getId ( ) , false ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( METHOD_7 ( ) . METHOD_8 ( ) ) . thenReturn ( VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 rs , int VAR_1 ) throws TYPE_3 { TYPE_1 entity = new TYPE_1 ( ) ; entity . METHOD_2 ( VAR_2 . METHOD_1 ( rs , VAR_1 ) ) ; entity . METHOD_3 ( rs.getString ( STRING_1 ) ) ; entity . METHOD_4 ( new org.ovirt.engine.core.compat . Version ( rs.getString ( STRING_2 ) ) ) ; return entity ; } 
public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; } 
protected final TYPE_1 METHOD_1 ( TYPE_1 entity , int VAR_1 ) { TYPE_2 . METHOD_2 ( entity . getId ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) ; TYPE_2 . METHOD_2 ( entity . METHOD_5 ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) ; METHOD_1 ( entity ) ; return entity ; } 
static org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( entity . METHOD_3 ( ) ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ; TYPE_2 . METHOD_2 ( entity . METHOD_6 ( ) ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; TYPE_2 . METHOD_2 ( entity . METHOD_7 ( ) ) . METHOD_4 ( TYPE_3 . METHOD_7 ( ) ) . METHOD_5 ( ) ; return entity ; } 
public void METHOD_1 ( TYPE_1 < java.util.List < TYPE_2 > > VAR_1 ) { super . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , false ) ; super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; for ( java.util.List < TYPE_2 > value : VAR_1 ) { METHOD_6 ( value ) ; VAR_2 . add ( value . get ( 0 ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; try { resource . METHOD_4 ( new TYPE_1 ( ) ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_2 VAR_1 ) { METHOD_6 ( VAR_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; } } 
public void METHOD_1 ( java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; VAR_2 . METHOD_2 ( ) . setEntity ( null ) ; boolean VAR_3 = true ; for ( TYPE_2 VAR_4 : VAR_2 . METHOD_3 ( ) ) { if ( ! ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ) ) { VAR_3 = false ; break ; } } VAR_2 . METHOD_2 ( ) . setEntity ( VAR_3 ) ; } 
public void METHOD_1 ( final java.util.List < TYPE_1 . VdcActionType > VAR_1 , final java.util.List < TYPE_1 . VdcActionParametersBase > parameters , final java.util.List < TYPE_2 > VAR_2 , final TYPE_2 VAR_3 , final java.lang.Object VAR_4 ) { METHOD_1 ( VAR_1 , parameters , VAR_2 , VAR_3 , VAR_4 , false ) ; } 
protected void METHOD_1 ( TYPE_1 iface ) { if ( ( TYPE_2 . isEmpty ( iface . METHOD_2 ( ) ) ) && ( ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) > 0 ) ) { iface . METHOD_5 ( TYPE_3 . METHOD_3 ( ) . METHOD_6 ( ) ) ; } } 
protected java.util.List < TYPE_1 . Network > METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity ( VAR_1 . VDS class , VAR_2 , new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( METHOD_3 ( ) ) ) , STRING_1 ) ; return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( vds . METHOD_4 ( ) ) , STRING_2 ) ; } 
private void METHOD_1 ( java.lang.String id ) throws java.lang.Exception { TYPE_1 resource = new TYPE_1 ( id , new TYPE_2 ( VAR_1 ) ) ; resource . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; try { VAR_3 . METHOD_4 ( ) ; resource . get ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_4 ) { assertEquals ( INT_1 , VAR_4 . METHOD_6 ( ) . getStatus ( ) ) ; } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { java.util.ArrayList < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( java.lang.String VAR_2 : getEntity ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_1 , ( - 1 ) ) ) { VAR_1 . add ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ; } setItems ( VAR_1 ) ; } else { setItems ( null ) ; } } 
public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( STRING_1 . equals ( VAR_2 ) ) { METHOD_2 ( model ) ; } else if ( STRING_2 . equals ( VAR_2 ) ) { METHOD_3 ( model ) ; METHOD_4 ( model ) ; } } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_2 = new TYPE_3 ( ) ; VAR_3 = new TYPE_4 ( new TYPE_5 ( VAR_4 . METHOD_2 ( ) ) , VAR_2 ) ; VAR_3 . METHOD_3 ( TYPE_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ; } 
private TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( METHOD_2 ( ) . METHOD_3 ( ) ) ) { java.lang.String VAR_2 = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ; VAR_1 = new TYPE_2 ( VAR_4 < java.lang.String > METHOD_6 ( VAR_5 ) , METHOD_2 ( ) . METHOD_7 ( ) , METHOD_2 ( ) . METHOD_8 ( ) ) . METHOD_9 ( VAR_2 ) ; } return VAR_1 ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . get ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( storageDomain . METHOD_4 ( ) ) ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_5 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VDS vds = METHOD_7 ( ) . get ( VAR_1 ) ; return TYPE_3 . METHOD_8 ( storageDomain , vds , VAR_3 ) ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > source = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_2 , STRING_5 ) ) ; TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_5 , STRING_2 ) ) ; TYPE_2 . assertEquals ( null , TYPE_3 . METHOD_3 ( source , null ) ) ; } 
protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; } 
private boolean METHOD_1 ( ) { final TYPE_1 VAR_1 = METHOD_2 ( ) ; return ( ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ) ) ) && ( METHOD_1 ( VAR_1 ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; for ( org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 : VAR_1 ) { VAR_3 . METHOD_1 ( VAR_2 . getId ( ) . toString ( ) ) ; } if ( VAR_3 == null ) { return ; } METHOD_2 ( VAR_3 ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command , java.lang.Object ... parameters ) { if ( ( ( command == ( METHOD_2 ( ) ) ) && ( ( parameters . length ) > 0 ) ) && ( TYPE_1 . equals ( parameters [ 0 ] ) ) ) { this . VAR_1 = true ; super . METHOD_1 ( command , parameters ) ; this . VAR_1 = false ; } } 
public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; } 
protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; METHOD_3 ( VAR_1 ) ; TYPE_1 result = METHOD_4 ( VAR_1 , new TYPE_2 ( VAR_3 , VAR_4 class ) , VAR_5 , new TYPE_3 ( ) ) ; if ( result != null ) { TYPE_4 . METHOD_5 ( this , result ) ; } return result ; } 
private static < TYPE_1 extends TYPE_2 < org.ovirt.engine.core.compat.Guid > & TYPE_3 > boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid id , java.lang.String name , TYPE_4 < TYPE_1 > map ) { TYPE_1 VAR_1 = map . get ( id ) ; TYPE_1 VAR_2 = map . get ( name ) ; return ! ( TYPE_5 . equals ( VAR_1 , VAR_2 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( STRING_2 ) ) ; boolean result = dao . METHOD_5 ( VAR_1 ) ; TYPE_2 . METHOD_6 ( result ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ; org.mockito.Mockito . METHOD_4 ( VAR_4 ) . METHOD_3 ( VAR_1 , VAR_3 ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( ( ( TYPE_3 ) ( org.mockito.Mockito . any ( ) ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null , null ) . equals ( STRING_1 ) ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null , VAR_1 ) . equals ( STRING_1 ) ) ; TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null , VAR_2 ) . equals ( STRING_2 ) ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = VAR_2 . METHOD_2 ( ) ; java.lang.String version = VAR_2 . METHOD_3 ( ) ; if ( TYPE_1 . METHOD_4 ( version ) ) { TYPE_2 VAR_3 = METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_3 ) ; if ( VAR_3 == null ) { throw new TYPE_3 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } METHOD_7 ( VAR_3 . METHOD_2 ( ) ) ; } else { METHOD_8 ( VAR_1 , version ) ; } } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new TYPE_2 < TYPE_1 > ( ) ; for ( TYPE_3 VAR_2 : VAR_3 ) { if ( ( ! ( VAR_2 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_2 = METHOD_3 ( VAR_1 , vmId ) ; TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_5 ( VAR_2 ) ) == 0 ) ) ; TYPE_1 VAR_3 = METHOD_3 ( VAR_1 , vmId ) ; TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_5 ( VAR_3 ) ) == 0 ) ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = ( VAR_1 + VAR_2 ) + VAR_3 ; try { byte [ ] VAR_5 = TYPE_2 . getInstance ( VAR_6 ) . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; TYPE_1 VAR_7 = new TYPE_1 ( VAR_5 , true ) ; return VAR_7 ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( e ) ; } } 
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = null ; if ( ( ( ! ( getModel ( ) . METHOD_2 ( ) ) ) && ( getModel ( ) . METHOD_3 ( ) ) ) && ( ! ( getModel ( ) . METHOD_4 ( ) ) ) ) { VAR_1 = TYPE_2 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; } return VAR_1 ; } 
public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; } 
public java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters ) { java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > VAR_1 = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { VAR_1 . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId ( ) , METHOD_2 ( vds , parameters ) ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; } 
private boolean METHOD_1 ( java.util.List < java.lang.String > VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; TYPE_3 < java.lang.String > VAR_3 = new TYPE_4 < > ( VAR_1 ) ; for ( TYPE_1 VAR_4 : VAR_2 ) { if ( VAR_3 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) ) { VAR_3 . METHOD_8 ( VAR_4 . METHOD_7 ( ) ) ; } } return VAR_3 . isEmpty ( ) ; } 
private void METHOD_1 ( TYPE_1 command ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_3 ) . METHOD_7 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; int value = TYPE_2 . getInstance ( ) . METHOD_1 ( VAR_2 , VAR_1 ) ; org.ovirt.engine.ui.uicommonweb.models.EntityModel tempVar = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; tempVar . setEntity ( value ) ; METHOD_2 ( VAR_3 ) ; model . METHOD_3 ( ) . setSelectedItem ( tempVar ) ; METHOD_4 ( VAR_3 ) ; METHOD_5 ( VAR_3 ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; } 
public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , org.ovirt.engine.core.common.businessentities.VDS VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 ) { if ( cluster . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( STRING_1 , cluster . METHOD_4 ( ) ) ; return ; } TYPE_1 < TYPE_2 > VAR_4 = METHOD_5 ( cluster , VAR_1 , VAR_2 ) ; if ( VAR_4 != null ) { METHOD_6 ( VAR_2 , VAR_4 ) ; } } 
public boolean METHOD_1 ( TYPE_1 < ? > args , TYPE_2 VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( args , VAR_3 , new TYPE_3 < java.lang.String > ( ) { public void METHOD_4 ( java.lang.String result ) { VAR_4 this . VAR_5 = result ; VAR_4 this . VAR_6 = VAR_3 ; } } , VAR_1 ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; } 
public void setEntity ( java.lang.Object value ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( value ) ) ; VAR_1 = ( ( ( vds == null ) || ( ( getEntity ( ) ) == null ) ) || ( ! ( vds . getId ( ) . equals ( getEntity ( ) . getId ( ) ) ) ) ) || ( ! ( vds . getStatus ( ) . equals ( getEntity ( ) . getStatus ( ) ) ) ) ; super . setEntity ( value ) ; } 
private void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { METHOD_2 ( ) ; aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_1 < TYPE_2 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return VAR_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( ) , aQuery ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_1 instanceof TYPE_5 ) { return new TYPE_6 ( ( ( TYPE_5 ) ( VAR_1 ) ) , VAR_2 ) ; } else if ( VAR_1 instanceof TYPE_7 ) { return new TYPE_8 ( ( ( TYPE_7 ) ( VAR_1 ) ) , VAR_2 , VAR_3 ) ; } else { return new TYPE_9 ( VAR_1 , VAR_2 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; } 
protected boolean METHOD_1 ( ) { if ( ! ( super . METHOD_1 ( ) ) ) { return false ; } TYPE_1 VAR_1 = new TYPE_1 ( ) ; return validate ( VAR_1 . METHOD_2 ( getParameters ( ) . METHOD_3 ( ) , METHOD_4 ( ) , getParameters ( ) . METHOD_5 ( ) , false ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , TYPE_1 status ) { vm . METHOD_2 ( status ) ; TYPE_1 VAR_1 = vm . getStatus ( ) ; boolean VAR_2 = org.ovirt.engine.core.common.businessentities.VM . METHOD_3 ( VAR_1 ) ; if ( VAR_2 || ( VAR_1 == ( VAR_3 ) ) ) { METHOD_4 ( vm ) ; if ( VAR_2 ) { vm . METHOD_5 ( null ) ; vm . METHOD_6 ( VAR_4 ) ; } } } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( false , true ) ; TYPE_3 < java.lang.String > VAR_2 = new TYPE_3 < java.lang.String > ( ) { public java.lang.String getValue ( java.lang.String VAR_3 ) { return VAR_3 ; } } ; VAR_1 . addColumn ( VAR_2 , VAR_4 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 , true ) ; VAR_1 . METHOD_5 ( new TYPE_4 ( ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { java.lang.String VAR_4 = VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_5 = new TYPE_2 ( ) ; VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) ; VAR_5 . METHOD_3 ( STRING_2 , VAR_4 ) ; VAR_5 . METHOD_3 ( STRING_3 , VAR_3 ) ; TYPE_3 . log ( VAR_5 , VAR_6 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) { VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( VAR_1 ) ) . thenReturn ( METHOD_5 ( VAR_6 ) ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; } 
private void METHOD_1 ( TYPE_1 . AuditLogType VAR_1 , java.lang.String VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( STRING_1 , VAR_2 ) ; TYPE_3 . METHOD_5 ( VAR_3 , VAR_1 , VAR_4 ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.List < java.lang.String > VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( vm . METHOD_4 ( ) , vm . METHOD_5 ( ) ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_2 , VAR_1 ) ; return false ; } return true ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . setId ( VAR_1 ) ; TYPE_2 command = new TYPE_2 ( new TYPE_3 ( VAR_1 , VAR_2 ) ) { protected void METHOD_2 ( ) { } } ; VAR_3 = METHOD_3 ( ) ; TYPE_4 . METHOD_4 ( command . METHOD_5 ( ) ) ; } 
private void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result ) { TYPE_1 . METHOD_2 ( result ) ; TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : result ) { TYPE_1 . assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) , vds . METHOD_4 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; } 
public static boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : VAR_1 ) { if ( ( TYPE_1 . METHOD_2 ( i ) ) && ( TYPE_1 . METHOD_3 ( i . getName ( ) , iface . getName ( ) ) ) ) { return true ; } } return false ; } 
public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 ; switch ( METHOD_2 ( ) . METHOD_3 ( ) ) { case VAR_2 : return null ; case VAR_3 : VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) ; break ; case VAR_4 : VAR_1 = METHOD_6 ( ) . METHOD_7 ( ) ; break ; default : VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) ; VAR_1 . METHOD_8 ( METHOD_6 ( ) . METHOD_7 ( ) ) ; break ; } return VAR_1 ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { model . METHOD_2 ( ( ( java.util.HashMap < org.ovirt.engine.core.compat . Version , java.util.ArrayList < java.lang.String > > ) ( returnValue ) ) ) ; } } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 , java.util.List < TYPE_2 > VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_2 , VAR_6 class , METHOD_3 ( VAR_1 ) ) ; TYPE_1 VAR_7 = METHOD_4 ( VAR_1 , VAR_4 , VAR_3 ) ; return VAR_7 ; } 
public static boolean METHOD_1 ( int value , java.util.List < java.lang.String > VAR_1 ) { boolean VAR_2 = false ; if ( ( value >= 0 ) && ( value <= ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ) { VAR_2 = true ; } else { VAR_1 . add ( TYPE_1 . toString ( ) ) ; VAR_1 . add ( java.lang.String . METHOD_3 ( STRING_1 , VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ; } return VAR_2 ; } 
private java.lang.Integer METHOD_1 ( java.lang.Object entity ) { if ( entity instanceof java.lang.Integer ) { return ( ( java.lang.Integer ) ( entity ) ) ; } if ( ( entity == null ) || ( ! ( entity instanceof java.lang.String ) ) ) { return null ; } java.lang.String VAR_1 = ( ( java.lang.String ) ( entity ) ) ; try { return new java.lang.Integer ( VAR_1 ) ; } catch ( java.lang.Exception e ) { return null ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; try { TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 , STRING_1 , VAR_1 . get ( 0 ) ) ; TYPE_4 . METHOD_3 ( VAR_3 ) ; } catch ( java.lang.Exception e ) { return ; } TYPE_5 . METHOD_4 ( STRING_2 ) ; } 
private void METHOD_1 ( ) { TYPE_1 returnValue = org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 , new TYPE_2 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_4 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_5 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_6 ( ) . getSelectedItem ( ) ) ) ) ) ; if ( ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) { } } 
private void METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 ) { TYPE_1 object = new TYPE_1 ( METHOD_2 ( VAR_1 ) , VAR_2 , INT_1 ) ; TYPE_1 VAR_4 = org.mockito.Mockito . METHOD_3 ( object ) ; org.mockito.Mockito.doReturn ( true ) . when ( VAR_4 ) . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( VAR_4 . validate ( null ) . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_3 ) ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_2 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_3 ) ; TYPE_1 VAR_3 = METHOD_3 ( VAR_1 , vmId ) ; TYPE_1 VAR_4 = METHOD_3 ( VAR_2 , vmId ) ; METHOD_4 ( VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . VM entity = new TYPE_1 . VM ( ) ; entity . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; entity . METHOD_4 ( VAR_2 ) ; TYPE_2 . METHOD_5 ( ) ; TYPE_1 . VM model = TYPE_3 . map ( entity , null ) ; assertEquals ( VAR_2 . toString ( ) , model . METHOD_6 ( ) . getId ( ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { java.util.List < java.lang.String > result = VAR_1 . METHOD_2 ( new java.lang.String [ ] { VAR_2 } , VAR_3 , VAR_4 , STRING_1 ) ; TYPE_2 . METHOD_3 ( ( ( result . size ( ) ) == 2 ) ) ; TYPE_2 . METHOD_3 ( result . METHOD_4 ( VAR_5 ) ) ; TYPE_2 . METHOD_3 ( result . METHOD_4 ( VAR_6 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { if ( VAR_3 . METHOD_2 ( VAR_1 ) ) { return VAR_3 . get ( VAR_1 ) ; } TYPE_1 storageDomain = METHOD_3 ( ) . METHOD_4 ( VAR_1 , VAR_2 ) ; VAR_3 . put ( VAR_1 , storageDomain ) ; return storageDomain ; } 
protected java.lang.Object [ ] METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return new java.lang.Object [ 0 ] ; } else { java.util.ArrayList < java.lang.Object > VAR_1 = new java.util.ArrayList < java.lang.Object > ( ) ; for ( java.lang.Object item : METHOD_2 ( ) ) { TYPE_1 i = ( ( TYPE_1 ) ( item ) ) ; VAR_1 . add ( i . getId ( ) ) ; } return VAR_1 . METHOD_3 ( new java.lang.Object [ ] { } ) ; } } 
public void onSuccess ( final TYPE_1 result ) { VAR_1 . METHOD_1 ( STRING_1 ) ; VAR_2 . METHOD_2 ( ) . onSuccess ( VAR_2 . getModel ( ) , result ) ; if ( ( org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( ) ) != null ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_2 ( ) ; VAR_2 = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; VAR_2 . METHOD_5 ( STRING_2 ) ; VAR_2 . METHOD_6 ( VAR_3 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 from ) { while ( ( from . METHOD_2 ( ) ) == 0 ) { from . METHOD_3 ( TYPE_2 . METHOD_4 ( INT_1 ) ) ; } from . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 class ) ) ; from . METHOD_7 ( ) . METHOD_8 ( INT_2 ) ; from . METHOD_9 ( ) . METHOD_10 ( new TYPE_3 ( ) ) ; return from ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) . getId ( ) ) ; VAR_1 . METHOD_4 ( ( ( java.lang.String ) ( getName ( ) . getEntity ( ) ) ) ) ; VAR_1 . METHOD_5 ( ( ( java.lang.String ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) ; VAR_1 . METHOD_7 ( METHOD_8 ( ) ) ; VAR_1 . METHOD_9 ( METHOD_10 ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : METHOD_3 ( ) . METHOD_4 ( ) ) { try { METHOD_5 ( cluster ) ; } catch ( java.lang.Exception e ) { VAR_1 . METHOD_6 ( STRING_2 , cluster . METHOD_7 ( ) , e ) ; continue ; } } } 
protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { java.util.HashMap < java.lang.String , java.lang.Boolean > VAR_2 = new java.util.HashMap < java.lang.String , java.lang.Boolean > ( ) ; VAR_2 . put ( VAR_3 , true ) ; VAR_1 . get ( i ) . METHOD_3 ( VAR_2 ) ; } return VAR_1 ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } } 
private static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM VAR_1 , TYPE_1 VAR_2 ) { if ( ( VAR_1 . getStatus ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) , VAR_1 . getStatus ( ) . name ( ) , VAR_2 . METHOD_2 ( ) . name ( ) ) ; } } 
public void METHOD_1 ( TYPE_1 result ) { VAR_1 . METHOD_2 ( ) ; boolean VAR_2 = true ; for ( TYPE_2 VAR_3 : result . getReturnValue ( ) ) { VAR_2 = VAR_3 . METHOD_3 ( ) ; if ( ! VAR_2 ) { break ; } } if ( VAR_2 ) { METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; try { VAR_1 = new TYPE_1 ( STRING_1 ) ; } catch ( TYPE_2 e ) { e . METHOD_2 ( ) ; } TYPE_3 . METHOD_3 ( VAR_1 ) ; long VAR_2 = - 1 ; try { VAR_2 = VAR_1 . METHOD_4 ( VAR_3 , INT_1 ) ; } catch ( TYPE_2 e ) { } TYPE_3 . assertEquals ( VAR_2 , INT_2 ) ; } 
private TYPE_1 getModel ( int VAR_1 ) { TYPE_1 model = new TYPE_1 ( ) ; model . setId ( VAR_2 [ VAR_1 ] . toString ( ) ) ; model . METHOD_1 ( VAR_3 [ VAR_1 ] ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . setId ( VAR_2 [ 0 ] . toString ( ) ) ; model . METHOD_2 ( VAR_4 ) ; model . METHOD_3 ( TYPE_3 . name ( ) ) ; return model ; } 
private void METHOD_1 ( TYPE_1 pool ) { VAR_1 . put ( pool . getId ( ) , new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_2 < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > > ( ) ) ; VAR_2 . put ( pool . getId ( ) , new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( ) ) ; VAR_3 . put ( pool . getId ( ) , new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_4 > ( ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; model . METHOD_1 ( model , VAR_1 , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; } 
public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; } 
protected boolean METHOD_1 ( ) { return TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) , TYPE_3 . getParameters ( ) . getStoragePoolId ( ) , TYPE_3 . getParameters ( ) . METHOD_5 ( ) . METHOD_6 ( ) , new java.util.ArrayList < TYPE_4 > ( TYPE_5 . METHOD_7 ( new TYPE_4 [ ] { TYPE_3 . METHOD_8 ( ) } ) ) ) ) . getSucceeded ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; } 
protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; } 
public void METHOD_1 ( TYPE_1 < TYPE_2 > event ) { TYPE_2 value = event . getValue ( ) ; boolean VAR_1 = METHOD_2 ( value ) ; if ( VAR_1 != ( VAR_2 ) ) { ( ( TYPE_3 < TYPE_4 , TYPE_2 , TYPE_5 > . VAR_3 ) ( widget . METHOD_3 ( ) ) ) . METHOD_4 ( ( ! VAR_1 ) ) ; METHOD_5 ( value , widget , VAR_1 ) ; VAR_2 = VAR_1 ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , TYPE_2 < ? extends TYPE_3 > VAR_1 , java.lang.String ... VAR_2 ) { model = METHOD_2 ( model ) ; model = METHOD_3 ( model , VAR_1 , VAR_2 ) ; model = TYPE_4 . METHOD_1 ( TYPE_5 . METHOD_4 ( ) , model , VAR_1 ) ; return model ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = METHOD_1 ( ) ; hosts . add ( 0 , null ) ; VAR_1 . setItems ( hosts ) ; VAR_1 . setIsChangable ( true ) ; METHOD_2 ( true ) ; } 
public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { boolean result = false ; if ( ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) && ( VAR_3 . METHOD_3 ( VAR_1 ) ) ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_4 = VAR_3 . get ( VAR_1 ) ; result = ( VAR_4 == null ) ? false : VAR_4 . METHOD_3 ( VAR_2 ) ; } else { VAR_5 . METHOD_4 ( VAR_6 , VAR_1 ) ; } return result ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : VAR_2 ) { if ( cluster . METHOD_5 ( ) ) { try { METHOD_6 ( cluster ) ; } catch ( java.lang.Exception e ) { VAR_1 . METHOD_7 ( STRING_2 , cluster . METHOD_8 ( ) , e ) ; continue ; } } } } 
public void METHOD_1 ( ) { METHOD_2 ( 1 , VAR_1 ) ; disk = TYPE_1 . METHOD_3 ( ) ; disk . METHOD_4 ( STRING_1 ) ; disk . METHOD_5 ( VAR_1 ) ; validator = org.mockito.Mockito . METHOD_6 ( new TYPE_2 ( disk ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_7 ( ) ; } 
protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( nic ) ; java.lang.String VAR_1 = STRING_2 ; TYPE_1 VAR_2 = METHOD_4 ( METHOD_5 ( nic , METHOD_6 ( nic . getName ( ) , INT_1 , VAR_1 ) ) ) ; METHOD_7 ( VAR_2 , VAR_3 , VAR_1 ) ; } 
private boolean METHOD_1 ( TYPE_1 parameters , TYPE_2 < TYPE_3 . AuditLogType , TYPE_4 > VAR_1 ) { boolean result = METHOD_2 ( parameters , VAR_1 ) ; if ( result ) { result = METHOD_3 ( parameters , VAR_1 ) ; if ( result ) { return true ; } else { TYPE_1 VAR_2 = METHOD_4 ( parameters ) ; METHOD_2 ( VAR_2 , VAR_1 ) ; METHOD_3 ( parameters , VAR_1 ) ; } } else { TYPE_1 VAR_2 = METHOD_4 ( parameters ) ; METHOD_2 ( VAR_2 , VAR_1 ) ; } return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid vmId , final TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < TYPE_2 > VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_2 > VAR_5 = TYPE_3 . METHOD_3 ( VAR_3 , new TYPE_4 < TYPE_2 > ( ) { public boolean METHOD_4 ( TYPE_2 VAR_6 ) { return ( VAR_2 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ) && ( METHOD_7 ( VAR_6 ) ) ; } } ) ; METHOD_8 ( VAR_1 , vmId , new TYPE_5 ( VAR_5 ) ) ; } 
private TYPE_1 < java.lang.Boolean , TYPE_2 < java.lang.String > > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , boolean VAR_3 ) { TYPE_3 VAR_4 = VAR_5 . get ( VAR_1 ) ; if ( VAR_4 != null ) { return new TYPE_1 < java.lang.Boolean , TYPE_2 < java.lang.String > > ( java.lang.Boolean . FALSE , VAR_4 . METHOD_2 ( ) ) ; } if ( ! VAR_3 ) { VAR_5 . put ( VAR_1 , new TYPE_3 ( 0 , VAR_2 , true ) ) ; } return VAR_6 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 ( VAR_1 , version ) ; java.lang.Object value = TYPE_3 . getValue ( TYPE_4 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; } 
protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public TYPE_3 METHOD_3 ( ) { METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( ) ) ; METHOD_7 ( ) . METHOD_8 ( VAR_1 , VAR_2 ) ; METHOD_9 ( ) ; METHOD_4 ( ) . METHOD_10 ( ) ; return null ; } } ) ; TYPE_4 . METHOD_11 ( ) ; } 
protected boolean METHOD_1 ( ) { return ( ( ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) && ( METHOD_3 ( ) ) ) && ( ( TYPE_1 . METHOD_4 ( ) . getStatus ( ) ) == ( VAR_1 ) ) ) && ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , true ) ; TYPE_1 resource = ( ( TYPE_1 ) ( this . resource ) ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( TYPE_2 . getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( getName ( ) ) ; getEntity ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; getEntity ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; getEntity ( ) . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ; } 
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 status ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , status . getValue ( ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
public org.ovirt.engine.core.common.businessentities.VM getVm ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_1 ( ) ) != null ) ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_1 ( ) . getId ( ) ) ) { VAR_1 = vm ; break ; } } return VAR_1 ; } 
private void METHOD_1 ( ) { TYPE_1 entity = ( ( TYPE_1 ) ( METHOD_2 ( ) . getEntity ( ) ) ) ; TYPE_2 params = new TYPE_2 ( entity . METHOD_3 ( ) , org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( ) , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_1 , params , new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 result ) { if ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) { return ; } } } , this ) ; } 
protected boolean METHOD_1 ( ) { TYPE_1 returnValue = TYPE_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , false ) ; if ( ! ( returnValue . METHOD_7 ( ) ) ) { TYPE_3 . getReturnValue ( ) . METHOD_8 ( returnValue . METHOD_9 ( ) ) ; return false ; } return true ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = super . METHOD_1 ( ) ; TYPE_2 VAR_2 = TYPE_3 . getParameters ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( ) ; VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( VAR_3 ) ; VAR_1 . METHOD_9 ( VAR_2 . METHOD_10 ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) ) { return new TYPE_2 ( VAR_2 class ) ; } else if ( STRING_2 . equals ( VAR_1 ) ) { return new TYPE_2 ( VAR_3 class ) ; } else if ( STRING_3 . equals ( VAR_1 ) ) { return new TYPE_2 ( VAR_4 class ) ; } return null ; } 
private static TYPE_1 map ( TYPE_2 VAR_1 , TYPE_1 template ) { TYPE_3 value = TYPE_4 . map ( VAR_1 , ( ( TYPE_3 ) ( null ) ) ) ; if ( value == null ) { return null ; } else { template = ( template == null ) ? new TYPE_1 ( ) : template ; template . METHOD_1 ( value . value ( ) ) ; return template ; } } 
protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; getName ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; } 
public static java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . network > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities . network > VAR_2 = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities . network > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { VAR_2 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) ; } return VAR_2 ; } else { return TYPE_1 . METHOD_3 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 model = new TYPE_1 ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] . toString ( ) ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > list = new java.util.ArrayList < TYPE_2 > ( ) ; for ( TYPE_2 a : ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) { if ( ( a . METHOD_2 ( ) ) == ( VAR_1 ) ) { list . add ( a ) ; } } model . METHOD_3 ( model , list ) ; } 
public void METHOD_1 ( TYPE_1 result ) { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( ( ( java.lang.Boolean ) ( model . METHOD_4 ( ) . getEntity ( ) ) ) ) ; VAR_1 . METHOD_5 ( ( ( java.lang.Boolean ) ( model . METHOD_6 ( ) . getEntity ( ) ) ) ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_7 ( VAR_2 , VAR_1 , new TYPE_3 ( model , VAR_3 , METHOD_2 ( ) . getId ( ) ) , this ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( false , VAR_3 ) ; try { cmd . METHOD_5 ( ) ; } catch ( TYPE_3 e ) { TYPE_4 . assertEquals ( e . METHOD_6 ( ) , VAR_3 ) ; } org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_5 . any ( VAR_5 class ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; } 
public void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.lang.String VAR_3 ) { TYPE_1 VAR_4 = METHOD_2 ( ) . addValue ( STRING_1 , METHOD_3 ( VAR_3 ) ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , vmId ) . addValue ( STRING_5 , TYPE_2 . name ( ) ) ; METHOD_4 ( ) . METHOD_5 ( STRING_6 , VAR_4 ) ; } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = dao . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; TYPE_1 . assertEquals ( STRING_2 , VAR_1 . size ( ) , 1 ) ; TYPE_1 . assertEquals ( STRING_3 , VAR_1 . get ( 0 ) . getId ( ) , VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 value ) { java.lang.String result = value . METHOD_2 ( ) ; if ( ( ( VAR_1 ) > 0 ) && ( ( result . length ( ) ) > ( VAR_1 ) ) ) { result = result . METHOD_3 ( 0 , TYPE_2 . METHOD_4 ( ( ( VAR_1 ) - ( TYPE_3 . length ( ) ) ) , 0 ) ) ; result = result + ( TYPE_3 ) ; } return TYPE_4 . METHOD_5 ( result ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { disk . METHOD_2 ( STRING_1 ) ; disk . METHOD_3 ( STRING_2 ) ; METHOD_4 ( disk , TYPE_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( STRING_1 ) ) , TYPE_1 . METHOD_7 ( STRING_2 ) , TYPE_1 . METHOD_8 ( 1 ) ) ; TYPE_1 . METHOD_9 ( disk ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] VAR_1 = ( ( java.lang.Object [ ] ) ( target ) ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ; VAR_2 . METHOD_1 ( VAR_2 , VAR_3 , ( returnValue == null ) ) ; } 
protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . setId ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( org.mockito.Mockito . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , java.lang.Boolean VAR_1 ) { if ( VAR_1 == null ) { return ; } if ( VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( vmId ) ) ) { TYPE_1 . METHOD_3 ( vmId ) ; } } else { TYPE_1 . METHOD_4 ( vmId ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; TYPE_3 . METHOD_1 ( vms , new TYPE_4 ( ) ) ; VAR_2 . setItems ( vms ) ; VAR_2 . METHOD_2 ( ( ( vms . size ( ) ) == 0 ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( java.lang.String domain : METHOD_2 ( ) ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( domain ) ; TYPE_2 VAR_3 = new TYPE_2 ( domain . METHOD_4 ( ) , true ) ; VAR_2 . setId ( ( VAR_3 != null ? VAR_3 . toString ( ) : null ) ) ; VAR_1 . add ( VAR_2 ) ; } return VAR_1 ; } 
protected java.lang.Object [ ] METHOD_1 ( java.lang.Object [ ] parameters , TYPE_1 VAR_1 ) { if ( parameters == null ) { return null ; } java.lang.Object [ ] VAR_2 = parameters . METHOD_2 ( ) ; int VAR_3 = 0 ; for ( java.lang.Object VAR_4 : parameters ) { if ( VAR_4 instanceof TYPE_2 ) { VAR_2 [ VAR_3 ] = VAR_1 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_4 ) ) ) ; } VAR_3 ++ ; } return VAR_2 ; } 
public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) ; METHOD_4 ( VAR_2 ) ; VAR_3 . METHOD_5 ( ) ; try { METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_4 ) { METHOD_8 ( ( ( VAR_4 . METHOD_9 ( ) . getEntity ( ) ) instanceof TYPE_2 ) ) ; assertEquals ( METHOD_10 ( VAR_2 ) , ( ( TYPE_2 ) ( VAR_4 . METHOD_9 ( ) . getEntity ( ) ) ) . METHOD_11 ( ) ) ; } } 
public static void METHOD_1 ( ) { if ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; java.lang.Integer VAR_4 = VAR_1 < java.lang.Integer > getValue ( VAR_5 ) ; TYPE_1 . get ( VAR_6 class ) . METHOD_3 ( VAR_7 . instance , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_4 , VAR_4 , VAR_8 ) ; VAR_3 . METHOD_2 ( STRING_3 ) ; } } 
public static < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( TYPE_3 VAR_1 , TYPE_4 < TYPE_1 > VAR_2 ) { assert VAR_1 != null : STRING_1 ; for ( TYPE_2 list : VAR_1 . METHOD_2 ( ) ) { if ( ( list != null ) && ( list . METHOD_3 ( ) . equals ( VAR_2 ) ) ) { return ( ( TYPE_1 ) ( list ) ) ; } } throw new TYPE_5 ( ( ( STRING_2 + VAR_2 ) + STRING_3 ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , java.lang.String value , TYPE_3 VAR_2 , TYPE_4 event , TYPE_5 < java.lang.String > VAR_3 ) { VAR_4 . METHOD_1 ( context , VAR_1 , value , event , VAR_3 ) ; super . METHOD_1 ( context , VAR_1 , value , VAR_2 , event , VAR_3 ) ; } 
public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_3 = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ; TYPE_2 . METHOD_1 ( VAR_3 , new TYPE_3 ( ) ) ; TYPE_4 VAR_4 = ( ( TYPE_4 ) ( VAR_1 ) ) ; VAR_4 . setItems ( VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 status = VAR_1 ; cmd . METHOD_2 ( status ) ; java.util.List < java.lang.String > VAR_2 = cmd . getReturnValue ( ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , TYPE_3 . toString ( ) ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 1 ) , java.lang.String . METHOD_4 ( STRING_1 , status ) ) ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id , java.lang.String VAR_1 , TYPE_2 type ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( id . toString ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( type ) ; return VAR_2 ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; } 
private void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( METHOD_2 ( ) ) ) ; final TYPE_1 VAR_1 = diskImage . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_5 ( ) { METHOD_6 ( ) . METHOD_7 ( diskImage . METHOD_8 ( ) , VAR_1 ) ; METHOD_6 ( ) . METHOD_9 ( ) ; diskImage . METHOD_10 ( VAR_2 ) ; TYPE_5 . METHOD_11 ( diskImage . METHOD_12 ( ) , VAR_2 ) ; return null ; } } ) ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM VAR_2 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; TYPE_1 VAR_3 = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 ) ) . thenReturn ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ; org.mockito.Mockito.when ( METHOD_5 ( ) . METHOD_6 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_3 . METHOD_7 ( VAR_5 class ) ; TYPE_3 . METHOD_8 ( ) . when ( VAR_5 class ) ; TYPE_4 . METHOD_9 ( VAR_2 ) ; return VAR_2 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; } 
private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } } 
protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; for ( TYPE_1 pool : result ) { TYPE_2 . assertEquals ( VAR_1 , pool . METHOD_5 ( ) ) ; } } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { TYPE_1 VAR_2 = null ; for ( TYPE_1 storageDomain : VAR_1 ) { if ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_3 ) ) { if ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_4 ) ) { METHOD_3 ( storageDomain ) ; } } else { VAR_2 = storageDomain ; } } if ( VAR_2 != null ) { METHOD_3 ( VAR_2 ) ; } } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; org.ovirt.engine.core.compat . Version VAR_1 = vm . METHOD_2 ( ) ; if ( VAR_1 == null ) { METHOD_3 ( false ) ; } else { METHOD_3 ( ( ( java.lang.Boolean ) ( ! ( TYPE_1 . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) , VAR_1 ) . isEmpty ( ) ) ) ) ) ; } } 
public boolean METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; return ( vm != null ) && ( ( ( ( vm . METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_3 ) ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 . VdcQueryReturnValue response = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) ; if ( response . getSucceeded ( ) ) { model . METHOD_1 ( ( ( java.util.ArrayList < TYPE_3 > ) ( response . getReturnValue ( ) ) ) , false ) ; model . METHOD_2 ( STRING_1 ) ; } else { model . METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ; } } 
public static void METHOD_1 ( ) { if ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; TYPE_1 . get ( VAR_4 class ) . METHOD_3 ( VAR_5 . instance , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_1 < java.lang.Integer > getValue ( VAR_6 ) , VAR_1 < java.lang.Integer > getValue ( VAR_6 ) , VAR_7 ) ; VAR_3 . METHOD_2 ( STRING_3 ) ; } } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) . setEntity ( true ) ; METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . get ( vm . METHOD_6 ( ) ) ) ; METHOD_3 ( ) . METHOD_7 ( vm . METHOD_8 ( ) ) ; METHOD_9 ( ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , java.lang.String VAR_1 , java.util.List < java.lang.String > VAR_2 ) { java.lang.String VAR_3 = ( VAR_1 != null ) ? VAR_1 : vm . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_4 = METHOD_3 ( ) . METHOD_1 ( vm . METHOD_4 ( ) , VAR_3 ) ; if ( ! ( VAR_4 . isEmpty ( ) ) ) { METHOD_3 ( ) . METHOD_5 ( VAR_4 , VAR_2 ) ; return false ; } return true ; } 
public static < TYPE_1 extends TYPE_2 . VdcActionParametersBase > boolean METHOD_1 ( TYPE_2 . VdcActionType action , TYPE_1 parameters , TYPE_3 VAR_1 ) { return ( TYPE_4 . METHOD_2 ( TYPE_5 . METHOD_3 ( action . name ( ) , VAR_2 ) , parameters . METHOD_4 ( ) , VAR_1 . METHOD_4 ( ) ) ) != null ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_1 . get ( 0 ) . METHOD_4 ( ) , STRING_2 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 value ) { TYPE_3 resource = VAR_1 . METHOD_2 ( METHOD_3 ( value ) ) ; if ( ( resource == null ) || ( ! ( resource instanceof TYPE_1 ) ) ) { return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( METHOD_4 ( value ) ) ) ) ; } return ( ( TYPE_1 ) ( resource ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , VAR_3 [ 0 ] ) ) ; METHOD_6 ( resource . METHOD_7 ( new TYPE_1 ( ) ) ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 value , TYPE_3 VAR_1 , java.lang.String id ) { if ( ! ( METHOD_2 ( value ) ) ) { return ; } VAR_1 . METHOD_3 ( ( ( STRING_1 + id ) + STRING_2 ) ) ; TYPE_4 < TYPE_5 < TYPE_2 , ? > > VAR_2 = VAR_3 . METHOD_4 ( ) ; while ( VAR_2 . METHOD_5 ( ) ) { METHOD_1 ( context , value , VAR_1 , VAR_2 . METHOD_6 ( ) , id ) ; } VAR_1 . METHOD_3 ( STRING_3 ) ; } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM object ) { final org.ovirt.engine.core.common.businessentities.VDS vds = METHOD_2 ( ) . getEntity ( ) ; if ( ( object . getStatus ( ) . equals ( VAR_1 ) ) && ( vds . getId ( ) . equals ( object . METHOD_3 ( ) ) ) ) { return VAR_2 ; } return object . getStatus ( ) ; } 
protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { METHOD_3 ( STRING_1 ) ; } if ( ! ( VAR_1 . METHOD_4 ( ) ) ) { METHOD_3 ( STRING_2 ) ; } if ( ! ( VAR_1 . METHOD_5 ( ) ) ) { METHOD_3 ( STRING_3 ) ; } if ( ! ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ) { METHOD_3 ( STRING_4 ) ; } METHOD_8 ( VAR_1 . METHOD_6 ( ) . getId ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_5 . METHOD_3 ( ) ) ) . thenReturn ( null ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_6 . METHOD_3 ( ) ) ) . thenReturn ( null ) ; TYPE_3 . METHOD_4 ( validator . METHOD_5 ( VAR_1 . getId ( ) ) , TYPE_4 . METHOD_6 ( ) ) ; } 
public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) { return VAR_4 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 < TYPE_2 . ValidationResult > VAR_2 ) { org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_4 ) ) . thenReturn ( ( VAR_1 ? TYPE_3 . METHOD_4 ( ) : TYPE_3 . METHOD_5 ( null ) ) ) ; TYPE_4 . METHOD_6 ( validator . METHOD_7 ( ) , VAR_2 ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 . Disk > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( new TYPE_1 . DiskImage ( ) ) ; TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , VAR_1 , null ) , true , null ) ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_2 class ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = new TYPE_3 ( VAR_4 ) . METHOD_2 ( ) ; this . VAR_5 = new TYPE_4 ( VAR_3 ) ; this . VAR_6 = new TYPE_5 ( VAR_3 , this . VAR_5 ) ; VAR_2 . put ( VAR_7 , VAR_8 ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( new java.util.ArrayList ( METHOD_5 ( ) ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; VAR_4 . METHOD_4 ( new java.util.ArrayList ( METHOD_5 ( ) ) ) ; return new java.util.ArrayList ( TYPE_2 . METHOD_6 ( VAR_3 , VAR_4 ) ) ; } 
private void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { TYPE_1 . METHOD_3 ( this ) ; } if ( ! ( METHOD_4 ( ) ) ) { if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { TYPE_2 . METHOD_5 ( this ) ; } TYPE_1 . METHOD_6 ( ) ; } } 
protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; } 
protected void METHOD_1 ( ) { if ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) . VAR_1 ) ) { return ; } TYPE_2 VAR_2 = new TYPE_2 ( vds . getId ( ) ) ; VAR_2 . METHOD_4 ( vds ) ; VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_3 ( ) . VAR_1 ) ; VAR_3 . log ( VAR_2 , VAR_4 ) ; } 
public void METHOD_1 ( ) { TYPE_1 params = METHOD_2 ( ) ; org.mockito.Mockito.when ( params . METHOD_3 ( ) ) . thenReturn ( vmId ) ; TYPE_2 < TYPE_1 > VAR_1 = METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; java.util.List < TYPE_3 > VAR_2 = ( ( java.util.List < TYPE_3 > ) ( VAR_1 . METHOD_6 ( ) . getReturnValue ( ) ) ) ; TYPE_4 . METHOD_7 ( STRING_1 , VAR_2 . METHOD_8 ( VAR_3 ) ) ; TYPE_4 . assertEquals ( STRING_2 , 1 , VAR_2 . size ( ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , java.lang.Object > VAR_2 ) { java.util.Map < java.lang.String , java.lang.String > VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( VAR_3 . size ( ) ) > 0 ) { VAR_2 . put ( VAR_4 , VAR_3 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { for ( org.ovirt.engine.core.common.businessentities . Disk disk : vm . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( ( disk . METHOD_4 ( ) ) == ( VAR_1 ) ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( disk ) ) ; diskImage . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . METHOD_7 ( diskImage . METHOD_8 ( ) , diskImage . METHOD_9 ( ) ) ) ; } } } 
public boolean equals ( java.lang.Object obj ) { if ( obj == null ) { return false ; } if ( ( this ) == obj ) { return true ; } if ( ( obj . METHOD_1 ( ) ) != ( this . METHOD_1 ( ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 ) { java.util.Map < java.lang.String , TYPE_1 > VAR_2 = new java.util.HashMap < > ( ) ; TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 , VAR_2 ) ; VAR_1 . put ( VAR_3 , new java.util.ArrayList ( VAR_2 . METHOD_2 ( ) ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) , VAR_3 . METHOD_7 ( ) ) ; METHOD_8 ( VAR_5 , new TYPE_5 ( VAR_4 , VAR_1 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public TYPE_1 METHOD_1 ( ) { METHOD_2 ( null ) ; METHOD_3 ( null ) ; if ( METHOD_4 ( ) ) { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_5 ( ) . METHOD_6 ( ) , METHOD_5 ( ) . getStoragePoolId ( ) , VAR_2 ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ; METHOD_9 ( ) . METHOD_10 ( VAR_3 ) ; METHOD_11 ( ) ; } return new TYPE_1 ( VAR_4 , VAR_5 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; } 
public void METHOD_1 ( ) { dao . METHOD_2 ( new TYPE_1 ( new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_3 ( ) . toString ( ) ) , VAR_1 . METHOD_4 ( ) ) ) ; TYPE_2 result = dao . get ( new TYPE_1 ( VAR_1 . METHOD_3 ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ; TYPE_3 . METHOD_5 ( result ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( METHOD_2 ( ) ) ; command = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , null ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( VAR_2 ) . METHOD_5 ( TYPE_3 . any ( VAR_3 . String class ) , TYPE_3 . any ( VAR_4 . Guid class ) ) ; return command ; } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : VAR_1 ) { if ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_3 ) ) { VAR_2 . add ( storageDomain ) ; } } return VAR_2 ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } 
public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_1 ) ) ; METHOD_2 ( VAR_2 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_2 ) ) ; METHOD_2 ( VAR_3 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_3 ) ) ; METHOD_2 ( VAR_4 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_4 ) ) ; METHOD_2 ( VAR_5 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_5 ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 . AsyncQuery VAR_1 = new TYPE_1 . AsyncQuery ( ) ; VAR_2 = new TYPE_2 ( ) { public void onSuccess ( java.lang.Object returnValue ) { TYPE_3 < TYPE_4 > VAR_3 = ( ( TYPE_3 < TYPE_4 > ) ( returnValue ) ) ; VAR_4 = TYPE_5 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( ) ; } } ; TYPE_6 . getInstance ( ) . METHOD_4 ( getEntity ( ) . getStoragePoolId ( ) , VAR_1 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; } 
private void METHOD_1 ( final TYPE_1 resource ) { resource . METHOD_2 ( VAR_1 ) ; resource . METHOD_3 ( VAR_2 ) ; resource . METHOD_4 ( VAR_3 ) ; if ( resource instanceof TYPE_2 ) { ( ( TYPE_2 ) ( resource ) ) . METHOD_5 ( VAR_4 ) ; } else if ( resource instanceof TYPE_3 ) { ( ( TYPE_4 ) ( resource ) ) . METHOD_5 ( VAR_4 ) ; } resource . METHOD_6 ( VAR_5 ) ; VAR_6 . add ( resource ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; } 
private TYPE_1 . DiskImage METHOD_1 ( ) { TYPE_1 . DiskImage disk = new TYPE_1 . DiskImage ( ) ; disk . setId ( VAR_1 ) ; TYPE_2 . METHOD_2 ( VAR_2 ) ; disk . METHOD_3 ( new java.util.ArrayList ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) ; return disk ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( vm == null ) { return ; } TYPE_2 VAR_1 = ( ( TYPE_2 ) ( model ) ) ; VAR_1 . METHOD_2 ( VAR_2 , new TYPE_3 ( vm . getId ( ) ) ) ; } } 
protected boolean METHOD_1 ( ) { boolean returnValue = super . METHOD_1 ( ) ; TYPE_1 VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ; if ( returnValue && ( VAR_1 == null ) ) { addCanDoActionMessage ( VAR_2 ) ; returnValue = false ; } else if ( returnValue && ( ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) < 0 ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; } 
protected void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; } catch ( java.lang.Exception e ) { java.lang.String VAR_1 = TYPE_2 . METHOD_5 ( e . METHOD_6 ( ) ) . map ( TYPE_3 : : METHOD_7 ) . METHOD_8 ( STRING_1 ) ; log . error ( STRING_2 , VAR_1 ) ; TYPE_1 . METHOD_2 ( ) . METHOD_9 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( ) . METHOD_10 ( false ) ; } } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( java.util.List < TYPE_1 . DiskImage > VAR_1 ) { java.util.List < TYPE_1 . DiskImage > VAR_2 = TYPE_2 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) , VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = TYPE_3 . METHOD_4 ( getParameters ( ) . getStoragePoolId ( ) , VAR_2 ) ; VAR_1 . METHOD_5 ( VAR_2 ) ; return storageDomain ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } } 
public final TYPE_1 METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( 0 ) ; java.lang.String VAR_3 = METHOD_2 ( VAR_4 . String , name , VAR_1 ) . toString ( ) ; try { VAR_2 = new TYPE_2 ( STRING_1 ) . METHOD_3 ( VAR_3 ) ; } catch ( java.lang.Exception e ) { } return VAR_2 ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; } 
protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ( ( TYPE_3 < java.lang.String > ) ( returnValue ) ) ) ; VAR_1 . add ( STRING_1 ) ; java.lang.String VAR_2 = getModel ( ) . METHOD_1 ( ) . getSelectedItem ( ) ; getModel ( ) . METHOD_1 ( ) . setItems ( VAR_1 ) ; getModel ( ) . METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ; } } 
void METHOD_1 ( TYPE_1 constants ) { VAR_1 . METHOD_2 ( constants . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( constants . METHOD_5 ( ) ) ; VAR_3 . METHOD_4 ( constants . METHOD_6 ( ) ) ; VAR_4 . METHOD_4 ( constants . METHOD_7 ( ) ) ; VAR_5 . METHOD_4 ( constants . METHOD_8 ( ) ) ; VAR_6 . METHOD_2 ( constants . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
public static void METHOD_1 ( final TYPE_1 . VdcActionType VAR_1 , final TYPE_1 . VdcActionParametersBase parameters , final TYPE_2 VAR_2 , final java.lang.Object VAR_3 , final boolean VAR_4 ) { org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 , parameters , ( VAR_2 != null ? VAR_2 : VAR_5 ) , VAR_3 , VAR_4 ) ; } 
public int METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 ++ ) ) ; VAR_3 . METHOD_2 ( ( VAR_1 ++ ) ) ; VAR_4 . METHOD_2 ( ( VAR_1 ++ ) ) ; VAR_1 = VAR_5 . METHOD_1 ( VAR_1 ) ; VAR_6 . METHOD_2 ( ( VAR_1 ++ ) ) ; VAR_7 . METHOD_2 ( ( VAR_1 ++ ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) ; METHOD_4 ( cmd ) ; METHOD_5 ( false , VAR_2 ) ; TYPE_1 . METHOD_6 ( cmd . validate ( ) ) ; cmd . METHOD_7 ( ) ; TYPE_1 . assertEquals ( cmd . METHOD_8 ( ) , VAR_3 ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < TYPE_1 . DiskImage > VAR_1 ) { for ( TYPE_1 . DiskImage disk : VAR_1 ) { disk . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) ; } METHOD_4 ( storageDomain . METHOD_5 ( ) , VAR_1 . get ( 0 ) ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; } 
protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) { TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ; } VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; } 
protected void METHOD_1 ( TYPE_1 model , int VAR_1 ) { assertEquals ( TYPE_2 . value ( ) , model . METHOD_2 ( ) ) ; assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; assertEquals ( 1 , model . METHOD_3 ( ) . METHOD_3 ( ) . size ( ) ) ; assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . METHOD_3 ( ) . METHOD_3 ( ) . get ( 0 ) . getId ( ) ) ; METHOD_4 ( model ) ; } 
private void METHOD_1 ( ) { VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.when ( command . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . toString ( ) , VAR_2 , VAR_3 , VAR_4 . VM ) ) ; TYPE_1 . METHOD_5 ( VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . toString ( ) , VAR_5 , VAR_3 , VAR_4 . VM ) ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; } 
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ; final java.util.ArrayList < TYPE_3 . VdcActionParametersBase > VAR_4 = new java.util.ArrayList < > ( ) ; VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ) ; TYPE_4 . METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_5 , VAR_4 ) ; } 
protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( new TYPE_1 ( ) { public void METHOD_8 ( TYPE_2 VAR_1 , java.lang.Object sender , TYPE_3 args ) { METHOD_2 ( ) ; } } ) ; METHOD_9 ( ) . METHOD_10 ( ) . METHOD_7 ( new TYPE_1 ( ) { public void METHOD_8 ( TYPE_2 VAR_1 , java.lang.Object sender , TYPE_3 args ) { METHOD_11 ( new TYPE_4 ( VAR_2 ) ) ; } } ) ; } 
public static final TYPE_1 < org.ovirt.engine.core.common.businessentities . Disk > METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 < org.ovirt.engine.core.common.businessentities . Disk > column = new TYPE_1 < org.ovirt.engine.core.common.businessentities . Disk > ( ) { protected TYPE_3 METHOD_2 ( org.ovirt.engine.core.common.businessentities . Disk object ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . METHOD_3 ( ) ; } } ; return ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities . Disk > ) ( TYPE_4 . METHOD_4 ( column , VAR_1 ) ) ) ; } 
public static boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( vm == null ) { return false ; } boolean VAR_1 = TYPE_1 . METHOD_2 ( vm . METHOD_3 ( ) , vm . METHOD_4 ( ) ) ; return ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_5 ( VAR_2 , vm . METHOD_4 ( ) . toString ( ) ) ) ) && VAR_1 ; } 
public void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( VAR_2 , STRING_1 ) ; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = METHOD_2 ( ) . get ( VAR_1 . METHOD_3 ( ) ) ; METHOD_4 ( cluster , VAR_1 . getName ( ) ) ; java.util.List < TYPE_3 > VAR_3 = METHOD_5 ( ) . METHOD_6 ( VAR_1 . getId ( ) ) ; METHOD_7 ( cluster , VAR_3 ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_2 = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) ; TYPE_4 VAR_3 = ( ( TYPE_4 ) ( model ) ) ; VAR_3 . setItems ( VAR_2 ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String [ ] VAR_2 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_3 = null ; if ( VAR_2 != null ) { VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; } else { VAR_3 = VAR_4 . METHOD_1 ( VAR_1 ) ; } TYPE_1 VAR_5 = new TYPE_1 ( VAR_3 ) ; return VAR_5 ; } catch ( TYPE_2 VAR_6 ) { throw new TYPE_3 ( VAR_6 ) ; } } 
private void METHOD_1 ( TYPE_1 . AddVmCommand < TYPE_2 > command ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_1 . setId ( VAR_3 ) ; VAR_2 . setId ( VAR_4 ) ; VAR_5 . put ( VAR_3 , VAR_1 ) ; VAR_5 . put ( VAR_4 , VAR_2 ) ; } 
public void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 < org.ovirt.engine.core.common.businessentities.StorageDomain > list = ( ( TYPE_3 < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( sender ) ) ; if ( ( list . getSelectedItem ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) && ( METHOD_4 ( ) ) ) { METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; } else { METHOD_5 ( STRING_1 ) ; } } 
